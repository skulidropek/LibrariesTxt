internal class  : object {
    private int ;
    public int ();
    public void (int );
}
internal class  :  {
    public (Byte[] , long );
    public Byte[] ( ,  );
    public Byte[] (Byte[] );
    private static void ( , Byte[] , int , Nullable`1<int> );
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
internal class  : Shape {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Picture ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    internal (ShapeCollection );
    internal Picture ();
    internal virtual int ();
    internal virtual void (int );
    internal  ();
    public Byte[] ();
    public void (Byte[] );
    public  ();
    internal virtual int ();
    internal virtual void (int );
    internal int ();
    internal void (int );
    internal bool ();
    public string ();
    public void (string );
    internal string ();
    internal void (string );
}
internal class  :  {
    []
private  ;
    []
private Workbook ;
    internal ( , Workbook );
    private void ();
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private Byte[] ;
    private int ;
    private int ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private int ;
    private bool ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private int ;
    public ( ,  , int , bool );
    public ( ,  , int );
    public sealed virtual Byte[] ();
    public virtual string ();
    public virtual void (bool ,  );
    private bool (Byte[] , Byte[] );
    private void (Byte[] );
    public virtual void (Byte[] );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual void ();
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public virtual bool ();
    private void (int , Byte[] );
    private void (long , Byte[] );
    private Byte[] (Byte[] , int , int , int );
}
internal enum  : Enum {
    public int value__;
}
[("And")]
[("Or")]
internal enum  : Enum {
    public byte value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal object ;
    internal int ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal CellValueType ;
    private int ;
    private int ;
    private bool ;
    internal (object , int , string );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal string ();
    internal string ();
    internal bool ( );
    internal string (Chart );
}
internal class  : object {
    internal int ;
    internal CellArea ;
}
internal class  : object {
    private byte ;
    private byte ;
    private Byte[] ;
    private byte ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private byte ;
    private byte ;
    private byte ;
    private byte ;
    public virtual int (Byte[] , int );
    public virtual string ();
    public virtual int ();
    public virtual void ( );
    private void (Byte[] , Byte[] );
    public virtual void ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private static int ;
    [DebuggerBrowsableAttribute("0")]
private static int ;
    [DebuggerBrowsableAttribute("0")]
private static int ;
    private static ();
    internal static void ( );
    internal static void ( );
    private static void ( );
    internal static PointF[] ( );
    internal static PointF[] ( );
    internal static PointF ( );
    private static void ( ,  ,  );
    private static int ( , Size );
    private static void ( ,  , Rectangle , Rectangle& , bool );
    private static void ( ,  , Rectangle& );
    private static void ( , Rectangle , bool , Size , Size , int );
    private static void ( );
    private static void ( );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    public Stream ();
    public long ();
    public long ();
    public void (long );
    public virtual int ReadByte();
    public virtual int Read(Byte[] , int , int );
    public virtual void WriteByte(byte );
    public virtual void Write(Byte[] , int , int );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public long ();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual void Close();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal int ();
    public void ( );
    internal  (int );
    internal void ( , CopyOptions );
}
internal class  : object {
    internal bool ;
    internal  ;
    internal LineFormat ;
    private string ;
    private bool ;
    private bool ;
    private FontUnderlineType ;
    private string ;
    private int ;
    private string ;
    private double ;
    private int ;
    private string ;
    private  ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    internal  ;
    internal string ();
    internal void (string );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal FontUnderlineType ();
    internal void (FontUnderlineType );
    internal string ();
    internal void (string );
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal double ();
    internal void (double );
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal  ();
    internal void ( );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool ();
    public void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal  ();
    internal void ( , double );
    internal void (Style );
    internal void (Font );
    internal void (Font );
    internal bool ();
}
internal class  :  {
    protected  ;
    protected  ;
    protected Byte[] ;
    protected Byte[] ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected BigInteger ;
    protected BigInteger ;
    protected Byte[] ;
    protected  ;
    [ObsoleteAttribute("Use constructor taking an explicit 'groupVerifier' argument")]
public (int , IList , Byte[] , Byte[] );
    public (int , IList ,  , Byte[] , Byte[] );
    public (int , IList , Byte[] ,  );
    protected static  (int );
    public virtual void ( );
    public virtual void ();
    public virtual void ( );
    public virtual void ( );
    public virtual bool ();
    public virtual Byte[] ();
    public virtual void (Stream );
    public virtual void ( );
    public virtual void ( );
    public virtual void (Stream );
    public virtual void (Stream );
    public virtual Byte[] ();
    protected virtual  ( ,  ,  );
}
internal class  : object {
    private  ;
    private bool ;
    private  ;
    private  ;
    private  ;
    []
private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    private  ;
    public (string ,  );
    public (Stream ,  );
    public ( );
    public void ();
    public void (float , float , bool );
    public void (SizeF , bool );
    public void ();
    private void (Stream ,  , bool );
    private string (Byte[] );
    private string (PdfCompliance );
    private void (int );
    public  ();
    public Stream ();
    public  ();
    public  ();
    public void ( );
    public  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal Byte[] ();
    internal Byte[] ();
    internal PdfSecurityOptions ();
    internal  ();
    internal void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( );
    private ( ,  ,  );
    public ( ,  , [] );
    public ( ,  ,  );
    public static  (object );
    public  ();
    public  ();
    public [] ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public string ;
    public string ;
    public string ;
    public string ;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    internal ( );
    internal virtual void ( );
    private void (ExternalConnection , Stream );
    private void (ExternalConnection , Stream );
    private void (ExternalConnection , Stream );
    private void (int , string , Stream );
    private void (DBConnection , Stream );
    private void (ConnectionParameterCollection , Stream );
    private void ( , Stream );
    private void (WebQueryConnection , Stream );
}
internal class  : object {
    private long ;
    private long ;
    internal bool (long );
    internal void (long );
    internal void ();
}
internal class  : object {
    public static Byte[] ( );
}
internal class  : object {
    private  ;
    private ArrayList ;
    internal  ();
    internal void ( );
    internal ArrayList ();
    internal void (ArrayList );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public (string ,  );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private [][] ;
    public ([][] );
    public [][] ();
    public virtual byte ();
    public virtual bool ();
    public virtual  ();
    public virtual bool ( ,  );
    internal static [] ( );
    public virtual  ( );
    public virtual void ( );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual  (Char[] ,  );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
}
internal class  :  {
    private  ;
    internal ( );
    internal void ();
    private void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ( );
    public virtual bool (object );
    public virtual void CopyTo(Array , int );
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    public virtual bool ();
    public virtual bool ();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private ushort ;
    private ArrayList ;
    private ArrayList ;
    private Byte[] ;
    private Byte[] ;
    internal List`1<Byte[]> ;
    internal ushort ();
    internal void (ushort );
    internal ArrayList ();
    internal void (ArrayList );
    internal ArrayList ();
    internal Byte[] ();
    internal void (Byte[] );
    internal Byte[] ();
    internal void (Byte[] );
    internal void ( );
    internal void ( );
    internal void ( );
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal abstract class  : object {
    protected  ;
    protected  ;
    protected [] ;
    protected [] ;
    protected int ;
    protected int ;
    protected bool ;
    public ( ,  , [] , int , int );
    protected ( );
    public abstract virtual  ( );
    public virtual void ( );
    public virtual bool ();
    public virtual void (bool );
    public sealed virtual  ();
}
internal class  : object {
    private  ;
    internal ( );
    internal void ( , bool );
    private void ( );
    private void (Hashtable );
    private void ( , string );
    private void ( , string );
    private void ( , string );
    private void ( , string );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( );
    [("True")]
internal void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( , string );
    private void ( , string ,  );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private void ( );
}
internal class  :  {
    protected virtual  ( , BigInteger );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private XmlSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
[]
private Cells ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    internal (Workbook , SaveOptions );
    private XmlSaveOptions (SaveOptions );
    public sealed virtual void ();
    public sealed virtual void Dispose();
    public sealed virtual void (Stream );
    private void (int );
    private static string (string );
    private void ();
    private void ( ,  , int );
    private void ( ,  , int );
    private void ( );
    private void (int );
    private bool ([] );
    private void ([] , Row );
    private void (Row , [] , int , int );
    private int (String[] , int , int , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , float , float ,  );
    private void ( ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private [] ;
    public ( );
    public ( , [] );
    public ( );
    public ([] );
    public static  (object );
    public  ();
    public [] ();
    public virtual  ();
}
internal class  : object {
    private long ;
    private int ;
    private Byte[] ;
    private int ;
    private bool ;
    public (Byte[] , bool );
    public void (Byte[] , bool );
    public int ();
    public long ();
    public int ();
    public void (int );
    public void (int );
    public int (int );
    public void (int );
    public int (int );
    private int ();
    public long (byte , byte );
}
internal class  : object {
    internal Hashtable ;
    internal Workbook ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal CopyOptions ;
    internal Hashtable ;
    internal Hashtable ;
    internal (Workbook );
    internal string (string );
    internal string (string );
    internal void (string ,  );
    internal Border (string );
    internal void (string ,  );
    internal Style (string , string );
    internal int (string , string );
}
internal class  :  {
    private UInt32[] ;
    private UInt32[] ;
    private int ;
    private UInt32[] ;
    private static UInt32[] ;
    private static ();
    public ( );
    private void ( );
    public virtual string ();
    public virtual int ();
    public virtual  ();
    public virtual void ( );
    public virtual void ();
    public virtual int (Byte[] , int );
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    private UInt32 (UInt32 );
    private UInt32 (UInt32 );
    private UInt32 (UInt32 , UInt32 , UInt32 );
    private UInt32 (UInt32 , UInt32 , UInt32 );
    private UInt32 (UInt32 , UInt32 , UInt32 );
    private UInt32 (UInt32 , UInt32 , UInt32 );
    internal virtual void ();
}
internal class  : object {
    private double ;
    private double ;
    private [] ;
    private bool ;
    private double ;
    private double ;
    internal (double , [] );
    internal (double , double , [] );
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    internal void (ushort , ushort , ushort , double );
}
internal class  : object {
    private int ;
    private string ;
    internal bool ;
    []
internal PivotTable ;
    []
internal  ;
    internal ( );
    internal ( , int , string );
    internal ( , PivotTable );
    internal void ( );
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
}
internal class  :  {
    private  ;
    private bool ;
    internal ( , string , string , bool , int );
    protected virtual void ( , DateTime , double , StringBuilder );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private PivotTable ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    internal ( , PivotTable , string );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , Int32[] );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , PivotArea );
    private static void ( , PivotAreaType );
    private void ( , PivotAreaFilter , bool );
    private int ();
    private void ( );
    [("True")]
private void ( );
    private void ( , PivotFieldType );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private int (PivotField );
    [("True")]
private void ( , PivotField );
    private bool ();
    [("True")]
private void ( , PivotField , int );
    [("True")]
private void ( , PivotField );
    [("True")]
private void ( , PivotField );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private void ( , int );
    [("True")]
private void ( , PivotField );
    private void ( , PivotField );
    [("True")]
private void ( , string , string );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
}
internal class  :  {
    protected internal UInt64[] ;
    public (BigInteger );
    protected internal (UInt64[] );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  : object {
    private static Regex ;
    private static ();
    internal static string (string );
    internal static string (Color );
    internal static string (DashCap );
    internal static string (LineCap );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    public ( ,  , [] ,  ,  );
    private ( , [] , int , int );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    internal void (Bar3DShapeType );
    internal void (ChartType );
}
internal class  : object {
    public static string (string , string );
    public static string (string , string , string );
    public static string (string , string , string );
    public static string (int );
    private static  (bool , string , string );
}
internal class  : object {
    private  ;
    private int ;
    []
private  ;
    []
private Worksheet ;
    []
private Chart ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    []
private  ;
    private  ;
    internal ( ,  , Worksheet );
    internal void ( );
    private void ();
    private void ();
    private void ();
    private void ();
    private bool (ChartType );
    private void ();
    private ChartType ();
    private void ();
    private void ();
    private void ( );
    private void ();
}
internal class  : object {
    [("False")]
private static Byte[] (string );
    public sealed virtual  (object ,  );
}
internal class  : object {
    private BigInteger ;
    private  ;
    private  ;
    private IList ;
    private  ;
    private  ;
    private Char[] ;
    private  ;
    private int ;
    private  ;
    private  ;
    private  ;
    public (BigInteger );
    public  ( );
    public  ( );
    public  ( );
    public  (BigInteger );
    public  ( ,  );
    public  ( , bool ,  );
    public  ( , bool , Byte[] );
    public  ( );
    public  ( );
    public  ( );
    public  (int ,  );
    public  ( );
    public  ();
    public  ( , Char[] );
    public  ( );
    public  ( );
    public  ();
}
internal abstract class  : object {
    internal static int ;
    private static ();
    internal static int (int , bool );
    internal static int (int , int );
    internal static int (int , int , bool );
    internal static int (int , int );
    internal static int (int );
    internal static int (int );
    internal static int (int );
    public static int (int );
    public static void (int ,  );
    public static void (int ,  , int );
    public static void (int , StringBuilder );
    public static int (int , Char[] , int );
}
internal class  : object {
    internal static float (float , Font , float ,  ,  );
    internal static float (string , float , float );
    internal static double (double , Font , double );
    internal static float (string , double );
}
internal class  : object {
    private  ;
    public ( );
    public (Byte[] );
    private static  (Byte[] );
    public  ();
    public Byte[] ();
    public Byte[] ();
    public  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private Byte[] ;
    private Image ;
    private int ;
    private bool ;
    private double ;
    private double ;
    private double ;
    private double ;
    private  ;
    private  ;
    private  ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    public Byte[] ();
    public void (Byte[] );
    public Size ();
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    private double (double , double , double );
    public double ();
    public void (double );
    public bool ( );
    internal Brush (GraphicsPath , float );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : object {
    private double ;
    private int ;
    private  ;
    public sealed virtual bool ( , int );
    public void ();
    public double ();
    public int ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    protected byte ;
    protected Byte[] ;
    protected byte ;
    protected Byte[] ;
    protected Byte[] ;
    public virtual string ();
    public virtual void (bool ,  );
    protected virtual void (Byte[] , Byte[] );
    public virtual void (Byte[] , int , int , Byte[] , int );
    public virtual void ();
    public virtual byte (byte );
}
internal class  : object {
    public static void (Font , string );
    public static bool (string );
    public static bool (string );
    public static bool (string );
    public static void (Font , string );
    public static void (Font , string );
    public static void (Font , string );
    public static bool (string );
    public static double (string , int );
    public static bool (string );
    public static double (string );
    public static void (string , Font );
}
internal class  :  {
    internal void ();
}
internal class  : object {
    private ArrayList ;
    []
private WorksheetCollection ;
    internal Byte[] ;
    internal int ;
    internal int ;
    internal (ArrayList , WorksheetCollection );
    internal void ();
    internal  (int , Byte[] , int );
    internal  ();
}
internal class  : object {
    internal int ;
    internal Guid ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal string ;
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
internal class  :  {
    []
internal Workbook ;
    internal (Workbook );
    internal void ( );
    private void (int ,  );
}
internal class  :  {
    private  ;
    protected (bool ,  );
    public  ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("480")]
internal class  : Attribute {
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private long ;
    private decimal ;
    private long ;
    public long subscriptionId { get; public set; }
    public decimal ProcessedMB { get; public set; }
    public long CreditsUsed { get; public set; }
    [CompilerGeneratedAttribute]
public long get_subscriptionId();
    [CompilerGeneratedAttribute]
public void set_subscriptionId(long );
    [CompilerGeneratedAttribute]
public decimal get_ProcessedMB();
    [CompilerGeneratedAttribute]
public void set_ProcessedMB(decimal );
    [CompilerGeneratedAttribute]
public long get_CreditsUsed();
    [CompilerGeneratedAttribute]
public void set_CreditsUsed(long );
}
internal class  : object {
    [ConditionalAttribute("DEBUG")]
public static void (string );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private static Single[] ;
    [DebuggerBrowsableAttribute("0")]
private static Single[] ;
    [DebuggerBrowsableAttribute("0")]
private static Single[] ;
    private static ();
    internal static Int32[] (Shape );
    private static Font (Font );
    private static double (Shape , double );
    internal static int (double );
    private static void (Size[] );
    internal static SizeF (string , Font , SizeF , StringFormat );
    internal static SizeF (FontSettingCollection , SizeF , StringFormat );
    internal static bool (int );
    internal static bool (int );
    internal static bool (int );
    internal static int (int );
    internal static float (string , float );
}
internal class  :  {
    internal void (PageSetup );
}
internal abstract class  : object {
    public static string (byte );
    public static string (byte );
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal interface  {
    public int Count { get; }
    public   { get; }
    public abstract virtual int get_Count();
    public abstract virtual  (int );
    public abstract virtual  (string , Font , Color ,  ,  , double );
    public abstract virtual void Clear();
}
internal class  :  {
    private  ;
    private ( );
    public ( );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal abstract class  :  {
    public bool  { get; public set; }
    public static  (int );
    public static  (Boolean[] );
    public static  (Boolean[] , int , int );
    public virtual bool ();
    public virtual void ();
    public virtual void (int , int );
    public virtual bool (int );
    public virtual void (int , bool );
    public virtual bool (int );
    public virtual bool ();
    public virtual bool (int , int );
    public virtual bool ();
    public virtual bool (int , int );
    public abstract virtual bool (int );
    public abstract virtual void (int , bool );
    public abstract virtual void (int ,  , int , int );
    public abstract virtual bool ( );
    public abstract virtual bool (Boolean[] );
    public abstract virtual bool ();
    public abstract virtual bool (int , int );
    public abstract virtual bool ();
    public abstract virtual bool (int , int );
    internal abstract virtual int ();
    internal abstract virtual  (int );
    internal static int (int , int , int );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    public ( );
    public sealed virtual bool (Byte[] );
    public sealed virtual bool (Byte[] , int , int );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
public static float ;
    [DebuggerBrowsableAttribute("0")]
public static float ;
    private static ();
    public static Color (Color , float );
}
internal class  : object {
    internal string ;
    internal  ;
    internal  ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal Guid ;
    internal UInt32 ;
    internal long ;
    internal long ;
    internal UInt32 ;
    internal long ;
    internal bool ;
    internal (string , bool , Guid );
    internal (string ,  , long );
    internal (BinaryReader );
    internal void (BinaryWriter );
}
internal class  :  {
    private int ;
    private bool ;
    private double ;
    private  ;
    private  ;
    private  ;
    internal ( , bool ,  ,  ,  );
    protected virtual double (double );
    internal virtual  ( , double ,  );
    private  ( , double , int ,  ,  ,  );
    public virtual bool ( );
    public virtual  ();
    public virtual NumberCategoryType ();
}
internal class  : object {
    internal string ;
    internal  ;
    internal string ;
    internal string ;
    internal [] ;
    internal ( );
    internal  (bool );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private bool ;
    private string ;
    private  ;
    internal ( , RectangleF , string , bool );
    internal virtual void ( );
    internal  ();
    internal void ( );
    internal string ();
    internal void (string );
    internal bool ();
    internal virtual  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    internal static string (CellBorderType );
    internal static string (BackgroundType );
    internal static GradientPresetType[] ();
    internal static TextureType[] ();
    internal static string (IconSetType );
    internal static string (ImageFlags );
    internal static string (MsoDrawingType );
    internal static string (BorderType );
    internal static string (CellBorderType );
    internal static string (BackgroundType );
    internal static string (FontStyle );
    internal static string (CellValueType );
    internal static int (ConsolidationFunction );
    internal static string (ConsolidationFunction );
}
internal class  : object {
    []
private Workbook ;
    []
private WorksheetCollection ;
    private int ;
    private int ;
    private Byte[] ;
    []
private  ;
    []
private  ;
    internal Hashtable ;
    internal ( );
    internal void ( );
    private void ();
    private void ();
    private void ();
    private void ();
    internal static int ( , Byte[] , int , int );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ( , bool );
    [("True")]
private void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
}
internal abstract class  : object {
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  : object {
    private Point ;
    private Point ;
    private ArrayList ;
    public ArrayList  { get; }
    public (Point , Point );
    public Point ();
    public Point ();
    public int ();
    public ArrayList (int );
    public void (object );
    public ArrayList (int );
    private void (Point , Point );
    public void (Bitmap );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private int ;
    private  ;
    public ( );
    public ( ,  ,  ,  );
    public ( ,  ,  , int ,  );
    internal virtual void ( );
    protected virtual int ();
    protected virtual bool ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public int ();
    public void (int );
    public  ();
    public void ( );
    public  ();
    public void ( );
    private static  ( , int );
    private static void (MemoryStream ,  );
}
internal interface  {
    public abstract virtual  (string );
    public abstract virtual  ( );
    public abstract virtual bool ();
    public abstract virtual string ();
    public abstract virtual bool ( );
    public abstract virtual int (string );
    public abstract virtual int ( );
}
internal class  : object {
    internal ConsolidationFunction ;
    internal PivotFieldDataDisplayFormat ;
    internal int ;
    internal int ;
    internal short ;
    internal string ;
    internal string ;
    []
internal PivotField ;
    internal bool ;
    internal (PivotField );
    internal void ( );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
}
internal class  : object {
    private static Int32[] ;
    private static Int32[] ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal Int32[] ;
    internal Int32[] ;
    internal Int32[] ;
    internal  ;
    private int ;
    internal int ;
    internal int ;
    internal Int32[] ;
    internal Byte[] ;
    internal int ;
    internal int ;
    internal int ;
    internal object ;
    internal long ;
    internal  ;
    internal ( , object , int );
    private static ();
    internal void ( , Int64[] );
    internal int ( , int );
    internal void ( );
    internal void (Byte[] , int , int );
    internal int ();
    internal int ( , int );
}
internal class  : object {
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private Byte[] ;
    public (Byte[] );
    public ( , Byte[] );
    public  ();
    public virtual Stream ();
    public virtual void (Stream );
    [ObsoleteAttribute]
public virtual object ();
}
internal class  : object {
    private double ;
    private double ;
    private string ;
    public (double , double );
    public (double , double , string );
    public ( );
    public (string );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public string ();
    private string (string );
    private string (string );
    private void (string , string , string );
    public virtual string ToString();
    public string (char );
    public  ( );
    public  ( );
    public  ( );
    public  ( );
    public double ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  (double );
    public  ();
    public double ();
    public  ();
}
internal class  : object {
    internal static float (Cells , int , int , int , int , BorderType , int , int , BorderType );
    private static Border (Cell , BorderType );
    internal static float (Cells , int , int , int , int , BorderType );
    internal static float (Cells , int , int , int , int , BorderType );
    private static float (Border , Border , Border );
    private static float (Border , Border );
    private static float (Border , Border );
    internal static float (Cells , int , int , int , int , BorderType , int , int , BorderType );
    internal static float (Border , Border , BorderType , Border , BorderType );
    internal static float (Border );
    private static int (bool , bool );
    private static int (bool , bool );
    private static int (bool , bool , bool );
    private static int (bool , bool , bool );
}
internal abstract class  : object {
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32 );
    public static UInt32 (UInt32[] , int , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] , int );
    public static UInt32[] ();
    public static UInt64[] ();
    public static UInt32[] ();
    public static UInt64[] ();
    public static bool (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static bool (UInt64[] , UInt64[] );
    public static UInt32[] (BigInteger );
    public static UInt64[] (BigInteger );
    public static UInt32 (UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static bool (UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] );
    public static bool (UInt64[] );
    public static bool (UInt32[] );
    public static bool (UInt64[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static ulong (UInt32 , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32 , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int );
    public static BigInteger (UInt32[] );
    public static BigInteger (UInt64[] );
    public static void (UInt32[] );
}
internal class  : object {
    public Hashtable ;
    public Hashtable ;
    public Hashtable ;
    public (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    internal static  ( , [] ,  );
    internal static  ( , [] ,  , int ,  );
    private static  (int , int );
    internal static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    private static  (int , int , Int32[] ,  , int );
    private static object (int , int ,  ,  );
    private static int (int );
    internal static  ([] ,  );
    private static  ( );
    internal static  ([] ,  );
    private static  (int , int ,  ,  , int );
    internal static  ([] ,  );
    private static int (int , int ,  , int );
    internal static  ([] ,  );
    internal static  ([] ,  );
    private static int (DateTime , DateTime , bool , bool , bool , bool );
    private static double (DateTime , DateTime );
}
internal class  : object {
    []
private  ;
    []
private  ;
    []
private WorksheetCollection ;
    []
private Chart ;
    private Hashtable ;
    private ArrayList ;
    []
private Hashtable ;
    private ArrayList ;
    private ArrayList ;
    private  ;
    internal string ;
    private  ;
    private  ;
    private string ;
    private string ;
    private bool ;
    private double ;
    internal ( ,  , Chart , Hashtable );
    internal string ( );
    private void ();
    private void ( );
    private void ( );
    private  ( );
    private void ( ,  );
    private void ( , ArrayList );
    private void ( );
    private void ( , Title , bool );
    private void ( , ShapePropertyCollection );
    private void ( );
    private void ( );
    private void ( );
    private static ChartType (string );
    private void ( ,  );
    private void ( , Series );
    private void (Series , int );
    private void ( , DataLabels , Series );
    private void ( , DataLabels );
    private void ( , Series );
    private void ( , Series );
    private void ( ,  );
    private void ( , Series );
    private void (SeriesLayoutProperties ,  );
    private static MapChartRegionType (string );
    private static MapChartProjectionType (string );
    private static MapChartLabelLayout (string );
    private Int32[] ( );
    private void ( , SeriesLayoutProperties , Chart );
    private void ( , SeriesLayoutProperties );
    private void ( );
    private void ( );
    private static string ( , string );
    private bool ( , ShapePropertyCollection );
    private void ( , Axis );
    private void ( , DisplayUnitLabel );
    private void ( , Axis , int );
    private void ( , Axis , int );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
}
internal class  : object {
    private static UInt64[] ;
    private static ();
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    private static void (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] );
    public static UInt32 (UInt64[] );
    protected static void (UInt64[] );
    protected static void (UInt64[] , UInt64[] );
    protected static void (UInt64[] , UInt64[] , UInt64[] );
    protected static void (ulong , ulong , UInt64[] , int );
    protected static void (UInt64[] , UInt64[] );
}
[("And")]
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private ( );
    public ( ,  );
    public ( );
    public ([] );
    public static  (object );
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual [] ();
    public virtual  ();
}
internal abstract class  :  {
    protected int ;
    protected int ;
    public ( ,  ,  );
    protected ( , int ,  );
    public virtual void ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  :  {
    internal void ();
    [("True")]
internal void (Font );
    internal void (int , bool );
}
internal class  : object {
    internal UInt32 ;
    internal [] ;
    internal void ( );
}
internal abstract class  : object {
    public static int (float , float , float , Single[] );
    public static float (float , float );
    public static int (float , float , float , float , Single[] );
    public static int (float , float , Single[] );
    public static Single[] (Single[] );
    public static PointF (PointF , PointF , PointF , PointF , float );
    public static ArrayList (float , float , float );
    public static Single[] (Single[] , float , bool );
    public static ArrayList (float , float , float , float );
    internal static PointF (PointF , PointF , float );
    internal static float (float , float , float );
    internal static PointF (PointF , PointF , float );
}
internal interface  {
}
internal class  :  {
    private CopyOptions ;
    private bool ;
    private int ;
    private int ;
    internal ( ,  , CopyOptions );
    protected virtual void ();
    protected virtual Byte[] (bool );
    public virtual bool ();
    public virtual bool ();
    internal virtual string ();
    internal virtual void ();
    internal virtual void (int , int );
    internal virtual void ( , int );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    private static Byte[] ( , bool );
    private static  ( , bool , int , int );
    private  ();
    private  ( );
    private  (int , int , int ,  , ArrayList );
}
internal class  :  {
    internal byte ;
    internal (byte );
    internal virtual object ();
    internal virtual string ();
    internal virtual string ();
    internal virtual  ();
    internal virtual byte ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal static Font ;
    [DebuggerBrowsableAttribute("0")]
internal static string ;
    [DebuggerBrowsableAttribute("0")]
internal static string ;
    private static ();
    internal static  ( );
    private  (bool );
    internal static  ( , GraphicsPath );
    private static void ( ,  );
    private static void ( ,  ,  ,  , bool ,  );
    internal static SizeF ( ,  , RectangleF , string , TextOrientationType , Font , Color , TextAlignmentType , TextAlignmentType , TextDirectionType );
    internal static void ( ,  , RectangleF , string , TextOrientationType , Font , Color , TextAlignmentType , TextAlignmentType , TextDirectionType );
    private static void ( ,  , RectangleF );
    private static SizeF ( ,  , RectangleF );
    public static void ( , bool , string , Font , Color , RectangleF , TextAlignmentType , TextAlignmentType , TextAlignmentType , TextDirectionType , bool );
    public static void ( ,  , RectangleF , TextAlignmentType , TextAlignmentType , TextDirectionType );
    private static void ( , string , int , int , bool , float , SizeF , TextDirectionType , float , ArrayList , FontSettingCollection , TextParagraph , Single[] , bool );
    private static void ( , string , Font , bool , float , float , SizeF , TextDirectionType , float , ArrayList , TextAlignmentType , Single[] );
    private static void (Match , SizeF , TextDirectionType , float , ArrayList , Single[] );
    private static void ( , Match , FontSettingCollection , TextDirectionType , float , ArrayList , Single[] );
    private static float ( , string , Single& , Int32& , Font , bool , float , float , SizeF , TextDirectionType , ArrayList , TextAlignmentType , Single[] );
    private static float ( , string , int , Single& , Int32& , FontSettingCollection , bool , float , float , SizeF , TextDirectionType , ArrayList , TextParagraph , Single[] , bool );
    private static void ( , string , int , FontSettingCollection , bool , float , float , SizeF , TextDirectionType , ArrayList , TextParagraph , Single[] , bool );
    private static float (TextAlignmentType , float , float , float , float );
    private static void (ArrayList , TextDirectionType , TextAlignmentType , float , float , Single[] );
    private static void (TextAlignmentType , ArrayList , int , float , float , float , Single[] );
    private static FontSetting (FontSettingCollection , int , Int32& );
    private static void ( , Font , Brush , SizeF , ArrayList , float , float , bool );
    private static Size ( , bool , string , Font , SizeF );
    private static Size ( ,  , SizeF , string , int , Font , Color , TextAlignmentType , TextAlignmentType );
    private static void ( ,  , RectangleF , string , int , Font , Color , TextAlignmentType , TextAlignmentType );
    internal static void ( ,  , string , Font , Brush , RectangleF , StringFormat );
    internal static void ( ,  , string , Font ,  , Brush , RectangleF , StringFormat );
    internal static void ( , string , Font , RectangleF , StringFormat , ShadowEffect , bool );
    internal static void ( , string , Font , Brush , RectangleF , StringFormat );
    internal static bool ( );
    private static double ( , double );
    public static StringAlignment (TextAlignmentType );
    internal static int (double );
    internal static int (double );
    internal static int (double );
    internal static float (Font );
    internal static RectangleF ( );
    internal static RectangleF ( , RectangleF );
    internal static SizeF ( , bool );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    private static void ( ,  ,  ,  , Single& , Single& );
    internal static RectangleF ( , bool );
    internal static RectangleF ( , bool );
    internal static RectangleF (int , RectangleF );
    internal static RectangleF ( );
    internal static RectangleF ( );
    private static Color ( , float , float );
    internal static Color (Color , float , float );
    internal static ColorBlend (ColorBlend , float , float );
    internal static Brush ( , RectangleF , float , float );
    internal static Brush ( , RectangleF );
    internal static Brush ( , GraphicsPath );
    internal static Brush ( , GraphicsPath , bool );
    internal static Brush ( , GraphicsPath );
    internal static Brush ( , GraphicsPath , float , float );
    internal static Brush (Brush ,  );
    internal static Brush (Brush , bool );
    internal static RectangleF ( );
    internal static ArrayList ( );
    internal static ArrayList ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    private static PointF[] (double , double , double , double , double , double , double , double );
    internal static bool (double , double , double );
    internal static Double[] (double , double , double , double , double );
    internal static RectangleF (PointF[] );
    internal static PointF[] (ArrayList );
    internal static void ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    private static bool ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( , bool );
    internal static RectangleF (RectangleF ,  , int , int );
    private static void ( ,  ,  ,  , Single& , Single& );
    internal static Single[] ( , bool );
    internal static GraphicsPath ( );
    internal static RectangleF ( );
    internal static Matrix ( );
    internal static Matrix ( );
    internal static SizeF ( ,  ,  ,  );
    internal static SizeF (CustomLineCap );
    internal static double (Shape , bool );
    internal static GraphicsPath[] ( , bool );
    internal static double (double , double , double );
    internal static double (double , double , double , double );
    internal static double (double , double , double , double , double );
    internal static PointF[] (PointF[] , float , bool );
    internal static PointF[] (PointF , PointF , PointF , PointF , float , bool );
    internal static bool (PointF[] , PointF[] , PointF& );
    internal static int (bool , bool );
}
internal class  : object {
    private static Byte[] ;
    private static ();
    public static string ( );
    public static  ( );
    public static int ( );
    public static Byte[] ( ,  );
    public static Byte[] ( );
    private static Byte[] ( ,  , int , Byte[] );
}
internal interface  {
    public abstract virtual int (int );
    public abstract virtual int (int , int );
    public abstract virtual void (Int32[] );
}
internal class  : object {
    private  ;
    private ChartShape ;
    private Chart ;
    private double ;
    private double ;
    private ChartType ;
    private bool ;
    private Double[][] ;
    private Hashtable ;
    private int ;
    private  ;
    private string ;
    private  ;
    private bool ;
    private bool ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private int ;
    public ( ,  , ChartShape , string );
    public ( , ChartShape );
    public void ();
    private void ();
    private void ();
    internal void ( );
    private void ();
    private void ();
    private void (Axis , ArrayList , Hashtable );
    private void ();
    private void ();
    private void (Title , string );
    private void ();
    private void ();
    private void ();
    private void (Series , int );
    private void (Series , int );
    private void (string , int );
    private void (ChartPoint );
    private string (Bar3DShapeType );
    private void (string , DropBars );
    private void ();
    private void ();
    private void ();
    private string (Axis );
    private void (Axis , string );
    private void (Axis , string , bool );
    private void (Line , string , bool );
    private void (Series );
    private void (Color , Line , FillFormat );
    private void (Color , Line , FillFormat , bool );
    private string (Color );
    private void (Font );
    private void ();
    private void (Axis , bool );
    private void (Axis );
    private void (Axis );
    private void (Axis );
    private static string (object );
    private void (Axis );
    private void (Axis );
    private void (Axis );
    private void (Axis );
    private void ();
    private void ();
    private void (Title , string , bool );
    private bool (Title );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (Axis , string , bool );
    private string (int , bool );
    private void (Line , string , string );
    private void ();
    internal static bool ( );
    private void (Series , string , int );
    private void ();
    private static bool (ChartType );
    private bool (ChartType );
    private bool (ChartType );
    private bool (ChartType );
    private bool (ChartPoint , ChartPoint );
    private void ();
    private void (ArrayList , int , bool );
    private void (Trendline );
    private void (ErrorBar );
    private void (bool , DropBars , string );
    private void (Line , string );
    private static string (double , double , double );
    private string ();
    private string ();
    private string ();
    private string ();
    private void ();
    private void ();
    private string (Line , bool );
    private string (LegendPositionType );
    private double (int );
    private double (int );
    private double (int );
    private double (int );
    private static string (Chart );
    private static void ( , StringBuilder );
    private static string ( );
    internal static string (string );
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    public ( );
    private void (Byte[] , int , Byte[] );
    private Byte[] (int , int );
    public virtual  (int );
    public virtual  (string , int );
    public virtual  (int , int );
    public virtual  (string , int , int );
    public virtual  (int );
}
internal class  : object {
    internal static void (double );
    internal static void (long );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal  ();
}
internal class  : object {
    public static string (int );
    public static bool (char );
    public static int (char );
    public static string (char , Boolean[] , bool );
    public static int (string );
    public static string (string );
}
internal class  : object {
    internal static Hashtable ;
    private static ();
    internal static string ( , string );
    public static void ();
    public static void ( , String& , string );
    public static string ( , & );
    internal static void (string , String& );
    internal static void (string , String& ,  );
    internal static void ( , String& ,  );
}
internal class  :  {
    internal (string );
}
internal class  : object {
    private bool ;
    private  ;
    private  ;
    private  ;
    private  ;
    public (bool ,  ,  );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal static CultureInfo ();
    []
internal static Thread ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    public (Stream );
    [ObsoleteAttribute("Use version taking an Asn1Encodable arg instead")]
public virtual void (object );
}
internal abstract class  : object {
    private SymmetricAlgorithm[] ;
    public (Byte[] , long );
    public (Byte[] , Byte[] );
    protected static int (int );
    public static int (int );
    protected static Byte[] (long );
    protected static void (long , Byte[] , int );
    protected static int (Byte[] , int );
    protected static void (int , Byte[] , int );
    protected Byte[] (Byte[] , bool );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    protected (ImageOrPrintOptions , int , bool , Stream );
    public abstract virtual void Dispose();
    internal abstract virtual void (Bitmap );
    internal virtual void ();
    internal abstract virtual bool ();
    protected bool ();
    internal static  (ImageOrPrintOptions , int , bool , Stream );
}
internal class  :  {
    internal ( );
}
internal abstract class  : object {
    public static Byte[] ( , int );
}
internal class  :  {
    private ImageType ;
    private  ;
    private string ;
    private PointF ;
    private SizeF ;
    private  ;
    private  ;
    private  ;
    private  ;
    private bool ;
    [("True")]
public string  { get; }
    public (PointF , SizeF , Byte[] );
    public static  (PointF , SizeF , string );
    public static  (PointF , SizeF , Stream );
    public virtual void ( );
    [("True")]
public Image ();
    public string ();
    public PointF ();
    public SizeF ();
    public void (SizeF );
    public Byte[] ();
    public void (Byte[] );
    public ImageType ();
    public  ();
    public  ();
    public void ( );
    public  ();
    public void ( );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    public virtual void (TextWriter );
    public RectangleF ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    public static  ;
    private Byte[] ;
    protected internal (int );
    private static ();
    internal virtual void ( );
    protected virtual bool ( );
    protected virtual int ();
}
internal class  : object {
    private int ;
    private Int32[] ;
    internal (Cells , RowCollection ,  );
    internal (int , Int32[] );
    public sealed virtual int (int );
    public sealed virtual int (int , int );
    public sealed virtual void (Int32[] );
}
internal class  : object {
    []
internal  ;
    []
private  ;
    []
private WorksheetCollection ;
    []
private Palette ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private bool ;
    private static Regex ;
    []
private  ;
    private  ;
    private bool ;
    private bool ;
    internal ( , bool ,  );
    private static ();
    internal void ( );
    internal void ( );
    internal void ( );
    [("True")]
internal void ();
    [("True")]
private void (bool , ArrayList , string );
    [("True")]
private void (string , StringBuilder );
    [("True")]
private void (string , string , StringBuilder );
    [("True")]
private void (StringBuilder );
    [("True")]
private void (StringBuilder );
    private void ();
    private void ();
    [("True")]
private void ();
    [("True")]
private void ();
    private void ();
    [("True")]
private void ();
    [("True")]
private void ();
    [("True")]
private void ();
    [("True")]
private void ();
    [("True")]
private void ();
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void (Font );
    private ArrayList (Style );
    private void (Border , string );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( );
    public virtual  ();
    public virtual void WriteByte(byte );
    public virtual void Write(Byte[] , int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal class  :  {
    internal  ;
    internal string ;
    internal string ;
    internal List`1<string> ;
    internal virtual  ();
}
internal class  : object {
    internal int ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal bool ;
    internal bool ;
    private void ( , Border );
    internal void (Style );
    internal static  (Style );
    internal static bool ( ,  );
}
internal class  :  {
    protected  ;
    [ObsoleteAttribute("Use constructor that takes a TlsDHVerifier")]
public (int , IList ,  );
    public (int , IList ,  ,  );
    public virtual void ( );
    public virtual Byte[] ();
    public virtual void (Stream );
    protected virtual  ( ,  ,  );
}
internal enum  : Enum {
    public int value__;
    public static  DefaultSource;
    public static  AutoSelect;
    public static  ManualFeed;
    public static  MultiPurposeTray;
    public static  UpperCassette;
    public static  LowerCassette;
    public static  EnvelopeTray;
    public static  ThirdCassette;
}
internal class  :  {
    internal ( );
    internal  (int );
    public virtual  ( );
    internal void ( );
    internal int ();
    internal virtual ArrayList ();
    internal int ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    public string ;
    public string ;
    public string ;
}
internal class  :  {
    internal (string );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual  ();
    public abstract virtual void (byte );
    public abstract virtual void ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual Byte[] (byte );
}
[]
internal interface  {
    public abstract virtual  ();
    public abstract virtual UInt32 ();
    public abstract virtual void (UInt32 );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static  (ConsolidationFunction , int , ArrayList , bool );
    private static double (ArrayList );
    private static  (ArrayList );
    private static  (ArrayList );
    private static  (ArrayList );
    private static  (ArrayList );
    private static  (ArrayList );
    private static  (ArrayList );
    private static  (ArrayList , bool );
    private static  (ArrayList );
}
internal class  : object {
    private  ;
    public ( );
    public int ();
    public int ();
    public int ();
    private int ( );
    public virtual string ToString();
}
internal class  : object {
    internal static double ;
    internal static double ;
    []
private  ;
    private PlacementType ;
    private  ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    internal ( );
    private static ();
    internal PlacementType ();
    internal void (PlacementType );
    internal  ();
    internal void ( );
    internal void ( );
    internal bool ( );
    internal bool ();
    internal void (bool );
    internal int ();
    internal bool ();
    internal bool ();
    internal PlacementType ();
    internal void (PlacementType );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal double ();
    internal void (double );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal double ();
    internal void (double );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal double ();
    internal void (double );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal double ();
    internal void (double );
    internal void (double , double , double , double );
    internal Double[] ();
}
internal class  :  {
    internal int ;
    internal (int );
    internal virtual  ();
}
internal class  :  {
    public static byte ;
    public (bool , bool , Byte[] );
    public (bool , byte );
    private static ();
    private static Byte[] (byte );
    public bool ();
    public bool (byte );
    private void (byte , bool );
}
internal class  :  {
    private Double[][] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Double[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    public ([] ,  , int , int , int , int , int , int );
    protected virtual void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    public virtual  ();
}
internal class  : object {
    []
private  ;
    []
private  ;
    []
private  ;
    []
private Workbook ;
    private Hashtable ;
    internal string ;
    internal int ;
    internal ( , Hashtable ,  );
    internal void ( );
    internal void ( );
    internal void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( ,  );
    [("True")]
private void ( , PivotArea ,  );
    [("True")]
private void ( , PivotArea ,  );
    internal void (ArrayList );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    private void ( ,  , char );
    [("True")]
private void ( ,  );
    private static bool (string );
    private void ( ,  );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private void ( , int );
    [("True")]
private void ( );
    [("True")]
private String[] ( );
    private void ( ,  );
    private void ( );
    private void ( );
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual bool ();
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    internal (int , int , int , int , bool , bool );
    public int ();
    public int ();
    public int ();
    public int ();
    public bool ();
    public bool ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    private ( );
    public ( ,  ,  );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
    public virtual string ToString();
    private void (StringBuilder , string , string , string );
}
[]
internal class  : Attribute {
}
internal class  :  {
    internal ( );
    internal virtual Cell (Byte[] , int , int , Row , int );
}
internal class  :  {
    private  ;
    private bool ;
    private MemoryStream ;
    public ( );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int (int );
    public virtual int (int );
    public virtual Byte[] (byte );
    public virtual Byte[] (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual void ();
}
internal class  : object {
    private bool ;
    private [] ;
    internal ( , bool );
    public sealed virtual  ( );
    public sealed virtual void ( ,  );
    public sealed virtual  ( );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual bool ();
    public sealed virtual void (bool );
}
internal class  :  {
    internal (byte );
    internal void (ChartFrame );
}
internal class  :  {
}
internal class  : object {
    private CultureInfo ;
    private char ;
    private char ;
    private bool ;
    private bool ;
    private  ;
    private char ;
    private char ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private bool ;
    private bool ;
    internal ( , char , char );
    internal (CultureInfo );
    internal (CultureInfo , char , char , bool , bool );
    internal static char (CultureInfo );
    internal static char (CultureInfo );
    private static char (string , char );
    internal CultureInfo ();
    public bool ();
    public bool ();
    public char ();
    public char ();
    public  ();
    public char ();
    public char ();
    public string ();
    public string ();
    public string ();
    public string ();
    public string ();
    public string ();
    public string ();
    public string ();
    public bool ();
    public bool ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private string ;
    private string ;
    private string ;
    private ArrayList ;
    private string ;
    public ( , string );
    public virtual void ( );
    private void ( );
    public int ( );
    public void (int ,  );
    public int (int );
    public int ( );
    public ArrayList ();
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public string ();
    public void (string );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
    internal virtual void (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private Double[] ;
    private Double[] ;
    protected virtual bool (double , double );
    protected virtual bool (double , double );
    public virtual double (double );
    public virtual double (double );
    internal static  (Double[] , Int32[] , double );
    private bool (double , Double[] );
    private bool (double , Double[] );
    private bool (double , double , Double[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal class  : object {
    private  ;
    internal  ;
    internal List`1<> ;
    internal ( );
    internal void ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public int ( );
    public  (int );
    internal int ( , int );
    internal void ( , int );
    internal int ( , int );
    internal Color (Color , bool );
    internal void ( );
    internal void ( );
    internal bool ( );
    internal  ( );
    internal void ( );
}
internal abstract class  : object {
    internal  ;
    internal  ;
    internal  ;
    private Byte[] ;
    internal ( ,  );
    internal string ();
    public  ();
    public  ();
    public string ();
    public  ();
    internal  ( );
    public Byte[] ( );
    public Byte[] ();
    public abstract virtual  ( );
}
internal class  : object {
    internal static Byte[] (WorksheetCollection , int , CellArea );
}
internal abstract class  : object {
    internal float ;
    internal float ;
    internal float ;
    [("True")]
public abstract virtual void ( , PointF );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static  ;
    private static ();
    internal static  (string );
    internal static string ( );
    internal static  ( );
    internal static IEnumerable ();
}
internal class  : object {
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    private GraphicsPath (float , float , float , float );
}
internal class  :  {
    private  ;
    public ( );
    public  ();
}
internal abstract class  : object {
    internal int ;
    public abstract virtual int (int );
    protected abstract virtual Object[] ();
    protected abstract virtual void (Object[] );
    protected abstract virtual Object[] (int );
    public sealed virtual int ();
    public sealed virtual  ();
    public sealed virtual bool ();
    public virtual Int32[] ();
    public int (int , int , int );
    public virtual void (int , int );
    public virtual int (int , int );
    public int (int , int );
    public virtual void (int );
    public virtual void (int );
    public virtual bool (int , int );
    public virtual int (int , object );
    public virtual int (int , Object[] , int , int );
}
internal class  :  {
    private PointF ;
    private PointF ;
    public PointF ();
    public void (PointF );
    public PointF ();
    public void (PointF );
    public virtual GraphicsPath (RectangleF , bool , bool );
}
internal class  : object {
    private bool ;
    private  ;
    private IList[] ;
    public sealed virtual string ();
    public virtual void (bool ,  );
    public virtual void (bool );
    public virtual int ();
    public virtual int ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual Byte[] (BigInteger );
    public virtual Byte[] (Byte[] , Byte[] );
    public virtual Byte[] (Byte[] );
    private static BigInteger (IList , IList );
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal int ;
    internal Style ;
    internal bool ;
    internal bool ( );
}
internal class  :  {
}
internal class  : object {
    internal  ;
    internal object ;
}
internal class  : object {
    internal static Char[] ;
    internal static Char[] ;
    internal static Char[] ;
    internal static Double[] ;
    internal static object ;
    internal static object ;
    internal static object ;
    internal static object ;
    internal static object ;
    internal static object ;
    internal static int ;
    internal static int ;
    internal static DateTime ;
    internal static DateTime ;
    internal static DateTime ;
    internal static DateTime ;
    internal static int ;
    internal static int ;
    internal static DateTime ;
    public static MemorySetting ;
    public static bool ;
    private static ();
    internal static bool (string );
    internal static bool (string , string );
}
internal class  :  {
    internal void (FormatConditionCollection );
}
internal class  :  {
    private BigInteger ;
    public (BigInteger ,  );
    public (BigInteger ,  ,  );
    public BigInteger ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal  ;
    internal ( );
    internal virtual void ();
}
internal interface  {
    public abstract virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat );
    public abstract virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat );
    public abstract virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat , Single& , Single& );
    public abstract virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat , Single& , Single& );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private char ;
    public char ();
    public void (char );
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
    public virtual  ();
}
internal class  :  {
    internal int ;
    internal String[] ;
    internal byte ;
    internal byte ;
    internal int ;
    internal int ;
    internal String[] ;
    internal String[] ;
    internal int ;
    internal String[] ;
    internal Int32[] ;
    internal String[] ;
    internal virtual void ( , CopyOptions );
}
internal class  :  {
    internal (Byte[] );
}
internal class  : object {
    private RandomNumberGenerator ;
    public (RandomNumberGenerator );
    public virtual void (Byte[] );
    public virtual void (long );
    public virtual void (Byte[] );
    public virtual void (Byte[] , int , int );
}
internal class  :  {
    private  ;
    private Color ;
    private Color ;
    private PointF ;
    private string ;
    private Matrix ;
    private  ;
    private  ;
    private float ;
    private bool ;
    private bool ;
    private FontUnderlineType ;
    private float ;
    private float ;
    private bool ;
    public ( , Color , PointF , string , bool , bool );
    public ( , Color , PointF , float , string );
    public ( , Color , Color , PointF , string );
    public ( , Color , PointF , string );
    public virtual void ( );
    public  ();
    public void ( );
    public Color ();
    public void (Color );
    public Color ();
    public void (Color );
    public PointF ();
    public void (PointF );
    public virtual string ();
    public virtual void (string );
    public sealed virtual Matrix ();
    public sealed virtual void (Matrix );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual bool ();
    public PointF ();
    public virtual SizeF ();
    public virtual SizeF ();
    public float ();
    public float ();
    public float ();
    public RectangleF ();
    public  ();
    public void ( );
    public float ();
    public void (float );
    public [] ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal FontUnderlineType ();
    internal void (FontUnderlineType );
    public virtual void (TextWriter );
    public void (float );
    public float ();
    public void (float );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal interface  {
    public abstract virtual  ();
}
internal class  : object {
    []
private Cells ;
    []
private RowCollection ;
    []
private WorksheetCollection ;
    private  ;
    private  ;
    internal (Cells , RowCollection );
    public bool ();
    public void (bool );
    private void ();
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int );
    public sealed virtual int (int , int );
    public sealed virtual double (int , int );
    public sealed virtual double (int , int );
    public sealed virtual void (Int32[] );
    public sealed virtual void (Int32[] );
    private int (int , int ,  );
    private void (Int32[] ,  );
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    []
private  ;
    internal ( );
    internal void ( , bool );
    internal void ( );
    internal void ( );
    private void (DocumentProperty );
}
internal interface  {
    public abstract virtual BigInteger ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal string ;
    internal string ;
    internal virtual  ();
}
internal class  : List`1<> {
    internal  (int );
}
internal class  :  {
    internal ( ,  );
    public virtual bool ();
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    internal void (Color , bool );
    internal void (float );
    internal void (int );
    internal void (int );
    internal void (float );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    internal ( );
    public sealed virtual  ();
    public sealed virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void ( );
}
internal interface  {
    public abstract virtual int (int );
    public abstract virtual Byte[] (long , byte , Byte[] , int , int );
    public abstract virtual Byte[] (long , byte , Byte[] , int , int );
}
internal class  :  {
    private long ;
    private long ;
    private  ;
    internal ( ,  );
    internal virtual void ([] );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal static int ;
    [DebuggerBrowsableAttribute("0")]
internal static float ;
    private static ();
    private static SizeF ( ,  );
    internal static SizeF ( ,  );
    private static bool ( );
    internal static SizeF ( ,  );
    internal static void ( , Rectangle );
    internal static void ( , RectangleF ,  );
    internal static  ( , int );
    internal static bool ( );
    private static bool ( );
    internal static void ( ,  ,  );
    private static void ( , RectangleF ,  , int , Font , bool , TextOptions , IWarningCallback , bool );
    internal static void ( , RectangleF ,  , int );
    internal static SizeF ( ,  ,  );
    internal static string ( ,  , bool , Int32& );
    private static string ( ,  , bool );
    internal static SizeF ( ,  ,  );
    internal static SizeF ( ,  ,  );
    internal static Size ( ,  ,  , Rectangle , bool );
    internal static Point ( ,  ,  , Rectangle& );
    internal static Point ( ,  , Rectangle& );
    private static Size ( ,  , Rectangle );
    internal static SizeF ( ,  , SizeF );
    internal static SizeF ( ,  );
    internal static SizeF ( ,  , SizeF );
    private static int ( ,  , SizeF , int , Int32& );
    internal static int ( ,  );
    internal static void ( ,  , bool ,  , bool );
    internal static void ( ,  , RectangleF ,  , bool );
    private static int (Font );
    private static bool ( , int , int , float );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( );
    public ( ,  );
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal abstract class  :  {
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    private static ();
    internal static  (bool );
    public abstract virtual bool ();
    public abstract virtual  ();
    public virtual byte ();
    public virtual  ();
    public virtual bool ();
    public virtual  ( );
    public virtual  ( );
    public virtual bool ( );
    public virtual void (StringBuilder ,  );
    public virtual string ( );
    public abstract virtual  (Char[] ,  ,  );
    public sealed virtual  (Char[] ,  );
    public sealed virtual void (Char[] ,  , StringBuilder );
    public sealed virtual void (StringBuilder );
    public sealed virtual  ( );
    public sealed virtual void ( );
    public sealed virtual  (Char[] ,  );
    public virtual  (Char[] ,  ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ( ,  );
}
internal class  : object {
    private string ;
    []
internal  ;
    private int ;
    internal string ;
    internal string ;
    internal Byte[] ;
    internal  ;
    internal int ;
    internal PivotArea ;
    internal ( , PivotField , string , string , PivotFieldType , int );
    internal ( );
    internal int ();
    internal void (int );
    internal void ( , CopyOptions );
    internal void (int , string );
    internal void (int , string , bool );
    internal string (int , bool );
    internal void (StringBuilder , int , bool );
    internal int (string );
    internal string ();
    internal string ( );
    private string ();
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private static  (string ,  , Byte[] , Byte[] , int );
    public static  (string );
    public static ICollection ();
    public static bool (string );
    public static bool (string );
    public static bool (string );
    public static bool (string );
    public static bool (string );
    public static  ( , Byte[] , int );
    public static  (string , Byte[] , int );
    public static  ( , Char[] ,  );
    public static  ( , Char[] , bool ,  );
    public static  ( , Char[] );
    public static  ( , Char[] , bool );
    public static  (string , Char[] ,  );
    public static  (string , Char[] , bool ,  );
    public static object ( );
    public static object ( );
    public static object (string );
    public static string ( );
    private static  (string ,  );
}
internal abstract class  : object {
    internal abstract virtual  ();
}
internal abstract class  : object {
    internal static  (string );
    internal static string ( );
    internal static RevisionActionType (string );
    internal static string (RevisionActionType );
}
internal enum  : Enum {
    public byte value__;
}
internal abstract class  :  {
    protected  ;
    protected ( );
    protected ( ,  ,  );
    protected ( , int );
    protected abstract virtual  ( , bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual void ();
    public virtual bool ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual  (int , int );
    public virtual  (int );
    public virtual  (int );
    public virtual bool ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual bool ();
    public virtual void (bool );
    public virtual void ( );
    public virtual bool ( , Int32[] );
    public virtual bool ( , Int32[] );
    public virtual  ();
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
}
internal class  : object {
    private  ;
    private Hashtable ;
    private bool ;
    private ArrayList ;
    private int ;
    []
private  ;
    []
private Chart ;
    []
private  ;
    []
private Workbook ;
    private ArrayList ;
    internal ArrayList ;
    []
internal ShapeCollection ;
    private string ;
    []
private  ;
    private bool ;
    private bool ;
    internal ( , Chart , Hashtable ,  , string ,  );
    internal void (bool );
    private void ( , string );
    private void ( );
    private void ();
    internal void (GroupShape , Shape[] );
    internal Shape (Shape ,  );
    private void ( ,  );
    private void ( ,  );
    internal void (Chart , string , string , string );
    private void (Chart , string , Hashtable , string );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private FillFormat ( );
    private void ( ,  );
    private void ( , CustomGeometry );
    private void ( , CustomGeometry ,  );
    private void ( , CustomGeometry ,  );
    private void ( ,  );
    private ShapePathPoint ( , string , string );
    private void ( ,  );
    private void ( , Geometry );
    [("True")]
private  ( );
    private void (string );
    private bool (string );
    internal ArrayList ();
    private  ( , int , bool );
    private  ( , int , bool );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( );
    private  ( , int , bool , bool );
    private void ( ,  , bool );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  , bool );
    private void ( , bool ,  );
    private void ( , bool ,  );
    private void ( ,  );
    private void ( ,  );
    private Double[] ( );
    private void ( ,  , bool );
    private void ( ,  );
    private void ( ,  );
    private void ( , int );
    internal static void ( , Shape , ShapeCollection , Hashtable );
    private void ( , Shape );
    private void ( , Shape );
    private void ( , Shape );
    private void ( , Shape );
    private static void ( , Shape , Hashtable );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    protected virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    private static object ;
    private static object ;
    private static float ;
    private static float ;
    private  ;
    protected string ;
    protected string ;
    protected string ;
    protected string ;
    protected  ;
    protected FontStyle ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected float ;
    protected int ;
    protected ushort ;
    protected  ;
    protected  ;
    protected  ;
    protected bool ;
    protected  ;
    private  ;
    private bool ;
    private bool ;
    private int ;
    private  ;
    private bool ;
    private bool ;
    private ArrayList ;
    private Int32[] ;
    private static  ;
    private static Hashtable ;
    private static Hashtable ;
    private static ();
    private static  ();
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public FontStyle ();
    public void (FontStyle );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public int ();
    public void (int );
    public float (float );
    public int ();
    public void (int );
    public float (float );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    internal  ();
    internal void ( );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public float ();
    public void (float );
    public int (int );
    public float (int , float );
    public float (int , float );
    public float (int , float );
    public float (int , float , FontStyle );
    public int (string );
    public float (string , float );
    public int (string , float );
    public float (string , float );
    public float (float , float );
    private static float (float );
    private static float (float );
    private static float (float );
    public  ();
    public void ( );
    public int ();
    public void (int );
    public ushort ();
    public void (ushort );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal void ( );
    internal  (int , int , int );
    internal  (int , int , int , FontStyle );
    internal static Size (string , float , string , FontStyle );
    internal bool (string , int , FontStyle , Int32& );
    internal Byte[] (string , int , FontStyle );
    private static string (string , FontStyle );
    private static int (int , int ,  );
    private static int ( );
    private  (char , int , int );
    private  ( , int , int );
    public bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public int ();
    public void (int );
    internal bool ();
    internal void (bool );
    public int ();
    public void (int );
    private static  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private [] ;
    public ( );
    public ([] );
    private ( );
    private static [] ([] );
    public static  (object );
    public static  ( , bool );
    public static  ( );
    public virtual [] ();
    public virtual  ( );
    public virtual  ();
    public virtual string ToString();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public (int );
    public (Byte[] );
    public (Byte[] , bool );
    public (Byte[] , int , int );
    public (Byte[] , int , int , bool );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    protected virtual void (bool );
    private bool (int );
    public virtual void ();
    internal Byte[] ();
    internal void (Int32& , Int32& );
    internal int ();
    public int (int );
    public int ();
    public void (int );
    public virtual long ();
    public virtual long ();
    public virtual void (long );
    public virtual int (Byte[] , int , int );
    public virtual int ();
    public virtual long (long , int );
    public virtual void (long );
    public Byte[] ();
    public virtual void (Byte[] , int , int );
    public virtual void (byte );
    public void (Stream );
    internal int ();
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    []
internal Worksheet ;
    internal static  ( );
}
internal abstract class  : object {
    private bool ;
    protected (bool );
    public bool ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private  ;
    private  ;
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    public ( ,  ,  ,  , Int32[] , int , int , bool , int , bool , bool );
    private ( , int );
    private ( , int , int , int );
    private void ();
    public virtual  ();
    public virtual  ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual bool ();
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    private int ;
    internal Hashtable ;
    private ListObject ;
    internal (int );
    internal int (int , ListObject );
    internal int (int ,  );
    internal int (string );
    internal void (int , ListObject );
    internal void (int ,  );
    internal static int ( ,  );
    internal int ( , int );
    internal int (ListColumn , int );
    internal static int ( ,  , Byte[] , int );
    internal int ( , int );
    internal int (ListColumn , int , int );
    private int (string , int );
    internal void ( );
}
internal class  :  {
}
internal class  : object {
    private  ;
    private short ;
    private  ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    private bool ;
    private int ;
    private  ;
    private  ;
    internal ( );
    internal void ();
    internal  (string , bool );
    private  ();
    private  (string ,  );
    private  (string ,  );
    private  (string ,  );
    private bool (char );
}
internal class  : object {
    private ArrayList ;
    internal void (string );
    internal ArrayList ();
    internal string ();
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
    public static  None;
    public static  Font;
    public static  Pattern;
    public static  ExtGState;
    public static  XObject;
    public static  Shading;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private double ;
    private double ;
    private double ;
    public (double , double , double );
    protected virtual void (double , Double[] );
}
internal class  : object {
    internal  ;
    internal int ;
    internal Hashtable ;
}
internal class  :  {
    public ( );
    public ( );
    private static  ( );
}
internal class  : object {
    public static int ();
    public static UInt32 (UInt32 );
    public static UInt32 (UInt32 );
    public static UInt32 (UInt32 );
    public static UInt32 (long );
    public static UInt32 (Byte[] , int );
    public static long (Byte[] , int );
    public static long (Byte[] , int );
    public static void (Byte[] , int , Byte[] , int );
    public int (int );
    public int (Byte[] , int , int , Byte[] );
    public int (Byte[] , int , int , Byte[] , int );
    public static void (Int16[] , int , int );
    internal int (Byte[] , int , int , Byte[] , int );
    internal int (Byte[] , int , int , Byte[] , int , Int16[] );
    private static int (Byte[] , int , int , int );
    private static int (Byte[] , int , int , int );
    private static int (Byte[] , int , int , int );
    private static int (Byte[] , int , int , int );
    private static int (Byte[] , int , int , int );
    internal int (Byte[] , int , Byte[] , int , int , bool );
    internal int (Byte[] , int , int );
    private static UInt32 (UInt32 , int );
    internal int (Byte[] , int , int );
    internal Int16[] (int );
}
internal class  : ValueType {
    internal static void (Single[] );
    internal static bool ( );
    internal static  ([] );
}
internal class  : object {
    private IDictionary ;
    public ( );
    protected virtual IDictionary (IDictionary );
    public virtual  (IDictionary );
}
internal class  : object {
    private StringBuilder ;
    []
private WorksheetCollection ;
    internal bool ;
    private int ;
    private int ;
    internal (WorksheetCollection );
    private void (Byte[] , int );
    internal string (int , Byte[] , int , int , bool );
    internal string (int , int , Byte[] , int , int , bool );
    private void (Byte[] , ArrayList );
    private void (Byte[] , Int32& , ArrayList );
    private void (byte , StringBuilder );
    private string (Byte[] , int , Boolean& );
    private string (Byte[] , int , int , int );
    private string (Byte[] , int , int , int );
    private string (Byte[] , int , int , int );
    private string (Byte[] , int );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
}
internal abstract class  : object {
    []
internal  ;
    [("True")]
public abstract virtual  (String& );
}
internal class  : object {
    public  (int , object );
}
internal interface  {
    public abstract virtual Byte[] (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
public static string ;
    [DebuggerBrowsableAttribute("0")]
private static Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private IDictionary ;
    public (Stream );
    public (Stream , IDictionary );
    private static ();
    private static void (Stream , Int32[] , int );
    public void (string , string );
    public void ();
    public void ( );
    public void ();
    public virtual void WriteByte(byte );
    public virtual void Close();
    private void ();
    private void (string , string );
    private void (string );
}
internal class  : object {
    private string ;
    private Stream ;
    private FileFormatType ;
    []
private Workbook ;
    private LoadOptions ;
    private bool ;
    private int ;
    internal (Workbook );
    internal void (string , Stream , LoadOptions );
    private void (FileFormatType );
    private void ();
    private void (Stream , FileFormatType );
    private void ( , string );
    private void ( , string , bool );
    private void ( );
    private void ();
    private void (FileFormatType , bool );
    private void (Stream );
    private void ();
    internal static FileFormatType (Stream );
    internal static FileFormatType (LoadFormat );
    internal static FileFormatType (FileFormatType );
}
internal abstract class  : object {
    []
private  ;
    internal ( );
    internal  ();
    internal abstract virtual float ();
}
internal class  : object {
    private  ;
    private  ;
    private bool ;
    private int ;
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int ();
    public virtual Byte[] (Byte[] , int , int );
}
internal class  : object {
    []
private  ;
    []
private Worksheet ;
    private double ;
    private int ;
    private long ;
    []
private  ;
    []
private  ;
    private bool ;
    []
private HtmlSaveOptions ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal ( ,  ,  , HtmlSaveOptions );
    internal void ();
    private void ();
    private void ();
    private int (int , int );
    private void (int , int , int );
    private ListObject ( );
    private bool (ListObject ,  );
    private bool ( ,  );
    private bool (int );
    private ListObject (int );
    private void ();
    private void ( );
    private void ( );
    private bool ( );
    private static string (int , int );
    private void (StringBuilder ,  , int );
    private void ( );
    private void ();
    private void ();
    private void ();
    private void (StringBuilder );
    private void ( );
    private void ();
    private void ();
}
internal class  :  {
    internal void (ErrorBar );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    internal (int , float );
    public sealed virtual void Dispose();
    internal void ( );
    internal void ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    private Int64[] ;
    private int ;
    public long  { get; }
    public (int );
    public int ();
    public long (int );
    internal void ();
    internal void (int );
    internal void ();
    public int (long );
    public int (long , int , int );
    public int (long );
    public int (long , int , int );
    public Int64[] (bool );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    public sealed virtual void ( );
    public sealed virtual string ();
    public sealed virtual int (Byte[] , int );
    public sealed virtual int (Byte[] );
}
internal class  :  {
    internal string ;
    internal string ;
    internal double ;
    internal string ;
    internal double ;
    internal string ;
    internal ( );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal static int ;
    private static ();
    internal static SizeF ( ,  ,  , int , int , int );
    internal static void ( ,  ,  , int , int , Rectangle );
    internal static void ( ,  ,  , int , int , RectangleF );
    internal static bool (object , string );
    internal static bool ( ,  ,  , RectangleF );
    private static bool ( );
    private static bool ( );
    private static bool ( );
    public static void (RectangleF& ,  );
    internal static string ( );
    internal static string ( );
    internal static string ( , object , string , bool , bool );
    internal static Color (object , string , Color );
    internal static bool (object , string );
    private static bool (string );
    private static DateTime (double );
    internal static bool ( );
    internal static  ( );
    public static void ( ,  , Rectangle , string , int , Font , Color ,  ,  );
    internal static void ( , int , int );
}
internal class  : object {
    internal int ;
    internal string ;
    internal object ;
    internal (int , string , object );
    internal bool ();
}
[]
internal class  : Attribute {
}
internal class  : object {
}
internal class  :  {
    internal void (Validation );
}
internal abstract class  :  {
    protected  ;
    protected  ;
    protected IList ;
    protected Int32[] ;
    protected Byte[] ;
    protected Byte[] ;
    protected int ;
    protected short ;
    public ( );
    protected virtual bool (int , Byte[] );
    protected virtual void (IDictionary , int );
    public virtual void ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual IDictionary ();
    public virtual  ();
    public virtual void ( );
    public abstract virtual Int32[] ();
    public virtual Byte[] ();
    public virtual void (Byte[] );
    public virtual void (int );
    public virtual void (byte );
    public virtual void (IDictionary );
    public virtual void (IList );
    public abstract virtual  ();
    public abstract virtual  ();
    public virtual IList ();
    public virtual  ();
    public virtual  ();
    public virtual void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private  ;
    private ( );
    private ( );
    private static ();
    public static  (object );
    public virtual BigInteger ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (ScenarioCollection );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private bool ;
    private int ;
    private int ;
    private  ;
    public ( );
    public  ();
    public sealed virtual void (bool ,  );
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual int ();
    public sealed virtual byte (byte );
    public sealed virtual void (Byte[] , int , int , Byte[] , int );
    protected byte (byte );
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public sealed virtual void ();
    private void (int );
    private void ();
}
internal class  :  {
    private double ;
    private double ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ( );
    internal ( , double );
    internal ( , double , double );
    internal virtual void ();
    internal  ();
    internal void ( );
    internal  ();
    internal  ();
    public virtual  ();
    internal  ();
    public virtual  ();
    internal  ();
    public virtual  ();
    internal  ();
    public virtual  ();
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
}
internal enum  : Enum {
    public int value__;
}
internal abstract class  :  {
    private string ;
    private string ;
    protected ( , string , string );
    protected ( ,  , string , string );
    internal ( , string , string );
    protected abstract virtual void ( , DateTime , double , StringBuilder );
    internal virtual  ( , DateTime , double , bool ,  );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    public void ( , DateTime , double , StringBuilder );
    public virtual bool ( );
}
internal class  : object {
    internal string ;
    internal string ;
}
internal abstract class  :  {
    public virtual  ();
    public virtual bool ();
    public virtual int ();
}
internal class  :  {
    private string ;
    internal ( , string );
    internal virtual void ( );
    internal virtual string ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private Byte[] ;
    private Byte[] ;
    private ( );
    public ( );
    public ( , Byte[] );
    public static  (object );
    public static  ( , bool );
    public  ();
    public Byte[] ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private RevisionLogCollection ;
    [DebuggerBrowsableAttribute("0")]
private RevisionLog ;
    internal ( , RevisionLogCollection , RevisionLog );
    internal virtual int ();
    internal virtual void ( );
    private void (RevisionQueryTable , Stream );
    private void (RevisionAutoFormat , Stream );
    private void (RevisionCellComment , Stream );
    private void (RevisionDefinedName , Stream );
    private void (RevisionCellMove , Stream );
    private void (RevisionCustomView , Stream );
    private void (RevisionInsertSheet , Stream );
    private void (RevisionRenameSheet , Stream );
    private void (RevisionInsertDelete , Stream );
    private void (RevisionFormat , Stream );
    private void (RevisionCellChange , Stream );
    private void ( , Stream );
    internal static int (Byte[] , int , Font[] );
    internal static void (ArrayList , Byte[] , int );
    internal static void (CellArea , Byte[] , int );
}
internal class  : object {
    protected long ;
    protected Byte[] ;
    public (long , Byte[] );
    public virtual long ();
    public virtual Byte[] ();
    public virtual void (Stream );
    public static  (Stream );
}
[("And")]
internal enum  : Enum {
    public int value__;
    public static  None;
    public static  Body;
    public static  RowTitle;
    public static  ColumnTitle;
    public static  CornerTitle;
    public static  RowColumnTitle;
    public static  Header;
    public static  Footer;
    public static  HeaderFooter;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected [] ;
    [DebuggerBrowsableAttribute("0")]
protected ArrayList ;
    [DebuggerBrowsableAttribute("0")]
protected Double[] ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected Color[] ;
    [DebuggerBrowsableAttribute("0")]
protected String[] ;
    [DebuggerBrowsableAttribute("0")]
protected Font ;
    [DebuggerBrowsableAttribute("0")]
protected Color ;
    [DebuggerBrowsableAttribute("0")]
protected Single[] ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public (float , float , float , float , Double[] );
    public (float , float , float , float , Double[] , float );
    public (RectangleF , Double[] , float );
    public (float , float , float , float , Double[] , Color[] , float );
    public (RectangleF , Double[] , Color[] , float );
    public (float , float , float , float , Double[] , Color[] , float , String[] );
    public (float , float , float , float , Double[] , Color[] , float , String[] ,  );
    public (float , float , float , float , Double[] , float , String[] );
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void ();
    protected virtual void (bool );
    public Double[] ();
    public void (Double[] );
    public  ();
    public void ( );
    public void (Color[] );
    public void (String[] );
    public Font ();
    public void (Font );
    public Color ();
    public void (Color );
    public void ( );
    public void (float );
    public void (float );
    public void (float );
    public void (Single[] );
    public void (SizeF );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public float ();
    public float ();
    public float ();
    public float ();
    public void (float );
    public float ();
    public void (float );
    public void ( );
    public void (bool );
    public void (float );
    public void (int );
    internal [] ();
    internal void ( );
    public void ( );
    public virtual void ( ,  );
    private PointF ( , SizeF );
    private void ( , PointF& , float , SizeF );
    private void ( , RectangleF ,  ,  , RectangleF , PointF );
    private int (PointF , RectangleF );
    private GraphicsPath ();
    public int (PointF );
    private int ([] );
    protected RectangleF ();
    protected void (RectangleF );
    protected float ();
    protected SizeF ();
    protected SizeF ();
    protected float ();
    protected virtual void ();
    protected virtual  (float , float , float , float , float , float , float , Color ,  ,  , float ,  );
    protected virtual  (float , float , float , float , float , float , float , Color ,  ,  , float ,  );
    protected SizeF (float , float );
    protected void ( );
    protected void ( );
    protected void ( );
    private bool (Single[] );
    private bool (float );
}
internal class  :  {
    private Byte[] ;
    private int ;
    public (int );
    public (long );
    public (BigInteger );
    public (Byte[] );
    internal (Byte[] , bool );
    internal static bool ();
    public static  (object );
    public static  ( , bool );
    public BigInteger ();
    public BigInteger ();
    public bool (BigInteger );
    public int ();
    public int ();
    public long ();
    internal virtual void ( );
    protected virtual int ();
    protected virtual bool ( );
    public virtual string ToString();
    internal static int (Byte[] , int , int );
    internal static long (Byte[] , int , int );
    internal static bool (Byte[] );
    internal static int (Byte[] );
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual bool ();
}
internal class  : object {
    internal string ;
    internal string ;
    internal long ;
    internal int ;
}
internal interface  {
    public abstract virtual object ( );
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal ( );
    internal void ( );
    internal  ();
    public  (int );
    public  ( );
    internal int ( );
}
internal class  :  {
    private int ;
    private bool ;
    public ( );
    public void (int );
    public void (bool );
    private Stream (Stream , string ,  );
    protected Stream (Stream ,  ,  ,  );
    public Stream (Stream , string );
    public Stream (Stream , string , int );
}
internal class  : object {
    private  ;
    private bool ;
    private bool ;
    internal ( , bool );
    public sealed virtual  ( );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual void ( );
    public sealed virtual  ();
    public sealed virtual bool ( );
    public sealed virtual bool ( );
    public sealed virtual void ();
    public sealed virtual bool (int ,  );
    public sealed virtual  ();
    public sealed virtual  (bool );
    public sealed virtual  ();
    public sealed virtual bool ();
}
internal class  : object {
    internal static Byte[] ;
    internal static bool ;
    internal int (Workbook , int );
    internal static  ( );
    internal static  ( );
}
internal abstract class  : object {
    internal static  ;
    internal static  ;
    private static ();
    public static  (Int32[] );
    public static  (BigInteger );
}
internal enum  : Enum {
    public int value__;
    public static  IsNull;
    public static  IsBoolean;
    public static  IsNumber;
    public static  IsString;
    public static  IsDateTime;
    public static  IsObject;
    public static  IsArray;
    public static  IsObjectAttr;
}
internal class  : object {
    []
private  ;
    private  ;
    private float ;
    private float ;
    private float ;
    private float ;
    private int ;
    private  ;
    private  ;
    private Font ;
    private Color ;
    private TextAlignmentType ;
    private TextAlignmentType ;
    private TextDirectionType ;
    private TextOrientationType ;
    private bool ;
    private float ;
    private float ;
    private float ;
    private float ;
    private  ;
    private  ;
    private  ;
    private  ;
    private string ;
    private ArrayList ;
    private PointF ;
    private  ;
    private IList ;
    private IList ;
    private string ;
    private int ;
    private bool ;
    private bool ;
    private RectangleF ;
    private int ;
    private int ;
    private int ;
    internal int ;
    internal ArrayList ;
    []
internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    []
internal Chart ;
    []
internal Shape ;
    internal PointF ;
    internal PointF ;
    internal RectangleF ;
    private RectangleF ;
    private bool ;
    internal  ;
    private AutoShapeType ;
    private int ;
    private int ;
    private int ;
    private int ;
    private float ;
    private float ;
    private  ;
    private bool ;
    private bool ;
    internal bool ;
    public ( ,  );
    public ( );
    public virtual void ( , bool );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    public  ();
    public  ();
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public int ();
    public void (int );
    internal bool ();
    public RectangleF ();
    public  ();
    public void ( );
    public  ();
    public void ( );
    public Font ();
    public void (Font );
    public Color ();
    public void (Color );
    public TextAlignmentType ();
    public void (TextAlignmentType );
    public TextAlignmentType ();
    public void (TextAlignmentType );
    public TextDirectionType ();
    public void (TextDirectionType );
    public TextOrientationType ();
    public void (TextOrientationType );
    public bool ();
    public void (bool );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    internal RectangleF ();
    public string ();
    public void (string );
    public ArrayList ();
    public  ();
    public void ( );
    public IList ();
    public void (IList );
    public int ();
    public void (int );
    public IList ();
    public void (IList );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal RectangleF ();
    private void ();
    private RectangleF (RectangleF );
    private void ();
    public void ();
    public void ();
    public AutoShapeType ();
    public void (AutoShapeType );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal int ();
    internal int (int , int , int , int );
    internal int (int , int , int , int );
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual void ();
    internal bool ();
    internal RectangleF ();
    private void ();
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual int ();
    public sealed virtual bool ();
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private IList ;
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( ,  , int );
    public void ( ,  , int );
    public void ( ,  , int ,  );
    public void ( ,  ,  );
    public void ( );
    public  ();
}
[DefaultMemberAttribute("Item")]
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
private String[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public String[] Columns { get; }
    public int Count { get; }
    public object Item { get; }
    public object Item { get; }
    internal (String[] );
    internal (int );
    internal abstract virtual int ();
    internal abstract virtual object (int );
    public sealed virtual String[] get_Columns();
    public sealed virtual void BeforeFirst();
    public sealed virtual bool Next();
    public sealed virtual int get_Count();
    public sealed virtual object get_Item(int );
    public sealed virtual object get_Item(string );
}
internal class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected int ;
    protected int ;
    protected PointF ;
    protected PointF ;
    private string ;
    private string ;
    public ( );
    public (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public PointF ();
    public void (PointF );
    public PointF ();
    public void (PointF );
    public  ();
    public void ( );
    public virtual GraphicsPath (RectangleF , bool , bool );
    public static  (string );
}
internal class  : object {
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private int ;
    private UInt32[][] ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private bool ;
    private Byte[] ;
    private static ();
    private static UInt32 (UInt32 , int );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private UInt32[][] (Byte[] , bool );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] , int );
    private void (Byte[] , int );
    private void (UInt32[][] );
    private void (UInt32[][] );
}
internal class  : object {
    internal  ;
    internal void ();
    public sealed virtual void ( ,  );
    public sealed virtual void ( ,  );
    public sealed virtual void ( ,  );
    public sealed virtual void ( ,  );
}
internal class  :  {
    [("True")]
internal void (CellArea , string );
}
internal class  : object {
    internal Stream ;
    internal Stream ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Byte[] ;
    internal void (int , int );
    private Int32[] (int );
    private int (int , int );
    private int (int , int , int );
    private int (int , int , int , int );
    internal void (Stream , int );
    internal void (Stream , int );
}
internal abstract class  : object {
    public static double (double , double );
    public static double (double , double );
    public static double (double , double , double );
    public static double (double , double , double );
    public static double (double , double , double );
    private static double (double , double , double , double );
    private static double (double , double , double , double , double );
    private static double (double , double , double , double , double , double );
    private static double (double , double , double );
    public static double (double , double , double );
    public static double (double , double , double );
    internal static double (double , double , double , double , double );
    public static double (double , double , double );
    public static double (double , double , double , double , double );
    public static double (double , double , double );
    public static double (double , double , double , double , double );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private List`1<ThreadedComment> ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( , List`1<ThreadedComment> );
    internal virtual void ( );
    private void (string ,  );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal abstract class  : object {
    [("True")]
internal abstract virtual void ( );
    internal MemoryStream ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    public ( );
    public ( );
    public ( );
}
internal abstract class  :  {
    protected Int32[] ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    internal ( ,  ,  , Int32[] , bool );
    protected ( , int ,  );
    protected abstract virtual void ();
    private void (bool );
    protected bool (bool );
    protected void (bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool (int );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    protected void ();
}
internal class  :  {
    internal void (FormatConditionCollection , int , int );
    internal static int (Byte[] , int , CellArea );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal float ;
    internal void ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal static float ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private SizeF ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( );
    private static ();
    public SizeF ();
    public void (SizeF );
    private void ( );
    private void ( , bool );
    private void ( );
    private void ( , bool );
    private static void ( , string , string , bool );
    private void ( );
    private void ( );
    public  (string , bool , Size );
    public  (Byte[] , Size );
    public  ( , Size );
    private void ( , string );
    private void ( ,  , SizeF& , RectangleF& );
    [("True")]
public sealed virtual void ( ,  , SizeF& , RectangleF& ,  );
    private bool ( );
    internal void ( ,  , RectangleF& , bool , bool ,  );
    private void ( ,  , String[] );
    private void ( ,  , RectangleF& );
    private void ( ,  , RectangleF& );
    internal void ( ,  , RectangleF& , bool ,  );
    internal void ( ,  );
    internal void ( ,  , RectangleF& );
    private static void (Byte[] , Single& , Single& );
    internal void ( );
    internal string (string );
    public sealed virtual void Dispose();
    private bool (string );
}
internal class  : object {
    protected internal  ;
    public virtual void ( );
    public virtual int ();
    public virtual BigInteger ( );
}
internal abstract class  :  {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    public abstract virtual  ();
    public abstract virtual  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public  ();
    public void ( );
    public virtual bool ( , int );
    public virtual bool ();
    public virtual  (int );
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual void ();
    public virtual  ( , int );
    public virtual  ( , int , Workbook );
    public virtual bool ( );
    public virtual  ( , bool );
    public virtual bool ( , int , int , bool );
    public virtual bool ( , bool );
    public virtual void (StringBuilder ,  );
    public virtual  ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual bool ( );
    public virtual  ( );
    public virtual void ( );
}
internal class  :  {
    internal bool ;
    internal (bool );
    internal virtual object ();
    internal virtual string ();
    internal virtual string ();
    internal virtual  ();
    internal virtual bool ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  : object {
    private static  ;
    internal static string ;
    internal static string ;
    internal static int ;
    internal static int ;
    internal static String[] ;
    private static ();
    internal static  ( ,  );
    internal static bool ( ,  );
    internal static void ( ,  );
    internal static DateTime ( );
    internal static  (object );
    internal static bool ( );
    internal static  ( );
    internal static bool ( );
    internal static void (string ,  );
    private static BigInteger (object );
    internal static  ( );
    internal static  ( , IList[] ,  );
    private static void (IList[] ,  );
    internal static void (int , IList[] , string , IDictionary ,  );
    internal static  (int , IList[] , string ,  );
    internal static void (DateTime ,  , object ,  );
    internal static  (IList , int );
    internal static DateTime ( ,  , int );
    internal static ICollection ( , IList );
    internal static void ( , ICollection ,  ,  );
    internal static  ( , object , DateTime ,  );
    internal static  (DateTime ,  ,  );
    private static bool ( );
    internal static ICollection ( , IList );
    internal static void ( ,  );
    internal static bool (int , IList[] ,  ,  );
    internal static void (int , IList[] ,  ,  );
    internal static ICollection ( ,  );
    internal static  ( ,  );
}
internal class  : object {
    internal ArrayList ;
    internal int ;
    internal int ;
    internal (int , int , ArrayList );
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    private IList ;
    public (Byte[] );
    internal (IList );
    public (Stream );
    public virtual  ();
    public virtual  (long );
    public virtual IEnumerable ();
    public virtual Byte[] ();
    public virtual void (Stream );
    public static  ( ,  );
    public static  ( ,  );
    internal static  ( );
    internal static  ( );
}
internal class  : object {
    []
private WorksheetCollection ;
    private bool ;
    private double ;
    private  ;
    private  ;
    internal (Cells , int );
    public sealed virtual bool (int );
    public sealed virtual double (int );
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int , int );
    public sealed virtual int (int , int );
    public sealed virtual double (int , int );
    public sealed virtual void (Int32[] );
    public sealed virtual void (Int32[] );
}
internal class  : object {
    internal int ;
    internal int ;
    internal  ;
    internal byte ;
    internal Row ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal (int );
    internal void ( );
    internal static  ( , RowCollection ,  ,  );
    internal bool ( ,  );
}
internal class  : object {
    private  ;
    public sealed virtual void ( );
    public sealed virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private HtmlSaveOptions ;
    internal (Workbook , SaveOptions );
    public sealed virtual void Dispose();
    public sealed virtual void ();
    public sealed virtual void (Stream );
}
internal class  : object {
    public bool ;
    public long ;
    public long ;
    public long ;
    public long ;
    public long ;
    public long ;
    public  ;
    public (bool , long , long , long , long , long , long , long , long );
    public (bool , string , string , string , string , string , string , string , string , IDictionary , ArrayList );
}
internal class  :  {
    private Char[] ;
    private Char[] ;
    public (string , int , int );
    public virtual bool ();
    public virtual void ();
    public virtual  ();
    private void ();
    public virtual  ( , bool );
}
internal class  :  {
    internal (string );
    internal virtual void (String& );
    internal virtual void ( );
}
internal class  :  {
    internal (int );
}
internal class  :  {
    private int ;
    private int ;
    public ( , int , int , int );
    [ObsoleteAttribute("Use version without 'debug' parameter")]
public ( , int , int , int , bool );
    public int ();
    public int ();
    public bool ();
}
internal class  : object {
    private  ;
    internal (string );
    private  (string );
    internal Byte[] (Byte[] );
    internal Byte[] (Byte[] , int , int );
    internal void ();
    public void (Byte[] , int , int );
    internal Byte[] ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static float ;
    internal ( , float , float ,  );
    private static ();
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal abstract class  : object {
    private  ;
    public  ();
    protected abstract virtual  ();
}
internal class  :  {
    private bool ;
    public bool ();
    public void (bool );
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    []
private Workbook ;
    []
private RevisionInsertSheet ;
    internal (RevisionInsertSheet , Workbook );
    private void ();
}
internal class  : object {
    private  ;
    private  ;
    private bool ;
    public virtual string ();
    public virtual void (bool ,  );
    public virtual BigInteger ();
    public virtual BigInteger[] (Byte[] );
    public virtual bool (Byte[] , BigInteger , BigInteger );
    protected virtual  ();
}
internal class  : object {
    private string ;
    private int ;
    public (Byte[] , int , int );
    public string ();
    public bool ();
    public static string (Byte[] , string );
}
internal class  : object {
    private string ;
    private string ;
    private double ;
    private double ;
    private double ;
    private double ;
    private ArrayList ;
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal ArrayList ();
    internal void (ArrayList );
}
internal class  :  {
    public (Stream );
    public (Stream , int , bool );
}
internal class  : object {
    private ArrayList ;
    public sealed virtual  (int );
    public sealed virtual string (int );
    public sealed virtual void ( );
    public sealed virtual void ( );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual  (string );
    public sealed virtual void ( );
    public sealed virtual void (int );
    public sealed virtual int ();
    public sealed virtual UInt32 ();
    public sealed virtual int ();
    public sealed virtual bool ();
    public  ();
    public sealed virtual  ();
}
internal class  : object {
    private  ;
    private PivotTable ;
    private Hashtable ;
    private PivotField ;
    internal ( );
    private void ();
    internal void ( );
    private void ( );
    private void ( );
    private void ( , PivotField );
    private void ( , PivotField );
    private void ( , PivotField );
    private void ( , PivotField );
    private void ( , PivotField );
    private static ConsolidationFunction (string );
    private static PivotFieldSubtotalType (string );
    private static PivotFieldType (string );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private  ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    public ( );
    public ( , int );
    public sealed virtual string ();
    private static int (Byte[] , Byte[] );
    private static Byte[] (Byte[] );
    public sealed virtual void ( );
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
}
internal class  : ValueType {
    internal static ArrayList ( ,  , Rectangle , float , double , int , bool );
    private static bool ( , PointF ,  ,  , double , int , Single& );
    private static double ( , double , double , double , double );
    internal static float (Size );
    internal static float (SizeF );
    private static float (SizeF );
    internal static void (bool ,  ,  , Rectangle , int , bool , bool , bool , bool , bool , bool , bool , bool );
    private static int (bool , bool , double , double );
    private static void ( , int , Double& , Double& , Double& , Double& );
}
internal class  : object {
    internal static Int32[] ;
    internal static Int32[] ;
    internal static Int32[] ;
    internal static Int32[] ;
    internal static Int32[] ;
    internal static Int32[] ;
    internal Int32[] ;
    internal Int32[] ;
    internal Int32[] ;
    internal Int32[] ;
    internal Int32[] ;
    internal Int32[] ;
    private static ();
    private int (Int32[] , int , int , int , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] );
    internal int (Int32[] , Int32[] , Int32[] , Int32[] ,  );
    internal int (int , int , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] ,  );
    internal static int (Int32[] , Int32[] , Int32[][] , Int32[][] ,  );
    private void (int );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal void (int );
    internal void (ArrayList );
    public  (int );
    internal int ( );
    internal void ( );
    internal int (ushort , ushort , ushort );
    internal int (int , int , int );
    internal void (ushort , int );
    internal void (int , int , int );
    internal void (int , int , int );
    internal int (int , int , int , bool );
    internal int (int , int );
    internal Int32[] (int , int );
    internal int (int , bool );
    internal int (int , bool );
    internal int (int );
    internal bool (int , Worksheet );
    internal int (int , int );
    internal int (int );
    internal void (int , Hashtable );
    internal int (WorksheetCollection , int );
}
internal class  : object {
    internal string ;
    internal Hyperlink ;
    internal string ;
    internal int ;
}
internal class  : object {
    public virtual Stream (Stream );
    public virtual Stream (Stream );
}
internal enum  : Enum {
    public int value__;
    public static  Link;
    public static  FileAttachment;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public (IEnumerable );
    public static  (object );
    public [] ();
    public virtual  ();
}
internal class  : object {
    public List`1<> ;
    private  ;
    public string ();
}
internal class  :  {
    internal ( , bool );
}
internal class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    public ( ,  ,  );
    public ( ,  ,  ,  );
    public virtual  ();
    public virtual Byte[] (Byte[] );
    public virtual  ();
}
internal class  : object {
    private  ;
    private float ;
    private Color ;
    private UInt32 ;
    private  ;
    private Image ;
    private  ;
    internal void ( );
    internal void ( );
    internal void ( );
    internal  (Color );
    private void ();
    private static void ( ,  );
    [("True")]
private static void ( ,  );
    [("True")]
private static void ( ,  );
    private sealed virtual override  ();
    public sealed virtual UInt32 ();
    public sealed virtual void (UInt32 );
    internal void ( );
    internal void (Color );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    public (Byte[] );
    public (Byte[] ,  ,  );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private ReferredArea[] ;
    private  ;
    private ReferredAreaCollection ;
    private  ;
    private bool ;
    private Hashtable ;
    internal ( ,  , ReferredAreaCollection , bool );
    private ( , ReferredAreaCollection );
    internal  ();
    internal void ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    private void (int );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  : object {
    internal Hashtable ;
    internal PivotField ;
    internal PivotFieldCollection ;
    internal PivotFieldCollection ;
    internal List`1<> ;
    internal List`1<> ;
    internal bool ;
    internal int ;
    internal PivotField ;
    internal (int ,  );
    private void ( );
}
internal abstract class  : object {
    public static void (IList , IEnumerable );
    public static bool (IEnumerable , Type );
    public static IDictionary (IDictionary );
    public static IList (IList );
    public static  ( );
    public static object (IEnumerator );
    public static string (IEnumerable );
}
internal abstract class  : object {
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
private SaveOptions ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    internal (Workbook , SaveOptions );
    public sealed virtual void (Stream );
    public sealed virtual void Dispose();
    public sealed virtual void ();
    private void ();
    private void (Hashtable );
    private void (Hashtable );
    internal void (Stream );
    private void ( );
    [("True")]
private void ( );
    private void ( , Worksheet , Workbook );
    private static void ( , Worksheet , Workbook );
    private void ( , Worksheet , Workbook );
    private static void ( , Worksheet , Workbook );
    [("True")]
private static void ( , Worksheet );
    private static  (Cells , int , int , Cell , ArrayList , int );
    private static bool (Worksheet , int , ArrayList , int );
    private static void (Worksheet , ArrayList , bool , bool , Int32& , Int32& );
    private void ( , Worksheet , bool , bool , bool );
    private static void ( , Comment );
    [("True")]
private static void ( , FontSetting , string );
    [("True")]
private static void ( , Worksheet );
    internal static string (FilterOperatorType );
    private static void ( , Worksheet , Column , int );
    private static void ( , Worksheet , Workbook , ArrayList , bool );
    private void ( );
    private void (Style , int ,  );
    private static void (Style ,  );
    private static void (Style ,  );
    private static void (Font ,  );
    private static bool (Style );
    private static void (Border ,  , string );
}
internal class  : object {
    private Stream ;
    public (Stream );
    public  ();
    private Byte[] (Byte[] , int , int , string );
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    public void (Worksheet );
    public void (Worksheet );
    public sealed virtual bool ( , int );
}
internal class  : object {
    private string ;
    private  ;
    private  ;
    private SlicerCache ;
    private string ;
    internal ( , string , string );
    internal void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( , SlicerCache );
    private void ( ,  );
    private static SlicerCacheItemSortType (string );
    private static SlicerCacheCrossFilterType (string );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private  ( );
    private void ( , SlicerCache );
    private void ( , SlicerCache );
    private void ( , SlicerCache );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
}
internal class  :  {
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    [ObsoleteAttribute("Use ECCurve.FromBigInteger to construct field elements")]
public (BigInteger , BigInteger );
    internal (BigInteger , BigInteger , BigInteger );
    internal static BigInteger (BigInteger );
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public BigInteger ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  ();
    public virtual  ();
    private  ( );
    private BigInteger[] (BigInteger , BigInteger , BigInteger );
    protected virtual BigInteger (BigInteger , BigInteger );
    protected virtual BigInteger (BigInteger );
    protected virtual BigInteger (BigInteger );
    protected virtual BigInteger (BigInteger );
    protected virtual BigInteger (BigInteger );
    protected virtual BigInteger (BigInteger , BigInteger );
    protected virtual BigInteger (BigInteger );
    protected virtual BigInteger (BigInteger , BigInteger );
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  : object {
    internal static Byte[] (Byte[] );
    internal static Byte[] ( );
    private static bool (Byte[] );
    internal static bool (Byte[] );
    internal static bool (Byte[] );
    internal static bool (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public (string , IList );
    public (string ,  );
    public ( ,  );
    private ( );
    private static  (IList );
    public static  (object );
    public virtual  ();
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private AccessCacheOptions ;
    [DebuggerBrowsableAttribute("0")]
private AccessCacheOptions ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal static int ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    internal (Workbook );
    internal AccessCacheOptions ();
    internal AccessCacheOptions ();
    internal  ();
    internal void (AccessCacheOptions ,  );
    internal void (AccessCacheOptions ,  );
    internal void (AccessCacheOptions , bool );
    internal void (AccessCacheOptions );
    internal bool ( );
    internal bool ( );
    internal bool ( );
    internal  (bool );
    internal  (bool );
    internal  (CalculationOptions );
    internal bool ();
    internal  ();
    internal bool ( );
    internal bool ( );
    public sealed virtual void Dispose();
    internal string (Byte[] );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal void ();
    internal void ();
    internal bool ();
    internal void ();
    private bool (int );
    internal int (int );
    internal string (int );
    internal  ();
    internal void (object );
    internal string ();
}
internal class  : object {
    internal int ;
    internal string ;
    internal string ;
    internal Hashtable ;
    internal bool ;
    internal int ;
    private int ;
    private int ;
    private int ;
    internal static  ( );
    internal static void ( ,  );
    internal int ();
    internal int ();
}
internal class  :  {
    private static Byte[] ;
    public ( );
    private static ();
    public virtual string ();
    public virtual int ();
    public virtual int (Byte[] , int );
    public virtual  ();
}
internal class  :  {
    private  ;
    public ( , bool );
    public (int ,  , bool );
    private static bool ( );
    private static bool ( );
    public virtual  ();
    private  ();
}
internal class  :  {
    internal (bool , int );
}
internal interface  {
    public abstract virtual void (int , int ,  );
}
internal class  :  {
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal virtual void ( );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  :  {
    private Byte[] ;
    public Byte[] ();
    protected virtual bool ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    public ( ,  ,  );
    private ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
    private static void ( );
}
internal class  :  {
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    public ( ,  ,  , bool , int , int ,  , int , bool , bool );
    private ( , int );
    private ( , int ,  , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int , int , bool ,  ,  );
    public virtual bool ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual bool ();
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ( , Int32[] );
    public virtual bool ( , Int32[] );
    public virtual  (Double[] ,  ,  );
    public virtual  (Double[][] ,  ,  );
    public virtual int ( , bool );
    private void ();
    private void ();
    private void ();
}
internal class  :  {
    internal int (int , int , ArrayList );
}
internal class  : object {
    private static  ;
    private  ;
    private int ;
    private Stream ;
    private static ();
    private  ( );
    private  ();
    private  (Stream );
    protected virtual  ( );
    public  (Byte[] );
    public ICollection (Byte[] );
    public  (Stream );
    public ICollection (Stream );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal static  ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    public Int32[] (WorksheetCollection );
    public int ( );
    internal int (string );
    internal int (string , string , bool );
    internal int ( );
    internal int (WorksheetCollection , WorksheetCollection ,  , CopyOptions );
    internal static Int32[] (WorksheetCollection , string );
}
internal class  :  {
    [ObsoleteAttribute("Use version taking 'char[]' instead")]
public (string , Byte[] , int );
    [ObsoleteAttribute("Use version taking 'char[]' instead")]
public (string ,  );
    public (Char[] , Byte[] , int );
    public (Char[] ,  );
    internal virtual  (string );
}
internal class  : object {
    private [] ;
    public ([] );
    internal [] ();
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual void (StringBuilder );
    public sealed virtual bool (int ,  );
    public sealed virtual  (int , int , [] , int , int , bool );
    public sealed virtual  (int , int ,  , int , int , bool );
    public sealed virtual  (int , int ,  , int , bool );
    public sealed virtual  (int , int );
    public sealed virtual int (int ,  );
    public sealed virtual int (int ,  );
    public sealed virtual  (int );
    public sealed virtual  (int ,  );
    public sealed virtual object (int ,  );
    public sealed virtual void (int , StringBuilder ,  );
    public sealed virtual void (int , [] , int , int );
    public sealed virtual  (int , Double[] , int , int ,  ,  );
}
internal class  :  {
    public ( );
    public virtual  (String& );
}
internal class  : object {
    private TextWriter ;
    private int ;
    private Char[] ;
    public (TextWriter );
    public TextWriter ();
    public int ( );
    public void ( );
    private void (Byte[] );
    private void (string );
    private void (string );
}
internal class  : object {
    public ushort ;
    public ushort ;
    public UInt32 ;
    public ushort ;
    public ushort ;
    public ushort ;
    public ushort ;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private Byte[] ;
    internal ( ,  );
    public  ();
    public Byte[] ();
    public virtual void ( );
}
internal class  : object {
    internal short ;
    internal int ;
    internal  ;
    internal object ;
    internal bool ;
    internal int ;
    internal (int );
    internal ( );
    internal void ( );
    internal void ( , int );
    internal void (int );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal  ();
    internal double ();
    internal bool ();
    internal bool ();
    internal void (CellValue );
    private void ( , int );
    private void (CellValue , int );
    internal string (bool , WorkbookSettings );
    internal static string ( , object , bool , WorkbookSettings );
    internal string ();
    internal static string (object );
    internal CellValueType ();
    internal bool ( );
    internal bool (object , bool );
    internal bool (TypeCode , object , bool );
    internal bool (DateTime , bool );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public int ( );
    public void ( );
    public int (int ,  );
    public  (int );
}
internal class  : object {
    private  ;
    private bool ;
    private int ;
    private void ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int ();
    public virtual BigInteger (Byte[] , int , int );
    public virtual Byte[] (BigInteger );
    public virtual BigInteger (BigInteger );
}
internal class  : object {
    private Stream ;
    private string ;
    private string ;
    private string ;
    private int ;
    private int ;
    private int ;
    private int ;
    private PlacementType ;
    private bool ;
    private bool ;
    internal bool ;
    internal int ;
    internal Shape ;
    internal string ;
    internal int ;
    internal int ;
    internal (Shape , int );
    public string ();
    public void (string );
    public Stream ();
    public void (Stream );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public PlacementType ();
    public void (PlacementType );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal void (string , int );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private Byte[] ;
    private int ;
    private Byte[] ;
    internal ( , int );
    internal void (int );
    internal void ();
    internal void (CellArea );
    internal void (int );
    internal void (int , int );
    internal void (double );
    internal void (Byte[] );
    internal void (Byte[] );
    internal void (byte );
    internal int (string );
}
internal class  : object {
    internal int ;
    internal int ;
    internal Style ;
    internal  ;
    internal  ;
    internal object ;
    public  ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    public object ();
    public void (object );
    public  ();
    public Style ();
}
internal class  :  {
    internal (PivotField );
}
internal class  :  {
    private  ;
    public ( ,  );
    public ( ,  ,  , BigInteger );
    public ( ,  ,  , BigInteger , BigInteger );
    public ( ,  ,  , BigInteger , BigInteger , Byte[] );
    public  ();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ( );
}
internal abstract class  : object {
    []
protected  ;
    protected  ;
    protected double ;
    protected  ;
    protected IList ;
    protected IList ;
    protected  ;
    protected bool ;
    protected bool ;
    internal IList ;
    public ( );
    internal void (PointF , float , float );
    internal  ();
    public  ();
    internal  ();
    public  ();
    public double ();
    public void (double );
    public  ();
    public void ( );
    public IList ();
    public void (IList );
    public IList ();
    public void (IList );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public void (ArrayList );
    public void (ArrayList );
    internal double (object );
}
internal interface  {
    public abstract virtual string (string );
    public abstract virtual void (WebRequest , Stream );
    public abstract virtual void (HttpWebResponse , Stream );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream ,  );
    private void ();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual int Read(Byte[] , int , int );
    private void ();
    private void ();
    private bool (int );
    private void ();
    private static  (Stream );
    public virtual void Flush();
    public virtual void Write(Byte[] , int , int );
}
internal class  : object {
    internal string ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal List`1<string> ;
    internal bool ();
}
internal class  :  {
    internal (SlicerCacheItemCollection );
}
internal class  : object {
    private  ;
    private  ;
    private bool ;
    public ( ,  );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public virtual void ();
}
internal class  : object {
    private UInt32 ;
    private int ;
    private int ;
    private ushort ;
    private ushort ;
    private UInt32 ;
    private UInt32 ;
    private int ;
    private int ;
    private UInt32 ;
    private UInt32 ;
    internal void (BinaryReader );
    internal void (BinaryWriter );
    internal int ();
    internal UInt32 ();
    internal void (UInt32 );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal ushort ();
    internal void (ushort );
    internal ushort ();
    internal void (ushort );
    internal UInt32 ();
    internal void (UInt32 );
    internal UInt32 ();
    internal void (UInt32 );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal UInt32 ();
    internal void (UInt32 );
    internal UInt32 ();
    internal void (UInt32 );
}
internal class  : object {
    private ArrayList ;
    private long ;
    private long ;
    internal ArrayList ();
    internal void (ArrayList );
    internal long ();
    internal void (long );
    internal long ();
    internal void (long );
}
internal class  :  {
    private  ;
    private ( );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal bool ;
    internal Style ;
    internal (WorksheetCollection );
    internal Font ();
}
internal class  : object {
    private  ;
    private int ;
    private int ;
    private  ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    public ( );
    public virtual string ();
    public virtual  ();
    public virtual void ( );
    public virtual int ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    private static void (Byte[] , int , byte );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static Int16[] ;
    internal static Int16[] ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal Int16[] ;
    internal Int32[] ;
    internal int ;
    internal int ;
    internal int ;
    private (Int16[] , Int32[] , int , int , int );
    private static ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    []
internal Shape ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal (Shape , bool );
    internal (Shape );
}
internal abstract class  : object {
    public static void (IDictionary ,  );
    public static  (IDictionary );
    public static Byte[] ( );
    public static  (Byte[] );
}
internal class  :  {
    []
private  ;
    private  ;
    internal ( ,  );
    public virtual void ( );
    private void ( );
    private string ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ([] );
    public ([] , [] );
    public (IEnumerable );
    public (IEnumerable , IEnumerable );
    public static  (object );
    public [] ();
    public [] ();
    public virtual  ();
}
internal class  : object {
    public List`1<> ;
    internal  ();
    internal void (string );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal (int ,  );
    internal virtual void ( );
}
internal class  :  {
    public ( );
    public virtual  ( ,  );
    internal virtual void ( ,  , byte );
    internal virtual  ( ,  );
    protected virtual Byte[] ( ,  );
    protected virtual Byte[] ( ,  );
    protected virtual Byte[] ( );
    protected virtual void ( );
    protected virtual void ( , Byte[] );
    protected virtual void ( , Byte[] );
    protected virtual Byte[] ( , Byte[] );
    protected virtual void ( , Byte[] );
    protected virtual  ( , Byte[] );
    protected virtual void ( , Byte[] );
    protected virtual void ( , Byte[] );
    protected virtual void ( , Byte[] );
    protected virtual void ( ,  );
    protected static Byte[] (Byte[] , Byte[] );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    internal ( ,  ,  );
    internal Hashtable ();
    internal  ();
    internal bool ();
    internal bool ();
    internal void ();
    private Brush (int );
    private CustomLineCap ();
    private Font ();
    private Byte[] (int );
    private ImageAttributes ();
    private GraphicsPath ();
    private  (int );
    private Region ();
    private StringFormat ();
    private Byte[] (int );
    private Byte[] (int , int , int , PixelFormat );
    private ColorBlend ();
    private Blend ();
    private GraphicsPath ();
    private GraphicsPath ();
    private AdjustableArrowCap ();
    private CustomLineCap ();
    private PointF ();
    private LinearGradientBrush ();
    private Byte[] (int );
    private  ();
    private PathPointType ();
    private PathPointType ();
    private  (int );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    internal static void (string );
}
internal class  :  {
    internal ( , object );
    internal  ();
    internal  ();
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private  ;
    private bool ;
    []
private Cells ;
    internal ( , Worksheet , CellArea , bool , CellArea[] );
    internal ( , CellArea[] );
    private ( );
    internal static void (Cells ,  ,  , CellArea );
    internal static void (Cells ,  ,  );
    internal static void (Cells ,  ,  );
    internal static void (Cells ,  ,  , int , int );
    internal void (Worksheet , bool );
    internal void ( );
    private static void (Cells ,  ,  ,  ,  );
    private void ( ,  ,  );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    private static void (CellArea , int ,  ,  );
    private static void (CellArea , int ,  ,  );
}
internal class  :  {
    internal void ( );
    internal void (string , bool );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public object Current { get; }
    public DictionaryEntry Entry { get; }
    public object Key { get; }
    public object Value { get; }
    internal ( );
    public virtual object get_Current();
    public virtual DictionaryEntry get_Entry();
    public virtual object get_Key();
    public virtual bool MoveNext();
    public virtual void Reset();
    public virtual object get_Value();
    private object ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private bool ;
    internal ( ,  , bool );
    protected virtual bool ( );
    protected virtual bool ( );
}
internal class  : object {
    internal  ;
    private  ;
    private string ;
    private TimelineCollection ;
    private Timeline ;
    private string ;
    internal ( ,  , string , string );
    internal void ( );
    private void ( );
    private void ( );
    private void ( );
}
internal class  : object {
    protected  ;
    protected  ;
    protected int ;
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
    public virtual int ();
    public virtual void (int );
}
internal class  : object {
    private static Hashtable ;
    private static double ;
    private static ();
    internal static string (SizeF );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  ,  ,  );
    public ( ,  ,  );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal interface  {
    public abstract virtual bool ( , int );
}
internal class  : object {
}
internal class  : object {
    protected  ;
    public ( );
    public virtual string ();
    public virtual int ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    public virtual int ();
}
internal class  : object {
    private bool ;
    private int ;
    private Hashtable ;
    private ArrayList ;
    public (bool , int );
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    private Palette ;
    internal (Palette );
    internal void (Marker , int );
    private void (Color , int );
    private void (Color , int );
    private void (int );
    private void (ChartMarkerType , int );
    private ChartMarkerType (int );
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal int ;
}
internal class  :  {
    private bool ;
    private bool ;
    internal ( , string , string , bool , bool );
    protected virtual void ( , DateTime , double , StringBuilder );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual void ( );
    private void ( ,  );
    private void ( ,  );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
[("And")]
[("Or")]
[("Complement")]
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    private float (RectangleF );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    private RectangleF (RectangleF );
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( , BigInteger );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    public ( , Worksheet ,  );
    private ( , int );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual void (bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int , int );
    public virtual  (int );
    public virtual  ();
    public virtual  ();
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
}
internal class  :  {
    internal (Axis );
    internal double (object , bool , TimeUnit , bool );
    internal double (DateTime , TimeUnit , bool );
    internal double (double , TimeUnit , bool );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private string ;
    public void ();
    public void (BigInteger );
    public void ( );
    public void (DateTime );
    public void (DateTime );
    public void ( );
    public void ( );
    public void (string );
    public  ( );
    public  ( ,  );
    public  ( );
    private  ( ,  , Byte[] );
    public IEnumerable ();
}
internal class  : object {
}
internal class  : object {
    internal  ;
}
internal class  : object {
    private static  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private Byte[] ;
    private  ;
    private  ;
    private Byte[] ;
    private  ;
    private  ;
    private bool ;
    internal ( ,  ,  ,  );
    protected ( );
    private static ();
    public bool ();
    public  ();
    public  ();
    public int ();
    public  ();
    public string ();
    public  ();
    public Byte[] ();
    public  ();
    public string ();
    public  ();
    public  ();
    public  ();
    public Byte[] ();
    public  ();
    public Byte[] ();
    private bool ( );
    private bool ( );
    private  (Byte[] );
    private bool (Byte[] ,  , Byte[] );
    public bool ( );
    public bool ( );
    public  ();
    private  ( , string );
    private  ();
    public static  ( ,  );
    public static  ( ,  );
}
internal class  : object {
    private [][] ;
    public ([][] );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual bool ( );
    public sealed virtual bool (int , int ,  );
    public sealed virtual  (int , int );
    public sealed virtual  (int , int ,  );
    public sealed virtual object (int , int ,  );
    public sealed virtual void (int , int , StringBuilder ,  );
}
internal class  : object {
    internal  ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal ( , float , float , float , float , float );
    internal ( , float , float );
    internal ( );
}
internal class  : object {
    public static  ( , Char[] , Byte[] , int ,  );
    public static  (string , Char[] , Byte[] , int ,  );
    public static  (string , Char[] , Byte[] , int ,  );
}
internal class  : object {
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
}
internal class  : ValueType {
    public static void ( , Rectangle , string , int , Font , Color ,  ,  , int , TextDirectionType );
    public static void ( , RectangleF , string , int , Font , Color ,  ,  , int , TextDirectionType );
    public static Size ( , string , int , Font , Size ,  ,  , int , bool );
    public static Size ( , string , int , Font , SizeF ,  ,  , int , bool );
    private static string (string );
    private static Size ( , string , Font , SizeF ,  ,  );
    private static int (string );
    private static Size (SizeF , SizeF , int );
    internal static Size ( , string , Font );
    public static Size ( , string , int , Font , Size ,  ,  , bool );
    public static Size ( , string , int , Font , SizeF ,  ,  , bool );
    private static Size ( , string , Font , SizeF ,  ,  , bool );
    public static SizeF ( , string , Font );
    private static SizeF ( , string , Font , Size );
    private static SizeF ( , string , Font , SizeF );
    public static StringAlignment ( );
    public static float ( , bool , string , Font , bool );
    public static SizeF ( , string , Font );
    public static float ( , string , Font , Color , float , float , float , float , int , TextDirectionType , Font );
}
internal interface  {
    public abstract virtual void ();
}
internal class  : object {
    []
private Cells ;
    []
private  ;
    []
private RowCollection ;
    private  ;
    []
private FindOptions ;
    private  ;
    private  ;
    private bool ;
    private Hashtable ;
    []
private  ;
    []
private  ;
    private int ;
    private  ;
    internal (Cells , object , FindOptions );
    private Cell ( , int );
    private Cell ( , int ,  , bool );
    private void ();
    public sealed virtual bool ( , int );
    internal void ( );
    private bool ( );
    private bool ( );
    private bool (Style , Style );
    private  (string );
    private  (string );
}
internal class  :  {
    private PointF[] ;
    public (PointF[] );
    public PointF[] ();
    public void (PointF[] );
    internal virtual bool ();
    internal virtual string (string );
}
internal class  :  {
    protected virtual Int32[] (Byte[] );
    protected virtual void (Byte[] , int , Byte[] , int );
    protected virtual void (Byte[] , int , Byte[] , int );
}
internal class  : object {
    private static Char[] ;
    private static ();
    internal static bool (int );
    internal static Double[] (string );
    internal static string (Stream );
    public static char (int );
    public static bool (char );
    public static double (double , string , int );
    public static double (double , string , int );
    public static int (Shape , HtmlSaveOptions );
    internal static bool (Style , Style );
    internal static string (int , int );
    internal static string (string , bool );
    internal static string (string );
    private static string (char , bool );
    private static string (char );
    internal static string (string );
    private static string (char );
    internal static string (string );
    internal static string (string );
    internal static string (FontUnderlineType );
    internal static string (TextAlignmentType );
    internal static TextAlignmentType (string );
    internal static TextAlignmentType (string );
    internal static string (TextAlignmentType );
    internal static long (int );
    internal static bool (WorksheetCollection , Hyperlink , String& , CellArea& );
    internal static string (CellArea );
    internal static string (string );
    private static string (char );
    internal static bool (char );
    internal static bool (char );
    internal static bool (char );
    internal static string (FormatCondition );
    internal static string (Style );
    internal static string (Style );
    internal static string (Style );
    internal static string (string );
    internal static string (FormatCondition );
    internal static string (string , bool , Hashtable , Style , CellValueType ,  , bool , bool );
    public static double (int , int );
    public static int (int , double );
    public static string (MsoDrawingType );
    public static string (CellBorderType , bool );
    public static string (Style , BorderType , bool );
    public static bool (Style , Style );
    public static int (CellBorderType );
    public static string (HtmlLinkTargetType );
    public static double (string );
    public static string (String[] , char );
    public static string (int , long );
    internal static string ( );
    internal static string (ImageOrPrintOptions );
    internal static string (ImageType );
    internal static string (Color , Color , GradientStyleType );
    internal static string (Color , Color , GradientStyleType );
    internal static string (Color , Color , GradientStyleType );
    internal static string (Color , Color , GradientStyleType );
    internal static string (Color , Color , GradientStyleType );
    internal static string (Color , Color , GradientStyleType );
    internal static string (Color , Color , GradientStyleType );
    internal static string (Color );
    internal static int (byte );
    internal static string (string );
    private static ArrayList (ArrayList );
    internal static string (string );
    internal static bool (Shape , CellArea );
    internal static string (string , byte );
    internal static bool (string );
    internal static string (string );
    internal static string (string , string );
}
internal class  :  {
    internal (int );
    private static  (string ,  );
    private void ( ,  );
    internal void (Workbook , int );
    internal void ( );
}
internal class  : object {
    []
private WorksheetCollection ;
    []
private Worksheet ;
    []
private ShapeCollection ;
    []
private  ;
    private  ;
    private ArrayList ;
    internal Byte[] ;
    []
private SaveOptions ;
    []
private Stream ;
    internal (WorksheetCollection , Worksheet , ShapeCollection ,  , SaveOptions , Stream );
    private void ();
    internal void (SaveOptions );
    internal void (GroupShape , bool );
    internal void (Shape , bool );
    internal void (Shape , bool );
    internal void (Shape );
    internal void (Shape , FontSettingCollection );
}
internal abstract class  : object {
    protected int ;
    protected (byte , int );
    protected (byte ,  );
    internal abstract virtual  (byte );
    public abstract virtual  ();
    public abstract virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual bool ();
    public virtual String[] ();
    public virtual String[] ();
    public virtual bool ();
    public virtual bool ();
    public virtual Double[] ();
    public virtual Double[] ();
    public abstract virtual bool ( , object );
    public abstract virtual bool ( );
    public abstract virtual bool ( );
    public abstract virtual int ( );
    public abstract virtual int ( ,  );
    public byte ();
    internal string ();
    public sealed virtual bool (int );
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual  ();
}
internal class  :  {
    internal (ListColumn );
}
internal class  :  {
    public static int ;
    public static int ;
    private Byte[] ;
    private  ;
    public ( );
    public (Byte[] , int );
    public (Stream );
    private static ();
    public void (Byte[] , int );
    public Byte[] ();
    public  ();
    public void ( ,  , Byte[] , Byte[] , int , int , Byte[] , int );
    public void ( , Byte[] , Byte[] , int , int , Byte[] , int );
}
[AttributeUsageAttribute("480")]
internal class  : Attribute {
}
internal class  : object {
    protected Color ;
    protected Color ;
    protected int ;
    protected int ;
    protected int ;
    protected Brush ;
    protected bool ;
    public void (Color , Color , int , int , int );
    public void (Brush , Color , int , int , int );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat , Single& , Single& );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat , Single& , Single& );
}
internal class  : object {
    private Byte[] ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private long ;
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string Storage { get; public set; }
    public string Extension { get; public set; }
    public string Type { get; public set; }
    public Byte[] Header { get; public set; }
    public long Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string );
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string );
    [CompilerGeneratedAttribute]
public string get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(string );
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string );
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string );
    public Byte[] get_Header();
    public void set_Header(Byte[] );
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
public int ;
    [DebuggerBrowsableAttribute("0")]
public int ;
}
internal class  : object {
    internal static void (Shape , LineFormat );
    internal static void (Shape , FillFormat );
    internal static bool (MsoDrawingType );
    internal static CheckValueType (Cell );
    internal static bool (ActiveXControl );
    internal static void (Shape ,  , ThreeDFormat );
    internal static void (Shape , ShadowEffect );
    internal static bool (MsoDrawingType );
    internal static bool (Shape );
    internal static Int32[] (BevelType );
    internal static SizeF ( , CommentShape , RectangleF , bool );
}
internal class  :  {
    internal (int , bool );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual void ( );
    public abstract virtual void (bool );
    public abstract virtual void (Int32[] );
    public abstract virtual void (Byte[] );
    public abstract virtual void (IDictionary );
    public abstract virtual  ();
    public abstract virtual int ();
    public abstract virtual byte ();
    public abstract virtual IDictionary ();
    public abstract virtual IList ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual void (IList );
    public abstract virtual void ( );
    public abstract virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static  (Region ,  );
    internal static  (GraphicsPath );
    internal static  (GraphicsPath ,  );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (WriteProtection );
}
internal class  : object {
    private  ;
    private string ;
    private  ;
    private  ;
    public (string ,  );
    public (string ,  ,  );
    public sealed virtual object ();
    public sealed virtual  ();
    public static IEnumerable ();
}
internal class  : object {
    internal static void ( , RectangleF& );
    internal static PointF[] (ArrayList );
    internal static float ( , bool );
    internal static bool (Double& , Double& , IList , int , int , double , double );
    internal static double (IList , int );
    internal static bool (Double& , Double& , IList , int , int ,  , double );
    internal static void ( ,  ,  ,  );
    internal static bool ( );
    internal static bool ( );
    internal static bool ( );
    internal static bool ( );
    internal static void (PointF , IList , IList , int );
    internal static void (PointF , ArrayList ,  , int , bool );
    internal static void (ArrayList ,  ,  );
    internal static Color (Chart , Color ,  );
    internal static bool ( , ArrayList ,  , ArrayList , ArrayList );
    internal static bool ( , ArrayList ,  , [] , ArrayList );
    internal static bool ( , ArrayList ,  , [] , ArrayList );
    internal static Color (Color );
}
[AttributeUsageAttribute("4")]
internal class  : Attribute {
}
internal class  : object {
    private int ;
    private bool ;
    internal (int , bool );
    public sealed virtual int (string , bool );
    public sealed virtual int (string , char );
    public sealed virtual int (string , string );
    public sealed virtual bool (string );
    public sealed virtual int (Char[] );
    public sealed virtual bool ();
}
internal class  : object {
    internal bool ;
    internal string ;
    internal ArrayList ;
    internal ArrayList ;
}
internal class  :  {
    public static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  : object {
    private bool ;
    []
private  ;
    []
private  ;
    []
private  ;
    private  ;
    private  ;
    private static Single[] ;
    private static Single[] ;
    private static Single[] ;
    private static Single[] ;
    private static Single[] ;
    internal ( ,  ,  ,  ,  );
    private static ();
    internal bool ();
    internal void (bool );
    internal void ( );
    internal void (Brush , bool );
    internal void (Byte[] , PointF , SizeF , string );
    internal void (Bitmap , PointF , SizeF , string );
    internal void ( , PointF , SizeF );
    internal void ( , PointF , SizeF , string );
    internal void ( , PointF , SizeF );
    internal void ( );
    private static int ( );
    private static int ( );
    private static int ( );
    [("True")]
internal static Single[] ( , bool );
    private static void ( , Single[] , bool );
    internal static Color (Color , Color );
    internal static Color (Color );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private string ;
    private  ;
    private  ;
    private  ;
    private ( );
    public (string ,  ,  );
    public (string ,  ,  );
    public static  (object );
    public virtual string ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    private UInt32 ;
    private UInt32 ;
    private Byte[] ;
    public void (Byte[] , ushort , UInt32 );
    public UInt32 ();
    public UInt32 (Byte[] , int , UInt32 );
    public UInt32 (Byte[] , ushort , ushort );
}
internal class  : object {
    []
private Workbook ;
    []
private WorksheetCollection ;
    []
internal  ;
    []
private  ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private Hashtable ;
    private int ;
    private int ;
    private Byte[] ;
    []
private  ;
    internal ( );
    internal void ( );
    private void ();
    private void ();
    private void ( );
    private void ();
    private void ();
    private void ( );
    internal void ();
    private void ();
    private static bool (bool , bool ,  );
    internal void ( , Style , bool );
    private void (Border ,  );
    private void ();
    private void ();
    private void (TableStyle );
    internal static  (Byte[] , int , WorksheetCollection );
    internal void (ArrayList , bool );
    internal void ();
    internal void ();
    internal  (Byte[] , int );
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal static  (Byte[] , int , bool , Boolean& );
    internal static void (Border , Byte[] , int );
    internal static  (Byte[] , int , Boolean& );
}
internal class  : object {
    internal int ;
    internal int ;
    internal byte ;
    internal int ;
    internal int ;
    internal Byte[] ;
    internal Byte[] ;
    internal Byte[] ;
    internal Byte[] ;
    internal Byte[] ;
    internal Byte[] ;
    internal short ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal virtual void ();
    public virtual int ();
    public virtual int ();
    public virtual byte ();
    public virtual int ();
    public virtual int ();
    public virtual Byte[] ();
    public virtual Byte[] ();
    public virtual Byte[] ();
    public virtual Byte[] ();
    public virtual Byte[] ();
    public virtual Byte[] ();
    public virtual bool ();
}
internal class  : object {
    private  ;
    private object ;
    private  ;
    internal ( , object ,  );
    internal ( , object );
    internal void ( );
    private static  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private int ;
    private  ;
    private  ;
    private  ;
    public (int , BigInteger , BigInteger , BigInteger );
    private ( );
    public static  ( , bool );
    public static  (object );
    public int ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public virtual  ();
}
internal abstract class  : object {
    private static Hashtable ;
    private static ();
    public static  (string );
    private static  (char );
    private static [] (string );
    public static  (int , int ,  , [] , [] );
    internal static int ( , int , int );
    internal static  (int , int );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal void ( );
}
internal class  : InvalidCastException {
    public (string );
}
internal interface  {
    public abstract virtual void (int ,  );
    public abstract virtual void (int ,  , long );
    public abstract virtual void (int , string ,  );
    public abstract virtual void (int , string ,  );
    public abstract virtual void ( , int , string , object );
    public abstract virtual void (int , string , double );
    public abstract virtual void (int , string , float );
    public abstract virtual void (int , string , long );
    public abstract virtual void (int , string , long );
    public abstract virtual void (int , string , int );
    public abstract virtual void (int , string , long );
    public abstract virtual void (int , string , UInt32 );
    public abstract virtual void (int , string , bool );
    public abstract virtual void (int , string , string );
    public abstract virtual void (int , string ,  );
    public abstract virtual void (int , string ,  );
    public abstract virtual void (int , string ,  );
    public abstract virtual void (int , string , UInt32 );
    public abstract virtual void (int , string , int , object );
    public abstract virtual void (int , string , int );
    public abstract virtual void (int , string , long );
    public abstract virtual void (int , string , int );
    public abstract virtual void (int , string , long );
    public abstract virtual void ( , int , string , IEnumerable );
    public abstract virtual void ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    internal ( ,  );
    internal int ( );
    internal int ( );
    internal int ( );
    internal int ( );
    public sealed virtual void Dispose();
}
internal class  :  {
    internal  ;
    internal  ;
    private  ;
    private  ;
    private bool ;
    public (Byte[] );
    public (Stream );
    public  ();
    public string ();
    public  ();
    public  ();
    public  ();
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    public sealed virtual  ( );
    public sealed virtual  ();
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual void ( );
    public sealed virtual bool ( );
    public sealed virtual bool ( );
    public sealed virtual  ();
    public sealed virtual  (bool );
    public sealed virtual  ();
    public sealed virtual bool ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    protected BigInteger ;
    internal (BigInteger );
    public virtual BigInteger ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    private Workbook ;
    private EbookLoadOptions ;
    private  ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private bool ;
    private bool ;
    private string ;
    private List`1<Byte[]> ;
    private List`1<string> ;
    public (Workbook , LoadOptions );
    internal void (Stream );
    private void (Worksheet , Byte[] );
    private void ();
    private string (int , string );
    private bool ();
    private string (int , string ,  );
    internal string (string );
    internal string (string );
    private string (int , int );
    private void (Worksheet , int , int , string , Worksheet );
    private void (Hashtable , Hashtable );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    private RectangleF (RectangleF );
}
internal class  :  {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private IDictionary ;
    private IList ;
    private ( );
    public (IDictionary );
    public (IList , IDictionary );
    public (IList , IList );
    [ObsoleteAttribute]
public (Hashtable );
    [ObsoleteAttribute]
public (ArrayList , Hashtable );
    [ObsoleteAttribute]
public (ArrayList , ArrayList );
    private static ();
    public static  ( ,  );
    public static  ( ,  );
    public static  ( , bool );
    public static  (object );
    public IEnumerator ();
    public IEnumerable ();
    public  ( );
    public  ( );
    public virtual  ();
    public bool ( );
    public [] ();
    public [] ();
    public [] ();
    private [] (bool );
    private static [] (IList );
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal DataView ;
    [DebuggerBrowsableAttribute("0")]
private DataRowView ;
    [DebuggerBrowsableAttribute("0")]
private IEnumerator ;
    public String[] Columns { get; }
    public int Count { get; }
    public object Item { get; }
    public object Item { get; }
    internal (DataView );
    public sealed virtual String[] get_Columns();
    public sealed virtual int get_Count();
    public sealed virtual void BeforeFirst();
    public sealed virtual object get_Item(int );
    public sealed virtual object get_Item(string );
    public sealed virtual bool Next();
}
internal class  : object {
    private string ;
    private string ;
    private string ;
    private  ;
    private  ;
    internal ArrayList ;
    internal string ;
    internal Byte[] ;
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
}
internal class  : object {
    private bool ;
    private bool ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static ();
    private static UInt32 (UInt32 , int );
    private static UInt32 (UInt32 , int );
    private static void (int , UInt32[] , int , UInt32[] , int );
    private static void (int , UInt32[] , int , UInt32[] , int );
    private static void (int , UInt32[] , int , UInt32[] , int );
    private static void (int , UInt32[] , int , UInt32[] , int );
    private static UInt32 (Byte[] , int );
    private static void (UInt32 , Byte[] , int );
    private static void (UInt32[] , UInt32[] , int );
    private static void (UInt32[] , UInt32[] , int );
    private void (bool , Byte[] );
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
}
internal class  : object {
    private  ;
    private int ;
    private int ;
    public ( , int , int );
    public sealed virtual  ( );
    public sealed virtual void ();
    public sealed virtual bool ();
    public sealed virtual bool (int , int );
    public sealed virtual bool (int );
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual  ( ,  ,  );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual void ( );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void ();
    public sealed virtual void ( );
    public sealed virtual  (int , int );
    public sealed virtual  (int );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void (int , int ,  );
    public sealed virtual void (int ,  );
}
internal class  :  {
    [("True")]
internal void (string );
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal  ;
    internal void ( );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    internal [][] ;
    internal Object[] ;
    internal Object[] ;
    internal  ;
    internal  ;
    internal [] ;
    internal Hashtable ;
    internal Hashtable ;
    private short ;
    internal ( ,  );
    internal virtual void ( );
    internal static bool (long , Hashtable , int , bool );
    private void ( );
    internal void ( );
    private void ( );
    private bool ( ,  );
    internal  (int ,  );
    internal bool ( , bool );
    internal void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
[]
private Cells ;
    [DebuggerBrowsableAttribute("0")]
[]
private RowCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private String[] ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
[]
private OoxmlSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal ( ,  , OoxmlSaveOptions ,  );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private static void ( ,  );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( ,  );
    [("True")]
private void ( );
    [("True")]
private void ( ,  , bool , string );
    [("True")]
private void ( );
    private void ( ,  , bool , string );
    private void ( , Shape );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
internal static void ( , DataSorter );
    private static string ( );
    [("True")]
private static void ( , DataSorterKey , CellArea );
    [("True")]
internal static void ( , AutoFilter , bool );
    [("True")]
private static void ( , FilterColumn );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void (Validation , int , int ,  );
    private void ( , PageSetup );
    private void ( , PageSetup );
    private bool (PageSetup , string );
    private void ( , PageSetup , string );
    [("True")]
private void ( , PageSetup );
    [("True")]
private void ( , string , string );
    private static void ( , HorizontalPageBreakCollection );
    private static void ( , VerticalPageBreakCollection );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( ,  );
    [("True")]
private void ( );
    [("True")]
private void ( , int , string ,  );
    private void ( );
    private void ( ,  , int , string );
    private string (int );
    private void ( );
    private void ( );
    [("True")]
private void ( , Column , int );
    [("True")]
private void ( );
    private int ();
    private void ( );
    private void ( , FormatConditionCollection , bool );
    internal void ( );
    private string (FormatCondition );
    private string (FormatConditionCollection );
    private void ( , FormatCondition , string , int , bool );
    private void ( , FormatCondition , bool );
    private void ( , ConditionalFormattingIcon );
    private void ( , ConditionalFormattingValue , bool , bool );
    private void ( , FormatCondition , bool );
    private void ( , FormatCondition );
    private void ( , string , bool );
    private string (string );
    private void ( , FormatCondition , string );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    private  ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    protected Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private static  ;
    private static object ;
    [("False")]
internal ([] );
    private static ();
    private static  ();
    [("False")]
private  ([] );
    public  (string , FontStyle , bool );
    public  (FontStyle , bool );
    private  (string , FontStyle , bool );
    private  (string );
    internal string (string );
    internal  (string , FontStyle , bool );
    public  (string , float , FontStyle );
    private static int (string , float , FontStyle );
    public PrivateFontCollection ( );
    internal  (FontStyle , int );
    internal  (FontStyle , string );
    private static  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  ,  ,  ,  ,  ,  ,  ,  );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    public ( ,  ,  ,  , int , int , int , int );
    public ( ,  ,  ,  , int , int , int , int , int , int , bool , bool , bool );
    private ( , int , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual  (Double[] ,  ,  );
    public virtual  (Double[][] ,  ,  );
    private void ();
}
internal class  :  {
    internal void (Byte[] );
    internal void (Axis );
    internal void (Axis );
    internal static int (int , byte , Byte[] , int );
    internal static int (bool , byte , Byte[] , int );
}
internal class  : object {
    internal int ;
    private int ;
    private string ;
    private int ;
    private bool ;
    private bool ;
    internal UInt32 ;
    private int ;
    private int ;
    private bool ;
    private int ;
    private bool ;
    private bool ;
    private string ;
    internal UInt32 ;
    internal UInt32 ;
    private int ;
    private string ;
    private double ;
    private bool ;
    internal bool ;
    internal  ;
    internal  ;
    []
private  ;
    private int ;
    []
internal List`1<> ;
    internal string ;
    internal ( );
    internal void ();
    private void ();
    private void ();
    private void ();
    internal void ( );
    private string (string );
}
internal class  : object {
    private Hashtable ;
    private Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal float ;
    internal float ;
    private string ;
    private string ;
    public virtual string ();
    public virtual float ();
    public Hashtable ();
    public void (Hashtable );
    public Hashtable ();
    public void (Hashtable );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public static float ();
    public virtual  (float );
    public virtual float (int , int );
    public virtual float (int , int );
}
internal class  : object {
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    private byte ;
    private  ;
    private object ;
    internal short ;
    internal ( );
    internal ( , short );
    internal void ( );
    internal void ( );
}
internal class  : object {
    internal [] ;
    internal  (int );
    public void (int );
}
internal class  : object {
    internal static void ( ,  ,  ,  );
    internal static void ( ,  ,  , DateTime , IList );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static  ( ,  );
    internal static  ( ,  );
    private static void ( ,  ,  , DateTime ,  ,  ,  , IList );
}
internal class  :  {
    internal bool ;
    internal bool ;
    internal string ;
    internal virtual  ();
    internal void ( , CopyOptions );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( ,  );
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal int ();
}
[DefaultMemberAttribute("")]
internal class  :  {
    private [] ;
    public   { get; }
    public ([] );
    public ( );
    public  (int );
    public  (int );
    public int ();
    public int ();
    public bool ();
}
internal class  : object {
    private int ;
    public (int );
    public sealed virtual int ();
    public sealed virtual void (int );
    public sealed virtual void (int );
    public sealed virtual void ();
    public sealed virtual void (int , int );
}
internal class  : object {
    []
private Workbook ;
    private  ;
    []
private Stream ;
    internal (Workbook , LoadOptions );
    internal void (Stream );
    private void (string );
}
internal class  : object {
    private static BigInteger ;
    private static BigInteger ;
    private  ;
    private int ;
    private Byte[] ;
    private int ;
    private Byte[] ;
    private bool ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    public ( );
    private static ();
    public sealed virtual void ( );
    private void ();
    public sealed virtual  ();
    public sealed virtual int (Byte[] , int , int );
    public sealed virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual GraphicsUnit ();
    public abstract virtual void (GraphicsUnit );
    public abstract virtual Matrix ();
    public abstract virtual void (Matrix );
    public abstract virtual RectangleF (Region );
    public abstract virtual bool (Region );
    public abstract virtual float (Font );
    public abstract virtual Region[] (string , Font , RectangleF , StringFormat );
    public abstract virtual SizeF (string , Font );
    public abstract virtual SizeF (string , Font , SizeF );
    public abstract virtual SizeF (string , Font , int );
    public abstract virtual SizeF (string , Font , PointF , StringFormat );
    public abstract virtual SizeF (string , Font , SizeF , StringFormat );
    public abstract virtual SizeF (string , Font , int , StringFormat );
    public abstract virtual SizeF (string , Font , SizeF , StringFormat , Int32& , Int32& );
    public abstract virtual float (Font );
    public abstract virtual float (Font );
}
internal class  : object {
    internal static string ( , string );
    internal static string ( , string , bool );
    internal static  ( , string );
    public static  (string );
    public static  (string ,  , bool );
    public static  (Stream ,  , bool );
    public static  (Stream );
    public static  ( , string , string );
    public static  ( , string );
    public static  ( , string , bool );
    public static string ( , bool );
    public static string ( );
    public static bool ( );
}
internal class  : object {
    private static Regex ;
    private static ();
    internal static bool (string );
    internal static string (string );
    internal static string (string );
    internal static MemoryStream (MemoryStream );
    private static void (Byte[] ,  , MemoryStream );
    private static void (Byte[] ,  , MemoryStream );
    internal static Encoding ();
}
internal class  :  {
    internal (PivotFormatCondition );
}
internal class  : object {
    private Byte[] ;
    private  ;
    public ( , Byte[] );
    public ( , Byte[] , int , int );
    public Byte[] ();
    public  ();
}
internal class  : object {
    private  ;
    private Byte[] ;
    public (int );
    public int ();
    public int (int );
    public int (int , int );
    public double ();
    public void (Byte[] );
    private UInt32 ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
}
internal class  :  {
    private byte ;
    public byte ();
    public void (byte );
    public virtual  ();
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<TextParagraph> {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
public TextParagraph  { get; }
    public TextParagraph (int );
    internal int (TextParagraph );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    public static  ;
    protected [] ;
    public ([] );
    private static ();
    public virtual [] ();
    public virtual  (int );
    public virtual int ();
    public virtual bool ();
    public virtual void (Stream );
    public static  (Stream );
    protected virtual [] ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( );
    internal virtual  (int );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal interface  {
    public abstract virtual void ();
    public abstract virtual int ();
}
internal class  :  {
    internal (ProtectedRange );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : object {
    internal static Matrix (double , double , double , PointF );
}
internal class  : object {
}
[("And")]
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal string ;
    internal double ;
    internal double ;
    internal string ;
    internal string ;
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  :  {
    internal string ;
    internal int ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private bool ;
    internal ( , string , int ,  , bool );
    public virtual void ( );
    internal void ( );
    private int ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( );
    public static  (object );
    public virtual  ();
    public  ();
    public  ();
}
internal class  :  {
    private  ;
    private short ;
    private short ;
    private int ;
    private int ;
    private  ;
    private int ;
    internal ( , int , int );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual object ();
    public virtual void ();
    public bool (int );
}
internal abstract class  : object {
    internal static string ;
    private static ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
}
internal abstract class  : object {
}
internal class  : object {
    private  ;
    private  ;
    internal (Stream );
    private void ();
    internal void ();
    internal void (float , float );
    internal void ();
    internal  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal RectangleF ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal SizeF ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private Font ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal (string , Font , Color ,  ,  , double );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual string ();
    public sealed virtual void (string );
    public sealed virtual Font ();
    public sealed virtual void (Font );
    public sealed virtual Color ();
    public sealed virtual void (Color );
    public sealed virtual  ();
    public sealed virtual double ();
    public sealed virtual void (double );
    internal void ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  :  {
    private string ;
    public (Byte[] );
    public (string );
    public (string , bool );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    public Byte[] ();
    internal virtual void ( );
    protected virtual bool ( );
    public static bool (string );
}
internal class  : object {
    private Double[] ;
    private double ;
    private Int32[] ;
    internal (Double[] , Double[][] );
    internal static  (Double[] , Double[][] );
    internal Double[] ();
    internal double ();
    internal Int32[] ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal void ( );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    public (Stream , int );
    public (Stream , int , bool );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual void Write(Byte[] , int , int );
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual int Read(Byte[] , int , int );
    public virtual void Flush();
    public virtual void WriteByte(byte );
    public void ();
    public void ();
    public virtual void Close();
}
internal class  : object {
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    []
internal  ;
    []
internal  ;
    internal ( );
    internal void (int ,  );
    private  (int );
    private  (int );
    private  (int );
    internal  (int );
}
internal class  : object {
    private  ;
    private object ;
    private int ;
    internal ( );
    internal bool (int , int );
}
internal class  :  {
    private static  ;
    private IList ;
    private  ;
    private IDictionary ;
    private IDictionary ;
    private bool ;
    private int ;
    public ( );
    private static ();
    public void (int );
    public void (String[] );
    public void (IEnumerable );
    public void ( ,  , string );
    public void ( ,  , string , string );
    public void ( ,  , string ,  ,  );
    public void ( ,  , string , string ,  ,  );
    public void ( ,  , string ,  ,  );
    public void ( ,  , string , string ,  ,  );
    public void ( , Byte[] , string );
    public void ( , Byte[] , string , string );
    public void ( , Byte[] , string ,  ,  );
    public void ( , Byte[] , string ,  ,  );
    public void ( , Byte[] , string , string ,  ,  );
    private void ( ,  , string , string ,  ,  );
    internal virtual void ( );
    public Stream (Stream );
    public Stream (Stream , bool );
    public Stream (Stream , bool , Stream );
    public Stream (Stream , string , bool );
    public Stream (Stream , string , bool , Stream );
    private void (string );
    private void (string );
    internal void (Stream , string , bool , Stream ,  );
    private  ( );
    private bool (IList );
    private static Stream (ICollection , Stream );
    private static Stream (Stream );
    private static Stream (Stream , Stream );
}
internal class  :  {
    protected double ;
    internal (byte , double );
    internal (byte );
    protected (byte , double , int );
    protected (byte ,  );
    internal static int (double );
    internal virtual  (byte );
    internal bool ();
    internal bool ();
    internal int ();
    public virtual  ();
    public virtual  ();
    public double ();
    public virtual bool ();
    public virtual bool ();
    public virtual Double[] ();
    public virtual Double[] ();
    public virtual bool ( , object );
    public virtual bool ( );
    public virtual bool ( );
    public bool (double );
    public int (double );
    public virtual int ( );
    public virtual int ( ,  );
    internal static int (double , double );
}
internal abstract class  :  {
    internal ( , float , float , float , Double[] );
    protected virtual void ( );
    private void ( );
    private void ( );
    protected virtual void ();
    protected bool ();
}
internal abstract class  : object {
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] , int );
    public static UInt64[] ();
    public static UInt64[] ();
    public static bool (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static bool (UInt64[] );
    public static bool (UInt64[] );
    public static BigInteger (UInt64[] );
}
internal class  : object {
    public UInt32 ;
    public UInt32 ;
    public Byte[] ;
}
internal enum  : Enum {
    public int value__;
    public static  NotDefined;
    public static  Custom;
    public static  Line;
    public static  LineInverse;
    public static  Triangle;
    public static  RightTriangle;
    public static  Rectangle;
    public static  Diamond;
    public static  Parallelogram;
    public static  Trapezoid;
    public static  NonIsoscelesTrapezoid;
    public static  Pentagon;
    public static  Hexagon;
    public static  Heptagon;
    public static  Octagon;
    public static  Decagon;
    public static  Dodecagon;
    public static  FourPointedStar;
    public static  FivePointedStar;
    public static  SixPointedStar;
    public static  SevenPointedStar;
    public static  EightPointedStar;
    public static  TenPointedStar;
    public static  TwelvePointedStar;
    public static  SixteenPointedStar;
    public static  TwentyFourPointedStar;
    public static  ThirtyTwoPointedStar;
    public static  RoundCornerRectangle;
    public static  OneRoundCornerRectangle;
    public static  TwoSamesideRoundCornerRectangle;
    public static  TwoDiagonalRoundCornerRectangle;
    public static  OneSnipOneRoundCornerRectangle;
    public static  OneSnipCornerRectangle;
    public static  TwoSamesideSnipCornerRectangle;
    public static  TwoDiagonalSnipCornerRectangle;
    public static  Plaque;
    public static  Ellipse;
    public static  Teardrop;
    public static  HomePlate;
    public static  Chevron;
    public static  PieWedge;
    public static  Pie;
    public static  BlockArc;
    public static  Donut;
    public static  NoSmoking;
    public static  RightArrow;
    public static  LeftArrow;
    public static  UpArrow;
    public static  DownArrow;
    public static  StripedRightArrow;
    public static  NotchedRightArrow;
    public static  BentUpArrow;
    public static  LeftRightArrow;
    public static  UpDownArrow;
    public static  LeftUpArrow;
    public static  LeftRightUpArrow;
    public static  QuadArrow;
    public static  CalloutLeftArrow;
    public static  CalloutRightArrow;
    public static  CalloutUpArrow;
    public static  CalloutDownArrow;
    public static  CalloutLeftRightArrow;
    public static  CalloutUpDownArrow;
    public static  CalloutQuadArrow;
    public static  BentArrow;
    public static  UTurnArrow;
    public static  CircularArrow;
    public static  LeftCircularArrow;
    public static  LeftRightCircularArrow;
    public static  CurvedRightArrow;
    public static  CurvedLeftArrow;
    public static  CurvedUpArrow;
    public static  CurvedDownArrow;
    public static  SwooshArrow;
    public static  Cube;
    public static  Can;
    public static  LightningBolt;
    public static  Heart;
    public static  Sun;
    public static  Moon;
    public static  SmileyFace;
    public static  IrregularSeal1;
    public static  IrregularSeal2;
    public static  FoldedCorner;
    public static  Bevel;
    public static  Frame;
    public static  HalfFrame;
    public static  Corner;
    public static  DiagonalStripe;
    public static  Chord;
    public static  CurvedArc;
    public static  LeftBracket;
    public static  RightBracket;
    public static  LeftBrace;
    public static  RightBrace;
    public static  BracketPair;
    public static  BracePair;
    public static  StraightConnector1;
    public static  BentConnector2;
    public static  BentConnector3;
    public static  BentConnector4;
    public static  BentConnector5;
    public static  CurvedConnector2;
    public static  CurvedConnector3;
    public static  CurvedConnector4;
    public static  CurvedConnector5;
    public static  Callout1;
    public static  Callout2;
    public static  Callout3;
    public static  Callout1WithAccent;
    public static  Callout2WithAccent;
    public static  Callout3WithAccent;
    public static  Callout1WithBorder;
    public static  Callout2WithBorder;
    public static  Callout3WithBorder;
    public static  Callout1WithBorderAndAccent;
    public static  Callout2WithBorderAndAccent;
    public static  Callout3WithBorderAndAccent;
    public static  CalloutWedgeRectangle;
    public static  CalloutWedgeRoundRectangle;
    public static  CalloutWedgeEllipse;
    public static  CalloutCloud;
    public static  Cloud;
    public static  Ribbon;
    public static  Ribbon2;
    public static  EllipseRibbon;
    public static  EllipseRibbon2;
    public static  LeftRightRibbon;
    public static  VerticalScroll;
    public static  HorizontalScroll;
    public static  Wave;
    public static  DoubleWave;
    public static  Plus;
    public static  ProcessFlow;
    public static  DecisionFlow;
    public static  InputOutputFlow;
    public static  PredefinedProcessFlow;
    public static  InternalStorageFlow;
    public static  DocumentFlow;
    public static  MultiDocumentFlow;
    public static  TerminatorFlow;
    public static  PreparationFlow;
    public static  ManualInputFlow;
    public static  ManualOperationFlow;
    public static  ConnectorFlow;
    public static  PunchedCardFlow;
    public static  PunchedTapeFlow;
    public static  SummingJunctionFlow;
    public static  OrFlow;
    public static  CollateFlow;
    public static  SortFlow;
    public static  ExtractFlow;
    public static  MergeFlow;
    public static  OfflineStorageFlow;
    public static  OnlineStorageFlow;
    public static  MagneticTapeFlow;
    public static  MagneticDiskFlow;
    public static  MagneticDrumFlow;
    public static  DisplayFlow;
    public static  DelayFlow;
    public static  AlternateProcessFlow;
    public static  OffPageConnectorFlow;
    public static  BlankButton;
    public static  HomeButton;
    public static  HelpButton;
    public static  InformationButton;
    public static  ForwardOrNextButton;
    public static  BackOrPreviousButton;
    public static  EndButton;
    public static  BeginningButton;
    public static  ReturnButton;
    public static  DocumentButton;
    public static  SoundButton;
    public static  MovieButton;
    public static  Gear6;
    public static  Gear9;
    public static  Funnel;
    public static  PlusMath;
    public static  MinusMath;
    public static  MultiplyMath;
    public static  DivideMath;
    public static  EqualMath;
    public static  NotEqualMath;
    public static  CornerTabs;
    public static  SquareTabs;
    public static  PlaqueTabs;
    public static  ChartX;
    public static  ChartStar;
    public static  ChartPlus;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private BigInteger ;
    private BigInteger ;
    private Byte[] ;
    public ( );
    public ( ,  , BigInteger );
    public ( ,  , BigInteger , BigInteger );
    public ( ,  , BigInteger , BigInteger );
    public ( ,  , BigInteger , BigInteger , Byte[] );
    public ( ,  , BigInteger , BigInteger , Byte[] );
    public static  (object );
    public  ();
    public  ();
    public BigInteger ();
    public BigInteger ();
    public Byte[] ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    internal (Int32[] , String[] );
    internal (Int32[] , bool );
    internal virtual int ();
    internal virtual object (int );
}
internal class  : object {
    internal string ;
    internal PaperSizeType ;
    internal double ;
    internal double ;
    internal int ;
    internal PageOrientationType ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal int ;
    internal bool ;
    internal bool ;
    internal double ;
    internal double ;
    internal double ;
    internal bool ;
    internal bool ;
    internal PrintOrderType ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal void ();
    internal void ( , PageSetup );
    internal OdsPageBackgroundGraphicType (string );
    internal OdsPageBackgroundGraphicPositionType (string );
}
internal class  :  {
    public virtual string ();
    protected virtual int ();
    protected virtual void ();
    protected virtual void ();
    protected virtual void (Byte[] , Byte[] );
    protected virtual void (Byte[] );
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    internal (int );
}
internal class  : object {
}
internal abstract class  : object {
    protected int ;
    protected ( ,  );
    protected (int );
    protected void (int , bool );
    internal void ( ,  );
    internal static int (int ,  ,  );
    public sealed virtual  ();
    public void ( );
    public sealed virtual  ();
    public sealed virtual void ( );
    internal bool ( ,  );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual  (int , int );
    public abstract virtual void ();
    public abstract virtual bool ();
    public abstract virtual  ();
    public abstract virtual bool (int , int );
    public abstract virtual bool (int );
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual  (int );
    public abstract virtual  (int );
    public abstract virtual  ();
    public abstract virtual  ( );
    public abstract virtual bool ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    protected static bool ( ,  );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual bool ( );
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual bool ( , Int32[] );
    public virtual bool ( , Int32[] );
    public virtual bool ();
    public virtual bool ();
    public virtual void ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual bool ();
    public virtual  ( );
    public virtual  ( );
    public virtual void ( ,  );
    public virtual  ();
    public virtual  ();
    public virtual  (int , int , int , int );
    public virtual  (int , int , int , int ,  ,  );
    public virtual  (int , int , bool );
    public virtual  (int , int , bool ,  ,  );
    public virtual  (int , int , int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int , int , int );
    public virtual  (int , int , int ,  ,  );
    public sealed virtual  ();
    protected  (Double[] ,  ,  ,  , int );
    public virtual  (Double[] ,  ,  );
    public virtual  (Double[][] ,  ,  );
    public virtual int ( , bool );
}
internal class  : object {
    private ContentTypePropertyCollection ;
    private int ;
    internal (ContentTypePropertyCollection );
    internal void ( );
    private Hashtable ( );
    internal void ( , ContentTypeProperty );
    internal void ( , ContentTypeProperty );
    internal void ( , ContentTypeProperty );
    internal void ( , string );
}
internal class  :  {
    protected internal UInt64[] ;
    public (BigInteger );
    protected internal (UInt64[] );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  : object {
    private Regex ;
    private bool ;
    private static  ;
    private static ();
    internal [] (string );
    internal Char[] (int );
    internal string (int );
    internal string ([] );
    internal static  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  : object {
    private IDictionary ;
    public (IDictionary );
    [ObsoleteAttribute]
public (Hashtable );
    public ( );
    public ( );
    public  ( );
    public Hashtable ();
    public IDictionary ();
}
internal class  :  {
    public ( ,  ,  , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool (int , int );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ( );
}
internal class  : object {
    protected List`1<string> ;
    public virtual IList ();
}
internal class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
    private static BigInteger (string );
    private static  (string , string );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( ,  , [][] , Int32[][] );
    internal static [][] (Workbook );
    internal static [][] (Workbook , [][] );
    internal static [][] (Workbook , [][] , Int32[][] );
    public virtual bool ( );
    public virtual bool ();
    public virtual  ();
    public virtual bool (Byte[] , int , int );
}
internal class  :  {
    internal ( , PivotTableSourceType , String[] , PivotPageFields , bool , int , Worksheet );
    internal ( );
    public virtual void Dispose();
    internal virtual PivotTableSourceType ();
    internal virtual bool ();
    internal virtual  ();
    internal virtual int ();
    internal virtual int ();
    internal virtual String[] ( );
    internal virtual bool ();
    internal virtual bool (PivotTable );
    internal virtual bool (Worksheet );
    internal virtual void ( , CopyOptions );
    internal virtual int (string );
    internal virtual void (string , string );
    internal virtual int ();
    internal virtual void (int );
    internal virtual void (int , int , Worksheet );
    internal virtual void (int , int , Worksheet );
    internal virtual void (int , int , Worksheet );
    private string ();
    internal virtual string (int );
    internal virtual void (StringBuilder , int );
    internal virtual void (ArrayList );
    private Boolean[] ();
    private void ( ,  , Hashtable , int ,  , bool );
    internal virtual void ( );
    private ushort (ushort , ArrayList , ArrayList );
    internal virtual void ( );
    private int (int ,  ,  );
    internal virtual void ( );
    private void ( ,  );
    private void ();
    private void ([] , int , int , int );
    private void ( );
    private int (string );
    private void ( , int ,  ,  );
    private void (Cells ,  ,  ,  , int , [] );
    private  (ArrayList , int );
    private void ( );
    internal virtual bool ();
    internal virtual void (bool );
    internal virtual void (bool , int );
    internal virtual bool (int );
    internal virtual void ( );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( );
    internal  ();
    internal  ();
    internal  ();
}
internal class  :  {
    private int ;
    private long ;
    private  ;
    private Byte[][] ;
    internal ( );
    public (long ,  , Byte[][] );
    public int ();
    public long ();
    public  ();
    public Byte[][] ();
    public virtual void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static string (FormatConditionValueType );
    internal static FormatConditionValueType (string );
    internal static ChartMarkerType (string );
    internal static LegendPositionType (string );
    internal static ChartType (string );
    internal static Bar3DShapeType (string );
    internal static int (double , string );
    internal static double (double , string );
    internal static double (double , string );
    internal static double (double , string );
    internal static Range[] (string ,  , Worksheet );
    internal static Range[] (string ,  , Worksheet , object );
    internal static Byte[] (string ,  , Worksheet , object );
    internal static Int32[] (int , int , int , int );
    internal static Int32[] (Worksheet );
    internal static string ( , string , bool );
    internal static string (int , int , string , bool );
    internal static void (StringBuilder , CellArea , string , bool , bool );
    internal static string (CellArea , string , bool , bool );
    internal static string (string , string );
    internal static void (StringBuilder , string , string );
    internal static string (Color );
    internal static string (Color );
    internal static string (string );
    internal static string (TimePeriodType );
    internal static TimePeriodType (string );
    internal static Color (string );
    internal static int (string );
    internal static MsoLineDashStyle (string );
    internal static string (double );
    internal static string (int );
    internal static string (short );
    internal static string (byte );
    internal static string (double );
    internal static double (string );
    internal static OdsGeneratorType (string );
    internal static string (CellBorderType , OdsGeneratorType );
    internal static string (bool );
    internal static String[] (string );
    internal static String[] (string , Regex );
    internal static bool (string );
    internal static double (string );
    internal static int (string );
    internal static DateTime (string );
    internal static double (string );
    internal static string (double );
    internal static string (TextAlignmentType );
    internal static TextAlignmentType (string );
    internal static string (TextAlignmentType );
    internal static TextAlignmentType (string );
    internal static double (string );
    internal static double (string );
    internal static string (double );
    internal static bool (string );
    internal static string (bool );
    internal static string (string );
    public static Object[] (Workbook , SaveOptions );
    private static void (Style , ArrayList );
    public static string (ChartType );
    public static bool (ChartType );
    public static bool (ChartType );
    public static bool (ChartType );
    public static bool (ChartType );
    public static bool (ChartType );
    public static bool (ChartType );
    public static string (ChartMarkerType , int );
    internal static string (double , int );
    internal static string (double );
    public static int (WorksheetCollection , double );
    public static double (WorksheetCollection , int );
    public static int (WorksheetCollection , double );
    public static string (WorksheetCollection , double );
    public static double (WorksheetCollection , double );
    public static double (WorksheetCollection , double );
    public static double (double );
    public static double (double );
    public static string (double );
    public static string (ChartShape );
    public static string ( );
    public static string ( );
    public static LabelPositionType (string );
    internal static TickLabelPositionType (string );
    public static Matrix ( , string , float );
    internal static Double[0...,0...] (Double[0...,0...] , Double[0...,0...] );
    internal static Double[0...,0...] (Double[0...,0...] , Double[0...,0...] );
    internal static void (Double[0...,0...]& , double , double );
    internal static double (double , double );
    internal static long (long , long , long );
}
internal class  : object {
    private  ;
    public virtual void ( );
    public virtual  ();
}
internal interface  {
    public abstract virtual Style (int );
    public abstract virtual Style (string );
    public abstract virtual int (string );
    public abstract virtual int (int );
    public abstract virtual void (int , Style );
    public abstract virtual int (Style );
    public abstract virtual int (Style , CopyOptions );
    public abstract virtual bool ();
    public abstract virtual int ();
    public abstract virtual int (Style , bool , CopyOptions );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private int ;
    private [] ;
    private int ;
    private int ;
    public string (string );
    public string (Char[] , int , int );
    private string (string , int );
    private void ();
    private static bool (string , Char[] , int , int );
}
internal class  : ActiveXControl {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public ControlType Type { get; }
    public int ForeOleColor { get; public set; }
    public int BackOleColor { get; public set; }
    internal (Shape );
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    public virtual ControlType get_Type();
    internal virtual ActiveXPersistenceType xa9l26y3bs5yp9etpymwtjetsz27gsz6();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public virtual int get_ForeOleColor();
    public virtual void set_ForeOleColor(int );
    public virtual int get_BackOleColor();
    public virtual void set_BackOleColor(int );
    public bool ();
    public void (bool );
    public string ();
    public void (string );
}
internal class  :  {
    internal (PivotTable );
}
internal class  :  {
    public static int ;
    private Byte[] ;
    public (Byte[] , int );
    public (Stream );
    private static ();
    public void (Byte[] , int );
    public Byte[] ();
}
internal interface  {
    public abstract virtual Matrix ();
    public abstract virtual void (Matrix );
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual bool ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual  (int , bool );
}
internal static class  : object {
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) ;
    public static void (Byte& );
    public static void (Int32& );
    public static void (Int64& );
    public static void (Char& );
    public static void (Array , int , int );
    public static void (Array );
}
internal class  : object {
    internal int ;
    internal int ;
}
internal class  :  {
    []
private RevisionAutoFormat ;
    []
private Workbook ;
    internal (RevisionAutoFormat , Workbook );
    private void ();
}
internal class  : object {
    private byte ;
    private Byte[] ;
    private byte ;
    public virtual void (Byte[] );
    public virtual void (long );
    public virtual void (Byte[] );
    public virtual void (Byte[] , int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private double ;
    private bool ;
    private bool ;
    private bool ;
    private int ;
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual int ();
    public sealed virtual void (int );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    internal bool ();
    internal static void ( ,  );
}
internal class  :  {
    public (Stream );
    [ObsoleteAttribute("Use version taking an Asn1Encodable arg instead")]
public virtual void (object );
}
internal class  :  {
    private Cell ;
    private int ;
    internal (Row );
    public virtual int ();
    public virtual void (int );
    public virtual void ();
    public virtual Cell (int );
    public virtual Cell (int );
    public virtual Cell (int , bool , bool );
    public virtual void (Cell );
}
internal class  : object {
    []
private  ;
    []
private Worksheet ;
    []
private Cells ;
    []
private  ;
    private int ;
    private int ;
    private Double[0...,0...] ;
    private string ;
    private int ;
    private int ;
    private int ;
    internal ( , int );
    internal void ( );
    private void ();
    internal static string ( , FormatCondition , bool , int , int );
    private void ();
    private void (FormatCondition , string , string );
    private void (FormatCondition , string );
    private void (FormatCondition );
    private void (FormatCondition );
    private void (FormatCondition );
    private void (ConditionalFormattingValue ,  );
    private void ();
    private void ();
    [("True")]
internal void (int , int );
    [("True")]
private void (int );
    private void ();
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( , Row ,  , int , bool );
    private void ( );
    private void (OdsCellField , string );
    [("True")]
internal void (int , Column , int , string );
    [("True")]
private void (Column , int , string );
    private void (Cell );
    [("True")]
private void (int , int , bool );
    private void ( );
    private void ( );
    private void ( );
    private void (ChartShape , string );
    private Int32[] (Shape );
    private void (ChartShape );
    private Double[0...,0...] (Double[0...,0...] , double , double );
    private Double[0...,0...] (Double[0...,0...] , double , double );
    private Double[0...,0...] (Double[0...,0...] , double );
    private Double[0...,0...] (Double[0...,0...] , long );
    private StringBuilder (long , long );
    private Rectangle (Shape );
    private void ( , string );
    [("True")]
private void (Shape );
    [("True")]
private void (Shape );
    private void (Shape );
    private string (SeriesCollection );
    private void (Shape , bool );
    private void ();
    [("True")]
private void (int );
    [("True")]
private void (int , int , int , int );
    [("True")]
private void (Comment );
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual void (bool ,  );
    public abstract virtual void (byte );
    public abstract virtual void (Byte[] , int , int );
    public abstract virtual Byte[] ();
    public abstract virtual bool (Byte[] );
    public abstract virtual void ();
}
internal class  :  {
    public virtual Color (Color );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal void ( );
}
internal class  : IOException {
    public (string , Exception );
}
internal class  :  {
    private  ;
    public ( , Stream );
    public virtual void ( );
    public virtual void ();
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public (IEnumerable );
    public static  (object );
    public [] ();
    public virtual  ();
}
internal class  : object {
    public string ;
    public string ;
    public  ;
}
internal class  :  {
    internal (ListObject );
}
internal class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected bool ;
    public ( ,  );
    public virtual  ();
    public virtual Byte[] ( );
}
internal class  : object {
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static  (Byte[] );
    public static Byte[] (Byte[] );
    private static Byte[] (BinaryReader , int );
    public static Byte[] (BinaryReader , int , int );
    public static Byte[] (BinaryReader , long , long , long , long );
    public static Bitmap (BinaryReader , int );
    public static Bitmap (BinaryReader , int , int );
    public static Byte[] (int , int , int , int , int , int , int , Byte[] );
    public static  (Byte[] );
    public static  (Byte[] );
    public static  (Byte[] );
    public static  (Stream );
    public static  (Byte[] );
    private static bool (ushort ,  ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static double ( , long , bool );
    private static ushort ( , bool );
    private static UInt32 ( , bool );
    public static  (Byte[] );
    private static  (Byte[] );
    public static  (Byte[] );
    public static  (Byte[] );
    public static Byte[] (Byte[] );
    public static void (Metafile , Stream );
    public static Byte[] (Byte[] );
    public static Byte[] (int , int );
    public static Bitmap (int , int );
    internal static Bitmap (Bitmap );
    [("True")]
internal static void (Image , Stream );
    [("True")]
internal static void (Image , Stream );
    [("False")]
internal static Byte[] (Byte[] , int , int );
    []
internal static Byte[] (Byte[] , int , int );
    public static Byte[] (Image );
    public static ImageCodecInfo (string );
    [("True")]
public static Byte[] (Byte[] );
    [("True")]
public static void (Image , Stream , int );
    public static Image (Image );
    public static Bitmap (Bitmap , double );
    public static Bitmap (int , int , PixelFormat );
    public static Byte[] (Byte[] , int , int );
    public static Byte[] (Byte[] );
    public static Byte[] (Byte[] , SizeF );
    public static bool (int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    public (WorksheetCollection );
    public virtual  ();
    public virtual bool ();
    public virtual Workbook ();
    public virtual WorksheetCollection ();
    public virtual bool ();
}
internal class  :  {
    internal static  ;
    internal static  ;
    internal bool ;
    internal (bool );
    private static ();
    internal virtual object ();
    internal virtual string ();
    internal virtual  ();
    internal virtual bool ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  : object {
    private  ;
    private DateTime ;
    public ( );
    public bool ();
    public  ();
    public DateTime ();
    public  ();
    public string ();
    public BigInteger ();
    public  ();
    public BigInteger ();
    public  ();
    public string ();
    public Byte[] ();
    public Byte[] ();
    public  ();
}
internal class  : object {
    private  ;
    []
private  ;
    private ArrayList ;
    private ushort ;
    internal ( );
    internal void ( );
    internal int ();
    internal  ();
    internal void ( );
    internal ArrayList ();
    internal ushort ();
    internal void (ushort );
    internal void (int );
    internal int (int );
    internal void (int , int );
    private int ();
    internal  (ShapeCollection ,  );
    internal void (int , int );
    internal void (int , int );
    internal int (int , int );
    internal int (int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , bool );
    private static Byte[] (bool );
    public bool ();
}
internal class  : Exception {
}
internal class  : object {
    []
private Workbook ;
    private  ;
    internal bool ;
    []
private  ;
    []
private RevisionLog ;
    internal (Workbook ,  );
    private void ();
    internal void ( , RevisionLog );
    internal Revision ( );
    internal Revision ( );
    internal Revision ( );
    internal Revision ( );
    internal Revision ( );
    internal Revision ( );
    internal Revision ( );
    internal  ( , RevisionCellChange );
    internal  ( , bool );
    internal Revision ( );
    internal Revision ( );
    internal Revision ( );
    internal Revision ( );
    internal Revision ( );
    internal Revision ( );
}
internal class  : object {
    protected  ;
    protected  ;
    public ( ,  );
    public virtual BigInteger[] (BigInteger );
    public virtual  ();
    public virtual bool ();
}
internal class  : object {
    private int ;
    internal (int );
    internal double (double );
    internal string (double );
    internal string (Color );
    internal string (Matrix );
    internal string (PointF );
    internal string (double );
    internal string (LineJoin );
    internal string (LineCap );
    internal string (DashCap );
    internal string (Single[] );
    internal string (WrapMode );
    internal Single[] ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    private int ;
    public ( );
    private ( );
    public ( );
    public ( , int );
    public ( );
    public ( , int );
    public ( );
    public static  (object );
    public int ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual object ();
    public abstract virtual void ();
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal bool ;
    internal  ;
    internal Worksheet ;
    internal  ;
    internal ( , Worksheet );
    internal void ( );
}
internal class  : object {
    private static UInt64[] ;
    private static Byte[0...,0...] ;
    private int ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private UInt64[] ;
    private UInt64[] ;
    private ulong ;
    private ulong ;
    private ulong ;
    public ( );
    public (int );
    public (Byte[] );
    public (Byte[] , int , Byte[] , Byte[] );
    private static ();
    private void ();
    private void ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    private void (Byte[] , int );
    private void (ulong , ulong , int , int , int , int );
    private static ulong (ulong , int );
    public virtual string ();
    public virtual int ();
    public virtual int ();
    public virtual void ();
    public virtual void ();
}
internal class  :  {
    private int ;
    private double ;
    public (bool , bool );
    public virtual void (int , int );
    public virtual  ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
}
internal class  :  {
    internal void (HorizontalPageBreakCollection );
}
internal class  :  {
    private GraphicsPath ;
    public (string , Hashtable ,  );
    public (string , string , Hashtable ,  );
    private void ();
    public virtual GraphicsPath ();
}
internal class  :  {
    private string ;
    private string ;
    private string ;
    private bool ;
    internal virtual  ();
    internal virtual void ( );
    public virtual CellValueType ();
    public virtual int ();
    internal virtual void ();
    internal void (string );
    public string ();
    internal void (string );
    public string ();
    internal void (bool );
    public bool ();
    internal void (string );
    public string ();
}
internal class  : object {
    []
internal  ;
    []
internal  ;
    []
private  ;
    private string ;
    private string ;
    []
internal Workbook ;
    []
internal ContentTypePropertyCollection ;
    internal ( ,  );
    internal (Workbook ,  );
    internal void ();
    internal void ();
    internal static bool (DataMashup );
    private void ( );
    internal void ();
    private void (string );
    private void (string , Hashtable );
    private  (string , MemoryStream );
    private void (string , MemoryStream );
    private void (string , MemoryStream );
    private void (string , Hashtable , MemoryStream );
    private void (string , Hashtable , MemoryStream );
    private void (string , string );
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    private static void (UInt32[] );
    private static void (UInt32[] );
}
internal class  :  {
    private  ;
    private Matrix ;
    internal ( , TextureBrush );
    internal ( ,  );
    internal virtual void ( );
    public virtual void ( );
    protected virtual int ();
    protected virtual Matrix ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
}
internal class  : object {
    private string ;
    private int ;
    public (string );
    public bool ();
    public string ();
}
internal class  :  {
    private double ;
    public virtual  ();
    public virtual void ();
    public virtual bool (double , double );
    public virtual bool (double , double );
    public virtual  (double , double );
    public virtual  (double , double , int );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal int ;
    internal string ;
    internal int ;
    internal int ;
    internal void ( , CopyOptions );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
}
internal class  : object {
    public static  (string ,  );
    private static void (ICollection , Type );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal long ;
    internal  ;
    internal List`1<> ;
    internal List`1<> ;
    internal ( );
    internal void ( );
}
internal class  : object {
    internal static  ;
    private double ;
    private double ;
    private double ;
    internal (double , double , double );
    internal (Color );
    private static ();
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    public virtual int GetHashCode();
    public virtual bool Equals(object );
    internal Color ();
    internal void (Color );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Boolean[] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private BigInteger ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( );
    public virtual object Clone();
    public Byte[] ();
    public void (Byte[] );
    public int ();
    public void (int );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public string ();
    public Boolean[] ();
    public void (Boolean[] );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public BigInteger ();
    public void (BigInteger );
    public  ();
    public void ( );
    public string ();
    public Byte[] ();
    public void (Byte[] );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public virtual bool (object );
    internal static bool ( ,  );
    private static Boolean[] (Boolean[] );
    private static  ( );
    private static  ( );
    private static bool (Byte[] ,  ,  );
}
internal class  : object {
    internal static Byte[] (object );
    internal static object (Byte[] , int );
    internal static int (Byte[] , int , int );
    internal static Byte[] (Byte[] , int , int , Worksheet );
    internal static void (int , int , int , int , int , int , Byte[] , int , int , CopyOptions );
    internal static void (Worksheet , bool , int , int , int , int , int , int , Byte[] );
    internal static void (Worksheet , bool , int , int , int , int , int , int , int , int , int , int , Byte[]& );
    internal static void (Worksheet , bool , int , int , int , int , int , int , Byte[] );
    internal static bool (int , int , Byte[] , int , int , int , int , int , Cells , bool , Hashtable );
    internal static bool (Byte[] , int , int , WorksheetCollection , Hashtable , Hashtable );
    internal static void (Byte[] , int , int , Hashtable , WorksheetCollection );
    internal static void (Byte[] , int , int , Hashtable , WorksheetCollection );
    internal static void (Byte[] , int , int , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int , int , int , int , int );
    internal static CellArea (CellArea , int , int , int , int , int , Boolean& , Boolean& );
    internal static CellArea (CellArea , int , int , int , int , int , Boolean& , Boolean& );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int );
    internal static void (CellArea , int , int , Worksheet , bool , Byte[] , int , int );
    internal static bool (Byte[] , int , int , int , int , CellArea , Boolean& );
    internal static bool (Byte[] , int , int );
    internal static Byte[] (Worksheet , bool , int , int , bool , int , bool , int , int , int , Byte[] );
    internal static bool (int , int , Int32& , int );
    internal static bool (int , int , Int32& , Int32& , int );
    internal static bool (int , int , Int32& , byte , Int32& , byte , int );
}
internal abstract class  :  {
    protected (bool , Boolean[] , float , float ,  , float , Double[] );
    [("True")]
internal virtual void ();
    protected virtual float (float );
    protected bool (Font , float , ArrayList , bool , Boolean[] , float , int , bool , Int32& , Int32& , SizeF& , Single& );
    protected void ( , Single& );
    private bool (int );
    private static bool (int );
}
internal interface  {
    public abstract virtual Char[] ();
}
[("Or")]
internal enum  : Enum {
    public UInt32 value__;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
[]
private Series ;
    internal (Series );
    internal int ();
    internal void (int );
    internal Series ();
    internal int ();
    public sealed virtual int CompareTo(object );
}
internal class  :  {
    internal  ;
    public ( );
    public (BigInteger );
    public sealed virtual string ();
    public virtual Byte[] ();
    public virtual void ( );
    public BigInteger ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
protected Int32[] ;
    [DebuggerBrowsableAttribute("0")]
protected Int32[] ;
    [DebuggerBrowsableAttribute("0")]
protected Int32[] ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
public CellArea  { get; public set; }
    internal (int );
    internal ( , bool );
    public virtual int (int , int );
    public int (CellArea );
    public virtual int (int , int , int , int );
    public virtual int (int , int );
    public virtual bool ();
    public virtual bool ();
    protected virtual bool ();
    protected virtual bool ();
    public virtual int (CellArea );
    internal virtual CellArea ();
    internal virtual bool ();
    protected virtual int (int , int , int );
    protected void ();
    internal void ( , int , int );
    internal bool (int , CellArea );
    internal bool (int , CellArea );
    public int (CellArea );
    public int (int , int , int , int );
    public void ( );
    public void ( , int , int );
    public int (CellArea ,  );
    public int (int , int , int , int ,  );
    public int (int , int , int , int ,  );
    public int (int , int ,  );
    public int (int , int ,  );
    public int (int , int ,  );
    public int (int , int ,  );
    public virtual int (int , int );
    public bool (int , int , int );
    public bool (int , int , int , int , int );
    public bool (int , int , int );
    public bool (int , int , int , int , int );
    public bool (int , int , int );
    public bool (int , int , int , int , int );
    public bool (int , int , int );
    public bool (int , int , int , int , int );
    public void (CellArea );
    public void (int , int );
    public void (int , int , int , int );
    public void (int );
    public int ();
    public CellArea (int );
    public void (int , CellArea );
    public void (int , CellArea );
    public void (int , int , int , int , int );
    public void (int );
    public void (int , int );
    public void (int );
    public bool ( );
    internal bool (int , CellArea );
    protected void (int , int , int );
    protected void (int , int , int , int );
    protected void (int , int );
    protected void (int , int );
    protected void (int , CellArea );
    protected void (int , int , int );
    protected void (int , int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int );
    protected void (int );
    protected static int (int , int );
    protected static int (int );
    protected static int (int , int );
    protected static int (int , int );
    protected static int (int );
    protected static int (int );
    public sealed virtual IEnumerator GetEnumerator();
    public IEnumerator (CellArea );
    private void (int , StringBuilder );
}
internal enum  : Enum {
    public int value__;
    public static  Currency;
    public static  Number;
    public static  Date;
    public static  Time;
    public static  Bool;
    public static  Text;
    public static  Percentage;
    public static  Unknown;
}
internal class  : object {
    private static int ;
    private static int ;
    private int ;
    private Int64[] ;
    private static long ;
    private static long ;
    private bool ;
    private static ();
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual void (bool ,  );
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] );
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
    private long (long , long );
    private long (long , long );
    private long (Byte[] , int );
    private void (long , Byte[] , int );
}
internal class  : object {
    public static CellBorderType (string , string );
    internal static double (string );
    private static BorderType (string );
    private static bool (string );
    private static bool (string );
    private static void (String[] , String& , String& , String& );
    public static void (Style , BorderType[] , string , string , string );
    public static void (string , string , Style );
}
internal class  :  {
    internal bool ;
    private Byte[] ;
    internal bool (DataSorter );
    internal Byte[] ();
    internal void (Byte[] );
    internal virtual void ( );
}
internal class  :  {
    internal List`1<string> ;
    private bool ;
    internal Encoding ;
    private List`1<int> ;
    private bool ;
    private List`1<> ;
    private int ;
    private Font ;
    internal int ;
    internal int ;
    internal Byte[] ;
    internal Int32[] ;
    internal int ;
    internal (Workbook , LoadOptions , int );
    internal virtual bool ( );
    internal virtual int ();
    internal virtual CellArea (Byte[] , Int32[] );
    internal virtual void (Byte[] , Int32[] , int , ArrayList );
    internal virtual void ( );
    [("False")]
internal void ( );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual void ();
    internal virtual void ();
    internal virtual void (int , bool );
    internal virtual void ( );
    private void (ComboBox , int );
    private void (Shape , int ,  , int );
    private Shape (int );
    private int (Shape , int );
    private int (Shape , int );
    private int (Shape , int );
    private static FillPattern (int );
    private int (Shape , int , bool , bool , int );
    private void (Shape , int );
    private int (Shape , int , bool , bool , int );
    private int (int , int , int );
    internal virtual void ( );
    internal virtual string (int );
    internal virtual string ();
    internal virtual string (Byte[] , Int32[] );
    internal virtual string (Byte[] , int );
    internal virtual void ( , HorizontalPageBreakCollection , VerticalPageBreakCollection );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual string (Byte[] );
    internal virtual string ( );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual bool (Int32[] ,  , ScenarioInputCell );
    internal virtual string (Byte[] , Int32[] , int );
    internal virtual void ( ,  );
    internal virtual string (Byte[] , Int32[] , int );
    internal virtual string (Byte[] , Int32[] , int , int );
    internal virtual string (Byte[] , Int32[] );
    internal virtual  ( );
    internal virtual int (Style , Byte[] );
    private void (Style , BorderType , int , int , int );
    internal static int (int );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    private void ( ,  );
    private int (int , int );
    private void (bool , bool ,  ,  , bool );
    internal virtual Int32[] ();
    private void (bool , bool ,  ,  , bool );
    private void ( , int );
    internal virtual void ( ,  );
    internal virtual void (bool ,  ,  );
    internal virtual Byte[] (Byte[] );
}
internal class  : object {
    private String[] ;
    private  ;
    private string ;
    private string ;
    private string ;
    private  ;
    private  ;
    private static  ;
    private static Hashtable ;
    internal  ();
    internal void (string );
    private bool (string , string , string );
    internal static  (string );
    internal static void ( , string );
    internal void (Stream );
    private void ( ,  );
    private void ( ,  );
    private void (string , string , int );
    private static Hashtable ();
}
internal class  :  {
    internal (Int32[] );
}
internal abstract class  :  {
    private  ;
    protected (bool ,  );
    public  ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal ArrayList ;
    internal  ;
    internal  ;
    internal ArrayList ;
    internal ( );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private static float ;
    private static ();
    public static Color ( , Color );
    private static  (Color ,  );
    private static Color (Color );
}
internal class  : object {
    private static bool ;
    public static string ();
    internal static void (bool );
    internal static bool ();
}
internal static class  : object {
    public static int (int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal static void (Stream , bool , int , int ,  , object );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private Byte[] ;
    public ( );
    public ( );
    public ( ,  );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual bool (Byte[] );
    public virtual void ();
    public virtual Byte[] ();
    private bool (BigInteger , BigInteger );
    private Byte[] (Byte[] );
    private void ( , Byte[] );
    private void ( ,  );
    protected virtual BigInteger (BigInteger , Byte[] );
    protected virtual  ();
}
[("And")]
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    []
private  ;
    private int ;
    internal ( );
    internal void ( );
    internal int ();
    internal void (int );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private static Byte[] ;
    private  ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private ulong ;
    private ulong ;
    private  ;
    private int ;
    public ( );
    private static ();
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int (int );
    public virtual int (int );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (byte , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual int (Byte[] , int );
    public virtual Byte[] ();
    public virtual void ();
    private void ();
    private void ();
    private void ( );
    private void ( );
    private ulong (ulong , UInt32 , ulong );
    private void ();
    private void (ulong );
    private void (Byte[] , int , int , Byte[] , int );
    private void (bool , bool );
}
internal abstract class  : object {
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    []
protected  ;
    protected Font ;
    protected Color ;
    protected  ;
    protected  ;
    internal Rectangle ;
    private Size ;
    private int ;
    private int ;
    private bool ;
    internal ( );
    internal abstract virtual Font ();
    internal abstract virtual void (Font );
    internal abstract virtual Color ();
    internal abstract virtual void (Color );
    internal  ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool ();
    public void (bool );
    internal int ();
    internal int ();
    internal int ();
    internal int ();
    internal int ();
    internal float ();
    internal Size ();
    internal void (Size );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal void ();
    protected virtual override void Finalize();
    public void ();
    protected virtual void (bool );
}
internal class  : object {
    internal static string ( );
    internal static  (string , bool );
    internal static  (string , bool );
    internal static string ( );
    internal static  (string );
}
internal class  : object {
    internal int ;
    internal ushort ;
    internal FilterOperatorType ;
    internal FilterOperatorType ;
    internal object ;
    internal object ;
    internal (int );
    internal (FilterColumn );
    internal void (Boolean& , Boolean& , Int32& );
    internal bool ();
    internal bool ();
    internal bool ();
    internal FilterColumn (FilterColumnCollection );
    internal bool ();
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal void (Picture , int );
    internal int (float );
    internal static double (double );
    internal static double (double );
    internal static double (double );
    internal static void (string , Shape , int );
}
internal class  : object {
    protected Int32[] ;
    protected Byte[] ;
    public (Int32[] , Byte[] );
    public virtual Int32[] ();
    public virtual Byte[] ();
}
internal class  :  {
    private  ;
    internal ( );
    internal virtual MemoryStream (MemoryStream );
    internal virtual void ( );
    protected virtual  (Stream );
    [("True")]
private int ();
    protected virtual string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( );
    public static  (object );
    public [] ();
    public [] ();
    public virtual  ();
}
internal class  : object {
    private Byte[] ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private  ;
    private  ;
    public (string , Byte[] , int );
    public (string , int );
    private void (string , Byte[] , int );
    private Byte[] ();
    public bool (Byte[] , Byte[] );
    private Byte[] (Byte[] , Byte[] );
    public MemoryStream (MemoryStream );
    public MemoryStream ();
    public MemoryStream (Stream );
    private int (int );
    private int (int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal virtual void ( );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void ( , Stream );
    internal void ( , Stream );
    internal void ( , Stream );
    internal void ( , Stream );
    internal void (Stream );
    internal void (PivotArea , Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream ,  );
    internal void (Stream ,  );
    internal bool (ArrayList );
}
internal abstract class  : object {
    public static string ;
    private static ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private bool ;
    internal Stack ;
    private  ;
    private  ;
    private RectangleF ;
    internal bool ;
    internal ( ,  );
    internal  ();
    internal virtual void (PointF , SizeF );
    internal virtual void (PointF , string );
    internal virtual void (PointF , string );
    private void (PointF , string );
    internal virtual void (PointF , Color );
    internal virtual void (PointF );
    internal virtual void (RectangleF );
    internal void (RectangleF );
    internal virtual void (RectangleF );
    internal void (RectangleF , Brush );
    internal virtual void (PointF[] );
    internal virtual void (PointF[] );
    internal virtual void (PointF[][] );
    internal virtual void (PointF[] );
    internal void (PointF[] );
    internal void (PointF[] );
    internal virtual void (PointF[][] );
    internal virtual void (RectangleF , PointF , PointF );
    internal void (RectangleF , float , float );
    internal virtual void (RectangleF );
    internal void (RectangleF );
    internal void (RectangleF );
    internal virtual void (RectangleF , PointF , PointF );
    internal void (RectangleF , float , float );
    internal void (RectangleF , float , float );
    internal void (PointF[] , float );
    internal void (PointF[] , float );
    internal void (PointF[] );
    internal void (PointF[] , float );
    internal void (PointF[] );
    internal void (PointF[] , [] , bool );
    internal void (PointF[] , [] , bool );
    internal virtual void (RectangleF , PointF , PointF );
    internal virtual void (RectangleF , SizeF );
    internal virtual void (RectangleF , RectangleF , Byte[] );
    internal void (RectangleF , RectangleF , Matrix , Color ,  , Byte[] );
    private static float (float , float );
    internal virtual void (RectangleF );
    private void ( , bool , bool );
    [("True")]
internal static FillMode ( );
    private void (PointF , SizeF );
    private void (PointF , string );
    private void ( ,  );
    internal  ();
    private void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    private void (bool );
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    private void ();
    internal void ( );
    internal void ( ,  );
    internal void ( );
    internal  ();
    internal void ( );
    internal RectangleF ();
    internal void (RectangleF );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private EmfType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    internal (int , int , ImageOrPrintOptions , Stream ,  ,  );
    public virtual ImageOrPrintOptions ();
    public virtual void ();
    private void ();
    internal static void (Stream , int , int , float , float );
    public virtual Bitmap ();
    public virtual void ();
    public virtual void Dispose();
    public virtual void (SmoothingMode , bool );
    public virtual void (TextRenderingHint , bool );
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    internal int ;
    internal (int );
    internal virtual  ( );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    internal Byte[] ;
    internal int ;
    internal  ;
    public ( , int );
    public int (byte , Byte[] , int );
    public int (Byte[] , int , int , Byte[] , int );
}
internal class  : object {
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<SlicerCache> {
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
internal SlicerCache  { get; }
    [DebuggerBrowsableAttribute("0")]
public SlicerCache  { get; }
    internal (WorksheetCollection );
    internal WorksheetCollection ();
    internal SlicerCache (SlicerCache , Worksheet , CopyOptions );
    public int (SlicerCache );
    internal int (SlicerCache );
    internal SlicerCache (string );
    public SlicerCache (int );
    internal int (SlicerCache );
    public void (SlicerCache );
    private void (int , SlicerCache );
    internal void (SlicerCache );
}
internal class  : object {
    private Byte[] ;
    internal (Byte[] );
    public sealed virtual Byte[] ();
}
internal class  :  {
    private int ;
    public ( ,  , [] , int , int , int );
    public virtual  ( );
    public virtual void ( );
    public sealed virtual  ( );
    public sealed virtual  ( , bool );
}
internal class  : object {
    internal static bool ;
    private static ();
    internal static string (int );
    internal static string (string );
    internal static string (string , string );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static string (long );
    internal static string (double );
    internal static string (int );
    internal static string (short );
    internal static string (byte );
    internal static double (string );
    internal static decimal (string );
    internal static double (string );
    internal static double (string );
    internal static double (string );
    internal static int (string );
    internal static int (string );
    internal static int (string );
    internal static UInt32 (string );
    internal static short (string );
    internal static int ( );
    internal static int (string );
    internal static Color (string );
    internal static string (Color );
    internal static string (Color );
    internal static string (string );
    internal static int (Char[] , int );
    internal static String[] (string , string , bool );
    internal static Guid (string );
    internal static string (Byte[] );
    internal static string (string , string );
    internal static void (string , ArrayList );
    internal static string (ArrayList , int , int );
    internal static string ( , int , int );
    internal static string (PageOrientationType );
    internal static PageOrientationType (string );
    internal static string (PrintCommentsType );
    internal static PrintCommentsType (string );
    internal static string (PrintErrorsType );
    internal static PrintErrorsType (string );
    internal static string (PrintOrderType );
    internal static PrintOrderType (string );
    internal static string (ValidationType );
    internal static ValidationType (string );
    internal static string (OperatorType );
    internal static string (OperatorType );
    internal static OperatorType (string );
    internal static string (BackgroundType );
    internal static BackgroundType (string );
    internal static string (CellBorderType );
    internal static CellBorderType (string );
    internal static string (TextAlignmentType );
    internal static TextAlignmentType (string );
    internal static string (TextAlignmentType );
    internal static void (Style , string );
    internal static ValidationAlertType (string );
    internal static  (string );
    internal static string ( );
    internal static string (PlacementType );
    internal static PlacementType (string );
    internal static string (MsoLineStyle );
    internal static string (MsoLineStyle );
    internal static MsoLineStyle (string );
    internal static string (MsoLineDashStyle );
    internal static MsoLineDashStyle (string );
    internal static string (LegendPositionType );
    internal static LegendPositionType (string );
    internal static string (TickMarkType );
    internal static TickMarkType (string );
    internal static string (TickLabelPositionType );
    internal static TickLabelPositionType (string );
    internal static string (CrossType );
    internal static CrossType (string );
    internal static string (TextDirectionType );
    internal static TextDirectionType (string );
    internal static string (TextDirectionType );
    internal static TextDirectionType (string );
    internal static string (WeightType );
    internal static WeightType (string );
    internal static string (FontUnderlineType );
    internal static TextFontAlignType (string );
    internal static string (TextFontAlignType );
    internal static TextAutonumberScheme (string );
    internal static string (TextAutonumberScheme );
    internal static FontUnderlineType (string );
    internal static string (FontUnderlineType );
    internal static FontUnderlineType (string );
    internal static VisibilityType (string );
    internal static TextTabAlignmentType (string );
    internal static string (TextTabAlignmentType );
    internal static bool (string );
    internal static FormatConditionType (string );
    internal static string (FormatConditionType );
    internal static bool (Shape );
    internal static string (TextAlignmentType );
    internal static TextAlignmentType (string );
    internal static string (TextAlignmentType );
    internal static TextAlignmentType (string );
    internal static string (LabelPositionType , ChartType );
    internal static LabelPositionType (string );
    internal static string (TimeUnit );
    internal static TimeUnit (string );
    internal static string (TrendlineType );
    internal static TrendlineType (string );
    internal static string (ErrorBarDisplayType );
    internal static ErrorBarDisplayType (string );
    internal static string (ErrorBarType );
    internal static ErrorBarType (string );
    internal static void (ChartType , String& , String& );
    internal static ChartType (string , string , bool , string );
    internal static string (ChartType );
    internal static ChartType (string , bool );
    internal static string (ChartType );
    internal static ChartType (bool , string );
    internal static string (ChartMarkerType );
    internal static ChartMarkerType (string );
    internal static int (Font , WorksheetCollection );
    internal static int ( , WorksheetCollection );
    internal static int ( , WorksheetCollection , string );
    internal static string (ChartSplitType );
    internal static ChartSplitType (string );
    internal static bool (string );
    internal static bool (string );
    internal static string (ChartType );
    internal static ChartType (string );
    internal static string (ChartType );
    internal static ChartType (ChartMarkerType , string );
    internal static string (ChartType );
    internal static string (Bar3DShapeType );
    internal static Bar3DShapeType (string );
    internal static string (FillPattern );
    internal static FillPattern (string );
    internal static string (IconSetType );
    internal static IconSetType (string );
    internal static string (FormatConditionValueType );
    internal static TextDirectionType (string );
    internal static string (TextDirectionType );
    internal static DataBarAxisPosition (string );
    internal static string (DataBarAxisPosition );
    internal static FormatConditionValueType (string );
    internal static string (TimePeriodType );
    internal static TimePeriodType (string );
    internal static int (IconSetType );
    internal static int (string );
    internal static int (string );
    internal static string (PivotTableSourceType );
    internal static PivotTableSourceType (string );
    internal static int (PivotTableAutoFormatType );
    internal static PivotTableAutoFormatType (int );
    internal static string (PivotFieldType );
    internal static PivotFieldType (string );
    internal static string (PivotFieldSubtotalType );
    internal static PivotFieldSubtotalType (string );
    internal static string (ConsolidationFunction );
    internal static ConsolidationFunction (string );
    internal static string (PivotFieldDataDisplayFormat );
    internal static PivotFieldDataDisplayFormat (string );
    internal static string (TextAlignmentType );
    internal static TextAlignmentType (string );
    internal static int (string );
    internal static string (int );
    internal static bool (string );
    internal static string (DynamicFilterType );
    internal static DynamicFilterType (string );
    internal static string (DateTimeGroupingType );
    internal static DateTimeGroupingType (string );
    internal static DisplayUnitType (string );
    internal static string (DisplayUnitType );
    internal static string ( );
    internal static string (FilterOperatorType );
    internal static FilterOperatorType (string );
    internal static  (string );
    internal static string (FillPictureType );
    internal static FillPictureType (string );
    internal static string (MirrorType );
    internal static MirrorType (string );
    internal static string (RectangleAlignmentType );
    internal static RectangleAlignmentType (string );
    internal static string (CalcModeType );
    internal static CalcModeType (string );
    internal static string (TextOrientationType );
    internal static TextOrientationType (string );
    internal static string (SelectionType );
    internal static SelectionType (string );
    internal static UpdateLinksType (string );
    internal static string (UpdateLinksType );
    internal static bool (string , bool );
    internal static bool (string );
    internal static ViewType (string );
    internal static string (ViewType );
    internal static PlotEmptyCellsType (string );
    internal static string (PlotEmptyCellsType );
    internal static TotalsCalculation (string );
    internal static string (TotalsCalculation );
    internal static TableDataSourceType (string );
    internal static string (TableDataSourceType );
    internal static TableStyleElementType (string );
    internal static string (TableStyleElementType );
    internal static PresetCameraType (string );
    internal static string (PresetCameraType );
    internal static LightRigType (string );
    internal static string (LightRigType );
    internal static LightRigDirectionType (string );
    internal static string (LightRigDirectionType );
    internal static PresetMaterialType (string );
    internal static string (PresetMaterialType );
    internal static BevelType (string );
    internal static string (BevelType );
    internal static Color (string );
    internal static string (int );
    internal static SparklineType (string );
    internal static string (SparklineType );
    internal static SparklineAxisMinMaxType (string );
    internal static string (SparklineAxisMinMaxType );
    internal static string (AutoShapeType );
    internal static AutoShapeType (string );
    internal static DataLabelShapeType (string );
    internal static string (DataLabelShapeType );
    internal static string (AutoShapeType );
    internal static bool (Shape );
    internal static string ( );
    internal static  (string );
    internal static string (PivotGroupByType );
    internal static PivotGroupByType (string );
    internal static string ( );
    internal static  (string );
    internal static string (TextOverflowType );
    internal static TextOverflowType (string );
    internal static TextVerticalType (string );
    internal static string (TextVerticalType );
    internal static string ( );
    internal static  (string );
}
internal class  : object {
    protected [] ;
    public virtual [] ();
    public virtual void ([] );
}
internal class  :  {
    internal DateTime ;
    internal string ;
    internal (DateTime );
    internal virtual  ();
    internal virtual object ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    public static bool (Byte[] , Int32& , Int32& , Byte[]& , int );
    public static bool (Byte[] , Int32& , Int32& , Char[]& , int );
    public static bool (Byte[] , Int32& , UInt32& , Int16& );
    public static bool (Byte[] , Int32& , Int32& , Int32& );
    public static int (Byte[] , int );
    public static bool (Byte[] , Int32& , Int32& , Int64& );
    public static bool (Byte[] , Int32& , Int32& , UInt16& );
    public static bool (Byte[] , Int32& , Int32& , UInt32& );
    public static bool (Byte[] , Int32& , Int32& , Int64& );
    public static bool (Byte[] , Int32& , Int32& , Byte[]& );
    public static long (Byte[] , Int32& );
    public static long (long , int );
}
internal class  : object {
    private  ;
    private  ;
    []
private WorksheetCollection ;
    internal (WorksheetCollection );
    internal void (bool );
    internal string (int , Byte[] , int , int , bool );
    internal string (int , int , Byte[] , int , int , bool );
}
internal class  :  {
    private int ;
    private ulong ;
    private ulong ;
    private ulong ;
    private ulong ;
    private ulong ;
    private ulong ;
    private ulong ;
    private ulong ;
    public (int );
    public ( );
    public virtual string ();
    public virtual int ();
    public virtual int (Byte[] , int );
    public virtual void ();
    private void (int );
    private static void (ulong , Byte[] , int , int );
    private static void (UInt32 , Byte[] , int , int );
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private bool ;
    private int ;
    private double ;
    private double ;
    public (bool , bool , bool );
    public virtual void (int , int );
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
    public virtual  ();
}
internal class  :  {
    internal void ( );
}
internal class  : object {
    internal bool ;
    internal int ;
    internal int ;
    internal int ;
    internal PivotFilterType ;
    internal  ;
    internal  ;
    internal string ;
    internal void ( );
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    internal (WorksheetCollection );
    public sealed virtual void Dispose();
    internal int ();
    internal void (int );
    internal void ();
    internal void ();
    internal string (Cell );
    internal string (int , Byte[] , int , int , bool );
    internal string (int , int , Byte[] , int , int , bool , bool , int );
    internal void (StringBuilder ,  , int , int , bool );
    internal string ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RevisionLogCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( , RevisionLogCollection );
    internal virtual int ();
    internal virtual void ( );
    private void ( , RevisionHeader );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    private float ;
    private string ;
    public (string , float );
    public string ();
    public float ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public ( ,  ,  ,  );
    public ( );
    private static ();
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private [] ;
    private  ;
    private int ;
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal ( ,  , [] ,  );
    private ( , [] );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool ();
    public virtual  ();
    public virtual bool (int );
    public virtual bool (int , int );
    private bool ();
    private bool ();
    public virtual  ();
    public virtual  ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    internal void ( );
    internal void (int );
}
internal class  : object {
    internal  ;
    internal string ;
    internal string ;
    internal  ;
    internal bool ;
    internal  ;
    internal  ;
    internal ( , Worksheet );
    internal void ( );
    private void ( );
}
internal class  :  {
    protected virtual void (PointF[] , float , float , List`1<Matrix> , float , float , float , bool , float );
    protected virtual void ( , PointF[] , List`1& , List`1& );
    protected virtual string ();
}
internal interface  {
    public abstract virtual Byte[] (Byte[] );
    public abstract virtual Byte[] (Byte[] );
}
internal abstract class  :  {
    [DebuggerBrowsableAttribute("0")]
protected int ;
    protected (bool );
    protected (int );
    protected ( ,  , bool );
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual  ();
    public abstract virtual  (int , int );
    public abstract virtual  (int , int , int , int );
    internal abstract virtual  (int , int );
    internal abstract virtual  (int , int ,  );
    internal abstract virtual object (int , int ,  );
    internal abstract virtual void (int , int , StringBuilder ,  );
    protected abstract virtual object ( );
    protected int ();
    protected int ( ,  , bool );
    public bool ();
    public  ();
    public  ();
    public virtual  (int );
    public virtual  ();
    public virtual  ();
    public virtual  ( );
    public virtual bool ( );
    public virtual byte ();
    public virtual bool ();
    public virtual object ( );
    public virtual  ( );
    public virtual void (StringBuilder ,  );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    internal ( );
    internal  ();
    internal void ();
    internal void ();
    internal void ( , Stream );
    internal void ( , Graphics );
    internal void ( ,  );
    internal void ( );
    internal int ();
    internal void (int );
    internal static  (ImageOrPrintOptions , WorksheetCollection );
}
internal abstract class  : object {
    public abstract virtual  ();
    public abstract virtual void ( ,  ,  , ICollection );
    public abstract virtual  ();
}
internal class  : Cell {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal (Row ,  , int ,  );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk();
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk();
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(string ,  );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(string );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk( , object , bool );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk( , int , bool );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(int );
    internal void (int );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(Style , bool );
    internal virtual Style 9h4n36pgcfc9mdlssrj284d6hvs88tkk(bool );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk();
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk( );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(int , int );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk();
}
internal enum  : Enum {
    public int value__;
}
internal abstract class  :  {
    internal static  ( );
    internal static IList ( );
    internal static void ( , IList& , IList& , IList& );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    public virtual void ( );
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void (int , UInt32 );
}
internal class  : object {
    private ushort ;
    private ushort ;
    private Byte[] ;
    private Byte[] ;
    []
private  ;
    private  ;
    []
private Worksheet ;
    []
private  ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private UInt16[] ;
    internal void ( , Worksheet ,  );
    internal void ( , Worksheet ,  );
    private void ();
    private void (MemoryStream );
    private void (int );
    internal void ();
    private void ( ,  , bool );
    private string ();
    private void ( );
    private void ();
    private void ();
    private DateTime (Byte[] , int );
    private bool (int );
    private DateTime (int , int , int , int , int , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private StreamWriter ;
    [DebuggerBrowsableAttribute("0")]
private AccessCacheOptions ;
    [DebuggerBrowsableAttribute("0")]
[]
private Cells ;
    public (Workbook );
    public sealed virtual void (Stream );
    public sealed virtual void Dispose();
    public sealed virtual void ();
    public void (Stream );
    internal void ();
    private void ();
    internal void (int , int , int );
    internal void (int , int );
}
internal class  :  {
    internal ( );
}
internal class  :  {
    private BigInteger ;
    public (BigInteger ,  );
    public (BigInteger ,  );
    public BigInteger ();
}
internal class  : object {
    internal static bool (object );
    internal static Array (object );
    internal static object (object , int );
    internal static int (object );
    internal static int (object , int );
    internal static Array (int );
    internal static Double[] (Array );
    internal static int (Array , int );
    internal static void (Byte[] , int , int , byte );
    internal static void (Int16[] , int , int , short );
    internal static void (Char[] , int , int , char );
    internal static void (Int32[] , int , int , int );
    internal static void (Single[] , int , int , float );
    internal static void (Int64[] , int , int , long );
    internal static void (Double[] , int , int , double );
    internal static void (Boolean[] , int , int , bool );
    internal static void (Object[] , int , int , object );
    internal static bool (Byte[] , Byte[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private IntPtr ;
    [DebuggerBrowsableAttribute("0")]
internal Bitmap ;
    [DebuggerBrowsableAttribute("0")]
internal Graphics ;
    [DebuggerBrowsableAttribute("0")]
internal Metafile ;
    [DebuggerBrowsableAttribute("0")]
internal Graphics ;
    protected virtual override void Finalize();
    internal void ();
    internal void (RectangleF , EmfType , Stream , bool );
    internal void (Rectangle , EmfType , Stream , bool );
    public virtual void Dispose();
}
internal static class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual Byte[] ();
    public abstract virtual long ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void (FontSettingCollection , Workbook );
    private int (int , WorksheetCollection );
}
internal interface  {
    public abstract virtual Byte[] ( );
}
[("And")]
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public (int );
    public ( );
    public virtual string ToString();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Series ;
    internal (Series );
    internal Series ();
    internal int ();
    internal int ();
    public sealed virtual int CompareTo(object );
}
internal class  :  {
    public ( );
}
internal class  : object {
    private UInt32[] ;
    public sealed virtual void (Byte[] );
    public sealed virtual void (Byte[] );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , object ,  ,  );
    internal  ();
    internal  ();
    internal  ();
    public virtual Font ();
    public virtual void (Font );
    internal virtual Font ();
    public virtual Color ();
    public virtual void (Color );
    internal virtual void ();
    internal void (PointF ,  , float , bool );
    protected virtual int ();
    protected virtual int ();
    protected virtual int ();
    [("True")]
internal void ();
    [("True")]
internal Rectangle ();
    [("True")]
internal Rectangle ();
    internal  ();
    internal bool ();
    internal void (bool );
    internal void ();
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Encoding ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    public (Stream , bool );
    private void (Stream , bool , string );
    public virtual string ToString();
    public  ();
    public void ( );
    public  ();
    public void ( );
    public string ();
    public void (string );
    public  ();
    public void ( );
    public Encoding ();
    public void (Encoding );
    public  ();
    public void ( );
    public static Encoding ();
    private void ( );
    internal Stream ();
    internal string ();
    public virtual void WriteByte(byte );
    public virtual void Write(Byte[] , int , int );
    public  (string );
    private void (bool );
    private void ();
    public virtual void Close();
    protected virtual void Dispose(bool );
    private void ();
    public void ();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual void Flush();
    public void ();
    public virtual int ReadByte();
    public virtual int Read(Byte[] , int , int );
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
}
internal abstract class  : object {
    protected  ;
    internal ( );
    public abstract virtual  ();
    public abstract virtual NumberCategoryType ();
    public abstract virtual bool ( );
    public abstract virtual  ( , TypeCode , object ,  );
    public virtual  ( , object );
    public virtual  ( , TypeCode , object );
    internal virtual double (double );
    public sealed virtual  ();
    protected  ( , bool ,  );
    protected  (object , TypeCode ,  );
    protected DateTime (double );
    protected double (DateTime );
    protected virtual int (Char[] , int , int , int , StringBuilder );
    protected virtual int (Char[] , int , int , int , StringBuilder );
    internal static int (Char[] , int , int , int , StringBuilder );
    internal static int (Char[] , int , int );
    internal static bool (Char[] , int , int , char , char );
}
internal class  : object {
    internal String[] ;
    internal int ;
    internal string ;
    internal string ;
    []
internal Worksheet ;
    internal  ;
    internal Hashtable ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal Hashtable ;
    internal ArrayList ;
    internal ArrayList ;
    internal Hashtable ;
    []
internal  ;
    internal ArrayList ;
    internal ArrayList ;
    internal Hashtable ;
    internal ( , Worksheet );
    internal  (string , string , bool );
    internal  (string , string , bool );
    internal  (string , string );
    internal string ();
    internal string (string );
    internal  (string );
}
internal class  : object {
    private static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    public static [] ;
    public static SByte[][] ;
    public static [] ;
    public static SByte[][] ;
    private static ();
    public static BigInteger (sbyte ,  );
    public static  (sbyte ,  ,  );
    public static  ( ,  , sbyte );
    public static  (BigInteger , BigInteger , BigInteger , sbyte , int , int );
    public static SByte[] (sbyte ,  );
    public static  ( );
    public static sbyte ( );
    public static sbyte ( );
    public static sbyte (int );
    public static BigInteger[] (sbyte , int , bool );
    public static BigInteger (sbyte , int );
    public static BigInteger[] ( );
    public static BigInteger[] (int , int , BigInteger );
    protected static int (BigInteger );
    public static  (BigInteger , int , sbyte , BigInteger[] , sbyte , sbyte );
    public static  ( , BigInteger );
    public static  ( ,  );
    public static  ( , SByte[] );
    public static SByte[] (sbyte ,  , sbyte , BigInteger , BigInteger , [] );
    public static [] ( , sbyte );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (Stream );
    public virtual void Write(Byte[] , int , int );
    private void ();
    private void ();
    private void ();
    private void (bool );
    private void (int );
    private void ();
    private int (int , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public (int ,  );
    public static  (object );
    public int ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public UInt32[] ;
    public UInt32 ;
    public UInt32 ;
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    internal (Workbook , LoadOptions );
    public abstract virtual void Dispose();
    internal void ();
    private void ();
    private void ();
    private void ();
    private void ();
    [("True")]
private void ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void ();
    private void ();
    private void ();
    private Byte[] (string );
    private void ();
    private void ( );
    private void ( );
    private void ( );
    internal void ();
    internal void ( ,  );
    [("True")]
internal abstract virtual void ( ,  );
    [("True")]
internal abstract virtual void ( ,  );
    [("True")]
internal abstract virtual void ( ,  );
    [("True")]
internal abstract virtual void ( ,  , object );
    [("True")]
internal abstract virtual void ( );
    [("True")]
internal abstract virtual void ( );
    [("True")]
internal abstract virtual void ( );
    [("True")]
internal abstract virtual void ( );
    [("True")]
internal abstract virtual void ( ,  );
    [("True")]
internal abstract virtual void ();
    internal static void (Workbook );
    [("True")]
internal abstract virtual void ();
    private void ();
    private void ();
    private void ();
    internal static void ( ,  );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (PivotTable );
    private void ();
    [("True")]
internal abstract virtual void ();
    internal abstract virtual void ();
    protected virtual void ();
    private void (ArrayList );
    private static  (string , string ,  , Workbook ,  );
    internal String[] ( , string , bool );
    private void ( );
    private void ( );
    internal void ( , string , bool );
    private void ( , string );
    private void ( );
    private void ( );
    private void ();
}
internal abstract class  : object {
    public static bool (byte );
}
internal abstract class  : object {
    private  ;
    protected  ;
    protected  ;
    public  ();
    public void ( );
    public  ();
    public  (string );
    public  (string );
    public  ( , string );
    public  ( , string );
    public static string (string , string );
    public static string (string , string );
    private static string (string );
}
internal class  : object {
    internal Int64[] ;
    internal [] ;
    internal long ;
    internal long ;
    internal  ;
    internal bool ;
    internal bool ;
    internal ([] , Int64[] , long , long ,  , bool , bool );
    public GraphicsPath ( , Double[] , [] , float , float , float , float , Boolean& );
    internal long ();
    internal long ();
}
internal class  :  {
    private  ;
    private ( );
    public ( );
    public ( );
    public (bool );
    public static  (object );
    public virtual int ();
    public virtual  ();
    public virtual  ();
}
internal abstract class  :  {
    internal int ;
    protected byte ;
    public static  (ListObject );
    public static  ( ,  );
    public static  ();
    public virtual byte ();
    public virtual  ();
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public bool (byte );
    public abstract virtual bool (Char[] ,  );
    public bool ();
    public virtual  (Char[] ,  );
    public virtual byte ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual int ();
    protected virtual short ();
    protected virtual short ();
    protected abstract virtual void ( ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual string ToString();
    protected void (StringBuilder ,  );
}
internal class  :  {
    internal void ( );
}
internal abstract class  : object {
    internal static Enum (Type , string );
    internal static Array (Type );
    internal static Enum (Type );
    internal static bool (Type );
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal float ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal int ;
    internal float ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    private  ;
    internal void ( );
}
internal class  : object {
    internal int ;
    internal List`1<> ;
}
internal class  : object {
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    private static ();
}
internal class  :  {
    private  ;
    public ( ,  ,  );
    private ( );
    public virtual  ( );
    public sealed virtual  ( );
    public sealed virtual  ( , bool );
}
internal class  : object {
}
internal abstract class  : object {
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    private static Byte[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static object ;
    private static [] ;
    private static Int32[] ;
    private static ();
    private static Byte[] (Byte[] , Byte[] , Byte[] );
    private static bool (Byte[] , byte );
    private static int (Int32[] , Int32[] );
    private static int (Int32[] , Int32[] , Int32[] );
    private static bool (Byte[] );
    private static bool (Byte[] );
    private static  ();
    public static  ();
    private static UInt32 (Byte[] , int );
    private static UInt32 (Byte[] , int );
    private static void (Byte[] , int , UInt32[] , int , int );
    private static bool (Byte[] , int , bool ,  );
    private static void (Byte[] , int , UInt32[] );
    private static void ( , byte , Byte[] );
    private static void (UInt32 , Byte[] , int );
    private static void (UInt32 , Byte[] , int );
    private static void (ulong , Byte[] , int );
    private static int ( , Byte[] , int );
    public static void ( , Byte[] );
    public static void (Byte[] , int , Byte[] , int );
    private static SByte[] (UInt32[] , int );
    private static void ( , Byte[] , Byte[] , Byte[] , int , Byte[] , byte , Byte[] , int , int , Byte[] , int );
    private static void (Byte[] , int , Byte[] , byte , Byte[] , int , int , Byte[] , int );
    private static void (Byte[] , int , Byte[] , int , Byte[] , byte , Byte[] , int , int , Byte[] , int );
    private static bool (Byte[] , int , Byte[] , int , Byte[] , byte , Byte[] , int , int );
    private static void (bool ,  ,  );
    private static void (bool ,  ,  ,  );
    private static void ( ,  );
    private static  ( );
    private static  ( );
    private static void ( );
    private static void ( );
    private static void ( );
    private static void (int , int ,  );
    private static [] ( , int );
    private static void ( );
    private static void ( );
    public static void ();
    private static void (Byte[] , int , Byte[] );
    private static Byte[] (Byte[] );
    private static void (Byte[] ,  );
    private static void (Byte[] , Byte[] , int );
    internal static void (Byte[] , int , Int32[] , Int32[] );
    private static void (UInt32[] , UInt32[] ,  ,  );
    public static void (Byte[] , int , Byte[] , int , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , int , Byte[] , int , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , Byte[] , int , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , int , Byte[] , Byte[] , int , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , Byte[] , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , int , Byte[] , Byte[] , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] ,  , Byte[] , int );
    public static void (Byte[] , int , Byte[] , int , Byte[] ,  , Byte[] , int );
    public static bool (Byte[] , int , Byte[] , int , Byte[] , int , int );
    public static bool (Byte[] , int , Byte[] , int , Byte[] , Byte[] , int , int );
    public static bool (Byte[] , int , Byte[] , int , Byte[] , Byte[] , int );
    public static bool (Byte[] , int , Byte[] , int , Byte[] ,  );
}
internal class  : object {
    private int ;
    private [] ;
    private int ;
    private int ;
    public string (string );
    public string (Char[] , int , int );
    private string (string , int );
    private void ();
    private static bool (string , Char[] , int , int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    private RectangleF (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal ( );
    public static  ( , bool );
    public static  (object );
    public int ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public [] ();
    public IEnumerable ();
    public  ();
    public virtual  ();
}
internal class  : object {
    []
private Workbook ;
    []
private WorksheetCollection ;
    []
private  ;
    []
private  ;
    []
private TxtLoadOptions ;
    private Hashtable ;
    []
private  ;
    private  ;
    private  ;
    private ICustomParser[] ;
    private  ;
    private Hashtable ;
    private Hashtable ;
    private bool ;
    private bool ;
    private  ;
    private bool ;
    private (Cells , TxtLoadOptions );
    private static  (WorkbookSettings , TxtLoadOptions );
    internal static void (string , Cells , int , int , TxtLoadOptions );
    internal static void (StreamReader , Cells , int , int , TxtLoadOptions );
    private  (string );
    private void ( , StringBuilder );
    private void ( , string );
    private static bool (Cells , int , int );
    private void (Cells , int , int , string );
    private string (StreamReader );
    private void (Cells , int , int , StreamReader );
}
internal enum  : Enum {
    public int value__;
    public static  Auto;
    public static  Column;
    public static  Page;
}
internal class  : object {
    private static Int32[] ;
    private static Int64[] ;
    private static Int64[] ;
    private static Int64[] ;
    private static Int64[] ;
    private static Int64[] ;
    private static Int64[] ;
    private static Int64[] ;
    private static Int64[] ;
    private Int64[] ;
    private static Int16[] ;
    private Byte[] ;
    private int ;
    private Int16[] ;
    private Int64[] ;
    private Int64[] ;
    private Int64[] ;
    private Int64[] ;
    private Int64[] ;
    private static ();
    public ( );
    private static long (int , int , int , int , int , int , int , int );
    private static int (int );
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
    private void ();
    private static long (Byte[] , int );
    private static void (long , Byte[] , int );
    private void ();
    public sealed virtual void (byte );
    private void ();
    public sealed virtual void (Byte[] , int , int );
    private void ();
    private Byte[] ();
    public sealed virtual int ();
    public sealed virtual  ();
    public sealed virtual void ( );
}
internal class  : object {
    private bool ;
    private string ;
    internal (string );
    internal ( );
    internal (string , bool );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual bool ();
    public sealed virtual string ();
    public bool ();
    public sealed virtual bool ( );
    public sealed virtual bool (string );
    public sealed virtual int (string );
    public sealed virtual int ( );
}
internal class  :  {
    internal (bool );
    internal void ();
    internal void (ChartFrame , SaveFormat );
    internal Int32[] (Legend );
    internal void (Title , SaveFormat );
    internal void (DataLabels , SaveFormat );
    internal void (DisplayUnitLabel , SaveFormat );
}
internal class  : object {
    internal static Worksheet ( );
    internal static string ( );
    internal static string (int );
    internal static int (int );
    internal static bool (PivotFilterType );
    internal static string (DateTime );
    internal static DateTime (string );
    internal static  (int );
    internal static int ( );
    internal static string ( );
    internal static  (string );
    internal static  (int );
    internal static int ( );
    internal static string ( );
    internal static  (string );
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ( ,  );
    public abstract virtual void (StringBuilder );
    public abstract virtual void (Char[] ,  , StringBuilder );
    public abstract virtual  (Char[] ,  );
    public abstract virtual  (Char[] ,  ,  );
    public abstract virtual  (Char[] ,  ,  );
    public abstract virtual  (Char[] ,  );
    public abstract virtual int ();
    public abstract virtual  (int );
    public abstract virtual  ();
    public abstract virtual  ( );
    public abstract virtual void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private SlicerCollection ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    internal (SlicerCollection , string );
    internal virtual void ( );
    private void ( );
    private bool (string );
    private string (string );
    private void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    private short ;
    private short ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private  ;
    public ( ,  ,  ,  , int , int , int , int );
    private ( ,  );
    public virtual  ();
    public virtual  ( );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool ();
    public virtual bool (int , int );
    public virtual bool (int );
    private bool ();
    private bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    internal void ();
    internal void (int );
}
internal class  : object {
    private  ;
    internal ( );
    internal void ( );
}
internal class  : object {
}
internal class  : object {
    private  ;
    private  ;
    public ( ,  );
    public  ( );
    public  ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (int ,  );
    public  ( );
    public  ();
    public int ();
    public virtual bool ();
    public virtual  ();
    public virtual object ();
    public virtual  ();
    public virtual byte ();
    public virtual object ( );
    public virtual  ( );
    public virtual  ( ,  );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual bool ();
    public virtual bool ();
    public virtual  (Int32[] ,  , int );
    public virtual  ( , int );
    public virtual bool ( , bool );
    public virtual void (StringBuilder ,  );
}
internal class  : object {
    internal string ;
    internal int ;
    internal int ;
    internal (string , int );
    internal virtual bool ();
    internal virtual bool ();
    internal virtual bool ();
    internal virtual  ();
    internal virtual void ( );
    internal virtual  (string , string , ReplaceOptions , Regex , Cell );
    internal virtual  (int , string , Cell );
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal class  : AbstractTextLoadOptions {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    internal virtual LoadOptions 3brubdvsxd6xvlegksy2gu4sdj469srm();
    public  ();
    public void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private int ;
    private  ;
    private byte ;
    internal ( );
    internal ( );
    private static  ( );
    public void ( );
    public void (byte );
    private void (byte );
    private void ();
    public void (Byte[] );
    public void (Byte[] , int , int );
    public bool ( );
    public long ();
    public int ();
    public  ();
    public  ();
    public Byte[] ();
    public void (Stream );
}
internal class  : object {
    private ColumnCollection ;
    internal (Cells );
    public sealed virtual int (int );
}
internal class  : object {
    internal string ;
    private string ;
    private string ;
    private ChartType ;
    private string ;
    internal string ;
    internal string ;
    private bool ;
    private bool ;
    private bool ;
    private string ;
    private ChartMarkerType ;
    private double ;
    private string ;
    private MsoLineDashStyle ;
    private string ;
    []
private WorksheetCollection ;
    internal Font ;
    private bool ;
    private bool ;
    private Bar3DShapeType ;
    private double ;
    internal bool ;
    internal bool ;
    internal Hashtable ;
    internal string ;
    internal bool ;
    private bool ;
    private double ;
    private LabelPositionType ;
    private string ;
    private bool ;
    private bool ;
    private string ;
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal ChartType ();
    internal void (ChartType );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal string ();
    internal void (string );
    internal ChartMarkerType ();
    internal void (ChartMarkerType );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal MsoLineDashStyle ();
    internal void (MsoLineDashStyle );
    internal string ();
    internal void (string );
    internal WorksheetCollection ();
    internal void (WorksheetCollection );
    internal Font ();
    internal void (Font );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal Bar3DShapeType ();
    internal void (Bar3DShapeType );
    internal double ();
    internal void (double );
    internal bool ();
    internal void (bool );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal LabelPositionType ();
    internal void (LabelPositionType );
    internal string ();
    internal void (string );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal string ();
    internal void (string );
}
internal class  : object {
    private static BigInteger ;
    private  ;
    private static ();
    public sealed virtual void ( );
    public sealed virtual  ();
    private static BigInteger (BigInteger ,  );
    private static BigInteger (BigInteger , BigInteger , BigInteger );
}
internal class  : List`1<> {
    [DebuggerBrowsableAttribute("0")]
private StringBuilder ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal string ();
    internal void (string );
    internal string ();
    internal bool ();
    internal bool ();
    internal int ();
    internal char ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    public void ();
    public int ();
    internal void ();
    internal void (string );
    internal bool ();
    internal void (string );
    internal void (int );
    public void ( );
    public void ( );
    public void (string );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    internal ( , float , float ,  );
    private Matrix ( );
    internal virtual GraphicsPath (RectangleF );
    protected virtual PointF ( );
    internal virtual void ( , float , float , float , float );
    internal virtual void ( , float , float , float , float );
    protected bool ( );
    internal GraphicsPath (RectangleF );
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    protected virtual void ( , float , float , float , float );
    protected virtual void ( , float , float , float , float , bool , bool );
    protected virtual void ( , float , float , float , float );
    protected bool (RectangleF& );
    internal virtual RectangleF (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal virtual void ();
    internal virtual void (RectangleF );
    [("True")]
internal virtual RectangleF (RectangleF , int );
    private bool ();
    private static void ( , float );
    private void (float );
    private bool ();
    private Matrix (int );
    internal Matrix ( );
    internal Matrix ( );
    internal Matrix ( );
    internal SizeF (int , float , float , bool , bool );
    internal void ();
    public sealed virtual void Dispose();
    protected virtual void (bool );
    protected virtual override void Finalize();
}
internal class  : object {
    []
private Worksheet ;
    []
private Cells ;
    []
private Workbook ;
    []
private WorksheetCollection ;
    []
private  ;
    []
private SaveOptions ;
    []
private Stream ;
    private byte ;
    private  ;
    internal (Worksheet ,  , SaveOptions , Stream );
    internal void ( ,  );
    internal void ( , long );
    internal void ( );
    private void ( );
    private void ( );
    private void ( , HorizontalPageBreakCollection );
    private void ( , VerticalPageBreakCollection );
    private void ( , UInt32 );
    private void ( );
    private void ( );
    private void ( , int );
    private void ( ,  , long , int );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void (DataSorter ,  );
}
internal class  :  {
    private static Hashtable ;
    private static Hashtable ;
    [("True")]
public (DigitalSignatureCollection );
    private static ();
    public void ( );
    private void ( ,  , string );
    private string (string , string , bool );
    private void ( );
    private  ( , DigitalSignature );
    private  ( , DigitalSignature );
    private ArrayList ( );
    private void ( );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    public (Byte[] , Byte[] , int );
    public (Byte[] , Byte[] , Byte[] , int );
    public Byte[] ();
    public Byte[] ();
    public Byte[] ();
    public Byte[] ();
    public int ();
}
internal class  : object {
    public static CultureInfo (short );
    internal static CultureInfo (CountryCode );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
}
internal static class  : object {
    public static void (Stream , Stream , int );
}
internal static class  : object {
    public static bool (Type , Type , Int32& );
}
internal class  : object {
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    private bool ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public  ;
    public bool ();
    public void (bool );
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
internal class  : object {
    private double ;
    private double ;
    private double ;
    private bool ;
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public bool ();
    public void (bool );
}
internal class  :  {
    internal static void (Stream , bool , int , int , bool );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private byte ;
    public ( ,  );
    public ( ,  , int );
    public ( ,  , Byte[] );
    public ( ,  ,  , int );
    public ( ,  ,  , Byte[] );
    public ( ,  , int , byte );
    public ( ,  ,  , int , byte );
    private ( ,  ,  ,  , int , Byte[] , byte );
    public static  ( ,  );
    public static  ( ,  ,  , int , byte );
    public virtual string ();
    public virtual void (bool ,  );
    private void (Byte[] );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual void ();
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    private void (int , Byte[] );
    private Byte[] (Byte[] , int , int , int );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private ArrayList ;
    private RectangleF ;
    private bool ;
    public (Stream , bool );
    public (Byte[] , bool );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal float ();
    internal float ();
    public SizeF ();
    public PointF ();
    public RectangleF ();
    public SizeF ();
    internal int ();
    internal int ();
    private static  (Byte[] );
    private void (Byte[] );
    private void (BinaryReader );
    private void (BinaryReader );
    internal  (int );
    private float ();
    private RectangleF ();
    internal  ();
    internal bool ();
}
internal class  : object {
    private static Hashtable ;
    private static ();
    private static void ( ,  );
    internal static  ( );
}
internal class  :  {
    private  ;
    private ( );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (Chart );
    internal void ( , CopyOptions );
    internal Chart ();
    public  (int );
    internal  (int );
    internal int ( );
    internal int ( );
    internal void (int ,  );
    internal bool ();
    internal  (bool );
    internal void ( );
    internal  (bool );
}
internal class  :  {
    internal ( );
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual  ();
}
internal class  : object {
    internal static int ;
    internal static float ;
    private static ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private bool ;
    public sealed virtual bool (int );
    public sealed virtual bool ();
    public bool ();
    public sealed virtual  ();
}
internal enum  : Enum {
    public UInt32 value__;
}
internal class  : object {
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected bool ;
    public ( ,  ,  ,  ,  , int , bool );
    public virtual int (int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
    protected virtual void (long , byte , Byte[] , int , int , Byte[] , int , int );
    protected virtual void ( , bool , long );
}
internal class  :  {
    private string ;
    private  ;
    private  ;
    internal ( , RectangleF , string , Byte[] , string );
    internal  ();
    internal void ( );
    internal virtual  ();
    internal virtual void ( );
    internal virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    private float (RectangleF );
    internal virtual void ();
    private void (Brush , GraphicsPath , RectangleF );
    private Color (Color );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private Byte[] ;
    private  ;
    private static  ;
    private ( );
    public (Byte[] );
    public ( , Byte[] );
    public (Byte[] ,  );
    public ( , Byte[] ,  );
    private static ();
    public static  (object );
    public  ();
    public Byte[] ();
    public  ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<string> ;
    public (Workbook );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( ,  );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( , bool ,  );
}
internal abstract class  : object {
}
internal abstract class  : object {
    protected bool ;
    private  ;
    internal ( );
    [("True")]
internal virtual void (PointF , SizeF );
    [("True")]
internal abstract virtual void (PointF , string );
    [("True")]
internal abstract virtual void (PointF , string );
    [("True")]
internal abstract virtual void (PointF , Color );
    [("True")]
internal abstract virtual void (PointF );
    [("True")]
internal abstract virtual void (RectangleF );
    [("True")]
internal abstract virtual void (RectangleF );
    [("True")]
internal abstract virtual void (PointF[] );
    [("True")]
internal abstract virtual void (PointF[] );
    [("True")]
internal abstract virtual void (PointF[][] );
    [("True")]
internal abstract virtual void (PointF[] );
    [("True")]
internal abstract virtual void (PointF[][] );
    [("True")]
internal abstract virtual void (RectangleF , PointF , PointF );
    [("True")]
internal abstract virtual void (RectangleF );
    [("True")]
internal abstract virtual void (RectangleF , PointF , PointF );
    [("True")]
internal abstract virtual void (RectangleF , PointF , PointF );
    [("True")]
internal abstract virtual void (RectangleF , SizeF );
    [("True")]
internal abstract virtual void (RectangleF , RectangleF , Byte[] );
    [("True")]
internal abstract virtual void (RectangleF );
    internal  ();
    internal void ( );
    protected  ();
    protected PointF ();
    protected void (PointF );
    internal bool ();
}
internal class  : object {
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public (int ,  ,  );
    public ( ,  ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal abstract class  :  {
    internal int ;
    public static  (int );
    public static  (double );
    public abstract virtual double ();
    public abstract virtual int ();
    public abstract virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual void (Char[] ,  , StringBuilder );
}
internal class  :  {
    internal (PivotAreaFilter );
    internal (PivotAreaFilter , PivotField );
}
internal interface  {
    public abstract virtual int (Byte[] , int , int , Stream );
    public abstract virtual int (Byte[] , int , int , Stream );
    public abstract virtual int (string , Stream );
}
internal class  :  {
    internal  ;
    internal (int , Cells );
    public virtual int ();
    public virtual int (int );
    public virtual int (int );
    public virtual int (int , int );
    public virtual int (int , int , int );
    public virtual bool (int );
    public virtual int (int , int );
    public virtual int (int );
    public virtual int (int );
    public virtual int (int , bool );
    public virtual  ();
    public virtual  (int , int , bool );
    public virtual int ();
    public virtual void (int );
    public virtual void (int , int );
    public virtual int (int , int );
    public virtual int (int , int );
    public virtual void (int , int );
    public virtual void (int );
    public virtual bool (int , int );
    public virtual void (int );
    public virtual void ();
    public virtual int ();
    public virtual int (int ,  );
    public virtual int (int , [] , int , int );
    public virtual int (int ,  , int , int , int );
    public virtual int (int );
    public virtual void (int , int );
    public virtual  (int );
    public virtual object (int );
    public virtual void (int ,  );
    public virtual int (int );
    public virtual void (int , int );
    public virtual  (int ,  );
    public virtual  (int ,  , int );
    public virtual void (int ,  , int );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual void (int );
    public virtual byte (int );
    public virtual void (int , byte );
    public virtual int ();
    public virtual void (int );
    public virtual bool (int , int );
    public virtual  ( , int );
    public virtual void ( , int );
    public virtual object ();
}
internal class  : object {
    private int ;
    internal CellArea ;
    private int ;
    private  ;
    []
private Worksheet ;
    internal (Worksheet );
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal int ();
    internal void (int );
    internal  ();
    internal void ( );
    internal bool (CellArea , int , ShiftType );
}
internal class  : object {
    private  ;
    public ( );
    public  ();
    public  ();
    public BigInteger ();
    public  ();
}
internal class  :  {
    private Int32[] ;
    public ( ,  , [] , int , int , Int32[] );
    public virtual  ( );
    public virtual void ( );
    public virtual bool (int ,  );
}
internal class  : object {
}
internal class  : object {
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) ;
    protected int ;
    protected [] ;
    protected [] ;
    protected  ;
    protected int ;
    internal int ();
    internal int ();
    internal void (int );
    public virtual bool ();
    public virtual int ();
    public virtual void (int );
    public virtual [] ();
    public virtual void ([] );
    public virtual [] ();
    public virtual void ([] );
    public virtual  ();
    public virtual void ( );
    public virtual int ();
    public virtual void (int );
}
internal abstract class  : object {
    internal int ;
    internal abstract virtual  ();
    internal abstract virtual object ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual RectangleF (RectangleF );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private BigInteger ;
    private BigInteger ;
    public (BigInteger , BigInteger );
    private ( );
    public static  ( , bool );
    public static  (object );
    public BigInteger ();
    public BigInteger ();
    public virtual  ();
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal long ;
    internal long ;
    internal long ;
    internal UInt32 ;
    public (Byte[] );
}
internal class  : object {
    internal Style ;
    internal string ;
    internal string ;
    internal string ;
    internal int ;
    internal int ;
    internal int ;
}
internal class  :  {
    public ( );
    public virtual string ();
    public virtual int ();
    public virtual int (Byte[] , int );
    public virtual void ();
    public virtual  ();
    public virtual void ( );
}
internal class  : object {
    protected bool ;
    private double ;
    private bool ;
    private double ;
    public (bool );
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    public (CellArea );
}
internal class  : object {
    internal DateTime ;
    internal DateTime ;
    internal void ( );
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  :  {
    private string ;
    private long ;
    private  ;
    private  ;
    private bool ;
    private  ;
    private  ;
    private  ;
    private  ;
    private Hashtable ;
    public ( ,  );
    public void ( , Stream );
    public virtual void ( );
    public virtual void ( );
    private void ();
    private void ();
    private string ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    private string ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    private void (Brush );
    private void (TextureBrush );
    internal string (Byte[] , RectangleF , WrapMode , Matrix );
    public virtual void ( );
    private void (string , float );
    private void (string , Color );
    private void (string , string );
    private string (float );
    private long ();
    private string ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    internal  ;
    internal  ;
    public (Byte[] );
    public (int , Byte[] );
    private ( );
    public static  (object );
    public BigInteger ();
    public Byte[] ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  ,  );
    private ( ,  );
    internal  ();
    protected virtual  ( , bool );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual void ( );
    public virtual bool ();
}
internal class  :  {
    internal ( );
}
internal class  : object {
    internal string ;
    internal string ;
    internal  ;
    internal bool ;
    internal  ;
    internal  ;
    internal ( , Worksheet );
    internal void ( );
    private void ( );
}
internal class  : object {
    internal Color ;
    internal bool ;
    internal int ;
    internal int ;
    internal Single[] ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
}
internal interface  {
    public abstract virtual Byte[] ();
    public abstract virtual int (Byte[] , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Stack ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private StringBuilder ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (Workbook ,  );
    public (Workbook ,  , bool );
    public (Workbook ,  , bool , FileFormatType );
    public (Worksheet ,  );
    public (Worksheet ,  , bool );
    public (Workbook ,  , bool , FileFormatType , bool );
    internal bool ();
    internal bool ();
    internal void (bool );
    public virtual void Dispose();
    public virtual  ();
    public bool ();
    public void (bool );
    public  (Byte[] , int , int );
    public string (Byte[] , int , int );
    public string ();
    public void (Byte[] , int , int , StringBuilder );
    public void (StringBuilder );
    private void ( );
    private void (char );
    private void (char , char );
    private void (int , int );
    private void (int );
    private void (string , int );
    private void ();
    private void (string , int );
    public static string (double , char );
    public void (double , StringBuilder );
    public string (bool );
    public string (string );
    public string (byte );
    public string (int , int );
    public string (int , string );
    private string (int ,  , string );
    private string ();
    public string (int );
    public string (int );
    public string ( );
    private string (int , int );
    private string (int , int , int );
    public void (StringBuilder , int );
    public void (string , string , StringBuilder );
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    private void ();
    private void (int );
    internal void ();
    internal void ();
    internal void ();
    internal void (StringBuilder );
}
internal class  :  {
    internal ( , float , float , float , Double[] );
    [("True")]
protected virtual void (Double[] );
    protected virtual float (double , float );
    [("True")]
internal virtual void ( );
    private  ( ,  ,  );
}
internal class  : object {
    public static  ( );
    public static  ( ,  );
    public static  (Char[] ,  );
    public static  (Char[] , bool ,  );
    private static void (Byte[] , int , int , BigInteger );
}
internal class  :  {
    []
private  ;
    internal ( , LightCellsDataProvider );
    internal virtual void (Style , int );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected Font ;
    [DebuggerBrowsableAttribute("0")]
protected Font ;
    [DebuggerBrowsableAttribute("0")]
protected Color ;
    [DebuggerBrowsableAttribute("0")]
protected string ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected TextDirectionType ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
internal TickLabelItem[] ;
    [DebuggerBrowsableAttribute("0")]
internal TickLabelAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( );
    internal  ();
    public virtual Font ();
    public virtual void (Font );
    public Font ();
    public void (Font );
    public virtual Color ();
    public virtual void (Color );
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public TextDirectionType ();
    public void (TextDirectionType );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    internal int ();
    internal float ();
    internal void ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  :  {
    private  ;
    public ( );
}
internal class  : object {
    []
private Cells ;
    []
private RowCollection ;
    internal (Cells , RowCollection );
    public sealed virtual bool ();
    public sealed virtual Cells ();
    public sealed virtual  (int );
    public sealed virtual Row (int );
    public sealed virtual Cell (int , int );
    public sealed virtual  (int ,  , int );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual  (int , int , bool );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal string ;
    internal string ;
    internal string ;
    internal FormatConditionType ;
    private static ();
    internal void ( );
    internal bool ( );
}
internal class  : object {
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private static ();
    private UInt32 (UInt32 );
    private void (UInt32 , UInt32 , UInt32[] );
    private void ();
    private void (Byte[] );
    private Byte[] ();
    private void (UInt32[] , UInt32[] , UInt32 , UInt32 );
    private Byte[] (int , Byte[] , Byte[] );
    public static Byte[] (Char[] );
    public static Byte[] (Byte[] , Byte[] , int );
}
internal class  : List`1<> {
}
internal class  :  {
    internal ( );
    internal void (ushort );
    internal void (bool );
    internal void (bool );
    internal void (bool , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal [] ;
    [DebuggerBrowsableAttribute("0")]
internal [] ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal XlsSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    public ( , Workbook , SaveOptions );
    public sealed virtual void Dispose();
    private void ();
    private void ();
}
internal abstract class  : object {
    public abstract virtual object (int );
    public virtual bool (int );
    public virtual void ();
}
internal class  :  {
    internal ( );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    public ( ,  );
    public  ();
    public  ();
    private static  ( );
}
[AttributeUsageAttribute("1036")]
internal class  : Attribute {
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private int ;
    private string ;
    private static  ;
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public string ();
    public void (string );
    public static  ();
    public static void ( );
    internal string (string );
    private string (string );
    public string (string );
}
internal class  : object {
    private  ;
    private int ;
    private int ;
    public (bool ,  );
    [CompilerGeneratedAttribute]
public sealed virtual int ();
    [CompilerGeneratedAttribute]
public sealed virtual int ();
    public sealed virtual int (Byte[] , int , int , Byte[] , int , RandomNumberGenerator );
}
internal class  :  {
    internal virtual  ();
}
internal class  :  {
    internal (PageSetup );
}
internal class  : object {
    private Byte[] ;
    private int ;
    private int ;
    private bool ;
    public (int );
    public (Byte[] , int , int );
    public static int (int );
    public void (Byte[] , int , int );
    public int ();
    public void (Stream , int );
    public void (Byte[] , int , int , int );
    public MemoryStream (int );
    public void (int );
    public void (Byte[] , int , int , int );
    public Byte[] (int , int );
    public void ();
}
internal enum  : Enum {
    public UInt32 value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private bool ;
    public ( );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Object[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
public object  { get; public set; }
    public (int );
    public sealed virtual void Dispose();
    public object (int );
    public void (int , object );
    public int ();
    public object ();
    public object ();
    public bool ();
    public bool ();
    public void ();
    public object (object );
    public void (int );
    public void (object );
    public void (int );
    public int (object );
    public void (object );
    public void (IList );
    public void ();
    public IEnumerator ();
}
internal class  :  {
    internal ( );
}
internal interface  {
    public abstract virtual object (bool ,  );
}
internal class  : ValueType {
    internal static ArrayList ( ,  , Rectangle , float , double , int );
    private static ArrayList ( ,  , Rectangle , float , double );
    private static void ( ,  , RectangleF , Color , float ,  );
    private static void ( ,  , RectangleF );
    internal static void ( ,  , ArrayList );
    private static void ( ,  , int , int , RectangleF , bool , int );
    internal static void ( ,  , IList ,  ,  , Rectangle );
    private static void ( ,  , IList , Rectangle , int , int , ArrayList ,  );
    private static void ( ,  , PointF[] , float , int , int , ArrayList ,  );
    private static void ( ,  , PointF[] , float , int , int , ArrayList );
    private static PointF[] (IList );
    private static PointF[] (IList , int , int );
    private static void ( , PointF[] ,  , Rectangle );
    private static double (PointF , PointF , PointF );
    private static void ( , ArrayList ,  );
    private static bool (Rectangle , PointF& , PointF& );
    private static void (ArrayList );
    private static void (PointF[]& );
    internal static void ( ,  , IList , Rectangle );
    internal static ArrayList ( ,  , Rectangle , float , double , int );
    private static bool ( , double , double );
    private static bool (int , Rectangle , Single& , Single& , Single& , Single& );
    internal static void ( ,  , ArrayList );
    internal static void ( ,  , int , int , PointF , int );
    private static ArrayList ( ,  , Rectangle , float , double );
    internal static ArrayList ( ,  , Rectangle , int );
    private static void ( ,  , ArrayList& , ArrayList );
    private static ArrayList ( ,  , Rectangle );
    internal static ArrayList ( ,  , Rectangle , float , int );
    private static ArrayList ( ,  , Rectangle , float );
    internal static ArrayList ( ,  , Rectangle , int );
    private static ArrayList ( ,  , Rectangle );
    internal static ArrayList ( ,  , Rectangle , float , int );
    private static ArrayList ( ,  , Rectangle , float );
    internal static void ( ,  , float , double , int );
    private static void ( ,  , float , double );
    internal static void ( ,  , double , int );
    private static void ( ,  , float , double , int , double );
    internal static void ( ,  , double , int );
    private static void ( ,  , float , double );
    internal static void ( ,  , float , double , int );
    private static void ( ,  , float , double );
    internal static void ( ,  , float , double , int );
    private static void ( ,  , float , double );
    private static void (double , Object[] , ArrayList ,  );
    private static PointF ( , float , float , float , float );
    internal static PointF ( , float , float , float , float , float );
    internal static void ( ,  , ArrayList );
    private static void ( ,  ,  , float , float , float , float , float , double , Double& );
    internal static PointF ( , float , float , float , int );
    internal static PointF[] ( ,  , float , float , float , float , int , int );
    private static void ( ,  ,  , float , float , float , float , float , int , int );
    private static void ( ,  ,  , float , float , float , float , float , int , int , float );
    private static void ( ,  ,  , float , float , float , float , float , int , int , float );
    private static float (int , bool , float , float );
    private static float (float , bool , float , float );
    private static void ( ,  , IList );
    private static void ( ,  ,  , PointF[] , PointF[] );
    private static PointF ( , float , float , float , float , float , int , int );
    internal static double ( );
    internal static void ( , int , Double& , Double& );
    internal static void ( , int , Double& , Double& );
    private static void ( ,  ,  , float , float , float , float , float , float , float );
    private static void ( ,  ,  , PointF[] , float );
    private static void ( ,  ,  , float , float , float , float , float , float , float );
    private static PointF ( ,  ,  , float , float , float , float , float , float , float , double );
    private static void ( ,  , Hashtable , Hashtable , float , int , int );
    private static void (Hashtable , PointF& , PointF& , Int32& , Int32& );
    internal static PointF[] (ArrayList , bool );
    internal static void ( , int , int , Hashtable ,  );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private ArrayList ;
    private ArrayList ;
    private  ;
    private  ;
    private ArrayList ;
    private  ;
    private  ;
    private  ;
    private ArrayList ;
    private  ;
    private StringBuilder ;
    private StringBuilder ;
    private int ;
    private int ;
    private int ;
    internal ( , StringBuilder , StringBuilder );
    internal void ();
    internal void (bool , int );
    internal void (bool );
    internal StringBuilder ();
    internal StringBuilder ();
    internal int ();
    internal [][] ();
    internal Int32[][] ();
    internal Int32[] ();
    internal  ();
    internal Int32[] ();
    internal Int32[] ();
    internal Int32[][] ();
}
internal class  : object {
    private sealed virtual override int (object , object );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private string ;
    private string ;
    public ( );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    public (int );
    public ( );
    public virtual string ToString();
}
internal class  : object {
    internal static int (string );
    private static Int32[] (Byte[] );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Stream ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal FileFormatType ;
    [DebuggerBrowsableAttribute("0")]
[]
internal SaveOptions ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    internal (Workbook , SaveOptions );
    [("True")]
public abstract virtual void (Stream );
    internal static void ( , string , Byte[] , int , int );
    public sealed virtual void ();
    public sealed virtual void Dispose();
    internal void (Stream );
    internal void (Stream );
    private void ();
    private void ();
    internal static void ( , List`1<> );
    internal virtual void ();
    internal virtual void ();
    private void ();
    internal bool (string );
    internal bool (string , string );
    internal static bool ( ,  , string , string , bool );
    internal void (string , string );
}
internal class  : object {
    private static Byte[] ;
    private static Byte[] ;
    protected  ;
    protected  ;
    protected  ;
    public ( ,  ,  );
    private static ();
    public static  ( , Byte[] );
    public virtual  (Byte[] );
}
internal enum  : Enum {
    public int value__;
    public static  AttrUbyte;
    public static  AttrUint16;
    public static  EmbeddedData;
    public static  EmbeddedDataByte;
    public static  Real32;
    public static  Real32Array;
    public static  Real32Box;
    public static  Real32Xy;
    public static  Sint16;
    public static  Sint16Array;
    public static  Sint16Box;
    public static  Sint16Xy;
    public static  Sint32;
    public static  Sint32Array;
    public static  Sint32Box;
    public static  Sint32Xy;
    public static  Ubyte;
    public static  UbyteArray;
    public static  UbyteBox;
    public static  UbyteXy;
    public static  Uint16;
    public static  Uint16Array;
    public static  Uint16Box;
    public static  Uint16Xy;
    public static  Uint32;
    public static  Uint32Array;
    public static  Uint32Box;
    public static  Uint32Xy;
}
internal class  : object {
    private StringAlignment ;
    private StringAlignment ;
    public StringAlignment ();
    public void (StringAlignment );
    public StringAlignment ();
    public void (StringAlignment );
}
internal abstract class  :  {
    private bool ;
    private bool ;
    private int ;
    protected (Stream );
    protected (Stream , int , bool );
    private static void (Stream , int );
    internal static void (Stream , int , Byte[] );
    internal void (int , Byte[] );
    internal static void (Stream , int , Stream );
}
internal abstract class  : object {
    public abstract virtual double (double );
    public double (double , double , double );
    public double (double , double , double );
    public double (double , double , double , double );
    private void (double , double , double , double , double , double , double , double , Double[] );
    public double (double , double , double );
    public double (double , double , double );
    public double (double , double , int , int , Double[] , Double[] , Double[] );
    public double (double , double , double );
    public double ();
    public double ();
}
internal class  : object {
    internal ushort ;
    internal ushort ;
    internal ushort ;
    private  ;
    internal (int );
    internal (int , int );
    internal  ();
    internal  ();
    internal void ( );
}
internal class  : object {
    public static string ();
}
internal class  : object {
    internal static string ;
    internal static void (Style , int );
    internal static void (Style , int );
    internal static void (Style , int );
    internal static void (Style , int );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected [] ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    internal ([] , bool );
    public abstract virtual int Compare(object , object );
    internal abstract virtual void (object , int );
    internal bool ();
    internal bool (object , int , int , int );
    internal bool ( );
    internal bool ( );
}
internal class  : object {
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    internal IList ;
    internal IList ;
    internal IList ;
    internal IDictionary ;
    internal bool ;
    internal bool ;
    protected  ;
    protected ( );
    private static ();
    protected internal virtual IDictionary ( ,  , Byte[] );
    protected internal virtual  ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public IDictionary ();
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal virtual void ( );
    internal static  ( );
    internal static  (Byte[] );
}
internal interface  {
    public abstract virtual  (byte , double ,  );
    public abstract virtual  (byte ,  ,  );
    public abstract virtual  (byte , string ,  );
    public abstract virtual  (byte , bool ,  );
    public abstract virtual  (byte ,  ,  );
    public abstract virtual  (byte ,  );
    public abstract virtual  (byte ,  ,  );
}
internal enum  : Enum {
    public int value__;
}
internal abstract class  : object {
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
}
internal class  :  {
    internal UInt32[] ;
    internal ( );
    internal (UInt32[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private static  ( , string );
    private static  ( );
    private static BigInteger (string );
    private static void (string ,  ,  );
    public static  (string );
    public static  ( );
    public static  (string );
    public static string ( );
    public static IEnumerable ();
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual bool ();
    public abstract virtual void (bool );
}
internal class  : object {
    private  ;
    private  ;
    private Palette ;
    private ArrayList ;
    internal ( ,  );
    internal void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private void ( , Comment );
    private  ( );
    private void ( );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    internal [] ;
    internal Int16[] ;
    internal ( , int , int );
    internal  (int );
}
internal class  : ValueType {
    internal static double (double );
    internal static double (double );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public static  ( , bool );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    public ( ,  ,  , int , int );
    protected ( , int ,  , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool (int , int );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    public (int );
}
internal class  : object {
    internal Hashtable ;
    internal Hashtable ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal List`1<> ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal UInt32 ;
    internal List`1<> ;
    internal static  ( );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
}
internal class  : object {
    private static float ;
    private static float ;
    private string ;
    private string ;
    private string ;
    private  ;
    private int ;
    private static ();
    internal  ();
    internal void ( );
    public int ();
    public void (int );
    public static float ();
    public static void (float );
    public static float ();
    public static void (float );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
}
internal class  : object {
    private  ;
    private Byte[] ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private  ;
    private bool ;
    public ( );
    public virtual void ( );
    public virtual Byte[] (int ,  );
    public virtual Byte[][] (int , Byte[] ,  );
    protected virtual  ( );
    protected virtual Byte[] ( , Byte[] , Byte[] , int );
    private BigInteger (BigInteger );
    private Byte[] ( ,  , Byte[] );
    private Byte[] ( ,  , Byte[] , Byte[] ,  ,  );
    private Byte[] ( ,  , Byte[] );
    private Byte[] ( , Byte[] ,  );
    private void ( , Byte[] );
    private void ( ,  );
}
internal class  :  {
    private  ;
    private bool ;
    internal ( ,  );
    protected virtual void ();
    protected virtual Byte[] (bool );
    internal virtual string ();
    internal virtual void (int , int );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal DateTime ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public abstract virtual void Dispose();
    internal abstract virtual PivotTableSourceType ();
    internal abstract virtual bool ();
    internal abstract virtual  ();
    internal abstract virtual int ();
    internal int ();
    internal abstract virtual int ();
    internal abstract virtual String[] ( );
    internal bool (FileFormatType );
    [("False")]
private void ();
    internal  ();
    internal bool ();
    internal Boolean[] ();
    internal  (string );
    internal abstract virtual bool (PivotTable );
    internal abstract virtual bool ();
    internal abstract virtual bool (Worksheet );
    internal abstract virtual void ( , CopyOptions );
    internal abstract virtual int (string );
    internal abstract virtual int ();
    internal abstract virtual void (int );
    internal abstract virtual void (int , int , Worksheet );
    internal abstract virtual void (int , int , Worksheet );
    internal abstract virtual void (int , int , Worksheet );
    internal abstract virtual string (int );
    internal abstract virtual void (StringBuilder , int );
    internal abstract virtual void (ArrayList );
    internal abstract virtual void (string , string );
    internal abstract virtual void ( );
    internal abstract virtual void ( );
    internal abstract virtual void ( );
    internal abstract virtual bool ();
    internal abstract virtual void (bool );
    internal abstract virtual void (bool , int );
    internal abstract virtual bool (int );
    internal abstract virtual void ( );
    internal void (bool , bool , PivotTableRefreshOption );
    internal PivotTable[] ();
    internal  ( , PivotGroupByType , double , double , double , bool , CustomPiovtFieldGroupItem[] );
}
internal class  : object {
    public static X509Certificate ( );
    public static X509Certificate ( );
    public static  (X509Certificate );
    public static  (DSA );
    public static  (DSAParameters );
    public static  (DSA );
    public static  (DSAParameters );
    public static  (RSA );
    public static  (RSAParameters );
    public static  (RSA );
    public static  (RSAParameters );
    public static  (AsymmetricAlgorithm );
    public static RSA ( );
    public static RSA ( , CspParameters );
    public static RSA ( );
    public static RSA ( , CspParameters );
    public static RSA ( );
    public static RSA ( , CspParameters );
    public static RSAParameters ( );
    public static RSAParameters ( );
    public static RSAParameters ( );
    private static Byte[] (BigInteger , int );
    private static RSA (RSAParameters );
    private static RSA (RSAParameters , CspParameters );
}
internal class  :  {
    internal int ;
    internal int ;
    internal  ;
    internal List`1<> ;
    internal ( , int );
    internal virtual  ();
    internal void ( , CopyOptions );
}
internal class  : object {
    private int ;
    private int ;
    private Double[0...,0...] ;
    private Bitmap ;
    []
private  ;
    private  ;
    private  ;
    public (int , int );
    public int ();
    public int ();
    public  ();
    public void ( );
    public  ();
    public  ();
    public void ( );
    public void ( ,  ,  );
    public void (double , double , double );
    public void ( );
    public void ( );
    private void ();
    public Bitmap ();
    private void ();
    public void (Graphics );
}
internal abstract class  : object {
    private  ;
    internal ( );
    public abstract virtual  ();
    public abstract virtual void ();
}
internal interface  {
    public abstract virtual  (int );
    public abstract virtual string (int );
    public abstract virtual void ( );
    public abstract virtual void ( );
    public abstract virtual  (string );
    public abstract virtual  ( );
    public abstract virtual  (string );
    public abstract virtual void ( );
    public abstract virtual void (int );
    public abstract virtual int ();
    public abstract virtual UInt32 ();
    public abstract virtual int ();
    public abstract virtual bool ();
    public abstract virtual  ();
}
internal class  : object {
    internal static Byte[] (string );
    internal static void (Shape ,  );
}
internal class  : object {
    private  ;
    private  ;
    public void ( );
    public BigInteger ();
}
internal class  :  {
    private HyperlinkCollection[] ;
    public (HyperlinkCollection[] ,  );
    public virtual bool (Byte[] , int , int );
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public ( );
    public virtual IEnumerator GetEnumerator();
    public virtual int ();
    public virtual  (int );
    public virtual  (string );
    public virtual  (string , string );
}
internal class  : object {
    private Byte[] ;
    private int ;
    private int ;
    private ActiveXControl ;
    internal static string (Byte[] , Int32& , int , int );
    internal static string (Byte[] , Int32& , int );
    internal static ActiveXControl (UnknownControl , Shape );
    internal static void ( , Shape , Workbook );
    internal void ( , Shape , Workbook );
    private ActiveXControl (UnknownControl , Shape );
    private int ( , bool );
    private int ( , bool , bool );
    private byte ( , bool , int );
    private void ();
    private void ();
    private String[] (int );
    private void ();
    private void ();
    private void ();
    private void ();
    private void (ActiveXControl );
    private void (ActiveXControl );
    private Byte[] ();
    private void (Font );
}
internal class  :  {
}
internal class  : object {
    private Byte[] ;
    private  ;
    public ( , Byte[] );
    public  ();
    public Byte[] ();
}
internal class  :  {
    private  ;
    public ( );
    public (PointF , PointF , PointF , PointF );
    public  ();
    public virtual void ( );
    public virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
[DefaultMemberAttribute("")]
internal abstract class  :  {
    [DebuggerBrowsableAttribute("0")]
internal [] ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    protected internal ( );
    protected internal ([] );
    protected internal ( );
    public static  (object );
    public static  ( , bool );
    public virtual IEnumerator GetEnumerator();
    public virtual  (int );
    public virtual int ();
    public virtual [] ();
    public  ();
    protected virtual int ();
    protected virtual bool ( );
    protected internal void ();
    public virtual string ToString();
}
internal abstract class  :  {
    public (int );
    public virtual object ();
    public virtual void (object );
}
internal class  : object {
    internal  ;
    internal  ;
    internal void ( , CopyOptions );
}
internal class  :  {
    internal ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( ,  ,  , bool );
    public virtual void (Byte[] );
    public virtual void (long );
    public virtual void NextBytes(Byte[] );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] (int );
    public virtual void (Byte[] );
}
internal class  :  {
    private  ;
    private Brush ;
    private Matrix ;
    private  ;
    private FillMode ;
    private RectangleF ;
    public ( );
    public (RectangleF );
    public  ();
    public void ( );
    public Brush ();
    public void (Brush );
    public sealed virtual Matrix ();
    public sealed virtual void (Matrix );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual bool ();
    public FillMode ();
    public void (FillMode );
    public virtual void ( );
    protected virtual bool ( );
    public static  (PointF , PointF , PointF );
    public static  (RectangleF );
    public static  (RectangleF );
    public static  (PointF , PointF );
    public static  (PointF[] , bool );
    public bool ();
    public RectangleF ();
    public void (RectangleF );
    public virtual void (TextWriter );
    private bool ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    public (Stream );
    public (Stream , int , bool );
    public Stream ();
    public Stream (int );
    public Stream (Byte[] );
}
internal class  :  {
    private  ;
    []
private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Byte[] ;
    private  ;
    private Byte[] ;
    private byte ;
    private byte ;
    public ( , int ,  ,  );
    public ( ,  ,  , object );
    private void ();
    public virtual void ( );
    internal  ();
    internal Byte[] ();
    internal int ();
    internal int ();
    internal int ();
    internal int ();
    private int ();
    private static int (Byte[] , int );
    private void ();
    private int (int );
    private static int (Byte[] , int );
    private static int (Byte[] , int );
    private int (int );
    private static int (int );
    private static int (int );
    private int ( , int , int , Byte[] , int );
    private int ( , int , int );
    private int ( , int , int , Byte[] , int );
    private static int ( , Byte[] , int , int );
    private int (int , int );
    private void (int , int , int );
    private int (int );
    private void (int , int );
    private int (int );
    private void (int , int );
    private int (int );
    private void (int , int );
    private void (int , int );
    private void (int , int );
    private void (int , int );
    private void ();
    private void ();
    private int (int );
    private int ();
    private int (int , int , int );
    public virtual int ();
    public virtual int ();
    public virtual void ();
    public virtual void (int );
    public virtual int (int );
    public virtual int (int , int );
    public virtual int (int , int , int );
    public virtual bool (int );
    public virtual int (int , int );
    public virtual int (int , bool );
    public virtual  ();
    public virtual  (int , int , bool );
    public virtual  (int , int , int , int , bool );
    public virtual int (int );
    public virtual int (int );
    public virtual int ();
    public virtual void (int );
    public virtual void (int , int );
    public virtual int (int , int );
    public virtual int (int , int );
    public virtual void (int );
    public virtual bool (int , int );
    public virtual bool (int , int );
    private bool (int , int , bool );
    public virtual object ();
    public virtual void (int , int );
    public int ( );
    private void (int );
    private int ([] , int , int );
    public virtual int (int ,  );
    private int (int , int );
    public virtual int (int , [] , int , int );
    public virtual int (int ,  , int , int , int );
    public virtual int (int );
    public virtual int (int );
    public virtual void (int , int );
    public virtual  (int );
    public virtual object (int );
    public virtual void (int ,  );
    public virtual int (int );
    public virtual void (int , int );
    public virtual  (int ,  );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int ,  , int );
    public virtual void (int ,  , int );
    public virtual int ();
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    public virtual byte (int );
    public virtual void (int , byte );
    public virtual  ( , int );
    public virtual void ( , int );
    internal static int ();
    internal static int (int );
    internal static int (int );
    internal static int (int );
    internal static int (int );
    internal static int (int );
    internal static int (Byte[] , int );
    internal static void (Byte[] , int , int );
    internal static void ( , Byte[] , int ,  , int );
    internal static int (Byte[] , int );
    internal static byte (Byte[] , int , int );
    internal static void (Byte[] , int , int , byte );
    internal static int (Byte[] , int );
    internal static int (Byte[] , int , int ,  , int );
    internal static void (Byte[] , int , int );
    internal static int (Byte[] , int , int );
    private static void (Byte[] , int , int );
    private static void (Byte[] , int , int );
    private static void (Byte[] , int , int );
    private static int (Byte[] , int , int );
    internal static bool (Byte[] , int , int );
    internal bool ();
    internal void ();
    internal static void (Byte[] , int , int );
}
internal class  : object {
    []
private Workbook ;
    []
private  ;
    private  ;
    internal bool ;
    internal (Workbook , LoadOptions );
    internal void ( );
    private void ();
    private void ();
    private void ();
    private void (bool );
    private void ();
    private void ();
    private  (Hashtable );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( );
    public virtual  ();
    public virtual void WriteByte(byte );
    public virtual void Write(Byte[] , int , int );
}
internal class  : ValueType {
    internal static ArrayList ( ,  ,  , Rectangle , float , double , int );
    private static void ( ,  , RectangleF , float ,  , Rectangle );
    internal static void ( ,  , Rectangle , ArrayList );
    private static void ( ,  ,  , int , int , RectangleF , bool , int );
    private static ArrayList ( ,  ,  , Rectangle , float , double );
    internal static ArrayList ( ,  ,  , Rectangle , int );
    private static bool (RectangleF , Rectangle ,  , bool );
    private static void ( ,  , ArrayList& , ArrayList );
    private static ArrayList ( ,  ,  , Rectangle , float );
    internal static ArrayList ( ,  ,  , Rectangle , int );
    private static ArrayList ( ,  ,  , Rectangle , float );
    internal static ArrayList ( ,  , float , double , int );
    private static ArrayList ( ,  , float , double );
    internal static ArrayList ( ,  , double , int );
    private static ArrayList ( ,  , float , double , int , double );
    internal static ArrayList ( ,  , double , int );
    private static ArrayList ( ,  , float , double );
    private static void (double , Object[] , ArrayList ,  );
    private static PointF ( , float , float , float , float , float );
    private static PointF ( , float , float , float );
    private static PointF ( , float , float , float , float , float );
    internal static void ( ,  , ArrayList );
    internal static void ( ,  , ArrayList );
    private static void ( ,  ,  , float , float , float , float , float , double );
    private static void ( ,  ,  , float , float , float , float , float , float , float );
    private static void ( ,  ,  , float , float , float , float , float , float , float );
    private static void (Hashtable , PointF& , PointF& , Int32& , Int32& );
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
[]
internal WebQueryConnection ;
    [DebuggerBrowsableAttribute("0")]
public   { get; public set; }
    internal (WebQueryConnection );
    public  (int );
    public void (int ,  );
    internal int ( );
    internal void ( );
}
internal class  : object {
    private bool ;
    internal Color ;
    internal string ;
    internal string ;
    internal  ;
    internal Color ();
    internal void (Color );
    internal bool ();
    internal void (bool );
    internal void ( );
}
internal class  :  {
    protected  ;
    public (int , IList , Int32[] , Byte[] , Byte[] );
    public virtual void ( );
    public virtual Byte[] ();
    public virtual void (Stream );
    public virtual void ( );
    public virtual void ( );
    protected virtual  ( ,  ,  );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    internal ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    internal ( ,  ,  );
    private void ();
    internal  ();
    internal  ();
    internal void ( );
    internal  ();
    public virtual  ();
    internal  ();
    public virtual  ();
    internal  ();
    internal void ( );
    internal  ();
    internal virtual string ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    public virtual int ();
    public virtual void (int );
    internal  ();
    internal void ( );
    internal bool ();
    internal virtual int ();
    internal bool ();
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private EbookSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal static string ;
    public (Workbook , SaveOptions );
    private static ();
    public sealed virtual void (Stream );
    internal void (Stream );
    public sealed virtual void ();
    public sealed virtual void Dispose();
}
internal class  :  {
    internal ( );
}
internal abstract class  : object {
}
internal class  : object {
    private static Hashtable ;
    private static ();
    public static void (Image , Stream , int );
    public static  (Image , Stream ,  , bool );
    public static void (Image ,  );
    public static void ( );
    private static Bitmap (Bitmap );
    private static Bitmap (Bitmap );
    private static EncoderParameters ( , bool );
    private static EncoderValue ( );
    private static ImageCodecInfo (ImageFormat );
    private static bool ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    public ( );
    [ObsoleteAttribute("Use version taking a 'SubjectKeyIdentifier'")]
public ( );
    public ( );
    public ( );
    [ObsoleteAttribute("Use more specific version")]
public ( );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    internal static  ( , object , WorksheetCollection , int , int , int );
    internal static [] ( , object , bool , Byte[] , int , int , int , int , WorksheetCollection , int );
    internal static Range ( , object , bool , Byte[] , int , int , int , int , WorksheetCollection , int );
    internal static Range[] ( , object , bool , Byte[] , int , int , int , int , WorksheetCollection , int );
    internal static Range (WorksheetCollection ,  , int );
    internal static object (Worksheet ,  , object , Byte[] , int , int , int , int , bool );
    internal static Byte[] (WorksheetCollection , int , CellArea );
}
internal class  : object {
    private List`1<> ;
    private bool ;
    internal int ;
    internal (List`1<> , bool , int );
    internal object ();
    internal bool ();
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private  ;
    private IList ;
    private IList ;
    private IList ;
    public ( , IList );
    public ( , IList , IList );
    public ( , IList , IList , IList );
    private void (string );
    private void (int );
    private  ();
    public  ( , BigInteger , DateTime );
    public  ( , BigInteger ,  );
    public  ( , int , string );
}
internal class  : object {
    private sealed virtual override int (object , object );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , bool , string , string );
    private static Byte[] (bool , string , string );
    public bool ();
    public string ();
    public string ();
    public Byte[] ();
}
internal class  : object {
    private [] ;
    private [] ;
    private int ;
    private int ;
    private int ;
    internal (int );
    internal (int , int , int );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public bool ();
    public sealed virtual void ( );
    internal  ( ,  ,  );
    internal  ( );
}
internal class  : object {
    []
private  ;
    []
private Worksheet ;
    []
private object ;
    private string ;
    []
private  ;
    private QueryTable ;
    internal ( , object , string );
    internal void ( );
    private void ( );
    private void ( );
    private void ( ,  );
    private  ( ,  );
}
internal interface  {
    public abstract virtual BigInteger[] (BigInteger );
}
internal class  : object {
    private  ;
    internal ( );
    internal void ( ,  , Brush );
    internal void ( ,  , Byte[] , RectangleF , WrapMode , Matrix );
    private void ( , SolidBrush );
    private void ( , LinearGradientBrush );
    private void ( , Color , float );
    private void ( ,  , Brush );
    private void ( ,  , TextureBrush );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    internal  ;
    internal int ;
    public ( );
    public ( , int );
    public (int ,  );
    public (int , string );
    public static  (object );
    public static  ( , bool );
    public int ();
    public  ();
    public virtual string ToString();
    private Byte[] (string );
    private void (string , Byte[] , int );
    private void (string , Byte[] , int );
    private Int32[] (string );
    private void (Int32[] , Byte[] , int );
    private Int32[] (string );
    public virtual  ();
}
internal static class  : object {
    internal static StringBuilder (StringBuilder , string , int );
}
internal class  : object {
    internal UInt32 ;
    internal  ;
    internal static List`1<> ( );
    internal static  ( );
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal abstract class  : object {
    protected bool ;
    protected bool ;
    protected abstract virtual void (bool );
    public abstract virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  :  {
}
internal class  :  {
    private CellValueType ;
    internal virtual  ();
    internal virtual void ( );
    public virtual CellValueType ();
    public virtual int ();
    internal virtual void ();
    internal void (CellValueType );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    internal ( );
    internal virtual void ( );
    [("True")]
private void ( , Comment );
    [("True")]
private void ( , Font , string );
}
internal class  :  {
    public static BigInteger ;
    private static UInt32[] ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private ArrayList ;
    private ArrayList ;
    public ( );
    public ArrayList ();
    public int ();
    public virtual void ( );
    private void ( );
    private static void ( );
    public int ( );
    public ArrayList ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    public ( ,  );
    public ( ,  ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public Byte[] ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private double ;
    private int ;
    internal (int );
    public virtual void ();
    public virtual bool (double , double );
    public virtual bool (double , double );
    public virtual  (double , double );
    public virtual  (double , double , int );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal  ;
    internal int ;
    internal static  ;
    internal (int ,  );
    private static ();
}
internal class  : object {
    private ICollection ;
    internal (ICollection );
    public sealed virtual ICollection ( );
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal bool ;
    internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal  ;
    internal static  ( );
}
internal class  : object {
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color );
    internal static Color (Color );
    internal static double (int );
    internal static int (double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color , double );
    internal static Color (Color );
    internal static Color (Color );
    internal static Color (Color );
    internal static  (Color );
    internal static  (Color );
    internal static Color ( );
    private static int (int );
}
internal class  : object {
    private static  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    protected ( );
    protected (Byte[] );
    private static ();
    internal void ( );
    internal void ( );
    internal void ( );
    public sealed virtual  ( ,  );
    protected virtual  ();
    protected virtual Byte[] ( );
}
internal class  : object {
    internal int ;
    private Hashtable ;
    private StringBuilder ;
    []
internal WorksheetCollection ;
    []
private Cell ;
    private int ;
    protected int ;
    protected Byte[] ;
    internal (WorksheetCollection );
    internal void ();
    internal static bool (byte );
    internal static bool (byte );
    internal void ();
    internal void ();
    private bool ();
    internal virtual void (StringBuilder , Byte[] , int );
    internal virtual void (StringBuilder , Byte[] , int );
    internal string (Cell );
    internal void (StringBuilder ,  , int , int , bool );
    internal string (int , int , Byte[] , int , int , bool , bool , int );
    internal virtual string (int );
    private string (Byte[] , Int32& , int , int , bool );
    private void (Byte[] , ArrayList );
    private int (Byte[] , int , ArrayList );
    private void (StringBuilder , Byte[] , int );
    private void (StringBuilder , Byte[] , int , int , int );
    private void (StringBuilder , Byte[] , int , int , int );
    private void (StringBuilder , Byte[] , int );
    private void (Byte[] , int , ArrayList );
    private void (string , int , ArrayList );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal  ;
    public ( );
    public (DateTime , int );
    public DateTime ();
    public bool ();
    public int ();
}
internal class  :  {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt16[] ;
    internal (Byte[] , string );
    internal bool ();
    internal UInt32 ();
    internal byte (int );
    internal byte (int );
    internal byte (int );
    internal byte (int );
    internal void ();
}
internal class  : object {
    []
internal static RectangleF (Shape );
    internal static PointF (Stream , ImageOrPrintOptions , Shape );
    internal static void (Stream , ImageType , Shape );
    internal static void (string , ImageOrPrintOptions , Shape );
    internal static void (Stream , ImageOrPrintOptions , Shape );
    internal static Bitmap (ImageOrPrintOptions , Shape );
    internal static  (Shape , bool , IWarningCallback );
    private static  (Shape ,  , Stream , ImageType , ImageOrPrintOptions );
    private static Single[] (Shape );
    private static void (Shape ,  );
    internal static void (Shape ,  );
    private static void (Shape ,  );
    private static bool (Shape );
    private static Color (double , Color );
    private static void (Shape ,  );
    private static void (TextureFill ,  );
    private static  (FillPictureType );
    private static  (MirrorType );
    private static  (RectangleAlignmentType );
    private static void (Shape ,  );
    internal static  (GradientFillType );
    internal static  (GradientDirectionType );
    private static void (LineFormat ,  );
    private static void (LineFormat ,  );
    private static void (FontSettingCollection ,  );
    private static bool (Font , Font );
    private static bool (Font );
    private static void (CommentShape ,  );
    private static void (Shape ,  );
    private static Color (Color );
    private static Color (Color , double );
    private static ColorBlend (ColorBlend , int );
    internal static  (MsoDrawingType );
    private static  (MsoLineDashStyle );
    private static  (MsoLineStyle );
    private static  (MsoArrowheadStyle );
    private static  (MsoArrowheadLength );
    private static  (MsoArrowheadWidth );
    private static  (CheckValueType );
    private static HatchStyle (FillPattern );
    private static void (Shape ,  );
    private static void (Shape ,  );
    private static void (Shape ,  );
    private static  (MsoPresetTextEffectShape );
    private static ArrayList (Shape , ShapePathPointCollection );
    private static void (Shape ,  );
    private static void (Shape ,  );
    private static  (ShapePathType );
    private static  ( );
}
internal class  : object {
    private int ;
    public void (int );
    public int ();
    public int ();
    public void ();
}
internal abstract class  :  {
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual int ();
    public abstract virtual void ();
    public abstract virtual void (int );
    public abstract virtual int (int ,  );
    public abstract virtual int (int , [] , int , int );
    public abstract virtual  ( , int );
    public abstract virtual void ( , int );
    public abstract virtual int (int );
    public abstract virtual void (int , int );
    public abstract virtual  (int );
    public abstract virtual object (int );
    public abstract virtual void (int ,  );
    public abstract virtual int (int );
    public abstract virtual void (int , int );
    public abstract virtual  (int ,  );
    public abstract virtual  (int ,  , int );
    public abstract virtual void (int ,  , int );
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual byte (int );
    public abstract virtual void (int , byte );
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual bool (int , int );
    public abstract virtual object ();
    public virtual bool ();
    public virtual void (bool );
    public virtual int (int ,  , int , int , int );
    public int (int ,  , int , int , int );
    public virtual int ( , int );
    public bool ();
    public void (bool );
    public int ( , int );
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal (CellArea );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private Byte[] ;
    private bool ;
    private  ;
    private static Byte[] ;
    private  ;
    private Byte[] ;
    private static ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual Byte[] (Byte[] , int , int );
    private Byte[] (Byte[] );
    private bool (Byte[] , Byte[] );
}
internal class  : object {
    private Style ;
    private Style ;
    private Style ;
    internal bool ;
    internal (Style , Style , Style );
    internal bool ();
    internal bool ();
    internal bool (Style , Style , BorderType );
    internal bool (BorderCollection , BorderCollection , BorderType );
    internal Border (BorderCollection , BorderType );
    internal bool ();
    private bool (Style );
    private bool (Style );
    private bool (Style );
    private bool (Style );
    private bool (Style );
    private bool (Style );
    internal Border ();
}
internal class  :  {
    internal long ;
    internal (Chart );
    internal void (Chart );
}
internal class  : object {
    []
private  ;
    []
private WorksheetCollection ;
    []
private Chart ;
    []
private  ;
    internal bool ;
    private bool ;
    internal (WorksheetCollection , int , Chart ,  ,  );
    internal void ();
    private void (Area );
    private void (Area , bool );
    private void ();
    private void ();
    internal void (Axis , ChartType , bool );
    private void (Axis , byte , ChartType , bool );
    private void (Axis , bool );
    private void (Axis , ChartType );
    private void (ChartType );
    internal void (ChartType );
    internal void ();
    internal void (Axis );
    private void (Font , int , int , ArrayList );
    internal void (Axis );
    private void (int , Axis , ChartType );
    internal bool ();
    private void ();
    private void (int );
    internal void (Axis );
    internal void (Axis );
    internal void (Axis );
    internal void (Axis , ChartType );
    internal void (Axis , ChartType );
    internal void (Axis );
    internal void (Axis );
    internal void (Axis , Axis );
    internal void (Axis );
    private bool ();
    private void ( , bool );
    private void (byte , Line );
    private void ();
    private void ( );
    private void (ChartType );
    private void ( );
    private bool ();
    private int (Legend , Int32[] );
    internal bool (ChartFrame , bool );
}
internal class  : object {
    private  ;
    private [] ;
    private int ;
    private int ;
    private int ;
    internal (int );
    internal void (Worksheet );
    private  ( );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual bool ();
    public bool (int );
    public  (int );
    private void (bool );
    private static Object[] ( );
}
internal class  :  {
    internal (FilterColumn );
}
internal class  :  {
    private static Byte[] ;
    public (Byte[] );
    public (Byte[] , int , int );
    private static ();
    public static bool (Byte[] , int );
    public static bool (Byte[] );
    public static byte (byte );
    public static void (Byte[] );
    public static void (Byte[] , int , int );
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal (bool );
    internal ( );
    internal virtual void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal virtual void ( );
}
internal class  :  {
    internal ( , object ,  );
    internal  ();
    internal void ();
    internal Size (SizeF );
}
internal interface  {
    public abstract virtual Int64[] ();
    public abstract virtual Int64[] ();
    public abstract virtual Int32[] ();
    public abstract virtual object ();
    public abstract virtual object ();
    public abstract virtual void (decimal );
    public abstract virtual void (long );
    public abstract virtual void (long , bool );
    public abstract virtual void (decimal , bool );
    public abstract virtual decimal ();
    public abstract virtual long ();
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int (Byte[] , int , int , Byte[] , int , RandomNumberGenerator );
}
internal class  : object {
    internal ArrayList ;
    internal  ;
    internal  ;
    internal  ;
    internal void ( );
    internal bool ( );
}
internal class  :  {
}
internal class  : object {
    private static IDictionary ;
    private static ();
    internal static int ( );
    internal static int ( );
    internal static Byte[] ( , Byte[] , int );
    internal static bool (Byte[] , int );
}
internal class  : object {
    internal static ArrayList (Color , Color , RectangleF , GradientStyleType , int );
    internal static  (LinearGradientBrush , RectangleF );
    private static void (PointF[] );
    internal static  ( );
    internal static  ( , RectangleF );
    private static Stream (Image , RectangleF );
    private static Stream (Image , RectangleF );
    private static  ( );
    private static  ( );
    internal static  (PointF , float , Single[] , Color[] ,  );
    internal static  (PointF , float , Single[] , Color[] );
    private static Color (int , int , int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private static Char[] ;
    protected Byte[] ;
    protected int ;
    public (Byte[] , int );
    public (Byte[] );
    public (int );
    public ( );
    private static ();
    public static  (object );
    public static  ( , bool );
    public virtual Byte[] ();
    public virtual Byte[] ();
    public virtual int ();
    public virtual int ();
    internal virtual void ( );
    protected virtual int ();
    protected virtual bool ( );
    public virtual string ();
    internal static  (Byte[] );
}
internal class  : object {
    private double ;
    public (double );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual int (int );
    public sealed virtual int (int );
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int );
    public sealed virtual int (int );
}
internal class  : object {
    internal static void ( , FontSettingCollection , string );
    [("True")]
private static void ( , string , int , string );
}
internal interface  {
    public abstract virtual object ();
    public abstract virtual  (Byte[] );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected string ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( ,  );
    protected void ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    public  ();
    internal double (double );
    internal  ();
    internal void ();
    internal  ();
    internal void ( );
    internal bool ();
    internal bool ();
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
    public bool ();
    public void (bool );
    internal  ();
    public  ();
    public void ( );
    public  ();
    public void ( );
    public double ();
    public void (double );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public virtual double ();
    public virtual void (double );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public double ();
    public void (double );
    public  ();
    public void ( );
    public double ();
    public void (double );
    public  ();
    public void ( );
    public double ();
    public void (double );
    public  ();
    public void ( );
    public double ();
    public void (double );
    internal void (double );
    internal void (double );
    public  ();
    public void ( );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal virtual double ();
    internal virtual double ();
    internal virtual double ();
    internal virtual double ();
    internal virtual double ();
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal float ();
    internal PointF ();
    internal void (PointF );
    internal PointF ();
    internal void (PointF );
    internal double (double );
    internal double (double );
    internal void (int );
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    [("True")]
protected virtual void (bool );
}
internal class  : object {
    []
private Worksheet ;
    private CellArea ;
    internal (Worksheet , int , int , int , int );
    internal Worksheet ();
    internal CellArea ();
    internal int ();
    internal string (int );
    internal bool ();
    private bool ();
    private static bool (Cell );
}
internal class  : object {
    internal static CredentialsMethodType (string );
    internal static string (CredentialsMethodType );
    internal static ReConnectionMethodType (int );
    internal static int (ReConnectionMethodType );
    internal static ExternalConnection (int , ExternalConnectionCollection );
    internal static ConnectionDataSourceType (int );
    internal static int (ConnectionDataSourceType );
    internal static SqlDataType (int );
    internal static int (SqlDataType );
    internal static OLEDBCommandType (int );
    internal static int (OLEDBCommandType );
    internal static ConnectionParameterType (string );
    internal static string (ConnectionParameterType );
    internal static HtmlFormatHandlingType (string );
    internal static string (HtmlFormatHandlingType );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( ,  );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( , int , int , int , int , int , int , bool , bool );
    private void ( );
}
internal class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    [ObsoleteAttribute("Use constructor that takes a TlsDHVerifier")]
public (int , IList ,  );
    public (int , IList ,  ,  );
    public virtual void ( );
    public virtual void ();
    public virtual void ( );
    public virtual bool ();
    public virtual Byte[] ();
    public virtual void (Stream );
    public virtual void ( );
    public virtual void ( );
    public virtual void (Stream );
    public virtual void ( );
    public virtual void (Stream );
    public virtual Byte[] ();
}
internal enum  : Enum {
    public int value__;
    public static  Inch;
    public static  Millimeter;
    public static  TenthsOfAMillimeter;
}
internal class  :  {
    public (float , RectangleF , RectangleF , Bitmap , ThreeDFormat );
    private void (double , double , double , double , double , double , double , double , double );
    private void (double , double , double , double , double , double , double , double , double );
}
internal class  :  {
    private string ;
    public (Byte[] );
    public (string );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    protected virtual bool ( );
    internal virtual void ( );
}
internal class  : object {
    public  ;
    public List`1<> ;
}
internal class  :  {
    internal ( );
}
internal abstract class  : object {
}
internal class  : object {
    internal static bool ( );
    internal static bool ( );
    internal static bool ( );
    internal static bool ( );
    internal static bool ( );
    internal static bool ( );
    internal static bool ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , object ,  );
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal bool ();
    internal void (bool );
    internal int ();
    internal int ();
    internal int ();
    internal virtual int ();
    internal virtual int ();
    internal SizeF ();
    internal float ();
    internal float ();
    internal int ( );
    internal bool (int );
}
internal class  :  {
    private  ;
    private  ;
    [ObsoleteAttribute("Use GetInstance() instead")]
public ( );
    public ( , BigInteger );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal abstract class  : object {
    public static  (byte );
    public static  (string ,  );
    public static  (Cells , int , int , bool ,  );
    public static  (Worksheet ,  , bool ,  );
    public static  ( ,  );
    public static  ( , object );
    public static  ( , object );
    public static  ( , object );
    public static  (int );
    public static  (long );
    public static  (double );
    public static  (object ,  );
    private static  (object ,  );
    public static  (string ,  );
    public static bool ( );
    public static bool ( );
    public static bool ( );
    public static  ([] ,  , int , Double[] ,  );
    public static  ([] ,  , int , Double[] , int , int ,  );
    public static  ([] ,  , int , Boolean[] );
    public static  ([] ,  , int , String[] );
    public static  ([] ,  , int , DateTime[] ,  );
    public static  ([] ,  , int , [] );
    public static  ([] ,  , int , [] ,  , int );
    public static  ([] ,  , int , Double[][] ,  , double );
    public static  ([] ,  , int , Byte[] , [] );
    public static bool (double );
    public static  ( ,  );
    public static  ( ,  );
    public static  ( ,  );
    public static  ( ,  );
    public static  ( ,  );
    public static  ( );
    public static  ( ,  );
    public static  ( ,  );
    public static [][] (Double[][] );
    public static bool ([] , [] );
    public static  (double );
    public static [] ( );
    public static void (ArrayList ,  );
    public static bool ( );
    public static void ( ,  );
    public static  ( , int , int , int , int , bool );
    public static  ([] , int , int ,  );
    public static  ([] , int , int ,  ,  , bool );
    public static  ([] , int , int ,  );
    public static  ([][] ,  );
    public static  ( );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    internal  ();
    internal  ();
    internal  ();
    internal  ();
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal abstract class  : object {
    internal int ;
    internal int ;
    internal int ;
    [("True")]
internal ImageType  { get; }
    [("True")]
internal Byte[]  { get; }
    internal abstract virtual Byte[] ();
    internal abstract virtual Byte[] ();
    [("True")]
internal abstract virtual void (Byte[] );
    internal abstract virtual int ();
    internal abstract virtual void (int );
    internal abstract virtual int (int );
    internal abstract virtual ImageType ();
    internal abstract virtual bool ();
    internal abstract virtual byte ();
    internal abstract virtual Byte[] ();
    [("True")]
internal abstract virtual void (Byte[] , int , int , string );
}
internal class  : object {
    internal DateTime ;
    internal Byte[] ;
    internal int ;
    internal string ;
}
internal class  :  {
    internal ( );
    public ( ,  ,  , Byte[] , Byte[] );
    public ( ,  , int ,  , Byte[] , Byte[] );
    public virtual void ( );
}
internal class  :  {
    protected Double[] ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    public ([] ,  , int , int , int );
    protected virtual void ();
    protected bool ();
    protected void ();
    protected void ();
    protected bool ();
    protected bool ();
    public virtual  ();
}
internal class  : object {
    private  ;
    private  ;
    internal ( , Hashtable );
    internal void ( );
    internal void ( );
    internal void ( , List`1<> );
}
internal class  : object {
    public static bool ( );
    public static bool ( );
    public static bool ( );
    public static bool ( );
    public static  ([] , BigInteger[] );
    public static  ( , BigInteger ,  , BigInteger );
    public static  ( , BigInteger ,  , BigInteger );
    public static  ( ,  );
    public static void ([] , int , int );
    public static void ([] , int , int ,  );
    public static  ( , BigInteger );
    public static  ( );
    public static  ( ,  );
    internal static  ( );
    internal static  ( , BigInteger ,  , BigInteger );
    internal static  ( , BigInteger ,  , BigInteger );
    internal static  ( ,  , BigInteger , BigInteger );
    private static  ([] , [] , Byte[] , [] , [] , Byte[] );
    internal static  ([] , BigInteger[] );
    internal static  ([] , BigInteger[] ,  );
    internal static  ( , [] , BigInteger[] );
    private static  (Boolean[] , [] , Byte[][] );
    private static  ( , BigInteger ,  , BigInteger );
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private int ;
    public (int , int , int , int );
    public int ();
    public int ();
    public int ();
    public int ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF );
    private PointF[] (RectangleF , PointF , PointF , bool );
}
internal class  :  {
    private static String[] ;
    public (int );
    public ( );
    private static ();
    public virtual string ToString();
}
internal class  : SymmetricAlgorithm {
    [DebuggerBrowsableAttribute("0")]
private static Byte[] ;
    public (Byte[] );
    private static ();
    public virtual ICryptoTransform CreateDecryptor(Byte[] , Byte[] );
    public virtual ICryptoTransform CreateEncryptor(Byte[] , Byte[] );
    public virtual void GenerateIV();
    public virtual void GenerateKey();
    private static ushort (Byte[] , int , ushort );
    private static void (Byte[] , Byte[] , int , Byte[] , int , bool );
}
internal class  : object {
    []
private  ;
    []
private Worksheet ;
    []
private Cells ;
    private  ;
    private int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal (Worksheet ,  , int );
    internal void ( ,  , bool );
    private void ( );
    internal  (int , Byte[] , bool );
}
internal class  :  {
    private  ;
    public ( );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int (int );
    public virtual int (int );
    public virtual int (byte , Byte[] , int );
    public virtual Byte[] (byte );
    public virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual Byte[] ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (int );
}
internal class  :  {
}
internal class  : object {
    private Palette ;
    internal (Palette );
    public sealed virtual Color (int );
}
internal class  :  {
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private PdfSecurityOptions ;
    private  ;
    private static Byte[] ;
    private Byte[] ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private int ;
    internal ( , PdfSecurityOptions );
    private static ();
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    private  ();
    public virtual void ( );
    internal Byte[] (Byte[] );
    internal Byte[] (Byte[] , int , int );
    internal void (MemoryStream );
    private Byte[] (Byte[] );
    [("True")]
internal Byte[] (string );
    [("True")]
internal Byte[] (string );
    [("True")]
internal Byte[] (string );
    public void ();
    [("True")]
public int (string , Byte[] );
    private void (Byte[] , string , Byte[] , int , bool );
    private Byte[] (Byte[] , Byte[] , bool );
    internal void ( );
    private void (Byte[] , string , Byte[] , int , bool );
    private void (Byte[] , Byte[] , Byte[] , int , bool );
    private void (Byte[] );
    [("True")]
private Byte[] (string );
    private void ();
    private void (Byte[] );
    private void (Byte[] , int , int );
    private void (Byte[] );
    private void (Byte[] , int , int );
    private void (Byte[] , Byte[] );
    private void (Byte[] , int , int , Byte[] );
    private bool (Byte[] , int );
}
internal class  : object {
    internal static  (Shape , float , ImageOrPrintOptions );
    private static  (Shape , ImageOrPrintOptions );
    private static  ( , float );
    internal static  ( , string , Font , RectangleF , StringFormat );
}
internal class  :  {
    public (int );
    public ( );
}
internal class  :  {
    private Double[] ;
    private int ;
    private int ;
    public (Double[] , int , int );
    protected virtual bool (double , double );
    protected virtual bool (double , double );
    protected virtual bool (double );
    public virtual double (double );
    public virtual double (double );
    public virtual bool (double , double , int );
    internal static  (Double[] , int , int , double );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public static  ( );
    public static  ( );
    public static  ( );
}
internal class  : object {
    private  ;
    internal  ;
    internal  ;
    internal int ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal string ;
    internal int ;
    internal ( ,  , Worksheet );
    internal void ( );
    private void ( );
    private void ( );
}
internal class  : object {
    private  ;
    private int ;
    private  ;
    internal ( );
    public sealed virtual  ();
    public sealed virtual  (int );
    public sealed virtual string (int );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual void ( );
    public sealed virtual void ( );
    public sealed virtual  (string );
    public sealed virtual int ();
    public sealed virtual UInt32 ();
    public sealed virtual int ();
    public sealed virtual bool ();
    public sealed virtual void ( );
    public sealed virtual void (int );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    public static object (bool ,  ,  );
    public  ( ,  ,  );
    public  ( ,  );
}
internal class  : object {
    internal static int (Byte[] , int , int , byte );
    internal static int (Byte[] , int , int , byte );
    internal static void (Byte[] , int , int , int , byte );
}
internal class  :  {
    public ( );
    public virtual  (String& );
}
internal class  :  {
    private  ;
    public ( );
    public (Byte[] );
    public (Stream );
    private ( );
    public Byte[] ();
    public int ();
    public  ();
    public [] ();
    public  ();
    protected virtual  ();
    public string ();
    public Byte[] ();
    private IList ();
    public [] ();
    public  (string );
    public bool ();
    public bool ( );
    public Byte[] ();
}
internal class  :  {
    internal string ;
    internal ( , string );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual void ();
    internal GraphicsPath (float , float , float , float , int );
    internal static PointF[] (RectangleF , Geometry );
    internal virtual void ();
}
internal abstract class  : object {
    public virtual Byte[] ();
    public abstract virtual void ( );
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual int (int , int );
    public abstract virtual int (int , int , int );
    public abstract virtual bool (int );
    public abstract virtual int (int , int );
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual int (int , bool );
    public abstract virtual  ();
    public abstract virtual  (int , int , bool );
    public abstract virtual  (int , int , bool );
    public abstract virtual void (int , int );
    public abstract virtual int (int , int );
    public abstract virtual int (int , int );
    public abstract virtual int (int , int );
    public abstract virtual int (int , int );
    public abstract virtual void (int , int );
    public abstract virtual void (int , int );
    public abstract virtual void (int );
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual bool (int , int );
    public abstract virtual void ( );
}
internal class  : object {
    internal string ;
    internal bool ;
}
internal class  : object {
    private Int32[] ;
    private static int ;
    private static int ;
    private static ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private int (Byte[] , int );
    private void (int , Byte[] , int );
    private int (int , int );
    private void (Int32[] , Byte[] , int , Byte[] , int );
    private Int32[] (Byte[] );
    private int (int );
    private int (int );
    private Int32[] (Int32[] );
    private Int32[] (bool , Byte[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal HyperlinkCollection[] ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Worksheet[] ;
    [DebuggerBrowsableAttribute("0")]
private AccessCacheOptions[] ;
    [DebuggerBrowsableAttribute("0")]
private AccessCacheOptions ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Style ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal HtmlSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
internal IStreamProvider ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    internal (Workbook , string , HtmlSaveOptions );
    internal bool ();
    internal string (string );
    internal string (StreamProviderOptions );
    public sealed virtual void Dispose();
    internal Hashtable ();
    private Hashtable (WorksheetCollection );
    private static void (Worksheet , int , ArrayList );
    private void ();
    internal  ();
    internal  ();
    internal Hashtable ();
    internal void (Hashtable );
    internal Style ();
    private void ();
    internal  (StreamProviderOptions );
    internal  (Stream );
    internal  (StreamProviderOptions );
    internal  (StreamProviderOptions );
    internal  (string , StreamProviderOptions );
    internal string (string );
    internal ArrayList ();
    private void ();
    internal  ();
}
internal class  :  {
    internal void (int );
}
internal class  : object {
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal  ;
    internal  ;
    internal bool ();
    internal  ();
    internal void ( );
    internal ushort ();
    internal ushort ();
    internal void (ushort );
    internal void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (VerticalPageBreakCollection );
}
internal class  :  {
    private  ;
    public ( ,  );
    public  ();
    internal static int ( );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal PointF ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    internal ( , object ,  );
    internal  ();
    protected virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : ArrayList {
    [DebuggerBrowsableAttribute("0")]
public   { get; public set; }
    public  (int );
    public void (int ,  );
}
internal class  :  {
    private IntPtr ;
    public IntPtr ();
    public void (IntPtr );
    public virtual  ();
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void (int , byte );
}
internal abstract class  :  {
    public abstract virtual Byte[] (Byte[] );
}
internal enum  : Enum {
    public int value__;
    public static  Alternate;
    public static  Winding;
}
internal class  : object {
    private Color ;
    private float ;
    public Color ();
    public void (Color );
    public float ();
    public void (float );
    internal bool ( );
}
internal class  :  {
    private  ;
    private ( );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (string );
}
internal class  : object {
    private  ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    public ( );
    public virtual  ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Rectangle ;
    [DebuggerBrowsableAttribute("0")]
internal Rectangle ;
    [DebuggerBrowsableAttribute("0")]
internal Size  { get; }
    public (Font , Color );
    private void (Font , Color );
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal virtual  ();
    internal virtual  ();
    internal virtual int ();
    internal virtual void (int );
    internal  (bool );
    internal virtual void (Color[] ,  , int , IList );
    internal virtual Size ();
    internal  ();
    internal void ( );
    private void ();
    private void ();
    internal Rectangle ();
    internal void (bool , int , int , int , int );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal virtual void (bool );
    internal void (int );
    public virtual void ();
}
internal class  : object {
    internal  ;
    internal  ;
    public (Byte[] , Byte[] );
    public Byte[] (Byte[] );
    public  ();
    public  ();
}
internal abstract class  :  {
    private bool ;
    protected  ;
    protected  ;
    protected double ;
    protected double ;
    internal (bool );
    protected abstract virtual void ();
    protected abstract virtual void ();
    public abstract virtual double ();
    protected abstract virtual bool ();
    protected void ();
    protected void ();
    public double (string );
    public virtual int (string , char );
    public virtual int (string , string );
    public virtual bool (string );
    public virtual int (Char[] );
    protected virtual int (string );
    private  ();
}
internal class  : object {
    internal string ;
    internal string ;
    internal List`1<string> ;
    internal Hashtable ;
    internal Int32[] ;
    internal bool ;
    internal int (int );
}
internal abstract class  :  {
    protected (BigInteger );
    public virtual bool (BigInteger );
    protected virtual  (int , BigInteger );
}
internal class  :  {
    private Color ;
    private Color ;
    public ( , Color , Color );
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    public (int );
    public (bool , string );
    public ( );
    private ( );
    public static  (object );
    public virtual  ();
    public  ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    public static void (UInt32[] , UInt32 , Byte[] , UInt32 , UInt32 );
    public static bool (Byte[] , Byte[] , UInt32 );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private SlicerCache ;
    internal (SlicerCache );
    internal virtual void ( );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
}
internal class  :  {
    protected  ;
    protected  ;
    public ( );
    public ( ,  );
    public ( ,  ,  );
    public virtual Int32[] ();
    public virtual  ();
    public virtual  ();
    protected virtual  (int );
}
internal class  : object {
    private Byte[] ;
    private int ;
    public (int );
    public Byte[] ();
    public bool ();
    public bool (int , BinaryReader );
    public bool (Byte[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
protected RectangleF ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public (float , float , float , float , float , float , Color );
    public (float , float , float , float , float , float , float , Color ,  ,  );
    public (float , float , float , float , float , float , float , Color ,  ,  , float ,  );
    public (RectangleF , float , float , float , Color ,  ,  );
    public (float , float , float , float , float , float , float , Color ,  ,  , float );
    public (Rectangle , float , float , float , Color ,  ,  , float );
    private static ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
    public sealed virtual object Clone();
    public float ();
    public float ();
    public float ();
    public string ();
    public void (string );
    public void ( );
    public bool (PointF );
    public virtual PointF (float , Single& );
    public virtual PointF (float , int , Single& );
    public float ();
    internal RectangleF ();
    internal void (RectangleF );
    internal float ();
    internal void (float );
    internal void ( );
    internal [] (float );
    internal void (float , float , float , float , float );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal RectangleF ();
    internal bool (PointF );
    internal bool (PointF );
    internal bool (PointF );
    internal bool (PointF );
    internal bool (PointF );
    internal  ();
    internal void ( );
    protected virtual void (Color ,  );
    protected void ();
    protected virtual Brush (Color , double );
    protected virtual Brush (Color );
    protected void ( ,  , Brush , float , float , PointF , PointF );
    protected float (float );
    protected float (float );
    protected PointF (float , float , float , float , float );
    private void (float , float , float , float , float );
    private void ();
    private void (bool , bool );
    private [] ();
    private [] ();
    private GraphicsPath (float , float , PointF , PointF );
    private bool (PointF , float , float , PointF , PointF );
    private bool (PointF , float , float , float , float , float , float );
    private double (double );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    public (BigInteger , BigInteger , BigInteger , BigInteger , int , BigInteger );
    public ( );
    public static  ( , bool );
    public static  (object );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public virtual  ();
}
internal class  :  {
    private byte ;
    private byte ;
    public ( , byte , byte );
    public ( ,  ,  , byte , byte );
    public ( , [] , [] , byte , byte );
    public virtual int ();
    public virtual int ();
    public virtual bool ();
}
internal class  : object {
    internal  ;
    internal string ;
    internal string ;
    internal int ;
    internal int ;
    internal string ;
    internal string ;
    internal string ;
    internal  ;
    internal  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    public (Stream , Stream );
    public virtual void Close();
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
}
internal enum  : Enum {
    public int value__;
    public static  Double;
    public static  Float;
    public static  Int64;
    public static  UInt64;
    public static  Int32;
    public static  Fixed64;
    public static  Fixed32;
    public static  Bool;
    public static  String;
    public static  Group;
    public static  Message;
    public static  Bytes;
    public static  UInt32;
    public static  SFixed32;
    public static  SFixed64;
    public static  SInt32;
    public static  SInt64;
    public static  Enum;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal PptxSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
private List`1<> ;
    public (Workbook , SaveOptions );
    internal virtual void ();
    internal virtual void ();
    internal void ();
    private void ( , int );
    internal virtual void ();
    internal virtual void ();
    private void ( );
    private void ( );
    private void ( , string , string );
    private void ( ,  );
    private void ( ,  , int ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private bool ( ,  ,  );
    private bool ( ,  ,  , int );
    private void ( ,  ,  , int );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( , Font );
    private void ( , Font );
    private void ( , Font );
    private void ( ,  );
    private void ( ,  );
    private static void ( ,  , BorderType );
    private static void ( , BorderType );
    private static void ( , int );
    private static void ( , int );
    private void ( ,  );
    private void ( , string );
    private static void ( );
    private static void ( );
    private static void ( );
    private static void ( );
    internal virtual void (MemoryStream , int , int );
    private void ();
}
internal class  : object {
    private int ;
    public void (int );
    public Stream (Stream , string );
    public Stream (Stream , string , string );
}
internal class  :  {
    private  ;
    public ( ,  , int , int );
    public virtual  ( );
    public sealed virtual bool ( );
    public sealed virtual bool ( );
    public sealed virtual  ();
    public sealed virtual  (bool );
    public sealed virtual  ();
    public sealed virtual bool ();
}
internal class  : object {
    internal static int ;
    private static ();
    internal static PaperSizeType (double , double );
    internal static float (Worksheet , bool );
    internal static Double[] (Worksheet );
    internal static int (Worksheet , double , double , int , int , int , int , int , int , int , int );
    private static double (double , int , int , Double[] );
    internal static double (Worksheet , double , int , int , double );
    internal static double (Worksheet , double , int , int , double );
    internal static void (PageSetup , Double& , Double& );
    internal static void (Worksheet , Double& , Double& , double , double );
    internal static float (double , float );
    internal static float (double , float );
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual int ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    public UInt32 ();
    public void (UInt32 );
    public void (ushort );
    public void (UInt32 );
    public void (UInt32 );
    public void (UInt32 );
    public void (UInt32 );
    public UInt32 ();
    public void (UInt32 );
    public void (UInt32 );
    public void (UInt32 );
    public void (ushort );
    public void (ushort );
    public Stream ();
    public void (Stream ,  );
    private void ( ,  );
    public void ( , UInt32 );
    public void ( , string );
    public void (string );
    public sealed virtual void Dispose();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal abstract class  : object {
    protected  (string , int );
    protected bool (string );
    public abstract virtual  ( , string );
}
internal abstract class  :  {
    protected Hashtable ;
    protected (WorksheetCollection , LoadOptions );
    protected abstract virtual object ( );
    protected abstract virtual object (Byte[] );
    internal virtual void (Cells , LoadDataFilterOptions );
    protected void ( );
    protected bool (int ,  );
}
internal class  : object {
    internal int ;
    internal int ;
    internal string ;
    internal int ;
    internal Hashtable ;
    internal int ;
    internal string ;
    internal void ( );
    internal void ( , int );
}
internal class  : object {
    private  ;
    private  ;
    private bool ;
    private Byte[] ;
    public ( );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual Byte[] (Byte[] , int , int );
}
internal class  : object {
    private  ;
    private [][] ;
    private  ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private  ;
    private  ;
    public ([][] ,  ,  , int , int , int , int , int , int , bool , bool ,  );
    public sealed virtual  ( );
    public sealed virtual void ();
    public sealed virtual bool ();
    public sealed virtual bool (int , int );
    public sealed virtual bool (int );
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual  ( ,  ,  );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual void ( );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void ();
    public sealed virtual void ( );
    public sealed virtual  (int , int );
    public sealed virtual  (int );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void (int , int ,  );
    public sealed virtual void (int ,  );
    private void ( );
}
internal class  :  {
    internal void (int , int , int , int );
    internal void (int );
    internal void (int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal (string , string );
}
internal class  :  {
    internal  ;
    internal bool ;
    internal (CellArea ,  , bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private WebExtension ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    internal ( , WebExtension , string );
    internal virtual void ( );
    private void ( , WebExtensionReference );
    private static string (WebExtensionStoreType );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
}
internal class  : object {
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    private static void (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] );
    public static UInt32 (UInt64[] );
    protected static void (UInt64[] );
    protected static void (UInt64[] , UInt64[] );
    protected static void (UInt64[] , UInt64[] , UInt64[] );
    protected static void (ulong , ulong , UInt64[] , int );
    protected static void (UInt64[] , UInt64[] );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    internal byte ();
    internal void (byte );
    internal byte ();
    internal void (byte );
    internal Byte[] ();
    internal void (Byte[] );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private Byte[] ;
    private ( );
    public ( , Byte[] );
    public static  (object );
    public  ();
    public Byte[] ();
    public virtual  ();
}
internal class  :  {
    private int ;
    internal ( ,  ,  , int );
    protected virtual  ( , bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int , int );
    public virtual bool (int );
    public virtual bool (int , int );
    public virtual void ();
    public virtual bool ();
    public virtual  ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
}
internal class  :  {
    internal void (Byte[] , int , int );
    internal void (string ,  );
    internal void (ushort , ushort );
    internal void (ArrayList );
}
internal class  : object {
    private  ;
    private List`1<> ;
    internal ( );
    internal void ( ,  );
    private void ( , int );
    private void ( ,  );
    private void ( , int , int );
}
internal class  :  {
    public Hashtable ();
    public Hashtable ();
    public Hashtable ();
}
internal class  :  {
    private string ;
    private  ;
    public (string ,  );
    public virtual BigInteger ( );
    private Byte[] (BigInteger );
}
internal class  :  {
    public (Byte[] , int );
    public virtual bool ();
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    internal int ();
    internal int ();
    internal  ( );
    internal void ();
    internal void (int , int );
    public virtual  ( , bool );
    public virtual bool ( , int , int , bool );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  ( , int );
    public virtual void (StringBuilder ,  );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    protected IList ;
    protected int ;
    protected  ;
    protected  ;
    protected  ;
    protected string ;
    protected bool ;
    public (IList , int ,  ,  ,  , string , bool );
    public virtual int ();
    public virtual IEnumerable ();
    public virtual bool ();
    public virtual void (bool );
    public virtual  ();
    public virtual string ();
    public virtual bool ();
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual string ToString();
    public virtual string (string );
    public virtual object ();
    public virtual  ();
}
internal abstract class  : object {
    internal  ;
    internal abstract virtual  ();
    internal string ();
    internal  ();
    internal  ();
    internal  ();
    internal static  (string );
}
internal class  : ValueType {
    internal static void ( );
    internal static void ( ,  , Rectangle , float , double );
    private static void ( ,  , Rectangle , float , double ,  );
    private static void ( ,  , Rectangle , float , double ,  );
    private static void ( ,  , Rectangle , float , double ,  );
    internal static void ( ,  , Rectangle , float , double );
    private static void ( ,  , Rectangle , float , double ,  );
    private static void ( ,  , Rectangle , float , double ,  );
    private static void ( ,  , Rectangle , float , double ,  );
    private static bool (int , int , ArrayList , Double& );
    private static double ( , double );
    internal static void ( , IList ,  , bool );
    private static void ( ,  , Double[]& , Double[]& );
    private static void ( ,  , Double& , Double& );
    private static bool (Double[] );
    private static Double[] (Double[] , Double[] , bool , double , Double& );
    private static Double[] (Double[] , Double[] , int , bool , double , Double& );
    private static Double[] (Double[] , Double[] , Double& );
    private static Double[] (Double[] , Double[] , Double& );
    private static Double[] (Double[] , Double[] , bool , double , Double& );
    internal static void ( ,  );
    private static void ( , RectangleF ,  );
    private static String[] ( , Double[] ,  );
    private static string (string );
}
internal class  : object {
    private IDictionary ;
    private IList ;
    private (IDictionary , IList );
    public (Byte[] );
    public (Stream );
    public (IEnumerable );
    public int ();
    public int ();
    public IEnumerable ();
    public IEnumerable (string );
    public IEnumerable (string , bool );
    public IEnumerable (string , bool , bool );
    public  (long );
    public  (long );
    public bool (long );
    public Byte[] ();
    public void (Stream );
    public static  ( ,  );
    public static  ( ,  );
}
internal class  : object {
    []
private WorksheetCollection ;
    private bool ;
    internal (WorksheetCollection , bool );
    public sealed virtual int (double );
    public sealed virtual double (int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public ( );
}
internal class  : object {
    public sealed virtual void InitStream(StreamProviderOptions );
    public sealed virtual void CloseStream(StreamProviderOptions );
}
internal class  : object {
    private int ;
    private int ;
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
}
internal class  :  {
    private  ;
    private string ;
    private string ;
    private string ;
    private bool ;
    public void ();
    public string ();
    public void (string );
    public  ();
    public void ( );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public bool ();
    public void (bool );
}
internal class  : object {
    internal Stream ;
    internal string ;
    internal (Stream );
    internal void (string );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private Byte[] ;
    public ( , Byte[] );
    public ( , Byte[] , int , int );
    public Byte[] ();
    public  ();
}
internal class  : object {
    private  ;
    public void ();
    public void (Byte[] , int , int , Byte[] , int );
    public void (Byte[] , int , int );
    public Byte[] ();
    public Byte[] (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
[DefaultMemberAttribute("")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal static [] ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public (int );
    public ([] );
    private static ();
    public static  (IEnumerable );
    public void ( );
    public void ([] );
    public void ([] );
    public void (bool , int ,  );
    public void ( );
    public  (int );
    public int ();
    public sealed virtual IEnumerator GetEnumerator();
    internal [] ();
    internal [] ();
    private void (int );
    internal static [] ([] );
}
internal class  : object {
    private  ;
    private int ;
    private int ;
    private  ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    public void (Byte[] );
    public int ();
    public void (Byte[] , int , int );
    public int (Byte[] , int );
    private static void (Byte[] , int , byte );
}
internal class  : object {
    internal int ;
    internal bool ;
    internal void ( );
    internal bool ( );
}
internal class  :  {
    []
internal RevisionQueryTable ;
    []
internal Workbook ;
    internal (RevisionQueryTable , Workbook );
    private void ();
}
internal class  : object {
    private  ;
    private Byte[] ;
    private bool ;
    private  ;
    private  ;
    public (Byte[] );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public sealed virtual void ();
}
internal class  : object {
    public static int (int );
    public static UInt32 (UInt32 );
    public static short (short );
    public static ushort (ushort );
    public static int (int , int , bool );
    public static bool (int , int );
    public static int (int );
    public static int (long );
}
internal class  : object {
    private int ;
    private string ;
    private string ;
    private ArrayList ;
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal ArrayList ();
}
internal class  : object {
    private bool ;
    private int ;
    private  ;
    [ObsoleteAttribute]
internal (int , int , Stream );
    internal (bool , int ,  );
    public bool ();
    public sealed virtual int ();
    public sealed virtual  (int , bool );
    public sealed virtual  ();
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual int (Char[] , int );
}
internal class  : object {
    internal Byte[] ;
    protected int ;
    internal (int );
    internal (int , int );
    internal void (Stream );
    internal void (int , int , byte );
    internal static void (int , Stream );
    internal static void (int , Byte[] , Stream );
    internal static void (int , string , Stream );
    internal static void (int , int , int , Stream );
    internal static int (Byte[] , int , int );
    protected int (string , int );
    protected void (DateTime , int );
    internal static void (Byte[] , int ,  , int , Workbook );
    internal static void (Byte[] , int , int , bool );
    internal void ( );
}
internal class  : object {
    private int ;
    private  ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    public (int , int );
    public sealed virtual void ( );
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    private void (Byte[] , int );
    private void (Byte[] , int , Byte[] , int , Byte[] );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
}
internal abstract class  : object {
    protected List`1<> ;
    []
protected  ;
    protected int ;
    protected object ;
    protected bool ;
    protected string ;
    protected bool ;
    protected bool ;
    protected  ;
    internal bool ;
    internal ( , object );
    internal List`1<> ();
    internal  ();
    public object ();
    public void (object );
    public bool ();
    public void (bool );
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    internal int ();
    internal void (int );
    protected void ( );
}
internal static class  : object {
    internal static int ;
    internal static int ;
    internal static int ;
    internal static int ;
    internal static int ;
    internal static int ;
    internal static int ;
    internal static int ;
    internal static int ;
    internal static int ;
    internal static DateTime ;
    internal static Encoding ;
    private static ();
}
internal class  :  {
    internal bool ;
    internal virtual  ();
    internal virtual  ();
    internal virtual object ();
}
internal class  : object {
    internal string ;
    internal string ;
}
internal class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected Byte[] ;
    public (IList );
    public virtual void ();
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void (Stream );
    public virtual void (Stream );
    public virtual Byte[] ();
    protected virtual  ( );
}
internal class  :  {
    private RectangleF ;
    public ( , RectangleF );
    internal virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal static GraphicsPath[] ( , RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( , Byte[] );
    public ( ,  );
    public static  (object );
    public  ();
    public Byte[] ();
    public virtual  ();
}
internal class  : object {
    public  ;
    public string ;
    public  ;
    public  ;
    public  ;
    public  ;
    public string ();
    public string ();
    public string ();
}
internal abstract class  : object {
    [("True")]
internal int  { get; internal set; }
    internal static  (Byte[] );
    internal static  (Stream );
    internal abstract virtual int ();
    internal abstract virtual void (int );
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual int ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual int ();
    [("True")]
internal abstract virtual Byte[] (int );
    [("True")]
internal abstract virtual int ();
    [("True")]
internal abstract virtual int ();
    [("True")]
internal abstract virtual int ();
    [("True")]
internal abstract virtual string ();
    [("True")]
internal abstract virtual void (int );
    [("True")]
internal abstract virtual Byte[] ();
    [("True")]
internal abstract virtual void ();
    [("True")]
internal abstract virtual void (Stream , int );
}
internal class  : MemoryStream {
    internal void ( );
}
internal class  : object {
    private  ;
    private float ;
    private float ;
    private float ;
    private float ;
    internal ( );
    internal void (PointF , float );
    internal void (PointF[] , float );
    internal void (PointF[][] , float );
    internal void (PointF[] , float );
    private void (PointF , float );
    internal RectangleF ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    public sealed virtual object Clone();
    public double ();
    public void (double );
    internal void (double );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    internal bool ( );
    public double ();
    public void (double );
}
internal class  :  {
    private  ;
    public ( );
    public ( );
    public ( );
    public static  (object );
    public bool ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private CellArea ;
    internal ( ,  , CellArea , CellArea , int );
    internal ( ,  , CellArea , bool , int );
    protected virtual bool (int , int );
    protected virtual bool ( );
    protected virtual bool ( );
    protected virtual bool ( );
    private  ( , bool );
}
internal class  : object {
    internal static string (PivotConditionFormatScopeType );
    internal static PivotConditionFormatScopeType (string );
    internal static string (PivotConditionFormatRuleType );
    internal static PivotConditionFormatRuleType (string );
    internal static PivotGroupByType (int );
    internal static string (PivotGroupByType , PivotGlobalizationSettings );
    internal static bool (PivotGroupByType );
    internal static int (PivotGroupByType );
    internal static PivotFilterType (string );
    internal static string (PivotFilterType );
    internal static FilterType (PivotFilterType );
    internal static bool (PivotFilterType );
    internal static string (Int32& , int , Byte[] );
    internal static string (string , Worksheet );
    internal static string (PivotTableStyleType );
    internal static PivotTableStyleType (string );
    internal static int (PivotFormatConditionCollection );
    internal static void (Worksheet , bool );
    internal static void (Worksheet , PivotFormatCondition );
    internal static bool (PivotFieldCollection );
    internal static bool (PivotFieldCollection );
    internal static bool (string );
    internal static bool (string );
    internal static void (string , Style );
}
internal interface  {
    public abstract virtual void (object );
    public abstract virtual void (IEnumerable );
    public abstract virtual void ();
    public abstract virtual bool (object );
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual void (object );
    public abstract virtual void (IEnumerable );
}
internal class  :  {
    internal Byte[] ;
    internal Byte[] ;
    internal int ;
    internal byte ;
    internal Byte[]  { get; }
    internal ImageType  { get; }
    internal  ();
    internal virtual Byte[] ();
    internal virtual byte ();
    internal virtual int ();
    internal virtual void (int );
    internal virtual int (int );
    internal virtual ImageType ();
    internal virtual Byte[] ();
    internal virtual void (Byte[] );
    internal virtual Byte[] ();
    internal virtual bool ();
    internal void ( );
    internal virtual void (Byte[] , int , int , string );
}
internal class  : object {
    internal int ;
    internal int ;
    internal bool ;
    public int (int );
}
internal class  :  {
    private int ;
    private  ;
    private  ;
    private Byte[] ;
    public ( );
    public ( ,  , Byte[] );
    public  ();
    public  ();
    public Byte[] ();
    public int ();
    public virtual void ( );
}
internal class  : object {
    private int ;
    private Int32[] ;
    internal (Int32[] );
    public sealed virtual bool ( , int );
}
internal class  : object {
    []
private  ;
    internal ( );
    internal bool (Byte[] , bool );
    private bool ( );
    private bool ( );
    private void ( );
    private void ( , Hashtable );
    private void ( );
    private void ( );
    private  ( );
    private void ( );
    private  ( );
}
internal abstract class  : object {
    public virtual  ( , BigInteger );
    protected abstract virtual  ( , BigInteger );
    protected virtual  ( );
}
internal class  : object {
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    public static  ;
    public static  ;
    private (string );
    private static ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal Byte[] ;
    internal virtual int ();
    internal virtual void ( );
}
internal class  : object {
    private Byte[] ;
    private int ;
    private Byte[] ;
    private int ;
    private Byte[] ;
    private int ;
    private static Byte[] ;
    public ( );
    private static ();
    private void ( );
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    internal void (Byte[] );
    internal void (Byte[] );
    public sealed virtual  ();
    public sealed virtual void ( );
}
internal class  : object {
    private  ;
    private bool ;
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    private short ;
    private ArrayList ;
    []
private WorksheetCollection ;
    []
private  ;
    private List`1<> ;
    private int ;
    private Byte[] ;
    private int ;
    private UInt32 ;
    internal ArrayList ;
    internal (WorksheetCollection , int );
    internal ArrayList ();
    private void ();
    internal void ( );
    internal void ();
    internal void (Byte[] );
    internal void ( );
    internal void ();
    internal virtual void ( );
}
internal class  : object {
    []
private ListObjectCollection ;
    private Hashtable ;
    public (ListObjectCollection );
    public sealed virtual void (int , int ,  );
}
internal class  :  {
    private CultureInfo ;
    private string ;
    private char ;
    private char ;
    private char ;
    private char ;
    internal ( , string );
    protected virtual double (double );
    internal virtual  ( , double ,  );
    private void ( );
    public virtual bool ( );
}
internal class  : object {
    []
private  ;
    []
private ShapePropertyCollection ;
    []
private Workbook ;
    private bool ;
    []
private  ;
    private ( , ShapePropertyCollection );
    internal ( );
    internal static bool ( ,  , ShapePropertyCollection );
    private bool ( );
    private bool ();
    [("True")]
private void ( );
    private void ( );
    private bool (Area );
    internal void ( , FillFormat );
    internal string (TextureFill );
    [("True")]
private void ( , Line );
    [("True")]
private void ( , Line , bool );
    [("True")]
private void ( , Line );
    private void ( , Line );
    [("True")]
private void ( , Line );
    [("True")]
private static void ( , string , string , string );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    internal static void ( ,  );
    private static void ( ,  );
    internal static void ( ,  , PointF , PointF ,  );
    private static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    private static void ( ,  , RectangleF );
    private static void ( ,  , RectangleF );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    private static void ( , RectangleF );
    internal static Matrix ( , bool );
    internal static void ( ,  );
    private static void (Image& , MsoFormatPicture );
    internal static RectangleF (RectangleF );
    private static RectangleF (RectangleF );
    private static RectangleF (float , PointF );
    private static void ( ,  );
    private static void ( , RectangleF );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    private static void ( , RectangleF , bool );
    private static void ( , RectangleF , float , float , float );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static PointF[] (Shape );
    private static Matrix (Shape , RectangleF );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( , Byte[] );
    public static  (object );
    public  ();
    public Byte[] ();
    public virtual  ();
}
internal class  :  {
    private [] ;
    private int ;
    private int ;
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    public ( ,  , [] , int , int , Int32[] , int , int ,  , int , int , bool , bool , int , bool );
    internal ( , int , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int , int , int , int ,  ,  );
    public virtual bool ( );
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
    private void ();
    public virtual int ( , bool );
    private void ();
    private void ();
    private void ();
}
internal class  :  {
    internal void (DataLabels );
}
internal class  :  {
    private int ;
    public (int );
    public virtual  ();
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal  ;
    internal  ( );
}
internal class  : object {
    private static double ;
    private static Int32[] ;
    private static Double[][] ;
    private static Double[][] ;
    private static Double[][] ;
    private static Double[][] ;
    private static ();
    internal  (RectangleF , PointF , PointF );
    internal  (RectangleF , PointF , PointF );
    internal  (RectangleF , PointF , PointF );
    internal  (RectangleF , PointF , PointF );
    private  (Double[][] , RectangleF , PointF , PointF );
}
internal class  :  {
    public virtual int GetHashCode();
    public virtual bool Equals(object );
}
internal class  : object {
    private int ;
    private  ;
    internal ( , int );
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual void (StringBuilder );
    public sealed virtual bool (int ,  );
    public sealed virtual  (int , int , [] , int , int , bool );
    public sealed virtual  (int , int ,  , int , int , bool );
    public sealed virtual  (int , int ,  , int , bool );
    public sealed virtual  (int , int );
    public sealed virtual int (int ,  );
    public sealed virtual int (int ,  );
    public sealed virtual  (int );
    public sealed virtual  (int ,  );
    public sealed virtual object (int ,  );
    public sealed virtual void (int , StringBuilder ,  );
    public sealed virtual void (int , [] , int , int );
    public sealed virtual  (int , Double[] , int , int ,  ,  );
}
internal class  : object {
    private static  ;
    []
internal  ;
    internal PointF ;
    []
private ImageOrPrintOptions ;
    internal  ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal Color ;
    internal bool ;
    internal ArrayList ;
    internal TextAlignmentType ;
    internal TextAlignmentType ;
    internal float ;
    internal  ;
    []
internal  ;
    internal string ;
    internal RectangleF ;
    internal float ;
    internal float ;
    private  ;
    []
internal Cells ;
    internal string ;
    internal bool ;
    internal string ;
    internal  ;
    internal  ;
    []
internal  ;
    internal Double[] ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal float ;
    internal  ;
    internal Hashtable ;
    private static String[] ;
    public ( , ImageOrPrintOptions );
    private static ();
    public bool ();
    private void ();
    public void (bool );
    internal void (RectangleF ,  );
    private SolidBrush (Color );
    internal  ( , float , float );
    internal void ( );
    internal void (RectangleF ,  );
    internal void ( );
    internal void ();
    internal void ( );
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void (bool );
    internal void (bool ,  );
    internal void ( );
    internal void ( , bool );
    internal void ();
    internal void ( );
    internal void (float );
    internal static float (CellBorderType );
    private void (Border , int );
    private Color (Border );
    private ArrayList (BorderCollection );
    private ArrayList (BorderCollection );
    private void ( , int , ArrayList , int , int , float , float , float , float , bool );
    private float (int , int , int , float );
    private void (ArrayList , int , int , float , float , float , float );
    private void ();
    private float (float , float , float , float );
    private float (float , float );
    private void ( );
    public void ( );
    public void ( );
    private void (bool );
    internal void ();
    public void ( );
    public void ();
    public void ( );
    internal void ();
    private void (int , bool , long ,  , CellBorderType , Color );
    private bool ( ,  );
    private bool (int , Style );
    internal static long (long , long , BorderType );
}
internal class  :  {
    private  ;
    public ( ,  );
    public (Byte[] ,  );
    protected virtual  ();
    protected virtual Byte[] ( );
}
internal class  : object {
    internal long ;
    internal long ;
    internal long ();
}
internal class  : object {
    private string ;
    private string ;
    private bool ;
    private bool ;
    private bool ;
    private int ;
    private  ;
    private  ;
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
}
internal class  :  {
    private Byte[] ;
    public ( );
    public virtual void ( );
}
internal class  :  {
    private int ;
    []
private RowCollection ;
    private  ;
    private short ;
    private short ;
    private bool ;
    private  ;
    private bool ;
    private bool ;
    private  ;
    private int ;
    private bool ;
    private  ;
    private  ;
    []
private Row ;
    private Cell ;
    private int ;
    internal (Cells , bool , int );
    internal (Cells , CellArea , bool , int );
    internal (Cells , int , short , int , short , bool , int );
    internal (Cells , int , short , int , short , bool , int , bool );
    public void ();
    public virtual bool ();
    public virtual object ();
    public virtual void ();
    private void (bool );
    public virtual  ();
    public virtual RowCollection ();
    public virtual int ();
    public virtual  ();
    public virtual int ();
    public virtual Row ();
    public virtual int ();
    public virtual  ();
    public virtual Cell ();
}
internal class  :  {
    private string ;
    internal ( , string );
    internal virtual float ();
}
internal class  : object {
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private Int32[] ;
    private bool ;
    private static ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private Int32[] (Byte[] );
    private int (long );
    private int (long );
    private long (long );
    private long (long );
    private long (Byte[] , int );
    private void (Byte[] , int , long );
    private int (int );
    private long (int , int , long );
    private int (int , int , int , int );
    private int (int , int , int , int );
}
internal class  : object {
    []
private Workbook ;
    private HtmlLoadOptions ;
    public (Workbook , LoadOptions );
    public void (Stream );
    private bool (string , ArrayList );
    private string (Stream );
}
internal class  :  {
    internal void (Byte[] );
}
internal class  : object {
    []
private WorksheetCollection ;
    []
private BuiltInDocumentPropertyCollection ;
    []
private CustomDocumentPropertyCollection ;
    private  ;
    private  ;
    private  ;
    private static DateTime ;
    private static ();
    internal void ( , BuiltInDocumentPropertyCollection , CustomDocumentPropertyCollection );
    private void (Stream );
    private void (Stream );
    [("True")]
private static void ( , DocumentPropertyCollection ,  );
    internal static Byte[] (string );
    [("True")]
internal void (WorksheetCollection ,  );
    private void ();
    [("True")]
private void (DocumentPropertyCollection );
}
internal class  : object {
    internal  ;
    internal int ;
}
internal class  :  {
    internal (PivotField );
}
internal class  :  {
    private BigInteger ;
    public (BigInteger ,  );
    [ObsoleteAttribute("Use version with explicit 'algorithm' parameter")]
public (BigInteger ,  );
    public (string , BigInteger ,  );
    public (string , BigInteger ,  );
    public BigInteger ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ( );
    internal virtual void ();
}
internal enum  : Enum {
    public int value__;
    public static  Div;
    public static  Invalid;
    public static  NA;
    public static  Name;
    public static  Null;
    public static  Number;
    public static  Ref;
    public static  Recursive;
    public static  Value;
}
internal class  : object {
    private string ;
    private DateTime ;
    public string Email { get; public set; }
    public DateTime RegistrationDate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string );
    [CompilerGeneratedAttribute]
public DateTime get_RegistrationDate();
    [CompilerGeneratedAttribute]
public void set_RegistrationDate(DateTime );
}
internal class  :  {
    private object ;
    private FieldInfo ;
    private  ;
    public (FieldInfo , object );
    public (FieldInfo , object ,  );
    public object ();
    private void (object );
    public FieldInfo ();
    private void (FieldInfo );
    public  ();
    private void ( );
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal bool ;
    internal void ( );
}
internal class  :  {
    internal void (int , string );
}
internal interface  {
    public abstract virtual Byte[] (Byte[] );
    public abstract virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private double ;
    private double ;
    private SeriesLayoutProperties ;
    internal int ;
    internal String[] ;
    internal Int32[] ;
    internal Double[] ;
    internal int ;
    internal int ;
    internal int ;
    internal (double , double ,  , SeriesLayoutProperties );
    private int ();
    internal void ();
    internal double (Double[] );
    internal double (Double[] , double );
    internal int ( );
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    internal static SparklinePresetStyleType (SparklineGroup );
    internal static void (SparklineGroup , SparklinePresetStyleType );
    private static CellsColor (Workbook , string , int , double );
    private static bool (CellsColor , string , int , double );
    private static void (SparklineGroup , int , int );
    private static bool (SparklineGroup , int , int );
    private static void (SparklineGroup , int , int );
    private static bool (SparklineGroup , int , int );
    private static void (SparklineGroup , int , int );
    private static bool (SparklineGroup , int , int );
    private static void (SparklineGroup , int , int );
    private static bool (SparklineGroup , int , int );
    private static void (SparklineGroup );
    private static bool (SparklineGroup );
    private static void (SparklineGroup );
    private static bool (SparklineGroup );
    private static void (SparklineGroup , string , string );
    private static bool (SparklineGroup , string , string );
    private static void (SparklineGroup , string , string , string , string , string , string , string );
    private static bool (SparklineGroup , string , string , string , string , string , string , string );
    private static void (SparklineGroup , int );
    private static bool (SparklineGroup , int );
}
internal class  :  {
    public ( );
}
internal class  : object {
    private  ;
    public ( );
    public sealed virtual Stream ();
    public sealed virtual object ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  : object {
    private  ;
    internal ( );
    internal Int32[] (UInt32 , UInt32 );
    internal  ();
    internal void ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private StringBuilder ;
    [DebuggerBrowsableAttribute("0")]
private StringBuilder ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( ,  );
    public sealed virtual object ParseObject(string );
    public object (Char[] , int , int );
    private object (Char[] , int , int );
    internal  ();
    private double (Char[] , int , int , double , bool );
    private int ();
    private void ();
    public sealed virtual string GetFormat();
}
internal class  : object {
    internal ListObject ;
    internal  ;
    internal (ListObject ,  );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  : object {
    []
private Stream ;
    []
private  ;
    public (Stream );
    public Stream ();
    public void ();
    public void (byte );
    public void (string );
    public void (Byte[] );
    public void (Byte[] , int , int );
    public void (Byte[] , int , int );
    public void (string );
    public void ();
    public void (string );
    public void ();
    public void ();
    public void (string , string );
    public void (string , string );
    public void (string , string );
    public void (string , RectangleF );
    public void (string , DateTime );
    public void (string , int );
    public void (string , float );
    public void (string );
    public void (Byte[] );
    public void (byte );
    public static string (string , DateTime );
    public static string (string , string );
    public static void (DateTime , StringBuilder );
    public static void (DateTime , StringBuilder );
    public static void (PointF , StringBuilder );
    public static void (PointF[] , StringBuilder );
    public static void (RectangleF , StringBuilder );
    public static void (float , StringBuilder );
    public static void (float , int , StringBuilder );
    public static void (Single[] , StringBuilder );
    public static void (Color , StringBuilder );
    internal  ();
    internal void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    public (Byte[] );
    public (Stream );
    internal virtual  ( );
    internal virtual  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual void ( );
}
internal abstract class  : object {
    public abstract virtual void ( );
    public sealed virtual  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private GraphicsPath ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private static Byte[] ;
    [DebuggerBrowsableAttribute("0")]
public static  ;
    public (PointF , PointF , PointF , PointF , bool );
    private static ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
    public void ( ,  , Brush ,  , float );
    public bool (PointF );
    public static bool (PointF , PointF[] );
    private static bool (PointF , PointF , PointF );
}
internal class  :  {
    private string ;
    [ObsoleteAttribute("Will become internal")]
public (Byte[] );
    internal (Char[] );
    public (string );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    protected virtual bool ( );
    internal virtual void ( );
}
internal interface  {
    public abstract virtual double (double , double );
    public abstract virtual double (double , double );
    public abstract virtual double (double , double );
    public abstract virtual double (double , double );
}
internal class  :  {
    internal short ;
    internal (short );
    internal virtual object ();
    internal virtual string ();
    internal virtual  ();
    internal virtual short ();
    internal virtual string ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  : object {
    private static long ;
    private static ();
    public static long ();
}
internal class  : object {
    private  ;
    []
private  ;
    []
private  ;
    internal ( ,  );
    internal ( );
    internal void (string );
    private void (Byte[] );
    internal  ();
    private void ( );
    private void ();
    private void ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (Worksheet );
    internal Worksheet ();
    internal void ( );
    internal void (int ,  );
    public  (int );
}
internal abstract class  : object {
    internal Char[] ;
    internal Byte[] ;
    internal int ;
    [ObsoleteAttribute("Use version taking 'char[]' instead")]
public (string , Byte[] , int );
    [ObsoleteAttribute("Use version taking 'char[]' instead")]
public (string ,  );
    public (Char[] , Byte[] , int );
    public (Char[] ,  );
    protected virtual override void Finalize();
    public string ();
    public Byte[] ();
    public Byte[] ();
    public int ();
    public string ();
    public string ();
    public Byte[] ();
    internal abstract virtual  (string );
}
internal abstract class  : object {
    protected  ;
    protected [] ;
    protected [] ;
    private  ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    public ( , int );
    protected abstract virtual  (int );
    protected abstract virtual  (int , int );
    protected abstract virtual  (Int32[] );
    protected abstract virtual  (int , int );
    protected abstract virtual  (int );
    protected abstract virtual  ();
    protected abstract virtual  ();
    protected virtual void (int ,  );
    public virtual void (int ,  );
    public void (int ,  );
    internal [] ();
    public  ();
    private void (Int32[] , int , int , [] );
}
internal class  : object {
    private SByte[] ;
    private SByte[] ;
    private sbyte ;
    private int ;
    private SByte[] ;
    private SByte[] ;
    private static SByte[] ;
    private static Char[] ;
    public (SByte[] );
    public (SByte[] , sbyte );
    public (Char[] , int , int , sbyte );
    private static ();
    public static sbyte (char );
    private void ();
    private void ();
    private void ();
    private int ();
    private int (int );
    private static SByte[] (SByte[] , sbyte );
    private void (int , int , sbyte , sbyte , sbyte );
    private void (int , int , sbyte , sbyte , sbyte );
    private void (int , int , sbyte , sbyte , sbyte );
    public Byte[] ();
    public Byte[] (Int32[] );
    private static Int32[] (SByte[] , Int32[] );
    private static Int32[] (SByte[] );
    public sbyte ();
    private static bool (sbyte );
    private static sbyte (int );
    private int (int , int , SByte[] );
    private int (int , SByte[] );
    private void (int , int , sbyte );
    private void (int , int , sbyte );
    private static void (SByte[] );
    private static void (sbyte );
    private static void (Int32[] , int );
}
internal abstract class  : object {
    public static UInt32 (int , UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (int , UInt32 , UInt32[] , int );
    public static UInt32 (int , UInt32 , UInt32[] , int , int );
    public static UInt32 (int , UInt32 , UInt32[] );
    public static UInt32 (int , UInt32 , UInt32[] , int );
    public static UInt32 (int , UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (int , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (int , ulong , UInt32[] , int );
    public static UInt32 (int , ulong , UInt32[] , int , int );
    public static UInt32 (int , ulong , UInt32[] );
    public static UInt32 (int , ulong , UInt32[] , int );
    public static UInt32 (int , UInt32[] , UInt32[] );
    public static UInt32 (int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (int , UInt32[] , int , UInt32[] , int , UInt32 );
    public static UInt32 (int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (int , UInt32 , UInt32[] , int );
    public static UInt32 (int , UInt32 , UInt32[] , int , int );
    public static UInt32 (int , UInt32 , UInt32[] );
    public static UInt32 (int , UInt32 , UInt32[] , int );
    public static UInt32 (int , int , UInt32[] , UInt32[] , UInt32[] );
    public static void (int , int , UInt32[] , int , UInt32[] , int );
    public static void (int , int , Int32[] , int , Int32[] , int );
    public static void (int , UInt32[] , UInt32[] );
    public static UInt32[] (int , UInt32[] );
    public static void (int , UInt32[] , int , UInt32[] , int );
    public static UInt64[] (int , UInt64[] );
    public static void (int , UInt64[] , UInt64[] );
    public static void (int , UInt64[] , int , UInt64[] , int );
    public static UInt32[] (int );
    public static UInt64[] (int );
    public static int (int , int , UInt32[] , UInt32[] , UInt32[] );
    public static int (int , int , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static int (int , UInt32[] );
    public static int (int , UInt32[] , UInt32[] );
    public static int (int , UInt32[] , int );
    public static int (int , UInt32[] , int , int );
    public static bool (int , UInt32[] , UInt32[] );
    public static UInt32[] (int , BigInteger );
    public static UInt64[] (int , BigInteger );
    public static UInt32 (UInt32[] , int );
    public static bool (int , UInt32[] , UInt32[] );
    public static UInt32 (int , UInt32[] );
    public static UInt32 (int , UInt32[] , UInt32[] );
    public static UInt32 (int , UInt32[] , int );
    public static UInt32 (int , UInt32[] , int , int );
    public static bool (int , UInt32[] );
    public static bool (int , UInt32[] );
    public static void (int , UInt32[] , UInt32[] , UInt32[] );
    public static void (int , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static void (UInt32[] , int , int , UInt32[] , int , int , UInt32[] , int );
    public static UInt32 (int , UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (int , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (int , UInt32 , UInt32[] , UInt32 , UInt32[] , UInt32[] , int );
    public static UInt32 (int , UInt32 , UInt32[] , UInt32[] );
    public static UInt32 (int , UInt32 , UInt32[] , int , UInt32[] , int );
    public static UInt32 (int , UInt32 , UInt32[] , int , UInt32[] , int );
    public static UInt32 (int , UInt32 , ulong , UInt32[] , int );
    public static UInt32 (int , UInt32[] , UInt32 );
    public static UInt32 (int , UInt32[] , int , UInt32 );
    public static UInt32 (int , UInt32[] , UInt32 , UInt32[] );
    public static UInt32 (int , UInt32[] , int , UInt32 , UInt32[] , int );
    public static UInt32 (int , UInt32[] , int , UInt32 );
    public static UInt32 (int , UInt32[] , int , int , UInt32 );
    public static UInt32 (int , UInt32[] , int , UInt32 , UInt32[] );
    public static UInt32 (int , UInt32[] , int , int , UInt32 , UInt32[] , int );
    public static UInt32 (int , UInt32[] , UInt32 );
    public static UInt32 (int , UInt32[] , UInt32 );
    public static UInt32 (int , UInt32[] , int , UInt32 );
    public static UInt32 (int , UInt32[] , UInt32 , UInt32[] );
    public static UInt32 (int , UInt32[] , int , UInt32 , UInt32[] , int );
    public static ulong (int , UInt64[] , int , ulong , UInt64[] , int );
    public static UInt32 (int , UInt32[] , int , UInt32 );
    public static UInt32 (int , UInt32[] , int , int , UInt32 );
    public static ulong (int , UInt64[] , int , int , ulong );
    public static UInt32 (int , UInt32[] , int , UInt32 , UInt32[] );
    public static UInt32 (int , UInt32[] , int , int , UInt32 , UInt32[] , int );
    public static ulong (int , UInt64[] , int , int , ulong , UInt64[] , int );
    public static void (int , UInt32[] , UInt32[] );
    public static void (int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , int , UInt32[] );
    public static UInt32 (UInt32[] , int , int , UInt32[] , int );
    public static UInt32 (UInt32[] , int , UInt32[] );
    public static UInt32 (UInt32[] , int , int , UInt32[] , int );
    public static int (int , UInt32[] , UInt32[] , UInt32[] );
    public static int (int , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static int (int , UInt32 , UInt32[] , int );
    public static int (int , UInt32 , UInt32[] , int , int );
    public static int (int , UInt32 , UInt32[] );
    public static int (int , UInt32 , UInt32[] , int );
    public static int (int , UInt32[] , UInt32[] , UInt32[] );
    public static int (int , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static int (int , ulong , UInt32[] , int );
    public static int (int , ulong , UInt32[] , int , int );
    public static int (int , ulong , UInt32[] );
    public static int (int , ulong , UInt32[] , int );
    public static int (int , UInt32[] , UInt32[] );
    public static int (int , UInt32[] , int , UInt32[] , int );
    public static int (int , UInt32 , UInt32[] , int );
    public static int (int , UInt32 , UInt32[] , int , int );
    public static int (int , UInt32 , UInt32[] );
    public static int (int , UInt32 , UInt32[] , int );
    public static BigInteger (int , UInt32[] );
    public static void (int , UInt32[] );
}
internal class  :  {
    internal Hashtable ;
    private int ;
    private int ;
    internal (Byte[] );
    private void (int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Double[] ;
    internal (Double[] , String[] );
    internal (Double[] , bool );
    internal virtual int ();
    internal virtual object (int );
}
internal class  : object {
    []
internal Worksheet ;
    []
internal  ;
    internal ArrayList ;
    internal ArrayList ;
    internal int ;
    internal double ;
    internal ArrayList ;
    internal  ;
    internal List`1<> ;
    internal List`1<> ;
    internal ( , Worksheet );
    internal void (int );
    internal int (int );
    internal int (int );
    internal  (int );
    internal  (int , int );
    internal  (int );
}
internal class  :  {
    private Int32[] ;
    private UInt32[] ;
    private Int32[] ;
    private UInt32[] ;
    private UInt32[] ;
    public virtual string ();
    public virtual void ();
    public virtual int ();
    internal virtual void (Byte[] );
    internal virtual int (Byte[] , int , Byte[] , int );
    internal virtual int (Byte[] , int , Byte[] , int );
    private void (UInt32 , UInt32 , UInt32 , UInt32 , UInt32[] );
    private void (UInt32 , UInt32 , UInt32 , UInt32 , UInt32[] );
}
[DefaultMemberAttribute("")]
internal class  : object {
    internal int ;
    internal Double[] ;
    internal int ;
    internal bool ;
    public double  { get; }
    public (int , bool );
    public double (int );
    public void (double );
    private void (int , double );
}
internal class  :  {
    private Byte[] ;
    private List`1<> ;
    [("True")]
internal void (ProtectedRange );
    internal virtual void ( );
}
internal class  : object {
    internal object ;
    internal object ;
    internal long ;
}
internal class  :  {
    private int ;
    private int ;
    internal ( , int , int );
    internal virtual void ( , int , int );
    internal virtual void ();
    internal virtual  (int );
    internal virtual void ( , int );
    internal virtual void ();
}
internal class  : object {
    internal static string ( );
}
internal class  :  {
    protected internal UInt64[] ;
    public (BigInteger );
    protected internal (UInt64[] );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  : object {
    internal ushort ;
    internal short ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal Byte[] ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal Byte[] ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal short ;
    internal short ;
    internal short ;
    internal ushort ;
    internal ushort ;
    internal UInt32 ;
    internal UInt32 ;
    internal short ;
    internal short ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ( );
    internal FontStyle ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    [ObsoleteAttribute("Use Org.BouncyCastle.Utilities.IO.FilterStream")]
public (Stream );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
}
internal abstract class  :  {
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    public ( ,  ,  , int );
    protected ( , int ,  , int );
    public virtual  (int , int );
    public virtual  (int );
    public virtual bool (int , int );
    public virtual void ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int );
    public virtual  (int );
}
internal class  :  {
    internal void (ChartDataTable );
}
internal class  : object {
    internal static  ;
    internal double ;
    internal double ;
    private static ();
    internal static  ( );
}
internal class  : object {
    public static string ( );
    public static bool (string , & );
}
internal abstract class  : object {
    public static BigInteger ;
    public static BigInteger ;
    private static ();
    public static BigInteger (BigInteger ,  );
    public static BigInteger (BigInteger ,  );
    public static BigInteger (Char[] );
    public static BigInteger (BigInteger , BigInteger , BigInteger );
    public static BigInteger (BigInteger , BigInteger , BigInteger , BigInteger );
    public static BigInteger (BigInteger , BigInteger , BigInteger );
    public static BigInteger (BigInteger , BigInteger , BigInteger , BigInteger );
    public static BigInteger[] (BigInteger , BigInteger , BigInteger , BigInteger , BigInteger , string ,  ,  );
    private static BigInteger (BigInteger , BigInteger , BigInteger , string ,  );
    public static void (BigInteger );
    public static void (BigInteger );
    public static void (BigInteger , BigInteger , BigInteger , BigInteger , BigInteger[] , string ,  );
    public static BigInteger (BigInteger , BigInteger , BigInteger , BigInteger , BigInteger , BigInteger );
    public static void (string , string );
    public static void (string , string );
    public static void (object , string );
    public static BigInteger (string , string , BigInteger , BigInteger , BigInteger , BigInteger , BigInteger ,  );
    private static Byte[] (BigInteger ,  );
    public static void (string , string , BigInteger , BigInteger , BigInteger , BigInteger , BigInteger ,  , BigInteger );
    private static void ( , BigInteger );
    private static void ( , string );
    private static void ( , Byte[] );
    private static void ( , BigInteger );
    private static void ( , string );
    private static void ( , Byte[] );
    private static void ( , BigInteger );
    private static void ( , string );
    private static void ( , Byte[] );
    private static Byte[] (int );
}
internal class  : object {
    private Byte[] ;
    private int ;
    private CopyOptions ;
    private  ;
    private int ;
    private  ;
    private bool ;
    internal (Byte[] , int , CopyOptions );
    private void (Byte[] , int , CopyOptions );
    private static void ( , Byte[] , int , bool , CopyOptions );
    private static int (Byte[] , int , CopyOptions );
    private static void (ArrayList , int , int , Byte[] );
    private static void (Byte[] , int , CopyOptions );
    private void (int );
    private void (int , ArrayList );
    private int ();
    private Byte[] ();
    internal static Byte[] (Byte[] , int , CopyOptions );
}
internal class  : object {
    internal Guid ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    internal static void ( ,  ,  , Rectangle );
    internal static void ( ,  , double , int ,  , int , Double& , Double& );
    private static int ( );
    internal static void ( , ArrayList ,  );
    [("True")]
private static void ( , int );
    internal static Color ( ,  );
    internal static Color ( ,  );
    internal static PointF[] ( );
}
internal class  : object {
    private IList ;
    public virtual void ( , Byte[] );
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    internal ( , int , int , int , int , int );
    public virtual int ();
    public virtual void (int );
    public virtual void (int );
    public virtual void ();
    protected virtual void (int );
}
internal class  : object {
    private  ;
    private  ;
    public ( );
    [("True")]
internal void ( );
    internal void ( );
    [("True")]
private void (Worksheet );
    [("True")]
private void (PageSetup );
    private void (OdsPageBackground );
    private string (OdsPageBackgroundGraphicPositionType );
    [("True")]
private void (PageSetup );
    [("True")]
private void (PageSetup );
    [("True")]
private void (PageSetup , bool );
    [("True")]
private void (int , Font );
    [("True")]
private void ( );
}
internal class  : object {
    private static Byte[] ;
    private static Byte[] ;
    private static string ;
    private static  ;
    private static ();
    private static string (string , Byte[] , Byte[] , int );
    public static string (Char[] , Byte[] , int );
    public static string (string , Char[] , Byte[] , int );
    public static bool (string , Char[] );
    private static string (Byte[] );
    private static Byte[] (string );
}
internal class  : object {
    internal double ;
    internal double ;
    internal object ( );
}
internal class  : ValueType {
    public static void ( , RectangleF ,  );
    public static Brush ( , RectangleF );
    public static Brush ( , RectangleF , bool );
    public static Brush ( , RectangleF , float );
}
[DefaultMemberAttribute("")]
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
[("True")]
public string  { get; public set; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public ( ,  );
    public sealed virtual void Dispose();
    public virtual string ();
    public virtual string ();
    public virtual void (string );
    internal void ();
    public virtual void ();
    private void (StringBuilder );
    public  ( );
    public  ( ,  );
    public  ();
    public  (string );
    public  (string , string );
    public sealed virtual IEnumerator GetEnumerator();
    public virtual string ();
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    public virtual string ();
    public virtual void (string );
    public bool ();
    public virtual string ();
    public virtual void (string );
    public  ();
    public  ();
    public  (string );
    public  ();
    public void ( );
    public virtual  ();
    public  (string );
}
internal class  : object {
    private static string ;
    private DigitalSignatureCollection ;
    [("True")]
public (DigitalSignatureCollection );
    private static ();
    public Byte[] (VbaProject );
    public Byte[] (DigitalSignature , Byte[] );
    private Byte[] (DigitalSignature );
    private Byte[] (DigitalSignature );
    private Byte[] (DigitalSignature );
    private Byte[] ();
    private Byte[] (VbaProject , DigitalSignature );
    private Byte[] (VbaProject );
}
internal class  :  {
    internal (SlicerCache );
}
internal class  :  {
    private BigInteger ;
    private int ;
    public (BigInteger ,  , int , int );
    public BigInteger ();
    public int ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    public static Stream (string );
    public static void (Stream , Stream );
    internal static Byte[] (Stream , bool );
    internal static Byte[] (string );
    public static Stream (Stream );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal interface  {
    public abstract virtual Stream ();
}
internal class  :  {
    private double ;
    public double ();
    public void (double );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
internal class  : FontSetting {
    internal (int , int , WorksheetCollection , FontSettingCollection );
}
internal class  :  {
    internal (PageSetup );
}
internal abstract class  : object {
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Font ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    internal ( , object , int );
    internal  ();
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    internal bool ();
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    public virtual Font ();
    public virtual void (Font );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    private Int32[] ;
    private int ;
    public int  { get; public set; }
    public (int );
    public (Int32[] , int );
    public (Int32[] );
    public int ();
    public void (int );
    public void (Int32[] );
    public void (Int32[] , int , int );
    public void ( );
    public int ();
    public int (int );
    public void (int , int );
    internal int ();
    internal void (int );
    internal void ();
    internal void (int );
    internal void ();
    internal void (int );
    internal void (int , int );
    internal void (int );
    internal void (int , int );
    internal void (int , Int32[] , int , int );
    internal Int32[] (bool );
    internal Int32[] ();
    internal void (Int32[] , int );
    internal bool (int , int );
    internal void ();
    internal bool (int );
    internal bool ( );
    internal  ();
}
internal class  :  {
    internal ( );
}
internal class  :  {
    private  ;
    public ( ,  );
    public ( );
    public virtual void (bool ,  );
    public virtual int (int );
    public virtual int (int );
    public virtual int (byte , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual int (Byte[] , int );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Color ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    public ( ,  ,  );
    public  ();
    public void (Double[0...,0...] ,  ,  , double , double , double );
    public void (Double[0...,0...] ,  ,  ,  );
    private Color ( , int , int );
    public bool ();
}
internal class  : object {
    private sealed virtual override int (object , object );
}
internal class  : object {
    internal DefaultStyleSettings ;
    private CountryCode ;
    private bool ;
    private  ;
    private short ;
    private CultureInfo ;
    private  ;
    private  ;
    private  ;
    private  ;
    private String[] ;
    private Hashtable ;
    private  ;
    private  ;
    private int ;
    public (CultureInfo );
    public (CountryCode );
    internal (CultureInfo , DefaultStyleSettings );
    internal ( ,  );
    internal void ( );
    private void ();
    internal void (char , char );
    private void ();
    private void (CultureInfo );
    public CultureInfo ();
    public void (CultureInfo );
    private void (CountryCode );
    public CountryCode ();
    public void (CountryCode );
    public bool ();
    public void (bool );
    internal  ();
    internal void ( );
    internal short ();
    internal Encoding ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal static  (int );
    internal static NumberCategoryType (int );
    internal int (string );
    private string (string , string );
    private string (string , char );
    internal string (int );
    private void ();
    internal  ();
    public  (int , object );
    public  (string , object , bool );
    public  (int , TypeCode , object );
    public  (string , TypeCode , object , bool );
    public  (Style );
    public  (int );
    public  (string , bool );
    public  (string , bool );
    internal  ();
    internal NumberCategoryType ( , object );
    internal NumberCategoryType ( , TypeCode , object );
    internal int ();
    internal void (int );
    internal Hashtable ();
    internal StringBuilder (StringBuilder );
    internal StringBuilder (string , string , string , StringBuilder );
    internal StringBuilder (string , string , string , string , string , string , StringBuilder );
}
internal class  : object {
    internal string ;
    internal  ;
    internal  ;
    private Hashtable ;
    private Hashtable ;
    private int (string );
    internal string (CountryCode , bool );
    private static int (CountryCode );
    internal int (string );
    private int (int );
    private static void (Hashtable );
    private static void (Hashtable );
    internal string (string , string , bool );
    internal string (string , bool );
    internal string (int , bool );
    internal string (int , bool );
    internal void ( );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal abstract class  :  {
    protected  ;
    protected  ;
    protected  ;
    private Matrix ;
    private Matrix ;
    protected float ;
    internal ( );
    internal virtual void ( );
    internal static  (Brush ,  );
    protected void ( );
    protected abstract virtual int ();
    protected abstract virtual Matrix ();
    internal virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    public GraphicsPath (float , float , float , float );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public Byte[] ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    internal int ;
    internal  ;
}
internal class  : object {
    private ArrayList ;
    private ArrayList ;
    private  ;
    internal string ;
    internal void ( , CopyOptions );
    internal ArrayList ();
    internal ArrayList ();
    internal  ();
    internal void ( );
}
internal class  : object {
    protected  ;
    protected int ;
    protected int ;
    protected  ;
    protected  ;
    protected Byte[] ;
    protected Byte[] ;
    protected int ;
    public ( ,  ,  , int , int );
    internal ( ,  ,  , int , int , int );
    public virtual int (int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
    protected virtual Byte[] (long , byte , int );
}
internal enum  : Enum {
    public int value__;
    public static  NoReporting;
    public static  BackChannel;
    public static  ErrorPage;
    public static  BackChAndErrPage;
    public static  NWBackChannel;
    public static  NWErrorPage;
    public static  NWBackChAndErrPage;
}
internal class  : object {
    private  ;
    private bool ;
    private RectangleF ;
    private  ;
    private Font ;
    private float ;
    private float ;
    private float ;
    internal ArrayList ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    internal TextOptions ;
    internal  ;
    internal bool ;
    internal bool ;
    internal IWarningCallback ;
    internal bool ;
    public (Rectangle ,  ,  , Font , bool , bool , bool , bool );
    public (RectangleF ,  ,  , Font , bool , bool , bool , bool );
    public (Rectangle ,  ,  , Font , bool , bool );
    public (RectangleF ,  ,  , Font , bool , bool );
    public (RectangleF ,  ,  , Font , bool , float , float , bool );
    public RectangleF ( , bool );
    private int ();
    public void ( , bool );
    internal bool ();
    private Font ( );
    private bool (string );
    private bool (int );
    private Font (string , Font );
    private bool ();
    private bool ();
    internal static bool (string );
    internal static bool (char );
    private void (ArrayList );
    private void (ArrayList );
    private String[] (string , float , Font );
    private void (ArrayList );
    private void (ArrayList , RectangleF , bool , int );
    private void (ArrayList , bool );
    private void (ArrayList , bool );
    private void (ArrayList );
    private void (ArrayList , int , int );
    private float (Font );
    internal void (Color );
}
internal class  :  {
    private MemoryStream ;
    public (Stream );
    public (Stream , int , bool );
    public virtual void ( );
    public virtual Stream ();
    public virtual void ();
}
internal abstract class  : object {
    protected double ;
    protected bool ;
    protected double ;
    public abstract virtual double (double );
    public abstract virtual double (double );
    protected abstract virtual bool (double , double );
    protected abstract virtual bool (double , double );
    protected virtual bool (double );
    public virtual bool (double , double , int );
}
internal class  : object {
    internal ushort ;
    internal byte ;
    internal byte ;
    internal short ;
    internal string ;
    []
internal PivotField ;
    internal string ;
    internal PivotArea ;
    internal short ;
    internal (PivotField );
    internal string ();
    internal void (string );
    internal void ( , CopyOptions );
    internal Int32[] (bool );
    internal int ();
    internal void (int );
    internal static PivotAreaFilter (int );
    internal bool (int );
    internal void (bool , int );
    internal short ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    internal ( );
    public ( , BigInteger );
    public ( );
    public ( );
    public (int , string , string , Byte[] );
    public int ();
    public string ();
    public Byte[] ();
    public string ();
    private  ( );
    private bool ( ,  );
    private Object[] ([] );
    private [] ( );
    public [] ();
    public [] ();
    public BigInteger ();
    public sealed virtual object Clone();
    public bool ( );
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public sealed virtual bool (object );
}
internal class  : object {
    internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal  ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private PlotEmptyCellsType ;
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    public (PlotEmptyCellsType ,  );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public  ();
    public void ( );
    public PlotEmptyCellsType ();
    public void (PlotEmptyCellsType );
    public bool ();
    public object ();
    public RectangleF ();
    public void (RectangleF );
    public sealed virtual int CompareTo(object );
}
internal class  : object {
    private string ;
    private Stream ;
    public (Stream );
    public (string , Stream );
    public (string , Stream , int );
    public string ();
    public Stream ();
    public void ();
}
internal class  : object {
    internal bool ;
    private int ;
    private Int64[] ;
    private Int32[] ;
    private [] ;
    private  ;
    private bool ;
    internal ( , bool , Int64[] );
    public void ();
    internal void (long ,  );
    internal void ( );
    private void (int , object ,  );
    private void (CellArea ,  );
    internal void (int , CellArea );
}
internal class  : object {
    private string ;
    private string ;
    private string ;
    private string ;
    private float ;
    private float ;
    []
private Comment ;
    []
private Worksheet ;
    private Double[] ;
    private float ;
    private float ;
    private float ;
    private float ;
    private TextAlignmentType ;
    private float ;
    private float ;
    []
private Font ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    []
private  ;
    private float ;
    private List`1<> ;
    private bool ;
    internal (Comment , Worksheet , Double[] , float , float ,  , float );
    private void ();
    internal void ();
    private  (string , float , float , Int32& );
    private RectangleF (float , float );
    internal List`1<> ();
    private void (ArrayList );
}
internal class  : object {
    private IList ;
    private  ;
    private  ;
    public ( );
    public ( );
    public void ( ,  );
    public void ( ,  ,  );
    public void ( ,  , DateTime ,  );
    public void ( ,  , DateTime , DateTime ,  );
    public void ( );
    private  ( , [] , DateTime );
    public  (string ,  , [] , DateTime );
    public  (string ,  , [] , DateTime ,  );
    public  ( , [] , DateTime );
    public IEnumerable ();
}
internal class  : object {
    internal string ;
    internal string ;
    internal int ;
    public (string , string , int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal abstract class  : object {
    public static int ( );
    public static int ( );
    public static Byte[] (BigInteger , int );
}
internal class  : object {
    private string ;
    public sealed virtual bool ();
    private void .ctor_2();
}
internal class  : object {
    internal PointF ;
    internal PointF ;
    internal bool ;
    private  ;
    private List`1<> ;
    internal bool ;
    internal bool ;
    public ( , List`1<> );
    internal bool ();
    private void ();
    private RectangleF (RectangleF );
    private PointF[] ( );
    private float (float , float , bool );
    private RectangleF (PointF , PointF );
    private float (PointF );
    private float (float , float , bool );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private Byte[] ;
    private bool ;
    private static Byte[] ;
    private  ;
    private Byte[] ;
    private static ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual Byte[] (Byte[] , int , int );
    private Byte[] (Byte[] );
    private bool (Byte[] , Byte[] );
    private static Byte[] (Byte[] );
}
internal class  : object {
    []
private Workbook ;
    private int ;
    private int ;
    []
private Worksheet ;
    private  ;
    private bool ;
    []
private  ;
    internal ( , HtmlSaveOptions );
    internal void (Stream , HtmlSaveOptions );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( , Worksheet , int );
    private void ( );
    private void ( );
    private void ( );
    private void ( , string , int , string );
    private string (string );
}
internal class  :  {
    internal (ScenarioCollection );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal Shape ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    internal ( ,  );
    public sealed virtual void Dispose();
}
internal class  : object {
    public static  ( , [] ,  ,  );
    public static  ( , [] ,  , int ,  );
    public static  ( , [] ,  , int , int );
    public static  ([] ,  , bool , bool );
    public static  (bool , [] ,  );
    public static  ([] ,  );
    private static  ( ,  ,  );
    public static  ([] ,  );
    internal static  ([] ,  );
    public static  ([] ,  );
    internal static  ( ,  ,  );
    public static  ( , [] ,  );
    private static  ( , double , int );
    public static  ( ,  ,  ,  );
    public static  ( , [] ,  );
    public static  ( , [] ,  ,  );
    public static  ( ,  );
    public static  ([] ,  );
    public static  ([] ,  );
    public static  ([] ,  );
    public static  ([] ,  );
    public static  ([] ,  );
    public static  ([] ,  );
    private static  ( , bool ,  );
    public static  ([] ,  );
    public static  ([] ,  );
    public static  ([] ,  );
    internal static  ([] ,  , bool );
    internal static  ([] ,  , bool );
    internal static  ([] ,  , bool );
    internal static  ([] ,  );
}
internal class  : object {
    private  ;
    internal ( );
    internal void ( );
    [("True")]
private int ( );
    private bool ( );
    private void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    public (string );
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private int ;
    private int ;
    private int ;
    public ( ,  ,  );
    internal ( );
    public virtual  ();
    public virtual  ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    internal ArrayList ;
    internal virtual void ( );
}
internal class  :  {
    internal virtual void ( ,  );
}
internal class  :  {
}
internal class  : object {
    private  ;
    public sealed virtual void ( );
    public sealed virtual int ();
    public sealed virtual void ( , Byte[] , int );
}
internal class  :  {
    protected  ;
    protected  ;
    protected  ;
    internal ( ,  ,  );
    public virtual bool (Worksheet );
    public virtual bool ( );
    public virtual bool (Byte[] , int , int );
    public virtual bool ();
    public virtual  ();
}
internal class  : object {
    internal object ;
    internal ArrayList ;
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : object {
    private string ;
    internal int ;
    internal  ;
    internal int ;
    internal void ( );
    internal void ();
    internal void ();
    private void (int , bool );
    private bool (int );
    internal string ();
    internal void (string );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
internal class  : object {
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool ,  ,  , Byte[] );
    private static Byte[] ( ,  , Byte[] );
    public virtual  ();
    public virtual  ();
    public virtual Byte[] ();
}
internal class  :  {
    internal  ;
    internal  ;
    private int ;
    public (int , int , int , int ,  ,  );
    private ( , Cells );
    public virtual void ( );
    public virtual  (Cells );
    public virtual void (int , int );
    internal virtual int ();
    internal virtual int (int );
    internal virtual int (int );
    internal virtual int (Byte[] , int , int );
    protected virtual void (int , int );
    protected virtual void (int ,  );
    public virtual  (int ,  , int );
    public virtual void (int ,  , int );
    internal virtual int (Byte[] );
    public virtual int (int );
    public virtual  (int );
    public virtual  (object );
    public virtual int (int );
    public virtual void (int , int );
    public virtual byte (int , int );
    public virtual void (int , int , byte );
    public virtual int (int );
    public virtual void (int , int );
    public virtual int (int ,  , int );
    public virtual int (int ,  , int , int , int );
    public virtual  (Cells , RowCollection ,  );
}
internal class  : object {
    private  ;
    private  ;
    private Font ;
    internal ( );
    [("True")]
internal void ( );
    [("True")]
private void ();
    private bool (String[] );
    [("True")]
private void (String[] , int );
    [("True")]
private void (StringBuilder );
    private void (Font , Font , StringBuilder );
}
internal interface  {
    public abstract virtual  ();
}
internal class  : object {
    []
private Workbook ;
    []
private Worksheet ;
    private int ;
    private int ;
    []
private XmlMapCollection ;
    private  ;
    private Hashtable ;
    private Hashtable ;
    private static string ;
    internal (Stream , Workbook , Worksheet , int , int );
    private static ();
    public void (string );
    private void ();
    private void (XmlMap , string );
    private void (string );
    internal void (XmlMap , ListObject );
    private int (Hashtable );
    internal static ListColumn (XmlMap , ListObject , string , int ,  );
    internal static ListColumn (XmlMap , ListObject , string , int ,  , int );
    internal static string (ListObject );
    private void (XmlMap , WorksheetCollection );
    private void (XmlMap , WorksheetCollection );
    private void (XmlMap , WorksheetCollection );
    private static object (string ,  );
    private static void (Cell , object ,  );
    private static XmlMap (ArrayList , Worksheet , int , int );
    private static int (string );
}
internal class  : object {
    internal GraphicsPath ;
    internal Brush ;
    internal  ;
    internal bool ;
    internal (GraphicsPath , Brush ,  , bool );
    public GraphicsPath ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private bool ;
    public ( , bool );
    public sealed virtual  (int );
}
internal class  :  {
    private bool ;
    []
private  ;
    private Stack ;
    private GraphicsPath ;
    private static bool ;
    internal ( );
    private static ();
    public void ( ,  );
    public void ( , Graphics );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    private void ( );
    private void ( );
    private void ( );
    private static PointF[] (ArrayList );
    private float (float );
    private float (float , float );
    private Matrix (Matrix );
    private PointF (PointF );
    private void (Matrix );
    private bool (string );
    public GraphicsPath ();
    public bool ();
    public void (bool );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  );
    public ( ,  ,  ,  );
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal abstract class  :  {
    private Type ;
    public (int );
    public Type ();
    public void (Type );
    public abstract virtual object ();
    public abstract virtual void (object );
    public abstract virtual bool ( );
}
internal class  : object {
    internal static Hashtable ;
    internal static Hashtable ;
    private static ();
    internal static bool (string );
    internal static string (bool );
    internal static string (bool );
    internal static EquationHorizontalJustificationType (string );
    internal static string (EquationHorizontalJustificationType );
    internal static EquationVerticalJustificationType (string );
    internal static string (EquationVerticalJustificationType );
    internal static EquationNodeType (string );
    internal static EquationFractionType (string );
    internal static string (EquationFractionType );
    internal static EquationDelimiterShapeType (string );
    internal static string (EquationDelimiterShapeType );
    internal static EquationLimitLocationType (string );
    internal static string (EquationLimitLocationType );
    internal static EquationCharacterPositionType (string );
    internal static string (EquationCharacterPositionType );
    internal static string (EquationMathematicalOperatorType );
    internal static EquationMathematicalOperatorType (string );
    internal static string (string );
    internal static bool (string );
    internal static string (EquationCombiningCharacterType );
    internal static EquationCombiningCharacterType (string );
}
internal class  :  {
    []
private Workbook ;
    []
private RevisionFormat ;
    internal (RevisionFormat , Workbook );
    private void ();
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private bool ;
    public ( ,  );
    public ( ,  ,  );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public virtual void ();
    protected virtual BigInteger ();
}
internal class  :  {
    private RectangleF ;
    private  ;
    private  ;
    private  ;
    private int ;
    private float ;
    public (int );
    public virtual void ( );
    public virtual void (TextWriter );
    public RectangleF ();
    public void (RectangleF );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public int ();
    public float ();
    public void (float );
}
internal class  : object {
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private int ;
    private int ;
    public (Bitmap );
    public Bitmap (int );
    private void (Int32[] , Int32[] , int );
    private Int32[] (int , int );
    private void (Int32[] , Int32[] , int , int , int );
    private void (Int32[] , Int32[] , int , int , int );
    private void (Int32[] , Int32[] , int , int , int );
}
internal class  : object {
    private  ;
    internal ( );
    public sealed virtual  ();
    public sealed virtual  ();
}
internal class  : object {
    private Byte[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    public void (int );
    public void ( , int );
    public sealed virtual bool (int );
    public sealed virtual int ();
    public void (Byte[] , int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
}
internal interface  {
    public abstract virtual  (object );
}
internal class  : object {
    private static string ;
    private static ();
    public static string (Double[][] );
    public static ArrayList (string );
}
internal class  : object {
    private static int ;
    private static int ;
    private static String[] ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    internal  ;
    internal int ;
    internal Byte[] ;
    internal int ;
    internal int ;
    internal sbyte ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal Byte[] ;
    internal int ;
    internal Int16[] ;
    internal Int16[] ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    private  ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal  ;
    internal  ;
    internal Int16[] ;
    internal Int16[] ;
    internal Int16[] ;
    internal  ;
    internal  ;
    internal  ;
    internal Int16[] ;
    internal Int32[] ;
    internal int ;
    internal int ;
    internal SByte[] ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal short ;
    internal int ;
    private bool ;
    private bool ;
    private static ();
    private void ();
    private void ();
    internal void ();
    internal void (Int16[] , int );
    internal static bool (Int16[] , int , int , SByte[] );
    internal void (Int16[] , int );
    internal int ();
    internal void (int , int , int );
    internal void (Int16[] , int );
    private void (Byte[] , int , int );
    internal void (int , Int16[] );
    internal void (int , int );
    internal void ();
    internal bool (int , int );
    internal void (Int16[] , Int16[] );
    internal void ();
    internal void ();
    internal void ();
    internal void (int , int , bool );
    internal void (bool );
    internal  ( );
    internal void (int , int , bool );
    internal void (int , int , bool );
    private void ();
    internal  ( );
    internal  ( );
    internal int (int );
    internal bool ();
    internal void (bool );
    internal int ( ,  );
    internal int ( ,  , int );
    internal int ( ,  , int ,  );
    internal int ( ,  , int , int ,  );
    internal void ();
    internal int ();
    internal int ( ,  );
    internal int (Byte[] );
    internal int ( );
}
internal class  : object {
    internal  ;
    public ( );
    internal  ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    protected  ;
    protected Byte[] ;
    protected  ;
    protected int ;
    protected int ;
    protected int ;
    public ( ,  , Byte[] , int , int );
    public virtual Byte[] ();
    public virtual int ();
    public virtual Byte[] (long , byte , Byte[] , int , int );
    public virtual Byte[] (long , byte , Byte[] , int , int , int , Byte[] );
    protected virtual int (int );
    protected virtual Byte[] (Byte[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    internal virtual int ();
    internal string ();
    internal string ();
    [("True")]
internal abstract virtual void ( );
    public sealed virtual int CompareTo(object );
}
internal class  :  {
    internal void (Top10Filter );
}
internal class  : object {
    public static int ;
    protected static IList ;
    protected IList ;
    protected int ;
    private static ();
    public (int );
    public (IList , int );
    private static void ( );
    public virtual bool ( );
    public virtual int ();
    protected virtual bool ( ,  );
    protected virtual bool (BigInteger , BigInteger );
    protected virtual bool ( );
    protected virtual bool ( );
}
internal class  : object {
    private UInt32 ;
    private sealed virtual override  ();
    public sealed virtual UInt32 ();
    public sealed virtual void (UInt32 );
}
internal class  : ValueType {
    public static void ( , float , float , float , float ,  );
    public static void ( , PointF , PointF ,  );
    public static void ( , RectangleF ,  );
    public static bool (PointF , RectangleF );
    public static void ( , float , float , float , float ,  );
    public static  ( );
    public static void ( , Point , Point ,  );
    public static void ( , Rectangle ,  );
    public static bool (Point , Rectangle );
    public static bool (PointF , Rectangle );
    public static bool (Point , RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    []
private WorksheetCollection ;
    private  ;
    private  ;
    private bool ;
    internal (WorksheetCollection ,  );
    internal (WorksheetCollection ,  ,  ,  );
    private ( );
    public void ();
    public bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    private bool ();
    private bool ();
}
internal class  :  {
    internal double ;
    internal (double );
    internal virtual object ();
    internal virtual string ();
    internal virtual  ();
    internal virtual double ();
    internal virtual int ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (string );
    public (string , int );
    public int ();
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal void ( );
}
internal class  : object {
    internal static void (Cells , int , int , int , int , AutoFitterOptions );
    internal static int (Cell , Style , ArrayList , int , int , AutoFitterOptions );
    private static object (Cells , int , int );
    private static object (Cells , Hashtable , int , int );
    private static Hashtable (Cells , int , int , int , int );
    private static int (Int32[] , int , int , int , int , int , AutoFitterOptions );
    private static void (Cells , int , int , int , int , AutoFitterOptions );
    private static void (Cells , int , int , int , int , AutoFitterOptions );
    private static int (Int32[] , int , int );
    private static bool (ColumnCollection , int );
    private static int (Style , int );
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , int , int );
    private static Byte[] (int , int );
    public int ();
    public int ();
}
internal class  : object {
    private int ;
    private Int32[] ;
    private [] ;
    internal  ();
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  ();
    public sealed virtual bool ();
    public sealed virtual Int32[] ();
    public void (int , int , long );
    public void (int , int , long );
    public void (long );
    public void (int , int ,  ,  );
    public void (CellArea ,  ,  );
    public void (int , int , int , int , int );
    internal void (int , int , int , int , int );
    internal void (CellArea , bool );
}
internal class  : object {
    []
private  ;
    []
private FontSettingCollection ;
    []
private Hashtable ;
    private int ;
    private StringBuilder ;
    []
private WorksheetCollection ;
    []
private object ;
    private TextParagraph ;
    []
private  ;
    internal (WorksheetCollection ,  , Shape , FontSettingCollection , Hashtable );
    internal void ();
    internal static void ( , FontSettingCollection );
    internal static void ( ,  , FontSettingCollection );
    internal static void ( , ShapeTextAlignment );
    internal static void (string ,  );
    internal static void ( ,  );
    internal static void ( , Geometry );
    internal void (TextParagraph , string );
    internal void (TextParagraph , bool );
    private static bool ( );
    private static bool ( , TextParagraph , Hashtable );
    internal static void ( , TextParagraph );
    internal static  ( );
    internal static string ( , FontSetting , Hashtable );
    internal static void ( , TextRunEquationNode , Hashtable );
    internal static void ( , TextOptions , Hashtable , bool );
    internal static void ( ,  );
    internal static void (PresetWordArtStyle , FontSettingCollection , TextOptions , bool );
}
internal class  :  {
    private int ;
    private int ;
    private Int32[] ;
    internal  ;
    [ObsoleteAttribute("Use ECCurve.FromBigInteger to construct field elements")]
public (int , int , int , int , BigInteger );
    [ObsoleteAttribute("Use ECCurve.FromBigInteger to construct field elements")]
public (int , int , BigInteger );
    internal (int , Int32[] ,  );
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public static void ( ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual  ();
    public int ();
    public int ();
    public int ();
    public int ();
    public int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  : object {
    private bool ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private bool ;
    internal ( ,  ,  , bool );
    internal void (int , float , float );
    internal void ();
    internal void ( );
    internal void ();
    internal void ( );
    internal void ();
    internal void ( );
    internal void ( );
    private void ( , string );
    internal void ( );
    private static string ( );
    private string ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private (string );
    private static ();
}
internal static class  : object {
}
internal class  : object {
    []
internal Worksheet ;
    []
private PageSetup ;
    internal List`1<> ;
    internal bool ;
    internal  ;
    []
internal  ;
    internal (Worksheet ,  );
    internal void ( );
    private void ( );
}
internal abstract class  : object {
    private Byte[] ;
    private int ;
    private long ;
    internal ( );
    protected void ( );
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public void ();
    public virtual void ();
    public sealed virtual int ();
    internal abstract virtual void (Byte[] , int );
    internal abstract virtual void (long );
    internal abstract virtual void ();
    public abstract virtual string ();
    public abstract virtual int ();
    public abstract virtual int (Byte[] , int );
    public abstract virtual  ();
    public abstract virtual void ( );
}
internal class  : object {
    private bool ;
    private bool ;
    private string ;
    private StringBuilder ;
    internal (bool , string , bool , StringBuilder );
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    internal void (ushort , ushort , ushort , string );
    internal void (ushort );
}
internal class  : object {
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
}
internal class  :  {
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
}
internal class  :  {
    private  ;
    private MemoryStream ;
    public ( ,  );
    private static int ( );
    private static string ( );
    private static string (string );
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    private GraphicsPath[] (RectangleF );
    private [] (RectangleF );
    internal void ();
    internal virtual void ();
}
internal class  :  {
    private [] ;
    private bool ;
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public ([] );
    private static [] ([] );
    public static  (object );
    public [] ();
    public virtual  ();
}
internal class  :  {
    private double ;
    public virtual void ();
    public virtual bool (double , double );
    public virtual bool (double , double );
    public virtual  (double , double );
    public virtual  (double , double , int );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal static bool (int );
    internal static double (Byte[] , int );
    internal static double (int );
    internal static string (Byte[] , int );
    internal static string (int );
    private static string (string );
    internal static void (long ,  );
    internal static void (long ,  , bool );
    internal static void (double ,  );
    internal static void (string , string ,  );
    internal static void (string ,  );
    internal static bool (Char[] , int , int ,  , string );
    private static void (double ,  );
    private static bool (double ,  );
    private static bool (double ,  );
    private static bool (long ,  );
    private static void (string ,  );
    private static void (string ,  );
    internal static int (long , Byte[] , int );
    internal static int (double , Byte[] , int );
    internal static int (string , string , Byte[] , int );
    internal static int (string , Byte[] , int );
    private static bool (string );
    private static bool (Char[] , int , int );
    private static int (string , Byte[] , int );
    private static int (string , Byte[] , int );
}
internal class  : object {
    private Stream ;
    private  (Stream );
    public  (Byte[] );
    public ICollection (Byte[] );
    public  (Stream );
    public ICollection (Stream );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal Cell ;
    internal int ;
    internal ( ,  );
    internal void ( , ArrayList );
    internal void (Worksheet );
    internal Byte[] ( , string );
    internal void ( ,  );
    private void ( , Stack`1<> ,  );
    internal void ( , Stack`1<> ,  );
}
internal class  : object {
    internal static string ;
    private static ();
    internal static int (WorksheetCollection , Hashtable , int );
    internal static bool (string );
    internal static bool (WorksheetCollection , string );
    internal static bool (string );
    internal static void (Style , Style , StyleFlag );
    internal static void (Style , Font , StyleFlag );
    internal static void (Font , Font , StyleFlag );
    internal static void (Font , Font , StyleFlag );
    internal static void (Font , Font );
    internal static string (int , string );
    internal static int (string );
    internal static Style (BuiltinStyleType , WorksheetCollection );
    internal static void (Style , int , double );
    internal static void (Style , Style , int );
}
internal class  : object {
    private static  ;
    private  ;
    private  ;
    private string ;
    private static ();
    internal void ( );
    internal void ( );
    internal void (string );
    public sealed virtual  ( ,  );
}
internal class  :  {
    internal (WorksheetCollection );
    internal virtual bool ();
    private void ( );
    internal virtual [] ( ,  ,  );
    private void ( ,  );
    internal virtual Int32[] (string , bool );
    internal virtual void (Byte[] , int );
    internal Byte[] ( , string ,  );
    private Byte[] ( ,  );
    internal Byte[] ( , string , string ,  );
    private static string (string );
    private Byte[] ( , string , string , string ,  );
    private Byte[] ( , string , string , int ,  );
    private [] ( ,  );
    private [] ( , ushort ,  ,  );
    private [] ( , ushort ,  ,  );
    private void ( , string ,  );
    internal virtual  ( , string ,  );
    private [] ( ,  ,  );
    internal virtual Int32[] ( , string );
    private Byte[] ( , string ,  );
    private Byte[] ( , string ,  );
    private bool (string );
    private bool (string );
    private bool (string );
    internal virtual Byte[] ( , string , int , int , int , string ,  ,  );
    internal static Byte[] (WorksheetCollection , int , int , int , string ,  ,  );
    internal virtual Int32[] (string , bool );
    internal static bool (string , Int32& , Int32& , bool , Boolean& , Boolean& , Boolean& , Boolean& );
}
internal interface  {
    public abstract virtual void (int , int );
}
internal class  : object {
    private TextReader ;
    public (TextReader );
    public TextReader ();
    public  ();
    private  (string );
}
internal class  : object {
    public sealed virtual Byte[] (Byte[] );
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    internal  ;
    public ( );
    public (BigInteger );
    public sealed virtual string ();
    public virtual Byte[] ();
    public virtual void ( );
    public virtual BigInteger ();
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual int ();
    public abstract virtual int ();
}
internal class  : object {
    internal  ;
    internal Font ;
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    public ( );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int ();
    public virtual Byte[] (Byte[] , int , int );
}
internal class  : object {
    public static void ( , BuiltInDocumentPropertyCollection );
    internal static void ( ,  , string , IStreamProvider );
    private static void ( ,  );
    public static string (string );
    internal static void ( , FormatConditionCollection , Worksheet );
    private static void (Hashtable , FormatCondition );
    private static Color (string );
    private static void (string , Hashtable );
    [("True")]
public static void ( , CustomDocumentPropertyCollection );
    [("True")]
private static void (string , string , string , CustomDocumentPropertyCollection );
    private static string (string );
    private static bool (char );
}
internal class  :  {
    private ArrayList ;
    internal void ( , int );
    internal void (ushort );
    internal void ();
    [("True")]
internal void (string );
    [("True")]
internal void (string , String[] );
    [("True")]
internal void (string );
    internal void ( );
}
internal class  :  {
    private Hashtable ;
    internal (Workbook , LoadOptions , int );
    internal virtual void ( );
    internal virtual int (Byte[] , int );
    internal virtual int (Style , Byte[] );
    internal virtual void (Font , Byte[] );
    internal virtual void (bool ,  ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual Int32[] ();
}
internal class  : object {
    private MemoryStream ;
    private byte ;
    private byte ;
    private Byte[] ;
    private int ;
    private MemoryStream ;
    private  ;
    private  ;
    internal ( , Byte[] , bool , bool );
    internal bool (Byte[] );
    internal bool (Byte[] , string );
    internal  (Int32[] ,  );
    internal void (bool ,  );
    internal void (string , bool ,  );
    private void ();
    internal MemoryStream ();
    internal byte ();
    internal byte ();
    internal MemoryStream ();
    internal  ();
    internal  ();
}
internal class  :  {
    internal void (FormatCondition );
}
internal class  :  {
    private BigInteger ;
    public (BigInteger ,  );
    private static BigInteger (BigInteger ,  );
    public BigInteger ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal ( );
}
internal class  : object {
    private PointF ;
    private StringFormat ;
    private float ;
    private float ;
    private float ;
    public void ( , EquationNodeParagraph , int , int );
    internal void ( , EquationNodeParagraph , int , int );
    private void (EquationNode );
    private void ( , EquationNode , int , int , int );
    private float (int , int );
    private float (int , int , bool );
    private void ( , TextRunEquationNode , int , int , int );
    private int (TextRunEquationNode , int );
    private int (char );
    private float (int );
    private void (float , float );
    private void ( , EquationNode , int , int , int );
    private float (Font );
    private Font (float , Font );
    private void ( , Color , PointF , float , float , float );
    private SizeF (string ,  , Font );
    private float (float );
    private string (string );
    private void ( , TextRunEquationNode , int , int );
    private Color (Color );
    private Font (EquationNode );
    private Font ();
    private TextOptions (EquationNode );
    private Font (TextOptions );
}
internal static class  : object {
    public static bool (string , Guid& );
}
internal class  : object {
    private int ;
    private int ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    public int ();
    public void (int );
    public int ();
    public void (int );
    public UInt32 ();
    public void (UInt32 );
    public UInt32 ();
    public void (UInt32 );
    public UInt32 ();
    public void (UInt32 );
    public UInt32 ();
    public void (UInt32 );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void (ColorFilter );
}
internal class  : object {
    private  ;
    private Byte[] ;
    public ( );
    public sealed virtual void (bool ,  );
    public sealed virtual string ();
    public sealed virtual byte (byte );
    public sealed virtual void (Byte[] , int , int , Byte[] , int );
    public sealed virtual void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private float ;
    private  ;
    private  ;
    private bool ;
    private  ;
    internal  ();
    internal void ( );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public float ();
    public void (float );
    internal  ();
    public  ();
    public  ();
    public void ( );
    internal Brush (GraphicsPath ,  , bool , float );
    private ColorBlend (float , bool );
    private GraphicsPath (RectangleF );
    internal bool ( );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public (Byte[] ,  , int ,  );
    public ( ,  ,  ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
}
internal class  :  {
    internal ( );
}
internal interface  {
    public abstract virtual void (Byte[] );
    public abstract virtual void (long , Byte[] );
}
internal class  : ValueType {
    public static void ( ,  );
    public static void ( ,  );
    private static void ( ,  , float , float , float , float , float );
    private static void ( , Brush , float , float , float , float , float );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    public virtual int ReadByte();
    public virtual void WriteByte(byte );
    public virtual int Read(Byte[] , int , int );
    public virtual void Write(Byte[] , int , int );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    [("False")]
private sealed virtual override void ();
    public virtual void Close();
}
internal class  : object {
}
internal class  :  {
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal Byte[] ;
    internal OleObject ;
    internal (bool );
}
internal class  : object {
    public static  ( ,  );
    private static  ( , int );
}
internal class  :  {
    protected virtual  (Stream );
    protected virtual string ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal virtual void ( , float , float , float , float );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    public static  ( ,  );
    public static  ( ,  , Byte[] , UInt32 , Byte[] , UInt32 );
    public static  ( ,  , Byte[] , UInt32 , Byte[] , UInt32 );
    public static  ( , Byte[] , UInt32 , UInt32 , Byte[] , UInt32 , UInt32 );
    public static  ( , Byte[] , UInt32 , UInt32 , Byte[] , UInt32 , UInt32 );
    private static  ( );
    private static  ( ,  , Byte[] , UInt32 , Byte[] , UInt32 );
    private static  ( ,  , Byte[] , UInt32 , Byte[] , UInt32 );
    private static  ( , Byte[] , UInt32 , Byte[] , UInt32 );
    private static  ( , Byte[] , UInt32 , Byte[] , UInt32 );
    private static  ( , Byte[] , UInt32 , UInt32 , Byte[] , UInt32 , UInt32 );
    private static  ( , Byte[] , UInt32 , UInt32 , Byte[] , UInt32 , UInt32 );
    private static  ( , Byte[] , UInt32 , UInt32 , Byte[] , UInt32 , UInt32 );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private PivotTable ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal (PivotTable , int );
    internal virtual void ( );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    private void (Stream , Int32[] );
    private void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (Stream );
    internal void (PivotArea , Stream );
    internal void (PivotArea , Stream );
    internal void (Stream );
    internal void (PivotField , Stream );
    internal void (PivotField , Stream );
    internal void (PivotField , Stream );
    private int (PivotField );
}
internal abstract class  : object {
    public static string (byte );
    public static string (byte );
    public static bool (byte );
    public static bool (byte );
}
internal class  : object {
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  ,  ,  ,  ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    public virtual byte ();
    public virtual  ();
    protected virtual  ();
    internal void (int );
    internal void (int );
    private int ();
    private int ();
    public virtual string ();
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
}
internal class  :  {
    internal void (PivotFieldCollection );
}
internal class  : object {
    private static Byte[] ;
    private static ();
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int , int , Byte[] , int );
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int , int , Byte[] , int );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private static  ;
    private Byte[] ;
    public byte  { get; }
    private (Byte[] );
    private static ();
    internal static  (Byte[] );
    public static  ();
    public int ();
    public bool ();
    public Byte[] ();
    public string ();
    public static  (string );
    public static  (Byte[] );
    public static void (Byte[] , int , Byte[] , int , int );
    public static void (Byte[] , int , Byte[] , int , int );
    public static  (Byte[] , int , int );
    public static  (string , Encoding );
    public static  (string );
    public byte (int );
    public string (Encoding );
    public string ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public bool ( );
    internal void ( );
    public void (Byte[] , int );
    public void (Stream );
}
internal class  : object {
    internal int ;
    internal string ;
    []
internal PivotTable ;
    []
internal  ;
    internal bool ;
    internal ( );
    internal ( , PivotTable );
    internal void ( );
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
}
internal enum  : Enum {
    public int value__;
    public static  ContentType;
    public static  Digest;
    public static  Signature;
    public static  DigestAlgorithmIdentifier;
}
internal abstract class  :  {
    protected bool ;
    public ( ,  );
    public sealed virtual  ();
    public virtual bool ();
    public virtual void (bool );
}
internal class  : object {
    internal Hashtable ;
    private int ;
    internal static  (string , string , string );
    internal int ();
    internal void ( );
    internal void (ArrayList , int );
    internal void (Hashtable );
    internal  (string , string , string , string );
    internal  (string , string , string );
    internal  (string , string );
}
internal abstract class  : object {
    private static Int32[] ;
    private static ();
    public static void (Int32[] , Int32[] , Int32[] );
    public static void (Int32[] );
    public static void (Int32[] , int );
    public static void (Int32[] , Int32[] , Int32[] , Int32[] );
    public static void (Int32[] );
    public static void (int , Int32[] , int , Int32[] , int );
    public static void (int , Int32[] );
    public static void (Int32[] , int , Int32[] , int );
    public static Int32[] ();
    public static Int32[] (int );
    public static void (int , Int32[] , Int32[] );
    public static void (Byte[] , int , Int32[] );
    private static void (Byte[] , int , Int32[] , int );
    private static UInt32 (Byte[] , int );
    public static void (Int32[] , Byte[] , int );
    private static void (Int32[] , int , Byte[] , int );
    private static void (UInt32 , Byte[] , int );
    public static void (Int32[] , Int32[] );
    public static int (Int32[] );
    public static bool (Int32[] );
    public static void (Int32[] , int , Int32[] );
    public static void (Int32[] , Int32[] , Int32[] );
    public static void (Int32[] , Int32[] );
    public static void (Int32[] );
    public static void (Int32[] );
    private static void (Int32[] , Int32[] , Int32[] );
    private static void (Int32[] , int );
    public static void (Int32[] , Int32[] );
    public static void (Int32[] , int , Int32[] );
    public static bool (Int32[] , Int32[] , Int32[] );
    public static void (Int32[] , Int32[] , Int32[] );
    public static void (Int32[] );
    public static void (Int32[] );
}
internal class  : object {
    internal Hashtable ;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    public Char[] ;
    public int ;
    public int ;
    public int ;
    public UInt32 ;
    public int ;
    public int ;
    public int ;
    public int ;
    public int ;
    public UInt32 ;
    public int ;
    public UInt32 ;
    public Byte[] ;
    public Byte[] ;
    public (Byte[] );
}
internal class  :  {
    private SizeF ;
    private float ;
    private float ;
    private bool ;
    private  ;
    private PointF ;
    private PointF ;
    public PointF ();
    public void (PointF );
    public PointF ();
    public void (PointF );
    public SizeF ();
    public void (SizeF );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public  ();
    public void ( );
    internal virtual string (string );
}
internal class  : object {
    private  ;
    public (int , int );
    public ( );
    public sealed virtual void ( );
    public sealed virtual  ();
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual int ();
    public void ( );
    public sealed virtual void ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
}
internal class  : object {
    private string ;
    private bool ;
    private GlobalizationSettings ;
    private IComparable ;
    public (string , bool , GlobalizationSettings );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual bool (string );
    public sealed virtual bool ();
    public sealed virtual string ();
    public sealed virtual bool ( );
    public sealed virtual int (string );
    public sealed virtual int ( );
}
internal class  :  {
    internal void ( );
    internal void (ChartType );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal ( );
    internal void ( );
    internal  ();
    public  (int );
    public  ( );
    internal int ( );
}
internal abstract class  : object {
    public abstract virtual bool ( );
    public virtual int ();
    public virtual  ();
    public virtual bool ();
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal ( ,  ,  );
    internal void ();
    internal void ();
    internal void ();
    internal static void ( ,  );
    private static void ( , ReflectionEffect );
    private static void ( ,  );
    private static void ( ,  );
    private static bool (CellsColor );
    private static void ( ,  );
    private static void ( , GlowEffect );
    private static void ( ,  );
    internal static void ( ,  );
    internal static void ( , ThreeDFormat );
    private static void ( , ThreeDFormat );
    private static void ( , ThreeDFormat );
    private static void ( , Bevel , string );
    internal void (FillType , FillFormat );
    internal static void ( , TextureFill , string );
    private static void ( , TextureFill );
    private static void ( , TextureFill );
    internal static void ( , PatternFill , Workbook );
    internal static void ( , GradientFill , Workbook );
    private static void ( ,  , string );
    internal static void ( , SolidFill , Workbook );
    internal void ();
    private void ( , LineFormat );
    private void ( , LineFormat , bool );
    private void ( , LineFormat );
    internal static void ( ,  , Workbook , bool );
    internal static void ( ,  , int , Workbook );
    private static bool ( , int );
    private static string ( );
    internal static void ( ,  );
    internal static void ( , ThreeDFormat );
    private static void ( ,  );
    private static void ( ,  , string , string );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( , string , string );
    private static void ( , string , string , string );
}
internal class  : object {
    private static UInt64[] ;
    private static ();
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    private static void (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] );
    public static UInt32 (UInt64[] );
    protected static void (UInt64[] );
    protected static void (UInt64[] , UInt64[] , UInt64[] );
    protected static void (ulong , ulong , UInt64[] , int );
    protected static void (UInt64[] , UInt64[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal abstract class  :  {
    protected  ;
    protected  ;
    protected ( ,  );
    protected ( , int ,  );
    internal static  ( ,  );
    protected abstract virtual bool ();
    protected abstract virtual bool ();
    public virtual bool ();
    public virtual void (bool );
    public virtual  ();
    public virtual  ();
    public virtual  (Double[] ,  ,  );
    public virtual  (Double[][] ,  ,  );
}
internal class  :  {
    internal void (int );
    internal void (Axis );
}
internal class  : object {
    private  ;
    private  ;
    private string ;
    private DateTime ;
    private  ;
    internal ( ,  );
    internal void (int , int );
    internal void ( , int );
    private void ( , int );
}
internal class  : object {
    private Byte[] ;
    private Encoding ;
    public (Byte[] );
    public (Byte[] , Encoding );
    public Byte[] ();
    public Encoding ();
}
internal interface  {
    public abstract virtual Stream ();
    public abstract virtual object ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( );
    public static  ( );
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual object ();
    public virtual  ();
    public virtual  (int , int );
    public virtual  (int , int , int , int );
    internal virtual  (int , int );
    internal virtual  (int , int ,  );
    internal virtual object (int , int ,  );
    internal virtual void (int , int , StringBuilder ,  );
    protected virtual object ( );
    public virtual  ( , int );
    public virtual  ( );
    public virtual  ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual bool ( );
    public virtual  ( );
}
internal class  : object {
    internal int ;
    internal int ;
    internal string ;
}
internal class  :  {
    private int ;
    private  ;
    public ( ,  );
    public static  ( );
    public virtual int ();
    public virtual void (int );
    public virtual  ();
    public virtual void ( );
    protected virtual void ( );
    public virtual object ();
    public virtual string ToString();
}
internal class  : object {
    internal static object ;
    internal  ;
    internal ArrayList ;
    internal ArrayList ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal  ;
    internal int ;
    internal bool ();
    internal bool ();
    internal  (string );
    internal  ();
    internal void (TextWriter );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private bool ;
    public (bool );
    private void ( , char , Byte[] , long );
    public Stream (Stream , char , string , long , DateTime );
    public Stream (Stream , char , string , DateTime , Byte[] );
    public Stream (Stream , char , FileInfo );
    public sealed virtual void ();
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
}
internal class  : List`1<> {
    internal  ( );
    internal void (int ,  );
    internal void (int , int ,  );
    internal void ( ,  );
}
internal class  : object {
    private static BigInteger ;
    private static Int32[][] ;
    private static Int32[] ;
    private static BigInteger[] ;
    private static ();
    private static BigInteger[] (Int32[] );
    internal static BigInteger[] (int , int ,  );
    internal static BigInteger (BigInteger , BigInteger ,  );
}
internal class  : object {
    private ArrayList ;
    []
private Cells ;
    private Hashtable ;
    public (Cells );
    internal Hashtable ();
    internal void (int );
    private void ( );
    internal void ( );
    internal  (int );
    internal int ();
    internal  (int );
    internal void (int );
    internal void ( );
}
internal abstract class  : object {
    public abstract virtual Color (Color );
    public Color[] (Color[] );
}
internal class  : object {
    internal void ( );
}
internal abstract class  : object {
    private  ;
    private DigitalSignatureCollection ;
    public bool ();
    public DigitalSignatureCollection ();
    private string ( );
    private DateTime ( );
    protected bool (string , String& , DateTime& , XAdESType& );
    [("True")]
protected abstract virtual bool ( );
    protected bool (Byte[] , Byte[] );
    protected bool (string , & );
    [("True")]
protected abstract virtual bool ();
    protected  ( );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private int ;
    public (Byte[] , Byte[] , int );
    public Byte[] ();
    public Byte[] ();
    public int ();
}
internal class  : object {
    internal static Double[] (ArrayList );
    internal static object (ICollection );
    internal static Hashtable ();
    internal static void (ArrayList , Object[] );
    internal static void (List`1<string> , IEnumerable`1<string> );
    internal static void (List`1<string> , int , IEnumerable`1<string> );
}
internal class  :  {
    internal ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
}
internal class  : object {
    private string ;
    public sealed virtual string (string );
    public sealed virtual void (WebRequest , Stream );
    public sealed virtual void (HttpWebResponse , Stream );
    private void (HttpWebResponse , Stream );
}
internal class  :  {
    private Array ;
    private Int32[] ;
    public Array ();
    public void (Array );
    public Int32[] ();
    public void (Int32[] );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
    public virtual bool ( );
}
internal class  : Shape {
    internal (ShapeCollection );
}
internal class  :  {
    internal void (CustomFilter );
    internal void (AutoFilter , FilterOperatorType , bool , object );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual void ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual void (byte , byte , string , Exception );
    public abstract virtual void (byte , byte );
    public abstract virtual void ();
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public sealed virtual  (int );
    public sealed virtual void (Color , float );
    internal  (int );
    internal bool ( );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  ,  , [] );
    public ( ,  ,  );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    private string ;
    private  ;
    public string ();
    public void (string );
    public  ();
    public void ( );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private Byte[] ;
    private UInt32[][][] ;
    public sealed virtual void (Byte[] );
    public sealed virtual void (Byte[] );
}
internal class  :  {
    internal ( ,  );
    internal  ();
    public  (int );
    internal  ();
    private int ( );
    public virtual  (double );
    internal ArrayList ();
}
[GuidAttribute("ebc25cf6-9120-4283-b972-0e5520d0000D")]
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
internal class  : object {
    public Byte[] ;
    public int ;
    public int ;
    public long ;
    public Byte[] ;
    public int ;
    public int ;
    public long ;
    public string ;
    internal  ;
    internal  ;
    internal UInt32 ;
    public  ;
    public int ;
    public  ;
    public ( );
    public int ();
    public int ();
    public int (bool );
    public int (int );
    public int (int , bool );
    public int ( );
    public int ();
    public int ();
    public int ();
    public int ( );
    public int ( , bool );
    public int ( , int );
    public int ( , int , bool );
    private int (bool );
    public int ( );
    public int ();
    public void ();
    public int ( ,  );
    public int (Byte[] );
    internal void ();
    internal int (Byte[] , int , int );
}
internal interface  {
    public abstract virtual int (string , bool );
    public abstract virtual int (string , char );
    public abstract virtual int (string , string );
    public abstract virtual bool (string );
    public abstract virtual int (Char[] );
    public abstract virtual bool ();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal Byte[] ;
    internal ActiveXControl ;
    internal (bool );
    internal bool ();
    internal void (bool );
    internal Byte[] (Shape , Workbook );
    internal ActiveXControl (Shape , Workbook );
    internal bool ();
    internal void (Shape ,  , CopyOptions );
}
internal abstract class  : object {
    protected  ;
    protected  ;
    protected  ;
    protected BigInteger ;
    protected BigInteger ;
    protected int ;
    protected  ;
    protected  ;
    protected ( );
    public static Int32[] ();
    public abstract virtual int ();
    public abstract virtual  (BigInteger );
    public abstract virtual bool (BigInteger );
    public virtual  ();
    public virtual  (BigInteger , BigInteger );
    public virtual  (BigInteger , BigInteger , bool );
    public virtual  (BigInteger , BigInteger );
    public virtual  (BigInteger , BigInteger , bool );
    protected abstract virtual  ();
    protected internal abstract virtual  ( ,  , bool );
    protected internal abstract virtual  ( ,  , [] , bool );
    protected virtual  ();
    public virtual bool (int );
    public virtual  ( , string );
    public virtual  ( , string ,  );
    public virtual  ( );
    public virtual void ([] );
    public virtual void ([] , int , int ,  );
    public abstract virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual int ();
    public virtual  ([] , int , int );
    protected virtual void ( );
    protected virtual void ([] );
    protected virtual void ([] , int , int );
    public virtual bool ( );
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    protected abstract virtual  (int , BigInteger );
    public virtual  ();
    public virtual  ();
    public virtual  (Byte[] );
}
internal class  :  {
    private  ;
    []
private  ;
    private  ;
    internal ( ,  );
    public virtual void ( );
    private void ( );
    private void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal (Stream , int );
    internal void (bool );
    private bool ();
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    private int ();
}
internal class  : object {
    private bool ;
    private ulong ;
    private ushort ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    private ushort ;
    private  ;
    internal Byte[] ;
    internal Byte[] ;
    internal string ;
    public (string , Byte[] , Byte[] , Byte[] , ushort );
    public (ushort );
    internal static  ();
    private void ( , ushort );
    internal Byte[] (Byte[] , ushort , ushort , UInt32 );
    private void (ulong , ulong , ushort );
    private ushort ( , Byte[] , ushort );
    internal bool (string , Byte[] , Byte[] , Byte[] );
    private UInt32 (ulong );
    private ushort (ulong );
    internal Byte[] ();
}
internal class  : object {
    private int ;
    private Byte[] ;
    private int ;
    []
private  ;
    []
private Workbook ;
    []
private RevisionLog ;
    []
private  ;
    internal (Workbook ,  );
    internal static  (Byte[] , int );
    internal void ( , RevisionLog );
    private Revision ();
    internal Revision ();
    internal Revision ();
    internal Revision ();
    internal Revision ();
    private static Byte[] (Byte[] , int );
    internal Revision ();
    internal Revision ();
    internal Revision ();
    internal Revision ();
    internal Revision ();
    internal Revision ();
    internal Revision ();
    private  ();
    private int (Font , int );
    internal static  (int );
}
internal abstract class  : object {
    public static bool (byte );
}
internal class  : object {
    private string ;
    private string ;
    private string ;
    private bool ;
    public (string , string , string , bool );
    public string ();
    public string ();
    public string ();
    public bool ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private PointF ;
    [DebuggerBrowsableAttribute("0")]
private PointF ;
    public (float , float , PointF , PointF );
    public float ();
    public float ();
    public PointF ();
    public PointF ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
    public static  COUNT;
    public static  IF;
    public static  ISNA;
    public static  ISERROR;
    public static  SUM;
    public static  AVERAGE;
    public static  MIN;
    public static  MAX;
    public static  ROW;
    public static  COLUMN;
    public static  NA;
    public static  NPV;
    public static  STDEV;
    public static  DOLLAR;
    public static  FIXED;
    public static  SIN;
    public static  COS;
    public static  TAN;
    public static  ATAN;
    public static  PI;
    public static  SQRT;
    public static  EXP;
    public static  LN;
    public static  LOG10;
    public static  ABS;
    public static  INT;
    public static  SIGN;
    public static  ROUND;
    public static  LOOKUP;
    public static  INDEX;
    public static  REPT;
    public static  MID;
    public static  LEN;
    public static  VALUE;
    public static  TRUE;
    public static  FALSE;
    public static  AND;
    public static  OR;
    public static  NOT;
    public static  MOD;
    public static  DCOUNT;
    public static  DSUM;
    public static  DAVERAGE;
    public static  DMIN;
    public static  DMAX;
    public static  DSTDEV;
    public static  VAR;
    public static  DVAR;
    public static  TEXT;
    public static  LINEST;
    public static  TREND;
    public static  LOGEST;
    public static  GROWTH;
    public static  GOTO;
    public static  HALT;
    public static  RETURN;
    public static  PV;
    public static  FV;
    public static  NPER;
    public static  PMT;
    public static  RATE;
    public static  MIRR;
    public static  IRR;
    public static  RAND;
    public static  MATCH;
    public static  DATE;
    public static  TIME;
    public static  DAY;
    public static  MONTH;
    public static  YEAR;
    public static  WEEKDAY;
    public static  HOUR;
    public static  MINUTE;
    public static  SECOND;
    public static  NOW;
    public static  AREAS;
    public static  ROWS;
    public static  COLUMNS;
    public static  OFFSET;
    public static  ABSREF;
    public static  RELREF;
    public static  ARGUMENT;
    public static  SEARCH;
    public static  TRANSPOSE;
    public static  ERROR;
    public static  STEP;
    public static  TYPE;
    public static  ECHO;
    public static  SET_NAME;
    public static  CALLER;
    public static  DEREF;
    public static  WINDOWS;
    public static  DOCUMENTS;
    public static  ACTIVE_CELL;
    public static  SELECTION;
    public static  RESULT;
    public static  ATAN2;
    public static  ASIN;
    public static  ACOS;
    public static  CHOOSE;
    public static  HLOOKUP;
    public static  VLOOKUP;
    public static  LINKS;
    public static  INPUT;
    public static  ISREF;
    public static  GET_FORMULA;
    public static  GET_NAME;
    public static  SET_VALUE;
    public static  LOG;
    public static  EXEC;
    public static  CHAR;
    public static  LOWER;
    public static  UPPER;
    public static  PROPER;
    public static  LEFT;
    public static  RIGHT;
    public static  EXACT;
    public static  TRIM;
    public static  REPLACE;
    public static  SUBSTITUTE;
    public static  CODE;
    public static  NAMES;
    public static  DIRECTORY;
    public static  FIND;
    public static  CELL;
    public static  ISERR;
    public static  ISTEXT;
    public static  ISNUMBER;
    public static  ISBLANK;
    public static  T;
    public static  N;
    public static  FOPEN;
    public static  FCLOSE;
    public static  FSIZE;
    public static  FREADLN;
    public static  FREAD;
    public static  FWRITELN;
    public static  FWRITE;
    public static  FPOS;
    public static  DATEVALUE;
    public static  TIMEVALUE;
    public static  SLN;
    public static  SYD;
    public static  DDB;
    public static  GET_DEF;
    public static  REFTEXT;
    public static  TEXTREF;
    public static  INDIRECT;
    public static  REGISTER;
    public static  CALL;
    public static  ADD_BAR;
    public static  ADD_MENU;
    public static  ADD_COMMAND;
    public static  ENABLE_COMMAND;
    public static  CHECK_COMMAND;
    public static  RENAME_COMMAND;
    public static  SHOW_BAR;
    public static  DELETE_MENU;
    public static  DELETE_COMMAND;
    public static  GET_CHART_ITEM;
    public static  DIALOG_BOX;
    public static  CLEAN;
    public static  MDETERM;
    public static  MINVERSE;
    public static  MMULT;
    public static  FILES;
    public static  IPMT;
    public static  PPMT;
    public static  COUNTA;
    public static  CANCEL_KEY;
    public static  FOR;
    public static  WHILE;
    public static  BREAK;
    public static  NEXT;
    public static  INITIATE;
    public static  REQUEST;
    public static  POKE;
    public static  EXECUTE;
    public static  TERMINATE;
    public static  RESTART;
    public static  HELP;
    public static  GET_BAR;
    public static  PRODUCT;
    public static  FACT;
    public static  GET_CELL;
    public static  GET_WORKSPACE;
    public static  GET_WINDOW;
    public static  GET_DOCUMENT;
    public static  DPRODUCT;
    public static  ISNONTEXT;
    public static  GET_NOTE;
    public static  NOTE;
    public static  STDEVP;
    public static  VARP;
    public static  DSTDEVP;
    public static  DVARP;
    public static  TRUNC;
    public static  ISLOGICAL;
    public static  DCOUNTA;
    public static  DELETE_BAR;
    public static  UNREGISTER;
    public static  USDOLLAR;
    public static  FINDB;
    public static  SEARCHB;
    public static  REPLACEB;
    public static  LEFTB;
    public static  RIGHTB;
    public static  MIDB;
    public static  LENB;
    public static  ROUNDUP;
    public static  ROUNDDOWN;
    public static  ASC;
    public static  WIDECHAR;
    public static  RANK;
    public static  ADDRESS;
    public static  DAYS360;
    public static  TODAY;
    public static  VDB;
    public static  ELSE;
    public static  ELSE_IF;
    public static  END_IF;
    public static  FOR_CELL;
    public static  MEDIAN;
    public static  SUMPRODUCT;
    public static  SINH;
    public static  COSH;
    public static  TANH;
    public static  ASINH;
    public static  ACOSH;
    public static  ATANH;
    public static  DGET;
    public static  CREATE_OBJECT;
    public static  VOLATILE;
    public static  LAST_ERROR;
    public static  CUSTOM_UNDO;
    public static  CUSTOM_REPEAT;
    public static  FORMULA_CONVERT;
    public static  GET_LINK_INFO;
    public static  TEXT_BOX;
    public static  INFO;
    public static  GROUP;
    public static  GET_OBJECT;
    public static  DB;
    public static  PAUSE;
    public static  RESUME;
    public static  FREQUENCY;
    public static  ADD_TOOLBAR;
    public static  DELETE_TOOLBAR;
    public static  USER_DEFINED;
    public static  RESET_TOOLBAR;
    public static  EVALUATE;
    public static  GET_TOOLBAR;
    public static  GET_TOOL;
    public static  SPELLING_CHECK;
    public static  ERROR_TYPE;
    public static  APP_TITLE;
    public static  WINDOW_TITLE;
    public static  SAVE_TOOLBAR;
    public static  ENABLE_TOOL;
    public static  PRESS_TOOL;
    public static  REGISTER_ID;
    public static  GET_WORKBOOK;
    public static  AVEDEV;
    public static  BETADIST;
    public static  GAMMALN;
    public static  BETAINV;
    public static  BINOMDIST;
    public static  CHIDIST;
    public static  CHIINV;
    public static  COMBIN;
    public static  CONFIDENCE;
    public static  CRITBINOM;
    public static  EVEN;
    public static  EXPONDIST;
    public static  FDIST;
    public static  FINV;
    public static  FISHER;
    public static  FISHERINV;
    public static  FLOOR;
    public static  GAMMADIST;
    public static  GAMMAINV;
    public static  CEILING;
    public static  HYPGEOMDIST;
    public static  LOGNORMDIST;
    public static  LOGINV;
    public static  NEGBINOMDIST;
    public static  NORMDIST;
    public static  NORMSDIST;
    public static  NORMINV;
    public static  NORMSINV;
    public static  STANDARDIZE;
    public static  ODD;
    public static  PERMUT;
    public static  POISSON;
    public static  TDIST;
    public static  WEIBULL;
    public static  SUMXMY2;
    public static  SUMX2MY2;
    public static  SUMX2PY2;
    public static  CHITEST;
    public static  CORREL;
    public static  COVAR;
    public static  FORECAST;
    public static  FTEST;
    public static  INTERCEPT;
    public static  PEARSON;
    public static  RSQ;
    public static  STEYX;
    public static  SLOPE;
    public static  TTEST;
    public static  PROB;
    public static  DEVSQ;
    public static  GEOMEAN;
    public static  HARMEAN;
    public static  SUMSQ;
    public static  KURT;
    public static  SKEW;
    public static  ZTEST;
    public static  LARGE;
    public static  SMALL;
    public static  QUARTILE;
    public static  PERCENTILE;
    public static  PERCENTRANK;
    public static  MODE;
    public static  TRIMMEAN;
    public static  TINV;
    public static  MOVIE_COMMAND;
    public static  GET_MOVIE;
    public static  CONCATENATE;
    public static  POWER;
    public static  PIVOT_ADD_DATA;
    public static  GET_PIVOT_TABLE;
    public static  GET_PIVOT_FIELD;
    public static  GET_PIVOT_ITEM;
    public static  RADIANS;
    public static  DEGREES;
    public static  SUBTOTAL;
    public static  SUMIF;
    public static  COUNTIF;
    public static  COUNTBLANK;
    public static  SCENARIO_GET;
    public static  OPTIONS_LISTS_GET;
    public static  ISPMT;
    public static  DATEDIF;
    public static  DATESTRING;
    public static  NUMBERSTRING;
    public static  ROMAN;
    public static  OPEN_DIALOG;
    public static  SAVE_DIALOG;
    public static  VIEW_GET;
    public static  GETPIVOTDATA;
    public static  HYPERLINK;
    public static  PHONETIC;
    public static  AVERAGEA;
    public static  MAXA;
    public static  MINA;
    public static  STDEVPA;
    public static  VARPA;
    public static  STDEVA;
    public static  VARA;
    public static  BAHTTEXT;
    public static  THAIDAYOFWEEK;
    public static  THAIDIGIT;
    public static  THAIMONTHOFYEAR;
    public static  THAINUMSOUND;
    public static  THAINUMSTRING;
    public static  THAISTRINGLENGTH;
    public static  ISTHAIDIGIT;
    public static  ROUNDBAHTDOWN;
    public static  ROUNDBAHTUP;
    public static  THAIYEAR;
    public static  RTD;
    public static  CUBEVALUE;
    public static  CUBEMEMBER;
    public static  CUBEMEMBERPROPERTY;
    public static  CUBERANKEDMEMBER;
    public static  SPECIAL_BASE_ADDINFIRST;
    public static  HEX2BIN;
    public static  HEX2DEC;
    public static  HEX2OCT;
    public static  DEC2BIN;
    public static  DEC2HEX;
    public static  DEC2OCT;
    public static  OCT2BIN;
    public static  OCT2HEX;
    public static  OCT2DEC;
    public static  BIN2DEC;
    public static  BIN2OCT;
    public static  BIN2HEX;
    public static  IMSUB;
    public static  IMDIV;
    public static  IMPOWER;
    public static  IMABS;
    public static  IMSQRT;
    public static  IMLN;
    public static  IMLOG2;
    public static  IMLOG10;
    public static  IMSIN;
    public static  IMCOS;
    public static  IMEXP;
    public static  IMARGUMENT;
    public static  IMCONJUGATE;
    public static  IMAGINARY;
    public static  IMREAL;
    public static  COMPLEX;
    public static  IMSUM;
    public static  IMPRODUCT;
    public static  SERIESSUM;
    public static  FACTDOUBLE;
    public static  SQRTPI;
    public static  QUOTIENT;
    public static  DELTA;
    public static  GESTEP;
    public static  ISEVEN;
    public static  ISODD;
    public static  MROUND;
    public static  ERF;
    public static  ERFC;
    public static  BESSELJ;
    public static  BESSELK;
    public static  BESSELY;
    public static  BESSELI;
    public static  XIRR;
    public static  XNPV;
    public static  PRICEMAT;
    public static  YIELDMAT;
    public static  INTRATE;
    public static  RECEIVED;
    public static  DISC;
    public static  PRICEDISC;
    public static  YIELDDISC;
    public static  TBILLEQ;
    public static  TBILLPRICE;
    public static  TBILLYIELD;
    public static  PRICE;
    public static  YIELD;
    public static  DOLLARDE;
    public static  DOLLARFR;
    public static  NOMINAL;
    public static  EFFECT;
    public static  CUMPRINC;
    public static  CUMIPMT;
    public static  EDATE;
    public static  EOMONTH;
    public static  YEARFRAC;
    public static  COUPDAYBS;
    public static  COUPDAYS;
    public static  COUPDAYSNC;
    public static  COUPNCD;
    public static  COUPNUM;
    public static  COUPPCD;
    public static  DURATION;
    public static  MDURATION;
    public static  ODDLPRICE;
    public static  ODDLYIELD;
    public static  ODDFPRICE;
    public static  ODDFYIELD;
    public static  RANDBETWEEN;
    public static  WEEKNUM;
    public static  AMORDEGRC;
    public static  AMORLINC;
    public static  CONVERT;
    public static  ACCRINT;
    public static  ACCRINTM;
    public static  WORKDAY;
    public static  NETWORKDAYS;
    public static  GCD;
    public static  MULTINOMIAL;
    public static  LCM;
    public static  FVSCHEDULE;
    public static  SPECIAL_BASE_ADDINLAST;
    public static  CUBEKPIMEMBER;
    public static  CUBESET;
    public static  CUBESETCOUNT;
    public static  IFERROR;
    public static  COUNTIFS;
    public static  SUMIFS;
    public static  AVERAGEIF;
    public static  AVERAGEIFS;
    public static  SPECIAL_BASE_XLFN;
    public static  DAYS;
    public static  WORKDAY_INTL;
    public static  NETWORKDAYS_INTL;
    public static  AGGREGATE;
    public static  IFNA;
    public static  BITAND;
    public static  BITOR;
    public static  BITXOR;
    public static  BITLSHIFT;
    public static  BITRSHIFT;
    public static  PERCENTILE_INC;
    public static  PERCENTILE_EXC;
    public static  QUARTILE_INC;
    public static  QUARTILE_EXC;
    public static  NORM_DIST;
    public static  NORM_S_DIST;
    public static  NORM_INV;
    public static  NORM_S_INV;
    public static  BETA_DIST;
    public static  BETA_INV;
    public static  BINOM_DIST;
    public static  BINOM_INV;
    public static  CHISQ_DIST;
    public static  CHISQ_DIST_RT;
    public static  CHISQ_INV;
    public static  CHISQ_INV_RT;
    public static  CHISQ_TEST;
    public static  CONFIDENCE_NORM;
    public static  CONFIDENCE_T;
    public static  COVARIANCE_P;
    public static  COVARIANCE_S;
    public static  F_DIST;
    public static  F_DIST_RT;
    public static  F_INV;
    public static  F_INV_RT;
    public static  F_TEST;
    public static  GAMMA_DIST;
    public static  GAMMA_INV;
    public static  HYPGEOM_DIST;
    public static  LOGNORM_DIST;
    public static  LOGNORM_INV;
    public static  MODE_SNGL;
    public static  MODE_MULT;
    public static  NEGBINOM_DIST;
    public static  PERCENTRANK_INC;
    public static  PERCENTRANK_EXC;
    public static  POISSON_DIST;
    public static  RANK_AVG;
    public static  RANK_EQ;
    public static  T_DIST;
    public static  T_DIST_2T;
    public static  T_DIST_RT;
    public static  T_INV;
    public static  T_INV_2T;
    public static  T_TEST;
    public static  VAR_P;
    public static  VAR_S;
    public static  WEIBULL_DIST;
    public static  Z_TEST;
    public static  GAMMALN_PRECISE;
    public static  ISOWEEKNUM;
    public static  FORMULATEXT;
    public static  MAXIFS;
    public static  MINIFS;
    public static  IFS;
    public static  SWITCH;
    public static  CONCAT;
    public static  TEXTJOIN;
    public static  ISFORMULA;
    public static  CEILING_PRECISE;
    public static  CEILING_MATH;
    public static  FORECAST_LINEAR;
    public static  FORECAST_ETS;
    public static  FORECAST_ETS_SEASONALITY;
    public static  FORECAST_ETS_CONFINT;
    public static  FORECAST_ETS_STAT;
    public static  NUMBERVALUE;
    public static  UNICHAR;
    public static  UNICODE;
    public static  STDEV_P;
    public static  STDEV_S;
    public static  FLOOR_MATH;
    public static  SHEET;
    public static  SHEETS;
    public static  SEQUENCE;
    public static  UNIQUE;
    public static  RANDARRAY;
    public static  SORTBY;
    public static  XLOOKUP;
    public static  XMATCH;
    public static  CHOOSEROWS;
    public static  CHOOSECOLS;
    public static  TOROW;
    public static  TOCOL;
    public static  HSTACK;
    public static  VSTACK;
    public static  DROP;
    public static  LAMBDA;
    public static  LET;
    public static  SCAN;
    public static  MAP;
    public static  MAKEARRAY;
    public static  ENCODEURL;
    public static  TEXTBEFORE;
    public static  TEXTAFTER;
    public static  TEXTSPLIT;
    public static  VALUETOTEXT;
    public static  ARRAYTOTEXT;
    public static  XOR;
    public static  STOCKHISTORY;
    public static  SINGLE;
    public static  ANCHORARRAY;
    public static  SPECIAL_BASE_XLWS;
    public static  FILTER;
    public static  SORT;
    public static  SPECIAL_BASE_END;
    public static  RUN;
    public static  COPY;
    public static  DEFINE_NAME;
    public static  SELECT;
    public static  ALERT;
    public static  FORMAT_SIZE;
    public static  WORKBOOK_SELECT;
    public static  WORKBOOK_HIDE;
    public static  WORKBOOK_UNHIDE;
    public static  SHOW_DIALOG;
}
internal class  :  {
    private  ;
    internal ( );
    internal int (Byte[] , int , CellArea );
    internal void ();
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal class  : object {
    internal Hashtable ;
    internal string ;
    internal string ;
    internal (string , string );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private  ;
    []
private  ;
    []
private TableStyle ;
    internal Style  { get; }
    internal Style  { get; }
    internal (TableStyleCollection , string ,  );
    internal (string ,  );
    internal void ( , CopyOptions );
    internal  ();
    public  ();
    internal string ();
    internal TableStyle ();
    internal Style (TableStyleElementType );
    internal Style ( );
    internal void (TableStyleElementType , int , Style );
    internal void ( , Style );
}
internal class  :  {
    public ( );
    private  ( , string ,  );
    public  ( , string );
}
internal class  :  {
    private [] ;
    private [] ;
    private int ;
    private int ;
    private  ;
    public ( ,  , [] , int , int );
    public ( ,  , [] , [] , int , int );
    private ( );
    public virtual  ( );
    internal  ();
    protected virtual bool ( );
    protected virtual  ( );
    protected virtual  ();
    protected virtual void ( );
    protected virtual bool ();
    protected virtual void ( );
    public sealed virtual void ();
    public sealed virtual bool (int ,  );
}
internal class  : object {
    internal  ;
    internal int ;
    internal  ;
    internal object ;
    internal void ();
}
internal class  : object {
    protected  ;
    public ( );
    public virtual  ( );
}
internal class  :  {
    internal  ;
    internal string ;
    internal (string ,  );
    internal virtual  ();
    internal virtual object ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , float , float ,  );
    private float (RectangleF );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ( , float , float , float , float );
    internal virtual void ();
    internal virtual RectangleF (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public  ();
}
internal class  :  {
    private  ;
    private  ;
    private int ;
    public (CellArea , Cells , bool );
    public ( , Cells , bool );
    public virtual void ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual object ();
    public virtual bool ();
    private bool (bool );
}
internal class  :  {
    internal string ;
}
internal class  : object {
    private Byte[] ;
    private  ;
    private  ;
    private  ;
    private bool ;
    public ( );
    public ( ,  );
    public ( ,  , Byte[] );
    public ( ,  ,  , Byte[] );
    public  ();
    public sealed virtual string ();
    public sealed virtual void (bool ,  );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual Byte[] (Byte[] , int , int );
    private Byte[] (Byte[] , int , int );
    private Byte[] (Byte[] , int , int );
    private void (int , Byte[] );
    private Byte[] (Byte[] , int , int , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public sealed virtual void Dispose();
    internal  ();
    internal void ( );
    internal bool (int ,  , bool ,  );
    internal void (long , int );
    internal CellArea (CellArea , int );
    internal bool (CellArea , int );
    internal bool (int , int , int );
}
internal class  :  {
    internal ( );
}
internal class  : object {
}
internal class  : object {
    []
private  ;
    []
private  ;
    private Object[][] ;
    private Object[] ;
    private object ;
    private Object[] ;
    public ( ,  );
    public sealed virtual void (int );
    public sealed virtual bool (int , int );
    public sealed virtual bool (int ,  );
    public sealed virtual bool (int , int , int );
    public sealed virtual bool (int , int );
    public sealed virtual bool (int , int );
    public sealed virtual bool (int , int , int );
    public sealed virtual object ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    internal ( );
    internal virtual void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( , XmlColumnProperty );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  :  {
    private string ;
    private string ;
    public string ();
    public void (string );
    public string ();
    public void (string );
    public virtual Stream ();
    public virtual int ();
    public virtual bool ();
    public virtual string ToString();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    public ( );
}
internal abstract class  :  {
    protected Int32[] ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected ( ,  ,  , Int32[] , bool );
    protected ( , int ,  );
    private void (bool );
    protected bool (bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    protected void ();
    public virtual bool (int );
    public virtual  ();
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    protected void ();
    protected void ();
}
internal class  :  {
    internal void (string );
}
internal class  : object {
    internal  ;
    internal void ( );
}
internal class  : object {
    private Hashtable ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    public float ();
    public void (float );
    public float ();
    public void (float );
    internal float (string , string ,  );
    internal float (string , string ,  , SizeF );
    internal float (RectangleF , float , bool );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual int ();
    public abstract virtual BigInteger ( );
}
internal abstract class  :  {
    public abstract virtual bool ();
    public abstract virtual int ();
    public abstract virtual string ();
    public abstract virtual void (StringBuilder ,  );
    public virtual void ();
    public virtual bool ();
    public virtual  ();
    public virtual object ();
    public virtual object ( );
    public virtual  ( );
    public virtual bool ();
    public virtual bool ();
    internal  ( ,  , int );
    internal bool ( ,  , int );
    internal bool ( ,  , int );
    internal bool ( ,  , int );
    internal long ( ,  , int );
    internal  (Int32[] ,  ,  , int );
    internal  (Int32[] ,  ,  , int );
    internal  (Int32[] ,  ,  , int );
}
internal class  : object {
    internal int ;
    internal bool ;
    internal UInt32 ;
    internal bool ;
    internal bool ;
    internal int ;
    internal bool ;
    internal long ;
    internal long ;
    internal UInt32 ;
    internal string ;
    internal long ;
}
internal abstract class  : object {
    public abstract virtual void (bool );
    public abstract virtual bool ();
    public abstract virtual  ();
    public abstract virtual void ( ,  );
    public virtual object ();
}
internal class  : object {
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal Size ;
    internal ( , object ,  ,  );
    internal  ();
    internal void ();
    private int (int );
    internal Size (SizeF );
}
internal class  : object {
    private long ;
    private  ;
    private  ;
    public (long ,  ,  );
    public long ();
    public  ();
    public  ();
}
internal interface  {
    public abstract virtual bool (int );
    public abstract virtual double (int );
    public abstract virtual int (int );
    public abstract virtual double (int );
    public abstract virtual double (int , int );
    public abstract virtual int (int , int );
    public abstract virtual double (int , int );
    public abstract virtual void (Int32[] );
    public abstract virtual void (Int32[] );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal  ;
    internal  ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ();
    internal bool ( );
    internal bool ( );
}
internal class  : object {
    private  ;
    public virtual void ( );
    public virtual  ();
}
internal class  : object {
    private Hashtable ;
    []
private Workbook ;
    private HtmlLoadOptions ;
    []
private Encoding ;
    private  ;
    public (Workbook , LoadOptions );
    public void (Stream );
    private Encoding (Stream );
    private void ();
    private Encoding (Stream );
    private void (Stream );
    private Stream (List`1<> , string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public object Current { get; }
    public (ArrayList );
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
}
internal class  :  {
    internal (int );
}
internal class  : object {
    private Byte[] ;
    public (Byte[] );
    public (Byte[] , int , int );
    public Byte[] ();
}
internal class  : object {
    internal static Int32[] (bool , Byte[] , int );
    internal static Bitmap (Image , int , int );
    internal static RectangleF (GraphicsPath );
    internal static Single[] (Matrix );
    internal static Size (Size );
    internal static SizeF (SizeF );
    internal static RectangleF (RectangleF );
    internal static Rectangle (Rectangle );
    internal static RectangleF (Rectangle );
    internal static SizeF (Size );
    internal static  (string , FontStyle );
    internal static int (string ,  , float );
    internal static double (string ,  , float , bool );
    internal static int (string , string , float , FontStyle );
    internal static int (string , float , FontStyle );
    internal static float (char ,  , int );
    internal static double (char ,  , float , bool );
    internal static float (char , string , int , FontStyle );
    internal static Int32[] (string , double , FontStyle );
    internal static float (string , double , FontStyle );
    internal static  (string );
    internal static void (Graphics );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Boolean[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Int16[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    public (Stream , int );
    private static void ();
    private void ();
    protected static void (Char[] , Int32[] , int , int );
    public virtual void WriteByte(byte );
    private void ();
    public virtual void Close();
    public void ();
    public virtual void Flush();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (Int32[] , Char[] , int , int , int );
    private void (Stream );
    private void ();
    private void (int , int );
    private void (int );
    private void (int );
    private void (int , int );
    private void ();
    private void ();
    private void (int , int , int );
    private void (int , int , int );
    private char (char , char , char );
    private void (int , int , int );
    private void ();
    private void ();
    private void ();
    private bool (int , int );
    private void ();
    private void ();
    public virtual int Read(Byte[] , int , int );
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual void Write(Byte[] , int , int );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
}
internal abstract class  : object {
    private int ;
    private Type ;
    protected (int );
    public abstract virtual object ();
    public abstract virtual void (object );
    public int ();
    public abstract virtual  ( );
    public abstract virtual  ();
    public Type ();
    public void (Type );
    public static  (object , Type );
}
internal abstract class  : object {
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual long ();
    public abstract virtual long ();
    public abstract virtual void (long );
    public virtual void ();
    public sealed virtual void Dispose();
    protected virtual void (bool );
    public abstract virtual void ();
    public abstract virtual long (long , int );
    public abstract virtual void (long );
    public abstract virtual int (Byte[] , int , int );
    public virtual int ();
    public abstract virtual void (Byte[] , int , int );
    public virtual void (byte );
}
internal class  : object {
    private GradientFill ;
    internal bool ;
    internal Byte[] ;
    internal (GradientFill );
    internal  ();
    internal Double[] ();
    internal double ();
    internal int ();
    internal GradientStop ();
    internal GradientStop ();
}
internal class  :  {
    internal void ( , int );
}
internal class  : object {
    private static IDictionary ;
    private static ();
    private static IDictionary ();
    public static int ( );
    public static bool ( );
}
internal enum  : Enum {
    public int value__;
    public static  EmfPlusHeader;
    public static  EmfPlusEndOfFile;
    public static  EmfPlusComment;
    public static  EmfPlusGetDC;
    public static  EmfPlusMultiFormatStart;
    public static  EmfPlusMultiFormatSection;
    public static  EmfPlusMultiFormatEnd;
    public static  EmfPlusObject;
    public static  EmfPlusClear;
    public static  EmfPlusFillRects;
    public static  EmfPlusDrawRects;
    public static  EmfPlusFillPolygon;
    public static  EmfPlusDrawLines;
    public static  EmfPlusFillEllipse;
    public static  EmfPlusDrawEllipse;
    public static  EmfPlusFillPie;
    public static  EmfPlusDrawPie;
    public static  EmfPlusDrawArc;
    public static  EmfPlusFillRegion;
    public static  EmfPlusFillPath;
    public static  EmfPlusDrawPath;
    public static  EmfPlusFillClosedCurve;
    public static  EmfPlusDrawClosedCurve;
    public static  EmfPlusDrawCurve;
    public static  EmfPlusDrawBeziers;
    public static  EmfPlusDrawImage;
    public static  EmfPlusDrawImagePoints;
    public static  EmfPlusDrawstring;
    public static  EmfPlusSetRenderingOrigin;
    public static  EmfPlusSetAntiAliasMode;
    public static  EmfPlusSetTextRenderingHint;
    public static  EmfPlusSetTextContrast;
    public static  EmfPlusSetInterpolationMode;
    public static  EmfPlusSetPixelOffsetMode;
    public static  EmfPlusSetCompositingMode;
    public static  EmfPlusSetCompositingQuality;
    public static  EmfPlusSave;
    public static  EmfPlusRestore;
    public static  EmfPlusBeginContainer;
    public static  EmfPlusBeginContainerNoParams;
    public static  EmfPlusEndContainer;
    public static  EmfPlusSetWorldTransform;
    public static  EmfPlusResetWorldTransform;
    public static  EmfPlusMultiplyWorldTransform;
    public static  EmfPlusTranslateWorldTransform;
    public static  EmfPlusScaleWorldTransform;
    public static  EmfPlusRotateWorldTransform;
    public static  EmfPlusSetPageTransform;
    public static  EmfPlusResetClip;
    public static  EmfPlusSetClipRect;
    public static  EmfPlusSetClipPath;
    public static  EmfPlusSetClipRegion;
    public static  EmfPlusOffsetClip;
    public static  EmfPlusDrawDriverstring;
    public static  EmfPlusStrokeFillPath;
    public static  EmfPlusSerializableObject;
    public static  EmfPlusSetTSGraphics;
    public static  EmfPlusSetTSClip;
}
internal class  : object {
    public ArrayList ;
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( );
    public static  (object );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private  ;
    private bool ;
    public ( );
    public  ();
    public sealed virtual void (bool ,  );
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public sealed virtual void ();
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal (Rectangle ,  );
    public sealed virtual void Dispose();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    []
private WorksheetCollection ;
    private ReplaceOptions ;
    internal (WorksheetCollection );
    internal (WorksheetCollection , ReplaceOptions );
    internal int (bool , object );
    internal int (int , object );
    internal int (string , string );
    internal int (string , int );
    internal int (string , double );
    public int (string , Double[] , bool );
    public int (string , Int32[] , bool );
    internal int (string , String[] , bool );
    internal int (string , DataTable );
    private void (Cell , DataTable );
}
internal class  : object {
}
internal abstract class  : object {
    public static void (IDictionary , Byte[] );
    public static Byte[] (IDictionary );
    public static Byte[] (Byte[] );
    public static Byte[] (Byte[] );
    public static BigInteger (Stream );
    public static void (BigInteger , Stream );
    public static bool (int );
}
internal class  :  {
    private int ;
    private PointF ;
    private  ;
    internal (int , PointF ,  );
    internal virtual string ();
    internal int ();
    internal void (int );
    internal PointF ();
    internal void (PointF );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    internal (int , int , int , int );
}
internal class  :  {
    private  ;
    public ( );
    public (Byte[] );
    public static  (object );
    public  ();
    public virtual  ();
}
internal class  : object {
    public List`1<> ;
    private string ;
    public string ();
    public void (string );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    internal ( , [] );
    internal virtual void ( );
    private void (Stream );
    private void (Stream );
    private void ( , Stream );
}
internal class  : object {
    private  ;
    internal ( );
    public virtual int ();
    public virtual int ();
    public virtual int (Byte[] , int , int , int );
    public virtual void (Byte[] , int , int );
    public virtual void ();
}
internal class  : object {
    private UInt32 ;
    private ushort ;
    private short ;
    private short ;
    private short ;
    private short ;
    private ushort ;
    private UInt32 ;
    private ushort ;
    internal void (BinaryReader );
    [("True")]
private void ();
    internal bool ();
    internal Rectangle ();
    internal int ();
}
internal class  : object {
    private double ;
    private double ;
    private double ;
    private double ;
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal (bool , int );
    private (int );
    public virtual bool ();
    public virtual  ();
    public virtual object ();
    public virtual  ( ,  );
    public virtual  ( );
    public virtual int CompareTo(object );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual string ToString();
}
internal class  :  {
    internal (ushort );
}
internal class  : object {
    public static DateTime ;
    private static ();
    public static long (DateTime );
    public static DateTime (long );
    public static long ();
}
internal class  : object {
}
internal class  : object {
    private sealed virtual override int (object , object );
}
internal class  : object {
    private  ;
    public ( );
    public ( );
    public  ();
    public  ();
    public  ();
    public bool ();
    public [] ();
    public bool ( );
    private object ( );
    public bool ( , Char[] );
}
internal interface  {
    public abstract virtual void ();
    public abstract virtual bool (int ,  );
}
internal class  : object {
    []
private  ;
    []
private Worksheet ;
    []
private  ;
    internal ( ,  );
    internal void ( ,  );
    private void ( , string ,  );
    private void ( ,  , bool );
    internal void ( ,  );
    private void ( , string ,  );
    internal CellsColor ( );
    internal void ( );
    internal void ( );
    [("True")]
private void ( , SparklineGroup );
    private void ( , SparklineGroup );
    private void ( , SparklineCollection );
}
internal class  : object {
    internal static string ;
    private bool ;
    private bool ;
    private bool ;
    private static ();
    internal bool ();
    internal void ();
    internal bool ();
    internal void ();
    internal bool ();
    internal void ();
}
internal class  : object {
    []
internal Cells ;
    []
internal JsonLayoutOptions ;
    internal int ;
    internal int ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal (Cells , int , int , JsonLayoutOptions );
    internal Int32[] ( );
    private  ( );
    private void ( ,  );
    private bool ( );
    private static bool ( );
    private void ( ,  );
    private void ( );
    private void ( );
    private void ( );
    private int ( , int , int , bool );
    private int ( , int , int , bool );
    private int ( , int , bool );
    private int ( , int , bool );
    private int (object , string , int , int , bool );
    private int ( , int , int , bool );
    private void (Range , Cell );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static GraphicsPath[] ( , RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    public (int );
    public ( );
}
internal class  : object {
    public Char[] ;
    public int ;
    public int ;
    public int ;
    public UInt32 ;
    public UInt32 ;
    public Byte[] ;
    public Byte[] ;
    public long ;
    public long ;
    public long ;
    public long ;
    public long ;
    public (Byte[] );
}
internal class  : object {
    internal string ;
    internal string ;
    internal List`1<double> ;
}
internal class  :  {
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32[] ;
    private int ;
    internal static UInt32[] ;
    public ( );
    private static ();
    private void ( );
    public virtual string ();
    public virtual int ();
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    public virtual int (Byte[] , int );
    public virtual void ();
    internal virtual void ();
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    public virtual  ();
    public virtual void ( );
}
internal class  : object {
    private  ;
    public ( );
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal UInt32 ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private Char[] ;
    private int ;
    internal ( , string );
    protected virtual double (double );
    internal virtual  ( , double ,  );
    public virtual bool ( );
    public virtual  ();
    public virtual NumberCategoryType ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    private Matrix ;
    private  ;
    public Matrix ();
    public void (Matrix );
    public  ();
    public void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal abstract class  : object {
    internal static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    public ( ,  ,  ,  ,  ,  , int , int );
    private ( ,  ,  , int , int );
    private void ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool (int , int );
    private void (int );
    private void (int );
    private void ();
    public virtual bool (int );
    public virtual void ();
    public virtual bool ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    private ushort ;
    private ushort ;
    private ushort ;
    internal (ushort , ushort , ushort );
    internal virtual void ( );
}
internal static class  : object {
}
internal class  : object {
    internal  ;
    internal  ;
    internal void ( );
}
internal class  : object {
    private static float (float );
    internal static float (string , float );
}
internal interface  {
    public abstract virtual  ( );
    public abstract virtual  ( );
}
internal class  : object {
    internal int ;
    internal int ;
    internal Byte[] ;
    internal bool ;
    public (Byte[] );
    internal void ( , bool );
}
internal class  :  {
    public ( );
    public virtual  (String& );
    private static bool (char );
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal interface  {
    public abstract virtual void ();
}
internal class  : object {
    []
private  ;
    private  ;
    internal ( );
    internal  ();
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    private  ;
    private IList ;
    private  ;
    private  ;
    public ( );
    public ( , bool );
    public ( ,  );
    public ( , bool ,  );
    public ( ,  , bool );
    public void (Char[] );
    public void (Char[] ,  );
    public void (Char[] ,  );
    public void (Byte[] ,  );
    internal void (Byte[] , bool ,  );
    public void ( );
    private void (Byte[] );
    private Byte[] ( ,  );
    private Stream (Stream , long , Byte[] );
    public Stream (Stream , long );
    public Stream (Stream , Byte[] );
    public sealed virtual void ();
}
internal abstract class  : object {
    private int ;
    []
private Cells ;
    []
private RowCollection ;
    []
private  ;
    private Int32[][] ;
    private Int32[] ;
    private  ;
    private Row ;
    private int ;
    internal (Cells , RowCollection );
    protected abstract virtual bool ( , int );
    internal  (int );
    internal Row (int );
    internal  (int );
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  ();
    public sealed virtual bool ();
    public sealed virtual Int32[] ();
    public int (int );
    public sealed virtual bool ();
    public sealed virtual Cells ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual  (int );
    public sealed virtual Row (int );
    public sealed virtual Cell (int , int );
    public sealed virtual  (int ,  , int );
    public sealed virtual  (int , int , bool );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal Color ;
    internal bool ;
    internal Color ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal Color ;
    internal bool ;
    internal double ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal string ;
    internal string ;
    internal string ;
    internal Color ;
    internal string ;
}
internal class  :  {
    public virtual string ();
    protected virtual int ();
    protected virtual void (Byte[] , Byte[] );
}
internal class  : object {
    internal  ;
    internal  ;
    internal ( ,  );
    internal void (string );
    private void ( );
    private string (string );
    private string (string );
    private void ( );
    private void ( );
    private void ( );
    private void ( , Worksheet );
    private void ( , Worksheet );
    private void ( , PageSetup , bool );
    private static PrintErrorsType ( );
    private static PrintCommentsType ( );
    public static void ( , Worksheet , LoadOptions );
}
internal class  :  {
    internal void (VerticalPageBreakCollection );
}
internal class  : object {
    []
private Worksheet ;
    []
private Cells ;
    []
private  ;
    private bool ;
    private MemoryStream ;
    private string ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal  ;
    internal  ;
    internal int ;
    internal ( , int );
    internal void ( );
    private void ( ,  );
    private void (ArrayList , MemoryStream , MemoryStream ,  , int );
    private void ( ,  ,  , int , int );
    private void ( ,  , int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( );
}
internal class  :  {
    private BigInteger ;
    public (BigInteger ,  );
    public BigInteger ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("32767")]
internal class  : Attribute {
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private List`1<> ;
    public List`1<> Usages { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<> get_Usages();
    [CompilerGeneratedAttribute]
public void set_Usages(List`1<> );
}
internal class  :  {
    private ushort ;
    public ushort ();
    public void (ushort );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
internal abstract class  : object {
    internal string ;
    internal byte ;
    internal int ;
    internal string ;
    internal static Hashtable ;
    private static ();
    internal abstract virtual  ();
    internal void ( );
    internal static  ( , string );
    internal static  ( , string );
}
internal class  :  {
    internal (string );
}
internal class  : object {
    protected Byte[] ;
    protected Byte[] ;
    public (Byte[] , Byte[] );
    public (string , Byte[] );
    public virtual void ();
    public virtual void (Byte[] );
    public virtual Byte[] ();
    public virtual Byte[] ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private bool ;
    public ( );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    private Byte[] ;
    private int ;
    public byte  { get; }
    public (int );
    public (Byte[] , int );
    public (Byte[] );
    public int ();
    public void (byte );
    public void (Byte[] );
    public void (Byte[] , int , int );
    public void ( );
    public void ( , int , int );
    public int ();
    public byte (int );
    internal byte ();
    internal void (byte );
    internal void ();
    internal void (int );
    internal void ();
    internal void (int );
    internal void (int , int );
    internal void (int );
    internal void (int , byte );
    internal void (int , Byte[] , int , int );
    internal Byte[] (bool );
    internal Byte[] ();
    internal void (Byte[] , int );
    internal bool (int , int );
    internal void ();
    internal bool (int );
    internal bool ( );
    internal  ();
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private static IDictionary ;
    private static ();
    public static  (string ,  );
    public static  (string ,  );
}
internal class  : object {
    private SortedList ;
    internal (SortedList , bool );
    internal Color (int );
    private int (int );
    private void (int , int );
    private void (Color , int );
    internal void (Color[] , bool );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private [] ;
    private bool ;
    private bool ;
    private int ;
    private DateTime ;
    internal ( , string );
    internal ( , [] , int );
    internal  ();
    internal virtual  ( , DateTime , double , bool ,  );
    private void (ArrayList , StringBuilder , bool , bool ,  );
    private void (ArrayList , StringBuilder );
    private string (StringBuilder );
    public virtual bool ();
    public virtual bool ();
    public virtual  ();
    public virtual bool ( );
}
internal class  : object {
    internal bool ;
    internal bool ;
    internal bool ( );
    internal void (Style );
    internal static  (Style );
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    private static void (UInt32[] );
    private static void (UInt32[] );
}
internal class  :  {
    private ArrayList ;
    private  ;
    internal ( );
    internal void ( );
    internal void (string ,  );
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    internal  ;
    public (Byte[] );
    private ( );
    public static  (object );
    public Byte[] ();
    public virtual  ();
}
internal abstract class  : object {
    internal static void (Workbook );
    private static string (WorksheetCollection );
    internal static bool (Workbook , int );
    internal static void (Workbook , int );
}
internal class  :  {
    []
private Workbook ;
    []
private  ;
    []
private  ;
    []
private Worksheet ;
    []
private  ;
    []
private  ;
    private int ;
    private Byte[] ;
    private int ;
    private bool ;
    private int ;
    private int ;
    internal ( );
    internal void ( ,  );
    private void ();
    internal void ();
    internal void ();
    private void ();
    private void ();
    private void (HorizontalPageBreakCollection );
    private void (VerticalPageBreakCollection );
    private void (bool , VerticalPageBreakCollection , HorizontalPageBreakCollection );
    private void ();
    internal static void (AutoFilter ,  );
    private static void (AutoFilter ,  );
    private static void (FilterColumn , CustomFilterCollection ,  );
    private static void (MultipleFilterCollection ,  );
    private void ();
    private bool (FormatCondition );
    private bool ();
    private void (FormatCondition );
    private void (FormatCondition );
    private ConditionalFormattingValue (FormatCondition );
    private ConditionalFormattingValue (FormatCondition );
    private void (FormatCondition );
    private void (FormatCondition );
    private void (FormatCondition );
    private void (FormatCondition );
    private void ();
    private void ();
    private void (int , Validation );
    private void (PageSetup );
    private void ();
    internal void (PageSetup ,  );
    internal void (PageSetup );
    internal void (PageSetup );
    internal void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private int (Protection , int );
    protected virtual object ( );
    protected virtual object (Byte[] );
    protected virtual void (Byte[] , int , int );
    internal virtual void (int , string );
    internal virtual void (int ,  , object );
    private bool (int ,  , object );
    private int ();
    private int (int );
    private int ();
    private bool ();
    private void (int ,  , object , Byte[] , bool );
    private void ();
    private void ();
    private void ();
    private void (PaneCollection );
    private void ( );
    private void ();
    internal  (Byte[] , int , Boolean& );
}
internal class  : MemoryStream {
    internal void ( );
}
internal enum  : Enum {
    public int value__;
    public static  BinaryHighByteFirst;
    public static  BinaryLowByteFirst;
}
internal class  :  {
    public (float , float , Bitmap , ThreeDFormat );
}
internal class  :  {
    private string ;
    public (Byte[] );
    public (string );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    public Byte[] ();
    internal virtual void ( );
    protected virtual bool ( );
}
internal interface  {
    public abstract virtual void ();
    public abstract virtual bool ();
    public abstract virtual bool (int , int );
    public abstract virtual bool (int );
    public abstract virtual  ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual  ( );
    public abstract virtual  ( ,  ,  );
    public abstract virtual  (int );
    public abstract virtual  (int );
    public abstract virtual void ( );
    public abstract virtual void (int , int );
    public abstract virtual void (int );
    public abstract virtual void (int , int );
    public abstract virtual void (int );
    public abstract virtual void ();
    public abstract virtual void ( );
    public abstract virtual  (int , int );
    public abstract virtual  (int );
    public abstract virtual void (int , int ,  );
    public abstract virtual void (int ,  );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private static ();
    private int (Int32[] , int , int , int , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] );
    internal int (Int32[] , Int32[] , Int32[] , Int32[] ,  );
    internal int (int , int , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] , Int32[] ,  );
    internal static int (Int32[] , Int32[] , Int32[][] , Int32[][] ,  );
    private void (int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal string ;
    internal int ;
    internal int ;
    internal bool ;
    internal int ;
}
internal class  : object {
    private Stream ;
    private bool ;
    public (Stream );
    public virtual Stream ();
    public virtual void (Stream );
    [ObsoleteAttribute]
public virtual object ();
    protected virtual void ();
}
internal class  :  {
    internal (byte , bool );
    internal (byte , bool , int );
    protected (byte ,  );
    internal virtual  (byte );
    public virtual  ();
    public virtual  ();
    public bool ();
    public virtual bool ( , object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int ( );
    public virtual int ( ,  );
    public bool (bool );
}
internal class  : object {
    private float ;
    internal bool ;
    private bool ;
    internal bool ;
    private Style ;
    internal Hashtable ;
    []
internal Border ;
    []
internal Border ;
    private int ;
    private TextAlignmentType ;
    private TextAlignmentType ;
    private Cell ;
    private CellValueType ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal int ;
    []
private  ;
    []
private Hyperlink ;
    private ArrayList ;
    private float ;
    private int ;
    private int ;
    private bool ;
    internal bool ;
    internal Style ;
    internal bool ;
    []
internal Style ;
    internal bool ;
    internal  ;
    []
internal  ;
    []
internal  ;
    internal (int , int );
    public float ();
    public void (float );
    internal bool ();
    internal void (bool );
    public Style ();
    public void (Style );
    internal bool ();
    public int ();
    public void (int );
    public bool ();
    public TextAlignmentType ();
    public void (TextAlignmentType );
    public TextAlignmentType ();
    public void (TextAlignmentType );
    public Cell ();
    public void (Cell );
    public CellValueType ();
    public void (CellValueType );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public int ();
    public int ();
    public bool ();
    public  ();
    public void ( );
    public Hyperlink ();
    public void (Hyperlink );
    internal bool ();
    internal ArrayList ();
    internal void (ArrayList );
    internal float ();
    internal void (float );
    internal double (Worksheet , int , int , int );
    internal int (Worksheet , int , int , int );
    private int (Cells );
    private int (Cells );
    internal int (Cells , Style );
    internal bool ();
    internal void (bool );
    internal bool ();
}
internal abstract class  : object {
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32 );
    public static UInt32 (UInt32[] , int , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] , int );
    public static UInt32[] ();
    public static UInt64[] ();
    public static UInt32[] ();
    public static UInt64[] ();
    public static bool (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static bool (UInt64[] , UInt64[] );
    public static UInt32[] (BigInteger );
    public static UInt64[] (BigInteger );
    public static UInt32 (UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static bool (UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] );
    public static bool (UInt64[] );
    public static bool (UInt32[] );
    public static bool (UInt64[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static ulong (UInt32 , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] );
    public static UInt32 (UInt32 , UInt32[] , UInt32[] );
    public static UInt32 (UInt32 , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32 , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int );
    public static BigInteger (UInt32[] );
    public static BigInteger (UInt64[] );
    public static void (UInt32[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private StreamWriter ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    private void ();
    public MemoryStream ();
    public void ( , UInt32 );
    public void ( , string );
    public void ( , Byte[] );
    public sealed virtual void Dispose();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    public ( );
    public  ();
    public  ();
    public virtual  ();
}
internal abstract class  : object {
    internal static double (DateTime , DateTime , double );
    internal static double (DateTime , DateTime , double );
    internal static double (DateTime , DateTime , double );
    private static double (DateTime , DateTime );
    internal static double (double , double , double , int , int , bool );
    internal static double (double , double , double , double );
    internal static double (double , double , double , int , int , bool );
    internal static double (double , double , double , double , bool );
    internal static double (double , double , double , double , double , bool );
    internal static double (double , double , double , double , double , bool );
    internal static double (double , double , double , double , bool );
    internal static double (double , double , double , double , bool );
    private static double (double , double );
    private static double (double , int );
    internal static double (double , double , double , double , double );
    internal static double (double , double , double , double , double );
    internal static double (double , double , double , double , double , double , bool );
    internal static  (double , double , double , double , bool );
    internal static  (double , double , double , double , bool , double );
    internal static double (DateTime , DateTime , int , int );
    internal static double (DateTime , DateTime , int , int );
    internal static double (DateTime , DateTime , int , int );
    internal static DateTime (DateTime , DateTime , int );
    internal static DateTime (DateTime , DateTime , int );
    internal static double (DateTime , DateTime , int , int );
    internal static  (DateTime , DateTime , DateTime , double , double , int , int );
    internal static double (DateTime , DateTime , double , double , int );
    internal static double (DateTime , DateTime , double , double , int );
    internal static double (DateTime , DateTime , double , double , int );
    internal static double (DateTime , DateTime , double , double , int );
    internal static double (DateTime , DateTime , double , double , int );
    internal static double (DateTime , DateTime , double , double , int );
    internal static double (DateTime , DateTime , double , double , int , int , bool );
    internal static double (DateTime , DateTime , double , double , double , int , int );
    internal static  (DateTime , DateTime , double , double , double , int , int );
    internal static double (DateTime , DateTime , DateTime , double , double , int );
    internal static double (DateTime , DateTime , DateTime , double , double , int );
    internal static double (DateTime , DateTime , DateTime , DateTime , double , double , double , int , int );
    internal static double (DateTime , DateTime , DateTime , double , double , double , int , int , bool );
    internal static  (double , DateTime , DateTime , double , double , double , int );
    internal static  (double , DateTime , DateTime , double , double , double , int );
    internal static  (Double[] , int , int , double , double );
    private static double (double , Double[] );
    private static double (DateTime , DateTime , bool );
    private static double (DateTime , DateTime );
    private static double (DateTime , DateTime );
    private static double (DateTime , DateTime );
    private static bool (DateTime );
    private static bool (DateTime );
    private static int (int , int );
    private static int (DateTime , DateTime , int );
    private static DateTime (DateTime , int );
    private static double (DateTime , DateTime , byte , int );
    private static double (DateTime , DateTime , int );
    private static bool (DateTime , DateTime );
    private static bool (DateTime , DateTime );
    private static bool (DateTime , DateTime );
    private static bool (int );
    private static double (DateTime , int );
    private static DateTime (DateTime , int );
    private static double (DateTime , DateTime , int );
    private static int (DateTime , DateTime , int , int , bool );
    private static double (DateTime , DateTime , int );
    private static double (DateTime , DateTime );
    private static double (double );
    private static double (double );
    private static bool (double , double );
    private static double (double , double , double , double , double , double , double );
    private static double (double , double , double , double );
}
internal class  : object {
    private  ;
    private Hashtable ;
    private  ;
    private Chart ;
    private  ;
    internal (Chart ,  , Hashtable );
    internal void ( , bool );
    private void ();
    private void ( ,  );
    [("True")]
private  ( );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    protected virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    internal UInt32 ;
    internal short ;
    internal short ;
    internal short ;
    internal ushort ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    private ushort ;
    internal ( );
    internal ushort ();
    internal void (ushort );
    internal void ( );
    internal MemoryStream ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF );
}
internal class  :  {
    public static  ;
    public static  ;
    private  ;
    private  ;
    private ( );
    public ( ,  );
    private static ();
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
    public virtual string ToString();
}
internal abstract class  :  {
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    public ( ,  ,  , int , int );
    protected ( , int ,  , int , int );
    public virtual  (int , int );
    public virtual bool (int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
}
internal class  :  {
    internal void (byte , ushort );
}
internal class  : object {
    internal long ;
    internal long ;
    internal (long , long );
    public virtual bool Equals(object );
    internal static  ( );
    internal static string ( );
    internal static  ( );
}
internal class  : object {
    []
private  ;
    private int ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    internal Hashtable ;
    private Hashtable ;
    private string ;
    private string ;
    private string ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    private GraphicsPath ;
    private int ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal Hashtable ;
    public (string , Hashtable ,  );
    public (string , string , Hashtable ,  , int );
    public (string , Hashtable ,  , int );
    public virtual  ();
    public virtual GraphicsPath ();
    public  ();
    public void ( );
    public int ();
    public void (int );
    public Hashtable ();
    public void (Hashtable );
    public Hashtable ();
    public void (Hashtable );
    public Hashtable ();
    public void (Hashtable );
    public Hashtable ();
    public void (Hashtable );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public void ();
    public virtual bool ();
    public virtual object ();
    private void ();
    private static Hashtable ( );
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    public ( );
    public virtual void ( );
    public virtual  ();
    public virtual int (Byte[] , int , int );
}
internal class  :  {
    private bool ;
    private int ;
    private int ;
    internal ( ,  );
    protected virtual void ();
    protected virtual Byte[] (bool );
    private void ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    internal virtual string ();
    internal virtual void ();
    internal virtual void (int , int );
    internal virtual void ( , int );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    private static Byte[] ( , bool );
    private static  ( , bool , int , int );
    private  ();
    private  ( );
    private  (int , int , int ,  , ArrayList );
}
internal class  :  {
    internal double ;
    internal string ;
    internal (double );
    internal virtual object ();
    internal virtual string ();
    internal virtual string ();
    internal virtual  ();
    internal virtual double ();
    internal virtual bool ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    public static  (string );
    public static ICollection ();
    public static  ( );
    public static  (string );
    public static string ( );
    private static int (string );
    private static  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
public static  ;
    public (double , double , double , double );
    public ( );
    private static ();
    public double ();
    public  ();
    public  ();
    public static  op_UnaryNegation( );
    public static  op_Subtraction( ,  );
    public static  op_Multiply(double ,  );
    public static  op_Multiply( , float );
    public static  op_Multiply( ,  );
    public static  op_Division( , double );
    public static  op_Addition( ,  );
    public static double ( ,  );
    public double ( );
    public  ();
    public  ( );
    public  (float );
    public  ( );
    public  (double );
    public  ( );
}
internal class  :  {
    internal int ;
    internal  ;
    internal Byte[] ;
    internal int ;
    internal int ;
    internal (Stream );
    public ( );
    public ( , Byte[] );
    public ( , Byte[] , int );
    public virtual int ();
    public virtual  ();
    public virtual Byte[] ();
    public long ();
    public virtual long ();
    public virtual int ();
    public virtual void ( );
}
internal interface  {
    public abstract virtual bool (int );
    public abstract virtual int ();
}
internal class  : object {
    internal static string ( );
    internal static  (string );
    internal static  (string );
    internal static string ( );
    internal static  (string );
    internal static string ( );
    internal static  (string );
    internal static string ( );
    internal static BackgroundType (string );
    internal static string (BackgroundType );
    internal static AutoShapeType (string );
    internal static MsoDrawingType ( );
    internal static string (AutoShapeType );
    internal static string (FillType );
    internal static CheckValueType (string );
    internal static AutoShapeType (string );
}
internal class  :  {
    private  ;
    private Byte[] ;
    public ( );
    private void (Byte[] , int , Byte[] , Byte[] , int );
    private Byte[] (int );
    public virtual  (int );
    public virtual  (string , int );
    public virtual  (int , int );
    public virtual  (string , int , int );
    public virtual  (int );
}
internal class  : object {
    internal static bool (string );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static string (string );
}
internal class  : object {
    private Point ;
    private Point ;
    private Point ;
    private double ;
    public (Point , Point , Point );
    public double ();
    public  (Point );
    private double (Point , Point , Point );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    public ( );
    public void (string );
    public void (string , bool );
    public void (Stream , bool , bool );
    public void (Stream );
    public void (string , bool , bool );
    public  ();
    public  ();
    public  ();
    public void ( );
    public  (string );
    public  (string , string , string );
    public  (string );
    public  (string , string );
    public  (string , string , string );
    public virtual  (string , string , string );
    public void (Stream , bool );
    public void ( );
    public virtual void ( );
    public virtual void ( );
}
internal class  : object {
    private MemoryStream ;
    private int ;
    private ActiveXControl ;
    private ArrayList ;
    private ArrayList ;
    private Byte[][] ;
    internal (ActiveXControl );
    internal Byte[] ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (Int32[] );
    private void (Byte[] );
    private void ();
    private void (String[] );
    private void ();
    private void (int );
    private void ();
    private void (short );
    private void (byte );
    private void (string );
}
internal class  :  {
    internal (Slicer );
}
internal class  : object {
    private IDictionary ;
    private (IDictionary );
    public IDictionary ();
    public Byte[] ();
    public Byte[] ();
    public Byte[] ();
    public Byte[] ();
    public Byte[] ();
}
internal abstract class  : object {
    private bool ;
    []
private  ;
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    [("True")]
public abstract virtual void ( );
    [("True")]
public abstract virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
[DefaultMemberAttribute("")]
internal abstract class  :  {
    [DebuggerBrowsableAttribute("0")]
internal [] ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    protected internal ( );
    protected internal ([] );
    protected internal ( );
    public static  (object );
    public static  ( , bool );
    public virtual IEnumerator GetEnumerator();
    public virtual  ();
    public virtual  (int );
    public virtual int ();
    public virtual [] ();
    protected virtual int ();
    protected virtual bool ( );
    public virtual string ToString();
}
internal static class  : object {
    private static  ;
    private static Byte[] ;
    private static  ;
    private static object ;
    private static bool ;
    internal static a1 a1;
    private static ();
    private static void ();
    private static Byte[] ();
    public static bool (object , Byte[] , ulong , int );
    private static bool (Byte[] , Byte[] );
    public static Byte[] (Object[] , Byte[] , ulong );
    internal static bool (object );
}
internal class  : object {
    internal PlacementType ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal double ;
    internal double ;
    internal void ( );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private Byte[] ;
    private int ;
    public ( , int );
    public virtual void (Byte[] );
    public virtual void (long );
    public virtual void (Byte[] );
    public virtual void (Byte[] , int , int );
    private void (Byte[] , int , int );
}
internal class  :  {
    private PointF ;
    private int ;
    private string ;
    private bool ;
    public (PointF , int , string );
    public virtual void ( );
    public PointF ();
    public int ();
    public string ();
    public bool ();
    public void (bool );
    public virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    public (Byte[] );
    public ( );
    public ( );
    internal virtual void ( );
    internal static void ( , Byte[] , int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    internal void ( );
    [("True")]
internal void ( );
    [("True")]
private void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( );
    public virtual  ();
    public virtual void WriteByte(byte );
    public virtual void Write(Byte[] , int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  :  {
    internal string ;
    internal virtual  ();
}
internal class  : object {
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal string ;
    internal int ;
    internal Double[] ;
    internal [] ;
    internal static bool ( ,  );
    internal static void ( , Style );
    internal static  (Style );
}
internal class  :  {
    public virtual bool ( );
    protected virtual  (byte );
    protected virtual byte ();
}
internal enum  : Enum {
    public int value__;
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected string ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
[]
private SeriesLayoutProperties ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal Size ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public ( ,  ,  );
    public  ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    internal int ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual int ();
    public abstract virtual void (int );
    internal  ();
    public  ();
    internal  ();
    public  ();
    internal  ();
    public  ();
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    public  ();
    public  ();
    public string ();
    public void (string );
    internal virtual string ();
    public int ();
    public void (int );
    public  ();
    public bool ();
    public SeriesLayoutProperties ();
    public void (SeriesLayoutProperties );
    internal bool ();
    public bool ();
    public void (bool );
    public  ();
    public bool ();
    public void (bool );
    public  ();
    public  ();
    public void ( );
    public  ();
    public void ( );
    internal bool ();
    public bool ();
    public void (bool );
    internal bool ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal  ();
    public  ();
    internal  ();
    public  ();
    public bool ();
    public void (bool );
    internal  ();
    public  ();
    public  ();
    public  ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    internal  ();
    public  ();
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public double ();
    public void (double );
    public bool ();
    public bool ();
    public void (double );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal bool ([] );
    internal bool ( );
    internal bool ([] );
    internal bool ( );
    internal bool ();
    public bool ();
    public int ();
    public void (int );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    public bool ();
    internal bool ();
    internal bool ();
    public bool ();
    internal bool ();
    internal bool ();
    public bool ();
    public void (bool );
    public float ();
    public void (float );
    public  ();
    public void ( );
    public double ();
    public void (double );
    public Int32[] ();
    public void (Int32[] );
    internal bool ();
    internal void ();
    internal int ();
    internal abstract virtual int ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    [("True")]
protected virtual void (bool );
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public (IEnumerable );
    public static  (object );
    public [] ();
    public virtual  ();
}
internal class  : object {
    private Workbook ;
    private EbookLoadOptions ;
    private  ;
    private  ;
    internal bool ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private int ;
    public (Workbook , LoadOptions );
    internal void ( );
    private void ( , string );
    public static string (string , string , string );
    public static string (string , string , string );
    private void ( , int );
    private Stream (string );
    internal static string (Workbook , string );
    private void (Worksheet , int , int , string , Worksheet );
    internal static string (string );
    private  (List`1<> , string );
    private void (Hashtable , Hashtable );
}
internal class  :  {
    internal ( );
}
internal abstract class  : object {
}
internal interface  {
    public abstract virtual float ();
    public abstract virtual float ();
    public abstract virtual GraphicsUnit ();
    public abstract virtual void (GraphicsUnit );
    public abstract virtual float ();
    public abstract virtual void (float );
    public abstract virtual SmoothingMode ();
    public abstract virtual void (SmoothingMode );
    public abstract virtual TextRenderingHint ();
    public abstract virtual void (TextRenderingHint );
    public abstract virtual Region ();
    public abstract virtual void (Region );
    public abstract virtual void (RectangleF , CombineMode );
    public abstract virtual void (GraphicsPath , CombineMode );
    public abstract virtual Matrix ();
    public abstract virtual void (Matrix );
    public abstract virtual void (float , float );
    public abstract virtual void (float , float );
    public abstract virtual void (Matrix );
    public abstract virtual void (Color );
    public abstract virtual void (Pen , PointF , PointF );
    public abstract virtual void (Pen , GraphicsPath );
    public abstract virtual void (Brush , GraphicsPath );
    public abstract virtual void (Brush , Rectangle );
    public abstract virtual void (Image , float , float , float , float );
    public abstract virtual void (string , Font , Brush , PointF , StringFormat );
    public abstract virtual GraphicsState ();
    public abstract virtual void (GraphicsState );
    public abstract virtual IntPtr ();
    public abstract virtual void (IntPtr );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    public ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal CustomFunctionDefinition ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Char[][] ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Stack ;
    [DebuggerBrowsableAttribute("0")]
private Stack ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private StringBuilder ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (Workbook ,  , bool , FileFormatType , bool );
    public (Workbook ,  , bool , FileFormatType );
    public (Workbook ,  , bool );
    public (Worksheet ,  , bool );
    public virtual void Dispose();
    public static Byte[] (int , int , bool , byte );
    public static Byte[] (byte , bool );
    public virtual void ();
    public virtual  ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public  ();
    public bool (string );
    public  ();
    public  ();
    public  (int );
    public  (string , int , bool );
    public void (string ,  );
    private void ();
    public  (string );
    public  ();
    public int (string , bool , string );
    public  (string , bool );
    public  (bool );
    public  (string );
    public void (string ,  );
    public  (bool );
    private  ();
    internal byte (string );
    internal ListObject (string );
    internal ListObject ();
    []
internal Byte[] ( , Char[] , bool );
    internal Byte[] (string );
    internal Byte[] (string , bool );
    []
internal Byte[] (Char[] , int , int , bool );
    internal  (string );
    internal  (Char[] , int , int );
    private void (Char[] , int , int );
    private void ();
    private  ();
    private int (bool , char , int );
    private void ();
    private void ();
    private bool ();
    private void ();
    private void ();
    private bool ();
    private  ( );
    private void ();
    private bool ();
    private  ( );
    []
private  (int );
    private  ( , bool );
    private  ( ,  );
    private bool (int );
    private bool ();
    private bool ();
    private bool (Char[] );
}
internal class  : object {
    []
internal PivotItem ;
    internal int ;
    internal List`1<> ;
    internal ArrayList ;
    internal double ;
    internal bool ;
}
internal class  : object {
    private  ;
    private  ;
    private IDictionary ;
    private IList ;
    public void (string );
    public void (bool );
    public void (string , bool ,  );
    public void (string , bool , Byte[] );
    public virtual void ( , bool ,  );
    public virtual void ( , bool , Byte[] );
    public  (string , Byte[] );
    public  (string , Byte[] , BigInteger );
    public virtual  ( , Byte[] );
    public virtual  ( , Byte[] , BigInteger );
}
internal class  : object {
    private Byte[] ;
    internal Byte[] ();
    internal void (Byte[] );
    internal int ();
}
internal class  : object {
    internal static  ;
    internal String[] ;
    internal int ;
    internal String[] ;
    internal Object[] ;
    internal  ;
    internal int ;
    public (int );
    private static ();
    private void ( ,  );
    internal void ( );
    internal void ( , CopyOptions );
    internal bool ( );
    internal bool ( , int ,  );
    internal object ( , int ,  );
    internal  ( );
    internal int ( );
    internal void (int ,  );
    internal void (int ,  );
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , long );
    protected static Byte[] (long );
    public long ();
}
internal class  : object {
    private static Char[] ;
    private static ();
    internal static int (Char[] );
    internal static int (Char[] , int , int );
    internal static string (string , int , int );
    internal static string (Char[] , int , int );
    internal static string (string , int );
    internal static string (string , int , int , string );
    internal static  (string , string , int );
    internal static  (string , string , int );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    private static bool (char );
    private static int (char , string , int );
    internal static string (string , int );
    internal static string (string );
    internal static string (int , int );
    internal static int (string , string , int );
    internal static int (string , string , int );
    private static int (char );
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    internal void ( );
    internal void ( ,  );
    internal void ( ,  );
    internal void ( ,  );
    internal void ( ,  );
    internal void ( ,  );
    internal void ( ,  );
    internal void ( );
    internal void ( ,  );
    internal void ( );
    internal void ( ,  );
    internal void ( );
}
internal class  : object {
    protected  ;
    protected  ;
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal ( );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal void ( );
    internal static int (Byte[] , int , int );
    public sealed virtual int CompareTo(object );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    public (BigInteger , BigInteger , BigInteger );
    private ( );
    public static  ( , bool );
    public static  (object );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public virtual  ();
}
[AttributeUsageAttribute("2")]
[]
internal class  : Attribute {
    [DebuggerBrowsableAttribute("0")]
public int ;
    public (int );
}
internal class  :  {
    internal ( );
    internal virtual void (int , int , Byte[] , Byte[] );
    internal virtual Cell (Byte[] , int , int , Row , int );
    internal virtual int (Byte[] , int , Cell , byte , bool );
}
internal class  : object {
    internal static void (bool , string );
    internal static void (Byte[] , int , int , string );
    internal static void (Byte[] , int , int , string );
}
internal abstract class  : object {
    public static double (Double[] , int , int );
    public static double (Double[] , int , int );
    public static double (Double[] , int , int );
    public static double (Double[] , int , int );
    public static double (Double[] , int , int );
    public static double (Double[] , int , int );
    public static  (Double[] , int , int );
    public static  (Double[] , int , int );
    internal static int (int , int );
    internal static double (int );
    internal static double (int );
}
internal class  :  {
    internal ArrayList ;
    internal void (FillFormat );
    private void (Byte[] );
    internal void (TextureType );
    internal void (FillFormat );
    internal void (Area );
    private void (FillFormat );
    private void (int , Color );
    private void (int , float );
    internal void (FillFormat );
    private void (Byte[] , int , int , GradientStop , Workbook );
    internal int ();
    internal int ();
    internal int ();
    private Byte[] ();
    private Byte[] ();
    internal virtual void ( );
    private Byte[] (double );
}
internal class  :  {
}
internal class  : object {
    private int ;
    private  ;
    private bool ;
    private bool ;
    internal void ( );
    public int ();
    public void (int );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal static bool (Chart , ChartType );
    private void ();
    internal virtual void ( );
    private void ();
    private void ();
    private string ( );
    private void (string ,  , string );
    private void ();
    private static string (LegendPositionType );
    private void (Title , bool );
    private void (ChartTextFrame );
    private void (string , string );
    private void (ChartTextFrame );
    private static bool (ChartType );
    private void ();
    private void ();
    private void ();
    private void (Series , int );
    private static string (ChartType );
    internal static string ();
    internal static string ();
    private void (Series , int );
    private bool (Series );
    private void (Series );
    private static string (MapChartProjectionType );
    private static string (MapChartRegionType );
    private void (SeriesLayoutProperties );
    private void (Series );
    private void ( );
    private static string (MapChartLabelLayout );
    private void (DataLabels , Series );
    private void (string , bool );
    private void (DataLabels , Series , ChartPoint );
    private void (DataLabels );
    private void (Axis , bool , int );
    [("True")]
private static void ( , string , string );
    private static void ( , string , string , string );
    private void (Axis );
    private void (DisplayUnitLabel );
    private void (Axis );
    private void (Axis );
    private void ();
    private bool ( , ShapePropertyCollection );
    private void ();
    private static void ( , PageSetup , string );
    private static void ( , PageSetup , string );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  :  {
    private Boolean[] ;
    private char ;
    private char ;
    private  ;
    private  ;
    private bool ;
    private  ;
    internal ( ,  , FontStyle ,  , bool );
    internal void (string );
    public virtual void (Stream );
    public virtual void ( );
    private void ( );
    [("True")]
protected virtual string ();
    internal virtual string ();
    internal virtual bool ();
    internal static bool (string );
    internal static bool (string );
    internal virtual string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public static double ;
    public static double ;
    public static double ;
    private static ();
    public static  (double );
    public static  (double );
    public static  (double );
    public static  (double );
    public static ulong (double , double );
    public static ulong (double );
    public static long (double );
    public static ulong (long );
    public static long (long );
    public static bool (double , double , int );
    public static bool (double , double , ulong );
    public static bool (double , double , double , double );
    public static bool (double , double , double );
    public static bool (double , double , double );
    public static bool (double , double );
    public static bool (Double[] , Double[] );
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Byte[] ;
    internal int ;
    private  ;
    internal int ;
    internal  ;
    internal (Byte[] ,  );
    internal bool ();
    internal  ();
    internal void (int );
    internal void ( );
    private void ();
    public double ();
    public float ();
    public long ();
    public long ();
    public int ();
    public long ();
    public UInt32 ();
    public bool ();
    public string ();
    internal Byte[] ();
    internal Byte[] (int );
    public UInt32 ();
    internal ArrayList ();
    internal ArrayList ();
    internal ArrayList ();
    public int ();
    public int ();
    public long ();
    public int ();
    public long ();
    internal int ();
    internal void (int );
    internal void ();
    internal long ();
    internal int ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private BigInteger ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    private ( );
    public sealed virtual bool (object );
    public sealed virtual object Clone();
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public BigInteger ();
    public void (BigInteger );
    public void ( );
    public void (Byte[] );
    public void (IEnumerable );
    public IEnumerable ();
    public void ( );
    public void (Byte[] );
    public void (IEnumerable );
    public IEnumerable ();
    private  (IEnumerable );
}
internal class  : object {
    internal  ;
    internal static  ( );
}
internal abstract class  : object {
    internal  ;
    internal double ;
    protected ( , double );
    protected  ();
    internal abstract virtual FormatCondition ();
    [("True")]
public abstract virtual ArrayList (RectangleF );
    [("True")]
public abstract virtual  (RectangleF , Double[] , TextAlignmentType , TextAlignmentType );
    [("True")]
public abstract virtual bool ();
}
internal class  : object {
    private static  ;
    private  ;
    private  ;
    private IList ;
    private  ;
    private static ();
    internal void ( );
    internal void ( );
    internal void (ICollection );
    internal void ( );
    public sealed virtual  ( ,  );
    private static  ( );
}
internal class  : object {
    private StringBuilder ;
    []
private WorksheetCollection ;
    internal bool ;
    private int ;
    private int ;
    internal (WorksheetCollection );
    private void (Byte[] , int );
    internal string (int , Byte[] , int , int , bool );
    internal string (int , int , Byte[] , int , int , bool );
    private void (Byte[] , ArrayList );
    private void (Byte[] , Int32& , ArrayList );
    private void (byte , StringBuilder );
    private string (Byte[] , int , Boolean& );
    private string (Byte[] , int , int , int );
    private string (Byte[] , int , int , int );
    private string (Byte[] , int , int , int );
    private string (Byte[] , int );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
}
internal class  : object {
    private ArrayList ;
    internal float ;
    internal float ;
    internal float ;
    public void ( );
    internal bool ();
    internal ArrayList ();
    public void ( , PointF );
}
internal class  :  {
    internal  ;
    public ( );
    public int ();
    public  ();
    public DateTime ();
    public [] ();
    public  ();
    protected virtual  ();
}
internal class  :  {
    internal UInt32[] ;
    internal [] ;
    internal Hashtable[] ;
    internal String[] ;
    private  ;
    private int ;
    private int ;
    internal (Byte[] ,  );
    private void ();
    internal void ();
    private void (Hashtable , int );
    internal Hashtable (UInt32 );
    private void (int );
    private int (int );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (object );
    public  (int );
    public int ( );
    public  ( );
    public void ( );
}
internal enum  : Enum {
    public int value__;
    public static  Uncompressed;
    public static  Zip;
    public static  ZLib;
    public static  BZip2;
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual void (int );
    public abstract virtual void ();
    public abstract virtual void (int , int );
}
internal class  :  {
    internal ArrayList ;
}
internal class  : object {
    private bool ;
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<AutoFilter> ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Row ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
[]
private HtmlSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    internal ( ,  , Row , int , HtmlSaveOptions , int );
    internal void ();
    internal ListObject (int , int , bool );
    internal void ();
    internal  (Cell , int , int , int );
    private  ( );
    internal void (int , int , int , bool );
    internal string ( );
    private string ( );
    private string ( );
    private void (Image , StringBuilder , string , string , int , int );
    private void (StringBuilder ,  ,  );
    private void (StringBuilder , ImageOrPrintOptions );
    private void ( , StringBuilder , int , int );
    private void ( , StringBuilder );
    private string (Byte[] , int );
    private void (StringBuilder ,  );
    private void (StringBuilder ,  , bool , bool );
    private string ( , bool , bool );
    private bool ( , StringBuilder );
    private void ( , StringBuilder , bool , bool );
    private void ( , Style , StringBuilder );
    private void (Style , StringBuilder );
    private string (Style );
    private void (Font , StringBuilder );
    internal static string (string );
    private void ( , StringBuilder );
    private void (StringBuilder , ArrayList ,  );
    private void ( , StringBuilder );
    private void (string ,  , StringBuilder );
    private void (StringBuilder , Font , bool );
    private string ( , bool );
    private string ( , string );
    private void (StringBuilder ,  );
    private void (StringBuilder ,  , string );
    private void (StringBuilder ,  , string );
    private bool (StringBuilder ,  );
    private string ( , string );
    private void (StringBuilder , Border , BorderType );
    private string (Hyperlink );
    private int (NameCollection , string );
    private string (NameCollection , int );
    private void (StringBuilder , Font , int , string ,  , bool );
    private string ( , bool );
    internal bool ();
    internal bool ();
    internal double ();
    internal Row (int , int );
    public sealed virtual void Dispose();
}
internal class  :  {
    private UInt32 ;
    private int ;
    private UInt32 ;
    private ArrayList ;
    internal int ;
    private Regex ;
    private  ;
    private  ;
    internal void ( );
    internal UInt32 ();
    internal void (UInt32 );
    internal UInt32 ();
    internal void (UInt32 );
    internal void ( );
    internal virtual void ( );
    internal void ( , bool ,  );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public void ( );
    public int ( );
    public int ( , object );
    public  (int );
    public  ( );
    internal bool (WorksheetCollection ,  );
    internal void (Style , bool );
    internal bool (Style , string , string );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public (CellArea );
    public (int , int );
    public (int , int , int , int );
    public sealed virtual int CompareTo(object );
    public virtual string ToString();
}
internal class  :  {
    internal void (ValidationCollection );
}
internal class  : object {
    private Byte[] ;
    private int ;
    public (Byte[] , int );
    public Byte[] ();
    public int ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal  ;
    internal ( );
    internal virtual void ();
    internal virtual void ( );
}
internal abstract class  : object {
    protected  ;
    private string ;
    private  ;
    private int ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    private int ;
    private bool ;
    private bool ;
    private TextDirectionType ;
    private bool ;
    internal bool ();
    internal void (bool );
    public  ();
    public  ();
    public void ( );
    public int ();
    public void (int );
    public double ();
    public string ();
    public void (string );
    public int ();
    public void (int );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal int ();
    public TextDirectionType ();
    public void (TextDirectionType );
    public bool ();
    public void (bool );
    protected virtual override void Finalize();
    public void ();
    protected virtual void (bool );
}
internal class  : object {
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static UInt32 (string );
}
internal abstract class  : object {
    public abstract virtual byte ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual int (Byte[] , Byte[] , bool );
    public abstract virtual void (Byte[] );
}
internal interface  {
    public abstract virtual Brush ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal interface  {
    public abstract virtual string ();
}
internal class  : object {
    private  ;
    private  ;
    internal ( ,  );
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int );
    public sealed virtual int (int , int );
    public sealed virtual double (int , int );
    public sealed virtual double (int , int );
    public sealed virtual void (Int32[] );
    public sealed virtual void (Int32[] );
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    private  ;
    internal ( );
    internal void (ArrayList ,  );
    internal void ( );
    private void ();
    internal void ();
    internal void ();
    internal void ();
    internal void (Worksheet );
    [("True")]
internal void (string , string , string );
}
internal interface  {
    public abstract virtual  (int );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private static double ;
    [DebuggerBrowsableAttribute("0")]
private static double ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    private static ();
    internal static void ( ,  , Rectangle , bool ,  );
    internal static void ( ,  , Rectangle , int );
    internal static void ( ,  , bool , float , Rectangle , int );
    private static void ( ,  , bool , float , Rectangle );
    internal static void ( ,  , bool , float , Rectangle ,  );
    internal static void ( ,  , bool , float , Rectangle , int );
    private static void ( ,  , bool , float , Rectangle );
    internal static void ( ,  , bool , float , Rectangle ,  );
    internal static void ( ,  , bool , float , Rectangle ,  );
    internal static void ( ,  , bool , float , Rectangle ,  , int );
    internal static String[] ( );
    private static void ( , string , RectangleF );
    private static void ( ,  , bool , float , float );
    private static void ( ,  , bool , float , float , float );
    private static void ( ,  , bool , float , float , float , double , double );
    internal static void ( ,  , bool , float , Rectangle , int , bool );
    internal static void ( ,  , bool , float , Rectangle , int , bool );
    private static void ( ,  , bool , float , float , Rectangle );
    private static void ( ,  , bool , float , float , Rectangle );
    private static void ( ,  , bool , float , Rectangle );
    internal static void ( ,  , bool , float , Rectangle ,  );
    private static void ( ,  , bool , float , float , float , Rectangle );
    private static void ( ,  , bool , float , float , float , double , double );
    internal static void ( ,  , bool , float , Rectangle , int );
    private static void ( , ArrayList[] , bool ,  ,  , double , Rectangle , float , float , float , float );
    private static void ( , List`1<> , float , float , float ,  , double );
    private static void ( ,  , bool , float , float , Rectangle );
    private static void ( ,  , bool , float , Rectangle );
    internal static void ( ,  , bool , float , Rectangle ,  );
    internal static void ( ,  ,  , Rectangle );
    internal static void ( ,  ,  , Rectangle );
    internal static Size ( ,  ,  , bool );
    internal static Size ( ,  , Rectangle , Rectangle , int , bool ,  );
    private static string ( , ArrayList , bool , ArrayList ,  ,  );
    private static int ( , int );
    internal static bool ( ,  );
    internal static bool ( ,  );
    internal static bool ( ,  );
    internal static Size ( , IList , int ,  , SizeF , double );
    internal static void ( ,  ,  , bool );
    private static string ( , double , int ,  , string , bool , bool );
    internal static DateTime (double , bool );
    internal static int (DateTime , bool );
    internal static string ( , object );
    internal static int ( , int , int , bool );
    internal static int ( , int , int , bool );
    internal static int ( ,  , int , int , bool );
    internal static int ( , int , bool );
    internal static int ( );
    private static int ( );
    private static void ( , ArrayList[] , float , float , float , bool ,  , double ,  ,  , float , Rectangle , bool );
    private static void ( , List`1<> , float , float , float , bool ,  , double );
    internal static  ( );
    public static void ( , Rectangle , string , int , TextOptions , Font , Color ,  ,  , bool );
    public static void ( , Rectangle , string , int , TextOptions , Font , Color ,  ,  , StringFormat , bool );
    public static void ( , Rectangle , string , int , Font , Color ,  ,  );
    public static void ( , RectangleF , string , int , Font , Color ,  ,  );
    [("True")]
internal static void ( ,  , string , PointF , SizeF , int , Font , Color ,  );
    [("True")]
internal static void ( ,  , string , PointF , SizeF , int , Font , Color ,  ,  );
    internal static void ( );
    internal static Size ( ,  , Rectangle );
    internal static void ( ,  );
    private static void ( ,  , float , float );
    private static void ( ,  , float , float , float );
    internal static void ( ,  , int , Rectangle , bool );
    private static void ( ,  );
    private static void ( ,  , int , int , int , bool );
    private static void ( ,  , int );
    internal static void ( ,  );
    private static void ( ,  );
    internal static void ( ,  , int , Rectangle );
    private static void ( ,  );
    private static void ( ,  , int , int );
    private static void ( , int ,  );
    internal static void ( ,  );
}
internal class  : object {
    private Stream ;
    private  ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    private Hashtable ;
    private Hashtable ;
    internal static string ;
    private Hashtable ;
    private string ;
    internal (Stream , Hashtable );
    private static ();
    internal bool ();
    internal  ();
    public sealed virtual string ();
    public string ();
    public sealed virtual bool ();
    public sealed virtual string (string );
    internal Hashtable ();
    internal Hashtable ();
    private void ( ,  , int , string );
    private void ( , string , int );
    private void (string , object , int , string ,  , bool );
}
internal class  : object {
    internal byte ;
    internal string ;
    internal  ;
    internal List`1<string> ;
    internal void ( );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
internal class  : object {
    []
private Chart ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public (Chart );
    internal void ( , CopyOptions );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
}
internal class  :  {
    protected  ;
    internal  ;
    protected Byte[] ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    public (Stream ,  );
    public (Stream , Stream ,  );
    public ( );
    public virtual void ( );
    protected virtual void ();
    protected virtual  ();
    internal virtual  ();
    protected virtual  ();
    protected virtual void (byte , MemoryStream );
    protected virtual void (IList );
    protected virtual void (MemoryStream );
    protected virtual void (MemoryStream );
    protected virtual void ( );
    protected virtual void ();
    protected virtual void ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private static Char[] ;
    private Byte[] ;
    public (Byte[] );
    private static ();
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    public Byte[] ();
    internal virtual void ( );
    protected virtual bool ( );
}
internal class  : object {
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    private static ();
}
internal class  :  {
    internal (Protection );
}
internal abstract class  : object {
}
internal class  : object {
    private ArrayList ;
    private ArrayList ;
    private bool ;
    internal bool ();
    internal void (bool );
    internal [] ();
    internal PointF[] ();
    internal void (PointF ,  );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private bool ;
    public ( );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
}
internal abstract class  : object {
    public static void (string );
    public static bool (string ,  );
    public static bool ( , Char[] , int , int );
    public static bool (char );
    public static bool (string );
    public static bool (string ,  );
    public static bool (string );
    public static bool (Char[] , int , int );
    public static bool (string ,  );
    public static bool (string );
    public static string (string );
    public static Byte[] (string , bool , bool , bool );
    public static string (Byte[] );
    public static  (Byte[] ,  );
    public static bool (Byte[] ,  );
}
internal class  : object {
    internal static bool (PivotTable );
    internal static bool (PivotTable );
    internal static bool (PivotTable );
    internal static bool (ArrayList , Cell , Int32& );
    internal static ArrayList (List`1<> , bool , PivotField , Boolean[] , ConsolidationFunction ,  , Int32& , Boolean& );
}
internal class  : object {
    public static  (Byte[] );
    public static  (Stream );
    public static  ( );
    private static Byte[] ( , int );
    private static bool ( );
    private static  ( , BigInteger ,  );
}
internal enum  : Enum {
    public int value__;
}
internal class  : Revision {
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public RevisionType Type { get; }
    internal (RevisionCollection );
    public virtual RevisionType get_Type();
    internal void (bool , bool , bool , bool ,  );
    internal static  (bool , bool , bool );
    internal Boolean[] ();
    internal string ();
    internal void (string );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    public ( );
    public (BigInteger , BigInteger , BigInteger );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public sealed virtual string ();
    public virtual Byte[] ();
    public virtual void ( );
}
internal class  : object {
    public static  ( ,  ,  ,  );
    private static bool ( );
    private static  ( ,  );
    private static  ( ,  , Boolean[] );
    public static  ( ,  ,  );
    public static  ( ,  ,  ,  , bool , bool , bool );
    public static  ( ,  ,  , bool , bool , bool );
    private static [] (Double[] , Double[][] , bool , bool , bool );
    private static [][] (Double[] , Double[][] , bool );
    private static [][] (Double[] , Double[][] , bool );
    private static Double[][] (Double[][] , Double[] );
    private static Double[] (Double[][] , Double[] , Double[] , double );
    private static Double[] (Double[] , Double[][] );
    private static Double[] (Double[][] );
    public static Double[][] (Double[][] );
    public static Double[][] (Double[][] , Double[][] );
    public static Double[][] (Double[][] );
    public static double (Double[][] );
    public static double (Double[][] );
    public static  (Double[] , Double[] , double , int , int , int , double , int );
    private static double (Double[] , double , double );
}
internal class  : object {
    internal static void ( , EquationNodeParagraph , Hashtable );
    private static void ( , EquationNodeParagraph , Hashtable );
    private static void ( , EquationNodeParagraph );
    private static void ( , EquationNode , Hashtable );
    private static void ( , EquationNode , Hashtable );
    private static void ( , EquationNode , Hashtable );
    private static void ( , FractionEquationNode , Hashtable );
    private static void ( , DelimiterEquationNode , Hashtable );
    private static void ( , NaryEquationNode , Hashtable );
    private static void ( , RadicalEquationNode , Hashtable );
    private static void ( , SubSupEquationNode , Hashtable );
    private static void ( , AccentEquationNode , Hashtable );
    private static void ( , BarEquationNode , Hashtable );
    private static void ( , BorderBoxEquationNode , Hashtable );
    private static void ( , BoxEquationNode , Hashtable );
    private static void ( , GroupCharacterEquationNode , Hashtable );
    private static void ( , MatrixEquationNode , Hashtable );
    private static void ( , LimLowUppEquationNode , Hashtable );
    private static void ( , ArrayEquationNode , Hashtable );
    private static void ( , MatrixEquationNode , Hashtable );
}
internal class  :  {
    private static [] ;
    protected  ;
    internal static  ;
    internal static  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    private  ;
    private SortedList ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private MemoryStream ;
    private MemoryStream ;
    private MemoryStream ;
    private MemoryStream ;
    private static String[] ;
    private static String[] ;
    private static String[] ;
    private static Int32[] ;
    private  ;
    private Hashtable ;
    private Hashtable ;
    private UInt32[] ;
    private int ;
    private int ;
    private static ();
    internal  ( );
    [("True")]
internal  ( );
    [("True")]
internal void ( ,  ,  , Stream , bool , bool , bool );
    [("True")]
internal Hashtable ( ,  , int );
    private void (bool , bool , Stream );
    private int (ArrayList , bool );
    private ArrayList (bool , bool );
    private void (String[] , ArrayList );
    private void (bool );
    private void (bool );
    private void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal int ();
    internal  ();
    internal void (string );
    internal  (string );
    internal Byte[] (string );
    internal string ( );
    internal string ( );
    internal void (string , MemoryStream );
    internal void (string );
    internal void ();
    internal [] ( );
    private bool ();
    [("True")]
private [] ();
    private void (UInt32 );
    [("True")]
private void (int );
    private bool (int );
    [("True")]
private int ();
    internal Hashtable ();
    internal  ( , string );
    internal  (string , string );
    internal  (Byte[] , string );
    internal  (Stream , string );
    [("True")]
private void (string );
    private static void (ArrayList , [] );
    private static [] (ArrayList );
}
internal class  :  {
    internal ( , float , float ,  );
    private float (RectangleF );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    public ( );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    private int ;
    private Byte[] ;
    private long ;
    private int ;
    [CompilerGeneratedAttribute]
public sealed virtual int ();
    public void (int );
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] ();
    public void (Byte[] );
    [CompilerGeneratedAttribute]
public sealed virtual long ();
    public void (long );
    public int ();
    public void (int );
}
internal class  : object {
    internal  ;
    internal List`1<> ;
    internal void ( );
}
internal abstract class  : object {
    protected static Byte[] ;
    private static ();
    public abstract virtual string ();
    public abstract virtual void (bool ,  );
    public abstract virtual int ();
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual Byte[] (byte );
    public virtual int (byte , Byte[] , int );
    public virtual Byte[] (Byte[] );
    public abstract virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public abstract virtual Byte[] ();
    public virtual Byte[] (Byte[] );
    public abstract virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual int (Byte[] , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public abstract virtual void ();
}
internal class  : object {
    private int ;
    private Int32[] ;
    private Int32[] ;
    private [][] ;
    internal  ();
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  ();
    public sealed virtual bool ();
    public sealed virtual Int32[] ();
    public  (int , short , int , short );
    public void (int , short , int , short , long );
    public void (int ,  );
    public void (int , short ,  ,  );
    public void (CellArea ,  ,  );
    public ArrayList (ArrayList );
}
internal class  :  {
    [("True")]
internal (Workbook );
}
internal class  :  {
}
internal class  :  {
    internal ( , string );
    protected virtual double (double );
    protected virtual Char[] (Char[] , Int32[] , Int32[] );
}
internal class  :  {
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
}
internal class  : object {
    []
private  ;
    private SortedList ;
    private SortedList ;
    private SortedList ;
    private SortedList ;
    private SortedList ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private static Hashtable ;
    internal ( );
    private static ();
    internal int ( );
    internal  ( , int );
    internal  ( , bool , bool );
    internal  (Brush );
    internal  (Brush );
    internal  ();
    internal  ( );
    internal  ( , string );
    internal  ( , bool , string );
    internal  (string );
    internal  ( , bool );
    internal  (int );
    internal void ( );
    internal void ( );
    private void ( ,  );
    private void ( ,  );
    internal static string ( );
    internal static string ( );
    private static string (string , FontStyle ,  , bool , bool );
    [("True")]
private SortedList ( );
    private static string ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    internal ( , float , float ,  );
    internal virtual void ();
    internal GraphicsPath (float , float , float , float , int );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal string ;
    internal long ;
    internal long ;
    internal bool ;
    internal long ;
    internal long ;
    internal long ;
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual BigInteger ();
    public abstract virtual DateTime ();
    public abstract virtual DateTime ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual [] ();
    public abstract virtual [] (string );
    public abstract virtual Boolean[] ();
    public abstract virtual bool ();
    public abstract virtual bool (DateTime );
    public abstract virtual void ();
    public abstract virtual void (DateTime );
    public abstract virtual Byte[] ();
    public abstract virtual void ( );
    public abstract virtual Byte[] ();
}
internal class  :  {
    internal bool ;
    internal int ;
    internal ( );
    internal virtual int ();
    internal virtual void ( );
}
internal class  : object {
    internal [] ;
    private Hashtable ;
    private  ;
    private int ;
    internal ([] , Hashtable , int ,  );
    internal Hashtable ();
    public sealed virtual  ();
    public sealed virtual  (int );
    public sealed virtual string (int );
    public sealed virtual  (string );
    public sealed virtual void ( );
    public sealed virtual void ( );
    public sealed virtual  (string );
    public sealed virtual int ();
    public sealed virtual UInt32 ();
    public sealed virtual int ();
    public void (int );
    public sealed virtual bool ();
    public sealed virtual void ( );
    public sealed virtual void (int );
    internal bool ();
    internal bool ();
    internal int (Int32[] , Int32[] ,  );
    private void (int );
    public sealed virtual  ( );
    internal void ();
    internal void (string );
    internal  ( , WorksheetCollection , WorksheetCollection );
    internal  (string , Byte[] );
    internal  ( , int , WorksheetCollection , SaveFormat , Hashtable );
    internal String[] ();
}
internal class  : object {
    private static IDictionary ;
    private static  ;
    private static IDictionary ;
    private static  ;
    private static IDictionary ;
    private static IDictionary ;
    private static  ;
    private static  ;
    private static  ;
    private static  ;
    private static  ;
    private static  ;
    private static  ;
    private static  ;
    private static ();
    private static  (string );
    private static  ( , int );
    public  (string );
}
internal class  : object {
    internal int ;
    private Hashtable ;
    private StringBuilder ;
    []
private WorksheetCollection ;
    []
private Cell ;
    private int ;
    private int ;
    internal (WorksheetCollection );
    internal void ();
    internal void ();
    internal void ();
    private bool ();
    private void (StringBuilder , Byte[] , int );
    internal string (Cell );
    internal string (int , Byte[] , int , int , bool );
    internal string (int , int , Byte[] , int , int , bool , bool , int );
    internal void (StringBuilder ,  , int , int , bool );
    private string (Byte[] , Int32& , int , int , bool );
    private void (Byte[] , ArrayList );
    private int (Byte[] , int , ArrayList );
    private string (Byte[] , int , int , int , bool );
    private string (Byte[] , int , int , int );
    private string (Byte[] , int );
    private void (Byte[] , int , ArrayList );
    private void (string , int , ArrayList );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
}
internal class  : object {
    []
protected Workbook ;
    []
protected Worksheet ;
    []
private Cells ;
    private int ;
    protected Double[] ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    protected double ;
    protected double ;
    protected double ;
    protected double ;
    protected double ;
    protected double ;
    []
private Style ;
    private ArrayList ;
    private ArrayList ;
    private int ;
    private int ;
    private int ;
    private int ;
    private ArrayList ;
    internal  ;
    private double ;
    private double ;
    private double ;
    private double ;
    internal ArrayList ;
    []
internal ImageOrPrintOptions ;
    private  ;
    private Double[] ;
    private int ;
    protected SizeF ;
    protected int ;
    internal bool ;
    internal bool ;
    private List`1<CellArea> ;
    internal (Workbook ,  , ImageOrPrintOptions );
    private bool (string ,  );
    private bool (string , Worksheet );
    private void ();
    private void ();
    private void (Worksheet );
    private void (Worksheet );
    private bool ( , bool , bool );
    private int (int , int , int , int );
    protected bool ( , bool , bool );
    private int (int );
    public virtual void (SheetSet );
    public void ();
    protected bool (Worksheet );
    protected CellArea (CellArea , bool );
    protected bool ( );
    protected virtual void (CellArea , bool , int );
    protected bool (bool );
    protected bool ();
    private void ();
    private void ( );
    private void (int );
    private bool ();
    private void (Worksheet );
    private void (int , int , double , Double[] );
    private void (int , int , double , Double[] );
    private static double (double );
    protected void ( , RectangleF , CellArea , int );
    protected void ();
    private ArrayList ( );
    private bool (int , int , int );
    private double (int , double );
    private double (int , double );
    private ArrayList (int , int , PageSetup , double );
    private ArrayList (int , int , PageSetup , double );
    protected void (double , ArrayList , Rectangle );
    private void (ArrayList , Rectangle , double );
    private int (ArrayList , int );
    protected void (ArrayList , ArrayList );
    protected void (double , ArrayList , Rectangle );
    private void (ArrayList , Rectangle , double );
    protected void (ArrayList , ArrayList );
    private void (PageSetup );
    private void ();
    protected void ();
    private void ();
    internal int ();
    internal int ();
    internal int ();
    internal int ();
    private double (int );
    private double (int , int );
    private double (int );
    private double (int , int );
    private int (int );
    private int (int , int );
}
internal abstract class  :  {
}
internal class  :  {
    private int ;
    public (Byte[] );
    internal virtual int ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private static Byte[] ;
    private int ;
    private int ;
    private int ;
    private Byte[] ;
    public (Byte[] );
    public (bool , Byte[] );
    public ( , Byte[] );
    private static ();
    private static Byte[] ( , Byte[] );
    public virtual int ();
    public virtual int ();
    public virtual Byte[] ();
}
internal class  : object {
    internal static string ;
    private static ();
}
internal class  :  {
    internal string ;
}
internal class  : object {
    private UInt32[] ;
    private UInt32[] ;
    private UInt32 ;
    private Byte[] ;
    private Byte[] ;
    private bool ;
    private Byte[] ;
    private int ;
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private UInt32 (UInt32 , UInt32 , UInt32 );
    private UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , int );
    private static UInt32 (UInt32 , int );
    private UInt32 (UInt32 );
    private UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 , UInt32 );
    private UInt32 ();
    private void ();
    public virtual string ();
    public virtual void (bool ,  );
    private byte ();
    public virtual void (Byte[] , int , int , Byte[] , int );
    public virtual void ();
    public virtual byte (byte );
}
internal class  : object {
    []
internal Workbook ;
    []
internal Worksheet ;
    internal int ;
    []
internal HtmlSaveOptions ;
    []
private  ;
    internal ( , int , HtmlSaveOptions );
    internal string (HtmlSaveOptions );
    internal static string (int );
    internal string ( , int , int );
    internal void ( );
    internal void ( );
    private void ( );
    internal void ( , HtmlSaveOptions );
    private void ( ,  );
    private void ( ,  );
    private void ( , ArrayList , Hashtable , Hashtable );
    private void ( );
    private void ( );
    internal void ( , string );
    private void ( , string , string );
    private static string (string , string , string );
    private void ( );
    private void ( );
    private string (HtmlSaveOptions );
    private string (string );
    internal void ( );
    internal void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( , PageSetup , bool );
    private void ( , Picture , int , string , bool );
    private string (int );
    private bool (double );
    private void ( );
}
internal class  :  {
    internal void (ushort );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
protected Hashtable ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private DocxSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public (Workbook , SaveOptions );
    public void ();
    internal virtual void ();
    internal virtual void ();
    private void ( );
    private void ( );
    internal virtual void ();
    private void ( , double , double , PageSetup );
    private void ();
    private void (string , string , string , string , string , string ,  , Worksheet );
    private void (Worksheet );
    internal void ();
    private void ( );
    private void ( ,  , Worksheet );
    private void ( ,  ,  );
    private void ( , Style , StyleModifyFlag , BorderType , string );
    private void ( ,  ,  , Int32& );
    private void ( ,  );
    private void ( ,  );
    private void ( );
    private void ( ,  ,  , int );
    internal virtual void (MemoryStream , int , int );
    internal virtual void ();
    internal void (string , string , string , string , string );
    private void ();
    private bool ( );
    private void ( , int );
    private void ( , int );
    private void (string ,  );
    private void (string ,  );
    private void ( ,  );
    private string (string , Worksheet , int );
    private string (string , string , StringBuilder );
    private void (Font , StringBuilder );
    private void ( );
}
internal class  : object {
    internal static double (Worksheet , double , WorksheetCollection );
    internal static int (WorksheetCollection );
    internal static double (double , WorksheetCollection );
    internal static double (double , WorksheetCollection );
    internal static int (double , Worksheet );
    internal static int (double , WorksheetCollection );
}
internal class  :  {
    internal void (HorizontalPageBreak );
    internal void (VerticalPageBreak );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private  ;
    private int ;
    public ( , int , Byte[] );
    public ( , int , Byte[] , Byte[] );
    public virtual  ();
    public virtual int ();
    public virtual Byte[] ();
    public virtual Byte[] ();
}
internal class  : object {
    internal string ;
    internal string ;
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal RectangleF ;
    [DebuggerBrowsableAttribute("0")]
internal RectangleF ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private DataLabelShapeType ;
    [DebuggerBrowsableAttribute("0")]
private ShapeGuideCollection ;
    [DebuggerBrowsableAttribute("0")]
internal Size ;
    [DebuggerBrowsableAttribute("0")]
internal PointF ;
    [DebuggerBrowsableAttribute("0")]
internal PointF ;
    [DebuggerBrowsableAttribute("0")]
internal PointF ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
private ChartPoint ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private TextDirectionType ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private DataLabels ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public  ();
    protected abstract virtual  ();
    public bool ();
    internal bool ();
    internal int ();
    private int ();
    internal int ();
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public string ();
    public void (string );
    public  ();
    public bool ();
    internal bool ();
    public bool ();
    public void (bool );
    public DataLabelShapeType ();
    public void (DataLabelShapeType );
    public ShapeGuideCollection ();
    internal bool ();
    internal bool ();
    internal int ();
    internal string ();
    internal void (string );
    public DataLabels ();
    public void (DataLabels );
    internal ChartPoint ();
    internal void (ChartPoint );
    internal bool ();
    public int ();
    public void (int );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal int ();
    public TextDirectionType ();
    public void (TextDirectionType );
    internal bool ();
    internal void ();
    public TextOptions ();
    internal float ();
    internal float ();
    internal float ();
    internal float ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  : object {
    private Guid ;
    private  ;
    internal (Stream );
    internal void (Stream );
    internal  ();
}
internal class  :  {
    private string ;
    public string ();
    public void (string );
    public virtual byte ();
}
internal class  : object {
    internal string ;
    []
private object ;
    private  ;
    private  ;
    internal ArrayList ;
    private  ;
    internal (object );
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal void ( );
    internal bool ( );
}
internal class  :  {
    internal void (DynamicFilter );
}
internal abstract class  : object {
    private static long ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private object ;
    internal ( ,  );
    private static ();
    private static long ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public abstract virtual bool ();
    public virtual  ();
    internal virtual void ( );
    public virtual  ();
    internal virtual void ( );
    public virtual  ();
    internal virtual void ( );
    public virtual object ();
    public virtual void (object );
    public virtual Byte[] (string , Byte[] , int );
}
internal class  : object {
    public static RectangleF ();
    public static SizeF ();
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public ( ,  ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private  ;
    public ( , int );
    public  ();
    public sealed virtual void (bool ,  );
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public sealed virtual void ();
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual void ( );
    [("True")]
public abstract virtual void ();
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual int ();
    public abstract virtual bool ();
}
internal class  : object {
    private UInt32 ;
    private UInt32[] ;
    internal static UInt32[] ;
    internal ( , UInt32 );
    internal ( );
    internal ( , UInt32 );
    internal (Byte[] );
    internal (UInt32[] );
    internal (UInt32 );
    internal (ulong );
    private static ();
    public static  op_Implicit(UInt32 );
    public static  op_Implicit(int );
    public static  op_Implicit(ulong );
    public static  op_Addition( ,  );
    public static  op_Subtraction( ,  );
    public static int op_Modulus( , int );
    public static UInt32 op_Modulus( , UInt32 );
    public static  op_Modulus( ,  );
    public static  op_Division( , int );
    public static  op_Division( ,  );
    public static  op_Multiply( ,  );
    public static  op_Multiply( , int );
    public static  op_LeftShift( , int );
    public static  op_RightShift( , int );
    internal static  ( ,  );
    internal static  ( ,  );
    internal static int ( , int );
    internal static UInt32 ( , UInt32 );
    internal static  ( ,  );
    internal static  ( , int );
    internal static  ( ,  );
    internal static  ( ,  );
    internal static  ( , int );
    public int ();
    internal bool (UInt32 );
    internal bool (int );
    internal void (UInt32 );
    internal void (UInt32 );
    internal void (UInt32 , bool );
    internal int ();
    internal Byte[] ();
    public static bool op_Equality( , UInt32 );
    public static bool op_Inequality( , UInt32 );
    public static bool op_Equality( ,  );
    public static bool op_Inequality( ,  );
    public static bool op_GreaterThan( ,  );
    public static bool op_LessThan( ,  );
    public static bool op_GreaterThanOrEqual( ,  );
    public static bool op_LessThanOrEqual( ,  );
    internal  ( );
    internal string (UInt32 );
    internal string (UInt32 , string );
    private void ();
    internal void ();
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object );
    internal  ( );
    internal  ( );
    internal  ( ,  );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private StringBuilder ;
    [DebuggerBrowsableAttribute("0")]
private StringBuilder ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private String[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    internal ( ,  );
    public sealed virtual object ParseObject(string );
    public object (Char[] , int , int );
    private object ();
    internal  ();
    private void ();
    private void (int , int , bool );
    private void (int , bool );
    private void (bool );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private bool ();
    private bool ();
    private bool ();
    private int ();
    private int ();
    private bool ();
    private bool ();
    private bool ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ( );
    private bool (char );
    private void (int , int );
    private void (int , int );
    private void ();
    private void ();
    private void ();
    private bool (int );
    private void ();
    private void ();
    private void ();
    public sealed virtual string GetFormat();
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
}
internal abstract class  :  {
    protected internal ( ,  ,  , bool );
    protected internal ( ,  ,  , [] , bool );
    public virtual Byte[] (bool );
    public virtual  (BigInteger );
}
internal class  :  {
    private float ;
    private float ;
    private RectangleF ;
    private  ;
    []
private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    internal ( , float , float , bool );
    internal SizeF ();
    internal RectangleF ();
    internal void (RectangleF );
    internal  ();
    internal void ( );
    public void (float );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    private void ( );
    private void ( );
    private string ();
    private bool ( );
    internal virtual void ( );
    public virtual void ( );
    internal  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal static GraphicsPath[] ( , RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual [] ();
}
internal class  : object {
    private Byte[] ;
    private  ;
    private  ;
    public void (UInt16[] , Byte[] );
    public void (Byte[] , Byte[] );
    public void (Byte[] , Byte[] );
    public void (Byte[] , Byte[] , Byte[] );
    public bool (UInt32 );
    public bool (Byte[] , UInt32 , UInt32 , Byte[] , UInt32 , UInt32 );
    public bool (Byte[] , UInt32 , UInt32 , Byte[] , UInt32 , UInt32 );
    public bool (UInt32 );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    internal (Workbook );
    internal virtual int ();
    internal virtual void ( );
}
internal abstract class  : object {
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private static float ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    private static ();
    internal static void ( , Rectangle ,  );
    internal static void ( , Rectangle& ,  );
    private static void ( ,  , Rectangle ,  );
    private static void ( , RectangleF , ArrayList ,  , RectangleF , PointF , float );
    private static int (PointF , RectangleF );
    private static PointF (double , double , double , double );
    private static bool (RectangleF , Rectangle );
    private static bool (RectangleF , RectangleF );
    private static PointF ( , RectangleF , double , double , double );
    private static void ( ,  , Rectangle ,  );
    private static void ( ,  , Rectangle ,  );
    private static int (Double[] , Double[] , double );
    private static void ( ,  , Rectangle ,  );
    private static void ( ,  , Rectangle , IList );
    private static void ( ,  , Rectangle , IList );
    internal static void ( ,  , Rectangle& ,  );
    internal static float (Rectangle ,  );
    internal static float (RectangleF ,  );
    internal static void ( ,  , Rectangle ,  );
    internal static void ( ,  , RectangleF ,  );
    private static void (Double& , Double& , double , SizeF );
    private static void (Double& , Double& , double , SizeF );
    private static void ( , double );
    private static void ( , double , ArrayList );
    private static void ( , double , ArrayList , ArrayList );
    private static void ( , ArrayList , Rectangle , Rectangle , ArrayList );
    private static void ( , ArrayList , Rectangle , Rectangle , ArrayList );
    private static void ( , ArrayList , Rectangle , Rectangle , ArrayList );
    private static void ( , ArrayList , Rectangle , Rectangle , ArrayList );
    private static ArrayList ( , ArrayList , ArrayList ,  );
    private static Object[] ( , ArrayList );
    private static void ( , ArrayList , Rectangle , Rectangle , ArrayList );
    private static void ( , ArrayList , int , int , bool );
    private static bool (RectangleF , RectangleF , float );
    private static ArrayList ( , Rectangle );
    private static ArrayList ( , RectangleF );
    private static bool (ArrayList , ArrayList );
    private static void (Rectangle , RectangleF , Single& );
    private static void (RectangleF , RectangleF , Single& );
    private static double (double , double );
    internal static RectangleF (Rectangle , double , double );
    internal static RectangleF (RectangleF , double , double );
    internal static SizeF ( ,  , int , int , double , float , float , double );
    internal static void ( ,  , int , int , double , RectangleF , double );
    public static void ( );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal abstract class  : object {
    private int ;
    public ( );
    public ( ,  ,  );
    public ( , [] , [] );
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual bool ();
    public sealed virtual  ();
    public sealed virtual  (int );
    public sealed virtual  (int );
    private static int ( , int , int );
    private  (int );
}
internal class  : object {
    internal double ;
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal  ;
    internal bool ;
    internal ArrayList ;
    internal ArrayList ;
    internal  ;
    internal ArrayList ();
    internal ArrayList ();
    internal  ();
}
internal class  : IOException {
    public (string );
    public (string , Exception );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Workbook ;
    public (Workbook , SaveOptions );
    public sealed virtual void (Stream );
    public sealed virtual void ();
    public sealed virtual void Dispose();
    private void ( );
    internal void (string , Stream );
    internal void ();
    internal static  (string ,  , string );
    internal void (Stream );
}
internal class  : object {
    internal static ListObject (WorksheetCollection , int );
    internal static float (CellBorderType );
    internal static string (object );
    internal static double (UInt32 );
    internal static UInt32 (double );
    internal static SlicerCacheCrossFilterType (string );
    internal static string (SlicerCacheCrossFilterType );
    internal static SlicerCacheItemSortType (string );
    internal static string (SlicerCacheItemSortType );
    internal static  (int );
    internal static int ( );
    internal static string ( );
    internal static  (string );
    internal static string (SlicerStyleType );
    internal static SlicerStyleType (string );
}
internal class  : object {
    public  ( , string );
}
internal class  :  {
    private  ;
    private  ;
    private bool ;
    public ( ,  , int , int ,  );
    public virtual  ( );
    public virtual void ( );
    public sealed virtual  ( );
    public sealed virtual  ( , bool );
}
internal class  :  {
    internal (Workbook , LoadOptions );
    public void ();
    public virtual void Dispose();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal static void (Workbook ,  ,  );
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ( ,  );
    internal virtual void ( ,  , object );
    internal virtual void ( ,  );
    internal virtual void ( );
    private void ( );
    private Hashtable (string );
    internal virtual void ();
    private void ( , Hashtable , string , int , string );
    internal virtual void ( ,  );
    internal virtual void ();
    internal virtual void ( );
    internal virtual void ();
    internal virtual void ();
    internal virtual void ( );
    internal virtual void ( ,  );
    internal virtual void ( );
    internal static bool (Stream , Chart );
    internal static Shape (Shape , bool );
}
internal class  : object {
    protected Int32[] ;
    internal (Int32[] );
    public virtual int ();
    public virtual Int32[] ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
}
internal class  :  {
    internal ( , float , float ,  );
    private  (Color , float );
    internal virtual void ();
}
internal class  : object {
    public static  ;
    private static ();
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal ICollection ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private IEnumerator ;
    [DebuggerBrowsableAttribute("0")]
private PropertyInfo[] ;
    public String[] Columns { get; }
    public int Count { get; }
    public object Item { get; }
    public object Item { get; }
    internal (ICollection , PropertyInfo[] );
    public sealed virtual String[] get_Columns();
    public sealed virtual int get_Count();
    public sealed virtual void BeforeFirst();
    public sealed virtual object get_Item(int );
    public sealed virtual object get_Item(string );
    public sealed virtual bool Next();
}
internal class  : object {
    internal Hashtable ;
    internal Hashtable ;
}
internal class  : object {
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private int ;
    private UInt32[][] ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private bool ;
    private static ();
    private static UInt32 (UInt32 , int );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private UInt32[][] (Byte[] , bool );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] , int );
    private void (Byte[] , int );
    private void (UInt32[][] );
    private void (UInt32[][] );
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private  ;
    private  ;
    private Hashtable ;
    public (int );
    public bool ();
    public int ();
    public  ( );
    public void ();
    public void (int );
    public  ( );
    public int ( );
    public  ();
}
internal class  :  {
    internal void (Font );
    internal void ( );
    internal void (Axis , DisplayUnitLabel );
    internal void ();
    internal void (DisplayUnitLabel , SaveFormat );
    internal bool (Font , int );
    internal void (Byte[] );
    internal void (string );
    internal void (bool , ChartFrame );
    internal void (Line , Palette );
    internal void (Area , Palette );
    internal void (Area , Palette ,  );
    internal void ();
    internal void ();
    private void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal CellArea ;
    internal int ;
    internal bool ;
    internal bool ;
    internal (CellArea );
    internal virtual void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( ,  , string );
    private void ( );
    private bool (string );
    private string (string );
    private void ( );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    private  ;
    internal ( );
    internal byte ();
    internal Byte[] (int );
    internal short ();
    internal ushort ();
    internal short ();
    internal int ();
    internal short ();
    internal int (int );
    internal  ();
    public Stream ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  :  {
    internal ( ,  ,  , Int32[] );
    private ( , int ,  );
    protected virtual  ( , bool );
    public virtual bool (int , int );
    public virtual bool ();
    public virtual bool ();
    protected virtual void ();
}
internal class  :  {
    internal void (FilterColumn , object );
    internal void (FilterColumn , DateTimeGroupItem );
    internal void (FilterColumn );
    private int (CellArea );
    private int ();
}
internal class  : object {
    internal  ;
    internal  ;
    internal float ;
    internal void ( );
}
internal class  : object {
    private static ArrayList ;
    private Hashtable ;
    private float ;
    internal float ;
    internal float ;
    internal float ;
    private static ();
    private static ArrayList ();
    public static ArrayList ();
    public static void (ArrayList );
    public Hashtable ();
    public void (Hashtable );
    public float ();
    public void (float );
}
internal class  :  {
    private string ;
    private  ;
    public (string ,  );
    public virtual BigInteger ( );
    private Byte[] (BigInteger );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private IComparable ;
    public (string );
    private static ();
    public string ();
    internal void (GlobalizationSettings , bool );
    internal IComparable ();
    internal void (IComparable );
    public bool ();
    public virtual  ();
    public virtual object ();
    public virtual bool ();
    public virtual byte ();
    public virtual  ( ,  );
    public virtual  ( );
    public virtual  ( );
    public virtual void (StringBuilder ,  );
    public virtual  ( );
    public virtual int CompareTo(object );
}
internal class  : object {
    internal PivotTableRefreshOption ;
    internal ArrayList ;
    internal Hashtable ;
    internal bool ;
    internal Boolean[] ;
    internal bool ;
    private String[] ;
    internal Hashtable ;
    internal (PivotTable );
    internal ( );
    internal void (ArrayList );
    internal void (PivotTable );
    internal void (PivotTable );
    internal int (int );
}
internal class  : object {
    private static  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private static ();
    private static bool ( ,  );
    public void ( );
    public void ( );
    private void ( ,  );
    private void ( ,  );
    private  ( ,  );
    private  ( ,  );
    private  ( ,  );
    private  ( , string );
    private  ( ,  );
    private  ( , Byte[] );
    private  (Byte[] , Byte[] );
    private  (Byte[] , Byte[] );
    private Byte[] (Byte[] , Byte[] );
    private Byte[][] (Byte[] , Byte[] );
    private Byte[][] (Byte[] , Byte[] , Byte[] , Byte[] );
    private void ( , string );
    private void ( , string );
    private void ( , Byte[] );
    private void ( , Byte[] );
    private bool (Byte[] , Byte[] );
    private bool (string , string );
    private bool (string , string );
    private void ( , string );
    private void ( , string );
    private void (string , string ,  );
    private void (string , string ,  );
    private  ( ,  );
    protected  ( , string );
    private void (string , string ,  );
    private void ( , string );
    private  ( ,  );
    private  ( , string );
    private void (string , string ,  );
    private void ( , string );
    private bool (string , string );
    private static string (string );
    public void ( );
    public void ( );
    public void ( );
    private string ( );
    public void (int );
    public void ( );
    private static Byte[] (Byte[] , Byte[] );
    private static Byte[] (Byte[] , Byte[] );
    private static int (Byte[] , Byte[] );
    private static Byte[] (Byte[] , Byte[] );
    public int ();
    public virtual int GetHashCode();
    private int (ICollection );
    public virtual bool Equals(object );
    private bool (ICollection , ICollection );
    private bool (object , object );
    private string (Byte[] );
    private string ( );
    public virtual string ToString();
}
internal class  : object {
    private int ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    []
private Workbook ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private SaveOptions ;
    public void (String[] , string , string );
    private void ();
    private FileStream (String[] , string , string );
    private void (String[] );
    private void (Workbook );
    private int ( , Hashtable );
    private void (Stream , Stream );
    private void (Stream );
    private Stream (Stream , string );
    private void (String[] , Stream , string , Int32[] );
}
internal class  :  {
    internal ( ,  );
    internal  ();
    public  ();
    internal  (int );
    public virtual int ( );
    internal IList ();
    public int ( , string );
    public ArrayList ();
}
internal class  : object {
    private  ;
    private  ;
    internal ( ,  );
    internal ( ,  ,  , Byte[] , bool , bool ,  , bool );
    [ObsoleteAttribute("Use the constructor taking an explicit 'useSha1' parameter instead")]
public (int ,  , string ,  , Char[] ,  ,  ,  );
    public (int ,  , string ,  , Char[] , bool ,  ,  ,  );
    public (int ,  , string ,  , bool , Char[] , bool ,  ,  ,  );
    public (int ,  , string ,  , Byte[] , bool ,  ,  ,  );
    internal (int ,  , string ,  , Byte[] , bool , bool ,  ,  ,  );
    public (int ,  , string ,  ,  , Char[] , bool ,  ,  ,  );
    public (int ,  , string ,  ,  , bool , Char[] , bool ,  ,  ,  );
    public (int ,  , string ,  ,  , Byte[] , bool ,  ,  ,  );
    internal (int ,  , string ,  ,  , Byte[] , bool , bool ,  ,  ,  );
    public (int ,  ,  ,  , DateTime , string ,  , Char[] ,  ,  ,  );
    public (int ,  ,  ,  , DateTime , string ,  , Char[] , bool ,  ,  ,  );
    private static  (int ,  , string ,  ,  );
    private static  (int ,  , string ,  ,  ,  );
    public bool ();
    public bool ();
    public bool ();
    public  ();
    public long ();
    public int ();
    public  ();
    public  ();
    public IEnumerable ();
    public IEnumerable ();
    private Byte[] (Byte[] , bool );
    private static Byte[] ( , string ,  , Byte[] , Byte[] , int , int );
    public  (Char[] );
    public  (Char[] );
    public  (Byte[] );
    internal  (Byte[] , bool );
    private  (string ,  );
    private static Byte[] (bool , Byte[] , int );
    public Byte[] ();
    public void (Stream );
    public static  ( , Char[] , Char[] ,  ,  );
    public static  ( , Char[] , Char[] ,  ,  );
    public static  ( , Byte[] , Byte[] ,  ,  );
    internal static  ( , Byte[] , Byte[] , bool ,  ,  );
    public static  ( ,  );
    private static Byte[] (Byte[] ,  , Byte[] , bool ,  , & , Byte[]& );
    private static Byte[] (Byte[] ,  ,  , Byte[] , bool ,  , & , Byte[]& );
    private static Byte[] ( ,  , Byte[] , int , int ,  , Byte[]& );
    public static  (Stream , Char[] ,  );
    public static  (Stream , Char[] ,  );
    public static  (Stream , Byte[] ,  );
    internal static  (Stream , Byte[] , bool ,  );
    public static  (Stream , Char[] );
    public static  (Stream , Char[] );
    public static  (Stream , Byte[] );
    internal static  (Stream , Byte[] , bool );
    private static Byte[] (Stream , Byte[] , bool , string );
}
internal class  : object {
    private double ;
    private  ;
    private  ;
    internal (Cells , int );
    public sealed virtual bool (int );
    public sealed virtual double (int );
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int , int );
    public sealed virtual int (int , int );
    public sealed virtual double (int , int );
    public sealed virtual void (Int32[] );
    public sealed virtual void (Int32[] );
}
internal class  : object {
    internal int ;
    internal int ;
    internal string ;
}
internal class  : object {
    private  ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    public ( );
    public virtual void ( );
    private  (Byte[] , Byte[] );
    private void ();
    public virtual  ();
    public virtual int (Byte[] , int , int );
}
internal class  : object {
    public static Stream (Stream , Encoding );
    public static void (Stream , StreamWriter , Encoding );
    private static void (string , StreamWriter , Encoding );
    public static Stream (Stream , Encoding );
    public static Stream (Stream , Encoding );
    private static bool (char , StreamReader , StreamWriter , Encoding );
    private static void (char , StreamReader , StreamWriter , Encoding );
    private static bool (char );
    private static string (string , string );
}
internal class  : object {
    public long ;
    public long ;
    public (string , string , IDictionary , ArrayList );
    public (long , long );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public void (string , string , int , int );
}
internal class  :  {
    private  ;
    public (Stream );
    public ( );
    protected virtual bool ( );
    protected virtual bool ();
    private Byte[] (string );
    private string (string );
}
internal class  :  {
    internal (PivotArea );
}
internal class  :  {
    private BigInteger ;
    private IList ;
    [ObsoleteAttribute]
public (BigInteger , BigInteger , int , ArrayList , BigInteger );
    public (BigInteger , BigInteger , int , IList , BigInteger );
    public BigInteger ();
    public ArrayList ();
    public IList ();
}
internal class  : object {
    private  ;
    internal (string );
    internal void (Byte[] );
    internal void (Byte[] );
    internal Byte[] ();
    internal Byte[] (Byte[] );
    internal int ();
    private  (string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal interface  {
    public abstract virtual  ();
}
internal class  :  {
    private long ;
    public (long );
    public long ();
    public void (long );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
internal class  : object {
    protected Stream ;
    protected int ;
    protected int ;
    protected int ;
    protected bool ;
    protected int ;
    protected int ;
    protected Int32[] ;
    protected Int32[] ;
    protected Int32[] ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected bool ;
    protected bool ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected Rectangle ;
    protected Image ;
    protected Bitmap ;
    protected Image ;
    protected Byte[] ;
    protected int ;
    protected int ;
    protected int ;
    protected bool ;
    protected int ;
    protected int ;
    protected static int ;
    protected Int16[] ;
    protected Byte[] ;
    protected Byte[] ;
    protected Byte[] ;
    protected ArrayList ;
    protected int ;
    private bool ;
    private static ();
    public int (int );
    public int ();
    public Image ();
    public int ();
    private Int32[] (Bitmap );
    private void (Int32[] );
    protected void ();
    public Image (int );
    public Size ();
    public int (Stream );
    public Image (Stream );
    public int (string );
    protected void ();
    protected bool ();
    protected void ();
    protected int ();
    protected int ();
    protected Int32[] (int );
    protected void ();
    protected void ();
    protected void ();
    protected void ();
    protected void ();
    protected void ();
    protected int ();
    protected void ();
    protected void ();
}
internal class  :  {
    []
private RevisionCellComment ;
    []
private Workbook ;
    internal (RevisionCellComment , Workbook );
    private void ();
}
internal class  : object {
    private  ;
    private bool ;
    private  ;
    private  ;
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public virtual void ();
}
internal class  : object {
    private BinaryReader ;
    public (Stream );
    public Stream ();
    public int ();
    public UInt32 ();
    public short ();
    public ushort ();
    public byte ();
    public Byte[] (int );
    public Char[] (int );
}
internal class  : object {
    private  ;
    private  ;
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
}
internal class  :  {
    public (int ,  );
    public (bool , int ,  );
    public (int );
    internal virtual void ( );
}
internal class  :  {
    private int ;
    private int ;
    private  ;
    internal (int , Cells , RowCollection );
    internal virtual void ( );
    public virtual int ();
    public virtual void (int );
    public virtual void ();
    public virtual Row (int );
    public virtual Row (int , bool );
    public virtual Row (int , bool , bool , bool );
}
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    public  (bool , int ,  );
    public  (Cells );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private int ;
    private  ;
    private  ;
    private int ;
    public ( );
    public ( ,  );
    public ( , int , int );
    public ( , int , int ,  );
    public sealed virtual string ();
    public sealed virtual void ( );
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
}
internal enum  : Enum {
    public short value__;
}
internal class  : object {
    internal int ;
    internal int ;
    internal Int32[] ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal byte ;
    internal byte ;
    internal Int32[] ;
    internal int ;
    internal Int32[] ;
    internal int ;
    internal void (int , int , Int32[] , int , Int32[] , int );
    internal int ( , int );
    internal int (int , int , Int32[] , int , Int32[] , int ,  ,  );
}
internal abstract class  : object {
    internal string ;
    internal  ;
    internal abstract virtual  ();
    internal string ();
    internal void (string );
    internal abstract virtual  ();
    internal abstract virtual object ();
}
internal class  : object {
    internal bool ;
    internal TextAlignmentType ;
    internal TextAlignmentType ;
    internal TextDirectionType ;
    internal Font ;
    internal string ;
    internal ArrayList ;
    internal Workbook ;
    internal string ;
    internal  ;
    private string ;
    public string ();
    public void (string );
    internal static  (ChartTextFrame , Workbook );
}
internal interface  {
    public abstract virtual Byte[] ();
    public abstract virtual Byte[] (Byte[] );
}
internal class  :  {
    private MemoryStream ;
    private  ;
    private  ;
    public ( );
    internal Stream ();
    internal void (string );
    public void (string );
    internal void (string );
    internal void (Byte[] , int , int );
    internal void (byte );
    internal void (float , float , float , float , float , float , string , int );
    internal void (Single[] , string , int );
    internal void (Matrix , string , int );
    internal void (string );
    internal void (Byte[] );
    [("True")]
internal virtual void ( );
    public void ( );
    public void ( );
    public virtual void ( );
    internal  ();
    protected virtual  ();
    protected virtual  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public static string ;
    public static string ;
    public string ;
    public string ;
    private static ();
}
internal class  :  {
    internal void (Worksheet );
}
internal class  : object {
    protected static IList ;
    protected IList ;
    private static ();
    public (IList );
    public virtual bool ( );
    protected virtual bool ( ,  );
    protected virtual bool (BigInteger , BigInteger );
}
internal class  : object {
    public static double (double );
    public static double (double );
}
internal class  :  {
    internal ( ,  );
    internal ( );
}
internal class  :  {
    private static  ;
    private static  ;
    private static  ;
    private static  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    public ( ,  ,  ,  ,  );
    private ( );
    private static ();
    public static  (object );
    private  ( ,  ,  ,  );
    private bool ( );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    internal ( , int , int );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  : object {
    []
private PivotTable ;
    []
private Cells ;
    []
private Worksheet ;
    []
private WorksheetCollection ;
    []
private  ;
    []
private  ;
    private bool ;
    private int ;
    private int ;
    private Int32[0...,0...] ;
    private Int32[0...,0...] ;
    private int ;
    private int ;
    private Hashtable ;
    private ArrayList ;
    private Hashtable ;
    internal static int ;
    private PivotFieldType ;
    private int ;
    internal bool ;
    private List`1<> ;
    private List`1<> ;
    private List`1<> ;
    private List`1<> ;
    private int ;
    private int ;
    private int ;
    private int ;
    []
private  ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    internal ( );
    private static ();
    internal void ();
    internal void ();
    private void ();
    private void ( , PivotFieldCollection , int );
    private void ( , PivotFieldCollection , int );
    internal void ();
    private void (int , int );
    private void (int , int );
    private void ();
    private void ();
    private void (PivotField , Style );
    private void ();
    internal void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style , int , int , bool );
    private bool (PivotFieldCollection );
    private int (int );
    private void (Int32[0...,0...] , Int32[0...,0...] , int , int );
    private void (Int32[0...,0...] , Int32[0...,0...] , int , int );
    private void (Style , bool );
    private void (Style , bool );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style , Style , int , int );
    private void (Style , Style , int , int );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style , Style , Style );
    private Object[] (int , Style[] );
    private void (Style );
    private void (Style , Style , Style );
    private void (Style , Style , Style );
    private void (Style , TableStyleElementType , Style , TableStyleElementType , Style , TableStyleElementType );
    private Object[] (int , Style[] , Int32[] );
    private Object[] (int , Style[] );
    private void (Style , Style , Style );
    private Object[] (int , Style[] );
    private void (Style , Style , Style );
    private void (Style );
    private void ();
    private void (Style , Style , Style , Style , Style , Style , Style , Style , Style , Style , Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private void (Style );
    private bool (int );
    private int (int );
    private int (int );
    private Object[] (int , Style[] );
    private Int32[] (String[] );
    private void ( , int , int , int );
    private void ( , int , int , int );
    internal void (Style );
    internal void (int , Style );
    internal void (int , int , Style );
    private void (PivotArea ,  );
    private int (int , PivotFieldType , int );
    private int (int , int , PivotFieldType );
    private int (int );
    private ushort ( );
    internal void ();
    internal ArrayList (ArrayList );
    private static void (ArrayList , Int32& , Int32& , Int32& , Int32& , int , int );
    internal void ();
    private void (Style , Style );
    private void (int , int , Style ,  );
    private void (PivotTableFormat );
    internal static int (PivotFieldCollection , int );
    internal ArrayList (PivotArea );
    private void (PivotAreaFilterCollection , ArrayList , PivotArea );
    private int (int , int , PivotFieldType );
    private void (PivotAreaFilterCollection , ArrayList , PivotArea , bool , bool );
    private void (PivotAreaFilterCollection , ArrayList , PivotArea , bool );
    private void (PivotAreaFilterCollection , ArrayList , bool );
    private void (PivotAreaFilter , ArrayList , PivotFieldType , bool , byte , bool , int );
    private int (int , PivotFieldType , int );
    private bool (PivotFieldCollection ,  );
    private ArrayList (PivotFieldType , byte );
    private void (PivotAreaFilterCollection , ArrayList , ArrayList , ArrayList );
    private void (int , PivotAreaFilter , ArrayList );
    private ArrayList (ArrayList , PivotFieldType , bool );
    private int (PivotFieldType , int );
    private Style (int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
public static IEnumerator ;
    public object Current { get; }
    private static ();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
}
internal class  : object {
    internal ArrayList ;
    private MsoDrawingType ;
    private bool ;
    internal Byte[] ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    internal (MsoDrawingType );
    internal string ( );
    internal void ( , string );
    private static Byte[] (Byte[] );
    internal void ( );
    internal void ();
    internal void ( , CopyOptions );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal MsoDrawingType ();
    internal void (MsoDrawingType );
}
internal class  : object {
    private string ;
    []
private Workbook ;
    private int ;
    private Hashtable ;
    private Hashtable ;
    private bool ;
    private  ;
    private LoadOptions ;
    private Hashtable ;
    private int ;
    private void ();
    public void (Stream , Workbook , LoadOptions );
    private bool (Workbook ,  );
    [("True")]
private void ( , Workbook );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( , Workbook );
    private static DateTime (string );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private void ( , Style );
    private void ( , Style );
    [("True")]
private void ( , Style );
    private void ( , Style );
    [("True")]
private void ( , Style );
    private void ( , Style );
    private void ( );
    private int (Worksheet ,  , int ,  , double , int );
    private void (Worksheet ,  ,  , int , int );
    private void (Worksheet ,  ,  , double );
    private void (Worksheet ,  );
    [("True")]
private void (Worksheet ,  , bool );
    [("True")]
private void (Worksheet ,  );
    private void (Worksheet ,  );
    [("True")]
private void (Worksheet ,  );
    private int ( , AutoFilter , int );
    [("True")]
private Object[] ( );
    private void (Worksheet ,  );
    private void (Worksheet ,  );
    private void (Worksheet ,  );
    private void (Worksheet ,  );
    private void (Worksheet ,  );
    [("True")]
private void (Worksheet ,  );
    [("True")]
private void (Worksheet ,  );
    private void ( , Worksheet );
    private Color (Color );
    private void (Cell , ArrayList , WorksheetCollection );
    private void (Comment , ArrayList , WorksheetCollection );
    private void ( , ArrayList , Font , Font , WorksheetCollection , bool );
    private void ( , StringBuilder , bool );
    private string (string , int );
    private void (int , string );
}
internal class  :  {
    internal int ;
    internal ( );
}
internal class  :  {
    internal static object ;
    internal (int , int , int ,  );
    internal (int , int , int ,  , Hashtable );
    private static ();
    internal Int64[] ();
    internal static Int64[] (Hashtable );
    internal virtual bool (int ,  );
    protected virtual void (Int64[] );
    protected virtual void (Int64[] , bool );
    protected virtual object ();
    protected virtual object (object );
    protected virtual void (object );
    protected virtual void (object , CellArea );
}
internal class  : object {
    []
private  ;
    []
private  ;
    []
private Worksheet ;
    []
private ListObject ;
    internal ( );
    public ListObject ();
    public void (ListObject );
    [("True")]
private void ( );
    internal void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , ListColumn );
    [("True")]
private void ( , int );
    private void ( );
}
internal class  : object {
    private static UInt16[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int64[] ;
    internal static Byte[] ;
    private Int64[] ;
    public (int );
    public (Int64[] );
    public (Int64[] , int , int );
    public (BigInteger );
    private static ();
    internal void (Int64[] , int );
    public bool ();
    public bool ();
    public int ();
    public int (int );
    public int ();
    private int (int );
    private static int (long );
    private Int64[] (int );
    public BigInteger ();
    private static long (Int64[] , int , int , int );
    private static long (Int64[] , int , Int64[] , int , int , int );
    public  ();
    private void ( , int , int );
    private static long (Int64[] , int , Int64[] , int , int , int );
    private static long (Int64[] , int , Int64[] , int , int , int );
    public void ( , int );
    private static void (Int64[] , int , Int64[] , int , int );
    private static void (Int64[] , int , Int64[] , int , Int64[] , int , int );
    private static void (Int64[] , int , Int64[] , int , Int64[] , int , int );
    private static void (Int64[] , int , int , int , int );
    public int ();
    private static void (Int64[] , int , int , long );
    public bool ();
    private static bool (Int64[] , int , int );
    private static void (Int64[] , int , int );
    private static void (long , Int64[] , int , Int64[] , int );
    public  ( , int , Int32[] );
    public  ( , int , Int32[] );
    public  ( , int , Int32[] );
    public  (int , Int32[] );
    public  ( , int , Int32[] );
    public void (int , Int32[] );
    private static  (Int64[] , int , int , int , Int32[] );
    private static int (Int64[] , int , int , int , Int32[] );
    private static void (Int64[] , int , int , int , Int32[] );
    private static void (Int64[] , int , int , int , Int32[] );
    private static void (Int64[] , int , int , int , int , Int32[] );
    private static void (Int64[] , int , int , long , int , Int32[] );
    private static void (Int64[] , int , int , int , int , Int32[] );
    private static void (Int64[] , int , Int64[] , int , int , int );
    public  (int , Int32[] );
    public  (int , int , Int32[] );
    public  (int , Int32[] );
    private static void (Int64[] , int , int , Int32[] );
    private static void (Int64[] , int , Int64[] , int , int , int );
    private static void (Int64[] , int , Int64[] , int , int );
    private static long (long );
    private static long (int );
    private static void (Int64[] , int , Int64[] , int , int );
    private static long (long );
    private static long (int );
    private static void (Int64[] , int , Int64[] , int , int );
    private static long (long );
    private static void (Int64[] , int , Int64[] , int , int , int );
    private static long (long , int );
    private static long (int );
    private static long (int );
    public  (int , Int32[] );
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual int GetHashCode();
    public  ();
    public virtual string ToString();
}
internal class  : object {
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal int ;
    internal ArrayList ;
    internal int ;
    internal Byte[] ;
    internal int ;
    internal int ;
}
internal class  : object {
    private static UInt64[] ;
    private UInt64[] ;
    protected Byte[] ;
    protected int ;
    protected int ;
    protected int ;
    protected bool ;
    public (int );
    public ( );
    private static ();
    private void ( );
    public virtual string ();
    public virtual int ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    protected virtual int (Byte[] , int , byte , int );
    public virtual void ();
    public virtual int ();
    private void (int );
    private void (int );
    protected void (Byte[] , int , int );
    protected void (int , int );
    private void ();
    protected void (Byte[] , int , long );
    private void (Byte[] , int );
    private void ();
    private void ();
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private int ;
    public virtual void (int , int );
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
    public virtual  ();
}
internal class  :  {
    internal void (ChartType );
}
internal class  : object {
    internal bool ;
    internal bool ;
}
internal class  :  {
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal virtual void ( );
    [("True")]
private void ( , DocumentProperty , int );
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
[FlagsAttribute]
[("And")]
internal enum  : Enum {
    public int value__;
    public static  CloseFigure;
    public static  LineTo;
    public static  BezierTo;
    public static  MoveTo;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    public (BigInteger , BigInteger , int );
    public ( );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    public ( , bool );
    public ( ,  ,  , int , int , Int32[] , int , int ,  , int , int , bool , bool , int , bool );
    internal ( , int , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    private bool ();
    private bool ();
    private bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int , int , int , int ,  ,  );
    public virtual bool ( );
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (Double[] ,  ,  );
    public virtual  (Double[][] ,  ,  );
    public virtual int ( , bool );
    private void ();
    internal static bool ( , int , int , Int32[] , int , int ,  , Int32[] );
    private void ();
    private void ();
}
internal class  :  {
    internal void (ChartType );
}
internal class  :  {
    private  ;
    private bool ;
    private  ;
    private  ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) ;
    public ( );
    public ( , bool ,  );
    private  ();
    public  ();
    protected virtual  ();
    public Byte[] ();
    public BigInteger ();
    public DateTime ();
    public bool ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class  : object {
    internal List`1<> ;
    internal UInt32 ;
    internal void ( );
}
internal enum  : Enum {
    public int value__;
    public static  External;
    public static  Internal;
    public static  AddIn;
    public static  DDELink;
    public static  OLELink;
    public static  Same;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    public Byte[] ();
    public void (Byte[] );
    public virtual int GetHashCode();
    public virtual bool Equals(object );
}
internal class  : object {
    private Int32[] ;
    public (Int32[] );
    internal Int32[] ();
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual void (StringBuilder );
    public sealed virtual bool (int ,  );
    public sealed virtual  (int , int , [] , int , int , bool );
    public sealed virtual  (int , int ,  , int , int , bool );
    public sealed virtual  (int , int ,  , int , bool );
    public sealed virtual  (int , int );
    public sealed virtual int (int ,  );
    public sealed virtual int (int ,  );
    public sealed virtual  (int );
    public sealed virtual  (int ,  );
    public sealed virtual object (int ,  );
    public sealed virtual void (int , StringBuilder ,  );
    public sealed virtual void (int , [] , int , int );
    public sealed virtual  (int , Double[] , int , int ,  ,  );
}
internal class  : object {
    internal int ;
    internal int ;
    internal  ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal ArrayList ;
    internal RectangleF ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal  ;
}
internal class  : object {
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    private Char[] ;
    private string ;
    private int ;
    private  ;
    private  ;
    public ( );
    public ( , string );
    private static ();
    public void ( );
    public void (Char[] );
    public void (int );
    public sealed virtual  ();
}
internal class  : object {
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
}
internal class  :  {
    public (RectangleF , RectangleF , Bitmap , ThreeDFormat );
}
internal class  :  {
    private int ;
    private Byte[] ;
    private long ;
    internal ( );
    public int ();
    public long ();
    public string ();
    public Byte[] ();
}
internal class  : object {
    internal  ;
    internal Cells ;
    internal int ;
    internal int ;
    internal  ;
    internal int ;
    internal int ;
    internal int ;
    private  ;
    internal bool ;
    internal Style ;
    internal Hashtable ;
    internal Style ;
    public (Cells );
    internal  ();
    internal void ( );
    private void ();
    public void (Cell );
    public void ( , int , int );
    public void ( , int );
    public void ( , int , int , int );
    public void ( , int , int );
    public void (int , int , int );
    public void (int , int );
    public void (int );
    public void ( );
    public void (int , int , int );
    public void (int );
    public void (int , int );
    public void ( );
    private void (int );
    public void ();
    public string ( );
}
internal class  : object {
    private  ;
    private bool ;
    private  ;
    private  ;
    private  ;
    private List`1<PointF> ;
    internal  ();
    internal  ();
    public void ();
    public void ();
    internal void (bool );
    public void (PointF , bool , bool );
    public void (PointF );
    public void (PointF , PointF );
    public void (PointF , PointF , PointF );
    public void (PointF[] );
    public void (PointF[] );
    public void (PointF[] );
    public void (PointF , PointF , SizeF , float , float );
    internal static PointF[] (SizeF , float , float , PointF );
    private void (PointF[] ,  );
    private void (int ,  );
    private void ();
}
internal class  : object {
    private  ;
    private bool ;
    private  ;
    private  ;
    private int ;
    private  ;
    public ( );
    public virtual void (bool ,  );
    public virtual Byte[] (Byte[] , int , int );
    protected virtual  ();
    private Byte[] (Byte[] , int , int );
    private Byte[] (Byte[] , int , int );
    private bool (Byte[] , Byte[] , int );
    private void ( ,  , Byte[] );
    private void (Byte[] , Byte[] , int , int );
    private BigInteger ();
    private void ( ,  );
}
internal class  : object {
    private string ;
    private int ;
    private List`1<> ;
    public List`1<> ();
    private bool (char );
    private void ();
    private bool ();
    public List`1<> ();
    public string ();
    public string ();
    public void (string , string );
    private char ();
    private char (int );
    public string ();
    public void (string );
}
internal class  :  {
    internal (TableStyle );
}
internal class  : object {
    internal Stream ;
    internal bool ;
    internal (Stream );
    internal int (Byte[] );
    internal int ();
    internal UInt32 ();
    internal double ();
    internal byte ();
    internal ushort (Byte[] );
    internal void (int );
    internal void (int );
    internal long ();
}
internal class  : object {
    internal static string ;
    private static ();
    internal static void (CellBorderType , String& , Double& );
    internal static String[] (string );
    public static string (Color );
    public static string (string , int , int );
    private static void (StringBuilder , string , int , int );
    private static void (StringBuilder , string , int , int , int , int );
    private static int (string , int , int );
    public static string (string , int , int );
    private static bool (StringBuilder , string , int , Int32& , int , int );
    private static void (StringBuilder , string , int , Int32& , int , int );
    private static void (string , int , int );
}
internal class  :  {
    internal (PivotTable );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    public ( ,  );
    public  ();
    public  ();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ( );
    internal virtual void ();
}
internal class  :  {
    public ( ,  );
    internal  ();
    private Double[] ( , int );
    internal double ( , int );
}
internal static class  : object {
    public static bool (string , Byte[] );
}
internal static class  : object {
    private static bool ;
    private static ();
    private static bool ();
    public static bool ();
}
internal class  :  {
    internal int ;
    internal (ShadowEffect );
    internal virtual  ();
    public virtual double ();
    public virtual void (double );
    internal virtual void ( , CopyOptions );
    internal virtual bool ( );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private  ;
    public virtual string ();
    public virtual void (bool ,  );
    public virtual BigInteger ();
    public virtual BigInteger[] (Byte[] );
    public virtual bool (Byte[] , BigInteger , BigInteger );
}
internal class  : object {
    private static Hashtable ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static ();
    public static int (int , int );
    public static Byte[] ();
}
internal class  : object {
    private ArrayList ;
    internal ArrayList ();
    internal void (ArrayList );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal static Color[] (Workbook , int , int );
    private static Color[] (Color[] , int , int );
    private static void (Color[] );
}
internal class  : object {
    internal  ;
    internal CellBorderType ;
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private  ;
    public ( , int );
    public sealed virtual void (bool ,  );
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public sealed virtual void ();
    public void (Byte[] );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal int ;
    internal virtual  ();
    internal virtual  ();
    internal virtual object ();
}
internal class  :  {
    internal string ;
    internal string ;
    internal (Shape );
}
internal class  :  {
    internal ( ,  );
    public virtual bool ();
}
internal class  : object {
    private int ;
    []
private  ;
    private  ;
    public ( );
    internal int ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal void ( );
    internal  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public List`1<string> ;
    public List`1<string> ;
    public List`1<string> ;
    public List`1<string> ;
    public List`1<> ;
    public List`1<> ;
    public List`1<> ;
    public List`1<string> ;
    public List`1<string> ;
    public List`1<> ;
    public List`1<string> ;
    public List`1<string> ;
    public List`1<string> ;
    public List`1<string> ;
    public List`1<string> ;
    public List`1<> ;
    internal  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( ,  );
    internal virtual void ( );
    private void (Stream );
    private void (Worksheet , Stream );
    private void (PageSetup , Stream );
}
internal interface  {
    public abstract virtual void (int , Byte[] , int , int );
}
internal class  :  {
    internal (Stream );
    internal Color ();
    internal RectangleF ();
    internal Rectangle ();
    internal PointF ();
    internal Point ();
    internal Point ();
    private int ();
    internal RectangleF (bool );
    internal PointF[] (bool , bool , int );
    internal RectangleF[] (bool , int );
    internal Matrix ();
}
internal class  : object {
    internal static Object[][] (Double[] , Double[][] );
    internal static Object[][] (Double[] , Double[][] );
    public static Double[] (Double[] , Double[] , bool );
    private static Double[] (Double[][] );
    internal static Double[][] (Double[][] );
    internal static Double[][] (Double[][] );
    internal static Object[][] (Object[][] );
    internal static Double[][] (Double[][] , Double[][] );
    internal static Double[][] (Double[][] );
    internal static object (ArrayList , ArrayList );
    internal static double (Double[] , Double[] );
    internal static object (Double[] , Double[] );
    internal static double (Double[][] );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  );
    private ( );
    public static  (object );
    public virtual  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    public virtual  ();
    public virtual bool ();
    public virtual void (Byte[] , int , int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    public virtual byte ();
    public virtual byte ();
    public virtual byte ();
    public virtual  ();
    public virtual  ();
    public virtual void ( );
    public virtual void (int , int );
    public virtual  (int , int );
    public virtual void ( , int , int );
    public virtual void (int , int );
    public virtual  ( );
    public virtual  ();
    public virtual void ( );
    public virtual void (int , int , int , int );
    public virtual void (int );
    public virtual void (int );
    public virtual void (int );
    public virtual void (int );
    public virtual void (int , int );
    public virtual void (int , int );
    public virtual  (int , int );
    public virtual void ( , int , int );
    public virtual void (int , int );
    public virtual void (int , int , int , int );
    public virtual  ( );
    public virtual int ();
    public virtual long ();
    public virtual  ();
    public virtual void ();
    public virtual void ();
    public virtual string (bool );
    public virtual void (bool );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  :  {
    internal ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private IDictionary ;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public (IDictionary );
    public virtual bool Contains(object );
    public virtual void CopyTo(Array , int );
    public virtual int get_Count();
    public virtual IDictionaryEnumerator GetEnumerator();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    protected virtual object (object );
}
internal class  : object {
    []
private Shape ;
    []
private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ArrayList ;
    internal (Shape ,  );
    internal Shape ();
    internal Byte[] ();
    internal void (Byte[] );
    internal ArrayList ();
    internal void ( , CopyOptions );
    internal  ();
    internal  ();
    internal void ();
    internal  ();
    internal  ();
    internal  ();
    internal void ( );
    internal  ();
    internal int ();
    internal bool ();
    internal void (ShapePathCollection );
    internal void (SaveOptions );
    private static void (Shape );
    private bool ();
    internal Byte[] (bool , SaveOptions );
    private void ();
    private void ();
    private void ();
    private Byte[] (double );
    internal int (Byte[] , int ,  );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private Byte[] ;
    public ( );
    public (string );
    public string ();
    public virtual void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private Hashtable ;
    private int ;
    private ArrayList ;
    private Hashtable ;
    private bool ;
    private string ;
    private MemoryStream ;
    private  ;
    private  ;
    private  ;
    private string ;
    private string ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private bool ;
    private string ;
    private string ;
    private string ;
    private ArrayList ;
    private string ;
    private string ;
    private String[] ;
    internal ( , Hashtable ,  , string );
    internal ( , string );
    internal int ();
    private int ();
    private void ();
    internal void ();
    internal void ( );
    internal bool (Shape );
    private void ( );
    private ArrayList (string , string );
    private void (ArrayList ,  , MsoDrawingType , AutoShapeType );
    private void (ArrayList ,  , MsoDrawingType , AutoShapeType );
    private void ( );
    private void ( , Shape ,  );
    private Shape ( , MsoDrawingType , AutoShapeType );
    private Shape (MsoDrawingType , AutoShapeType , bool );
    private string (string );
    private Byte[] (string );
    private void ( , string );
    [("True")]
private Shape ( );
    private void (string , Shape );
    private void (Shape , int , int , int , int );
    private void ( , Shape );
    private static double (string );
    private void ( , Shape ,  );
    private void ( , Shape ,  );
    private void ( , Shape ,  );
    private void ( , Shape );
    private void ( , Shape );
    private void ( , Shape );
    private void ( ,  , Shape );
    private int (StringBuilder , string );
    private int ( , FontSettingCollection , StringBuilder , int );
    [("True")]
private  ( );
    private static void (StringBuilder ,  ,  );
    private void (Shape , string , string );
    private void (Shape );
    private void ( , Shape );
    private void ( , Shape );
    private void ( , Shape );
    private Color (string , WorksheetCollection );
    public static ArrayList (string );
    private void (CustomGeometry ,  , Int32[] );
    private Int32[] (Shape , Int32[] ,  );
    private int (Shape , VmlShapeGuide , Int32[] , Int32[] ,  );
    private double (Shape , Int32[] , Int32[] , string ,  );
    private int (string , Int32[] );
    private void (Shape ,  );
}
internal class  :  {
    protected  ;
    protected  ;
    public ( ,  );
    protected virtual  ( , BigInteger );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private string ;
    public ( , Stream );
    public virtual void ( );
    public virtual void ();
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public  ();
    public void ( );
    public  ();
    public string ();
    public void (string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    internal  ;
    public (int );
    public (string );
    public static  (object );
    public bool ();
    public string ();
    public int ();
    public virtual  ();
}
internal class  : object {
    internal static int (string );
    internal static bool (string );
    internal static string (Byte[] , Int32& , int );
    internal static string (Byte[] , int , bool , int );
    internal static string (Byte[] , int , bool , int , int );
    internal static string (Byte[] , int );
    internal static string (Byte[] , Int32& );
    internal static string (Byte[] , Int32[] , int , int );
    internal static string (Byte[] , Int32[] );
    internal static Byte[] (string );
    internal static Byte[] (Char[] , int , int );
    internal static string (Byte[] , int , int );
    internal static int (Byte[] , int , string );
    internal static int (Byte[] , int , Byte[] , string );
    internal static int (Byte[] , int , string );
    internal static int (Byte[] , Int32& , string );
    internal static int (Byte[] , int , string , int , byte );
}
internal class  : object {
    []
private Workbook ;
    []
private  ;
    []
private LoadOptions ;
    private  ;
    internal (Workbook ,  , LoadOptions );
    internal void ();
    private void ();
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private int ;
    public ( );
    private void ( );
    public virtual string ();
    public virtual int ();
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    private void (int , Byte[] , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    private int (int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    internal virtual void ();
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private bool ;
    private double ;
    public (bool , bool );
    public virtual void (int , int );
    public virtual  ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
}
internal class  :  {
    internal (ushort , short , short , ArrayList );
}
internal class  : object {
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
}
internal class  :  {
    private int ;
    internal ( , int , string , string );
    protected virtual void ( , DateTime , double , StringBuilder );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual int ();
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( , List`1<> );
    private void ( ,  , string );
}
internal class  : object {
    internal static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    protected static void (UInt32[] , UInt32[] , UInt32[] );
    protected static void (UInt32[] , UInt32[] );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private Int32[] ;
    private Object[] ;
    private int ;
    public object  { get; public set; }
    public (int );
    public void (int , object );
    public int ();
    public void (int );
    public int ();
    public void ();
    public bool (int );
    public bool (int );
    public bool (object );
    public void (Array , int );
    private void (int );
    public object (int );
    public int (int );
    public object (int );
    public void (int , object );
    public int (int );
    public int (object );
    private void (int , int , object );
    public void (int );
    public void (int );
    public void (int , object );
    public void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual void ();
    private GraphicsPath (float , float , float , float , int );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    internal  ;
    internal Byte[] ;
    internal BigInteger ;
    private ( );
    public ( , Byte[] , int );
    public static  (object );
    public  ();
    public Byte[] ();
    public BigInteger ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private  ;
    private  ;
    private int ;
    public ( , Worksheet ,  , int , int );
    public ( , Worksheet ,  , int , int , bool , bool );
    private ( , int );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual void (bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    internal (byte );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private string ;
    public void ();
    public void ( );
    public void ( );
    public void (BigInteger );
    public void (DateTime );
    public void (DateTime );
    public void (string );
    public void ( );
    public void (Boolean[] );
    public void (string , bool ,  );
    public void (string , bool , Byte[] );
    public  ( );
    public  ( ,  );
    public  ( );
    public IEnumerable ();
}
internal class  : object {
    internal  ;
    internal  ( );
}
internal class  : object {
    []
private  ;
    private  ;
    []
private  ;
    private Hashtable ;
    private  ;
    []
private  ;
    private Hashtable ;
    internal ( ,  ,  );
    public Hashtable ();
    internal  ();
    public  ();
    public  ();
    public  ();
    internal  ( );
    internal void ( ,  , RectangleF& ,  );
    private  (string );
    internal static void (Hashtable& , & );
    internal void ( ,  , RectangleF& , bool ,  );
    internal void ( ,  , RectangleF& , bool ,  );
    internal void ( ,  , RectangleF& , bool ,  );
    internal void ( ,  , RectangleF& ,  );
    internal void ( ,  , RectangleF& ,  );
    public bool (string );
    public string (string );
    internal  ( );
    internal void (string ,  ,  );
    internal void ( ,  ,  );
    private void (& , RectangleF );
    internal RectangleF ( );
    internal RectangleF ( , bool );
    internal static ArrayList (string );
}
internal class  : object {
    private  ;
    public ( );
    public virtual  (IDictionary );
}
internal class  : object {
    private Int32[][] ;
    public (Int32[][] );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual bool ( );
    public sealed virtual bool (int , int ,  );
    public sealed virtual  (int , int );
    public sealed virtual  (int , int ,  );
    public sealed virtual object (int , int ,  );
    public sealed virtual void (int , int , StringBuilder ,  );
}
internal class  : object {
    private int ;
    private int ;
    private double ;
    private double ;
    private double ;
    private double ;
    private int ;
    private double ;
    private CellArea ;
    private int ;
    private double ;
    private Shape ;
    private int ;
    internal ArrayList ;
    internal bool ;
    internal int ;
    internal int ;
    internal (Shape , int , Double[] );
    private void (Double[] );
    internal int ();
    public double ();
    public void (double );
    public double ();
    public void (double );
    public int ();
    public int ();
    public double ();
    public int ();
    public int ();
    public double ();
    public double ();
    public void (double );
    public double ();
    public void (double );
    public int ();
    internal string ();
    internal string ();
    internal string ();
    internal string ();
    internal MsoDrawingType ();
    internal Shape ();
    internal CellArea ();
    private void ();
    private ArrayList ();
    private void ();
    private void (float , float );
    private void (int , int );
    public sealed virtual void (int , int );
}
internal class  :  {
    public (Byte[] );
    public ( );
    public (Stream );
    public (string ,  ,  ,  ,  );
    public (string ,  ,  ,  );
    public Byte[] ();
    public void (Byte[] );
    public void ( );
}
internal class  : object {
    public static Byte[] (Byte[] , long , long );
    public static Byte[] ( , long , long );
    public static string (Byte[] , UInt32 , UInt32 );
    public static Size (Byte[] );
    public static long (Byte[] , long );
    public static UInt32 (Byte[] , UInt32 );
    public static ushort (Byte[] , UInt32 );
    public static byte (Byte[] , UInt32 );
    public static string (Byte[] );
    public static string (string , string );
    public static long (string );
    public static string (int );
    public static string (int , int );
    public static void (Stream );
}
internal class  : object {
    protected Color ;
    protected Color ;
    protected int ;
    protected Brush ;
    protected bool ;
    public void (Color , Color , int );
    public void (Brush , Color , int );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat , Single& , Single& );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat , Single& , Single& );
}
internal class  :  {
    private  ;
    public ( );
    public  ();
    public Stream ();
    public Stream ();
}
internal class  : object {
    private string ;
    private bool ;
    private  ;
    internal (Cells , string , bool , bool , bool );
    public sealed virtual bool ( , int );
}
internal class  :  {
    private PointF ;
    private PointF ;
    public (PointF , PointF );
    public PointF ();
    public void (PointF );
    public PointF ();
    public void (PointF );
    internal virtual string (string );
}
internal class  : object {
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private bool ;
    private bool ;
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual void (bool ,  );
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] );
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
}
internal class  : object {
    internal static int ;
    internal static int ;
    private static ();
}
internal class  : object {
    private short ;
    private Byte[] ;
    private byte ;
    [("True")]
internal (string );
    internal Byte[] ();
    [("True")]
private void (string );
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    internal int ();
    internal int ();
    internal void ( );
    internal void (MemoryStream );
    internal void ( ,  );
    internal int (Byte[] , int );
    internal int (Byte[] , int ,  );
    internal int (Byte[] , int ,  );
    internal int (Byte[] , int , String[][] );
    internal static int (Byte[] , int , int );
    internal static int (Byte[] , int , int );
    internal static int (Byte[] , int , PivotTableSourceType );
}
internal class  :  {
    protected string ;
    protected  ;
    internal (byte , string , int , GlobalizationSettings );
    internal (byte ,  , int , GlobalizationSettings );
    protected (byte , string , int , GlobalizationSettings , int );
    protected (byte ,  , int , GlobalizationSettings , int );
    protected (byte , string ,  );
    protected (byte ,  );
    internal virtual  (byte );
    public string ();
    internal  ();
    internal bool ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual bool ();
    public virtual String[] ();
    public virtual String[] ();
    public virtual bool ( , object );
    public virtual bool ( );
    public virtual bool ( );
    public bool (string );
    public virtual int ( );
    public virtual int ( ,  );
    private static  (byte , string , int , GlobalizationSettings );
    private static  (byte ,  , int , GlobalizationSettings );
    private static  (string , bool , GlobalizationSettings );
    internal static  (string , bool , int , GlobalizationSettings );
}
internal class  :  {
    internal (TableStyle );
}
internal class  :  {
    public ( );
}
[AttributeUsageAttribute("1024")]
internal class  : Attribute {
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( );
    internal  ();
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual  ();
    public sealed virtual void ( );
    internal  ();
    internal  ();
    public sealed virtual  ();
    public sealed virtual  ();
    public sealed virtual void (Color , Color , HatchStyle );
    internal  ();
    internal Brush (Rectangle );
    internal Brush (RectangleF );
    public Brush (GraphicsPath , bool , float );
    public void (Brush );
    public bool ( );
    internal void ( );
    [("True")]
public sealed virtual void ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  :  {
}
internal class  : object {
    private bool ;
    private  ;
    private  ;
    public (bool ,  ,  );
    public bool ();
    public  ();
    public  ();
}
internal class  : Shape {
    [DebuggerBrowsableAttribute("0")]
[]
private Slicer ;
    internal (ShapeCollection , Slicer );
    internal Slicer ();
    internal void ( , CopyOptions );
}
internal class  :  {
    []
protected Workbook ;
    internal (Workbook );
    internal void ( );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual Byte[] ( , Byte[] );
    public abstract virtual Byte[] ( ,  , Byte[] );
    public abstract virtual bool (Byte[] ,  , Byte[] );
    public abstract virtual bool ( , Byte[] ,  , Byte[] );
    public abstract virtual  ( );
    public abstract virtual  ( ,  );
    public abstract virtual  ( );
    public abstract virtual  ( ,  );
    public abstract virtual bool ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    public static void (RectangleF& , PointF );
    public static void (RectangleF& , float );
    public static void (RectangleF& , float );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual [] ();
    public virtual [] ();
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    internal  ;
    internal double ;
    internal  ;
}
internal class  :  {
    public (List`1<> );
}
internal class  : object {
    private  ;
    public ( );
    public sealed virtual  (object );
    public IEnumerable ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal (ImageOrPrintOptions );
    private bool (Chart );
    private  (Chart , Stream , ImageType );
    internal Bitmap (Chart );
    internal void (Chart ,  , RectangleF );
    internal void (Stream , Chart );
    internal  (Chart , float , float );
    internal  (Chart );
    internal  (Chart , bool );
    internal void (Chart );
    private  (Chart , bool );
    private void ();
    private void (bool );
    private void ();
    private bool (ChartType );
    private bool (ArrayList );
    private bool (Axis , bool , bool , Series );
    private bool ();
    private void (bool , ArrayList , bool );
    private void (Axis , List`1<> , bool );
    private IList (Series );
    private int (List`1<> );
    private bool (List`1<> );
    private bool (List`1<> );
    private bool (Axis , List`1<> );
    private bool (Axis , List`1<> );
    private bool (List`1<> , CategoryType );
    private bool ( );
    private void (Series ,  , bool ,  );
    private bool (ChartType );
    private bool (Area );
    private void (Series ,  , int );
    private bool (Line ,  , bool );
    private bool (Area ,  );
    private bool (Marker ,  );
    private bool (Marker ,  );
    private bool (DataLabels ,  );
    internal void (Series ,  , int );
    private void ();
    private void ();
    private void ();
    private  (List`1<> );
    private void (Axis ,  , List`1<> );
    private bool (Axis );
    private void ();
    private void ();
    private void ();
    private void (Chart ,  );
    private void (Chart ,  );
    private ArrayList[] (bool ,  , ArrayList , List`1<> ,  );
    private  (object , List`1<> ,  );
    private bool ( );
    private bool (ArrayList[] , int , int );
    private bool ( );
    private bool (ArrayList );
    private void (ArrayList );
    private void ();
    private bool (ArrayList , ChartType[] );
    private void (ArrayList[] , List`1<> );
    private string (Series , bool );
    internal static string ( , Workbook );
    internal static bool ( , Double& );
    private void (Workbook );
    private bool ( );
    private void (Marker ,  );
    private void (DropBars ,  );
    private ArrayList (Series ,  );
    private void (ErrorBar ,  );
    private void (DataLabels ,  , ChartType , int );
    internal void ( , int ,  );
    internal void (ArrayList , int ,  );
    internal bool (ArrayList , string , TextDirectionType ,  );
    private bool (Color , Color );
    private bool (string );
    private  (ChartType );
    private bool (Chart );
    private double (double );
    private int (double );
    private void (DisplayUnitLabel ,  );
    private void (Axis , TickLabels ,  );
    private void (ChartFrame ,  );
    private void (Title ,  , bool );
    private void (TextOptions );
    private bool (Font , Font );
    private bool (Font );
    private  (Font );
    private void (Font ,  );
    private void (Line ,  , bool );
    private void (Line ,  );
    private void (Area ,  );
    private void (FillFormat ,  );
    private void (GradientFill ,  );
    private void (FillFormat , TextureFill ,  );
    private void ( , GradientStyleType , int , Color , Color );
    private void ( , ColorBlend , int );
    private int (string );
    private string (int , Boolean& );
    private void ( , Series );
    private void (Floor ,  );
    private void (Walls ,  );
    private Color (Color , int );
    private Color (Color );
    private Color (Color , double );
    private bool (ChartType );
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void ();
    protected virtual void (bool );
}
internal class  : object {
    private bool ;
    private Byte[] ;
    private Int32[] ;
    internal (Byte[] );
    internal void (int , int , bool );
    internal int (int );
    internal bool (MemoryStream , Byte[] , int );
    internal bool ();
    internal void (bool );
    internal Byte[] ();
    internal Int32[] ();
    internal void (Int32[] );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private double ;
    internal ( , string );
    private void (Char[] , int , int , StringBuilder );
    protected virtual double (double );
    internal virtual  ( , double ,  );
    private int (double );
    public virtual bool ( );
    public virtual  ();
    public virtual NumberCategoryType ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public sealed virtual void Dispose();
    internal void ( );
    internal void (ICollection );
    internal void (Workbook );
}
internal class  :  {
    public static BigInteger ;
    private static UInt32[] ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private  ;
    private  ;
    private bool ;
    private  ;
    private  ;
    internal ( ,  );
    internal ( ,  , bool );
    internal virtual void ( );
    public virtual void ( );
    private void ( );
    [("True")]
private void ();
    private void ();
    internal static void ( ,  );
    private  ();
    private int ();
    private bool ();
    private bool ();
    protected virtual  ();
    protected virtual  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private ( );
    public (string );
    public static  (object );
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    []
private Workbook ;
    []
private  ;
    []
private  ;
    []
private Worksheet ;
    []
private  ;
    []
private  ;
    private int ;
    private Byte[] ;
    private int ;
    []
private Cells ;
    []
private ListObject ;
    internal ( );
    public ListObject ();
    public void (ListObject );
    internal void ( ,  );
    private void ();
    private void ();
    private void ();
    private void ();
    internal static XmlColumnProperty (Byte[] );
    private void (int );
    private void ();
    private void ();
}
internal class  : object {
    protected IList ;
    public (IList );
    public virtual IList ();
    public virtual void (Stream );
    public static  (Stream );
    private static Byte[] (Byte[] , byte );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    protected Color ;
    protected Color ;
    protected int ;
    protected Brush ;
    protected bool ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public void (Color , Color , int );
    public void (Brush , Color , int );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat , Single& , Single& );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat , Single& , Single& );
}
internal abstract class  :  {
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal (Stream , int );
    internal virtual int ();
    protected virtual void (bool );
}
internal abstract class  : object {
    public static double (double );
    public static double (double );
    public static double (double , double );
    internal static double (double , double , double );
    public static double (double , double , double );
    public static double (double , double , double );
    internal static double (double , double , double );
    public static double (double , double );
    public static double (double , double , double );
    private static double (double , double );
    private static double (double , double );
    internal static double (double , double );
    private double (double , double );
    public static double (double , double , double , bool );
    public static double (double , double , double );
}
internal enum  : Enum {
    public int value__;
}
internal abstract class  : object {
    private static CompareInfo ;
    internal static string ;
    private static ();
    private static string ();
    internal static bool (string , string );
    internal static string (string );
    internal static Exception (string );
    internal static IList ();
    internal static IList (int );
    internal static IList (ICollection );
    internal static IList (IEnumerable );
    internal static IDictionary ();
    internal static IDictionary (int );
    internal static IDictionary (IDictionary );
    internal static string (string );
    internal static string (string );
    internal static void (Stream );
    internal static void (TextWriter );
    internal static int (string , string );
    internal static int (string , string );
    internal static bool (string , string );
    internal static bool (string , string );
    internal static string (object );
}
internal class  : object {
    []
private Workbook ;
    private  ;
    private List`1<> ;
    internal (Workbook ,  , LoadOptions );
    internal void ();
    private void ( );
    private void ();
    private void ();
    private  ();
    private void ( );
    private void ( );
    private void ( ,  );
    private void (List`1<> );
    private void (List`1<> );
    private void ( , Worksheet ,  );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    internal (int , float );
    internal void (Cells ,  );
    internal int (Worksheet , int , int );
    internal int (Worksheet , int , int );
    internal void ( ,  );
    private void ( ,  , int );
    private void (int , int );
    private int (int , int );
    public sealed virtual void Dispose();
}
internal class  : object {
    internal static  ;
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private string (string );
    internal  (string );
    internal  (string );
    internal string (string );
    internal int (string );
    internal static  ( ,  );
    private static void (IList ,  ,  );
}
internal class  :  {
    public ( );
    public virtual  ( );
    public sealed virtual void ();
    public sealed virtual bool (int ,  );
    public sealed virtual  ();
    public sealed virtual  (bool );
}
internal class  : object {
    private static int ;
    private static int ;
    private static int ;
    private static Char[][] ;
    private static ();
    internal static bool (ArrayList );
    internal static bool (string );
    internal static bool (ArrayList );
    internal static bool (string );
    private static int (char );
    private static bool (char );
    private static char (char , int );
    private static int (char );
    private static int (char ,  );
    private static void (StringBuilder ,  , int );
    internal static void (StringBuilder , int );
    private static bool ( );
    internal static void (Char[] , StringBuilder , int );
    internal static void (Char[] , int , int , int );
    internal static void (Char[] , int , int , char , bool );
    internal static int (Char[] , int , int , Char[] , int , int , int );
}
internal abstract class  : object {
    internal static UInt32 (UInt32 );
    internal static UInt32 (UInt32 );
    internal static ulong (UInt32 );
    internal static void (ulong , UInt64[] , int );
    internal static void (ulong , UInt64[] , int );
    internal static UInt32 (UInt32 );
    internal static ulong (ulong );
    internal static UInt32 (UInt32 );
    internal static UInt32 (UInt32 );
    internal static ulong (ulong );
    internal static UInt32 (UInt32 );
}
internal class  : object {
    public static Size (Byte[] );
    public static string (Byte[] );
    public static Byte[] (Byte[] , long , long );
    public static Byte[] ( , long , long );
    public static byte (Byte[] , int );
    public static ushort (Byte[] , int );
    public static UInt32 (Byte[] , int );
    public static long (Byte[] , int );
    public static string (UInt32 );
    public static long (string );
    public static string (Byte[] , int , int );
    public static string (int );
    public static string (int , int );
    public static void (Stream );
    public static void (Stream , Stream );
    public static void (Stream , Stream );
    public static string (ushort );
    private static string (ushort );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static Boolean[] ;
    public static Hashtable ;
    public static Hashtable ;
    public static Hashtable ;
    public static Hashtable ;
    private IList ;
    private  ;
    private IList ;
    private IList ;
    private  ;
    private static ();
    protected ( );
    public (IList , IDictionary );
    public (IList , IDictionary ,  );
    public (IList , IList );
    public (IList , IList ,  );
    public (string );
    public (string ,  );
    public (bool , string );
    public (bool , string ,  );
    public (bool , IDictionary , string );
    public (bool , IDictionary , string ,  );
    public static bool ();
    public static void (bool );
    public static  ( , bool );
    public static  (object );
    private  (string , IDictionary );
    public IList ();
    public IList ();
    public IList ( );
    public virtual  ();
    public bool ( , bool );
    public bool ( );
    private static bool (string , string );
    private static string (string );
    private static  (string );
    private static string (string );
    private void (StringBuilder , IDictionary ,  , string );
    public string (bool , IDictionary );
    public virtual string ToString();
}
internal class  : object {
    private int ;
    private short ;
    []
private Cells ;
    private  ;
    private  ;
    []
private RowCollection ;
    []
private  ;
    []
private  ;
    []
private LightCellsDataProvider ;
    private  ;
    private Row ;
    private Cell ;
    private  ;
    []
private  ;
    private Row ;
    private Row ;
    private Cell ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    []
private  ;
    private int ;
    private bool ;
    private bool ;
    internal (Worksheet , LightCellsDataProvider ,  );
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual Row ();
    public sealed virtual Cell ();
    public sealed virtual  ();
    public sealed virtual  ();
}
internal class  : object {
    private Color ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private string ;
    private double ;
    private FontUnderlineType ;
    internal Font ;
    internal bool ;
    internal (Font );
    internal Color ();
    internal void (Color );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal string ();
    internal void (string );
    internal double ();
    internal void (double );
    internal FontUnderlineType ();
    internal void (FontUnderlineType );
}
internal class  :  {
}
internal class  : object {
    []
private WorksheetCollection ;
    private string ;
    internal string ;
    []
private  ;
    private ArrayList ;
    private Byte[] ;
    private  ;
    internal int ;
    internal (WorksheetCollection );
    internal bool ();
    private bool (string );
    internal void ( );
    internal void ([][] );
    internal string ();
    internal void (string );
    internal  ();
    internal void ( );
    internal ArrayList ();
    internal void (ArrayList );
    internal int ();
    internal Byte[] ();
    internal void (Byte[] );
    internal bool ();
    internal int ();
    internal  ();
    internal void ( );
    internal int ();
    internal void (int );
}
internal class  :  {
    internal void (int , int );
}
internal class  : object {
    private  ;
    private VbaProject ;
    private  ;
    internal (VbaProject ,  );
    internal void ();
    private void ();
    private void (Stream , VbaProjectReference );
    private void (Stream , VbaProjectReference , int , string );
    private void (Stream , int );
    private void (Stream , int , short );
    private void (Stream , int , int );
    private void (Stream , int , string , bool );
    private void ();
    private void ();
    private void (StringBuilder ,  );
    private void ();
    private void ();
}
internal class  :  {
    private  ;
    private  ;
    private Hashtable ;
    private Hashtable ;
    private [] ;
    private  ;
    private  ;
    private  ;
    private  ;
    private Hashtable ;
    private  ;
    private long ;
    internal ( ,  );
    internal virtual void ( );
    internal void ( );
    internal void ( );
    internal bool ( ,  , ArrayList , int ,  );
    internal void ();
    private void (string );
    private void (StreamWriter , object , object );
    private void (StreamWriter , Hashtable , long , string );
    internal void (long , Hashtable );
    internal void (long , Hashtable );
    internal void ( , ArrayList , int );
    private  (int ,  );
    internal void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , bool );
    internal (Workbook , bool );
    internal virtual void ( );
    [("True")]
private void ( , XmlMap );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    private string ;
    private string ;
    private  ;
    private bool ;
    internal (string , string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  : object {
    private static string ;
    private static ();
    private static void (string , bool ,  , StringBuilder );
    private static string (string , string , bool ,  );
    public static string (object );
    public static string ( );
    public static string ( , bool );
    private static string (string , Byte[] );
    private static string (Byte[] , int , int );
}
internal class  :  {
    private [] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    public ( ,  , [] , int , int );
    private ( ,  );
    public virtual  ();
    public virtual  ( );
    public virtual bool ();
    internal [] ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    private bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    internal void (ValidationCollection , int );
}
internal class  : object {
    internal Byte[] ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    public virtual bool Equals(object );
    internal static  ( );
    public virtual int GetHashCode();
}
internal class  : object {
    public static void ( ,  );
}
internal class  : object {
    private string ;
    private BigInteger ;
    private BigInteger[] ;
    public (string , BigInteger , BigInteger[] );
    public virtual string ();
    public virtual BigInteger ();
    public virtual BigInteger[] ();
}
internal class  :  {
    private Byte[] ;
    private byte ;
    internal (int , int , CellArea , Byte[] );
    internal Byte[] ();
    internal void (Byte[] );
    internal void ( );
    internal int ();
    internal void (int );
    internal virtual bool ();
    internal virtual bool ();
    internal virtual bool ();
    internal virtual bool (bool );
    internal virtual bool (bool );
    internal virtual  (int , int , WorksheetCollection , WorksheetCollection , CopyOptions );
    internal virtual  ();
    internal void (Worksheet , bool , CellArea , int , int , CopyOptions );
    internal virtual void (int , int , int , int );
    internal virtual void (int , int , int , int );
    internal virtual bool (CellArea , bool );
    internal  ( ,  , bool );
    internal void ( ,  , bool );
    internal  ( );
    internal object ( ,  );
    private void ( , int , int );
    internal void ( , object );
    internal void (Cells );
}
internal class  :  {
    internal bool ;
    internal [] ;
    internal String[][] ;
    []
internal  ;
    internal ( );
    internal ( , String[] , PivotPageFields , bool );
    internal virtual void ();
    internal virtual  ( ,  );
    internal virtual void ( , CopyOptions );
    internal virtual void (int , int , Worksheet );
    internal virtual void (int , int , Worksheet );
    internal virtual void (int , int , Worksheet );
    internal virtual PivotTableSourceType ();
    private void (PivotPageFields );
    internal virtual String[] ( );
    internal virtual void (String[] ,  );
}
internal class  : object {
    private static IDictionary ;
    private static ();
    public static  ( );
    public static  (string );
    public static  ( , string );
    public static  (string , string );
    public static  ( );
    public static  (string );
    public static string ( );
    private static string (string );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private [] ;
    internal ([] );
    public  ( );
    public bool ( );
    public [] ( );
    public [] ();
    public [] ();
    public long ();
    public bool ();
    public DateTime ();
    public long ();
    public long ();
    public Int32[] ();
    public Int32[] ();
    public Int32[] ();
    public int ();
    public string ();
    public bool ();
    public [] ();
    public  ();
    public int ();
    public int ();
    internal [] ();
}
internal class  :  {
    []
private Cells ;
    []
private RowCollection ;
    private  ;
    private int ;
    private Row ;
    public (Cells ,  );
    public (Cells ,  , int , int );
    public virtual bool ();
    public virtual object ();
    public virtual void ();
}
internal class  : object {
}
internal class  : object {
    private  ;
    private Byte[] ;
    private int ;
    public ( );
    public sealed virtual void ( );
    public sealed virtual  ();
    private void (int , Byte[] );
    public sealed virtual int (Byte[] , int , int );
}
internal class  : object {
    internal  ;
    internal  ;
    internal double ;
    internal string ;
    internal double ;
    internal Cell ;
    internal CellArea ;
    internal int ;
    internal bool ;
    internal (bool );
    internal void ();
    internal static  ( , string );
    internal object ();
}
internal class  : ValueType {
    internal static ArrayList ( ,  ,  , Rectangle , float , double , int );
    private static ArrayList ( ,  ,  , Rectangle , float , float );
    internal static ArrayList ( ,  ,  , Rectangle , float , int );
    private static ArrayList ( ,  ,  , Rectangle , float ,  );
    internal static ArrayList ( ,  ,  , Rectangle , float , int );
    private static ArrayList ( ,  ,  , Rectangle , float ,  );
    internal static RectangleF (PointF[] );
    private static void ( ,  , IList , IList , ArrayList , float , bool ,  , ArrayList ,  , Rectangle , int );
    private static bool (int , ArrayList );
    private static void ( , IList , IList , IList , float , bool ,  , ArrayList ,  , Rectangle );
    internal static void ( ,  , float , double , int );
    private static void ( ,  , float , double );
    internal static void ( ,  , float , double , int , bool );
    private static void ( ,  , float , double , bool );
    private static void ( ,  ,  ,  , IList , ArrayList );
    private static bool (PointF , PointF , PointF , PointF , PointF& );
    private static void ( ,  ,  , PointF[] );
    private static void ( ,  ,  , PointF[] , PointF[] , PointF[] , PointF[] );
    private static PointF[] ( , float , float , float ,  );
    private static void ( ,  , IList , [] , IList , ArrayList[] );
    private static bool (IList , IList , int );
    private static bool (IList , IList , int , PointF[]& );
}
internal class  :  {
    public (Stream );
    public (string , bool );
    public virtual bool ();
    public virtual string ();
    public virtual  ( , bool );
}
internal class  : object {
    private VbaProject ;
    internal (VbaProject );
    internal Byte[] ();
}
internal class  :  {
    internal (PivotFilter );
}
internal class  :  {
    private int ;
    public (Byte[] , int );
    public int ();
}
internal class  : object {
    internal static Byte[] ();
    internal static Stream ();
    internal static Byte[][] (string , string );
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] (string );
    internal static Stream (string );
    public static Stream (string );
    internal static Stream (string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal abstract class  :  {
    public static  (Byte[] );
    public static  (Stream );
    public sealed virtual  ();
    internal abstract virtual void ( );
    protected abstract virtual bool ( );
    protected abstract virtual int ();
    internal bool ( );
    internal int ();
}
internal class  :  {
    private Enum ;
    public (Enum );
    public Enum ();
    public void (Enum );
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    internal LineSpaceSizeType ;
    internal int ;
    internal void ( );
}
internal class  :  {
    internal void (PaneCollection , bool , bool );
}
internal class  : object {
    protected byte ;
    protected object ;
    public (byte , object );
    public virtual byte ();
    public virtual object ();
    public virtual  ();
    public virtual void (Stream );
    public static  (Stream );
    protected static bool (byte , object );
}
[("And")]
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
private Font ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
[]
protected object ;
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected Color ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
private Font ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected string ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    internal ( , object , int );
    internal Font ();
    internal void (Font );
    internal Font ();
    internal Color ();
    internal void (Color );
    internal object ();
    public bool ();
    public void (bool );
    public virtual Font ();
    public virtual void (Font );
    public  ();
    public int ();
    public void (int );
    internal string ();
    internal void (string );
    internal  ();
    internal void ( );
    public sealed virtual void Dispose();
    protected virtual void (bool );
    internal  ();
    internal void ( );
    [("True")]
internal abstract virtual void ();
    protected virtual override void Finalize();
    internal  ();
    internal void ( );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public static  ( , bool );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    internal (Int32[] );
    internal (Int32[] , int , int );
    public sealed virtual void ();
    public sealed virtual int ();
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    public sealed virtual void ( );
    public sealed virtual string ();
    public sealed virtual int (Byte[] , int );
    public sealed virtual int (Byte[] );
}
internal class  : object {
    public  ;
    public long ;
    public (string , string , string , IDictionary , ArrayList );
    public (long , long , long );
}
internal class  : object {
    internal  ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal int ;
    internal int ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal int ;
    internal UInt32 ;
    internal int ;
    internal (BinaryReader );
    internal void (BinaryWriter );
    internal bool (long );
    internal int ();
}
internal class  : object {
    private  ;
    private GlobalizationSettings ;
    private char ;
    private char ;
    internal  ();
    internal void ( );
    internal GlobalizationSettings ();
    internal void (GlobalizationSettings );
    internal char ();
    internal void (char );
    internal char ();
    internal void (char );
}
internal class  : object {
    private Area ;
    internal Line ;
    internal bool ;
    internal (Chart , object );
    internal Area ();
    internal void (Area );
    internal FormattingType ();
    internal void (FormattingType );
    private void (Area );
    internal void (ChartFrame );
    internal void (Series );
    internal void (ChartPoint );
    internal void (Floor );
    internal void (Marker , Workbook );
    internal void (Line );
    internal void (DropBars );
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private  ;
    private  ;
    internal ( );
    internal void (string );
    internal string (int );
    public virtual void ( );
    internal int ();
    public  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    internal (Stream );
    internal (Byte[] );
    internal (Byte[] , int , int );
    internal virtual void ( );
    internal static void ( , string , Byte[] , int , int );
}
internal class  : object {
    protected int ;
    protected Byte[] ;
    public (int , Byte[] );
    public virtual int ();
    public virtual Byte[] ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal RectangleF ;
    internal  ;
    internal SizeF ;
    private Font ;
    private string ;
    private Color ;
    internal (string , Font , Color ,  );
    public string ();
    public void (string );
    public Font ();
    public void (Font );
    public Color ();
    public void (Color );
}
internal class  : object {
    private  ;
    internal ( );
    public sealed virtual Stream ();
    public sealed virtual  ();
}
internal class  : object {
    internal static  ;
    private static ();
    public sealed virtual double (double , double );
    public sealed virtual double (double , double );
    public sealed virtual double (double , double );
    public sealed virtual double (double , double );
}
internal class  : object {
    internal string ;
    internal Byte[] ;
    internal ushort ;
    internal (string );
    internal bool ();
    internal void (bool );
    internal void ( );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected Byte[] ;
    [DebuggerBrowsableAttribute("0")]
protected Byte[] ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    public (Stream , bool );
    public (Stream ,  );
    public (Stream , int );
    public (Stream , int , bool );
    private static  (bool );
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanSeek();
    public sealed virtual bool get_CanWrite();
    public virtual void Close();
    public sealed virtual void Flush();
    public virtual int ();
    public virtual void (int );
    public sealed virtual long get_Length();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long );
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public sealed virtual long Seek(long , SeekOrigin );
    public sealed virtual void SetLength(long );
    public virtual long ();
    public virtual long ();
    public sealed virtual void Write(Byte[] , int , int );
}
internal class  :  {
    internal virtual void ( ,  );
    internal virtual void ( ,  );
}
internal class  : object {
    public static void (string , SparklineGroup , Sparkline , int , int );
    public static Bitmap (ImageOrPrintOptions , SparklineGroup , Sparkline , int , int );
    public static void (string , ImageOrPrintOptions , SparklineGroup , Sparkline , int , int );
    public static void (Stream , ImageOrPrintOptions , SparklineGroup , Sparkline , int , int );
    private static  (int , int , Stream , ImageType , ImageOrPrintOptions ,  );
}
internal class  : object {
    internal static  ;
    private static string ;
    private static string ;
    private static string ;
    private static string ;
    private static string ;
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static  ;
    private static IDictionary ;
    private static ();
    private static void ( , string , string );
    internal string (string );
    internal  ( ,  );
    internal String[] (string );
    internal string (string );
    internal  (string );
    internal  (string );
    internal  (string ,  );
    internal  (string ,  );
    internal  (string ,  );
    private void (IList ,  );
    private void (IList ,  );
    internal  ( );
    internal string ( , string );
}
internal abstract class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal CellArea ;
    protected (int , int , CellArea , int );
    internal abstract virtual int ();
    internal abstract virtual  ( ,  , int , int , int , int );
    internal abstract virtual  ( ,  , int , int , int , int );
    internal abstract virtual  ( ,  , int , int , int , int );
    internal abstract virtual  ( ,  , int , int , int , int );
    internal abstract virtual  ( ,  , int , int , int , int );
    internal abstract virtual Int32[] ( , int , int , int , int , Int32[] , bool );
    internal virtual bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal static bool ( ,  );
    internal static bool (int );
    internal static  ( ,  , int );
    internal static  ( , int , int , CellArea , int );
    internal static  ( , int , int , CellArea ,  , int );
    internal static Int32[] ( ,  , Int32[] , int , bool );
    internal static Int32[] ( , int , int , CellArea , Int32[] , int , bool );
    internal static  ( ,  , int , int , CellArea , int );
    internal static  ( ,  ,  , int );
    internal static  ( ,  , int , int , CellArea ,  , int );
    private  ( ,  , int , int , int , int , int );
}
internal class  :  {
    private static string ;
    private static Hashtable ;
    private string ;
    private string ;
    private static ();
    public (string , string );
    public virtual string (string );
    public virtual string (string , FontStyle , bool , string );
}
internal abstract class  : object {
    protected abstract virtual  ();
    protected virtual  (bool );
    public virtual  ();
    public virtual  ();
    [ObsoleteAttribute("Use version taking a DerObjectIdentifier instead")]
public sealed virtual  (string );
    public virtual  ( );
}
internal class  : object {
    public UInt32 ;
    public string ;
    public UInt32 ;
    public UInt32 ;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    public ( );
    [ObsoleteAttribute("Will be removed")]
public (BigInteger ,  );
    [ObsoleteAttribute("Will be removed")]
public (int , int , int , int ,  );
    public  ();
    public virtual  ();
}
internal class  : object {
    internal static string (Range , JsonSaveOptions );
    internal static void (Range , JsonSaveOptions , Stream );
    internal static string (Cell );
    internal static string (Style );
    internal  (Cell );
    internal  (Style );
    private  (Style );
    private string (Color );
    private  (Style );
    private  (Style );
    private  (Border , string );
    private  (Style );
    private  (Style );
    private  (Style );
}
internal class  : object {
    private string ;
    private string ;
    private bool ;
    private  ;
    internal string ;
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
}
internal class  : object {
    private Int32[] ;
    private static Int16[] ;
    private static Int32[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public virtual Int32[] ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    protected static Int32[] (bool , Byte[] );
    internal static void (Int32[] , Byte[] , int , Byte[] , int );
}
internal class  : object {
    private  ;
    internal ( );
    internal void ();
    private ArrayList ();
}
internal class  :  {
    internal (byte );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal Font ;
    [DebuggerBrowsableAttribute("0")]
internal Style ;
    [DebuggerBrowsableAttribute("0")]
internal TextAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
internal TextAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
internal Color ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    internal ( );
    internal ( );
    public sealed virtual void Dispose();
}
internal abstract class  :  {
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    internal ( ,  , int , int );
    protected ( );
    protected ( , int , int );
    public virtual bool ();
    public virtual void (bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  : object {
    []
private Workbook ;
    private DataMashup ;
    private PowerQueryFormulaCollection ;
    internal (Workbook );
    internal DataMashup ();
    private void ();
    private void ( );
    private void ( , List`1<> );
    private void ( , String[] );
    private void ();
    internal void (Byte[] );
    private void (PowerQueryFormulaFunction , string );
    private void (StreamReader , StringBuilder , PowerQueryFormulaFunction );
    private bool (string , StreamReader , StringBuilder , PowerQueryFormulaFunction );
    internal string (TextReader , StringBuilder , char , StringBuilder , string , bool );
    private String[] (string , int );
    private void (Byte[] );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    internal UInt32 ;
    private ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal ( );
    internal ushort ();
    internal void (ushort );
    internal void ( );
    internal MemoryStream ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    protected internal ( );
    public ( );
    public ( ,  , BigInteger );
    public ( , BigInteger );
    public (Byte[] );
    public (Byte[] ,  , BigInteger );
    public static  ( , bool );
    public static  (object );
    public static  ( );
    public Byte[] ();
    public  ();
    public BigInteger ();
    public virtual  ();
    public virtual string ToString();
}
internal class  :  {
    private int ;
    private int ;
    public ( ,  ,  , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool (int , int );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    internal void (ushort );
}
internal class  :  {
    private  ;
    internal virtual void ( ,  );
    internal virtual void ( ,  );
}
internal class  :  {
}
internal class  : object {
    protected BigInteger ;
    protected BigInteger ;
    protected  ;
    public virtual void (BigInteger , BigInteger ,  );
    public virtual void ( ,  );
    public virtual BigInteger (Byte[] , Byte[] , Byte[] );
}
internal abstract class  :  {
    protected  ;
    private  ;
    protected (WorksheetCollection );
    internal abstract virtual bool (int );
    public virtual bool (Byte[] , int , int );
}
internal class  : object {
    internal bool ;
    internal bool ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private int ;
    private ArrayList ;
    internal (bool , bool );
    internal void (object , int , bool );
    private void (double , int , bool );
    private void ( , int );
    private void (string , int );
    private void (bool , int );
    internal void ();
    internal Int32[] ();
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : object {
    internal List`1<> ;
    internal List`1<string> ;
    internal  ;
    internal  ;
    internal string ;
    private int ;
    private Int32[] ;
    private List`1<> ;
    internal void ( , CopyOptions );
    internal bool ();
    internal  (string );
    internal int (string , bool );
    internal int (bool );
    internal bool (int );
    internal  (int , WorksheetCollection );
    private void ();
    internal  ();
    internal  ();
    internal int (Byte[] , string , string , WorksheetCollection );
    private int (int ,  );
    internal int (int , WorksheetCollection );
    internal Byte[] (int , WorksheetCollection );
    internal int (int , WorksheetCollection );
    internal  (int , WorksheetCollection );
    internal int (int , CopyOptions );
}
internal class  : ValueType {
    internal static ArrayList ( ,  , Rectangle , float , double , int , bool );
    internal static void ( ,  , IList , Rectangle );
}
internal class  :  {
    internal ( );
    public ( , DateTime ,  );
    public virtual void ( );
}
internal abstract class  :  {
    internal Byte[][] ;
    protected int ;
    internal int ;
    private int ;
    public (int , int , int );
    protected ( );
    protected abstract virtual void (int , int );
    protected abstract virtual void (int ,  );
    public virtual void (int , int );
    internal virtual Byte[] (int );
    internal virtual int (int );
    internal virtual int (int );
    public virtual int ();
    public virtual int (int );
    public virtual int (int , int );
    public virtual int (int , int , int );
    public virtual bool (int );
    public virtual int (int , int );
    public virtual int (int , bool );
    public virtual  ();
    public virtual  (int , int , bool );
    public virtual int (int );
    public virtual int (int );
    public virtual void (int , int );
    public virtual int (int , int );
    public virtual int (int , int );
    public virtual void (int , int );
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    public virtual bool (int , int );
    public virtual void (int , int , int , int );
    internal virtual int (int , int , int , int , int );
    internal virtual int (int , int , int , int , int , bool );
    public virtual int (int ,  , int );
    public virtual int (int , [] , int );
    protected void (int , int );
}
internal class  : object {
    private FileFormatInfo ;
    private Hashtable ;
    private ArrayList ;
    private string ;
    private string ;
    internal Hashtable ;
    internal FileFormatInfo ();
    internal Hashtable ();
    internal string ();
    internal string ();
    internal ArrayList ();
    internal void ( );
}
internal interface  {
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual Stream ();
}
internal class  : LoadOptions {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    internal static  (LoadOptions );
    public string ();
    public void (string );
}
internal class  : object {
    internal Int32[] ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private Color ;
    private float ;
    private Color ;
    private bool ;
    private bool ;
    private float ;
    internal ( , int , int , int , int , Int32[] , Color , float , Color );
    internal ( , int , int , int , int , Color , float , Color ,  );
    internal  ();
    internal void ( );
    private int ();
    private int ();
    private PointF[] ();
    private PointF[] ();
    private RectangleF (int );
    public RectangleF ();
    private float (short , float , float );
    private GraphicsPath (& , UInt16[] , PointF[] , & , & , Boolean& , Boolean& );
    internal void ( ,  , RectangleF );
    internal virtual Matrix ();
    public  ();
    internal  ();
    private static float (float , float );
    private void (PointF[] );
    public int ();
    public float ();
    public float ();
    public float ();
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public float ();
    public void (float );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public object Current { get; }
    public ( );
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
    public sealed virtual void Reset();
}
internal class  :  {
    internal int ;
    internal int ;
    internal Int32[] ;
    internal Int32[] ;
    internal int ;
    internal byte ;
    internal int ;
    internal int ;
    internal int ;
    internal Byte[] ;
    internal byte ;
    internal virtual void ( , CopyOptions );
}
internal class  :  {
    internal (string );
}
internal class  :  {
    public static int ;
    public static int ;
    private Byte[] ;
    public ( );
    public (Byte[] , int );
    public (Stream );
    private static ();
    public void (Byte[] , int );
    public Byte[] ();
    public  ();
    public void ( , Byte[] , int );
}
internal class  : CustomLineCap {
    [DebuggerBrowsableAttribute("0")]
private GraphicsPath ;
    [DebuggerBrowsableAttribute("0")]
private GraphicsPath ;
    public (GraphicsPath , GraphicsPath , LineCap , float );
    public (GraphicsPath , GraphicsPath , LineCap );
    public (GraphicsPath , GraphicsPath );
    public object ();
    public GraphicsPath ();
    public GraphicsPath ();
    protected virtual void Dispose(bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : object {
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual void (int , Byte& );
    public abstract virtual void (int , Byte& );
    public abstract virtual void ();
    public abstract virtual  ();
}
internal class  : object {
    []
private Shape ;
    internal  ;
    internal  ;
    internal Font ;
    internal  ;
    internal  ;
    internal (Shape );
    internal Font ();
    internal int ();
    private void ();
    private void ();
    internal void ( , CopyOptions );
}
internal class  :  {
    []
private RevisionMergeConflict ;
    []
private Workbook ;
    internal (RevisionMergeConflict , Workbook );
    private void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( ,  , bool );
    public virtual void (Byte[] );
    public virtual void (long );
    public virtual void NextBytes(Byte[] );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] (int );
}
internal class  :  {
    private ArrayList ;
    public (Single[] );
    public (PointF[] );
    public ArrayList ();
    public virtual void ( );
    public virtual void (TextWriter );
}
internal class  : ValueType {
    internal static ArrayList ( ,  ,  , Rectangle , float , double , int );
    private static void ( ,  , RectangleF , float ,  , Rectangle );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
public static  ;
    public ( );
    public ([] );
    public ( );
    private static ();
    public static  ( );
    internal virtual void ( );
}
internal class  :  {
    private Row ;
    private int ;
    internal (Cells , RowCollection );
    internal virtual void ( );
    public virtual int ();
    public virtual void (int );
    public virtual void ();
    public virtual Row (int );
    public virtual Row (int , bool );
    public virtual Row (int , bool , bool , bool );
}
internal class  : object {
    internal string ;
    internal CellArea ;
    internal string ;
}
internal interface  {
    public abstract virtual bool (Byte[] );
    public abstract virtual bool (Byte[] , int , int );
}
internal class  :  {
    public virtual Color (Color );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private static long ;
    [DebuggerBrowsableAttribute("0")]
internal Stream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream , bool );
    public (Stream , long );
    private (bool , long , Stream ,  );
    private static ();
    public long ();
    public int ();
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual void Write(Byte[] , int , int );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    private sealed virtual override void ();
    public virtual void Close();
}
internal abstract class  : object {
    public virtual bool (Worksheet );
    public virtual bool ( );
    public abstract virtual bool (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool ();
    public virtual bool ();
    public virtual  ();
}
internal class  : object {
    []
internal  ;
    []
internal Shape ;
    internal string ;
    internal string ;
    internal int ;
    internal ( , Shape );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private byte ;
    public (byte );
    public (byte , Exception );
    public virtual byte ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public (IEnumerable );
    public static  (object );
    public [] ();
    public virtual  ();
}
internal class  : object {
    public string ;
    public string ;
    public int ;
    public string ;
    public string ;
    public List`1<> ;
    public Worksheet ;
}
internal class  :  {
    internal (ListColumn );
}
internal abstract class  :  {
    protected  ;
    public ( );
    public ( ,  );
    public virtual Int32[] ();
    public virtual  ();
    protected virtual  (int );
    protected virtual  (int );
    protected virtual  (int );
    protected virtual  (int );
    protected virtual  ();
}
internal class  :  {
    private Size ;
    internal int  { get; }
    public (Byte[] , Size );
    internal virtual Image ();
    internal virtual int ();
    internal virtual int ();
    internal virtual int ();
    internal virtual  ();
    internal virtual bool ();
    internal virtual bool ();
}
internal class  : object {
    []
private  ;
    private bool ;
    private  ;
    private  ;
    private Color ;
    private Color ;
    private  ;
    private float ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    internal ( );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public Color ();
    public void (Color );
    public Color ();
    public void (Color );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public float ();
    public void (float );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private Stack ;
    []
private  ;
    private bool ;
    private Byte[] ;
    private bool ;
    private int ;
    private int ;
    private ( ,  );
    private ( ,  , bool );
    internal static  ( , Byte[] , int , int );
    internal static  ( , Byte[] , int , int , bool );
    internal static  ( ,  );
    internal static  ( ,  , bool );
    private  ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    internal  ();
    private bool ();
    private bool ();
    private bool (int , int );
    internal static  ( ,  , [] );
    private void (int , int );
    private bool ( );
    private bool ( );
    private bool ( );
}
internal class  :  {
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal byte ;
    internal (byte );
    private static ();
    internal static  (byte );
    internal virtual object ();
    internal virtual string ();
    internal virtual  ();
    internal virtual byte ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static Byte[] (int , string , FontSetting[] , WorksheetCollection );
    internal static void (ArrayList , int , Font , bool );
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , long );
    protected static Byte[] (long );
    public long ();
}
internal class  : object {
    internal static  ;
    private static ();
    public sealed virtual bool ( , object ,  , object );
    protected virtual bool (double , double );
    protected virtual bool (double );
    internal static void ( , object , StringBuilder );
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    internal void ( );
    internal void ( );
    private  ( );
    internal void ( );
    private void ( );
    internal void ( , string , string , int );
    internal void ( , Hashtable );
    internal void ( );
    internal void ( );
    internal void ( , Hashtable );
    private void ( , Hashtable );
}
internal class  : object {
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected int ;
    public (BigInteger[] , BigInteger[] , BigInteger , BigInteger , int );
    private static void (BigInteger[] , string );
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual int ();
}
internal class  : object {
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    private ( );
    public ( ,  );
    public static  (object );
    public static  ( , bool );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal interface  {
    public abstract virtual  ();
}
internal class  : object {
    internal int ;
    internal  ;
    internal string ;
    internal bool ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal bool ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    private  ;
    private  ;
    internal ( );
    internal void (Cell );
    internal static  ( ,  , int );
    internal static  ( ,  , int );
    internal static  ( ,  , int );
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual void ( );
}
internal class  : object {
    public sealed virtual void (int , int );
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
    public sealed virtual  ();
}
internal class  :  {
    internal (bool );
    internal void (String[] );
    internal virtual void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  : object {
    []
private  ;
    []
private  ;
    private  ;
    private  ;
    private  ;
    private List`1<> ;
    private  ;
    internal ( ,  ,  );
    internal Byte[] (Byte[] );
    private void ( );
    private  (List`1<> , string );
    private void ( );
    private void ( );
    private  ( ,  , string , string );
    private  ( );
    private void ( ,  );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  , FontStyle ,  );
    public Byte[] (string );
    public virtual void (Stream );
    internal virtual string ();
    public virtual void ( );
    internal virtual string ();
    private void ( );
    private void ( );
    private void ();
    private  ();
    protected virtual string ();
    internal virtual bool ();
    internal virtual int ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  :  {
    private double ;
    public virtual void ();
    public virtual bool (double , double );
    public virtual bool (double , double );
    public virtual  (double , double );
    public virtual  (double , double , int );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
}
internal class  : object {
    private static  ;
    private  ;
    private int ;
    private Stream ;
    private static ();
    private  ( );
    private  ();
    private  (Stream );
    public  (Byte[] );
    public ICollection (Byte[] );
    public  (Stream );
    public ICollection (Stream );
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal  ;
    internal UInt32 ;
    internal static  ( );
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private int ;
    internal ( );
    internal int ();
    public sealed virtual bool ();
    public sealed virtual Style (int );
    public sealed virtual void (int , Style );
    public sealed virtual Style (string );
    public sealed virtual int (string );
    public sealed virtual int (int );
    public sealed virtual int ();
    public sealed virtual int (Style );
    public sealed virtual int (Style , CopyOptions );
    public sealed virtual int (Style , bool , CopyOptions );
}
internal class  : object {
    private IList ;
    private IList ;
    public ( );
    public ( );
    public ( ,  );
    public virtual  ();
}
internal class  : object {
    internal static int (Byte[] , int );
    internal static int (Byte[] , int );
    internal static int (Byte[] , int , int , byte );
    internal static void (Byte[] , int , int , int , bool , bool );
    internal static void (Byte[] , int , int , int , bool , bool );
    internal static void (Byte[] , int , int , int , bool , bool );
    internal static int (Byte[] , int , int , byte );
}
internal class  : object {
    []
private PageSetup ;
    []
private Workbook ;
    []
private Worksheet ;
    private Hashtable ;
    private bool ;
    []
internal  ;
    private  ;
    private  ;
    private double ;
    private double ;
    []
private  ;
    []
private  ;
    internal (Workbook ,  , double , double ,  ,  , bool );
    internal void (Worksheet , int , int , int ,  );
    private void (int , int , int ,  );
    private void (string , TextAlignmentType , int , int ,  );
    internal void ();
}
internal class  : object {
    private object ;
    private string ;
    private Char[] ;
    private  ;
    public (object );
    public (object , string , Char[] ,  );
    private static  (object );
    private static  (object , string , Char[] ,  );
    private static Byte[] ( , String& );
    public sealed virtual  ();
}
internal enum  : Enum {
    public UInt32 value__;
}
internal class  : object {
    internal  ;
    internal  ;
    public ( ,  );
}
internal class  :  {
    private byte ;
    private  ;
    private  ;
    public ( );
    public ( ,  ,  ,  );
    public virtual byte ();
    public virtual  ();
    public virtual  ();
    public virtual void ( );
    private void ();
    private void ();
}
internal class  :  {
    internal (int );
    internal ( , bool );
    public virtual int (int , int , int , int );
    public virtual int (CellArea );
    protected virtual int (int , int , int );
    public virtual bool ();
    protected virtual bool ();
}
internal class  : object {
    private Hashtable ;
    internal Object[] (string , Workbook );
    internal void (string , string , string , ArrayList );
}
internal class  : object {
    private  ;
    private  ;
    private bool ;
    private  ;
    public ( );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual Byte[] (Byte[] , int , int );
}
internal class  : object {
    private List`1<> ;
    private string ;
    public (string );
    internal List`1<> ();
    public void (string , string );
    public string ();
    public void (string );
    public List`1<> ();
}
internal class  :  {
    private bool ;
    private int ;
    internal (string );
    internal virtual void ( );
}
internal class  :  {
    internal (Workbook , LoadOptions , int );
    internal virtual  ( );
    internal virtual void (Stream );
    internal virtual void (Font , Byte[] );
    internal void (Style , Byte[] , int );
    internal virtual void ( );
    internal void (Style , BorderType , int , int );
    internal void (Style , Byte[] , int );
    internal virtual int (Style , Byte[] );
    internal virtual void ( );
    internal virtual void ( ,  );
}
internal class  : object {
    private  ;
    private Byte[] ;
    private Byte[] ;
    internal (Byte[] , Byte[] ,  );
    internal void (Byte[] , Byte[] );
    private void (Byte[] , Byte[] , Byte[] , Byte[] );
    internal Byte[] (Byte[] , int );
}
internal class  :  {
    internal (HorizontalPageBreakCollection );
}
internal class  : object {
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private  ;
    public (BigInteger , BigInteger , BigInteger );
    public (BigInteger , BigInteger , BigInteger ,  );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public  ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private string ;
    private bool ;
    internal (string , bool );
    internal string ();
    private void (string );
    internal bool ();
    private void (bool );
}
internal class  : object {
    private byte ;
    private int ;
    private string ;
    private [] ;
    private int ;
    private [] ;
    public [] ();
    public void ([] );
    public [] ();
    public void ([] );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public byte ();
    public void (byte );
    public bool ();
    public bool ();
    public bool ();
}
internal class  : object {
}
internal class  :  {
    internal (ConditionalFormattingValue , bool );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private Byte[] ;
    public ( ,  , bool );
    public ( ,  );
    public virtual string ();
    public virtual void (bool ,  );
    private void (Byte[] );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual void ();
    public virtual Byte[] ();
    private void ();
    public virtual bool (Byte[] );
}
[("And")]
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private float ;
    private  ;
    private  ;
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual float ();
    public sealed virtual void (float );
    internal  ();
    public sealed virtual  ();
    internal  ();
    public sealed virtual  ();
    public sealed virtual void ( );
    internal Brush (GraphicsPath ,  , bool , float );
    private ColorBlend (float );
    private GraphicsPath (RectangleF );
    internal bool ( );
    public sealed virtual void ();
    internal void ( );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual [] ();
    public virtual [] ();
    public virtual  ();
}
internal class  : CollectionBase {
    internal int ( );
    internal void ( , object );
    internal object ( );
    internal  ( );
    internal void ( );
    internal bool ( );
}
internal class  :  {
    public ( );
}
internal class  : object {
    private  ;
    private bool ;
    private int ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private Byte[] ;
    private int ;
    private bool ;
    private Byte[] ;
    public ( );
    public virtual string ();
    public virtual  ();
    public virtual int ();
    public virtual void (bool ,  );
    private void ();
    private void ();
    public virtual void ();
    private void (bool );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (byte , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual int (Byte[] , int );
    public virtual Byte[] ();
    public virtual int (int );
    public virtual int (int );
    private int (byte , Byte[] , int );
    private bool (Byte[] , int );
}
internal class  :  {
    private bool ;
    internal ( );
    internal  ();
    internal virtual Font ();
    internal virtual void (Font );
    internal virtual Color ();
    internal virtual void (Color );
    internal  ();
    internal  ();
}
internal class  : object {
    internal static List`1<> ( , string );
    internal static string (string );
    internal static int (Char[] , int );
    internal static String[] (string , string , bool );
    internal static Byte[] ( , string , bool );
    internal static Byte[] ( ,  );
    public static void ( , string , Stream );
    public static void ( ,  , Stream );
    internal static void ( ,  ,  , string );
}
internal class  : object {
    private static object ;
    [ThreadStaticAttribute]
private static IndividualFontConfigs ;
    private static ();
    public static void (IndividualFontConfigs );
    public static IndividualFontConfigs ();
    public static  ();
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
}
internal class  : object {
    public static  ;
    public static  ;
    private static Int16[] ;
    private static ();
    public static  ( , int ,  );
}
internal class  :  {
    [("True")]
protected virtual  (Stream );
    protected virtual string ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private static  ( , string );
    private static  ( );
    private static BigInteger (string );
    private static void (string ,  ,  );
    public static  (string );
    public static  ( );
    public static  (string );
    public static string ( );
    public static IEnumerable ();
}
internal class  : object {
    public Byte[] ;
    public Byte[] ;
    internal UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    internal UInt32 ;
    internal string ;
    internal  ;
    private bool ;
    internal  ;
    internal Byte[] ;
    internal Byte[] ;
    internal Byte[] ;
    private UInt32 ;
    private UInt32 ;
    public (string , Byte[] , string , UInt32 , UInt32 , UInt32 , UInt32 , UInt32 );
    internal static  (string , EncryptionType , int );
    public void ();
    public Byte[] (Byte[] , Byte[] );
    internal bool (UInt32 );
    internal bool (Byte[] , Byte[] );
    internal Byte[] (Byte[] , UInt32 );
    internal Byte[] (Byte[] , UInt32 );
    internal Byte[] (Byte[] , UInt32 );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual void ( );
}
internal abstract class  : object {
    public static bool (byte );
}
internal class  : object {
    private ushort ;
    private ushort ;
    private ushort ;
    private UInt32 ;
    private ushort ;
    private UInt32 ;
    private ushort ;
    internal void (BinaryReader );
    internal int ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ( , float , float , float , float );
    internal virtual void ( , float , float , float , float );
    internal virtual GraphicsPath (RectangleF );
    internal GraphicsPath (RectangleF , int );
    internal virtual void ();
    private void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual bool ();
    public virtual bool ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    internal static  ;
    private static ();
    public virtual byte ();
    public virtual  ();
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual  (Char[] ,  );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
    public virtual string ToString();
}
internal class  :  {
    internal ( );
}
internal class  : object {
    protected Byte[] ;
    protected Byte[] ;
    protected void ();
    public sealed virtual int (Byte[] , int , int , Stream );
    private static bool (char );
    public sealed virtual int (Byte[] , int , int , Stream );
    public sealed virtual int (string , Stream );
    internal Byte[] (string , int , int );
}
internal abstract class  : object {
    internal  ;
    internal  ;
    internal List`1<> ;
    internal List`1<> ;
    internal abstract virtual int ();
    internal abstract virtual void ( );
}
internal class  : object {
    internal List`1<> ;
    internal List`1<> ;
    internal ( , CopyOptions );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  :  {
    private int ;
    private int ;
    public ( ,  , [] , int , int , int , int );
    private ( );
    public virtual  ( );
    public virtual void ( );
    public sealed virtual bool ( );
    public sealed virtual bool ( );
    public sealed virtual  ();
    public sealed virtual  (bool );
    public sealed virtual  ();
    public sealed virtual bool ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private string ;
    internal (string );
    internal virtual void ( );
}
internal class  :  {
    protected virtual  ( , BigInteger );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private JsonSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private StreamWriter ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal (Workbook , SaveOptions );
    internal (Range , SaveOptions );
    private JsonSaveOptions (SaveOptions );
    public sealed virtual void ();
    public sealed virtual void Dispose();
    private void ();
    public sealed virtual void (Stream );
    private void (int );
    private void (Range , StreamWriter );
    private void (int , int , string );
    private void ();
    private void ( , int , Range , [] );
    private void ( , StreamWriter , string );
    private bool ( ,  );
    private void ( ,  , [] );
    private void (Cells , CellArea );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private Byte[] ;
    public (Byte[] );
    public ( );
    public ( );
    public static  ( , bool );
    public static  (object );
    public static  ( );
    public Byte[] ();
    public virtual  ();
    public static  ( );
    public static  ( );
    private static Byte[] ( );
}
internal class  : object {
    private static Int32[] ;
    private static Int32[] ;
    private Int32[] ;
    private Byte[] ;
    private Int32[] ;
    private Byte[] ;
    private Int32[] ;
    private Byte[] ;
    private Int32[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    public (int );
    private static ();
    public void ();
    private int ();
    private int ();
    private int ();
    private int ();
    private int (Int32[] , Byte[] , int , int );
    private int ( , Byte[] , int , int );
    public Byte[] (Byte[] , int );
    private int (Byte[] ,  );
    private int ( );
    private int ( );
    private int ( );
    private int ( );
    private int ( , Int32[] , Byte[] , int , int );
    private int (Byte[] ,  , int , int );
    private void (Byte[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public (int );
    public ( );
    private static int (int );
    public virtual string ();
    public virtual int (Byte[] , int );
    public virtual int (Byte[] , int , int );
    public virtual int (Byte[] , int , int );
    protected virtual int (Byte[] , int , byte , int );
    protected virtual int (Byte[] , int , int , byte , int );
    public virtual  ();
}
internal class  : object {
    private bool ;
    private  ;
    private GlobalizationSettings ;
    internal (string , GlobalizationSettings );
    internal ( , GlobalizationSettings );
    internal (string , bool , GlobalizationSettings );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual bool ();
    public sealed virtual string ();
    public bool ();
    public sealed virtual bool ( );
    public sealed virtual bool (string );
    public sealed virtual int (string );
    public sealed virtual int ( );
}
internal class  :  {
    internal void (PaneCollection );
    internal void (PaneCollection );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (WorksheetCollection );
    internal WorksheetCollection ();
    internal string ();
    internal void (string );
    internal void ( );
    internal int ( );
    public  (int );
    public  (string );
    internal  ( );
}
internal class  : object {
    internal static Byte[] (WorksheetCollection , object );
    internal static string (Byte[] , Workbook );
    internal static object (WorksheetCollection , Byte[] , int );
    private static bool (Byte[] , int , int , WorksheetCollection , int , int );
    internal static Byte[] (Byte[] , int , int , WorksheetCollection , int , int , int , int );
    internal static Byte[] (Byte[] , int , int , Worksheet );
    internal static void (WorksheetCollection , int , int , int , int , int , int , Byte[] , int , int , CopyOptions );
    internal static void (Worksheet , bool , int , int , int , int , int , int , Byte[] );
    internal static void (Worksheet , bool , int , int , int , int , int , int , int , int , int , int , Byte[] );
    internal static void (Worksheet , bool , int , int , int , int , int , int , Byte[] );
    internal static bool (int , int , Byte[] , int , int , int , int , int , Cells , bool , Hashtable );
    internal static bool (Byte[] , int , int , WorksheetCollection , Hashtable , Hashtable );
    internal static void (Byte[] , int , int , Hashtable , WorksheetCollection );
    internal static void (Byte[] , int , int , Hashtable , WorksheetCollection );
    internal static void (Byte[] , int , int , int , int , WorksheetCollection );
    internal static void (CellArea , int , ShiftType , Worksheet , bool , Byte[] , int , int , int , int , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int , int , int , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int );
    internal static void (CellArea , int , int , Worksheet , bool , Byte[] , int , int );
    internal static Byte[] (Worksheet , bool , int , int , bool , int , bool , int , int , int , Byte[] );
    internal static bool (byte );
    internal static bool (byte );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private RevisionLog ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( ,  , RevisionLog );
    private void ();
    internal virtual int ();
    internal virtual void ( );
    private void ( , RevisionCollection );
    private void ( , RevisionCellChange );
    private void ( , int ,  , string );
    private void ( ,  , Workbook );
    private void ( ,  , string );
    private void ( , RevisionCellMove );
    private void ( ,  );
    private void ( , RevisionInsertDelete );
    private void ( , RevisionFormat );
    private void ( , RevisionInsertSheet );
    private void ( , RevisionRenameSheet );
    private void ( , RevisionMergeConflict );
    private void ( , RevisionAutoFormat );
    private void ( , RevisionQueryTable );
    private void ( , RevisionCellComment );
    private void ( , RevisionCustomView );
    private void ( , RevisionDefinedName );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private Image ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private EncoderParameters ;
    public Image ();
    public void (Image );
    public  ();
    public void ( );
    public EncoderParameters ();
    public void (EncoderParameters );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  ,  ,  );
    private ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    protected int ;
    protected int ;
    protected int ;
    internal ( ,  ,  ,  , Int32[] , bool , int , int , int , bool );
    protected ( ,  ,  ,  , Int32[] , bool , int , int , int , bool , Int32[] );
    protected ( );
    protected ( , int , int , Int32[] );
    protected virtual void ();
    protected void (Int32[] );
    protected virtual  (int , int );
    public virtual  ();
    public virtual  ( );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual  (int , int );
    public virtual bool (int , int );
    public virtual  (int );
    public virtual bool (int );
    public virtual void ();
    public virtual bool ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual bool ();
    public virtual bool ();
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    internal static Int32[] (Int32[] , int , int );
    protected static void (Int32[] , int , int , Int32[] );
}
internal class  :  {
    private ArrayList ;
    private int ;
    internal int (ArrayList );
    private  ( , Int32& );
    internal void (int , ArrayList );
    internal virtual void ( );
}
internal class  : object {
    internal  ;
    internal  ;
    internal void ( );
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual object ();
    public abstract virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public ( ,  ,  , bool );
    public ( , int , int , int , int ,  ,  ,  , bool );
    public ( , int , int , int , int ,  , int );
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual object ();
    public virtual  (int , int );
    public virtual  (int , int , int , int );
    internal virtual  (int , int );
    internal virtual  (int , int ,  );
    internal virtual object (int , int ,  );
    internal virtual void (int , int , StringBuilder ,  );
    protected virtual object ( );
    public virtual  ( , int );
    public virtual  ( );
    public virtual  ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual bool ( );
    public virtual  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public virtual  ( ,  );
}
internal class  : object {
    internal ListColumn ;
    internal string ;
    internal int ;
    internal (ListColumn , string , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual  ();
}
internal class  : object {
    internal  ;
    internal bool ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal object ;
    internal (Hyperlink );
    internal ( );
    internal ( );
    internal (CellArea ,  , object );
    internal (OdsCellField );
    internal ( );
    internal bool (int );
    internal bool ();
    internal bool ( , int );
    internal bool (int , int ,  );
    internal bool ( ,  );
}
internal class  : object {
    private  ;
    public virtual void ( );
    public virtual  ();
}
internal class  : object {
    []
internal  ;
    internal string ;
    internal string ;
    internal Double[] ;
    internal double ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal Style ;
    private string ;
    internal string ;
    internal string ;
    internal Hashtable ;
    internal Hashtable ;
    internal ( );
    internal string ();
    internal void (string );
    internal Hashtable ();
    internal void (Hashtable );
    internal Hashtable ();
    internal void (Hashtable );
    private void (int , string );
    internal void (string , string );
    private bool (Hashtable , Hashtable );
    internal bool ();
}
internal class  :  {
    internal void ();
    internal void (ushort );
    internal int (Style , Boolean& );
    internal int (Style , Boolean& );
    internal int (Style ,  , Boolean& );
    internal  (Style , int );
    private void (Style ,  );
    private void (Style );
    private void (Style );
    private void (Style );
    internal void (Byte[] );
}
internal class  : object {
    []
private QueryTable ;
    []
private ExternalConnection ;
    []
private  ;
    private int ;
    private Byte[] ;
    private int ;
    []
private Workbook ;
    private byte ;
    private int ;
    private static int ;
    internal (Workbook , QueryTable ,  , byte );
    internal (Workbook ,  );
    private static ();
    internal void (ExternalConnection );
    private void (string , int );
    private void (string , int );
    private void (string , int );
    private void ();
    private void ();
    private void ();
    internal void ();
    private void (byte , byte , string );
    private void (byte , byte , int );
    private void ();
    private void ();
    private void ();
    private static int (string );
    private void ();
    private void (ConnectionParameter );
    private void (ConnectionParameter );
    private int ();
    private int ();
    private void (bool );
    private void ();
    private void ();
    private void ();
    private void ( );
    private void (bool );
    private void (string , int );
    private void (string );
    private void (string , int );
    private void (string );
}
internal class  :  {
    internal string ;
    internal (string );
    internal virtual void ( );
    internal virtual void (String& );
}
internal class  :  {
    internal (string );
}
internal class  : object {
    private int ;
    private int ;
    private long ;
    private long ;
    public (int , int );
    public (long , long );
    public int ();
    public int ();
    public long ();
    public long ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    private  ;
    public void (Byte[] );
    internal long ();
}
internal class  : ValueType {
    internal static void ( , Rectangle , bool );
    private static bool ( );
    private static bool ( );
    internal static void ( ,  , bool );
    private static int ( , bool );
    private static void ( ,  , PointF[] , bool );
    private static void ( ,  , PointF[] );
    private static bool ( );
    internal static bool ( );
    private static Rectangle (PointF[] );
}
internal class  : object {
    private string ;
    private HttpStatusCode ;
    private string ;
    public string Code { get; public set; }
    public HttpStatusCode HttpStatusCode { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public void set_Code(string );
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_HttpStatusCode(HttpStatusCode );
    [CompilerGeneratedAttribute]
public HttpStatusCode get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public void set_Description(string );
    [CompilerGeneratedAttribute]
public string get_Description();
}
internal class  : object {
    public Byte[] ;
    public int ;
    public int ;
    public DateTime ;
}
internal class  : object {
    private Byte[] ;
    internal bool ;
    private ImageType ;
    internal static  ( );
    internal Byte[] ();
    internal void (Byte[] );
    internal ImageType ();
    internal void (ImageType );
}
internal class  :  {
    internal void (Worksheet );
}
internal interface  {
    public abstract virtual  ( , int , int );
}
internal class  : object {
    public static bool (string );
    public static string (string );
    public static int (int );
    public static bool (int );
    public static int (int );
}
internal class  : object {
    private Color ;
    private float ;
    private  ;
    public sealed virtual Color ();
    public sealed virtual void (Color );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual float ();
    public sealed virtual void (float );
    internal bool ( );
}
internal class  :  {
    public static  ;
    public static int ;
    public static int ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public (int ,  ,  );
    private ( ,  ,  );
    private static ();
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    internal ArrayList ;
    internal Byte[] ;
    private Area ;
    private Line ;
    private Marker ;
    private  ;
    private bool ;
    private bool ;
    internal bool ;
    []
private object ;
    private bool ;
    internal bool ;
    private Bar3DShapeType ;
    internal ushort ;
    private bool ;
    internal (object );
    internal void (object );
    internal bool ();
    internal void (bool );
    internal void (bool );
    internal ChartType ();
    public Bar3DShapeType ();
    public void (Bar3DShapeType );
    internal void (Bar3DShapeType );
    internal Bar3DShapeType ();
    internal void ( , CopyOptions );
    internal Area ();
    internal Line ();
    internal Line ();
    internal Area ();
    internal  ();
    internal Marker ();
    internal Marker ();
    internal  ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal Chart ();
    private void ();
    private void ();
    private void ();
    internal void ();
    internal object ();
}
internal class  :  {
    public ( );
}
internal class  : object {
    private IList ;
    public sealed virtual void (Byte[] );
    public sealed virtual void (long , Byte[] );
    private void (int );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal abstract class  :  {
    protected char ;
    protected char ;
    private  ;
    private [][] ;
    private Int32[][] ;
    private  ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[][] ;
    private int ;
    private int ;
    private int ;
    internal ( );
    protected abstract virtual Char[] (Char[] , Int32[] , Int32[] );
    internal virtual  ( , double ,  );
    private char (Char[] );
    internal  (Char[] ,  ,  );
    protected void ( , string );
    protected int (Char[] , int , int , int ,  );
    protected void ( );
    public virtual bool ( );
}
internal class  : object {
    []
internal  ;
    internal string ;
    internal bool ;
    internal ArrayList ;
    internal SortedList ;
    internal Hashtable ;
    internal ( );
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual  (int );
    public abstract virtual  (int );
}
internal enum  : Enum {
    public int value__;
    public static  None;
    public static  ASCIIHexDecode;
    public static  ASCII85Decode;
    public static  LZWDecode;
    public static  FlateDecode;
    public static  RunLengthDecode;
    public static  CCITTFaxDecode;
    public static  JBIG2Decode;
    public static  DCTDecode;
    public static  JPXDecode;
    public static  Crypt;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private [] ;
    private  ;
    private ( );
    public ( , [] );
    public ( , [] ,  );
    public static  (object );
    private void (int );
    public BigInteger ();
    public  ();
    public [] ();
    public  ();
    public virtual  ();
}
internal class  : object {
    internal static void (Stream ,  ,  );
    internal static void ( ,  , bool );
    private static void (MemoryStream ,  , string , ArrayList ,  );
}
internal class  : object {
    private RevisionLogCollection ;
    private int ;
    private Byte[] ;
    private  ;
    internal (RevisionLogCollection );
    internal void ( );
    private void ();
    internal static DateTime (Byte[] , int );
    private void ();
}
internal abstract class  : object {
}
internal class  : object {
    private string ;
    private string ;
    private MemoryStream ;
    private  ;
    public (string , string );
    public void (string );
    public string (string );
    public string ( );
    public string ();
    public string ();
    public string ();
    public void (string );
    public MemoryStream ();
    public void (MemoryStream );
    public  ();
}
internal class  : object {
}
internal class  :  {
    private int ;
    private  ;
    private ( );
    public ( );
    public static  ( , bool );
    public virtual int ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    private int ;
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public void (bool ,  );
    public bool ();
    public  ();
}
internal class  :  {
    internal void (PivotItem );
    internal void (short , ushort , ushort , string );
}
internal class  : MemoryStream {
    public bool CanRead { get; }
    public sealed virtual bool get_CanRead();
}
internal class  : object {
    internal  ;
    internal UInt32 ;
    internal  ;
    internal UInt32 ;
    internal List`1<> ;
    internal List`1<> ;
    internal UInt32[] ;
    internal UInt32[] ;
    internal (int , int );
    internal  ( );
}
internal class  : object {
    internal Style ;
    internal float ;
    internal float ;
    internal float ;
    internal string ;
    internal Style ;
    internal bool ;
    internal ArrayList ;
    internal float ;
    internal float ;
    internal float ;
    internal int ;
}
internal class  : object {
    internal static Int16[] ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    internal IList ;
    internal  ;
    internal  ;
    public ( );
    private static ();
    public  ();
    public void ( );
    public void ( );
    public void ( , Byte[] );
    public void (string ,  , Byte[] );
    public void (string ,  ,  );
    public void ( , string );
    public void (string ,  ,  ,  , string );
    public void (string ,  ,  , ICollection , string );
    public void ( );
    protected internal virtual  (string ,  ,  , & );
    protected internal virtual  (string , Byte[] );
}
internal abstract class  :  {
    protected  ;
    private bool ;
    private bool ;
    public ( ,  );
    public virtual bool ();
    public virtual void (bool );
    protected abstract virtual  ( );
    protected abstract virtual bool ( );
    protected abstract virtual void ( );
    protected abstract virtual  ();
    protected abstract virtual bool ();
    protected abstract virtual void ( );
    internal bool ();
    internal bool ();
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual bool ();
    public sealed virtual  ();
    public sealed virtual bool ( );
}
internal class  : object {
}
internal class  : object {
    protected  ;
    public ( );
    public virtual  ( );
}
internal class  :  {
    internal double ;
    internal string ;
    internal (double );
    internal virtual  ();
    internal virtual object ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    private  ;
    public ( );
    public (DateTime );
    public static  ( , bool );
    public static  (object );
    public string ();
    public DateTime ();
    public virtual  ();
    public virtual string ToString();
}
internal abstract class  :  {
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual  ();
}
internal class  :  {
    internal PointF ;
    public virtual GraphicsPath (RectangleF , bool , bool );
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual void (bool ,  );
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual Byte[] (Byte[] , int , int );
}
internal class  : object {
    private Char[] ;
    private bool ;
    internal (Char[] , bool , bool );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual bool ();
    public Char[] ();
    public sealed virtual string ();
    public bool ();
    public sealed virtual bool ( );
    public sealed virtual bool (string );
    public sealed virtual int (string );
    public sealed virtual int ( );
    private int (Char[] , int , int );
}
internal class  :  {
    internal (PrintSizeType );
}
internal class  : object {
    internal static double ;
    private static ();
    internal static int ();
    internal static double (double , CellsUnitType , CellsUnitType );
    internal static double (double , CellsUnitType );
    internal static double (double , CellsUnitType );
    internal static int (double , int );
    internal static int (double , int );
    internal static double (double , int );
    internal static int (double );
    internal static int (int );
    internal static double (int );
    internal static int (double );
    internal static double (double );
    internal static int (double );
    internal static double (double );
    internal static double (double );
    internal static double (int );
    internal static double (double );
    internal static double (string );
    internal static double (string , string , int );
    internal static double (int );
    internal static int (double );
    internal static double (int );
    internal static double (double );
    internal static int (double );
    internal static int (double );
    internal static int (double , double );
    internal static double (double );
    internal static double (double );
    internal static double (double , double );
    internal static double (int );
    internal static int (double );
    internal static int (double );
    internal static double (int );
    internal static int (double );
    internal static int (double );
    internal static double (double );
    internal static double (double );
    internal static int (double );
    internal static double (double );
}
internal abstract class  : object {
    public abstract virtual void ();
    public abstract virtual bool (double , double );
    public abstract virtual bool (double , double );
    public abstract virtual  (double , double );
    public abstract virtual  (double , double , int );
    public abstract virtual  ();
    public abstract virtual  ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( ,  );
    internal virtual int ();
    internal virtual void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( );
    private void ( );
    private void ( ,  );
    [("True")]
private void ( );
    [("True")]
private void (TableStyle ,  );
    [("True")]
private void ( );
    [("True")]
private void ( , int , int );
    [("True")]
private void ( );
    [("True")]
internal static void (Font ,  , string );
    [("True")]
private void ( );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    internal static void ( ,  , string );
    [("True")]
private static void ( ,  , string , bool );
    [("True")]
private void ( ,  , string );
    [("True")]
private void ( ,  );
    private void ( , int );
    private void ( ,  , Style );
    private void ( ,  , bool );
    [("True")]
private void ( ,  , bool );
    private void ( );
    [("True")]
internal static void (Style , Font ,  , string );
    [("True")]
private static void ( , string , string );
    [("True")]
private void (Style ,  ,  );
    internal void ( , Style , string );
    internal void ( , Style );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal GraphicsPath[] ();
    internal virtual void ();
}
internal class  :  {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private  ;
    public ( );
    private static ();
    public static  (object );
    public ArrayList ( );
    public IList ( );
    private void ( , IList );
    public virtual  ();
}
internal class  :  {
    private  ;
    private  ;
    private short ;
    private short ;
    private int ;
    private int ;
    private int ;
    private  ;
    private  ;
    public ( ,  ,  ,  , int , int , bool );
    private ( ,  );
    private ( ,  , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    internal (byte );
}
internal class  : object {
    private  ;
    private int ;
    private  ;
    []
private Worksheet ;
    private  ;
    internal ( , Worksheet );
    private void ();
    internal void ( );
}
internal class  : object {
    internal  ;
    internal Hashtable ;
    internal Hashtable ;
    public ( , Hashtable );
}
internal class  : object {
    private static  ;
    private  ;
    public ( );
    public (string );
    private static ();
    public sealed virtual  ();
    public sealed virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( , Name , int );
    public ( ,  , int );
    public virtual  (int );
    public virtual void ();
    public bool ();
    public  ();
    public virtual  ();
    public virtual object ();
    public virtual  ();
    internal int ();
    public virtual object ( );
    public virtual  ( );
    public virtual  ( );
    public virtual bool ( );
    public virtual  ( , bool );
    public virtual bool ( , int , int , bool );
    public virtual bool ( , bool );
    public virtual void ();
    public virtual bool ();
    public virtual bool ();
    public virtual byte ();
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ( , int );
    public virtual  ();
    public virtual void ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    private  ( ,  );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  ( , int );
    private  ( );
    public virtual  ( , int );
    private  ( , bool );
    public virtual void (StringBuilder ,  );
    public virtual bool ( );
}
internal class  :  {
    internal Byte[] ;
    internal  ;
    internal (string );
    internal (string , Byte[] , object );
    internal  ();
    internal int ();
    internal byte ();
    internal Byte[] ();
    internal virtual bool ();
    internal virtual bool ();
    internal virtual bool ();
    internal virtual void (Cells ,  , int , Cells , CopyOptions );
    internal virtual  ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    public  ();
    public  ();
    public  ();
    public object ();
    public virtual string ToString();
}
internal class  : object {
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected string ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected TextDirectionType ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    public  ();
    public int ();
    public void (int );
    public string ();
    public void (string );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal int ();
    public TextDirectionType ();
    public void (TextDirectionType );
    public  ();
    internal bool ();
    internal bool ();
    public bool ();
    public void (bool );
    public bool ();
    public sealed virtual void Dispose();
    protected virtual void (bool );
    internal void ();
    protected virtual override void Finalize();
}
internal class  : object {
    public static Byte[] (Byte[] );
    public static Byte[] (Byte[] );
}
internal interface  {
    public abstract virtual bool (int );
}
internal class  : object {
    internal  ;
    internal  ;
    []
internal  ;
    internal int ;
    internal int ;
    private Cell ;
    private  ;
    private int ;
    private bool ;
    internal (int );
    internal int ();
    internal void ();
    internal int ( , int ,  );
    internal bool (int , int ,  );
    internal bool ( , int ,  );
    internal void ( );
}
internal class  : object {
    private string ;
    private  ;
    private  ;
    private  ;
    public (string );
    public sealed virtual void ( );
    public sealed virtual  ();
    protected virtual  ();
    internal static  ( );
    internal static  ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<StreamProviderOptions> ;
    internal (string ,  );
    public sealed virtual void InitStream(StreamProviderOptions );
    public sealed virtual void CloseStream(StreamProviderOptions );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal interface  {
    public abstract virtual  ( );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    internal (Byte[] );
    internal (Byte[] , string );
    internal virtual Byte[] ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual Byte[] (Byte[] ,  );
    internal virtual bool (Byte[] , Byte[] ,  );
    internal virtual Byte[] (Byte[] , string ,  );
    internal virtual bool (Byte[] , Byte[]& );
    internal virtual Byte[] (string );
    internal virtual  ();
    private static string ( );
    private static string ( );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private static int ;
    private Byte[] ;
    private Byte[] ;
    private bool ;
    private int ;
    private Byte[] ;
    private (Byte[] , Byte[] , Byte[] , int , bool );
    private static ();
    public static  (Byte[] , Byte[] , Byte[] , int );
    public static  (Byte[] , Byte[] , Byte[] );
    public Byte[] ();
    public Byte[] ();
    public bool ();
    public int ();
    public Byte[] ();
}
internal class  : object {
    internal static string (Exception );
    internal static string (Exception );
    internal static string (CellsException );
    internal static void (Exception , StringBuilder );
    internal static void (CellsException , StringBuilder );
    internal static bool ();
    internal static void (string );
    internal static void (Exception );
    internal static void (string );
    internal static bool ();
    internal static void (string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : object {
    public static Int32[] ;
    private static ();
}
internal class  :  {
    private sbyte ;
    public sbyte ();
    public void (sbyte );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
internal static class  : object {
    public static Type ;
    public static Type ;
    public static Type ;
    public static Type ;
    public static Type ;
    public static Assembly ;
    private static ();
    public static bool (Type );
    public static Type (Type );
    public static Type (Type );
    public static Stack`1<> (Type );
    public static Stack`1<> (string );
    public static Type (Type , Stack`1<> );
    public static int (Type );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal static void (Stream , bool , int , int );
}
internal class  : object {
    public static  ;
    private static ();
    public virtual BigInteger[] (BigInteger , Byte[] );
    public virtual Byte[] (BigInteger , BigInteger , BigInteger );
    protected virtual BigInteger (BigInteger , BigInteger );
    protected virtual BigInteger (BigInteger , Byte[] , int , int );
    protected virtual void (BigInteger , BigInteger , Byte[] , int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public ArrayList ;
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    internal string ;
    []
private  ;
    internal Byte[] ;
    internal DataLabels ;
    private  ;
    private ChartType ;
    private bool ;
    private bool ;
    private Line ;
    private bool ;
    private Line ;
    private bool ;
    private Line ;
    private bool ;
    private DropBars ;
    private DropBars ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal bool ;
    private ChartSplitType ;
    private double ;
    private Int32[] ;
    private int ;
    private BubbleSizeRepresents ;
    private bool ;
    private int ;
    private bool ;
    private bool ;
    private bool ;
    private Line ;
    private ShapePropertyCollection ;
    private ShapePropertyCollection ;
    private ShapePropertyCollection ;
    private ShapePropertyCollection ;
    internal ( );
    internal ( , ChartType , bool );
    internal  ();
    internal void ();
    internal void ();
    internal  ();
    internal void ( );
    internal  ();
    private void ();
    internal void ( , CopyOptions );
    internal Marker ();
    internal Line ();
    internal Area ();
    internal  ();
    internal ChartType ();
    internal void (ChartType );
    internal void (ChartType );
    internal int ();
    internal int ();
    public bool ();
    public void (bool );
    internal void (bool );
    private void ();
    public bool ();
    public void (bool );
    internal void (bool );
    public Line ();
    public bool ();
    public void (bool );
    internal void (bool );
    public Line ();
    public bool ();
    public void (bool );
    internal void (bool );
    public Line ();
    public bool ();
    public void (bool );
    internal void (bool );
    internal DropBars ();
    public DropBars ();
    internal DropBars ();
    internal DropBars ();
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public ChartSplitType ();
    public void (ChartSplitType );
    public double ();
    public void (double );
    internal Int32[] ();
    internal void (Int32[] );
    internal bool ();
    public int ();
    public void (int );
    public BubbleSizeRepresents ();
    public void (BubbleSizeRepresents );
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    internal bool ();
    internal void (bool );
    public bool ();
    public void (bool );
    internal bool ();
    internal void (bool );
    internal Line ();
    internal Line ();
    internal Line ();
    internal Line ();
    internal Line ();
    internal ShapePropertyCollection ();
    internal ShapePropertyCollection ();
    internal ShapePropertyCollection ();
    internal ShapePropertyCollection ();
    internal int ();
}
internal class  :  {
    internal (DBConnection );
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual void (bool ,  );
    public abstract virtual void (byte );
    public abstract virtual void (Byte[] , int , int );
    public abstract virtual int (byte , Byte[] , int );
    public abstract virtual int (Byte[] , int , int , Byte[] , int );
    public abstract virtual int (Byte[] , int );
    public abstract virtual Byte[] ();
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual void ();
}
internal class  : object {
    private bool ;
    private bool ;
    private ChartCalculateOptions ;
    internal void (Chart , bool , bool , ChartCalculateOptions );
    private void (Chart , bool );
    private void (Chart ,  );
    private void (Axis ,  );
    private void (Chart , bool );
    private void (Axis ,  );
    private void (Axis ,  , bool );
    private void (Axis ,  );
    private void (SeriesCollection ,  ,  );
    private  ( , int );
    private Rectangle (Rectangle ,  );
    private void (Chart ,  );
    private void (Chart ,  );
    private TimeUnit ( );
    internal void (Chart );
    private void (Chart );
    private void (Chart ,  );
    private void (ChartFrame ,  , Chart );
    private void (Area ,  );
    private void (Line ,  , Chart );
    private void (Marker ,  );
    private void (Axis ,  );
    private void (Legend ,  );
    private void (SeriesCollection ,  ,  );
    private void (Chart );
    private void (ChartFrame ,  , Chart );
    private void (Area ,  );
    private void (Line ,  , Chart );
    private void (Marker ,  );
    private void (SeriesCollection ,  ,  );
    private  ( , int );
    private  ( , int , int , int );
    private void (Axis ,  );
}
internal class  : object {
    private Encoding ;
    private  ;
    internal DateTime ;
    private DateTime ;
    private DateTime ;
    private DateTime ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    internal string ;
    private string ;
    internal short ;
    internal short ;
    internal short ;
    private short ;
    private  ;
    internal string ;
    private bool ;
    private Byte[] ;
    internal long ;
    internal long ;
    internal long ;
    internal int ;
    private bool ;
    internal int ;
    internal Byte[] ;
    internal bool ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private UInt32 ;
    private static Encoding ;
    private Encoding ;
    internal  ;
    private long ;
    internal Byte[] ;
    internal long ;
    private long ;
    private long ;
    private int ;
    private int ;
    internal bool ;
    private UInt32 ;
    internal  ;
    internal  ;
    internal  ;
    internal Stream ;
    private Stream ;
    private long ;
    private bool ;
    private bool ;
    private bool ;
    private byte ;
    private byte ;
    private bool ;
    private  ;
    private static DateTime ;
    private static DateTime ;
    private static DateTime ;
    private short ;
    private short ;
    private int ;
    private short ;
    private Stream ;
    private int ;
    private static ();
    public DateTime ();
    public DateTime ();
    public void (DateTime );
    public DateTime ();
    public void (DateTime );
    public long ();
    public void (DateTime , DateTime , DateTime );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal string ();
    public string ();
    public string ();
    public short ();
    public string ();
    public void (string );
    public byte ();
    public  ();
    public void ( );
    public  ();
    public void ( );
    public long ();
    public long ();
    public bool ();
    public bool ();
    public Encoding ();
    public void (Encoding );
    public  ();
    public void ( );
    internal static  (string );
    internal void ();
    public bool ();
    public void (bool );
    public virtual string ToString();
    internal Stream ();
    internal bool ();
    private void ();
    internal static int ( );
    internal long ();
    internal bool ();
    internal void ();
    internal static  ( , Hashtable );
    public  ();
    internal  ();
    internal Stream (Stream );
    private string ();
    [("True")]
private void ();
    private void ();
    private static bool ( , Encoding );
    private static bool (int );
    internal static  ( , bool );
    internal static void (Stream );
    private static void ( );
    internal int (Stream , short );
    private int (Byte[] , int );
    private int (Byte[] , int , short , long );
    [("True")]
private long (Int32& , Int32& , Byte[] , long );
    [("True")]
private int (Byte[] , int , short , long );
    [("True")]
private int (Byte[] , int , short , long );
    private DateTime (Int32& , Int32& , Byte[] );
    [("True")]
private int (Byte[] , int , short , long );
    internal void (Stream , Byte[] );
    private Byte[] (bool );
    private string ();
    private Byte[] ();
    private void (int );
    internal void (Stream , int );
    internal void (Stream ,  , Stream ,  );
    internal void (Stream );
    [("True")]
private void ();
    internal void (Stream , long , & , Stream& , & );
    private Stream (Stream , long );
    internal void ();
}
internal interface  {
    public abstract virtual bool (int );
    public abstract virtual bool ();
    public abstract virtual  ();
}
internal class  : object {
    private UInt32 ;
    internal bool ( );
    internal void ( );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ( );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Close();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
}
internal class  :  {
    private float ;
    private float ;
    internal ( );
    public virtual void ( );
    internal bool ( );
    internal virtual  ();
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public (Byte[] );
    public (Byte[] ,  );
    public static  (object );
    public Byte[] ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public string ;
    public string ;
    public bool ;
    public List`1<string> ;
}
internal class  : object {
    internal static void (WorksheetCollection , Hashtable , FontSettingCollection , Byte[] , int );
    internal static Byte[][] (Byte[] , Int32[] );
    internal static Byte[] (Byte[] , Int32[] );
    internal static Byte[] (Byte[] , Int32[] );
    internal static CellArea (Byte[] , int );
    internal static ArrayList (Byte[] , int );
    internal static  (Byte[] , int );
    internal static void (ArrayList , Byte[] , int );
    internal static void ( , Byte[] , int );
    internal static void (CellArea , Byte[] , int );
    [("True")]
internal static string (Byte[] , Int32& );
    [("True")]
internal static DateTime (Byte[] , int );
    [("True")]
internal static int (Byte[] , int , string );
    [("True")]
internal static int (Byte[] , int , string );
    [("True")]
internal static string (Byte[] , int );
    internal static string (Byte[] , int , bool );
    [("True")]
internal static string (Byte[] , int );
}
internal abstract class  : object {
    public static bool (byte );
}
internal class  : object {
    private int ;
    private UInt32 ;
    private  ;
    private Byte[] ;
    private bool ;
    private BinaryReader ;
    internal void (BinaryReader );
    internal void (BinaryReader );
    internal bool ();
    internal bool ();
    internal int ();
    internal  ();
    internal Byte[] ();
}
internal class  : object {
    private double ;
    private double ;
    private double ;
    private double ;
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  , [] );
    public static  (object );
    public static  ( , bool );
    public virtual  ();
    public virtual  ();
    public virtual [] ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private  ;
    private  ;
    private  ;
    internal ( );
    internal  ();
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    public virtual byte ();
    public virtual bool ();
    public virtual  ();
    public virtual bool ( ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual  (Char[] ,  );
    public virtual  ( );
    public virtual void ( );
    public virtual  (Char[] ,  );
    internal  ( , Char[] ,  );
    private bool ( , Char[] ,  ,  , bool );
    private bool ( , Char[] ,  ,  );
    private bool ( , Char[] ,  ,  , bool , bool );
    private void ( , Char[] ,  );
    private void ( );
    public long (Char[] ,  );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
}
internal class  :  {
    internal ( );
    internal ( );
}
internal class  : object {
    public static string (Byte[] );
    public static string (Byte[] , int , int );
    public static Byte[] (Byte[] );
    public static Byte[] (Byte[] , int , int );
    public static int (Byte[] , Stream );
    public static int (Byte[] , int , int , Stream );
    public static Byte[] (Byte[] );
    public static Byte[] (string );
    public static int (string , Stream );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal int ;
}
internal class  : object {
    private  ;
    private  ;
    private IList ;
    private IList ;
    public ( ,  );
    public (int ,  ,  );
    public  (Byte[] );
    public  ( );
    public  ( );
    public  ( );
    public  (Byte[] );
    public  (Byte[] );
    public  (Byte[] );
    public  (Byte[] );
    public  ( );
    public  ( );
    public  ( );
    public  ( );
    private void ( );
    private  ( ,  );
    private Byte[] ( ,  ,  );
}
internal abstract class  :  {
    protected [] ;
    public ( ,  , [] , int , int );
    public abstract virtual bool (int ,  );
    public virtual bool ();
    public virtual void (bool );
    public sealed virtual void ();
    public sealed virtual  ();
    public sealed virtual  (bool );
    public sealed virtual  ();
    public sealed virtual bool ();
}
internal class  : object {
    private  ;
    private bool ;
    internal ( , bool );
    internal void ( );
    internal void ( );
    private void ( , XmlDataBinding );
    private void ( );
}
internal class  :  {
    protected virtual  ( , BigInteger );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    public ( );
    public (string );
    private ( );
    public static  (object );
    public  ();
    public  ();
    public string ();
    public String[] ();
    public virtual  ();
    public virtual string ToString();
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    public (Byte[] );
}
internal class  : object {
    private Color ;
    internal bool ;
    internal string ;
    internal double ;
    internal string ;
    internal string ;
    internal  ;
    internal Color ();
    internal void (Color );
}
internal class  :  {
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32[] ;
    private int ;
    private static UInt32[] ;
    public ( );
    private static ();
    private void ( );
    public virtual string ();
    public virtual int ();
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    public virtual int (Byte[] , int );
    public virtual void ();
    private void ();
    internal virtual void ();
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private double ;
    public virtual void (int , int );
    public virtual  ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
}
internal class  :  {
    internal void ();
    internal void (byte );
    internal void (byte , int , int );
}
internal class  : object {
    internal bool ;
    internal int ;
    internal int ;
    internal string ;
    internal string ;
    internal AutoFilter ;
    internal (Worksheet );
    public AutoFilter ();
    internal void ( , CopyOptions );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private List`1<String[]> ;
    internal (List`1<String[]> );
    internal virtual void ( );
    private void ( , string , string );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    private int ;
    private bool ;
    private bool ;
    private string ;
    private bool ;
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal string ();
    internal void (string );
    internal bool ();
    internal void (bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  );
    public ( ,  ,  );
    public ( ,  ,  , Byte[] );
    private ( );
    public static  ( , bool );
    public static  (object );
    private static int ( );
    public virtual  ();
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    public ( ,  ,  ,  ,  ,  );
    private ( , int ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool (int , int );
    public virtual bool (int );
    private bool ();
    public virtual bool ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    internal void (ushort , byte , ushort , bool );
    internal void (ushort , byte , ushort , byte );
    internal void (ushort , byte , ushort , byte , bool );
}
internal static class  : object {
    private static  ;
    [ThreadStaticAttribute]
private static Stream ;
    internal static a1 a1;
    public static string ();
    public static Stream ();
    internal static void (d );
    public static d c();
}
internal class  : object {
    internal string ;
    internal UInt32 ;
    internal void ( );
}
internal class  : object {
    private Hashtable ;
    private int ;
    public bool ();
    public bool ();
    public float ();
    public float ();
    public void ();
    public bool (float , float );
    public  ();
}
internal class  : object {
    public sealed virtual  ( );
    public sealed virtual  ( );
}
internal abstract class  :  {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
[]
public Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
public WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public int ;
    [DebuggerBrowsableAttribute("0")]
public int ;
    [DebuggerBrowsableAttribute("0")]
public  ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public FileFormatType ;
    [DebuggerBrowsableAttribute("0")]
public char ;
    [DebuggerBrowsableAttribute("0")]
public char ;
    [DebuggerBrowsableAttribute("0")]
public char ;
    [DebuggerBrowsableAttribute("0")]
public char ;
    protected (Workbook ,  , bool , FileFormatType , bool );
    public void ();
    public virtual bool ();
    public virtual bool ();
    public virtual Workbook ();
    public virtual WorksheetCollection ();
}
internal abstract class  :  {
    internal ( , float , float , float , Double[] );
    protected virtual void ( );
    protected virtual void ();
}
internal class  : IOException {
    public (string );
    public (string , Exception );
}
internal class  : object {
    []
internal  ;
    []
internal WorksheetCollection ;
    []
internal LightCellsDataProvider ;
    protected int ;
    private bool ;
    private bool ;
    internal ( , LightCellsDataProvider );
    internal virtual void (Style , int );
    internal  (Worksheet );
    internal bool ();
    internal void (bool );
    internal bool ();
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  :  {
    private IList ;
    private  ;
    public   { get; }
    public ( );
    public  (int );
    public object (int );
    public int ();
    public int ();
    public bool ();
    public IEnumerable ();
}
internal abstract class  :  {
    public abstract virtual  ();
    public abstract virtual RowCollection ();
    public abstract virtual int ();
    public abstract virtual Row ();
    public abstract virtual  ();
    public abstract virtual void ();
    public abstract virtual bool ();
    public abstract virtual void (int , int );
    public abstract virtual void (int );
}
internal class  : object {
    internal  ;
    internal  ;
    internal Font ;
}
internal class  : object {
    private UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private bool ;
    private bool ;
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual void (bool ,  );
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] );
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
}
internal class  : object {
    internal CellArea ;
    internal  ;
    internal (CellArea );
    internal bool (int , int );
}
internal class  :  {
    [("True")]
internal void (Axis );
    private double (double );
    private static double (double );
}
internal class  : object {
    []
internal Worksheet ;
    internal ArrayList ;
    internal (Worksheet );
    private void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( );
}
internal class  :  {
    private BigInteger ;
    public (BigInteger ,  );
    public BigInteger ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("256")]
internal class  : Attribute {
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public  (string , string );
}
internal static class  : object {
    private static bool ;
    private static ();
    public static bool ();
}
internal class  :  {
    internal virtual  ();
}
internal class  :  {
    internal (string );
}
internal abstract class  : object {
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  ,  ,  ,  ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
    public static int ( );
}
[DefaultMemberAttribute("")]
internal class  : object {
    internal Char[] ;
    private int ;
    internal int ;
    public char  { get; }
    public (int , int );
    public int ();
    public void (Char[] , int , int );
    public char (int );
    public void ();
    internal int ();
    public void (int , int );
    public virtual string ToString();
    public string (int , int );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private  ;
    public (bool ,  ,  );
    public sealed virtual object ();
    public sealed virtual  (Byte[] , int , int );
    public sealed virtual  (Byte[] );
}
internal class  : object {
    internal static SortedList (int );
    internal static SortedList (int );
    internal static Color (int , int );
    internal static Color (int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , string );
    protected virtual double (double );
    protected virtual Char[] (Char[] , Int32[] , Int32[] );
}
internal class  : object {
    internal int ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal int ;
    internal  ;
    internal Byte[] ;
    internal bool ;
    internal (string , string , string , string );
    internal int (bool );
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private string ;
    internal ( , string );
    internal string ();
    internal virtual string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static string ;
    public static  ;
    public static string ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( ,  );
    internal virtual void ( );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    internal static void (AutoFilter , Stream );
    private void (PageSetup , string , HorizontalPageBreakCollection , VerticalPageBreakCollection , Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (FormatCondition , Stream );
    private void (FormatCondition , Stream );
    private void (ConditionalFormattingValue , bool , Stream );
    private void (FormatCondition , Stream );
    private void (FormatCondition , Stream );
    private void (FormatCondition , Stream );
    private void (FormatCondition , Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (PaneCollection , bool , Stream );
    private void ( , Stream );
}
internal interface  {
    public abstract virtual  (Byte[] );
}
internal enum  : Enum {
    public int value__;
    public static  Default;
}
internal class  : object {
    private static Regex ;
    private static ();
    internal static bool (char );
    internal static bool (char );
    internal static bool (char );
    internal static bool (char );
}
internal class  :  {
    private string ;
    public (string );
    public (DateTime );
    internal (Byte[] );
    public static  (object );
    public static  ( , bool );
    public string ();
    public string ();
    private string ();
    private static string (int );
    public DateTime ();
    private string (int );
    private DateTime (string , string , bool );
    private bool ();
    private Byte[] ();
    internal virtual void ( );
    protected virtual bool ( );
    protected virtual int ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    []
private  ;
    private int ;
    private bool ;
    internal ArrayList ;
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal ArrayList ();
    internal void (ArrayList );
    internal void (int ,  );
    internal void ( );
    internal void ( );
    internal bool ();
    internal bool ();
    internal void (int );
    internal ArrayList (PivotTable , bool , int );
    private void (ArrayList , PivotFieldCollection , int , int , PivotTableAutoFormatType , Int32[] , int , int , ArrayList );
    internal ArrayList (PivotTable , bool );
    internal void (ArrayList , PivotFieldCollection , int , Boolean[] , Int32[] , ArrayList );
}
internal class  : object {
    internal int ;
    internal int ;
    internal Int64[] ;
    internal long ;
    internal int ;
    internal int ;
    internal int ;
    internal  ;
    private static Byte[] ;
    private static ();
    internal int ( );
    internal int ( );
    internal int ( , int );
    internal int ( , int );
    internal int ( , Byte[] , int );
    internal int ( );
    internal int ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal NumbersLoadOptions ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    internal (Workbook ,  , LoadOptions );
    internal  ();
    internal Byte[] ( );
    public sealed virtual void Dispose();
    private void ();
    internal int ( );
    internal int ( );
    internal void (string ,  );
    internal void ( );
    internal Style ( ,  );
    internal string (int );
    internal  (string );
    internal  ( , bool );
    internal  ( , bool );
    internal  (int , [] ,  , bool );
    internal  (int ,  ,  , bool );
    private  ( );
    internal  (int ,  ,  , bool );
    internal  (int ,  ,  , bool );
}
internal class  : object {
    private static UInt32[] ;
    private static UInt16[] ;
    private static ();
    public Byte[] (Stream );
    internal Byte[] (Byte[] , int , int );
    internal int (Byte[] , int , int , Byte[] , int , int );
    private static Int32[] (Byte[] , int , Byte[] , int , int , int );
    private static void (Byte[] , int , Byte[] , int , int );
    private static void (Byte[] , int , int , int , int );
    private static void (Byte[] , int , Byte[] , int , int );
    private static void (Byte[] , int , int , int );
}
internal class  : object {
    private static  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private IDictionary ;
    private ( );
    public (Byte[] );
    public ( , Byte[] );
    public (IDictionary , Byte[] );
    public ( , Stream );
    public (Stream );
    public ( ,  );
    public (IDictionary ,  );
    public ( );
    private static ();
    public int ();
    public  ();
    public  (string );
    public  (string );
    public  (string );
    public string ();
    public  ();
    public  ();
    public  ();
    public Byte[] ();
    public Byte[] (string );
    public static  ( ,  );
    public static  ( ,  ,  ,  );
}
internal class  :  {
    internal (byte ,  );
    protected (byte ,  );
    internal virtual  (byte );
    internal  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ( , object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int ( );
    public virtual int ( ,  );
}
[("And")]
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal abstract class  : object {
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] , int );
    public static UInt64[] ();
    public static UInt64[] ();
    public static bool (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static bool (UInt64[] );
    public static bool (UInt64[] );
    public static BigInteger (UInt64[] );
}
internal enum  : Enum {
    public UInt32 value__;
}
internal class  :  {
    internal ( , float , float ,  );
    private float (RectangleF );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    public ( );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public static  ( , [] ,  , int ,  );
    public static  ([] ,  ,  );
    public static  ([] ,  );
    private static string (string ,  );
    public static  ( , [] ,  , int , int ,  );
    public static  ( , [] ,  , int , int ,  );
    public static  ( , [] ,  , int , int ,  );
    public static  ( , [] ,  , int , int , int ,  );
    internal static  ( , [] ,  );
    internal static  ( , [] ,  );
    public static  ([] ,  , bool );
    public static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    private static String[] (string , String[] , int , bool , bool );
    private static  ( , String[] , bool , bool ,  );
    private static  ( , String[] , bool , int ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    private static  (int , int , int , bool );
    private static  (double , double , int , bool );
    private static  (string , int );
    private static  (string , int , int , Double[] );
    private static string (double , int ,  );
    private static string (double , int , bool ,  );
    private static int (double );
    private  (int , int , double , double ,  );
    private  (int , bool , double , double ,  );
    private  (int , int , double , double ,  );
    private  (int , bool , double , double ,  );
    private  (int , int , int , int ,  );
    private  (int , bool , int , int ,  );
}
internal class  : object {
    internal static  ( );
    internal static void ( ,  );
    internal static int (string , & );
    private static void ( ,  );
    private static string ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    internal ushort ;
    internal short ;
    internal (ushort , short );
    internal void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF );
    internal virtual void ();
}
internal class  :  {
    internal  ;
    internal  ;
    public ( );
    public ( );
    public static  (object );
    public static  ( , bool );
    public  ();
    public virtual  ();
}
internal class  :  {
    public ( ,  ,  , int , int );
    protected ( , int ,  , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool (int , int );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    private int ;
    private int ;
    private ushort ;
    private ushort ;
    internal void (int , int , ushort , ushort );
    internal virtual void ( );
}
internal class  :  {
    internal virtual void ( ,  );
    internal virtual void ( ,  );
}
internal class  : object {
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private Byte[] ;
    public ( );
    public virtual void ( );
    public virtual  ();
    public virtual int (Byte[] , int , int );
}
internal class  :  {
    private Hashtable ;
    private bool ;
    internal ( ,  );
    protected virtual void ();
    protected virtual Byte[] (bool );
    public virtual bool ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public Byte[]  { get; }
    internal void (Byte[] );
    public Byte[] (int );
    internal void ( );
    internal void (PivotTable );
    internal UInt32 ();
    internal void (UInt32 );
    internal bool ();
    internal void (bool );
    internal void ( );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    public static  (string );
    public static ICollection ();
    public static  ( );
    public static  (string );
    public static string ( );
    public static Byte[] ( , Byte[] );
    public static Byte[] (string , Byte[] );
    public static Byte[] ( );
    public static Byte[] ( , Byte[] );
}
internal class  :  {
    internal int ;
    internal int ;
    internal ( , int );
    internal virtual  ();
    internal void ( , CopyOptions );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    public ( , double , double );
    public  ();
    public void ( );
    public double ();
    public void (double );
    public double ();
    public void (double );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( , Stream );
    public virtual void Close();
}
internal interface  {
    public abstract virtual bool (string );
}
internal class  : object {
    private string ;
    private  ;
    private  ;
    internal (string ,  ,  );
    internal string ();
    internal  ();
    internal void ( );
    internal Byte[] (string , bool );
    internal Byte[] ();
    internal Byte[] (string );
}
internal class  :  {
    protected virtual void ( );
    protected virtual Byte[] ();
    public static void (Byte[] );
    public static void (Byte[] );
    private static void (byte , byte );
}
internal class  : AbstractCalculationEngine {
    [DebuggerBrowsableAttribute("0")]
private HyperlinkCollection[] ;
    public bool ProcessBuiltInFunctions { get; }
    internal (HyperlinkCollection[] );
    public virtual void Calculate(CalculationData );
    public virtual bool get_ProcessBuiltInFunctions();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
public string  { get; public set; }
    public ( );
    public virtual  ();
    public bool ();
    public string (string );
    public string (string , string );
    public bool ();
    public  (string );
    public void (string );
    public virtual void (string , string );
    public virtual string ();
    public virtual void (string );
    public virtual void ( );
    public virtual void ( );
    public virtual string ToString();
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal byte ;
    internal int ;
    internal byte ;
    internal byte ;
    internal int ;
    internal int ;
    internal Byte[] ;
    internal Byte[] ;
    internal int ;
    internal char ;
    internal string ;
    internal byte ;
    internal byte ;
    internal byte ;
    internal bool ( );
    internal void ( , bool );
    internal virtual void ( , CopyOptions );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private BigInteger ;
    private BigInteger ;
    public (BigInteger , BigInteger );
    public BigInteger ();
    public BigInteger ();
}
internal class  :  {
    private PointF ;
    private SizeF ;
    private float ;
    private float ;
    public PointF ();
    public PointF ();
    public [] ();
    private  (float , float );
    internal PointF (float );
    private float (float );
    public PointF ();
    public void (PointF );
    public SizeF ();
    public void (SizeF );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public SizeF ();
    public PointF ();
    public virtual void ( );
    public virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal interface  {
    public abstract virtual  ();
}
internal static class  : object {
    public static  ();
    private static  ();
    private static bool (Exception );
    private static bool ( );
}
internal class  : object {
    internal static Int32[] (Worksheet , int , int , int , bool );
    internal static Double[] (Shape , int , double , double );
    internal static void ( , Double[] );
    internal static int (Shape , int , int , int , int );
    internal static double (Shape , int , double , int , double );
    internal static int (Shape , int , int , int , int );
    internal static double (Shape , int , double , int , double );
    internal static Int32[] (Worksheet , int , int , int );
    internal static Double[] (Shape , int , double , double );
    internal static int (Shape , int , double );
    internal static int (Shape , int , double );
    internal static double (Shape , int , int );
    internal static double (Shape , int , int );
}
internal class  :  {
    internal ( );
}
internal class  : Random {
    [DebuggerBrowsableAttribute("0")]
private static long ;
    [DebuggerBrowsableAttribute("0")]
private static  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private static double ;
    [ObsoleteAttribute("Use GetInstance/SetSeed instead")]
public (Byte[] );
    public ( );
    private static ();
    private static long ();
    private static  ();
    private static  (string , bool );
    public static Byte[] ( , int );
    public static  (string );
    public static  (string , bool );
    public static Byte[] (int );
    public virtual Byte[] (int );
    public virtual void (Byte[] );
    public virtual void (long );
    public virtual int Next();
    public virtual int Next(int );
    public virtual int Next(int , int );
    public virtual void NextBytes(Byte[] );
    public virtual void (Byte[] , int , int );
    public virtual double NextDouble();
    public virtual int ();
    public virtual long ();
}
internal class  :  {
    private bool ;
    private SizeF ;
    private bool ;
    public (SizeF );
    public (float , float );
    public SizeF ();
    public void (SizeF );
    public float ();
    public float ();
    public int ();
    public int ();
    public virtual void ( );
    protected virtual bool ( );
    internal bool ();
    internal void (bool );
    public bool ();
    public void (bool );
    public virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [ObsoleteAttribute("Will be removed")]
public (IEnumerable );
    public (Byte[] );
    public ([] );
    public (Byte[] , int );
    public ([] , int );
    private (Byte[] , [] , int );
    private static ();
    public static  ( );
    private static Byte[] ([] );
    private static [] (IEnumerable );
    public sealed virtual IEnumerator GetEnumerator();
    public IEnumerator ();
    private IList ();
    internal virtual void ( );
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    private Byte[] ;
    private int ;
    public ( , int );
    public ( , int , int );
    public virtual int ();
    public virtual void (int );
    public virtual void ();
    public virtual int ();
    public virtual int (int );
    public virtual int (int , int );
    public virtual int (int , int , int );
    public virtual bool (int );
    public virtual int (int , int );
    public virtual int (int , bool );
    public virtual  ();
    public virtual  (int , int , bool );
    public virtual int (int );
    public virtual int (int );
    public virtual int ();
    public virtual void (int );
    public virtual void (int , int );
    public virtual int (int , int );
    public virtual int (int , int );
    public virtual void (int );
    public virtual bool (int , int );
    public virtual bool (int , int );
    private bool (int , int , bool );
    public virtual object ();
    public virtual void (int , int );
    public virtual int (int ,  );
    private void (int );
    public virtual int (int , [] , int , int );
    private void (int , int );
    public virtual int (int ,  , int , int , int );
    public virtual int (int );
    public virtual int (int );
    public virtual void (int , int );
    public virtual  (int );
    public virtual object (int );
    public virtual void (int ,  );
    public virtual int (int );
    public virtual void (int , int );
    public virtual  (int ,  );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int ,  , int );
    public virtual void (int ,  , int );
    public virtual int ();
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    public virtual byte (int );
    public virtual void (int , byte );
    public virtual  ( , int );
    public virtual void ( , int );
    internal Byte[] ();
    internal static int (int );
    internal static int (Byte[] );
    internal static void (Byte[] , int );
    internal static void (Byte[] ,  );
    internal static void (Byte[] ,  , int );
    internal static void (Byte[] ,  , int );
    internal static int (Byte[] );
    internal static int (Byte[] );
    internal static void (Byte[] , int );
    internal static int (Byte[] );
    internal static void (Byte[] , int );
    internal static byte (Byte[] , int );
    internal static void (Byte[] , int , byte );
}
internal class  : object {
    private  ;
    private  ;
    public ( );
    internal void (ArrayList ,  );
    [("True")]
internal void ( );
    internal void ( );
    private void (Shape );
    [("True")]
private void ( );
    private void ( , string );
    private static void ( ,  , string );
    internal static void ( ,  );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream ,  ,  );
    public virtual  ();
    public virtual  ();
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
}
internal class  : ValueType {
    internal static ArrayList ( ,  ,  , Rectangle , float , double , int );
    private static void ( ,  , RectangleF , Color , float ,  );
    internal static void ( ,  , Rectangle , ArrayList );
    private static void ( ,  ,  , int , int , RectangleF , bool , int );
    private static ArrayList ( ,  ,  , Rectangle , float , double );
    internal static ArrayList ( ,  ,  , Rectangle , int );
    private static void ( ,  , ArrayList& , ArrayList );
    private static ArrayList ( ,  ,  , Rectangle , float );
    internal static ArrayList ( ,  ,  , Rectangle , int );
    private static ArrayList ( ,  ,  , Rectangle , float );
    internal static void ( ,  , float , double , int );
    private static void ( ,  , float , double );
    internal static void ( ,  , double , int );
    private static void ( ,  , float , double );
    internal static void ( ,  , double , int );
    private static void ( ,  , float , double );
    private static void (double , Object[] , ArrayList ,  );
    private static PointF ( , float , float , float , float , float );
    private static PointF ( , float , float , float , float , float );
    private static void ( ,  , ArrayList );
    private static void ( ,  ,  , float , float , float , float , float , double );
    private static void ( ,  ,  , float , float , float , float , float , float , float );
    private static void ( ,  ,  , float , float , float , float , float , float , float );
    private static void (Hashtable , PointF& , PointF& , Int32& , Int32& );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : object {
    internal object ;
    internal bool ;
    internal void ( );
}
internal class  : object {
    internal string ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
}
internal class  :  {
    protected  ;
    protected Int32[] ;
    protected Byte[] ;
    protected Byte[] ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    public (int , IList , Int32[] , Byte[] , Byte[] );
    public virtual void ( );
    public virtual void ();
    public virtual void ( );
    public virtual bool ();
    public virtual Byte[] ();
    public virtual void (Stream );
    public virtual void ( );
    public virtual void ( );
    public virtual void (Stream );
    public virtual void ( );
    public virtual void (Stream );
    public virtual Byte[] ();
}
internal enum  : Enum {
    public int value__;
    public static  PortraitOrientation;
    public static  LandscapeOrientation;
    public static  ReversePortrait;
    public static  ReverseLandscape;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public ( ,  ,  );
    private void ();
    internal  ();
    internal  ();
    internal void ( );
    internal  ();
    public virtual  ();
    internal  ();
    public virtual  ();
    internal  ();
    internal  ();
    internal virtual string ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    public virtual int ();
    public virtual void (int );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal virtual int ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( );
}
internal abstract class  : object {
}
internal class  : object {
    private double ;
    private double ;
    private double ;
    private double ;
    public (double , double , double , double );
    public RectangleF (RectangleF );
    public Rectangle (Rectangle );
    public RectangleF (RectangleF );
    public virtual int GetHashCode();
    public virtual bool Equals(object );
    public bool ();
    public bool ();
    public bool ();
    public static bool ( );
    public static int (Byte[] ,  );
    public static int (Byte[] );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  );
    private ( );
    public static  (object );
    public virtual  ();
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  : object {
    internal Int32[] ;
    internal List`1<> ;
    internal  ;
    internal bool ;
    internal int  { get; internal set; }
    internal (Int32[] , bool , List`1<> );
    internal  ();
    internal int ();
    internal  ();
    internal bool ();
    internal bool (PivotFieldCollection );
    internal bool (PivotFieldCollection );
    public ConsolidationFunction ();
    private PivotFieldSubtotalType ( );
    internal string (Workbook );
    internal int ();
    internal int ();
    internal int (int );
    internal void (int , int );
    internal bool ();
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal int ();
    internal bool ();
    internal  (PivotFieldCollection , bool );
    internal bool ( , int );
}
internal class  : object {
    private  ;
    private  ;
    public ( );
    public (Byte[] );
    public (Stream );
    private static  ( );
    public int ();
    public string ();
    public  ();
    public  ();
    public void ( );
    public Byte[] ();
}
internal class  : object {
    internal static ushort ;
    internal Byte[] ;
    private static ();
    internal int ();
}
internal class  : object {
    internal string ;
    internal  ;
    internal  ;
    internal (string ,  );
    internal (string ,  ,  );
    internal static  (string );
    internal static string ( );
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , int );
    private static Byte[] (int );
    public int ();
}
internal class  : Exception {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    internal (int ,  , string );
}
internal class  : object {
    private  ;
    private  ;
    private PivotTable ;
    private List`1<PivotAreaFilter> ;
    private int ;
    internal ( ,  , string );
    internal void ( );
    private void ();
    internal static void (PivotTable , List`1<PivotAreaFilter> );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , PivotFieldCollection );
    [("True")]
private void ( , Int32[] , int );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , PivotField );
    [("True")]
private void ( , PivotField );
    [("True")]
private void ( , PivotField );
    private static PivotAreaType (string );
    private static void (PivotArea , string );
    [("True")]
private PivotArea ( );
    [("True")]
private void ( , PivotArea );
    private static void (PivotTable , PivotAreaFilter , PivotField );
    [("True")]
private void ( , PivotArea );
    [("True")]
private void ( , PivotField );
    [("True")]
private void ( , PivotField );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , PivotFormatConditionCollection );
    private void ( , PivotFormatCondition );
    private void ( );
}
internal abstract class  : object {
    public static string ;
    private static ();
    public static BigInteger[] ( , BigInteger );
    public static  ( ,  );
    private static BigInteger (BigInteger , BigInteger , int );
}
internal class  : object {
    private static Char[] ;
    private static ();
    public static bool (string );
    public static bool (string );
    public static bool (string );
    public static bool (string );
    private static bool (char );
    public static string (string , string );
    public static bool (string );
    public static string (string );
    public static string (string );
    public static string (string );
    private static bool (char );
    private static bool (string );
    private static bool (string );
    private static char (string );
    private static string (char );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private GraphicsPath ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static GraphicsPath[] ( , RectangleF );
    internal virtual void ();
}
internal class  :  {
    internal IDictionary ;
    internal  ;
    private ( );
    public ([] );
    [ObsoleteAttribute]
public (ArrayList );
    public (IEnumerable );
    public static  ( , bool );
    public static  (object );
    public static  ( );
    public bool ( );
    public ArrayList ();
    public IList ();
    public int ();
    public virtual  ();
}
internal class  : object {
    internal string ;
    internal static  ( ,  , int );
    private void ( , int );
}
internal class  : object {
    protected internal  ;
    protected internal int ;
    private bool ;
    private int ;
    internal (int );
    public int ();
    public void ( );
    protected virtual void ( );
    public Byte[] ();
    protected virtual Byte[] ();
}
internal class  : object {
    private static double ;
    private static double ;
    private static Double[] ;
    private static Double[] ;
    private static Double[] ;
    private static Double[] ;
    private static Double[] ;
    private static Double[] ;
    private static int ;
    private static Double[] ;
    private static ();
    public static double (double , double );
    public static long (long , UInt32 );
    private static double (Double[] , int , Double[] , int , double );
    private static double (double );
    private static double (double );
    private static double (double );
    private static bool (double );
    private static double (double );
    private static double (double );
    public static int (int );
    public static int (int );
    public static int (int );
    public static int (int );
    public static long (long , long );
    public static long (long , long , Int64& , Int64& );
    public static long (long , long );
    public static double (double );
    public static double (int );
    public static double (int );
    public static double (int , int );
    public static double (int , int );
    public static double (double );
    public static double (double );
    public static double (int );
}
internal class  :  {
    internal void (ushort );
    internal void (byte );
    internal void (ushort );
    internal void (byte );
}
internal class  :  {
}
internal abstract class  : object {
    private object ;
    private string ;
    internal abstract virtual  ();
    internal virtual void ( );
    public abstract virtual CellValueType ();
    public abstract virtual int ();
    public object ();
    internal virtual void ();
    internal void (object );
    internal void (string );
    public string ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private PageSetup ;
    internal ( );
    internal virtual void ( );
    private void ( );
    private static void ( ,  );
    internal static void ( , PageSetup , string );
    internal static void ( , PageSetup , string , string );
    internal static void ( , PageSetup , string );
    private static string (string );
    internal static void ( , string , string );
    private static void ( , string , string , string );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
}
internal class  :  {
    private Byte[] ;
    private int ;
    private int ;
    internal ( , Byte[] , int , int );
    public virtual void ( );
    internal virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    private static ();
}
internal class  : object {
    internal int ;
    internal Int32[] ;
    internal UInt32[] ;
    internal Int64[] ;
    internal int ();
    internal void (int );
    internal void (UInt32 );
    internal void (long );
    internal void ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    private ( );
    private static  ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public sealed virtual bool (object );
    public sealed virtual object Clone();
}
internal class  : object {
}
internal class  :  {
    internal ColorScale ;
    public ( , double , ColorScale );
    internal virtual FormatCondition ();
    internal Color ();
    internal static int (int );
    internal Color ();
    private  (RectangleF , Double[] , TextAlignmentType );
    private  (RectangleF , Double[] , TextAlignmentType );
    public virtual  (RectangleF , Double[] , TextAlignmentType , TextAlignmentType );
    public virtual ArrayList (RectangleF );
    public virtual bool ();
}
internal class  :  {
    private  ;
    private  ;
    internal ( ,  ,  ,  );
    internal static void (IList ,  ,  );
    private  ( ,  );
    private  ( ,  );
    private  ( );
    private  (string ,  ,  );
    private  (string ,  );
    internal  ( );
    public virtual  ( );
}
internal class  : object {
    private StringBuilder ;
    []
private WorksheetCollection ;
    private int ;
    private int ;
    internal int ;
    internal (WorksheetCollection );
    private void (Byte[] , int );
    internal string (Cell );
    internal string (int , Byte[] , int , int , bool );
    internal string (int , int , Byte[] , int , int , bool );
    private string (Byte[] , Int32& , int , int , bool );
    private void (Byte[] , ArrayList );
    private void (Byte[] , Int32& , ArrayList );
    private void (byte , StringBuilder );
    private string (Byte[] , int );
    private string (Byte[] , int , int , int , bool );
    private string (Byte[] , int , int , int , int );
    private string (Byte[] , int , int , int );
    private string (Byte[] , int , int , int );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
}
internal class  : object {
    protected ArrayList ;
    []
protected  ;
    []
protected  ;
    protected SizeF ;
    protected RectangleF ;
    internal Double[] ;
    internal float ;
    internal TextAlignmentType ;
    internal TextAlignmentType ;
    internal  ;
    internal  ;
    public ( ,  ,  , PageSetup , TextAlignmentType , TextAlignmentType , Workbook , double , double ,  );
    public void ( );
    public  ();
    private SizeF ();
    public void ( , bool );
    public void (MemoryStream , RectangleF , SizeF );
    public void ();
    private void ();
    private bool ();
    private static bool (Font , Font );
    internal void ();
}
internal class  : object {
    internal  ;
    public ( );
    public ( );
    public ( );
    public  ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (object );
    public  (int );
    public int ( );
    public  ( );
    public void ( );
}
internal abstract class  :  {
    public Byte[] ();
    public abstract virtual void ( );
}
internal abstract class  : object {
    protected int ;
    protected int ;
    []
protected  ;
    protected int ;
    protected int ;
    internal ( , int , int , int , int );
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual void (int );
    public abstract virtual void ();
    protected abstract virtual void (int );
    public virtual void (int , int );
}
internal class  : object {
    private string ;
    private string ;
    private string ;
    private int ;
    private  ;
    internal (string , string );
    internal (string , string , string , int );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal int ();
    internal void (int );
    internal  ();
    internal void ( );
}
internal class  : object {
    private static Byte[] ;
    private Int32[] ;
    private bool ;
    private static ();
    private Int32[] (Byte[] , int );
    public virtual void (bool ,  );
    public virtual void ();
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    private int (int , int );
    private void (Byte[] , int , Byte[] , int );
    private void (Byte[] , int , Byte[] , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<AutoFilter> ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private CellArea ;
    internal ( , Worksheet , HtmlSaveOptions );
    private void ();
    private ArrayList (CellArea );
    private CellArea (CellArea );
    private bool (CellArea );
    private void (HtmlSaveOptions );
    private void (Range );
    private void (Range );
    internal bool ();
    internal CellArea ();
    private bool (HtmlSaveOptions );
    private void ();
    private bool (PivotTable );
    private void (HtmlSaveOptions );
    private void (Worksheet );
    internal Worksheet ();
    internal int ();
    internal int ();
    private void ( , int , HtmlSaveOptions );
    private bool (Shape );
    private void ( , int );
    private void (string );
    private void (string );
    private string (Shape , string );
    private string (Sparkline , string , int , int );
    private int ();
    private bool (Row );
    private int ();
    private bool (CellArea );
    internal bool (int , int , Style );
    private  (Column );
    private  (int );
    private  (int );
    private void ();
    internal long ();
    internal void (long );
    internal ArrayList ();
    private static void (Hyperlink , ArrayList );
    private void ();
    private void ();
    private void ();
    private void ( , IComparer );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    internal  (Row , int , int );
    internal int (int , int );
    internal int (int , int );
    internal int (int );
    public sealed virtual void Dispose();
}
internal class  :  {
    public (int ,  );
    public (int , int ,  );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<Style> {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
public Style  { get; public set; }
    internal (WorksheetCollection );
    public sealed virtual int ();
    public sealed virtual bool ();
    public sealed virtual Style (int );
    public sealed virtual Style (string );
    public sealed virtual int (string );
    public sealed virtual int (int );
    public sealed virtual void (int , Style );
    public sealed virtual int (Style );
    public sealed virtual int (Style , CopyOptions );
    public Style (int );
    public void (int , Style );
    internal int (Style , int , CopyOptions );
    internal int (Style );
    internal int (Style );
    internal int (int , string , int );
    internal int (Style );
    internal int (Style );
    internal int (Style );
    internal int (Style );
    public sealed virtual int (Style , bool , CopyOptions );
    internal int (Style );
    internal void ( );
    internal void ();
    internal void ();
    protected virtual void OnClearComplete();
    private int (Style , int );
    internal  ();
    private bool ( );
    internal int (int ,  );
    private int (int ,  );
    internal Int32[] ();
    internal static byte (Style );
    internal Byte[] ();
}
internal class  : object {
    private int ;
    private int ;
    []
private Workbook ;
    []
private  ;
    private SaveFormat ;
    []
private  ;
    private bool ;
    private bool ;
    private int ;
    private Byte[] ;
    private bool ;
    private Int32[] ;
    private int ;
    private bool ;
    private Int32[] ;
    private Int32[] ;
    private  ;
    []
private Cells ;
    private bool ;
    private bool ;
    private bool ;
    private  ;
    private  ;
    private int ;
    private int ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private Hashtable ;
    internal (Workbook , SaveOptions );
    public bool ();
    public sealed virtual bool ( , int );
    internal  ();
    private void (Column );
    private void ();
    private void ();
    private void ();
    private void (int );
    private void ();
    private void (int );
    private int (int );
}
internal class  :  {
    internal (DataBar , bool );
}
internal class  : object {
    private Byte[] ;
    public (Byte[] );
    public (Byte[] , int , int );
    public Byte[] ();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ( );
    internal virtual void ( );
}
internal class  :  {
    internal ( , object ,  );
    internal  ();
}
[]
internal class  : object {
}
internal class  :  {
    private byte ;
    private  ;
    private string ;
    private [] ;
    private [] ;
    private  ;
    public byte ();
    public void (byte );
    public bool ();
    public bool ();
    public  ();
    public void ( );
    public string ();
    public void (string );
    public [] ();
    public void ([] );
    public [] ();
    public void ([] );
    public  ();
    public void ( );
    public virtual byte ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (WorksheetCollection );
}
internal class  : object {
    private static long ;
    private static long ;
    private static int ;
    private static int ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private long ;
    private bool ;
    private static Byte[] ;
    public ( , int , int ,  , Byte[] , Byte[] );
    private static ();
    private void (Byte[] , Byte[] , Byte[] );
    private void (Byte[] , Byte[] , Byte[] );
    private void (Byte[] );
    private void (Byte[] , Byte[] , Byte[] , int );
    private void (Byte[] );
    private Byte[] ();
    private Byte[] (Byte[] , int );
    private void (Byte[] , Byte[] , Byte[] , Byte[] );
    private void (Byte[] , int , int );
    public sealed virtual int ();
    public sealed virtual int (Byte[] , Byte[] , bool );
    public sealed virtual void (Byte[] );
    private bool ( );
    private int ( , int );
    private Byte[] (Byte[] );
    private void (Byte[] , int , Byte[] , int );
}
internal class  : Brush {
    [DebuggerBrowsableAttribute("0")]
private PointF ;
    [DebuggerBrowsableAttribute("0")]
private PointF ;
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
private LinearGradientBrush ;
    public (PointF , PointF , Color , Color , float );
    public sealed virtual Brush ();
    private PointF (PointF );
    public Color ();
    public Color ();
    public PointF ();
    public PointF ();
    public virtual object Clone();
    protected virtual void Dispose(bool );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal abstract class  :  {
    public abstract virtual string ();
    public virtual string ToString();
    protected virtual int ();
}
internal class  : object {
    private double ;
    private double ;
    private double ;
    internal (double );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual int (int );
    public sealed virtual int (int );
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int );
    public sealed virtual int (int );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private List`1<GroupShape> ;
    private ArrayList ;
    private string ;
    internal ( );
    internal void ( , string , int , int ,  );
    private void (Shape , string , Hashtable );
    internal void ( , string , int , int ,  , Hashtable );
    internal void ( ,  );
    internal  ();
    internal  ();
    private void (Hashtable ,  );
    private  ( );
    internal void (Shape , Hashtable ,  );
    private static void (Shape ,  );
    [("True")]
private void ();
    [("True")]
internal void (ArrayList );
    [("True")]
internal void (ArrayList , Font );
    [("True")]
private void (StringBuilder ,  );
    internal static void (Shape ,  ,  );
    private static void (Shape ,  ,  );
    private Byte[] ( );
    internal static Byte[] ( , string , bool );
    internal static void (ArrayList ,  );
    internal void ( );
}
internal interface  {
    public abstract virtual object ();
    public abstract virtual  (Byte[] , int , int );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual Stream (Stream );
    public abstract virtual Stream (Stream );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private string ;
    public (string );
    public (DateTime );
    internal (Byte[] );
    public static  (object );
    public static  ( , bool );
    public DateTime ();
    public DateTime ();
    private DateTime (string , string );
    public string ();
    public string ();
    public string ();
    private Byte[] ();
    internal virtual void ( );
    protected virtual bool ( );
    protected virtual int ();
    public virtual string ToString();
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    public  ;
    public  ;
    public  ;
    public  ;
}
internal class  :  {
    internal (Protection );
    internal static int (Protection , Byte[] , int );
}
internal abstract class  : object {
    public static bool (int );
}
internal enum  : Enum {
    public int value__;
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected TextDirectionType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal  ();
    internal  ();
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    public  ();
    public void ( );
    public TextDirectionType ();
    public void (TextDirectionType );
    internal bool ();
    internal abstract virtual int ();
    internal abstract virtual int ();
    internal void ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    private ( );
    public static  (object );
    public static  ( , bool );
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
    public static  Double;
    public static  String;
    public static  Boolean;
    public static  Error;
    public static  Null;
    public static  Array;
    public static  Reference;
    public static  Operator;
    public static  Name;
    public static  Function;
    public static  Binary;
    public static  Cell;
}
internal class  : object {
    private PivotTable ;
    private List`1<> ;
    private List`1<> ;
    private WorksheetCollection ;
    private Cells ;
    private int ;
    private int ;
    private int ;
    internal PivotFieldType ;
    private string ;
    internal (PivotTable );
    internal void (Chart , string );
    private ArrayList (String& );
    private string (bool , string , int , int , int , int );
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal class  : object {
    private UInt32[] ;
    private UInt32 ;
    internal UInt32 ();
    internal void ();
    internal void (Byte[] );
}
internal class  : Revision {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public RevisionType Type { get; }
    internal (RevisionCollection );
    internal (RevisionCollection , string );
    public virtual RevisionType get_Type();
}
internal class  :  {
    private  ;
    private Byte[] ;
    private int ;
    private  ;
    private  ;
    private Byte[] ;
    internal ( );
    public ( ,  ,  , Byte[] , Byte[] );
    public ( ,  , int ,  , Byte[] , Byte[] );
    public  ();
    public int ();
    public Byte[] ();
    public  ();
    public  ();
    public Byte[] ();
    public Byte[] ();
    public virtual void ( );
}
internal abstract class  : object {
    protected  ;
    protected [] ;
    protected int ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected double ;
    protected  ;
    protected  ;
    protected double ;
    protected ([] ,  );
    public abstract virtual  ();
    protected virtual void ();
    protected void ();
    private void ();
    protected bool ();
    protected bool ();
    protected bool ();
}
internal class  : object {
    private  ;
    private Hashtable ;
    internal ( , Hashtable );
    internal void ( );
    [("True")]
private void ( );
    [("True")]
private ArrayList ( ,  );
    [("True")]
private void ( );
    [("True")]
private void ( ,  );
    [("True")]
private  ( ,  , bool );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    [("True")]
private ArrayList ( );
    private void ( ,  );
    private void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    internal void ( , int , string );
    internal string ( );
    internal string ( );
    internal String[] ( );
    internal [] ();
    private Hashtable ( );
    private static object (Hashtable );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    public (BigInteger );
    public BigInteger ();
    public virtual string ToString();
}
internal class  :  {
    private int ;
    private int ;
    public int ();
    public void (int );
    public int ();
    public void (int );
    public virtual byte ();
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal static void (List`1<> );
    internal static  ( );
}
internal class  :  {
    private  ;
    public ( );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int (int );
    public virtual int (int );
    public virtual int (byte , Byte[] , int );
    public virtual Byte[] (byte );
    public virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual Byte[] ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
}
internal class  : object {
    protected int ;
    protected short ;
    private (int , int );
    internal static int (int , bool , bool );
    internal static  (CellArea );
    internal static  ( , CellArea );
    internal static  (int , CellArea );
    internal static  (int , int );
    internal static  ( , int , int );
    internal static  (int , int , int );
    internal static  (int , int , int , int );
    internal static  ( , int , int , int , int );
    internal static  (int , int , int , int , int );
    public virtual  (int , int );
    public virtual  (int , int , int , int );
    public virtual  ();
    public virtual  (int );
    public virtual  ( );
    public virtual  (int , int );
    public virtual  (int , int , int );
    public virtual  (int , int , int , int );
    public virtual  (int , int , int , int , int );
    public virtual  ();
    public virtual  (int );
    public virtual  (int );
    public virtual  (int , int );
    public virtual bool ();
    public virtual bool ();
    public virtual  ( );
    public virtual  (WorksheetCollection );
    public virtual  ( );
    internal virtual  ();
    internal virtual int ();
    internal  ( );
    public int ();
    public int ();
    public int ();
    public bool ();
    public bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    internal virtual bool (int , int );
    internal virtual bool (int );
    internal virtual bool (int );
    internal virtual CellArea ();
    internal virtual Range ( );
    internal virtual bool (CellArea );
    internal virtual bool ( );
    internal virtual bool (CellArea );
    internal virtual bool ( );
    internal virtual bool ( ,  );
    public virtual void (StringBuilder );
    public virtual int GetHashCode();
    public virtual bool Equals(object );
    public virtual string ToString();
    public virtual void (StringBuilder );
    public virtual void (StringBuilder ,  );
    internal static void ( , StringBuilder );
}
internal class  :  {
    [("True")]
internal void (Font , bool );
}
internal class  :  {
}
internal interface  {
    public abstract virtual Color (int );
}
internal class  : object {
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  : object {
    private SortedList ;
    private SortedList ;
    private SortedList ;
    private SortedList ;
    private SortedList ;
    [("True")]
private SortedList ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    private void ( ,  );
    internal void ( );
    private void ( ,  );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual void ();
    public GraphicsPath (float , float , float , float , int );
    internal static PointF[] (RectangleF , Geometry );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public static double (double );
    public static double (double , double , double );
    public static double (double , double , double , bool );
    public static double (double );
    public static double (double , bool );
    public static double (double , double , double );
    public static double (double , double , double );
    public static double (double , double , bool );
    public static double (double , double , double );
    public static double (double , double , double );
    public static double (double , double , double , double );
    public static double (double , double , double , double , short );
    public static double (double , double , double , double );
    public static double (double , double , double );
    public static double (double , ArrayList , ArrayList );
    public static double (double , Double[] , Double[] );
    private static double (double );
    private static double (double );
    private static double (double );
    private static bool (double , double );
    private static double (Double[] , int , double );
    private static double (Double& , Boolean& );
    private static double (double );
    private static double (double );
    private static double (double , double , double );
    private static double (double , double , double );
    private static double (double , double , double , double );
    private static double (double , double , double , double , double );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal void ( );
}
internal class  : object {
    private string ;
    private string ;
    private string ;
    private string ;
    internal (string );
    private string (Stream );
    internal  (Stream );
}
internal class  : object {
    []
private  ;
    private UInt32 ;
    internal ( );
    internal Style ( ,  );
    private void (Style ,  , bool );
    private void (Style ,  , bool );
    private void (Style ,  , bool );
    private void (Style ,  , bool );
    private void (Style ,  , bool );
    private void (Style ,  , bool );
    internal void (Style ,  , bool );
    private void (Style ,  , bool );
    private void (Style ,  , bool );
    internal void (Style ,  , bool );
    internal void (Style ,  , bool );
    internal void ( , Style , bool );
    internal static Color ( );
    internal static Color (double , double , double , double );
    internal static Color (double , double , double , double );
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private Hashtable ;
    private ArrayList ;
    private bool ;
    private UInt32 ;
    internal ( );
    public sealed virtual  ();
    internal bool ();
    public sealed virtual  (int );
    public sealed virtual string (int );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual void ( );
    public sealed virtual void ( );
    public sealed virtual  (string );
    public sealed virtual int ();
    public sealed virtual UInt32 ();
    public sealed virtual int ();
    public sealed virtual bool ();
    public sealed virtual void ( );
    public sealed virtual void (int );
}
internal class  : object {
    private IDictionary ;
    public ( );
    protected virtual Hashtable (IDictionary );
    private void (IDictionary , IDictionary );
    public virtual  (IDictionary );
}
internal class  : object {
    []
private WorksheetCollection ;
    internal bool ;
    internal (WorksheetCollection );
    internal  (Cell , Byte[] , int );
    private  (Byte[] , Int32& , ArrayList , Cell );
    private  (string , int , ArrayList , Cell );
    private  (string , int , ArrayList , Cell );
    private  (Byte[] , int , ArrayList , Cell );
    private  (Byte[] , int , ArrayList , Cell );
    private void ( , ArrayList );
    private void ( , ArrayList );
    private void ( , Byte[] , int , Int32& );
}
internal class  :  {
    private  ;
    internal (Workbook ,  , ImageOrPrintOptions );
    public virtual void (SheetSet );
    protected virtual void (CellArea , bool , int );
    internal  ();
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal class  : object {
    public static Hashtable ;
    public static Hashtable ;
    public static Hashtable ;
    private static ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    internal ( , float , float ,  );
    internal virtual void ();
    internal GraphicsPath (float , float , float , float , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    private (Stream );
    internal static  (Stream );
    public virtual int ReadByte();
    public virtual int Read(Byte[] , int , int );
    public Byte[] ();
    public void (Byte[] , int , int );
    public void (Byte[] );
    public  ();
    public  ();
    public virtual void Close();
}
internal abstract class  : object {
    []
protected Row ;
    internal (Row );
    public abstract virtual void ();
    public abstract virtual Cell (int );
    public abstract virtual Cell (int );
    public abstract virtual Cell (int , bool , bool );
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual void (Cell );
    public int (int );
    public bool (Cell , int , bool , bool );
    public Cell (int , int , bool , bool );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ArrayList ;
    internal ArrayList ;
}
internal class  : object {
    private UInt32[] ;
    private UInt32[] ;
    private UInt32 ;
    private Byte[] ;
    private Byte[] ;
    private bool ;
    private Byte[] ;
    private int ;
    private UInt32 ();
    private void ();
    public virtual string ();
    public virtual void (bool ,  );
    private byte ();
    public virtual void (Byte[] , int , int , Byte[] , int );
    public virtual void ();
    public virtual byte (byte );
    private static UInt32 (UInt32 , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private HtmlSaveOptions ;
    internal (Workbook , SaveOptions );
    public sealed virtual void (Stream );
    private void (Stream );
    private void (Stream );
    private void ( , String[] , double , Worksheet );
    private string (string , Worksheet );
    private void ( , int );
    internal static void ( );
    public sealed virtual void Dispose();
    public sealed virtual void ();
}
internal class  :  {
    internal (bool , bool , bool );
}
internal class  : object {
    internal string ;
    internal int ;
    internal int ;
    internal String[] ;
    internal Worksheet ;
    internal (string , int , String[] , Worksheet );
}
internal class  : object {
    public sealed virtual int Compare(Comment , Comment );
}
internal class  :  {
    internal (CellArea );
}
internal class  :  {
    public ( , int , Byte[] , Byte[] );
}
internal class  :  {
    internal string ;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal RectangleF ;
    internal ( , object ,  );
    internal  ();
    protected virtual  ();
}
internal class  : object {
    private Guid ;
    private  ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal (Guid );
    internal (Guid , BinaryReader );
    private static ();
    internal Byte[] ();
    internal  ();
    internal Guid ();
    private static void (BinaryReader , Hashtable , int );
    private static void (BinaryWriter ,  );
    internal static void (Stream );
    private static object (int , BinaryReader , int );
    private static object (BinaryReader , int , int );
    private static object (BinaryReader , int );
    private static void (BinaryWriter , object );
    private static void (BinaryWriter , object , bool );
    private static string (BinaryReader , int );
    private static string (BinaryReader );
    private static void (BinaryWriter , string );
}
internal static class  : object {
    public static [] ;
    private static ();
}
internal class  : object {
    internal PresetCameraType ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal byte ;
    internal void ( );
    internal bool ( );
    internal PresetCameraType ();
    internal void (PresetCameraType );
    internal void (PresetCameraType );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal bool (int );
    internal void (int );
    internal void ();
}
internal class  :  {
    internal void (int , bool );
}
internal interface  {
    public abstract virtual Byte[] (Byte[] );
}
internal class  : object {
    []
private  ;
    private RectangleF ;
    private  ;
    private  ;
    private Color ;
    private Color ;
    private  ;
    private int ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private Matrix ;
    private Matrix ;
    private  ;
    private  ;
    private  ;
    private  ;
    private Brush ;
    private  ;
    private SizeF ;
    private bool ;
    private float ;
    private float ;
    private UInt32[] ;
    internal ( );
    [("True")]
internal void (UInt32 );
    internal void (PointF );
    internal void (SizeF );
    internal void (SizeF );
    internal  ();
    private float (SizeF );
    private float ( );
    internal Matrix (PointF& , SizeF ,  );
    public void ();
    private void ();
    internal  ();
    internal Brush ();
    internal  ();
    internal RectangleF ();
    internal Color ();
    internal void (Color );
    internal  ();
    internal void ( );
    internal Color ();
    internal void (Color );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal int ();
    internal void (int );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal int ();
    internal void (int );
    internal  ();
    internal void ( );
    internal int ();
    internal void (int );
    internal  ();
    internal void ( );
    internal Matrix ();
    internal void ();
    private void ();
    internal Matrix ();
    internal void (Matrix );
    internal void (Matrix ,  );
    private static SizeF (SizeF );
    internal void (float );
    internal float ();
    internal void (float );
    internal float ();
    internal void (UInt32[] );
    internal UInt32[] ();
    internal  ();
}
internal class  : object {
    private Color ;
    private float ;
    public Color ();
    public void (Color );
    public float ();
    public void (float );
    internal bool ( );
}
internal class  :  {
    private  ;
    private ( );
    public static  (object );
    public virtual [][] ();
    private static [] ( );
    public virtual  ();
}
internal class  : object {
    internal byte ;
    internal ushort ;
    internal ushort ;
    internal bool ;
    internal byte ;
    internal string ;
    internal bool ();
    internal bool ();
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private  ;
    private int ;
    private int ;
    private bool ;
    public ( );
    public  ();
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public sealed virtual void ();
    public sealed virtual void (bool ,  );
    private byte (byte , int );
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
protected List`1<> ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal Rectangle ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
private ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private PlotEmptyCellsType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private char ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
[("True")]
public int  { get; public set; }
    [DebuggerBrowsableAttribute("0")]
[("True")]
public int  { get; public set; }
    [DebuggerBrowsableAttribute("0")]
[("True")]
internal Size  { get; }
    [DebuggerBrowsableAttribute("0")]
[("True")]
public int  { get; public set; }
    [DebuggerBrowsableAttribute("0")]
[("True")]
public int  { get; public set; }
    internal int ();
    internal int ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public  ();
    public  ();
    public  ();
    public  ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public  ();
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public  ();
    public  ();
    public  ();
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public void ( );
    public  ();
    internal abstract virtual  ();
    internal abstract virtual  ();
    internal abstract virtual int ();
    internal abstract virtual void (int );
    internal List`1<> ();
    public bool ();
    public void (bool );
    public string ();
    public void (string );
    public string ();
    public void (string );
    internal abstract virtual void (Color[] ,  , int , IList );
    internal abstract virtual Size ();
    public bool ();
    public void (bool );
    internal bool ();
    [("True")]
protected void ();
    public Font ();
    public Color ();
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal RectangleF ();
    internal void (RectangleF );
    internal float ();
    internal void (float );
    public void (Rectangle& );
    public void (RectangleF& );
    public  ();
    public void ( );
    [("True")]
public abstract virtual void ();
    [("True")]
internal abstract virtual void (bool );
    internal bool ();
    public sealed virtual  ();
    public sealed virtual void ( );
    public ImageOrPrintOptions ();
    public void (ImageOrPrintOptions );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual int ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    internal int ();
    internal int ();
    public PlotEmptyCellsType ();
    public void (PlotEmptyCellsType );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public sealed virtual bool ();
    public Chart ();
    public void (Chart );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public char ();
    public void (char );
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  : object {
    public static Byte[] (Byte[] );
    public static Byte[] (Byte[] , int );
    public static Byte[] ( , Byte[] );
}
internal class  :  {
    private  ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private  ;
    private [] ;
    private Double[] ;
    private double ;
    private double ;
    private int ;
    private double ;
    public (Workbook , bool , bool , bool );
    public virtual bool ();
    internal void (double );
    public void (int );
    public void (double );
    public double (string );
    public virtual int (string , char );
    public virtual int (string , string );
    public virtual bool (string );
    public virtual int (Char[] );
    protected virtual int (string );
    private void ();
    private int ();
}
internal class  : object {
    internal string ;
    internal string ;
}
internal abstract class  :  {
    protected ( ,  ,  , bool );
    protected ( ,  ,  , [] , bool );
    protected virtual bool ();
    protected virtual bool ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  (int );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  ,  );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  , [] );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public [] ();
    public virtual  ();
}
internal class  : object {
    private  ;
    private  ;
    private Byte[] ;
    internal void (Byte[] , Byte[] );
    internal bool (Byte[] , Byte[] );
    internal bool (UInt32 );
    internal bool (UInt32 );
    internal bool (Byte[] , UInt32 , UInt32 , Byte[] , UInt32 , UInt32 );
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    []
private  ;
    []
private  ;
    private SlicerCache ;
    private string ;
    private int ;
    private Byte[] ;
    private int ;
    internal ( );
    internal void ( , string );
    private void ();
    private void ( );
    private void ( );
    private  ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (byte );
    private void ();
    private void ();
}
internal class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private int ;
    private string ;
    private (int , string );
    private static ();
    public int ();
    public int ();
    public int ();
    public bool ();
    public bool ();
    public bool ();
    public  ();
    public bool ( );
    public bool ( );
    public virtual bool Equals(object );
    public bool ( );
    public virtual int GetHashCode();
    public static  (int , int );
    public virtual string ToString();
    private static  (int , int , string );
}
internal class  : object {
    private byte ;
    private byte ;
    private byte ;
    private  ;
    internal byte ();
    internal void (byte );
    internal byte ();
    internal void (byte );
    internal byte ();
    internal void (byte );
    internal  ();
    internal void ( );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal static int ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    private static ();
    internal static void ( , Rectangle ,  , ArrayList , ArrayList );
    internal static void ( , Rectangle ,  );
    private static float (float );
    private static void (ArrayList , ArrayList );
    private static void (GraphicsPath ,  , double , double , double , double , Double& , double );
    private static void ( ,  ,  , int , Double& , double , double , double , double );
    private static string (int ,  ,  , ArrayList , string );
    private static void ( ,  , Rectangle ,  , ArrayList , ArrayList );
    private static float (double );
    internal static void ( ,  , ArrayList );
    internal static void ( ,  , ArrayList );
    private static void ( ,  , RectangleF , ArrayList ,  , RectangleF , PointF , float );
    private static int (PointF , RectangleF );
    private static PointF (double , double , double , double );
    private static PointF ( , RectangleF , double , double , double );
    private static void ( ,  , Rectangle ,  , ArrayList , ArrayList );
    private static void ( ,  , Rectangle ,  , ArrayList , ArrayList );
    private static int (Double[] , Double[] , double );
    private static void ( ,  , Rectangle ,  , ArrayList , ArrayList );
    private static void ( ,  , Rectangle , IList , ArrayList , ArrayList );
    internal static void ( ,  , Rectangle , IList , ArrayList );
    private static void ( ,  , Rectangle , IList , ArrayList , ArrayList );
    private static void ( , int , double );
    private static void ( , double );
    internal static void ( , Rectangle& ,  );
    internal static void ( ,  , Rectangle& ,  );
    internal static float (Rectangle ,  );
    internal static float (RectangleF ,  );
    internal static void ( ,  , Rectangle ,  );
    internal static void ( ,  , RectangleF ,  );
    private static void (Double& , Double& , double , SizeF );
    private static void (Double& , Double& , double , SizeF );
    private static bool ( , float , float , float , float , float , RectangleF ,  );
    private static PointF ( , float , float , float , float , float , SizeF ,  );
    private static RectangleF (double , double , SizeF , float , float , float );
    internal static void ( , double );
    internal static void ( , double , ArrayList );
    internal static void ( , double , ArrayList ,  );
    internal static void ( , ArrayList , Rectangle , Rectangle ,  );
    private static void ( ,  , Rectangle , Rectangle ,  );
    private static void ( ,  ,  , int , Rectangle , Rectangle , float );
    private static bool ( ,  , int , float );
    private static void ( ,  , Rectangle , Rectangle ,  );
    private static  ( ,  ,  ,  );
    private static Object[] ( , ArrayList );
    private static void ( ,  , Rectangle , Rectangle , ArrayList );
    private static void ( ,  , int , int , bool );
    private static bool (RectangleF , RectangleF , float );
    internal static ArrayList ( , Rectangle ,  );
    internal static ArrayList ( , Rectangle );
    internal static ArrayList ( , RectangleF ,  );
    private static void (Rectangle , RectangleF , Single& );
    private static void (RectangleF , RectangleF , Single& );
    private static double (double , double );
    internal static RectangleF (Rectangle , double , double );
    internal static RectangleF (RectangleF , double , double );
    internal static bool ( );
    internal static SizeF ( ,  , int , int , double , float , float , double );
    internal static void ( ,  , int , int , double , RectangleF , double );
    public static void ( ,  , Rectangle , string , int , Font , Color ,  ,  );
    public static void ( ,  , RectangleF , string , int , Font , Color ,  ,  );
    public static void ( );
    public static void ( ,  , Rectangle , ArrayList , ArrayList );
}
internal class  : object {
    internal static IDictionary ;
    internal static IDictionary ;
    internal static IDictionary ;
    private static ();
    private static  ( , BigInteger , BigInteger );
    private static  ( );
    public static  ( );
    public static IEnumerable ();
    public static  (string );
    public static string ( );
    public static  (string );
}
internal class  :  {
    private byte ;
    public ( , byte );
    public ( ,  ,  , byte );
    public ( , [] , [] , byte );
    public virtual int ();
    public virtual int ();
    public virtual bool ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public static void (Stream );
    public static Byte[] (Stream );
    public static Byte[] (Stream , int );
    public static int (Stream , Byte[] );
    public static int (Stream , Byte[] , int , int );
    public static void (Stream , Stream );
    public static long (Stream , long , Stream );
    public static void (MemoryStream , Stream );
    public static int (MemoryStream , Byte[] , int );
    public static void (Stream , long );
}
internal class  :  {
    internal virtual int ();
    internal virtual void ( );
}
internal class  : object {
}
internal class  :  {
    public (Byte[] );
    public (Stream );
    public  ();
}
internal class  :  {
    private  ;
    private  ;
    private bool ;
    public ( ,  , int , int ,  );
    public virtual  ( );
    public virtual void ( );
    public sealed virtual  ( );
    public sealed virtual  ( , bool );
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual BigInteger ();
    public abstract virtual int ();
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public object Item { get; }
    public object Item { get; }
    public String[] Columns { get; }
    public int Count { get; }
    internal ( , string );
    private void ( );
    public sealed virtual object get_Item(int );
    public sealed virtual object get_Item(string );
    private object ( , string , int );
    public sealed virtual String[] get_Columns();
    public sealed virtual int get_Count();
    public sealed virtual void BeforeFirst();
    public sealed virtual bool Next();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public int ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public Byte[] ();
    public virtual  ();
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal ICollection ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private IEnumerator ;
    [DebuggerBrowsableAttribute("0")]
private PropertyDescriptorCollection ;
    public String[] Columns { get; }
    public int Count { get; }
    public object Item { get; }
    public object Item { get; }
    internal (ICollection , PropertyDescriptorCollection , object );
    public sealed virtual String[] get_Columns();
    public sealed virtual int get_Count();
    public sealed virtual void BeforeFirst();
    public sealed virtual object get_Item(int );
    public sealed virtual object get_Item(string );
    public sealed virtual bool Next();
}
internal class  : object {
    internal string ;
    internal  ;
    private string ;
    private string ;
    private string ;
    []
internal Style ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    []
private Style ;
    []
internal FormatConditionCollection ;
    internal (Style );
    internal static string (bool , string );
    private bool (Style , int ,  );
    private void (Style , bool );
    internal void (int ,  );
    internal void (int );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal bool (Style );
    internal Style ();
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual void (bool ,  );
    public abstract virtual Byte[] (Byte[] , int , int );
    public abstract virtual Byte[] (Byte[] , int , int );
}
internal class  : object {
    private  ;
    private [] ;
    private  ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private bool ;
    private  ;
    public ( ,  );
    public ([] ,  ,  , int , int , int , bool , bool ,  );
    public sealed virtual  ( );
    public sealed virtual void ();
    public sealed virtual bool ();
    public sealed virtual bool (int , int );
    public sealed virtual bool (int );
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual  ( ,  ,  );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual void ( );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void ();
    public sealed virtual void ( );
    public sealed virtual  (int , int );
    public sealed virtual  (int );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void (int , int ,  );
    public sealed virtual void (int ,  );
    private void ( );
}
internal class  :  {
    internal void (int , int , int , int );
    internal void ();
    internal void (int );
    internal void (int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Encoding ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    internal (Byte[] , Encoding );
    internal (string , Encoding );
    internal Byte[] ();
    internal bool (string );
    private void ();
    private static string (byte );
    private static byte (string );
    private static Byte[] (Byte[] , String& );
    private static Byte[] (Byte[] , string );
    private Byte[] (string );
    private static Byte[] ();
    public sealed virtual object Clone();
}
internal class  : object {
    internal int ;
    internal int ;
    private  ;
    internal CellArea ;
    private int ;
    private short ;
    private byte ;
    private object ;
    private (CellArea , int , int ,  );
    private (CellArea , int , int ,  );
    private ( , CellArea );
    private void ( , StringBuilder );
    private bool ();
    private bool ( );
    private static  ([] );
    private static byte ([] ,  );
    private  (int ,  , bool );
    private  (int ,  , bool );
    private  (int , int ,  );
    private  (CellArea ,  );
    private  (CellArea );
    private  (CellArea ,  );
    private  (int );
    private  (int );
    private  (int );
    private  (int );
    private void (int , bool );
    private void (int , bool );
    private void (bool );
    private void (bool );
    private  (int , int ,  , bool );
    private  ( , int , bool );
    private  ( , bool );
    private  ( , int );
    private void ( , byte , int , short , int , bool );
    private  (byte , int , int , int );
    private  (byte , int , int , int , bool );
    private  (byte , int , int ,  , int , bool );
    private  ( , int ,  , int );
    private  ( , int ,  );
    private CellArea (int , bool );
    private CellArea (int , bool );
    private void (int , bool );
    private void (int , bool );
    private  ( , int , bool );
    private  ( , int );
    private  ( ,  , bool );
    private  ( ,  ,  , int , int , bool , bool , bool );
    private  ( ,  ,  , int , int , bool , bool , bool );
    private void ( );
    private void ( , bool );
    private void ( , bool , bool );
    private void ( , bool , bool );
    private void ( , bool );
    private bool ( );
    private  ( , int , int );
    private  ( , CellArea );
    private bool ( );
    private bool ( );
    private bool ( , CellArea );
    internal bool ();
    internal bool (CellArea );
    private bool (int , int );
    private bool ( , int , int );
    private bool ( , int );
    private bool ( );
    private bool ( , int , int , int );
    private bool ( , int , int , int );
    private bool ( , int , int , CellArea );
    internal static  ( , int , int , CellArea , bool );
    internal static  ( ,  , bool );
    internal static  ( , int , int , CellArea ,  , bool );
    private static int ( ,  , ArrayList );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private ShapeCollection ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual void ( );
    private void ();
    internal static void ( );
    private void ();
    private void ();
    private void (ArrayList , bool );
    private void ( , bool );
    private void ( );
    private void (Shape ,  );
    private FontSettingCollection (Shape );
    private void (Font , string , bool );
    private void ( , bool );
    private void (Shape );
    private void ( , bool );
    private void (Shape , FontSettingCollection );
    private void (Shape );
    private void (Shape );
    private void (Shape );
    private void (Shape );
    private void (Shape );
    private void (Shape );
    private void (Shape );
    private void (FontSettingCollection );
    internal static string (Shape );
    private void (Comment , bool );
    private string (Color );
    private string (Shape , int );
    private static string (Color );
    private string (Shape );
    private void (Shape );
    private void ( , bool );
    private string (Shape );
    private string (int );
    private string (Shape , bool );
    private int (Shape );
    private void ();
    private void ();
    private void ();
    private void (string );
    private void ( , SignatureLine );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal ushort ();
    internal void (ushort );
    internal ushort ();
    internal void (ushort );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    private ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    internal ( ,  ,  , int );
    protected virtual  ( , bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int , int );
    public virtual bool (int );
    public virtual bool (int , int );
    public virtual void ();
    public virtual bool ();
    public virtual  ();
    public virtual  (int );
    public virtual  (int );
}
internal class  :  {
}
internal class  : object {
    internal double ;
    internal Color ;
    internal int ;
    internal  ;
    internal CellBorderType ();
    internal static  ( );
    private void ( );
    internal void ( );
}
internal class  :  {
}
internal class  : object {
    protected internal  ;
    public virtual void ( );
    public virtual int ();
    public virtual BigInteger ( );
    private static  ( ,  ,  ,  ,  ,  );
}
internal class  :  {
    public (Byte[] , int );
    public virtual  ( );
}
internal class  : object {
    []
internal  ;
    internal int ;
    internal int ;
    internal  ;
    internal  ;
    internal  ;
    internal ( );
    internal  ();
    internal  ();
    internal bool ();
    internal void ( );
    internal static String[] (PivotGroupByType , double , double , double , PivotGlobalizationSettings );
    private static String[] (string , string , double , PivotGlobalizationSettings );
    private static String[] (string , string , double , PivotGlobalizationSettings );
    private static String[] (string , string , double , PivotGlobalizationSettings );
    private static String[] (string , string , double , PivotGlobalizationSettings );
    private static String[] (string , string , double , PivotGlobalizationSettings );
    private static String[] (string , string , double , PivotGlobalizationSettings );
    private static String[] (double , double , double );
}
internal class  : Exception {
    public (string );
}
internal class  : object {
}
internal class  :  {
    internal ( ,  );
    internal  ();
    public  ();
    internal  (int );
    public virtual int ( );
    public int ( , string );
}
internal class  :  {
    private IList ;
    private IList ;
    internal (IList );
    private (IList , IList );
    public (Byte[] );
    public (Stream );
    public  ();
    public  ();
    public IEnumerable ();
    public  (long );
    public IEnumerable ();
    public Byte[] ();
    public void (Stream );
    public static  ( ,  );
    public static  ( , Char[] , Char[] ,  ,  );
    public static  ( ,  );
    public static  ( ,  );
}
internal class  : object {
    private double ;
    public (double );
    public sealed virtual int (double );
    public sealed virtual double (int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal string ;
    internal string ;
    internal  ;
    internal bool ( );
    internal void (Validation ,  );
    private void (Validation ,  );
    private void (Validation , int ,  );
    private string ();
}
internal class  :  {
    public ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal (string ,  );
    public sealed virtual void InitStream(StreamProviderOptions );
    public sealed virtual void CloseStream(StreamProviderOptions );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private  ;
    public int  { get; }
    internal ( );
    public int ();
    public int (int );
}
internal class  : object {
    internal static Char[] ;
    internal Char[] ;
    internal int ;
    internal int ;
    internal bool ;
    internal int ;
    internal bool ;
    private static ();
    internal int ();
    internal void ();
    public bool ();
    public void ();
    public void (Char[] , int , int , bool );
    public bool (string );
    public bool (string );
    public Byte[] ();
    public bool ( );
    private double ();
    public double (double );
    public int (int , int );
    public int (int );
    public bool (bool );
    public int (Char[] , int , int );
    public Guid ();
    public string ();
    internal void ( );
    public void (Char[] ,  );
    internal void (Char[] );
}
internal class  :  {
    private static Regex ;
    private bool ;
    [("True")]
public (DigitalSignatureCollection , bool );
    private static ();
    private void ( , string ,  ,  );
    public void (Stream );
    private  ( , string , string );
    private  ( ,  );
    private void ( );
    private  ( , DigitalSignature );
    private  ( , DigitalSignature , int );
    private  ( );
    private void ( ,  ,  );
    private void (Stream );
    private void ( ,  ,  );
    private void ( );
    private void ( ,  ,  );
    private int ( );
}
internal class  :  {
    internal (PivotArea );
    internal (PivotArea , bool );
    internal void (PivotArea , bool );
}
internal class  : object {
    private  ;
    private Byte[] ;
    public ( , Byte[] );
    public ( , Byte[] , int , int );
    public Byte[] ();
    public  ();
}
internal class  : object {
    public static Byte[] (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal abstract class  : object {
    public Byte[] ();
    public Byte[] (string );
    public Byte[] ();
    public sealed virtual int GetHashCode();
    public sealed virtual bool Equals(object );
    public abstract virtual  ();
}
internal static class  : object {
    private static  ;
    private static ();
    public static void (Array , RuntimeFieldHandle );
}
internal class  : object {
    internal GradientStyleType ;
    internal GradientColorType ;
    internal int ;
    internal double ;
}
internal class  :  {
    []
private Workbook ;
    []
private RevisionRenameSheet ;
    internal (RevisionRenameSheet , Workbook );
    private void ();
}
internal class  : object {
    private  ;
    private Byte[] ;
    private bool ;
    private  ;
    private  ;
    public (Byte[] );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public virtual void ();
}
internal class  : object {
    private BinaryWriter ;
    public (Stream );
    public Stream ();
    public void (int );
    public void (UInt32 );
    public void (int );
    public void (ushort );
    public void (byte );
    public void (Byte[] , int , int );
    public void ();
}
internal class  : object {
    private double ;
    private double ;
    internal (double , double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
}
internal class  :  {
    public (int ,  );
    public (bool , int ,  );
    public (int );
    internal virtual void ( );
}
internal class  : object {
    internal static  (string , bool );
}
internal class  : object {
}
internal class  : object {
    private  ;
    private int ;
    private ulong ;
    private Byte[] ;
    private Byte[] ;
    public (int );
    public sealed virtual string ();
    public sealed virtual void ( );
    public sealed virtual int ();
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual void (byte );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
    private void ();
    private Byte[] (Byte[] );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private double ;
    private double ;
    private double ;
    private double ;
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public  ();
    public  ();
    public void ( ,  ,  );
    public void (double , double , double );
}
internal class  : object {
    private  ;
    internal  ;
    internal int ;
    internal UInt32 ;
    internal UInt32 ;
    internal int ;
    private bool ;
    internal int ;
    internal  ;
    private static Byte[] ;
    public (bool );
    private static ();
    internal bool ();
    internal void (bool );
    internal int ();
    internal int ();
    internal int ( , int );
    internal int ( );
    internal int (Byte[] );
    internal int ();
    internal int ( );
}
internal class  :  {
    internal List`1<> ;
    internal (string ,  );
    internal virtual  ();
    internal  (int );
    internal virtual  ();
    internal virtual object ();
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    internal void ();
}
internal class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected Int32[] ;
    protected Byte[] ;
    protected Byte[] ;
    protected Byte[] ;
    protected Byte[] ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected Byte[] ;
    [ObsoleteAttribute("Use constructor that takes a TlsDHVerifier")]
public (int , IList ,  ,  ,  , Int32[] , Byte[] , Byte[] );
    public (int , IList ,  ,  ,  ,  , Int32[] , Byte[] , Byte[] );
    public virtual void ();
    public virtual void ( );
    public virtual Byte[] ();
    public virtual void ( );
    public virtual bool ();
    public virtual void (Stream );
    public virtual void ( );
    public virtual void ( );
    public virtual void (Stream );
    public virtual void (Stream );
    public virtual Byte[] ();
    protected virtual Byte[] (int );
    protected virtual  ( );
}
internal class  :  {
    internal ( );
    internal virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public (Byte[] );
    public ( );
    public ( );
    public static  (object );
    public  ();
    public Byte[] ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public (Workbook );
    internal virtual void ( );
}
internal class  :  {
    internal void ( );
}
internal class  : object {
    protected  ;
    private  ;
    private IDictionary ;
    private int ;
    private (byte ,  );
    public virtual void ( );
    public virtual  ();
    public virtual void (byte );
    public virtual void ();
    public virtual  ();
    public virtual  ();
    public virtual Byte[] (byte );
    public virtual string ();
    public virtual int ();
    public virtual int ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    protected virtual void ();
    protected virtual void (byte );
}
internal class  : object {
    private MemoryStream ;
    public sealed virtual Byte[] ();
    public sealed virtual void (Byte[] );
    public sealed virtual Stream ();
}
internal class  :  {
    internal ( ,  );
    internal bool ();
    internal void (bool );
    internal  ();
    internal virtual bool ();
    public sealed virtual object Clone();
    internal virtual void (float , float , float , float );
    internal virtual void (Point , Point );
    internal virtual void (PointF , PointF );
    internal virtual void (Rectangle );
    internal virtual void (RectangleF );
    internal virtual void (GraphicsPath );
    internal virtual  (GraphicsPath );
    private  ();
    private void ( );
    private void ( ,  );
    private void ( ,  ,  ,  , bool );
    internal virtual bool ();
    internal virtual void ();
}
internal class  : object {
    private  ;
    private  ;
    private object ;
    private bool ;
    private bool ;
    public ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
}
internal class  :  {
    protected  ;
    protected int ;
    protected int ;
    protected int ;
    private CellArea ;
    protected bool ;
    protected int ;
    protected int ;
    internal bool ;
    protected bool ;
    internal ( ,  , CellArea , int , int , int );
    internal void (Worksheet );
    internal void ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    protected virtual bool (int , int );
    protected virtual bool ( );
    protected virtual bool ( );
    protected virtual bool ( );
}
internal class  : object {
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection , int , bool );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection , CellBorderType );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection , bool );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
    internal static Style (WorksheetCollection );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private IEnumerable ;
    public (IEnumerable );
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("")]
internal class  : object {
    private Hashtable ;
    []
internal object ;
    internal   { get; }
    internal (object );
    internal void ();
    internal bool (ushort );
    internal void (ushort , ushort );
    internal void (ushort );
    internal void ( );
    internal int ();
    internal ArrayList ();
    internal int ();
    internal int ();
    internal  (ushort );
    internal static bool (ushort , int );
    internal void (ushort ,  , object );
    internal Hyperlink ();
    internal Byte[] (ushort );
    internal Byte[] ();
    internal string (ushort );
    internal int (ushort , int );
    internal bool (ushort , int , bool );
    internal void (ushort , int , bool );
    internal float (ushort , float );
    internal void (ushort , float );
    internal static int (float );
    internal static float (int );
    internal WorksheetCollection ();
    internal Color (ushort , Color );
    internal bool (ushort );
    internal int (Shape , Byte[] , int , bool );
}
internal class  : object {
    internal Font ;
    internal string ;
}
internal enum  : Enum {
    public int value__;
    public static  Null;
    public static  Idea;
    public static  TripleDes;
    public static  Cast5;
    public static  Blowfish;
    public static  Safer;
    public static  Des;
    public static  Aes128;
    public static  Aes192;
    public static  Aes256;
    public static  Twofish;
    public static  Camellia128;
    public static  Camellia192;
    public static  Camellia256;
}
internal class  :  {
    internal static Int64[] ;
    internal static Int64[] ;
    internal static Int64[] ;
    private [] ;
    private int ;
    private  ;
    private Int64[] ;
    internal (int , int , int ,  );
    internal (int , int , int ,  , Hashtable );
    private static ();
    internal static Hashtable (Hashtable );
    internal void ();
    internal Int64[] ();
    internal virtual bool (int ,  );
    protected virtual void (Int64[] );
    protected virtual void (Int64[] , bool );
    private void (long );
    protected virtual object ();
    protected virtual object (object );
    protected virtual void (object );
    protected virtual void (object , CellArea );
    private bool (long , Int64[] );
}
internal class  : object {
    []
private  ;
    []
private Worksheet ;
    internal ( );
    private void ( );
    [("True")]
private void ( );
    internal void ( );
    [("True")]
private void ( );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
}
internal interface  {
    public abstract virtual  ( , BigInteger );
}
internal class  : object {
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    public ( );
    public (Hashtable );
    public (IDictionary );
    public virtual  ();
}
internal class  : object {
    internal static AccessCacheOptions ( ,  );
    internal static bool (AccessCacheOptions ,  );
    internal static bool (AccessCacheOptions ,  );
    internal static bool (AccessCacheOptions );
    internal static bool ( );
    internal static bool ( );
}
internal class  : object {
    internal int ;
    private int ;
    internal ( );
    internal static void ( ,  );
    internal void ( );
    public int ();
    private int ();
}
internal abstract class  : object {
    private int ;
    private Byte[] ;
    private int ;
    private long ;
    private long ;
    internal ulong ;
    internal ulong ;
    internal ulong ;
    internal ulong ;
    internal ulong ;
    internal ulong ;
    internal ulong ;
    internal ulong ;
    private UInt64[] ;
    private int ;
    internal static UInt64[] ;
    internal ( );
    private static ();
    protected void ( );
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public void ();
    public virtual void ();
    internal void (Byte[] , int );
    private void ();
    internal void (long , long );
    internal void ();
    private static ulong (ulong , ulong , ulong );
    private static ulong (ulong , ulong , ulong );
    private static ulong (ulong );
    private static ulong (ulong );
    private static ulong (ulong );
    private static ulong (ulong );
    public sealed virtual int ();
    public abstract virtual string ();
    public abstract virtual int ();
    public abstract virtual int (Byte[] , int );
    public abstract virtual  ();
    public abstract virtual void ( );
}
internal class  :  {
    private int ;
    private double ;
    public virtual void (int , int );
    public virtual  ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
}
internal class  :  {
    private Style ;
    private Style ;
    private Style ;
    private Style ;
    private Style ;
    private Style ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private ListObject ;
    private int ();
    internal void ( );
    internal void (ListObject );
    internal void (ListObject );
    internal void (ListObject );
    internal void (ListObject );
}
internal class  : object {
    []
private ListObjectCollection ;
    public (ListObjectCollection );
    public sealed virtual void (int , int ,  );
}
internal class  :  {
    private CultureInfo ;
    private string ;
    private ( );
    internal ( , string , int );
    internal static  ( );
    internal static  ( );
    internal  (string , int );
    internal  (string );
    internal  ();
    internal static int (DateTime );
    internal static int (DateTime );
    internal static string (DateTime );
    internal static string (DateTime );
    internal static int (DateTime );
    internal static int (DateTime );
    internal static int (DateTime );
    internal static int (DateTime );
    internal string (string , DateTime );
    private string (string );
    internal virtual  ( , DateTime , double , bool ,  );
    []
private void ();
    public virtual bool ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual void ( );
    private void ( );
    private void ( ,  );
    private void (Shape ,  );
    private void ( ,  );
    private  (Shape );
    [("True")]
private void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
[("And")]
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    internal static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    private static void ( , RectangleF );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    private static void ( , RectangleF );
    internal static void ( ,  );
    internal static Matrix ( );
    private static Bitmap (Image ,  );
    internal static void ( ,  );
    private static void (Image& , MsoFormatPicture );
    internal static RectangleF (RectangleF );
    private static RectangleF (RectangleF , int );
    private static RectangleF (float , PointF );
    private static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
    internal static void ( ,  );
}
internal class  :  {
    private  ;
    private ( );
    public ( ,  ,  );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    public ( ,  ,  , bool , int , int , int , int ,  , int , int , bool , bool , bool );
    private ( , int , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int , int , int , int ,  ,  );
    public virtual bool ( );
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ( , Int32[] );
    public virtual bool ( , Int32[] );
    public virtual  (Double[] ,  ,  );
    public virtual  (Double[][] ,  ,  );
    public virtual int ( , bool );
    private  (Double[][] ,  ,  );
    private void ();
    private void ();
    private void ();
}
internal class  :  {
    internal void ( );
}
internal class  : object {
    private static  ;
    private bool ;
    private  ;
    private int ;
    private Stream ;
    public (bool );
    private static ();
    private  (Stream );
    private  ( );
    private  ();
    protected virtual  ( );
    public  (Byte[] );
    public ICollection (Byte[] );
    public  (Stream );
    public ICollection (Stream );
}
internal class  : object {
    internal UInt32 ;
    internal  ;
    internal static  ( );
}
internal class  : object {
    private  ;
    internal ( );
    internal static float (string , float );
    internal static float (string );
    internal void ( ,  );
    internal Matrix (string );
    internal Hashtable (string );
    internal Matrix (Single[] , float , float , string );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private IList ;
    private IDictionary ;
    public   { get; }
    public (ICollection );
    public  ( );
    public  ( );
    public int ();
    public ICollection ();
    public ICollection ( );
}
internal class  : object {
    private  ;
    private int ;
    internal ( );
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual void (StringBuilder );
    public sealed virtual bool (int ,  );
    public sealed virtual  (int , int , [] , int , int , bool );
    public sealed virtual  (int , int ,  , int , int , bool );
    public sealed virtual  (int , int ,  , int , bool );
    public sealed virtual  (int , int );
    public sealed virtual int (int ,  );
    public sealed virtual int (int ,  );
    public sealed virtual  (int );
    public sealed virtual  (int ,  );
    public sealed virtual object (int ,  );
    public sealed virtual void (int , StringBuilder ,  );
    public sealed virtual void (int , [] , int , int );
    public sealed virtual  (int , Double[] , int , int ,  ,  );
}
internal class  : object {
    private Hashtable ;
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private  ;
    private  ;
    private  ;
    private long ;
    private int ;
    internal (Hashtable , int , int , int , int , bool );
    internal void ();
    private void (long , int , int , int , bool );
    private void (bool );
    private void (bool );
}
internal class  : object {
    private static IDictionary ;
    private  ;
    private int ;
    private  ;
    private static ();
    public ( );
    public ( , int );
    private static int ( );
    public  ();
}
internal class  :  {
    public  ;
    internal ( );
}
internal class  : object {
    protected Color ;
    protected Color ;
    protected Color ;
    protected int ;
    protected int ;
    protected Brush ;
    protected bool ;
    public void (Color , Color , Color , int , int );
    public void (Brush , Color , Color , int , int );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat , Single& , Single& );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat , Single& , Single& );
}
internal class  :  {
    private BigInteger ;
    public ( );
    public (BigInteger );
    public BigInteger ();
    public virtual void ( );
    internal static void ( , BigInteger );
}
internal abstract class  :  {
    public abstract virtual  ();
    public abstract virtual RowCollection ();
    public abstract virtual int ();
    public abstract virtual  ();
    public abstract virtual Row ();
    public abstract virtual Cell ();
}
internal class  :  {
    private  ;
    internal ( ,  );
    internal ( , string );
    internal virtual float ();
    private static float (float );
    private static float (float );
    internal static  (string );
}
internal class  : object {
    private static Byte[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private UInt32[] ;
    private static ();
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private UInt32 (UInt32 );
    private void (bool , Byte[] );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
}
internal class  : object {
    private StringBuilder ;
    internal Stream ;
    private Encoding ;
    internal StreamReader ;
    internal char ;
    private bool ;
    public (Stream , Encoding );
    public char ();
    private bool ();
    private char ();
    public string ( );
    public string ( );
    internal void ();
    internal void (char );
    internal void ();
    internal void ();
    internal string ();
    internal  ();
    internal void (StringBuilder , Char[] , bool );
    internal void (Char[] );
    internal string (bool );
    private void ( , char , StringBuilder );
    internal  ( , bool );
    internal string ();
    internal void ();
    internal void ();
}
internal class  :  {
    internal (TableStyleCollection );
}
internal class  : object {
    protected Stream ;
    internal (Stream );
    internal Stream ();
    internal void (Byte[] , int );
    internal void (Byte[] , int , int );
    internal void (Byte[] );
    internal void (byte );
    internal void (char );
    internal void (UInt32 );
    internal void (int );
    internal void (ushort );
    internal void (short );
    internal void (int );
    internal void (double );
    internal long ();
    internal void (long );
    internal void ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Stream ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    public (Workbook );
    public sealed virtual void ();
    public sealed virtual void Dispose();
    public sealed virtual void (Stream );
    internal void ();
    [("True")]
internal virtual void ();
    internal void (string , ArrayList );
    [("True")]
internal virtual void ();
    internal void (string , string , string , string );
    [("True")]
internal virtual void ();
    internal void ();
    internal Single[] (SheetRender , ImageOrPrintOptions , int );
    [("True")]
internal virtual void (MemoryStream , int , int );
    [("True")]
internal virtual void ();
    private void ();
}
internal class  :  {
    internal (PivotField );
}
internal abstract class  :  {
    private static String[] ;
    private string ;
    private  ;
    private  ;
    protected (string , bool ,  );
    protected (string , bool ,  );
    private static ();
    public string ();
    public  ();
    public  ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
    internal  ( );
    internal static string (string );
    internal static  ( );
}
internal class  :  {
    internal string ;
    internal ArrayList ;
    internal ArrayList ;
    internal ( );
    internal virtual void ();
    internal virtual void ( );
}
internal enum  : Enum {
    public int value__;
}
internal static class  : object {
    public static void (Stream , Stream , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private List`1<byte> ;
    public sealed virtual int ();
    public sealed virtual void ();
    public sealed virtual  ();
    public sealed virtual void Dispose();
    public sealed virtual void (int , Byte& );
    public sealed virtual void (int , Byte& );
    private byte (byte , int );
    private byte (byte , int );
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private LightRigType ;
    private LightRigDirectionType ;
    internal byte ;
    internal LightRigType ();
    internal void (LightRigType );
    internal LightRigDirectionType ();
    internal void (LightRigDirectionType );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal void ( );
    internal bool ( );
    internal bool (int );
    internal void (int );
    internal void ();
}
internal class  :  {
    internal (Sparkline );
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual void (BigInteger ,  );
    public abstract virtual void (BigInteger , BigInteger , Byte[] );
    public abstract virtual BigInteger ();
}
internal class  : object {
    public static double (double );
    public static double (double , double );
    public static int (double );
    public static int (double , double );
    public static int (double , double );
    public static double (double );
    public static int (double );
    public static double (double );
    public static double (double , double );
    public static int (double , double );
    public static int (double , double , double );
    public static double (double );
    public static double (double );
    public static double (double );
    public static double (double );
    public static int (double );
    public static int (double );
    public static double (double );
    public static double (double );
    public static int (int );
    public static double (double );
    public static int (double );
    public static double (int );
    public static int (double );
    public static double (int );
    public static int (int );
    public static int (double );
    public static double (int );
    public static double (double );
    public static double (int );
    public static double (int );
    public static int (int );
    public static int (double );
    public static int (int );
    public static int (int );
    public static int (double );
    public static double (int );
    public static double (int );
    public static float (int );
    public static double (int );
    public static float (float , float );
    public static double (int );
    public static float (float , float );
    public static float (float );
    public static Size (Size , float );
    public static Size (Size );
    public static int (float );
    public static float (int );
    public static int (float );
    public static float (int );
    public static int (float );
    public static float (int );
    public static RectangleF (Rectangle );
    public static PointF (Point );
    public static SizeF (Size );
    public static Rectangle (RectangleF );
    public static Point (PointF );
    public static float (int );
    public static Color (Color );
    public static double (int );
    public static int (double );
}
internal class  : object {
    private  ;
    private  ;
    internal [] ;
    private [] ;
    internal [] ;
    private [] ;
    private [] ;
    internal [] ;
    internal [] ;
    internal static [] ;
    internal static String[] ;
    public ([] , [] , [] , [] , [] ,  ,  );
    private static ();
    internal static long (string , IDictionary , ArrayList );
    internal  ();
    internal void ( );
    internal GraphicsPath[] (float , float , float , float );
    internal float (Double[] , [] , long );
    internal float (Double[] , [] , long , & );
    internal void (float , float , []& , Double[]& );
    internal static string (long , [] , [] );
    internal static [] ([] );
    internal float (Double[] , [] , long );
    private double (Double[] , [] , long , & );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ([] , [] );
    public static  (object );
    public virtual [] ();
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    internal string ;
    internal string ;
    internal bool ;
    private string ;
    private ArrayList ;
    private ArrayList ;
    []
internal Chart ;
    private ArrayList ;
    internal Byte[] ;
    internal Byte[] ;
    internal (Chart , string ,  );
    internal (Chart ,  );
    internal (Chart );
    internal void (ChartType );
    public  ();
    internal string ();
    internal string ();
    internal string ();
    internal void (string );
    internal void (string , bool );
    internal string (bool , ChartType );
    internal void (string );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    public string ();
    public void (string );
    public ArrayList ();
    public void (ArrayList );
    public ArrayList ();
    public void (ArrayList );
    internal Worksheet ();
    internal ArrayList ();
    internal void (ArrayList );
    internal bool ( );
    internal void ();
    public Range[] ();
    internal Range[] ();
    public Range ();
    internal [] ();
    internal void (ArrayList , bool );
    public bool ();
    public bool ();
    public bool ();
    private bool ([] );
    private bool ([] );
    public bool ();
    internal bool ();
    internal WorksheetCollection ();
    internal string ( );
    public string ();
    internal string ();
    private int ();
    public string (ChartType );
    internal ArrayList (bool , bool , bool , Int32& , Boolean& );
    public ArrayList (ArrayList , bool , bool , bool , Int32& , Boolean& );
    private int (bool );
    internal ArrayList (ArrayList , bool , bool , Int32& );
    private bool (ArrayList , bool , int , int );
    internal void (string );
    internal void (string );
    private void (Range , bool , bool , ArrayList , bool );
    public ArrayList (bool , bool , Boolean& , bool );
    internal void (ArrayList );
    private bool (int , int , int , int , int , int );
    private void (ArrayList , bool , int , int , int , int , int , int );
    private  ( , bool );
    private Cell (CellArea , Range , int , int );
    public  (CellArea , ArrayList , Cells , int , int , bool , bool , int , bool );
    private object (Cell );
    public string ();
    internal string (int );
    internal string ( );
    private  ();
    public int ();
    public int ();
    public int ();
    public int ();
    public int ();
    public void ( , int , CopyOptions , ChartType );
    internal void ( );
    public void (ArrayList );
    public bool ();
    public void ();
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal bool ;
    internal bool ;
}
internal class  : object {
    private  ;
    private Byte[] ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private Byte[] ;
    private int ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    public ( );
    public sealed virtual void ( );
    private void (Byte[] , Byte[] );
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    private void ();
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
    private static ulong (UInt32 , UInt32 );
}
internal class  : object {
    private  ;
    private ImageOrPrintOptions ;
    private PrinterSettings ;
    private string ;
    private int ;
    private int ;
    private int ;
    internal (string , string ,  , ImageOrPrintOptions );
    internal (PrinterSettings , string ,  , ImageOrPrintOptions );
    internal (string , int , int ,  , ImageOrPrintOptions );
    internal void ();
    private void (PrintDocument );
    private void (object , PrintPageEventArgs );
    private static PrinterSettings (string );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal string ;
    internal virtual  ();
    internal virtual  ();
    internal virtual object ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private FileFormatType ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal SaveOptions ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<string> ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<string> ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal (Shape , bool , SaveOptions );
    []
internal (Workbook ,  , bool , FileFormatType , SaveOptions , bool );
    public void ();
    public sealed virtual void Dispose();
    private void (Shape , bool );
    private void ();
    internal void (string , string , string );
    internal void ();
    internal void ();
    internal void ();
    internal string (Shape , Byte[] );
    private void ();
    private void ();
    internal int ();
    internal int ();
    internal int ();
    internal int ();
    internal int ();
    internal int ();
    internal void (int );
    private void ();
    private void ();
    private static string (WorksheetCollection );
    internal static void (WorksheetCollection );
    private void ();
    private void ();
    private void ();
    internal void (Worksheet ,  );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ( );
    internal void (string , string );
    private bool (string );
    internal void (string , string );
    internal void (string , ImageType );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    internal  (bool , string , string );
    private void ( );
    private void ();
    internal void ( );
    private void ();
    private void ();
    private string ();
    private void ();
    private void (bool );
    internal  ( );
    internal bool ();
    internal  (string , string );
    internal bool ();
    internal void (QueryTable ,  );
    internal  (Byte[] , ImageType );
    internal void (string ,  );
    internal int (string , string , int ,  );
    internal int (string ,  , string , string , int );
    internal string (ImageType );
    internal string (string , string , int );
    internal bool (string );
}
internal class  :  {
    protected  ;
    internal  ;
    protected  ;
    protected  ;
    protected  ;
    protected short ;
    protected  ;
    public (Stream ,  );
    public (Stream , Stream ,  );
    public ( );
    public virtual void ( );
    protected virtual void ();
    protected virtual  ();
    internal virtual  ();
    protected virtual  ();
    protected virtual void (byte , MemoryStream );
    protected virtual void (byte );
    protected virtual void ( );
    protected virtual void (MemoryStream );
    protected virtual void (MemoryStream );
    protected virtual void (MemoryStream );
    protected virtual void (MemoryStream );
    protected virtual void ( );
    protected virtual void ( );
    protected virtual void ( );
    protected virtual void ();
    protected virtual void ();
    protected virtual void (Byte[] );
    protected virtual bool ();
}
internal class  :  {
    private static Byte[] ;
    public ( );
    private static ();
    public virtual void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public ( ,  , [] );
    public ( ,  , IEnumerable );
    public static  (object );
    public  ();
    public  ();
    public [] ();
    public virtual  ();
}
internal class  : object {
    public string ;
    public string ;
    public string ;
    public string ;
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    []
private  ;
    []
private  ;
    private int ;
    private Byte[] ;
    private int ;
    private ArrayList ;
    []
private  ;
    []
private Worksheet ;
    internal ( );
    internal void ( ,  );
}
internal class  : object {
    private byte ;
    private Byte[] ;
    private IList ;
    internal (byte , int );
    internal byte ();
    internal Byte[] ();
    internal void (byte , int , Byte[] , int , int , int );
    internal void ();
}
internal abstract class  : object {
    private  ;
    private MemoryStream ;
    private  ;
    private  ;
    internal ( ,  );
    internal void ();
    internal void (PointF , SizeF );
    [("True")]
protected abstract virtual void ( );
    protected  ();
    protected  ();
    internal RectangleF ();
    internal PointF ();
    internal void (PointF );
    internal  ();
    internal  ();
    internal void ();
    internal void ();
    internal void ( );
    internal void (UInt32 );
    internal void (SizeF );
    internal void (PointF );
    protected  ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    public (double , double , double , double , double , double , double , double , double );
    private double (double , double , double , double , double );
    public static  ();
    public  ();
    public double ();
    public  ();
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    public virtual  ();
    public virtual bool ();
    public virtual void (Byte[] , int , int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    public virtual byte ();
    public virtual byte ();
    public virtual byte ();
    public virtual  ();
    public virtual  ();
    public virtual void ( );
    public virtual void (int , int );
    public virtual  (int , int );
    public virtual void ( , int , int );
    public virtual void (int , int );
    public virtual  ( );
    public virtual  ();
    public virtual void ( );
    public virtual void (int , int , int , int );
    public virtual void (int );
    public virtual void (int );
    public virtual void (int );
    public virtual void (int );
    public virtual void (int , int );
    public virtual void (int , int );
    public virtual  (int , int );
    public virtual void ( , int , int );
    public virtual void (int , int );
    public virtual void (int , int , int , int );
    public virtual  ( );
    public virtual int ();
    public virtual long ();
    public virtual void ();
    public virtual void ();
    public virtual  ();
    public virtual string (bool );
    public virtual void (bool );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  :  {
    internal ( );
}
[DefaultMemberAttribute("Item")]
internal abstract class  : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public object Item { get; public set; }
    public virtual int Add(object );
    public virtual void Clear();
    public abstract virtual bool Contains(object );
    public abstract virtual void CopyTo(Array , int );
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int IndexOf(object );
    public virtual void Insert(int , object );
    public abstract virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsSynchronized();
    public virtual void Remove(object );
    public virtual void RemoveAt(int );
    public abstract virtual object get_SyncRoot();
    public virtual object get_Item(int );
    public virtual void set_Item(int , object );
    protected abstract virtual object (int );
}
internal class  : object {
    private Byte[] ;
    internal Byte[] ();
    internal void (Byte[] );
    internal int ();
}
internal class  : object {
    private byte ;
    private int ;
    private short ;
    private short ;
    private ArrayList ;
    internal (int );
    internal void (int , int , int , int , bool );
    internal void (int , int );
    internal byte ();
    internal void (byte );
    public ArrayList ();
    public void (ArrayList );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal string ();
    internal int ();
    internal void (int );
    internal void ( );
}
internal class  : object {
    private  ;
    private  ;
    public ( );
    public ( ,  );
    public  ();
    public [] ();
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual void ( );
    public abstract virtual  ();
    public abstract virtual  ( );
}
internal class  : object {
    []
private WebExtension ;
    []
private WorksheetCollection ;
    private  ;
    internal ( , WorksheetCollection );
    internal void ( , string , Hashtable );
    private void ( );
    private WebExtensionBinding ( );
    private void ( );
    private void ( );
    private WebExtensionReference ( );
    private static WebExtensionStoreType (string );
    private void ( );
}
internal class  :  {
    protected int ;
    protected int ;
    public (int , int );
    protected virtual  ( , BigInteger );
    protected virtual  ( , int );
}
internal class  : object {
    private bool ;
    private UInt32 ;
    private byte ;
    internal  ;
    internal (bool );
    internal (bool , ColorType , int );
    internal int (WorksheetCollection , int , bool , Boolean& );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool ();
    public void (bool );
    internal ColorType ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal int ();
    internal Color (Workbook );
    internal Color (Workbook , Chart );
    private Color (Workbook ,  );
    internal int (Workbook );
    internal void ();
    internal void (ColorType , int , bool );
    internal void (ColorType , int );
    internal static int (int , double );
    internal bool ( );
    internal bool ( , Workbook , Workbook );
    internal bool ( );
    internal bool (Color , Color , Workbook );
    internal bool ( );
    internal bool ( , Workbook , Workbook );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal bool ();
    internal static double ( );
    internal static  ( , double );
    internal static int ( );
    internal static  ( , int );
    internal int ();
    internal void (int );
    internal bool ( );
    internal  ();
    internal  ();
    internal void ( , WorksheetCollection , WorksheetCollection );
    internal void ( , CopyOptions );
    internal void ( );
    internal void ( , CopyOptions );
    internal static bool ( ,  ,  );
    internal bool ( );
    internal static bool ( ,  );
    internal bool ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    private ( );
    public ( , int , int );
    public static  (object );
    public  ();
    public BigInteger ();
    public BigInteger ();
    public virtual  ();
}
internal class  : object {
    internal int ;
    internal byte ;
    internal byte ;
    internal int ;
    internal void ( );
    internal void (Byte[] );
    internal Byte[] ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
internal class  : object {
    []
private  ;
    private List`1<> ;
    private List`1<> ;
    private ArrayList ;
    private List`1<> ;
    private  ;
    private string ;
    private string ;
    private string ;
    []
private Worksheet ;
    []
private Row ;
    private int ;
    private int ;
    internal ( );
    internal void ( );
    internal void ( );
    private void ( ,  );
    private void ( ,  );
    internal static void ( ,  );
    private  ( ,  );
    private void ( ,  );
    private  ( );
    private void ( ,  );
    private void ( ,  );
    private void ( , bool );
    private void ( , List`1<> );
    private  ( ,  );
    private void ( ,  );
    private string ( );
    private static string (string );
    private string ( );
    private string ( );
    private string ( );
    private string ( );
    private static string (string );
    private void ( );
    private void ( ,  );
    private Color ( , bool );
    private Color ( , bool );
    private void ( );
    private void ();
    private void (Hashtable , Border , Cell , BorderType );
    private void ( );
    private Hashtable ( , Cell );
    private void ( , Cell , Hashtable );
    private string ( , Cell );
    private string ( , ArrayList );
    private void ( , StringBuilder , ArrayList , Font );
    private void ( , StringBuilder , ArrayList , Font );
    private void (Cell , string );
    private void ( , Cell );
    private Worksheet ();
    private void ( );
    private void ( );
    private void ( , int );
    private void ( );
    private void ( , int );
    private void ( );
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private int ;
    public ( );
    private void ( );
    public virtual string ();
    public virtual int ();
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    private void (int , Byte[] , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    private int (int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    internal virtual void ();
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private bool ;
    private double ;
    public (bool , bool );
    public virtual void (int , int );
    public virtual  ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
}
internal class  :  {
    internal void (Name );
}
internal class  : object {
}
internal class  :  {
    private  ;
    internal ( , string , string , int );
    protected virtual void ( , DateTime , double , StringBuilder );
}
internal class  : object {
    private  ;
    private  ;
    private Hashtable ;
    private Hashtable ;
    private ArrayList ;
    private string ;
    private Hashtable ;
    private  ;
    internal ( );
    internal void ();
    private void ();
    private void ();
    private void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    private void (string );
    private void ();
    private void (bool , string , string , string );
    private static int (Hashtable , int , string , string , string );
    private void ();
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  : SortedList {
    public (bool );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public (Byte[] , int );
    public static  (object );
    public Byte[] ();
    public BigInteger ();
    public virtual  ();
}
internal abstract class  :  {
    protected  ;
    protected [] ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected int ;
    protected  ;
    protected int ;
    public ( ,  , [] ,  ,  );
    protected ( , int , [] );
    public virtual  ();
    protected [] ( );
    protected [] ();
    protected [] ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ( );
    public virtual void ( );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ( , Int32[] );
    public virtual bool ( , Int32[] );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual void (bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
}
internal class  :  {
    internal (SheetType );
    private void ();
    private void (SheetType );
    internal void (int );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private string ;
    public void ();
    public void ( );
    public void (DateTime );
    public void (DateTime );
    public void (BigInteger , DateTime , int );
    public void (BigInteger , DateTime , int , DateTime );
    public void (BigInteger , DateTime ,  );
    public void ( );
    public void (string );
    public void (string , bool ,  );
    public void ( , bool ,  );
    public void (string , bool , Byte[] );
    public void ( , bool , Byte[] );
    public  ( );
    public  ( ,  );
    public  ( );
    private  ();
    private  ( ,  , Byte[] );
    public IEnumerable ();
}
internal class  : object {
}
internal class  : object {
    private static float ;
    private String[] ;
    private float ;
    private string ;
    private Hashtable ;
    private  ;
    private float ;
    private float ;
    private float ;
    private Hashtable ;
    private Hashtable ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    internal ( ,  ,  ,  ,  ,  );
    private static ();
    public float ();
    public void (float );
    public Hashtable ();
    internal void ( ,  , RectangleF& ,  );
    internal void ( ,  , RectangleF& , string ,  , float , float ,  );
    private  ( , string , float , float );
    private static  ( , FontStyle ,  );
    internal void ( ,  , RectangleF& ,  );
    private void ( ,  );
    private static float (string ,  ,  );
    private void ( ,  , SizeF , RectangleF& ,  , float , float ,  );
    internal void ( );
    internal void ( );
    private float (char ,  );
    private void ( , string , float , float , float ,  , RectangleF& , bool ,  );
    internal void ( ,  , RectangleF& ,  );
    internal void ( ,  , string , float , float ,  , RectangleF& ,  );
    internal  ( ,  );
    internal static string (string );
    internal string (string );
    internal void ( );
    private bool (string , string );
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual  ();
}
internal class  : object {
    private [] ;
    public ([] );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual bool ( );
    public sealed virtual bool (int , int ,  );
    public sealed virtual  (int , int );
    public sealed virtual  (int , int ,  );
    public sealed virtual object (int , int ,  );
    public sealed virtual void (int , int , StringBuilder ,  );
}
internal class  :  {
    internal (bool , Boolean[] , float , float ,  , float , Double[] );
    internal virtual void ();
    protected virtual float (double , float );
    protected virtual float (string , float , FontStyle );
    protected virtual float ( ,  );
}
internal class  : object {
    private  ;
    private IDictionary ;
    private  ;
    private IDictionary ;
    private IDictionary ;
    private  ;
    private  ;
    private bool ;
    private  ;
    internal ( ,  , bool );
    public (Stream , Char[] );
    private static  ( );
    protected virtual void ( ,  );
    protected virtual void ( ,  , Char[] , bool );
    public void (Stream , Char[] );
    public  (string );
    public bool (string );
    public bool (string );
    private IDictionary ();
    public IEnumerable ();
    public bool (string );
    public  (string );
    public string ( );
    public [] (string );
    public void (string ,  );
    public void (string ,  , [] );
    public void (string );
    public bool (string , Type );
    public int ();
    public int ();
    public void (Stream , Char[] ,  );
    internal static Byte[] ( , Byte[] , int , Char[] , bool , Byte[] );
    private static Byte[] (bool ,  , Char[] , bool , Byte[] );
}
internal class  : object {
    internal static Color ;
    internal static Color ;
    internal static Color ;
    private static ();
}
internal class  : object {
    internal string ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal Font ;
    internal Color ;
    internal float ;
    internal float ;
    internal float ;
}
internal class  : object {
    private  ;
    private int ;
    private Stream ;
    private  ;
    public ( );
    public ( , int );
    public Stream (Stream );
    public Stream (Stream , Byte[] );
    private void ();
    public sealed virtual void ();
}
internal class  : object {
    private bool ;
    private bool ;
    public (bool );
    public (bool , bool );
    public sealed virtual bool ( , int );
}
internal class  :  {
    internal bool ;
}
internal class  : object {
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private int ;
    private int ;
    private UInt64[] ;
    private UInt64[] ;
    private UInt64[] ;
    private  ;
    private bool ;
    private static ();
    public (int );
    public virtual void (bool ,  );
    internal void (bool , UInt64[] , UInt64[] );
    private void (UInt64[] );
    private void (UInt64[] );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual void ();
    public virtual int (Byte[] , int , Byte[] , int );
    internal int (UInt64[] , UInt64[] );
    internal static ulong (Byte[] , int );
    internal static void (ulong , Byte[] , int );
    private static ulong (ulong , int , ulong );
    private static ulong (ulong , int , ulong );
}
internal class  : object {
    private WorksheetCollection ;
    internal Hashtable ;
    internal Hashtable ;
    private static Regex ;
    internal (Workbook , Hashtable , Hashtable );
    internal static void (List`1<> , Style ,  ,  );
    internal void ( , Style ,  );
    internal static void (string , string , Style ,  , Hashtable );
    internal static string (string );
    internal static void (Style ,  ,  , Hashtable );
    internal static void (Style ,  , Hashtable ,  ,  , Hashtable );
    private static void (Style ,  , Hashtable , Hashtable ,  ,  ,  , Hashtable );
    internal static bool ( , Style ,  );
    internal static bool (string , Font );
    internal static bool (string , Font );
    internal int (string );
    internal Style ( );
    internal int (string , string );
    internal bool (Style ,  );
    internal Style (string );
    internal int ( );
    internal  ( );
    internal static  ( , Hashtable );
    internal static void ( , string , Hashtable );
    internal static void (Hashtable , Hashtable );
    internal static void (Style , Style );
    internal static void ( ,  );
}
internal class  :  {
    internal void ( );
}
internal class  : object {
    []
private  ;
    private Byte[] ;
    []
private  ;
    private ushort ;
    private Byte[] ;
    private ushort ;
    private PivotTable ;
    []
private WorksheetCollection ;
    []
private Worksheet ;
    private PivotField ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private StringBuilder ;
    private int ;
    private int ;
    internal void (WorksheetCollection , Worksheet ,  ,  );
    private void ();
    private void ();
    private void ();
    private string (Byte[] );
    private void ();
    private int (Byte[] , int , Style );
    private void ();
    private void ();
    private void ();
    private void (bool );
    private void ();
    private bool ();
    private void ( );
    [("True")]
private string (Int32& , int );
    [("True")]
private string (Int32& , int );
    private void ();
    private void (bool );
    private void ();
    private void ();
    private void ();
    private string (int );
    private void (int );
    private void ();
}
internal class  : object {
    []
internal Worksheet ;
    internal string ;
    []
internal  ;
    internal string ;
    internal AutoFilter ;
    internal double ;
    internal double ;
    internal bool ;
    internal  ;
    internal PageSetup ;
    internal HorizontalPageBreakCollection ;
    internal VerticalPageBreakCollection ;
    internal Outline ;
    internal Guid ;
    internal short ;
    private int ;
    private int ;
    internal CellArea ;
    private ushort ;
    private byte ;
    internal int ;
    internal  ;
    private int ;
    internal (Worksheet );
    internal  ();
    internal int ();
    internal AutoFilter ();
    internal void (AutoFilter );
    internal PaneCollection ();
    internal void (PaneCollection );
    internal  ();
    internal void ( );
    internal PageSetup ();
    internal HorizontalPageBreakCollection ();
    internal void (HorizontalPageBreakCollection );
    internal VerticalPageBreakCollection ();
    internal void (VerticalPageBreakCollection );
    internal Outline ();
    internal void (Outline );
    public Guid ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal ushort ();
    internal void (ushort );
    internal bool ();
    internal void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal bool ();
    internal void (bool );
    public int ();
    public void (int );
    public ViewType ();
    public void (ViewType );
    internal byte ();
    internal void (byte );
    public VisibilityType ();
    public void (VisibilityType );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public Color ();
    public void (Color );
    internal void (int );
    internal int ();
    internal Color ();
    internal void (Color );
    internal int ();
    internal void (int );
}
internal class  :  {
    internal (TableStyleCollection );
}
internal class  :  {
    public static int ;
    public static int ;
    private Byte[] ;
    private  ;
    public ( );
    public (Byte[] , int );
    public (Stream );
    private static ();
    public void (Byte[] , int );
    public Byte[] ();
    public  ();
    public void ( ,  , Byte[] , Byte[] , int , int , Byte[] , int );
    public void ( , Byte[] , Byte[] , int , int , Byte[] , int );
}
[AttributeUsageAttribute("192")]
internal class  : Attribute {
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    internal  ();
    internal  ();
    internal  ();
    internal void ( );
    internal void (Color , Color , HatchStyle );
    public Brush ( , GraphicsPath , float , float );
    public Brush (RectangleF );
    public Brush (GraphicsPath , bool , float );
    public Brush (GraphicsPath ,  , bool , float );
}
internal class  : object {
    private long ;
    private long ;
    private long ;
    public long SubscriptionId { get; public set; }
    public long ProcessedMB { get; public set; }
    public long CreditsUsed { get; public set; }
    [CompilerGeneratedAttribute]
public long get_SubscriptionId();
    [CompilerGeneratedAttribute]
public void set_SubscriptionId(long );
    [CompilerGeneratedAttribute]
public long get_ProcessedMB();
    [CompilerGeneratedAttribute]
public void set_ProcessedMB(long );
    [CompilerGeneratedAttribute]
public long get_CreditsUsed();
    [CompilerGeneratedAttribute]
public void set_CreditsUsed(long );
}
[]
internal class  : Attribute {
}
internal class  : object {
    []
private object ;
    []
internal Workbook ;
    internal string ;
    private Bevel ;
    private Bevel ;
    private PresetMaterialType ;
    internal  ;
    internal  ;
    internal int ;
    internal int ;
    private ArrayList ;
    internal int ;
    internal (Workbook , object );
    internal Bevel ();
    public Bevel ();
    internal Bevel ();
    internal Bevel ();
    public PresetMaterialType ();
    public void (PresetMaterialType );
    internal CellsColor ();
    internal void (CellsColor );
    internal CellsColor ();
    internal void (CellsColor );
    public double ();
    public void (double );
    public double ();
    public void (double );
    internal ArrayList ();
    internal void (ArrayList );
    internal double ();
    internal void (double );
    internal void ( );
    internal bool ( );
}
internal class  :  {
    internal (string );
}
internal abstract class  : object {
    protected  ;
    public virtual void ( );
    public virtual Byte[] ( , Byte[] );
    public abstract virtual Byte[] ( ,  , Byte[] );
    public virtual bool (Byte[] ,  , Byte[] );
    public abstract virtual bool ( , Byte[] ,  , Byte[] );
    public virtual  ( );
    public abstract virtual  ( ,  );
    public virtual  ( );
    public abstract virtual  ( ,  );
    public abstract virtual bool ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    public static void (RectangleF& , PointF );
    public static void (RectangleF& , float );
    public static void (RectangleF& , float );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    public virtual  ( );
    public virtual  ( ,  );
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    public object ;
    public CellValueType ;
    public (CellValueType , object );
    public (Cell );
    public virtual string ToString();
}
internal class  :  {
    public ( );
}
internal class  : object {
    private  ;
    private  ;
    public ( , Stream );
    public sealed virtual int (int );
    public sealed virtual int (int );
    public sealed virtual Stream ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  : object {
    internal static int ;
    private MemoryStream ;
    private byte ;
    private byte ;
    private Byte[] ;
    private int ;
    private MemoryStream ;
    private  ;
    private  ;
    internal ( , Byte[] , bool , bool );
    internal bool (Byte[] );
    internal bool (Byte[] , string );
    internal  (Int32[] ,  );
    internal void (bool );
    internal void (string , bool );
    private void ();
    internal MemoryStream ();
    internal byte ();
    internal byte ();
    internal MemoryStream ();
    internal  ();
    internal  ();
}
internal class  :  {
    private static Double[] ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    private bool ;
    private  ;
    private char ;
    internal ( ,  ,  );
    private static ();
    internal  ();
    internal  ();
    public virtual  ( , TypeCode , object ,  );
    private  ( , double ,  );
    private string ( , double , int );
    private void (StringBuilder , int );
    private void (StringBuilder , int );
    private void (StringBuilder , int );
    public virtual  ();
    public virtual NumberCategoryType ();
    private void ( );
    public virtual bool ( );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal bool ();
    internal void (Chart , Title );
    internal void (Chart );
    internal void (Chart , Legend );
    internal void (Chart , DataLabels );
    internal void (Chart , DataLabels );
    internal void (Chart , DisplayUnitLabel );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  (int );
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    protected virtual  ( , UInt32[] );
    protected virtual  ();
    protected virtual  (bool );
}
internal enum  : Enum {
    public int value__;
    public static  Auto;
    public static  None;
    public static  Rle;
    public static  Lzw;
    public static  Flate;
    public static  Jpeg;
    public static  Ccitt3;
    public static  Ccitt4;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    private static ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private int ;
    private Byte[] ;
    private int ;
    []
private  ;
    []
private Worksheet ;
    private  ;
    internal (Worksheet );
    internal void ( );
    private void ();
    private void ();
    private void ();
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private GraphicsPath ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private static Byte[] ;
    [DebuggerBrowsableAttribute("0")]
public static  ;
    public (PointF , PointF , PointF , PointF , bool );
    private static ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
    public void ( ,  , Brush ,  );
    public bool (PointF );
    public static bool (PointF , PointF[] );
    private static bool (PointF , PointF , PointF );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal (Stream , int , int );
    private static ();
    internal int ();
    public virtual int ReadByte();
    public virtual int Read(Byte[] , int , int );
    internal void (Byte[] );
    internal Byte[] ();
}
internal abstract class  : object {
    private static double (Double[] , int , Double[] , int , double );
    private static double (double );
    private static double (double );
    private static double (double );
    private static bool (double );
    public static double (double );
    public static double (double );
}
internal class  :  {
    []
internal  ;
    internal string ;
    internal Byte[] ;
    internal Range ;
    internal Range ;
    internal string ;
    internal ( );
    internal virtual void ();
    internal virtual void ( , CopyOptions );
    internal virtual void (int , int , Worksheet );
    internal virtual void (int , int , Worksheet );
    internal virtual void (int , int , Worksheet );
    internal void ( );
    internal virtual PivotTableSourceType ();
    internal virtual  ( ,  );
    internal Byte[] ();
    internal void (Byte[] );
    internal Range ();
    internal virtual String[] ( );
    internal virtual void (String[] ,  );
    internal string ( );
    internal static String[] (Workbook , Hashtable , string , string , string );
    internal void (string , string ,  );
}
internal abstract class  : object {
    public static string (string );
    internal static bool (string , String[] );
    public static string (Byte[] );
    public static Byte[] (Char[] );
    public static Byte[] (string );
    public static string (Byte[] );
    public static Byte[] (Char[] );
    public static Byte[] (string );
    public static string (Byte[] );
    public static Byte[] (Char[] );
    public static Byte[] (string );
}
internal class  : object {
    internal static  ;
    internal static  ;
    internal static  (int , string , string );
    internal static  ( ,  , object );
    private static void ( ,  );
    private static void ( ,  );
    private static  ( ,  );
    internal static void (Byte[] , string ,  );
    private static  ( ,  );
    private static ArrayList ( );
    private static  ( ,  );
    private static  ( ,  );
    private static  ( ,  );
    private static void ( ,  ,  );
    private static void ( ,  );
    private static  (string ,  , int , bool );
}
internal class  : object {
    internal static Style ;
    private static ();
    internal static void ( , Stream ,  , ImageOrPrintOptions , Int32[] );
    internal static string (TextAlignmentType );
    internal static string (TextAlignmentType );
    internal static string (FontUnderlineType );
    internal static string (TextStrikeType );
    internal static string (CellBorderType );
    internal static string (BorderType );
    internal static string (CellBorderType );
}
internal interface  {
}
internal class  :  {
    public ( );
    public virtual  ( );
    public sealed virtual bool ( );
    public sealed virtual bool ( );
    public sealed virtual  ();
    public sealed virtual  (bool );
}
internal class  : object {
    private Byte[] ;
    private Int32[] ;
    protected static Hashtable ;
    private static ();
    internal ArrayList ( , bool );
    internal void (ArrayList , bool , bool );
    private static bool (char );
    private static bool (char );
    private void (StringBuilder , ArrayList ,  );
    public int (Char[] , int , int );
    public static bool (char );
    public void (Char[] );
    internal void (int , int );
    internal void (int , int );
}
internal abstract class  : object {
    private static  ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32[] (UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] , UInt32[] );
    private static void (UInt32[] , int , UInt32[] , UInt32[] );
    private static void (UInt32[] , UInt32[] , int , UInt32[] , Int32& );
    private static int (UInt32 );
}
internal class  : object {
    internal string ;
    internal Byte[] ;
    internal string ;
    internal ( );
    internal (string , Byte[] );
    internal (Byte[] );
    internal virtual int ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  : object {
    private string ;
    private int ;
    private char ;
    private StringBuilder ;
    public (string );
    public (string , char );
    public bool ();
    public string ();
}
internal class  : object {
    []
private Cells ;
    []
private RowCollection ;
    []
private  ;
    private  ;
    private int ;
    private int ;
    private Row ;
    private Cell ;
    []
private  ;
    private  ;
    private  ;
    []
private  ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    internal (Worksheet );
    internal (Worksheet , CellArea );
    internal (Worksheet , int , int , int , int );
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual Row ();
    public sealed virtual Cell ();
    public sealed virtual  ();
    public sealed virtual  ();
}
internal class  : object {
    internal double ;
    internal Workbook ;
    internal Hashtable ;
    internal Hashtable ;
    internal  ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal  ;
    internal Hashtable ;
    internal Hashtable ;
    internal ArrayList ;
    internal  ;
    internal string ;
    internal Hashtable ;
    internal OdsLoadOptions ;
    internal OdsGeneratorType ;
    internal Hashtable ;
    internal  ;
    internal  ;
    internal string ;
    internal  ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal List`1<> ;
    internal (Workbook , LoadOptions );
    internal void (string ,  );
    internal  ();
    internal void (bool );
    internal Stream (string );
    internal int (string );
}
internal class  : object {
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    internal static int ;
    internal static int ;
    private Int32[] ;
    private UInt32[] ;
    private bool ;
    private Byte[] ;
    private int ;
    private static ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    public virtual int ();
    internal virtual void (Byte[] );
    internal virtual int (Byte[] , int , Byte[] , int );
    internal virtual int (Byte[] , int , Byte[] , int );
    internal static UInt32 (UInt32 , UInt32 , int );
    internal static UInt32 (UInt32 , UInt32 , int );
    internal static UInt32 (UInt32 , UInt32 , int );
    internal void (UInt32 , UInt32 , UInt32[] );
    internal void (UInt32 , UInt32 , UInt32[] );
    internal static void (UInt32 , Int32[] , int );
    internal static UInt32 (Int32[] , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public object Current { get; }
    public ( );
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
    public virtual void Reset();
}
internal class  :  {
    internal void (Protection );
}
internal class  : object {
    internal static void (VbaModule , StringBuilder );
    internal static string (VbaModule );
    internal static void (StringBuilder , string , string );
    []
internal static Stream (Stream , int );
    []
internal static Stream (Stream , int );
    internal static string (Byte[] , string );
    internal static Byte[] (string );
    private static Byte[] (Byte[] , string );
    private static Byte[] (Byte[] );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal bool ;
    internal virtual void ();
    internal virtual int ();
    internal virtual void (int );
    internal virtual int ();
    internal virtual void (int );
    internal virtual void ( , int , int );
    internal virtual void ();
    internal void ( , int , int , bool );
    internal void ( );
    internal virtual  (int );
    internal virtual void ( , int );
    internal virtual void ();
    internal  ( ,  );
}
internal class  : object {
    internal string ;
    internal string ;
    internal (string , string );
}
internal class  : object {
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    private static void (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] );
    public static UInt32 (UInt64[] );
    protected static void (UInt64[] );
    protected static void (UInt64[] , UInt64[] );
    protected static void (UInt64[] , UInt64[] , UInt64[] );
    protected static void (ulong , ulong , UInt64[] , int );
    protected static void (UInt64[] , UInt64[] );
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal ushort ;
    internal ushort ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal ushort ;
    internal ushort ;
    internal short ;
    internal short ;
    internal short ;
    internal ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  : object {
    public static void (String[] );
}
internal abstract class  :  {
    protected  ;
    public ( ,  ,  );
    protected ( , int ,  );
    public virtual bool ();
    public virtual  ( );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ( , Int32[] );
    public virtual bool ( , Int32[] );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual void (bool );
    public virtual void ( );
}
internal class  :  {
    []
private Worksheet ;
    private int ;
    internal int ;
    internal int ;
    []
private Validation ;
    private int ;
    internal (Worksheet );
    internal bool (Validation );
    internal bool ();
    private int (Byte[] );
    internal Validation (Byte[] , int );
    private CellArea (Byte[] , int );
    [("True")]
private string (Byte[] , Int32& , int );
}
internal class  : object {
    internal int ;
    internal string ;
    internal long ;
    internal int ;
    private int ;
    internal  ( );
    internal void ( );
    internal int ();
    internal int ();
}
internal class  : object {
    private static string ;
    private static ();
    internal static void (string , string ,  );
    private static String[] (string , string );
    private static string (string , string , string );
}
internal class  : object {
    private string ;
    private BigInteger ;
    public (string , BigInteger );
    public virtual string ();
    public virtual BigInteger ();
}
internal class  :  {
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    private byte ;
    internal (int , int , CellArea );
    internal (int , int , CellArea , Cells , bool , bool , string , string , bool , bool );
    internal (int , int , CellArea , Cells , bool , bool , int , int , int , int , bool , bool );
    internal virtual  ();
    internal void ( );
    internal virtual bool ();
    internal virtual bool (bool );
    internal virtual bool (bool );
    internal virtual  (int , int , WorksheetCollection , WorksheetCollection , CopyOptions );
    internal byte ();
    internal void (byte );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal virtual void (int , int , int , int );
    internal virtual void (int , int , int , int );
}
internal class  : object {
    internal Int32[] ;
    internal  ;
    []
internal  ;
    internal ( , int );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  :  {
    internal int ;
    internal (int );
    internal virtual  ();
}
internal class  : ValueType {
    internal static void ( ,  ,  , Rectangle );
    internal static void ( , ArrayList ,  );
    [("True")]
private static void ( , int );
    internal static void ( ,  ,  ,  );
}
internal class  : object {
    private [] ;
    internal ([] );
    public  ( );
    public  ();
    internal [] ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  :  {
    private int ;
    private int ;
    internal ( , int , int , int , int , int );
    public virtual int ();
    public virtual void (int );
    public virtual void (int );
    public virtual void ();
    protected virtual void (int );
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    [("True")]
internal void ( );
    [("True")]
internal void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , bool );
    [("True")]
private void ( , bool );
    [("True")]
private void ();
    [("True")]
private void (Font );
}
internal class  : object {
    private static Int32[] ;
    private  ;
    private static ();
    public sealed virtual void ( );
    public sealed virtual  ();
    private static BigInteger (int , int ,  );
    private static IList (IList ,  );
    private static IList (int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    internal static ArrayList ( ,  ,  , Rectangle , float , double , int );
    private static bool ( );
    private static ArrayList ( ,  ,  , Rectangle , float , float );
    internal static ArrayList ( ,  ,  , Rectangle , float , int );
    private static ArrayList ( ,  ,  , Rectangle , float ,  );
    internal static ArrayList ( ,  ,  , Rectangle , float , int );
    private static ArrayList ( ,  ,  , Rectangle , float ,  );
    internal static RectangleF (PointF[] );
    private static void ( ,  , IList , IList , ArrayList , float , bool ,  , ArrayList ,  , Rectangle );
    private static bool (int , ArrayList );
    private static void ( , IList , IList , IList , float , bool ,  , ArrayList ,  , Rectangle );
    internal static ArrayList ( ,  , float , double , int );
    private static ArrayList ( ,  , float , double );
    internal static ArrayList ( ,  , float , double , int , bool );
    internal static ArrayList ( ,  , float , double , bool );
    private static void ( ,  ,  ,  , IList , ArrayList );
    private static bool (PointF , PointF , PointF , PointF , PointF& );
    private static void ( ,  ,  , PointF[] );
    private static void ( ,  ,  , PointF[] , PointF[] , PointF[] , PointF[] );
    private static PointF[] ( , float , float , float ,  );
    private static void ( ,  , IList , [] , IList , ArrayList[] );
    private static bool (IList , IList , int );
    private static bool (IList , IList , int , PointF[]& );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private VbaProject ;
    private Byte[] ;
    private  ;
    public (VbaProject , Byte[] );
    internal  ();
    public bool ();
    private void (Byte[] );
    private bool (Byte[] );
}
internal class  :  {
    internal (PivotTableFormat );
}
internal class  : object {
    private  ;
    private BigInteger ;
    public ( , BigInteger );
    public  ();
    public BigInteger ();
}
internal class  : object {
    public static int ;
    public static int ;
    public static int ;
    public static string ;
    public static int ;
    private static ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal abstract class  :  {
    public virtual string ToString();
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream ,  ,  , bool );
    private void ();
    protected virtual void Dispose(bool );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual void SetLength(long );
    public virtual void Write(Byte[] , int , int );
    public virtual void Flush();
    public virtual long get_Position();
    public virtual void set_Position(long );
    private int (Byte[] , int , int );
    private void (int );
    private int (int );
    public virtual int Read(Byte[] , int , int );
    public virtual long Seek(long , SeekOrigin );
}
internal class  :  {
    internal virtual  ();
}
internal class  :  {
    internal ( );
}
internal class  : object {
    protected byte ;
    protected object ;
    public (byte , object );
    public virtual byte ();
    public virtual object ();
    public virtual  ();
    public virtual void (Stream );
    public static  (Stream );
    protected static bool (byte , object );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , object , int );
    internal  ();
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal virtual void ();
}
internal class  : object {
    private  ;
    private  ;
    public ( );
    public  ();
    public  (int );
}
internal class  : object {
    private  ;
    private int ;
    private int ;
    internal ( );
    public sealed virtual void ();
    public sealed virtual int ();
}
internal class  :  {
    internal ( );
}
internal class  : object {
    public sealed virtual void ( );
    public sealed virtual string ();
    public sealed virtual int (Byte[] , int );
    public sealed virtual int (Byte[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  : SortedList {
    [DebuggerBrowsableAttribute("0")]
private Guid ;
    public (Guid );
    public void (string , MemoryStream );
    public void (string ,  );
    public MemoryStream (string );
    public MemoryStream (string );
    public  (string );
    public  (string );
    public Guid ();
    public void (Guid );
}
internal class  : object {
    internal byte ;
    public void ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
}
internal class  : object {
    private static  ;
    internal bool ;
    internal string ;
    internal Byte[] ;
    internal int ;
    internal bool ;
    internal Hashtable ;
    internal [] ;
    internal  ;
    internal List`1<LineFormat> ;
    internal List`1<FillFormat> ;
    internal (bool );
    [("False")]
internal void ();
    internal void ();
    internal void ( );
    internal void (string , Color[] );
    internal bool ();
    internal List`1<LineFormat> ();
    internal List`1<FillFormat> ();
    internal LineFormat ();
    internal LineFormat ();
    internal LineFormat ();
    internal Color (int );
    internal Color (string );
    internal bool ( );
    internal bool ( , int );
    internal void ();
    private  (string , int );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    []
private  ;
    private bool ;
    public ( ,  );
    public ( ,  , bool );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    private void (PointF );
    private void (PointF );
    private void (PointF[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    public GraphicsPath (float , float , float , float );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    internal int ;
    internal string ;
    internal bool ;
    internal bool ;
    internal int ;
    internal void ( );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal (int ,  ,  );
    internal virtual void ( );
}
internal abstract class  : object {
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal RectangleF ;
    internal  ;
    private Font ;
    private Font ;
    private string ;
    private Color ;
    private  ;
    private float ;
    private TextAlignmentType ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    private EquationNodeParagraph ;
    private Bullet ;
    private bool ;
    private int ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private double ;
    internal  ;
    internal (string , Font , Color ,  ,  , TextAlignmentType );
    public TextAlignmentType ();
    public void (TextAlignmentType );
    public string ();
    public void (string );
    public Font ();
    public void (Font );
    public float ();
    public void (float );
    public Color ();
    public void (Color );
    public  ();
    internal bool ();
    internal bool ();
    internal Font ();
    internal void (Font );
    internal bool ();
    internal EquationNodeParagraph ();
    internal void (EquationNodeParagraph );
    internal Bullet ();
    internal Bullet ();
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal int ();
    internal void (int );
    internal float ();
    internal int ();
    internal void (int );
    internal float ();
    internal void ( );
    internal static float ( , float );
    internal double ();
    internal void (double );
}
internal class  :  {
    private string ;
    public (Byte[] );
    public (string );
    public (string , bool );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    public Byte[] ();
    internal virtual void ( );
    protected virtual bool ( );
    public static bool (string );
}
internal class  : object {
    internal static  ;
    private static ();
    public sealed virtual double (double , double );
    public sealed virtual double (double , double );
    public sealed virtual double (double , double );
    public sealed virtual double (double , double );
}
internal class  : object {
    internal ushort ;
    internal string ;
    []
internal PivotField ;
    internal (PivotField );
    internal void ( );
    internal short ();
}
internal class  : object {
    public Byte[] ;
    public int ;
    public int ;
    public long ;
    public Byte[] ;
    public int ;
    public int ;
    public long ;
    public string ;
    internal  ;
    internal  ;
    internal int ;
    public long ;
    internal  ;
    public int ();
    public int (bool );
    public int (int );
    public int (int , bool );
    public int (int );
    public int ();
    public int ();
    public int (Byte[] , int );
    public int (int );
    public int (int , bool );
    public int (int , int );
    public int (int , int , bool );
    public int (int );
    public int ();
    public int (int , int );
    public int (Byte[] , int );
    internal void ();
    internal int (Byte[] , int , int );
    public void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private SparklineGroup ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal (SparklineGroup , [] , int , int ,  );
    internal (SparklineGroup , [] , int , int );
    public  ();
    public void ();
    public ArrayList (Double& , Double& );
    private void (ArrayList , ArrayList );
    private PointF[] (IList );
    private void ( , Color );
    private void ( , Color );
    private void ( , Color );
    public sealed virtual void Dispose();
    [("True")]
protected virtual void (bool );
    protected virtual override void Finalize();
}
internal class  : IOException {
    public (string );
    public (string , Exception );
}
internal class  : object {
    internal int ;
    internal Int32[] ;
    internal Int32[] ;
    internal int ;
    internal Double[] ;
    internal Int32[] ;
    internal int ;
    internal String[] ;
    internal Int32[] ;
    internal Int32[][] ;
    internal  ;
    internal int ;
    internal Int32[][] ;
    internal int ;
    internal static  ( ,  , int , int , CellArea , bool , bool );
    private  ( ,  , int , int , CellArea , bool , bool );
    private  (int );
    private void (int , int );
    private void (int , int );
    private int (int , bool );
    private int (bool , bool , bool );
    private int (bool , bool , bool , bool );
    private void (int , int );
    private void (int , int );
}
internal class  : object {
    internal char ;
    internal char ;
    internal char ;
    internal int ;
    internal int ;
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public Byte[] ();
    public int ();
    public  ();
    public DateTime ();
    public [] ();
    public  ();
    protected virtual  ();
    public string ();
    public string ();
    public  ();
    public Byte[] ();
    private IList ();
    public [] ();
    public  (string );
    public bool ( );
    public Byte[] ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    internal int ;
    internal int ;
    internal string ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    public int ;
    public (int , string , int , int , int , int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public (BigInteger );
    public (int , int );
    public (int , int , int , int );
    private ( );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal interface  {
    public abstract virtual bool ();
}
internal class  : object {
    internal char ;
    internal List`1<> ;
    internal (char );
    internal void ( );
}
internal class  :  {
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private bool ;
    public virtual void (bool ,  );
    public virtual string ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
}
internal class  : object {
    internal static void ( , int , bool );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal Worksheet ;
}
internal class  : object {
    public static  ( , [] ,  ,  , int );
    internal static  (double , double );
    public static  ( , [] ,  );
    public static  ( , [] ,  );
    public static  ( , [] ,  ,  , int );
    public static  ( , [] ,  , int );
    public static  ( , [] ,  , int );
    public static  ( ,  ,  );
    public static  ( , [] ,  , int , int ,  );
    public static  ( , [] ,  , int );
    public static  ([] ,  );
    public static  ( ,  );
    public static  ( ,  );
    public static  ( ,  ,  );
    public static  ( ,  );
    public static  ( ,  );
    public static  ( ,  );
    public static  ( ,  );
    public static  ( ,  );
    public static  (bool ,  ,  );
    public static  ( ,  ,  );
    public static  ( ,  );
    public static  ( , [] ,  );
    public static  ([] ,  , bool );
    public static  ( ,  );
    public static  ( ,  ,  ,  );
}
internal class  : object {
    []
private Workbook ;
    private  ;
    private Hashtable ;
    []
private  ;
    private string ;
    private bool ;
    internal (Workbook ,  , string , bool );
    internal void ();
    internal void (string , Shape );
    private bool (Shape ,  );
    internal static Hashtable ( , string );
    internal static  ( , string );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  :  {
    private Byte[] ;
    public (Byte[] );
    public Byte[] ();
    public virtual Stream ();
    public virtual int ();
    public virtual bool ();
    public virtual string ToString();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public (bool );
    public (int );
    public static  ( , bool );
    public static  (object );
    public static  ( );
    public bool ();
    public BigInteger ();
    public virtual  ();
    public virtual string ToString();
}
internal class  :  {
    public ( ,  ,  , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool (int , int );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    internal void ( );
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    internal void ( );
    private void ( );
    private void ( );
}
internal class  :  {
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual int ();
    public abstract virtual void ( , Byte[] , int );
}
internal class  :  {
    private  ;
    private Byte[] ;
    private Byte[] ;
    internal ( );
    public virtual bool ( );
    public virtual bool (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool ();
    public virtual  ();
}
internal class  : object {
    private bool ;
    private List`1<> ;
    private int ;
    private int ;
    internal (bool , int );
    internal void (object , int );
    private void (double , int );
    private void ();
    private void ( , int );
    internal Hashtable ();
}
internal class  : object {
    private static IDictionary ;
    private static ();
    public static  ( );
    public static  (string );
    public static string ( );
    public static Byte[] (string ,  , Byte[] );
    public static Byte[] ( );
    public static Byte[] ( , Byte[] );
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual RevisionType ();
}
internal class  : object {
    private  ;
    private bool ;
    private bool ;
    internal Byte[] ;
    protected internal ( , bool , bool , Byte[] );
    public  ();
    public bool ();
    public bool ();
    public Byte[] ();
    public void (Stream );
}
internal class  :  {
    internal  ;
    internal  ;
    private int ;
    public (int , int , int , int ,  ,  );
    private ( , Cells );
    public virtual  (Cells );
    public virtual void ( );
    public virtual void (int , int );
    internal virtual int ();
    internal virtual int (int );
    internal virtual int (int );
    internal virtual int (Byte[] , int , int );
    protected virtual void (int , int );
    protected virtual void (int ,  );
    public virtual  (int ,  , int );
    public virtual void (int ,  , int );
    internal virtual int (Byte[] );
    public virtual int (int );
    public virtual  (int );
    public virtual  (object );
    public virtual int (int );
    public virtual void (int , int );
    public virtual byte (int , int );
    public virtual void (int , int , byte );
    public virtual int (int );
    public virtual void (int , int );
    public virtual int (int ,  , int );
    public virtual int (int ,  , int , int , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    internal (string , string );
    private static ();
    internal ArrayList ();
    internal void (ArrayList );
    internal virtual void ( );
}
internal interface  {
    public abstract virtual object ();
    public abstract virtual int (int );
    public abstract virtual  (Stream );
}
internal class  : object {
    []
private Workbook ;
    internal (Workbook );
    internal void (string , Stream , LoadOptions , FileFormatType );
    private Int32[] (Byte[] );
}
internal class  : object {
    private static [] ;
    public Point[] ;
    public UInt16[] ;
    public [] ;
    public Int32[] ;
    public [] ;
    public int ;
    public int ;
    public Point[] ;
    public [] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Int32[] ;
    private static Point[] ;
    internal (Point[] , UInt16[] , [] , Int32[] , [] , int , int , int , int , Point[] );
    internal (Point[] , UInt16[] , [] , Int32[] , [] , int , int , int , int , Point[] , [] );
    private static ();
    internal static  ( );
    internal float (short , Int32[] , Byte& );
}
internal class  : object {
    internal bool ;
    internal bool ;
}
internal class  :  {
    internal int ;
    internal byte ;
    internal byte ;
    internal char ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal byte ;
    internal byte ;
    internal byte ;
    internal byte ;
    internal byte ;
    internal string ;
    internal string ;
    internal int ;
    internal int ;
    internal static int ( );
    private int ( );
    internal bool ( );
    internal void ( );
    internal virtual void ( , CopyOptions );
}
internal class  :  {
    internal (string );
}
internal class  :  {
    public static int ;
    private Byte[] ;
    public (Byte[] , int );
    public (Stream );
    private static ();
    public void (Byte[] , int );
    public Byte[] ();
}
internal class  : object {
    private bool ;
    private bool ;
    public Hashtable ;
    public Hashtable ;
    private  ;
    private bool ;
    public ( );
    public ( , bool );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ( );
    [("True")]
public virtual void ();
    public virtual  ();
    public  ();
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public void ();
    public bool ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private SecureString ;
    public sealed virtual int ();
    public sealed virtual  ();
    public sealed virtual void (int , Byte& );
    public sealed virtual void (int , Byte& );
    private static char (byte , int );
    private static byte (char , int );
    public sealed virtual void ();
    public sealed virtual void Dispose();
}
internal class  : object {
    internal string ;
    []
internal object ;
    private  ;
    private GlowEffect ;
    internal ShadowEffect ;
    internal ReflectionEffect ;
    private int ;
    internal (object );
    internal Workbook ();
    internal bool ();
    internal  ();
    internal void ( );
    internal  ();
    internal GlowEffect ();
    internal void (GlowEffect );
    internal GlowEffect ();
    internal void ();
    internal ShadowEffect ();
    public bool ();
    internal void ();
    internal void ();
    internal bool ();
    internal void (bool );
    internal ReflectionEffect ();
    internal void (ReflectionEffect );
    internal int ();
    internal void (int );
    public double ();
    public void (double );
    internal void ( , CopyOptions );
    internal bool ( );
}
internal class  :  {
    []
private Workbook ;
    []
private RevisionDefinedName ;
    internal (RevisionDefinedName , Workbook );
    private void ();
    private int (string );
}
internal class  : object {
    private  ;
    private  ;
    private Byte[] ;
    public ( , bool );
    public ( );
    public  (Byte[] );
    public  ( ,  , bool );
}
internal class  : Brush {
    [DebuggerBrowsableAttribute("0")]
private TextureBrush ;
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    [DebuggerBrowsableAttribute("0")]
private Image ;
    public (Image );
    public (Image , WrapMode );
    public (Image , WrapMode , float , float , float , float , float , float );
    public (Image , RectangleF );
    public (Image , Rectangle );
    protected virtual void Dispose(bool );
    public virtual object Clone();
    public Image ();
    public WrapMode ();
    public void (WrapMode );
    public Matrix ();
    public void (Matrix );
    public RectangleF ();
    public sealed virtual Brush ();
}
internal class  : object {
    public static bool ( , GraphicsPath , Single& , Single& );
    public static bool ( , GraphicsPath , Single& , Single& );
    public static bool ( , float , float , Single& , Single& );
}
internal class  :  {
    public (Stream );
    public (Stream , int , bool );
}
internal class  : object {
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    public void (int );
    public void (int , int );
    public sealed virtual bool (int );
    public sealed virtual int ();
}
internal class  : object {
    internal bool ;
    internal bool ;
    internal Hashtable ;
    internal List`1<> ;
}
internal interface  {
    public abstract virtual object ();
    public abstract virtual  ();
}
internal class  :  {
    public virtual Color (Color );
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
}
internal class  : object {
    internal string ;
    internal string ;
    internal  ;
    internal Hashtable ;
    internal ArrayList ;
    []
internal  ;
    internal  ;
    []
internal Chart ;
    internal [] ;
    internal bool ;
    internal ( , SmartArtShape ,  );
    internal ( , Shape , bool );
    internal ( );
    internal ( );
    private void (bool );
    private void (ShapeCollection );
    internal string (TextureFill );
    private ShapeCollection ();
    private [] (ShapeCollection );
    private  (Shape , int );
    private void (FontSettingCollection );
    private void (int );
    internal static string (int , string ,  , Hashtable ,  );
    private void (Picture );
    private void (Picture );
    private void ( );
    private void (Chart );
    internal string (string , string , string );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private byte ;
    public (byte );
    public virtual byte ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  ,  );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public static  ( , string );
    private static void ( , List`1<> );
}
internal class  :  {
}
internal interface  {
    public abstract virtual bool ( );
}
internal class  : object {
    private UInt32 ;
    private  ;
    private Color ;
    private Color ;
    private  ;
    private Brush ;
    private Image ;
    private WrapMode ;
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal Brush (Matrix );
    private sealed virtual override  ();
    public sealed virtual UInt32 ();
    public sealed virtual void (UInt32 );
    internal  ();
    internal void ( );
    internal Color ();
    internal void (Color );
    internal Color ();
    internal void (Color );
    internal  ();
    internal void ( );
}
internal class  : object {
    []
private  ;
    private bool ;
    private  ;
    private Color ;
    private Color ;
    private  ;
    private float ;
    private MsoLineStyle ;
    private LineCapType ;
    private LineJoinType ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    internal bool ;
    private  ;
    private FillType ;
    internal  ;
    internal ( );
    public bool ();
    public void (bool );
    public Color ();
    public void (Color );
    public Color ();
    public void (Color );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public MsoLineStyle ();
    public void (MsoLineStyle );
    public LineCapType ();
    public void (LineCapType );
    public LineJoinType ();
    public void (LineJoinType );
    public float ();
    public void (float );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    internal  ();
    internal FillType ();
    internal void (FillType );
    internal  ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  );
    public ( ,  ,  );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    private int ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    private bool ;
    internal (Cells , int , int ,  );
    private ( );
    internal  ();
    internal void (int );
    internal void ();
    internal bool ();
    internal bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    private bool ();
    private bool ();
    private bool ();
}
internal class  :  {
    internal int ;
    internal (int );
    internal virtual object ();
    internal virtual string ();
    internal virtual  ();
    internal virtual int ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  : object {
    private static  ;
    private static IList ;
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    public static ICollection ( );
    public static void ( );
    internal static string (string );
    internal static int (string );
    internal static  (string );
    internal static  ( );
    internal static  ( );
    internal static IList ( );
}
internal class  : object {
    internal byte ;
    internal byte ;
    internal Byte[] ;
    internal short ;
    internal int ;
    internal byte ;
    internal byte ;
    internal byte ;
    internal void ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public object Current { get; }
    internal (Byte[] , int );
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
    public int ();
    public int ();
    public int ();
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , string );
    private static Byte[] (string );
    public string ();
}
internal class  :  {
    private double ;
    public (double );
    protected virtual bool (double , double );
    protected virtual bool (double );
}
internal class  : object {
    internal static void ( ,  , Hashtable );
    internal static void ( , FillFormat );
    internal static  ( );
    internal static void ( , FillFormat );
    internal static void ( , FillFormat );
    internal static void ( , FillFormat );
    private static void ( , GradientFill );
    private static void ( ,  );
    private static void ( , GradientFill );
    internal static void ( , FillFormat , Hashtable );
    private static void ( , TextureFill );
    private static void ( , TextureFill , Hashtable );
    private static void ( , TextureFill );
    internal static void ( , LineFormat );
    private static void ( , LineFormat );
    private static void ( , LineFormat , bool );
    internal static void (string ,  );
    internal static void ( ,  );
    internal static void ( , ThreeDFormat );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    internal static void (ThreeDFormat );
    internal static void (string ,  );
    internal static void ( ,  );
    internal static void ( , ThreeDFormat );
    private static void ( , ThreeDFormat , bool );
    private static void ( , Bevel );
    internal static void ( ,  );
    internal static void (string ,  );
    internal static void ( ,  );
    private static void ( , ReflectionEffect );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( , GlowEffect );
    private static void ( ,  );
    private static string ( );
    internal static void ( , Shape );
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    protected  ;
    [ObsoleteAttribute("Use constructor taking order/cofactor")]
public (int , int , BigInteger , BigInteger );
    public (int , int , BigInteger , BigInteger , BigInteger , BigInteger );
    [ObsoleteAttribute("Use constructor taking order/cofactor")]
public (int , int , int , int , BigInteger , BigInteger );
    public (int , int , int , int , BigInteger , BigInteger , BigInteger , BigInteger );
    protected (int , int , int , int ,  ,  , BigInteger , BigInteger );
    protected virtual  ();
    public virtual bool (int );
    protected virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ();
    public int ();
    public bool ();
    public int ();
    public int ();
    public int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    private int ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ArrayList ;
    private ArrayList ;
    private Hashtable ;
    private SizeF ;
    public ( ,  );
    public void ();
    public void (float , float );
    public void ();
    public void ( );
    public void (SizeF );
    private void ( );
    private void ( );
    private void ();
    private void ();
    private void ();
    public  ();
    public  ();
    public void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private bool ;
    private bool ;
    private  ;
    private bool ;
    private bool ;
    private  ;
    public ( , bool , bool ,  , bool , bool );
    private ( );
    public static  ( , bool );
    public static  (object );
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public  ();
    public  ();
    public virtual  ();
    public virtual string ToString();
    private void (StringBuilder , string , string , string );
}
internal static class  : object {
}
internal class  : object {
    internal UInt32 ;
    internal string ;
    internal static List`1<> ( );
    internal static  ( );
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private int ;
    private UInt64[] ;
    private UInt64[] ;
    private UInt64[] ;
    private ulong ;
    private int ;
    private Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    public ( );
    public (int );
    private static ();
    private void ( );
    public virtual string ();
    public virtual int ();
    public virtual int ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    protected virtual void (Byte[] , int );
    private void (UInt64[] );
    private void (UInt64[] );
    private static ulong (ulong );
    private void (UInt64[] );
    private static ulong (int , ulong );
    private void (UInt64[] );
    private void (UInt64[] );
    public virtual  ();
    public virtual void ( );
}
internal class  : object {
    private  ;
    private  ;
    public ( );
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    internal ushort ();
    internal void (ushort );
    internal ushort ();
    internal void (ushort );
    internal int ();
    internal void (int );
    internal virtual void ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (Worksheet );
    internal int ();
    internal int ( );
    public  (int );
    internal void (CellArea , int , ShiftType );
}
internal class  :  {
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  : object {
    []
internal  ;
    private int ;
    []
internal Shape ;
    internal string ;
    []
internal  ;
    internal  ;
    internal ( );
    private void ( , string );
    private void ( , string );
    internal void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( , string );
    internal void ( );
    private void ( );
    [("True")]
private void ( );
    internal static bool (Shape );
    internal virtual void ( );
    private void ( );
    [("True")]
internal void ( );
    private string (string , bool , bool , bool );
    internal virtual void ( , bool , bool , bool );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( , MsoFormatPicture );
    [("True")]
private void ( , string );
    private void ( , ShapePathPointCollection );
    private void ( , ShapePathPoint );
    [("True")]
private void ( );
    [("True")]
private void ( , ShapeGuide );
    [("True")]
internal void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( );
    private static bool (ShapeCollection , Shape , string );
    private bool ();
    internal virtual void ( , string , bool );
    private void ( , bool );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
internal static void ( , Shape , bool );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  :  {
    private bool ;
    internal ( );
    public virtual void ( );
    internal bool ();
    internal void (bool );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private double ;
    public virtual void ();
    public virtual bool (double , double );
    public virtual bool (double , double );
    public virtual  (double , double );
    public virtual  (double , double , int );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal string ;
    internal string ;
}
internal class  :  {
    private  ;
    internal ( );
    public (string ,  );
    public (string ,  );
    public string ();
    public [] ();
    public virtual  ();
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal static  ( );
}
internal class  : object {
    private  ;
    private int ;
    private Style ;
    internal ( );
    public sealed virtual bool ();
    public sealed virtual Style (int );
    public sealed virtual void (int , Style );
    public sealed virtual Style (string );
    public sealed virtual int (string );
    public sealed virtual int (int );
    public sealed virtual int ();
    public sealed virtual int (Style );
    public sealed virtual int (Style , CopyOptions );
    public sealed virtual int (Style , bool , CopyOptions );
}
internal class  : object {
    private  ;
    internal ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal static Byte[] (WorksheetCollection , int , CellArea );
}
internal class  : object {
    internal static Bitmap (Bitmap );
    internal static Byte[] (Byte[] , int , int );
    internal static Bitmap (Bitmap );
    internal static Bitmap (Bitmap );
    internal static Byte[] (Byte[] , int , int );
    private static Byte[] (Byte[] );
    private static Byte[] (Byte[] , int , int , int );
    private static void (Byte[] , int , int , int , Byte[] );
    private static Byte[] (Byte[] , int , Int32[] );
    private static byte (byte , int , int );
}
internal class  : IOException {
    public (string );
    public (string , Exception );
}
internal enum  : Enum {
    public UInt32 value__;
}
internal class  : object {
    internal int ;
    internal bool ;
    internal string ;
    internal ArrayList ;
    internal ArrayList ;
    internal bool ();
    internal ArrayList (int );
    internal double ();
    internal  ( ,  , bool );
    internal ArrayList ();
    internal ArrayList ();
}
internal class  :  {
    protected internal ( );
    public ( ,  );
    public ( , BigInteger );
}
internal class  :  {
    internal (int );
    internal ( , bool );
    protected virtual int (int , int , int );
    internal virtual bool ();
    protected virtual bool ();
    private int (int , int );
    private int (int , int );
    private void (int , int );
    private int (int , int );
    private int (int , int );
    protected virtual bool ();
}
internal class  : object {
    internal TextAlignmentType ;
    internal int ;
}
internal class  : object {
    private static int ;
    private static int ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[][] ;
    private static Byte[][] ;
    private int ;
    private long ;
    private int ;
    private int ;
    private Int64[][] ;
    private long ;
    private long ;
    private long ;
    private long ;
    private bool ;
    private Byte[] ;
    private Byte[] ;
    public (int );
    private static ();
    private byte (int );
    private byte (int );
    private byte (int );
    private byte (int );
    private byte (int );
    private byte (int );
    private void (Int64[] );
    private long (long , int );
    private void (Byte[] );
    private long (long , Byte[] );
    private void (Byte[] );
    private void ();
    private void ();
    private Int64[][] (Byte[] );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] , int );
    private void (Byte[] , int );
    private void (Int64[][] );
    private void (Int64[][] );
}
internal class  : object {
    private ArrayList ;
    private TextReader ;
    private char ;
    public char ();
    public void (Stream , Encoding );
    public void (string );
    private string ();
    public ArrayList ();
    public void ();
    public bool ();
    public string ();
    public string ();
    public void ();
    public void ();
    private List`1<> (string );
    public void ();
    private void (List`1<> , List`1<> );
    private bool (List`1<> ,  );
    private bool (List`1<> );
}
internal class  :  {
    internal void (int );
    internal void (ushort , byte );
    internal void (ushort , string );
}
internal class  :  {
    internal (Workbook , LoadOptions , int );
    internal virtual int (Style , Byte[] );
    internal virtual  ( );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
}
internal class  : object {
    private bool ;
    private Byte[] ;
    private Int32[] ;
    internal (Byte[] );
    internal void (int , int , bool );
    internal int (int );
    internal bool (MemoryStream , Byte[] , int ,  );
    internal bool ();
    internal void (bool );
    internal Byte[] ();
    internal Int32[] ();
    internal void (Int32[] );
}
internal class  :  {
    internal void (FormatCondition );
}
internal class  :  {
    private BigInteger ;
    public (BigInteger ,  );
    public BigInteger ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  : object {
    public static  (Byte[] );
    public static  (string , bool );
    public static  (Byte[] , bool );
    private static  (string , bool , Byte[] , bool );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( , ArrayList );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( ,  );
    private static void ( , ArrayList );
    private static void ( ,  );
    private static void ( ,  );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private int ;
    internal String[] ;
    private Hashtable ;
    public int  { get; }
    public string  { get; }
    public (String[] );
    public (int , String[] );
    public int (string );
    public string (int );
    public int ();
    public int ();
    public bool (string );
}
internal enum  : Enum {
    public int value__;
}
internal class  : DeriveBytes {
    [DebuggerBrowsableAttribute("0")]
private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    [DebuggerBrowsableAttribute("0")]
private DeriveBytes ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (Byte[] , Byte[] , int );
    public virtual Byte[] GetBytes(int );
    public virtual void Reset();
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal void ( );
    internal bool ( );
}
internal class  :  {
    internal void (Column , int , int , int );
}
internal class  : object {
    private Byte[] ;
    public (Byte[] );
    public int ();
    public sealed virtual Byte[] ();
    public sealed virtual int (Byte[] , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private float ;
    private  ;
    private  ;
    public  ();
    public void ( );
    public float ();
    public void (float );
    internal  ();
    public  ();
    public  ();
    public void ( );
    private static Color ( , float , float );
    internal Brush ( , GraphicsPath , float , float );
    internal Brush (GraphicsPath ,  , bool , float );
    private ColorBlend (float );
    private GraphicsPath (RectangleF );
    internal bool ( );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private  ;
    private bool ;
    private int ;
    private int ;
    public ( );
    public  ();
    public sealed virtual void (bool ,  );
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public sealed virtual void ();
    private int (Byte[] , int );
    private void (int , Byte[] , int );
}
internal class  : object {
    public static  ( , Font , Color );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static void (Font , string );
    internal static Int32[] (string , double , FontStyle );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal  ;
    internal bool ;
    internal (bool );
}
internal class  : object {
    private static Int16[] ;
    private static ();
    public static object (bool ,  ,  );
    private static  ( );
}
internal class  :  {
    protected virtual  (Stream );
    protected virtual string ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    private string ;
    private  ;
    internal (string );
    internal void (bool , Byte[] , Byte[] );
    internal int ();
    internal Byte[] (Byte[] );
    internal int (Byte[] , int , int , Byte[] , int );
}
internal class  : object {
    []
private Workbook ;
    []
private WorksheetCollection ;
    []
private  ;
    private PivotTable ;
    private int ;
    private Byte[] ;
    private int ;
    []
private Worksheet ;
    private List`1<PivotAreaFilter> ;
    internal ( );
    internal void ( ,  );
    private bool ();
    private void ();
    private void ();
    private void ();
    private void (PivotField );
    private void ();
    private void ();
    private void ();
    private void ();
    private void (PivotFieldCollection );
    private void (Int32[] , int );
    private void ();
    private void ();
    private void (PivotField );
    private void ();
    private void (AutoFilter );
    private void ();
    private void (PivotFormatConditionCollection );
    private void (PivotArea );
    private void (PivotFormatConditionCollection );
    private void (PivotArea );
}
internal abstract class  : object {
}
internal class  : object {
    public static Boolean[] (byte );
    public static int (int );
    public static UInt32 (UInt32 );
    public static short (short );
    public static ushort (ushort );
    public static void (int , Byte[] , int );
    public static void (UInt32 , Stream );
    public static void (string , Byte[] , int );
    public static void (string , Stream );
    public static int (int , int , bool );
    public static int (UInt32 );
    public static bool (long );
    public static int (long , int );
    public static int (long , int );
    public static void (Stream , int );
    public static bool (string , string );
    public static bool (Stream , Stream );
    public static void (Stream , Stream );
    public static void (string , Stream );
    public static bool (string );
    public static void (string , string );
    public static void (string , string );
    public static double (double , double , double , bool );
    public static string (double );
    public static string (double );
    public static string (float );
    public static int (double );
    public static int (double );
    public static bool (char );
    public static int (char );
    public static bool (char );
    public static bool (string , string );
    public static bool (SizeF , SizeF , double );
    public static bool (string , string , bool );
    public static Byte[] (string );
    public static Byte[] (Stream );
}
internal class  : object {
    private OleObject ;
    private ImageOrPrintOptions ;
    private  ;
    private bool ;
    private bool ;
    internal (OleObject , ImageOrPrintOptions );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual int ();
    public sealed virtual bool ();
    public sealed virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( );
    public static  (object );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
}
internal abstract class  :  {
    internal int ;
    protected  ;
    public abstract virtual string ();
    protected abstract virtual  ();
    public virtual bool ();
    public virtual  ();
    public virtual bool ( ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual  (Char[] ,  );
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public  ();
    public void ( );
    public virtual void ( );
    public virtual  (Char[] ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
}
internal class  :  {
    internal ( );
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual int (Byte[] , int , int , Byte[] , int );
    public abstract virtual int ();
    public abstract virtual int (Byte[] , int , int , Byte[] , int );
}
internal class  : object {
    private string ;
    private List`1<> ;
    public (string );
    public string ();
    public void (string );
    public List`1<> ();
    public void (List`1<> );
    public void ( );
}
internal class  : object {
    internal List`1<string> ;
    internal string ;
    internal string ;
    internal bool ;
}
internal interface  {
    public abstract virtual  (IDictionary );
}
internal abstract class  : object {
    internal  ;
    internal  ;
    public ( ,  );
    public abstract virtual  ( );
    public virtual void ( );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public sealed virtual  ();
    internal static bool ( ,  ,  ,  );
    internal static bool ( ,  ,  , [] , int , int );
    internal static bool ( ,  ,  ,  ,  );
    internal static bool ( ,  ,  ,  , [] , int , int );
    internal static bool ( , [] , int , int ,  , [] , int , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual int ();
    internal virtual void ( );
    internal static void ( ,  );
}
internal abstract class  : object {
    public static bool (Byte[] , int , Byte[] , int , Byte[] , int );
    private static UInt32 (Byte[] , int );
    private static void (Byte[] , int , UInt32[] );
    public static void ( , Byte[] );
    public static void (Byte[] , int , Byte[] , int );
    private static void (Int32[] , Int32[] );
    public static void ();
    public static void (Byte[] , int , Byte[] , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal int ;
    internal  ;
    internal List`1<> ;
    internal bool ;
    internal int ;
    internal  ;
    internal ( , string , int , int ,  );
    internal void ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    public ( , Byte[] );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    private Hashtable ;
    private Byte[] ;
    private Encoding ;
    private int ;
    private int ;
    public (Byte[] , Encoding );
    public  ();
    public bool ();
    private string ();
    private byte ();
    private void ();
}
internal abstract class  : object {
    internal virtual bool ();
    internal abstract virtual string (string );
}
internal class  : object {
    private  ;
    private int ;
    public ( , int );
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
    public sealed virtual int ();
}
internal class  : object {
    private string ;
    private string ;
    private bool ;
    private GlobalizationSettings ;
    private IComparable ;
    public (string , bool , GlobalizationSettings );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual bool (string );
    public sealed virtual bool ();
    public sealed virtual string ();
    public sealed virtual bool ( );
    public sealed virtual int (string );
    public sealed virtual int ( );
}
internal class  :  {
    internal void ( ,  );
}
internal class  : object {
    private  ;
    internal int ;
    []
private  ;
    internal Style ;
    internal ( ,  );
    internal void ( );
    private WorksheetCollection ();
    public void (Style );
    public Style ();
    internal Style ();
    internal void (Style );
    internal  ();
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual bool ( );
    public abstract virtual  ();
    public abstract virtual bool ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private List`1<string> ;
    internal (List`1<string> );
    internal virtual void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    private long ;
    private UInt32 ;
    private UInt32 ;
    private double ;
    private double ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ushort ;
    private ushort ;
    private UInt16[] ;
    public (Byte[] );
    public ( );
    private void ( );
    public static bool (Byte[] );
    private static ushort ( , bool );
    private static UInt32 ( , bool );
    private static UInt16[] ( , bool , UInt32 );
    private static double ( , bool );
    public int ();
    public int ();
    public double ();
    public double ();
    public bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
    private bool ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  ,  ,  ,  );
    public ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    internal ( ,  ,  ,  , Int32[] , int , int , int , int , int , int , int , int , bool );
    protected ( ,  ,  ,  , Int32[] , int , int , int , int , int , int , int , int , bool , Int32[] );
    protected ( );
    protected ( , int , int , int , int , Int32[] );
    protected virtual void ();
    protected void (Int32[] );
    protected virtual  (int , int , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual int ();
    public virtual int ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual bool (int , int );
    public virtual bool (int );
    private bool ();
    public virtual void ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual bool ();
    public virtual bool ();
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    internal static Int32[] (Int32[] , int , int , int , int , int );
    internal static void (Int32[] , int , int , int , int , int , Int32[] );
}
internal class  :  {
    internal void (int , bool );
}
internal class  : object {
    internal  ;
    internal void ( );
}
internal class  : EventArgs {
    [DebuggerBrowsableAttribute("0")]
private string ;
    public (string );
    public string ();
}
internal class  : object {
    protected  ;
    private Byte[] ;
    public (Byte[] ,  );
    public virtual object ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal ( , int , int ,  ,  , bool );
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual object ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual  (int , int , int , int );
    internal virtual  (int , int );
    internal virtual  (int , int ,  );
    internal virtual object (int , int ,  );
    internal virtual void (int , int , StringBuilder ,  );
    protected virtual object ( );
    public virtual  ( , int );
    public virtual  ( );
    public virtual  ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual void (StringBuilder ,  );
    public virtual bool ( );
    public virtual  ( );
}
internal class  : object {
    internal byte ;
    internal int ;
    internal ArrayList ;
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
}
internal class  : object {
    private  ;
    private  ;
    private IList ;
    private bool ;
    private  ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private  ;
    private IList ;
    private  ;
    private bool ;
    private IList ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private bool ;
    public ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual void (bool );
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
    public virtual void (IList );
    public virtual IList ();
    public virtual void ( );
    public virtual object ();
    protected virtual void ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual int ();
    public virtual void (int );
    public virtual void (IList );
    public virtual void ( );
    public virtual void ( );
    public virtual IList ();
    public virtual IList ();
    public virtual bool ();
    public virtual void (bool );
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
}
internal class  : object {
    internal  ;
    internal string ;
    internal string ;
    internal string ;
    internal ArrayList ;
    internal int ;
    internal bool ;
    internal string ;
    internal  ;
    internal bool ;
    internal bool ();
    internal void (TextWriter );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    public ( );
    public int ();
    public string ();
    public Byte[] ();
    public DateTime ();
    public Stream ();
    public Stream ();
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    public (Cells );
    public int ();
    public int ();
    public int ();
    public int ();
    public int ();
    public void (int , int , int ,  , int , int );
    public sealed virtual void ( );
    public sealed virtual  ();
}
internal class  : List`1<> {
    internal bool ( , int );
    internal bool (int , int ,  );
    internal void ( ,  );
    internal  (int , int );
    internal  (int );
    internal void (int ,  );
    internal void (int , int ,  );
    internal void ( );
}
internal class  : object {
    private int ;
    private int ;
    private  ;
    public virtual void (int , int ,  );
    public virtual  ();
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    internal Style ;
    public (int ,  );
    internal int (Cells );
    internal void (Cells );
    internal int ();
    internal void (int );
    internal int ();
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
}
internal class  :  {
    internal void (bool , DisplayUnitType , int );
}
internal class  : object {
    private  ;
    private Byte[] ;
    private ushort ;
    private Byte[] ;
    private ushort ;
    []
private WorksheetCollection ;
    []
private RevisionLogCollection ;
    private  ;
    private bool ;
    private RevisionLog ;
    internal ( , WorksheetCollection );
    internal ( );
    internal static bool (Stream );
    private bool ();
    internal void ();
    private Revision ();
    private Revision ();
    private Revision (Int32[] );
    private Revision ();
    private void (Font );
    private Revision ();
    private Revision ();
    private static CellArea (Byte[] , int );
    private static int (Byte[] , int , ArrayList );
    private Revision ();
    private int (int ,  );
    private Revision ();
    private Revision ();
    private Revision ();
    private Byte[] (Byte[] , int , int );
    private Revision ();
    private Revision ();
    private Revision ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private static Byte[] (Byte[] , int );
    private void ();
}
internal class  :  {
    internal virtual void ( );
}
internal class  :  {
    internal (Int32[] ,  );
}
internal class  : object {
    private Byte[] ;
    private bool ;
    private Byte[] ;
    private Byte[] ;
    private (Byte[] , bool , Byte[] , Byte[] );
    public (Byte[] , Byte[] , Byte[] );
    public static  (Byte[] , Byte[] );
    public static  (Byte[] );
    public virtual Byte[] ();
    public virtual bool ();
    public virtual Byte[] ();
    public virtual Byte[] ();
}
internal class  : object {
    public static char (char );
    public static char (char );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal  ();
    public  ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  : object {
    private Dictionary`2<string, string> ;
    private List`1<> ;
    public (List`1<> );
    public T (string , string , string , Dictionary`2<string, string> , Dictionary`2<string, object> , string );
    private static Byte[] (Dictionary`2<string, object> , string );
    private T (string , string , string , Dictionary`2<string, string> , Dictionary`2<string, object> , string );
    private WebRequest (string , string , Dictionary`2<string, object> , Dictionary`2<string, string> , string , string );
    private T (WebRequest );
    private WebResponse (WebRequest );
}
internal class  : object {
    internal static  ;
    internal static  ;
}
[DefaultMemberAttribute("")]
internal class  : ArrayList {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal static  ( );
    internal void ( );
    private void ( );
    internal void (WorksheetCollection );
    public  (int );
}
internal class  :  {
    internal (Protection );
}
internal class  : object {
    public virtual  ( , int , int );
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal interface  {
    public   { get; }
    public abstract virtual  (int );
    public abstract virtual void (Color , float );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public (int ,  ,  );
    private ( ,  ,  );
    public virtual  ( );
    public virtual  ( );
    public virtual  (Byte[] );
    public virtual  ( );
    public virtual  (Byte[] );
    public virtual  ( );
    public virtual  (Byte[] );
    public virtual  ( );
    public virtual  (Byte[] );
    public virtual  ( );
    public virtual  (Byte[] );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ([] );
    public virtual  ( );
    private static  ( );
    private static  ([] );
    public virtual  ();
    private void ( , int ,  );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    public void ( );
}
internal class  :  {
    public ( );
}
internal class  : object {
    private Byte[] ;
    private UInt32[][][] ;
    public sealed virtual void (Byte[] );
    public sealed virtual void (Byte[] );
}
[DefaultMemberAttribute("")]
internal abstract class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal ( ,  );
    public  ();
    public  (int );
    public virtual  (double );
    internal IList ();
    internal void ();
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected internal  ;
    [DebuggerBrowsableAttribute("0")]
protected internal  ;
    [DebuggerBrowsableAttribute("0")]
protected internal  ;
    [DebuggerBrowsableAttribute("0")]
protected internal  ;
    [DebuggerBrowsableAttribute("0")]
protected internal  ;
    [DebuggerBrowsableAttribute("0")]
protected internal  ;
    [DebuggerBrowsableAttribute("0")]
protected internal bool ;
    [DebuggerBrowsableAttribute("0")]
protected internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
protected internal int ;
    [DebuggerBrowsableAttribute("0")]
protected internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
protected internal Stream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
protected internal string ;
    [DebuggerBrowsableAttribute("0")]
protected internal string ;
    [DebuggerBrowsableAttribute("0")]
protected internal DateTime ;
    [DebuggerBrowsableAttribute("0")]
protected internal int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream , long ,  ,  ,  , bool );
    internal int ();
    protected internal bool ();
    private  ();
    private Byte[] ();
    public virtual void Write(Byte[] , int , int );
    internal void ();
    private void ();
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    private string ();
    private int ();
    public virtual int Read(Byte[] , int , int );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
}
internal abstract class  :  {
    protected static DateTime ;
    protected int ;
    protected ( );
    protected ( ,  );
    internal ( );
    private static ();
    public virtual  ( , TypeCode , object ,  );
    internal abstract virtual  ( , DateTime , double , bool ,  );
    private  ( , DateTime ,  );
    private  ( , double ,  );
    protected bool (Char[] , int , int , StringBuilder );
    protected bool (Char[] , int , int , StringBuilder );
    private void (int );
    private void ();
    private void ();
    protected virtual int (Char[] , int , int , int , StringBuilder );
    protected virtual int (Char[] , int , int , int , StringBuilder );
    protected string (Char[] ,  );
    internal  (Char[] ,  );
    internal static string (Char[] , int , int );
    internal static string (int );
    internal static string (int );
    internal void ( );
    internal bool ( );
    internal  ();
    public virtual bool ();
    public virtual bool ();
    public virtual  ();
    public virtual NumberCategoryType ();
}
internal class  : object {
    internal string ;
    internal string ;
    private ArrayList ;
    internal  ;
    internal ArrayList ();
    internal ArrayList ();
}
internal abstract class  : object {
    public abstract virtual  (int );
    public abstract virtual int ();
    public virtual  (int );
}
internal abstract class  :  {
    private FontStyle ;
    []
private  ;
    private string ;
    private  ;
    [("True")]
public string  { get; }
    protected ( ,  , FontStyle ,  );
    protected string ();
    [("True")]
public virtual void (Stream );
    [("True")]
internal abstract virtual string ();
    public static  ( ,  , FontStyle ,  , bool , bool );
    [("True")]
protected abstract virtual string ();
    protected int (int );
    public bool ();
    public bool ();
    public string ();
    public int ();
    public int ();
    public int ();
    public int ();
    public RectangleF ();
    public float ();
    internal virtual  ();
    internal  ();
    internal abstract virtual bool ();
    internal virtual int ();
    internal  ();
    internal void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal static GraphicsPath[] ( , RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public (string , string );
    private ( );
    public static  (object );
    public virtual string ();
    public virtual string ();
    public virtual  ();
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal string ;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RevisionLogCollection ;
    internal (RevisionLogCollection );
    internal virtual int ();
    internal virtual void ( );
}
internal abstract class  : object {
}
[DefaultMemberAttribute("")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private IDictionary ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public ( );
    public int ();
    public void ( );
    public void ( );
    public void ();
    public bool (string );
    public  (string );
    []
private sealed virtual override IEnumerator ();
    private static string (string );
    private static string (string );
}
internal class  : object {
    private  ;
    private CustomLineCap ;
    private CustomLineCap ;
    internal  ();
    internal void ( );
    internal CustomLineCap ();
    internal void (CustomLineCap );
    internal CustomLineCap ();
    internal void (CustomLineCap );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  ,  );
    public static  (object );
    public static  ( , bool );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    private static Hashtable ;
    private static [] ;
    private static Hashtable ;
    private string ;
    private  ;
    private (string ,  );
    protected (string , string );
    private static ();
    public string ();
    public  ();
    public  ();
    public bool ();
    public bool ();
    public virtual string ToString();
    public static  (int );
    public static string (string );
    public static string (StringBuilder , int , int );
    public static  (string );
    public static  (string );
    public static  (string , int , int ,  , [] );
    private static  ( );
    private static  ( );
    internal static void ();
}
internal class  :  {
    internal ( );
    private static int (PivotTableAutoFormatType );
}
internal class  :  {
    public virtual void WriteByte(byte );
    public virtual void Write(Byte[] , int , int );
}
internal class  : object {
    internal static  (string );
}
internal class  : object {
    internal string ;
    internal Style ;
}
internal class  :  {
    public ( );
}
internal abstract class  :  {
    public ( ,  );
    public sealed virtual  (bool );
    public sealed virtual  ();
    public sealed virtual bool ();
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ArrayList ;
}
internal class  : object {
    protected  ;
    public ( );
    public virtual  ( );
}
internal class  :  {
    internal List`1<> ;
    internal virtual  ();
    internal bool ();
    internal virtual object ();
    public int ();
    public void (string ,  );
    internal  (string );
    internal  (string , bool );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    public ( , string );
    [ObsoleteAttribute("Use GetInstance() instead")]
public ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private  ;
    private int ;
    private  ;
    public ( , bool );
    public ( , int , int , int , int , bool );
    public virtual void ();
    public virtual object ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual bool ();
    private bool ();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ArrayList ;
    internal virtual string ();
}
internal class  : object {
    private static BigInteger ;
    private static BigInteger ;
    private static Byte[] ;
    private static Byte[] ;
    private  ;
    private bool ;
    private int ;
    private int ;
    private BigInteger ;
    public ( );
    private static ();
    public sealed virtual string ();
    public  ();
    public sealed virtual void (bool ,  );
    public sealed virtual int ();
    public sealed virtual int ();
    public void (int );
    public int ();
    public sealed virtual Byte[] (Byte[] , int , int );
    private Byte[] (Byte[] , int , int );
    private Byte[] (Byte[] , int , int );
}
internal class  : object {
    internal static double (double , double );
    public static double (double , double , int );
    public static double (double , double );
}
internal class  :  {
    internal bool (ushort , ushort , ushort , int );
    internal bool (ushort , ushort , ushort , double );
    private bool (double );
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual void (int );
    public abstract virtual bool (int , int );
    public abstract virtual bool (int ,  );
    public abstract virtual bool (int , int , int );
    public abstract virtual bool (int , int );
    public abstract virtual bool (int , int );
    public abstract virtual bool (int , int , int );
    public abstract virtual object ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ListObject ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , ListObject , SaveOptions );
    internal virtual void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , ListColumn );
    private string ();
    private void ();
    [("True")]
private void ( );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal abstract class  : object {
    private bool ;
    [("True")]
public abstract virtual Stream ();
    public abstract virtual int ();
    public abstract virtual bool ();
    public abstract virtual string ToString();
    public bool ();
    public void (bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public  ();
    public [] ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal ( ,  ,  , Int32[] , bool , bool );
    internal ( ,  ,  , Int32[] , int , int , int , bool , bool );
    private ( ,  , int );
    protected virtual  ( , bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    private void ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
    private void ();
}
internal class  :  {
    internal (Chart );
    internal void (Chart , int , int );
}
internal class  : object {
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private  ;
    private BigInteger ;
    private  ;
    public void ( );
    public BigInteger ();
    public BigInteger ( , BigInteger );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    private static ();
    public virtual void (StringBuilder ,  );
    public virtual byte ();
    public virtual  ();
    public virtual object ();
    public virtual bool ();
    public virtual object ( );
    public virtual  ( ,  );
    public virtual  ( );
    public virtual  ( );
    public virtual string ( );
    public virtual string ToString();
    public virtual bool ( );
    public virtual  ( );
    public virtual  ( );
    public virtual int CompareTo(object );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    public ( ,  ,  ,  );
    public  ();
    public virtual string ToString();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private MarkdownSaveOptions ;
    internal (Workbook , SaveOptions );
    public sealed virtual void (Stream );
    public sealed virtual void Dispose();
    public sealed virtual void ();
    private void (StreamWriter , Cells ,  );
    private string (string , string , int );
    private string (string , int );
}
internal class  :  {
    internal ( , object ,  );
    internal  ();
    internal int ();
    internal float ();
}
internal class  :  {
    private  ;
    internal ( ,  );
    public virtual Stream ();
    public Stream (Char[] );
    public Stream (Char[] );
    public Stream (Byte[] );
    internal Stream (Byte[] , bool );
    private  ( );
}
internal class  : object {
    private int ;
    private bool ;
    private int ;
    private  ;
    internal (ColumnCollection , int , int );
    public sealed virtual bool (int );
}
internal class  : object {
    internal int ;
    internal int ;
    internal  ;
    internal  ;
    internal Hashtable ;
    internal Hashtable ;
    internal Worksheet ;
    internal Cells ;
    internal  ;
    internal string ;
    private string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal ArrayList[] ;
    internal ArrayList[] ;
    internal ArrayList[] ;
    internal ArrayList[] ;
    internal List`1<> ;
    internal List`1<> ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal  ;
    private  ;
    internal int ;
    private IEnumerator ;
    private  ;
    internal  ;
    private  ;
    internal ( , Worksheet );
    internal string ();
    internal bool ();
    internal  (int , int );
    private string (string );
    internal string (int );
    internal void ( );
    private void ();
    private void ();
    internal void ( );
    internal void (RowCollection );
    internal void (ColumnCollection );
    private void ();
    private void ();
    private void ();
    internal void ();
    private void (ArrayList , ArrayList[] );
    private void (string , int , string );
    private void (string , int , string );
    private void (string , int , string );
    private void (string , int , string );
    private void (List`1<> ,  );
    private void ();
    private void ();
    private int (int , List`1<> );
    private string (int , int , List`1<> );
    internal string (int );
    internal string (int );
}
internal class  : object {
    private  ;
    public virtual void ( );
    public virtual  ();
}
internal class  : object {
    internal static Char[] ;
    private static ();
    public static string (string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  : object {
    private  ;
    public sealed virtual  ( );
}
internal class  : object {
    internal static Byte[] (Byte[] , int );
    internal static Byte[] (Byte[] );
    internal static Byte[] (Byte[] );
}
internal class  :  {
    internal (int );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    public (Byte[] , Byte[] );
    public Byte[] ();
    public Byte[] ();
}
internal class  : object {
    public static int (double );
    public static double (double );
    public static double (double , int );
    public static double (double , int );
    public static double (double , int );
    private static double (double , int , bool );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Boolean[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[][] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[][] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[][] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private char ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    private static void ();
    private static void ();
    private void ();
    internal static Int32[][] (int , int );
    internal static Char[][] (int , int );
    public virtual int ReadByte();
    private void ();
    private void ();
    private void ();
    private void ();
    private static void ();
    private static void ();
    private static void ();
    private void ();
    private void (Stream );
    private int (int );
    private char ();
    private int ();
    private int (int );
    private int ();
    private void (Int32[] , Int32[] , Int32[] , Char[] , int , int , int );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (int );
    public virtual void Flush();
    public virtual int Read(Byte[] , int , int );
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual void Write(Byte[] , int , int );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
}
internal class  : object {
    private  ;
    private int ;
    private int ;
    private int ;
    public void (bool ,  );
    public int ();
    private void (int );
    public int ();
    private void (int );
    private static int (int , bool );
    private static int (int , bool );
    public  (Byte[] , int , int );
    public int ( , Byte[] , int );
    public  ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public ( );
    private int ();
    private int ();
    [CompilerGeneratedAttribute]
public sealed virtual int ();
    [CompilerGeneratedAttribute]
public sealed virtual int ();
    public sealed virtual int (Byte[] , int , int , Byte[] , int , RandomNumberGenerator );
    private int (Byte[] , int , int , Byte[] , int , RandomNumberGenerator );
    private static int (byte , Byte[] , int , int );
    public sealed virtual void Dispose();
}
internal class  : object {
    private Shape ;
    public (Shape );
    internal  ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal int ();
    internal Color ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal double ();
    internal double ();
    internal int ();
    internal int ();
    internal int ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal int ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal int ();
    internal double ();
    internal int ();
    internal int ();
    internal int ();
    internal double ();
    internal int ();
    internal int ();
    internal double ();
    internal double ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private bool ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    public ( ,  , bool );
    public ( ,  );
    public sealed virtual Byte[] ();
    public virtual string ();
    public virtual void (bool ,  );
    private bool (Byte[] , Byte[] );
    private void (Byte[] );
    public virtual void (Byte[] );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual void ();
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    private bool (Byte[] );
    public virtual bool ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public byte value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal int ;
    internal  ;
}
internal class  : object {
    internal int ;
    internal CellArea[] ;
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private static int ;
    [DebuggerBrowsableAttribute("0")]
private static int ;
    [DebuggerBrowsableAttribute("0")]
private static int ;
    private static ();
    internal static void ( );
    internal static void ( );
    private static void ( );
    internal static PointF[] ( );
    internal static PointF[] ( );
    internal static PointF ( );
    internal static PointF ( , bool );
    internal static PointF ( );
    private static void ( ,  ,  );
    private static int ( , Size );
    private static void ( ,  , Rectangle , Rectangle& , bool );
    private static void ( ,  , Rectangle& );
    private static void ( , Rectangle , bool , Size , Size , int );
    private static void ( );
    private static void ( );
    private static bool ( , Rectangle& , Rectangle ,  , bool , bool , int , bool );
    private static bool ( , Rectangle& , Rectangle ,  , bool , bool , int , int , bool , Size , int );
}
internal class  : object {
    private static Regex ;
    private static int ;
    private static ();
    internal static string (string );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal Hashtable ;
    internal void ( );
}
internal class  : object {
    protected  ;
    protected BigInteger ;
    protected Byte[] ;
    public ( , BigInteger , Byte[] );
    public virtual  ();
    public virtual Byte[] ();
    public virtual BigInteger ();
}
internal class  :  {
    private string ;
    private int ;
    internal ( , Byte[] , string );
    internal virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public static  (Stream );
    public static  ( , string );
    public static  ( );
    private static  (string );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private Byte[] ;
    private Hashtable ;
    internal ( ,  );
    internal void ( , Hashtable );
    private void ();
    private bool ();
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ();
    private void ();
}
internal class  :  {
    protected bool ;
    public ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual  ( ,  );
    internal virtual void ( ,  , byte );
    internal virtual  ( ,  );
    protected virtual void ( );
    protected virtual Byte[] ( ,  );
    protected virtual Byte[] ( ,  );
    protected virtual Byte[] ( ,  );
    protected virtual Byte[] ( );
    protected virtual void ( ,  );
    protected virtual void ( , Byte[] );
    protected virtual void ( , Byte[] ,  );
    protected virtual void ( , Byte[] );
    protected virtual void ( , Byte[] );
    protected virtual void ( , Byte[] );
    protected virtual bool ( );
}
internal class  : object {
    private  ;
    internal bool ;
    public ( );
    public  ( , bool );
    []
public  ( , PointF , SizeF );
    public Byte[] ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public static  (object );
    public static  ( , bool );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    protected int ;
    protected Byte[] ;
    protected int ;
    protected int ;
    internal (Byte[] , int , int , int , int , int );
    internal (Byte[] , int , int , int );
    public static  (Byte[] , int , int );
    public static  (Byte[] , int , int , int , int , int );
    public static  (Byte[] , int , int , int , int );
    public static  (Byte[] , int , int , int , int , int , int , int );
    public virtual byte ();
    public virtual bool ();
    public virtual  ();
    internal bool ();
    internal void (bool );
    internal void ( );
    public virtual  ( );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    protected virtual void ( );
    public virtual  (Char[] ,  );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
}
internal class  :  {
    internal ( );
    private bool ( );
}
internal class  : object {
    private DateTime ;
    public (DateTime );
    public DateTime ();
    public virtual string ToString();
}
internal class  : object {
    internal Name ;
    internal int ;
    internal (Name );
}
internal class  : object {
    internal ushort ;
    internal object ;
    internal bool ;
    internal bool ;
    internal (ushort , bool , bool , object );
}
internal class  : object {
    private  ;
    public ( );
    public (Byte[] );
    private static  (Byte[] );
    public  ();
    public  ();
    public bool ();
    public  ();
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual  (bool );
    public abstract virtual  ();
    public abstract virtual bool ();
}
internal class  : object {
    []
private  ;
    []
private Worksheet ;
    []
private Cells ;
    []
private RowCollection ;
    []
private  ;
    private  ;
    []
private  ;
    private bool ;
    private  ;
    private  ;
    private Row ;
    private LoadDataFilterOptions ;
    []
private LightCellsDataHandler ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private Hashtable ;
    private List`1<> ;
    []
private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private bool ;
    []
private  ;
    private  ;
    internal ( ,  );
    internal void ( );
    private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , SmartTagCollection );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( , bool , string );
    private void ( , string , ArrayList );
    private void ( , bool );
    private void ( , bool );
    private void ( , bool );
    private void ();
    private void ( );
    internal static void ( , DataSorter );
    private static void ( , DataSorter );
    private static void ( , DataSorter );
    private static  (string );
    internal static void ( , AutoFilter );
    private static FilterColumn ( , AutoFilter , int , bool , bool );
    private static FilterColumn ( , AutoFilter , int , bool , bool );
    private static FilterColumn ( , AutoFilter , int , bool , bool );
    private static FilterColumn ( , AutoFilter , int , bool , bool );
    private static void ( , AutoFilter );
    private static void ( , MultipleFilterCollection );
    private static void ( , CustomFilterCollection , FilterColumn );
    private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void (double , bool );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    [("True")]
private void ( );
    internal void ( , bool );
    private string ( , Validation , bool );
    private string ( , Validation , bool );
    private void (string , ArrayList );
    internal static void (string ,  );
    private void ( , bool , HorizontalPageBreakCollection , VerticalPageBreakCollection );
    [("True")]
private Int32[] ( , int );
    [("True")]
private void ( , PageSetup );
    private static String[] (string );
    [("True")]
private void ( , PageSetup ,  );
    [("True")]
private void ( , PageSetup );
    [("True")]
private void ( , PageSetup );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private static int (string );
    private void ( , int );
    private void ( );
    private void ();
    private void ();
    private void (int , int );
    internal  ();
    internal void ( );
    private int (Char[] , int , int );
    private int (string );
    private void ( );
    private void ( );
    private void ();
    private bool ();
    private  ( );
    private  ();
    private void ( , object );
    private void ( );
    private bool ();
    [("True")]
private void ( );
    [("True")]
private int ( , int );
    private double (double );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private  ( );
    [("True")]
private bool ( );
    internal void ( , bool );
    private void ( , FormatCondition );
    private bool ( , FormatConditionCollection , bool , String[] );
    private void ( , ConditionalFormattingIcon );
    private ConditionalFormattingValue ( , FormatCondition );
    private IconSet ( , FormatCondition );
    private ColorScale ( , FormatCondition );
    private DataBar ( , FormatCondition , bool );
    internal static void (Style ,  );
}
internal class  :  {
    protected virtual  ( , BigInteger );
}
internal class  : object {
    private Cells ;
    private JsonLayoutOptions ;
    private int ;
    private int ;
    internal (Cells , int , int , JsonLayoutOptions );
    private Int32[] ( , int , int );
    internal static bool ( );
    internal Int32[] ( , int , int );
    internal Int32[] ( , int , int );
    internal Int32[] ( , int , int );
    private void (object , string , int , int );
    private void ( , int , int );
    private Int32[] ( , int , int );
    private Int32[] ( , int , int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    internal  ;
    public (int );
    public ( );
    public static  (object );
    public bool ();
    public int ();
    public  ();
    public virtual  ();
}
internal class  : object {
    private long ;
    private UInt32 ;
    private UInt32 ;
    private Int64[] ;
    private UInt32 ;
    private  ;
    internal Hashtable ;
    private Stream ;
    private Hashtable ;
    private int ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private int ;
    public bool ;
    public (Stream );
    private void ();
    private void ();
    private void ();
    private void ();
    private void (string );
    private void ();
    private  (string );
    internal Byte[] ( , long , long );
    private Byte[] (long , long );
    private Byte[] (int );
    private static int (int );
    private Byte[] (long , long );
}
internal class  : object {
    internal int ;
    internal string ;
    internal int ;
    internal int ;
}
internal class  :  {
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32[] ;
    private int ;
    public ( );
    private void ( );
    public virtual string ();
    public virtual int ();
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    public virtual int (Byte[] , int );
    public virtual void ();
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    internal virtual void ();
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private double ;
    private bool ;
    private bool ;
    public (bool );
    public virtual void (int , int );
    public virtual  ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
}
internal class  :  {
    private Stream ;
    private ArrayList ;
    internal (Stream );
    internal void (Shape , int );
    internal void (Picture );
    internal Byte[] (Byte[] , Byte[] );
    private bool (byte , Shape );
    private void (Picture );
    private Byte[] (Picture );
    private int (Byte[] , Byte[] , int );
    internal void (Shape );
    internal void (Shape );
    internal void (GroupBox );
    internal void (GroupShape );
    internal void (RadioButton );
    internal void (CheckBox );
    internal void (ComboBox );
    internal void (ListBox );
    internal void (Shape );
    private int (int , Spinner );
    private int (int , ScrollBar );
    private int (int , int , int );
    private int (int , int , int , int , int , int , bool );
    private int (int , Byte[] );
    private int (int , Byte[] , int , int , bool , byte , int , ArrayList , String[] );
    private int (int , Byte[] );
    internal void (OleObject );
    internal int (Shape );
    internal Byte[] (int , CellArea );
    internal void ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
internal   { get; }
    internal ( );
    public  (int );
    internal  (string , int );
    internal int ( );
    internal int (PivotTable );
    internal void (PivotTable );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    public (CountryCode , string , int , FontStyle );
    public (CultureInfo , string , int , FontStyle );
    public void (string , int , FontStyle );
    public  (object , string , bool );
    public  (object , int );
    public  (object , string , string , int , FontStyle , double , bool );
    public  (object , Style , double , bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private QueryTable ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( , QueryTable );
    internal virtual void ( );
    private void ( ,  , bool );
    private void ( ,  , bool , string );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    private string ;
    private string ;
    private  ;
    private ArrayList ;
    private Hashtable ;
    internal (string , string ,  );
    internal string ( , Color );
    internal string ( , bool );
    private string (string );
    private void (string , string , StringBuilder );
    private void (string , float , StringBuilder );
    private void (string , Color , StringBuilder );
    internal string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal static GraphicsPath ( , RectangleF , bool );
    internal virtual RectangleF (RectangleF );
    internal virtual void ();
    internal virtual RectangleF (RectangleF , int );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    public (Byte[] , int );
    private ( );
    public static  (object );
    public BigInteger ();
    public Byte[] ();
    public virtual  ();
}
internal abstract class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    public ( ,  ,  ,  ,  ,  );
    protected ( , int ,  ,  );
    internal  ();
    internal  ();
    public virtual  ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual void ( );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ( , Int32[] );
    public virtual bool ( , Int32[] );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
}
internal class  :  {
    internal static int ;
    private int ;
    [("True")]
internal (CustomProperty );
    internal void ( );
}
internal static class  : object {
    private static  ;
    private static  ;
    private static ConcurrentDictionary`2<int, string> ;
    private static short ;
    private static Byte[] ;
    private static int ;
    private static int ;
    private static Byte[] ;
    private static int ;
    private static ();
    internal static string (int );
    private static string (int , bool );
    private static AssemblyName (Assembly );
    private static Byte[] (AssemblyName );
    private static void (Byte[] , int , Byte[] );
}
internal class  : object {
    internal string ;
    internal string ;
    private List`1<string> ;
    private List`1<string> ;
    internal  ;
    internal  ;
    internal void ( );
}
internal class  : object {
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    public (float , float , float , float );
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public abstract virtual  ();
    public abstract virtual bool ();
    public abstract virtual Workbook ();
    public abstract virtual WorksheetCollection ();
    public abstract virtual bool ();
    public virtual void Dispose();
    public virtual void (Worksheet );
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ();
    public virtual void ( );
    public virtual void ( );
    public virtual void (FormatCondition );
    public virtual void (Validation );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void (Shape );
    public virtual void (ListColumn );
    public virtual void (Sparkline );
    public virtual void (SparklineGroup );
    public virtual void (ConnectionParameter );
    public virtual bool ( );
    public virtual bool ( , object );
    public void ( );
    internal void (string );
    internal void (StringBuilder );
    internal void (StringBuilder );
    internal string (string );
    internal void (StringBuilder );
    internal void (string );
    internal void (string );
    internal virtual void (StringBuilder );
    internal virtual string (string );
    internal void (StringBuilder );
    private void ( , StringBuilder );
    private void ( , StringBuilder );
}
internal class  :  {
    public ( );
    public virtual  (String& );
}
internal class  : object {
    private  ;
    public (Byte[] );
    public ( );
    public  ( );
}
internal class  : object {
    private int ;
    private int ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    []
private Workbook ;
    internal bool ;
    protected virtual void (Workbook );
    public int ();
    public int ();
    public void ();
    public bool (string , string );
    public bool (string , LoadOptions , string , SaveOptions );
    public bool (Stream , LoadOptions , Stream , SaveOptions );
    private bool (FileFormatType );
    private bool (LoadFormat );
    private bool (SaveFormat );
    private bool (string );
    private void ( ,  );
    private void (Workbook , LoadOptions );
    private static void (string );
}
internal class  : object {
    []
private  ;
    internal Color[] ;
    private  ;
    private ArrayList ;
    private int ;
    public ( );
    private void ();
    private Color (int );
    private static Color (string );
    public void (Color[] ,  , int , IList );
    internal Color (string );
    private int (string );
    public Color[] (int , int );
    private Color[] (Color[] , int , int );
    private Color[] (int );
    internal Color (Color , double );
    internal Color (Color , double );
    private double (int );
    private int (double );
    private void (Color[] );
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    internal Color ();
    private Color (Color , Int32[] );
}
internal abstract class  : object {
    internal  ;
    internal Stream ;
    internal  ;
    internal ( );
    public virtual Stream ();
    public bool ();
    public bool ();
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual Cells ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual  (int );
    public abstract virtual Row (int );
    public abstract virtual Cell (int , int );
    public abstract virtual  (int ,  , int );
    public abstract virtual  (int , int , bool );
}
internal class  : object {
    internal Shape ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal int ;
    internal int ;
    internal  ;
    internal  ;
    internal Hashtable ;
    internal string ;
    internal string ;
    internal string ;
    internal (int , int , int , int , int , int );
    internal (Shape );
}
internal class  :  {
    public virtual string ();
    protected virtual void (Byte[] , Byte[] );
}
internal class  : object {
    internal  ;
    internal  ;
    internal ( ,  );
    internal void (string );
    internal void (string );
    private string (string );
    private void ( );
    private string (string );
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  : object {
    internal static void (Shape );
    private static void (Shape );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal int ( );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private BigInteger ;
    private BigInteger ;
    private int ;
    public (BigInteger , BigInteger );
    public (BigInteger , BigInteger , int );
    public BigInteger ();
    public BigInteger ();
    public int ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("64")]
internal class  : Attribute {
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private string ;
    private string ;
    public string RequestTraceId { get; public set; }
    public string Status { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestTraceId();
    [CompilerGeneratedAttribute]
public void set_RequestTraceId(string );
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string );
}
[]
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
public int ;
    public (int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void (IconFilter );
}
internal interface  {
    public abstract virtual void ();
    public abstract virtual void (Byte[] );
    public abstract virtual Byte[] ();
    public abstract virtual Byte[] ();
}
[("And")]
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual Byte[] ();
    public abstract virtual void (Byte[] );
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual double ();
    public abstract virtual void (double );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  ,  ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    private  ;
    private int ;
    public bool  { get; public set; }
    public (int );
    public int ();
    public bool (int );
    public void (int , bool );
    public void (bool );
    public void (bool , int );
    public void (int , int , bool );
    public bool ();
    public bool (int , int );
    public bool ();
    public bool (int , int );
    public  ();
    public void (int );
    public void (int );
    private void (int );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private object ;
    public (object );
    public ( , Byte[] );
    public ( , object );
    public  ();
    public object ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
public static float ;
    [DebuggerBrowsableAttribute("0")]
public static float ;
    private static ();
    public static Color (Color , float );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private ArrayList ;
    internal   { get; internal set; }
    internal  (UInt32 );
    internal void (UInt32 ,  );
    internal int ();
    internal void ( );
    internal  (string );
    private  ( , string );
    internal  ( , UInt32 );
    internal MemoryStream ( );
}
internal class  :  {
    private Char[][] ;
    private int ;
    private Int32[] ;
    private Int32[] ;
    internal ( , string );
    internal Int32[] ();
    internal int ();
    internal bool ();
    public virtual  ( , TypeCode , object ,  );
    internal  ( , TypeCode , object ,  , bool );
    private  ( , double , bool ,  );
    private  ( , string , bool ,  );
    private  ( , bool );
    public virtual  ();
    public virtual NumberCategoryType ();
    public virtual bool ( );
}
internal class  : object {
    internal string ;
    internal PivotTable ;
    internal  ;
    internal (PivotTable , string );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  :  {
    private  ;
    internal ( );
    internal  ();
    internal void ( );
    internal bool ();
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public (Byte[] , int );
    private ( );
    public static  (object );
    public Byte[] ();
    public int ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
    public static  Div;
    public static  NA;
    public static  Name;
    public static  Null;
    public static  Number;
    public static  Ref;
    public static  Recursive;
    public static  Value;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal virtual void ( );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (int , string , Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (ArrayList , Stream );
    private void (int , Stream );
    private void (Stream );
}
internal class  : object {
    protected byte ;
    protected byte ;
    public (byte , byte );
    public virtual byte ();
    public virtual byte ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public virtual void (Stream );
    public static  (Stream );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal Point ;
    [DebuggerBrowsableAttribute("0")]
internal Point ;
    internal (Point , int , int );
    internal (Point , Point );
    internal (int , int , int , int );
}
internal class  :  {
    private  ;
    public ( );
    public  ();
    public virtual  ();
}
internal interface  {
    public abstract virtual void ( ,  );
    public abstract virtual void ( ,  );
    public abstract virtual void ( ,  );
    public abstract virtual void ( ,  );
}
internal class  : object {
    internal short ;
    internal string ;
    internal string ;
    internal string ;
    internal short ;
    internal ushort ;
    internal ushort ;
    internal string ;
    internal string ;
    internal string ;
    []
internal PivotTable ;
    internal ArrayList ;
    internal (PivotTable );
    internal void ( );
    internal void (bool , int );
    internal bool (int );
    internal void (bool , int );
    internal bool (int );
}
internal class  : object {
    private static Int32[] ;
    private int ;
    private int ;
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private byte ;
    private byte ;
    private Int32[] ;
    private int ;
    private Int32[] ;
    private int ;
    private static ();
    internal void (int , int , Int32[] , int , Int32[] , int ,  );
    internal int ( ,  , int );
    internal void ( );
    internal int (int , int , Int32[] , int , Int32[] , int ,  ,  );
}
internal class  : object {
    internal  ;
    internal List`1<> ;
    internal  ;
    internal  ;
    internal  ;
    public ( );
    public  ();
    public void ( );
    public List`1<> ();
    public  ();
    public void ( );
    public void (List`1<> );
    public void ( );
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public static void ( , string , string ,  );
    public static bool ( , string ,  );
    public static void ( );
    internal static void ( ,  );
}
internal class  : object {
    public static ICellsDataTable (Workbook , string , object );
    internal static bool (object );
    internal static String[] (string );
    internal static int (String[] , string );
    internal static string (string );
    internal static int (string , int );
    internal static ArrayList (object );
    internal static int (ICellsDataTable ,  , String[] );
    internal static ICellsDataTable (ICollection , List`1<string> , bool , String[] );
    internal static string (string , int , int );
    internal static string (string , bool , int , int , int , int );
}
internal class  : object {
    private FileInfo ;
    private int ;
    public (FileInfo );
    public (FileInfo , int );
    public virtual Stream ();
    public virtual void (Stream );
    [ObsoleteAttribute]
public virtual object ();
}
internal class  :  {
    internal virtual  (byte );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ( , object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int ( );
    public virtual int ( ,  );
}
internal class  : object {
    private static Byte[] ;
    private static Byte[] ;
    private static ();
    internal static Byte[] (bool );
}
internal abstract class  : object {
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32 );
    public static UInt32 (UInt32[] , int , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static UInt32[] ();
    public static UInt32[] ();
    public static bool (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static UInt32 (UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static bool (UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] );
    public static bool (UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static ulong (UInt32 , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] );
    public static UInt32 (UInt32 , UInt32[] , UInt32[] );
    public static UInt32 (UInt32 , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32 , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int );
    public static BigInteger (UInt32[] );
    public static void (UInt32[] );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
    [DebuggerBrowsableAttribute("0")]
public UInt32 ;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal  (Color , float );
    internal virtual void ();
    private void ( , float , float );
    private float ( , float , float );
    private void (Single& ,  , float , Single& );
    private float ( , float , float );
    private void ( , float );
    private float ( , float , float );
    private void ( );
    private float ( , int );
}
internal class  : object {
    public static  (string );
    public static string ( );
    public static  (string );
    public static  ( );
    public static IEnumerable ();
    private static  ( );
}
internal class  : object {
    internal static double (double );
    internal static double (double , int );
    internal static double (double , int );
    internal static double (double , int );
    internal static double (double , int );
    internal static string (string );
    internal static string (string );
    internal static string (string );
    internal static string (string , int , int );
    internal static  (double , string , string );
    private static double (string );
    private static double (string );
    private static double (string );
    private static double (double , string );
    private static double (double , string );
    private static double (string );
}
internal class  : object {
    []
private  ;
    []
private Worksheet ;
    []
private  ;
    []
private PageSetup ;
    internal ( ,  );
    [("True")]
internal void ( );
    private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ();
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
internal static void ( , PageSetup );
    private static String[] (string );
    [("True")]
internal static void ( , PageSetup ,  );
    private static void (PageSetup , string );
    private static void (PageSetup );
    [("True")]
internal static void ( , PageSetup );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( );
}
internal class  :  {
    protected internal UInt64[] ;
    public (BigInteger );
    protected internal (UInt64[] );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  : object {
    internal ushort ;
    internal short ;
    internal int ;
    internal [] ;
    internal ( ,  , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
    internal virtual void ();
}
internal abstract class  : object {
    public static string ( );
    public static string (string );
    public static string ( );
    private static  (string );
    public static string (string );
    public static bool ( ,  );
    private static bool ( ,  );
}
internal abstract class  :  {
    protected int ;
    protected int ;
    protected int ;
    public ( ,  ,  , int , bool );
    public virtual void ();
    public virtual int ();
}
internal class  :  {
    internal (ushort );
}
internal class  : object {
    internal UInt32 ;
    internal  ;
    internal void ( );
}
internal class  : object {
}
internal class  : object {
    private  ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    public ( , int , Byte[] );
    public ( , int , Byte[] , Byte[] );
    public  ();
    public int ();
    public Byte[] ();
    public Byte[] ();
}
internal class  :  {
    private int ;
    private int ;
    []
private Worksheet ;
    []
private Worksheet ;
    []
private CellArea ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    internal ( ,  , Worksheet , Worksheet , CellArea , int , int );
    internal virtual string ();
    public virtual bool (Worksheet );
    public virtual bool ( );
    protected virtual void ();
    protected virtual Byte[] (bool );
    private void ();
    public virtual bool ();
    public virtual bool ();
    private bool ( );
    private void ();
    private void ();
    public virtual bool ();
    public virtual bool ();
    private void (int ,  );
    private void (int ,  );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  : object {
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  :  {
    internal List`1<> ;
    internal virtual  ();
    internal void ( , CopyOptions );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
public static  ;
    public (double , double , double );
    private static ();
    public double ();
    public  ();
    public static bool op_Equality( ,  );
    public static bool op_Inequality( ,  );
    public bool ( );
    public  ();
    public static  op_UnaryNegation( );
    public static  op_Subtraction( ,  );
    public static  op_Multiply(double ,  );
    public static  op_Multiply( , float );
    public static  op_Multiply( ,  );
    public static  op_Addition( ,  );
    public static  ( ,  );
    public static double ( ,  );
    public static double ( ,  );
}
internal class  : object {
    private static int (Stream , int );
    internal static string (Stream , int );
    internal static Byte[] (Stream , int );
    internal static  (Stream );
    internal static void (Stream );
    internal static void (Stream );
}
internal interface  {
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual double (int );
    public abstract virtual double (int );
    public abstract virtual int (int );
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    [("True")]
internal void (Shape ,  );
    internal void (ArrayList );
    internal void (ArrayList , Font );
    private void (StringBuilder ,  );
    internal static void (ArrayList , FontSettingCollection , Font );
}
internal class  :  {
    private  ;
    public ( );
    private Byte[] ();
    public virtual  (int );
    public virtual  (string , int );
    public virtual  (int , int );
    public virtual  (string , int , int );
    public virtual  (int );
}
internal class  : object {
    internal static bool (string );
    internal static int (Char[] , int , int , char );
    internal static String[] (string , char );
    internal static int (Char[] , Char[] , int , int );
    public static int (string , string , bool );
    public static bool (string , string , bool );
    internal static string (string );
    internal static int (string , Font );
    internal static int (Font );
    internal static string (BinaryReader , int , bool );
    private static Boolean[] (Char[] );
    public static object (string , bool , bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , object ,  );
    internal  ();
    internal  ();
    internal virtual void (Color );
    internal bool ();
    private void (Color );
    internal void ();
    private void (bool );
    internal void ( );
    internal void (Rectangle );
    internal void (RectangleF );
    internal void (GraphicsPath );
    internal void (GraphicsPath , float );
    internal void (Rectangle , GraphicsPath );
    internal void (RectangleF , GraphicsPath );
    internal void (GraphicsPath , GraphicsPath );
    internal void (GraphicsPath , float , GraphicsPath );
    internal Brush (Rectangle );
    internal Brush (RectangleF );
    internal Brush (GraphicsPath );
    internal Brush (GraphicsPath , float );
    private Color (Color );
    private void (Brush );
    internal bool ();
    private bool ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public (string , string , string ,  );
    public virtual string ();
    public virtual string ();
    public virtual void (string );
    public virtual void ( );
}
internal abstract class  : object {
    []
internal ShadowEffect ;
    internal  ;
    internal int ;
    internal int ;
    internal (ShadowEffect );
    internal abstract virtual  ();
    public CellsColor ();
    public void (CellsColor );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public virtual double ();
    public virtual void (double );
    public virtual double ();
    public virtual void (double );
    internal virtual void ( , CopyOptions );
    internal virtual bool ( );
}
internal class  :  {
    internal (string );
}
internal class  : object {
    private  ;
    private  ;
    public ( ,  );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    private  ;
    internal (Stream );
    internal void (string , Stream );
    public void ();
    public void (int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  : InvalidOperationException {
    public (string );
    public (string , Exception );
}
internal class  :  {
    private ulong ;
    public ulong ();
    public void (ulong );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Bitmap ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private ImageCodecInfo ;
    [DebuggerBrowsableAttribute("0")]
private Encoder ;
    [DebuggerBrowsableAttribute("0")]
private EncoderParameters ;
    internal (ImageOrPrintOptions , int , bool , Stream );
    internal virtual void (Bitmap );
    internal virtual void ();
    internal virtual bool ();
    public virtual void Dispose();
    private void ();
    private Bitmap (Bitmap );
}
internal class  :  {
    internal ( );
}
internal interface  {
    public abstract virtual  ( );
}
internal class  :  {
    public PointF ;
    private PointF ;
    private  ;
    public (float , float , float , float ,  );
    public (PointF , PointF );
    internal PointF ();
    internal void (PointF );
    internal  ();
    internal void ( );
    public virtual void ( );
    public virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    public static  ;
    private (int );
    private static ();
    internal virtual void ( );
}
internal class  : object {
    private int ;
    private Int32[] ;
    private Int32[] ;
    private int ;
    internal (Cells , RowCollection ,  );
    internal (int , Int32[] , Int32[] );
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  ();
    public sealed virtual bool ();
    public sealed virtual Int32[] ();
    public sealed virtual int (int );
    public sealed virtual int (int , int );
    public sealed virtual void (Int32[] );
}
internal class  : object {
    private  ;
    private  ;
    public ( );
    internal ( ,  );
    internal void ( );
    internal void ( );
    [("True")]
private void ();
    private void ();
    private void ();
    private void ();
    internal void ();
    private void ();
    private void ();
    private void ();
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void (Worksheet );
    [("True")]
internal void ( );
    private void (Hashtable , int , int , int , FormatConditionCollection , int , int );
    private string (FormatCondition , int , int );
    private void (FormatCondition , string , int , int );
    [("True")]
private void (int , Font );
    private void ( );
    private void ( );
    [("True")]
private void ( , Style );
    internal void (Border , string , string );
    [("True")]
private void (TextAlignmentType , Style );
    [("True")]
private void ( , bool );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream ,  ,  );
    public virtual  ();
    public virtual  ();
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public (string );
}
internal class  : object {
    private int ;
    private string ;
}
internal class  : object {
    internal string ;
    internal  ;
    internal CellBorderType ;
    internal static  (Style , BorderType );
    internal static  (Border );
    internal static bool ( ,  );
}
internal abstract class  :  {
    public virtual Byte[] ( ,  , Byte[] );
    public virtual bool ( , Byte[] ,  , Byte[] );
    public virtual  ( ,  );
    public virtual  ( ,  );
    protected virtual  (bool ,  );
    protected virtual  ( , bool , bool ,  );
    protected abstract virtual byte ();
    protected abstract virtual  (byte );
}
internal class  : object {
    private  ;
    private List`1<> ;
    internal ( );
    internal ( , List`1<> );
    internal List`1<> ();
    internal void ( );
    internal void ( );
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    public string ;
    public string ;
    public string ;
    public string ;
}
internal class  :  {
    internal ( ,  );
}
internal class  : object {
    protected  ;
    protected  ;
    protected  ;
    internal ( );
    public virtual void ( );
    public virtual  ();
    public virtual void (byte );
    public virtual void ();
    public virtual  ();
    public virtual  ();
    public virtual Byte[] (byte );
    public virtual string ();
    public virtual int ();
    public virtual int ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    protected virtual void ( , Byte[] , Byte[] , int );
}
internal interface  {
    public abstract virtual Byte[] ();
    public abstract virtual void (Byte[] );
    public abstract virtual Stream ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    []
private WorksheetCollection ;
    private static string ;
    internal (WorksheetCollection );
    private static ();
    internal  (string , int );
    private static bool (StringBuilder , Char[] , int );
    private int (StringBuilder , Char[] , int );
    private int (StringBuilder , Char[] , int );
    private int ( , Char[] , int );
    private int (ArrayList , Char[] , int );
    private int ( , StringBuilder , Char[] , int );
    internal void (StringBuilder ,  );
    internal bool (Char[] , int , StringBuilder );
    internal int (Char[] , StringBuilder , int );
    internal int (StringBuilder , int );
    internal int (Char[] , StringBuilder , int );
    internal void (ArrayList );
    internal  ( );
    internal  ([] , int , int , int );
}
internal class  : object {
    internal static ConsolidationFunction (int , ConsolidationFunction );
    internal static string (int );
    internal static int (object , object );
    internal static int (PivotTableAutoFormatType );
    internal static PivotTableAutoFormatType (ushort );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public (Byte[] );
    public (Stream );
    private ( );
    public int ();
    public string ();
    public Byte[] ();
    public string ();
    public BigInteger ();
    public bool ();
    public void (IList , IList , IList );
    public Byte[] ();
    internal  ();
    public virtual bool ();
    public virtual  ( );
    public virtual IList ();
    protected virtual  ();
}
internal class  : object {
    private Byte[] ;
    internal Byte[] ();
    internal void (Byte[] );
    internal int ();
}
internal class  : object {
    internal List`1<> ;
    internal List`1<> ;
    internal  ;
    internal List`1<> ;
    internal List`1<> ;
    internal Byte[] ;
    internal Byte[] ;
    internal Byte[] ;
    internal List`1<> ();
    internal List`1<> ();
    internal List`1<> ();
    internal void (int );
    internal bool (int );
    private void ( );
    internal int ( );
    internal int ( );
    internal  ();
    internal List`1<> ();
    internal int (int ,  , WorksheetCollection , CopyOptions );
    internal  (int );
    internal void ( , CopyOptions );
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , long );
    protected static Byte[] (long );
    public long ();
}
internal class  : object {
    internal static double (Double[] , int , double );
    internal static double (Double[] , int , double );
    internal static double (Double[] , double );
    public static  (double , double , double , bool );
    public static  (double , double , double , double , double , bool );
    public static  (double , double , double , double , double );
    public static  (double , double , double );
    public static  (double , double );
    private static double (double , double );
    public static  (double , double , int );
    public static  (double , double );
    public static  (double , double );
    public static  (double , double , bool );
    internal static  (int , double , double );
    public static  (int , int , double , bool );
    public static  (double , double , double );
    internal static  (double , double , double , double );
    internal static double (double , double , double , bool );
    public static  (double , double , double , bool );
    internal static double (Double[] , int , int , double , double );
    internal static double (Double[] , int , int , double );
    internal static  (Double[] , Double[] , int , int );
    private static double (Double[] , Double[] );
    internal static double (Double[] , Double[] );
    internal static double (double , double , double , double , int , int );
    private static double (double , int , double , int );
    internal static double (Double[] , int , int , Double[] , int , int );
    private static double (Double[] , int , int , int );
    private static double (Double[] , int , int );
    private static double (Double[] , int , int , double );
    private static double (Double[] , int , int , double );
    private static double (double , double );
    internal static double (double , double );
}
internal class  : object {
    private  ;
    private [] ;
    private  ;
    private int ;
    internal ( , int );
    [("True")]
internal void ( );
    private void ( );
    private void ( );
}
internal interface  {
}
[DefaultMemberAttribute("")]
internal class  : object {
    private int ;
    private int ;
    private ArrayList ;
    private float ;
    public   { get; }
    public (float );
    public  (int );
    public void (int , int , bool , bool );
    public int ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    internal  ;
    internal int ;
    public (int ,  );
    public ( );
    public ( );
    public static  ( , bool );
    public static  (object );
    public int ();
    public  ();
    public virtual  ();
    public virtual string ToString();
    private void (StringBuilder , string , string , string );
}
internal class  :  {
    internal ( );
    internal double (Byte[] , int );
    internal static int (int );
    internal virtual Cell (Byte[] , int , int , Row , int );
}
internal class  :  {
    private  ;
    public ( );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int (int );
    public virtual int (int );
    public virtual Byte[] (byte );
    public virtual int (byte , Byte[] , int );
    public virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual Byte[] ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual void ();
}
internal class  : object {
    internal static  ;
    private static ();
    public sealed virtual  ( );
    public sealed virtual  ( );
    public sealed virtual void ( ,  );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual bool ();
    public sealed virtual void (bool );
}
internal class  :  {
    internal void (byte );
}
internal class  :  {
}
internal class  : object {
    private double ;
    private short ;
    private short ;
    internal double ();
    internal void (double );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    private bool (int );
    private void (int , bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    internal ( );
    private void ();
    internal virtual void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private bool ();
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private bool ();
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private Double[0...,0...] (string );
    private void ( , String& );
    private short ( );
    private void ( );
    private bool ();
    private void ( , Title );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private bool (int , Range , ArrayList );
    private void ( , Series , int , bool );
    private bool (Series );
    private bool (Series );
    private void ( , Series , bool , bool );
    private bool (Series , bool , bool );
    private void ( , Series );
    private void ( , Series );
    private void ( , Area );
    private void ( , Series , bool );
    internal static string ( ,  );
    private void ( ,  , bool , bool , bool );
    private bool (ArrayList );
    private bool ( , bool );
    private void (ArrayList , ArrayList );
    private void ( ,  );
    [("True")]
private void ( ,  , string );
    private void ( , Series , bool );
    private void ( , Marker , bool , object );
    private bool (Series );
    private void ( , DataLabels , int );
    private void ( , Series );
    private void ( , ShapeGuide );
    private void ( , DataLabels );
    private bool (ChartPointCollection );
    private void ( , DataLabels , bool );
    private void ( , Axis , bool , bool );
    internal static string (object , bool );
    private void ( , Axis );
    private void ( );
    private void ( , Axis , Axis , bool , bool );
    private string (Axis , Axis , bool , bool );
    private void ( , Axis , Axis , bool , bool , bool );
    private void ( , Axis );
    private void ( , DisplayUnitLabel );
    [("True")]
private void ( , DisplayUnitLabel );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( , ErrorBar );
    private void ( , TrendlineCollection );
    private void ( , Legend );
    private void ( , Series , bool );
    private void ( , string );
    [("True")]
private void ( , string , String[] );
    [("True")]
internal static void ( , TextAlignmentType , bool , int , bool , bool , TextDirectionType , bool , bool , String[] , object );
    [("True")]
private static string ( , TextAlignmentType , TextAlignmentType , TextDirectionType , Font , Workbook );
    [("True")]
private void ( , Title );
    [("True")]
internal static void ( ,  , int );
    [("True")]
private void ( , DataLabels , bool );
    internal static void ( , ChartFrame );
    [("True")]
internal static void ( , Workbook , Font , bool , int , object , bool , bool , TextDirectionType );
    [("True")]
private static void ( , Font , string , Workbook , string , bool , string , string );
    [("True")]
internal static string ( , Font , string , Workbook , string );
    private void ( ,  );
    [("True")]
private void ( , ChartFrame , string , bool , bool , bool );
    private bool ( , ShapePropertyCollection );
    [("True")]
private static void ( , string , string );
    [("True")]
private static void ( , string , string , string );
    [("True")]
private static void ( , string , string , string , string );
    internal static string (Workbook , TickLabels );
    internal static string (Workbook , DataLabels );
    private static int (Font );
    internal static bool (Font , Font );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private bool ;
    public ( , string , int );
    public int ();
    public bool ();
    public void (bool );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private static  ;
    private bool ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  ,  );
    public ( ,  ,  ,  );
    private ( );
    private static ();
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private DateTime ;
    private DateTime ;
    private double ;
    private int ;
    private int ;
    private int ;
    private double ;
    private double ;
    public (DateTime , DateTime , double , double , int , int , int , double );
    protected virtual bool (double , double );
    protected virtual bool (double , double );
    public virtual double (double );
    public virtual double (double );
    internal static  (DateTime , DateTime , double , double , int , int , int , double , double );
}
internal class  : object {
    internal  ;
    internal int ;
    internal string ;
    internal PropertyType ;
    internal ( , int , string , PropertyType );
    internal object ();
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : object {
    internal  ;
    internal UInt32 ;
    internal static  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    internal ( ,  );
    public virtual  ( );
}
internal class  :  {
    internal (WorksheetCollection );
    internal virtual bool ();
    internal virtual [] ( ,  ,  );
    private void ( );
    private void ( ,  );
    internal Byte[] ( , string ,  );
    internal void (Byte[] , int , int , int , bool , bool );
    private Byte[] ( ,  );
    internal Byte[] ( , string , string ,  );
    private void (string , Int32& , Int32& , bool );
    private string (string );
    private Byte[] ( , string , string , string , string ,  );
    private Byte[] ( , string , string , int ,  );
    private [] ( ,  );
    private [] ( , ushort ,  ,  );
    private [] ( , ushort ,  ,  );
    private void ( , string ,  );
    internal virtual  ( , string ,  );
    private [] ( ,  ,  );
    private Byte[] ( , string ,  );
    private Byte[] ( , string ,  );
    private bool (string );
    private bool (string );
    private bool (string );
    internal static Byte[] (WorksheetCollection , int , int , int , string ,  ,  );
    private static Int32[] (WorksheetCollection , string , string , bool );
    private static Int32[] (WorksheetCollection ,  , string , string , int );
    internal virtual Int32[] (string , bool );
    internal static bool (string , Int32& , Int32& , bool , Boolean& , Boolean& , Boolean& , Boolean& );
}
internal class  :  {
    private MemoryStream ;
    private RectangleF ;
    private SizeF ;
    public (MemoryStream , RectangleF , SizeF );
    [("True")]
public virtual void ( , PointF );
}
internal class  :  {
    private  ;
    public ( );
    public  ();
    public  ();
    protected virtual  ();
}
internal class  :  {
    internal  ;
    internal (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual RectangleF (RectangleF );
    internal virtual GraphicsPath (RectangleF );
    private GraphicsPath (float , float , float , float );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    internal ( );
    public  ();
}
internal abstract class  :  {
    public int (int , bool );
    public  ( );
    public  ( , int , int , bool );
}
internal class  :  {
    private PointF ;
    public (PointF , bool );
    internal (PointF , bool , bool );
    public PointF ();
    public void (PointF );
    internal virtual string (string );
}
internal class  : object {
    private static UInt32[] ;
    private static UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private bool ;
    private bool ;
    private static ();
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual void (bool ,  );
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] );
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
    private void (UInt32[] );
    private void (UInt32[] , UInt32[] );
    private void (UInt32[] );
    private void (UInt32[] );
    private UInt32 (UInt32 , int );
}
internal class  : object {
    private sealed virtual override int (object , object );
}
internal class  :  {
    internal void (Byte[] );
}
internal enum  : Enum {
    public int value__;
}
[("And")]
[("Complement")]
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void (Worksheet );
}
internal class  :  {
    private BigInteger ;
    public (BigInteger ,  );
    public (BigInteger ,  ,  );
    private static BigInteger (BigInteger ,  );
    public virtual BigInteger ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal  ;
    internal ( );
}
internal class  : object {
    protected Color ;
    protected Color ;
    protected int ;
    protected bool ;
    protected Brush ;
    protected bool ;
    public void (Color , Color , int , bool );
    public void (Brush , Color , int , bool );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat , Single& , Single& );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat , Single& , Single& );
}
internal class  : object {
    private static string ;
    private static ();
    public static string ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Decoder ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private BinaryReader ;
    public ( );
    private ( , Encoding );
    public  ();
    public void ();
    private void (bool );
    private sealed virtual override void ();
    public int ();
    public int ();
    public bool ();
    public byte ();
    public sbyte ();
    public char ();
    private static decimal (int , int , int , int );
    internal static decimal (Byte[] );
    public string ();
    public int (Char[] , int , int );
    private int (Char[] , int , int );
    private int ();
    public Char[] (int );
    public int (Byte[] , int , int );
    private void ();
    public Byte[] (int );
    private void (int );
    internal int ();
    public int ();
    public UInt32 ();
    public long ();
    public ulong ();
    public short ();
    public ushort ();
    private Byte[] ();
    public float ();
    public double ();
    public decimal ();
    private BinaryReader (Byte[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
}
internal class  : object {
    private long ;
    private long ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    public ( );
    public sealed virtual void (Byte[] );
    public sealed virtual void (long );
    public sealed virtual void (Byte[] );
    public sealed virtual void (Byte[] , int , int );
    private void ();
    private void ();
    private void (long );
    private void (Byte[] );
    private void (Byte[] );
}
internal class  :  {
    private float ;
    public ( , Color , PointF , string , float );
    public ( , Color , Color , PointF , string , float );
    public virtual string ();
    public virtual void (string );
    public void (string , float );
    public virtual SizeF ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  : object {
    private int ;
    private  ;
    internal (int ,  );
    public sealed virtual  ();
    public sealed virtual  ();
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    internal ( ,  ,  ,  );
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int );
    public sealed virtual int (int , int );
    public sealed virtual double (int , int );
    public sealed virtual double (int , int );
    public sealed virtual void (Int32[] );
    public sealed virtual void (Int32[] );
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    []
private  ;
    internal ( );
    internal void ( );
    internal void ( );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    [("True")]
private void ();
    [("True")]
private void ();
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual Byte[] ();
    public abstract virtual int ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private static int ;
    [DebuggerBrowsableAttribute("0")]
private static double ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    private static ();
    internal static void ( ,  , Rectangle , bool ,  );
    internal static void ( ,  , Rectangle , int );
    internal static void ( ,  , bool , float , Rectangle ,  );
    private static void ( ,  , bool , float , float );
    private static void ( ,  , bool , float , float , float );
    private static void ( ,  , bool , float , float , float , double , double );
    internal static void ( ,  , bool , float , Rectangle , int , bool );
    private static void ( ,  , bool , float , float , Rectangle );
    private static void ( ,  , bool , float , float , Rectangle );
    private static void ( ,  , bool , float , Rectangle );
    internal static String[] ( );
    internal static void ( ,  , bool , float , Rectangle ,  );
    private static void ( ,  , bool , float , float , float , Rectangle );
    internal static void ( ,  , bool , float , Rectangle , int );
    private static void ( , ArrayList[] , bool ,  ,  , double , Rectangle , float , float , float , float );
    private static void ( , List`1<> , float , float , float ,  , double );
    private static void ( ,  , bool , float , float , Rectangle );
    private static void ( ,  , bool , float , Rectangle );
    internal static void ( ,  , bool , float , Rectangle ,  );
    internal static void ( ,  ,  , Rectangle );
    internal static void ( ,  ,  , Rectangle );
    internal static Size ( ,  ,  , bool );
    internal static Size ( ,  , Rectangle , int , bool ,  );
    private static int ( );
    internal static bool ( ,  );
    internal static bool ( ,  );
    private static Size ( , IList , int ,  , SizeF );
    internal static void ( ,  ,  , bool );
    internal static DateTime (double , bool );
    internal static int (DateTime , bool );
    internal static string ( , object );
    internal static int ( , int , int , bool );
    internal static int ( , int , int , bool );
    internal static int ( ,  , int , int , bool );
    internal static int ( , int , bool );
    internal static int ( );
    private static int ( );
    private static void ( , ArrayList[] , float , float , float , bool ,  , double ,  ,  , float , Rectangle , bool );
    private static void ( , List`1<> , float , float , float , bool ,  , double );
    internal static  ( );
    public static void ( , Rectangle , string , int , Font , Color ,  ,  );
    public static void ( , Rectangle , string , int , Font , Color ,  ,  , StringFormat );
    public static void ( , RectangleF , string , int , Font , Color ,  ,  );
    public static void ( , Rectangle , string , int , Font , Color ,  ,  );
    public static void ( , Rectangle , string , int , Font , Color ,  ,  , StringFormat );
    internal static void ( , string , PointF , SizeF , int , Font , Color ,  );
    internal static void ( );
    internal static Size ( ,  , Rectangle , int , bool ,  );
    private static float ( ,  ,  );
    internal static Rectangle ( ,  , int , bool );
    internal static void ( ,  );
    private static void ( ,  , float , float );
    private static void ( ,  , float , float , float );
    internal static void ( ,  , int , Rectangle , bool );
    private static void ( ,  );
    private static void ( ,  , int , int );
    private static void ( ,  , int );
    internal static void ( ,  );
    private static void ( ,  );
    internal static void ( ,  , int , Rectangle );
    private static void ( ,  );
    private static void ( ,  , int , int );
    private static void ( , int ,  );
    internal static void ( ,  );
}
internal class  : object {
    private int ;
    private string ;
    private XmlColumnProperty ;
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal XmlColumnProperty ();
    internal void (XmlColumnProperty );
}
internal class  : object {
    internal string ;
    internal string ;
    internal ArrayList ;
    internal string ;
    internal List`1<string> ;
    internal void ( );
}
internal class  : object {
    []
private Chart ;
    private Line ;
    private Area ;
    private ShapePropertyCollection ;
    private  ;
    public (Chart );
    internal void ( , CopyOptions );
    public Line ();
    internal Line ();
    public Area ();
    internal Area ();
    internal ShapePropertyCollection ();
    public  ();
    internal  ();
}
internal abstract class  : object {
    private  ;
    private  ;
    private  ;
    internal  ;
    protected  ;
    private  ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Byte[] ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected Int32[] ;
    protected Byte[] ;
    protected IDictionary ;
    protected IDictionary ;
    protected short ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected  ;
    protected  ;
    public (Stream ,  );
    public (Stream , Stream ,  );
    public ( );
    protected abstract virtual  ();
    internal abstract virtual  ();
    protected abstract virtual  ();
    protected virtual void (byte , byte );
    protected virtual void (byte );
    protected virtual void ();
    protected virtual void (bool );
    protected virtual void (byte , string , Exception );
    protected virtual void ();
    protected abstract virtual void (byte , MemoryStream );
    protected virtual void ();
    protected virtual void (bool );
    protected virtual void ();
    protected virtual void ();
    protected virtual void ();
    protected internal void (byte , Byte[] , int , int );
    private void ( );
    private void ();
    private void ();
    private void (Byte[] , int , int );
    protected internal virtual int ();
    protected internal virtual int (Byte[] , int , int );
    protected virtual void (Byte[] );
    protected virtual void ();
    protected virtual void (byte , Byte[] , int , int );
    protected internal virtual void (Byte[] , int , int );
    protected virtual void (int );
    protected virtual void (Byte[] , int , int );
    public virtual Stream ();
    public virtual void ();
    public virtual void (Byte[] );
    public virtual void (Byte[] , int , int );
    public virtual int ();
    public virtual int (Byte[] , int , int );
    public virtual void (Byte[] , int , int );
    public virtual int ();
    public virtual int (Byte[] , int , int );
    protected virtual void ();
    protected virtual void (MemoryStream );
    protected virtual void (byte , string , Exception );
    protected virtual void (byte , string );
    protected virtual void ( );
    protected virtual void ();
    protected virtual void ();
    protected virtual void (IList );
    protected virtual Byte[] (bool );
    public virtual void ();
    protected internal virtual void ();
    public virtual bool ();
    protected virtual short (IDictionary , IDictionary , byte );
    protected virtual void ();
    protected internal static void (MemoryStream );
    protected internal static Byte[] (bool ,  );
    protected internal static Byte[] (Byte[] );
    protected internal static void ( ,  );
    protected internal static Byte[] ( ,  , Byte[] );
    protected internal static IDictionary (MemoryStream );
    protected internal static IList (MemoryStream );
    protected internal static void (Stream , IDictionary );
    protected internal static void (Stream , IDictionary , bool );
    protected internal static void (Stream , IList );
    protected internal static int ( , int );
}
internal class  : object {
    private  ;
    private  ;
    internal ( ,  );
    internal void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private string ;
    public (Byte[] );
    public (string );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    internal virtual void ( );
    public Byte[] ();
    protected virtual bool ( );
}
internal class  : Shape {
    [DebuggerBrowsableAttribute("0")]
[]
private Timeline ;
    internal (ShapeCollection , Timeline );
    internal Timeline ();
    internal void ( , CopyOptions );
}
internal class  :  {
    private static  ;
    private static object ;
    private static ();
    internal static  ();
    internal  ( );
}
internal class  : object {
    private static Byte[] ;
    protected  ;
    protected  ;
    protected  ;
    protected Byte[] ;
    protected Byte[] ;
    public ( );
    private static ();
    public virtual int (int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
    protected virtual  ( , bool , long , Byte[] );
    protected virtual Byte[] (long , Byte[] );
    protected virtual  ( );
    protected virtual Byte[] ( , Byte[] , Byte[] , int , int );
    protected virtual void ( , int );
    protected virtual void ( , Byte[] , int , int );
    protected virtual Byte[] (long , byte , int );
}
internal class  :  {
    private long ;
    private long ;
    private long ;
    private  ;
    internal ( ,  );
    internal virtual void ([] );
}
internal class  : object {
    internal int (object , object );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  );
    public ( ,  ,  ,  );
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
    public static int ( ,  ,  );
}
internal abstract class  :  {
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    private static ();
    internal static  (byte );
    internal static  (int );
    internal static  (Char[] , int , int );
    internal static  (string );
    internal static string (byte );
    public abstract virtual string ();
    public abstract virtual byte ();
    public abstract virtual int ();
    public abstract virtual  ();
    public virtual byte ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual object ();
    public virtual object ( );
    public virtual  ( );
    public virtual  ( ,  );
    public virtual  ( );
    public virtual bool ( );
    public virtual void (StringBuilder ,  );
    public virtual string ( );
    public virtual int CompareTo(object );
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual  (Char[] ,  );
    public sealed virtual bool ( ,  );
    public sealed virtual  ( );
    public sealed virtual void ( );
    public sealed virtual  (Char[] ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
}
internal class  : object {
    []
internal PivotTable ;
    []
internal Cells ;
    []
internal Worksheet ;
    []
internal WorksheetCollection ;
    []
internal Workbook ;
    internal  ;
    internal  ;
    internal List`1<> ;
    internal Int32[][] ;
    private Boolean[] ;
    internal  ;
    []
private  ;
    internal PivotFieldType ;
    internal int ;
    private bool ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    internal bool ;
    internal bool ;
    internal bool ;
    private int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal CellArea ;
    internal CellArea ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private Int32[] ;
    []
internal Worksheet ;
    private Int32[] ;
    private Style ;
    private StyleFlag ;
    private [0...,0...] ;
    private List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    private int ;
    private [][] ;
    internal Int32[][] ;
    internal Int32[][] ;
    internal (PivotTable );
    private void ();
    private CellArea ();
    internal void ();
    internal static Range (PivotTable , PivotFieldCollection , PivotArea );
    internal static void (PivotArea , PivotAreaFilterCollection , PivotTable , int , int , PivotFieldType , bool );
    internal void (Style );
    internal void (int , int , Style );
    internal void (int , Style );
    internal void ( );
    private void ();
    private void ();
    [("False")]
internal void ( );
    internal void ();
    internal void ( );
    private void (int , int );
    private bool (int , int );
    private void (bool );
    private static void (int , Cell , bool );
    internal void ( );
    private bool ();
    private void (PivotField , int , Cell , bool , bool );
    private void ( );
    private void ();
    private void ();
    private string (PivotItem , Style );
    private object (PivotItem );
    private void (PivotFieldCollection );
    private bool ();
    private void (int , int , int , int );
    private void ( , int , int , int , int );
    private void ( , int , int , int , int );
    private void ( , int , int , int , int );
    private void ( , int , int );
    private void ( , int , int , int , int );
    private void (int , int );
    private void (PivotFieldCollection , List`1<> ,  , int , int , int );
    private void ();
    private void (int , int , int , int );
    internal static Style (WorksheetCollection , PivotField , PivotItem );
    private void (int , int , int , int );
    private void (int , int );
    internal static PivotField (PivotTable ,  ,  );
    private int ( ,  );
    private Cell (int , int ,  );
    private  ( );
    private void (int );
    private void (int ,  , List`1<> , bool );
    private int (List`1<> , int , int , int );
    private void ( );
    private  (int );
    private void ( , int ,  );
    private void ( );
    private void ( , int );
    private void ( ,  , int , bool );
    private  ( ,  , PivotFieldDataDisplayFormat );
    private void ( );
    private void ( );
    private void ( , int );
    private void ( , int , bool , Hashtable );
    private void ( );
    private [] (int );
    private [] (int );
    private void ( );
    private [] ( , int , int );
    private void ( , int , int );
    private void ( );
    internal  (int ,  );
    private  (int , int , PivotField ,  , List`1<> , int );
    private void (Int32[] , List`1<> );
    private void ( );
    private void ();
    internal void ();
    private void ( , PivotFieldCollection , Int32[] , int , bool ,  );
    private void (Int32[] , PivotFieldCollection ,  );
    private void (Int32[] , int );
    private void (Int32[] , int , PivotFieldCollection , PivotField );
    private void (Int32[] , int , PivotFieldCollection , PivotField , List`1<> );
    private Int32[][] ();
    internal bool (int , int );
    internal void ();
    private int (PivotFieldCollection , Hashtable[] , int );
    private ArrayList ();
    internal List`1<> (List`1<> ,  , bool , PivotFieldCollection );
    internal List`1<> (List`1<> , int , int , Boolean[] );
    private  (PivotItem ,  ,  );
    private bool (string );
    private ArrayList (DateTime , int , PivotField , PivotItem );
    private static Hashtable (int , List`1<> );
    private void ( , PivotFieldCollection , int ,  );
    private  (PivotField , PivotItem );
    private List`1<> (PivotField , PivotItem , Hashtable );
    private void ( ,  , PivotField );
    private Cell[] (CellArea , int );
    private void ();
    private void ();
    internal void ( );
    internal static Int32[] (PivotField , ArrayList , bool );
    private void (PivotField ,  , bool , int ,  );
    private void (int ,  , PivotFilter ,  );
    private void ( ,  , int );
    private void (PivotField ,  , AutoFilter ,  );
    internal Int32[][] (int );
    internal  (int ,  );
    internal  (Byte[] ,  );
    internal  (List`1<> , PivotField , int , int );
    internal  (List`1<> , PivotField , int , int ,  ,  );
    private bool (ArrayList , PivotFieldCollection ,  ,  , int , int , int , int , PivotField , List`1<> );
    private void (ArrayList , int , int , PivotFieldCollection , List`1<> , PivotField , List`1<> );
    private void ( , PivotField , int ,  );
    private List`1<> (Int32[] ,  );
    private bool (PivotFieldCollection );
    private Style (int , int );
    private void (Cell , Style );
    private void (Cell );
    private void (int , int , Cell , PivotField );
    private void (Cell , int , int );
}
internal class  : object {
    public static  (Byte[] );
    public static  (Stream );
    public static  ( );
    private static Byte[] ( , int );
    public static  (Char[] ,  );
    public static  (Char[] , Byte[] );
    public static  (Char[] , Stream );
    private static  (Char[] ,  );
    public static Byte[] ( , Char[] , Byte[] , int ,  );
    public static Byte[] (string , Char[] , Byte[] , int ,  );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal string ;
    internal bool ;
    internal Style ;
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public (BigInteger , BigInteger );
    public BigInteger ();
    public BigInteger ();
    public sealed virtual string ();
    public virtual Byte[] ();
    public virtual void ( );
}
internal abstract class  : object {
    internal static bool (double , double );
    internal static bool (double , int );
    internal static double (double , double , bool );
    internal static double (double , double );
    internal static double (double , int );
}
internal class  : object {
    []
private  ;
    []
private Chart ;
    []
private ShapePropertyCollection ;
    private Hashtable ;
    []
private Workbook ;
    private bool ;
    internal (ShapePropertyCollection ,  , Chart , Hashtable , bool );
    internal ( , Hashtable );
    internal void ( , object );
    internal void ( , FillFormat );
    [("True")]
private void ( , TextureFill );
    private void ( , TextureFill );
    [("True")]
private void ( , TextureFill );
    [("True")]
internal void ( , GradientFill );
    [("True")]
private void ( , GradientFill );
    private void ( ,  );
    [("True")]
private void ( , GradientFill );
    [("True")]
internal void ( , FillFormat );
    [("True")]
internal void ( , Line );
    [("True")]
private void ( , Line , bool );
    private static string ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    private string ;
    private Hashtable ;
    internal (string );
    internal string ();
    internal int ();
    internal void ( );
    internal  (FontStyle , bool );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    internal  ;
    private ( );
    public ([] );
    public static  ( , bool );
    public static  (object );
    public static  ( );
    public [] ();
    public virtual  ();
    public virtual string ToString();
}
internal class  :  {
    private UIntPtr ;
    public UIntPtr ();
    public void (UIntPtr );
    public virtual  ();
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
}
internal class  : object {
    []
internal  ;
    []
internal Worksheet ;
    internal string ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal int ;
    internal int ;
    internal string ;
    internal int ;
    internal int ;
    private bool ;
    private bool ;
    private double ;
    private double ;
    internal bool ;
    private int ;
    private int ;
    private int ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    private  ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal  ;
    internal  ;
    internal UInt32 ;
    internal UInt32 ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal bool ;
    internal int ;
    private bool ;
    []
internal  ;
    internal ( , Worksheet );
    internal  (int );
    internal Style (int ,  );
    internal  (int );
    internal  (int );
    internal Byte[] (int , int , int );
    private void (int );
    internal int ( , int );
    private void ( ,  , Style , int , int );
    private void ( , Style );
    private Style ( ,  ,  , Style );
    private Style ( );
    internal int ( ,  , int , bool , int , int );
    private void (int ,  ,  , bool );
    private void ( ,  , bool , bool , Style );
    private void ( , bool , Style );
    private  ( ,  , bool );
    private void ( );
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual void (bool ,  );
    public abstract virtual int ();
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual Byte[] (byte );
    public abstract virtual int (byte , Byte[] , int );
    public abstract virtual Byte[] (Byte[] );
    public abstract virtual Byte[] (Byte[] , int , int );
    public abstract virtual int (Byte[] , Byte[] , int );
    public abstract virtual int (Byte[] , int , int , Byte[] , int );
    public abstract virtual Byte[] ();
    public abstract virtual Byte[] (Byte[] );
    public abstract virtual Byte[] (Byte[] , int , int );
    public abstract virtual int (Byte[] , int );
    public abstract virtual int (Byte[] , Byte[] , int );
    public abstract virtual int (Byte[] , int , int , Byte[] , int );
    public abstract virtual void ();
}
internal abstract class  : object {
    public static bool (int );
    public static  (int );
    public static int ( );
    public static int (int ,  );
    public static  ( , int , int );
    public static  ( ,  );
    public static  ( ,  );
    public static  ( ,  ,  , int );
    public static  ( ,  ,  , int );
    public static  ( ,  ,  , int );
    public static  ( ,  ,  , int , int );
    public static  ( ,  );
    public static  ( ,  ,  ,  ,  ,  );
    public static  ( ,  ,  ,  ,  ,  );
    public static void ( , Object[] ,  , bool );
    public static  ( ,  );
    public static Object[][] ( ,  , bool );
    public static Object[][] ( ,  , bool , int , int );
    public static  ( ,  ,  , bool , bool );
    public static  ( ,  ,  , bool , bool , bool );
    internal static  ( ,  , Int32[] ,  ,  , int , int , int , int , bool );
    internal static  ( ,  , [] ,  ,  , int , int , int , int , int , bool , int , bool );
    public static Int32[] ([] , [] ,  ,  , bool , bool );
    public static Int32[] ([] ,  ,  , bool , bool , Hashtable[] );
}
internal class  :  {
    internal void ( );
    internal void (string );
    [("True")]
internal void ( );
}
internal class  :  {
}
internal class  :  {
    private [] ;
    private [] ;
    private  ;
    internal ( , [] , [] ,  );
    internal [] ();
    internal [] ();
    internal  ();
    internal virtual double (double );
    public virtual  ( , TypeCode , object ,  );
    internal  (object );
    internal  ( , double );
    internal  ( , DateTime );
    internal  ( , TypeCode , object );
    internal NumberCategoryType (object );
    internal NumberCategoryType (TypeCode , object );
    private  ( ,  , TypeCode , object ,  );
    private  ( , DateTime ,  );
    private  ( , double ,  );
    public virtual  ();
    public virtual NumberCategoryType ();
    public virtual bool ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Shape ;
    internal ( );
    internal virtual void ( );
    private void ( );
    private void ( , string , int , int , int , int );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal (string , string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal static GraphicsPath ( , RectangleF , bool );
    internal virtual RectangleF (RectangleF );
    internal virtual void ();
    internal virtual RectangleF (RectangleF );
    internal virtual RectangleF (RectangleF , int );
    internal static PointF[] (RectangleF , Geometry );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  :  {
    private double ;
    private double ;
    public (double , double );
    protected virtual void (double , Double[] );
}
internal class  :  {
    internal int ;
    internal PivotTableSourceType ;
    internal ArrayList ;
    internal Byte[] ;
    internal string ;
    internal string ;
    []
internal  ;
    internal (PivotTableSourceType ,  );
    internal virtual void ();
    internal virtual  ( ,  );
    internal virtual PivotTableSourceType ();
    internal virtual String[] ( );
    internal virtual void (String[] ,  );
    internal virtual void (int , int , Worksheet );
    internal virtual void (int , int , Worksheet );
    internal virtual void (int , int , Worksheet );
    internal virtual void ( , CopyOptions );
}
internal class  : object {
    public static  ( );
    public static ICollection ( );
    public static ICollection ( );
    private static ICollection ( );
}
internal class  :  {
    internal  ;
    internal ( );
    internal ( ,  , object );
    internal virtual int ();
    internal virtual void ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Char[] ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private SqlScriptSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private String[] ;
    [DebuggerBrowsableAttribute("0")]
private CellValueType[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private StreamWriter ;
    internal (Workbook , SaveOptions );
    private SqlScriptSaveOptions (SaveOptions );
    public sealed virtual void ();
    public sealed virtual void Dispose();
    public sealed virtual void (Stream );
    private void (Worksheet , string , bool );
    private void (StringBuilder , int , int );
    private void (Worksheet , string , string , bool );
    private void (Worksheet , string , bool );
    private void (StringBuilder , int , int );
    private static void (StringBuilder , string );
    private void ();
    private static string (string );
    private static string (string , int );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    public  ( );
    public  (string );
}
internal class  : object {
    private StringBuilder ;
    []
private WorksheetCollection ;
    internal int ;
    private int ;
    private int ;
    internal (WorksheetCollection );
    private void (Byte[] , int );
    private string (Byte[] , Int32& , int , int , bool );
    internal string (Cell );
    internal string (int , Byte[] , int , int , bool );
    internal string (int , int , Byte[] , int , int , bool );
    private void (Byte[] , ArrayList );
    private void (Byte[] , Int32& , ArrayList );
    private void (byte , StringBuilder );
    private string (Byte[] , int , int , int , bool );
    private string (Byte[] , int , int , int , int );
    private string (Byte[] , int , int , int );
    private string (Byte[] , int , int , int );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
    private void (Byte[] , int , ArrayList );
}
internal class  :  {
    public ( );
    public virtual  (String& );
}
internal abstract class  : object {
}
internal class  : object {
    private Boolean[] ;
    private UInt32[] ;
    private Int64[] ;
    private Int64[] ;
    private UInt32[] ;
    private  ;
    public (Byte[] );
    private void (Byte[] , int , int );
    public void (Byte[] );
    public sealed virtual Byte[] (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  : object {
    internal  ;
    private bool ;
    protected Byte[] ;
    protected internal ( , Byte[] );
    protected internal ( , bool , Byte[] );
    public virtual  ();
    public virtual Byte[] ();
    public virtual void (Stream );
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private AccessCacheOptions ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private SaveOptions ;
    internal (Workbook , SaveOptions );
    internal static  (Workbook , FileFormatType , SaveOptions );
    public sealed virtual void Dispose();
    public sealed virtual void ();
    public sealed virtual void (Stream );
}
internal class  : object {
    []
private  ;
    internal bool ;
    internal Single[] ;
    internal bool ;
    internal float ;
    internal Single[] ;
    internal Single[] ;
    internal Int32[] ;
    internal Int32[] ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal float ;
    internal float ;
    internal float ;
    internal Single[] ;
    public ( );
    internal  ();
}
internal class  : object {
    private Int32[] ;
    private bool ;
    private Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static IDictionary ;
    private static ();
    private static void (string , Byte[] );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private Int32[] (bool , Byte[] );
    private int (int , int );
    private void (Int32[] , Byte[] , int , Byte[] , int );
    private static int (Byte[] , int );
    private static void (int , Byte[] , int );
    public static Byte[] (string );
    public static string (Byte[] );
}
internal class  : object {
    private  ;
    internal ( );
    internal void ();
    internal void ( );
    internal void ( );
    private void (int ,  );
    private void (int ,  );
}
internal class  :  {
    internal void (Trendline );
}
internal class  : object {
    internal static string (TextAlignmentType );
    internal static string (TextAlignmentType );
    internal static string (bool );
    internal static string (FontUnderlineType );
}
internal class  : object {
    []
private Cells ;
    private Hashtable ;
    private Hashtable ;
    internal void (Cells , int , int , int , int , AutoFitterOptions );
    private int (int ,  , Style , string , bool , int , Worksheet , AutoFitterOptions );
    private int ( , Style , string , int , bool , int , Worksheet );
    private int (int ,  , Style , string , bool , int );
    private int (int , int , List`1<List`1<int>> , int );
    private int (int , int , List`1<List`1<int>> );
    private int (int );
    private int (Style , int , int , bool );
    private Int32[] (ArrayList , WorksheetCollection );
    private int ( , Worksheet );
    private static bool (Cells , int , int );
    private void (int , int , int , int , AutoFitterOptions );
    internal static string (Cells , Style ,  , int , bool );
    private void (ArrayList , Style , string );
    private static void (Hashtable ,  , int );
    private static void (Style , CellArea , Cells , Hashtable , AutoFitterOptions , double , int , string , int , Hashtable );
    private static object ( , int , int );
    private static bool (object , int , int ,  , AutoFitterOptions );
}
internal class  :  {
    internal (string );
}
internal class  : object {
    public sealed virtual string ();
    public sealed virtual void ( );
    public sealed virtual int (Byte[] , int );
    public sealed virtual int (Byte[] );
}
internal class  : object {
    internal string ;
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal static int ;
    private static ();
    internal static SizeF ( ,  ,  , int , int , int , SizeF , bool );
    internal static SizeF ( ,  ,  , int , int , int );
    internal static SizeF ( ,  ,  , int , int , int , SizeF );
    internal static void ( ,  ,  , int , int , Rectangle );
    internal static void ( ,  ,  , int , int , Rectangle , bool );
    internal static void ( ,  ,  , int , int , RectangleF );
    internal static void ( ,  ,  , int , int , RectangleF , bool );
    internal static bool ( ,  ,  , RectangleF );
    private static bool ( );
    private static bool ( );
    private static bool ( );
    internal static string ( );
    internal static string ( );
    internal static string ( , object , string , bool , bool );
    internal static Color (object , string , Color ,  );
    private static double (string );
    private static double (string );
    internal static bool (object , string );
    internal static bool (object , string );
    private static bool (string );
    private static DateTime (double );
    internal static bool ( );
    internal static  ( );
    public static void ( ,  , Rectangle , string , int , Font , Color ,  ,  );
    public static void ( ,  , RectangleF , string , int , Font , Color ,  ,  );
    public static void ( , Rectangle , string , int , Font , Color ,  ,  , StringFormat );
    internal static void ( ,  , Rectangle , PointF , float , RectangleF );
    internal static void ( ,  , RectangleF , PointF , float , RectangleF );
    private static int (PointF , RectangleF );
    internal static void ( ,  , Rectangle );
    internal static void ( ,  , RectangleF );
    internal static void ( , int , int , bool );
}
[DefaultMemberAttribute("")]
internal class  : ArrayList {
    [DebuggerBrowsableAttribute("0")]
public   { get; public set; }
    public  (int );
    public void (int ,  );
    internal  (int );
    internal  (string );
    internal bool ();
    internal int ();
}
internal class  :  {
    private Array ;
    private long ;
    public Array ();
    public void (Array );
    public long ();
    public void (long );
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
    public virtual  ();
    public virtual bool ( );
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal double ();
    internal void (double );
    internal void ( );
    internal bool ( );
}
internal class  :  {
    private ArrayList ;
    internal (int );
    internal void (Style , bool , Workbook );
    private Byte[] (int , double ,  , Workbook );
    private Byte[] (int ,  );
    private Byte[] (int , bool );
    private Byte[] (int , byte );
    private Byte[] (int , ushort );
    private Byte[] (int , int );
    private Byte[] (int ,  , int , bool , Workbook );
    private Byte[] (int , int , bool , Workbook );
    private Byte[] (int , string );
    private Byte[] (int , BorderType , Border , Style , bool , Workbook );
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual bool ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual object ();
    public abstract virtual void (object );
    public abstract virtual Byte[] (string , Byte[] , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( );
    public (int );
    public (int ,  );
    public (int ,  ,  );
    public static  ( , bool );
    public static  (object );
    public BigInteger ();
    public  ();
    public  ();
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal int ( );
}
internal class  :  {
    internal (Scenario );
}
internal class  : object {
    private  ;
    private  ;
    private bool ;
    private int ;
    private Byte[] ;
    private IList ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private int ;
    private long ;
    private long ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    public ( ,  );
    public virtual  ();
    public virtual string ();
    public virtual void (bool ,  );
    protected virtual int (Byte[] );
    public virtual int ();
    public virtual Byte[] ();
    public virtual int (int );
    public virtual int (int );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (byte , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    protected virtual void (Byte[] );
    protected virtual Byte[] (int );
    protected virtual void ();
    protected virtual void (Byte[] , int );
    protected virtual void (bool );
    protected virtual void (Byte[] );
    protected static Byte[] (Byte[] );
    protected static void (Byte[] , int );
    protected static int (long );
    protected static int (Byte[] , Byte[] );
    protected static void (Byte[] , Byte[] );
}
internal class  :  {
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    internal ( );
    internal ( , double );
    internal ( , double , double );
    internal void ();
    internal void ();
    internal  ();
    internal void ( );
    internal  ();
    internal  ();
    public virtual  ();
    private void ();
    internal  ();
    public virtual  ();
    private void ();
    internal  ();
    public virtual  ();
    private void ();
    internal  ();
    public virtual  ();
    private void ();
    internal bool ();
    internal IList ();
    internal IList ();
    internal IList ();
    internal IList ();
    internal ArrayList ();
    internal IList ();
}
internal class  : object {
    [("False")]
public static Byte[] (Byte[] );
    [("False")]
public static Byte[] (bool , bool , int , int , int , Byte[] , int );
}
internal class  : object {
    []
private Cells ;
    private int ;
    []
private  ;
    []
private  ;
    private  ;
    []
private  ;
    private string ;
    internal (Cells , int ,  ,  );
    internal  ();
    public  ();
    public string ();
    public Style ();
}
internal class  : object {
    internal  ;
    internal void (Stream );
    public static  ( );
    internal bool (Hashtable );
}
internal abstract class  : object {
    protected static [] ;
    protected internal  ;
    protected internal  ;
    protected internal  ;
    protected internal [] ;
    protected internal bool ;
    protected internal IDictionary ;
    protected ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    private static ();
    protected static [] ( );
    protected abstract virtual bool ();
    protected virtual bool ();
    public  ();
    public virtual  ();
    protected abstract virtual  ();
    protected virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  (int );
    public virtual [] ();
    protected internal  ();
    protected internal  ();
    protected internal [] ();
    protected virtual void ();
    public virtual bool ();
    public virtual  ();
    internal virtual  ( );
    protected virtual  ( ,  );
    public bool ();
    public bool ();
    public bool ();
    internal bool ();
    internal bool (bool , bool );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual Byte[] ();
    public abstract virtual Byte[] (bool );
    protected internal abstract virtual bool ();
    public abstract virtual  ( );
    public abstract virtual  ( );
    public abstract virtual  ();
    public virtual  (int );
    public abstract virtual  ();
    public abstract virtual  (BigInteger );
    public virtual  ( );
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    private GraphicsPath (float , float , float , float , float , float );
    private static void ( ,  ,  ,  , Single& , Single& );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private ( );
    public (string );
    public static  (object );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    private UInt32[] ;
    private long ;
    private Byte[] ;
    private UInt32[] ;
    private ( );
    public object ();
    private void ();
    private void (byte );
    private void (Byte[] , int , int );
    private Byte[] ();
    public static Byte[] (string );
    public static Byte[] (Byte[] );
    public string (Byte[] );
    public static Byte[] (byte );
    public string (byte );
    public string (string );
    private static string (Byte[] , int );
    private void (Byte[]& , int );
    private UInt32 (UInt32 , UInt32 , UInt32 , UInt32 , UInt32 , int );
    private UInt32 (UInt32 , UInt32 , UInt32 , UInt32 , UInt32 , int );
    private UInt32 (UInt32 , UInt32 , UInt32 , UInt32 , UInt32 , int );
}
internal class  : object {
    []
private Workbook ;
    private BinaryReader ;
    []
private  ;
    internal ( );
    internal void (Stream );
    internal static  (Byte[] , int , Hashtable );
}
internal class  : object {
    protected IList ;
    protected  ;
    public (IList ,  );
    public virtual IList ();
    public virtual  ();
    public virtual void (Stream );
    public static  (Stream );
}
internal class  : object {
    private int ;
    private int ;
    private  ;
    private string ;
    public ( , int , int );
    public ( , int );
    public int ();
    public int ();
    public  ();
    public string ();
    public void (string );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected [] ;
    [DebuggerBrowsableAttribute("0")]
protected ArrayList ;
    [DebuggerBrowsableAttribute("0")]
protected Double[] ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected Color[] ;
    [DebuggerBrowsableAttribute("0")]
protected String[] ;
    [DebuggerBrowsableAttribute("0")]
protected Font ;
    [DebuggerBrowsableAttribute("0")]
protected Color ;
    [DebuggerBrowsableAttribute("0")]
protected Single[] ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public (float , float , float , float , Double[] );
    public (float , float , float , float , Double[] , float );
    public (RectangleF , Double[] , float );
    public (float , float , float , float , Double[] , Color[] , float );
    public (RectangleF , Double[] , Color[] , float );
    public (float , float , float , float , Double[] , Color[] , float , String[] );
    public (float , float , float , float , Double[] , Color[] , float , String[] ,  );
    public (float , float , float , float , Double[] , float , String[] );
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void ();
    protected virtual void (bool );
    internal [] ();
    public Double[] ();
    public void (Double[] );
    public  ();
    public void ( );
    public void (Color[] );
    public void (String[] );
    public Font ();
    public void (Font );
    public Color ();
    public void (Color );
    public void ( );
    public void (float );
    public void (float );
    public void (float );
    public void (Single[] );
    public void (SizeF );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public float ();
    public float ();
    public float ();
    public float ();
    public void (float );
    public float ();
    public void (float );
    public void ( );
    public void (bool );
    public void (float );
    public void (int );
    internal void ( );
    public void ( );
    private static void (Hashtable , double , ArrayList );
    private static bool ( );
    public virtual void ( ,  );
    private PointF ( , SizeF );
    private void ( , PointF& , float , SizeF , ArrayList , ArrayList );
    private void (RectangleF& , PointF& , float , SizeF , int , PointF );
    private bool (PointF , PointF , RectangleF );
    private void ( , PointF& , float , SizeF );
    private void ( , RectangleF ,  ,  , RectangleF , PointF );
    private int (PointF , RectangleF );
    private GraphicsPath ();
    private bool ( ,  , RectangleF );
    private PointF ( ,  , SizeF , float );
    private  ( , float );
    private RectangleF ( , SizeF );
    internal void ( ,  , Rectangle ,  );
    internal void ( ,  );
    public int (PointF );
    private int ([] );
    protected RectangleF ();
    protected void (RectangleF );
    protected float ();
    protected SizeF ();
    protected SizeF ();
    protected float ();
    protected virtual void ();
    protected virtual  (float , float , float , float , float , float , float , Color ,  ,  , float ,  );
    protected virtual  (float , float , float , float , float , float , float , Color ,  ,  , float );
    protected SizeF (float , float );
    protected void ( );
    protected void ( );
    protected void ( );
    private bool (Single[] );
    private bool (float );
}
internal class  :  {
    public static  ;
    public static  ;
    private (int );
    private static ();
    public static  (int );
}
internal class  : object {
    private  ;
    private byte ;
    private byte ;
    public ( , byte , byte );
    public sealed virtual  ();
    public sealed virtual  (int );
    public sealed virtual  (int );
    public virtual int ();
    public virtual int ();
    public virtual bool ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (Stream );
    public virtual int ReadByte();
    public virtual int Read(Byte[] , int , int );
    public virtual void (int );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal  ;
    public (Byte[] );
    public (Stream );
    public ( );
    public Byte[] ();
    public Byte[] (int );
    public  ();
    public Byte[] ();
}
internal abstract class  : object {
    protected  ;
    protected int ;
    protected int ;
    protected bool ;
    public ( , int , int );
    public abstract virtual  ( );
    public virtual void ( );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual  ();
}
internal class  : object {
    internal static int ( , WorksheetCollection );
    internal static int (Font , WorksheetCollection );
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual Int32[] ();
}
internal class  : object {
    private StreamWriter ;
    private string ;
    private bool ;
    private bool ;
    internal (StreamWriter , string , bool );
    internal static string (string );
    internal void ( , string );
    private void ( , string );
    private void ( , string );
}
internal class  : object {
    internal bool ;
    []
private  ;
    private  ;
    private AutoShapeType ;
    private bool ;
    []
private Workbook ;
    []
private Worksheet ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    private float ;
    private int ;
    private  ;
    private  ;
    private Font ;
    private Color ;
    private  ;
    private TextAlignmentType ;
    private TextAlignmentType ;
    private TextDirectionType ;
    private TextOrientationType ;
    private bool ;
    private bool ;
    private float ;
    private float ;
    private float ;
    private float ;
    private  ;
    private RectangleF ;
    private RectangleF ;
    private GraphicsPath ;
    private  ;
    private  ;
    private string ;
    private ArrayList ;
    private PointF ;
    private  ;
    private IList ;
    private IList ;
    private string ;
    private int ;
    private bool ;
    private bool ;
    internal bool ;
    private bool ;
    private double ;
    private int ;
    private int ;
    private int ;
    internal int ;
    internal ArrayList ;
    []
internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    []
internal Chart ;
    internal Shape ;
    internal PointF ;
    internal PointF ;
    private RectangleF ;
    private RectangleF ;
    private bool ;
    private  ;
    private  ;
    private Graphics ;
    private bool ;
    private bool ;
    internal short ;
    internal bool ;
    internal  ;
    internal  ;
    []
internal  ;
    internal bool ;
    public ( ,  );
    public ( );
    public virtual void ( , bool );
    private void ();
    private void ();
    private RectangleF (RectangleF );
    private void (int , Single& , Single& , float , float );
    private RectangleF (RectangleF );
    internal bool ();
    internal void (bool );
    internal Workbook ();
    internal void (Workbook );
    internal Worksheet ();
    internal void (Worksheet );
    internal  ();
    internal void ( );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal int ();
    internal int (int , int , int , int );
    internal int (int , int , int , int );
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    internal  ();
    internal void ( );
    internal RectangleF ();
    internal RectangleF ();
    internal void (RectangleF );
    internal GraphicsPath ();
    internal void (GraphicsPath );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal bool ();
    public  ();
    public  ();
    public void ( );
    public AutoShapeType ();
    public void (AutoShapeType );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public int ();
    public void (int );
    internal bool ();
    public RectangleF ();
    public  ();
    public void ( );
    public  ();
    public void ( );
    public Font ();
    public void (Font );
    public Color ();
    public void (Color );
    public  ();
    public void ( );
    public TextAlignmentType ();
    public void (TextAlignmentType );
    public TextAlignmentType ();
    public void (TextAlignmentType );
    public TextDirectionType ();
    public void (TextDirectionType );
    public TextOrientationType ();
    public void (TextOrientationType );
    internal double ();
    internal void (double );
    public bool ();
    public void (bool );
    private bool ();
    private void (bool );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public float ();
    public void (float );
    public string ();
    public void (string );
    public ArrayList ();
    public  ();
    public void ( );
    public IList ();
    public void (IList );
    public int ();
    public void (int );
    public IList ();
    public void (IList );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal RectangleF ();
    internal RectangleF ();
    internal bool ();
    private string (bool );
    public  ();
    public void ( );
    private void ();
    internal void ();
    public void ();
    public void ();
    public sealed virtual  ();
    public sealed virtual void ( );
    public Graphics ();
    public sealed virtual void ();
    internal bool ();
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual int ();
    internal bool ();
    public sealed virtual bool ();
    public bool ();
    public void (bool );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    private bool ;
    private  ;
    private  ;
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public  ();
}
[DefaultMemberAttribute("Item")]
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
private String[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public String[] Columns { get; }
    public int Count { get; }
    public object Item { get; }
    public object Item { get; }
    internal (int , String[] );
    internal (int , int );
    internal abstract virtual object (int , int );
    public sealed virtual String[] get_Columns();
    public sealed virtual void BeforeFirst();
    public sealed virtual bool Next();
    public sealed virtual int get_Count();
    public sealed virtual object get_Item(int );
    public sealed virtual object get_Item(string );
}
internal class  : object {
}
internal class  : object {
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private int ;
    private UInt32[][] ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private bool ;
    private static ();
    private static UInt32 (UInt32 , int );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private static UInt32 (UInt32 );
    private UInt32[][] (Byte[] , bool );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] , int );
    private void (Byte[] , int );
    private void (UInt32[][] );
    private void (UInt32[][] );
}
internal class  :  {
    private byte ;
    internal  ;
    public (byte ,  );
    public virtual byte ();
    public virtual  ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ( ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual void (StringBuilder );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual  ( );
    public virtual  (Char[] ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  );
}
internal class  :  {
    internal void (byte );
    internal void ();
}
internal class  : object {
}
internal class  : object {
    internal Byte[] ;
    private int ;
    internal (Byte[] );
    internal (int );
    internal void (byte );
    internal void (short );
    internal void (Byte[] , int , int );
    internal void (int , Byte[] , int , int );
    internal void (int , int );
    internal void (int );
    internal void (Byte[] , int );
    internal Byte[] ();
    private void (int );
    internal int ();
    internal int (string , bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private TimelineCollection ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    internal (TimelineCollection , string );
    internal virtual void ( );
    private void ( );
    private bool (string );
    private string (string );
    private void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    internal ( );
    private void ( );
    private void ( );
    internal  ( , string );
    internal void ( );
    internal virtual void ( );
    private void ( );
    private void ( );
    private static Int32[] ( , int );
    private static Int32[] ( , int );
    private static void (Int32[] ,  );
    internal bool ();
    internal int ();
    internal void (int );
    internal Int32[] ();
    internal void (Int32[] );
    internal Int32[] ();
    internal void (Int32[] );
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
    internal Int32[] ();
    internal void (Int32[] );
    internal Int32[] ();
    internal void (Int32[] );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private static  ( , string );
    private static  ( );
    private static BigInteger (string );
    private static void (string ,  ,  );
    public static  (string );
    public static  ( );
    public static  (string );
    public static string ( );
    public static IEnumerable ();
    public static  (short , bool );
}
internal class  :  {
    internal ( ,  ,  , Int32[] );
    private ( , int ,  );
    protected virtual  ( , bool );
    public virtual bool (int , int );
    public virtual bool ();
    public virtual bool ();
    protected virtual void ();
}
internal class  :  {
    internal void (FormatConditionCollection , int , int );
    internal static int (Byte[] , int , CellArea );
}
internal class  : object {
    internal  ;
    internal void ( );
}
internal class  : object {
    internal string ;
    internal Single[] ;
    public (string , Single[] );
}
internal class  : object {
    private  ;
    public virtual void ( );
    public virtual int ();
    public virtual BigInteger ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( ,  );
    private ( , int );
    public virtual  (int );
    public  ( );
    public  ();
    internal bool ( );
    internal bool ();
    internal void (bool );
    public virtual bool ();
    public virtual  ();
    public virtual object ();
    public virtual bool ();
    public virtual void (bool );
    public virtual  ();
    public virtual void ( );
    public virtual  ( );
    public virtual bool ( , int );
    public virtual  ( , int );
    public virtual  ( , int , Workbook );
    public virtual  ( , bool );
    public virtual bool ( , int , int , bool );
    private bool ( );
    public virtual bool ( , bool );
    public virtual object ( );
    public virtual  ();
    public virtual  ( );
    public virtual void ();
    internal void ( );
    public virtual byte ();
    public virtual  ( ,  );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    private  ( ,  , int , int , bool , bool , bool );
    private  ( ,  , int , int , bool , bool );
    internal bool ( );
    internal bool ( ,  );
    public virtual  ( );
    public virtual  ( );
    public virtual bool ();
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  ( , int );
    private  ( , int , int );
    public  ( ,  , int );
    private  ( , int , int ,  , int );
    public virtual void (StringBuilder ,  );
}
internal class  : object {
    internal Object[] ;
    internal bool ;
    internal (Object[] );
}
internal class  : object {
    public virtual  ( ,  , DateTime );
    public virtual  ( ,  );
    private ICollection ( , IList );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<CellArea> {
    [DebuggerBrowsableAttribute("0")]
public CellArea  { get; }
    public CellArea (int );
    internal void (CellArea );
    internal void (int , CellArea );
    internal void (int , CellArea );
    internal void (int , int );
    internal void (int , int );
    internal bool (int , int );
    internal CellArea (int , int , int );
    public CellArea (int , int );
    public Range (Cells , int , int );
    public void (int , int , int , int );
    public void (int , int , int , int );
    public void (Cells , int , int , int , int , bool );
    public void (Cells , int , int , int , int , bool , bool );
    internal ArrayList ();
    internal CellArea[] ();
    internal void ();
    internal void (CellArea , int );
    internal void (CellArea , int );
    internal void (CellArea , int );
    internal void (CellArea , int );
    internal void ( , int , int , int );
    internal void ( );
    internal void ( , int , int , int );
    internal void (CellArea , int , int , int , int );
    internal void (WorksheetCollection );
    internal  (CellArea );
}
[DefaultMemberAttribute("")]
internal abstract class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal ( ,  );
    public  ();
    public  (int );
    internal void ();
    public virtual int ( );
}
internal class  : object {
    private IDictionary ;
    private IList ;
    private (IDictionary , IList );
    public (Byte[] );
    public (Stream );
    public (IEnumerable );
    public int ();
    public int ();
    public IEnumerable ();
    public IEnumerable (string );
    public IEnumerable (string , bool );
    public IEnumerable (string , bool , bool );
    public  (long );
    public  (long );
    public bool (long );
    public Byte[] ();
    public void (Stream );
    public static  ( ,  );
    public static  ( ,  );
}
internal class  : object {
    []
private WorksheetCollection ;
    private double ;
    private  ;
    private  ;
    private  ;
    internal (Cells , int );
    public sealed virtual bool (int );
    public sealed virtual double (int );
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int , int );
    public sealed virtual int (int , int );
    public sealed virtual double (int , int );
    public sealed virtual void (Int32[] );
    public sealed virtual void (Int32[] );
}
internal class  : List`1<> {
    internal  (int );
}
internal class  : object {
    private int ;
    private int ;
    private  ;
    public void (int , int ,  );
    private int (int , int , BigInteger[] , int );
    private long (long , long , BigInteger[] , int );
    private void (int , int , BigInteger[] );
    private void (long , long , BigInteger[] );
    private BigInteger (BigInteger , BigInteger );
    public  ();
}
internal class  :  {
    internal int ;
    internal bool ;
    internal ( ,  , string );
}
internal class  : object {
    internal string ;
    private long ;
    internal bool ;
    internal (string , long );
    internal ( );
    public long ();
    public void (long );
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    private XmlLoadOptions ;
    private  ;
    public (Workbook );
    public void (Stream , LoadOptions );
    private void ( , string ,  );
    private  (string );
    private void ( , string ,  , bool );
    private void ( ,  );
    private static bool ( );
}
internal class  :  {
    internal (string );
    internal virtual void (String& );
    internal virtual void ( );
    internal void ( , string );
    internal  ( , ArrayList );
    internal void (string ,  );
    internal void (string , string , string );
    internal void ( ,  );
    internal void (string ,  );
}
internal class  :  {
    internal (PivotArea );
}
internal class  :  {
    private BigInteger ;
    private BigInteger ;
    private int ;
    public (bool , BigInteger , BigInteger , int );
    public BigInteger ();
    public int ();
    public BigInteger ();
}
internal class  : object {
    internal static Byte[] (Byte[] );
    internal static Byte[] (Byte[] );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static float ;
    internal ( , float , float ,  );
    private static ();
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : object {
    public static  ;
    private static ();
}
internal static class  : object {
    private static UInt32[] ;
    private static ();
    public static Byte[] (string );
    private static void (Stream , UInt32 , int );
}
internal class  : object {
    private Shape ;
    private  ;
    internal (Shape ,  );
    internal  ();
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int (int );
    internal int ( );
    internal void ( , int );
    internal bool ( );
    internal bool (int );
    internal bool ();
    internal int ();
}
internal class  :  {
    []
private RevisionCellMove ;
    []
private Workbook ;
    internal (RevisionCellMove , Workbook );
    private void ();
}
internal class  : object {
    private bool ;
    private  ;
    private  ;
    public virtual string ();
    public virtual void (bool ,  );
    public virtual BigInteger ();
    public virtual BigInteger[] (Byte[] );
    public virtual bool (Byte[] , BigInteger , BigInteger );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private PointF ;
    [DebuggerBrowsableAttribute("0")]
private PointF ;
    [DebuggerBrowsableAttribute("0")]
private PointF ;
    [DebuggerBrowsableAttribute("0")]
private PointF ;
    public PointF ();
    public void (PointF );
    public PointF ();
    public void (PointF );
    public PointF ();
    public void (PointF );
    public PointF ();
    public void (PointF );
}
internal class  : object {
    private string ;
    private string ;
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
}
internal class  : object {
    private  ;
    internal ( );
    public sealed virtual  ();
    public sealed virtual  ();
}
internal class  :  {
    private int ;
    private  ;
    private int ;
    internal (int , Row );
    public virtual int ();
    public virtual void (int );
    public virtual void ();
    public virtual Cell (int );
    public virtual Cell (int );
    public virtual Cell (int , bool , bool );
    public virtual void (Cell );
}
internal class  : object {
    private  ;
    private PivotTable ;
    internal ( );
    internal void ( );
    private void ( , Worksheet , PivotTable );
    private void ( , PivotTable );
    private void ( , PivotField , string );
    private bool (PivotField );
    private void ( , PivotField );
    private void ( , PivotField );
    private void ( , string );
    private void ( , PivotField );
    private void ( , PivotField );
    private static string (ConsolidationFunction );
}
internal class  : object {
    private Byte[] ;
    private int ;
    private  ;
    private  ;
    private int ;
    public ( );
    public ( ,  );
    public ( , int );
    public ( , int ,  );
    public sealed virtual string ();
    public sealed virtual void ( );
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static Int32[] ;
    private  ;
    internal int ;
    internal int ;
    internal int ;
    internal Int32[] ;
    internal Int32[] ;
    internal Int32[] ;
    internal  ;
    internal int ;
    internal  ;
    internal int ;
    internal int ;
    internal Int32[] ;
    internal Byte[] ;
    internal int ;
    internal int ;
    internal int ;
    internal object ;
    internal UInt32 ;
    internal  ;
    internal ( , object , int );
    private static ();
    internal UInt32 ();
    internal int (int );
    internal void ();
    internal void (Byte[] , int , int );
    internal int ();
    internal int (int );
}
internal class  : object {
    internal ArrayList ;
    internal  ;
    internal bool ;
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  ();
    public sealed virtual bool ();
    public sealed virtual Int32[] ();
    internal  ();
    internal void ( );
    internal int ();
    internal int ();
    internal bool ();
    internal int (int , int );
    internal  (int );
    internal  (int );
    internal int (int );
    internal  (int , int );
    internal  (int );
}
internal class  : object {
    internal OleObject ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal int ;
    internal bool ;
}
internal class  :  {
    public (Stream ,  );
    public (Stream , Stream ,  );
}
internal class  : object {
    internal ArrayList ;
    internal Hashtable ;
    internal void ( );
    internal void (string ,  );
    internal void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public static  ( );
}
internal class  :  {
    internal (Worksheet );
}
internal interface  {
    public abstract virtual bool ( );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    public int ();
    public void (int );
    public int ();
    public void (int );
    public byte ();
    public void (byte );
}
internal abstract class  : object {
    []
protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected bool ;
    protected bool ;
    protected  ;
    protected bool ;
    protected Color ;
    protected  ;
    internal ( ,  );
    internal  ();
    public  ();
    public void ( );
    public  ();
    internal  ();
    internal double ();
    internal  ();
    internal void ( );
    public  ();
    internal  ();
    public bool ( );
    public bool ( );
    internal void (Color );
    public virtual  ();
    public virtual void ( );
    public bool ();
    public void (bool );
    public Color ();
    public void (Color );
    public  ();
    public void ( );
    public virtual bool ();
    internal virtual bool ();
    internal void ();
    internal void ( );
    internal virtual bool ();
    internal virtual void (float , float , float , float );
    internal virtual void (Point , Point );
    internal virtual void (PointF , PointF );
    internal virtual void (Rectangle );
    internal virtual void (RectangleF );
    internal virtual void (GraphicsPath );
    internal virtual  (GraphicsPath );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    public ( , int , int );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
public static IEnumerable ;
    private static ();
    public sealed virtual IEnumerator GetEnumerator();
}
internal abstract class  : object {
}
internal class  : object {
    []
private Worksheet ;
    internal  ;
    internal (Worksheet );
    internal void ( );
    internal void ( , FormatConditionCollection );
    private void (string , FormatCondition );
    private Color (string );
    private void (Style , string , string );
    private void (Style , string );
    private void (Style , string );
    private void (Style , BorderType , string );
}
internal class  :  {
    public ( );
}
internal abstract class  : object {
    protected int ;
    protected int ;
    protected int ;
    protected Hashtable ;
    protected Hashtable ;
    protected  ;
    internal  ;
    protected bool ;
    protected bool ;
    internal (int , int , int ,  );
    internal (int , int , int ,  , Hashtable );
    internal  ();
    internal void ( );
    internal abstract virtual bool (int ,  );
    protected abstract virtual object ();
    protected abstract virtual object (object );
    protected abstract virtual void (object );
    protected abstract virtual void (object , CellArea );
    protected abstract virtual void (Int64[] );
    protected abstract virtual void (Int64[] , bool );
    public int ();
    public int ();
    public sealed virtual bool ( , int );
    internal bool ( );
    internal bool ( );
    internal bool ( );
    private bool (int , int , int );
    protected bool (int ,  );
    protected bool (int , int , int );
    private  (int , CellArea );
    internal static string (CellArea );
}
internal class  : object {
    []
private  ;
    []
private WorksheetCollection ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    private ArrayList ;
    internal ( );
    [("True")]
internal bool ( );
    internal bool ( );
    private List`1<string> ( , List`1<string> );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( , bool , bool );
    private void ( , string , object );
    private void ( , string , object );
    private void ( );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , TableStyle );
    private Style (string );
    private void ();
    private Hashtable ();
    private void ();
    private Style ( , Style , bool );
    private void ( , Style );
    private void ( , Style );
    private void ();
    private static Font (WorksheetCollection ,  , bool );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( );
    internal static  ( );
    [("True")]
private void ( );
    [("True")]
private  ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private  ( , bool );
    internal static  ( );
    internal static  ( );
    private void ( );
    internal static  ( , bool );
    private static void ( ,  , bool );
    private void ( );
    internal static  ( );
    private static  ( );
    private static  ( );
    private void ( );
    internal static  ( , WorksheetCollection , string );
    internal static  ( , bool );
    internal static  ( );
    [("True")]
private bool ( );
    private void ( );
    internal static  (WorksheetCollection ,  );
}
internal class  :  {
    [ObsoleteAttribute("Use ECCurve.CreatePoint to construct points")]
public ( ,  ,  );
    [ObsoleteAttribute("Per-point compression property will be removed, see GetEncoded(bool)")]
public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  (int );
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  (int );
    protected virtual  ( );
    protected virtual  ( );
    protected virtual  ( );
    protected virtual  ( );
    protected virtual  ( ,  ,  ,  );
    public virtual  ();
    protected virtual  ( ,  );
    protected virtual  ();
    protected virtual  (bool );
}
internal class  : object {
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private DateTime ;
    private DateTime ;
    private DateTime ;
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public DateTime ();
    public void (DateTime );
    public DateTime ();
    public void (DateTime );
    public DateTime ();
    public void (DateTime );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    public (int , string ,  , Byte[] );
    private ( );
    public static  (object );
    public static  ( , bool );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    []
private Worksheet ;
    private AccessCacheOptions ;
    private bool ;
    private CellArea ;
    internal (Worksheet );
    internal AccessCacheOptions ();
    internal void (AccessCacheOptions );
    internal void (AccessCacheOptions );
    internal CellArea ();
    internal void ();
    internal bool ( );
    internal bool ( );
    public void ();
}
internal class  : object {
    internal int ;
    internal string ;
    internal string ;
    internal static  ( );
}
internal class  :  {
    private static Byte[] ;
    public ( );
    private static ();
    public virtual string ();
    public virtual int ();
    public virtual  ();
}
internal class  : object {
    private  ;
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public  (int );
    public  (int , int );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    private Palette ;
    private Line ;
    internal (Palette );
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void (Line , int );
    internal void (Line , bool );
    internal void ();
}
internal class  : object {
}
internal class  :  {
    private bool ;
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal virtual void ( );
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    private static void (UInt32[] );
    private static void (UInt32[] );
}
internal class  :  {
    private Byte[] ;
    private Stream ;
    private int ;
    public (Byte[] , Stream );
    public virtual void (Stream );
    protected virtual bool ();
    private void ();
    private void (string );
    private void ();
    private void (int , Stream );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private int ;
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private int ;
    private int ;
    public ( ,  ,  , int , int , Int32[] , bool , int ,  , int , int , bool , bool , int , bool );
    private ( , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int , int , int , int ,  ,  );
    public virtual  (int , int , bool ,  ,  );
    public virtual bool ( );
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ( , Int32[] );
    public virtual bool ( , Int32[] );
    public virtual  (Double[] ,  ,  );
    public virtual  (Double[][] ,  ,  );
    public virtual int ( , bool );
    private void ();
    private void ();
    private void ();
}
internal class  :  {
    private Palette ;
    private bool ;
    private Area ;
    internal (Palette );
    internal void ();
    internal void ();
    internal void ();
    internal void (int );
    internal Area ();
    internal void (Area );
    internal bool ();
    private void ();
    internal void ();
}
internal class  :  {
    private  ;
    private string ;
    private Byte[] ;
    private bool ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) ;
    public ( );
    protected virtual  ();
    public virtual Byte[] ();
    public virtual void ( );
    public virtual void ( );
    protected virtual void ( );
    public virtual int ();
    public virtual  ();
    public virtual DateTime ();
    public virtual  ();
    private  ();
    public virtual  (BigInteger );
    public virtual  ();
    public virtual Byte[] ();
    public virtual Byte[] ();
    public virtual string ();
    public virtual string ();
    public virtual Byte[] ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool ( );
    protected virtual bool ();
}
internal class  : object {
    internal UInt32 ;
    internal  ;
    internal static  ( );
}
internal class  : object {
    private  ;
    []
internal Workbook ;
    private ArrayList ;
    private String[] ;
    private ArrayList ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ( );
    internal (Workbook );
    internal  ();
    internal void ( );
    internal bool ();
    internal  (int );
    internal  (int , int , int , int , int );
    internal  (int , int , int );
    internal ArrayList ();
    internal void (ArrayList );
    internal void (Workbook , Workbook );
    internal int ( );
    internal int (WorksheetCollection , string );
    internal int (string );
    internal void (Workbook );
    internal String[] ();
    internal void (String[] );
    internal int (string );
    internal bool ( );
    internal ArrayList ();
    internal void (ArrayList );
    internal  (int );
    internal  (int );
    internal  (string , bool );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal int ( , int );
    internal int (string , int , bool );
    internal void ( , CopyOptions );
    internal void ( , CopyOptions );
    internal string ();
    internal void (string );
    internal string ();
    internal string ();
    [("False")]
internal static string (string , Workbook , bool );
    private static string (string , StringBuilder );
    private static string (string );
    private static string (string , StringBuilder );
    private static void (Workbook , StringBuilder );
    internal bool ();
    internal string (Workbook );
    internal String[] ();
    internal void (string , string );
    internal void (String& , String& );
    internal void (string , string );
    internal void (string , String[] ,  );
    internal string ();
    internal String[] ();
    internal void (string , string );
    internal int (Workbook , Workbook[] );
    internal static string (string );
    [("False")]
internal static int (string , Workbook[] );
    internal static string (string ,  );
    internal static bool (string );
    internal static string (string ,  , bool );
    internal static string (string );
    internal static char ( );
}
internal class  : object {
    private  ;
    private  ;
    public ( ,  );
    public  ();
    public sealed virtual void (Stream );
    public sealed virtual object ();
}
internal class  : object {
    private Double[] ;
    public (Double[] );
    internal Double[] ();
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual void (StringBuilder );
    public sealed virtual bool (int ,  );
    public sealed virtual  (int , int , [] , int , int , bool );
    public sealed virtual  (int , int ,  , int , int , bool );
    public sealed virtual  (int , int ,  , int , bool );
    public sealed virtual  (int , int );
    public sealed virtual int (int ,  );
    public sealed virtual int (int ,  );
    public sealed virtual  (int );
    public sealed virtual  (int ,  );
    public sealed virtual object (int ,  );
    public sealed virtual void (int , StringBuilder ,  );
    public sealed virtual void (int , [] , int , int );
    public sealed virtual  (int , Double[] , int , int ,  ,  );
}
internal class  : object {
    internal static int ;
    internal static int ;
    private static ();
}
internal class  :  {
    public (TextWriter );
    public void (object );
    public void (object , string , Char[] ,  );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public void (string );
    public MemoryStream ();
    public sealed virtual void Dispose();
}
internal class  :  {
    internal ( , float , float ,  );
    private void ( ,  );
    internal virtual void ();
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal enum  : Enum {
    public int value__;
    public static  MD5;
    public static  Sha1;
    public static  RipeMD160;
    public static  DoubleSha;
    public static  MD2;
    public static  Tiger192;
    public static  Haval5pass160;
    public static  Sha256;
    public static  Sha384;
    public static  Sha512;
    public static  Sha224;
}
internal class  :  {
    private int ;
    []
private  ;
    private  ;
    private bool ;
    private bool ;
    private  ;
    private int ;
    private  ;
    public ( );
    public ( , int , int , bool , int , bool , bool );
    internal bool ();
    public virtual bool ();
    public virtual object ();
    public virtual void ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
}
internal class  : object {
    []
private  ;
    private string ;
    private bool ;
    private bool ;
    private int ;
    private List`1<> ;
    private List`1<object> ;
    internal ( , string );
    internal string ();
    private static  (string );
    internal float ();
    private  (string );
    private float ( , List`1<float> );
    private [] (string );
    private bool (char );
    private bool ([] );
    private [] (Stack`1<> );
    private int ( );
}
internal class  : object {
    private  ;
    public ( );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int ();
    public virtual Byte[] (Byte[] , int , int );
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    internal (TableStyleElement );
}
internal class  : object {
    internal ushort ;
    internal ushort ;
    internal Byte[] ;
    internal Byte[] ;
    internal int ;
    internal Stream ;
    internal (Stream );
    internal void (int );
    internal void ();
    internal ushort ();
    internal void ();
    internal void ();
    internal void (int );
    internal int ();
    internal short ();
    internal ushort ();
    internal Byte[] ();
    internal void (Byte[] , int , int );
    internal byte ();
    internal byte ();
    internal short ();
    internal ushort ();
    internal void ();
    internal string ();
    internal string (bool );
    internal string ();
}
internal class  : object {
}
internal class  :  {
    internal (Int32[] );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  );
    public ( ,  ,  ,  );
    public  ();
    public  ();
    public  ();
}
internal class  : object {
    public  (Byte[] , Size );
    public  ( , Size );
    public void ( ,  , RectangleF& , bool );
    public void (Single[] , Single& , Single& , Single& , Single& );
    public void (Single[] , Single[] , Single[] );
    public  (Single[] );
    public ArrayList (ArrayList , float , float );
    public void (string , ArrayList , ArrayList );
    public static ArrayList (string );
    public void (string , bool , Single& , String& , Single& );
    public void (PointF[] ,  );
    public void (PointF[] ,  );
    public float (string , ArrayList );
    public float (string );
    public static void ();
}
internal class  :  {
    public ( ,  );
}
internal class  : object {
    private string ;
    private Guid ;
    private DateTime ;
    public sealed virtual string (string );
    public sealed virtual void (WebRequest , Stream );
    public sealed virtual void (HttpWebResponse , Stream );
    private string ();
    private void (HttpWebResponse , Byte[] );
    private bool (string , DateTime& , Guid& );
    private Byte[] (Byte[] , Byte[] );
    private Byte[] ();
}
internal class  :  {
    private UInt32 ;
    public UInt32 ();
    public void (UInt32 );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal int (int , int );
    public  (int );
    internal void ( );
    internal int ( , bool );
    internal void ( );
    private void ( );
    internal int ( , int , bool );
    [("False")]
internal int (Byte[] , string );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private int ;
    private bool ;
    public ( ,  );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public virtual void ();
}
internal class  : object {
    internal static ArrayList (Color , Color , RectangleF , GradientStyleType , int );
}
internal class  : object {
    private ArrayList ;
    internal ArrayList ();
    internal void (ArrayList );
}
internal interface  {
}
internal class  : object {
    internal object ;
    internal byte ;
    internal bool ;
    internal Byte[] ;
    internal int ;
    internal int ;
    internal LegendEntry ;
    internal (object , byte );
}
internal class  : object {
    internal int ;
    internal bool ;
    internal TextAlignmentType ;
    internal TextAlignmentType ;
    internal int ;
    internal bool ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal short ;
    internal TextDirectionType ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private int ;
    private  ;
    private  ;
    private int ;
    private  ;
    private  ;
    public ( );
    public ( ,  );
    public ( , int );
    public ( , int ,  );
    public sealed virtual string ();
    public sealed virtual void ( );
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
}
internal class  : ValueType {
    internal static string ( , object , string );
    internal static bool ( , string , object );
    internal static string ( , DateTime , string , bool );
    private static bool (DateTime );
}
internal class  : object {
    private static int ;
    internal static Int32[] ;
    internal static Int32[] ;
    internal static Int32[] ;
    internal static SByte[] ;
    private static SByte[] ;
    internal static SByte[] ;
    internal static Int32[] ;
    internal static Int32[] ;
    internal Int16[] ;
    internal int ;
    internal  ;
    private static ();
    internal static int (int );
    internal void ( );
    internal void ( );
    internal static void (Int16[] , int , Int16[] );
    internal static int (int , int );
}
internal class  :  {
    internal int ;
    internal (int , string ,  );
    internal virtual  ();
    internal virtual  ();
    internal virtual object ();
}
internal class  :  {
    internal ArrayList ;
    internal string ;
    internal string ;
    internal (Shape );
}
internal interface  {
}
internal class  : object {
    private string ;
    private string ;
    private static  ;
    private static  ;
    private static  ;
    private static  ;
    private static  ;
    protected (string , string );
    private static ();
    internal static  ();
    internal static  ();
    internal static  ();
    internal static  ();
    internal static  ();
    internal string ();
    internal string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal static GraphicsPath[] ( , RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ([] , [] ,  );
    public (IEnumerable , IEnumerable ,  );
    public static  (object );
    public [] ();
    public [] ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public string ;
    public string ;
    public List`1<string> ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
}
internal class  : object {
    []
private Workbook ;
    []
private  ;
    []
private  ;
    []
private Worksheet ;
    []
private  ;
    []
private  ;
    private int ;
    private Byte[] ;
    private int ;
    []
private Cells ;
    internal ( );
    internal void ( ,  );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
}
internal class  : object {
    private  ;
    private int ;
    private  ;
    private long ;
    internal (int ,  );
    internal long ();
    internal  ();
    internal int ();
    internal  ();
    internal long ();
}
internal class  : BinaryReader {
    internal (Stream );
    internal Int32[] ();
    internal Int32[] (int );
    internal Int32[] (int );
    internal Single[] ();
    internal Single[] (int );
    internal string (int );
    internal PointF ();
    internal SizeF ();
    internal RectangleF ();
    internal Color ();
    internal PointF[] ();
    internal PointF[] (int );
    internal PointF[] ();
    internal PointF[] (int );
    internal PointF[][] ();
    internal PointF[][] ();
    internal Matrix ();
    internal [] (int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( , object );
    private void ();
    internal  ();
    internal  ();
    internal void ( );
    internal void (int );
    internal void (float , float );
    internal void (float , float , float );
}
internal class  :  {
    private [] ;
    public ([] );
    public ( );
    private ( );
    public static  ( , bool );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal abstract class  : object {
    protected int ;
    protected int ;
    protected int ;
    protected Byte[] ;
    protected bool ;
    public abstract virtual  ();
    public abstract virtual bool ();
    public abstract virtual void (Byte[] , int , int );
    public bool ();
    public void (bool );
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual byte ();
    public abstract virtual byte ();
    public abstract virtual byte ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  (int , int );
    public abstract virtual  ( );
    public abstract virtual  ();
    public abstract virtual  (int , int );
    public abstract virtual  ( );
    public abstract virtual void ( );
    public abstract virtual void (int , int );
    public abstract virtual void ( , int , int );
    public abstract virtual void ( );
    public abstract virtual void (int , int , int , int );
    public abstract virtual void ( , int , int );
    public abstract virtual void (int , int );
    public abstract virtual void (int , int );
    public abstract virtual void (int , int , int , int );
    public abstract virtual void (int );
    public abstract virtual void (int );
    public abstract virtual void (int );
    public abstract virtual void (int );
    public abstract virtual void (int , int );
    public abstract virtual void (int , int );
    public void ();
    public void (StringBuilder ,  );
    public void ();
    public void (StringBuilder ,  );
    public void ();
    public void ();
    public void (StringBuilder ,  );
    public abstract virtual string (bool );
    public abstract virtual void (bool );
    public abstract virtual void ();
    public abstract virtual void ();
    public abstract virtual long ();
    public abstract virtual  ();
    public abstract virtual int ();
    public void ();
    public string ();
    public int ();
    public int ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    public void ();
    public void (int );
    public void (int );
    public int ();
    public void (int );
    public bool ();
    public Byte[] ();
    public byte ();
    public void ();
    public void ();
    public void ();
    public void ();
    public void ();
    public bool ( );
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool ();
    public int ();
    public double ();
    public  ();
    public int ();
    public int ();
    public  (Workbook );
    public  (Workbook );
    public bool ();
    public bool ();
    public bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public abstract virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public sealed virtual bool ();
}
internal class  : object {
    internal static void ( , Byte[] );
    internal static int (Byte[] , int , byte , byte , object , double );
    internal static int (Byte[] , int , int , double );
    internal static int ();
    internal static int (string );
    internal static int (byte , byte , object );
    internal static void ( , PivotTable );
    internal static void ( , PivotTable );
    internal static void ( , PivotTable );
    internal static void ( , string );
    internal static void ( ,  );
    internal static void ( , int , int , PivotTable ,  , PivotField );
    internal static void ( , PivotField );
    internal static void ( , string );
    internal static void ( , int );
    internal static void ( );
    internal static void ( , string );
    internal static void ( , PivotTable );
    internal static void ( , PivotTable );
    internal static void ( );
    internal static void ( );
}
[DefaultMemberAttribute("Item")]
internal abstract class  : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public virtual void Add(object , object );
    public virtual void Clear();
    public abstract virtual bool Contains(object );
    public abstract virtual void CopyTo(Array , int );
    public abstract virtual int get_Count();
    private sealed virtual override IEnumerator ();
    public abstract virtual IDictionaryEnumerator GetEnumerator();
    public virtual void Remove(object );
    public abstract virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsSynchronized();
    public abstract virtual object get_SyncRoot();
    public abstract virtual ICollection get_Keys();
    public abstract virtual ICollection get_Values();
    public virtual object get_Item(object );
    public virtual void set_Item(object , object );
    protected abstract virtual object (object );
}
internal class  : object {
    private int ;
    private int ;
    private short ;
    private short ;
    internal (MsoDrawingType , int , int );
    internal void ( , CopyOptions );
    internal void ( , CopyOptions );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool ();
    public void (bool );
    internal bool ();
    internal void (bool );
    internal int ();
}
internal class  : SaveOptions {
    internal (SaveOptions );
}
internal class  : object {
    private Stream ;
    public (Stream );
    public virtual  ();
}
internal class  : object {
    private byte ;
    private bool ;
    private  ;
    private object ;
    private  ;
    private bool ;
    private  ;
    private  ;
    internal (int );
    internal (int ,  );
    internal (int ,  , object );
    internal (int ,  , object ,  );
    public sealed virtual bool ( , int );
}
internal class  : object {
    private string ;
    []
private  ;
    []
private  ;
    []
private  ;
    private string ;
    []
private WorksheetCollection ;
    internal ( , string , string );
    internal void ( );
    private void ( );
    private void ( ,  );
    private void ( );
    private void ( ,  );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
}
internal class  : object {
    public static string ;
    private static ();
    public static int ( );
    public static  ( );
    public static  ( );
}
internal class  : object {
    public static void ( , SizeF , bool );
    public static void ( );
    private static void ( );
    private static void ( , SizeF );
    private static void ( , bool );
    private static void ( , string );
    private static void ( , string );
    private static void ( , string );
    private static void ( , string );
    private static void ( , string , string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    internal string ;
    internal float ;
    internal FontStyle ;
    internal Font ;
    internal ArrayList ;
}
internal class  : object {
    []
private Worksheet ;
    []
private  ;
    []
private Chart ;
    []
private  ;
    private int ;
    internal ( , Worksheet ,  );
    private static ChartType (string );
    internal void ( );
    private void ( );
    private void ( );
    private Range (List`1<string> );
    private List`1<string> ( );
    private List`1<string> ( );
}
internal class  : object {
    private MemoryStream ;
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
}
internal class  :  {
    private int ;
    private double ;
    public virtual void (int , int );
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
    public virtual  ();
}
internal class  :  {
    internal ( );
    internal ( , int , int );
}
internal class  : ChartTextFrame {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private LabelPositionType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal (WorksheetCollection , Chart );
    internal bool ();
    internal void (bool );
    internal  ();
    internal Color ();
    internal void (Color );
    internal  ();
    internal  ();
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal LabelPositionType ();
    internal void (LabelPositionType );
    internal bool ();
    internal void (LegendEntry );
    internal void (ChartFrame , bool , bool );
    internal void (Legend , bool );
    internal void (ChartDataTable );
    internal void (Title );
    internal void (Axis , DisplayUnitLabel , ArrayList );
    internal void (Chart , bool );
    internal void (Chart );
    internal void (Chart , ArrayList , ArrayList );
    internal void (DataLabels , int , ArrayList );
    internal void (DataLabels , int , ArrayList );
    internal void (DataLabels , DataLabels );
}
internal class  :  {
    private  ;
    private bool ;
    private  ;
    internal ( , string , string ,  , bool );
    internal ( ,  , string , string ,  , bool );
    internal ( , string , string ,  , bool );
    protected virtual void ( , DateTime , double , StringBuilder );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal ( );
    internal virtual void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , bool , bool );
    private void ( );
    [("True")]
private void ( , string );
    private void ( , Picture );
    private string (Shape );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  :  {
    private  ;
    public ( );
    public virtual void ( );
    public virtual  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    private GraphicsPath (float , float , float , float , int );
}
internal class  :  {
    internal ( );
    public ( ,  );
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    private  ;
    private int ;
    private int ;
    private  ;
    private int ;
    public ( , Worksheet , int , int , int );
    public ( ,  ,  , Worksheet , int , int , int );
    private ( , int , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual void (bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    internal (byte );
}
internal class  :  {
    private  ;
    private DateTime ;
    private DateTime ;
    public (Stream );
    public (Byte[] );
    internal ( );
    private static  (Stream );
    public virtual int ();
    public virtual BigInteger ();
    public virtual  ();
    public virtual  ();
    public virtual DateTime ();
    public virtual DateTime ();
    public virtual Boolean[] ();
    public virtual bool ();
    public virtual bool (DateTime );
    public virtual void ();
    public virtual void (DateTime );
    public virtual  ();
    public virtual Byte[] ();
    public virtual void ( );
    public virtual void ( );
    protected virtual void ( );
    public virtual Byte[] ();
    protected virtual  ();
    public virtual [] ();
    public virtual [] (string );
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    internal  ;
    internal  ( );
}
internal class  : object {
    private Hashtable ;
    private Hashtable ;
    []
private  ;
    []
private  ;
    []
private  ;
    internal ( ,  ,  );
    public Hashtable ();
    internal void ( ,  ,  ,  );
    internal void (string , string ,  ,  ,  ,  ,  );
    internal int (string );
    internal int (string );
    internal Color (string );
    internal Single[] (string ,  );
    internal void ( ,  , string ,  ,  );
    internal Brush (float , float , float , float , [] , Single[] ,  , Matrix );
    private  ( );
    private void ();
    private string (string );
}
internal class  : object {
    private IList ;
    private IDictionary ;
    public ( );
    public (ICollection );
    public  ( );
    public int ();
    public ICollection ();
    public ICollection ( );
}
internal class  : object {
    private Double[][] ;
    public (Double[][] );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual bool ( );
    public sealed virtual bool (int , int ,  );
    public sealed virtual  (int , int );
    public sealed virtual  (int , int ,  );
    public sealed virtual object (int , int ,  );
    public sealed virtual void (int , int , StringBuilder ,  );
}
internal class  :  {
    internal ( , float , float , float , Double[] );
    [("True")]
protected virtual void (Double[] );
    protected virtual void ();
    protected virtual float (double , float );
    protected virtual void ( );
    protected virtual void ( );
}
internal class  :  {
    protected static IDictionary ;
    protected static IDictionary ;
    protected static IDictionary ;
    protected static IDictionary ;
    protected static  ;
    private static ();
    public (Byte[] );
    public ( );
    public (Stream );
    public (string ,  ,  ,  ,  );
    [ObsoleteAttribute("Use constructor without 'signingKey' parameter (ignored here)")]
public ( ,  ,  ,  ,  );
    public ( ,  ,  ,  );
    private static  ( , int );
    private void ( ,  ,  ,  );
    public  ();
    public bool ();
    public bool ( );
    public bool ( );
    public bool ( );
    private void ( ,  );
    internal static string ( );
    private static string ( );
}
internal class  :  {
    private int ;
    internal (Byte[] );
    internal virtual int ();
}
internal class  : object {
    []
private  ;
    []
private  ;
    []
private Workbook ;
    private  ;
    private  ;
    []
private ShadowEffect ;
    private ( , Workbook );
    private ( , Workbook );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal ShadowEffect ();
    internal void (ShadowEffect );
    internal static  (TextOptions , Workbook ,  );
    internal static  (TextOptions , Workbook ,  );
    internal static  (FillFormat , LineFormat , Workbook ,  );
    internal bool ();
    private void (FillFormat );
    private void (LineFormat );
    private void (FillFormat ,  );
}
internal abstract class  : object {
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    internal ( );
    public sealed virtual bool ( , int );
}
internal class  :  {
    private PointF[] ;
    public (PointF[] );
    public PointF[] ();
    public void (PointF[] );
    internal virtual bool ();
    internal virtual string (string );
}
internal class  : object {
    private static Int16[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private bool ;
    private static ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private int (int , int );
    public virtual int (Byte[] , int , Byte[] , int );
    private int (int , int );
    public virtual int (Byte[] , int , Byte[] , int );
}
internal class  : object {
    internal Comment ;
    internal string ;
    internal int ;
    internal (Comment , int , int );
}
internal class  :  {
    internal void (Axis );
}
internal class  : object {
    []
private  ;
    []
private WorksheetCollection ;
    []
private Chart ;
    private int ;
    []
private  ;
    internal ( , WorksheetCollection , int , Chart ,  );
    private void (Area , bool );
    private  ( , bool );
    private void (Font , int , int , ArrayList );
    internal ArrayList ();
    internal void (ErrorBar , int , ArrayList );
    internal void (ErrorBar , Palette , int ,  , int );
    private void (object , byte , bool , ArrayList );
    private void (Series , int );
    private void (Series );
    internal void (Chart );
    internal void (Series , int , int , ChartType );
    private void (LegendEntry , int );
    private void (Series , int , ChartType );
    private void (Series , int , ArrayList , int );
    private void (ArrayList , int );
    private void (int , int , int , bool );
    internal void (DataLabels , int , int );
    internal bool (ChartFrame );
}
internal class  :  {
    internal (byte );
    internal (byte , int );
    protected (byte ,  );
    internal virtual  (byte );
    public virtual  ();
    public virtual  ();
    public virtual bool ( , object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int ( );
    public virtual int ( ,  );
}
internal class  :  {
    internal (ListObject );
    private CellArea (ListObject );
}
internal class  :  {
    public static int ;
    private Byte[] ;
    public (Byte[] , int );
    public (Stream );
    private static ();
    public void (Byte[] , int );
    public Byte[] ();
}
[AttributeUsageAttribute("32")]
internal class  : Attribute {
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual void (Color , Color , HatchStyle );
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual  ();
    public abstract virtual void ( );
    [("True")]
public abstract virtual void ();
}
internal class  :  {
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    public (Stream , int );
    public Stream ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual void ();
    public virtual long ();
    public virtual long ();
    public virtual void (long );
    private byte (byte , UInt32 );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int , int );
    public virtual long (long , int );
    public virtual void (long );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
}
internal abstract class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected Int32[] ;
    protected Byte[] ;
    protected IDictionary ;
    protected bool ;
    protected short ;
    protected bool ;
    protected IList ;
    protected bool ;
    protected Int32[] ;
    protected Byte[] ;
    protected Byte[] ;
    protected  ;
    protected int ;
    protected byte ;
    protected IDictionary ;
    public ( );
    protected virtual bool ();
    protected virtual bool ();
    protected virtual IDictionary ();
    protected abstract virtual Int32[] ();
    protected Byte[] ();
    protected virtual  ();
    protected virtual  ();
    protected virtual bool (Int32[] , Byte[] );
    public virtual void ( );
    public virtual void ( );
    public virtual void (bool );
    public virtual void (Int32[] );
    public virtual void (Byte[] );
    public virtual void (IDictionary );
    public virtual  ();
    public virtual int ();
    public virtual byte ();
    public virtual IDictionary ();
    public virtual IList ();
    public abstract virtual  ();
    public virtual  ();
    public abstract virtual  ();
    public virtual  ();
    public virtual void (IList );
    public virtual void ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal GraphicsPath ;
    internal bool ;
    internal bool ;
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal int ;
    internal  ;
    internal  ;
    internal  ;
    internal  ();
    internal  ();
    internal  ();
}
internal class  :  {
    internal (ListObject );
}
internal class  : object {
    private  ;
    private  ;
    public (string ,  );
    public ( ,  );
    public sealed virtual object ();
    public sealed virtual  ();
}
internal class  : object {
    internal static  (DisplayUnitType );
    internal static HatchStyle (FillPattern );
    internal static  (ChartMarkerType );
    internal static ChartMarkerType ( );
    internal static  (DataLabelsSeparatorType );
    internal static  (BubbleSizeRepresents );
    internal static  (TimeUnit );
    internal static  (CrossType );
    internal static  (CategoryType );
    internal static  (ChartType );
    internal static  (ErrorBarDisplayType );
    internal static  (ErrorBarType );
    internal static  (FormattingType );
    internal static  (LabelPositionType );
    internal static  (LegendPositionType );
    internal static  (TextAlignmentType );
    internal static  (TickLabelPositionType );
    internal static  (TickMarkType );
    internal static  (TrendlineType );
    internal static  (ChartLineFormattingType );
    internal static  (MsoLineDashStyle );
    internal static  (LineType );
    internal static double (WeightType );
    internal static  (MsoLineStyle );
    internal static  (LineCapType );
    internal static  (LineJoinType );
    internal static  (MsoArrowheadStyle );
    internal static  (MsoArrowheadLength );
    internal static  (MsoArrowheadWidth );
    internal static  (Bar3DShapeType );
    internal static  (GradientFillType );
    internal static  (GradientDirectionType );
    internal static  (RectangleAlignmentType );
    internal static  (MirrorType );
    internal static  (FillPictureType );
    internal static  (ChartSplitType );
    internal static  (CellValueType );
    internal static CellValueType ( );
    internal static  ( );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    internal (Byte[] , Byte[] );
    internal void (Byte[] , Byte[] );
    private static void (Byte[] , Byte[] , Byte[] , Byte[] );
    internal static Byte[] (Byte[] , int );
}
internal class  : object {
    private string ;
    []
private  ;
    private short ;
    private  ;
    private int ;
    internal bool ();
    internal string ();
    internal void (string );
    internal  ();
    internal void ( );
    internal bool ();
    internal Color ();
    internal int ();
    internal short ();
    internal void (short );
    internal bool ();
    internal int ();
    internal  ();
    internal bool ();
    internal void (bool );
    private void (Color );
    internal int (Char[] , int , int , StringBuilder , bool );
    private byte (char );
    internal bool (Char[] , int , int );
    private void (StringBuilder , Char[] , int , int , bool );
}
internal enum  : Enum {
    public int value__;
    public static  TxBody_EndParaRPr;
    public static  AttrList;
    public static  ExtList;
}
internal class  : object {
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    private static UInt32 (UInt32[] );
    private static UInt32 (UInt32[] );
    private static int (UInt32[] );
    private static int (UInt32[] );
}
internal class  :  {
    private  ;
    private static Byte[] ;
    internal int  { get; }
    internal ( );
    private static ();
    private void ();
    internal virtual Image ();
    internal virtual int ();
    internal virtual int ();
    internal virtual int ();
    internal virtual  ();
    internal virtual bool ();
    internal virtual bool ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private  ;
    private  ;
    private  ;
    private string ;
    private  ;
    private ( );
    public ( , [] , [] , string ,  );
    private static ();
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual [] ();
    public virtual [] ();
    public virtual string ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal virtual int ();
    internal virtual void ( );
    private void (Stream );
    private void (Stream );
    private void ( , Stream );
    private void (Stream );
    private void ( , Stream );
    private Byte[] (Byte[] );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (TableStyle , Stream );
    private void (Stream );
    private void (Stream );
    private void ( , Stream );
    private void ( , Stream );
    private void ( , Stream );
    private void ( , Stream );
    private void ( , Stream );
    private ArrayList (int );
    private void (Stream );
}
internal class  : object {
    protected byte ;
    protected object ;
    public (byte , object );
    public virtual byte ();
    public virtual object ();
    public virtual string ();
    public virtual void (Stream );
    public static  (Stream );
    protected static bool (byte , object );
}
internal enum  : Enum {
    public int value__;
    public static  PaletteDepth;
    public static  ColorSpace;
    public static  NullBrush;
    public static  NullPen;
    public static  PaletteData;
    public static  PatternSelectID;
    public static  GrayLevel;
    public static  RGBColor;
    public static  PatternOrigin;
    public static  NewDestinationSize;
    public static  PrimaryArray;
    public static  PrimaryDepth;
    public static  DeviceMatrix;
    public static  DitherMatrixDataType;
    public static  DitherOrigin;
    public static  MediaSize;
    public static  MediaSource;
    public static  MediaType;
    public static  Orientation;
    public static  PageAngle;
    public static  PageOrigin;
    public static  PageScale;
    public static  ROP3;
    public static  TxMode;
    public static  CustomMediaSize;
    public static  CustomMediaSizeUnits;
    public static  PageCopies;
    public static  DitherMatrixSize;
    public static  DitherMatrixDepth;
    public static  SimplexPageMode;
    public static  DuplexPageMode;
    public static  DuplexPageSide;
    public static  ArcDirection;
    public static  BoundingBox;
    public static  DashOffset;
    public static  EllipseDimension;
    public static  EndPoint;
    public static  FillMode;
    public static  LineCapStyle;
    public static  LineJoinStyle;
    public static  MiterLength;
    public static  LineDashStyle;
    public static  PenWidth;
    public static  Point;
    public static  NumberOfPoints;
    public static  SolidLine;
    public static  StartPoint;
    public static  PointType;
    public static  ControlPoint1;
    public static  ControlPoint2;
    public static  ClipRegion;
    public static  ClipMode;
    public static  ColorDepth;
    public static  BlockHeight;
    public static  ColorMapping;
    public static  CompressMode;
    public static  DestinationBox;
    public static  DestinationSize;
    public static  PatternPersistence;
    public static  PatternDefineID;
    public static  SourceHeight;
    public static  SourceWidth;
    public static  StartLine;
    public static  PadBytesMultiple;
    public static  BlockByteLength;
    public static  NumberOfScanLines;
    public static  CommentData;
    public static  DataOrg;
    public static  Measure;
    public static  SourceType;
    public static  UnitsPerMeasure;
    public static  StreamName;
    public static  StreamDataLength;
    public static  ErrorReport;
    public static  CharAngle;
    public static  CharCode;
    public static  CharDataSize;
    public static  CharScale;
    public static  CharShear;
    public static  CharSize;
    public static  FontHeaderLength;
    public static  FontName;
    public static  FontFormat;
    public static  SymbolSet;
    public static  TextData;
    public static  CharSubModeArray;
    public static  XSpacingData;
    public static  YSpacingData;
    public static  CharBoldValue;
}
internal class  : object {
    internal int ;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  );
    public ( ,  ,  );
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    private  ;
    private [] ;
    private [] ;
    public ( , [] , [] );
    public sealed virtual  ();
    public sealed virtual  (int );
    public sealed virtual  (int );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (int );
    public void ( );
    public  (int );
    public  (bool );
    public  (double );
    public  (short );
    public  (DateTime );
    public  (string );
    public  (byte );
    public  ();
    internal void ( );
    public void ( , CopyOptions );
}
internal class  : object {
    public static bool (string );
    public static bool (string );
    public static bool (string );
    private static bool (string );
    public static bool (string );
    public static bool (string );
    private static bool (string , int );
    public static bool (string );
    private static bool (string );
}
internal class  : object {
    internal static DateTime ;
    private static ();
    internal static DateTime (double );
    internal static void (Style , Style , int );
    internal static  (int );
    internal static Double[] ( );
    internal static void (Byte[] );
    internal static void (Byte[] , int , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
internal Double[] ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    internal (Worksheet ,  );
    public sealed virtual void Dispose();
    internal void ();
    private  (Column , Worksheet );
    private  (int , Worksheet );
    private  (int , Worksheet );
    internal void ( ,  );
    internal void ( );
}
internal class  :  {
    private object ;
    private object ;
    private int ;
    private bool ;
    public ( );
    public void (int );
    public void (bool );
    private  ();
    private Stream (Stream , string ,  );
    private Stream (Stream ,  ,  ,  );
    public Stream (Stream , string );
    public Stream (Stream , string , int );
}
internal abstract class  : object {
    protected  ;
    protected bool ;
    protected int ;
    protected double ;
    protected  ;
    protected ( );
    public abstract virtual  ( );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual void ( );
    public sealed virtual  ();
    public int ();
    public sealed virtual  ();
    public sealed virtual bool ();
}
internal class  : object {
    private static float ;
    private static ();
    internal static void ( , Stream ,  , ImageOrPrintOptions );
    internal static void ( , Stream ,  , ImageOrPrintOptions );
    internal static void ( , Stream , ImageOrPrintOptions , int , int );
}
internal abstract class  : object {
    public static int ;
    private static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    private static ();
    public static  ( , int , Byte[] );
    public static  (BigInteger ,  , int );
    public static bool (BigInteger );
    public static bool (BigInteger ,  , int );
    public static bool (BigInteger , BigInteger );
    private static void (BigInteger , string );
    private static bool (BigInteger );
    private static bool (BigInteger , BigInteger , BigInteger , int , BigInteger );
    private static  ( , int , Byte[] );
    private static UInt32 (Byte[] );
    private static void ( , Byte[] , Byte[] , int );
    private static BigInteger ( , Byte[] , int );
    private static void (Byte[] , int );
    private static bool (UInt32 );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private EbookSaveOptions ;
    public (Workbook , SaveOptions );
    public sealed virtual void (Stream );
    internal void (Stream );
    private void (List`1<Stream> ,  );
    private void (List`1<Stream> ,  );
    public sealed virtual void ();
    public sealed virtual void Dispose();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  : object {
    private IDictionary ;
    private IList ;
    public void ();
    public void ( , bool ,  );
    public void ( , bool , Byte[] );
    public bool ();
    public  ();
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual Row ();
    public abstract virtual Cell ();
    public abstract virtual  ();
    public abstract virtual  ();
}
internal class  : object {
    private string ;
    private string ;
    private string ;
    private string ;
    internal (Font );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal bool (Font );
}
internal class  : object {
    private bool ;
    private bool ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private static UInt32[] ;
    private static Byte[] ;
    private static ();
    private static UInt32 (UInt32 , int );
    private static UInt32 (UInt32 , int );
    private static void (int , UInt32[] , int , UInt32[] , int );
    private static void (int , UInt32[] , int , UInt32[] , int );
    private static void (int , UInt32[] , int , UInt32[] , int );
    private static void (int , UInt32[] , int , UInt32[] , int );
    private static UInt32 (Byte[] , int );
    private static void (UInt32 , Byte[] , int );
    private byte (byte , int );
    private UInt32 (int );
    private UInt32 (int );
    private UInt32 (int );
    private void (UInt32[] , UInt32[] , int );
    private void (UInt32[] , UInt32[] , int );
    private void (bool , Byte[] );
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual void (bool ,  );
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    []
internal Worksheet ;
    internal  ;
    internal  ;
    internal [] ;
    internal int ;
    internal int ;
    private int ;
    internal   { get; }
    internal (Worksheet );
    internal void ( );
    internal  (int );
    internal void ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal void ();
    internal void (byte );
    internal bool ();
    internal void ();
    internal void (int ,  );
    internal void ();
    internal int ( );
    internal void (int );
    internal void (int );
    internal void ( );
    internal void (CellArea );
    internal void (CellArea , CellArea );
    internal void (CellArea );
    internal void (int , int , int , int );
    internal void (int , int , int , int );
    internal void (CellArea , bool );
    internal void ( );
    internal [] ();
}
internal class  :  {
    internal void (bool );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal [] ;
    internal Hashtable ;
    internal Hashtable ;
    internal [][] ;
    internal Object[] ;
    internal Object[] ;
    internal  ;
    internal  ;
    internal bool ;
    internal bool ;
    internal Hashtable ;
    internal Hashtable ;
    private  ;
    private short ;
    internal ( ,  );
    internal virtual void ( );
    private void ( );
    internal void ( );
    private void ( );
    internal  (int ,  );
    internal bool ( , bool );
    internal void ();
}
internal class  : object {
    []
private Workbook ;
    []
private Worksheet ;
    []
private  ;
    internal ( );
    internal void ( ,  );
    private void ( ,  );
    private void ( );
    private bool ();
    private bool ();
    private void ( );
    private void ( , SparklineGroup );
    private void ( , Sparkline );
    private void ( , SparklineGroup );
    [("True")]
private void ( , string , CellsColor );
    private string (double );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    internal static int (int , int );
    internal static int (int , int );
    internal static int (int );
    internal static int (int );
    internal static int (int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  :  {
    private [] ;
    private Int32[] ;
    private int ;
    private int ;
    private  ;
    private int ;
    public ( ,  , [] , bool );
    public ( ,  ,  ,  , bool );
    private ( ,  );
    public virtual  ();
    public virtual  ( );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
    private void ( ,  , ArrayList , bool );
}
internal class  :  {
    private ArrayList ;
    private long ;
    internal long ();
    internal void (ArrayList );
    internal virtual void ( );
}
internal class  :  {
    private  ;
    internal virtual void ( ,  ,  );
    internal virtual void ( ,  );
}
internal class  : object {
    public static String[] (string , string );
    public static String[] (string , String[] );
    public static RectangleF (PointF[] );
    public static void (Matrix , RectangleF , RectangleF& );
}
internal class  : object {
    private string ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger[] ;
    private BigInteger[] ;
    public (string , BigInteger , BigInteger , BigInteger[] , BigInteger[] );
    public virtual string ();
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual BigInteger[] ();
    public virtual BigInteger[] ();
}
internal class  :  {
    protected CellArea ;
    protected (int , int , CellArea );
    internal CellArea ();
    internal void (CellArea );
    internal virtual bool ();
    internal void (Cells , bool );
}
internal abstract class  : object {
    internal abstract virtual void ();
    internal abstract virtual  ( ,  );
    internal abstract virtual void ( , CopyOptions );
    internal abstract virtual void (int , int , Worksheet );
    internal abstract virtual void (int , int , Worksheet );
    internal abstract virtual void (int , int , Worksheet );
    internal abstract virtual String[] ( );
    internal abstract virtual void (String[] ,  );
    internal abstract virtual PivotTableSourceType ();
    internal bool ();
    internal static  ( , PivotTableSourceType );
}
internal class  : object {
    private  ;
    private string ;
    private  ;
    private  ;
    private Byte[] ;
    private  ;
    public ( , Byte[] );
    public ( ,  , Byte[] );
    public (string ,  , Byte[] );
    public  ();
    public  ();
    public string ();
    public  ();
    private void (Byte[] );
    public Byte[] ();
    public virtual string ToString();
}
internal class  :  {
    internal string ;
    internal List`1<> ;
    internal virtual  ();
    internal void ( , CopyOptions );
    internal void ( );
    internal void (int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( ,  );
    internal  ();
    internal  ();
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    internal bool ();
    internal  ();
    internal virtual void ();
}
internal class  : object {
    private IList ;
    public void (bool , bool );
    public void (bool , bool );
    public void (bool , byte );
    public void (bool , int , int );
    public void (bool , long );
    public void (bool , long );
    public void (bool , DateTime );
    public void (bool , Int32[] );
    public void (bool , Int32[] );
    public void (bool , Int32[] );
    public void (bool , int );
    public void (bool , string );
    public void (bool , Byte[] );
    public void (bool ,  );
    public void (bool , bool );
    public void (bool , bool , string , string );
    public void (bool ,  , string );
    public void (bool ,  , Byte[] );
    public void (bool , long );
    public  ();
}
internal class  :  {
    internal (Cells , RowCollection );
    public virtual int ();
    public virtual void (int );
    public virtual void ();
    public virtual Row (int );
    public virtual Row (int , bool );
    public virtual Row (int , bool , bool , bool );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal (Workbook , SaveOptions );
    public sealed virtual void ();
    public sealed virtual void Dispose();
    public sealed virtual void (Stream );
    private void ();
}
internal class  : object {
    private static BigInteger ;
    private static BigInteger ;
    private  ;
    private int ;
    private Byte[] ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private bool ;
    private int ;
    private Byte[] ;
    public ( );
    private static ();
    public sealed virtual void ( );
    public sealed virtual  ();
    public sealed virtual int (Byte[] , int , int );
    private void ();
    public sealed virtual  ();
}
internal class  : object {
    private Range ;
    private Range ;
    private AutoFillType ;
    private bool ;
    private int ;
    private bool ;
    private bool ;
    internal (Range , Range , AutoFillType , bool );
    internal static void (Range , Range , AutoFillType );
    private void ();
    private void ();
    private void ();
    private void ();
    private void (List`1<> );
    private void (List`1<> ,  , List`1<> );
    private void ( );
    private void (List`1<> );
    private static void ( , Cell );
    private ArrayList ();
    private List`1<> ();
    private Cell ();
    private Cell ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Graphics ;
    [DebuggerBrowsableAttribute("0")]
private Bitmap ;
    internal ( );
    public sealed virtual GraphicsUnit ();
    public sealed virtual void (GraphicsUnit );
    public sealed virtual Matrix ();
    public sealed virtual void (Matrix );
    public sealed virtual RectangleF (Region );
    public sealed virtual float (Font );
    public sealed virtual bool (Region );
    public sealed virtual Region[] (string , Font , RectangleF , StringFormat );
    public sealed virtual SizeF (string , Font );
    public sealed virtual SizeF (string , Font , SizeF );
    public sealed virtual SizeF (string , Font , int );
    public sealed virtual SizeF (string , Font , PointF , StringFormat );
    public sealed virtual SizeF (string , Font , SizeF , StringFormat );
    public sealed virtual SizeF (string , Font , int , StringFormat );
    public sealed virtual SizeF (string , Font , SizeF , StringFormat , Int32& , Int32& );
    public SizeF (string , Font , float , float , float , float , StringFormat );
    public sealed virtual float (Font );
    public sealed virtual float (Font );
    [("True")]
public sealed virtual void Dispose();
}
internal class  : object {
    private  ;
    public sealed virtual  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (PivotFormatCondition );
}
internal class  :  {
    private int ;
    public (Byte[] );
    public (Byte[] , int , int );
    public (Byte[] , int );
    public (Byte[] , int , int , int );
    public int ();
}
internal class  : object {
    internal static ArrayList (String[] , int , object );
    internal static void (string , object , ArrayList );
    internal static object (string , object );
    internal static object (String[] , object );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Byte[][] ;
    public (Stream );
    public (Stream , int );
    public (Byte[] );
    internal static int (Stream );
    private  (int , int , int );
    internal virtual  ( );
    internal virtual  ( );
    internal virtual  ( );
    public  ();
    internal virtual int ();
    internal static int (Stream , int );
    internal static int (Stream , int , bool );
    private static Byte[] ( , Byte[][] );
    private static Char[] ( );
    internal static  (int ,  , Byte[][] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private static  ;
    private static ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public static  ();
    public virtual bool Equals(object );
    public sealed virtual bool Equals( );
    public static bool ( ,  );
    public virtual int GetHashCode();
}
internal class  : object {
}
internal class  :  {
    internal (PageSetup , string );
}
internal class  : object {
    protected Byte[] ;
    protected IList ;
    protected IList ;
    public (Byte[] , IList , IList );
    public virtual Byte[] ();
    public virtual IList ();
    public virtual IList ();
    public virtual void (Stream );
    public static  ( , Stream );
}
[("And")]
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( );
    internal virtual  (int );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    public ( );
    public  ();
    public  ();
    public  ();
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int (int , int );
    public abstract virtual int (int , int );
    public abstract virtual int (int , int );
    public abstract virtual int (int );
}
internal class  :  {
    internal (ScenarioInputCell );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual string ();
    public abstract virtual int (Byte[] , int );
    public abstract virtual int (Byte[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal bool ;
    private bool ;
    private Stream ;
    internal  ;
    private  ;
    private  ;
    private  ;
    private MemoryStream ;
    private  ;
    public ( );
    public (Guid );
    public (Stream );
    public (Stream , bool );
    public static bool (Stream );
    public static bool (Byte[] , int );
    private void (Stream );
    private bool ();
    private bool ();
    public void (string );
    public void (Stream );
    private void ( ,  );
    private UInt32 (Stream , bool , Int32& );
    private UInt32 (Stream , bool );
    private void ();
    private MemoryStream (UInt32 , int , int , bool );
    public MemoryStream (string );
    private void ();
    private void ( ,  );
    public bool (string );
    public  ();
    internal  ();
    private bool (Byte[] );
    private bool ();
    private bool ();
}
internal class  : object {
    private bool ;
    private string ;
    private int ;
    private FontStyle ;
    private  ;
    internal (string , int , FontStyle , bool ,  );
    internal (string , int , FontStyle ,  );
    internal bool ( );
    internal bool (string , int , FontStyle );
    internal bool (string , FontStyle );
    internal double (string );
    internal double (string , bool , bool , double );
    internal double (char );
    internal double (char , bool , bool , double );
    internal int (double , Char[] , bool , bool , double );
    internal double (bool , bool , double );
    internal string ();
    internal int ();
    internal FontStyle ();
    internal  ();
}
internal class  : object {
    internal string ;
    internal string ;
    internal int ;
    internal string ;
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
}
internal class  :  {
    private static double ;
    private float ;
    private float ;
    private  ;
    []
private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private bool ;
    private int ;
    public ( , float , float , bool );
    private static ();
    public void ();
    public void ( );
    private  ( );
    private static string ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( ,  , bool );
    private void ( ,  , bool );
    private void ( ,  );
    public virtual void ( );
    private void ( );
    private void ( );
    private void ( );
    private string ();
    public  ( );
    public  ( );
    public void ( );
    public void ( );
    public void ( ,  );
    internal void ( );
    private bool ( );
    public int ();
    public bool ();
    public  ();
    private  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private static void (string ,  );
    public static  (string );
    public static  ( );
    public static  (string );
    public static string ( );
    public static IEnumerable ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private ActiveXPersistenceType ;
    [DebuggerBrowsableAttribute("0")]
private ActiveXControl ;
    internal (string , Byte[] , ActiveXPersistenceType );
    internal (string , ActiveXControl , ActiveXPersistenceType );
    internal virtual void ( );
    private void ( );
    private void ( , string , string );
}
internal class  : object {
    internal static Byte[] ;
    internal static Byte[] ;
    private  ;
    private int ;
    private Byte[] ;
    public ( );
    private static ();
    public virtual string ();
    public virtual void ( );
    public virtual int ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    private static Byte[] (byte , int );
}
internal class  : object {
    private BinaryWriter ;
    internal (Stream );
    internal void (Byte[] );
    internal void ( );
    internal void ( );
    internal void (object ,  );
    private void (int );
    private void (int );
    private void (float );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public sealed virtual  (int );
    internal  (int );
    public sealed virtual  (string , Font , Color ,  ,  , double );
    internal void ();
}
internal class  :  {
    private string ;
    private Byte[] ;
    private static [] ;
    public (string );
    internal ( , string );
    internal (Byte[] );
    private static ();
    public static  (object );
    public static  ( , bool );
    public string ();
    public virtual  (string );
    public virtual bool ( );
    private void (Stream , long );
    private void (Stream , BigInteger );
    private void (MemoryStream );
    internal Byte[] ();
    internal virtual void ( );
    protected virtual int ();
    protected virtual bool ( );
    public virtual string ToString();
    private static bool (string , int );
    private static bool (string );
    private static string (Byte[] );
    internal static  (Byte[] );
}
internal class  : object {
    internal static  ;
    private static ();
    public sealed virtual double (double , double );
    public sealed virtual double (double , double );
    public sealed virtual double (double , double );
    public sealed virtual double (double , double );
}
internal class  : object {
    []
internal PivotField ;
    internal short ;
    internal int ;
    internal int ;
    internal string ;
    internal string ;
    internal (PivotField );
    internal void ( );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    public (Stream , bool );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual void Write(Byte[] , int , int );
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual int Read(Byte[] , int , int );
    public virtual void Flush();
    public virtual void WriteByte(byte );
    public virtual void Close();
    public virtual int ReadByte();
}
internal class  : object {
    internal  ;
    internal int ;
    internal string ;
    internal UInt32 ;
    internal static  (int );
    internal void ( ,  ,  );
    private void ( ,  );
    internal virtual void ( ,  ,  ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    internal ([] , bool ,  , bool , bool , Hashtable );
    internal bool ();
    internal bool ();
    internal virtual void (object , int );
    public virtual int Compare(object , object );
}
internal interface  {
    public abstract virtual  ( ,  , Byte[] );
}
internal class  :  {
    private int ;
    internal (int );
    public virtual  (byte ,  ,  );
    public virtual  (byte , string ,  );
}
internal class  :  {
    internal ( , float , float );
    private static Double[] ();
    [("True")]
protected virtual void (Double[] );
    protected virtual float (double , float );
    [("True")]
internal virtual void ( );
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  (string );
    public abstract virtual  ( );
}
internal class  :  {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal Byte[] ;
    internal string ;
    internal ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( );
    public ( , bool );
    public ( , Byte[] );
    public ( ,  );
    public Byte[] ();
    public  ();
    public bool ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Int32[0...,0...] ;
    internal (Int32[0...,0...] );
    internal (Int32[0...,0...] , String[] );
    internal virtual object (int , int );
}
internal class  : object {
    private string ;
    private int ;
    private bool ;
    private  ;
    internal (bool , int ,  );
    internal string ();
    internal void (string );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
    internal bool (bool , int ,  );
}
internal class  :  {
    public (int );
    public virtual string ();
    protected virtual void ();
    protected virtual void ();
    protected virtual void (Byte[] , Byte[] );
    protected virtual void (Byte[] );
    internal static void (int , UInt32[] , UInt32[] );
}
internal class  : object {
    public static string (string );
    internal static void (StringBuilder , StringBuilder );
    internal static char (string );
}
internal class  :  {
    internal void ( );
}
internal enum  : Enum {
    public int value__;
}
internal abstract class  :  {
    protected int ;
    protected int ;
    internal ( ,  , int , bool );
    protected ( , int , int );
    protected abstract virtual  (int , int );
    public virtual bool ();
    public virtual void (bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual void ( );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
}
internal class  : object {
    []
private Workbook ;
    private Hashtable ;
    internal (Workbook );
    internal void ( );
    internal void ();
    internal void ( );
    private void (CustomDocumentPropertyCollection );
    internal void ( );
    internal void ( , ContentTypePropertyCollection );
    private bool ( );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    protected virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    public static  ;
    private string ;
    private string ;
    private long ;
    private string ;
    private string ;
    private long ;
    private static ();
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal long ();
    internal void (long );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal long ();
    internal void (long );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private [] ;
    private ( );
    public ( );
    public ([] );
    public ( ,  );
    private static [] ([] );
    public static  (object );
    public static  ( );
    public [] ();
    public virtual  ();
    public virtual string ToString();
}
internal abstract class  :  {
    public ( ,  ,  , int );
    public virtual  (int , int );
    public virtual bool (int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
}
internal class  :  {
    private short ;
    internal void ( , ArrayList );
}
internal class  : object {
    internal int ;
    internal string ;
    internal string ;
    internal void ( );
    private void ( );
}
internal class  :  {
}
internal class  : object {
    public static BigInteger ( , BigInteger , BigInteger );
    public static BigInteger ( , BigInteger , BigInteger , BigInteger );
    public static BigInteger ( , BigInteger , Byte[] , Byte[] , Byte[] );
    public static BigInteger ( , BigInteger , BigInteger ,  );
    public static BigInteger (BigInteger , BigInteger );
    public static BigInteger ( , BigInteger , BigInteger , BigInteger , BigInteger );
    public static BigInteger ( , BigInteger , BigInteger , BigInteger , BigInteger );
    public static BigInteger ( , BigInteger , BigInteger );
    private static BigInteger ( , BigInteger , BigInteger , BigInteger , BigInteger );
    private static BigInteger ( , BigInteger , BigInteger , BigInteger );
    private static Byte[] (BigInteger , int );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private int ;
    internal ( ,  ,  , int );
    public virtual bool (Worksheet );
    public virtual bool ( );
    public virtual bool (Byte[] , int , int );
    public virtual bool ();
    public virtual  ();
}
internal class  : List`1<[]> {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    internal ( );
    internal ( , int );
    internal ( , int , int );
    private void (int );
    internal void (int );
    internal Hashtable ( , Int32[] );
    internal static int ( ,  ,  , Hashtable , Int32[] );
    internal static object ( );
    internal void ( );
    public  ([] , int , bool );
    public  ([] , int , double );
    public  ([] , int , DateTime );
    public  ([] , int , string );
    public  ([] , int , byte );
    public  ([] , int );
    public  ([] , int , int );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : object {
    internal int ;
    internal int ;
    internal (int , int );
}
internal class  : ValueType {
    internal static ArrayList ( ,  , Rectangle , float , double , int );
}
internal class  :  {
    private int ;
    private long ;
    private int ;
    private  ;
    private  ;
    internal ( );
    public ( , DateTime ,  );
    public virtual int ();
    public virtual  ();
    public virtual int ();
    public virtual DateTime ();
    public virtual  ();
    public virtual Byte[] ();
    public virtual void ( );
}
internal abstract class  :  {
    internal abstract virtual Byte[] (int );
    internal abstract virtual int (int );
    internal abstract virtual int (int );
    internal abstract virtual int (Byte[] );
    internal abstract virtual int (int , int , int , int , int );
    internal abstract virtual int (int , int , int , int , int , bool );
    internal abstract virtual int ();
    internal abstract virtual int (Byte[] , int , int );
    internal abstract virtual int (int );
    internal abstract virtual int (int );
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    public ( , Workbook );
    public void ();
}
internal class  : object {
    private  ;
    public virtual void ( );
    public virtual  ();
}
internal interface  {
    [("True")]
public abstract virtual string ();
    [("True")]
public abstract virtual string (string );
    public abstract virtual bool ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
}
internal class  : ActiveXControl {
    public ControlType Type { get; }
    internal (Shape );
    public virtual ControlType get_Type();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public ControlBorderType ();
    public void (ControlBorderType );
    public ControlSpecialEffectType ();
    public void (ControlSpecialEffectType );
    public int ();
    public void (int );
    public string ();
    public void (string );
    public Byte[] ();
    public void (Byte[] );
    public ControlPictureAlignmentType ();
    public void (ControlPictureAlignmentType );
    public bool ();
    public void (bool );
    public ControlPictureSizeMode ();
    public void (ControlPictureSizeMode );
}
internal class  :  {
    internal (SlicerCache );
}
internal class  :  {
    public ( );
}
internal class  :  {
    private  ;
    private Matrix ;
    private  ;
    private  ;
    private  ;
    private TextRenderingHint ;
    internal bool ;
    private SmoothingMode ;
    internal bool ;
    private bool ;
    private  ;
    public virtual void ( );
    protected virtual bool ( );
    public sealed virtual Matrix ();
    public sealed virtual void (Matrix );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual bool ();
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public TextRenderingHint ();
    public void (TextRenderingHint );
    public SmoothingMode ();
    public void (SmoothingMode );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public virtual void (TextWriter );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal abstract class  :  {
    internal int ;
    internal bool ;
    internal  ;
    protected (int ,  );
    protected (bool , int ,  );
    internal static bool (bool ,  );
    public static  ( , bool );
    public static  (object );
    protected virtual bool ( );
    protected virtual int ();
    public sealed virtual int ();
    public bool ();
    public bool ();
    public  ();
    public sealed virtual  (int , bool );
    public virtual string ToString();
}
internal class  :  {
    private  ;
    public  ();
    public void ( );
    public virtual  ( );
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; public set; }
    internal int (int , int );
    public  (int );
    public void (int ,  );
    public virtual int GetHashCode();
    public virtual bool Equals(object );
}
internal class  :  {
    internal  ;
    internal  ;
    []
private Workbook ;
    []
private RevisionCellChange ;
    internal (RevisionCellChange , Workbook );
    private void ();
    private  ( );
}
internal class  : object {
    private  ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private long ;
    internal ( , Byte[] ,  );
    internal int (Byte[] , bool );
    internal void ();
    internal  ();
    private void (Byte[] , Byte[] , Byte[] );
    private void (Byte[] );
    private static bool (Byte[] , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Pen ;
    [DebuggerBrowsableAttribute("0")]
private CustomLineCap ;
    [DebuggerBrowsableAttribute("0")]
private CustomLineCap ;
    [DebuggerBrowsableAttribute("0")]
private Brush ;
    public (Color );
    public (Color , float );
    public (Brush );
    public (Brush , float );
    internal Brush ();
    internal void (Brush );
    public Brush ();
    public Color ();
    public Single[] ();
    public void (Single[] );
    public CustomLineCap ();
    public void (CustomLineCap );
    public CustomLineCap ();
    public void (CustomLineCap );
    public DashCap ();
    public void (DashCap );
    public float ();
    public void (float );
    public Single[] ();
    public void (Single[] );
    public DashStyle ();
    public void (DashStyle );
    public LineCap ();
    public void (LineCap );
    public LineJoin ();
    public void (LineJoin );
    public float ();
    public void (float );
    public PenType ();
    public LineCap ();
    public void (LineCap );
    public Matrix ();
    public void (Matrix );
    public float ();
    public void (float );
    public void (LineCap , LineCap , DashCap );
    public sealed virtual object Clone();
    private void (bool );
    public sealed virtual void Dispose();
    public Pen ();
    public void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
public static  ;
    public ( );
    public ([] );
    public ( );
    private static ();
    public static  ( );
    internal virtual void ( );
}
internal class  : object {
    private bool ;
    private int ;
    private int ;
    internal (int , int );
    public sealed virtual int ();
    public sealed virtual void (int );
    public sealed virtual void (int );
    public sealed virtual void ();
    public sealed virtual void (int , int );
}
internal class  : object {
    []
private Workbook ;
    []
private  ;
    private  ;
    private bool ;
    private  ;
    private  ;
    private int ;
    internal (Workbook ,  , bool );
    internal void ();
    private Stream ( ,  , Stream , bool );
    internal void ( );
    [("True")]
internal void ( );
    [("True")]
private void ();
    internal void ( );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ( );
    private void ();
    private void ();
    private void ( , bool );
    internal string ();
    internal void (List`1<> , int );
    internal void (List`1<> , Font );
    private static void (List`1<> ,  );
    internal static void ( , List`1<> , int );
    private static void ( , List`1<> , int );
    private void ( );
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual Byte[] ();
    public abstract virtual void (Byte[] );
}
internal class  :  {
    public virtual Color (Color );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ExternalConnection {
    internal (ExternalConnectionCollection );
}
internal class  : object {
    internal Chart ;
    internal  ;
    internal string ;
    internal  ;
    internal  ;
    internal string ;
    internal ( , Chart );
    internal  ();
    internal void (string );
    internal string (TextureFill );
    internal string (string , string , string );
}
internal abstract class  : object {
    public static IDictionary (IDictionary );
    public static void (IDictionary , Byte[] );
    public static void (IDictionary , byte );
    public static void (IDictionary );
    public static void (IDictionary );
    public static void (IDictionary ,  );
    public static void (IDictionary , byte );
    public static void (IDictionary , int );
    public static void (IDictionary , Byte[] );
    public static void (IDictionary , byte );
    public static void (IDictionary ,  );
    public static void (IDictionary ,  );
    public static void (IDictionary );
    public static Byte[] (IDictionary );
    public static short (IDictionary );
    public static  (IDictionary );
    public static short (IDictionary );
    public static int (IDictionary );
    public static Byte[] (IDictionary );
    public static short (IDictionary );
    public static  (IDictionary );
    public static  (IDictionary );
    public static bool (IDictionary );
    public static bool (IDictionary );
    public static bool (IDictionary );
    public static Byte[] (Byte[] );
    public static Byte[] (byte );
    public static Byte[] ();
    public static Byte[] ();
    public static Byte[] ();
    public static Byte[] ( );
    public static Byte[] (byte );
    public static Byte[] (int );
    public static Byte[] ( );
    public static Byte[] ( );
    public static Byte[] ();
    private static bool (Byte[] );
    public static Byte[] (Byte[] );
    public static byte (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static  (Byte[] );
    public static byte (Byte[] );
    public static int (Byte[] );
    public static  (Byte[] );
    public static  (Byte[] );
    public static bool (Byte[] );
}
internal enum  : Enum {
    public int value__;
    public static  SimplexFrontSide;
}
internal class  : object {
    private  ;
    private Color ;
    private Color ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private bool ;
    private bool ;
    internal  ();
    internal void ( );
    internal Color ();
    internal void (Color );
    internal Color ();
    internal void (Color );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( , DateTime );
    public ( , DateTime , BigInteger );
    public static  (object );
    public  ();
    public DateTime ();
    public BigInteger ();
    public virtual  ();
}
internal class  : object {
    private List`1<> ;
    public List`1<> ();
    public  (string );
}
internal class  :  {
    internal (TableStyleElement );
}
internal class  :  {
    public virtual  ( , int , int );
    protected virtual  ( , int , int );
    protected virtual  ( , int , int );
    protected virtual  ( );
    protected virtual  ( , int , int );
    protected virtual  ( , int , int );
    protected virtual  ( , int , int );
    protected virtual  ( , int , int );
    protected virtual  ( , int );
    protected virtual  ( , int );
    protected virtual  ( , int , int );
    protected virtual  ( , int );
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  (int );
}
internal abstract class  : object {
    protected Byte[] ;
    protected Byte[] ;
    protected Color[] ;
    [("True")]
internal int  { get; }
    internal abstract virtual Image ();
    internal abstract virtual int ();
    internal abstract virtual int ();
    internal abstract virtual int ();
    internal abstract virtual  ();
    internal Byte[] ();
    internal Byte[] ();
    internal Color[] ();
    internal abstract virtual bool ();
    internal abstract virtual bool ();
    internal virtual void ();
    internal void (Color );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    [ObsoleteAttribute("Use GetInstance() instead")]
public ( );
    public static  ( , bool );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal abstract class  : object {
}
internal class  :  {
    internal DateTime ;
    internal (DateTime );
    internal virtual object ();
    internal virtual string ();
    internal virtual  ();
    internal virtual DateTime ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal abstract class  : object {
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static string ;
    public static IList ;
    private static ();
}
internal class  : object {
    []
private WorksheetCollection ;
    internal  ;
    private  ;
    private ArrayList ;
    private  ;
    internal (WorksheetCollection ,  );
    internal void ( );
    internal  ();
    internal  ();
    internal  ();
    internal  (ShapeCollection ,  );
    internal int (int );
    internal ArrayList ();
    internal ArrayList ();
    internal int ();
    internal int (Byte[] , string );
    internal WorksheetCollection ();
}
internal class  :  {
    internal string ;
    internal int ;
    internal string ;
    internal (int , string , string );
    internal virtual  ();
    internal void ( , CopyOptions );
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , DateTime );
    protected static Byte[] (DateTime );
    public DateTime ();
}
internal interface  {
    public abstract virtual bool ( , object ,  , object );
}
internal class  : object {
    private RevisionLogCollection ;
    internal (RevisionLogCollection );
    internal void ( );
}
internal class  : object {
    protected BigInteger ;
    protected BigInteger ;
    protected  ;
    [ObsoleteAttribute("Use constructor taking a ScalarSplitParameters instead")]
public (BigInteger , BigInteger , BigInteger[] , BigInteger[] , BigInteger , BigInteger , int );
    public (BigInteger , BigInteger ,  );
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual  ();
    public virtual BigInteger[] ();
    public virtual BigInteger[] ();
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual int ();
}
internal class  : object {
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal int ;
    public ( );
    public  ();
    public int ();
    public Object[] ();
    public virtual  ();
}
internal interface  {
    public abstract virtual void ();
}
internal class  : object {
    private  ;
    internal  ;
    internal ( );
    internal void (Style ,  , bool );
    internal void ( );
}
internal class  : object {
    private static UInt32[] ;
    private static Byte[0...,0...] ;
    private int ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    public ( );
    public (int );
    public (Byte[] );
    public (Byte[] , int , Byte[] , Byte[] );
    private static ();
    private void ();
    private void ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    private void (Byte[] , int );
    private void (UInt32 , UInt32 , int , int , int , int );
    private UInt32 (UInt32 , int );
    public virtual string ();
    public virtual int ();
    public virtual int ();
    public virtual void ();
    public virtual void ();
}
internal class  : object {
    private int ;
    private  ;
    internal ( );
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    [("True")]
internal void (PageSetup , Byte[] );
    [("True")]
internal void (Int32& , string );
    internal string (String[] );
}
internal class  : object {
    private CellArea ;
    private ListObject ;
    internal (int , int , int , int , ListObject );
    internal CellArea ();
    public ListObject ();
    internal bool ();
    internal bool (CellArea );
    internal bool ( );
}
internal class  :  {
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private DataMashup ;
    internal (Workbook );
    internal virtual void ( );
    private void (Stream );
    private void (Stream );
    private void ( , string , string , List`1<> );
    private void ( , List`1<> );
    private void (Stream );
    private void (Stream );
    private static bool (string );
    internal static void (PowerQueryFormula , TextWriter , bool );
    internal static void (PowerQueryFormulaFunction , TextWriter , bool );
    internal static void (PowerQueryFormulaCollection , PowerQueryFormulaParameterCollection , TextWriter );
    private void ( );
    private void ( );
    private void ( );
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
    private static bool (UInt32[] );
    private static void (UInt32[] , UInt32[] , UInt32[] , UInt32[] , UInt32[] , UInt32[] , UInt32[] );
    private static void (UInt32[] , UInt32[] , UInt32[] , UInt32[] , UInt32[] );
    private static void (UInt32[] , UInt32[] , UInt32[] , UInt32[] );
    private static bool (UInt32[] , UInt32[] , UInt32[] );
}
internal class  :  {
    private string ;
    internal ( , string );
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    internal  ;
    internal  ;
    public (BigInteger , BigInteger );
    public ( );
    public BigInteger ();
    public BigInteger ();
    public virtual  ();
}
internal class  :  {
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private int ;
    public virtual void ();
    public virtual bool (double , double );
    public virtual bool (double , double );
    public virtual  (double , double );
    public virtual  (double , double , int );
    public virtual  ();
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public int ( );
    public  (int );
    internal void (int ,  );
}
internal class  : object {
    public static  ( );
    private static void (Byte[] , int , BigInteger );
    private static void (Byte[] , int , int , BigInteger );
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal bool ;
    internal  ;
    internal static  ( );
}
internal class  :  {
    private static object ;
    private static Hashtable ;
    internal IconSet ;
    private Style ;
    public ( , double , IconSet , Style );
    private static ();
    internal virtual FormatCondition ();
    private static Byte[] (IconSetType );
    internal static MemoryStream (IconSetType , int );
    internal IconSetType (int );
    internal int ();
    public virtual ArrayList (RectangleF );
    private static  (IconSetType , int );
    public virtual  (RectangleF , Double[] , TextAlignmentType , TextAlignmentType );
    public virtual bool ();
    internal static int (IconSetType );
}
internal class  :  {
    public virtual int GetHashCode();
    public virtual bool Equals(object );
}
internal class  : object {
    private static bool (string , Int32& );
    internal static bool (string , Int32& , Int32& , Boolean& , Boolean& , Boolean& , Boolean& );
    public static bool (string );
    internal static Byte[] (WorksheetCollection , int , string , bool , bool , Boolean& );
    internal static Byte[] (WorksheetCollection , int , string , bool , bool , bool , Boolean& );
}
internal class  :  {
    internal (bool , Boolean[] , float , float ,  , float , Double[] );
    protected virtual float (double , float );
    [("True")]
protected virtual float ( , int , float );
    [("True")]
protected virtual float ( , string , float );
    protected virtual float ( ,  );
}
internal interface  {
    public abstract virtual  ();
}
internal class  :  {
    public string ;
    public ushort ;
    public ushort ;
    public ushort ;
    public ushort ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public  ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public  ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public  ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
    public  ;
    public (Byte[] );
    public string ();
}
internal enum  : Enum {
    public long value__;
}
internal abstract class  :  {
    internal  ;
    internal BigInteger ;
    protected ( );
    protected ( ,  );
    protected ( , BigInteger );
    public sealed virtual string ();
    public virtual Byte[] ();
    public virtual void ( );
    public virtual BigInteger ();
    public virtual  ();
    protected static Byte[] ( );
}
internal class  :  {
    internal (int );
    internal ( , bool );
    internal virtual CellArea ();
    public virtual int (int , int );
    public virtual int (int , int );
    public virtual int (int , int , int , int );
    public virtual int (CellArea );
    protected virtual int (int , int , int );
    public virtual bool ();
    internal virtual bool ();
    public  ();
    protected int (int , int );
    protected int (int , int , int , int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal ArrayList ;
    internal (string , string , ArrayList );
    internal string (Hashtable );
}
internal class  : object {
    private static int ;
    private static int ;
    private static int ;
    private Int32[] ;
    private static int ;
    private static int ;
    private static int ;
    private bool ;
    private static ();
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual void (bool ,  );
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] );
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
    private int (int , int );
    private int (int , int );
    private int (Byte[] , int );
    private void (int , Byte[] , int );
}
internal class  : object {
    private static Regex ;
    private static ();
    public static string (FileStream , Encoding );
    public static string (string );
    public static int (string );
    private static bool (char );
    public static string (string );
    private static string (string );
    public static TextAlignmentType (string );
    public static TextAlignmentType (string );
    public static string (FontUnderlineType );
    public static void (Font , string );
    public static FontUnderlineType (string );
    public static void (string , Style );
    public static void (string , Style , Color );
    public static void (string , Style ,  , string );
    public static Color (string );
    public static Color (string , Color );
    private static string (string );
    public static BackgroundType (string );
    public static void (Style , string );
}
internal class  :  {
    internal (double , int );
}
internal class  :  {
    internal (Workbook , LoadOptions , int );
    internal virtual void (Stream );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual int (Byte[] , int );
    internal int ( , int );
    internal virtual bool ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private bool ;
    internal (bool );
    internal void (IconSet );
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private  ;
    private int ;
    public (int , int , int ,  );
    public (int , int , int ,  , int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
[]
internal class  : object {
    private static  ;
    private Decimal[] ;
    private Int64[] ;
    private object ;
    private object ;
    private Int64[] ;
    private object ;
    [DecimalConstantAttribute("0", "0", "0", "0", "100")]
private static decimal ;
    private Int64[] ;
    private Int64[] ;
    private Int32[] ;
    private object ;
    private object ;
    private static ();
    public static  ();
    [CompilerGeneratedAttribute]
public sealed virtual Int64[] ();
    private void (Int64[] );
    [CompilerGeneratedAttribute]
public sealed virtual Int64[] ();
    private void (Int64[] );
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] ();
    private void (Int32[] );
    [CompilerGeneratedAttribute]
public sealed virtual object ();
    private void (object );
    [CompilerGeneratedAttribute]
public sealed virtual object ();
    private void (object );
    private long ();
    private void (long );
    public virtual void (decimal );
    public virtual void (long );
    public virtual void (long , bool );
    public virtual void (decimal , bool );
    public virtual decimal ();
    public virtual long ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private static bool ;
    [DebuggerBrowsableAttribute("0")]
protected d ;
    [DebuggerBrowsableAttribute("0")]
protected c ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    protected (bool ,  );
    private static ();
    public static  (bool ,  );
    [CompilerGeneratedAttribute]
public sealed virtual int ();
    private void (int );
    [CompilerGeneratedAttribute]
public sealed virtual int ();
    private void (int );
    private static int (int , bool );
    private static int (int , bool );
    private static int (int );
    private void ();
    public virtual int (Byte[] , int , int , Byte[] , int , RandomNumberGenerator );
    protected virtual Byte[] ( , String& );
    protected static Byte[] ( );
    protected static void (v , Byte[] , int );
    public sealed virtual void Dispose();
}
internal class  : object {
    []
private Shape ;
    internal (Shape );
    internal  ();
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal void ();
    internal void (FontSettingCollection );
}
internal class  :  {
    internal (bool , int , int , string );
    internal static void (Stream , bool , int , int , int );
}
internal class  : object {
    public static  ;
    private static ();
    public virtual BigInteger[] (BigInteger , Byte[] );
    public virtual Byte[] (BigInteger , BigInteger , BigInteger );
    protected virtual BigInteger (BigInteger , BigInteger );
    protected virtual BigInteger (BigInteger ,  , int );
    protected virtual  (BigInteger , BigInteger );
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual float ();
    public abstract virtual void (float );
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal  ;
    internal object ;
}
internal class  :  {
    internal (WebQueryConnection );
}
internal class  :  {
    private int ;
    public ( );
    public virtual int (int );
    public virtual int (int );
    public virtual int (byte , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual int (Byte[] , int );
}
internal class  :  {
    internal ( );
    internal  ();
    internal virtual Font ();
    internal virtual void (Font );
    internal virtual Color ();
    internal virtual void (Color );
    internal  ();
    internal  ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private UInt32 ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private UInt32 ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
private UInt32 ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private Encoding ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private static Encoding ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
public static int ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    private static ();
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public string ();
    public void (string );
    public  ();
    public void ( );
    public Encoding ();
    public void (Encoding );
    public  ();
    public void ( );
    public static Encoding ();
    public int ();
    internal void ();
    private void ();
    public sealed virtual IEnumerator GetEnumerator();
    public  (string );
    public  (string );
    public Stream ( );
    public int (string , bool );
    public int ();
    public sealed virtual void Dispose();
    public void ();
    protected virtual void (bool );
    internal Stream ();
    public static  (Stream );
    private void ();
    private static bool ( );
    private static void ( );
    private void ();
    private static void ( );
    private static void ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<Font> {
    [DebuggerBrowsableAttribute("0")]
public Font  { get; public set; }
    public void (Font );
    public Font (int );
    public void (int , Font );
    internal Font (int );
    internal void (Style );
    internal void (Font );
    internal int (Font , CopyOptions );
    internal int (Font , Workbook , Hashtable );
    internal void (WorksheetCollection ,  , CopyOptions );
    internal static void (WorksheetCollection , FontSettingCollection , int );
}
internal class  : object {
    internal Axis ;
    internal Axis ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
}
internal abstract class  : object {
}
internal class  :  {
    internal virtual MemoryStream (MemoryStream );
    protected virtual  (Stream );
    protected virtual string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ([] );
    public ([] , [] );
    public static  (object );
    public [] ();
    public [] ();
    public virtual  ();
}
internal class  : object {
    private Byte[] ;
    public (string );
    public Byte[] (Byte[] , int , short );
    public Byte[] (Byte[] , int , short );
    public static bool (string , ushort , ushort );
    public static ushort (string );
    public static ushort (string );
    private static Byte[] (string , ushort );
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private Byte[] ;
    private int ;
    private int ;
    private  ;
    internal ( );
    internal void ( , int );
    private void ();
}
internal abstract class  : object {
    public static int ;
    public static int ;
    private static ();
}
internal class  :  {
    private  ;
    internal ( );
    internal virtual void (PointF , string );
    internal virtual void (PointF , string );
    internal virtual void (PointF , Color );
    internal virtual void (PointF );
    internal virtual void (RectangleF );
    internal virtual void (RectangleF );
    internal virtual void (PointF[] );
    internal virtual void (PointF[] );
    internal virtual void (PointF[][] );
    internal virtual void (PointF[] );
    internal virtual void (PointF[][] );
    internal virtual void (RectangleF , PointF , PointF );
    internal virtual void (RectangleF );
    internal virtual void (RectangleF , PointF , PointF );
    internal virtual void (RectangleF , PointF , PointF );
    internal virtual void (RectangleF , SizeF );
    internal virtual void (RectangleF , RectangleF , Byte[] );
    internal virtual void (RectangleF );
    private void (PointF , string );
    private void (RectangleF );
    private void (RectangleF , PointF , PointF );
    private static int (PointF );
    private float ();
    internal  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Bitmap ;
    [DebuggerBrowsableAttribute("0")]
private Graphics ;
    internal (Graphics );
    public sealed virtual GraphicsUnit ();
    public sealed virtual void (GraphicsUnit );
    public sealed virtual Matrix ();
    public sealed virtual void (Matrix );
    public sealed virtual RectangleF (Region );
    public sealed virtual bool (Region );
    public sealed virtual float (Font );
    public sealed virtual Region[] (string , Font , RectangleF , StringFormat );
    public sealed virtual SizeF (string , Font );
    public sealed virtual SizeF (string , Font , SizeF );
    public sealed virtual SizeF (string , Font , int );
    public sealed virtual SizeF (string , Font , PointF , StringFormat );
    public sealed virtual SizeF (string , Font , SizeF , StringFormat );
    public sealed virtual SizeF (string , Font , int , StringFormat );
    public sealed virtual SizeF (string , Font , SizeF , StringFormat , Int32& , Int32& );
    public sealed virtual float (Font );
    public sealed virtual float (Font );
    public sealed virtual void Dispose();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal abstract class  :  {
    internal int ;
    internal int ;
    protected (int );
    public static  (int , int );
    public static  (int , string );
    public int ();
    public bool (Char[] );
    public abstract virtual bool ();
    public abstract virtual int ();
    public abstract virtual char (Char[] , int );
    public abstract virtual string (Char[] );
    public abstract virtual string (Char[] );
    public abstract virtual string (Char[] , int );
    public abstract virtual string (Char[] , int , int );
    public abstract virtual void (Char[] , StringBuilder );
    public abstract virtual void (Char[] , int , int , StringBuilder );
    public abstract virtual int (Char[] , Encoding , int , int , Byte[] , int );
    public abstract virtual  (Char[] );
    public abstract virtual long (Char[] ,  );
    public abstract virtual  ( , Char[] ,  );
    public abstract virtual bool ( , Char[] );
    public abstract virtual bool (string , Char[] , int );
    public abstract virtual int (char , Char[] , int );
    public virtual byte ();
    public virtual  ();
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual  (Char[] ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  );
    protected  (Char[] , int , int );
}
internal class  :  {
    private ArrayList ;
    internal void (List`1<> );
    internal static void (Int32[] , Byte[] , int );
    internal virtual void ( );
}
internal class  : object {
    private static  ;
    private static ();
    public static string (Byte[] );
    public static string (Byte[] , int , int );
    public static Byte[] (Byte[] );
    public static Byte[] (Byte[] , int , int );
    public static int (Byte[] , Stream );
    public static int (Byte[] , int , int , Stream );
    public static Byte[] (Byte[] );
    public static Byte[] (string );
    public static int (string , Stream );
    public static Byte[] (string );
    public static Byte[] (string , int , int );
}
internal abstract class  : object {
    internal  ;
    internal object ;
    internal abstract virtual int ();
    internal abstract virtual void ( );
}
internal class  : object {
    internal int ;
    internal SlicerCacheItemSortType ;
    internal SlicerCacheCrossFilterType ;
    internal string ;
    internal string ;
    internal List`1<> ;
}
internal class  : Exception {
    public (string );
    public (string , Exception );
}
internal interface  {
    public abstract virtual bool ( );
    public abstract virtual bool ( );
}
internal class  : object {
    internal string ;
    internal ArrayList ;
}
internal class  :  {
    protected virtual  ( , BigInteger );
}
internal class  : object {
    []
private Workbook ;
    internal (Workbook );
    internal void (string , Stream , LoadOptions );
}
internal class  :  {
    internal ( , float , float ,  );
    internal static GraphicsPath ( , RectangleF , bool );
    internal virtual RectangleF (RectangleF );
    internal virtual void ();
    internal virtual RectangleF (RectangleF , int );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private IList ;
    private ( );
    [ObsoleteAttribute]
public (ArrayList );
    public (IList );
    public static  (object );
    public virtual  ();
    public IEnumerable ();
}
internal class  : object {
    internal string ;
    internal int ;
    internal Hashtable ;
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
}
internal interface  {
    public abstract virtual int (Byte[] , int , int );
    public abstract virtual int (Byte[] , int , int );
}
internal class  :  {
    protected virtual void (bool );
    public virtual void (int , int );
}
internal class  :  {
    internal void (Palette );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private  ;
    []
private  ;
    []
private TableStyle ;
    internal Style  { get; }
    internal Style  { get; }
    internal (TableStyleCollection , string ,  );
    internal (string ,  );
    internal void ( , CopyOptions );
    internal  ();
    public  ();
    internal string ();
    internal TableStyle ();
    internal Style (TableStyleElementType );
    internal Style ( );
    internal void (TableStyleElementType , int , Style );
    internal void ( , Style );
}
internal class  : object {
    []
private WorksheetCollection ;
    internal  ;
    private  ;
    private  ;
    private  ;
    internal (WorksheetCollection );
    internal  ();
    internal Byte[] (string , String& , Cell );
    internal bool ();
    internal Byte[] (int , string , int , int ,  ,  , bool , bool , bool );
    internal Byte[] (int , string , int , int ,  ,  , bool , int );
    internal Byte[] (Cell , string , byte );
    internal void (Cell , string , byte , bool );
    internal Byte[] (int , int , int , string , byte );
    internal void (Cell , string , int , int );
    internal  (string );
    internal void (Cell , string , int , int );
    internal  (Name , Cell );
    internal  (Name , Cell );
    internal  (Cell );
    internal  (Cell , Byte[] , int );
    internal bool ();
    internal bool (byte , Byte[] );
    internal void (Byte[] , Int32& , Int32& );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( ,  );
    internal virtual int ();
    internal virtual void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
    public static  None;
    public static  Rle;
    public static  Lzw;
    public static  Ccitt3;
    public static  Ccitt4;
    public static  Jpeg;
    public static  PackBits;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  );
    public ( ,  ,  );
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal abstract class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected Int32[] ;
    protected int ;
    protected int ;
    protected int ;
    protected ( ,  ,  ,  , Int32[] , bool );
    protected ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    internal void ( );
    internal static byte (OperatorType );
}
internal class  : object {
    internal  ;
    internal void ( );
}
internal class  :  {
    protected virtual void (PointF[] , float , float , List`1<Matrix> , float , float , float , bool , float );
    protected virtual string ();
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    public ( );
    public ( ,  ,  );
    public ( , int );
    private ( , int ,  ,  );
    public  (int );
    public  (int );
    public  ( );
    public  ( );
    public  (Char[] );
    private void (int );
    private  ( , Char[] );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public ( , bool ,  ,  , bool );
    public ( , bool , int , int , int , int ,  ,  ,  , bool );
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual object ();
    public virtual  (int , int );
    public virtual  (int , int , int , int );
    internal virtual  (int , int );
    internal virtual  (int , int ,  );
    internal virtual object (int , int ,  );
    internal virtual void (int , int , StringBuilder ,  );
    protected virtual object ( );
    public virtual  ( , int );
    public virtual  ( );
    public virtual  ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual bool ( );
    public virtual  ( );
}
internal class  : object {
    []
private Workbook ;
    private bool ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    internal Hashtable ;
    internal  ;
    internal ArrayList ;
    internal Hashtable ;
    private [] ;
    private [] ;
    private [] ;
    private [] ;
    private AccessCacheOptions[] ;
    internal Hashtable[] ;
    private long ;
    internal bool ;
    internal Hashtable ;
    internal HyperlinkCollection[] ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    internal (Workbook );
    internal Int32[] (int , Stream ,  , ImageOrPrintOptions );
    internal void (int , Stream , ImageOrPrintOptions );
    internal void (int , ImageOrPrintOptions , Stream );
    private void (int , ImageOrPrintOptions , Stream );
    internal Int32[] (int , Stream ,  , ImageOrPrintOptions );
    [("True")]
private void (int , ImageOrPrintOptions , Stream );
    internal void (int , string , ImageOrPrintOptions );
    internal bool (int , ImageOrPrintOptions , PrintPageEventArgs );
    internal bool (int , ImageOrPrintOptions , Graphics );
    internal bool (int , ImageOrPrintOptions , Graphics , float , float , float , float );
    internal Bitmap (int , ImageOrPrintOptions );
    internal bool (Stream , ImageOrPrintOptions );
    private void (ImageOrPrintOptions );
    private void (Worksheet , ImageOrPrintOptions , bool );
    private void (ImageOrPrintOptions );
    internal void (bool );
    private void (Worksheet );
    private void (Worksheet );
    private static bool (PageSetup , ImageOrPrintOptions );
    private static double (Worksheet , CellArea );
    private void (Worksheet , ImageOrPrintOptions );
    private void (Worksheet );
    internal void (ImageOrPrintOptions );
    internal void (Worksheet , ImageOrPrintOptions );
    internal  (ImageOrPrintOptions );
    internal  (Worksheet , ImageOrPrintOptions );
    internal void (Stream , SaveOptions );
    internal void (Stream , SaveOptions );
    private void (SheetSet );
    private void (Hashtable , Hyperlink , Worksheet , bool );
    private void (Stream , PdfSaveOptions );
    private void (Stream , XpsSaveOptions );
    private  (ImageOrPrintOptions );
    private void ();
    private void ( );
    private void (PdfBookmarkEntry );
    private void (PdfBookmarkEntry , int );
    public void ();
}
internal class  : object {
    private Exception ;
    public virtual  ( );
    private  ( ,  ,  , IList );
}
internal class  : object {
    []
private Cells ;
    []
private string ;
    private int ;
    private int ;
    private int ;
    private int ;
    []
private string ;
    []
private Worksheet ;
    []
private WorksheetCollection ;
    private int ;
    internal (Cells , string , int , int , string );
    internal void ();
    private bool (ListObject ,  , string , XmlMap , CellArea , ArrayList );
    private bool (ListObject ,  , string , XmlMap , CellArea , ArrayList );
    private bool (ListObject , CellArea , ArrayList , XmlMap );
    private void (ListObject );
    private void (ListObject , XmlMap );
    private int ( , string , XmlMap , ListObject , int );
    private static ListColumn (XmlMap , ListColumn , string ,  );
    private ListObject (ArrayList , int , int );
    private ListObject (ArrayList , int , int );
    private static int (Workbook );
    private void ( , string , XmlMap );
    private  (XmlMap , string ,  );
    private bool ( );
    private ArrayList ();
    private static ListObject (ArrayList , CellArea , int );
    private static void ( , string );
    private void ( , string );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private IList ;
    private string ;
    private  ;
    private  ;
    private int ;
    private Byte[] ;
    private bool ;
    private  ;
    private  ;
    private  ;
    private  ;
    [ObsoleteAttribute("Use version taking an explicit 'useSha1' parameter instead")]
public (int ,  , string ,  , Char[] ,  ,  ,  );
    public (int ,  , string ,  , Char[] , bool ,  ,  ,  );
    public (int ,  , string ,  , bool , Char[] , bool ,  ,  ,  );
    public (int ,  , string ,  , Byte[] , bool ,  ,  ,  );
    public (int ,  , string ,  ,  , Char[] , bool ,  ,  ,  );
    public (int ,  , string ,  ,  , bool , Char[] , bool ,  ,  ,  );
    public (int ,  , string ,  ,  , Byte[] , bool ,  ,  ,  );
    public void ( );
    public void ( ,  );
    public void ( ,  ,  );
    public void ( ,  ,  ,  );
    public  ();
    public  ();
}
internal class  : object {
    public static Cell (Cells , int , int );
    public static void ( ,  , object );
    public static void ( , string ,  );
    public static void (string );
    public static void ( , int , Cells , Style );
    public static void (Cells ,  );
    public static int (Cells ,  , int , int );
    public static int (Cells ,  , int , int );
    public static int (Cells ,  , int , int );
    public static void (Cells ,  , int );
}
internal class  : object {
    internal CellArea ;
    internal string ;
}
internal class  : object {
    internal static  ;
    private static ();
    internal BigInteger ( ,  );
    internal BigInteger ( , BigInteger );
}
internal class  : object {
    internal static Char[] ;
    internal static Char[] ;
    internal static Char[] ;
    internal static Char[] ;
    private static ();
    public static bool (char );
    internal static string (StringBuilder , int , int );
    internal static string (StringBuilder );
    internal static  (string );
}
internal class  :  {
    internal void (int ,  );
    internal static int ( );
    internal static int ( , Byte[] , int );
    private static int (Byte[] , int , GradientFill );
}
internal class  : object {
    private ushort ;
    private ushort ;
    private Byte[] ;
    private Byte[] ;
    []
private  ;
    private byte ;
    []
private object ;
    []
private Workbook ;
    []
private Worksheet ;
    private int ;
    private int ;
    []
private ExternalConnection ;
    private QueryTable ;
    private string ;
    internal (Workbook , Worksheet ,  , object , byte , int );
    internal void ();
    private void ();
    private string ();
    private void ();
    private static SqlDataType (ushort );
    private void (ConnectionParameter );
    private string (int );
    private string (int );
    private void ();
    private void ();
    private void ();
    internal static void (ExternalConnection , short );
    internal static void (ExternalConnection , short , bool );
    private void ();
    private string ();
    internal static int ( , Byte[] , int );
    private void ();
    private void ();
    private void ();
    internal Byte[] ( , int );
    private void ();
    private int (int );
}
internal abstract class  : object {
    internal string ;
    internal ArrayList ;
    [("True")]
internal abstract virtual void ( );
    internal abstract virtual void (String& );
    internal void ( );
}
internal class  :  {
    internal ( );
}
internal class  :  {
    private BigInteger ;
    public (BigInteger ,  );
    public (BigInteger ,  );
    public BigInteger ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Bitmap ;
    [DebuggerBrowsableAttribute("0")]
private ImageType ;
    public (int , int );
    public (Byte[] );
    public (TextureBrush );
    private void (Bitmap );
    public sealed virtual void Dispose();
    public void ();
    public int ();
    public int ();
    public ImageType ();
    public PixelFormat ();
    public Bitmap ();
    public void (int , int , Color );
    public void (Stream , ImageType );
    public void (Stream , int );
    public void (Stream ,  , bool );
    private static void (Bitmap , Stream );
    private static void (Bitmap , Stream , int );
    private static void (Bitmap , Stream ,  , bool );
    private static void (Stream , Stream , double , double );
}
internal class  : ValueType {
    internal static void ( , Rectangle , bool );
    private static bool ( );
    private static bool ( );
    internal static void ( ,  , bool );
    private static void ( ,  , PointF[] , bool );
    private static void ( ,  , PointF[] );
    private static int ( , bool );
    private static bool ( );
    internal static bool ( );
    private static RectangleF (PointF[] );
}
internal class  : Exception {
}
internal class  :  {
    private short ;
    public short ();
    public void (short );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (PageSetup );
}
internal abstract class  :  {
    public abstract virtual Byte[] ( );
}
internal class  : object {
    private RectangleF ;
    private bool ;
    private  ;
    private PointF ;
    private int ;
    private  ;
    private int ;
    internal (float , float , float , float , bool , PointF );
    internal (RectangleF , bool , PointF );
    internal (RectangleF , bool ,  , PointF );
    internal RectangleF ();
    internal void (RectangleF );
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
    internal PointF ();
    internal void (PointF );
    public bool ( );
    public int ( );
    private static bool (RectangleF , RectangleF );
    public bool ( );
    internal int ();
    internal void (int );
    public  ();
    public void ( );
    public int ();
    public void (int );
    public void (TextWriter );
}
[]
internal interface  {
    public abstract virtual Color ();
    public abstract virtual void (Color );
    public abstract virtual float ();
    public abstract virtual void (float );
    public abstract virtual  ();
    public abstract virtual void ( );
}
[DefaultMemberAttribute("")]
internal class  :  {
    internal  ;
    public   { get; }
    public ( );
    public ( );
    public static  ( , bool );
    public static  (object );
    public int ();
    public int ();
    public  (int );
    public  (int );
    public virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Series ;
    internal (Series );
    internal Series ();
    internal int ();
    internal int ();
    public sealed virtual int CompareTo(object );
}
internal class  :  {
    public ( );
}
internal abstract class  : object {
    private static UInt32[] ;
    private static ();
    private static UInt32[] ();
    internal static Byte[] ();
    internal static UInt32[] ();
    internal static UInt64[] ();
    internal static Byte[] (UInt32[] );
    internal static void (UInt32[] , Byte[] );
    internal static Byte[] (UInt64[] );
    internal static void (UInt64[] , Byte[] );
    internal static UInt32[] (Byte[] );
    internal static void (Byte[] , UInt32[] );
    internal static UInt64[] (Byte[] );
    public static void (Byte[] , UInt64[] );
    internal static void (Byte[] , Byte[] );
    internal static void (UInt32[] , UInt32[] );
    internal static void (UInt64[] , UInt64[] );
    internal static void (UInt32[] );
    internal static void (UInt32[] , UInt32[] );
    internal static void (UInt32[] );
    internal static void (UInt32[] , UInt32[] );
    internal static UInt32 (UInt32[] );
    internal static UInt32 (UInt32[] , UInt32[] );
    internal static UInt32 (UInt32[] , int );
    internal static UInt32 (UInt32[] , int , UInt32[] );
    internal static void (Byte[] , Byte[] );
    internal static void (Byte[] , Byte[] , int );
    internal static void (Byte[] , int , Byte[] , int , Byte[] , int );
    internal static void (Byte[] , Byte[] , int , int );
    internal static void (Byte[] , int , Byte[] , int , int );
    internal static void (Byte[] , Byte[] , Byte[] );
    internal static void (UInt32[] , UInt32[] );
    internal static void (UInt32[] , UInt32[] , UInt32[] );
    internal static void (UInt64[] , UInt64[] );
    internal static void (UInt64[] , UInt64[] , UInt64[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public static long (string );
    [ConditionalAttribute("NETCF")]
public static void (Stream );
    public static string (string );
    internal static int (Stream );
    internal static int (Stream );
    internal static int (Stream );
    private static int (Stream , string );
    internal static long (Stream , int );
    internal static int (DateTime );
}
internal abstract class  :  {
    protected  ;
    internal ( );
    internal virtual double (double );
    internal  ();
    protected abstract virtual double (double );
    internal abstract virtual  ( , double ,  );
    public virtual  ( , TypeCode , object ,  );
    protected bool (Char[] , int , int , StringBuilder );
    protected bool (Char[] , int , int , StringBuilder );
    protected virtual int (Char[] , int , int , int , StringBuilder );
    public virtual  ();
    public virtual NumberCategoryType ();
}
internal class  : object {
    internal Hashtable ;
    internal void ( , object );
    internal void ( );
    internal object ( );
}
internal class  : object {
    public BigInteger ;
    public BigInteger ;
    public (BigInteger , BigInteger );
}
internal class  :  {
    internal (Stream );
    public virtual void Write(Byte[] , int , int );
    private void (Byte[] , int );
    private void (byte , int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    internal (Workbook , LoadOptions );
    public void ();
    public virtual void Dispose();
    internal static  ( , string , bool );
    protected virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ( );
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal static void (Workbook ,  ,  );
    internal virtual void ();
    internal void ( , string , Hashtable , int );
    private Hashtable (string );
    internal virtual void ( );
    internal virtual void ( ,  );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual void ( ,  );
    internal virtual void ( ,  , object );
    internal virtual void ( ,  );
    internal virtual void ( ,  );
    internal void ( );
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
}
internal abstract class  : object {
    public static bool (byte );
}
internal class  :  {
    public (Stream );
    public void ();
}
internal enum  : Enum {
    public byte value__;
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual  ();
    public virtual [] ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void ( );
}
internal class  : MemoryStream {
    public bool CanWrite { get; }
    public (Byte[] );
    public sealed virtual bool get_CanWrite();
}
internal class  : object {
    internal float ;
    internal float ;
    internal bool ;
    internal float ;
    internal float ;
    internal float ;
    internal bool ;
    internal int ;
    internal int ;
    internal bool ;
    internal void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal  ;
    internal  ;
    private  ;
    private  ;
    private  ;
    private Byte[] ;
    public (Byte[] );
    public (Stream );
    public ( );
    public Byte[] ();
    public  ();
    public string ();
    public  ();
    public  ();
    public  ();
    public  ();
    public Byte[] ();
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  ,  ,  );
    private ( );
    public virtual  ( );
    public sealed virtual bool ( );
    public sealed virtual bool ( );
}
internal class  :  {
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
}
internal abstract class  : object {
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    private static Byte[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static BigInteger ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static object ;
    private static [] ;
    private static UInt32[] ;
    private static ();
    private static Byte[] (Byte[] , Byte[] , Byte[] );
    private static bool (Byte[] );
    private static int (UInt32[] , UInt32[] );
    private static int (UInt32[] , UInt32[] , UInt32[] );
    private static bool (Byte[] );
    private static bool (Byte[] );
    public static  ();
    private static  ();
    private static UInt32 (Byte[] , int );
    private static UInt32 (Byte[] , int );
    private static UInt32 (Byte[] , int );
    private static void (Byte[] , int , UInt32[] , int , int );
    private static bool (Byte[] , int , bool ,  );
    private static void (Byte[] , int , UInt32[] );
    private static void ( , byte , Byte[] );
    private static void (UInt32 , Byte[] , int );
    private static void (UInt32 , Byte[] , int );
    private static void (ulong , Byte[] , int );
    private static int ( , Byte[] , int );
    public static void ( , Byte[] );
    public static void (Byte[] , int , Byte[] , int );
    private static SByte[] (UInt32[] , int );
    private static void ( , Byte[] , Byte[] , Byte[] , int , Byte[] , byte , Byte[] , int , int , Byte[] , int );
    private static void (Byte[] , int , Byte[] , byte , Byte[] , int , int , Byte[] , int );
    private static void (Byte[] , int , Byte[] , int , Byte[] , byte , Byte[] , int , int , Byte[] , int );
    private static bool (Byte[] , int , Byte[] , int , Byte[] , byte , Byte[] , int , int );
    private static void (bool ,  ,  );
    private static void ( ,  );
    private static  ( );
    private static void ( );
    private static void ( );
    private static void (int , int ,  );
    private static [] ( , int );
    private static void ( );
    public static void ();
    private static void (Byte[] , int , Byte[] );
    private static Byte[] (Byte[] );
    private static void (Byte[] ,  );
    private static void (Byte[] , Byte[] , int );
    internal static void (Byte[] , int , UInt32[] , UInt32[] );
    private static void (UInt32[] , UInt32[] ,  ,  );
    public static void (Byte[] , int , Byte[] , Byte[] , int , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , int , Byte[] , Byte[] , int , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , Byte[] , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , int , Byte[] , Byte[] , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] ,  , Byte[] , int );
    public static void (Byte[] , int , Byte[] , int , Byte[] ,  , Byte[] , int );
    public static bool (Byte[] , int , Byte[] , int , Byte[] , Byte[] , int , int );
    public static bool (Byte[] , int , Byte[] , int , Byte[] , Byte[] , int );
    public static bool (Byte[] , int , Byte[] , int , Byte[] ,  );
}
internal class  :  {
    public static  ;
    private static ();
    internal virtual  ();
    internal virtual object ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal ( );
    public static  ( , bool );
    public static  (object );
    public int ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal abstract class  : object {
    internal bool ;
    []
internal LightCellsDataHandler ;
    internal  ;
    private bool ;
    private  ;
    []
private WorksheetCollection ;
    protected  ;
    []
internal Cells ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal  ;
    internal  ;
    []
internal  ;
    []
private  ;
    private  ;
    private  ;
    private Row ;
    private int ;
    private int ;
    private int ;
    []
private RowCollection ;
    protected (WorksheetCollection , LoadOptions );
    protected ( );
    protected (WorksheetCollection , LoadOptions , bool , bool );
    internal void ();
    protected abstract virtual void (Byte[] , int , int );
    protected virtual void ( ,  );
    internal virtual void (Cells , LoadDataFilterOptions );
    internal void ();
    internal virtual bool (int );
    protected bool ();
    internal void ();
    internal bool (int );
    internal bool ();
    internal void (int );
    internal virtual void (int ,  , object );
    internal virtual void (int ,  , object , int );
    internal void (int , int , int );
    internal virtual void (int , string );
    internal void (int , string , int );
    internal virtual void (string );
    internal void (int ,  );
    internal void (int ,  , int );
    internal void ( );
    internal void ( , int ,  , object );
    internal  (int , int );
    protected  ( );
    protected void (int ,  ,  );
    internal void ();
    internal void (int );
    internal void ();
    internal bool (Worksheet );
}
internal class  : object {
    private List`1<PointF> ;
    protected  ;
    private  ;
    internal int ;
    internal bool ;
    internal bool ;
    internal RectangleF ;
    internal Matrix ;
    []
internal Shape ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal float ;
    []
internal  ;
    protected string ;
    protected string ;
    protected bool ;
    internal virtual bool ();
    internal virtual bool ();
    protected  ();
    public string ();
    public void (string );
    public virtual  ();
    public virtual string ();
    public virtual void (string );
    internal void (PointF );
    public PointF[] ();
    public GraphicsPath (bool , bool );
    public virtual GraphicsPath (RectangleF , bool , bool );
    internal static PointF[] (List`1<PointF> );
    public virtual void (PointF , bool , bool );
    public virtual void ();
    public virtual void (PointF );
    public virtual void (PointF , PointF );
    public virtual void (PointF , PointF , PointF );
    public virtual void (PointF[] );
    public virtual void (PointF[] );
    public virtual void (PointF[] );
    public virtual void (PointF , PointF , SizeF , float , float );
    internal static void (Shape , Int32& , Int32& , Int32& , Int32& );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static IList ;
    private static ();
    private static  ( , string );
    private static  ( );
    private static  ( ,  );
    private static BigInteger (string );
    private static void (string ,  );
    private static void (string ,  ,  );
    private static void (string ,  );
    public static  (string );
    public static  ( );
    public static  (string );
    public static string ( );
    public static IEnumerable ();
}
internal class  : object {
    private string ;
    private bool ;
    private GlobalizationSettings ;
    private IComparable ;
    public (string , bool , GlobalizationSettings );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual bool (string );
    public sealed virtual bool ();
    public sealed virtual string ();
    public sealed virtual bool ( );
    public sealed virtual int (string );
    public sealed virtual int ( );
}
internal class  :  {
    internal void (DataLabels );
}
internal class  : object {
    internal static void ();
    public static DateTime (double , bool );
    public static double (DateTime , bool );
}
internal abstract class  : object {
    public abstract virtual byte ();
    public abstract virtual  ();
    public abstract virtual  (Char[] ,  ,  );
    public abstract virtual  (Char[] ,  ,  );
    public abstract virtual  (Char[] ,  );
    public abstract virtual int ();
    public abstract virtual  (int );
    public abstract virtual  ();
    public abstract virtual void (StringBuilder );
    public abstract virtual void (Char[] ,  , StringBuilder );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (Char[] ,  );
    public virtual bool ( ,  );
    public virtual  ( );
    public virtual void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private SlicerCache ;
    internal (SlicerCache );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( , List`1<> );
    private void ( ,  );
    private void ( ,  );
    private void ( );
    private bool (string );
    private string (string );
    private void ( );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  : object {
    internal int ;
    internal int ;
    internal Color ;
    internal ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    private static ();
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    private short ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    public ( ,  ,  ,  , int , int , int );
    private ( ,  );
    public virtual  ();
    public virtual  ( );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    internal void ();
    internal void (int );
}
internal class  : object {
    internal  ;
    internal  ;
    internal static  ( );
    private void ( );
}
internal class  : object {
    public static bool (string , Single& );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( );
    public ( );
    public  ( );
    public  ( , Char[] );
    public  ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ( ,  );
    public ( ,  , [] );
    public virtual  (int );
    public virtual  ( );
    public virtual void ();
    public void ();
    public  ();
    public virtual  ();
    public virtual object ();
    public virtual object ( );
    public virtual  ();
    public virtual  ( );
    public virtual void ();
    public virtual bool ( );
    private bool ();
    private bool ( , int );
    public virtual bool ( , int );
    public virtual  ( , int );
    public virtual  ( , int , Workbook );
    public virtual  ( , bool );
    private  ( , bool );
    public virtual bool ( , int , int , bool );
    private bool ();
    public virtual bool ( , bool );
    public virtual bool ();
    public virtual void (bool );
    public virtual  ();
    public virtual void ( );
    public virtual  ( );
    private bool ( );
    public virtual byte ();
    public int ();
    public [] ();
    public void ([] ,  );
    public virtual void (StringBuilder ,  );
    public virtual  ( );
    internal  ( );
    public virtual  ( );
    public virtual bool ();
    public virtual bool ();
    private  ( );
    public virtual  ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    private  (int ,  , int );
    private  (Int32[] ,  , int );
    private  (Int32[] ,  , int );
    private  (Int32[] ,  , int );
    private  ( , int );
    private  ( ,  ,  , int );
    private  ( );
    private  ( , int );
    private  ( ,  , int );
    private  ( , int );
    private  ( , int );
    private  ( ,  ,  , int ,  );
    private  (int ,  , int );
    private bool ( , int , byte );
    private int ( ,  );
    public virtual bool ( );
    public virtual  ( );
    public virtual void ( );
    internal static  ( , int ,  );
    internal static  ( );
    internal  ( );
}
internal class  :  {
    internal Byte[] ;
    internal ArrayList ;
    internal (string , Byte[] );
    internal (string , Byte[] , int );
    internal virtual  ();
    internal virtual void ( );
    internal void ( , WorksheetCollection );
    internal void (FontSetting[] , WorksheetCollection );
    internal virtual bool ();
    internal virtual bool ();
    internal virtual bool ();
    internal Byte[] ();
    internal void (Byte[] );
    internal ArrayList ();
    internal void (ArrayList );
    internal bool ();
    internal  ();
    internal void (Cells , Style , StyleFlag );
    internal void ( , Cell );
    internal void (Byte[] , Cell );
    internal void (Cell );
    internal ArrayList ();
    internal virtual void (Cells ,  , int , Cells , CopyOptions );
    internal void (Font );
    internal ArrayList (WorksheetCollection , int , Font );
    internal virtual bool ( );
    internal bool (Byte[] );
    internal bool (string , Byte[] );
    internal virtual  (string , string , ReplaceOptions , Regex , Cell );
    internal virtual  (int , string , Cell );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : object {
    []
internal Workbook ;
    []
internal Worksheet ;
    []
internal Cells ;
    public Workbook ();
    public Worksheet ();
    public virtual bool ( , bool );
}
internal class  : ValueType {
    public static void ( ,  );
    public static void ( ,  );
    public static Size ( ,  , SizeF , Rectangle );
    public static Size ( ,  , SizeF );
    public static void ( , RectangleF , string , int , Font , Color ,  ,  , TextDirectionType );
}
[DefaultMemberAttribute("")]
internal class  :  {
    private [] ;
    public   { get; }
    public ([] );
    public ( );
    public  (int );
    public  (int );
    public int ();
    public int ();
    public bool ();
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    internal (Cells , int , int );
    public sealed virtual int (int );
    public bool ();
}
internal class  : object {
    internal List`1<> ;
    internal  ;
    internal void ( );
    internal bool ( );
    internal void ( , Worksheet );
    internal static void (FormatCondition , string ,  );
    internal static void (string , int , String[] );
    internal static OperatorType (string , String[] );
    internal static OperatorType (string , int , String[] );
}
internal class  : object {
    private  ;
    private int ;
    private int ;
    private int ;
    private  ;
    private bool ;
    private int ;
    public ( );
    public virtual void (int , int ,  );
    public virtual void ( );
    public virtual  ();
    protected virtual  ();
    protected virtual BigInteger (BigInteger , BigInteger ,  );
    protected virtual  ();
    protected virtual BigInteger (BigInteger , BigInteger ,  );
    protected virtual BigInteger ( , BigInteger , BigInteger , Byte[] , int );
    private static bool (int );
    protected static void ( , Byte[] , Byte[] );
    private static int (int );
    protected static void (Byte[] );
}
internal class  : object {
    private string ;
    internal string ;
    private string ;
    private StreamWriter ;
    private List`1<StreamProviderOptions> ;
    private string ;
    []
private Encoding ;
    private StreamProviderOptions ;
    private StreamProviderOptions ;
    public (Encoding );
    internal void (Stream ,  );
    private void ();
    private void (StreamProviderOptions , Encoding );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  : object {
    private  ;
    private StringBuilder ;
    public (Stream , Encoding , bool );
    public (Stream , bool );
    public  ();
    [("True")]
public void (string );
    [("True")]
public void ();
    [("True")]
public void (string );
    [("True")]
public void ();
    [("True")]
public void (string );
    [("True")]
public void ();
    [("True")]
public void (string );
    [("True")]
public void (string );
    public void (string , string );
    public void (string , string );
    public void (string , DateTime );
    [("True")]
public void (string );
    [("True")]
public void (string , string );
    public string (string );
    private static bool (string );
    private static bool (int );
    [ConditionalAttribute("DEBUG")]
private static void ();
    [ConditionalAttribute("DEBUG")]
private static void (string );
    [ConditionalAttribute("DEBUG")]
private static void (string );
}
internal class  : object {
    private X509Certificate2 ;
    private Byte[] ;
    private string ;
    internal (Byte[] );
    internal (Byte[] , string );
    internal (X509Certificate2 );
    private X509Certificate2 ();
    internal virtual Byte[] (Byte[] ,  );
    internal virtual Byte[] (Byte[] , string ,  );
    internal virtual bool (Byte[] , Byte[]& );
    internal virtual bool (Byte[] , Byte[] ,  );
    protected static string ( );
    internal virtual string ();
    internal virtual Byte[] ();
    internal virtual string ();
    internal virtual string ();
    internal X509Certificate2 ();
    internal virtual  ();
    internal static Byte[] (Byte[] ,  );
    internal static Byte[] (Stream ,  );
    internal virtual Byte[] (string );
    private static string (RSA );
    private static string (DSA );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private static int ;
    private Byte[] ;
    private bool ;
    private int ;
    private Byte[] ;
    private (Byte[] , Byte[] , int , bool );
    private static ();
    public static  (Byte[] , Byte[] , int );
    public static  (Byte[] , Byte[] );
    public Byte[] ();
    public bool ();
    public int ();
    public Byte[] ();
}
internal class  : object {
    internal static bool (DateTime , DateTime );
    internal static bool (DateTime , DateTime );
    internal static bool (DateTime , DateTime );
    internal static bool (DateTime , DateTime );
    internal static TimeSpan (DateTime , DateTime );
    internal static DateTime (DateTime , TimeSpan );
    internal static DateTime (string , CultureInfo );
    internal static DateTime (string , CultureInfo );
    internal static bool (object );
    internal static DateTime (object );
    internal static int (Char[] , int , int );
    internal static string ();
    internal static string (int , short );
    internal static string ();
    internal static string ();
    internal static string ();
    internal static string ();
    public static string ();
    public static string ();
    internal static void (StringBuilder , char );
    internal static void (StringBuilder , Char[] , int , int );
    internal static void (StringBuilder , Char[] , int , int );
    internal static int (Char[] , int , int );
    internal static string (Char[] , int , int );
    internal static string (string );
    internal static DateTime (string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : object {
    public  (string , string );
    public void (string ,  );
    public  ( , decimal , long );
    private  ( , string , long );
}
internal static class  : object {
    public static bool (Int32[] , Int32[] );
}
internal class  : object {
    private static Int32[] ;
    public static  ;
    public static  ;
    private static Byte[] ;
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    private static ();
    public (int , Int32[] , bool );
    public (int , Byte[] );
    public (int , Byte[] , int , int );
    public Int32[] ();
    private static int (int );
    private static Int32[] (Byte[] , int , int );
    private static int (int , int , Int32[] );
    public int ();
    private static int (int );
    public int (object );
    private static int (int , Int32[] , int , Int32[] );
    private static int (int , Int32[] , int , Int32[] );
    public int ( );
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    private bool ( );
    public  ( ,  );
    private static  ( , int ,  );
    private static int (int );
    private int ();
    private static void (Int32[] , Int32[] , UInt32 );
    private static void (Int32[] , Int32[] , Int32[] , Int32[] , UInt32 , bool );
    private static void (Int32[] , Int32[] , Int32[] , UInt32 , bool );
    private static UInt32 (UInt32 , UInt32 , UInt32 , UInt32 );
    private static Int32[] (int );
    private static Int32[] (Int32[] , int );
    private  (int );
    private static void (int , Int32[] , int );
    private static void (int , Int32[] );
    public int ();
    private static Int32[] (int , Int32[] , int , Int32[] );
    public Byte[] ();
    public int ();
    public int (Byte[] , int );
    private static  (ulong );
    public static  (ulong );
    private static Int32[] (Int32[] , Int32[] );
    private  ( );
    private static Int32[] (Int32[] );
}
internal class  :  {
    internal string ;
    internal (ShadowEffect );
    internal virtual  ();
    internal virtual void ( , CopyOptions );
    internal virtual bool ( );
}
internal class  :  {
    internal static void (Stream , bool , int , int , byte );
}
internal class  : object {
    private BigInteger ;
    private  ;
    public virtual bool ();
    public virtual void (BigInteger ,  );
    public virtual void (BigInteger , BigInteger , Byte[] );
    public virtual BigInteger ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
}
internal class  :  {
    internal (ConnectionParameter );
}
internal class  : object {
    private static int ;
    private  ;
    private Byte[] ;
    private bool ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private  ;
    private MemoryStream ;
    private MemoryStream ;
    public ( );
    private static ();
    public virtual  ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual int ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual int (byte , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    public virtual Byte[] ();
    public virtual int (int );
    public virtual int (int );
    public virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    private int (Byte[] , int , int , Byte[] );
    private int (bool , int );
    private int ();
    private bool ();
}
internal class  : ValueType {
    internal static void ( ,  , int , int , int , bool , bool );
    private static void ( , ArrayList[] , float , float , float , bool ,  , double ,  ,  , float , Rectangle , bool );
    internal static Size ( , IList , int ,  , SizeF );
    private static void ( , List`1<> , float , float , float , bool ,  , double );
    internal static Size ( ,  );
    private static SizeF ( ,  );
    internal static int ( ,  , Rectangle );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private bool ;
    internal (bool );
    public sealed virtual bool (int );
    public sealed virtual bool ();
    public Int32[] ();
    public sealed virtual  ();
}
internal class  : object {
    internal string ;
    internal Font ;
    internal int ;
    internal  ;
    internal static ArrayList ( , Font , Workbook );
    private static void (ArrayList , string , int , int , Font , Workbook );
    private static void (ArrayList , string , int , int , int , Workbook );
    internal  ();
}
internal abstract class  : object {
    public static Byte[] ;
    public static Int16[] ;
    public static Int32[] ;
    public static Int64[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[][] ;
    private static ();
    public static void (int );
    public static void (long );
    public static void (int );
    public static void (long );
    public static void (int );
    public static void (long );
    public static void (long );
    public static void (long );
    public static void (long );
    public static bool (int );
    public static bool (long );
    public static bool (int );
    public static bool (long );
    public static bool (int );
    public static bool (long );
    public static bool (long );
    public static bool (long );
    public static bool (long );
    public static bool ( );
    public static bool ( );
    public static bool ( );
    public static bool ( );
    public static bool ( );
    public static void (byte , Stream );
    public static void (byte , Byte[] , int );
    public static void (int , Stream );
    public static void (int , Byte[] , int );
    public static void (int , Stream );
    public static void (int , Byte[] , int );
    public static void (long , Stream );
    public static void (long , Byte[] , int );
    public static void (long , Stream );
    public static void (long , Byte[] , int );
    public static void (long , Stream );
    public static void (long , Byte[] , int );
    public static void (Byte[] , Stream );
    public static void (Byte[] , Stream );
    public static void (Byte[] , Stream );
    public static void (Byte[] , Stream );
    public static void (Byte[] , Byte[] , int );
    public static void (Byte[] , Stream );
    public static void (Byte[] , Byte[] , int );
    public static void (Int32[] , Stream );
    public static void (Int32[] , Byte[] , int );
    public static void (Int32[] , Stream );
    public static void (Int32[] , Byte[] , int );
    public static byte (Byte[] );
    public static Byte[] (Byte[] );
    public static Byte[] (Byte[] );
    public static Byte[] (byte );
    public static Byte[] (Byte[] );
    public static Byte[] (Int32[] );
    public static byte (Stream );
    public static byte (Byte[] , int );
    public static int (Stream );
    public static int (Byte[] , int );
    public static int (Stream );
    public static int (Byte[] , int );
    public static long (Stream );
    public static long (Byte[] , int );
    public static long (Stream );
    public static long (Byte[] , int );
    public static Byte[] (int , Stream );
    public static Byte[] (int , Stream );
    public static void (Byte[] , Stream );
    public static Byte[] (Stream );
    public static Byte[] (Stream );
    public static Byte[] (Stream );
    public static Byte[] (int , Stream );
    public static Int32[] (int , Stream );
    public static  (Byte[] , int );
    public static  (Stream );
    public static int (Byte[] , int );
    public static int (Stream );
    public static  (Byte[] );
    public static  (Byte[] );
    public static void (Byte[] , int );
    public static void ( , Stream );
    public static void ( , Byte[] , int );
    public static IList ();
    public static IList ();
    public static IList ();
    public static IList ();
    public static Byte[] (IDictionary , int );
    public static IList ();
    public static  ( ,  );
    public static bool (IDictionary , int , byte );
    public static  (Byte[] ,  );
    public static bool ( );
    public static void (IDictionary , IList );
    public static IList (IDictionary );
    public static Byte[] (IList );
    public static IList (Byte[] );
    public static void (IList , bool , Stream );
    public static IList (bool , Stream );
    public static void (IList ,  );
    public static Byte[] ( , Byte[] , string , Byte[] , int );
    public static Byte[] (Byte[] , string , Byte[] , int );
    internal static Byte[] (Byte[] , Byte[] , Byte[] , int );
    internal static Byte[] (Byte[] , Byte[] );
    internal static void ( , Byte[] , Byte[] , Byte[] );
    internal static void ( , int );
    internal static Byte[] ( , int );
    internal static Byte[] (Byte[] , Byte[] , int );
    internal static Byte[] ( , Byte[] );
    internal static Byte[] (Byte[] , Byte[] );
    internal static Byte[] ( , string , Byte[] );
    public static  (byte );
    public static  ( );
    public static  (byte ,  );
    public static  (int );
    public static  (int ,  );
    public static byte (int );
    public static  (byte );
    internal static short ( ,  );
    internal static void ( , IList );
    public static bool (byte );
    public static  (byte );
    private static Byte[][] ();
    private static IList (object );
    public static int (int );
    public static int (int );
    public static int (int );
    public static int (int );
    public static  (int );
    public static bool (int );
    public static bool (int );
    public static bool (int );
    public static bool (int , IList );
    public static bool (int ,  );
    public static IList (IList );
}
internal class  :  {
    private string ;
    private  ;
    internal ( , string , Byte[] , string );
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( , Byte[] );
    public ( , Byte[] ,  );
    public static  (object );
    public  ();
    public Byte[] ();
    public  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    []
private  ;
    []
private  ;
    private int ;
    private Byte[] ;
    private  ;
    internal ( );
    internal void ( );
    private void ();
    private void ();
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private  ();
    private void ();
    private void ();
    private void ();
    private void ( );
}
internal abstract class  : object {
}
internal class  : object {
    private  ;
    private MemoryStream ;
    private  ;
    private  ;
    private MemoryStream ;
    private Byte[] ;
    internal ( ,  );
    internal void ();
    internal void (PointF , SizeF );
    private void ( );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private SizeF (SizeF );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (int );
    private bool ();
    private void ();
    private void ( );
    private void (UInt32 );
    private  ();
    private  ();
    private RectangleF ();
    internal Byte[] ();
    private static bool (int ,  );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected Graphics ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private Graphics ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private IWarningCallback ;
    [DebuggerBrowsableAttribute("0")]
private Matrix ;
    public (Graphics , ImageOrPrintOptions ,  );
    internal Graphics ();
    public sealed virtual void (RectangleF , string );
    public sealed virtual  ();
    public sealed virtual void ( );
    public Graphics ();
    public abstract virtual ImageOrPrintOptions ();
    private void ();
    public abstract virtual void ();
    public abstract virtual Bitmap ();
    public sealed virtual void (Color );
    public abstract virtual void ();
    public abstract virtual void Dispose();
    public sealed virtual void ( , Rectangle , float , float );
    public sealed virtual void ( , RectangleF , float , float );
    public sealed virtual void ( , int , int , int , int , int , int );
    public sealed virtual void ( , float , float , float , float , float , float );
    public sealed virtual void ( , Point , Point , Point , Point );
    public sealed virtual void ( , PointF , PointF , PointF , PointF );
    public sealed virtual void ( , float , float , float , float , float , float , float , float );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , Point[] , float , FillMode );
    public sealed virtual void ( , PointF[] , float , FillMode );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , Point[] , float );
    public sealed virtual void ( , PointF[] , float );
    public sealed virtual void ( , PointF[] , int , int );
    public sealed virtual void ( , Point[] , int , int , float );
    public sealed virtual void ( , PointF[] , int , int , float );
    public sealed virtual void ( , Rectangle );
    public sealed virtual void ( , RectangleF );
    public sealed virtual void ( , int , int , int , int );
    public sealed virtual void ( , float , float , float , float );
    public sealed virtual void (Image , Point );
    public sealed virtual void (Image , PointF );
    public sealed virtual void (Image , Rectangle );
    public sealed virtual void (Image , RectangleF );
    public sealed virtual void (Image , int , int );
    public sealed virtual void (Image , float , float );
    public sealed virtual void (Image , int , int , int , int );
    public sealed virtual void (Image , float , float , float , float );
    public sealed virtual void (Image , Rectangle , float , float , float , float , GraphicsUnit );
    public sealed virtual void (Image , Rectangle , int , int , int , int , GraphicsUnit );
    public sealed virtual void (Image , Rectangle , Rectangle , GraphicsUnit );
    public sealed virtual void (Image , RectangleF , RectangleF , GraphicsUnit );
    public sealed virtual void (Image , Rectangle , int , int , int , int , GraphicsUnit , ImageAttributes );
    public sealed virtual void ( , Point , Point );
    public sealed virtual void ( , PointF , PointF );
    public sealed virtual void ( , int , int , int , int );
    public sealed virtual void ( , float , float , float , float );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , GraphicsPath );
    public sealed virtual void ( , Rectangle , float , float );
    public sealed virtual void ( , RectangleF , float , float );
    public sealed virtual void ( , int , int , int , int , int , int );
    public sealed virtual void ( , float , float , float , float , float , float );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , Rectangle );
    public sealed virtual void ( , int , int , int , int );
    public sealed virtual void ( , float , float , float , float );
    public sealed virtual void ( , Rectangle[] );
    public sealed virtual void ( , RectangleF[] );
    private Font (string , Font );
    public sealed virtual void (string , Font , Brush , PointF );
    public sealed virtual void (string , Font , Brush , RectangleF );
    public sealed virtual void (string , Font , Brush , PointF , StringFormat );
    public sealed virtual void (string , Font , Brush , RectangleF , StringFormat );
    public sealed virtual void (string , Font , Brush , float , float );
    public sealed virtual void (string , Font , Brush , float , float , StringFormat );
    public sealed virtual void (string , Font , Brush , Rectangle );
    public sealed virtual void (string , Font , Brush , Rectangle , StringFormat );
    private string (string , StringFormat );
    public sealed virtual void (Rectangle );
    public sealed virtual void (Region );
    public sealed virtual void (Brush , Point[] );
    public sealed virtual void (Brush , PointF[] );
    public sealed virtual void (Brush , Point[] , FillMode );
    public sealed virtual void (Brush , PointF[] , FillMode );
    public sealed virtual void (Brush , Point[] , FillMode , float );
    public sealed virtual void (Brush , PointF[] , FillMode , float );
    public sealed virtual void (Brush , Rectangle );
    public sealed virtual void (Brush , RectangleF );
    public sealed virtual void (Brush , int , int , int , int );
    public sealed virtual void (Brush , float , float , float , float );
    public sealed virtual void (Brush , GraphicsPath );
    public sealed virtual void (Brush , Rectangle , float , float );
    public sealed virtual void (Brush , int , int , int , int , int , int );
    public sealed virtual void (Brush , float , float , float , float , float , float );
    public sealed virtual void (Brush , Point[] );
    public sealed virtual void (Brush , PointF[] );
    public sealed virtual void (Brush , Point[] , FillMode );
    public sealed virtual void (Brush , PointF[] , FillMode );
    public sealed virtual void (Brush , Rectangle );
    public sealed virtual void (Brush , RectangleF );
    public sealed virtual void (Brush , int , int , int , int );
    public sealed virtual void (Brush , float , float , float , float );
    public sealed virtual void (Brush , Rectangle[] );
    public sealed virtual void (Brush , RectangleF[] );
    public sealed virtual void (Brush , Region );
    public sealed virtual void ();
    public sealed virtual void (FlushIntention );
    public sealed virtual Color (Color );
    public sealed virtual void (Rectangle );
    public sealed virtual void (RectangleF );
    public sealed virtual void (Region );
    public sealed virtual bool (Point );
    public sealed virtual bool (PointF );
    public sealed virtual bool (Rectangle );
    public sealed virtual bool (RectangleF );
    public sealed virtual bool (int , int );
    public sealed virtual bool (float , float );
    public sealed virtual bool (int , int , int , int );
    public sealed virtual bool (float , float , float , float );
    public sealed virtual Region[] (string , Font , RectangleF , StringFormat );
    public sealed virtual SizeF (string , Font );
    public sealed virtual SizeF (string , Font , SizeF );
    public sealed virtual SizeF (string , Font , int );
    public sealed virtual SizeF (string , Font , PointF , StringFormat );
    public sealed virtual SizeF (string , Font , SizeF , StringFormat );
    public sealed virtual SizeF (string , Font , int , StringFormat );
    public sealed virtual SizeF (string , Font , SizeF , StringFormat , Int32& , Int32& );
    public sealed virtual void (Matrix );
    public sealed virtual void (Matrix , MatrixOrder );
    public sealed virtual void ();
    public sealed virtual void ();
    internal void (Matrix );
    public sealed virtual void (GraphicsState );
    public sealed virtual void (float );
    public sealed virtual void (float , MatrixOrder );
    public sealed virtual GraphicsState ();
    public sealed virtual void (float , float );
    public sealed virtual void (float , float , MatrixOrder );
    public sealed virtual void (GraphicsPath );
    public sealed virtual void ( );
    public sealed virtual void (Rectangle );
    public sealed virtual void (RectangleF );
    public sealed virtual void (GraphicsPath , CombineMode );
    public sealed virtual void ( , CombineMode );
    public sealed virtual void (Rectangle , CombineMode );
    public sealed virtual void (RectangleF , CombineMode );
    public sealed virtual void (Region , CombineMode );
    public sealed virtual void (int , int );
    public sealed virtual void (float , float );
    public sealed virtual void (float , float );
    public sealed virtual void (float , float , MatrixOrder );
    public sealed virtual Region ();
    public sealed virtual void (Region );
    public sealed virtual RectangleF ();
    public sealed virtual float ();
    public sealed virtual float ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual GraphicsUnit ();
    public sealed virtual void (GraphicsUnit );
    public sealed virtual float ();
    public sealed virtual void (float );
    public sealed virtual Point ();
    public sealed virtual void (Point );
    public sealed virtual SmoothingMode ();
    public sealed virtual void (SmoothingMode );
    public sealed virtual TextRenderingHint ();
    public sealed virtual void (TextRenderingHint );
    public sealed virtual Matrix ();
    public sealed virtual void (Matrix );
    public sealed virtual RectangleF ();
    public sealed virtual CompositingQuality ();
    public sealed virtual void (CompositingQuality );
    public sealed virtual int ();
    public sealed virtual void (int );
    private Brush (Brush );
    public virtual void (SmoothingMode , bool );
    public virtual void (TextRenderingHint , bool );
    private static PointF[] (Point[] );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal (int , int );
    private (int );
    public virtual int ();
    public virtual string ();
    public virtual byte ();
    public virtual  ();
    public virtual  ();
    public virtual bool ( );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
}
internal class  :  {
    private PivotTableFormat ;
    internal (PivotTableFormat );
    internal void ();
    internal void (short );
}
internal class  : object {
    protected Byte[] ;
    protected byte ;
    protected Byte[] ;
    protected void ();
    public sealed virtual int (Byte[] , int , int , Stream );
    private bool (char );
    public sealed virtual int (Byte[] , int , int , Stream );
    private int (Byte[] , int , int );
    public sealed virtual int (string , Stream );
    private int (Stream , char , char , char , char );
    private int (string , int , int );
}
internal class  : object {
    internal static Regex ;
    private static ();
    internal static short (short , bool , short );
    internal static bool (string );
    internal static bool (string );
    public static bool (string );
    internal static bool (string );
    internal static bool (string );
    internal static bool (char );
    internal static bool (char );
    internal static int (char );
    internal static object (object , bool );
    internal static string (double );
    internal static string (double , char , int );
    internal static bool (double );
    internal static bool (double );
}
internal class  : object {
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
    internal static  (WorksheetCollection );
}
internal class  : object {
    private  ;
    public  ( );
    public  ( );
    public  (BigInteger );
    public  ( );
    public  ();
}
internal class  :  {
    private int ;
    private int ;
    public ( ,  , [] , int , int , int , int );
    public virtual  ( );
    public virtual void ( );
    public virtual bool (int ,  );
}
internal class  :  {
    internal (Workbook , FileFormatType , SaveOptions );
    public virtual void (Stream );
    internal static void (Shape , Stream , bool , SaveOptions );
    internal virtual void ();
    internal virtual void ();
}
internal abstract class  : object {
    public static string ;
    private static Int32[] ;
    private static int ;
    private static [] ;
    private static ();
    public static void ( );
    public static Int32[] (BigInteger );
    public static Int32[] (int , BigInteger );
    public static Byte[] (BigInteger , BigInteger );
    public static Byte[] (BigInteger );
    public static Byte[] (int , BigInteger );
    public static int (BigInteger );
    public static  ( );
    public static  ( );
    public static int (int );
    public static int (int , int );
    public static int (int , Int32[] );
    public static int (int , Int32[] , int );
    public static  ( , int , bool ,  );
    public static  ( , int , bool );
    public static  ( ,  ,  , bool );
    private static Byte[] (Byte[] , int );
    private static Int32[] (Int32[] , int );
    private static [] ([] , int );
}
internal class  :  {
    internal List`1<> ;
    internal virtual  ();
    internal virtual object ();
    public int ();
    public void ( );
    internal Object[] ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( );
    private ( );
    public (string );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public [] ();
    public virtual  ();
}
internal class  : object {
    public int ;
    public int ;
    public int ;
    public int ;
    public (Byte[] );
}
internal class  : object {
    internal  ;
}
internal class  :  {
    public (int );
    public ( );
    private static int (int );
    public virtual string ();
    public virtual int (Byte[] , int );
    protected virtual int (Byte[] , int , byte , int );
    public virtual  ();
}
internal class  : object {
    protected [] ;
    protected int ;
    protected int ;
    public sealed virtual void (int , int );
    public sealed virtual  ();
    public virtual  (bool );
    protected int ( );
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    internal (PicFormatOption );
}
internal class  : object {
    internal Style ;
    internal float ;
    internal float ;
    internal float ;
    internal string ;
    internal Style ;
    internal string ;
    internal Style ;
    internal string ;
    internal Style ;
    internal ArrayList ;
    internal float ;
    internal float ;
    internal float ;
    internal bool ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
}
internal class  : object {
    internal FormatCondition ;
    internal int ;
    internal  ;
    internal  ;
    internal int ;
    internal Byte[] ;
    internal (int , FormatCondition , int );
    internal bool ();
    internal bool ();
    internal int ();
    private void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal virtual void ( );
}
internal class  : object {
    private static UInt64[] ;
    private static ();
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    private static void (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] );
    public static UInt32 (UInt64[] );
    protected static void (UInt64[] );
    protected static void (UInt64[] , UInt64[] , UInt64[] );
    protected static void (ulong , ulong , UInt64[] , int );
    protected static void (UInt64[] , UInt64[] );
}
internal class  : object {
    private  ;
    private  ;
    []
private  ;
    private bool ;
    public ( , bool , bool );
    public int (int );
    public void (Stream , bool );
    public void (Stream , bool , bool );
    public Hashtable ();
    public  ();
    public  ();
    private void ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    public (BigInteger , BigInteger , BigInteger , BigInteger , BigInteger , BigInteger , BigInteger , BigInteger );
    [ObsoleteAttribute("Use 'GetInstance' method(s) instead")]
public ( );
    public static  ( , bool );
    public static  (object );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  ,  );
    protected virtual  ( , bool );
    public virtual  ();
    public virtual  ( );
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int );
    public virtual  ( );
    public virtual void ( );
    public virtual bool ();
}
internal class  :  {
    private int ;
    private short ;
    [("True")]
internal (short , string );
    internal virtual void ( );
}
internal class  : object {
    internal  ;
    internal string ;
    internal string ;
    internal  ;
    internal bool ;
    internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal  ;
    internal ( , Worksheet );
    internal void ( );
    private void ( );
}
internal abstract class  : object {
    protected abstract virtual void (PointF[] , float , float , List`1<Matrix> , float , float , float , bool , float );
    protected abstract virtual string ();
    protected virtual void ( , PointF[] , List`1& , List`1& );
    internal void ( ,  ,  , RectangleF& ,  ,  ,  );
}
internal class  : object {
    private  ;
    public ( );
    public sealed virtual Byte[] ();
    public sealed virtual int (Byte[] , int );
}
[]
internal interface  {
    public abstract virtual  ();
    public abstract virtual object ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual object ( );
    public abstract virtual  ( );
    public abstract virtual void ();
    public abstract virtual bool ( );
    public abstract virtual void (StringBuilder ,  );
    public abstract virtual string ( );
    public abstract virtual  ( );
    public abstract virtual  ( );
    public abstract virtual  ( );
    public abstract virtual  ( ,  );
    public abstract virtual  ( );
    public abstract virtual  ( );
    public abstract virtual bool ( , int );
    public abstract virtual bool ( , int );
    public abstract virtual bool ( , int );
    public abstract virtual long ( , int );
    public abstract virtual  (Int32[] ,  , int );
    public abstract virtual  (Int32[] ,  , int );
    public abstract virtual  (Int32[] ,  , int );
    public abstract virtual  ( , int );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual bool ( , int );
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ( );
    public abstract virtual  ( , int );
    public abstract virtual  ( , int , Workbook );
    public abstract virtual  ( );
    public abstract virtual  ( , bool );
    public abstract virtual bool ( , bool );
    public abstract virtual bool ( , int , int , bool );
    public abstract virtual  (int );
    public abstract virtual void ();
    public abstract virtual  ( );
    public abstract virtual void ( );
}
internal abstract class  :  {
    protected (bool , Boolean[] , float , float ,  , float , Double[] );
    [("True")]
internal virtual void ();
    private bool (Font , float , ArrayList , bool , Boolean[] , float , Int32& );
    private void ( , Single& );
}
internal class  :  {
    private  ;
    public ( );
    [ObsoleteAttribute]
public ( , Hashtable );
    public ( , IDictionary );
    public  ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  :  {
    private  ;
    internal  ;
    internal void (int );
    internal  ();
    public virtual int ();
    public virtual int (int );
    public virtual int (int );
    public virtual int (int , int );
    public virtual int (int , int , int );
    public virtual bool (int );
    public virtual int (int , int );
    public virtual int (int );
    public virtual int (int );
    public virtual int (int , bool );
    public virtual  ();
    public virtual  (int , int , bool );
    public virtual int ();
    public virtual void (int );
    public virtual void (int , int );
    public virtual int (int , int );
    public virtual int (int , int );
    public virtual void (int , int );
    public virtual void (int );
    public virtual bool (int , int );
    public virtual void (int );
    public virtual void ();
    public virtual int ();
    public virtual int (int ,  );
    public virtual int (int , [] , int , int );
    public virtual int (int ,  , int , int , int );
    public virtual int (int );
    public virtual void (int , int );
    public virtual  (int );
    public virtual object (int );
    public virtual void (int ,  );
    public virtual int (int );
    public virtual void (int , int );
    public virtual  (int ,  );
    public virtual  (int ,  , int );
    public virtual void (int ,  , int );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual void (int );
    public virtual byte (int );
    public virtual void (int , byte );
    public virtual int ();
    public virtual void (int );
    public virtual bool (int , int );
    public virtual  ( , int );
    public virtual void ( , int );
    public virtual object ();
}
internal class  :  {
    internal ( );
    internal  ();
    public virtual Font ();
    public virtual void (Font );
    public virtual Color ();
    public virtual void (Color );
    internal float ();
    internal void (float );
}
internal abstract class  : object {
}
internal class  :  {
    internal (Cells , RowCollection );
    protected virtual bool ( , int );
}
internal class  : object {
    private bool ;
    private PointF ;
    []
private  ;
    public ( );
    public void ();
    private void (float , float , bool );
    private void (float , float , bool );
    private void (float , bool );
    private void (float , bool );
    private void (float , float , float , float , float , bool , bool , bool );
    private static float (float , float , float , float );
    private void (float , float , float , float , float , float , bool );
    private void (float , float , float , float , bool );
    private void (float , float , float , float , bool );
    private void (float , float , bool );
    private void ();
    private float (string , Int32& );
}
internal class  : object {
    private int ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    public (int ,  );
    public virtual void ( );
    public virtual  ();
    public virtual int (Byte[] , int , int );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal Hashtable ;
    internal string ;
    internal  ;
    internal string ;
    internal string ;
    internal string ;
    internal String[] ;
    internal string ;
    internal string ;
    internal bool ;
    internal  ;
    private Style ;
    internal Cell ;
    internal ( ,  , string );
    internal Hashtable ();
    internal void ( );
    internal void ();
    internal Style ();
    internal void (Style );
    internal bool ();
    internal static  ( ,  , string );
    internal void ( , string );
    internal void (string );
    internal void ();
    internal string (string );
    public void (string , string );
    internal  ();
    internal Hashtable ();
    private void (StringBuilder , string , string );
    internal void (StringBuilder );
    internal  ();
    internal void ( );
    internal bool ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void ( );
}
internal class  :  {
    private void (int );
    private void (int );
    internal void ( );
}
internal class  : object {
    internal static  (int );
    internal static int ( );
}
internal class  : object {
    public sealed virtual void InitStream(StreamProviderOptions );
    public sealed virtual void CloseStream(StreamProviderOptions );
}
internal class  :  {
    internal ( );
}
internal abstract class  :  {
    private  ;
    private  ;
    protected (bool ,  );
    protected (bool ,  );
    public  ();
    public  ();
    private static  ( );
}
[AttributeUsageAttribute("224")]
internal class  : Attribute {
    [DebuggerBrowsableAttribute("0")]
public bool ;
    public (bool );
}
internal class  : object {
    []
private  ;
    private bool ;
    private Color ;
    private  ;
    internal ( );
    public bool ();
    public void (bool );
    public Color ();
    public void (Color );
    public  ();
    public void ( );
    public bool ();
}
internal class  : object {
    private  ;
    public  Error { get; public set; }
    [CompilerGeneratedAttribute]
public  get_Error();
    [CompilerGeneratedAttribute]
public void set_Error( );
}
internal class  : object {
    private int ;
    private bool ;
    public int ();
    public void (int );
    public bool ();
    public void (bool );
}
internal class  :  {
    internal virtual  ();
}
internal class  :  {
    internal (CellArea );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public virtual int ();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual int (Byte[] );
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual int (Byte[] );
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual int (int );
    public virtual void (Byte[] );
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal abstract class  : object {
    public static void (Int32[] , int , int , Int32[] , int );
    public static void (Double[] , int , int , Int32[] , int );
    public static void (IComparable[] , int , int , Int32[] , int );
    public static void (Object[] , int , int , Int32[] , int , IComparer );
    public static void (Object[] , int , int , int );
    public static void (Int32[] , int , int , int );
    public static void (Int64[] , int , int , int );
    public static void (Double[] , int , int , int );
    public static int ( , int , int );
    public static int ( , int , int , int );
    public static int ( , int , int );
    public static int ( , int , int , int );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    internal ( );
    private sealed virtual override object (bool ,  );
}
internal class  : ValueType {
    internal static ArrayList ( ,  , Rectangle , float , double , int );
    private static bool (RectangleF , Rectangle ,  , bool );
    private static void ( ,  , RectangleF );
    private static ArrayList ( ,  , Rectangle , float , double );
    private static float (double , int , float , float );
    private static void ( ,  , RectangleF , float ,  , Rectangle );
    internal static void ( );
    internal static void ( ,  , ArrayList , bool );
    private static void ( ,  , int , int , RectangleF , bool , int );
    internal static void ( ,  , ArrayList ,  , Rectangle );
    private static double (PointF , PointF , PointF );
    private static void ( , PointF[] ,  , Rectangle );
    private static void ( , ArrayList ,  );
    private static RectangleF (RectangleF , RectangleF );
    private static PointF[] (Rectangle , PointF , PointF );
    private static PointF[] (Rectangle , PointF , PointF , bool );
    private static float (float , float , float );
    private static void (ArrayList );
    private static void (PointF[]& );
    internal static PointF[] (IList );
    private static void ( ,  , ArrayList , ArrayList , Rectangle );
    private static void ( ,  , PointF[] , float );
    private static void ( ,  , PointF[] , int , int , float );
    private static PointF[] (IList , int , int );
    private static bool (PointF , Rectangle );
    private static bool (PointF , RectangleF );
    internal static ArrayList ( ,  , Rectangle , float , double , int , bool );
    private static bool ( , double , double );
    private static double (double );
    internal static void ( ,  , int , int , PointF , int );
    internal static void ( ,  , ArrayList );
    internal static ArrayList ( ,  , Rectangle , float , double , bool );
    private static void (PointF , int , int , ArrayList );
    internal static ArrayList ( ,  , Rectangle , int );
    private static ArrayList ( ,  , Rectangle );
    internal static ArrayList ( ,  , Rectangle , float , int , bool );
    private static ArrayList ( ,  , Rectangle , float , bool );
    internal static ArrayList ( ,  , Rectangle , int );
    private static void ( ,  , ArrayList& , ArrayList );
    private static ArrayList ( ,  , Rectangle );
    internal static ArrayList ( ,  , Rectangle , float , int , bool );
    private static ArrayList ( ,  , Rectangle , float , bool );
    internal static ArrayList ( ,  , Rectangle , float , double , int );
    private static  (List`1<> , string );
    internal static void ( ,  , Rectangle );
    internal static ArrayList ( ,  , Rectangle , float , double , int );
    internal static ArrayList ( ,  , float , double , int );
    private static ArrayList ( ,  , float , double );
    internal static ArrayList ( ,  , double , int );
    private static ArrayList ( ,  , float , double , int , double );
    internal static ArrayList ( ,  , double , int );
    private static ArrayList ( ,  , float , double );
    internal static ArrayList ( ,  , float , double , int );
    private static ArrayList ( ,  , float , double );
    internal static ArrayList ( ,  , float , double , int );
    private static ArrayList ( ,  , float , double );
    private static void (double , Object[] , ArrayList ,  );
    private static PointF ( , float , float , float , float , float , bool );
    internal static PointF ( , float , float , float );
    internal static PointF ( , float , float , float , float , float );
    internal static void ( ,  , ArrayList );
    internal static void ( ,  , ArrayList );
    internal static void ( ,  , ArrayList );
    internal static void ( ,  , ArrayList );
    private static void ( ,  ,  , float , float , float , float , float , double , Double& );
    internal static PointF ( , float , float , float , int );
    internal static PointF[] ( ,  , float , float , float , float , int , int );
    private static void ( ,  ,  , float , float , float , float , float , int , int );
    private static void ( ,  ,  , float , float , float , float , float , int , int , float );
    private static void ( ,  ,  , float , float , float , float , float , int , int , float );
    private static float (int , bool , float , float );
    private static float (float , bool , float , float );
    private static void ( ,  , IList );
    private static void ( ,  ,  , PointF[] , PointF[] );
    private static PointF ( , float , float , float , float , float , int , int , bool );
    internal static double ( );
    internal static void ( , int , Double& , Double& );
    internal static void ( , int , Double& , Double& );
    private static void ( ,  ,  , float , float , float , float , float , float , float );
    private static void (PointF[] );
    private static int (PointF , PointF[] );
    private static int (PointF , PointF[] );
    private static void ( ,  ,  , PointF[] , float );
    private static void ( ,  ,  , float , float , float , float , float , float , float );
    private static PointF ( ,  ,  , float , float , float , float , float , float , float , double );
    private static void ( ,  , Hashtable , Hashtable , float , int , int , int );
    private static void (Hashtable , PointF& , PointF& , Int32& , Int32& );
    internal static PointF[] (ArrayList , bool );
    internal static void ( ,  , int , int , Hashtable );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private ArrayList ;
    internal UInt32  { get; internal set; }
    internal (Stream );
    internal void (Stream , int );
    internal MemoryStream ();
    internal void (UInt32 );
    internal UInt32 (UInt32 );
    internal void (UInt32 , UInt32 );
    internal int ();
}
internal class  : object {
    private Char[] ;
    private bool ;
    internal ( , int );
    public char (char );
    public string (string );
    public void (string , StringBuilder );
    public void (Char[] , int , int , StringBuilder );
}
internal class  : object {
    internal  ;
    internal string ;
    internal string ;
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  : object {
    private static bool ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private int ;
    private int ;
    private PdfCompressionCore ;
    private  ;
    private int ;
    private bool ;
    private bool ;
    private PdfBookmarkEntry ;
    private static Hashtable ;
    private static Hashtable ;
    private PdfCompliance ;
    private  ;
    private PdfSecurityOptions ;
    private static string ;
    private int ;
    private DateTime ;
    private bool ;
    private PdfOptimizationType ;
    private PdfCustomPropertiesExport ;
    private bool ;
    private Hashtable ;
    private bool ;
    private PdfFontEncoding ;
    private static ();
    public static bool ();
    public static void (bool );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal PdfCompressionCore ();
    internal void (PdfCompressionCore );
    internal  ();
    internal void ( );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal  ();
    internal  ( );
    internal bool ();
    internal void (bool );
    internal PdfBookmarkEntry ();
    internal void (PdfBookmarkEntry );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal PdfCompliance ();
    internal void (PdfCompliance );
    internal  ();
    internal void ( );
    internal PdfSecurityOptions ();
    internal void (PdfSecurityOptions );
    internal static string ();
    internal static void (string );
    internal void (int );
    internal int ();
    internal void (DateTime );
    internal DateTime ();
    internal void (bool );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal PdfOptimizationType ();
    internal void (PdfOptimizationType );
    internal PdfCustomPropertiesExport ();
    internal void (PdfCustomPropertiesExport );
    internal bool ();
    internal void (bool );
    internal Hashtable ();
    internal void (Hashtable );
    internal bool ();
    internal void (bool );
    internal PdfFontEncoding ();
    internal void (PdfFontEncoding );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    public ( );
    public virtual string ToString();
}
internal class  : object {
    []
private Workbook ;
    []
private XmlMap ;
    []
private Stream ;
    internal (Workbook , string , Stream );
    internal void ();
    private void ( );
    private static void ( , int );
    private void ( ,  );
    private void ( ,  , int );
}
internal class  :  {
    internal (Workbook , bool , SaveOptions );
    public virtual void (Stream );
    internal virtual void ();
    private void ();
    internal virtual void ();
}
internal class  :  {
    protected  ;
    protected Byte[] ;
    protected Byte[] ;
    public (Byte[] , Byte[] );
    public ( , Byte[] , Byte[] );
    public ( ,  , Byte[] , Byte[] );
    protected virtual bool ();
    public virtual Int32[] ();
    public virtual IDictionary ();
    public virtual void (IDictionary );
    public virtual  ();
    public virtual  ();
    protected virtual  (int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private StringAlignment ;
    private StringAlignment ;
    private TextDirectionType ;
    private TextOrientationType ;
    public StringAlignment ();
    public void (StringAlignment );
    public StringAlignment ();
    public void (StringAlignment );
    public TextDirectionType ();
    public void (TextDirectionType );
    public TextOrientationType ();
    public void (TextOrientationType );
}
internal class  :  {
    private Byte[] ;
    public (Byte[] );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    public Byte[] ();
    internal virtual void ( );
    protected virtual int ();
    protected virtual bool ( );
}
internal class  :  {
    private double ;
    private double ;
    public (double , double );
    public virtual double (double );
}
internal class  : object {
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal void ( );
}
internal class  : object {
    internal static Int16[] ;
    internal static Int16[] ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal Int16[] ;
    internal Int32[] ;
    internal int ;
    internal int ;
    internal int ;
    internal (Int16[] , Int32[] , int , int , int );
    private static ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal ([] , bool , Color );
    internal virtual void (object , int );
    public virtual int Compare(object , object );
}
internal class  :  {
    private static  ;
    private IList ;
    public ( );
    private static ();
    public void ( ,  , string );
    public void ( ,  , string , string );
    public void ( , Byte[] , string );
    public void ( , Byte[] , string , string );
    public void ( ,  , string ,  ,  );
    public void ( ,  , string , string ,  ,  );
    public void ( , Byte[] , string ,  ,  );
    public void ( , Byte[] , string , string ,  ,  );
    public void ( ,  , string ,  ,  );
    public void ( ,  , string , string ,  ,  );
    public void ( , Byte[] , string ,  ,  );
    public void ( , Byte[] , string , string ,  ,  );
    public void ( );
    private void ( ,  , string , string ,  ,  ,  );
    public  ( );
    public  (string ,  , bool );
    public  ( , bool );
    public  ( );
}
internal abstract class  : object {
    public abstract virtual  (byte ,  ,  );
    public abstract virtual  (byte , string ,  );
    public virtual  (byte , double ,  );
    public virtual  (byte , bool ,  );
    public virtual  (byte ,  ,  );
    public virtual  (byte ,  );
    public virtual  (byte ,  ,  );
}
internal abstract class  : object {
    protected static float ;
    internal static float ;
    protected float ;
    protected float ;
    internal float ;
    internal float ;
    protected TextAlignmentType ;
    protected TextAlignmentType ;
    internal ArrayList ;
    internal  ;
    protected  ;
    protected bool ;
    protected float ;
    protected Boolean[] ;
    protected Double[] ;
    internal bool ;
    internal ImageOrPrintOptions ;
    private static Regex ;
    private static Regex ;
    private static Regex ;
    private static Regex ;
    private static Regex ;
    private static Regex ;
    protected ( , float , float , float , Double[] );
    private static ();
    internal void ();
    private void ( );
    private void ( );
    protected abstract virtual void ( );
    [("True")]
protected abstract virtual void (Double[] );
    protected abstract virtual float (double , float );
    [("True")]
internal abstract virtual void ( );
    protected abstract virtual void ();
    protected virtual void ( );
    internal static float (double , float );
    internal static float (double , float );
    private static Regex (DefaultEditLanguage );
    internal static void (string , DefaultEditLanguage , bool , int ,  );
    internal static void (ArrayList , bool );
    internal static void (ArrayList );
    internal static void (ArrayList , bool );
    internal static void (ArrayList , DefaultEditLanguage , bool , bool );
    internal static ArrayList (string );
    internal static bool (Style );
    internal static bool (Style );
    internal static bool (Style );
    protected bool ();
}
internal abstract class  : object {
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] , int );
    public static UInt64[] ();
    public static UInt64[] ();
    public static bool (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static bool (UInt64[] );
    public static bool (UInt64[] );
    public static BigInteger (UInt64[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private UInt32 ;
    [DebuggerBrowsableAttribute("0")]
private List`1<MemoryStream> ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public (UInt32 );
    public void ( );
    public List`1<MemoryStream> ();
    private void ();
    private void ();
    public sealed virtual void Dispose();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    public ( );
    public ( );
    public ( );
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public static  (object );
    public bool ();
    public bool ();
    public  ();
    public virtual  ();
}
internal interface  {
    public abstract virtual  ( );
    public abstract virtual void ( ,  );
    public abstract virtual  ( );
    public abstract virtual  ();
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    []
private  ;
    internal ( );
    internal void ( );
    private void ();
    private void ();
    private void (ExternalConnection , string );
    private void (ExternalConnection );
    private void ( ,  );
    private void ( ,  );
    private void (ExternalConnection );
    private void (ExternalConnection );
    private void (DBConnection );
    private  (string );
    private static  (string );
    private void ( );
    private static  (string );
    private void (WebQueryConnection );
    private void (ExternalConnection );
    private void (ExternalConnection , Hashtable );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  :  {
    private  ;
    private bool ;
    private ArrayList ;
    internal ([] , bool );
    protected virtual  ();
    public virtual  (string , FontStyle , bool );
    [("False")]
private  (string , FontStyle , bool );
    public virtual  (string , FontStyle , bool );
    public virtual  (string , float , FontStyle );
    public virtual PrivateFontCollection ( );
    public virtual  (FontStyle , int );
    public virtual  (FontStyle , string );
    [("False")]
public virtual string (string );
}
internal class  : ValueType {
    internal static double (double );
    internal static double (double );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    private ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public Byte[] ();
    public virtual  ();
}
internal abstract class  :  {
    protected int ;
    protected int ;
    public ( ,  ,  , int );
    public virtual  (int , int );
    public virtual bool (int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
}
internal class  :  {
    private ArrayList ;
    internal void (Style , bool , Workbook );
    private Byte[] (int , bool );
    private Byte[] (int , byte );
    private Byte[] (int , ushort );
    private Byte[] (int , int );
    private Byte[] (int ,  , int , bool , Workbook );
    private Byte[] (int , string );
    private Byte[] (int , Border , Workbook );
    internal void (Byte[] , int ,  , int , Workbook );
    internal byte (ColorType );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal List`1<> ;
    internal  ( );
}
internal class  : object {
}
internal class  : object {
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected  ;
    protected  ;
    public virtual void (BigInteger , BigInteger ,  ,  );
    public virtual void ( ,  ,  );
    public virtual BigInteger (Byte[] , Byte[] , Byte[] );
    public virtual BigInteger (BigInteger );
    protected virtual BigInteger ();
    private BigInteger ();
    public virtual BigInteger ();
    public virtual bool (BigInteger );
    public virtual BigInteger ();
}
internal class  : object {
    internal bool ;
    internal StringBuilder ;
    internal int ;
    []
internal  ;
    []
internal Workbook ;
    private TextWriter ;
    private byte ;
    internal int ;
    internal int ;
    internal int ;
    internal void (string );
    internal bool ();
    internal bool ();
    internal bool ();
    internal void ();
    internal bool ();
    internal void (bool );
    public void ();
    public void ();
    public void (int , int , int );
    public void (int , string );
    public void (int , int , int );
    internal static void (Double[][] );
    internal static void (Cells , int , int , Double[][] );
    internal static void (Cells , int , int , Double[][] );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (WorksheetCollection );
    public sealed virtual void Dispose();
    internal  ( ,  );
    internal  (UInt32 );
    internal int (string , Worksheet , bool );
    internal int ( );
    internal int (PivotTableSourceType , String[] , bool , PivotPageFields );
    public  (int );
    public int (PivotTableSourceType , String[] );
    internal  ( , Worksheet , CopyOptions );
    internal void (int , int , Worksheet , InsertOptions );
    internal void (int , int , Worksheet );
    internal void ( );
    internal  (int );
    internal void (ArrayList );
    internal void ( );
}
internal class  : IOException {
    public (string );
    public (string , Exception );
}
internal class  :  {
    internal int ;
    internal string ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal List`1<> ;
    internal ( , int );
    internal virtual  ();
    internal void ( , CopyOptions );
    private void (int , bool );
    private bool (int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public  ();
    public  ();
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    internal float ();
    internal float (bool , int , int );
    internal float ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal enum  : Enum {
    public int value__;
    public static  Reserved;
    public static  PublicKeyEncryptedSession;
    public static  Signature;
    public static  SymmetricKeyEncryptedSessionKey;
    public static  OnePassSignature;
    public static  SecretKey;
    public static  PublicKey;
    public static  SecretSubkey;
    public static  CompressedData;
    public static  SymmetricKeyEncrypted;
    public static  Marker;
    public static  LiteralData;
    public static  Trust;
    public static  UserId;
    public static  PublicSubkey;
    public static  UserAttribute;
    public static  SymmetricEncryptedIntegrityProtected;
    public static  ModificationDetectionCode;
    public static  Experimental1;
    public static  Experimental2;
    public static  Experimental3;
    public static  Experimental4;
}
internal class  : AbstractInterruptMonitor {
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    public bool IsInterruptionRequested { get; }
    private static ();
    public virtual bool get_IsInterruptionRequested();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    public int ( );
}
internal class  : object {
    private static Int32[] ;
    private static int ;
    private static int ;
    protected static BigInteger ;
    protected static BigInteger ;
    protected  ;
    private static ();
    public virtual void ( );
    public virtual  ();
    protected virtual BigInteger (int , BigInteger );
}
internal interface  {
    public abstract virtual int (Stream );
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public ( , string );
    public ( , string , string );
    public virtual IEnumerator GetEnumerator();
    public virtual int ();
    public virtual  (string );
    public virtual  (int );
    private void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (SparklineGroup );
}
internal class  :  {
    public ( );
}
internal class  :  {
    private PointF ;
    private string ;
    public (PointF , string );
    public virtual void ( );
    public PointF ();
    public string ();
    public virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal interface  {
    public abstract virtual  ();
}
internal class  :  {
    private float ;
    public float ();
    public void (float );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal (int , int , int , int );
    internal void ( );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private  ;
    private Byte[] ;
    private int ;
    private int ;
    public ( , bool );
    public ( );
    public  (Byte[] );
    public  (int );
    public  (int );
    public  ( , Byte[] , bool );
    public  ( , int , Byte[] , bool );
    public  ( , Byte[] , bool );
}
internal class  :  {
    private bool ;
    public bool ();
    public void (bool );
    public virtual void ( );
    public static  (PointF[] , bool );
    public static  (PointF , PointF );
    public static  (RectangleF );
    public static  (PointF[] );
    public void (RectangleF );
    public void (PointF[] );
    public void ( );
    public void (PointF , PointF );
    public void (PointF[] );
    protected virtual bool ( );
    public virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal abstract class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanSeek();
    public sealed virtual bool get_CanWrite();
    public virtual void Close();
    public virtual void Flush();
    public sealed virtual long get_Length();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long );
    public sealed virtual int Read(Byte[] , int , int );
    public sealed virtual long Seek(long , SeekOrigin );
    public sealed virtual void SetLength(long );
    public virtual void Write(Byte[] , int , int );
    public virtual void (Byte[] );
    public virtual void WriteByte(byte );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public (Workbook , SaveOptions );
    public sealed virtual void (Stream );
    public sealed virtual void ();
    public sealed virtual void Dispose();
    internal void (Stream );
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal static string (string ,  );
    private void ();
    private void ();
    internal static string (string , OperatorType , string , string );
    private string (Validation , int );
    internal string ( , Validation , int );
    private void ( , Validation , int , int );
    private void ();
    private void (ListObject , Worksheet );
    internal static void ( , WorksheetCollection , int ,  );
    internal void ();
    private void ();
    internal void ();
    internal void ();
    internal void (string );
    private void (string );
    private bool (string , Byte[] );
    private void (string , Byte[] );
    internal static  (string ,  , string );
    internal void ();
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream ,  ,  );
    public virtual  ();
    public virtual  ();
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
}
internal class  : object {
    protected  ;
    internal int ;
    internal int ;
    protected  ;
    private Bitmap ;
    protected [] ;
    []
internal ThreeDFormat ;
    public  ();
    public void ( );
    public  ();
    public void ( );
    public Bitmap ();
    public void (Bitmap );
    public [] ();
    protected void (Int32& ,  ,  ,  ,  );
    protected void (double , double , double );
}
internal class  : object {
    private UInt32 ;
    internal long ;
    private bool ;
    private UInt32[] ;
    private UInt32 ;
    public (bool );
    public (int , bool );
    public long ();
    public int ();
    public void (Byte[] , int , int );
    private static UInt32 (UInt32 );
    private static byte (byte );
    private void ();
    private UInt32 (UInt32[] , UInt32 );
    private void (UInt32[] , UInt32[] );
    public void ();
}
internal class  : ExternalConnection {
    [DebuggerBrowsableAttribute("0")]
internal char ;
    [DebuggerBrowsableAttribute("0")]
internal char ;
    [DebuggerBrowsableAttribute("0")]
internal char ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    internal (ExternalConnectionCollection );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal char ();
    internal void (char );
    internal  ();
    internal virtual void j7k7dtyaq65wq2dvcrm58y8euvndngxp(ExternalConnection , CopyOptions );
    internal virtual bool j7k7dtyaq65wq2dvcrm58y8euvndngxp(ExternalConnection );
    internal static int (int );
    internal static int (int );
}
internal class  : object {
    internal bool ;
    internal string ;
    internal string ;
    internal string ;
    internal (bool , string , string , string );
    public virtual string ToString();
}
internal class  :  {
    public virtual bool ( );
    protected virtual  (byte );
    protected virtual byte ();
}
internal class  :  {
    private  ;
    private bool ;
    public ( ,  );
    public ( ,  , bool );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    private void (PointF );
    private void (PointF );
    private void (PointF[] );
}
internal class  :  {
    public virtual Color (Color );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( ,  );
    public ( );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal List`1<Byte[]> ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<StreamProviderOptions> ;
    public sealed virtual void CloseStream(StreamProviderOptions );
    public sealed virtual void InitStream(StreamProviderOptions );
    internal void ();
}
internal class  :  {
    internal (ListColumn );
}
internal interface  {
    public abstract virtual void ();
}
internal class  : object {
    private string ;
    private string ;
    private string ;
    private int ;
    internal (string );
    internal string (ImageType );
    internal string (string );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
[]
public Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
public WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
[]
public  ;
    [DebuggerBrowsableAttribute("0")]
[]
public GlobalizationSettings ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public double ;
    [DebuggerBrowsableAttribute("0")]
public DateTime ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public int ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public  ;
    [DebuggerBrowsableAttribute("0")]
public Encoding ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
public bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal [][] ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Int64[] ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal CalculationOptions ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[][] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    public (Workbook ,  , CalculationOptions );
    public sealed virtual void Dispose();
    internal bool ();
    internal void ();
    internal int ();
    internal void ();
    internal  ();
    internal  ();
    internal  (string );
    internal void (string ,  );
    internal void (string ,  );
    public  ( , ListObject , int , int ,  );
    public object (string );
    public void (string , object );
    internal void (int );
    private bool ( , int );
    internal void (object ,  );
    internal void (object ,  );
    internal void (int , int , int ,  );
    internal  (int , int , int );
    internal  (object );
    internal void (object );
    internal int ();
    internal void ();
    internal int (int );
    internal void (int );
    internal void (long );
    internal void ();
    internal void ();
    internal long ();
    internal void ( );
    internal  ();
    internal void ();
    internal void (int , int );
    internal void (StringBuilder , Int64[] , int , int , string );
    internal void (int , long );
    internal void (long );
    internal void ( , int ,  );
    internal void (int ,  );
    internal bool (int , CellArea );
    internal void ( );
    internal void ( , int , int , int );
    private Int32[] (int );
    internal void (long ,  );
    internal void (int ,  );
    internal void (int ,  );
    internal void (long );
    internal bool (int ,  , bool );
    internal void (long );
    public int ();
    public int ();
    internal  (int , Workbook );
    internal bool (int );
    internal  (string );
    internal  (string , TypeCode , object );
    internal  (string , object );
    internal bool (int );
    internal  (int );
    internal  (int , int );
    internal  (int , int , int );
    internal  ();
    internal bool ();
    internal void (int , CellArea );
    private bool ();
    public String[] ();
}
internal abstract class  : object {
    internal abstract virtual  ();
    internal virtual double ();
    internal virtual int ();
    internal virtual string ();
    internal virtual DateTime ();
    internal virtual byte ();
    internal virtual bool ();
    internal string (string );
    internal abstract virtual object ();
    internal virtual bool ( );
    internal virtual void ( );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( );
    public ( );
    public  ();
    public  ();
    public  ();
    public  ();
    public  (string );
    public  (string );
    public  (string );
    public void ( );
    public  ();
    public Byte[] ();
    public Byte[] (string );
}
internal class  : object {
    private int ;
    private int ;
    private ushort ;
    internal (int );
    internal (int , int );
    internal void ( ,  , int );
    internal void ( );
    internal ushort ();
    internal void (ushort );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal void ( , int );
    internal int ();
}
internal class  : object {
    internal string ;
    internal int ;
    internal List`1<> ;
    internal int ;
    internal (string );
    internal bool ( );
    internal void ( , CopyOptions );
    internal bool ();
    internal List`1<> ();
    private  ();
    internal  ();
    internal int ( );
    internal void ();
    internal void ();
}
internal class  :  {
    public ( , bool , bool , Byte[] );
    public ( , bool , Int32[] );
    private static Byte[] (Int32[] );
    public Int32[] ();
}
internal class  : object {
    internal object ;
    internal  ;
    public sealed virtual void ( );
    public sealed virtual bool ();
    public sealed virtual void (bool );
}
internal class  : object {
    internal static IComparer ;
    private static ();
    internal static string (string );
    internal static ArrayList ( ,  , string );
    internal static Hashtable ( ,  , string );
    internal static Hashtable ( ,  , Workbook ,  , string , string );
    private static  ( );
    private static bool ( );
    internal static string (Hashtable , string );
    internal static  (Hashtable , string , bool );
    internal static  (Hashtable ,  , bool );
    internal static  (Hashtable , string );
    internal static  (ArrayList , string );
    internal static ArrayList (Hashtable , string );
}
internal class  : object {
    protected  ;
    protected  ;
    public ( ,  );
    public virtual BigInteger[] (BigInteger );
    public virtual  ();
    public virtual bool ();
}
internal abstract class  : object {
    private int ;
    private int ;
    private StringBuilder ;
    private string ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    private  ;
    protected (string );
    internal virtual string ( );
    internal virtual  (Byte[] );
    [("True")]
internal virtual void ();
    internal string (string );
    private Byte[] (Byte[] );
    internal string ( , string );
    internal int ( , int );
    private  ( );
    private string (Byte[] );
    private string ( );
    private string (string );
    private static int (string );
    private int ();
    internal  ();
    internal void ( );
    internal Hashtable ();
    protected Hashtable ();
}
internal class  :  {
    internal ( , float , float ,  );
    private float (RectangleF );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
}
internal class  :  {
    private [] ;
    public ( );
    public ([] );
    private ( );
    private static [] ([] );
    public static  (object );
    public static  ( , bool );
    public static  ( ,  );
    public [] ();
    public virtual  ();
    public virtual string ToString();
}
internal interface  {
    public abstract virtual  ();
}
internal class  : object {
    internal [] ;
    internal void ( );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  :  {
    protected virtual void (bool );
    public virtual void (int , int );
}
internal class  :  {
    private short ;
    private  ;
    private  ;
    internal void (WorksheetCollection ,  );
    internal void ( );
    internal void (ShapeCollection );
    internal void ( );
}
internal class  : object {
    public static  (string , String& );
}
internal class  : object {
    internal  ;
    internal int ;
    internal string ;
    internal int ;
    internal int ;
    internal int ;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal virtual void ( );
    private void (ExternalConnection ,  );
    private void (ExternalConnection ,  );
    private void (ExternalConnection ,  );
    private void (ExternalConnection ,  );
    private void (DBConnection ,  );
    private static string ( );
    private static string ( );
    private void ( ,  );
    private string ( );
    private void (WebQueryConnection ,  );
    private void (ConnectionParameterCollection ,  );
    private void ( ,  );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    private ArrayList ;
    public ( );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ( );
    public void (int ,  );
    public ArrayList ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  ,  );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private double ;
    private double ;
    internal ( , int );
    public virtual void ();
    public virtual bool (double , double );
    public virtual bool (double , double );
    public virtual  (double , double );
    public virtual  (double , double , int );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal static CellsException ;
    private static ();
    public static int (int );
    public static long (long );
}
internal class  : object {
    private IList ;
    public (ICollection );
    public ICollection ();
    public virtual string ToString();
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal bool ;
    internal bool ;
    internal  ;
    internal static  ( );
}
internal class  :  {
    private static object ;
    internal DataBar ;
    private bool ;
    public ( , double , DataBar );
    public ( , double , DataBar , bool );
    private static ();
    internal virtual FormatCondition ();
    public virtual ArrayList (RectangleF );
    public virtual  (RectangleF , Double[] , TextAlignmentType , TextAlignmentType );
    public virtual bool ();
    private RectangleF (RectangleF , RectangleF );
    private float (float , bool );
    private RectangleF (RectangleF , RectangleF );
    private float (float );
}
internal class  :  {
    private  ;
    internal ( ,  );
    private string ( );
    internal  ( );
    public virtual  ( );
}
internal class  : object {
    []
private WorksheetCollection ;
    internal bool ;
    internal bool ;
    internal (WorksheetCollection );
    internal  (Cell , Byte[] , int );
    private  (Byte[] , Int32& , ArrayList , Cell );
    private  (string , int , ArrayList , Cell );
    private  (string , int , ArrayList , Cell );
    private  (Byte[] , int , ArrayList , Cell );
    private  (Byte[] , int , ArrayList , Cell );
    private void ( , ArrayList );
    private void ( , ArrayList );
    private void ( , Byte[] , int , Int32& );
}
internal class  :  {
    internal  ;
    private  ;
    private float ;
    private Double[] ;
    public ( ,  , float , Double[] );
    public virtual void ( , PointF );
    private SizeF ( );
    private void ( ,  , PointF );
    private  ( );
}
internal class  :  {
    internal  ;
    public ( );
    public  ();
    public object ();
    public DateTime ();
    public  ();
    public  ();
    protected virtual  ();
}
internal class  : object {
    public int ;
    public int ;
    public int ;
    public int ;
    public (int , int , int , int );
}
internal class  : object {
    []
internal static RectangleF (Shape );
    internal static PointF (Stream , ImageOrPrintOptions , Shape );
    internal static void (string , ImageOrPrintOptions , Shape );
    internal static void (Stream , ImageOrPrintOptions , Shape );
    internal static Bitmap (ImageOrPrintOptions , Shape );
    internal static  (Shape , bool , IWarningCallback );
    private static Bitmap (Bitmap , float );
    private static  (Shape ,  , Stream , ImageType , ImageOrPrintOptions );
    private static Single[] (Shape );
    private static void (Shape ,  );
    internal static void (Shape ,  , ImageOrPrintOptions );
    private static void (Shape ,  );
    private static ArrayList (Shape , ShapePathPointCollection , ShapeGuideCollection ,  );
    private static void (Shape ,  );
    private static  (ShapePathType );
    private static void (Shape ,  );
    private static void (Shape ,  );
    private static bool (Shape , float , float );
    internal static Color (double , Color );
    private static void (Shape ,  );
    internal static  (GradientFillType );
    internal static  (GradientDirectionType );
    private static void (Shape , FillFormat ,  );
    internal static void (FillFormat ,  );
    private static void (LineFormat ,  );
    private static void (FontSettingCollection , Shape ,  , ImageOrPrintOptions );
    private static Font (WorksheetCollection , Font );
    private static string (Bullet , int );
    private static string (int );
    private static string (int );
    private static void (ArrayList ,  );
    private static void (EquationNodeParagraph ,  );
    private static void ( , FontSetting );
    private static  (Font );
    private static bool (Font , Font );
    private static void (Font ,  );
    private static bool (Font );
    private static void (CommentShape ,  );
    private static void (Shape ,  );
    internal static Color (Color );
    private static Color (Color , double );
    private static ColorBlend (ColorBlend , int );
    internal static  (MsoDrawingType );
    internal static  (MsoLineDashStyle );
    private static  (MsoLineStyle );
    private static  (MsoArrowheadStyle );
    private static  (MsoArrowheadLength );
    private static  (MsoArrowheadWidth );
    private static  (CheckValueType );
    internal static HatchStyle (FillPattern );
    private static  (RectangleAlignmentType );
    private static  (MirrorType );
    private static  (FillPictureType );
    private static void (Shape ,  );
    private static void (Shape ,  );
    private static void (LineFormat ,  );
    private static void (Shape ,  );
    private static  (MsoPresetTextEffectShape );
    private static void (Shape ,  );
    private static  ( );
    public static void (string , FontSetting , Font , ImageOrPrintOptions ,  , Shape ,  , Stack , Stack , Point& , Int32& , TextAutonumberScheme& );
    public static ArrayList (string , string );
}
internal interface  {
    public abstract virtual string ();
}
internal abstract class  : object {
    []
protected Cells ;
    []
protected RowCollection ;
    private  ;
    internal (Cells , RowCollection );
    public abstract virtual void ();
    public abstract virtual Row (int );
    public abstract virtual Row (int , bool );
    public abstract virtual Row (int , bool , bool , bool );
    public abstract virtual int ();
    public abstract virtual void (int );
    internal virtual void ( );
    public int (int );
    public bool (Row , bool , bool );
    public Row (int , bool , bool , bool );
}
internal class  : object {
    internal  ;
    internal ArrayList ;
    internal string ;
    internal ( , string );
    internal void ();
}
internal class  : object {
    private static int ;
    private Byte[] ;
    private int ;
    private int ;
    private Byte[] ;
    private static ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual byte (byte );
    public virtual void (Byte[] , int , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal Cell ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal Style ;
    [DebuggerBrowsableAttribute("0")]
internal Hyperlink ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal Border ;
    [DebuggerBrowsableAttribute("0")]
internal Border ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal AutoFilter ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal CellValueType ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private static Border ;
    internal ( , Cell , int , int , int , int );
    private static ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool (int );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    private void ();
    private void ();
    []
private Hashtable ();
    private void (Hashtable );
    private void (RectangleF ,  , int );
    private ArrayList ( );
    private string ( , RectangleF , string , Int32[] );
    internal void ();
    internal void (int );
    private void ();
    private string (Cell );
    internal void ();
    internal string (string );
    internal void ();
    private void ();
    internal void (int );
    internal bool ();
    private static string (string , string );
    private void (int );
    private void ();
    private void ();
    private static bool (Style , BorderType );
    internal int (bool , bool );
    internal void ();
    private string (string );
    internal void ();
    private bool ( , bool );
    private bool ();
    private bool (Style , bool );
    internal bool ( );
    internal bool ();
    internal bool ();
    internal bool ();
    internal double ();
    internal double (bool );
    internal double ();
    internal int ();
    internal bool ();
    internal string ();
    private double ();
    private int ();
    internal bool ();
    public sealed virtual void Dispose();
}
internal class  :  {
    internal void (DataSorterKey , CellArea );
}
internal class  : object {
    []
private Workbook ;
    []
private WorksheetCollection ;
    []
private  ;
    private int ;
    public (Workbook ,  );
    internal void ( ,  , Int32[] );
    private void ( );
    private void ( );
    private void (TableStyle ,  );
    private void ( );
    private void ( ,  , int );
    private void ( , int );
    private void ( , int );
    private void (Style , int ,  ,  , Hashtable );
}
internal class  : object {
    internal int ;
    internal short ;
    internal int ;
    internal int ;
    internal SaveFormat ;
    []
internal Workbook ;
    internal Boolean[] ;
    internal Boolean[] ;
    []
private  ;
    []
private  ;
    internal (Workbook , SaveFormat );
    internal void ();
    private void (Int32[] );
    private void (Int32[] );
    private void (Int32[] );
}
internal class  :  {
    internal (MultipleFilterCollection );
    internal static int (string );
}
internal class  :  {
    public (Byte[] );
    public (Byte[] , int , int );
    private static Byte[] (Byte[] , int , int );
    public static bool (Byte[] , int , int );
    public static bool (Byte[] , int );
    public static bool (Byte[] );
    public static bool (Byte[] , int );
    public static bool (Byte[] , int );
    public static bool (Byte[] , int );
}
internal class  : object {
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
}
internal enum  : Enum {
    public int value__;
}
internal class  : ApplicationException {
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (string );
    public (int , string );
    public int ();
    public void (int );
}
internal class  :  {
    private string ;
    private bool ;
    private bool ;
    private [] ;
    private int ;
    private int ;
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public [] ();
    public void ([] );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public virtual byte ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (byte , byte , byte , byte );
}
internal class  : object {
    private static long ;
    private static int ;
    private Byte[] ;
    private Byte[] ;
    private  ;
    private  ;
    private int ;
    private long ;
    public ( , int ,  , Byte[] , Byte[] );
    private static ();
    private void (Byte[] );
    private void (Byte[] , byte );
    public sealed virtual int ();
    public sealed virtual int (Byte[] , Byte[] , bool );
    public sealed virtual void (Byte[] );
    private Byte[] ();
}
internal class  : Brush {
    [DebuggerBrowsableAttribute("0")]
private HatchBrush ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    public (HatchStyle , Color );
    public (HatchStyle , Color , Color );
    public HatchStyle ();
    public Color ();
    public Color ();
    public float ();
    public void (float );
    public virtual object Clone();
    protected virtual void Dispose(bool );
    public sealed virtual Brush ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
}
internal class  :  {
    public (Byte[] , int );
    public (Byte[] );
    public (int );
    public ( );
    internal virtual void ( );
}
internal class  : object {
    private static Int32[] ;
    private double ;
    public (double );
    private static ();
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual int (int );
    public sealed virtual int (int );
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int );
    public sealed virtual int (int );
    public static bool (int );
}
internal class  : object {
    private  ;
    private Worksheet ;
    private  ;
    internal ( , Worksheet ,  );
    internal void ();
    internal static SparklineType (string );
    internal static PlotEmptyCellsType (string );
    internal static SparklineAxisMinMaxType (string );
    private void ();
    private void (SparklineGroup );
    private void (SparklineCollection );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual string ();
    public abstract virtual int ();
    public abstract virtual void (byte );
    public abstract virtual void (Byte[] , int , int );
    public abstract virtual int (Byte[] , int );
    public abstract virtual void ();
}
internal class  :  {
    internal ( ,  );
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal bool ();
    internal virtual double ();
    internal virtual double ();
    internal virtual double ();
    internal virtual double ();
    internal virtual double ();
}
internal class  : object {
    private Stream ;
    private bool ;
    private  ;
    internal (Stream );
    private  ();
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual string (string );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
}
internal class  : object {
    internal int ;
    internal string ;
    internal bool ;
    internal string ;
    private int ;
    private bool ;
    private int ;
    private bool ;
    private TextDirectionType ;
    internal TextAlignmentType ;
    internal TextAlignmentType ;
    private byte ;
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public TextDirectionType ();
    public void (TextDirectionType );
    private bool (StyleModifyFlag );
    private void (StyleModifyFlag );
    internal bool ( );
    internal void (Style , bool );
    internal static  (Style );
}
internal abstract class  : object {
    internal static BigInteger ;
    private static string ;
    internal static  ;
    private static string ;
    internal static  ;
    private static string ;
    internal static  ;
    private static string ;
    internal static  ;
    private static string ;
    internal static  ;
    private static ();
    private static BigInteger (string );
    private static  (string );
    public static void (IDictionary , Byte[] );
    public static void (IDictionary , byte );
    public static Byte[] (IDictionary );
    public static short (IDictionary );
    public static Byte[] (Byte[] );
    public static Byte[] (byte );
    public static Byte[] (Byte[] );
    public static byte (Byte[] );
    public static  (short );
    public static bool (Int32[] );
    public static bool (int );
    public static bool ( ,  );
    public static Byte[] ( ,  );
    public static  ( ,  );
    public static  ( ,  , Stream );
    public static  ( ,  , Stream );
    public static BigInteger (Stream );
    public static  (Stream );
    public static  ( , Stream );
    public static void (BigInteger , Stream );
    public static void ( , Stream );
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal abstract class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected List`1<> ;
    [DebuggerBrowsableAttribute("0")]
protected List`1<> ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList[] ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList[] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal ( );
    public List`1<> ();
    public List`1<> ();
    internal ArrayList ();
    internal void (ArrayList );
    internal ArrayList ();
    internal void (ArrayList );
    internal ArrayList[] ();
    internal void (ArrayList[] );
    internal ArrayList ();
    internal ArrayList[] ();
    internal void (ArrayList[] );
    public  (int );
    internal void (Double& , Double& );
    internal int ( );
    internal int ( ,  );
    internal bool ();
    public IList ();
    internal ArrayList ();
    internal IList ( , [] );
    internal IList ( ,  );
    internal  (int ,  , [] );
    internal  (int ,  ,  );
    internal ArrayList ();
    private ArrayList (ArrayList );
    internal ArrayList ();
    public  ();
    public void ( );
    internal  ( );
    internal  ( ,  );
    internal  ( );
    internal int ( ,  , [] );
    internal int ( ,  ,  );
    internal virtual ArrayList ();
    internal ArrayList ();
    internal bool ();
    internal bool ();
    internal  (int );
    public virtual  ( );
    internal void ();
}
internal class  :  {
    private Byte[] ;
    public (Byte[] );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    public Byte[] ();
    internal virtual void ( );
    protected virtual int ();
    protected virtual bool ( );
}
internal class  : object {
    public string ;
    public List`1<> ;
    public List`1<> ;
}
internal class  :  {
}
internal abstract class  : object {
}
internal class  : object {
    [("True")]
internal static Guid (Byte[] );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    internal ( , object ,  );
    internal  ();
    internal  ();
    internal  ();
    internal bool ();
    internal bool ();
    internal void (bool );
    internal int ();
    internal int ();
    internal int ();
    internal virtual int ();
    internal virtual int ();
    internal SizeF ();
    internal float ();
    internal Font ();
    internal float ();
    internal float ();
    internal int ();
    internal void (int );
    internal float ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public (Byte[] ,  ,  );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static Guid ;
    internal static int ;
    internal static int ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static string ;
    internal static Byte[] ;
    private static ();
    internal static string ( );
    internal static  (string );
    internal static int ( );
    internal static  (int );
    internal static int ( );
    private static UInt32[] ();
    internal static UInt32 (Byte[] , int );
}
internal class  : object {
    internal static IDictionary ;
    internal static IDictionary ;
    private static ();
    public static  (string );
    public static ICollection ();
    public static  ( );
    public static  (string );
    private static  (string );
    public static  ( );
    public static  (string );
    public static string ( );
    public static  ( , bool ,  ,  );
    public static  (string , bool ,  ,  );
}
internal class  :  {
    internal byte ;
    private  ;
    private  ;
    internal ImageType  { get; }
    internal Byte[]  { get; }
    internal virtual byte ();
    internal virtual bool ();
    internal virtual int ();
    internal virtual void (int );
    internal virtual int (int );
    internal virtual ImageType ();
    [("False")]
internal virtual Byte[] ();
    internal virtual void (Byte[] );
    private void ();
    internal virtual void (Byte[] , int , int , string );
    internal void ( );
    internal UInt32 ();
    internal int ();
    internal void (Byte[] );
    internal virtual Byte[] ();
    [("False")]
internal void (Byte[] , int );
    internal  ();
    internal  ();
    internal virtual Byte[] ();
    internal void ();
    internal void ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    public void ( );
}
internal class  :  {
    public (bool , bool , Byte[] );
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    public ([] ,  , int , int , int , int , int );
    protected virtual void ();
    public virtual  ();
}
internal class  : object {
    [("True")]
internal ArrayList ( );
    private  ( );
    [("True")]
private void ( ,  );
    internal static double (string );
    private void ( );
}
internal interface  {
    public abstract virtual  ( );
}
internal class  : object {
    private  ;
    public (int );
    public  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private Byte[] ;
    private  ;
    public ( , Byte[] );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public Byte[] ();
    public virtual  ();
}
[AttributeUsageAttribute("2")]
[]
internal class  : Attribute {
    [DebuggerBrowsableAttribute("0")]
public int ;
    public (int );
}
internal class  : object {
    []
internal  ;
    []
internal Cells ;
    []
internal Style ;
    internal int ;
    internal bool ;
    internal double ;
    internal Hashtable ;
    internal ( );
    internal int (Byte[] , int , bool );
    internal void (int , int , Byte[] , Byte[] );
    internal virtual void (int , int , Byte[] , Byte[] );
    [("True")]
internal virtual Cell (Byte[] , int , int , Row , int );
    internal int (Byte[] , int , Cell , int );
    private bool (UInt32 , UInt32 ,  );
    private bool (double , UInt32 , UInt32 ,  );
    private void (double ,  , UInt32& , UInt32& );
    internal string ( );
    private string (string , int , UInt32 , string );
    internal int (Byte[] , int , Cell );
    internal void (Hashtable , int , Cell );
    internal int (Byte[] , int , Cell );
    internal int (Byte[] , int , Cell );
    internal int (Byte[] , int , Cell );
    internal int (Byte[] , int , Cell );
    internal virtual int (Byte[] , int , Cell , byte , bool );
    internal string (DateTime );
}
internal class  :  {
    private  ;
    private Byte[] ;
    private int ;
    public ( );
    internal int ();
    public virtual string ();
    public virtual int ();
    public virtual int (int );
    public virtual int (int );
    public virtual void (bool ,  );
    public virtual Byte[] (byte );
    public virtual Byte[] (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual void ();
}
internal class  : object {
    public static long (int , bool );
    public static long (int , bool );
    public static long (int , bool , int , bool );
    internal static  (long );
    internal static  ( , long );
    internal static  (long , long );
    internal static  ( , long , long );
    internal static  ( );
    internal static  ( ,  );
    internal static  ( );
    internal static  (string );
    internal static  (int );
    internal static  ( , string );
    internal static  ( , int );
    internal static  (string , string );
    internal static  (string );
    internal static  (int );
    internal static  ( , string ,  );
    internal static  (string ,  );
    internal static  ( );
    internal static  ( ,  );
    internal static  ( ,  );
    internal static  ( ,  );
    internal static  ( ,  );
    internal static  ( ,  );
    public static long (Char[] , int , int , int , int );
    public static long ( , Char[] , int , int );
    public static  ( , string , int , bool );
    public static  ( , string , string , string , string , bool );
    public static  ( , string , int , string , string , bool );
    public static void (long ,  ,  );
    public static void (long ,  ,  );
    internal static  ( , Char[] ,  );
}
internal class  :  {
    private string ;
    private int ;
    internal void (string , ushort );
    internal string ();
    internal int ();
    internal void (int );
    internal void ( );
}
internal class  :  {
}
internal class  : object {
    private Color[] ;
    internal (Color[] );
    public sealed virtual Color (int );
    internal static Color (int );
    private static Color (int );
}
internal class  : object {
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    internal static string ;
    private static ();
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private DateTime ;
    private DateTime ;
    private DateTime ;
    private DateTime ;
    private double ;
    private int ;
    private int ;
    private int ;
    private double ;
    private double ;
    public (DateTime , DateTime , DateTime , DateTime , double , double , int , int , int , double );
    protected virtual bool (double , double );
    protected virtual bool (double , double );
    public virtual double (double );
    public virtual double (double );
    internal  (double );
}
internal class  : object {
    internal static void ( , BuiltInDocumentPropertyCollection , CustomDocumentPropertyCollection );
}
internal interface  {
    public abstract virtual ICollection ( );
}
internal class  : object {
    internal List`1<> ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal string ;
    internal string ;
    internal Double[] ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal string ;
    internal string ;
    internal static  ( );
    private void ( );
    private void ( );
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual  ( ,  );
}
internal class  : object {
    internal static Byte[] (object );
    internal static object (Byte[] , int );
    internal static int (Byte[] , int , int );
    internal static Byte[] (Byte[] , int , int , Worksheet );
    internal static void (int , int , int , int , int , int , Byte[] , int , int , CopyOptions );
    internal static void (Worksheet , bool , int , int , int , int , int , int , Byte[] );
    internal static void (Worksheet , bool , int , int , int , int , int , int , int , int , int , int , Byte[]& );
    internal static void (Worksheet , bool , int , int , int , int , int , int , Byte[] );
    internal static bool (int , int , Byte[] , int , int , int , int , int , Cells , bool , Hashtable );
    internal static bool (Byte[] , int , int , WorksheetCollection , Hashtable , Hashtable );
    internal static void (Byte[] , int , int , Hashtable , WorksheetCollection );
    internal static void (Byte[] , int , int , Hashtable , WorksheetCollection );
    internal static void (Byte[] , int , int , Hashtable , Hashtable );
    internal static void (Byte[] , int , int , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int , int , int , int , int );
    internal static CellArea (CellArea , int , int , int , int , int , Boolean& , Boolean& );
    internal static CellArea (CellArea , int , int , int , int , int , Boolean& , Boolean& );
    internal static void (CellArea , int , Worksheet , bool , Byte[] , int , int );
    internal static void (CellArea , int , int , Worksheet , bool , Byte[] , int , int );
    internal static bool (Byte[] , int , int , int , int , CellArea , Boolean& );
    internal static bool (Byte[] , int , int );
    internal static Byte[] (Worksheet , bool , int , int , bool , int , bool , int , int , int , Byte[] );
    internal static bool (int , int , Int32& , int );
    internal static bool (int , int , Int32& , Int32& , int );
    internal static bool (int , int , Int32& , byte , Int32& , byte , int );
}
internal class  :  {
    internal ( , float , float , float , Double[] );
    [("True")]
protected virtual void (Double[] );
    protected virtual float (double , float );
    protected virtual void ( );
    [("True")]
internal virtual void ( );
    private  ( ,  ,  );
    private bool ( );
}
internal class  : object {
    private IList ;
    private  ;
    private  ;
    public void ( );
    public void ( ,  );
    public void ( );
    public void ( );
    public void ( );
    private  ( ,  , [] ,  );
    public  ();
    public  (string ,  , [] );
    public  (string ,  , [] ,  );
    public IEnumerable ();
}
internal class  : object {
    internal string ;
    internal string ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    private GraphicsPath (float , float , float , float , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (Stream );
    public (Stream ,  );
    public (Stream ,  , long , bool );
    public (Stream ,  , long );
    public (Stream ,  , Byte[] );
    internal static  (Stream );
    private void (long );
    private void ( , bool , bool , long );
    private void (bool );
    private void (byte );
    private void (Byte[] , int , int );
    public virtual void WriteByte(byte );
    public virtual void Write(Byte[] , int , int );
    internal virtual void (short );
    internal virtual void (int );
    internal virtual void (long );
    public void ( );
    internal void ( , Byte[] , bool );
    public void ( );
    public void ([] );
    public virtual void Flush();
    public void ();
    public virtual void Close();
}
internal abstract class  : object {
    public abstract virtual int ();
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual int (int , int );
    public abstract virtual int (int , int , int );
    public abstract virtual bool (int );
    public abstract virtual int (int , int );
    public abstract virtual int (int );
    public abstract virtual int (int );
    public abstract virtual int (int , bool );
    public abstract virtual  ();
    public abstract virtual  (int , int , bool );
    public abstract virtual int ();
    public abstract virtual void (int );
    public abstract virtual void (int , int );
    public abstract virtual int (int , int );
    public abstract virtual int (int , int );
    public abstract virtual void (int , int );
    public abstract virtual void (int );
    public abstract virtual bool (int , int );
    public virtual void ( );
    public bool (int , int , Int32[] );
    public sealed virtual  (int , int , bool );
    public virtual  (int , int , int , int , bool );
    public sealed virtual int (int , int );
    public sealed virtual int (int , int );
    public sealed virtual void (int , int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private Byte[] ;
    private bool ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    public ( ,  ,  ,  );
    public virtual void (bool ,  ,  ,  );
    private Byte[] (Byte[] , int , int , Byte[] );
    private Byte[] (Byte[] , int , int , Byte[] );
    private Byte[] ( , int );
    public virtual Byte[] (Byte[] , int , int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Font ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    internal (Workbook );
    internal (Workbook , string );
    internal int (Style , string );
    internal int (Style , string );
    internal int (Font , string );
    internal int (Font , string );
    private int (Font , string , bool );
    private int (Font , string , int , int );
    internal String[] (Font , string , int , TextAlignmentType );
    internal String[] (Font , string , int , int , int );
    private bool (char );
    internal int (Style );
    internal float (Font );
    internal int (double );
    internal double (int );
    public void ();
    public sealed virtual void Dispose();
}
internal class  :  {
    internal void (Trendline );
    internal void (ErrorBar );
    internal void (Series , ChartType );
}
internal class  : object {
    internal VisibilityType ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal void ( );
}
internal class  : object {
}
internal class  :  {
    internal (int , Comment );
}
internal class  :  {
    private  ;
    private  ;
    protected (bool ,  );
    protected (bool ,  ,  );
    public  ();
    public  ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal Hashtable ;
    internal ArrayList ;
    internal ArrayList ;
    internal ( );
    internal virtual void ();
    internal virtual void ( );
}
internal class  : object {
    private  ;
    private  ;
    private RectangleF ;
    internal ( ,  , RectangleF );
    internal void ();
    private GraphicsPath ();
    private GraphicsPath ();
    private GraphicsPath ();
    private GraphicsPath ();
    private GraphicsPath ();
    private GraphicsPath ();
    private GraphicsPath ();
    private GraphicsPath ();
    private GraphicsPath ();
    private RectangleF (RectangleF );
    private void ();
    private void ();
    private void ();
    private void ();
}
internal class  : object {
    internal static  ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal (int , int );
    private static ();
    internal long (UInt32 , bool );
    internal UInt32 (long , bool );
    internal void (BinaryWriter );
}
internal static class  : object {
    private static  ;
    private static  ;
    private static ();
    public static Stream (Stream , Byte[] , string );
}
internal class  : object {
    internal FillFormat ;
    internal LineFormat ;
    internal ThreeDFormat ;
    internal  ;
    internal string ;
    []
internal Workbook ;
    []
internal object ;
    internal string ;
    internal (Workbook , object );
    internal  ();
    internal Fill ();
    public FillFormat ();
    internal FillType ();
    internal void (FillType );
    public LineFormat ();
    internal FillType ();
    internal void (FillType );
    internal ThreeDFormat ();
    internal ThreeDFormat ();
    public ShadowEffect ();
    internal ReflectionEffect ();
    internal  ();
    internal void ( , CopyOptions );
    internal void ( , CopyOptions );
    public GlowEffect ();
    public void ();
    public bool ();
    public bool ();
    public void ();
    public double ();
    public void (double );
    public void ();
    public bool ();
    internal void ( , object );
    public virtual int GetHashCode();
    public virtual bool Equals(object );
}
internal class  :  {
    internal void (int , double );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual void ();
    public abstract virtual void ( );
    public abstract virtual void ( );
    public abstract virtual bool ();
    public abstract virtual Byte[] ();
    public abstract virtual void ();
    public abstract virtual void (Stream );
    public abstract virtual void ( );
    public abstract virtual void ();
    public abstract virtual void ( );
    public abstract virtual void ( );
    public abstract virtual void (Stream );
    public abstract virtual void (Stream );
    public abstract virtual Byte[] ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private Matrix ;
    private Point ;
    private Region ;
    private SmoothingMode ;
    private TextRenderingHint ;
    internal  ();
    internal void ( );
    internal Matrix ();
    internal void (Matrix );
    public Point ();
    public void (Point );
    public Region ();
    public void (Region );
    internal SmoothingMode ();
    internal void (SmoothingMode );
    internal TextRenderingHint ();
    internal void (TextRenderingHint );
}
internal class  :  {
    private  ;
    private ( );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal bool ();
}
internal class  :  {
    internal (WorkbookSettings );
}
internal class  : object {
    private  ;
    private  ;
    public ( , int ,  );
    public sealed virtual object ();
    public sealed virtual int (int );
    public sealed virtual  (Stream );
    public sealed virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Color[] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal Size  { get; }
    public (Font , Color );
    private void (Font , Color );
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal virtual  ();
    internal  ();
    internal virtual  ();
    internal virtual int ();
    internal virtual void (int );
    internal  ();
    internal virtual void (Color[] ,  , int , IList );
    internal virtual Size ();
    internal  ();
    internal void ( );
    private void ();
    private void ();
    internal Rectangle ();
    internal void (int , int , int , int );
    internal Rectangle ();
    internal bool (Rectangle );
    internal bool (RectangleF );
    internal virtual void (bool );
    internal float ();
    internal float ();
    private void (int );
    public virtual void ();
    internal bool ();
    internal bool ();
    private void ();
    private void ();
    private void (float , float , float , float , float );
    private void (float , float , float , float , float );
}
internal class  : object {
    private UInt32[] ;
    private long ;
    private Byte[] ;
    private int ;
    private UInt32[] ;
    private Byte[] ;
    public Byte[] (Byte[] );
    private void (Byte[] , int , int );
    private Byte[] ();
    private void ();
    private void (Byte[] , int );
    private void (Byte[] , int , int );
    internal void (long , Byte[] , int );
}
internal class  :  {
    []
private Cells ;
    private int ;
    private int ;
    []
private Style ;
    private bool ;
    private double ;
    public (Cells , int , int , Style , bool );
    public virtual double ();
    private void (int , int );
    protected virtual int (string );
    protected virtual bool ();
    protected virtual void ();
    protected virtual void ();
}
internal class  : object {
    private ArrayList ;
    internal ArrayList ();
    internal ArrayList ();
}
internal abstract class  :  {
}
internal class  : object {
    private Matrix ;
    private Matrix ;
    private  ;
    private  ;
    private Color ;
    private Color ;
    private float ;
    private float ;
    private float ;
    []
private  ;
    private float ;
    private int ;
    private float ;
    private int ;
    private int ;
    private float ;
    []
private  ;
    internal  ();
    internal Matrix ();
    internal void (Matrix );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal Color ();
    internal void (Color );
    internal Color ();
    internal void (Color );
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    internal  ();
    internal void ( );
    internal float ();
    internal void (float );
    internal int ();
    internal void (int );
    internal float ();
    internal void (float );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal float ();
    internal void (float );
    internal  ();
    internal void ( );
    internal Matrix ();
    internal void (Matrix );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public (string , int , int );
    public static  (object );
    public virtual string ();
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual  ();
}
internal class  : object {
    private string ;
    private Byte[] ;
    private string ;
    private string ;
    private Byte[] ;
    private string ;
    private int ;
    private int ;
    private Byte[] ;
    private string ;
    private int ;
    internal (string , Byte[] , string , Byte[] , string , int , int , Byte[] , string , int );
    internal string ();
    internal Byte[] ();
    internal string ();
    internal Byte[] ();
    internal string ();
    internal int ();
    internal int ();
    internal Byte[] ();
    internal string ();
    internal int ();
    internal Byte[] (Byte[] , string , bool );
    internal Byte[] (Byte[] , string );
    [("True")]
private Byte[] (string );
    [("True")]
private bool (Byte[] );
    private static string (string );
    internal static  (string , string , string , int , int , string , int );
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    []
private  ;
    []
private  ;
    private string ;
    private string ;
    []
private SlicerCollection ;
    private Slicer ;
    private int ;
    private Byte[] ;
    private int ;
    []
private  ;
    []
private  ;
    []
private Worksheet ;
    internal ( ,  );
    internal void ( ,  , string , string );
    private void ();
}
internal class  :  {
    protected  ;
    public ( );
    public ( ,  );
    protected virtual  ();
    protected virtual  ();
    protected virtual Int32[] ();
    public virtual  ();
    public virtual  ();
    protected virtual  (int );
}
[FlagsAttribute]
internal enum  : Enum {
    public int value__;
    public static  Start;
    public static  Line;
    public static  Bezier;
    public static  Mask;
    public static  DashMode;
    public static  Marker;
    public static  CloseSubpath;
    public static  Bezier3;
    public static  Invalid;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
protected RectangleF ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected Brush ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected PointF ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private static float ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public (float , float , float , float , float , float , Color );
    public (float , float , float , float , float , float , float , Color ,  ,  );
    public (float , float , float , float , float , float , float , Color ,  ,  , float ,  );
    public (RectangleF , float , float , float , Color ,  ,  , float ,  );
    public (RectangleF , float , float , float , Color ,  ,  );
    public (float , float , float , float , float , float , float , Color ,  ,  , float );
    public (Rectangle , float , float , float , Color ,  ,  , float );
    private static ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
    public sealed virtual object Clone();
    public  (float );
    public float ();
    public float ();
    public float ();
    public void (float );
    public float ();
    internal float ();
    internal float ();
    public string ();
    public void (string );
    public void ( );
    public bool (PointF );
    public virtual PointF ();
    public virtual PointF (float , Single& );
    public virtual PointF (float , int , Single& );
    public float ();
    internal Color ();
    internal  ();
    internal  ();
    internal  ();
    internal RectangleF ();
    internal void (RectangleF );
    internal float ();
    internal void (float );
    internal void ( );
    internal [] (float );
    private [] ();
    internal void (float , float , float , float , float );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( );
    internal RectangleF ();
    internal bool (PointF );
    internal bool (PointF );
    internal bool (PointF );
    internal bool (PointF );
    internal  ();
    internal bool (PointF );
    protected virtual void (Color ,  );
    protected void ();
    protected virtual Brush (Color , double );
    protected virtual Brush (Color );
    protected void ( ,  , Brush , float , float , PointF , PointF );
    protected float (float );
    protected float (float );
    protected PointF (float , float , float , float , float );
    private void (float , float , float , float , float );
    private void ();
    private void (bool , bool );
    private [] ();
    private [] ();
    private GraphicsPath (float , float , PointF , PointF );
    private GraphicsPath (float , float , PointF , PointF );
    private IList (float , float , PointF , PointF , ArrayList& );
    private ArrayList (float , float , PointF , PointF , float );
    private bool (PointF , float , float , PointF , PointF );
    private bool (PointF , float , float , float , float , float , float );
    private double (double );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public static  ( , bool );
    public static  (object );
    public virtual  ();
}
internal class  : object {
    private byte ;
    public ( );
    public sealed virtual  ();
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual bool ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    public (Stream , Stream );
    public virtual void Close();
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
}
internal class  :  {
    private int ;
    internal  ;
    internal int ;
    internal bool ;
    internal bool ;
    internal int ;
    internal  ;
    internal ( , int , bool , int , bool );
    public virtual byte ();
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual  ();
    public virtual  (Char[] ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal TextAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Cell ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Style ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Color ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    internal ( );
    internal (Cells ,  );
    internal Style (Cells );
    internal int ( );
    public sealed virtual void Dispose();
}
internal class  : object {
    internal  ;
    internal  ;
    private  ;
    private  ;
    public (Byte[] );
    public (Stream );
    public ( );
    public  ();
    public string ();
    public  ();
    public  ();
    public  ();
    public Byte[] ();
}
internal class  :  {
    private  ;
    public ( ,  , int , int );
    public virtual  ( );
    public sealed virtual  ( );
    public sealed virtual  ( , bool );
}
internal class  : object {
    public static CellsException (ExceptionType , string );
    public static CellsException (ExceptionType , string , Exception );
    internal static void ( , FontSettingCollection );
    internal static bool ( , TypeCode , object , bool );
}
internal interface  {
    public abstract virtual  ();
}
internal class  : object {
    private Byte[] ;
    public string ;
    public ushort ;
    public [] ;
    public [] ;
    protected (Stream );
    protected void ();
    protected Byte[] (UInt32 );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    private RectangleF (RectangleF );
}
internal class  :  {
    public virtual  ( , string );
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private String[] ;
    [DebuggerBrowsableAttribute("0")]
private IDataReader ;
    public String[] Columns { get; }
    public int Count { get; }
    public object Item { get; }
    public object Item { get; }
    internal (IDataReader , int );
    public sealed virtual String[] get_Columns();
    public sealed virtual int get_Count();
    public sealed virtual void BeforeFirst();
    public sealed virtual object get_Item(int );
    public sealed virtual object get_Item(string );
    public sealed virtual bool Next();
}
internal class  : object {
    private double ;
    private string ;
    private  ;
    internal (Cells , int );
    internal (Column , double ,  );
    internal double ();
    internal void (double );
    internal string ();
    internal void (string );
    internal  ();
    internal void ( );
    internal bool (Column , double ,  );
}
internal class  :  {
}
internal class  : object {
    private  ;
    private [][] ;
    private  ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private bool ;
    private [] ;
    private  ;
    public ( ,  );
    public ([][] ,  ,  , int , int , int , int , int , int , int , bool , bool );
    public sealed virtual  ( );
    public sealed virtual void ();
    public sealed virtual bool ();
    private bool ();
    public sealed virtual bool (int , int );
    public sealed virtual bool (int );
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual  ( ,  ,  );
    internal static  ( ,  , [][] , int ,  , int , int , int , int , int , int , bool , bool );
    private static [] (int , [] , int ,  );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual void ( );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void ();
    public sealed virtual void ( );
    public sealed virtual  (int , int );
    public sealed virtual  (int );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void (int , int ,  );
    public sealed virtual void (int ,  );
    private void ( );
}
internal class  :  {
    internal void (int );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal void (string , string );
    internal void ( );
    public  (int );
    public void ( );
}
internal class  :  {
    internal  ;
    internal int ;
    internal int ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    internal ( , CellArea ,  );
    internal ( , CellArea ,  );
    internal void ( );
    internal virtual void ();
    internal void ( ,  );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private WebExtensionTaskPaneCollection ;
    internal ( );
    internal virtual void ( );
    private void (WebExtensionTaskPane ,  );
}
internal class  :  {
    protected internal UInt64[] ;
    public (BigInteger );
    protected internal (UInt64[] );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private string ;
    public (string );
    public string ();
    public virtual Stream ();
    [("False")]
public virtual int ();
    [("False")]
public virtual bool ();
    public virtual string ToString();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  ,  ,  ,  );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private Int32[] ;
    private int ;
    private int ;
    private int ;
    private int ;
    public ( ,  ,  ,  , Int32[] , Int32[] , int , int , bool , int , bool );
    public ( ,  ,  ,  , Int32[] , Int32[] , int , int , bool , int , bool , Int32[] );
    private ( );
    private ( , int , int , Int32[] );
    protected virtual void ();
    protected void (Int32[] );
    protected virtual  (int , int );
    public virtual  ();
    public virtual  ( );
    public virtual  (int );
    public virtual void ();
    public virtual bool ();
    public virtual bool (int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    internal static Int32[] (Int32[] , Int32[] , int , int );
    internal static void (Int32[] , Int32[] , int , int , Int32[] );
}
internal class  :  {
    public (CountryCode , CountryCode );
    private ushort (RegionInfo , CultureInfo );
    private ushort (CultureInfo );
}
internal class  : object {
    internal int ;
    internal double ;
    internal double ;
    []
internal  ;
    []
private  ;
    internal ( );
    internal void ( );
}
internal class  : object {
    internal PointF ;
    internal PointF ;
    internal string ;
    private string ;
    internal PointF ;
    private string ;
    internal List`1<string> ;
    internal string ;
    internal float ;
    internal GraphicsPath ;
    internal RectangleF ;
    internal float ;
    internal int ;
    internal Matrix ;
    public (string , IList , string , string , PointF , PointF , float , float , int , string );
    public (string , float , string );
    public virtual string ();
    public virtual ArrayList ();
    public virtual string ();
    public virtual int ();
    public virtual Matrix ();
    public virtual void (Matrix );
    public virtual PointF ();
    public virtual void (PointF );
    public virtual string ();
    public virtual PointF ();
    public virtual PointF ();
    public virtual float ();
    public virtual float ();
    public string ();
    public void (string );
    public string ();
    public void (string );
}
internal class  : object {
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    private string ;
    private Char[] ;
    private  ;
    private  ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private string ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private int ;
    public (string , Char[] );
    public (string , Char[] ,  );
    public (string , Char[] ,  ,  ,  );
    private static ();
    public virtual int ();
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual void ( );
    public virtual BigInteger ();
    public virtual  (BigInteger );
    public virtual void ( , BigInteger );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
internal Cells ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public (Workbook ,  , CalculationOptions );
    public (Worksheet ,  , CalculationOptions );
    public ( );
    internal ( );
    internal (Worksheet ,  );
    public virtual void Dispose();
    public virtual  ();
    public virtual bool ();
    public virtual bool ();
    public virtual Workbook ();
    public virtual WorksheetCollection ();
    public virtual void ();
    public virtual void ( );
    public virtual void ( );
    public  ();
    public virtual void (Worksheet );
    public void (int );
    public void ();
    public void ( );
    public bool ();
    public bool ();
    internal  ();
    internal  ();
    internal  ();
    internal  (DateTime );
    internal double (DateTime );
    internal bool (double );
    internal DateTime (double );
    internal string ();
    internal bool ( );
    internal Worksheet (int );
    private void ();
    internal void ( );
    internal  (Byte[] , int , int );
    internal  ( );
    internal  ( );
    internal  ( ,  );
    internal void ( ,  );
    internal void ( ,  );
    private bool ( ,  );
    internal StringBuilder ( );
    internal virtual void (StringBuilder );
    internal void (Worksheet ,  );
    internal void (CellsException );
    internal void (Exception );
    internal void (string );
    internal Cell (long );
    internal Cell (long );
    internal long (string , string );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private int ;
    internal static  ;
    internal (int );
    private static ();
    internal void ( );
    internal bool ();
    internal  ( );
    internal bool ( );
    public  ();
}
internal abstract class  : object {
    internal abstract virtual  ();
}
internal class  : ValueType {
    internal static bool ( , Double& , Double& );
    internal static void ( , double , double , Double& , Double& );
    internal static void ( ,  );
    internal static void ( ,  , Rectangle , float , double );
    private static void ( ,  , Rectangle , float , double ,  );
    private static void ( ,  , Rectangle , float , double ,  );
    private static void ( ,  , Rectangle , float , double ,  );
    internal static void ( ,  , Rectangle , float , double );
    private static void ( ,  , Rectangle , float , double ,  );
    private static void ( ,  , Rectangle , float , double ,  );
    private static void ( ,  , Rectangle , float , double ,  );
    private static bool (int , int , ArrayList , Double& );
    internal static bool ( , double , Double& );
    internal static void ( , IList ,  , bool );
    private static void ( ,  , Double[]& , Double[]& );
    private static void ( ,  ,  , Double& , Double& );
    private static bool (Double[] );
    private static Double[] (Double[] , Double[] , bool , double , Double& );
    private static Double[] (Double[] , Double[] , int , bool , double , Double& );
    private static Double[] (Double[] , Double[] , Double& );
    private static Double[] (Double[] , Double[] , Double& );
    private static Double[] (Double[] , Double[] , bool , double , Double& );
    internal static void ( ,  );
    private static bool ( );
    private static void ( , RectangleF ,  );
    private static String[] ( , Double[] ,  );
    private static string (string );
}
internal class  : object {
    private  ;
    private int ;
    private  ;
    private  ;
    private byte ;
    internal ( );
    internal ( );
    internal ( ,  );
    private static  ( );
    private void ();
    public int ();
    public  ();
    public  ();
    public bool ();
    public void ( );
    public void (byte );
    private void (byte );
    private void ();
    public void (Byte[] );
    public void (Byte[] , int , int );
    public bool ();
    private void (int , Byte[] );
    private void ( );
    public bool ( ,  );
    public bool (string ,  );
    public bool ( ,  );
    public bool ( );
    public int ();
    public long ();
    public DateTime ();
    public DateTime ();
    public Byte[] ();
    public bool ();
    public  ();
    public  ();
    private  ([] );
    public Byte[] ();
    public Byte[] ();
    public void (Stream );
    private Byte[] ( );
    public static bool (int );
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private int ;
    internal (Cells , int ,  );
    public int (int );
    public int (int , int );
    public void (Int32[] );
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private List`1<> ;
    public sealed virtual void InitStream(StreamProviderOptions );
    public sealed virtual void CloseStream(StreamProviderOptions );
    public void (List`1<> );
    public List`1<> ();
    private Stream (string );
    internal void ();
}
internal class  :  {
    private static Regex ;
    private static Regex ;
    private static object ;
    []
internal Worksheet ;
    []
internal Workbook ;
    []
internal  ;
    internal int ;
    internal int ;
    private  ;
    private float ;
    private float ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    []
private Style ;
    private Double[] ;
    private  ;
    private ArrayList ;
    []
internal  ;
    private float ;
    []
internal  ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    []
private WorksheetCollection ;
    private ArrayList ;
    private Hashtable ;
    private float ;
    []
private Cells ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    private int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    private int ;
    private int ;
    internal Double[] ;
    private ArrayList ;
    []
internal  ;
    []
internal ImageOrPrintOptions ;
    []
internal  ;
    private  ;
    []
private  ;
    private int ;
    []
private  ;
    private  ;
    private  ;
    private RectangleF ;
    private float ;
    private int ;
    internal bool ;
    private  ;
    private  ;
    internal (Worksheet ,  , int , int , ArrayList , ImageOrPrintOptions ,  ,  );
    internal (Worksheet ,  , int , int , ArrayList , ImageOrPrintOptions ,  , int ,  );
    private static ();
    internal static  (double , double , ImageOrPrintOptions ,  );
    internal int ();
    private void ( , Workbook );
    private void ( , bool );
    private void ( , RectangleF );
    private Hashtable ( );
    private void ( , RectangleF );
    private  (double , double , Single[] );
    public virtual void ( );
    private void ();
    private void ( , float , float );
    private static bool (int , int , int );
    private void ( );
    private  ( , bool ,  , RectangleF );
    private bool (int , int , int , int , int );
    private bool (int , int , int , int , int ,  );
    private bool ( );
    public static void (ArrayList , Workbook );
    private void ( );
    private  (Row , int , int , int , int , int , int , int );
    private  ( );
    private long (int , int );
    private string (double , Font );
    private ArrayList (int , int , int , int , int );
    private float (string , float , FontStyle );
    private float (string , float , FontStyle );
    private double (double , Font );
    private double (double , Font );
    internal void ( ,  );
    internal bool ( ,  , Single& , Int32& , ArrayList );
    private void (ArrayList ,  , float );
    private void ( ,  );
    private void ( );
    private void ( );
    private void ( );
    private bool ( );
    private void ( );
    private void ( );
    private void ( , bool );
    private void ( , bool );
    private MemoryStream ( );
    private  (AutoShapeType , RectangleF );
    private  ( , Stream , RectangleF );
    private  ( , Stream , RectangleF );
    private  ( , Stream , RectangleF );
    private  ( , Stream , RectangleF , Double[] );
    private Stream (Shape , Stream , int , int );
    public static Stream (Shape , Stream );
    private Stream (Stream );
    private static Stream ( , Stream , float );
    public static bool (Shape , ImageType );
    private bool (ImageType );
    private static bool (Color , Color , int );
    private static bool (int , int , int );
    private Stream ( , Stream , double , double , double , double );
    private Stream ( , Stream , float );
    private Stream (Shape , Stream );
    private void (Stream , int );
    private void (LineFormat ,  );
    private Color (double , Color );
    private Matrix (Shape , RectangleF );
    private PointF (Shape , RectangleF );
    private bool (int );
    private RectangleF (double , RectangleF );
    private RectangleF (PointF[] );
    private void ( );
    private void ( );
    private void ( , bool );
    private bool (Cell );
    private static int (ArrayList ,  );
    private void ( );
    private void (Worksheet );
    public  ();
    public  ();
    public  ();
    public  (bool );
    private  (RectangleF& );
    public  (RectangleF& );
    public  (RectangleF& );
    public  ();
    public  (RectangleF );
    public  (RectangleF );
    public virtual void (TextWriter );
    private string ( , Font );
    private void (Cell , int , int , int , Cell );
    private void ( ,  , RectangleF );
    private void ( ,  , RectangleF );
    private void ( );
    private static string (FileFormatType );
    private double (int );
    private int (int );
    private double (int , int );
    private double (int );
    private double (int , int );
    private int (int );
    private int (int , int );
    private  (RectangleF );
    private  (RectangleF );
    private  (RectangleF& );
    private  (RectangleF );
    private Single[] ();
    private static bool ( );
    private bool (int );
    private bool (int , BorderType );
    private Double[] ( );
}
internal class  : object {
    internal bool ;
    internal  ;
    internal string ;
    internal (string ,  );
    internal static bool (string );
}
internal class  :  {
    internal  ;
    internal ( );
}
internal class  :  {
    internal (int , string );
}
internal class  : object {
    private  ;
    private  ;
    public ( ,  );
    public ( );
    public  ();
    public  ();
    public  ();
}
internal class  : object {
    internal static string ();
    internal static string ();
    internal static string ();
    internal static string ();
    internal static string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : IOException {
    public (string );
    public (string , Exception );
}
internal class  : object {
    internal static  ;
}
internal class  : object {
    internal  ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal void ( );
    internal bool ( );
    internal bool ( );
}
internal class  :  {
    []
private Workbook ;
    []
private RevisionCustomView ;
    internal (RevisionCustomView , Workbook );
    private void ();
}
internal class  : object {
    private  ;
    private Byte[] ;
    private bool ;
    private  ;
    private  ;
    public (Byte[] );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public virtual void ();
}
internal class  : object {
    internal static void (Bitmap , Byte[]& , Int32& );
    internal static Bitmap (Bitmap , Byte[] );
}
internal class  : object {
    private  ;
    private int ;
    private int ;
    internal ( , int , int );
    internal PointF ( );
    internal static double (double , double );
    internal void (string );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal int ;
    internal ushort ;
    []
internal Chart ;
    internal (Chart , int , bool );
    internal (Chart , int , bool , int );
    internal void (int );
    internal void ( );
    internal bool ( );
    internal bool ( , Font );
    internal Font ();
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    private int ;
    public ( );
    public ( , int );
    public sealed virtual void ( );
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
}
internal class  :  {
    internal ( , object );
    public  ();
}
internal static class  : object {
    internal static Int32[] ;
    private static ();
}
internal class  :  {
    internal double ;
    internal virtual  ();
    internal virtual  ();
    internal virtual object ();
}
internal class  : object {
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal Hashtable ;
    internal Hashtable ;
    []
private  ;
    internal static  ( );
    internal void ();
    internal void ();
    internal void (Style , int );
    internal void (Style , string , int );
    internal object (int );
    private short (Style );
    private short (Style );
}
internal class  :  {
    public virtual Byte[] ( ,  , Byte[] );
    public virtual bool ( , Byte[] ,  , Byte[] );
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual bool ( );
    protected virtual  ( , bool , bool ,  );
    protected virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    private Bitmap ;
    private PixelFormat ;
    private bool ;
    private bool ;
    [("True")]
internal int  { get; }
    internal (Bitmap , bool );
    private void ();
    private void ();
    private void ();
    private void ();
    internal virtual Image ();
    internal virtual int ();
    internal virtual int ();
    internal virtual int ();
    internal virtual  ();
    internal virtual bool ();
    internal virtual bool ();
    internal bool ();
    internal bool ();
    internal int ();
    internal virtual void ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public List`1<> ;
}
internal class  : object {
    private MemoryStream ;
}
internal class  : object {
    protected  ;
    protected Byte[] ;
    public ( , Byte[] );
    public virtual  ();
    public virtual Byte[] ();
    public virtual void (Stream );
    public static  ( , Stream );
}
internal class  : object {
    []
private  ;
    private  ;
    private Stack ;
    private  ;
    private Hashtable ;
    private  ;
    private RectangleF ;
    private PointF ;
    internal ( );
    internal void ();
    internal void ();
    internal void (PointF );
    internal void (SizeF );
    internal  ();
    internal  ();
    internal void ( );
    internal RectangleF ();
    internal void (RectangleF );
    internal PointF ();
    internal void (PointF );
    internal  ();
    internal Hashtable ();
    internal  ();
    internal void ( );
    private void (Color );
    private void (Color );
    private void (string );
    private void ();
    private void ();
    private void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  ,  ,  );
    public ( ,  ,  ,  ,  ,  );
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private CellArea[] ;
    private  ;
    private  ;
    private bool ;
    internal ( , Worksheet , CellArea , bool , CellArea[] );
    internal void (bool );
    internal void (FormatConditionCollection );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    private static void (FormatConditionCollection ,  );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<Style> {
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
public Style  { get; public set; }
    [DebuggerBrowsableAttribute("0")]
internal Style  { get; }
    internal (WorksheetCollection );
    public Style (int );
    public void (int , Style );
    internal int (Style );
    private bool (Style , Style );
    private bool (Font , Font );
    internal int (Style );
    internal Style (string );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private IDictionary ;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public (IEnumerable );
    public virtual void (object );
    public virtual void (IEnumerable );
    public virtual void ();
    public virtual bool (object );
    public virtual void CopyTo(Array , int );
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool get_IsSynchronized();
    public virtual void (object );
    public virtual void (IEnumerable );
    public virtual object get_SyncRoot();
}
internal class  : object {
    private ushort ;
    private  ;
    private object ;
    internal (ushort ,  , object );
    internal bool ();
    internal ushort ();
    internal void (ushort );
    internal  ();
    internal void ( );
    internal object ();
    internal void (object );
}
internal class  : object {
    internal int ;
    internal int ;
    internal double ;
    internal double ;
    internal bool ;
    internal bool ;
    internal string ;
    internal ArrayList ;
    internal ArrayList ;
    internal int ;
}
internal class  :  {
    private Byte[] ;
    public ( );
    public (int );
    public Byte[] ();
    public virtual void ( );
}
internal class  : object {
    private  ;
    private  ;
    private Byte[] ;
    private  ;
    public (Cells , Byte[] );
    public sealed virtual bool ( , int );
}
internal class  : object {
    []
private WorksheetCollection ;
    internal (WorksheetCollection );
    internal void ( );
    private void ( );
}
internal class  :  {
    protected virtual  ( , BigInteger );
}
internal class  :  {
    private PointF ;
    private StringBuilder ;
    private bool ;
    private Matrix ;
    private bool ;
    private  ;
    internal ( ,  );
    internal ( ,  , bool );
    [("True")]
internal string ( , bool );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    private void (PointF );
    private void (PointF );
    private void (PointF[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    public (string );
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private int ;
    public ( );
    private void ( );
    public virtual string ();
    public virtual int ();
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    private void (int , Byte[] , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    private int (int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    internal virtual void ();
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private int ;
    private double ;
    public virtual void (int , int );
    public virtual  ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
}
internal class  :  {
    internal  ;
    internal int ;
    internal ( );
    internal void (Byte[] , int , int );
    internal void ();
    internal void (ShapeCollection );
    internal int (ShapeCollection , Shape );
    internal void (int , Shape );
    internal void (Shape , int , ushort , int , int );
    internal void (Shape , int , int , byte );
    internal void (Shape , int , ArrayList );
    internal int (Shape , Byte[] , int );
    internal int (Shape , Byte[] , int );
    internal int ( , Byte[] , int ,  );
    internal void ( );
}
internal class  : object {
    internal static string (byte , bool );
    private static string (string , string , byte , bool , int , string , string , int , bool );
    internal static int (WorksheetCollection , Byte[] , int , int );
    internal static bool (Byte[] , int , WorksheetCollection , int , int );
    internal static string (WorksheetCollection , Cell , Byte[] , int , int , int , int , bool , Hashtable , Int32& );
    internal static Int32[] (WorksheetCollection , Byte[] , int , int , int , bool );
    internal static Byte[] (WorksheetCollection , string ,  );
    internal static ListObject (WorksheetCollection , string );
    private static int (string );
    private static int (Char[] , int );
    private static int (Char[] , int );
    internal static int (string , char );
    private static void (StringBuilder , string , int );
    private static string (string );
    internal static Byte[] (Byte[] , WorksheetCollection , int , int , int , string ,  , Boolean& );
}
internal class  :  {
    private char ;
    internal ( , string , string , char );
    internal ( , string , string , string );
    internal virtual  ( , DateTime , double , bool ,  );
    protected virtual void ( , DateTime , double , StringBuilder );
}
internal class  : object {
    private static string ;
    private static ();
    internal static void ( , EquationNodeParagraph );
    private static void ( , EquationNodeParagraph );
    private static void ( , EquationNodeParagraph );
    private static void ( , EquationNode );
    private static void ( , EquationNode );
    private static void ( , EquationComponentNode , string );
    private static void ( , EquationNode );
    private static void ( , EquationNode , string );
    private static void ( , EquationNode );
    private static void ( , EquationComponentNode );
    private static void ( , int );
    private static void ( , FractionEquationNode );
    private static void ( , FractionEquationNode );
    private static void ( , FractionEquationNode );
    private static void ( , EquationNode );
    private static void ( , DelimiterEquationNode );
    private static void ( , DelimiterEquationNode );
    private static void ( , NaryEquationNode );
    private static void ( , NaryEquationNode );
    private static void ( , RadicalEquationNode );
    private static void ( , RadicalEquationNode );
    private static void ( , EquationNode );
    private static void ( , EquationNode );
    private static void ( , SubSupEquationNode );
    private static void ( , SubSupEquationNode );
    private static void ( , AccentEquationNode );
    private static void ( , AccentEquationNode );
    private static void ( , BarEquationNode );
    private static void ( , BarEquationNode );
    private static void ( , BorderBoxEquationNode );
    private static void ( , BorderBoxEquationNode );
    private static void ( , BoxEquationNode );
    private static void ( , BoxEquationNode );
    private static void ( , GroupCharacterEquationNode );
    private static void ( , GroupCharacterEquationNode );
    private static void ( , MatrixEquationNode );
    private static void ( , MatrixEquationNode );
    private static void ( , LimLowUppEquationNode );
    private static void ( , LimLowUppEquationNode );
    private static void ( , ArrayEquationNode );
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    private static void (UInt32[] );
    private static void (UInt32[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Graphics ;
    internal (Graphics );
    public sealed virtual float ();
    public sealed virtual float ();
    public sealed virtual GraphicsUnit ();
    public sealed virtual void (GraphicsUnit );
    public sealed virtual SmoothingMode ();
    public sealed virtual void (SmoothingMode );
    public sealed virtual TextRenderingHint ();
    public sealed virtual void (TextRenderingHint );
    public sealed virtual Region ();
    public sealed virtual void (Region );
    public sealed virtual Matrix ();
    public sealed virtual void (Matrix );
    public sealed virtual float ();
    public sealed virtual void (float );
    public sealed virtual void (Image , float , float , float , float );
    public sealed virtual void (Pen , PointF , PointF );
    public sealed virtual void (Pen , GraphicsPath );
    public sealed virtual void (string , Font , Brush , PointF , StringFormat );
    public sealed virtual void (Brush , GraphicsPath );
    public sealed virtual IntPtr ();
    public sealed virtual void (Matrix );
    public sealed virtual void (IntPtr );
    public sealed virtual void (GraphicsState );
    public sealed virtual GraphicsState ();
    public sealed virtual void (float , float );
    public sealed virtual void (RectangleF , CombineMode );
    public sealed virtual void (GraphicsPath , CombineMode );
    public sealed virtual void (float , float );
    public sealed virtual void Dispose();
    public sealed virtual void (Color );
    public sealed virtual void (Brush , Rectangle );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    [ObsoleteAttribute("Use version taking a DerObjectIdentifier")]
public (string );
    public ( ,  );
    internal ( );
    public static  ( , bool );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal abstract class  :  {
    []
protected Worksheet ;
    protected  ;
    []
protected  ;
    protected  ;
    protected int ;
    protected ( , Worksheet );
    protected ( ,  ,  , Worksheet );
    protected ( , int );
    public abstract virtual  (int , int );
    public int ();
    public void (int );
    public  ();
    public virtual  ();
    public virtual bool ();
    public virtual void (bool );
    protected  ();
    protected  ( );
    protected  ( ,  ,  );
    public virtual bool ();
}
internal class  :  {
    private [] ;
    internal virtual void ( );
    internal void (FilterColumn );
    private int (FilterColumn );
}
internal class  : object {
    private static  ;
    private static ();
    internal static void ( ,  );
    internal static string ( );
    private static string ( );
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal static  ( );
}
internal class  : object {
    []
private  ;
    []
private  ;
    private  ;
    internal ( ,  );
    internal  ( , Hashtable , bool );
    internal static PointF[] (Single[] , int );
    internal  (Single[] );
    private PointF (PointF , PointF );
    internal ArrayList ( , & ,  , bool , float , float );
    internal  ( , bool );
    internal  ( );
    internal  ( , bool );
    internal Single[] ( , bool , bool );
    internal  ( );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    private bool ;
    internal ( ,  );
    internal ( ,  , bool );
    internal ( ,  ,  ,  );
    internal void ( );
}
[]
internal interface  {
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int (int );
    public abstract virtual  (int );
    public abstract virtual  (int );
    public abstract virtual bool ( );
    public abstract virtual bool (int , int ,  );
    public abstract virtual  (int , int );
    public abstract virtual  (int , int ,  );
    public abstract virtual object (int , int ,  );
    public abstract virtual void (int , int , StringBuilder ,  );
}
internal class  : object {
    private static float ;
    internal static Regex ;
    private static Hashtable ;
    private static ();
    internal static int (Workbook );
    internal static int (Workbook );
    internal static HatchStyle (BackgroundType );
    internal static bool ( ,  , int );
    internal static int (Font );
    private static string (string );
    private static string (ImageFormat );
    internal static bool (Style , Style );
    internal static List`1<CellArea> (Worksheet );
    internal static int ( , int , double , double , int , bool );
    internal static int (string , Font , double , int );
    internal static double (string , Font , double , int );
    internal static int (string , Font , double );
    internal static SizeF (string , Font , double );
    internal static float (string , Font , double );
    public static SizeF (string , Font , float );
    private static Color (string , Color );
    internal static Color (double , string , Color );
    internal static Color (Style , Font , Cell );
    internal static Color (Style );
    internal static Int32[] (Worksheet );
    internal static float (int , Font , double );
    internal static float (int , Font , double );
    internal static float (bool , Font , double );
    internal static SizeF (int , Font );
    internal static bool (int , int , ArrayList , & );
    internal static double (Cells , int );
    internal static int (Cells , int );
    internal static double (Cells , int , int );
    internal static int (Cells , int , int );
    internal static double (Cells , int );
    internal static double (Cells , int , int );
    internal static int (Cells , int );
    internal static int (Cells , int , int );
    internal static void (ArrayList , Workbook , bool ,  );
    internal static bool (TextCrossType );
    internal static bool ( , bool );
    internal static MemoryStream ( , Shape , int ,  , Hashtable );
    internal static MemoryStream (MemoryStream , ImageType , Shape ,  );
}
[DefaultMemberAttribute("")]
internal abstract class  : object {
    private IDictionary ;
    public   { get; }
    public   { get; }
    protected internal (IDictionary );
    public  ( );
    public  (string );
    public IEnumerator ();
    public  ( );
    public  (string );
    public IEnumerable ();
}
internal class  : object {
    public UInt32 ;
    public UInt32 ;
    public List`1<> ;
}
internal class  : object {
    protected Color ;
    protected Color ;
    protected int ;
    protected Brush ;
    protected bool ;
    public void (Color , Color , int );
    public void (Brush , Color , int );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat , Single& , Single& );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat , Single& , Single& );
}
internal class  :  {
    private Byte[] ;
    internal ( );
    public (Byte[] );
    public Byte[] ();
    public virtual void ( );
}
internal class  :  {
    private int ;
    []
private RowCollection ;
    private  ;
    private short ;
    private bool ;
    private  ;
    private bool ;
    private int ;
    private bool ;
    []
private  ;
    []
private  ;
    []
private Row ;
    private Cell ;
    internal (Cells , int , int , int , bool , int , bool );
    public virtual bool ();
    public virtual object ();
    public virtual void ();
    private void ();
    public virtual  ();
    public virtual RowCollection ();
    public virtual int ();
    public virtual  ();
    public virtual int ();
    public virtual Row ();
    public virtual int ();
    public virtual  ();
    public virtual Cell ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public int ( );
    public int (int ,  );
    public  (int );
}
internal class  :  {
}
internal class  : object {
    private int ;
    private int ;
    private Style ;
    public (WorksheetCollection );
    public Font ();
    public void (Style );
    public int ();
    public void (int );
    public int ();
    public void (int );
}
internal class  :  {
    internal void ();
    internal Int32[] (DataLabels );
    internal void (DataLabels );
    private void (DataLabels );
    internal void (Font );
    internal void (DataLabels );
    internal Int32[] (Title );
    internal void (Axis , DisplayUnitLabel );
    internal Int32[] (ChartFrame );
    internal Int32[] (ChartFrame );
    internal void (BackgroundMode );
}
internal class  : object {
    private  ;
    private void ( );
    internal void (Stream ,  );
    internal void (Stream ,  );
    private Byte[] (Stream , Byte[] ,  );
    private Byte[] (Stream , Byte[] );
    private Byte[] (Stream , Byte[] ,  );
    private Byte[] (Stream , Byte[] ,  );
    internal void (Stream ,  );
    internal void (Stream ,  );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (PivotItem );
    internal (bool );
    internal (byte );
}
internal class  :  {
    private  ;
    public ( ,  );
    [ObsoleteAttribute("Use version with explicit 'algorithm' parameter")]
public ( ,  );
    public (string ,  ,  );
    public (string ,  ,  );
    public  ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ( );
    internal virtual void ();
}
internal interface  {
    public abstract virtual void (PointF );
    public abstract virtual void ( ,  , CustomLineCap , CustomLineCap , float , float , float , float , float , float );
    public abstract virtual void ( ,  , CustomLineCap , CustomLineCap , PointF[] , int , int , float );
    public abstract virtual void ( ,  , CustomLineCap , CustomLineCap , float , float , float , float );
    public abstract virtual void ( ,  , CustomLineCap , CustomLineCap , GraphicsPath );
}
internal class  : object {
    private string ;
    private bool ;
    private bool ;
    public string ProductName { get; public set; }
    public bool IsFreeType { get; public set; }
    public bool IsPluginProduct { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProductName();
    [CompilerGeneratedAttribute]
public void set_ProductName(string );
    [CompilerGeneratedAttribute]
public bool get_IsFreeType();
    [CompilerGeneratedAttribute]
public void set_IsFreeType(bool );
    [CompilerGeneratedAttribute]
public bool get_IsPluginProduct();
    [CompilerGeneratedAttribute]
public void set_IsPluginProduct(bool );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (PivotTable );
}
internal class  : object {
    private  ;
    private Byte[] ;
    private Byte[] ;
    private BigInteger ;
    public ( );
    public virtual bool ();
    public virtual void (BigInteger ,  );
    public sealed virtual void (BigInteger , BigInteger , Byte[] );
    public virtual BigInteger ();
    private BigInteger (Byte[] );
}
internal class  : object {
    private static float ;
    private static float ;
    private static object ;
    private static ();
    internal static float ();
    internal static float ();
    internal static bool (float );
    private static float ();
}
internal class  : object {
    internal  ;
    internal long ;
    internal long ;
    internal long ;
    internal string ;
    internal bool ;
    private static String[] ;
    private static  ;
    private static Int32[] ;
    internal (string , string , IDictionary , ArrayList );
    internal (string ,  , long , long , long );
    internal (string ,  , long , long , long , bool );
    private static ();
    internal static void (string , IDictionary , ArrayList , & , Int32& , Int64& , Int64& , Int64& );
    private static long (string , IDictionary , ArrayList , Int32& );
    public string ();
    internal string ([] , [] );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public ( ,  ,  ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal static bool (ArrayList );
    internal static bool ( ,  );
    internal static void (ArrayList , string , ArrayList , bool );
    internal static void (ArrayList , string , ArrayList , bool , bool );
    internal static string (ArrayList );
    internal static String[] (string );
    internal static ArrayList (ArrayList , string , bool , bool , Int32& );
    internal static ArrayList (string );
}
internal class  : object {
    internal  ;
    internal  ;
    internal BackgroundType ;
    internal  ;
}
internal class  : object {
    protected int ;
    protected int ;
    protected long ;
    protected long ;
    protected long ;
    protected long ;
    protected long ;
    protected long ;
    protected long ;
    protected int ;
    protected int ;
    public (int , int );
    public virtual string ();
    public virtual int ();
    public virtual void ( );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual long ();
    public virtual int (Byte[] , int );
    public virtual void ();
    protected virtual void ();
    protected virtual void (int );
    protected static long (long , int );
}
internal class  : object {
    internal static void ( );
    internal static void ( );
    private static void ( , bool , bool );
    private static bool ( , Rectangle );
    private static bool ( );
    internal static string ( );
    private static void ( );
    private static void ( ,  ,  );
    private static bool ( , bool , bool );
    private static void ( ,  );
    private static bool ( );
    internal static void ( );
    internal static void ( );
    private static void ( );
    internal static bool ( );
    private static void ( , bool );
    private static void ( , bool );
    private static void ( , Rectangle& , bool , Size );
    private static void ( , Rectangle , bool );
    private static void ( , bool );
    internal static float ( , int , int , bool );
    internal static float ( , float , float , bool );
    internal static float ( , int , int , bool ,  );
    internal static float ( , float , float , bool ,  );
    private static void ( ,  ,  ,  );
    private static void ( ,  ,  , Size , Size , Rectangle& , bool );
    private static void ( ,  ,  , Size , Rectangle& , bool );
    private static void ( ,  ,  , Size , int , Rectangle& , bool );
    internal static void ( , Rectangle& , bool , Size , int );
    private static void ( ,  ,  ,  , Rectangle& );
    private static void ( ,  );
    private static void ( , bool , bool );
    internal static void ( , bool );
    private static void ( );
    private static void ( );
    internal static void ( );
    internal static void ( );
    private static void ( ,  , int );
    internal static void ( ,  );
    internal static int (IList );
    internal static bool (IList , Double& , Double& ,  );
    private static ArrayList (IList );
    private static bool (ArrayList , Double& , Double& ,  );
    internal static int (ArrayList ,  );
    private static bool (IList , Double& , Double& ,  );
    private static bool ( , IList , IList );
    private static  ( );
    private static  ( );
    internal static bool (IList , IList , Double& , Double& ,  );
    internal static void (IList , Double& , Double& ,  );
    private static void ( ,  );
    private static void ( );
    private static bool (IList );
    private static bool (IList );
    internal static void ( ,  , double , double , bool , ArrayList ,  , Rectangle , bool ,  );
    private static float (int , int , bool , bool );
    private static void (Double& , Double& , Double& , Double& , Double& , Int32& ,  , bool , double , double , bool , bool , bool );
    private static double (double , double );
    private static bool ( );
    private static void ( , int , double , double , double , ArrayList , double , double , bool , bool , bool );
    internal static int ( ,  , bool ,  , Rectangle );
    private static void (double , Double& , Double& );
    private static void (double , Double& , Double& );
    private static void (Double& );
    private static void (Double& );
    internal static bool ( );
    private static bool ( );
    private static bool ( );
    private static bool ( );
    private static bool ( );
    internal static void ( , double , double , Double& , int , double , double , bool , bool , bool );
    internal static void ( , double , double ,  , float , bool ,  , bool , bool , bool );
    private static void (Double& ,  ,  , float , int , double , double , double , double , bool , bool , bool );
    private static float ( ,  , float );
    private static void ( , int , double , double , double , ArrayList , double , double , bool , bool , bool );
    internal static void ( ,  , ArrayList , Rectangle ,  ,  , bool );
    private static void ( );
    internal static bool ( );
    private static bool ( , string , object );
    private static bool ( );
    private static bool ( , ArrayList ,  );
    private static bool ( );
    private static void ( ,  , Rectangle ,  ,  , bool );
    private static  (IList , bool );
    [("True")]
internal static bool (object , bool , Int32& );
    private static void ( );
    private static void ( ,  , Rectangle ,  , bool , bool );
    internal static ArrayList (IList , bool );
    internal static void ( ,  , double , double , ArrayList ,  , Rectangle , bool ,  );
    private static void (Double& , Double& , Double& , Double& , Double& , Int32& ,  , bool );
    private static void ( , int , double , double , double , ArrayList , double , double , bool , bool , bool );
    private static int (double );
    private static int ( ,  , bool ,  , Rectangle );
    private static double (double );
    private static double (double );
    private static bool ( );
    private static void ( ,  );
    private static void ( );
    internal static ArrayList[] (List`1<> );
    internal static ArrayList (List`1<> );
    private static int (List`1<> );
    private static void (List`1<> , int , int , ArrayList );
}
internal class  : object {
}
internal class  :  {
    internal string ;
    internal virtual  ();
    internal virtual  ();
    internal virtual object ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<ThreadedComment> ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    internal ( , Worksheet );
    internal ( , Worksheet , int , int );
    public sealed virtual void Dispose();
    internal void (QueryTableCollection );
    internal void (bool );
    internal void ();
    internal void ();
    [("True")]
private void ();
    private void ();
    private void (Byte[] ,  , bool );
    private void (bool );
    private void ();
    private void ();
    private string ( , bool );
    private void ();
    internal void ();
    private void ();
    private void ();
    private void ();
    private void ();
    internal bool ();
    private void ();
    internal  (string , string );
    private string (string , string , string );
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual Byte[] ();
    public abstract virtual void ();
    public abstract virtual bool ();
}
internal abstract class  :  {
    internal ( );
    internal abstract virtual string ();
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    public ( );
    public static  (object );
    public  ();
    public virtual  ();
}
internal class  : object {
    public string ;
    public string ;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    internal ( );
    internal virtual void ( );
    private void (Stream );
    private void (Stream );
    private void (Comment , Stream );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private  modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private  modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private long ;
    internal ( ,  ,  , byte );
    internal bool ();
    internal virtual void (int );
    internal virtual int ();
    internal virtual  ();
    internal virtual void ( );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual void ();
    public virtual int ();
    public virtual int ();
    public virtual int (Byte[] , int , int , int );
    public virtual void (Byte[] , int , int );
    public virtual void ();
    internal virtual void ();
    internal virtual void (byte );
    internal virtual void (byte , string );
    private void ();
    private void (byte , byte , string , Exception );
    private int (Byte[] , int , int , int );
    private void (byte , Byte[] , int , int );
    private static long (int , long );
}
internal class  :  {
    private  ;
    private  ;
    internal ( ,  );
    protected virtual void ( );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private SizeF (SizeF );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (int );
    private void ();
    private void ();
    private void ();
    private string (Int32[] );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private PointF[] (PointF[] );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private static bool ( );
    private static bool ( );
    private void ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
public static  ;
    public (double , double , double , double , double , double , double , double , double , double , double , double , double , double , double , double );
    private static ();
    public static  (double , double , double );
    public static  (double );
    public static  (double );
    public static  (double );
    public  ();
    public double ();
    public  (int );
    public  (int );
    public static  op_Multiply( ,  );
    public  ();
}
internal abstract class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanSeek();
    public sealed virtual bool get_CanWrite();
    public virtual void Close();
    public sealed virtual void Flush();
    public sealed virtual long get_Length();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long );
    public virtual int Read(Byte[] , int , int );
    public sealed virtual long Seek(long , SeekOrigin );
    public sealed virtual void SetLength(long );
    public sealed virtual void Write(Byte[] , int , int );
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
internal class  : object {
    []
private Workbook ;
    private  ;
    private  ;
    internal (WorksheetCollection );
    internal bool ();
    internal static int (bool , bool , bool );
    internal Byte[] ( , WorksheetCollection , int , int , int , int ,  ,  , bool );
    internal Byte[] ( , WorksheetCollection , int , int , int , int ,  ,  , bool );
    internal Byte[] (byte , int , int );
}
internal class  :  {
    private PivotTableFormat ;
    private Style ;
    private UInt32 ;
    private ushort ;
    internal (PivotTableFormat );
    private void ();
    private void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private IList ;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public (IList );
    public virtual bool Contains(object );
    public virtual void CopyTo(Array , int );
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    public virtual int IndexOf(object );
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    protected virtual object (int );
}
internal class  : object {
    internal static bool ;
    internal  ;
    internal int ;
    internal Byte[] ;
    internal string ;
    internal int ;
    internal (bool );
    internal bool (int );
    internal void (int , bool );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
    internal  ( , bool );
    internal void ( , bool );
    internal void ( );
    internal bool ();
    internal bool (WorksheetCollection );
    internal bool ( );
    internal static bool (WorksheetCollection , Byte[] );
    internal bool (bool );
    internal void (byte , bool );
    internal void ();
    internal void ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; public set; }
    public ( );
    internal  (int );
    internal byte ();
    internal void (byte );
    public  (int );
    public void (int ,  );
    public int ( );
    public ArrayList ();
    internal void (int , int , int , int , bool );
    internal string ();
    internal void (string );
}
internal class  : object {
    private static  ;
    private  ;
    private IList ;
    private IList ;
    public ( );
    private static ();
    public  ( , BigInteger );
    public  ();
}
internal interface  {
    public abstract virtual  ( );
    public abstract virtual  ( , bool );
}
internal class  : object {
    []
private WorksheetCollection ;
    private  ;
    []
private Hashtable ;
    private Hashtable ;
    internal ( , WorksheetCollection , Hashtable );
    private void ( , string );
    internal void ( , string );
    private void ( );
}
internal class  :  {
    protected virtual  ( , BigInteger );
}
internal class  : object {
    private static  ;
    internal static  ();
    internal static int (int );
    internal static int (short );
    internal static LoadFormat (string , Stream , Boolean& , Int32& );
    internal static int (Stream , BinaryReader , long );
    internal static int (Stream );
    private static int (string , Char[] , Int32[] );
    public static bool (string );
    public static bool (string , bool );
    public static bool (string );
    public static bool (string );
    public static bool (Char[] );
    internal static void (int );
    internal static void (int );
    internal static void (int , int );
    internal static void (int , int , int , int );
    internal static void (int , int );
    internal static void (int , int );
    internal static string (WorksheetCollection );
    internal static string (WorksheetCollection , string );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private string ;
    internal ( );
    internal void ( );
    private void ( );
    private void ( );
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private int ;
    public ( );
    public virtual string ();
    public virtual int ();
    private void ( );
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    private void (int , Byte[] , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    private int (int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    private int (int , int , int , int , int , int );
    internal virtual void ();
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private int ;
    private double ;
    private double ;
    public (bool , double );
    public virtual void (int , int );
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
    public virtual  ();
}
internal class  :  {
    internal (Name );
}
internal class  : object {
    internal  ;
    internal  ;
    []
internal  ;
    []
internal  ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ( );
    internal void ( , CopyOptions );
    internal WorksheetCollection ();
    internal  ();
    public string ();
    public string ();
}
internal class  :  {
    private int ;
    internal ( , string , string , int );
    protected virtual void ( , DateTime , double , StringBuilder );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( ,  );
    internal virtual void ( );
    private bool ();
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( ,  );
    [("True")]
private void ( , PivotAreaFilter );
    [("True")]
private void ( );
    private void ( ,  , string , string );
    private void ( ,  );
    [("True")]
private void ( ,  );
    private void ( ,  );
    [("True")]
private void ( ,  );
    [("True")]
private void ( ,  );
    private void ( );
    private void ( );
    [("True")]
private void ( , String[][] );
    [("True")]
private void ( , String[] );
    [("True")]
private void ( , [] );
    [("True")]
private void ( , Int32[] ,  );
    [("True")]
private void ( );
    [("True")]
private void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
public static IComparer ;
    private static ();
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    [ObsoleteAttribute("Use GetInstance() instead")]
public ( );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    public ( ,  , [] ,  ,  , int , int , int , int );
    private ( , [] , int , int , int , int );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool (int , int );
    private void ( , int );
    private void (int , int , int );
    private void (int , int , int );
    private void ();
    public virtual bool (int );
    public virtual void ();
    public virtual bool ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    private ArrayList ;
    internal static Byte[] (int , ushort , ushort );
    internal void (Byte[] );
    internal virtual void ( );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private string ;
    public void ();
    public void (BigInteger );
    public void ( );
    public void (DateTime );
    public void (DateTime );
    public void ( );
    public void ( );
    public void (string );
    public void (Boolean[] );
    public void (Boolean[] );
    private  (Boolean[] );
    public void (string , bool ,  );
    public void ( , bool ,  );
    public void (string , bool , Byte[] );
    public void ( , bool , Byte[] );
    public void (string , bool ,  );
    public void ( , bool ,  );
    public  ( );
    public  ( ,  );
    public  ( );
    private  ( ,  , Byte[] );
    public IEnumerable ();
}
internal class  : object {
}
internal class  : object {
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal Single[] ;
    public (float , float , float , float );
}
internal class  : object {
    private static  ;
    private  ;
    public ( );
    public (string );
    private static ();
    public sealed virtual  ();
    public sealed virtual  ();
}
internal class  : object {
    private  ;
    private int ;
    private int ;
    internal ( );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual bool ( );
    public sealed virtual bool (int , int ,  );
    public sealed virtual  (int , int );
    public sealed virtual  (int , int ,  );
    public sealed virtual object (int , int ,  );
    public sealed virtual void (int , int , StringBuilder ,  );
}
internal class  : object {
    []
private Shape ;
    internal (Shape );
    internal void (Stream , PdfSaveOptions , float , float , PageLayoutAlignmentType , PageLayoutAlignmentType );
    private  (IWarningCallback );
}
internal class  : object {
    private  ;
    private  ;
    private bool ;
    public  ();
    public  ( );
    public  ( );
    public  (bool );
}
internal class  : object {
    private string ;
    private String[] ;
    private  ;
    private string ;
    private string ;
    private string ;
    private  ;
    private static  ;
    private static Hashtable ;
    private static [] ;
    private static ();
    internal static void ( );
    internal int (Stream );
    private static bool (string );
    private bool (string , string );
    internal static  ();
    internal static  (string );
    internal static void ( , string );
    private String[] ();
    private  ();
    private Byte[] (Stream );
    private static string (string );
    private static void (string , string , int );
    private static Hashtable ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Image ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public sealed virtual Byte[] ();
    public sealed virtual void (Byte[] );
    public Size ();
    public sealed virtual int ();
    public sealed virtual void (int );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual double ();
    public sealed virtual void (double );
    public sealed virtual double ();
    public sealed virtual void (double );
    private double (double , double , double );
    public sealed virtual double ();
    public sealed virtual void (double );
    public bool ( );
    internal Brush (GraphicsPath , float );
    public double ();
    public void (double );
    public bool ();
    public void (bool );
    internal void ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected Byte[] ;
    [DebuggerBrowsableAttribute("0")]
protected Byte[] ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream );
    public (Stream , bool );
    public (Stream ,  );
    public (Stream , int );
    public (Stream , int , bool );
    private static  (bool );
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanSeek();
    public sealed virtual bool get_CanWrite();
    public virtual void Close();
    private void ();
    public virtual void ();
    public virtual void ();
    public virtual void Flush();
    public virtual int ();
    public virtual void (int );
    public sealed virtual long get_Length();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long );
    public sealed virtual int Read(Byte[] , int , int );
    public sealed virtual long Seek(long , SeekOrigin );
    public sealed virtual void SetLength(long );
    public virtual long ();
    public virtual long ();
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
}
internal class  : object {
    private  ;
    internal ( );
    public sealed virtual bool ( , int );
}
internal class  : object {
    internal string ;
    internal Font ;
}
internal class  :  {
    public virtual string ();
    protected virtual Int32[] (Byte[] );
    protected virtual void (Byte[] , int , Byte[] , int );
    protected virtual void (Byte[] , int , Byte[] , int );
}
internal class  : object {
    internal static TextDirectionType (string );
    internal static TextAlignmentType (string );
}
internal class  :  {
    internal void ( );
}
internal class  : object {
    private PivotTable ;
    internal (PivotTable );
    private void (ArrayList ,  );
    internal void ( );
    internal void ( );
    private void ( , PivotItemCollection );
    internal void ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal int ( );
    public  (int );
}
internal class  :  {
    internal void ( );
}
internal class  :  {
    public static int ;
    private Byte[] ;
    public (Byte[] , int );
    public (Stream );
    private static ();
    public void (Byte[] , int );
    public Byte[] ();
}
[AttributeUsageAttribute("16")]
internal class  : Attribute {
    [DebuggerBrowsableAttribute("0")]
public string ;
    public (string );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    []
private  ;
    public ( );
    internal  ();
    internal  ();
    internal  ();
    internal void ( );
    internal void (Color , Color , HatchStyle );
    public Brush (RectangleF );
    public Brush (GraphicsPath ,  , bool , float );
}
internal class  : object {
    private string ;
    private string ;
    private Nullable`1<long> ;
    private string ;
    private string ;
    private Nullable`1<long> ;
    private string ;
    private string ;
    private Nullable`1<bool> ;
    private Nullable`1<DateTime> ;
    private Nullable`1<long> ;
    private Nullable`1<DateTime> ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private List`1<> ;
    private List`1<> ;
    private long ;
    private DateTime ;
    private DateTime ;
    private int ;
    private string ;
    private bool ;
    private string ;
    private long ;
    private string ;
    private string ;
    private bool ;
    private string ;
    public string RequestId { get; public set; }
    public string RequestTraceId { get; public set; }
    public Nullable`1<long> IdentityUserId { get; public set; }
    public string IdentityUserFriendlyId { get; public set; }
    public string ClientId { get; public set; }
    public Nullable`1<long> CustomerId { get; public set; }
    public string CustomerIp { get; public set; }
    public string CustomerEmail { get; public set; }
    public Nullable`1<bool> CustomerPaidPlan { get; public set; }
    public Nullable`1<DateTime> CustomerRegistrationDate { get; public set; }
    public Nullable`1<long> CustomerSubscription { get; public set; }
    public Nullable`1<DateTime> SubscriptionSignUpDate { get; public set; }
    public string HttpMethod { get; public set; }
    public string Request { get; public set; }
    public string RequestApiVersion { get; public set; }
    public string RequestBody { get; public set; }
    public string RequestBodyError { get; public set; }
    public string ResponseBody { get; public set; }
    public string Parameters { get; public set; }
    public string MethodName { get; public set; }
    public string Product { get; public set; }
    public string Sdk { get; public set; }
    public List`1<> InputData { get; public set; }
    public List`1<> OutputData { get; public set; }
    public long ProcessedVolume { get; public set; }
    public DateTime RequestStartDate { get; public set; }
    public DateTime RequestEndDate { get; public set; }
    public int ProcessedDuration { get; public set; }
    public string StackTrace { get; public set; }
    public bool ResponseSuccessful { get; public set; }
    public string ResponseErrorCode { get; public set; }
    public long ResponseHttpCode { get; public set; }
    public string Description { get; public set; }
    public string BillingVersion { get; public set; }
    public bool BillingSuccessfull { get; public set; }
    public string BillingResponse { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string );
    [CompilerGeneratedAttribute]
public string get_RequestTraceId();
    [CompilerGeneratedAttribute]
public void set_RequestTraceId(string );
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_IdentityUserId();
    [CompilerGeneratedAttribute]
public void set_IdentityUserId(Nullable`1<long> );
    [CompilerGeneratedAttribute]
public string get_IdentityUserFriendlyId();
    [CompilerGeneratedAttribute]
public void set_IdentityUserFriendlyId(string );
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string );
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CustomerId();
    [CompilerGeneratedAttribute]
public void set_CustomerId(Nullable`1<long> );
    [CompilerGeneratedAttribute]
public string get_CustomerIp();
    [CompilerGeneratedAttribute]
public void set_CustomerIp(string );
    [CompilerGeneratedAttribute]
public string get_CustomerEmail();
    [CompilerGeneratedAttribute]
public void set_CustomerEmail(string );
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CustomerPaidPlan();
    [CompilerGeneratedAttribute]
public void set_CustomerPaidPlan(Nullable`1<bool> );
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CustomerRegistrationDate();
    [CompilerGeneratedAttribute]
public void set_CustomerRegistrationDate(Nullable`1<DateTime> );
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CustomerSubscription();
    [CompilerGeneratedAttribute]
public void set_CustomerSubscription(Nullable`1<long> );
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_SubscriptionSignUpDate();
    [CompilerGeneratedAttribute]
public void set_SubscriptionSignUpDate(Nullable`1<DateTime> );
    [CompilerGeneratedAttribute]
public string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string );
    [CompilerGeneratedAttribute]
public string get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(string );
    [CompilerGeneratedAttribute]
public string get_RequestApiVersion();
    [CompilerGeneratedAttribute]
public void set_RequestApiVersion(string );
    [CompilerGeneratedAttribute]
public string get_RequestBody();
    [CompilerGeneratedAttribute]
public void set_RequestBody(string );
    [CompilerGeneratedAttribute]
public string get_RequestBodyError();
    [CompilerGeneratedAttribute]
public void set_RequestBodyError(string );
    [CompilerGeneratedAttribute]
public string get_ResponseBody();
    [CompilerGeneratedAttribute]
public void set_ResponseBody(string );
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string );
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string );
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string );
    [CompilerGeneratedAttribute]
public string get_Sdk();
    [CompilerGeneratedAttribute]
public void set_Sdk(string );
    [CompilerGeneratedAttribute]
public List`1<> get_InputData();
    [CompilerGeneratedAttribute]
public void set_InputData(List`1<> );
    [CompilerGeneratedAttribute]
public List`1<> get_OutputData();
    [CompilerGeneratedAttribute]
public void set_OutputData(List`1<> );
    [CompilerGeneratedAttribute]
public long get_ProcessedVolume();
    [CompilerGeneratedAttribute]
public void set_ProcessedVolume(long );
    [CompilerGeneratedAttribute]
public DateTime get_RequestStartDate();
    [CompilerGeneratedAttribute]
public void set_RequestStartDate(DateTime );
    [CompilerGeneratedAttribute]
public DateTime get_RequestEndDate();
    [CompilerGeneratedAttribute]
public void set_RequestEndDate(DateTime );
    [CompilerGeneratedAttribute]
public int get_ProcessedDuration();
    [CompilerGeneratedAttribute]
public void set_ProcessedDuration(int );
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string );
    [CompilerGeneratedAttribute]
public bool get_ResponseSuccessful();
    [CompilerGeneratedAttribute]
public void set_ResponseSuccessful(bool );
    [CompilerGeneratedAttribute]
public string get_ResponseErrorCode();
    [CompilerGeneratedAttribute]
public void set_ResponseErrorCode(string );
    [CompilerGeneratedAttribute]
public long get_ResponseHttpCode();
    [CompilerGeneratedAttribute]
public void set_ResponseHttpCode(long );
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string );
    [CompilerGeneratedAttribute]
public string get_BillingVersion();
    [CompilerGeneratedAttribute]
public void set_BillingVersion(string );
    [CompilerGeneratedAttribute]
public bool get_BillingSuccessfull();
    [CompilerGeneratedAttribute]
public void set_BillingSuccessfull(bool );
    [CompilerGeneratedAttribute]
public string get_BillingResponse();
    [CompilerGeneratedAttribute]
public void set_BillingResponse(string );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    public (int , byte );
    []
public int ();
    public void (int );
    []
public byte ();
    public virtual bool Equals(object );
    public bool ( );
    public static bool op_Equality( ,  );
    public static bool op_Inequality( ,  );
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class  : object {
    internal string ;
    internal  ;
    internal (string );
    internal void ( );
}
internal class  :  {
    internal void (Font , Workbook );
}
internal abstract class  :  {
    public abstract virtual Byte[] (Byte[] );
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual void (bool );
    public abstract virtual void (Color , Color , int );
    public abstract virtual void (Brush , Color , int );
    public abstract virtual void (Color , Color , int );
    public abstract virtual void (Brush , Color , int );
    public abstract virtual void (Color , Color , Color , int , int );
    public abstract virtual void (Brush , Color , Color , int , int );
    public abstract virtual void (Bitmap );
    public abstract virtual void (Color , int , int );
    public abstract virtual void ();
    public abstract virtual void (bool );
    public abstract virtual void (Color , int , Point );
    public abstract virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat );
    public abstract virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat );
    public abstract virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat , Single& , Single& );
    public abstract virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat , Single& , Single& );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public static  ( , StyleModifyFlag , int );
    internal static  (Worksheet ,  );
    internal static void (Style , Style );
    internal static void (Style , Style );
    internal static void (Style , Style );
    internal static void (Style , Style , bool );
    internal static void (Font , Style , Style );
    internal static void (Style , Style , Style );
    internal static void (Style , Style , Style , StyleModifyFlag );
    internal static int (int , BorderType );
    internal static int (int , BorderType , int );
    internal static int (Style , Style ,  , int , int );
    internal static FormatConditionCollection[] (Worksheet , int , int );
    internal static ArrayList (ArrayList );
    private static  ( , StyleModifyFlag , int );
    private static object ( , FormatCondition ,  , Byte[] );
    internal static bool ( ,  );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    public ( );
    public sealed virtual Byte[] ();
    public sealed virtual int (Byte[] , int );
}
internal class  :  {
    private bool ;
    public (bool );
    public virtual Color (Color );
}
internal class  : object {
    internal static int ;
    internal static int ;
    private static ();
    internal static void ();
    internal static int ();
}
internal interface  {
    public abstract virtual int (Char[] , int );
    public abstract virtual int (Char[] , int );
    public abstract virtual int (Char[] , int , bool );
    public abstract virtual int (Char[] , int , bool );
    public abstract virtual int (Char[] , int );
    public abstract virtual int (Char[] , int );
    public abstract virtual  (Char[] , int );
    public abstract virtual  (Char[] , int , int );
    public abstract virtual int (Char[] , int , StringBuilder );
    public abstract virtual int (Char[] , int , StringBuilder );
    public abstract virtual int (Char[] , int );
}
internal class  : object {
    internal string ;
    internal string ;
    []
internal Worksheet ;
    internal string ;
    internal string ;
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    private static void (UInt32[] );
    private static void (UInt32[] );
}
internal class  :  {
    private  ;
    public (Stream );
    public int ();
    public void ( );
    public void ();
    public int ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
[DefaultMemberAttribute("")]
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (Byte[] );
    private void ();
    public virtual  (int );
    public virtual IEnumerator GetEnumerator();
    public virtual int ();
    internal virtual void ( );
}
internal class  : object {
    private static Stream ( , Byte[] , string );
    internal static bool ( , string );
    internal static Stream ( , string );
    internal static Stream (Stream , string );
    internal static void (Stream , MemoryStream , string , int , WorksheetCollection , SaveOptions );
    internal static void (Stream , MemoryStream , string );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private ListObject ;
    internal (ListObject );
    internal virtual void ( );
    private void (Stream );
    private void (Stream );
    private void (Stream );
    private void (ListColumn , Stream );
    private void (Stream );
}
internal class  : object {
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected Byte[] ;
    public (BigInteger , BigInteger , Byte[] , BigInteger );
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual Byte[] ();
    public virtual void (Stream );
    public static  (Stream );
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    internal static ArrayList ( ,  , Rectangle , int );
    internal static void ( ,  , ArrayList );
    private static void ( , IList ,  );
}
internal class  :  {
    private byte ;
    public static  ;
    public static  ;
    public (Byte[] );
    private (bool );
    private static ();
    public static  (object );
    public static  (bool );
    public static  ( , bool );
    public bool ();
    internal virtual void ( );
    protected virtual bool ( );
    protected virtual int ();
    public virtual string ToString();
    internal static  (Byte[] );
}
internal interface  {
    public abstract virtual void (int , int );
    public abstract virtual bool ( , bool );
    public abstract virtual bool ( , bool );
    public abstract virtual  ( ,  , bool );
    public abstract virtual  ( ,  , bool , int );
    public abstract virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    internal (bool , Hashtable );
    private double (long );
    private double (int );
    public sealed virtual int Compare(object , object );
}
internal class  : object {
    internal long (long , Byte[] , int , int );
}
internal class  : object {
    []
private  ;
    []
private  ;
    internal ( ,  );
    internal void (string );
    internal void ( );
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual void (Stream );
    public abstract virtual object ();
}
internal class  :  {
    private  ;
    private  ;
    public ( ,  );
    public virtual void (int ,  );
    protected virtual  ();
    protected virtual  ();
    protected virtual void (int ,  );
    protected virtual  (int );
    protected virtual  (int , int );
    protected virtual  (Int32[] );
    protected virtual  (int , int );
    protected virtual  (int );
}
internal class  : object {
    private static Hashtable ;
    private CellBorderType ;
    private Color ;
    private static ();
    internal (CellBorderType , Color );
    internal CellBorderType ();
    internal Color ();
    internal bool ( );
    internal static bool ( ,  );
    private static bool (Color , Color );
    private static double (Color );
}
internal abstract class  : object {
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32 );
    public static UInt32 (UInt32[] , int , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] , int );
    public static UInt32[] ();
    public static UInt64[] ();
    public static UInt32[] ();
    public static UInt64[] ();
    public static bool (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static bool (UInt64[] , UInt64[] );
    public static UInt32[] (BigInteger );
    public static UInt64[] (BigInteger );
    public static UInt32 (UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static bool (UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] );
    public static bool (UInt64[] );
    public static bool (UInt32[] );
    public static bool (UInt64[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static ulong (UInt32 , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32 , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32 , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int );
    public static BigInteger (UInt32[] );
    public static BigInteger (UInt64[] );
    public static void (UInt32[] );
}
internal class  :  {
    private bool ;
    public ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    private static  (IEnumerator );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Double[0...,0...] ;
    internal (Double[0...,0...] );
    internal (Double[0...,0...] , String[] );
    internal virtual object (int , int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal String[] ;
    internal String[] ;
    internal String[] ;
    internal String[] ;
    internal void (PageSetup ,  );
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual void (bool ,  );
    public abstract virtual byte (byte );
    public abstract virtual void (Byte[] , int , int , Byte[] , int );
    public abstract virtual void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
}
internal enum  : Enum {
    public int value__;
    public static  NoVenture;
    public static  Evaluation;
    public static  Licensed;
}
internal class  : object {
    internal static string (Cells , int , int ,  );
    internal static double (Cells , int , int ,  );
    internal static string (Cells , int , int ,  );
    internal static double (Cells , int , int ,  );
    internal static double (Cells , int , int ,  );
    internal static string (Cells , int , int ,  );
    private static Style (Cells , int , int );
    private static string (string ,  ,  );
    private static bool (string );
    private static string ( ,  );
    private static void (string ,  ,  , StringBuilder );
}
internal class  : object {
    []
private  ;
    []
private  ;
    []
private WorksheetCollection ;
    []
private Chart ;
    private Hashtable ;
    private ArrayList ;
    []
private Hashtable ;
    private ArrayList ;
    private bool ;
    private ArrayList ;
    internal string ;
    internal ( ,  , Chart , Hashtable );
    private void ();
    [("True")]
internal void ( );
    internal string ( );
    private void ( );
    private void (int );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    internal void ( );
    private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    private void ();
    private bool (ChartType );
    private void ( );
    private Int32[] ( );
    private void ( , bool );
    private void ( , bool );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private ChartMarkerType ( );
    private void ( );
    private void ( , bool );
    private void ( , bool );
    private void ( ,  );
    private bool ( , ShapePropertyCollection );
    private void ( , bool );
    private Series ( ,  , bool );
    private void ( ,  );
    [("True")]
private void ( , Series );
    [("True")]
private void ( , Series );
    private void ( , Series );
    [("True")]
private void ( , Series );
    [("True")]
private void ( , Series );
    [("True")]
private void ( , Series );
    [("True")]
private void ( , Series );
    [("True")]
private PicFormatOption ( );
    private void ( , Series );
    private  ( );
    private static  ( , Chart ,  );
    private int ( , int , ArrayList );
    private static void ( ,  );
    private static void ( ,  ,  );
    private static void ( ,  ,  );
    private static string (string , char );
    private static void ( ,  , bool , bool );
    private void ( , Series );
    private void ( , DataLabels );
    private void ( , DataLabels , Series , bool );
    private void ( , Series , DataLabels );
    private DataLabels ( , Series , DataLabels , bool );
    private void ( , Series , DataLabels );
    [("True")]
private void ( ,  );
    private void ( ,  );
    private void (string , DataLabels , DataLabels , bool , bool , bool ,  );
    private void ( , DataLabels );
    private void ( , DataLabels );
    private void ( , Series );
    private bool ( , Marker );
    private void ( , Series );
    private void ( , Series );
    private void ( , Title , bool );
    private static string ( );
    private void ( , ShapePropertyCollection );
    [("True")]
private  ( );
    [("True")]
private  ( );
    internal static void (string ,  ,  );
    internal static void (string ,  ,  , bool );
    internal static  ( , Chart ,  );
    [("True")]
internal static  ( , Chart );
    [("True")]
internal static void ( ,  );
    [("True")]
internal static  ( ,  , bool ,  , int , Chart );
    [("True")]
private static void ( ,  , int , Chart );
    internal static  ( );
    [("True")]
private static  ( , int , Chart );
    private static  ( , int , Chart );
    private static string (string , int , Chart );
    private static string (string );
    [("True")]
private double ( );
    private void (string );
    private void ( ,  );
    private  (string );
    private  ( );
    private Axis (string );
    private void ( );
    private void ();
    internal static bool ( );
    private Axis ( , string );
    [("True")]
private void ( , Axis );
    private void ( , DisplayUnitLabel );
    [("True")]
private void ( , Axis );
    [("True")]
private void ( , Legend );
    private void ( );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    protected virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal class  :  {
    private object ;
    private [] ;
    private [] ;
    private bool ;
    private bool ;
    private  ;
    private static  ;
    private static ();
    [("False")]
private static [] ();
    [("False")]
private void ();
    protected virtual  ();
    [("False")]
private  ();
    internal void ([] , bool );
    internal bool ();
    internal void (bool );
    public static  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    public ( ,  ,  , int );
    private ( , int ,  , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    internal void ();
    internal void (int , int );
    internal void (int );
    internal void (bool );
    [("True")]
internal void (ChartType );
}
internal class  : object {
    internal int ;
    internal int ;
    internal bool ;
    internal static  ( );
}
internal class  : object {
    private static Hashtable ;
    private static ();
    public static Hashtable ();
    public static void (Hashtable );
    private static Hashtable ();
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual  ();
    public abstract virtual int (Byte[] , int , int );
}
internal class  : object {
    internal byte ;
    internal object ;
    internal object ;
    internal (object , WorkbookSettings );
    internal FilterOperatorType ();
    internal string ();
    internal static object (object , WorkbookSettings , bool );
    private void (object , WorkbookSettings );
}
internal class  : object {
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal string ;
    internal CellArea ;
    internal string ;
    internal string ;
    internal  ;
    internal ( );
    internal int ();
    internal int (Byte[] , int );
    internal int (Byte[] , int );
    internal int (Byte[] , int );
    private string (string );
    private void ();
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal abstract class  : object {
    internal  ;
    internal int ;
    internal abstract virtual  ();
    internal static  (string );
    internal static string ( );
    internal static  (string );
    internal static string ( );
    internal static  (string );
    internal static string ( );
}
internal class  : object {
    private static string ;
    private static ();
    internal static void (Stream ,  , ImageOrPrintOptions , int , int );
    internal static void (Stream ,  , ImageOrPrintOptions , int , int , int );
    internal static void (Stream , int , int );
    internal static Bitmap ( , ImageOrPrintOptions , int , int );
    public static void (string , ImageOrPrintOptions );
    public static ImageType (string , ImageType );
    public static void (PointF[] );
    public static PointF (PointF );
    internal static int (double );
    internal static int (double );
    internal static int (double );
    internal static void (Rectangle& );
    internal static bool (Rectangle );
    internal static void (Rectangle& );
    public static float (float );
    public static float (float );
    public static float (double );
    public static float (double );
    public static float (float );
    public static RectangleF (RectangleF );
    internal static RectangleF (Rectangle );
    internal static SizeF (Size );
    internal static Size (Size );
    internal static SizeF (SizeF );
    internal static RectangleF (RectangleF );
    internal static Rectangle (Rectangle );
    internal static double (double );
    internal static double (double );
    internal static int (double );
    internal static int (double , double );
    internal static int (Double[] );
    internal static double (double , double );
    internal static double (double , int );
    internal static double (double , double );
    internal static int (double );
    internal static DateTime (double , bool );
    internal static double (DateTime , bool );
    internal static bool (object , Int32& );
    internal static Font (string , float , FontStyle );
    internal static Font (Font );
    public static SizeF ( , string , Font , SizeF );
    public static SizeF ( , string , Font , SizeF , StringFormat );
    public static SizeF ( , string , Font , SizeF );
    public static SizeF ( );
    public static bool ( , string , Rectangle , TextOptions , Font , Color ,  ,  , bool , bool );
    internal static Bitmap (Bitmap );
    internal static bool (Byte[] , Byte[] );
    public static double (string ,  );
    public static int ( , Font );
    internal static Font (Font );
    internal static bool (string );
    internal static bool (string );
    internal static ArrayList (string , TextDirectionType , Font , bool );
    internal static void (ArrayList ,  , Font , Color ,  );
    internal static Image (Byte[] , SizeF );
    internal static Size (Size );
    private static bool (Size , SizeF , double , double );
    internal static RectangleF ( , Size , float , bool );
    internal static bool (RectangleF , Rectangle );
    internal static bool (RectangleF , RectangleF );
    internal static bool (Rectangle );
    internal static bool (RectangleF );
    internal static SizeF ( , bool , string , Font );
    internal static SizeF ( , bool , string , Font , StringFormat );
    internal static SizeF ( , bool , string , Font , SizeF );
    internal static SizeF ( , bool , string , Font , SizeF , StringFormat );
    private static SizeF ( , string , Font , SizeF , StringFormat , SizeF );
    internal static string (string ,  );
    internal static Font (string , Font , ImageOrPrintOptions , string );
    private static string (Font );
    internal static string (string , string , FontStyle );
    internal static Font (string , Font );
    internal static string (Font );
    internal static String[] ( );
    internal static string ( , Font );
    internal static Image (Picture );
    internal static Stream (Picture );
    internal static Image (Image , int , int , double );
    internal static Image (Image , int , int , double );
    internal static Bitmap (Image , int , int , bool , int );
    internal static Bitmap (Image , int , int , double , double );
    internal static Bitmap (Image , int , int , double , double );
    internal static Bitmap (Image , int , int , int , int );
    internal static Bitmap (Image , Color , Color );
    internal static Color (Color , float );
    internal static Color (Color , int );
    internal static Color (int );
    internal static Single[] (Color );
    internal static Color (Single[] );
    private static float (float , float , float );
    internal static Int32[] (Color , Color );
    internal static float (Color );
    internal static double (double , double , double );
    internal static bool (Font );
    internal static bool (FontSettingCollection );
    internal static FontStyle (Font );
    internal static Image (Image , Color );
    private static byte (int , int , int );
    internal static double (Font );
}
internal class  : object {
    public static [] (Byte[] );
    public static [] (Byte[] );
    public static string ( );
    public static string ( ,  );
    public static string ( );
    public static int ( );
    public static  ( , Byte[] );
    public static  ( ,  );
    internal static Byte[] (Char[] , bool );
    public static  ( ,  , Char[] );
    public static  ( ,  , Char[] );
    public static  ( ,  , Byte[] );
    internal static  ( ,  , Byte[] , bool );
    public static void (Stream , char , FileInfo );
    public static void (Stream , char , FileInfo , Byte[] );
    private static void (FileInfo , Stream , int );
    private static bool (int );
    public static Stream (Stream );
    internal static  ( );
    internal static Byte[] (int ,  );
    internal static  ( , int ,  );
}
internal class  : object {
    []
private  ;
    private [] ;
    private  ;
    private  ;
    internal ( );
    internal void ( );
    internal void (int , int , int , int );
    internal void (int , int , int , int , int , int );
    internal void ( );
    internal  (int , int , bool );
    internal IEnumerator ( , int );
    internal  (int , int );
    internal  (CellArea );
    private  ( ,  );
    internal void (int , int , int , int );
    internal void (int , int , int , int );
    internal void (CellArea , bool );
    private void (int );
}
internal class  : object {
    []
private  ;
    private  ;
    private  ;
    []
private  ;
    private int ;
    private int ;
    private int ;
    []
private Worksheet ;
    []
private Cells ;
    private  ;
    internal  ;
    internal  ;
    []
private RowCollection ;
    []
private  ;
    private  ;
    private Row ;
    private int ;
    private int ;
    private int ;
    private  ;
    private  ;
    private  ;
    []
private  ;
    private  ;
    private List`1<> ;
    internal int ;
    []
private Hyperlink ;
    internal ( );
    internal void ( ,  );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (Hashtable );
    private void ();
    private void ();
    private void ();
    private double (double );
    private void ();
    private void ();
    private void ();
    private void (int );
    private void ();
    [("True")]
private void (Int32& , Int32& );
    private bool (int );
    private  (int );
    private void (string , string , int , int , int , int );
    private bool (int , int , bool );
    private void (int , int );
    internal static string (string , string );
    private static String[] (char , string );
    internal static int (char , string , int );
    private static void (StringBuilder , string , string , string );
    private static void (StringBuilder , string );
    private void (Cell , ArrayList );
    [("True")]
internal void (Cell , ArrayList , int , int , bool , int );
    private void (OdsCellFieldType , int , int , ArrayList );
    private static void (ArrayList ,  );
    [("True")]
internal void (ArrayList , Font , Cell , int , int , bool );
    private void ();
    private void ();
    private void ();
    private void (FormatConditionCollection );
    private void (FormatConditionCollection );
    private  (ConditionalFormattingValue );
    private void (FormatConditionCollection );
    private void (FormatConditionCollection );
    private void (FormatConditionCollection );
    [("True")]
internal void (ArrayList , Cell , Font , int , int , bool );
}
internal abstract class  : object {
    protected Byte[] ;
    protected Byte[] ;
    protected int ;
    public virtual void (Byte[] , Byte[] , int );
    public virtual Byte[] ();
    public Byte[] ();
    public virtual Byte[] ();
    public Byte[] ();
    public virtual int ();
    public abstract virtual  (int );
    public abstract virtual  (string , int );
    public abstract virtual  (int , int );
    public abstract virtual  (string , int , int );
    public abstract virtual  (int );
    public static Byte[] (Char[] );
    public static Byte[] (string );
    public static Byte[] (Char[] );
    public static Byte[] (string );
    public static Byte[] (Char[] );
    public static Byte[] (Char[] , bool );
}
internal class  : object {
    internal static Byte[] ;
    private static ();
    public static bool (string );
    public static string (string );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
public string  { get; }
    public ( );
    public virtual string ();
    public virtual void (string );
    public virtual string ();
    public virtual string ();
    public virtual string ();
    public virtual void ( );
}
internal class  :  {
    internal ArrayList ;
    internal (string );
    internal virtual void (String& );
    internal virtual void ( );
}
internal class  :  {
    internal (string );
}
internal class  :  {
    private static BigInteger ;
    private BigInteger ;
    private BigInteger ;
    public (bool , BigInteger , BigInteger );
    private static ();
    private static BigInteger (BigInteger );
    public BigInteger ();
    public BigInteger ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    public static bool (string , int , string , int , int );
    public static bool (string , string , bool );
    public static bool (string , string );
    public static bool (string , string );
    public static bool (string , string );
    public static bool (string , string );
    public static void (StringBuilder , int , int , string );
    public static void (StringBuilder , int , int , Char[] , int , int );
    public static string (StringBuilder , int , int );
    public static Char[] (StringBuilder );
    public static Char[] (StringBuilder , int , int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal abstract class  :  {
    internal Byte[] ;
    internal (Byte[] );
    public static  ( , bool );
    public static  (object );
    public sealed virtual Stream ();
    public  ();
    public virtual Byte[] ();
    protected virtual int ();
    protected virtual bool ( );
    public virtual string ToString();
}
internal class  : object {
    private object ;
    private [] ;
    private Dictionary`2<int, > ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private  ;
    private Dictionary`2<int, WeakReference> ;
    private object ;
    private int ;
    private Object[] ;
    private int ;
    public ( );
    private void ();
    public void ( );
    private void ();
    public bool (int , & );
    private void ( ,  );
    private void (object );
    private void ();
    public void (int , Byte[] , int , int , bool );
    public bool (int , Byte[] , int , int , Int32& );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private FontSettingCollection ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public object Current { get; }
    internal (FontSettingCollection );
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class  :  {
    internal void (int , int , int , int );
    internal void ( , int , int , int );
}
internal class  : object {
}
internal class  : object {
    private float ;
    private FontStyle ;
    private Font ;
    private  ;
    private float ;
    private float ;
    private float ;
    private static StringFormat ;
    private string ;
    public (string , float , FontStyle );
    private static ();
    public string ();
    public float ();
    public FontStyle ();
    public void (FontStyle );
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public float ();
    public float ();
    public float ();
    public  ();
    public Font ();
    internal Font (bool );
    public static SizeF (string ,  );
    public static SizeF (string ,  );
    public static  (string , float , FontStyle );
    public static  (string , float , bool , bool );
    public static StringFormat ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    public ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    private Int64[] ;
    private int ;
    internal long  { get; internal set; }
    internal (int );
    internal int ();
    internal void (long );
    internal void (long , int );
    internal void (Int64[] , int , int );
    internal void (long , int );
    internal long (int );
    internal void (int , long );
    internal long ();
    internal void (int , int );
    internal Int64[] (bool );
    internal Int64[] (int , int );
    internal Int64[] ();
    internal bool (long );
    internal void (long );
    internal void (int , bool );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    public sealed virtual void ( );
    public sealed virtual string ();
    public sealed virtual int (Byte[] , int );
    public sealed virtual int (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  : object {
    internal int ;
    internal int ;
    internal (int , int );
    internal (BinaryReader );
    internal void (BinaryWriter );
}
internal class  : object {
    private OperatorType ;
    private double ;
    internal (OperatorType , double );
    internal OperatorType ();
    internal double ();
    internal bool (double );
    internal bool (TypeCode , object , bool );
    internal bool (object , bool );
}
internal class  : object {
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    private bool ;
    private bool ;
    private TextAlignmentType ;
    private TextAlignmentType ;
    internal  ;
    internal bool ;
    internal ArrayList ;
    internal TextDirectionType ;
    internal string ;
    internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public TextAlignmentType ();
    public void (TextAlignmentType );
    public TextAlignmentType ();
    public void (TextAlignmentType );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal void ( , Chart );
    private string ( , Workbook );
    internal string ();
    internal void (string );
    internal  ();
    internal  ();
    internal  ();
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal void (Chart , bool );
    private void (TickLabels );
    private void (ChartTextFrame );
    internal void ( , Title , WorksheetCollection , bool );
    internal void (Series ,  );
    internal void (ChartTextFrame , WorksheetCollection , bool );
    internal void (DataLabels , WorksheetCollection );
    internal void (TickLabels , Chart , WorksheetCollection );
    internal void (DisplayUnitLabel , WorksheetCollection );
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
}
internal class  : StringCollection {
    internal void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private GraphicsPath ;
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal void (int ,  );
    public  (int );
    internal void ( , CopyOptions );
    internal bool ( );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal ArrayList ;
    internal  (Chart ,  );
}
internal class  : object {
    protected  ;
    protected Byte[] ;
    protected bool ;
    protected bool ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    public ( ,  ,  ,  ,  , int );
    public virtual  ();
    public virtual  ();
    public virtual int (int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
    protected virtual int (Byte[] , int , int , int , int );
    protected virtual int ( , int );
    protected virtual int (int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private bool ;
    private RectangleF ;
    private  ;
    private Font ;
    private float ;
    private float ;
    private float ;
    private ArrayList ;
    private bool ;
    public (RectangleF ,  , ArrayList , Font );
    public (RectangleF ,  , ArrayList , Font , float , float );
    public bool ();
    public void (bool );
    public void ( , float , bool );
    private bool ( );
    private bool ();
    private void (ArrayList );
    private void (ArrayList );
    private void (Font , string );
    private String[] (string , float , Font );
    private void (ArrayList );
    private bool (string );
    private void (ArrayList , bool );
    private void (ArrayList , bool );
    private void (ArrayList );
    private void (ArrayList , bool );
    private float (Font );
}
internal class  : object {
    private  ;
    internal ( );
    public sealed virtual  ();
    public sealed virtual  ();
}
internal abstract class  : object {
    protected double ;
    public double ();
    protected virtual double (double );
    protected virtual double (Double[] );
    protected virtual void (double , Double[] );
    protected virtual double (double , double );
    protected virtual double (Double[] , Double[] );
    protected virtual void (Double[] , Double[] );
    public int (int , Double[] , double , double , double , double );
    public bool (double , int , double );
    public bool (double , double , double , double );
    public bool (double , int , double );
    public bool (double , double );
    public double (double , double , double , int , double );
    public int (int , Double[] , double , double , double , double );
    public bool (int , Double[] , double , double , double , double );
}
internal class  : object {
    []
internal PivotTable ;
    internal PivotFieldCollection ;
    internal PivotFieldCollection ;
    internal PivotFieldCollection ;
    internal PivotFieldCollection ;
    internal PivotFieldCollection ;
    internal string ;
    internal string ;
    internal ushort ;
    internal short ;
    internal (PivotTable );
    internal (PivotTable , string );
    internal void ( , CopyOptions );
    internal void (bool , int );
    internal bool (int );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public ( );
    public ( );
    private Object[] ();
    public [] ();
    private bool ( ,  );
    public sealed virtual object Clone();
    public bool ( );
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public sealed virtual bool (object );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static int ();
    internal static  (Byte[] );
    internal static  (Stream );
    private static  ( );
    public static Byte[] (Stream );
    public static Byte[] (Stream , int );
    public static IList ( );
    public static IList ( );
    public static  (IList );
    public static  (IList );
    internal static Stream (Stream , int , bool , int );
    internal static  ( );
    internal static  ( );
}
internal abstract class  : object {
    public static  (short );
    public static  (string , int , int , int );
    public static  (string , int , string , string );
    public static  (string , string , string , string );
    public static  (string );
    public static  ();
    public static  ();
    public static  (Byte[] , int , int );
    public abstract virtual  ( );
    public abstract virtual  ( );
    public abstract virtual  ( );
    public abstract virtual  ( );
    public abstract virtual bool (StringBuilder );
    public virtual bool ( , StringBuilder );
    public virtual string ToString();
    public virtual bool ();
    public virtual  ( );
    internal virtual short ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    protected static Byte[] ();
    protected static Byte[] (string , string );
    protected static Byte[] (string , int , int ,  );
    protected static Byte[] (string , string , string );
}
internal class  : object {
    private  ;
    private int ;
    internal ( , int );
    internal  ();
    internal int ();
}
internal class  : object {
    private  ;
    public ( );
    public (string ,  , BigInteger );
    public string ();
    public Byte[] ();
    public Byte[] ();
    public BigInteger ();
    public bool ( );
    public  ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public static  ( , BigInteger );
    private static  ( ,  ,  );
}
internal class  : object {
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    public List`1<Byte[]> ;
    public  ;
    private static ();
    public void (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Object[] ;
    internal (Object[] , String[] );
    internal (Object[] , bool );
    internal virtual int ();
    internal virtual object (int );
}
internal class  :  {
    internal string ;
    internal int ;
    internal int ;
    internal string ;
    private  ;
    private Hashtable ;
    private  ;
    private List`1<> ;
    internal List`1<float> ;
    private Hashtable ;
    private Hashtable ;
    internal List`1<> ;
    internal Hashtable ();
    public virtual GraphicsPath (RectangleF , bool , bool );
    public virtual  ();
    private void (string );
    internal void (string , string );
    internal void (string );
    internal float (string );
    private void (string );
    private  (string );
    internal void (bool );
    internal  ();
    internal  ();
    internal virtual bool ();
}
internal class  : object {
    private UInt64[] ;
    private UInt64[] ;
    private UInt64[][] ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    private static Byte[] ;
    public (int );
    private static ();
    public virtual void (bool ,  );
    private void (UInt64[] , UInt64[] );
    private void (UInt64[] , UInt64[] );
    private void ();
    public virtual int (Byte[] , int , Byte[] , int );
    private void ();
    private void ();
    private void (Byte[] , int , Byte[] , int );
    private void (Byte[] , int , Byte[] , int );
    private void ();
    private void ();
    private void ();
    private void ();
    private void (int );
    private void (int );
    private void (int );
    private static ulong (ulong );
    private void ();
    private static ulong (ulong );
    private void ();
    private static ulong (ulong );
    private static ulong (ulong );
    private static ulong (int , ulong );
    private void (UInt64[] , UInt64[] );
    public virtual string ();
    public virtual int ();
    public virtual bool ();
    public virtual void ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Shape ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    internal (int , string );
    internal (Shape , int , string );
    public sealed virtual int CompareTo(object );
    internal void (int , int , Cells );
    internal double ();
    internal int ();
    public double ();
    public void (double );
    public double ();
    public void (double );
    public int ();
    public void (int );
    public int ();
    public int ();
    public void (int );
    public int ();
    public double ();
    public void (double );
    public double ();
    public void (double );
    public string ();
    internal string (HtmlSaveOptions );
    internal static string (string , MemoryStream );
    internal Shape ();
    internal Int32[] (int ,  ,  );
    internal bool ();
}
internal class  :  {
    internal ArrayList ;
    internal (Scenario );
    internal void ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Single[] ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    internal (Worksheet );
    public sealed virtual void Dispose();
    internal void ( ,  );
    internal void ();
    private int ( , List`1<> , List`1<> );
}
internal abstract class  : object {
    public static  ( , [] ,  , int );
    public static  ([] ,  );
    private static  ([] ,  , int , int );
    public static  ([] ,  );
    public static  ([] ,  );
    public static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    public static  ([] ,  );
    internal static  ([] ,  );
    private static  ( ,  ,  ,  );
}
internal class  : object {
    private  ;
    internal ( );
    internal void ( );
    private bool ( );
}
internal class  : object {
    private static UInt64[] ;
    private static ();
    public static void (UInt64[] , UInt64[] , UInt64[] );
    private static void (UInt64[] , int , UInt64[] , int , UInt64[] , int );
    private static void (UInt64[] , int , UInt64[] , int , UInt64[] , int );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    private static void (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] );
    public static UInt32 (UInt64[] );
    protected static void (UInt64[] , UInt64[] , UInt64[] );
    protected static void (UInt64[] , ulong , UInt64[] , int );
    protected static void (UInt64[] , UInt64[] );
}
internal class  :  {
    private int ;
    private int ;
    private short ;
    private short ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private ArrayList ;
    internal ( );
    internal virtual void ( );
    internal void ( );
    private void ( );
    private static string ( );
    private static void (string ,  );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public [] ();
    public IEnumerable ();
    public  ();
    public  ();
    public Byte[] ();
    public int ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal abstract class  :  {
    protected  ;
    protected  ;
    protected [] ;
    protected bool ;
    protected  ;
    internal ( ,  ,  , bool , [] ,  );
    internal ( ,  );
    internal static  ( ,  ,  ,  ,  ,  );
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    internal void ( );
}
internal class  : object {
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    internal List`1<> ;
    private  ;
    private  ;
    internal ( );
    internal void ( ,  );
    private void ( );
    private void (BorderType , List`1<> ,  );
    private void (BorderType ,  ,  );
    private void ( , BorderType , int );
    private void (BorderType , int , int , int ,  );
}
internal class  :  {
}
internal class  : object {
    private  ;
    public sealed virtual void ( );
    public sealed virtual int ();
    public sealed virtual void ( , Byte[] , int );
}
internal class  : object {
    internal static void (StringBuilder , string , string );
    private static bool (StringBuilder , string , bool );
    internal static string (int , WorksheetCollection , int , Hashtable );
    internal static int (Char[] , char , char , int );
    internal static int (Char[] , char , int );
    internal static int (string , char );
    internal static int (string , char );
    internal static int (string , char );
    internal static string (string );
    private static string (string );
    internal static String[] (string , bool );
    internal static Int32[] (WorksheetCollection , string , bool , int );
    private static Int32[] (WorksheetCollection , string , string , bool , bool , bool , int );
    private static Int32[] (WorksheetCollection , int , string , string , string , bool );
    public static bool (string );
    internal static String[] (string );
    internal static bool (byte );
    internal static bool (byte );
    internal static  (int ,  );
    internal static [] (int ,  ,  );
}
internal class  : object {
    internal List`1<> ;
    []
internal  ;
    internal int ;
    internal int ;
    internal int ;
    []
internal PivotField ;
    internal void ( );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private static void (string , Object[] );
    private static void (int , String[] );
    public static string (string );
    public static  ( , Byte[] );
    public static  (string , Byte[] );
    public static  ( , Byte[] , int , int );
    public static  (string , Byte[] , int , int );
    public static  ( ,  ,  );
    public static  (string ,  ,  );
    public static  ( ,  );
    public static  (string ,  );
    public static  ( ,  );
    private static  ( , int );
    private static Byte[] ( , int );
    private static int (string );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private Revision ;
    internal  ;
    internal  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal (Revision );
}
internal enum  : Enum {
    public byte value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private  ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private Byte[][] ;
    private int ;
    private int ;
    private  ;
    internal (int , int , int , int ,  ,  );
    private ( , Cells );
    public virtual  (Cells );
    public virtual void ( );
    internal virtual Byte[] (int );
    internal virtual int (int );
    internal virtual int (int );
    private static int (Byte[] , int );
    private static void (Byte[] , int , int );
    internal virtual int ();
    internal virtual int (int );
    internal virtual int (int );
    private int (int );
    internal virtual int (Byte[] , int , int );
    internal virtual int (int , int , int , int , int );
    private int (int , int ,  , int , int , int , int , int );
    private int (int , int );
    private int (int , int );
    private void (Byte[] , int , int );
    internal virtual int (int , int , int , int , int , bool );
    public virtual void (int , int );
    private void (int , int );
    private void (int ,  , int );
    private void (int , [] , int , int , int );
    public virtual int (int ,  , int );
    public virtual int (int , [] , int );
    private void (int ,  );
    public virtual int (int ,  , int );
    public virtual int (int ,  , int , int , int );
    public virtual int ();
    public virtual int (int );
    public virtual int (int , int );
    public virtual int (int , int , int );
    public virtual bool (int );
    private int (int , int , int );
    private int (int , int );
    private int (int , int , int , int );
    private int (int , Byte[] );
    private int (int , Byte[] , int , int );
    public virtual int (int );
    internal static int (int );
    internal virtual int (Byte[] );
    private void (Byte[] , int );
    internal static int (Byte[] , int );
    public virtual bool ();
    public virtual void (bool );
    public virtual  (int );
    public virtual  (int ,  , int );
    public virtual void (int ,  , int );
    public virtual int (int );
    public virtual void (int , int );
    public virtual byte (int , int );
    public virtual void (int , int , byte );
    public virtual int (int );
    public virtual void (int , int );
    public virtual  (object );
    public virtual int (int , int );
    public virtual int (int );
    public virtual int (int );
    public virtual int (int , bool );
    public virtual  ();
    public virtual  (int , int , bool );
    public virtual  (int , int , int , int , bool );
    public virtual int ();
    public virtual void (int );
    private int ();
    public virtual void (int , int );
    private int (int , int , int , int );
    public virtual int (int , int );
    public virtual int (int , int );
    private static void (Byte[] , int , int );
    private void (Byte[] , int , int , int );
    public virtual void (int , int );
    private void (int , int , int );
    private void (int , int , int );
    private void (int );
    private Byte[] (Byte[] , int , int , int , int , Byte[] , int , int );
    private Byte[] (Byte[] , int , int , int , int );
    private void (int , int , int );
    public virtual void (int );
    public virtual bool (int , int );
    public virtual void (int , int , int , int );
    public virtual  (Cells , RowCollection ,  );
    internal bool (bool );
    internal void (Byte[] );
    internal void (Stream );
    internal int (Byte[] , int );
}
internal class  : object {
    private  ;
    private  ;
    public ( );
    [("True")]
internal void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void (string , ArrayList );
    [("True")]
private void (HeaderFooterCommand );
}
internal interface  {
    public abstract virtual  (object );
}
internal class  : object {
    internal static Hashtable ;
    private ArrayList ;
    internal bool ;
    internal  ;
    internal ( );
    internal ( ,  );
    private static ();
    internal virtual void ();
    internal virtual void ( );
    internal static string (string );
    internal  ();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    internal (int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
public string  { get; }
    public ( );
    public virtual void ( );
    public virtual string ();
    public virtual void (string );
    public virtual string ();
    public virtual string ();
}
internal class  :  {
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal byte ;
    internal int ;
    internal int ;
    internal virtual void ( , CopyOptions );
}
internal class  :  {
}
internal class  : object {
    private RandomNumberGenerator ;
    private bool ;
    public (RandomNumberGenerator , bool );
    public sealed virtual  (int );
}
internal class  :  {
    private static float ;
    internal ( );
    private static ();
    public void ( , MemoryStream );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    private bool ;
    private int ;
    private Byte[] ;
    internal (bool , int , Byte[] );
    public (int , Byte[] );
    public (int ,  );
    public (bool , int ,  );
    public (int ,  );
    private int (Byte[] );
    public bool ();
    public Byte[] ();
    public int ();
    public  ();
    public  (int );
    internal virtual void ( );
    protected virtual bool ( );
    protected virtual int ();
    private Byte[] (int , Byte[] );
}
internal class  : object {
    private byte ;
    private int ;
    private  ;
    public byte ();
    public void (byte );
    public int ();
    public void (int );
    public  ();
    public void ( );
}
internal class  : object {
}
internal class  :  {
    internal (RevisionLog );
}
internal class  : object {
    protected  ;
    protected  ;
    protected  ;
    public ( );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual BigInteger ();
    public virtual BigInteger[] (Byte[] );
    public virtual bool (Byte[] , BigInteger , BigInteger );
    protected virtual BigInteger (BigInteger , Byte[] );
    protected virtual  (bool ,  );
}
internal class  : object {
    public static bool (Char[] , Char[] );
    public static bool (Byte[] , Byte[] );
    public static bool (Single[] , Single[] );
    public static int (Int32[] , int , int , int );
    public static void (Byte[] , byte , int , int );
    public static bool (Byte[] , Byte[] , int );
    public static void (Byte& , Byte& );
    internal static void (Byte[] );
    private static void (Byte[] );
}
internal class  : object {
    private  ;
    private  ;
    internal ( ,  );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
public static  ;
    public ( );
    public ([] );
    public ( );
    internal ( , bool );
    private static ();
    public static  ( );
    internal static  ( , bool );
    internal virtual void ( );
}
internal class  : object {
    private Byte[] ;
    private int ;
    private Byte[][] ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    public void (int );
    public void ([] , int , int , int );
    public sealed virtual bool (int );
    public sealed virtual int ();
    public Int32[] (Byte[] , int );
}
internal class  : object {
    internal Hashtable ;
    internal Hashtable ;
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  : ValueType {
    internal static void ( , ArrayList& , ArrayList& );
    internal static void ( , ArrayList& , ArrayList& );
    internal static ArrayList ( , IList ,  , Rectangle , float , double , int );
    internal static ArrayList ( ,  , Rectangle , float , double , int );
    internal static SizeF ( ,  ,  ,  );
    internal static void ( ,  , ArrayList );
    internal static void ( ,  ,  ,  , RectangleF );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream ,  ,  ,  , bool );
    public (Stream , long ,  ,  ,  , bool );
    protected virtual void Dispose(bool );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual void Write(Byte[] , int , int );
    public void ();
}
internal class  : object {
    internal Byte[] ;
    internal (int );
    internal void ( );
    internal int ();
    internal int ();
    internal void (int );
    internal void ();
    internal int ();
    internal void (int );
    internal bool ();
    internal int ();
    internal object (int , int );
    internal int ( , int , short , bool , bool );
    internal int (int ,  );
    private int (int , int ,  );
    public  ();
    public  (int , int );
    internal bool (int , Int32& , Boolean& );
    internal Double[] (int , int );
    internal Object[] (int , int );
    internal void (int ,  , object );
    internal int (int , Int32& );
    internal int (int );
    internal int (bool ,  , object );
    internal void (int , int , int );
    internal static byte (byte );
    internal static byte (byte );
}
internal class  : object {
    []
internal Shape ;
    internal string ;
    internal bool ;
    internal  ;
    internal  ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    []
internal Chart ;
    []
internal  ;
    []
internal  ;
    []
internal  ;
    internal bool ;
    internal [] ;
    internal ( , Shape , bool );
    internal String[] ();
    private string (Hyperlink );
}
internal class  : EndOfStreamException {
}
internal abstract class  : object {
    []
protected  ;
    private string ;
    private int ;
    internal ( );
    internal int ();
    internal string ();
    internal bool ();
    internal string ();
    internal virtual  ();
    [("True")]
public abstract virtual void ( );
    [("True")]
internal virtual string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal abstract class  :  {
    [("True")]
internal abstract virtual void ( );
    internal virtual void ( );
}
internal class  :  {
    internal void (Workbook );
}
internal class  :  {
    protected  ;
    protected  ;
    protected  ;
    public ( ,  ,  );
    public virtual  ();
    public virtual Byte[] (Byte[] );
}
internal class  : object {
    private UInt32 ;
    private FontStyle ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    private bool ;
    private string ;
    private int ;
    internal void ( );
    internal void ( );
    internal  ();
    internal FontStyle ();
    private float ();
    private sealed virtual override  ();
    public sealed virtual UInt32 ();
    public sealed virtual void (UInt32 );
    internal float ();
    internal string ();
    internal void (string );
    internal Encoding ();
    internal int ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    public ( );
    public ( );
    public ( );
    public static  (object );
    public bool ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private bool ;
    public ( );
    public void ();
    public bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  :  {
    internal string ;
    internal (string );
    internal virtual object ();
    internal virtual  ();
    internal virtual string ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal abstract class  : object {
    public static Byte[] ;
    public static Int32[] ;
    private static ();
    public static bool (Byte[] , int , int );
    public static bool (Boolean[] , Boolean[] );
    public static bool (Char[] , Char[] );
    public static bool (Byte[] , Byte[] );
    public static bool (Byte[] , int , int , Byte[] , int , int );
    public static bool (Byte[] , Byte[] );
    public static bool (Byte[] , Byte[] );
    public static bool (int , Byte[] , int , Byte[] , int );
    public static bool (Int32[] , Int32[] );
    [CLSCompliantAttribute("False")]
public static bool (UInt32[] , UInt32[] );
    private static bool (Boolean[] , Boolean[] );
    private static bool (Char[] , Char[] );
    private static bool (Byte[] , Byte[] );
    private static bool (Int32[] , Int32[] );
    private static bool (UInt32[] , UInt32[] );
    public static string (Object[] );
    public static int (Byte[] );
    public static int (Byte[] , int , int );
    public static int (Int32[] );
    public static int (Int32[] , int , int );
    [CLSCompliantAttribute("False")]
public static int (UInt32[] );
    [CLSCompliantAttribute("False")]
public static int (UInt32[] , int , int );
    [CLSCompliantAttribute("False")]
public static int (UInt64[] );
    [CLSCompliantAttribute("False")]
public static int (UInt64[] , int , int );
    public static Boolean[] (Boolean[] );
    public static Byte[] (Byte[] );
    public static Int32[] (Int32[] );
    [CLSCompliantAttribute("False")]
public static UInt32[] (UInt32[] );
    public static Int64[] (Int64[] );
    [CLSCompliantAttribute("False")]
public static UInt64[] (UInt64[] );
    public static Byte[] (Byte[] , Byte[] );
    [CLSCompliantAttribute("False")]
public static UInt64[] (UInt64[] , UInt64[] );
    public static bool (Byte[] , byte );
    public static bool (Int16[] , short );
    public static bool (Int32[] , int );
    public static void (Byte[] , byte );
    public static void (Byte[] , int , int , byte );
    public static Byte[] (Byte[] , int );
    public static Char[] (Char[] , int );
    public static Int32[] (Int32[] , int );
    public static Int64[] (Int64[] , int );
    public static BigInteger[] (BigInteger[] , int );
    public static Byte[] (Byte[] , int , int );
    public static Int32[] (Int32[] , int , int );
    public static Int64[] (Int64[] , int , int );
    public static BigInteger[] (BigInteger[] , int , int );
    private static int (int , int );
    public static Byte[] (Byte[] , byte );
    public static Int16[] (Int16[] , short );
    public static Int32[] (Int32[] , int );
    public static Byte[] (Byte[] , Byte[] );
    public static Byte[] (Byte[][] );
    public static Int32[] (Int32[] , Int32[] );
    public static Byte[] (Byte[] , byte );
    public static Int16[] (Int16[] , short );
    public static Int32[] (Int32[] , int );
    public static Byte[] (Byte[] );
    public static Int32[] (Int32[] );
    public static void (Byte[] );
    public static void (Int32[] );
    public static bool (Object[] );
}
internal class  : object {
    internal int ;
    internal int ;
    internal void ( );
}
internal class  : object {
    internal  ;
    internal Hyperlink ;
    internal Cell ;
    internal bool ;
    internal Comment ;
}
internal class  :  {
    private int ;
    private int ;
    private long ;
    private long ;
    private  ;
    private  ;
    private [] ;
    private Byte[] ;
    private [] ;
    private [] ;
    private Byte[] ;
    internal ( );
    public (int , long ,  ,  , [] , [] , Byte[] , [] );
    public (int , int , long ,  ,  , long , Byte[] , [] );
    public (int , int , long ,  ,  , [] , [] , Byte[] , [] );
    public int ();
    public int ();
    public long ();
    public Byte[] ();
    public  ();
    public  ();
    public [] ();
    public Byte[] ();
    public [] ();
    public [] ();
    public long ();
    public virtual void ( );
    private static void ( , Byte[] );
    private static Byte[] ([] );
    private void ();
}
internal abstract class  : object {
    []
protected  ;
    []
private  ;
    private  ;
    []
protected Worksheet ;
    private  ;
    private bool ;
    internal ( ,  );
    protected abstract virtual bool ( );
    protected abstract virtual bool ( );
    internal void (Worksheet );
    public sealed virtual bool ( , int );
    public void ();
    public bool ();
    public  ();
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private bool ;
    internal ( );
    internal void ( );
    internal  ( );
    private static void ( ,  , Hashtable );
    internal static  ( , WorksheetCollection , Hashtable , bool );
    private static  ( , int , bool );
    private static int ( , StringBuilder , int , Int16[] , WorksheetCollection , bool );
    internal static bool ( );
    internal static string (string );
    private static bool (char );
    private bool ( );
}
internal class  :  {
    [ObsoleteAttribute("Use ECCurve.CreatePoint to construct points")]
public ( ,  ,  );
    [ObsoleteAttribute("Per-point compression property will be removed, see GetEncoded(bool)")]
public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    public static  ( , string );
    private static  (Byte[] , string );
    private static Byte[] (Byte[] , string );
    private static Byte[] (string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    public (int );
    private ( );
    public static  (object );
    public static  ( );
    public virtual string ToString();
}
internal class  : object {
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static int ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static long ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static  ;
    internal static UInt32 (string );
}
internal class  : object {
    internal  ;
    internal int ;
    internal List`1<> ;
    internal int ;
    internal int ;
    internal  ( , bool );
    internal bool ();
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[][] ;
    private Byte[] ;
    private int ;
    private ulong ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    internal Int16[] ;
    internal Int16[] ;
    internal Byte[] ;
    internal Byte[] ;
    internal Byte[] ;
    internal Byte[] ;
    private static Byte[] ;
    public (Byte[] );
    public ( );
    private static ();
    private static Byte[][] ();
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    private Byte[] (Byte[] );
    private Byte[] (Byte[] );
    private void (Byte[] , Byte[] , int , Byte[] , int );
    private void (Byte[] );
    private void (Byte[] , int );
    private void ();
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
    private void (Byte[] );
    private static void (Byte[] , Int16[] );
    private static void (Int16[] , Byte[] );
    public sealed virtual int ();
    public sealed virtual  ();
    public sealed virtual void ( );
}
internal class  : object {
    private bool ;
    private bool ;
    private int ;
    public (bool , bool );
    public sealed virtual void (int , int );
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
    public sealed virtual  ();
}
internal class  :  {
    internal (ushort , ushort , ushort , UInt32 );
}
internal class  : object {
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
}
internal class  :  {
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( ,  );
    internal virtual void ( );
    private void ( );
    private void ( ,  );
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal GraphicsPath[] ();
    private float (float , float );
    private PointF (float , float , float , float , float );
    private bool (float , float , int , int , Point , float , float );
    internal virtual void ();
    internal virtual void (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    private int ;
    private int ;
    private Double[][] ;
    private Double[] ;
    internal (Double[][] , bool );
    internal static Int32[] (Double[][] , bool );
    public Double[] ();
    public Double[][] ();
    public Double[][] ();
    public Double[][] ();
    public Double[][] ();
    private static double (double , double );
}
internal class  : object {
    internal static CellArea (CellArea , Cells );
    internal static CellArea (CellArea , Boolean[] );
    internal static Boolean[] (Cells , CellArea );
    internal static void (StringBuilder , int , int , int , int );
    internal static string (int , int , int , int );
    internal static string (int , int , int , int , int , int );
    internal static void (StringBuilder , int , int , int , int , int , int );
    internal static bool (CellArea , CellArea );
    internal static void (List`1<CellArea> );
    internal static void (List`1<CellArea> );
    internal static CellArea (CellArea , CellArea , Boolean& );
    internal static bool (ArrayList , CellArea );
    internal static object (CellArea , int , int , int );
    internal static CellArea (CellArea , int , int , Boolean& );
    internal static CellArea (CellArea , int , int , Boolean& );
    internal static bool (CellArea , CellArea );
    internal static bool (CellArea , CellArea );
    internal static CellArea (CellArea , CellArea );
    internal static ArrayList (CellArea , CellArea );
    internal static object (CellArea , CellArea );
    internal static bool (ArrayList , CellArea );
    internal static ArrayList (CellArea , int , int );
    internal static object (CellArea , int , int );
    internal static object (CellArea , int , int );
    internal static ArrayList (CellArea , int , CellArea , Boolean& );
    internal static ArrayList (bool , CellArea , int , CellArea , Boolean& );
    internal static void (ArrayList , bool , CellArea , int , ArrayList , ArrayList );
    internal static void (ArrayList , bool , CellArea , int , ArrayList , ArrayList );
    internal static void (bool , CellArea , int , CellArea , ArrayList , ArrayList );
    internal static void (bool , CellArea , int , CellArea , ArrayList , ArrayList );
    internal static object (CellArea , int , CellArea );
    internal static void (bool , CellArea , int , CellArea , ArrayList , ArrayList );
    internal static ArrayList (CellArea , CellArea , Boolean& );
    internal static ArrayList (CellArea , CellArea , Boolean& );
    internal static ArrayList (CellArea , int , CellArea , Boolean& );
    internal static void (ArrayList , bool , CellArea , int , ArrayList , ArrayList );
    internal static void (ArrayList , bool , CellArea , int , ArrayList , ArrayList );
    internal static void (bool , CellArea , int , CellArea , ArrayList , ArrayList );
    internal static void (bool , CellArea , int , CellArea , ArrayList , ArrayList );
    internal static object (CellArea , int , CellArea );
    internal static void (bool , CellArea , int , CellArea , ArrayList , ArrayList );
}
internal class  :  {
    private  ;
    private  ;
    private Boolean[] ;
    private object ;
    private  ;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) ;
    public ( );
    public virtual  ();
    public virtual bool ();
    public virtual bool (DateTime );
    public virtual void ();
    public virtual void (DateTime );
    public virtual int ();
    public virtual BigInteger ();
    public virtual  ();
    public virtual  ();
    public virtual DateTime ();
    public virtual DateTime ();
    public virtual Byte[] ();
    public virtual Byte[] ();
    public virtual string ();
    public virtual string ();
    public virtual Byte[] ();
    public virtual  ();
    public virtual  ();
    public virtual Boolean[] ();
    public virtual IList ();
    public virtual int ();
    public virtual ICollection ();
    public virtual ICollection ();
    protected virtual ICollection (string );
    protected virtual  ();
    public virtual  ();
    public virtual Byte[] ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual void ( );
    public virtual void ( );
    protected virtual void ( );
    private static bool ( ,  );
}
internal class  :  {
    private  ;
    [("False")]
internal virtual void ( ,  ,  ,  );
    internal virtual void ( ,  );
}
internal class  : object {
    private CellArea ;
    private ConsolidationFunction ;
    private Int32[] ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    []
private Cells ;
    []
private RowCollection ;
    private int ;
    private String[] ;
    private string ;
    private string ;
    internal (Cells );
    internal void (CellArea , int , ConsolidationFunction , Int32[] , bool , bool , bool );
    private int (Row );
    private int (Row );
    private bool (Row );
    private bool (int );
    private void ();
    private void ();
    private void ();
    private void (bool , Cell );
    internal static bool (ConsolidationFunction );
}
internal class  :  {
    private  ;
    internal ( ,  );
    public virtual  ();
    public virtual  ( );
}
[]
internal interface  {
    public abstract virtual  ();
    public abstract virtual int ();
    public abstract virtual bool (int ,  );
    public abstract virtual  (int , int , [] , int , int , bool );
    public abstract virtual  (int , int ,  , int , int , bool );
    public abstract virtual  (int , int ,  , int , bool );
    public abstract virtual  (int , int );
    public abstract virtual int (int ,  );
    public abstract virtual int (int ,  );
    public abstract virtual  (int );
    public abstract virtual  (int ,  );
    public abstract virtual object (int ,  );
    public abstract virtual void (int , StringBuilder ,  );
    public abstract virtual void (StringBuilder );
    public abstract virtual void (int , [] , int , int );
    public abstract virtual  (int , Double[] , int , int ,  ,  );
}
internal class  :  {
    public ( );
    public virtual  (String& );
}
internal class  :  {
    private  ;
    private static ();
    public (TextReader );
    public (TextReader ,  );
    public object ();
    private  ( );
    private  ( );
    private  ( );
    private  ( );
    private  ( );
    private  ( );
    private  ( );
    private object ( );
    private static  (string );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    public ( );
    public (BigInteger , BigInteger , BigInteger );
    public sealed virtual string ();
    public virtual Byte[] ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public virtual void ( );
}
internal class  : object {
    protected  ;
    private int ;
    private int ;
    private int ;
    private CellArea ;
    internal ( );
    internal int ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual bool ();
    private void (int );
}
internal class  :  {
    private float ;
    internal ( , float );
    internal virtual float ();
}
internal class  : object {
    private  ;
    private  ;
    private BigInteger ;
    private bool ;
    public ( );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int ();
    public virtual Byte[] (Byte[] , int , int );
    private BigInteger (BigInteger );
    private BigInteger (BigInteger );
}
internal class  : object {
    private static Char[] ;
    []
private WorksheetCollection ;
    []
private HtmlLoadOptions ;
    private Worksheet ;
    private Cells ;
    private Hashtable ;
    private Hashtable ;
    private Hashtable ;
    internal Hashtable ;
    private Style ;
    internal Style ;
    []
private Style ;
    internal ArrayList ;
    private Hashtable ;
    private int ;
    internal  ;
    private string ;
    private string ;
    internal int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    private bool ;
    internal int ;
    private bool ;
    private Hashtable ;
    []
private ICustomParser ;
    []
private ICustomParser ;
    []
private  ;
    []
private  ;
    internal  ;
    private bool ;
    private string ;
    private  ;
    private Hashtable ;
    private List`1<> ;
    private Style ;
    private bool ;
    internal bool ;
    internal bool ;
    private bool ;
    private bool ;
    internal (Workbook ,  );
    private static ();
    internal bool ();
    internal void (bool );
    internal string ();
    internal void (string );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal  ();
    internal void ();
    internal void ();
    private void (String[] , int , List`1<string> );
    internal String[] (string );
    internal Style ( , string , bool );
    internal void ( );
    internal bool ();
    internal void ();
    internal void ();
    private bool ();
    internal void ( );
    internal void ( );
    internal void ( , bool );
    private void ( , bool );
    internal void ( , List`1<> );
    private void (List`1<> ,  , bool );
    private void (int , string ,  );
    internal void ( );
    private string (string );
    private int ( , string );
    private int ( , string );
    private void (string , string , string );
    internal void ( );
    private void ( , Font );
    internal Style (string );
    private int (string , string );
    private bool (string );
    internal void ();
    internal void ( , string );
    private void ();
    private void (string );
    private void (BorderCollection , CellBorderType );
    private void (BorderCollection , Color );
    private Style (string , Style ,  , bool );
    internal void ();
    internal Cell ();
    internal Cell (int , int );
    internal Cells ();
    internal bool (CellArea );
    internal bool (CellArea );
    private void (object , Style );
    internal void ( );
    internal void ();
    internal void ( );
    internal void ();
    internal void ( );
    internal void (bool );
    internal string (string );
    internal void (string );
    internal void ( ,  );
    private void (Column );
    private Picture (string , StreamProviderOptions );
    internal void ( );
    internal void ();
    internal void ();
    private void (Cell );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( , bool );
    internal void ( );
    private void (string , Style ,  );
    internal void ( , string );
    internal void ();
    internal void ();
    internal void (int );
    internal void ();
    internal bool ();
    internal bool ();
    internal void (string );
    internal void (string );
    internal void (bool );
    internal void ();
    internal void ();
    private void ();
    private string (string );
    internal void ();
    internal bool ();
    private string (string );
    internal void (string );
    internal void ();
    internal void ( );
    internal void ( );
    internal void ();
    private bool (Cell );
    internal bool ();
    internal void ();
    internal void ();
    private static bool (Style );
    private void (Cell );
    private void (Cell , object );
    internal void ();
    internal Style ();
    internal void ( ,  );
    internal void (bool );
    internal static string (string );
    internal void (StringBuilder );
    private void (object , Cell );
    internal void ();
    private void ();
    private void (CellArea );
    private void (CellArea );
    private void (string , Cell , string );
    private void (string , string , Cell );
    private void (string , Cell );
    internal void ();
    private void (int , Shape );
    internal void ();
    internal void ();
    internal int ();
    private void (Style , Font );
    internal void ();
    internal void ();
    internal bool ();
    internal void (bool );
    internal void (string );
    internal Worksheet ();
    internal void (Worksheet );
    internal Cells ();
    internal void (Cells );
    internal WorksheetCollection ();
    internal Workbook ();
    internal Hashtable ();
    internal Hashtable ();
    internal void (Hashtable );
    internal Hashtable ();
    internal void (Hashtable );
    internal int ();
    internal void (int );
    internal void ( );
    internal Style ( );
    internal void (int );
    internal void ();
    private int (CellArea );
    private int (Cell );
    private bool (Cell );
    private void (Cell );
    private void (Cell );
    private int (Cell );
    private int (int );
    internal void (Hashtable ,  , int );
}
internal class  :  {
    internal void (ChartType ,  );
}
internal class  : object {
    []
private ChartCollection ;
    []
private Chart ;
    []
private  ;
    internal Byte[] ;
    []
internal  ;
    internal ushort ;
    internal Byte[] ;
    internal ushort ;
    []
private Palette ;
    []
private WorksheetCollection ;
    []
private Worksheet ;
    private bool ;
    private int ;
    private ArrayList ;
    private bool ;
    private ArrayList ;
    private ArrayList ;
    private Hashtable ;
    private byte ;
    private int ;
    []
private  ;
    private bool ;
    private ArrayList ;
    private Boolean[] ;
    private int ;
    private int ;
    private  ;
    internal ( ,  , WorksheetCollection , Worksheet , Chart );
    internal void ();
    private void (int );
    private void (int );
    private void ();
    private void ();
    private void ( );
    private void ( );
    private void ();
    private void ();
    private void (ArrayList[] , Int32[] , object );
    private void ();
    private void (ArrayList[] , byte );
    private double (Int32[] );
    private string (Int32[] );
    private string (Int32[] );
    private void ();
    private void ();
    private void ();
    private void ();
    private void (ArrayList );
    private int ();
    private void ();
    private void ();
    private void ();
    private Byte[] ();
    internal static bool (Font , Color );
    private Font (int );
    private  (int );
    private  (Axis , bool );
    private void (Area );
    private void (Area );
    private void (Area );
    private void (Axis );
    private void (Axis );
    private Color (Axis , Boolean& );
    private void (Axis );
    private void (bool );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    internal virtual void ( );
    private void ( );
    private Int32[] ();
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ();
    private void (Legend );
    private void ();
    private void (Axis );
    private void (Axis );
    private void (int , int );
    private void (int );
    private void (Axis );
    private DateTime (int , TimeUnit );
    private void (Axis );
    private void ();
    private void ();
    private int (Byte[] , int );
    internal void ();
    private void ();
    internal virtual void (ArrayList );
    private void (ChartFrame );
    private void ();
    private void ( , bool );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void (Legend );
    private void (ChartFrame , bool );
    private void ( );
    private void (Series );
    private void (int );
    private void (Series );
    private void (Series , Series ,  );
    private void ();
    private void (Series , Series ,  );
    private void (Series );
    private void (object );
    private void ( );
    private Byte[] ();
    private Byte[] (Axis , UInt32 );
    private Byte[] ();
    private void ( );
    private void ( );
    private void (DataLabels );
    private void (Series );
    private string ();
    private void (Series );
    private void (ChartFrame );
    private void (Axis );
    private void (Line );
    private void ( );
    private void (Area );
    private void (Marker );
    private void ();
    private void ();
    private void ();
    private void ();
    private  (int );
    private string (int );
    private void ();
    private TimeUnit (int );
    private Color (Byte[] , int );
    private Color (Byte[] , int );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( );
}
internal class  : object {
    private  ;
    internal ( );
    internal Int32[] (UInt32 , UInt32 ,  );
    internal  ();
    internal void ( );
}
internal class  :  {
    internal void (UInt32 , int );
}
internal class  : object {
    private Byte[] ;
    private int ;
    private int ;
    public (Byte[] , int );
    public (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    protected virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal  ;
    internal  ;
    internal  ;
    internal ArrayList ;
    internal ArrayList ;
    internal ( );
    internal virtual void ();
    internal virtual void ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public static object (string , Type );
    public static object (Byte[] , Type );
    internal static string (string , string );
    internal static List`1<string> (string , string );
    private static string (string );
}
internal class  :  {
    private object ;
    public (object );
    public object ();
    public void (object );
    public virtual object ();
    public virtual void (object );
    private static bool (Type );
    public virtual  ( );
    public virtual  ();
}
internal class  :  {
    internal int ;
    internal RectangleAlignmentType ;
    internal int ;
    internal int ;
    internal bool ;
    internal int ;
    internal int ;
    internal bool ;
    internal (ShadowEffect );
    internal virtual  ();
    internal virtual void ( , CopyOptions );
    internal virtual bool ( );
    public virtual double ();
    public virtual void (double );
    public virtual double ();
    public virtual void (double );
    internal RectangleAlignmentType ();
    internal void (RectangleAlignmentType );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
}
internal class  :  {
    internal ( , Workbook , bool );
}
internal interface  {
    public abstract virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private int ;
    private  ;
    private ( );
    public (int ,  );
    public static  (object );
    private static  (int ,  );
    public virtual int ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ExternalConnection ;
    internal (ExternalConnection );
}
internal class  : object {
    private UInt32[] ;
    public sealed virtual void (Byte[] );
    public sealed virtual void (long , Byte[] );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
[]
protected object ;
    [DebuggerBrowsableAttribute("0")]
internal Rectangle ;
    [DebuggerBrowsableAttribute("0")]
protected Font ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
protected Font ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected Color ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
internal Rectangle ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , object );
    internal  ();
    internal  ();
    internal  ();
    public virtual Font ();
    public virtual void (Font );
    internal virtual Font ();
    internal void (Font );
    public virtual double ();
    public virtual void (double );
    public Font ();
    public void (Font );
    public virtual Color ();
    public virtual void (Color );
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    protected virtual int ();
    [("True")]
protected virtual int ();
    internal void (int );
    internal void (int );
    internal void (int );
    [("True")]
protected virtual int ();
    public virtual Rectangle ();
    public virtual void (Rectangle );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public  ();
    internal bool ();
    internal int ();
    internal int ();
    internal int ();
    internal int ();
    internal Size ();
    [("True")]
internal virtual void ();
    internal float ();
    internal void ();
    internal object ();
    internal  ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
}
internal class  : object {
    internal string ;
    internal int ;
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal string ;
    internal string ;
    internal bool ;
    internal string ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal string ;
    internal  ;
    internal bool ;
    internal string ;
    internal int ;
    internal double ;
    internal int ;
    internal double ;
    internal int ;
    internal double ;
    internal int ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    private MsoDrawingType ;
    internal AutoShapeType ;
    internal Shape ;
    internal  ();
    internal bool ();
    internal MsoDrawingType ();
    internal void (MsoDrawingType );
    internal AutoShapeType ();
    internal void (AutoShapeType );
    internal void (bool );
}
internal class  : object {
    internal static void (ushort , Byte[] );
    internal static void (ushort , Byte[] , int );
    internal static ushort (Byte[] );
    internal static ushort (Byte[] , int );
    internal static Byte[] (UInt32 );
    internal static void (UInt32 , Byte[] );
    internal static void (UInt32 , Byte[] , int );
    internal static Byte[] (UInt32[] );
    internal static void (UInt32[] , Byte[] , int );
    internal static UInt32 (Byte[] );
    internal static UInt32 (Byte[] , int );
    internal static void (Byte[] , int , UInt32[] );
    internal static Byte[] (ulong );
    internal static void (ulong , Byte[] );
    internal static void (ulong , Byte[] , int );
    internal static Byte[] (UInt64[] );
    internal static void (UInt64[] , Byte[] , int );
    internal static ulong (Byte[] );
    internal static ulong (Byte[] , int );
    internal static void (Byte[] , int , UInt64[] );
    internal static void (ushort , Byte[] );
    internal static void (ushort , Byte[] , int );
    internal static ushort (Byte[] );
    internal static ushort (Byte[] , int );
    internal static Byte[] (UInt32 );
    internal static void (UInt32 , Byte[] );
    internal static void (UInt32 , Byte[] , int );
    internal static Byte[] (UInt32[] );
    internal static void (UInt32[] , Byte[] , int );
    internal static UInt32 (Byte[] );
    internal static UInt32 (Byte[] , int );
    internal static void (Byte[] , int , UInt32[] );
    internal static void (Byte[] , int , UInt32[] , int , int );
    internal static UInt32[] (Byte[] , int , int );
    internal static Byte[] (ulong );
    internal static void (ulong , Byte[] );
    internal static void (ulong , Byte[] , int );
    internal static Byte[] (UInt64[] );
    internal static void (UInt64[] , Byte[] , int );
    internal static void (UInt64[] , int , int , Byte[] , int );
    internal static ulong (Byte[] );
    internal static ulong (Byte[] , int );
    internal static void (Byte[] , int , UInt64[] );
    internal static void (Byte[] , int , UInt64[] , int , int );
}
internal abstract class  : Stream {
    [DebuggerBrowsableAttribute("0")]
[]
protected Stream ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    protected (Stream );
    public virtual void Flush();
    public virtual long Seek(long , SeekOrigin );
    public virtual void SetLength(long );
    public virtual int Read(Byte[] , int , int );
    public virtual void Write(Byte[] , int , int );
    public virtual int ReadByte();
    public virtual void WriteByte(byte );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    public  ;
    public  ;
}
internal class  : object {
    []
private object ;
    []
private  ;
    []
private  ;
    []
private Worksheet ;
    private int ;
    private Byte[] ;
    private int ;
    private  ;
    private QueryTable ;
    internal ( , object );
    internal void ( ,  );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
}
internal class  : object {
    protected byte ;
    public (byte );
    public virtual byte ();
    public virtual void (Stream );
    public static  (Stream );
}
internal class  : object {
    public static void ( , bool );
    private static void (string , string ,  );
    private static void (string , string ,  );
}
internal class  : object {
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected Point ;
    protected Color ;
    protected Bitmap ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected int ;
    protected bool ;
    public sealed virtual void (Color , Color , int );
    public sealed virtual void (Brush , Color , int );
    public sealed virtual void (Color , Color , int );
    public sealed virtual void (Brush , Color , int );
    public sealed virtual void (Color , Color , Color , int , int );
    public sealed virtual void (Brush , Color , Color , int , int );
    public sealed virtual void (Bitmap );
    public sealed virtual void (Color , int , int );
    public sealed virtual void ();
    public sealed virtual void (bool );
    public sealed virtual void (bool );
    public sealed virtual void (Color , int , Point );
    public void (Color , int , Point );
    public void (Color , int , Point );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Point , StringFormat , Single& , Single& );
    public sealed virtual bool ( , FontFamily , FontStyle , int , string , Rectangle , StringFormat , Single& , Single& );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal abstract class  :  {
    internal int ;
    internal  ;
    internal  ;
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    protected abstract virtual  ();
    public abstract virtual int ();
    public abstract virtual string ();
    public virtual  (Char[] ,  );
    public virtual bool ();
    public virtual bool ();
    public virtual  ();
    public virtual bool ( ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual void ( );
    public virtual  (Char[] ,  );
    public  ();
    public  ();
    public void ( );
    public void ( );
    public virtual bool ( ,  );
    public virtual bool ( ,  );
    public virtual  (Char[] ,  ,  );
    public virtual  (Char[] ,  ,  );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
    internal static  ( , Char[] ,  , bool );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private static  ;
    private static ();
    public static Byte[] (Byte[] );
    public static int (Byte[] , Stream );
    public static Byte[] (Byte[] );
    public static int (Byte[] , Stream );
    public static Byte[] (string );
    public static int (string , Stream );
}
internal class  : object {
    internal int ;
    internal bool ;
    internal float ;
    internal float ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal int ;
    internal void ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
[]
internal SlicerCache ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
internal   { get; }
    internal (SlicerCache );
    public  (int );
    internal  (string , int );
    internal int ( );
    internal int (PivotTable );
    internal void (PivotTable );
    internal int (PivotTable );
    internal void (PivotTable );
}
internal class  : object {
    internal  ;
    internal  ;
    private  ;
    private  ;
    private  ;
    private Byte[] ;
    private  ;
    public (Byte[] );
    public (Stream );
    public ( );
}
internal abstract class  :  {
    public ( ,  );
    public sealed virtual  (bool );
    public sealed virtual  ();
    public sealed virtual bool ();
}
internal class  : object {
    private sealed virtual override int (object , object );
}
internal abstract class  : object {
    public static bool (Byte[] , int , Byte[] , int , Byte[] , int );
    private static UInt32 (Byte[] , int );
    private static void (Byte[] , int , UInt32[] );
    public static void ( , Byte[] );
    public static void (Byte[] , int , Byte[] , int );
    private static void (UInt32[] , UInt32[] );
    public static void ();
    public static void (Byte[] , int , Byte[] , int , Byte[] , int );
    public static void (Byte[] , int , Byte[] , int );
}
internal class  : object {
    private string ;
    internal  ;
    internal int ;
    private List`1<> ;
    private  ;
    private List`1<> ;
    private Hashtable ;
    internal ( );
    internal  ();
    internal void ( );
    internal string ();
    internal void (string );
    internal List`1<> ();
    internal void ( );
    internal void (string );
    internal bool (string );
    internal  (string );
    internal void ( );
    internal List`1<> ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private ( );
    public ( );
    public ([] );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal interface  {
    [("True")]
public abstract virtual void (Stream );
    public abstract virtual void ();
}
internal class  :  {
    private PointF ;
    private PointF ;
    private PointF ;
    public (PointF , PointF , PointF );
    internal PointF ();
    internal void (PointF );
    internal PointF ();
    internal void (PointF );
    internal PointF ();
    internal void (PointF );
    internal virtual string (string );
}
internal class  : object {
    private static IDictionary ;
    private  ;
    private int ;
    private UInt64[] ;
    private UInt64[] ;
    private Byte[] ;
    private [] ;
    private [] ;
    private  ;
    private Byte[] ;
    private static ();
    public (int , int );
    public ( );
    private static void (int , int , UInt64[] );
    private static int (int , int );
    private void ( );
    private static [] ([] , [] );
    public sealed virtual  ();
    public sealed virtual void ( );
    public int ();
    public int ();
    public void ( );
    private void (IDictionary );
    private void ();
    public void ();
    private void (int , Byte[] );
    private void (int );
    private void ();
    private void ();
    public void (byte );
    public void (Byte[] , int , int );
    public int (Byte[] , int );
    private void (ulong , Byte[] , int , int );
}
internal class  : object {
    private int ;
    public (int );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual bool (string );
    public sealed virtual bool ();
    public sealed virtual string ();
    public sealed virtual bool ( );
    public sealed virtual int (string );
    public sealed virtual int ( );
}
internal class  :  {
    internal ( );
}
internal enum  : Enum {
    public int value__;
}
internal abstract class  : object {
    internal static string ;
    internal int ;
    internal ArrayList ;
    []
internal WorksheetCollection ;
    internal int ;
    internal int ;
    internal int ;
    internal byte ;
    internal (WorksheetCollection );
    private static ();
    internal virtual  ( , string ,  );
    public int ();
    public void (int );
    public int ();
    public void (int );
    internal void (int , int , int , int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal virtual [] ( ,  ,  );
    internal abstract virtual bool ();
    internal Byte[] ( ,  ,  , bool );
    internal int ( ,  ,  , bool , bool );
    internal int ( , Byte[] , int );
    internal int ( , Byte[] , int );
    internal int ( , Byte[] , int );
    internal abstract virtual Int32[] (string , bool );
    internal static Int32[] (string , bool , int , int );
}
internal class  : object {
    []
private  ;
    []
private WorksheetCollection ;
    []
private FontSettingCollection ;
    private string ;
    []
private  ;
    []
private  ;
    private bool ;
    private Shape ;
    internal ( ,  , string ,  );
    internal void (string );
    internal void ();
    private TextParagraph ();
    private void (ShapeTextAlignment );
    private void ( );
    internal static void ( , string ,  );
    private static void ( , ShapeGuide );
    private void (TextParagraph , int );
    private void (TextTabStopCollection );
    private void (TextParagraph , int );
    private void (LineSpaceSizeType , int );
    private void (TextParagraph );
    internal void ( , FontSetting , int );
    internal static void ( , TextRunEquationNode );
    internal static void ( , string , Font ,  , Workbook );
    private static void ( , string , string );
    internal static void ( ,  );
}
internal class  :  {
    protected internal UInt64[] ;
    public (BigInteger );
    protected internal (UInt64[] );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    [ObsoleteAttribute("Use constructor which takes 'orderBitLength' instead, to guarantee correct encoding")]
public (BigInteger );
    public (int , BigInteger );
    [ObsoleteAttribute("Use constructor which takes 'orderBitLength' instead, to guarantee correct encoding")]
public (BigInteger ,  );
    [ObsoleteAttribute("Use constructor which takes 'orderBitLength' instead, to guarantee correct encoding")]
public (BigInteger ,  ,  );
    public (int , BigInteger ,  );
    public (int , BigInteger ,  ,  );
    public static  (object );
    public virtual BigInteger ();
    public virtual  ();
    public virtual  ();
    private  (int );
    public virtual  ();
}
internal class  :  {
    private  ;
    private int ;
    private int ;
    public ( ,  , int , int );
    public ( ,  ,  , int , int );
    public ( ,  ,  , int , int , bool );
    private ( , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual bool ( );
    public virtual  (Double[] ,  ,  );
    public virtual  (Double[][] ,  ,  );
    public static  ( , int , int , Double[][] ,  ,  );
}
internal class  : object {
    private sealed virtual override int (object , object );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal string ;
    internal bool ;
    internal  ;
    internal bool ;
    internal string ;
    internal  ;
    internal  ;
    internal  ;
    internal bool ;
    internal bool ;
    internal  ();
    internal  ();
    internal void ( );
}
internal class  : object {
    internal float ;
    internal Color ;
}
internal class  : object {
    private  ;
    public ( );
    public sealed virtual Stream ();
    public sealed virtual object ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected Byte[] ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    public (Byte[] , int , int );
    internal int ();
    internal byte (int );
    public virtual void (bool );
    public virtual bool ( , int );
    public virtual  ();
    public virtual void ( );
    public virtual  ();
    public virtual object ();
    public virtual object ( );
    public virtual  ( );
    public virtual byte ();
    public virtual bool ();
    public virtual bool ( , bool );
    public virtual  ( );
    public virtual void (StringBuilder ,  );
    public virtual bool ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal void ( );
    public  (int );
    internal  ();
    internal void ( , CopyOptions );
}
internal class  : object {
    internal static IList ;
    private IList ;
    private static ();
    public (ICollection );
    public (Stream );
    public (Stream , string );
    private static IList (IList );
    public virtual IEnumerable ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    public virtual Byte[] ();
    public virtual Byte[] (string );
    public virtual IList ();
    private  ( );
    private Byte[] ( );
}
internal class  : object {
    private  ;
    private XmlMap ;
    private string ;
    internal ( , XmlMap );
    internal Hashtable ();
    private void (Hashtable , Hashtable );
    private Hashtable (Hashtable );
    private  ( ,  );
    private  (Hashtable ,  ,  , string );
    private void (Hashtable );
    private void (Hashtable , string ,  );
    private void ( , string , Hashtable , Hashtable );
    private static void (Hashtable , string , string );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    public ( );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (int );
    protected virtual void ( );
    protected virtual Byte[] ();
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual ImageOrPrintOptions ();
    public abstract virtual  ();
    public abstract virtual void ( );
    [("True")]
public abstract virtual void ();
    [("True")]
public abstract virtual Bitmap ();
    public abstract virtual void (RectangleF , string );
    public abstract virtual void (Color );
    [("True")]
public abstract virtual void ();
    public abstract virtual void ( , Rectangle , float , float );
    public abstract virtual void ( , RectangleF , float , float );
    public abstract virtual void ( , int , int , int , int , int , int );
    public abstract virtual void ( , float , float , float , float , float , float );
    public abstract virtual void ( , Point , Point , Point , Point );
    public abstract virtual void ( , PointF , PointF , PointF , PointF );
    public abstract virtual void ( , float , float , float , float , float , float , float , float );
    public abstract virtual void ( , Point[] );
    public abstract virtual void ( , PointF[] );
    public abstract virtual void ( , Point[] );
    public abstract virtual void ( , PointF[] );
    public abstract virtual void ( , Point[] , float , FillMode );
    public abstract virtual void ( , PointF[] , float , FillMode );
    public abstract virtual void ( , Point[] );
    public abstract virtual void ( , PointF[] );
    public abstract virtual void ( , Point[] , float );
    public abstract virtual void ( , PointF[] , float );
    public abstract virtual void ( , PointF[] , int , int );
    public abstract virtual void ( , Point[] , int , int , float );
    public abstract virtual void ( , PointF[] , int , int , float );
    public abstract virtual void ( , Rectangle );
    public abstract virtual void ( , RectangleF );
    public abstract virtual void ( , int , int , int , int );
    public abstract virtual void ( , float , float , float , float );
    public abstract virtual void (Image , Point );
    public abstract virtual void (Image , PointF );
    public abstract virtual void (Image , Rectangle );
    public abstract virtual void (Image , RectangleF );
    public abstract virtual void (Image , int , int );
    public abstract virtual void (Image , float , float );
    public abstract virtual void (Image , int , int , int , int );
    public abstract virtual void (Image , float , float , float , float );
    public abstract virtual void (Image , Rectangle , float , float , float , float , GraphicsUnit );
    public abstract virtual void (Image , Rectangle , int , int , int , int , GraphicsUnit );
    public abstract virtual void (Image , Rectangle , Rectangle , GraphicsUnit );
    public abstract virtual void (Image , RectangleF , RectangleF , GraphicsUnit );
    public abstract virtual void (Image , Rectangle , int , int , int , int , GraphicsUnit , ImageAttributes );
    public abstract virtual void ( , Point , Point );
    public abstract virtual void ( , PointF , PointF );
    public abstract virtual void ( , int , int , int , int );
    public abstract virtual void ( , float , float , float , float );
    public abstract virtual void ( , Point[] );
    public abstract virtual void ( , PointF[] );
    public abstract virtual void ( , GraphicsPath );
    public abstract virtual void ( , Rectangle , float , float );
    public abstract virtual void ( , RectangleF , float , float );
    public abstract virtual void ( , int , int , int , int , int , int );
    public abstract virtual void ( , float , float , float , float , float , float );
    public abstract virtual void ( , Point[] );
    public abstract virtual void ( , PointF[] );
    public abstract virtual void ( , Rectangle );
    public abstract virtual void ( , int , int , int , int );
    public abstract virtual void ( , float , float , float , float );
    public abstract virtual void ( , Rectangle[] );
    public abstract virtual void ( , RectangleF[] );
    public abstract virtual void (string , Font , Brush , PointF );
    public abstract virtual void (string , Font , Brush , RectangleF );
    public abstract virtual void (string , Font , Brush , Rectangle );
    public abstract virtual void (string , Font , Brush , PointF , StringFormat );
    public abstract virtual void (string , Font , Brush , RectangleF , StringFormat );
    public abstract virtual void (string , Font , Brush , Rectangle , StringFormat );
    public abstract virtual void (string , Font , Brush , float , float );
    public abstract virtual void (string , Font , Brush , float , float , StringFormat );
    public abstract virtual void (Rectangle );
    public abstract virtual void (Region );
    public abstract virtual void (Brush , Point[] );
    public abstract virtual void (Brush , PointF[] );
    public abstract virtual void (Brush , Point[] , FillMode );
    public abstract virtual void (Brush , PointF[] , FillMode );
    public abstract virtual void (Brush , Point[] , FillMode , float );
    public abstract virtual void (Brush , PointF[] , FillMode , float );
    public abstract virtual void (Brush , Rectangle );
    public abstract virtual void (Brush , RectangleF );
    public abstract virtual void (Brush , int , int , int , int );
    public abstract virtual void (Brush , float , float , float , float );
    public abstract virtual void (Brush , GraphicsPath );
    public abstract virtual void (Brush , Rectangle , float , float );
    public abstract virtual void (Brush , int , int , int , int , int , int );
    public abstract virtual void (Brush , float , float , float , float , float , float );
    public abstract virtual void (Brush , Point[] );
    public abstract virtual void (Brush , PointF[] );
    public abstract virtual void (Brush , Point[] , FillMode );
    public abstract virtual void (Brush , PointF[] , FillMode );
    public abstract virtual void (Brush , Rectangle );
    public abstract virtual void (Brush , RectangleF );
    public abstract virtual void (Brush , int , int , int , int );
    public abstract virtual void (Brush , float , float , float , float );
    public abstract virtual void (Brush , Rectangle[] );
    public abstract virtual void (Brush , RectangleF[] );
    public abstract virtual void (Brush , Region );
    public abstract virtual void ();
    public abstract virtual void (FlushIntention );
    public abstract virtual Color (Color );
    public abstract virtual void (Rectangle );
    public abstract virtual void (RectangleF );
    public abstract virtual void (Region );
    public abstract virtual bool (Point );
    public abstract virtual bool (PointF );
    public abstract virtual bool (Rectangle );
    public abstract virtual bool (RectangleF );
    public abstract virtual bool (int , int );
    public abstract virtual bool (float , float );
    public abstract virtual bool (int , int , int , int );
    public abstract virtual bool (float , float , float , float );
    public abstract virtual Region[] (string , Font , RectangleF , StringFormat );
    public abstract virtual SizeF (string , Font );
    public abstract virtual SizeF (string , Font , SizeF );
    public abstract virtual SizeF (string , Font , int );
    public abstract virtual SizeF (string , Font , PointF , StringFormat );
    public abstract virtual SizeF (string , Font , SizeF , StringFormat );
    public abstract virtual SizeF (string , Font , int , StringFormat );
    public abstract virtual SizeF (string , Font , SizeF , StringFormat , Int32& , Int32& );
    public abstract virtual void (Matrix );
    public abstract virtual void (Matrix , MatrixOrder );
    public abstract virtual void ();
    public abstract virtual void ();
    public abstract virtual void (GraphicsState );
    public abstract virtual void (float );
    public abstract virtual void (float , MatrixOrder );
    public abstract virtual GraphicsState ();
    public abstract virtual void (float , float );
    public abstract virtual void (float , float , MatrixOrder );
    public abstract virtual void (GraphicsPath );
    public abstract virtual void ( );
    public abstract virtual void (Rectangle );
    public abstract virtual void (RectangleF );
    public abstract virtual void (GraphicsPath , CombineMode );
    public abstract virtual void ( , CombineMode );
    public abstract virtual void (Rectangle , CombineMode );
    public abstract virtual void (RectangleF , CombineMode );
    public abstract virtual void (Region , CombineMode );
    public abstract virtual void (int , int );
    public abstract virtual void (float , float );
    public abstract virtual void (float , float );
    public abstract virtual void (float , float , MatrixOrder );
    public abstract virtual Region ();
    public abstract virtual void (Region );
    public abstract virtual RectangleF ();
    public abstract virtual float ();
    public abstract virtual float ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual GraphicsUnit ();
    public abstract virtual void (GraphicsUnit );
    public abstract virtual float ();
    public abstract virtual void (float );
    public abstract virtual Point ();
    public abstract virtual void (Point );
    public abstract virtual SmoothingMode ();
    public abstract virtual void (SmoothingMode );
    public abstract virtual TextRenderingHint ();
    public abstract virtual void (TextRenderingHint );
    public abstract virtual void (SmoothingMode , bool );
    public abstract virtual void (TextRenderingHint , bool );
    public abstract virtual Matrix ();
    public abstract virtual void (Matrix );
    public abstract virtual RectangleF ();
    public abstract virtual CompositingQuality ();
    public abstract virtual void (CompositingQuality );
    public abstract virtual int ();
    public abstract virtual void (int );
}
internal class  : object {
    []
private Workbook ;
    []
private RevisionLogCollection ;
    []
private  ;
    private  ;
    private Byte[] ;
    internal (Workbook );
    internal void ( );
    private void ();
    private void ();
    private void ();
    private void (RevisionLog );
    private void (RevisionCellMove );
    private void (RevisionInsertDelete );
    private int ( , int );
    private void (RevisionCellChange );
    private int ( , int , bool );
    private int ( , bool );
    private void (Font );
    private void (RevisionFormat );
    private int (ArrayList , Byte[] , int );
    private void (RevisionCellComment );
    private void (RevisionCustomView );
    private void (RevisionInsertSheet );
    private void (RevisionRenameSheet );
    private static void (CellArea , Byte[] , int );
    private void (RevisionDefinedName );
    private static int (Byte[] , int , string );
    private int (string );
    private int (string );
    private void (RevisionAutoFormat );
    private void (RevisionQueryTable );
    private static void (DateTime , Byte[] , int );
    private void (RevisionLog );
    private void (RevisionLog );
}
internal class  :  {
    private  ;
    public (Stream );
    public ( );
    protected virtual bool ( );
    protected virtual bool ();
    private Byte[] (string );
    private string (Stream );
    internal static bool ( );
}
internal class  :  {
    internal ( );
}
internal class  :  {
    private int ;
    public (Byte[] , Byte[] , int , int );
    public int ();
}
internal class  : object {
    internal static Color ();
    internal static string (Color );
    internal static bool (Color );
    internal static byte (Color );
    internal static byte (Color );
    internal static byte (Color );
    internal static byte (Color );
    internal static bool (Color , Color );
}
internal class  :  {
    internal ( );
    internal  ();
    internal  ();
}
internal class  : object {
    private  ;
    private static string ;
    public sealed virtual string (string );
    public sealed virtual void (WebRequest , Stream );
    public sealed virtual void (HttpWebResponse , Stream );
    private void ();
}
internal class  :  {
    private Array ;
    public Array ();
    public void (Array );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
internal class  : Geometry {
    [DebuggerBrowsableAttribute("0")]
internal AutoShapeType ;
    internal AutoShapeType ();
    internal void (AutoShapeType );
    internal virtual bool ajaxk7kfp4zxj7ddd2gwkusgbhdmjk38();
    internal virtual void ajaxk7kfp4zxj7ddd2gwkusgbhdmjk38(Geometry );
}
internal class  :  {
    internal void (DateTimeGroupItem );
}
internal abstract class  : object {
    private  modreq(System.Runtime.CompilerServices.IsVolatile) ;
    public virtual void ();
    public virtual void ( );
    public virtual bool ();
    public virtual bool ();
    public virtual void (bool );
    public abstract virtual  ();
    public abstract virtual  ();
    public virtual void (byte , byte , string , Exception );
    public virtual void (byte , byte );
    public virtual void ();
}
[("And")]
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    public void (Color , float );
    internal  (int );
    internal bool ( );
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (QueryTable );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private UInt32 ;
    private int ;
    private ulong ;
    private Byte[] ;
    private int ;
    private ulong ;
    private ulong ;
    public ( );
    public ( ,  );
    public virtual string ();
    public sealed virtual  ();
    public virtual int ();
    public virtual void (bool ,  );
    public virtual Byte[] ();
    public virtual int (int );
    public virtual int (int );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    private void ();
    public virtual int (byte , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public sealed virtual int (Byte[] , int );
    public virtual void ();
    private void (bool );
    private void (Byte[] , int , Byte[] , int );
    private void (Byte[] , int , int , Byte[] , int );
    private void (Byte[] , Byte[] , int );
    private void (Byte[] , Byte[] );
    private void (Byte[] , Byte[] , int );
    private void (Byte[] , Byte[] , int , int );
    private void (Byte[] );
    private void ();
}
internal class  :  {
    internal ( ,  );
    internal  ();
    public  (int );
    internal  ();
    internal int ( );
    public virtual  (double );
    internal ArrayList ();
    internal double ();
    internal ArrayList ();
    internal double ();
}
internal static class  : object {
}
internal abstract class  : object {
    public abstract virtual int (string , char );
    public abstract virtual int (string , string );
    public abstract virtual bool (string );
    public abstract virtual int (Char[] );
    protected abstract virtual int (string );
    public virtual bool ();
    public sealed virtual int (string , bool );
    protected virtual double ( );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal ArrayList ;
}
internal abstract class  :  {
    private BigInteger[] ;
    protected (int , int , int , int );
    public static BigInteger (int , Int32[] , BigInteger );
    private static  (int , int , int , int );
    public virtual bool (BigInteger );
    [ObsoleteAttribute("Per-point compression property will be removed")]
public virtual  (BigInteger , BigInteger , bool );
    protected virtual  (int , BigInteger );
    internal  ( );
    internal virtual BigInteger[] ();
    public virtual bool ();
}
internal abstract class  :  {
    protected ( );
    internal abstract virtual string ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    internal string ;
    internal Byte[] ;
    internal Byte[] ;
    internal int ;
    internal bool ();
    internal int ();
    internal void (int );
    internal void ( );
    internal bool (string );
}
internal class  : object {
    private RevisionLogCollection ;
    private int ;
    private Byte[] ;
    private int ;
    private  ;
    internal (RevisionLogCollection );
    internal void ( );
    private void ();
}
internal abstract class  : object {
    public static bool (byte );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (string );
    public string (string , string , bool );
    public void (string , string , string , bool );
    public  (string );
    public  (string );
    []
private sealed virtual override IEnumerator ();
    public int ();
    public string ();
}
internal class  : ValueType {
    internal static void ( , Rectangle& );
    internal static void (Rectangle& ,  , int );
    internal static void ( ,  );
    private static string ( , int , double );
    internal static Rectangle ( ,  , Rectangle , Double[] , Color[] , String[] );
    private static ArrayList ( ,  );
    private static SizeF (RectangleF ,  );
    private static SizeF (Rectangle ,  );
    private static void (RectangleF , RectangleF , SizeF& );
}
internal class  :  {
    private int ;
    private  ;
    private ( );
    public ( );
    public (int ,  );
    public static  (object );
    public virtual int ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal ushort ;
    internal string ;
    internal byte ;
    internal byte ;
    internal [] ;
    internal  ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    internal static [] ;
    private static [] ;
    private static Hashtable ;
    internal (ushort , string , int , int , [] ,  );
    private static ();
    internal static void ();
    internal static void ();
    internal static bool (string );
    internal static bool ( );
    internal static void (string , int , int , [] ,  );
    internal static void ();
    internal static bool (string );
    internal static  (int );
    internal static  (string ,  );
    internal static bool (int );
}
internal class  :  {
    internal void (PivotFieldCollection );
}
internal class  : object {
    private string ;
    private string ;
    public (string , string );
    public virtual string ();
    public virtual string ();
    public virtual int GetHashCode();
    public virtual bool Equals(object );
    private int (string );
}
internal class  : object {
    internal string ;
    internal string ;
    internal Hashtable ;
    internal (string );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (WorksheetCollection );
    internal WorksheetCollection ();
    internal string ();
    internal void (string );
    internal void ( );
    internal int ( );
    public  (int );
    public  (string );
    internal  (SlicerStyleType );
}
internal class  : object {
    protected  ;
    protected Stream ;
    protected (Stream );
    public void ();
}
internal class  :  {
    private  ;
    private  ;
    private bool ;
    public ( ,  ,  );
    private ( );
    public virtual  ( );
    internal  ( );
    protected virtual bool ( );
    protected virtual  ( );
    protected virtual  ();
    protected virtual void ( );
    protected virtual bool ();
    protected virtual void ( );
    public sealed virtual  ( );
    public sealed virtual  ( , bool );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    protected  ;
    public ( );
    public virtual  ( );
}
internal class  : object {
    private  ;
    private Char[] ;
    private int ;
    internal int ;
    internal bool ;
    internal  ;
    internal (string ,  );
    internal (Stream ,  );
    internal void ();
    private string (char );
    internal  ();
    private  (string );
    private  ();
    private  ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    public void ( );
    public void (string ,  );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public void ( );
    public  ();
}
internal class  : object {
    private static string (Style , TextAlignmentType , TextAlignmentType , Font );
    private static void ( , string , int , int );
    internal static string (Cell , bool );
    private static void (int , TextParagraph ,  );
    private static void (string , TextAlignmentType , TextAlignmentType , FontSetting ,  );
    internal static string (FontSettingCollection );
    internal static string (FontSettingCollection );
    private static Color (string , Color , Int32[] );
    internal static void (WorksheetCollection , Font , Hashtable , Hashtable );
    internal static void (StringBuilder , Hashtable );
    internal static Font (WorksheetCollection , Font , Hashtable , Shape );
    internal static Font (WorksheetCollection , Font , Hashtable );
    internal static string (Shape , WorksheetCollection , Font , Char[] , ArrayList , Hashtable );
    private static int (Char[] , int , StringBuilder );
    private static void (Int32& , int , WorksheetCollection , ArrayList , Font , StringBuilder );
    private static Color (Color , Int32[] );
    internal static bool (Char[] );
    internal static void (Cell , string , Hashtable );
    internal static void (Shape , FontSettingCollection , string );
}
internal class  :  {
}
internal class  : object {
    private static Boolean[] ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    private bool ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private static ();
    public ( );
    public ( , int );
    public ( , Byte[] );
    public static bool ();
    public static void (bool );
    public  ();
    public sealed virtual string ();
    public sealed virtual void (bool ,  );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual Byte[] (Byte[] , int , int );
    private Byte[] (Byte[] , int , int );
    private static int (Byte[] , int );
    private Byte[] (Byte[] , int , int );
    private Byte[] (Byte[] , int , int );
    private int (byte , Byte[] );
}
internal class  : object {
    internal  ;
    internal  ;
    internal void ();
    public sealed virtual void ( ,  );
    public sealed virtual void ( ,  );
    public sealed virtual void ( ,  );
    public sealed virtual void ( ,  );
}
internal class  :  {
    internal ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private  ;
    private char ;
    private char ;
    private StringBuilder ;
    private int ;
    private int ;
    private string ;
    private string ;
    private int ;
    private int ;
    public ( ,  , StringBuilder );
    public ( ,  , StringBuilder , int , int );
    public sealed virtual void (int );
    public sealed virtual bool (int , int );
    public sealed virtual bool (int ,  );
    public sealed virtual bool (int , int , int );
    public sealed virtual bool (int , int );
    public sealed virtual bool (int , int );
    public sealed virtual bool (int , int , int );
    public sealed virtual object ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal ( );
    internal (Workbook );
    internal virtual void ( );
    private bool ();
    internal static string ();
    private void ();
    private void ( );
    private void ( ,  );
    private void ( , string , string );
    private void ( , string , string , string , string );
    private  ( , string , string , string );
}
internal class  : object {
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    private static void (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] );
    public static UInt32 (UInt64[] );
    protected static void (UInt64[] );
    protected static void (UInt64[] , UInt64[] );
    protected static void (UInt64[] , UInt64[] , UInt64[] );
    protected static void (ulong , ulong , UInt64[] , int );
    protected static void (UInt64[] , UInt64[] );
}
internal class  : object {
    private static String[] ;
    protected  ;
    protected int ;
    protected Int32[] ;
    protected int ;
    protected Int32[] ;
    protected int ;
    protected Int32[] ;
    protected int ;
    protected Int32[] ;
    protected [] ;
    public (Byte[] );
    public ( , int , int );
    private static ();
    public void ();
    public bool ();
    public bool ();
    protected  ();
    protected Int32[] (int );
    protected int (int , int );
    protected int (int , int );
    protected int (int );
    protected int (int );
    private int ();
    protected void (int );
    protected int ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private  ;
    private  ;
    public ( );
    public ( ,  );
    private static ();
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    internal ( ,  ,  , Int32[] );
    private ( , int ,  );
    protected virtual  ( , bool );
    public virtual bool (int , int );
    private bool (int , int );
    public virtual bool ();
    public virtual bool ();
}
internal class  :  {
    internal void (Column , int , int , int , int );
}
internal class  : object {
    internal float ;
    internal void ( );
}
internal class  : object {
    internal  ;
    internal string ;
    internal bool ;
    internal bool ;
    internal float ;
    internal bool ;
    internal bool ;
    internal float ;
    internal float ;
    internal Color ;
    internal float ;
    internal Color ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal float ;
}
internal class  : object {
    private  ;
    private  ;
    public virtual void ( );
    public virtual int ();
    public virtual BigInteger ( );
}
internal abstract class  :  {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    public virtual bool ();
    public abstract virtual  ();
    public abstract virtual  ();
    protected abstract virtual  ( );
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public virtual bool ();
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ( , int );
    public virtual  ();
    public virtual void ( );
    public virtual  (int );
    public virtual  ( );
    public virtual void ();
    public void ();
    public virtual  ();
    public virtual  ( );
    public virtual void ();
    public virtual bool ( );
    public virtual  ( , int );
    public virtual  ( , int , Workbook );
    public virtual  ( , bool );
    public virtual bool ( , int , int , bool );
    public virtual bool ( , bool );
    public virtual void (StringBuilder ,  );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual bool ( );
    public virtual  ( );
    public virtual void ( );
}
internal abstract class  : object {
    internal bool ;
    internal bool ;
    internal abstract virtual  ();
    internal virtual double ();
    internal virtual short ();
    internal virtual string ();
    internal virtual string ();
    internal virtual DateTime ();
    internal virtual byte ();
    internal virtual bool ();
    internal virtual bool ();
    internal string (string );
    internal abstract virtual object ();
    internal virtual bool ( );
    internal virtual void ( );
}
internal class  : object {
    public virtual  ( ,  );
    internal static void ( );
}
internal class  : object {
    private string ;
    private string ;
    internal string ;
    internal (string , string );
    internal (string , string , string );
    public string ();
    public void (string );
    public string ();
    public void (string );
}
internal class  : object {
    private int ;
    private int ;
    private double ;
    private double ;
    private double ;
    private double ;
    internal int ;
    private ArrayList ;
    public int ();
    public void (int );
    public int ();
    public void (int );
    internal ArrayList ();
    public ArrayList ( );
    public ArrayList (ArrayList ,  );
    public ArrayList (ArrayList );
    private void ( , double );
    public ArrayList (ArrayList );
    private double (ArrayList , int , int , bool );
    private bool (double , double );
}
internal class  : object {
    private static Int32[] ;
    private long ;
    private Byte[] ;
    private int ;
    internal  ;
    internal  ;
    internal IList ;
    internal IList ;
    internal IList ;
    internal IList ;
    internal IList ;
    public ( ,  , DateTime );
    public ( );
    internal ( ,  , IList );
    internal ( ,  , IList );
    internal ( );
    internal ( ,  , IList , IList , IList , IList );
    internal ( , IList , IList );
    private static ();
    public static Byte[] ( );
    private static void ( , BigInteger );
    private void ();
    public int ();
    public DateTime ();
    public int ();
    public Byte[] ();
    public long ();
    private long (bool , int );
    public long ();
    public Byte[] ();
    public bool ();
    public bool ();
    public  ();
    public int ();
    public  ();
    private  (string );
    public IEnumerable ();
    public IEnumerable ();
    public IEnumerable (string );
    public IEnumerable ( );
    public IEnumerable (int );
    public IEnumerable ();
    public IEnumerable ();
    public  ();
    public Byte[] ();
    public void (Stream );
    public bool ();
    public static  ( , string ,  );
    public static  ( ,  ,  );
    private static  ( , object ,  );
    public static  ( ,  );
    public static  ( , string );
    private static  ( , object );
    public static  ( , string ,  );
    public static  ( ,  ,  );
    private static  ( , object ,  );
    public static  ( ,  );
    public static  ( ,  );
}
internal class  : object {
    []
private ColumnCollection ;
    []
private WorksheetCollection ;
    private  ;
    private  ;
    private double ;
    internal (Cells );
    public  ();
    public sealed virtual bool (int );
    public sealed virtual double (int );
    public sealed virtual int (int );
    public sealed virtual double (int );
    public sealed virtual double (int , int );
    public sealed virtual int (int , int );
    public sealed virtual double (int , int );
    public sealed virtual void (Int32[] );
    public sealed virtual void (Int32[] );
}
internal class  : object {
    internal int ;
    internal  ;
    internal string ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ( );
}
internal class  : object {
    private  ;
    public sealed virtual void ( );
    public sealed virtual  ();
}
internal class  : object {
    internal string ;
    internal Stream ;
    internal string ;
    internal string ;
    internal int ;
    internal int ;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void ();
}
internal class  : object {
    private  ;
    public sealed virtual  ( );
}
internal class  : object {
    internal string ;
    internal string ;
    public (string , string );
}
internal class  :  {
    internal (PivotAreaFilter );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    public ( ,  );
    public ( ,  ,  );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    internal static string ();
    internal static string ();
    internal static string (string );
    internal static string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  : object {
    public static Int32[] ;
    internal int ;
    private static ();
    internal void ();
    internal int ();
    internal int ();
    internal void (int );
    internal void (int );
}
internal class  :  {
    private string ;
    public string ();
    public void (string );
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    public (bool ,  , bool );
    public bool ();
    [CompilerGeneratedAttribute]
public sealed virtual int ();
    [CompilerGeneratedAttribute]
public sealed virtual int ();
    private static int (int , bool );
    private static int (int , bool );
    public sealed virtual int (Byte[] , int , int , Byte[] , int , RandomNumberGenerator );
    private void ();
    private void ();
    protected virtual  (bool ,  );
    protected virtual  (bool ,  );
    public sealed virtual void Dispose();
}
internal class  : object {
    []
private Shape ;
    public (Shape );
    internal  ();
    public  ();
    public void ( );
    internal Color ();
    internal void (Color );
    internal Color ();
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
internal class  :  {
    internal void (Stream , int , int ,  );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private bool ;
    private static IDictionary ;
    private static ();
    public ( );
    public ( ,  );
    public ( ,  );
    public ( ,  ,  );
    public ( ,  ,  );
    public ( ,  ,  );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public virtual void ();
    private Byte[] (Byte[] );
}
[("And")]
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    internal static UInt32 (Byte[] , int , int );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType , ChartType );
    internal static bool (ChartType , ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
    internal static bool (ChartType );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private bool ;
    private int ;
    private  ;
    public ( , int );
    public  ();
    public sealed virtual void (bool ,  );
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual int ();
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public int (Byte[] , int , Byte[] , int );
    public int (Byte[] , int , Byte[] , int );
    public sealed virtual void ();
}
internal class  : ValueType {
    internal static void ( ,  , int , int , int , bool , bool );
    private static void ( , ArrayList[] , float , float , float , bool ,  , double ,  ,  , float , Rectangle , bool );
    internal static Size ( , IList , int ,  , SizeF );
    private static void ( , List`1<> , float , float , float , bool ,  , double );
    internal static Size ( ,  );
    private static SizeF ( ,  );
    internal static int ( ,  , Rectangle );
}
[("And")]
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    public sealed virtual bool (int );
    public sealed virtual bool ();
    public sealed virtual  ();
}
[("Or")]
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    protected string ;
    protected Byte[] ;
    public (string , Byte[] );
    public virtual string ();
    public virtual Byte[] ();
    public virtual void (Stream );
    public static  ( , Stream );
}
internal abstract class  : object {
    internal virtual MemoryStream (MemoryStream );
    internal virtual void ( );
    [("True")]
internal static  ( ,  );
    [("True")]
internal static  ( );
    [("True")]
protected abstract virtual  (Stream );
    protected abstract virtual string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public ( );
    public static  (object );
    public [] ();
    public [] ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    []
private  ;
    []
private  ;
    []
private  ;
    []
private  ;
    private int ;
    private Byte[] ;
    private int ;
    internal string ;
    internal bool ;
    private Hashtable ;
    private  ;
    private  ;
    internal int ;
    internal ( ,  , Hashtable );
    internal  ();
    internal void ( );
    internal void ( );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ( , int );
    private void ( );
    private void ( );
    private String[] (int );
    private void ();
    private void ();
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ();
    private void ( );
    private void (PivotArea );
    private DateTime (Byte[] , int );
}
internal abstract class  : object {
}
internal class  : BinaryReader {
    internal (Stream );
    internal Int32[] ();
    internal Int32[] (int );
    internal string (int , Encoding );
    internal PointF ();
    internal SizeF ();
    internal RectangleF ();
    internal RectangleF ();
    internal Color ();
    internal PointF[] ();
    internal PointF[] (int );
    internal PointF[][] ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private Bitmap ;
    [DebuggerBrowsableAttribute("0")]
private ImageFormat ;
    [DebuggerBrowsableAttribute("0")]
private ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    internal (Graphics , Bitmap , ImageFormat , ImageOrPrintOptions , Stream ,  ,  );
    public virtual ImageOrPrintOptions ();
    public virtual void ();
    internal void (bool );
    public virtual Bitmap ();
    public virtual void ();
    public virtual void Dispose();
    public virtual void (SmoothingMode , bool );
    public virtual void (TextRenderingHint , bool );
    private void (Bitmap , Stream );
    private void (Bitmap , Stream );
    private void (Bitmap , Stream );
    internal Bitmap (Bitmap );
    internal Bitmap (Bitmap );
    private Bitmap (Bitmap );
    private ImageCodecInfo (string );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public virtual  (int );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    private void ( , int , bool ,  );
}
internal abstract class  :  {
    internal int ;
    internal [] ;
    protected ([] );
    internal static  ( );
    internal static  ( , [] ,  );
    internal static  ( , [] );
    internal static  (Byte[] , int , int , [] );
    internal abstract virtual  ();
    protected bool (Char[] ,  , int , int , int , int );
    protected abstract virtual void (StringBuilder );
    protected virtual void (Char[] ,  , StringBuilder );
    public virtual byte ();
    public virtual bool ( ,  );
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    internal void (int );
    internal void (int );
    internal void ( );
    internal int ();
    internal void ( );
    protected int ();
    protected int ();
    public virtual void ( );
    public virtual  (Char[] ,  );
    public virtual void (Char[] ,  , StringBuilder );
    public virtual void (StringBuilder );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    internal Byte[] ;
    internal int ;
    internal  ;
    public ( , int );
    public int (byte , Byte[] , int );
    public int (Byte[] , int , int , Byte[] , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
}
internal interface  {
    public abstract virtual Byte[] ();
}
internal class  :  {
    private int ;
    public ( ,  , [] , int , int , int );
    public virtual  ( );
    public virtual void ( );
    public virtual bool (int ,  );
}
internal class  : object {
    internal static string (TickLabelAlignmentType );
    internal static string (int , int );
    internal static string (MsoLineStyle );
    internal static MsoLineStyle (string );
    internal static string (MsoLineDashStyle );
    internal static MsoLineDashStyle (string , LineCapType );
    internal static LineCapType (string );
    internal static string (LineCapType );
    internal static  (string );
    internal static string ( );
    internal static MsoArrowheadStyle (string );
    internal static string (MsoArrowheadStyle );
    internal static MsoArrowheadStyle (string );
    internal static string (MsoArrowheadStyle );
    internal static MsoArrowheadLength (string );
    internal static string (MsoArrowheadLength );
    internal static MsoArrowheadWidth (string );
    internal static string (MsoArrowheadWidth );
    internal  (MsoArrowheadWidth , MsoArrowheadLength );
}
internal class  :  {
    internal static string ;
    private static ();
    protected virtual  ( , BigInteger );
    private  ( ,  , sbyte , sbyte );
    private static  ( , SByte[] );
}
internal class  :  {
    public static  ;
    public static  ;
    internal bool ;
    internal (bool );
    private static ();
    internal virtual  ();
    internal virtual object ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private BigInteger ;
    private  ;
    private  ;
    private string ;
    private  ;
    private ( );
    public ( , BigInteger ,  ,  , string ,  );
    public static  (object );
    public  ();
    public BigInteger ();
    public  ();
    public  ();
    public string ();
    public  ();
    public virtual  ();
}
internal class  : object {
    private long ;
    private long ;
    private int ;
    private int ;
    private string ;
    internal string ;
    public (string );
    public (Byte[] , Int32& );
    public long ();
    public long ();
    public int ();
    public string ();
    public int ();
}
internal class  : List`1<> {
    public  ( );
}
internal class  :  {
    public ( );
    public virtual string ();
    public virtual int ();
    public virtual int (Byte[] , int );
    public virtual void ();
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private  ;
    public virtual  (bool );
    public virtual  ( ,  , bool );
}
internal class  :  {
    internal void (Byte[] );
    internal virtual void ( );
}
internal class  : object {
    internal string ;
    internal Style ;
    internal string ;
    internal Style ;
    internal int ;
    internal int ;
    internal Style ;
}
internal class  : object {
    internal static string (string );
    internal static string (DateTime );
    public static  (string ,  );
    public static  (object , string ,  );
    public static  (object , int ,  );
    public static string (string ,  , bool );
    internal static int (Char[] , int , int , short );
    internal static int (Char[] , int , int );
    internal static bool (WorkbookSettings );
    public static void (int , int , StringBuilder );
    public static void (DateTime , StringBuilder );
    public static void (DateTime , StringBuilder );
    public static bool (string );
}
internal class  : object {
    internal static void ( , ArrayList );
    internal static void ( , Hashtable );
    [("True")]
internal static void ( ,  );
}
internal class  :  {
    protected internal UInt64[] ;
    public (BigInteger );
    protected internal (UInt64[] );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal abstract class  : object {
    public abstract virtual string (string );
    [("True")]
public abstract virtual string (string , FontStyle , bool , string );
    [("True")]
public string (string , FontStyle , string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    public static  ;
    public static  ;
    public static  ;
    public ( ,  ,  );
    public ( );
    private static ();
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private [] ;
    private  ;
    private int ;
    private int ;
    private Int32[] ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal ( ,  , [] ,  );
    private ( , [] );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual  (int , int );
    public virtual void ();
    public virtual bool ();
    public virtual  ();
    public virtual bool (int );
    public virtual bool (int , int );
    private bool ();
    private bool ();
    public virtual  ();
    public virtual  ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    private FormatCondition ;
    internal void ( );
    internal static int ( ,  , Byte[] , int );
    internal static int (FormatCondition );
    internal static int (FormatCondition , Byte[] , int );
    private int (DataBar );
    private int (DataBar , Byte[] , int );
    private int (ColorScale );
    private int (ColorScale , Byte[] , int );
    private int (IconSet );
    private int (IconSet , Byte[] , int );
    private static int (Top10 , Byte[] , int );
    private int (ConditionalFormattingValue );
    private static int (ConditionalFormattingValue , Byte[] , int );
    private static int (ConditionalFormattingValue , Byte[] , int );
    internal static int ( , Byte[] , int );
    private StringBuilder (StringBuilder );
}
internal class  : object {
    internal  ;
    internal string ;
    internal string ;
    internal  ;
    internal bool ;
    internal  ;
    internal  ;
    internal ( , Worksheet );
    internal void ( );
    private void ( );
}
internal class  :  {
    protected virtual void (PointF[] , float , float , List`1<Matrix> , float , float , float , bool , float );
    protected virtual string ();
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    public ( ,  );
    public ( ,  ,  );
    public  (Char[] );
    public  ( );
    public  ( );
    private  (Byte[] );
    private Byte[] (Byte[] );
}
internal abstract class  : object {
    internal static long (int , int );
    internal static long (long , long );
    internal static int (long );
    internal static int (long );
    public abstract virtual void (StringBuilder ,  );
    public abstract virtual byte ();
    public abstract virtual  ();
    public abstract virtual object ();
    public abstract virtual  ( );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  ();
    public virtual  ( );
    public virtual void ();
    public virtual object ( );
    public virtual bool ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual bool ( , int );
    public virtual long ( , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  (Int32[] ,  , int );
    public virtual  ( , int );
    public virtual  ( ,  );
    public virtual  ( );
    public virtual  ( );
    public virtual string ( );
    public virtual string ToString();
    public virtual bool ();
    public virtual void (bool );
    public virtual  ();
    public virtual void ( );
    public virtual bool ( , int );
    public virtual  ( , bool );
    public virtual bool ( , int , int , bool );
    public virtual bool ( , bool );
    public virtual  (int );
    public virtual void ();
    public virtual  ( , int );
    public virtual  ( , int , Workbook );
    public virtual bool ( );
    public virtual  ( );
    public virtual int CompareTo(object );
    public virtual void ( );
}
internal class  :  {
    internal (bool , Boolean[] , float , float ,  , float , Double[] );
    protected virtual float (double , float );
    [("True")]
protected virtual float ( , int , float );
    [("True")]
protected virtual float ( , string , float );
    protected virtual float ( ,  );
}
internal class  : object {
    private int ;
    private  ;
    public  ();
    public void ( );
    public int ();
    public void (int );
}
internal class  :  {
    private  ;
    public virtual  (Cells );
    public virtual int ();
    public virtual int (int );
    public virtual int (int );
    public virtual int (int , int );
    public virtual int (int , int , int );
    public virtual bool (int );
    public virtual int (int , int );
    public virtual int (int );
    public virtual int (int );
    public virtual int (int , bool );
    public virtual  ();
    public virtual  (int , int , bool );
    public virtual int ();
    public virtual void (int );
    public virtual void (int , int );
    public virtual int (int , int );
    public virtual int (int , int );
    public virtual void (int , int );
    public virtual void (int );
    public virtual bool (int , int );
    public virtual void (int , int );
    public virtual int (int ,  , int );
    public virtual int (int , [] , int );
    public virtual int (int ,  , int );
    public virtual int (int ,  , int , int , int );
    public virtual  (int );
    public virtual  (object );
    public virtual void (int , int , int , int );
    public virtual  (int ,  , int );
    public virtual void (int ,  , int );
    public virtual int (int );
    public virtual void (int , int );
    public virtual byte (int , int );
    public virtual void (int , int , byte );
    public virtual int (int );
    public virtual void (int , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( );
    internal  ();
    public virtual Font ();
    public virtual void (Font );
    public virtual Color ();
    public virtual void (Color );
    internal float ();
    internal float ();
    internal float ();
    internal void (float );
    private float ();
}
internal class  : object {
    private  ;
    private  ;
    public ( ,  , DateTime );
    public ( ,  ,  , DateTime );
    public ( ,  );
    public long ();
    public  ();
    public  ();
}
internal class  : object {
    private int ;
    private int ;
    []
private Cells ;
    []
private RowCollection ;
    []
private  ;
    private int ;
    private int ;
    private Int32[][] ;
    private Int32[] ;
    private int ;
    private Row ;
    private Row ;
    private Row ;
    private int ;
    internal (Cells , RowCollection ,  );
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  ();
    public sealed virtual bool ();
    public sealed virtual Int32[] ();
    public int (int );
    public sealed virtual bool ();
    public sealed virtual Cells ();
    public sealed virtual int ();
    public sealed virtual int ();
    internal  (int );
    internal Row (int );
    internal Row ( );
    internal  (int , int );
    public sealed virtual  (int );
    public sealed virtual Row (int );
    private Row (int );
    public sealed virtual Cell (int , int );
    public sealed virtual  (int ,  , int );
    public sealed virtual  (int , int , bool );
}
internal class  :  {
    internal virtual string ();
    internal static DateTime (string );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    internal  ;
    internal  ;
    internal ( ,  );
    private int ();
    private int ( );
    private int ();
    private int ( );
    internal int (Byte[] , int );
    internal int (Byte[] , int , int );
    internal void (Byte[] ,  );
    internal void ( );
    private void ( );
    internal static int (Byte[] , int , byte );
    internal static int (Byte[] , int );
    internal static int (Byte[] , int , string );
    internal static int (Byte[] , int , double );
    internal static int (Byte[] , int , short );
    internal static int (Byte[] , int , bool );
    internal static int (Byte[] , int , byte );
    internal static int (Byte[] , int , DateTime );
}
internal class  : object {
    public sealed virtual void Warning(WarningInfo );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private  ;
    public (BigInteger , BigInteger , BigInteger );
    public (BigInteger , BigInteger , BigInteger ,  );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public  ();
    public virtual bool Equals(object );
    protected bool ( );
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("32767")]
internal class  : Attribute {
    [DebuggerBrowsableAttribute("0")]
public string ;
    public (string );
}
internal class  : object {
    []
private  ;
    private bool ;
    private Color ;
    private  ;
    internal bool ;
    internal bool ;
    internal FillType ;
    internal ( );
    internal  ();
    public bool ();
    public void (bool );
    public Color ();
    public void (Color );
    public  ();
    public void ( );
    public bool ();
}
internal class  : Exception {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private HttpStatusCode ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public string Code { get; public set; }
    public HttpStatusCode HttpStatusCode { get; public set; }
    public string Description { get; public set; }
    public (string ,  );
    public (string , string , HttpStatusCode , string );
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string );
    [CompilerGeneratedAttribute]
public HttpStatusCode get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public void set_HttpStatusCode(HttpStatusCode );
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string );
}
internal class  : object {
    private Byte[] ;
    private int ;
    private long ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32[] ;
    private int ;
    public ( );
    public void (byte );
    public void (Byte[] , int , int );
    public void ();
    public int ();
    private void ( );
    public int ();
    public void (Byte[] , int );
    public void (long );
    public int (Byte[] , int );
    public void ();
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private void ();
    private static void (UInt32 , Byte[] , int );
    private static UInt32 (Byte[] , int );
    public  ();
    public void ( );
}
internal class  :  {
    internal virtual  ();
}
internal class  :  {
    internal void (Name );
}
internal abstract class  : object {
    public static bool (byte );
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal abstract class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal ( );
    internal abstract virtual  (int );
    public  (int );
    internal  (int );
    internal int ( );
    internal int ();
    internal int ();
    private bool (ArrayList );
    private ArrayList (ArrayList , bool );
    internal ArrayList (bool , bool , bool );
    private void (ArrayList );
    private void ( , ArrayList , int );
    private ArrayList ( , bool );
    internal void (int ,  );
    internal bool ();
    internal void ();
}
internal abstract class  : object {
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    private Double[] ;
    private int ;
    private int ;
    public double  { get; }
    public (int , int );
    internal (int );
    public int ();
    public void (double );
    public void (double , int );
    public double (int );
    public void (int , int );
    internal void (int , double );
    internal void (int , Double[] , int , int );
    internal void (int , Double[] );
    internal void (int );
    public Double[] ();
    public Double[] ();
}
internal class  :  {
    internal (ProtectedRange );
}
internal class  : object {
    private static  ;
    private static IDictionary ;
    private static IDictionary ;
    private static  ;
    private static ();
    private static string ( );
    internal static string ( );
    private static  ( , int );
    internal static  (string );
    internal static  ( , string );
    internal static IEnumerable ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private Stream ;
    private  ;
    internal (Stream ,  );
    internal void ( );
    internal void ();
}
internal class  : object {
    private  ;
    private Char[] ;
    private bool ;
    private bool ;
    private bool ;
    internal ( );
    public StringBuilder (double , StringBuilder );
}
internal class  : object {
    internal  ;
    internal ArrayList ;
    internal static byte (string );
    internal static string (byte );
    internal void ( );
    private void ( ,  );
    internal void ( );
    internal static  ( );
    internal static  ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    []
private  ;
    private  ;
    private  ;
    private Hashtable ;
    internal ( );
    internal void (string , int ,  , bool );
    internal void ( );
    internal bool ();
    internal string ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
    internal virtual void ();
}
internal class  :  {
    public ( );
    public virtual string ToString();
}
internal class  : object {
    internal  ;
    []
private  ;
    private int ;
    internal int ;
    internal ( );
    internal  ();
    internal void ( , CopyOptions );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal Byte[] ();
    internal void (Byte[] );
    internal void ( , string );
    internal void (int ,  ,  ,  );
    private void ( ,  , bool ,  );
    internal  ( );
    internal  ( , int );
    internal static  (Byte[] ,  , int );
    internal ushort ();
    internal void (ushort );
    internal Byte[] ();
    internal void (Byte[] );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal void (string , bool );
}
internal abstract class  : object {
    internal static bool (string );
    internal static bool (string );
    internal static bool (string );
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal abstract virtual string ();
    internal string ();
    internal string ();
}
internal class  :  {
    protected  ;
    protected Byte[] ;
    protected  ;
    public ( );
    public ( ,  );
    protected virtual  ();
    protected virtual  ();
    protected virtual Int32[] ();
    public virtual void (IDictionary );
    public virtual int ();
    public virtual  ();
    public virtual  ();
    protected virtual  (int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private StringAlignment ;
    private StringAlignment ;
    private TextDirectionType ;
    private TextOrientationType ;
    private bool ;
    private bool ;
    public StringAlignment ();
    public void (StringAlignment );
    public StringAlignment ();
    public void (StringAlignment );
    public TextDirectionType ();
    public void (TextDirectionType );
    public TextOrientationType ();
    public void (TextOrientationType );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
}
internal class  :  {
    private string ;
    public (Byte[] );
    public (string );
    public (string , bool );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    public Byte[] ();
    internal virtual void ( );
    protected virtual int ();
    protected virtual bool ( );
    public static bool (string );
}
internal class  :  {
    private double ;
    public (double );
    public virtual double (double );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal void ( );
}
internal class  : object {
    internal static Int32[] ;
    internal static Int32[] ;
    internal static Int32[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Int32[] ;
    internal static Int32[] ;
    internal Int16[] ;
    internal int ;
    internal  ;
    private static ();
    internal static int (int );
    internal void ( );
    internal void ( );
    internal static void (Int16[] , int , Int16[] );
    internal static int (int , int );
}
internal class  : object {
    public static int ;
    private Byte[] ;
    private int ;
    private int ;
    private Stream ;
    private (Byte[] , int , int );
    private (Stream , Byte[] );
    private static ();
    public static int (int , float );
    public static int (int , double );
    public static int (int , long );
    public static int (int , long );
    public static int (int , int );
    public static int (int , UInt32 );
    public static int (int , long );
    public static int (int , bool );
    public static int (int , string );
    public static int (int ,  );
    public static int (int ,  );
    public static int (int ,  );
    public static int (int , UInt32 );
    public static int (int );
    public static int (int );
    public static int (int , int );
    public static int (int , int );
    public static int (int , long );
    public static int (int , int );
    public static int (int , long );
    public static int ( );
    public static int ( );
    public static int ( );
    public static int (UInt32 );
    public static int (int );
    public static int (long );
    public static int (int );
    public static int (long );
    public static int (int ,  );
    public static int (int ,  );
    public static int (int ,  );
    public static int (UInt32 );
    public static int (long );
    public static int ( , int , object , bool , bool );
    public static int (double );
    public static int (float );
    public static int (long );
    public static int (long );
    public static int (long );
    public static int (UInt32 );
    public static int (string );
    public static int ( );
    public static int ( , object );
    public static int (int );
    public static  (Stream );
    public static  (Stream , int );
    public static  (Byte[] );
    public static  (Byte[] , int , int );
    public long ();
    [("False")]
public sealed virtual void ( , int , string , object );
    [("False")]
public sealed virtual void (int , string , double );
    [("False")]
public sealed virtual void (int , string , float );
    [("False")]
public sealed virtual void (int , string , long );
    [("False")]
public sealed virtual void (int , string , long );
    [("False")]
public sealed virtual void (int , string , int );
    [("False")]
public sealed virtual void (int , string , long );
    [("False")]
public sealed virtual void (int , string , UInt32 );
    [("False")]
public sealed virtual void (int , string , bool );
    [("False")]
public sealed virtual void (int , string , string );
    [("False")]
public sealed virtual void (int , string ,  );
    [("False")]
public sealed virtual void (int , string ,  );
    [("False")]
public sealed virtual void (int , string ,  );
    [("False")]
public void ( );
    [("False")]
public sealed virtual void (int , string , UInt32 );
    [("False")]
public sealed virtual void (int , string , int , object );
    [("False")]
public sealed virtual void (int , string , int );
    [("False")]
public sealed virtual void (int , string , long );
    [("False")]
public sealed virtual void (int , string , int );
    [("False")]
public sealed virtual void (int , string , long );
    [("False")]
public sealed virtual void (int , string ,  );
    [("False")]
public sealed virtual void (int , string ,  );
    [("False")]
public void ( , object );
    [("False")]
public void (double );
    public static void (Byte[] );
    [("False")]
public void (float );
    [("False")]
public void (long );
    [("False")]
public void (long );
    [("False")]
public void (int );
    [("False")]
public void (long );
    [("False")]
public void (UInt32 );
    [("False")]
public void (bool );
    [("False")]
public void (string );
    internal void ( );
    [("False")]
internal void ( );
    [("False")]
internal void ( );
    [("False")]
internal void (UInt32 );
    [("False")]
internal void (int );
    [("False")]
internal void (int );
    [("False")]
internal void (long );
    [("False")]
internal void (int );
    [("False")]
internal void (long );
    [("False")]
public sealed virtual void ( , int , string , IEnumerable );
    [("False")]
public void ( , int , string , IEnumerable );
    [("False")]
public void (int ,  );
    [("False")]
public void (UInt32 );
    [("False")]
public void (long );
    [("False")]
public void (UInt32 );
    [("False")]
public void (long );
    [("False")]
public void (byte );
    [("False")]
public void (UInt32 );
    [("False")]
public void (Byte[] );
    [("False")]
public void (Byte[] , int , int );
    public static UInt32 (int );
    public static long (long );
    [("False")]
private void ();
    [("False")]
public sealed virtual void ();
    public sealed virtual void (int ,  );
    public sealed virtual void (int ,  , long );
}
internal class  : object {
    internal int ;
    internal object ;
    internal byte ;
    internal (int );
    internal (int , int );
    internal bool ();
    internal void ();
    internal int ();
    internal void (int );
    internal void (int , int );
    internal void (int );
}
internal class  :  {
    private static  ;
    private  ;
    private  ;
    private  ;
    private IDictionary ;
    private  ;
    private  ;
    private  ;
    private  ;
    private bool ;
    private  ;
    private  ;
    private  ;
    public (Byte[] );
    public ( , Byte[] );
    public (Stream );
    public ( , Stream );
    private static ();
    public int ();
    public  ();
    public  ();
    public  (string );
    public  (string );
    public  (string );
    private void ();
    public  ();
    public  ();
    public static Stream (Stream ,  , Stream );
    public static Stream (Stream ,  ,  ,  , Stream );
    private static  ( );
}
internal class  :  {
    public virtual  (byte , double ,  );
    public virtual  (byte ,  ,  );
    public virtual  (byte , string ,  );
    public virtual  (byte , bool ,  );
    public virtual  (byte ,  ,  );
}
internal class  : object {
    internal static  ( , float , float );
    internal static  ( , float , float , float , Double[] ,  , bool );
    internal static  ( , float , float , float , Double[] ,  , bool , ImageOrPrintOptions );
    internal static  ( , float , float , float , Double[] );
}
internal abstract class  : object {
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
}
internal class  : object {
    public UInt32 ;
    public UInt32 ;
    public UInt32 ;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private Byte[] ;
    private  ;
    public ( );
    public ( , Byte[] );
    [ObsoleteAttribute("Use constructor including order/cofactor")]
public ( ,  );
    public ( , BigInteger , BigInteger ,  );
    public  ();
    public Byte[] ();
    public virtual  ();
}
[]
internal interface  {
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual  (int , int );
    public abstract virtual  (int );
    public abstract virtual void ();
    public abstract virtual bool ();
    public abstract virtual bool (int , int );
    public abstract virtual bool (int );
    public abstract virtual  ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual  (int );
    public abstract virtual  (int , int , int );
    public abstract virtual  (int , int , int ,  ,  );
    public abstract virtual  (int );
    public abstract virtual  (int , int , int );
    public abstract virtual  (int , int , int ,  ,  );
    public abstract virtual bool ( );
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual bool ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual bool ( , Int32[] );
    public abstract virtual bool ( , Int32[] );
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual  ();
    public abstract virtual  ( );
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  (int , int , int , int );
    public abstract virtual  (int , int , int , int ,  ,  );
    public abstract virtual  (int , int , bool );
    public abstract virtual  (int , int , bool ,  ,  );
    public abstract virtual  (Double[] ,  ,  );
    public abstract virtual  (Double[][] ,  ,  );
    public abstract virtual int ( , bool );
}
internal class  : object {
    private  ;
    private ArrayList ;
    internal ( );
    internal static string ( );
    internal static FileFormatType ( );
    internal bool ( );
    private bool (string , string );
    private void (bool , string , string , string );
    private bool (string );
    private static void ( );
}
internal class  : object {
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    private static void (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] );
    public static UInt32 (UInt64[] );
    protected static void (UInt64[] );
    protected static void (UInt64[] , UInt64[] );
    protected static void (UInt64[] , UInt64[] , UInt64[] );
    protected static void (UInt64[] , ulong , UInt64[] , int );
    protected static void (UInt64[] , UInt64[] );
}
internal class  : object {
    internal int ;
    internal int ;
    internal (int , int );
}
internal class  : object {
    public Single[0...,0...] ;
    public (float , float , float , float , float , float , float , float , float , float , float , float );
    private void (float , float , float , float , float , float , float , float , float , float , float , float );
    public void ( );
    public void (double );
    public void (double );
    public void (double );
    public Matrix ();
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    public ( ,  ,  , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool (int , int );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    private Style ;
    private UInt32 ;
    private ushort ;
    internal Byte[] ;
    private bool ;
    private int ;
    internal ( );
    internal (Style , bool );
    private void (bool );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (bool );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ( );
}
internal interface  {
    public abstract virtual IList ();
}
internal class  : object {
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected  ;
    protected  ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    protected BigInteger ;
    public virtual void (BigInteger , BigInteger , BigInteger ,  ,  );
    public virtual void ( , BigInteger ,  ,  );
    public virtual BigInteger ();
    public virtual BigInteger (BigInteger );
    protected virtual BigInteger ();
    private BigInteger ();
    public virtual bool (BigInteger );
    public virtual BigInteger ();
    public virtual BigInteger ();
}
internal class  :  {
    protected  ;
    protected  ;
    private int ;
    private string ;
    private bool ;
    private bool ;
    private bool ;
    protected Stack ;
    internal ( ,  ,  , bool );
    internal bool ();
    public virtual bool ();
    public virtual  ();
    public virtual bool (Worksheet );
    public virtual bool ( );
    public virtual bool (Byte[] , int , int );
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  : object {
    []
private  ;
    internal string ;
    internal  ;
    internal string ;
    internal Byte[] ;
    internal List`1<> ;
    internal ushort ;
    internal  ;
    internal Double[] ;
    internal int ;
    private short ;
    private short ;
    internal ( , string , bool );
    internal ( , string , string );
    internal  ();
    internal string ( ,  );
    internal void (bool , DateTime );
    internal void (bool , double );
    internal DateTime[] ();
    internal Double[] ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal void ( );
    internal  ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal  ();
    internal bool ();
    internal bool ();
    internal [] ();
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void ( );
    internal int ();
    internal bool ( );
    internal  ();
    internal void (PivotGroupByType , double , double , double , bool , bool , CustomPiovtFieldGroupItem[] , bool );
    internal void (bool );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private static void (int , String[] );
    private static void (string , Object[] );
    private static void (string , Object[] );
    private static void (string , Object[] );
    internal static string (string );
    internal static string (string );
    public static  ( );
    public static  (string );
    public static  ( );
    public static  (string );
    internal static int ( );
    internal static int (string );
    private static int (string );
}
internal class  : object {
    internal bool ;
    internal int ;
    internal (int , bool );
}
internal class  :  {
    internal ( );
    internal  ();
    internal  ();
    internal  ();
}
internal enum  : Enum {
    public int value__;
    public static  RsaGeneral;
    public static  RsaEncrypt;
    public static  RsaSign;
    public static  ElGamalEncrypt;
    public static  Dsa;
    [ObsoleteAttribute("Use 'ECDH' instead")]
public static  EC;
    public static  ECDH;
    public static  ECDsa;
    public static  ElGamalGeneral;
    public static  DiffieHellman;
    public static  Experimental_1;
    public static  Experimental_2;
    public static  Experimental_3;
    public static  Experimental_4;
    public static  Experimental_5;
    public static  Experimental_6;
    public static  Experimental_7;
    public static  Experimental_8;
    public static  Experimental_9;
    public static  Experimental_10;
    public static  Experimental_11;
}
internal class  : AbstractInterruptMonitor {
    [DebuggerBrowsableAttribute("0")]
internal AbstractInterruptMonitor ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public bool IsInterruptionRequested { get; }
    public bool TerminateWithoutException { get; }
    internal (AbstractInterruptMonitor );
    internal virtual bool qsymspwk7dh83mk7qpxsgz83kmj48qxk();
    internal virtual bool qsymspwk7dh83mk7qpxsgz83kmj48qxk(int );
    public virtual bool get_IsInterruptionRequested();
    public virtual bool get_TerminateWithoutException();
    internal virtual AbstractInterruptMonitor qsymspwk7dh83mk7qpxsgz83kmj48qxk();
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    internal void ( ,  );
    private ArrayList ();
    private void ( );
    private  (string );
}
internal class  : object {
    public static Byte[] (Byte[] , Byte[] , int , int , int , int );
    private static Byte[] (Byte[] , Byte[] , int , int , int , int );
    private static Byte[] (Byte[] , Byte[] , int );
    private static void (UInt32[] , int , int , int );
    private static void (UInt32[] , UInt32[] , UInt32[] , UInt32[] , int );
    private static void (UInt32[] , UInt32[] , int , UInt32[] );
    private static void (Array );
    private static void (Array[] );
    private static bool (int );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : ApplicationException {
    public (string );
}
internal class  : object {
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    internal static Byte[] ;
    private static ();
    internal static ControlType (Byte[] );
    internal static Byte[] (ControlType );
    internal static string (ControlType );
    internal static int ( );
    internal static int (int , int );
}
internal class  :  {
    internal (int );
}
internal class  :  {
    public static int ;
    public static int ;
    private Byte[] ;
    public ( );
    public (Byte[] , int );
    public (Stream );
    private static ();
    public void (Byte[] , int );
    public Byte[] ();
    public  ();
    public void ( , Byte[] , int );
}
[DefaultMemberAttribute("")]
internal abstract class  :  {
    private ArrayList ;
    public   { get; }
    public virtual void ( );
    public int ( );
    public void ([] );
    protected virtual bool ( );
    public  (int );
    public int ();
    public ArrayList ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  : object {
    private Stream ;
    private int ;
    private Byte[][] ;
    public (Stream );
    public (Stream , int );
    public (Byte[] );
    internal  (int );
    internal  (bool , int );
    internal  (bool , int );
    public virtual  ();
    private void (bool );
    internal  ();
}
internal class  : object {
    private object ;
    private Dictionary`2<, > ;
    internal  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (Object[] );
    internal static  ( );
}
internal class  : object {
    public Byte[] (int , bool );
}
internal class  : Brush {
    [DebuggerBrowsableAttribute("0")]
private PathGradientBrush ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private GraphicsPath ;
    public (GraphicsPath ,  );
    public Color ();
    public void (Color );
    public ColorBlend ();
    public void (ColorBlend );
    public RectangleF ();
    public Color[] ();
    public void (Color[] );
    public  ();
    public virtual object Clone();
    protected virtual void Dispose(bool );
    public sealed virtual Brush ();
    public  ();
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual double ();
    public abstract virtual void (double );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual bool ();
    public abstract virtual void (bool );
    public abstract virtual int ();
    public abstract virtual void (int );
}
internal class  : object {
    private  ;
    internal ( );
    public sealed virtual Stream ();
    public sealed virtual  ();
}
internal class  : object {
    internal int ;
    internal byte ;
    internal byte ;
    internal int ;
    internal short ;
    internal ( );
    internal void (int , Cells );
    internal bool (Cells );
    internal void ( );
    internal void ( , int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal byte ();
    internal void (byte );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal static bool (byte );
    internal static byte (byte , bool );
    internal static bool (byte );
    internal static byte (byte , bool );
    internal static bool (byte );
    internal static byte (byte , bool );
    internal static bool (byte );
    internal static byte (byte , bool );
    internal static int (byte );
    internal static byte (byte , int );
    internal static byte (byte );
    internal static bool (byte );
    internal static byte (byte , bool );
    internal static bool (byte );
    internal static byte (byte , bool );
    internal static bool (CellBorderType );
    internal static bool (CellBorderType );
}
internal class  : object {
    []
private  ;
    []
private  ;
    []
private Worksheet ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Hashtable ;
    private Hashtable ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal ( );
    private void ();
    private void ();
    private void (string );
    internal void ( );
    private void ();
    private void ();
    [("True")]
private void ();
    private double (double );
    private void ();
    [("True")]
private void ();
    [("True")]
private void ();
    [("True")]
private void ();
    [("True")]
private int ();
    [("True")]
private void (Hashtable , int );
}
internal interface  {
    public abstract virtual object ();
    public abstract virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ( , float , float , float , float );
    internal virtual void ( , float , float , float , float );
    internal GraphicsPath (RectangleF );
    internal virtual void ();
    internal virtual void ();
    internal virtual void (RectangleF );
    private Matrix (int );
    private Matrix ( );
    internal Matrix ( );
    internal Matrix ( );
    private Matrix ( );
    public sealed virtual void Dispose();
    protected virtual void (bool );
    protected virtual override void Finalize();
    private void (Matrix& , Double& );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
}
internal abstract class  : object {
    private static String[] ;
    private static ();
    public static void (IDictionary , Int32[] );
    public static void (IDictionary , Byte[] );
    public static Int32[] (IDictionary );
    public static Byte[] (IDictionary );
    public static Byte[] (Int32[] );
    public static Byte[] (Byte[] );
    public static Int32[] (Byte[] );
    public static Byte[] (Byte[] );
    public static string (int );
    public static  (int );
    public static bool ();
    public static bool (Int32[] );
    public static bool (int );
    public static bool ( ,  );
    public static bool (int );
    public static bool (Byte[] , byte );
    public static Byte[] (int , BigInteger );
    public static Byte[] (Byte[] ,  );
    public static Byte[] (Byte[] ,  );
    public static BigInteger (int , Byte[] );
    public static  (Byte[] ,  , Byte[] );
    public static  (Byte[] ,  , Byte[] );
    public static Byte[] ( ,  );
    public static  ( ,  );
    public static  ( , Byte[] ,  , Stream );
    internal static  ( , Int32[] , Byte[] , Stream );
    public static  ( );
    public static int (int , Stream );
    public static BigInteger (int , Stream );
    public static BigInteger (Stream );
    public static  (Int32[] , Byte[] , Stream );
    private static void (Int32[] , int );
    public static void (int , Stream );
    public static void ( , Stream );
    public static void (int , BigInteger , Stream );
    public static void (BigInteger , Stream );
    public static void (Byte[] ,  , Stream );
    public static void (Byte[] ,  , Stream );
    public static void (int , Stream );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public (IEnumerable );
    public static  (object );
    public [] ();
    public virtual  ();
}
internal class  : object {
    public static  ( , string );
}
internal class  :  {
    internal (string );
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual int (Byte[] , int , int , int );
    public abstract virtual void (Byte[] , int , int );
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private int ;
    private double ;
    private double ;
    internal (int , int , int , int , double , double );
    public static  ();
    public static  (int , int , double , double );
    public static  (int , int , int , int , double , double );
    public static  (int , int , int , int , int , int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public int ();
    public int ();
    public void (int );
    public int ();
    public void (int );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public double ();
    public int ();
    public int ();
    public int ();
    public int ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    public ( , Byte[] );
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal static  ;
    private static ();
    internal virtual object ();
    internal virtual string ();
    internal virtual  ();
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private bool ;
    private  ;
    private string ;
    private  ;
    private  ;
    private string ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  , string , string );
    public ( ,  , string , string ,  ,  );
    public void ( );
    public void ( );
    public void (int );
    public void (int );
    public void (int );
    public void (bool );
    public void ( );
    public  ( , BigInteger , DateTime );
}
internal class  : object {
    private  ;
    private  ;
    []
private  ;
    []
private ShapeCollection ;
    internal (ShapeCollection ,  , int );
    internal (ShapeCollection ,  , int , int );
    internal  ();
    internal WorksheetCollection ();
    internal int ();
    internal void (int );
    internal int (Shape , Byte[] );
    internal void (Shape );
    internal  ();
    internal  ();
    internal UInt32 ();
    internal int ();
    internal int ();
    internal int ();
    internal int (Byte[] , int , int , int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal bool ();
    internal void ( , CopyOptions );
    internal void ();
    internal void ();
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , bool );
    private static Byte[] (bool );
    public bool ();
}
internal class  : Exception {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    internal (int , long );
    internal int ();
    internal object ();
}
internal class  : object {
    private RevisionLogCollection ;
    internal (RevisionLogCollection );
    internal void ( );
    internal void ( );
    internal void ( , RevisionHeader );
    internal void ( , RevisionHeader );
}
internal class  : object {
    protected BigInteger ;
    protected BigInteger ;
    protected  ;
    public (BigInteger , BigInteger ,  );
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private  ;
    internal ( );
    internal virtual string ( );
    internal virtual  (Byte[] );
    internal virtual void ();
    internal void (int );
    internal void ();
    private static  ( );
    private static string (ImageType );
    internal  ();
    internal  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public ( , BigInteger , BigInteger );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public BigInteger ();
    public BigInteger ();
    public virtual  ();
}
internal interface  {
    public abstract virtual <> GetEnumerator();
}
internal class  : object {
    internal int ;
    internal UInt32 ;
    internal UInt32 ;
    internal static List`1<> ( );
    internal static  ( );
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual void (byte );
    public abstract virtual void (Byte[] , int , int );
    public abstract virtual int (Byte[] , int );
    public abstract virtual void ();
}
internal abstract class  : object {
    protected bool ;
    protected bool ;
    protected bool ;
    public (bool , bool , bool );
    protected abstract virtual  (double , bool );
    protected abstract virtual  (double , int );
    protected abstract virtual  (int );
    protected abstract virtual  ();
    protected abstract virtual bool ();
    protected abstract virtual bool ();
    public abstract virtual void (int , int );
    public abstract virtual  ();
    protected virtual bool ();
    public sealed virtual bool ( , bool );
    public sealed virtual bool ( , bool );
    public sealed virtual  ( ,  , bool );
    public sealed virtual  ( ,  , bool , int );
}
internal class  :  {
    private CellArea ;
    private Byte[] ;
    private Byte[] ;
    internal (CellArea , string , string , Hyperlink );
    private void (Hyperlink );
    private void (CellArea , string , string );
    private void (CellArea , string , string );
    private void (CellArea , string , string , Hyperlink );
}
internal class  : object {
    public static void (Hashtable , string );
    public static  (string , bool );
    public static  (Byte[] );
    public static  (Byte[] , bool );
    private static  (string , bool , Byte[] , bool );
}
internal class  :  {
    private  ;
    internal CellValueType ;
    internal virtual  ();
    internal virtual void ( );
    public virtual CellValueType ();
    public virtual int ();
    internal virtual void ();
    internal void ( );
    public bool ( );
    public bool (bool );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( );
    internal virtual int ();
    internal virtual void ( );
    internal static void ( , ArrayList );
    [("True")]
internal static void ( , string , string );
    [("True")]
internal static void ( , string , string );
}
internal class  :  {
    public static BigInteger ;
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ([] , int , int );
}
internal class  : object {
    private static String[] ;
    []
private  ;
    []
private  ;
    []
private  ;
    []
private  ;
    []
private  ;
    private bool ;
    private bool ;
    private PointF ;
    private PointF ;
    private string ;
    private float ;
    internal ( ,  ,  ,  ,  );
    private static ();
    internal bool (string );
    internal void ( );
    internal void ();
    internal void ();
    private void ( ,  );
    private void (int );
    private void ( , float );
    private void ( ,  );
    private void ( ,  , bool );
    private void ();
    private void ();
    private void ( ,  );
    private void ( ,  );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
}
internal class  :  {
    private static  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private bool ;
    public ( ,  ,  );
    private ( );
    private static ();
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private double ;
    private double ;
    private double ;
    private double ;
    private int ;
    internal ( ,  ,  );
    public virtual void ();
    public virtual bool (double , double );
    public virtual bool (double , double );
    public virtual  (double , double );
    public virtual  (double , double , int );
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ICollection ;
    [DebuggerBrowsableAttribute("0")]
private BigInteger ;
    [DebuggerBrowsableAttribute("0")]
private BigInteger ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private BigInteger ;
    public ( );
    public virtual object Clone();
    public  ();
    public void ( );
    public  ();
    public void ( );
    public ICollection ();
    public void (ICollection );
    public BigInteger ();
    public void (BigInteger );
    public BigInteger ();
    public void (BigInteger );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public Byte[] ();
    public void (Byte[] );
    public bool ();
    public void (bool );
    public BigInteger ();
    public void (BigInteger );
    public virtual bool (object );
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal  ;
    internal void ( );
}
internal class  : object {
    public static  ;
    private double ;
    private double ;
    private double ;
    internal (double , double , double );
    private static ();
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    public virtual int GetHashCode();
}
internal interface  {
    public abstract virtual bool (object );
}
internal class  : object {
    internal string ( , bool );
}
internal abstract class  : object {
    protected static float ;
    internal ArrayList ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    protected SizeF ;
    internal float ;
    protected float ;
    protected Double[] ;
    internal bool ;
    internal  ;
    internal  ;
    protected bool ;
    protected Boolean[] ;
    protected float ;
    protected float ;
    internal ImageOrPrintOptions ;
    protected (bool , Boolean[] , float , float ,  , float , Double[] );
    private static ();
    public static int (string , float , FontStyle );
    protected virtual float (string , float , FontStyle );
    protected virtual float ( , float ,  );
    protected virtual float ( ,  );
    protected abstract virtual float (double , float );
    [("True")]
protected abstract virtual float ( , int , float );
    [("True")]
protected abstract virtual float ( , string , float );
    [("True")]
internal abstract virtual void ();
}
internal class  :  {
}
internal class  : object {
    public byte ;
    public UInt32[] ;
    public (byte , UInt32[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( );
    public (BigInteger , BigInteger , BigInteger , BigInteger );
    public sealed virtual string ();
    public virtual Byte[] ();
    public virtual void ( );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
}
internal abstract class  :  {
    public abstract virtual  (Cells );
    public abstract virtual void (int , int );
    public abstract virtual int (int ,  , int );
    public abstract virtual int (int , [] , int );
    public abstract virtual  (int );
    public abstract virtual  (object );
    public abstract virtual void (int , int , int , int );
    public abstract virtual  (int ,  , int );
    public abstract virtual void (int ,  , int );
    public abstract virtual byte (int , int );
    public abstract virtual void (int , int , byte );
    public abstract virtual int (int );
    public abstract virtual void (int , int );
    public abstract virtual int (int );
    public abstract virtual void (int , int );
    public virtual bool ();
    public virtual void (bool );
    public [] (int , int );
    internal int ( , int );
    public virtual int (int ,  , int );
    public abstract virtual int (int ,  , int , int , int );
    public virtual  (Cells , RowCollection ,  );
    public virtual bool ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private int ;
    private Int32[] ;
    private static int ;
    private static int ;
    private bool ;
    private static ();
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public virtual void (bool ,  );
    public virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    private void (Byte[] );
    private int (Byte[] , int , Byte[] , int );
    private int (Byte[] , int , Byte[] , int );
    private int (int , int );
    private int (int , int );
    private int (Byte[] , int );
    private void (int , Byte[] , int );
}
internal class  : object {
    private string ;
    private string ;
    public (string , string );
    public string ();
    public void (string );
    public string ();
    public void (string );
}
internal class  :  {
    internal void (DataSorter , CellArea );
}
internal class  :  {
    internal bool ;
    internal int ;
    []
internal WorksheetCollection ;
    internal LoadFilter ;
    internal LoadDataFilterOptions ;
    []
private LoadOptions ;
    []
private Workbook ;
    internal bool ;
    internal Byte[] ;
    private [] ;
    []
internal Worksheet ;
    private bool ;
    internal int ;
    private  ;
    private  ;
    private Hashtable ;
    private Int32[] ;
    private int ;
    private string ;
    private string ;
    protected ushort ;
    protected ushort ;
    protected Byte[] ;
    internal int ;
    internal Int32[] ;
    internal bool ;
    private bool ;
    private int ;
    internal Hashtable ;
    private ArrayList ;
    private  ;
    internal  ;
    private StringBuilder ;
    private StringBuilder ;
    private int ;
    private int ;
    private ArrayList ;
    private ArrayList ;
    internal bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    private bool ;
    private int ;
    private int ;
    private bool ;
    internal  ;
    internal bool ;
    private Hashtable ;
    private bool ;
    [("True")]
internal (Workbook , LoadOptions , int );
    internal string ();
    internal string ();
    internal virtual void ( );
    internal virtual string (Byte[] , Int32[] );
    internal virtual string (Byte[] , Int32[] , int );
    internal virtual string ( );
    internal virtual void ( );
    internal virtual string (Byte[] , Int32[] );
    internal virtual string (int );
    internal virtual Byte[] (Byte[] );
    internal virtual string (Byte[] );
    internal virtual int ();
    internal virtual void ( );
    internal virtual void ( );
    internal virtual  ( );
    internal virtual bool ( );
    internal virtual void ( );
    internal virtual void ();
    internal virtual void ( , HorizontalPageBreakCollection , VerticalPageBreakCollection );
    private void ( );
    internal virtual void (int , bool );
    internal virtual void ( ,  );
    internal virtual string (Byte[] , int );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual int (Style , Byte[] );
    private void ();
    internal virtual void ( );
    internal virtual void ( );
    internal virtual void ( );
    internal virtual string ();
    internal virtual CellArea (Byte[] , Int32[] );
    internal virtual void (Byte[] , Int32[] , int , ArrayList );
    internal virtual string (Byte[] , Int32[] , int );
    internal virtual string (Byte[] , Int32[] , int , int );
    internal virtual bool (Int32[] ,  , ScenarioInputCell );
    internal virtual void ( );
    internal virtual  ( ,  );
    internal virtual void (Stream );
    internal virtual void ();
    internal virtual void ( );
    private void (ushort ,  );
    private bool (ushort , ushort ,  );
    private void ( );
    internal void ( );
    internal int ( , int );
    internal int ( , int );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    [("True")]
internal bool ( );
    internal void ( , int );
    private void ( );
    private void ( );
    private void (ExternalConnection , int , int );
    private static string (Byte[] , Int32[] );
    private static void (StringBuilder , Byte[] , Int32[] );
    internal static string (Byte[] , Int32[] );
    private void ( );
    private void ();
    private void ( );
    private bool ( , bool );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    internal string (string , string );
    private void ( ,  );
    private void ( ,  );
    private void ( );
    private string (Byte[] );
    internal int ();
    private void ( );
    private void ( ,  );
    private int ( ,  , int , int ,  , int );
    private void ( ,  );
    private void ( );
    private void ( );
    private CountryCode (int );
    internal int (Style , int );
    internal void (Style , int );
    internal int (Style , Byte[] );
    internal void (Style , int );
    internal void (Style , Byte[] , int );
    internal void (Style , int , BorderType );
    private void (Byte[] );
    private void ( );
    private void ( );
    private void ( );
    private void (TableStyle ,  );
    private void ( );
    internal virtual void (Font , Byte[] );
    private void (Byte[] );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ();
    internal void ( );
    private void ( );
    private void ( );
    protected virtual object ( );
    protected virtual object (Byte[] );
    protected virtual void (Byte[] , int , int );
    internal virtual bool (int );
    private bool (int );
    private void ();
    internal virtual void ( );
    internal void ( );
    private void ( );
    private void ( );
    private void ( , UInt16[] );
    private void ( );
    private void ( );
    private void ( );
    internal virtual bool ( );
    private void ( );
    private void ( );
    private void ( );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( , UInt16[] );
    internal static void (HyperlinkCollection , Byte[] );
    private static string (Byte[] , Int32& );
    private void ( );
    internal void ( , PageSetup , bool );
    private void ( );
    private void ( );
    internal void ( );
    private void ( );
    private void (ShapeCollection );
    private void (bool );
    private void ( ,  );
    private void ( );
    private void ( );
    private void ( );
    private void (CellArea , int , ListObject );
    private void ( );
    private void ( );
    internal static int (Byte[] , int , Style , int );
    [("True")]
private static string (Byte[] , Int32& );
    private Byte[] ( );
    private void (PageSetup ,  , Byte[] );
    private void ( );
    private int (int , AutoFilter );
    internal static void (AutoFilter ,  );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( , bool ,  );
    private void ( );
    private void ( );
    private void ( );
    internal void ( );
    internal void ( , int );
    private void ( );
    private int (int , Style , int );
    private int (int , Style );
    private void ( , FormatCondition );
    private void (FormatCondition , int , int , bool , int );
    private  (Byte[] , int );
    private int (int , ConditionalFormattingValue );
    private int (int , ConditionalFormattingValue );
    private void ( );
    private void ( );
    internal void (FormatCondition );
    private bool ( , PaneCollection );
    private void ( );
    internal static MemoryStream ( );
    private void ( , Stream );
    internal void ();
    private void ();
    private void (Stream ,  ,  );
    private void (Stream ,  ,  );
    private void (Stream ,  ,  );
    internal void ( , string );
    internal static void ( , WorksheetCollection );
    internal void (bool );
    [("True")]
private bool ( , bool , bool );
    [("True")]
private void ( ,  );
    internal void ( , PageSetup );
    private int ( , int , int , Byte[] , int , int , bool );
    private  (Byte[] , int );
    private void ( );
    private void ( );
    internal int ( , Byte[] , int , int );
    internal void (Border , Byte[] , int );
    internal  (Byte[] , int , Boolean& );
    private void ( );
    private void (DataSorter ,  );
    internal Byte[] ();
    internal ushort ();
    internal void (ushort );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (int , PivotFieldCollection );
}
internal class  :  {
    private  ;
    public ( ,  );
    public  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private static float ;
    private static ();
    public static Color ( , Color );
    private static  (Color ,  );
    private static Color (Color );
}
[]
internal class  : object {
    internal static  ;
    private  ;
    private string ;
    private string ;
    private int ;
    private int ;
    internal static a1 a277599811;
    internal static a1 a721764775;
    private static ();
    public static  ();
    private static void ( );
    internal bool (string , string );
    internal static  ();
    internal static  ();
    internal static void ();
    internal decimal ();
    internal decimal ();
    internal void ();
    private static bool ( );
    internal string ();
    internal  ();
    private static void .ctor_1(& , Int32& , Int32& );
    private void .ctor_2();
}
internal static class  : object {
    private static bool ;
    private static bool ;
    private static ();
    public static bool ();
    public static bool ();
    private static bool (OperatingSystem );
}
internal class  : object {
    private bool ;
    internal int ;
    internal bool ();
    internal void (bool );
    internal double ();
    internal void (double );
    internal void ( );
    internal bool ( );
}
internal class  :  {
    internal (RevisionLogCollection );
}
internal class  : object {
    private static Byte[] ;
    private static long ;
    private static int ;
    private static IDictionary ;
    private  ;
    private  ;
    private int ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private long ;
    private static ();
    public ( , int ,  , Byte[] , Byte[] );
    public sealed virtual int ();
    public sealed virtual int (Byte[] , Byte[] , bool );
    private Byte[] ();
    private void (Byte[] , Byte[] );
    public sealed virtual void (Byte[] );
    private Byte[] (Byte[] );
    private void (Byte[] , Byte[] );
    private Byte[] (Byte[] , int );
}
internal class  :  {
    private RectangleF ;
    private bool ;
    private string ;
    public (RectangleF , string );
    public RectangleF ();
    public bool ();
    public string ();
    public void (string );
    public virtual void ( );
    public virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
}
internal class  :  {
    private bool ;
    private bool ;
    private int ;
    protected (Stream );
    public (Stream , int , bool );
    public virtual void ( );
    public virtual Stream ();
    public virtual void ();
    private void (int );
    protected void (int );
    protected void (Stream );
    protected void ();
}
internal class  : object {
    private int ;
    internal (int );
    public sealed virtual int (int );
    public sealed virtual int (int , int );
    public sealed virtual void (Int32[] );
}
internal class  : object {
    private Worksheet ;
    private  ;
    internal (Worksheet ,  );
    internal void ();
    private void (SparklineCollection );
    internal static string (PlotEmptyCellsType );
    internal static string (SparklineType );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
internal Stream ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public (Stream ,  ,  );
    public  ();
    public  ();
    public virtual int ReadByte();
    public virtual int Read(Byte[] , int , int );
    private bool ();
    private Byte[] ();
    public virtual void Write(Byte[] , int , int );
    public virtual void WriteByte(byte );
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public sealed virtual long get_Length();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long );
    public virtual void Close();
    public virtual void Flush();
    public sealed virtual long Seek(long , SeekOrigin );
    public sealed virtual void SetLength(long );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal Size[] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Size ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Size[] ;
    internal ( ,  );
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    public virtual double ();
    public virtual void (double );
    internal double (double );
    internal double (double );
}
internal class  : object {
    private static UInt32 ;
    private static int ;
    private static ();
    public static UInt32 (UInt32 , Byte[] , int , int );
}
internal class  : object {
}
internal class  : object {
    internal string ;
    internal string ;
    internal (string , string );
}
internal class  : object {
    protected  ;
    protected  ;
    public (int );
    public virtual Stream (Stream );
    public virtual Stream (Stream );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( );
    internal  (int );
    public virtual  ( );
    internal int ( );
    public void (int ,  );
    internal int ();
    internal virtual ArrayList ();
}
internal class  :  {
    private string ;
    public (Byte[] );
    public (string );
    public static  (object );
    public static  ( , bool );
    public virtual string ();
    public Byte[] ();
    internal virtual void ( );
    protected virtual bool ( );
    protected virtual int ();
}
internal class  : object {
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
    public string ;
}
internal class  :  {
    internal void ( );
}
internal abstract class  : object {
}
internal class  : object {
    private static Byte[] ;
    private static Hashtable ;
    private static object ;
    private static ();
    internal static Byte[] ( );
    private static Byte[] ( );
    private static string ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    public ( ,  ,  );
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private static IDictionary ;
    private static ();
    public static  ( );
    public static  (string );
    public static string ( );
}
internal class  : object {
    private Byte[] ;
    private Byte[] ;
    internal int ;
    internal byte ;
    internal byte ;
    []
private  ;
    private ushort ;
    private short ;
    internal byte ;
    internal ( , Byte[] , int );
    internal ( );
    internal Byte[] ();
    internal void (Byte[] );
    internal void ( );
    internal UInt32 ();
    internal ushort ();
    internal void (ushort );
    internal short ();
    internal void (short );
    internal Byte[] ();
    internal void (Byte[] );
    internal int ();
    internal bool ();
}
internal class  : object {
    []
internal Workbook ;
    internal static long ;
    internal (Workbook );
    private static ();
    internal bool ();
    internal bool ();
    internal void ();
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool , bool );
    private static Byte[] (bool );
    public bool ();
}
internal class  :  {
    private int ;
    private int ;
    private bool ;
    private int ;
    private int ;
    public ([] ,  , int , int , int , int , int );
    protected virtual void ();
    private void ();
    public virtual  ();
}
internal class  : object {
    private  ;
    private  ;
    internal ( );
    internal void ( );
    private void ( );
    private void ( );
    private void ( );
    private  ( );
    private List`1<> ( );
    private  ( );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private  ( );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private int ( );
    private  ( );
    private void ( );
}
internal interface  {
    public abstract virtual  ( );
}
[DefaultMemberAttribute("")]
internal class  : Hashtable {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
public   { get; public set; }
    public (bool );
    public  (int );
    public void (int ,  );
    public  ();
    public void ( );
    public void ( );
    public  (int );
    public  (int );
    private  ();
    public bool (int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    internal int ;
    internal  ;
    public (int , string );
    public (string );
    public ( );
    public static  (object );
    public virtual  ();
    public string ();
}
internal class  :  {
    private int ;
    public int ();
    public void (int );
    public virtual  ( );
    public virtual  ();
}
internal class  :  {
    internal ( );
    internal virtual Cell (Byte[] , int , int , Row , int );
}
internal class  :  {
    internal Byte[] ;
    internal int ;
    internal bool ;
    internal  ;
    public ( );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual int ();
    public virtual int (int );
    public virtual int (int );
    public virtual int (byte , Byte[] , int );
    public virtual Byte[] (byte );
    public virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public virtual Byte[] ();
    public virtual Byte[] (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual void ();
}
[("And")]
[("Or")]
[("Complement")]
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (Byte[] );
    internal void (ushort , byte , ushort ,  , object , byte );
}
internal class  :  {
}
internal class  : object {
    public static bool (int );
    public static bool (int );
    internal static  (int );
    public static bool (short , short );
    public static short (short );
    public static string (short );
    public static short (CountryCode );
    public static CountryCode (short );
    public static short (string );
    public static short (string , string , string );
}
internal class  :  {
    internal virtual void ( );
}
internal class  : object {
    internal static UInt32[] ;
    internal static UInt32[] ;
    private static UInt32[] ;
    private static ();
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    private static void (UInt32[] );
    private static void (UInt32[] );
}
internal class  :  {
    private  ;
    private RectangleF ;
    private  ;
    public ( ,  );
    internal virtual  ();
    internal void ( );
    public virtual void ( );
    protected int ();
    protected Matrix ();
}
internal class  :  {
    internal ( , float , float ,  );
    private static long ( );
    internal static GraphicsPath[] ( , RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    public ( );
    public ( );
    public static  (object );
    public static  ( , bool );
    public virtual Byte[] ();
    public virtual  ();
    public virtual  ();
}
internal class  :  {
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    public virtual double (double );
    protected virtual bool (double , double );
    protected virtual bool (double , double );
    public virtual double (double );
    internal static  (double , double , double , double , double , double );
}
internal class  : object {
}
internal interface  {
}
internal class  : object {
    internal  ;
    internal int ;
    internal int ;
    internal int ;
    internal double ;
    internal bool ;
    internal string ;
    internal double ;
    private int ;
    private int ;
    private int ;
    internal string ;
    internal int ;
    internal string ;
    internal int ;
    internal int ;
    internal bool ;
    internal int ;
    internal bool ;
    internal  ;
    private  ;
    private  ;
    private  ;
    private  ;
    internal bool ;
    internal ( );
    internal void ( , Stack`1<> ,  ,  );
    private void (Stack`1<> );
    private void (Stack`1<> ,  );
    private void ( , bool );
    private void (Stack`1<> ,  );
    private void ( );
    private void (Stack`1<> ,  );
    private void (Stack`1<> ,  , int , bool );
    private void ( , Stack`1<> ,  );
    private void ( , Stack`1<> ,  );
    private void ( , int , Stack`1<> ,  );
    internal static  (int );
    private void ( ,  );
    private void ( );
    private  ( );
    private  ( );
    private void ( );
    private void ( , bool ,  );
}
internal class  : object {
    internal  ;
    internal int ;
    internal ( , int );
}
internal class  : object {
    private static  ;
    private  ;
    private string ;
    private  ;
    private  ;
    private static ();
    internal void ( );
    internal void ( );
    internal void (string );
    public sealed virtual  ( ,  );
    private static  (string ,  );
}
internal class  : object {
    private static bool (string , Int32& );
    internal static bool (string , Int32& , Int32& , Boolean& , Boolean& , Boolean& , Boolean& );
    public static bool (string );
    internal static Byte[] (WorksheetCollection , int , string , bool , bool , Boolean& );
    internal static Byte[] (WorksheetCollection , int , string , bool , bool , bool , Boolean& );
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    []
internal  ;
    internal string ;
    internal Font ;
    []
internal Worksheet ;
    internal int ;
    internal int ;
    internal float ;
    internal float ;
    internal float ;
    []
internal  ;
    private Hashtable ;
    []
private PageSetup ;
    internal bool ;
    private Double[] ;
    internal float ;
    public ( , Worksheet , Hashtable , int , int , double , double );
    public void (string );
    public  (String& );
    public void ();
    public void ();
    public void ();
    public void ();
    private Picture ();
    [("True")]
private RectangleF (Picture , Stream );
    internal void ();
}
internal class  : object {
    private  ;
    public ( );
    public (Byte[] );
    public (Stream );
    private ( );
    public int ();
    public object ();
    public Byte[] ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private static Encoding ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<MemoryStream> ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<MemoryStream> ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private UInt32 ;
    [DebuggerBrowsableAttribute("0")]
private UInt32 ;
    [DebuggerBrowsableAttribute("0")]
private List`1<ushort> ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private StreamWriter ;
    [DebuggerBrowsableAttribute("0")]
private List`1<ushort> ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private StreamWriter ;
    [DebuggerBrowsableAttribute("0")]
private MemoryStream ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public ([] );
    private static ();
    public void (string , [] );
    public UInt32 (string );
    public MemoryStream ();
    private static void ( ,  );
    private static void ( );
    private static void (MemoryStream , UInt32 );
    private static void (MemoryStream , long );
    private void (UInt32 );
    private void ();
    private void ();
    internal static bool (UInt32 );
    internal static int (byte );
    public sealed virtual void Dispose();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void ();
    private GraphicsPath (float , float , float , float , int );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  : object {
}
internal interface  {
    public abstract virtual int ();
    public abstract virtual int (int );
    public abstract virtual  ();
    public abstract virtual Int32[] ();
    public abstract virtual bool ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private static int ;
    private static int ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private bool ;
    private static ();
    public virtual void (bool ,  );
    public virtual byte (byte );
    public virtual void (Byte[] , int , int , Byte[] , int );
    public virtual string ();
    public virtual void ();
    private void (Byte[] );
    private void ();
    private void (UInt32[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    internal (int );
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    internal (string );
}
internal class  : object {
    []
internal Worksheet ;
    internal int ;
    internal ushort ;
    internal PaneCollection ;
    internal  ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal ViewType ;
    internal Int32[] ;
    internal (Worksheet );
    internal void ( );
    private void ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public PaneStateType ();
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public int ();
    public void (int );
    public ViewType ();
    public void (ViewType );
    public bool ();
    public void (bool );
    internal PaneCollection ();
    internal void (int , int );
    internal void (int , int );
    internal void (int , int , int , int , bool );
    internal void ();
    internal ArrayList ();
    internal string ();
    internal void (string );
    public void (int , int , int , int );
    internal Int32[] ();
    internal void ();
    private void (string );
    internal void (string , int , int );
    internal void ();
    public void ();
}
internal class  : object {
    internal  ;
    internal Double[] ;
    internal bool ;
    internal double ;
    internal double ;
}
internal class  :  {
    internal void (FormatConditionCollection );
}
internal class  : object {
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private int ;
    private int ;
    private  ;
    public (BigInteger , BigInteger );
    public (BigInteger , BigInteger , BigInteger );
    public (BigInteger , BigInteger , BigInteger , int );
    public (BigInteger , BigInteger , BigInteger , int , int );
    public (BigInteger , BigInteger , BigInteger , BigInteger ,  );
    public (BigInteger , BigInteger , BigInteger , int , int , BigInteger ,  );
    private static int (int );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public int ();
    public int ();
    public  ();
    public virtual bool Equals(object );
    protected virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    internal string ;
    internal string ;
    internal string ;
    internal ArrayList ;
    internal ArrayList ;
    internal virtual void ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public (int , int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    public sealed virtual int CompareTo(object );
}
internal class  : object {
    public static int (long , int );
    public static int (long , int );
    public static void (Stream , int );
    public static void (Stream , Stream );
    public static DateTime (long , string );
    public static long (DateTime , string );
    public static bool (string );
    public static void (string , string );
}
internal class  : SymmetricAlgorithm {
    [DebuggerBrowsableAttribute("0")]
private SymmetricAlgorithm[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public Byte[] IV { get; public set; }
    public (SymmetricAlgorithm[] );
    public int ();
    public virtual Byte[] get_IV();
    public virtual void set_IV(Byte[] );
    public virtual ICryptoTransform CreateDecryptor(Byte[] , Byte[] );
    public virtual ICryptoTransform CreateEncryptor(Byte[] , Byte[] );
    private ICryptoTransform (Byte[] , Byte[] , bool );
    public virtual void GenerateIV();
    public virtual void GenerateKey();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void (int , string );
}
internal abstract class  : object {
    protected int ;
    protected IList ;
    protected  ;
    protected (int , IList );
    protected virtual  (Stream );
    public virtual void ( );
    public abstract virtual void ();
    public virtual void ( );
    public virtual void ( );
    public virtual bool ();
    public virtual Byte[] ();
    public virtual void ();
    public virtual void (Stream );
    public abstract virtual void ( );
    public virtual void ();
    public abstract virtual void ( );
    public virtual void ( );
    public abstract virtual void (Stream );
    public virtual void (Stream );
    public abstract virtual Byte[] ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static int ;
    internal static int ;
    private static ();
    public static  ();
    public static  (int , int , int , ImageFormat , ImageOrPrintOptions , Stream ,  ,  );
    public static  (int , int , ImageOrPrintOptions );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (WriteProtection );
}
internal class  : object {
    private string ;
    private  ;
    public (string ,  );
    public sealed virtual object ();
    public sealed virtual  (Byte[] );
}
internal enum  : Enum {
    public int value__;
}
[AttributeUsageAttribute("32767")]
internal class  : Attribute {
}
internal class  :  {
    private bool ;
    private string ;
    private int ;
    private FontStyle ;
    private double ;
    public (string , int , FontStyle , bool );
    public void (string , int , FontStyle );
    protected virtual bool ();
    protected virtual void ();
    protected virtual void ();
    public virtual double ();
    public void (double );
}
internal class  : object {
    internal bool ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal int ;
    internal int ;
    internal string ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal (bool );
    internal void ( , CopyOptions , bool );
}
internal abstract class  :  {
    protected ( ,  ,  , bool );
    protected ( ,  ,  , [] , bool );
    protected internal virtual bool ();
    protected virtual bool ();
    public virtual  ( );
}
internal class  : object {
    []
private  ;
    private  ;
    []
private  ;
    private Stack ;
    internal ( ,  );
    internal void ();
    internal void ( );
    internal void ( );
    internal void (Matrix ,  );
    internal void (Matrix ,  , int );
    internal void ( ,  );
    private bool (ArrayList , Single& , Single& );
    internal void ( , bool ,  );
    internal void (Color , bool ,  );
    internal void (float ,  );
    internal void ( , float ,  );
    internal void (int ,  );
    internal void (float ,  );
    internal void (float ,  );
    internal void (int ,  );
    internal void (int ,  );
    internal void (float ,  );
    internal void (Single[] , float ,  );
    private void ( ,  );
    internal RectangleF (RectangleF );
    internal PointF (PointF );
    internal  ();
    internal bool ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    public static  ;
    private  ;
    private string ;
    private  ;
    private ( );
    public ( , string ,  );
    private static ();
    public static  (object );
    public static  ( , bool );
    public virtual  ();
    public virtual  ();
    public virtual string ();
    public virtual  ();
}
internal class  : object {
    [("True")]
public static Byte[] (Byte[] , Byte[] , int , int );
    public static int (int , int );
    private static void (Byte[] , int ,  , Byte[] , int , int );
    private static void (Byte[] , Byte[] );
    private static void (Byte[] , int , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private SlicerCollection ;
    internal (SlicerCollection );
    internal virtual void ( );
}
internal class  : object {
    private  ;
    private Stream ;
    private Stream ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private MemoryStream ;
    private  ;
    private  ;
    private  ;
    private  ;
    private bool ;
    private int ;
    private int ;
    private int ;
    internal ( , Stream , Stream );
    internal virtual void ( );
    internal virtual int ();
    internal virtual void (int );
    internal virtual  ();
    internal virtual void ( );
    internal virtual void ( );
    internal virtual void (bool );
    internal virtual void ( ,  );
    internal virtual void ();
    internal virtual void ();
    internal virtual void ();
    internal virtual void (Byte[] );
    internal virtual bool ();
    internal virtual Byte[] (byte , Stream , int );
    internal virtual void (byte , Byte[] , int , int );
    internal virtual void ();
    internal virtual  ();
    internal virtual Stream ();
    internal virtual  ();
    internal virtual void ();
    internal virtual void ();
    private Byte[] ();
    private static void (byte , byte );
    private static void (int , int , byte );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    internal (Rectangle ,  );
    private void (Rectangle );
    private void ();
    private void ();
    internal void ( );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static  ;
    private static  ;
    private static  ;
    private static ();
    public static  ( );
    public static IEnumerable ();
    public static  (string );
    public static  (string );
}
internal class  : object {
    private int ;
    private byte ;
    private byte ;
    public ( , [] , [] , byte , byte , int );
    public sealed virtual  ();
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual bool ();
    private static int ( , int , int );
    private  (int );
}
internal class  : object {
    internal string ;
    internal string ;
    internal long ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
}
internal abstract class  : object {
    public static int (int );
    public static int (int , int );
    [CLSCompliantAttribute("False")]
public static UInt32 (UInt32 , int );
    public static int (int , int );
    [CLSCompliantAttribute("False")]
public static UInt32 (UInt32 , int );
}
internal interface  {
    public abstract virtual bool ();
    public abstract virtual void ( );
    public abstract virtual void (Stream );
    public abstract virtual int ();
    public abstract virtual bool (object );
    public abstract virtual int ();
    public abstract virtual string ();
    public abstract virtual  ();
    public abstract virtual Byte[] ();
    public abstract virtual void (Stream );
}
internal class  : object {
    internal int ;
    internal int ;
    internal bool ;
}
internal class  :  {
    public ( );
    private  ( , string ,  );
    public  ( , string );
    public  ( ,  );
    public  ( , string , int );
}
internal class  : object {
    private [] ;
    internal ([] );
    public sealed virtual  ( );
    public sealed virtual  ();
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual void ( );
    public sealed virtual bool ( );
    public sealed virtual bool ( );
    public sealed virtual  ();
    public sealed virtual  (bool );
    public sealed virtual  ();
    public sealed virtual bool ();
}
internal class  : object {
    internal static Color[] (Workbook );
    internal static void (Style , ArrayList );
    internal static void (Style , ArrayList );
    internal static void (Font , ArrayList );
    internal static void (Chart , ArrayList );
    internal static void (Floor , ArrayList );
    internal static void (ChartDataTable , ArrayList );
    internal static void (Series , ArrayList );
    internal static void (ChartPoint , ArrayList );
    internal static void (Axis , ArrayList );
    internal static void (ChartFrame , ArrayList );
    internal static void (Line , ArrayList );
    internal static void (Area , ArrayList );
    internal static void (ArrayList , Color );
}
internal class  : object {
    protected  ;
    protected  ;
    internal ( ,  );
    public virtual BigInteger ();
    public virtual int ();
    public virtual  ();
    public virtual int ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  :  {
    public  ;
    public Byte[] ;
    public  ;
    public  ;
    public  ;
    public List`1<Byte[]> ;
    public List`1<string> ;
    public List`1<> ;
    public List`1<> ;
    public List`1<> ;
    public List`1<> ;
    public (Stream );
    public string ();
    public string ();
    private void ();
    private void ();
    private void ();
    private int (ushort );
    private Byte[] (Byte[] , int , bool );
    private int (Byte[] );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private  (UInt32 , string , Hashtable );
    private void ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    private RectangleF (RectangleF );
}
internal class  : object {
    internal bool ;
    internal  ;
    public ( ,  );
    public (bool ,  );
    public bool ();
    public  ();
    public  ();
    public virtual int GetHashCode();
    public virtual bool Equals(object );
    public static  ( );
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal DataTable ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private DataRow ;
    public String[] Columns { get; }
    public int Count { get; }
    public object Item { get; }
    public object Item { get; }
    public (DataTable );
    public sealed virtual String[] get_Columns();
    public sealed virtual int get_Count();
    public sealed virtual void BeforeFirst();
    public sealed virtual object get_Item(int );
    public sealed virtual object get_Item(string );
    public sealed virtual bool Next();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal [] ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private String[] ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal OdsSaveOptions ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    internal (Workbook , OdsSaveOptions );
    public sealed virtual void Dispose();
    private void ();
    public string (WorksheetCollection ,  );
    public string (Cell );
    internal void ();
    internal void ();
    private static void (int , ArrayList );
    internal static void (ArrayList , ArrayList , Workbook );
    internal void ( );
    private void ();
    private void ( );
}
internal class  : object {
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static UInt32[] ;
    private static int ;
    private static int ;
    private static int ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private UInt32[] ;
    private bool ;
    private Byte[] ;
    private static ();
    public sealed virtual void (bool ,  );
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public sealed virtual void ();
    public sealed virtual int ();
    private UInt32 (UInt32 );
    private void (UInt32 , UInt32 , UInt32[] );
    private void (Byte[] );
    private void (Byte[] , int , Byte[] , int );
    private void (Byte[] , int , Byte[] , int );
}
internal class  : object {
    private  ;
    private [] ;
    private  ;
    private bool ;
    private int ;
    private int ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private bool ;
    private  ;
    public ( ,  , bool , int , int , int , int , int , bool , bool ,  );
    private ( ,  , int , int , int , int );
    public sealed virtual  ( );
    public sealed virtual void ();
    public sealed virtual bool ();
    public sealed virtual bool (int , int );
    public sealed virtual bool (int );
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual  ( ,  ,  );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual void ( );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void ();
    public sealed virtual void ( );
    public sealed virtual  (int , int );
    public sealed virtual  (int );
    public sealed virtual void (int , int );
    public sealed virtual void (int );
    public sealed virtual void (int , int ,  );
    public sealed virtual void (int ,  );
    private void ( );
}
internal class  :  {
    internal void (int );
}
internal class  : object {
    private  ;
    private  ;
    private VbaProject ;
    private int ;
    private Byte[] ;
    private int ;
    private int ;
    private Byte[] ;
    internal (VbaProject ,  );
    internal void ();
    private void (Stream , int );
    internal void ();
    internal void ();
    internal void ();
    private  (String[] , int );
    internal void ();
}
internal abstract class  :  {
    internal bool ;
    internal bool ;
    internal bool ;
    internal long ;
    internal long ;
    internal int ;
    internal int ;
    internal  ;
    internal bool ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal ( ,  );
    internal abstract virtual void ( );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private Hashtable ;
    internal ( );
    internal virtual int ();
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private bool ();
    [("True")]
private void ( , string , string , string , List`1<string> );
    [("True")]
private void ( , string , string , string );
    private void ( );
    private void ( , List`1<string> );
    private void ( , string );
    [("True")]
private void ( );
    [("True")]
private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( , int , string );
    private void ( , string , string , string );
    [("True")]
private void ( );
    private void ( );
    private void ( );
    [("True")]
private void ( );
    private void ( );
    [("True")]
private void ( , string , int , string , bool , string , string , string );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    protected virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal abstract class  : object {
    protected abstract virtual  ();
    public virtual PrivateFontCollection ( );
    [("True")]
public virtual  (string , FontStyle , bool );
    [("True")]
public virtual  (string , FontStyle , bool );
    [("True")]
public virtual  (string , float , FontStyle );
    [("True")]
public bool (string , FontStyle , string );
    [("True")]
public bool (string , FontStyle , string , bool );
    [("True")]
public virtual  (FontStyle , int );
    [("True")]
public virtual  (FontStyle , string );
    [("False")]
public virtual string (string );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private Int32[] ;
    private int ;
    private int ;
    internal ( ,  ,  ,  , Int32[] , Int32[] , int , int , int , int , int , int , int , int , bool );
    internal ( ,  ,  ,  , Int32[] , Int32[] , int , int , int , int , int , int , int , int , bool , Int32[] );
    private ( );
    private ( , int , int , int , int , Int32[] );
    protected virtual void ();
    protected void ();
    protected virtual  (int , int , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual  (int , int );
    public virtual  (int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual void ();
    public virtual bool ();
    private bool ();
    public virtual bool (int , int );
    public virtual bool (int );
    private static Int32[] (Int32[] , Int32[] , int , int , int , int , int );
    internal static void (Int32[] , Int32[] , int , int , int , int , int , Int32[] );
}
internal class  :  {
}
internal class  : object {
    private  ;
    private List`1<> ;
    internal string ;
    internal UInt32 ;
    internal UInt32 ;
    internal ( );
    internal void ( ,  );
    private void ( ,  );
    internal void ( , int );
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual  (float );
    public abstract virtual float ();
    public abstract virtual float (int , int );
    public abstract virtual float (int , int );
}
internal class  : object {
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    public (BigInteger , BigInteger , BigInteger );
    public (BigInteger , BigInteger , BigInteger , bool );
    public virtual BigInteger ();
    public virtual BigInteger ();
    public virtual BigInteger ();
}
internal class  : object {
    internal int ;
    internal Byte[] ;
    internal  ;
    internal object ;
    internal int ;
    internal short ;
    internal short ;
    internal (int , int );
    internal (int , int , Byte[] );
    internal void (Cells );
    internal virtual bool ();
    internal virtual bool ();
    internal virtual bool ();
    internal virtual bool ();
    internal virtual bool ();
    internal virtual bool (bool );
    internal virtual bool (bool );
    internal byte ();
    internal void (byte );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal bool ();
    internal bool ();
    internal void ( );
    internal  (Cells );
    internal  (Cells , int , int );
    internal bool ();
    internal void (bool );
    internal  ( );
    internal bool ();
    internal void (bool );
    internal void ( );
    internal void ( );
    internal void ( );
    internal virtual  (int , int , WorksheetCollection , WorksheetCollection , CopyOptions );
    internal virtual void ( );
    internal virtual  ();
    internal static long (int , int );
    internal static int (long );
    internal static int (long );
    internal static void ();
    internal static void ();
    internal void ( );
    internal void (Cells ,  , ArrayList ,  );
    internal void ( );
    internal void ( ,  , object , StringBuilder );
    internal void ( , StringBuilder );
    private void ( );
    private void ( ,  );
    internal bool ( , int );
    internal void ( ,  );
    internal void ( ,  );
    internal bool ( , int );
    internal  ();
    internal  ( , bool );
    internal string ( , bool );
    internal void (Cells , object );
    private bool (double );
    private bool ();
    private bool (string );
    internal void ( );
    internal virtual void (int , int , int , int );
    internal virtual void (int , int , int , int );
    internal virtual bool (CellArea , bool );
    internal void (WorksheetCollection , int , int );
}
internal class  : object {
    internal bool ;
    internal bool ;
    internal PivotGroupByType ;
    internal DateTime ;
    internal DateTime ;
    internal double ;
    internal double ;
    internal double ;
    internal int ;
    internal int ;
    internal bool ();
    internal void ( );
    public bool ();
    public bool ();
    public double ();
    public double ();
    public double ();
    public PivotGroupByType ();
}
internal class  : object {
    private static  ;
    internal static string ;
    internal static int ;
    internal static int ;
    internal static String[] ;
    private static ();
    internal static void ( , object ,  );
    internal static void ( , int ,  );
    internal static void ( , int );
    internal static  ( , int ,  ,  , IList[] , int );
    internal static void ( , object ,  );
    internal static  ( ,  );
    internal static  ( , object ,  ,  ,  , IList );
    internal static  ( ,  );
    internal static  ( ,  );
    private static void ( ,  ,  , DateTime ,  ,  ,  ,  , IList );
    protected static void ( ,  , DateTime ,  ,  , IList );
    internal static  ( , int , IList[] ,  , int );
    internal static [] (DateTime ,  ,  ,  );
    internal static  (DateTime ,  ,  ,  );
    internal static void ( , int ,  , int );
    internal static void ( ,  , int ,  ,  ,  );
    internal static int ( , int , int );
    internal static int ( , int , int );
    internal static void ( , int ,  );
    internal static int ( , int , int );
    internal static void ( , int );
    internal static int ( , int , int );
    internal static int ( , int , int );
    internal static void ( , int );
    internal static void ( , int ,  , IList );
    internal static int ( , int , int );
    internal static int ( , int , int );
    internal static int ( , int , int );
    internal static int (int ,  );
    internal static int ( , int , int );
    internal static void ( , int , IList ,  );
    internal static  ( ,  ,  , int , IList[] ,  ,  );
    internal static void ( ,  ,  );
    internal static void (DateTime ,  , object ,  ,  );
    internal static void (DateTime ,  , object ,  );
    internal static  ( , int ,  );
}
internal class  :  {
    internal string ;
    internal string ;
    internal (string , string );
    internal virtual  ();
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected string ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected Double[] ;
    [DebuggerBrowsableAttribute("0")]
protected double ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal PointF ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( ,  );
    public  ();
    public  ();
    public double ();
    public void (double );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public double ();
    public void (double );
    public double ();
    public void (double );
    internal bool ();
    public bool ();
    public void (bool );
    public string ();
    public void (string );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public  ();
    public void ( );
    public  ();
    internal Double[] ();
    internal void (Double[] );
    internal double ();
    internal void (double );
    public int ();
    public void (int );
    internal bool ();
    internal void (bool );
    internal virtual void ();
    internal bool ();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  : object {
    private static [] ;
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private byte ;
    private [] ;
    private [] ;
    public ( ,  );
    private static ();
    public void (int ,  );
    public void (int ,  ,  );
    public void (byte );
    private void (byte );
    private void ();
    private void (byte );
    public void (Byte[] );
    public void (Byte[] , int , int );
    public void ( );
    public void ( );
    public  (bool );
    public  ();
    public  (string ,  );
    public  ( ,  );
    public  ( ,  );
    public  ( );
    private Byte[] ( );
    private bool ([] ,  );
    private [] ([] ,  );
    private void (int , Byte[] );
    private void ( );
}
internal class  :  {
    internal (Row );
    public virtual int ();
    public virtual void (int );
    public virtual void ();
    public virtual Cell (int );
    public virtual Cell (int );
    public virtual Cell (int , bool , bool );
    public virtual void (Cell );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private static BigInteger ;
    private static BigInteger ;
    private  ;
    private int ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private Byte[] ;
    private int ;
    private Byte[] ;
    public ( );
    private static ();
    public sealed virtual void ( );
    public sealed virtual  ();
    public sealed virtual  ();
    public sealed virtual int (Byte[] , int , int );
    private void ();
}
internal class  : object {
    internal Font ;
    internal string ;
    internal int ;
    internal TextAlignmentType ;
    internal (Font , string );
    internal (Font , string , int , TextAlignmentType );
    public virtual bool Equals(object );
    private bool ( );
    public virtual int GetHashCode();
    private int ();
    private int ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private IWarningCallback ;
    public (int , int , ImageFormat , ImageOrPrintOptions , Stream ,  ,  );
    [("True")]
public virtual Bitmap ();
    public void (Byte[] , RectangleF , RectangleF , GraphicsUnit );
    public virtual void (Image , Rectangle , int , int , int , int , GraphicsUnit );
    public virtual void (Brush , Region );
    protected virtual void (Region , CombineMode );
    public virtual void (GraphicsPath , CombineMode );
    public void (string , Font , Brush , PointF , bool );
    protected virtual void (string , Font , Brush , float , float , float , float , StringFormat );
    private void (string , Font , Brush , float , float , float , float , StringFormat , bool );
    internal  ( , string , Font , Brush , float , float , float , float , StringFormat );
    private float (Font );
    protected virtual void (float , float , float , float , Image );
    private void (string , Font , Brush , float , float );
    internal virtual float (float , float );
    internal virtual float (float , float );
    internal virtual float (float );
    internal virtual float (float );
    public virtual  ();
    private  ();
    public virtual void ();
    private void ();
    private void (Bitmap , Stream );
    private void (Bitmap , Stream );
    private ImageCodecInfo (string );
    private void ();
    internal static Stream (Image );
    internal static Stream (Image , RectangleF , RectangleF );
    internal static Stream (Image , RectangleF , RectangleF );
    public virtual void (SmoothingMode , bool );
    public virtual void (TextRenderingHint , bool );
    public virtual SmoothingMode ();
    public virtual void (SmoothingMode );
    public virtual TextRenderingHint ();
    public virtual void (TextRenderingHint );
}
internal class  : object {
    internal static Encoding (Stream );
    public static  (Stream , Encoding );
    public static  (Stream , Encoding );
    public static  (Stream );
    public static  (string , bool );
    public static  ( , string , bool );
    public static  ( , string );
    public static  (string ,  );
    public static  (string ,  , bool );
    public static  (string ,  , bool , string );
    public static  (Stream , bool );
}
internal enum  : Enum {
    public int value__;
    public static  SHA1;
    public static  SHA256;
    public static  MD5;
}
internal class  :  {
    internal (int );
}
internal class  : object {
    private  ;
    private Byte[] ;
    public ( , Byte[] );
    public Byte[] ();
    public  ();
}
internal class  : object {
    internal static char ();
    internal static string (string );
    internal static bool (string );
    internal static string (string );
    internal static string (string );
    internal static string (string );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal abstract class  : object {
    private Stream ;
    protected (Stream );
    protected Stream ();
    public abstract virtual void ( );
    public abstract virtual Stream ();
    public abstract virtual void ();
}
internal class  :  {
    private MethodBase ;
    public MethodBase ();
    public void (MethodBase );
    public IntPtr ();
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    internal static bool (string );
    public static  (Byte[] );
    public static  (Byte[] , ImageType );
    public static  (Byte[] );
    public static  (Byte[] );
    public static ImageType (Stream );
    public static ImageType (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static bool (Byte[] );
    public static ImageType (ImageFormat );
    public static ImageFormat (ImageType );
    [("False")]
public static Byte[] (Byte[] );
    public static string (ImageType );
    public static ImageType (string );
    [("False")]
internal static Byte[] (Stream , int , int , Int32[] );
    [("False")]
internal static Byte[] (string , Stream , int , int , Int32[] );
    public static void (int , int );
    internal static bool (ImageType );
    internal static Byte[] (Byte[] );
    internal static Byte[] (Byte[] , ImageType );
    private static float (float , float );
    internal static Byte[] (Byte[] );
}
internal class  :  {
    internal (PivotField );
}
internal class  : object {
    private  ;
    private Byte[] ;
    private bool ;
    private  ;
    private  ;
    public (Byte[] );
    public virtual string ();
    public virtual void (bool ,  );
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool (Byte[] );
    public sealed virtual void ();
}
internal class  : object {
    private ushort ;
    private UInt32 ;
    private ushort ;
    private ushort ;
    private UInt32 ;
    internal void (BinaryReader );
    internal void (BinaryWriter );
    internal ushort ();
    internal void (ushort );
    internal UInt32 ();
    internal void (UInt32 );
    internal ushort ();
    internal void (ushort );
    internal ushort ();
    internal void (ushort );
    internal UInt32 ();
    internal void (UInt32 );
}
internal class  : object {
    private ArrayList ;
    private long ;
    private long ;
    private bool ;
    private bool ;
    internal ArrayList ();
    internal void (ArrayList );
    internal long ();
    internal void (long );
    internal long ();
    internal void (long );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    private int ;
    private int ;
    private int ;
    private int ;
    internal ( );
    public (int , int , int , int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
    public int ();
    public void (int );
}
internal class  : object {
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal int ;
    internal (RevisionLog );
    internal (RevisionQueryTable );
    internal (RevisionMergeConflict );
    internal (RevisionAutoFormat );
    internal (RevisionDefinedName );
    internal (RevisionRenameSheet );
    internal (RevisionCellMove );
    internal (RevisionInsertSheet );
    internal (RevisionCellComment );
    internal (RevisionCustomView );
    internal (RevisionInsertDelete , bool );
    internal (RevisionFormat );
    internal (RevisionCellChange );
    internal void (RevisionCellChange );
    internal void (RevisionCellMove );
    internal int (Byte[] );
    internal int (Byte[] , int );
}
internal class  : object {
    private int ;
    private Byte[] ;
    private Byte[] ;
    private bool ;
    private Int32[] ;
    private Byte[] ;
    private Byte[] ;
    private static Int32[] (Byte[] );
    public sealed virtual void ( );
    public sealed virtual string ();
    public sealed virtual int ();
    private int (int , int );
    private void (Int32[] , Byte[] , int , Byte[] , int );
    private static int (Byte[] , int );
    private static void (int , Byte[] , int );
    private static Byte[] (Byte[] , int , Byte[] );
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
}
internal class  :  {
    internal ( , object );
    internal bool ();
    internal bool ();
    internal  ();
}
internal class  : object {
    public static int (int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal  ;
    internal Hashtable ;
    internal Hashtable ;
    []
internal  ;
    internal ArrayList ;
    internal bool ;
    internal bool ;
    internal bool ;
    []
internal ShapeCollection ;
    private int ;
    private ArrayList ;
    internal ( );
    internal bool ();
    private bool ( , ShapeCollection );
    private void (int ,  );
    private  (GroupShape );
    private bool (Shape , int );
    private bool (int , Picture );
    internal string (FillFormat );
}
internal abstract class  : object {
    public static Byte[] ( ,  , Stream );
    public static Byte[] ( ,  , Byte[] );
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    internal ( );
    public virtual void ( );
    internal  ();
    internal  ();
    internal  ();
}
internal class  :  {
    internal ( , float , float ,  );
    protected virtual PointF ( );
    internal static GraphicsPath[] ( , RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
    public string ;
    public string ;
    public string ;
    public virtual string ToString();
}
internal abstract class  :  {
}
internal abstract class  : object {
    protected  ;
    protected ( );
    protected virtual void (Byte[] , Byte[] );
    internal static void ( , short );
    protected static short (bool , IDictionary , IDictionary , byte );
    protected static Byte[] ( );
    protected static Byte[] (IList );
    protected static void (int , byte );
}
internal class  : object {
    private Rectangle ;
    private RectangleF ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal void (BinaryReader );
    private int (float );
    private int (float , int , int );
    internal Rectangle ();
    internal RectangleF ();
    internal float ();
    internal float ();
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
[]
protected object ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public  ();
    public  ();
    public int ();
    public void (int );
    public  ();
    public void ( );
    internal bool ();
    internal bool ( );
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
internal class  :  {
    private  ;
    public ( );
    public (DateTime );
    public static  ( , bool );
    public static  (object );
    public string ();
    public DateTime ();
    public virtual  ();
}
internal abstract class  : object {
    protected int ;
    protected int ;
    protected (int , int );
    protected abstract virtual int ();
    protected abstract virtual int ();
    protected abstract virtual bool ();
    protected abstract virtual bool ();
    protected abstract virtual void (int , int , int , int , int );
    internal void ( , CellArea , CellArea );
    internal void ( , CellArea , CellArea );
    internal void ( , CellArea , CellArea );
    internal void ( , CellArea , CellArea );
    private void (int , int , int , int , int , int , int );
    private void (int , int , int , int , int , int , int );
    private void ( , CellArea , int , int , int , int );
    private void ( , CellArea , int , int , int , int );
}
internal abstract class  : object {
    protected Byte[] ;
    private short ;
    private short ;
    internal short ();
    internal void (short );
    internal Byte[] ();
    internal short ();
    internal void (short );
    protected void ( );
    internal virtual void ( );
    internal void (Byte[] );
    internal void ( );
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal IDictionary ;
    [DebuggerBrowsableAttribute("0")]
internal IList ;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public virtual void Add(object , object );
    public virtual void Clear();
    public virtual bool Contains(object );
    public virtual void CopyTo(Array , int );
    public virtual int get_Count();
    private sealed virtual override IEnumerator ();
    public virtual IDictionaryEnumerator GetEnumerator();
    public virtual void Remove(object );
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual object get_Item(object );
    public virtual void set_Item(object , object );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal static string (string );
    private static string (char );
    internal static void (Style , string );
    internal static void (Font , string );
    internal static void (Font , string );
    internal static CellBorderType (string , double );
    internal static BorderType (string );
    internal static void (Style , string );
    internal static void (Style , string );
    internal static void (Style , string );
    internal static string (CellArea );
    internal static string ( , int , int );
    internal static string (ArrayList , int , int );
    internal static string (OperatorType );
    internal static OperatorType (string );
    internal static string (FontUnderlineType );
    internal static FontUnderlineType (string );
    public static string (Style );
    public static string (Style , BorderType );
    internal static Color (string );
    internal static CellBorderType (string );
    internal static BackgroundType (string );
    internal static CellArea (string , int , int );
    internal static CellArea (string );
    private static CellArea (string );
    internal static void (string ,  );
    private static int (string );
    internal static void (string , Int32& , Int32& );
}
internal class  :  {
    private [] ;
    public ( );
    public ([] );
    public [] ();
    public virtual void ( );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal ( ,  );
    internal void ();
    public sealed virtual bool ( , int );
}
internal class  : object {
    []
private Worksheet ;
    []
private Comment ;
    internal (Worksheet );
    internal void ( );
    private void ( );
    private void ( , ThreadedComment );
    private void ( );
}
internal class  :  {
    protected virtual  ( , BigInteger );
}
internal class  : object {
    private  ;
    private  ;
    internal ( ,  );
    internal bool ( ,  ,  );
    internal void ( );
    private void ( ,  ,  );
    private void ( ,  , Brush );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private float ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public static  (object );
    public  ();
    public  ();
    public virtual  ();
}
internal class  : object {
}
internal class  : object {
    public static  (UInt32 );
    public static bool (UInt32 );
    public static int (UInt32 );
    public static UInt32 (int ,  );
    public static  ( );
}
internal class  :  {
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    private UInt32[] ;
    private int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    public ( );
    private static ();
    private void ( );
    public virtual string ();
    public virtual int ();
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    public virtual int (Byte[] , int );
    public virtual void ();
    private static UInt32 (UInt32 , int );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    private static UInt32 (UInt32 , UInt32 , UInt32 );
    internal virtual void ();
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    private int ;
    public virtual void (int , int );
    protected virtual bool ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
    public virtual  ();
}
internal class  : object {
    private  ;
    private ArrayList ;
    internal  ();
    internal void ( );
    internal ArrayList ();
    internal void ( );
}
internal class  : object {
    internal static string (TableStyleType );
    internal static TableStyleType (string );
}
internal class  :  {
    private string ;
    private string ;
    internal ( , string , string , string , string );
    protected virtual void ( , DateTime , double , StringBuilder );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( ,  , [] );
    internal virtual void ( );
    [("True")]
private void ( );
    private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
    [("True")]
private void ( );
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  : object {
    internal static string (string );
    internal static string (Font );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    public ( );
    public ( ,  );
    internal ( );
    public static  (object );
    public  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private  ;
    private  ;
    private int ;
    private int ;
    private int ;
    private int ;
    private  ;
    private  ;
    public ( , Cells , int , int , int , int );
    public ( , int , int , int , int , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool ();
    public virtual void (bool );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    private  (int , int );
    public virtual  (int , int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    private void ();
    private bool ();
    private bool (int );
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int , int , int , int ,  ,  );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    internal  ;
    internal virtual void ( );
    [("True")]
internal void (FilterColumn );
    [("True")]
private void ( );
    private void (int , FilterOperatorType , object , int );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static  ;
    private static ();
    private static  ( , int );
    internal static  (string );
    internal static  ( , string );
    internal static IEnumerable ();
    internal static Byte[] ( , string ,  ,  ,  );
}
internal class  : object {
    internal List`1<> ;
    internal  ( );
}
internal class  : object {
    private static void (PointF , PointF , bool , bool , Single& , Single& , Int32& );
    private static float (float , float );
    internal static void (PointF , PointF , SizeF , float , bool , bool ,  );
    private static bool (float , float , Single& );
    private static ArrayList (float , float , float , float , float , bool , bool , float , float , Int32& );
    internal static void (RectangleF , PointF[] );
    internal static RectangleF (float , float , RectangleF );
}
internal class  : object {
    private bool ;
    private  ;
    private  ;
    public  (bool );
    public  ( );
    public  ( );
    public  ( ,  );
    public  ( , Byte[] );
    private  ( ,  );
}
internal class  : object {
    private [] ;
    public ([] );
    public (Boolean[][] );
    internal [] ();
    public sealed virtual int ();
    public sealed virtual int ();
    public sealed virtual int (int );
    public sealed virtual  (int );
    public sealed virtual  (int );
    public sealed virtual bool ( );
    public sealed virtual bool (int , int ,  );
    public sealed virtual  (int , int );
    public sealed virtual  (int , int ,  );
    public sealed virtual object (int , int ,  );
    public sealed virtual void (int , int , StringBuilder ,  );
}
internal class  : Stream {
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    [DebuggerBrowsableAttribute("0")]
[("True")]
public int  { get; public set; }
    public long Length { get; }
    [("True")]
public long Position { get; public set; }
    public (Stream );
    [("True")]
public (Stream , int );
    public virtual void Close();
    public virtual void Flush();
    [("True")]
public virtual Byte[] ();
    [("True")]
private void ();
    [("True")]
private void ();
    [("True")]
private void (int );
    public virtual int Read(Byte[] , int , int );
    [("True")]
public virtual int ReadByte();
    [("True")]
public virtual long Seek(long , SeekOrigin );
    [("True")]
public virtual void SetLength(long );
    public virtual Byte[] ();
    [("True")]
public virtual void Write(Byte[] , int , int );
    [("True")]
public virtual void WriteByte(byte );
    public virtual void (Stream );
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual int ();
    public virtual void (int );
    public void ();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long );
}
internal class  :  {
    private  ;
    public ( );
    [ObsoleteAttribute]
public ( , Hashtable );
    public ( , IDictionary );
    public  ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    public string ;
    public int ;
    public int ;
    public int ;
    public List`1<> ;
    public (string , int , int , int );
}
internal class  : ValueType {
    public static Size ( , string , int , Font , SizeF ,  ,  , bool );
    public static Size ( , string , int , Font , SizeF ,  ,  ,  , bool );
    private static Size ( , string , Font , SizeF ,  ,  , bool );
    private static Size (SizeF , SizeF , int );
    internal static Size ( , string , Font );
    public static Size ( , string , int , Font , SizeF ,  ,  , bool );
    private static Size ( , string , Font , SizeF ,  ,  , bool );
    public static SizeF ( , string , Font );
    private static SizeF ( , string , Font , Size );
    private static SizeF ( , string , Font , SizeF );
    public static StringAlignment ( );
    public static float ( , string , Font );
    public static float ( , string , Font );
    public static SizeF ( , string , Font );
    public static Size ( , string , int , Font , Size ,  ,  , bool );
    public static Size ( , string , int , Font , Size ,  ,  , bool );
    public static Size ( , string , Font , Size ,  ,  , bool );
    public static void ( , string , Font , Color , float , float , float , float , TextDirectionType );
}
internal class  :  {
    private int ;
    private int ;
    private  ;
    private  ;
    private long ;
    private int ;
    internal ( );
    public (int ,  ,  , long , bool );
    public int ();
    public  ();
    public  ();
    public long ();
    public virtual void ( );
}
internal class  :  {
    []
private Row ;
    private  ;
    private int ;
    private Cell ;
    public (Row );
    public (Row , int , int , bool , int , bool , bool );
    public virtual bool ();
    public virtual object ();
    public virtual Cell ();
    public virtual void ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual RowCollection ();
    public virtual int ();
    public virtual  ();
    public virtual Row ();
    public virtual int ();
}
internal class  :  {
    private PointF[] ;
    public (PointF[] );
    internal PointF[] ();
    internal void (PointF[] );
    internal virtual bool ();
    internal virtual string (string );
}
internal abstract class  : object {
    protected static int ;
    protected bool ;
    protected Int32[] ;
    protected int ;
    protected int ;
    protected int ;
    protected int ;
    private static ();
    public virtual void (bool ,  );
    public virtual string ();
    public virtual bool ();
    public virtual int ();
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public virtual void ();
    protected static int (int , int );
    private static int (int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void (int , int , int , int );
    protected void ();
    protected void ();
    protected abstract virtual Int32[] (Byte[] );
    protected abstract virtual void (Byte[] , int , Byte[] , int );
    protected abstract virtual void (Byte[] , int , Byte[] , int );
}
internal class  : object {
    internal StreamWriter ;
    private Encoding ;
    internal bool ;
    internal bool ;
    internal (Stream , Encoding , bool );
    internal (string , Encoding );
    public Encoding ();
    public void (Encoding );
    internal void (string );
    internal void (bool , bool );
    internal void ();
    internal void ();
    internal void ();
    internal void ();
    internal void (string );
    internal void ();
    internal void ();
    internal void (bool );
    private StreamWriter (Stream , Encoding );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
}
internal class  : object {
    []
private  ;
    []
private  ;
    []
private WorksheetCollection ;
    private Byte[] ;
    private bool ;
    []
private Worksheet ;
    []
private object ;
    private ushort ;
    private Byte[] ;
    private ShapeCollection ;
    private bool ;
    private Range ;
    private ArrayList ;
    internal int ;
    private bool ;
    internal ( ,  , WorksheetCollection , Worksheet , object );
    internal bool ();
    internal void ();
    private void (Byte[] );
    private void (Byte[] );
    private Shape (Byte[] , int , MsoDrawingType );
    private void (Shape );
    private void (Shape );
    internal MsoDrawingType (byte );
    private void ( , Byte[] );
    internal bool (Shape );
    internal bool (OleObject );
    internal void (Picture );
    internal void (CheckBox );
    internal void (RadioButton );
    internal void (ComboBox );
    private void (Shape , Byte[] );
    internal void (Spinner );
    internal void (ScrollBar );
    internal void (ListBox );
    private void (Shape , Byte[] , bool );
    private Shape (Int32& , Shape , Byte[] , int , Byte[] );
    internal static Shape (ShapeCollection , Shape , bool , Boolean& );
    private static string ( );
    private Shape (Shape );
    private void (Shape , FontSettingCollection , bool );
    private int (int , int , Byte[] , int , int , int );
    private int ();
    private void (ShapeCollection );
    internal int ();
}
internal interface  {
    public abstract virtual bool (int );
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public abstract virtual  ();
}
internal class  :  {
    internal (PivotTable , int );
}
internal class  :  {
    public ( );
}
[AttributeUsageAttribute("4")]
internal class  : Attribute {
}
internal class  : object {
    public sealed virtual void (PointF );
    public sealed virtual void ( ,  , CustomLineCap , CustomLineCap , float , float , float , float , float , float );
    public sealed virtual void ( ,  , CustomLineCap , CustomLineCap , PointF[] , int , int , float );
    public sealed virtual void ( ,  , CustomLineCap , CustomLineCap , float , float , float , float );
    public sealed virtual void ( ,  , CustomLineCap , CustomLineCap , GraphicsPath );
    private void ( , PointF , PointF , PointF , CustomLineCap , Double& , Int32& );
    private void ( ,  , GraphicsPath , GraphicsPath , GraphicsPath , GraphicsPath , double , double , CustomLineCap , CustomLineCap , int , int , PointF[] );
    private void ( ,  , GraphicsPath , GraphicsPath , double , CustomLineCap , int , PointF& , PointF& );
    private GraphicsPath (CustomLineCap ,  );
    private GraphicsPath (CustomLineCap ,  );
    private PointF[] (GraphicsPath );
}
internal class  : object {
    private long ;
    private Nullable`1<long> ;
    private Nullable`1<Guid> ;
    private bool ;
    private Nullable`1<long> ;
    private  ;
    private  ;
    public long Id { get; public set; }
    public Nullable`1<long> IdentityUserId { get; public set; }
    public Nullable`1<Guid> IdentityUserFriendlyId { get; public set; }
    public bool IsPaid { get; public set; }
    public Nullable`1<long> CustomerId { get; public set; }
    public  PaymentPlan { get; public set; }
    public  Customer { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long );
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_IdentityUserId();
    [CompilerGeneratedAttribute]
public void set_IdentityUserId(Nullable`1<long> );
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_IdentityUserFriendlyId();
    [CompilerGeneratedAttribute]
public void set_IdentityUserFriendlyId(Nullable`1<Guid> );
    [CompilerGeneratedAttribute]
public bool get_IsPaid();
    [CompilerGeneratedAttribute]
public void set_IsPaid(bool );
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CustomerId();
    [CompilerGeneratedAttribute]
public void set_CustomerId(Nullable`1<long> );
    [CompilerGeneratedAttribute]
public  get_PaymentPlan();
    [CompilerGeneratedAttribute]
public void set_PaymentPlan( );
    [CompilerGeneratedAttribute]
public  get_Customer();
    [CompilerGeneratedAttribute]
public void set_Customer( );
}
internal class  :  {
    private object ;
    public object ();
    public void (object );
    public virtual object ();
    public virtual void (object );
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    private Bitmap ;
    private bool ;
    private IntPtr ;
    private BitmapData ;
    private Byte[] ;
    private int ;
    private int ;
    private int ;
    public (Bitmap );
    public Byte[] ();
    public void (Byte[] );
    public int ();
    public int ();
    public int ();
    public void ();
    public void ();
    public Color (int , int );
    public void (int , int , Color );
    public void (int , int , int , int , int , int );
}
internal class  :  {
    internal ( );
}
internal interface  {
    public abstract virtual BigInteger[] (BigInteger , Byte[] );
    public abstract virtual Byte[] (BigInteger , BigInteger , BigInteger );
}
internal class  : object {
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private DateTime ;
    private DateTime ;
    private DateTime ;
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public DateTime ();
    public void (DateTime );
    public DateTime ();
    public void (DateTime );
    public DateTime ();
    public void (DateTime );
}
internal enum  : Enum {
    public byte value__;
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private ( );
    public (Byte[] , BigInteger );
    public (Byte[] , BigInteger ,  );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal [] ;
    internal [] ;
    internal Byte[][] ;
    internal string ;
    internal (SparklineGroup );
    internal (Sparkline );
    internal (FormatConditionCollection );
    internal (FormatCondition );
    internal (ConditionalFormattingValue );
    internal static Byte[] (Byte[] );
    internal  ();
    internal ArrayList ();
    internal byte ();
    internal int (Byte[] , int );
    internal int ();
    internal int (Byte[] , int );
}
internal class  : object {
    private  ;
    public (int , int );
    public ( );
    public sealed virtual string ();
    public sealed virtual void ( );
    public sealed virtual int ();
    public sealed virtual void ();
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    public sealed virtual int (Byte[] , int );
}
internal class  : ValueType {
    internal static void ( );
    internal static void ( , bool );
    private static void ( );
    private static  ( );
    private static bool ( );
    internal static string ( );
    private static void ( );
    private static void ( ,  ,  );
    private static bool ( , bool , bool ,  );
    private static void ( ,  );
    private static bool ( );
    private static void ( , int );
    private static Color[] ( );
    internal static void ( );
    private static void ( );
    private static Color (Color );
    internal static void ( );
    private static void ( );
    internal static bool ( );
    private static void ( , bool );
    private static void ( , bool );
    private static bool ( );
    private static void ( , Rectangle& , bool , Size );
    private static void ( , Rectangle , bool );
    private static void ( , bool , Rectangle );
    private static void ( );
    private static void ( );
    internal static float ( , int , int , bool ,  );
    internal static float ( , float , float , bool ,  );
    internal static float ( , int , int , bool ,  );
    internal static float ( , float , float , bool ,  );
    internal static void ( ,  ,  ,  );
    private static void ( ,  ,  , Size , Size , Rectangle& , bool );
    private static void ( , Rectangle& );
    private static void ( ,  ,  , Size , int , Rectangle& , bool , bool );
    internal static void ( , Rectangle& , bool , Size , int );
    private static void ( ,  ,  ,  , Rectangle& );
    private static void ( ,  , bool , bool );
    private static void ( ,  , bool , bool );
    private static void ( , bool , bool );
    private static void ( , bool );
    internal static void ( );
    internal static void ( , bool , bool );
    private static void ( ,  , int );
    internal static void ( ,  );
    private static void ( ,  ,  , int ,  );
    private static void ( , bool , bool );
    internal static int (IList );
    internal static bool ( , [] );
    internal static bool (IList , Double& , Double& ,  );
    private static IList (IList );
    private static bool (ArrayList , Double& , Double& ,  , int );
    private static bool ( );
    private static  (double , double ,  );
    internal static int (ArrayList );
    private static bool (IList , Double& , Double& ,  );
    private static double (double );
    private static bool ( , IList , IList );
    private static  ( );
    private static  ( );
    internal static bool (IList , IList , Double& , Double& ,  );
    internal static void (IList , Double& , Double& ,  );
    private static void ( ,  );
    private static void ( );
    private static bool (IList );
    private static bool (IList );
    internal static void ( ,  , double , double , bool , ArrayList ,  , Rectangle , bool );
    internal static void ( ,  , double , double , bool , ArrayList ,  , Rectangle , bool ,  );
    private static bool ( ,  , ArrayList , int , int ,  , double );
    private static float (int );
    private static float (int ,  , float , int , Single& );
    private static bool (double , double );
    private static void (Double& , Double& , Double& , Double& , Double& , Int32& ,  , bool , Double& , Double& , bool , bool ,  , Rectangle , bool );
    private static bool ( );
    private static void ( , int , double , double , double , ArrayList , double , double , bool , bool , bool );
    private static double ( , int , double , double , double , ArrayList , double , double , bool , bool , bool , Boolean& , int );
    internal static int ( ,  , bool ,  , Rectangle );
    private static void (double , Double& , Double& );
    private static void (double , Double& , Double& , bool );
    private static void (double , Double& , Double& , bool );
    private static void (Double& );
    private static void (Double& );
    internal static bool ( );
    private static bool ( );
    private static bool ( );
    private static bool ( );
    private static bool ( );
    private static bool ( );
    private static bool ( );
    private static bool ( );
    internal static void ( , double , double , Double& , int , double , double , bool , bool , bool ,  , Rectangle );
    internal static void ( , double , double ,  , float , bool ,  , bool , bool , bool );
    private static void (Double& ,  ,  , float , int , double , double , double , double , bool , bool ,  );
    private static bool ( );
    private static float ( ,  , float );
    private static void ( , int , double , double , double , ArrayList , double , double , bool , bool ,  );
    internal static void ( ,  , ArrayList , Rectangle ,  ,  , bool );
    private static bool (ArrayList );
    private static bool (ArrayList );
    private static void ( );
    internal static bool ( );
    private static bool ( ,  );
    private static bool ( , ArrayList ,  );
    private static void ( ,  , Rectangle ,  ,  , bool );
    private static  (IList , bool );
    [("True")]
internal static bool (object , bool , Int32& );
    private static void ( );
    private static void ( ,  , Rectangle ,  , bool , bool );
    private static int ( ,  );
    private static  ( , int );
    private static void ( , int , bool );
    internal static  (ArrayList , bool );
    internal static void ( ,  , double , double , ArrayList ,  , Rectangle , bool ,  );
    private static void (Double& , Double& , Double& , Double& , Double& , Int32& ,  , bool );
    private static void ( , int , double , double , double , ArrayList , double , double , bool , bool , bool );
    private static int (double );
    private static int ( ,  , bool ,  , Rectangle );
    private static double (double );
    private static double (double );
    private static bool ( );
    private static void ( ,  );
    private static void ( );
    internal static ArrayList[] (List`1<> );
    internal static ArrayList (List`1<> );
    private static int (List`1<> );
    private static void (List`1<> , int , int , ArrayList );
    private static void ( );
    private static bool ( ,  ,  ,  );
}
internal class  : object {
    []
private  ;
    []
private  ;
    public (object );
    public  ();
    public  ();
    public  ();
    public Encoding ();
    public Encoding ();
    public  ();
    public Stream ();
}
internal class  : object {
    internal  ;
    internal string ;
    internal [] ;
    internal string ;
    internal string ;
    internal List`1<> ;
    internal string ;
    internal (string ,  );
    internal string ();
    internal void (string );
    internal  ( , int );
    internal  ();
    internal void ( , CopyOptions );
}
internal class  : object {
    internal int ;
    internal  ;
    internal  ;
    internal static  (Style , bool );
    internal static bool ( ,  );
}
internal class  : object {
    internal Byte[] ;
    internal  ;
    internal bool ;
    internal (Byte[] ,  );
    public virtual  ();
    public virtual Byte[] ();
    public virtual void ();
    public virtual bool ();
}
internal class  :  {
    private string ;
    private string ;
    private float ;
    private Color ;
    private float ;
    public ( , string , string , float , Color );
    public ( );
    public float ();
    public void (float );
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private  ;
    private (object );
    public ( );
    public ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    public string ;
    public string ;
    public string ;
}
internal class  : object {
    []
private  ;
    []
private Workbook ;
    []
private  ;
    []
private  ;
    private int ;
    private Byte[] ;
    private int ;
    private  ;
    private ExternalConnection ;
    internal ( );
    internal void ( );
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (int );
    private string ();
    private  ();
    private void ();
    private void (bool );
}
internal class  : object {
    private  ;
    private  ;
    private IDictionary ;
    private IDictionary ;
    private IList ;
    private bool ;
    private int ;
    private int ;
    internal ( ,  );
    internal void ();
    internal  ();
    internal  ();
    internal void (byte , Byte[] );
    internal Byte[] (byte );
    internal  ();
    internal void ();
    internal void ();
    private int (int );
    private void ();
    private  ();
    private void (IDictionary );
    private bool (int , int , Byte[] , int , int );
    private void ();
    private  ( );
    private void ( );
    private void ( , int , int );
    private static bool (IDictionary );
    private static void (IDictionary );
}
internal class  : object {
    internal static  (PointF[] , bool );
    internal static  (PointF[][] , bool );
    internal static  (PointF[] );
    internal static  (RectangleF , PointF , PointF );
    internal static  (RectangleF , float , float );
    internal static  (RectangleF );
    internal static  (RectangleF , PointF , PointF );
    internal static  (RectangleF , float , float );
    internal static  (RectangleF , PointF , PointF );
    internal static  (RectangleF , SizeF );
    private static  (RectangleF , PointF , PointF );
    private static  (RectangleF , float , float );
    private static PointF[] (PointF[] , int , float );
    internal static PointF[] (PointF[] , bool , float );
    internal static  (PointF[] , [] , bool );
    private static void (& , ArrayList ,  );
}
internal class  : object {
    private  ;
    private ArrayList ;
    internal  ();
    internal void ( );
    internal ArrayList ();
    internal void (ArrayList );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    internal ( );
    public virtual int Read(Byte[] , int , int );
    public virtual int ReadByte();
    private  ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal bool (StringBuilder );
    internal void (StringBuilder , string , bool );
    internal bool (StringBuilder , string , int , Byte[] );
    internal bool (string , string , int , Byte[] );
    internal void ( );
    internal void ();
    internal void (string );
    internal void (StringBuilder );
}
internal class  :  {
    internal void ( );
}
internal abstract class  : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public virtual void (object );
    public virtual void (IEnumerable );
    public virtual void ();
    public abstract virtual bool (object );
    public abstract virtual void CopyTo(Array , int );
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual bool ();
    public abstract virtual bool ();
    public virtual bool ();
    public abstract virtual bool get_IsSynchronized();
    public abstract virtual object get_SyncRoot();
    public virtual void (object );
    public virtual void (IEnumerable );
}
internal class  : object {
    internal static Hashtable (WorksheetCollection );
}
internal class  : object {
}
internal class  : object {
    private static  ;
    private  ;
    private  ;
    public ( ,  );
    private static ();
    public  ();
    public BigInteger ();
    public bool ( );
}
internal class  : object {
    private  ;
    private  ;
    private int ;
    private int ;
    private bool ;
    private  ;
    public ( ,  , int , int , bool );
    public sealed virtual  ( );
    public  ();
    public sealed virtual void ( );
    public sealed virtual  ( );
    public sealed virtual  ( , bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual  ();
}
internal class  : object {
    internal static void (Workbook , LoadOptions , bool );
}
internal class  :  {
    protected virtual  ( , BigInteger );
}
internal class  : object {
    private Range ;
    private JsonSaveOptions ;
    internal (Range , JsonSaveOptions );
    internal void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    private static void ( ,  );
    internal virtual void ();
}
internal class  : object {
    public static  ;
    public static  ;
    public static  ;
    private static ();
}
internal class  : object {
    internal Style ;
    internal Style ;
    internal Hashtable ;
    internal (Style , Hashtable , Style );
}
internal class  : object {
    []
internal Worksheet ;
    internal MsoDrawingType ;
    internal double ;
    internal double ;
    internal double ;
    internal double ;
    internal string ;
    []
internal Shape ;
    internal (Worksheet );
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private int ;
    private Int32[] ;
    private int ;
    public ( );
    public virtual string ();
    public virtual int ();
    private void ( );
    internal virtual void (Byte[] , int );
    internal virtual void (long );
    private void (int , Byte[] , int );
    public virtual int (Byte[] , int );
    public virtual void ();
    private int (int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    private int (int , int , int );
    internal virtual void ();
    public virtual  ();
    public virtual void ( );
}
internal class  :  {
    protected virtual void (bool );
    public virtual void (int , int );
}
internal class  :  {
    internal void (ushort , byte , ushort , bool , string );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (WorksheetCollection );
    internal WorksheetCollection ();
    internal  ( , Worksheet , CopyOptions );
    public int ( );
    internal int ( );
    public  (int );
    public  (string );
}
internal class  :  {
    private double ;
    private int ;
    private  ;
    internal ( , string , string , int , int );
    public virtual bool ();
    public virtual bool ();
    protected virtual void ( , DateTime , double , StringBuilder );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( ,  );
    internal virtual void ( );
    private void ( , string , string );
}
internal class  : object {
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    private static void (UInt64[] , UInt64[] );
    public static UInt64[] (BigInteger );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , UInt64[] );
    public static void (UInt64[] , int , UInt64[] );
    public static UInt32 (UInt64[] );
    protected static void (UInt64[] , UInt64[] , UInt64[] );
    protected static void (ulong , ulong , UInt64[] , int );
    protected static void (UInt64[] , UInt64[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
public static IComparer ;
    private static ();
    public sealed virtual int Compare(object , object );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private static  ;
    private  ;
    private  ;
    private  ;
    private  ;
    public ( );
    public (Byte[] , int );
    public (Byte[] , int , int );
    public (Byte[] , int , int ,  );
    public (Byte[] , int ,  );
    private static ();
    public static  (object );
    public Byte[] ();
    public BigInteger ();
    public BigInteger ();
    public bool ();
    public  ();
    public virtual  ();
}
internal class  :  {
    private int ;
    private int ;
    private int ;
    public ( ,  , [] ,  ,  );
    private ( , int , [] );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  (int );
    public virtual  (int );
    public virtual  ( );
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    private void ();
}
internal class  :  {
    internal (int , int );
    internal void (ChartType , bool );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.0.50.19461")]
internal static class  : object {
    internal static DateTime ;
    private static ();
}
internal class  : object {
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal bool ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal UInt32 ;
    internal bool ;
    internal  ;
    internal bool ;
    internal void ( );
}
internal interface  {
    public abstract virtual  (object ,  );
}
internal class  : object {
    public static int ;
    public static int ;
    public static int ;
    public static int ;
    private  ;
    private  ;
    public (Byte[] );
    public ( );
    private static ();
    private static  (Byte[] );
    public  ();
    public  ();
    public bool ();
    public bool ( );
    public  ( );
    public  ( );
    public bool ();
    public int ();
    public bool ();
    public bool ( );
    private bool ( ,  );
    public Byte[] ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal int ;
    internal Double[] ;
    internal Double[] ;
    internal double ;
    internal double ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal ArrayList ;
    internal SizeF ;
    internal float ();
}
internal class  : object {
    public static Byte[] (Byte[] );
    public static Byte[] (Byte[] , Char[] );
}
internal class  : object {
    public sealed virtual int (Stream );
}
internal class  : object {
    private Byte[] ;
    private Image ;
    private int ;
    private bool ;
    private double ;
    private double ;
    private double ;
    private double ;
    private  ;
    private  ;
    private  ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    public Byte[] ();
    public void (Byte[] );
    public Size ();
    public int ();
    public void (int );
    public bool ();
    public void (bool );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    public double ();
    public void (double );
    private double (double , double , double );
    public double ();
    public void (double );
    public bool ( );
    internal Brush (GraphicsPath , float );
}
internal class  : Exception {
    public (string );
    public (string , Exception );
    public Exception ();
}
internal class  : object {
    []
private Cells ;
    private  ;
    []
private  ;
    []
private  ;
    internal (Cells ,  );
    public sealed virtual bool ( , int );
}
internal class  :  {
    internal bool ;
    internal int ();
    internal int ();
}
internal class  : object {
    private static Byte[0...,0...] ;
    private bool ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private Int32[] ;
    private int ;
    private Byte[] ;
    private static ();
    public sealed virtual void (bool ,  );
    public sealed virtual string ();
    public sealed virtual bool ();
    public sealed virtual int (Byte[] , int , Byte[] , int );
    public sealed virtual void ();
    public sealed virtual int ();
    private void (Byte[] );
    private void (Byte[] , int , Byte[] , int );
    private void (Byte[] , int , Byte[] , int );
    private int (int , Int32[] );
    private int (int , int );
    private int (int );
    private int (int );
    private int (int );
    private int (int );
    private int (int );
    private int (int );
    private int (int );
    private int (int );
    private int (int );
    private int (int );
    private int (int );
    private int (Byte[] , int );
    private void (int , Byte[] , int );
}
internal class  : object {
    internal string ;
    internal Cell ;
    public (string , Cell );
}
internal class  :  {
}
internal class  : object {
    internal void ( );
}
internal class  : object {
    internal string ;
    internal FilterOperatorType ;
    internal (FilterOperatorType , string );
    internal static  (FilterOperatorType , object );
    internal static  (FilterOperatorType , object );
}
internal class  :  {
    internal void ( );
}
internal class  :  {
    private  ;
    public ( ,  );
    public  ();
    internal static int ( );
}
[AttributeUsageAttribute("64")]
internal class  : Attribute {
    [DebuggerBrowsableAttribute("0")]
public string ;
    public (string );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private IList`1<> ;
    public IList`1<> Usages { get; public set; }
    public (List`1<> );
    [CompilerGeneratedAttribute]
public IList`1<> get_Usages();
    [CompilerGeneratedAttribute]
public void set_Usages(IList`1<> );
}
internal static class  : object {
    public static Byte[] (object , ulong ,  , RandomNumberGenerator );
    public static Byte[] (Byte[] , Byte[] ,  , RandomNumberGenerator );
    private static int (int );
    public static Byte[] (object );
    private static Byte[] (short );
    private static Byte[] (ushort );
    private static Byte[] (int );
    private static Byte[] (UInt32 );
    private static Byte[] (long );
    private static Byte[] (ulong );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal void ( );
}
internal abstract class  : object {
    public static string (byte );
    public static string (byte );
}
[DefaultMemberAttribute("")]
internal class  : Hashtable {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private UInt32 ;
    [DebuggerBrowsableAttribute("0")]
internal   { get; }
    internal (bool );
    internal  (UInt32 );
    internal void ( );
    internal void (UInt32 );
    [("True")]
private UInt32 ();
}
[]
internal interface  {
    public abstract virtual  ();
    public abstract virtual void ( );
    public abstract virtual string ();
    public abstract virtual void (string );
    public abstract virtual Font ();
    public abstract virtual void (Font );
    public abstract virtual Color ();
    public abstract virtual void (Color );
    public abstract virtual  ();
    public abstract virtual double ();
    public abstract virtual void (double );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private IDictionary ;
    public   { get; }
    [ObsoleteAttribute]
public (Hashtable );
    public (IDictionary );
    public ( );
    public ( );
    public ( );
    private void ( );
    public  ( );
    public  ( );
    public  ( );
    public int ();
    public IDictionary ();
    public Hashtable ();
    public  ();
    public  ();
    public  ( ,  );
    public  ( );
}
internal abstract class  : object {
    public static  (int );
    public abstract virtual  ();
    public abstract virtual int ();
    public abstract virtual bool (int );
    public abstract virtual bool (int );
    public abstract virtual void (int , bool );
    public abstract virtual void (bool );
    public abstract virtual void (int , int , bool );
    public virtual bool ();
    public abstract virtual void ();
    public abstract virtual void (int , int );
    public abstract virtual bool ();
    public abstract virtual bool (int , int );
    public abstract virtual bool ();
    public abstract virtual bool (int , int );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private  ;
    public ( );
    public sealed virtual Stream ();
    public sealed virtual object ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal (string , int );
    internal string ();
    internal void (string );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    public sealed virtual int CompareTo(object );
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    internal static  (Stream , int , UInt32 , int ,  ,  );
    internal static void (Stream , UInt32 , int ,  );
}
internal class  : object {
    []
private  ;
    []
private  ;
    private Char[] ;
    private Char[] ;
    private [] ;
    private [] ;
    private bool ;
    private bool ;
    internal ( ,  );
    public virtual int (Char[] , int );
    public virtual int (Char[] , int );
    public virtual int (Char[] , int , bool );
    public virtual int (Char[] , int , bool );
    public virtual int (Char[] , int );
    public virtual int (Char[] , int );
    public virtual  (Char[] , int );
    public virtual  (Char[] , int , int );
    public virtual int (Char[] , int , StringBuilder );
    public virtual int (Char[] , int , StringBuilder );
    private bool (Char[] , int , Char[] );
    public virtual int (Char[] , int );
    private int (Char[] , int );
}
internal class  : object {
    internal string ;
    internal  ;
    internal  ;
    internal static bool ( ,  );
    internal static  (Style , bool );
    internal void (Style );
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private string ;
    private DateTime ;
    private DateTime ;
    private ArrayList ;
    public ( );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public string ();
    public void (string );
    public DateTime ();
    public void (DateTime );
    public DateTime ();
    public void (DateTime );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    public virtual void ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
[DefaultMemberAttribute("")]
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    internal (Byte[] );
    private void ();
    public virtual  (int );
    public virtual IEnumerator GetEnumerator();
    public virtual int ();
    internal virtual void ( );
}
internal class  : object {
    internal static string ( );
    internal static int ( );
    internal static  (string );
    internal static  (int );
    internal static int (CellBorderType );
    internal static bool (CellBorderType , CellBorderType );
    internal static PivotTableSourceType (int );
    internal static ThemeColorType (int );
    internal static int (ThemeColorType );
    internal static int ( );
    internal static int ( ,  );
    internal static  (byte );
    internal static string (byte );
    internal static byte (string );
    internal static bool (string );
    internal static bool (string , Boolean& );
    internal static  (string );
    internal static string (LegendPositionType ,  );
    internal static TextAlignmentType (int , bool );
    internal static int (TextAlignmentType , bool );
    internal static OperatorType (byte );
    internal static int (OperatorType );
    internal static IconSetType (int );
    internal static int (IconSetType );
    internal static ShapePathType (int );
    internal static int (ShapePathType );
    internal static  (string );
    internal static string ( );
    internal static int ( );
}
internal class  : object {
    internal static OperatorType (int );
    internal static int (OperatorType );
    internal static string (int , int );
    internal static int (string );
    internal static FontUnderlineType (int );
    internal static int (FontUnderlineType );
    internal static TextAlignmentType (int );
    internal static int (TextAlignmentType );
    internal static TextAlignmentType (int );
    internal static int (TextAlignmentType );
    internal static TextDirectionType (int );
    internal static int (TextDirectionType );
    internal static DataBarAxisPosition (int );
    internal static int (DataBarAxisPosition );
    internal static CellBorderType (int );
    internal static int (CellBorderType );
    internal static int (BackgroundType );
    internal static BackgroundType (int );
    internal static IconSetType (int );
    internal static int (IconSetType );
    internal static string (int );
    internal static DynamicFilterType (int );
    internal static int (DynamicFilterType );
    internal static FilterOperatorType (int );
    internal static byte (FilterOperatorType );
    internal static DateTimeGroupingType (int );
    internal static int (DateTimeGroupingType );
    internal static void (Byte[] , int , int , int , FormatCondition );
    internal static FormatConditionValueType (int );
    internal static int (FormatConditionValueType );
    internal static TableDataSourceType (int );
    internal static int (TableDataSourceType );
    internal static TotalsCalculation (int );
    internal static int (TotalsCalculation );
    internal static TableStyleElementType (int );
    internal static int (TableStyleElementType );
    internal static PivotFieldSubtotalType (byte );
    internal static byte (PivotFieldSubtotalType );
    internal static PivotTableSourceType (int );
    internal static int (PivotTableSourceType );
    internal static PivotFilterType (int );
    internal static int (PivotFilterType );
    internal static PivotConditionFormatScopeType (int );
    internal static int (PivotConditionFormatScopeType );
    internal static PivotConditionFormatRuleType (int );
    internal static int (PivotConditionFormatRuleType );
    internal static PivotGroupByType (int );
    internal static int (PivotGroupByType );
    internal static int (ConsolidationFunction );
    internal static FontSchemeType (byte );
    internal static string (byte );
    internal static byte (string );
    internal static bool (object );
}
internal class  : object {
    private int ;
    private byte ;
    private Byte[] ;
    private  ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private bool ;
    private (int , byte , Byte[] ,  , Byte[] , Byte[] , Byte[] , bool );
    public void ();
    public  ();
    public int ();
    public byte ();
    public bool ();
    public Byte[] ();
    public  ();
    public Byte[] ();
    public Byte[] ();
    public IDictionary ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : ValueType {
    internal static ArrayList ( ,  , Rectangle , int );
    internal static void ( ,  , ArrayList );
    private static void ( , IList ,  );
}
internal class  :  {
    private Byte[] ;
    private int ;
    private static [] ;
    public (int );
    public (long );
    public (BigInteger );
    public (Byte[] );
    private static ();
    public static  (object );
    public static  ( , bool );
    public BigInteger ();
    public bool (BigInteger );
    public int ();
    internal virtual void ( );
    protected virtual bool ( );
    protected virtual int ();
    internal static  (Byte[] );
}
internal interface  {
    public abstract virtual void ();
    public abstract virtual  ( ,  );
    public abstract virtual  ();
}
internal class  :  {
    internal string ;
    internal (string );
    internal virtual object ();
    internal virtual  ();
    internal virtual string ();
    internal virtual string ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  : object {
    private static [] ;
    private static String[] ;
    internal  ;
    internal int ;
    internal Byte[] ;
    internal int ;
    internal int ;
    internal int ;
    internal byte ;
    internal byte ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal Byte[] ;
    internal int ;
    internal Int16[] ;
    internal Int16[] ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal Int16[] ;
    internal Int16[] ;
    internal Int16[] ;
    internal  ;
    internal  ;
    internal  ;
    internal Int16[] ;
    internal Int32[] ;
    internal int ;
    internal int ;
    internal Byte[] ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal UInt32 ;
    internal int ;
    private static ();
    internal void ();
    internal void ();
    internal void ();
    internal void (Int16[] , int );
    internal static bool (Int16[] , int , int , Byte[] );
    internal void (Int16[] , int );
    internal int ();
    internal void (int , int , int );
    internal void (Int16[] , int );
    internal void (Byte[] , int , int );
    internal void (byte );
    internal void (int );
    internal void (int );
    internal void (int , Int16[] );
    internal void (int , int );
    internal void ();
    internal bool (int , int );
    internal void (Int16[] , Int16[] );
    internal void ();
    internal void ();
    internal void ();
    internal void (int , int , bool );
    internal void (bool );
    internal int (int );
    internal void (int , int , bool );
    internal void (int , int , bool );
    internal void ();
    internal int (int );
    internal int (int );
    internal int (int );
    internal int ( , int , int );
    internal int ( , int );
    internal int ( , int , int , int , int , int );
    internal int ( );
    internal int ();
    internal int ( , int , int );
    internal int ( , Byte[] , int );
    internal int ( , int );
}
internal class  : object {
    internal Hashtable ;
    internal Hashtable ;
    internal Hashtable ;
    internal static Char[] ;
    private static ();
    internal static  ( );
    internal void ( ,  );
    internal void ( ,  );
    internal void (StreamReader , string , string );
    internal void (StreamReader , string , string );
}
internal class  : object {
    internal  ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal int ;
    internal int ;
    internal Int32[][] ;
    internal int ;
    internal bool ;
    internal int ;
    internal string ;
    internal int ;
    internal string ;
    internal string ;
    internal int ;
    internal String[] ;
    internal String[] ;
    internal String[] ;
    internal int ;
    internal bool ;
    internal bool ;
    internal int ;
    internal int ;
    internal int ;
    internal  ;
    internal int ;
    internal string ;
    internal String[] ;
    internal Hashtable ;
    internal bool ;
    internal int ;
    internal FormatConditionCollection ;
    internal FormatConditionCollection ;
    internal Row ;
    internal string ;
    internal bool ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal int ;
    internal bool ;
    internal int ;
    internal bool ;
    internal int ;
    internal bool ;
    internal int ;
    internal int ;
    internal int ;
    internal String[] ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal (int , int );
    internal int (bool );
    internal bool ();
    internal void ();
    internal int ();
    internal int ();
    internal int ();
}
internal interface  {
    public abstract virtual Stream ();
}
internal class  :  {
    private  ;
    private [] ;
    private bool ;
    private bool ;
    public ( ,  , [] , int , bool , bool );
    protected virtual  ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (int , int );
    protected virtual  (Int32[] );
    protected virtual  (int , int );
    protected virtual  (int );
    private  ( ,  );
    private  ( ,  ,  ,  );
    private  ([] , [] , int , int );
}
internal class  :  {
    private  ;
    private bool ;
    internal ( , CellBorderType , Color );
    internal ( , CellBorderType , Color , bool );
    internal  ();
    internal bool ( );
}
internal abstract class  : object {
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32 );
    public static UInt32 (UInt32[] , int , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static UInt32[] ();
    public static UInt32[] ();
    public static bool (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static UInt32[] (BigInteger );
    public static UInt32 (UInt32[] , int );
    public static bool (UInt32[] , UInt32[] );
    public static bool (UInt32[] , int , UInt32[] , int );
    public static bool (UInt32[] );
    public static bool (UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32[] , UInt32[] , UInt32[] );
    public static UInt32 (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static ulong (UInt32 , UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] , int , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32 , UInt32[] , int );
    public static UInt32 (UInt32 , ulong , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32 , UInt32[] , int );
    public static UInt32 (UInt32 , UInt32[] , UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int , UInt32[] , int );
    public static int (UInt32[] , UInt32[] , UInt32[] );
    public static int (UInt32[] , UInt32[] );
    public static int (UInt32[] , int , UInt32[] , int );
    public static BigInteger (UInt32[] );
    public static void (UInt32[] );
}
internal class  : object {
    public byte ;
    public byte ;
    public byte ;
    public byte ;
    public (byte , byte , byte , byte );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    public ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public virtual  ();
}
[DefaultMemberAttribute("Item")]
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal ICollection ;
    [DebuggerBrowsableAttribute("0")]
private IEnumerator ;
    public String[] Columns { get; }
    public int Count { get; }
    public object Item { get; }
    public object Item { get; }
    internal (ICollection , object );
    public sealed virtual String[] get_Columns();
    public sealed virtual int get_Count();
    public sealed virtual void BeforeFirst();
    public sealed virtual object get_Item(int );
    public sealed virtual object get_Item(string );
    public sealed virtual bool Next();
}
internal class  : object {
    internal string ;
    internal bool ;
    internal int ;
    internal  ;
    internal ArrayList ;
    internal  ;
    internal static String[] ;
    internal bool ;
    private static ();
    internal static int (Char[] , char , int );
    internal static int (Char[] , char , int );
    internal static int (Char[] , char , int );
    internal static int (Char[] , char , int );
    internal static int (Char[] , int , Boolean& , Boolean& , Int32& , Int32& );
    internal static int (Char[] , int , Int32& , Boolean& );
    internal static int (Char[] , int , Int32& );
    internal void (string , int , string );
    internal void (int );
    internal void (int );
    internal string ();
}
internal class  : object {
    public static int ;
    private static UInt32[] ;
    protected static Byte[] ;
    protected static Byte[] ;
    protected int ;
    private int ;
    internal UInt32[] ;
    internal UInt32[] ;
    private Byte[] ;
    private bool ;
    private UInt32 ;
    private UInt32 ;
    private UInt32 ;
    public (int );
    private static ();
    internal void (int , UInt32[] , int );
    public virtual void (bool ,  );
    protected virtual int ();
    public virtual string ();
    public virtual byte (byte );
    protected virtual void ();
    public virtual void (Byte[] , int , int , Byte[] , int );
    public virtual void ();
    protected virtual void ();
    protected virtual void (Byte[] , Byte[] );
    protected virtual void (Byte[] );
    internal static void (int , UInt32[] , UInt32[] );
    internal static UInt32 (UInt32 , int );
    private void ();
    private bool ();
    private bool (UInt32 );
}
internal class  : object {
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    internal static Guid ;
    private static ();
}
internal class  :  {
    internal void ( , int , int );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    internal (long , long , long , long );
    public virtual bool Equals(object );
}
internal abstract class  : object {
    public static  ( , [] ,  );
    private static  ( , int );
    private static bool ([][] );
    private static bool (List`1<[][]> ,  ,  );
    private static int (List`1<[][]> ,  , int , Boolean[] ,  );
    private static int (List`1<[][]> , int , int , Boolean[] );
    private static bool ( );
}
internal class  : object {
    private  ;
    private  ;
    internal (Chart );
    internal void ( , bool );
    private void ();
    private void ( );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ();
    protected internal virtual bool ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
}
internal class  : object {
    private  ;
    private bool ;
    private bool ;
    private  ;
    private  ;
    private Int32[] ;
    private ArrayList ;
    private MemoryStream ;
    private MemoryStream ;
    private MemoryStream ;
    private ushort ;
    internal ( , bool , bool ,  );
    internal MemoryStream ();
    internal MemoryStream ();
    internal MemoryStream ();
    internal ushort ();
    internal int ( ,  ,  );
    internal Hashtable ( ,  ,  , int );
    private void (int ,  ,  );
    private void ( ,  );
    private float ();
    private void ( );
    private static  ( );
    private void ( );
    private void ();
    private void ( ,  );
    private static int ( );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private  ;
    private ( );
    public (string );
    public static  (object );
    public static  ( , bool );
    public sealed virtual string ();
    public virtual  ();
}
internal class  :  {
    public ( ,  ,  , int );
    private ( , int ,  , int );
    public virtual  ();
    public virtual  ( );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
}
internal class  :  {
    internal void (int );
    internal void (int );
}
internal class  : object {
    internal double ;
    internal double ;
    internal static  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    public ( );
    public virtual void ( );
    public virtual  ();
    public virtual int (Byte[] , int , int );
}
internal class  :  {
    protected  ;
    protected  ;
    protected Byte[] ;
    protected Stack ;
    internal int ;
    internal int ;
    private Byte[] ;
    internal ( ,  );
    protected virtual void ();
    protected virtual Byte[] (bool );
    protected Byte[] (bool );
    protected  ();
    public virtual bool (Worksheet );
    public virtual bool ( );
    public virtual bool (Byte[] , int , int );
    public virtual Byte[] ();
    public virtual bool ();
    public virtual  ();
    internal virtual void ( );
    internal virtual void (byte ,  );
    public virtual bool ();
    public virtual bool ();
    internal virtual bool ( );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    internal virtual bool ( );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    internal virtual void (int );
    internal virtual void (int , int );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    internal virtual  ( );
    internal virtual string ();
    internal virtual void ();
    internal virtual void ( , [] );
    internal virtual void ( , [] );
    internal virtual void ( , int );
    internal virtual void (int , int );
    internal virtual void (int , int );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  :  {
    internal DateTime ;
    internal (DateTime );
    internal virtual object ();
    internal virtual string ();
    internal virtual string ();
    internal virtual  ();
    internal virtual DateTime ();
    internal virtual void ( );
    internal virtual bool ( );
}
internal class  :  {
    public (string );
    public (string , Exception );
}
internal class  :  {
    internal int ;
    internal int ;
    internal  ;
    internal ( , int );
    internal virtual  ();
    internal void ( , CopyOptions );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal static Font ;
    private static ();
    internal static Brush ( , GraphicsPath );
    internal static Brush ( , GraphicsPath , float , float );
    internal static Brush ( , RectangleF );
    internal static Brush ( , RectangleF , float , float );
    internal static  ( );
    private static void ( ,  );
    internal static void ( ,  , RectangleF , string , TextOrientationType , Font , Color , TextAlignmentType , TextAlignmentType );
    private static RectangleF (double , RectangleF );
    private static void ( ,  , RectangleF , int , TextAlignmentType , TextAlignmentType );
    private static void ( , string , float , float , SizeF , SizeF , Font , Brush );
    public static void ( , string , Font , Color , float , float , float , float , TextAlignmentType , TextAlignmentType , TextDirectionType );
    private static Size ( , string , Font , SizeF );
    private static void ( ,  , RectangleF , string , int , Font , Color , TextAlignmentType , TextAlignmentType );
    private static double ( , double );
    private static void ( ,  , string , Font , Color , RectangleF , StringFormat );
    private static ArrayList (string ,  , Font , float ,  );
    public static StringAlignment (TextAlignmentType );
    internal static int (double );
    internal static int (double );
    internal static int (double );
    public static SizeF ( , string , Font , SizeF );
    internal static float (float );
    internal static RectangleF ( );
    private static PointF[] (double , double , double , double , double , double , double );
    internal static RectangleF (PointF[] );
    internal static PointF[] (ArrayList );
    internal static void ( );
    internal static RectangleF ( , bool );
    internal static RectangleF ( , bool );
    private static Color ( , float , float );
    private static void ( ,  ,  ,  , bool ,  );
    internal static RectangleF ( );
    private static void ( ,  ,  ,  , Single& , Single& );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    internal static RectangleF ( );
    private static void ( ,  ,  ,  , Single& , Single& );
    internal static RectangleF ( );
    internal static RectangleF (RectangleF , float );
    internal static RectangleF (RectangleF , float , RectangleF );
    internal static RectangleF (PointF[] , PointF , float );
    internal static RectangleF (RectangleF ,  , int , int );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    private  ;
    private  ;
    private int ;
    private byte ;
    public ( ,  );
    public void (int ,  );
    public void (int ,  ,  );
    public void (byte );
    private void (byte );
    private void ();
    private void (byte );
    public void (Byte[] );
    public void (Byte[] , int , int );
    public  (bool );
    public  ();
}
internal interface  {
    public abstract virtual int (int );
    public abstract virtual double (int );
    public abstract virtual double (int );
    public abstract virtual int (int , int );
    public abstract virtual double (int , int );
    public abstract virtual double (int , int );
    public abstract virtual void (Int32[] );
    public abstract virtual void (Int32[] );
}
internal class  : object {
    []
private  ;
    private Hashtable ;
    private double ;
    []
private Worksheet ;
    []
private  ;
    private  ;
    private List`1<> ;
    private List`1<> ;
    private  ;
    private  ;
    private bool ;
    private string ;
    private int ;
    internal ( , Worksheet ,  );
    internal void ( );
    private Chart (Worksheet ,  , ChartType );
    private void ( );
    private void ( , Chart );
    private void ( );
    private void ( );
    private static int (Chart , double );
    private static int (Chart , double );
    private void ( , Chart );
    private void ( , Chart );
    private void ( , DropBars );
    private void ( , Line );
    private void ( , Chart );
    private void ( , Chart );
    private void (Axis ,  , bool , bool );
    internal static TickMarkType (bool , bool );
    private void ( , Chart );
    private void ( , Line );
    private static string (string );
    private void ( , Title );
    private void ( , Chart , Series , int ,  );
    private void (ChartFrame ,  );
    private  (Chart , string , bool , bool , bool );
    private void (Chart ,  , bool );
    private int ( , Chart , Series , int );
    private void ( );
    private void ( );
    private void ( ,  );
    private void ( ,  );
    private void ( ,  );
    private ChartType (Chart , string ,  ,  , bool );
    private ChartType ( ,  , ChartType );
    private string (string );
    private string (string );
    private void ( , string );
    private string (string , int , int , int , int );
    private void (CellArea , string , int , string );
}
internal class  :  {
    private  ;
    public virtual void (Byte[] , Byte[] , int );
    public virtual void (Byte[] , Byte[] );
    private Byte[] (int );
    [ObsoleteAttribute("Use version with 'algorithm' parameter")]
public virtual  (int );
    public virtual  (string , int );
    [ObsoleteAttribute("Use version with 'algorithm' parameter")]
public virtual  (int , int );
    public virtual  (string , int , int );
    public virtual  (int );
}
internal class  : object {
    internal static void (Cell , object , bool , string , bool );
    public static bool (ICellsDataTable , int , ImportTableOptions );
    internal static Hashtable (Cells , int , int , int , int );
    internal static int (ICellsDataTable , Cells , int , int , ImportTableOptions );
    internal static bool (object );
    internal static void (Cell , object , bool , object , ImportTableOptions , int , Hashtable , Hashtable );
    internal static DataTable (Cells , int , int , int , int , ExportTableOptions );
    private static string (Hashtable , int , string , RenameStrategy );
    private static Type (Cell );
    private static void (Cell , int , int , DataTable , DataRow , int , ExportTableOptions , CellValue , Cells );
    []
public static List`1<T> (Cells , int , int , int , int , ExportTableOptions );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected Color ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected Color ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
protected bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool ();
    public void (bool );
    public Color ();
    public void (Color );
    public Color ();
    public void (Color );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal bool ();
    internal bool ();
    internal void (int );
    internal void ();
    internal  ();
    public  ();
    internal virtual void (Color );
    public bool ( );
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void (bool );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public ( , int );
    public void ( );
    public void (string , string );
    public  (int );
    internal void (string , string );
    public  (string );
    public  (string , string );
    public  ( );
}
internal class  :  {
    public string ;
    internal ArrayList ;
    internal (string , string );
    internal virtual void (String& );
    internal virtual void ( );
}
internal class  :  {
    internal (SlicerCache );
}
internal class  :  {
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    public (BigInteger , BigInteger , BigInteger , BigInteger , BigInteger , BigInteger , BigInteger , BigInteger );
    public ( );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
    private static void (BigInteger , string , string );
}
internal class  : object {
    public static Stream (string );
    public static Stream (string );
    public static int ();
    public static bool ();
    public static bool ();
    public static bool ();
    public static bool ();
    public static bool ();
    public static void (IDictionary );
    internal static string ();
    internal static string ();
    public static string ();
    public static string (string );
    public static string (string );
    public static void (string , bool , ArrayList );
    public static ArrayList ();
    public static string (string );
    public static TextWriter ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    public (Stream );
    private void (int );
    internal void (int , Byte[] );
    internal void (int , byte , Byte[] );
    internal void (int , Byte[] , int , int );
    internal void (int , int );
    internal void (int , int , Byte[] );
    protected void ();
    public virtual void (object );
    public virtual void ( );
    public virtual void ( );
}
internal class  :  {
    private int ;
    public (int );
    public int ();
    public void (int );
    public virtual object ();
    public virtual void (object );
    public virtual  ();
    public virtual  ( );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal  ( );
    internal int ( );
    internal  (string );
    internal  ( , string );
    internal  ( );
    internal void (string );
    internal void ( , string );
    internal void ( );
}
internal class  :  {
    internal void (string );
    internal void ( , Workbook );
    private int (int , WorksheetCollection );
}
internal class  : object {
    protected byte ;
    protected IList ;
    public (byte , IList );
    public virtual byte ();
    public virtual IList ();
    public virtual void (Stream );
    public static  ( , Stream );
}
internal abstract class  : object {
    internal abstract virtual void ([] );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal static int ;
    [DebuggerBrowsableAttribute("0")]
internal static float ;
    [DebuggerBrowsableAttribute("0")]
internal static float ;
    private static ();
    private static SizeF ( ,  );
    private static bool ( );
    internal static SizeF ( ,  );
    internal static void ( , Rectangle );
    private static bool ( );
    internal static bool ( );
    internal static void ( , RectangleF ,  );
    internal static  ( , int );
    internal static void ( , float , float ,  , float , bool );
    internal static bool ( );
    private static bool ( );
    internal static void ( ,  ,  );
    internal static void ( ,  ,  );
    internal static void ( ,  ,  );
    internal static void ( , RectangleF ,  , int );
    internal static SizeF ( ,  ,  , SizeF );
    internal static string ( ,  , bool );
    internal static SizeF ( ,  ,  );
    internal static SizeF ( ,  ,  );
    internal static Size ( ,  ,  );
    internal static Point ( ,  ,  , Rectangle& );
    internal static SizeF ( ,  ,  , SizeF );
    internal static SizeF ( ,  ,  );
    internal static SizeF ( );
    internal static Point ( ,  , Rectangle& );
    internal static Size ( ,  , bool );
    internal static SizeF ( ,  , SizeF );
    internal static SizeF ( ,  );
    internal static SizeF ( ,  , SizeF );
    internal static void ( ,  , bool , bool ,  );
    internal static void ( ,  , RectangleF ,  );
}
internal class  : object {
    private  ;
    private  ;
    private  ;
    public ( );
    public  ();
    public  ();
    public  (int );
}
[DefaultMemberAttribute("")]
internal class  : object {
    private Int32[] ;
    private int ;
    public int  { get; }
    public (int );
    public int ();
    public int (int );
    internal void ();
    internal void (int );
    internal void ();
    public bool (int );
    public bool (int );
    public Int32[] (bool );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    public sealed virtual string ();
    public virtual void ( );
    public virtual int (Byte[] , int );
    public virtual int (Byte[] );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
[DefaultMemberAttribute("")]
internal class  : ArrayList {
    [DebuggerBrowsableAttribute("0")]
public   { get; public set; }
    internal int (int );
    public  (int );
    public void (int ,  );
}
internal class  : object {
    private static Char[] ;
    protected int ;
    protected (int );
    protected ( , int );
    private static ();
    public static  ( , int , char );
    public static  ( , int );
    public static  ( , int , Char[] );
    public static  ( , int , string );
    public static  ( , int , Char[] , int );
    public static  ( , int , Char[] , Int32[] );
    public  ();
    public bool ();
    public Color ();
    public virtual bool ();
    public virtual bool ();
    public virtual int ();
    public virtual Char[] ();
    public virtual string ();
    public string (int , bool );
    public virtual Char[] (int , bool );
    public virtual int ();
    public virtual int ();
    public virtual bool (int );
    public virtual int (int );
    public virtual char (int );
    protected virtual void (Char[] , int );
    internal virtual bool (Char[] , int , bool );
    internal virtual void (StringBuilder );
    internal virtual void (StringBuilder , int , int );
    internal virtual  (string );
    internal virtual  (string );
    internal virtual  ( ,  );
    internal virtual  ( ,  );
    internal static int (int ,  );
    internal static bool (int );
    internal static char (int );
    internal static int (int );
    internal static int (int , int );
    internal static int (int , int );
    internal static int (int , char );
    internal static int (bool , int , char );
    internal static Char[] (Char[] ,  );
}
internal class  : object {
    internal int ;
    internal bool ;
    internal  ;
    internal  ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal Style ;
    internal  ;
    internal bool ;
    internal bool ( );
}
internal class  :  {
    public static BigInteger ;
    protected internal UInt32[] ;
    public (BigInteger );
    protected internal (UInt32[] );
    private static ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private  ;
    public ( , Stream ,  );
    public virtual void ( );
    public virtual void ();
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public virtual void ( );
    public  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private GraphicsPath ;
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    private int ;
    private  ;
    public ( );
    public (int ,  );
    public ( );
    public static  (object );
    public int ();
    public  ();
    public virtual  ();
}
internal abstract class  : object {
    internal abstract virtual  ();
}
[DefaultMemberAttribute("")]
internal class  : object {
    internal int ;
    private [] ;
    internal   { get; }
    internal  (int );
    internal void ( );
}
internal interface  {
}
internal class  : object {
    private Matrix ;
    private Color ;
    private Color ;
    private float ;
    private int ;
    private int ;
    private float ;
    internal Matrix ();
    internal void (Matrix );
    internal Color ();
    internal void (Color );
    internal Color ();
    internal void (Color );
    internal float ();
    internal void (float );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal float ();
    internal void (float );
    internal  ();
}
internal class  : object {
    private  ;
    private bool ;
    private RectangleF ;
    private  ;
    private Font ;
    private float ;
    private float ;
    private float ;
    private ArrayList ;
    private bool ;
    private bool ;
    private bool ;
    private AutoShapeType ;
    private TextOverflowType ;
    private TextOverflowType ;
    private TextVerticalType ;
    private bool ;
    private float ;
    private bool ;
    private bool ;
    public ( , bool , RectangleF ,  , ArrayList , Font , bool , bool , AutoShapeType );
    public ( , bool , RectangleF ,  , ArrayList , Font , bool , bool , AutoShapeType , float , float );
    public bool ();
    public void (bool );
    public TextOverflowType ();
    public void (TextOverflowType );
    public TextOverflowType ();
    public void (TextOverflowType );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public TextVerticalType ();
    public void (TextVerticalType );
    public ArrayList ();
    internal void (RectangleF );
    internal bool ();
    public RectangleF (float );
    public void (float , AutoShapeType );
    private void ();
    private bool ( );
    private bool ();
    private int (string );
    private void (ArrayList );
    private void (ArrayList );
    private void (ArrayList );
    private void (Font , string );
    private String[] (string , float , Font );
    private void (ArrayList );
    private void (ArrayList );
    private bool (ArrayList , int );
    private void (ArrayList , bool );
    private void (ArrayList , bool );
    private void (ArrayList , int , int , float , int );
    private void (ArrayList );
    private void (ArrayList );
    private void (ArrayList );
    private bool ( );
    private void (ArrayList , bool );
    private void (ArrayList );
    private void (ArrayList , int , int );
    private int (Font );
    private bool (string );
    private bool (string );
    private float (Font );
    private float (string , float , float );
}
internal class  :  {
    private MemoryStream ;
    public (Stream );
    public (Stream , int , bool );
    public virtual void ( );
    public virtual Stream ();
    public virtual void ();
}
internal class  :  {
    private double ;
    public (double );
    protected virtual double (double );
}
internal class  : object {
    []
private PivotTable ;
    private PivotTableAutoFormatType ;
    internal int ;
    internal string ;
    internal (PivotTable );
    internal void ( );
    internal bool (int );
    internal void (bool , int );
    internal void (PivotTableAutoFormatType );
    internal PivotTableAutoFormatType ();
    internal void (PivotTableAutoFormatType );
    internal bool ();
    internal bool ();
    internal bool ();
}
internal class  :  {
    public ( );
    public ( );
    public ( );
    private static  ( );
    private static  ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private string ;
    private ImageOrPrintOptions ;
    private SparklineGroup ;
    private Sparkline ;
    private int ;
    private int ;
    private Stream ;
    private  ;
    private bool ;
    private bool ;
    internal (string , ImageOrPrintOptions , SparklineGroup , Sparkline , int , int );
    internal (ImageOrPrintOptions , SparklineGroup , Sparkline , int , int );
    internal (string , SparklineGroup , Sparkline , int , int );
    internal (Stream , ImageOrPrintOptions , SparklineGroup , Sparkline , int , int );
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual void ();
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual bool ();
    public sealed virtual void (bool );
    public sealed virtual int ();
    public sealed virtual bool ();
}
internal class  : object {
    private string ;
    private Byte[] ;
    internal (string , Byte[] );
    public sealed virtual Byte[] ();
}
internal abstract class  : object {
    public static double (double , double , double );
    public static double (double , double , double );
    public static double (double , double , double , Boolean& );
}
internal class  : object {
    private  ;
    internal (ArrayList , float , float , float , Double[] , TextAlignmentType ,  );
    internal void ( );
    internal int ();
    internal float ();
    internal float ();
}
internal abstract class  : object {
    public static  ;
    private static ();
}
internal class  :  {
    private int ;
    public (Byte[] );
    internal virtual int ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static GraphicsPath[] ( , RectangleF , bool );
    internal virtual void ();
    internal virtual RectangleF (RectangleF );
    internal virtual void ();
    internal static PointF[] (RectangleF , Geometry );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private IList ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    private static ();
    public (Stream );
    public (Stream , bool );
    private int (int , int , int , int , Int32[] );
    private bool ();
    public bool ();
    public bool ();
    public string ();
    public String[] ();
    private int ();
    private int ();
    private int ();
    private int (Byte[] , int , int );
    private int ();
    public virtual int ReadByte();
    public virtual int Read(Byte[] , int , int );
    public virtual void Close();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Object[0...,0...] ;
    internal (Object[0...,0...] );
    internal (Object[0...,0...] , String[] );
    internal virtual object (int , int );
}
internal class  : object {
    []
private  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    private Single[] ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal ( );
    public Single[] ();
}
internal class  : object {
    private  ;
    private  ;
    private bool ;
    private int ;
    public (int );
    public sealed virtual string ();
    public sealed virtual void (bool ,  );
    public sealed virtual Byte[] (Byte[] , int , int );
    public sealed virtual Byte[] (Byte[] , int , int );
}
internal class  : object {
    private  ;
    private Style ;
    private int ;
    internal ( );
    internal void ( );
    internal static void ( );
    internal void ( );
    private string (Font );
    private void ( );
    private void ( );
    internal void ( , Worksheet );
    private void ( );
    private bool (Color , Color );
    internal void ( , Style , int );
    private void ( , Style );
    private void ( , Style , bool );
    private void ( , Style );
    private void ( , Style );
    public static bool (string );
    internal static string (string );
    private void ( , Font , bool );
    private void ( , Style );
    private void ( , Style );
}
internal class  :  {
    internal void ( );
    internal void (byte , int , int );
}
internal class  : object {
    internal static void ( , Stream ,  , ImageOrPrintOptions , Int32[] );
}
internal class  : object {
    internal static  ([] ,  , bool );
    internal static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    internal static  ([] ,  );
    private static int ( ,  ,  , bool );
    private static int ( ,  ,  , bool , bool );
    private static string (bool , int ,  ,  ,  );
    private static  ( , [] ,  );
    private static  ( , [] );
    private static  ( ,  );
    private static int ( ,  ,  );
    private static int ( ,  ,  );
    private static int ( ,  ,  , bool , bool , bool );
    private static int ( ,  , int ,  );
    private static  ( ,  ,  );
    private static int ( ,  ,  , bool );
    private static int ( ,  , int , int ,  );
    private static int ( ,  , int , int ,  );
}
internal class  : object {
    private  ;
    private CustomDocumentPropertyCollection ;
    internal ( );
    internal void ( );
    internal void ( );
    private void (DocumentProperty , string , string , string );
    private void ( );
}
internal class  :  {
    protected internal UInt64[] ;
    public (BigInteger );
    protected internal (UInt64[] );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private ArrayList ;
    private string ;
    private object ;
    private String[] ;
    private bool ;
    private  ;
    private  ;
    private static  ;
    public ( );
    private static ();
    public string ();
    public void (string );
    [("False")]
public ArrayList ();
    public void (string );
    public void (String[] , bool );
    public String[] ();
    public void ();
    public void (string , string );
    public  (string );
    protected virtual  ();
    [("False")]
private  ();
    public static  ();
    public ArrayList ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public static  (object );
    public virtual  ();
    public  ();
    public  ();
}
internal class  :  {
    private  ;
    public ( ,  ,  , bool );
    protected ( , int );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual bool ();
    public virtual void (bool );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual  (int , int );
    public virtual  (int );
    public virtual void ();
    public virtual bool (int , int );
    public virtual bool (int );
    public virtual bool ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  (int );
    public virtual  (int , int , int );
    public virtual  (int , int , int ,  ,  );
    public virtual  (int );
    public virtual  (int , int , int );
    public virtual  (int , int , int ,  ,  );
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual bool ( );
    public virtual  (Double[] ,  ,  );
    public virtual  (Double[][] ,  ,  );
    public virtual int ( , bool );
}
internal class  :  {
    private Byte[] ;
    private int ;
    private int ;
    private List`1<> ;
    internal void (ErrorCheckOption );
    private void (int );
    internal virtual void ( );
}
internal class  :  {
    internal virtual void ( ,  );
}
internal class  :  {
}
internal class  : object {
    private  ;
    private  ;
    public ( ,  );
    public  ();
    public  ();
}
internal class  : object {
    internal int ;
    internal short ;
    internal short ;
    internal int ;
    internal Int64[] ;
    public (int , short , short );
    public ( );
    public bool (long );
    public bool (long );
    public void ( ,  );
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal void ( );
}
internal class  : IOException {
    public (string );
    public (string , Exception );
}
internal class  : object {
    internal List`1<List`1<>> ;
    internal void ( , CopyOptions );
    internal int (int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public (bool , bool , Byte[] );
    public (bool ,  , string );
    private static Byte[] ( , string );
    public virtual  ();
    public virtual string ();
}
internal class  :  {
    private  ;
    []
private  ;
    []
private  ;
    private int ;
    internal (int , int ,  ,  );
    private ( , Cells );
    public virtual  (Cells );
    public virtual void ( );
    public virtual int (int );
    public virtual int (int , int );
    public virtual int (int , int , int );
    public virtual bool (int );
    public virtual int (int , int );
    public virtual int (int );
    public virtual int (int );
    public virtual int (int , bool );
    public virtual  ();
    public virtual  (int , int , bool );
    public virtual int ();
    public virtual void (int );
    public virtual void (int , int );
    public virtual int (int , int );
    public virtual int (int , int );
    public virtual void (int );
    public virtual bool (int , int );
    public virtual int ();
    public virtual int (int );
    public virtual void (int , int );
    public virtual void (int , int );
    public virtual int (int ,  , int );
    public virtual int (int , [] , int );
    public virtual int (int ,  , int );
    private  ( , int );
    public virtual int (int ,  , int , int , int );
    public virtual  (int );
    public virtual  (object );
    public virtual void (int , int , int , int );
    public virtual  (int ,  , int );
    public virtual void (int ,  , int );
    public virtual int (int );
    public virtual void (int , int );
    public virtual byte (int , int );
    public virtual void (int , int , byte );
    public virtual int (int );
    public virtual void (int , int );
    public virtual bool ();
}
internal class  : object {
    []
private  ;
    []
private WorksheetCollection ;
    []
private  ;
    []
private CustomDocumentPropertyCollection ;
    []
private BuiltInDocumentPropertyCollection ;
    internal ( );
    internal void ( );
    internal void ( );
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual void (bool ,  );
    public abstract virtual BigInteger[] (Byte[] );
    public abstract virtual bool (Byte[] , BigInteger , BigInteger );
}
internal class  :  {
    internal string ;
    internal  ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ArrayList ;
    internal ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private static Char[] ;
    private static Char[] ;
    private bool ;
    private Boolean[] ;
    private String[] ;
    private int ;
    private TextWriter ;
    private  ;
    internal bool ;
    internal bool ;
    private Char[] ;
    private Char[] ;
    private bool ;
    private static Byte[] ;
    public (Stream , Encoding );
    public (StringBuilder );
    public (StreamWriter );
    private static ();
    public void (string , string );
    public void (string , string );
    public void (string , string );
    public void (string , int );
    public void (string );
    public void (string , string , string );
    public void ( );
    public void (string , string , string , Char[] , int , int );
    public void (string , string , string , string );
    public void (string , string , string , string , bool );
    private void (bool );
    private void (bool );
    public void (string );
    public void (string );
    public void (string , bool );
    public void (string , string );
    public void (string , string , string );
    public void (string , string , bool );
    public void (string , string , string , string , bool );
    public void (string , string , string , string );
    public void (string );
    public void (string , string );
    public void (string , string , string );
    public void (string , string , bool );
    public void ();
    public void (string );
    public void ();
    public void (bool );
    public void ();
    public void (bool );
    public void ();
    public void (string );
    public void ();
    public void ();
    public void (string , string );
    private void (string );
    private void (Char[] , int , int , bool );
    private void (string , bool );
    private void ();
    public  ();
    public void ( );
    public char ();
    public void (char );
    public bool ();
    public void (bool );
    public int ();
    public bool ();
}
internal class  : ActiveXControl {
    public ControlType Type { get; }
    internal (Shape );
    public virtual ControlType get_Type();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public char ();
    public void (char );
}
internal class  :  {
    internal (ConditionalFormattingIcon );
}
internal interface  {
    public abstract virtual void (Byte[] );
    public abstract virtual void (long );
    public abstract virtual void (Byte[] );
    public abstract virtual void (Byte[] , int , int );
}
internal class  :  {
    private RectangleF ;
    private string ;
    private Byte[] ;
    private string ;
    internal (RectangleF , string , Byte[] , string );
    public RectangleF ();
    public string ();
    public Byte[] ();
    public string ();
    public virtual void ( );
    public virtual void (TextWriter );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
    private RectangleF (RectangleF );
}
internal class  :  {
    public (int ,  );
}
internal class  : DeriveBytes {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    public (Byte[] , Byte[] , int );
    private void (Byte[] , int , Byte[] , Byte[] , int );
    public virtual Byte[] GetBytes(int );
    public virtual void Reset();
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    internal (int , short , short );
}
internal class  :  {
    []
private Workbook ;
    []
private RevisionInsertDelete ;
    internal (RevisionInsertDelete , Workbook );
    private void ();
}
internal class  : object {
    private static BigInteger ;
    protected  ;
    protected  ;
    protected  ;
    public ( );
    private static ();
    public virtual string ();
    public virtual void (bool ,  );
    public virtual BigInteger ();
    public virtual BigInteger[] (Byte[] );
    public virtual bool (Byte[] , BigInteger , BigInteger );
    protected virtual BigInteger (BigInteger , Byte[] );
    protected virtual  ();
    protected virtual  (int ,  );
    protected virtual  (bool ,  );
}
internal class  : object {
    private Color ;
    private float ;
    private LineCap ;
    private LineCap ;
    private DashCap ;
    private LineJoin ;
    private DashStyle ;
    private Single[] ;
    private float ;
    private PenType ;
    private Brush ;
    private Brush ;
    private float ;
    private bool ;
    private Single[] ;
    public (Brush , float );
    public (Color , float );
    public (Color );
    public Color ();
    public void (Color );
    public float ();
    public void (float );
    public LineCap ();
    public void (LineCap );
    public LineCap ();
    public void (LineCap );
    public DashCap ();
    public void (DashCap );
    public LineJoin ();
    public void (LineJoin );
    public DashStyle ();
    public void (DashStyle );
    public float ();
    public void (float );
    public PenType ();
    public void (PenType );
    public Brush ();
    public void (Brush );
    internal Brush ();
    internal void (Brush );
    public float ();
    public void (float );
    public bool ();
    public void (bool );
    public Single[] ();
    public void (Single[] );
    internal static  ( );
    internal static  ( , float );
    public static  ( );
    public static  ( , float );
    public Single[] ();
    public void (Single[] );
    internal void (LineCap , LineCap , DashCap );
}
internal class  : object {
    private string ;
    private Byte[] ;
    private ArrayList ;
    private  ;
    private  ;
    private  ;
    private ArrayList ;
    private  ;
    private  ;
    internal (Byte[] );
    internal string ();
    internal void (string );
    internal Byte[] ();
    internal ArrayList ();
    private void ();
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    private void ( );
    internal  ();
    private  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
public static  ;
    public ( );
    public ( );
    internal ( , bool );
    private static ();
    public static  ( );
    internal static  ( , bool );
    internal virtual void ( );
}
internal class  : object {
    private Regex ;
    public (string , bool );
    public sealed virtual bool (string );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal int ;
    internal (int , string , string , string );
}
internal class  : object {
    private  ;
    private int ;
    public ( , int );
    public  ();
    public int ();
}
internal class  : ValueType {
    internal static ArrayList ( ,  , Rectangle , float , double , int );
    private static bool ( , PointF ,  ,  , double , int , Single& );
    private static double ( );
    internal static float (Rectangle );
    internal static float (RectangleF );
    internal static void ( ,  , Rectangle , int , bool , bool , bool , bool , bool , bool , bool , bool );
    private static int (bool , bool , double , double );
    private static void ( , int , Double& , Double& , Double& , Double& );
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    internal ushort ;
    internal ushort ;
    internal ushort ;
    internal (int , int , int );
    internal bool ();
    internal bool (WorksheetCollection );
    public bool ( );
    public bool (Worksheet );
}
internal class  : object {
    internal ArrayList ;
    internal Hashtable ;
    internal static  (Workbook );
}
internal class  : object {
    protected  ;
    protected  ;
    protected  ;
    public ( );
    public ( ,  ,  );
    public virtual int (int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
    public virtual Byte[] (long , byte , Byte[] , int , int );
}
internal abstract class  :  {
    private int ;
    private RectangleF ;
    internal ( , RectangleF );
    internal abstract virtual  ();
    [("True")]
internal abstract virtual void ( );
    [("True")]
internal virtual void ( );
    public virtual void ( );
    [("True")]
private static string ( );
    public int ();
    public void (int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( , DateTime );
    public static  (object );
    public  ();
    public DateTime ();
    public virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public (Workbook );
    internal virtual void ( );
    private void ( );
    private void ( );
    private void ( );
}
internal class  :  {
    internal ( );
    internal static int ( , Byte[] , int );
    internal static int ( );
}
internal abstract class  :  {
    public ( );
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual  ();
    protected virtual Int32[] ();
    public virtual  ();
    public virtual  ();
    protected virtual  (int );
    protected virtual  (int );
    protected virtual  (int );
    protected virtual  (int );
    protected virtual  ();
}
internal class  : object {
    private [] ;
    private UInt32 ;
    internal void ( );
    public sealed virtual UInt32 ();
    public sealed virtual void (UInt32 );
    private sealed virtual override  ();
    internal [] ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal  ;
    public ( );
    public ( );
    public ( );
    public ( );
    public ( );
    public ( );
    public static  (object );
    public  ();
    public bool ();
    public  ();
    private  ( );
    public virtual  ();
}
internal class  :  {
    private bool ;
    public ( );
    public void ();
    public bool ();
    public virtual bool ();
    public virtual bool ();
}
internal class  : object {
    private PivotTable ;
    private  ;
    internal WorksheetCollection ();
    internal  (PivotTableRefreshOption ,  , bool );
    internal void (PivotTable , bool ,  );
    private void ( );
    private void ( );
    private void (PivotArea ,  );
    internal void ( );
    private void ();
    private void ();
    private bool (PivotAreaFilter );
    private bool (PivotArea , bool , Hashtable[] );
    private void ();
    private int (ushort , int , Hashtable[] , bool );
    private void ( );
    private bool ( , int );
    private void ( );
    private static bool ( );
    private void ( );
}
internal abstract class  : object {
    public static Byte[] (BigInteger );
    public static Byte[] (int , BigInteger );
    public static BigInteger (int ,  );
    public static BigInteger (BigInteger , BigInteger ,  );
    public static int (BigInteger );
}
internal class  : object {
    internal static Byte[] (GradientStopCollection );
    internal static GradientStopCollection (GradientStopCollection , Byte[] , bool );
    internal static GradientStopCollection (GradientFill , GradientPresetType , bool , bool );
    internal static GradientStopCollection (GradientFill , Byte[] , bool , bool );
    internal static Byte[] (TextureType );
}
internal class  : object {
    []
private  ;
    []
private Worksheet ;
    []
private Workbook ;
    []
internal  ;
    internal ( , Worksheet , Workbook );
    internal void ();
    internal void ( , FormatCondition );
    internal string (FormatCondition );
    internal string (Style );
    internal string (Style );
    internal string (Style );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private bool ;
    private bool ;
    private bool ;
    internal ( ,  , bool , bool , bool );
    protected virtual bool ( );
    protected virtual bool ( );
}
internal class  : object {
    internal  ;
    private  ;
    private string ;
    private SlicerCollection ;
    private Slicer ;
    private string ;
    internal ( ,  , string , string );
    internal void ( );
    private void ( );
    private void ( );
    private void ( );
}
internal class  :  {
    protected BigInteger ;
    protected BigInteger ;
    protected  ;
    [ObsoleteAttribute("Use constructor taking order/cofactor")]
public (BigInteger , BigInteger , BigInteger );
    public (BigInteger , BigInteger , BigInteger , BigInteger , BigInteger );
    [ObsoleteAttribute("Use constructor taking order/cofactor")]
protected (BigInteger , BigInteger ,  ,  );
    protected (BigInteger , BigInteger ,  ,  , BigInteger , BigInteger );
    protected virtual  ();
    public virtual bool (int );
    public virtual BigInteger ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual  ( );
}
internal class  : object {
    private string ;
    private  ;
    private Byte[] ;
    internal (string ,  , Byte[] );
    internal string ();
    internal  ();
    internal Byte[] ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    private  ;
    private  ;
    public ( );
    public (ArrayList , ArrayList );
    public (IList , IList );
    public static  (object );
    private  (IList );
    public  ();
    public  ();
    public virtual  ();
}
internal abstract class  : object {
    public abstract virtual bool ();
    public abstract virtual object ();
    public virtual void ();
}
internal class  : object {
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    private int ;
    internal int ;
    internal void ( ,  );
    internal void ( );
    internal int ();
    internal int ();
}
internal abstract class  : object {
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private int ;
    private static Byte[][] ;
    private static Byte[] ;
    private static UInt64[][] ;
    protected (Byte[] );
    private static ();
    public abstract virtual string ();
    public abstract virtual  ();
    public virtual int (Byte[] , int );
    public sealed virtual int ();
    public abstract virtual int ();
    public sealed virtual void ();
    public sealed virtual void ( );
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    private void (Byte[] );
    private void (Byte[] , Byte[] );
    private void (Byte[] , Byte[] );
    private void (Byte[] , Byte[] , Byte[] );
    private void (Byte[] , int );
    private void (Byte[] , Byte[] );
    private void (Byte[] , Byte[] );
}
internal class  :  {
    protected Double[] ;
    protected int ;
    public (bool , bool , bool );
    public (int , bool , bool , bool );
    internal Double[] ();
    internal int ();
    public virtual void (int , int );
    public virtual  ();
    protected virtual bool ();
    protected virtual bool ();
    protected virtual  ();
    protected virtual  (int );
    protected virtual  (double , bool );
    protected virtual  (double , int );
}
internal class  :  {
    internal void ();
    internal void (Legend );
    internal void (byte );
}
internal class  : object {
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
    internal static TableStyle (WorksheetCollection );
}
internal class  :  {
    private bool ;
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  :  {
    internal ( );
    internal virtual void ( );
    internal virtual void ( , string , bool );
}
internal class  :  {
    public ( ,  ,  );
    public ( ,  ,  , bool );
    internal ( ,  ,  , [] , bool );
    protected virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ();
    public virtual  ();
}
internal abstract class  : object {
    protected Stream ;
    protected Byte[] ;
    private int ;
    [("True")]
public virtual void (Stream );
    [("True")]
protected abstract virtual bool ();
    protected int ();
    protected string ();
    protected int ();
    protected void ();
    protected void (long );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
}
internal class  :  {
    protected  ;
    protected  ;
    protected  ;
    public ( ,  ,  );
    [ObsoleteAttribute("Use 'GetInstance' instead")]
public ( );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public Byte[] ();
    public virtual  ();
}
internal abstract class  :  {
    protected  ;
    protected int ;
    protected int ;
    public ( ,  ,  , int , int , bool , bool );
    protected ( , int );
    public virtual bool ();
    public virtual void (bool );
    public virtual  ();
    public virtual  ();
    public virtual bool ( );
    public virtual bool ();
    public virtual bool ();
}
internal class  :  {
    internal void ();
    internal void (int );
    internal void ();
    internal void (Byte[] , bool );
    internal void (DataLabels , WorksheetCollection , Byte[] );
    internal void (Chart , Series , WorksheetCollection , int ,  );
    internal void (byte ,  , int ,  , int );
    internal void (Chart , Series , WorksheetCollection , int ,  );
    private void (string ,  );
}
internal class  : object {
    private  ;
    private  ;
    public ( ,  );
    public ( );
    public Byte[] ();
    public  ();
    public  ();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  : object {
    internal  ;
    internal  ;
    internal UInt32 ;
    internal UInt32 ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal  ;
    internal ( );
    internal static  ( ,  );
}
internal class  : object {
    []
private CellArea ;
    private ConsolidationFunction ;
    private Int32[] ;
    private bool ;
    private bool ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    []
private Cells ;
    []
private RowCollection ;
    private int ;
    private String[] ;
    private string ;
    private string ;
    internal (Cells );
    internal void (CellArea , int , ConsolidationFunction , Int32[] , bool , bool , bool );
    private int (Row );
    private int (Row );
    private bool (int );
    internal bool (Row );
    private void ();
    private void ();
}
internal class  :  {
    [ObsoleteAttribute("Use version taking 'char[]' instead")]
public (string , Byte[] , int );
    [ObsoleteAttribute("Use version taking 'char[]' instead")]
public (string ,  );
    public (Char[] , Byte[] , int );
    public (Char[] ,  );
    internal virtual  (string );
}
internal class  : object {
    private  ;
    public ( );
    public (Boolean[] );
    internal  ();
    public sealed virtual  ();
    public sealed virtual int ();
    public sealed virtual void (StringBuilder );
    public sealed virtual bool (int ,  );
    public sealed virtual  (int , int , [] , int , int , bool );
    public sealed virtual  (int , int ,  , int , int , bool );
    public sealed virtual  (int , int ,  , int , bool );
    public sealed virtual  (int , int );
    public sealed virtual int (int ,  );
    public sealed virtual int (int ,  );
    public sealed virtual  (int );
    public sealed virtual  (int ,  );
    public sealed virtual object (int ,  );
    public sealed virtual void (int , StringBuilder ,  );
    public sealed virtual void (int , [] , int , int );
    public sealed virtual  (int , Double[] , int , int ,  ,  );
}
internal class  :  {
    internal (bool , Boolean[] , float , float ,  , float , Double[] );
    protected virtual float (double , float );
    [("True")]
protected virtual float ( , int , float );
    [("True")]
protected virtual float ( , string , float );
}
internal class  : object {
    private static ();
    private static void (string , & , & );
    internal static Byte[] (bool , Byte[] , Char[] , string , Byte[] );
    private static  (Char[] ,  , Byte[] );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private UInt32 ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    public (Stream );
    public void (Byte[] , UInt32 , UInt32 , UInt32 , int , int , UInt32 , UInt32 , UInt32 , ushort );
    public void (UInt32 , UInt32 , byte , UInt32 );
    public UInt32 (Stream );
    private void ();
    private void ();
    public sealed virtual void Dispose();
    public void ();
}
internal class  : object {
}
internal class  :  {
    internal  ;
    public ( );
    public (BigInteger );
    public sealed virtual string ();
    public BigInteger ();
    public virtual Byte[] ();
    public virtual void ( );
}
internal class  : object {
    private int ;
    private Int16[] ;
    private Int32[][] ;
    private int ;
    private CellArea[] ;
    private bool ;
    public bool (int , int );
    public bool (int );
    public bool (int );
    public bool (int , int );
    private void (int , int , int );
    private void (int , int );
    private void (int , short , int ,  );
    private void (int , short , int ,  );
    public CellArea[] (CellArea );
    private bool (CellArea );
    public bool (CellArea );
    private void (CellArea );
    private bool (CellArea );
    private void (int );
    private void (int , int );
    public CellArea[] ();
    public bool ();
    public CellArea ();
    public void (StringBuilder );
}
internal class  : object {
    private PointF ;
    private bool ;
    private  ;
    private bool ;
    private bool ;
    public (PointF , [] , bool );
    public PointF ();
    public void (PointF );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
}
internal interface  {
    public abstract virtual void (bool ,  );
    public abstract virtual int ();
    public abstract virtual int ();
    public abstract virtual BigInteger (Byte[] , int , int );
    public abstract virtual BigInteger (BigInteger );
    public abstract virtual Byte[] (BigInteger );
}
internal class  : object {
    internal  ;
    internal Hashtable ;
    private ArrayList ;
    internal Hashtable ;
    internal string ;
    internal string ;
    internal bool ;
    internal bool ;
    internal string ;
    private bool ;
    private bool ;
    internal int ;
    private bool ;
    private bool ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal Worksheet ;
    internal bool ;
    internal HtmlTableLoadOption ;
    private bool ;
    private bool ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private int ;
    internal HtmlLoadOptions ;
    internal int ;
    internal int ;
    internal int ;
    internal Hashtable ;
    private bool ;
    private bool ;
    private bool ;
    internal int ;
    private bool ;
    internal string ;
    internal string ;
    private int ;
    private int ;
    internal ArrayList ;
    internal bool ;
    internal bool ;
    internal bool ;
    private int ;
    private Hashtable ;
    private bool ;
    private bool ;
    private Int32[] ;
    private  ;
    private  ;
    private bool ;
    private int ;
    private int ;
    private int ;
    private bool ;
    internal bool ;
    private  ;
    private int ;
    internal int ;
    private bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal  ;
    private Hashtable ;
    private List`1<> ;
    internal bool ;
    internal string ;
    public (string , Stream , Workbook , HtmlLoadOptions );
    internal bool ();
    internal bool ();
    internal bool ();
    internal int ();
    internal IStreamProvider ();
    internal int ();
    internal void (int );
    internal Hashtable ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal int ();
    internal bool ();
    internal Hashtable ();
    internal List`1<> ();
    private void ();
    public void (string , Stream , string );
    public void ();
    public void ();
    private void ( );
    private void ( );
    private void ( );
    public void ( );
    public void ( );
    private int (ArrayList );
    internal  ();
    private void ( );
    private void ( );
    internal  (int );
    public void ( );
    private void ();
    private  ();
    private bool ();
    private void ( );
    private void ( );
    internal bool ( );
    private void ( );
    private void ( );
    public void ( );
    private void ();
    public void (string ,  );
    private void (string );
    private void (ArrayList );
    private void (Worksheet , List`1<> );
    private void (Worksheet , string );
    public void (Stream ,  );
    public void (string ,  );
    private void (ArrayList ,  );
    private void (Hashtable , string , int );
    private void (Hashtable , string , object );
    private string (List`1<> );
    public string ();
    public string ();
    private void ( );
    internal void (string ,  );
    internal bool ();
    internal int ();
    internal void ();
    internal bool ();
    public void (Workbook , Encoding );
    internal void (Workbook );
    private void ();
}
internal class  :  {
    internal ArrayList (Shape , FontSettingCollection , int , ushort );
}
internal class  :  {
    internal ( ,  , WorksheetCollection , Worksheet , Chart );
    internal virtual void (ArrayList );
    internal virtual void ( );
}
internal class  : object {
    internal int ;
    internal bool ;
    internal int ;
    internal void ();
    internal int ();
}
internal class  :  {
    internal void ( );
}
internal class  : object {
    private  ;
    private Byte[] ;
    private  ;
    private BigInteger ;
    private BigInteger ;
    private BigInteger ;
    public ( ,  , BigInteger );
    public ( ,  , BigInteger , BigInteger );
    public ( ,  , BigInteger , BigInteger , Byte[] );
    public  ();
    public  ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public Byte[] ();
    public virtual bool Equals(object );
    protected virtual bool ( );
    public virtual int GetHashCode();
    public BigInteger (BigInteger );
    public  ( );
    internal static  ( ,  );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal PointF ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    internal (PointF , float , float );
}
internal class  : object {
    public static char ;
    private static ();
    public static string (object );
    private static string (object );
    private static string (string );
}
internal class  :  {
    private  ;
    private string ;
    private bool ;
    public  ();
    public void ( );
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public virtual byte ();
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal (string );
}
internal abstract class  : object {
    public abstract virtual  ();
}
[("And")]
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    public static  (object );
    public virtual  ();
}
internal class  : object {
    []
private ChartCollection ;
    []
private Chart ;
    []
private  ;
    private ArrayList ;
    internal bool ;
    []
private SaveOptions ;
    []
private Stream ;
    private int ;
    []
private WorksheetCollection ;
    internal (WorksheetCollection , int , ChartCollection ,  , SaveOptions , Stream );
    internal static Byte[] (Font , int , int , int , int , int );
    internal static Byte[] ( ,  ,  );
    internal static Byte[] ( );
    internal static Byte[] ( );
    internal static void ( , MemoryStream );
    internal static void (MemoryStream , Hashtable );
    internal static void (MemoryStream , Hashtable , int , int );
    internal static void (MemoryStream , Hashtable , int );
    internal static Hashtable (ArrayList );
    internal SaveOptions ();
    private void ();
    private static void (Chart ,  , int ,  );
    private void ( );
    internal void (Chart );
    private void ();
    private void ();
    private void ();
    internal void ();
    private void ();
    private void ();
    private void ();
    private void ();
    private void (Font , int , int , ArrayList );
    private void ();
    private void ();
    private void (int , int , ArrayList );
    private void ();
    private void ();
    private void ();
    private bool (ChartFrame , bool );
    private void (Area );
    private void (short );
    private void (short );
    private static void (Chart );
}
internal class  :  {
    internal (XmlColumnProperty );
}
internal interface  {
    public abstract virtual void (Byte[] );
    public abstract virtual void (Byte[] );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    internal ( , object ,  );
    internal  ();
    internal  ();
    internal  ();
    public virtual Font ();
    public virtual void (Font );
    internal virtual Font ();
    public virtual Color ();
    public virtual void (Color );
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    public virtual int ();
    public virtual void (int );
    internal virtual void ();
    internal int ();
    internal int ();
    protected virtual int ();
    protected virtual int ();
    protected virtual int ();
    [("True")]
internal Rectangle ();
    [("True")]
internal Rectangle ();
    internal bool ();
    internal void (bool );
}
internal class  : object {
    public static bool (Stream , ICollection , UInt32 ,  , string ,  );
    private static Encoding ( , string );
    private static Byte[] (long , long ,  , int , string ,  );
    private static Byte[] (long , long , int , UInt32 );
    private static int (ICollection );
}
[]
internal interface  {
    public abstract virtual  ( , object );
    public abstract virtual  ( , TypeCode , object );
    public abstract virtual  ( , TypeCode , object ,  );
    public abstract virtual  ();
    public abstract virtual NumberCategoryType ();
    public abstract virtual  ();
    public abstract virtual bool ( );
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
[]
internal LoadOptions ;
    [DebuggerBrowsableAttribute("0")]
internal LoadDataFilterOptions ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<string> ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    internal (Workbook );
    internal (Workbook , LoadOptions );
    public void ();
    public sealed virtual void Dispose();
    internal int (int );
    internal void (int );
    internal void (int , int );
    internal void (int , bool );
    internal bool (int );
    internal void ();
    internal Byte[] (Shape , string );
    internal Byte[] ( , object , Worksheet , string );
    internal void (int , string );
    internal void (int , string );
    internal void (Worksheet , int , string , string );
    internal Worksheet (int );
    internal Hashtable ();
    internal void (Hashtable );
    internal Hashtable ();
    internal void (Hashtable );
}
internal class  : object {
    private BigInteger ;
    private int ;
    public (BigInteger , int );
    private ( );
    public static  (BigInteger , int );
    private void ( );
    public  (int );
    public  ( );
    public  (BigInteger );
    public  ();
    public  ( );
    public  (BigInteger );
    public  ( );
    public  (BigInteger );
    public  ( );
    public  (BigInteger );
    public  (int );
    public int ( );
    public int (BigInteger );
    public BigInteger ();
    public BigInteger ();
    public int ();
    public long ();
    public int ();
    public virtual string ToString();
    public virtual bool Equals(object );
    public virtual int GetHashCode();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private  ;
    internal (Stream );
    public virtual void Write(Byte[] , int , int );
}
internal class  :  {
    internal ( , float , float ,  );
    private float (RectangleF );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
}
internal class  :  {
    private  ;
    private [] ;
    private ( );
    public ([] );
    public static  (object );
    public virtual int ();
    public [] ();
    private static [] ([] );
    public virtual  ();
}
internal class  : object {
    public  ;
    public  ;
    public  ;
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private QueryTable ;
    internal (QueryTable );
    private void (Stream );
    internal virtual void ( );
}
internal class  : object {
    protected byte ;
    protected Byte[] ;
    protected int ;
    public (byte , Byte[] , int );
    public virtual void ( , Stream );
    public static  (Stream );
}
internal class  : object {
    public static void ( , string , string , string , string , string , string , string , DateTime , DateTime , DateTime , string );
    private static void ( , string , DateTime );
}
internal enum  : Enum {
    public byte value__;
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public ( ,  );
    public ( ,  );
    public static  (object );
    public static  ( , bool );
    public virtual  ();
    public virtual  ();
    public virtual  ();
}
internal abstract class  :  {
    internal int ;
    public static  (int , int );
    public static  (string );
    internal static Byte[] (string , bool , int , int );
    internal static int (string , bool , Byte[] , int );
    public abstract virtual int ();
    public abstract virtual string (Char[] ,  );
    public virtual byte ();
    public virtual  ();
    public virtual int ();
    public virtual  (int );
    public virtual  ();
    public virtual  (Char[] ,  );
}
internal class  :  {
    internal (PivotArea );
}
internal class  :  {
}
internal class  : object {
    internal float ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal float ;
    internal float ;
    internal float ;
    internal float ;
    internal int ;
    internal int ;
    internal float ;
    internal float ;
    internal int ;
    internal int ;
    internal float ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal int ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal void ( );
}
internal class  : object {
    internal string ;
    internal List`1<string> ;
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual object ();
    public abstract virtual  ( );
}
internal class  :  {
    private [] ;
    private int ;
    public ( ,  , [] , int );
    private ( );
    public virtual  ( );
    public sealed virtual void ();
    public sealed virtual bool (int ,  );
}
internal class  :  {
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
    internal virtual string ();
}
[CLSCompliantAttribute("False")]
internal abstract class  : object {
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] );
    public static void (UInt32[] , int );
    public static void (UInt32[] );
    public static void (int , UInt32[] , int , UInt32[] , int );
    public static void (int , UInt32[] );
    public static void (UInt32[] , int , UInt32[] , int );
    public static UInt32[] ();
    public static void (int , UInt32[] , UInt32[] );
    public static void (Byte[] , int , UInt32[] );
    private static UInt32 (Byte[] , int );
    private static UInt32 (Byte[] , int );
    private static void (Byte[] , int , UInt32[] , int );
    public static void (UInt32[] , Byte[] , int );
    private static void (UInt32 , Byte[] , int );
    private static void (UInt32 , Byte[] , int );
    private static void (UInt32[] , int , Byte[] , int );
    public static void (UInt32[] , UInt32[] );
    public static int (UInt32[] );
    public static bool (UInt32[] );
    public static void (UInt32[] , UInt32 , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] );
    public static void (UInt32[] );
    private static void (UInt32[] , UInt32[] );
    private static void (UInt32[] , int );
    public static void (UInt32[] , UInt32[] );
    public static void (UInt32[] , int , UInt32[] );
    public static bool (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] , UInt32[] , UInt32[] );
    public static void (UInt32[] );
    public static void (UInt32[] );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF );
}
internal class  :  {
    private  ;
    private ( );
    public ([] );
    public static  (object );
    public virtual [] ();
    public virtual  ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private SaveOptions ;
    internal (Workbook , SaveOptions );
    internal static void (Stream , Workbook , TxtSaveOptions );
    private static void (Stream , Cells , TxtSaveOptions );
    private static void (StreamWriter , Cells ,  , CellArea , TxtSaveOptions );
    public sealed virtual void (Stream );
    public sealed virtual void Dispose();
    public sealed virtual void ();
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private static Int64[] ;
    private static Int64[] ;
    private static Int64[] ;
    private static Int64[] ;
    private long ;
    private long ;
    private long ;
    private long ;
    private Byte[] ;
    private int ;
    private Int64[] ;
    private int ;
    public ( );
    private static ();
    public sealed virtual string ();
    public sealed virtual int ();
    public sealed virtual int ();
    private void (Byte[] , int );
    public sealed virtual void (byte );
    public sealed virtual void (Byte[] , int , int );
    private void (long , long );
    private void (long , long );
    private void (long , long );
    private void ();
    private void ();
    private void (long , Byte[] , int );
    private void (long );
    private void ();
    public sealed virtual int (Byte[] , int );
    public sealed virtual void ();
    public sealed virtual  ();
    public sealed virtual void ( );
}
internal class  : object {
    private bool ;
    public (bool );
    public sealed virtual  (string );
    public sealed virtual  ( );
    public sealed virtual bool (string );
    public sealed virtual bool ();
    public sealed virtual string ();
    public sealed virtual bool ( );
    public sealed virtual int (string );
    public sealed virtual int ( );
}
internal class  :  {
    internal ( );
}
internal enum  : Enum {
    public int value__;
    public static  TimelineStyleLight1;
    public static  TimelineStyleLight2;
    public static  TimelineStyleLight3;
    public static  TimelineStyleLight4;
    public static  TimelineStyleLight5;
    public static  TimelineStyleLight6;
    public static  TimelineStyleDark1;
    public static  TimelineStyleDark2;
    public static  TimelineStyleDark3;
    public static  TimelineStyleDark4;
    public static  TimelineStyleDark5;
    public static  TimelineStyleDark6;
    public static  Custom;
}
internal interface  {
    public abstract virtual byte ();
    public abstract virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( ,  );
    internal virtual int ();
    internal virtual void ( );
    internal static void ( ,  ,  );
    internal static void ( ,  );
    [("True")]
internal static void ( , string );
    [("True")]
internal static void ( ,  , Workbook );
}
internal class  :  {
    private static [] ;
    protected  ;
    private static ();
    protected virtual  ();
    public virtual bool (int );
    protected virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual  (BigInteger );
    protected internal virtual  ( ,  , bool );
    protected internal virtual  ( ,  , [] , bool );
    public virtual bool ();
    public virtual int ();
    public virtual bool ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual  ([] , int , int );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual RectangleF (RectangleF );
    internal static PointF[] (RectangleF , Geometry );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private static  ( , string );
    private static  ( );
    private static  ( ,  );
    private static BigInteger (string );
    private static void (string ,  ,  );
    public static  (string );
    public static  ( );
    public static  (string );
    public static string ( );
    public static IEnumerable ();
}
internal abstract class  :  {
    protected  ;
    protected  ;
    protected  ;
    protected ( ,  ,  , bool );
    protected ( ,  ,  ,  );
    protected ( ,  );
    public virtual bool ();
    public virtual void (bool );
    public virtual  ();
    public virtual  ();
    public virtual bool ( );
    protected bool ( );
    protected  ( , int );
}
internal class  :  {
    internal void (int );
    internal void (int );
    internal void (int );
    internal void (int );
    internal void (int );
    internal void (int );
    internal void (Chart );
}
internal class  : object {
    internal UInt32 ;
    internal UInt32 ;
    internal UInt32 ;
    internal float ;
    internal float ;
    internal bool ;
    internal static  ( );
    private void ( );
}
internal class  : object {
    internal Hashtable ;
    internal void (string );
    internal string (string );
}
internal class  : object {
    public static int ;
    public static int ;
    public static int ;
    private static  ;
    private  ;
    public ( );
    private static ();
    public sealed virtual  ();
    public sealed virtual  ();
    public int ();
    public bool ();
    public  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
internal static  ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    public (double );
    private static ();
    public double ();
    public int ();
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public int ();
    public int ();
    public  ();
    public virtual  ();
    public virtual object ();
    public virtual bool ();
    public virtual byte ();
    public virtual  ( ,  );
    public virtual  ( );
    private string (int , string , char );
    private string (int , string );
    private string (int , string , int , char );
    private string (int , string , int , char );
    public virtual  ( );
    public virtual void (StringBuilder ,  );
    public virtual string ( );
    public virtual string ToString();
    public virtual bool ( );
    public virtual  ( );
    public virtual int CompareTo(object );
}
internal class  : object {
    internal byte ;
    internal int ;
    internal  ;
    internal  ();
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal void ( , Cells , Cells , CopyOptions );
    internal bool ( );
    internal void (Byte[] , int );
    internal Byte[] (int );
}
internal class  : object {
    private Exception ;
    public virtual  ( );
    protected virtual  ( ,  , IList );
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal class  : object {
    private  ;
    public (Stream );
    public (Byte[] );
    public  ();
    public object ();
    public IList ();
}
internal interface  {
    public abstract virtual int (int );
}
internal class  : object {
    internal int ;
    internal int ;
    internal Cell ;
    []
internal  ;
    []
internal Hyperlink ;
    []
internal OdsCellField ;
    []
internal  ;
    internal string ;
    internal string ;
    internal  ;
    internal int ;
    internal (int );
    internal void ();
    internal string ( , Row ,  );
    internal bool (int );
    internal bool ();
}
internal class  :  {
    internal (int );
    protected virtual void ( );
    protected virtual Byte[] ();
}
internal class  : object {
    private int ;
    private int ;
    internal Style ;
    internal  ;
    internal string ;
    internal string ;
    public (string );
    internal void ( );
    public Font ();
    public void (Style );
    public int ();
    public void (int );
    public int ();
    public void (int );
}
internal abstract class  : object {
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected Stack ;
    [DebuggerBrowsableAttribute("0")]
protected Stack ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected GraphicsUnit ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected CompositingQuality ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected int ;
    [DebuggerBrowsableAttribute("0")]
protected ImageFormat ;
    [DebuggerBrowsableAttribute("0")]
protected ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
protected Stream ;
    [DebuggerBrowsableAttribute("0")]
[]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected float ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
protected  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private Matrix ;
    public (int , int , ImageFormat , ImageOrPrintOptions , Stream ,  ,  );
    public bool ();
    public void (bool );
    public float ();
    public void (float );
    public int ();
    public int ();
    public void ();
    public sealed virtual  ();
    public sealed virtual void ( );
    public sealed virtual void (RectangleF , string );
    [("True")]
public abstract virtual void ();
    [("True")]
public abstract virtual Bitmap ();
    public sealed virtual void (Color );
    [("True")]
public sealed virtual void ();
    [("True")]
public sealed virtual void Dispose();
    public sealed virtual void ( , Rectangle , float , float );
    public sealed virtual void ( , RectangleF , float , float );
    public sealed virtual void ( , int , int , int , int , int , int );
    public sealed virtual void ( , float , float , float , float , float , float );
    public sealed virtual void ( , Point , Point , Point , Point );
    public sealed virtual void ( , PointF , PointF , PointF , PointF );
    public sealed virtual void ( , float , float , float , float , float , float , float , float );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , Point[] , float , FillMode );
    public sealed virtual void ( , PointF[] , float , FillMode );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , Point[] , float );
    public sealed virtual void ( , PointF[] , float );
    public sealed virtual void ( , PointF[] , int , int );
    public sealed virtual void ( , Point[] , int , int , float );
    public sealed virtual void ( , PointF[] , int , int , float );
    public sealed virtual void ( , Rectangle );
    public sealed virtual void ( , RectangleF );
    public sealed virtual void ( , int , int , int , int );
    public sealed virtual void ( , float , float , float , float );
    public sealed virtual void (Image , Point );
    public sealed virtual void (Image , PointF );
    public sealed virtual void (Image , Rectangle );
    public sealed virtual void (Image , RectangleF );
    public sealed virtual void (Image , int , int );
    public sealed virtual void (Image , float , float );
    public sealed virtual void (Image , Rectangle , float , float , float , float , GraphicsUnit );
    public abstract virtual void (Image , Rectangle , int , int , int , int , GraphicsUnit );
    public sealed virtual void (Image , Rectangle , Rectangle , GraphicsUnit );
    public sealed virtual void (Image , RectangleF , RectangleF , GraphicsUnit );
    public sealed virtual void (Image , Rectangle , int , int , int , int , GraphicsUnit , ImageAttributes );
    public sealed virtual void (Image , int , int , int , int );
    public sealed virtual void (Image , float , float , float , float );
    public sealed virtual void ( , Point , Point );
    public sealed virtual void ( , PointF , PointF );
    public sealed virtual void ( , int , int , int , int );
    public sealed virtual void ( , float , float , float , float );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , GraphicsPath );
    public sealed virtual void ( , Rectangle , float , float );
    public sealed virtual void ( , RectangleF , float , float );
    public sealed virtual void ( , int , int , int , int , int , int );
    public sealed virtual void ( , float , float , float , float , float , float );
    public sealed virtual void ( , Point[] );
    public sealed virtual void ( , PointF[] );
    public sealed virtual void ( , Rectangle );
    public sealed virtual void ( , int , int , int , int );
    public sealed virtual void ( , float , float , float , float );
    public sealed virtual void ( , Rectangle[] );
    public sealed virtual void ( , RectangleF[] );
    public sealed virtual void (string , Font , Brush , PointF );
    public sealed virtual void (string , Font , Brush , RectangleF );
    public sealed virtual void (string , Font , Brush , PointF , StringFormat );
    public sealed virtual void (string , Font , Brush , RectangleF , StringFormat );
    public sealed virtual void (string , Font , Brush , float , float );
    public sealed virtual void (string , Font , Brush , float , float , StringFormat );
    public sealed virtual void (string , Font , Brush , Rectangle );
    public sealed virtual void (string , Font , Brush , Rectangle , StringFormat );
    protected abstract virtual void (string , Font , Brush , float , float , float , float , StringFormat );
    public sealed virtual void (Rectangle );
    public sealed virtual void (Region );
    public sealed virtual void (Brush , Point[] );
    public sealed virtual void (Brush , PointF[] );
    public sealed virtual void (Brush , Point[] , FillMode );
    public sealed virtual void (Brush , PointF[] , FillMode );
    public sealed virtual void (Brush , Point[] , FillMode , float );
    public sealed virtual void (Brush , PointF[] , FillMode , float );
    public sealed virtual void (Brush , Rectangle );
    public sealed virtual void (Brush , RectangleF );
    public sealed virtual void (Brush , int , int , int , int );
    public sealed virtual void (Brush , float , float , float , float );
    public sealed virtual void (Brush , GraphicsPath );
    public sealed virtual void (Brush , Rectangle , float , float );
    public sealed virtual void (Brush , int , int , int , int , int , int );
    public sealed virtual void (Brush , float , float , float , float , float , float );
    public sealed virtual void (Brush , Point[] );
    public sealed virtual void (Brush , PointF[] );
    public sealed virtual void (Brush , Point[] , FillMode );
    public sealed virtual void (Brush , PointF[] , FillMode );
    public sealed virtual void (Brush , Rectangle );
    public sealed virtual void (Brush , RectangleF );
    public sealed virtual void (Brush , int , int , int , int );
    public sealed virtual void (Brush , float , float , float , float );
    public sealed virtual void (Brush , Rectangle[] );
    public sealed virtual void (Brush , RectangleF[] );
    public abstract virtual void (Brush , Region );
    public sealed virtual void ();
    public sealed virtual void (FlushIntention );
    public sealed virtual Color (Color );
    public sealed virtual void (Rectangle );
    public sealed virtual void (RectangleF );
    public sealed virtual void (Region );
    public sealed virtual bool (Point );
    public sealed virtual bool (PointF );
    public sealed virtual bool (Rectangle );
    public sealed virtual bool (RectangleF );
    public sealed virtual bool (int , int );
    public sealed virtual bool (float , float );
    public sealed virtual bool (int , int , int , int );
    public sealed virtual bool (float , float , float , float );
    public sealed virtual Region[] (string , Font , RectangleF , StringFormat );
    public sealed virtual SizeF (string , Font );
    public sealed virtual SizeF (string , Font , SizeF );
    public sealed virtual SizeF (string , Font , int );
    public sealed virtual SizeF (string , Font , PointF , StringFormat );
    public sealed virtual SizeF (string , Font , SizeF , StringFormat );
    public sealed virtual SizeF (string , Font , int , StringFormat );
    public sealed virtual SizeF (string , Font , SizeF , StringFormat , Int32& , Int32& );
    public sealed virtual void (Matrix );
    public sealed virtual void (Matrix , MatrixOrder );
    public sealed virtual void ();
    public sealed virtual void ();
    internal void (Matrix );
    public sealed virtual void (GraphicsState );
    public sealed virtual void (float );
    public sealed virtual void (float , MatrixOrder );
    public sealed virtual GraphicsState ();
    public sealed virtual void (float , float );
    public sealed virtual void (float , float , MatrixOrder );
    public sealed virtual void (GraphicsPath );
    public sealed virtual void ( );
    public sealed virtual void (Rectangle );
    public sealed virtual void (RectangleF );
    public abstract virtual void (GraphicsPath , CombineMode );
    public sealed virtual void ( , CombineMode );
    public sealed virtual void (Rectangle , CombineMode );
    public sealed virtual void (RectangleF , CombineMode );
    public sealed virtual void (Region , CombineMode );
    public void (CoordinateSpace , CoordinateSpace , Point[] );
    public void (CoordinateSpace , CoordinateSpace , PointF[] );
    public sealed virtual void (int , int );
    public sealed virtual void (float , float );
    public sealed virtual void (float , float );
    public sealed virtual void (float , float , MatrixOrder );
    public sealed virtual Region ();
    public sealed virtual void (Region );
    public sealed virtual RectangleF ();
    public sealed virtual float ();
    public sealed virtual float ();
    public sealed virtual bool ();
    public sealed virtual bool ();
    public sealed virtual GraphicsUnit ();
    public sealed virtual void (GraphicsUnit );
    public sealed virtual float ();
    public sealed virtual void (float );
    public sealed virtual Point ();
    public sealed virtual void (Point );
    public virtual SmoothingMode ();
    public virtual void (SmoothingMode );
    public virtual TextRenderingHint ();
    public virtual void (TextRenderingHint );
    public sealed virtual Matrix ();
    public sealed virtual void (Matrix );
    public sealed virtual RectangleF ();
    public sealed virtual CompositingQuality ();
    public sealed virtual void (CompositingQuality );
    public sealed virtual int ();
    public sealed virtual void (int );
    [("True")]
public abstract virtual  ();
    private RectangleF ( );
    private void ( , Brush , float , float , float , float , float , float );
    private void ( , Brush , float , float , float , float , float , float );
    private void ( , float , float , float , float );
    private void ( , Brush , float , float , float , float );
    private void ( , Brush , GraphicsPath );
    private void ( , Brush , Single[] , FillMode );
    private void ( , Brush , float , float , float , float );
    private void ( , Point[] , int , int , float , bool );
    private void ( , PointF[] , int , int , float , bool );
    protected void ( , Single[] , float , bool );
    protected void ( , float , float , float , float , float , float , float , float );
    protected abstract virtual void (Region , CombineMode );
    protected abstract virtual void (float , float , float , float , Image );
    internal abstract virtual float (float , float );
    internal abstract virtual float (float );
    internal abstract virtual float (float , float );
    internal abstract virtual float (float );
    private bool ( );
    private  ( );
    protected Brush (Brush );
    public virtual void (SmoothingMode , bool );
    public virtual void (TextRenderingHint , bool );
    public sealed virtual ImageOrPrintOptions ();
}
internal class  : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
[]
private SaveOptions ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    public (Workbook , SaveOptions );
    public sealed virtual void (Stream );
    public sealed virtual void ();
    public sealed virtual void Dispose();
    internal void (Stream );
    internal void ( );
    private void (Stream );
    internal static void (WorksheetCollection ,  );
    private void ();
    private void ( );
    private void ();
    private void (Stream ,  ,  );
    private void (Stream ,  ,  );
    private void (Stream ,  ,  );
    private void (bool );
}
internal class  : object {
    protected DigitalSignatureCollection ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    [("True")]
public (DigitalSignatureCollection );
    public  ();
    public void ( );
    public  ();
    public void ( );
    protected string ( );
    protected string ();
    protected void ( );
    [("True")]
protected  (DigitalSignature );
    protected  (DigitalSignature );
    protected  (DigitalSignature );
    [("True")]
protected  (DigitalSignature );
    private string (DateTime );
    protected string (Byte[] );
    protected  (DigitalSignature ,  );
    protected  ( ,  ,  , DigitalSignature );
    private string (string );
    protected  (Stream , string );
    protected Byte[] (string );
}
internal class  :  {
    internal ( );
}
internal class  : object {
    private Byte[] ;
    public (Byte[] );
    public Byte[] ();
}
internal class  : object {
    internal static long (object );
    internal static double (object );
    internal static double (object );
    internal static int (object );
    internal static short (object );
    internal static bool (object );
    internal static int (double );
    internal static int (byte );
    internal static int (sbyte );
    internal static int (short );
    internal static int (ushort );
    internal static int (UInt32 );
    internal static int (ulong );
    internal static int (long );
    internal static double (decimal );
    internal static short (int );
    internal static object (byte );
    public static int (Byte[] , int , long );
    public static int (Byte[] , int , double );
    public static int (Byte[] , int , int );
    public static int (Byte[] , int , short );
    public static double (Byte[] , int );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void (RectangleF );
}
internal class  : ValueType {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [IsReadOnlyAttribute]
public string ();
    public void (string );
    [IsReadOnlyAttribute]
public string ();
    public void (string );
    [IsReadOnlyAttribute]
public Byte[] ();
    public void (Byte[] );
}
internal static class  : object {
    private static UInt32 (UInt32 , UInt32 , UInt32 , int , UInt32 , UInt32[] );
    public static void (Byte[] , int , int , Byte[] );
    private static void (UInt32[] , UInt32[] );
    private static UInt32[] (Byte[] , int , int , UInt32[] , int );
    private static void (UInt32[] , int , int , Byte[] , int );
}
internal class  : object {
    private static void (GradientFill , ThemeColorType , int , int , int );
    internal static void (GradientFill , ThemeColorType );
    internal static void (GradientFill , ThemeColorType );
    internal static void (GradientFill , ThemeColorType );
    internal static void (GradientFill , ThemeColorType );
    internal static void (GradientFill , ThemeColorType );
}
internal class  :  {
    internal (string );
}
internal interface  {
    public abstract virtual void ( );
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual bool ();
    public abstract virtual Int32[] ();
    public abstract virtual Byte[] ();
    public abstract virtual IDictionary ();
    public abstract virtual void ( );
    public abstract virtual void (Byte[] );
    public abstract virtual void (int );
    public abstract virtual void (byte );
    public abstract virtual void (IDictionary );
    public abstract virtual void (IList );
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual IList ();
    public abstract virtual void ( );
}
internal enum  : Enum {
    public int value__;
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    public void (Color , float );
    internal  (int );
    internal bool ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  : List`1<> {
    internal  (int );
    internal void ( , CopyOptions );
}
internal class  :  {
    internal (QueryTable );
}
internal class  : object {
    private static int ;
    private static int ;
    private static int ;
    private static int ;
    private  ;
    private int ;
    private bool ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private MemoryStream ;
    private MemoryStream ;
    private int ;
    public ( );
    public ( , int );
    private static ();
    private void (int );
    public virtual void (bool ,  );
    public virtual string ();
    public virtual int ();
    public virtual  ();
    public virtual void (byte );
    public virtual void (Byte[] , int , int );
    private void (Byte[] , int , int , int );
    public virtual int (byte , Byte[] , int );
    public virtual int (Byte[] , int , int , Byte[] , int );
    public int (Byte[] , int , int , Byte[] , int );
    private void (Byte[] , int , int , Byte[] , int );
    private void (Byte[] , int , int );
    public virtual int (Byte[] , int );
    public virtual Byte[] ();
    public virtual int (int );
    public virtual int (int );
    public virtual void ();
    private void (int , Byte[] , int );
    private byte (bool , int );
}
internal abstract class  : object {
    []
protected  ;
    []
protected  ;
    protected  ;
    protected  ;
    protected  ;
    protected  ;
    internal float ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected bool ;
    protected double ;
    protected  ;
    protected object ;
    protected bool ;
    protected string ;
    protected bool ;
    protected double ;
    protected  ;
    protected object ;
    protected string ;
    protected bool ;
    protected double ;
    protected string ;
    private bool ;
    protected float ;
    protected bool ;
    protected bool ;
    protected bool ;
    private RectangleF ;
    private float ;
    private float ;
    private float ;
    internal bool ;
    private bool ;
    internal ( );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    public virtual  ();
    public virtual  ();
    public virtual  ();
    public  ();
    internal void ();
    public virtual  ();
    public double ();
    public void (double );
    public  ();
    public void ( );
    public object ();
    public void (object );
    public bool ();
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public double ();
    public void (double );
    public  ();
    public void ( );
    public object ();
    public void (object );
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public double ();
    public void (double );
    public string ();
    public void (string );
    public bool ();
    public void (bool );
    public float ();
    public void (float );
    public bool ();
    public void (bool );
    public bool ();
    public void (bool );
    internal virtual void ();
    internal bool ();
    internal int ();
    internal RectangleF ();
    internal void (RectangleF );
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    internal float ();
    internal void (float );
    internal void ();
    protected virtual override void Finalize();
    public void ();
    protected virtual void (bool );
}
[GuidAttribute("ebc25cf6-9120-4283-b972-0e5520d0000E")]
internal class  : Exception {
    public (string );
}
internal abstract class  : object {
    public abstract virtual int (Char[] , int , int , int , StringBuilder ,  );
    public abstract virtual int (Char[] , int , int , int , StringBuilder ,  );
    public virtual bool (char );
    public virtual bool (char );
    public virtual int (Char[] , int , int , int , StringBuilder ,  );
}
internal class  : object {
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal string ;
    internal (bool );
}
internal abstract class  : object {
    public abstract virtual BigInteger ();
    public abstract virtual string ();
    public abstract virtual int ();
    public abstract virtual  ( );
    public abstract virtual  ();
    public abstract virtual  ( );
    public abstract virtual  ( );
    public abstract virtual  ( );
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  ();
    public abstract virtual  ();
    public virtual int ();
    public virtual bool ();
    public virtual bool ();
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual bool ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual Byte[] ();
}
internal class  :  {
    internal ( );
    internal virtual void ( );
    internal virtual string ();
}
internal class  :  {
    internal ( , float , float ,  );
    internal static GraphicsPath[] ( , RectangleF );
    internal virtual void ();
}
internal class  :  {
    private  ;
    private Byte[] ;
    private ( );
    public ( , Byte[] );
    public static  (object );
    public  ();
    public Byte[] ();
    public virtual  ();
}
internal class  : object {
    internal Byte[] ;
    private int ;
    private  ;
    internal  ;
    internal  ;
    internal int ;
    internal int ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private Byte[] ;
    private static string ;
    internal ( , Byte[] , Byte[] );
    private static ();
    internal static bool (string , string , Byte[] , Byte[] , int );
    private Byte[] (Byte[] , Byte[] , Byte[] );
    private Byte[] (Byte[] , Byte[] , Byte[] );
    internal bool ();
    internal Stream ();
    private static  (string );
    private static Byte[] (Byte[] , Byte[] , Byte[] );
    private static Byte[] (Byte[] , Byte[] , Byte[] );
    private static Byte[] (Byte[] , int );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RevisionLogCollection ;
    internal (RevisionLogCollection );
    internal virtual int ();
    internal virtual void ( );
}
internal abstract class  : object {
    public static bool (int );
    public static bool (int );
}
internal class  : object {
    public static void ( , bool );
    private static void ( ,  , string , bool );
}
internal class  : ValueType {
    internal static void ( , Rectangle& ,  );
    private static void (Rectangle& ,  );
    internal static void ( ,  );
    private static string ( , int , double );
    internal static Rectangle ( ,  , Rectangle , Double[] , Color[] , String[] );
    private static ArrayList ( ,  );
    private static SizeF (Rectangle ,  );
    private static SizeF (RectangleF ,  );
    private static void (RectangleF , RectangleF , SizeF& );
}
internal class  :  {
    private  ;
    private  ;
    private ( );
    public static  (object );
    public virtual  ();
    public virtual  ();
}
internal interface  {
    public abstract virtual  ();
    public abstract virtual  (int );
    public abstract virtual  (int );
}
internal class  : object {
    internal [] ;
    internal bool ;
    internal ([] );
}
internal class  : object {
    private string ;
    private IList ;
    private Byte[] ;
    public (string , Byte[] );
    public (string , IList , Byte[] );
    public string ();
    public IList ();
    public Byte[] ();
    public sealed virtual  ();
}
internal class  : object {
    internal string ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal string ;
    internal string ;
    internal int ;
    internal bool ();
}
internal class  : object {
    private  ;
    internal int ;
    []
private  ;
    internal Style ;
    internal ( ,  );
    internal void ( );
    private WorksheetCollection ();
    public void (Style );
    public Style ();
    internal Style ();
    internal void (Style );
    internal  ();
}
internal class  :  {
    internal  ;
    internal  ;
    private  ;
    private Byte[] ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    public (Byte[] );
    public (Stream );
    public  ();
    public string ();
    public  ();
    public  ();
    public Byte[] ();
    public  ();
    public  ();
}
internal class  :  {
    private  ;
    private  ;
    private  ;
    private  ;
    private bool ;
    private bool ;
    public ( ,  ,  ,  );
    private ( );
    public virtual  ( );
    internal  ( ,  );
    protected virtual bool ( );
    protected virtual  ( );
    protected virtual  ();
    protected virtual void ( );
    protected virtual bool ();
    protected virtual void ( );
    public sealed virtual bool ( );
    public sealed virtual bool ( );
}
internal enum  : Enum {
    public int value__;
}
internal class  :  {
    private [] ;
    public ([] , int , int );
    private static [] ([] , int , int );
    public virtual int ();
    public virtual  (int );
    public virtual  (int );
}
internal class  :  {
    internal static  ;
    internal string ;
    internal bool ;
    internal (string );
    internal (string , bool );
    private static ();
    internal virtual  ();
    internal virtual object ();
    internal  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal static GraphicsPath ( , RectangleF );
    internal virtual void ();
    public static void (RectangleF& );
}
internal class  :  {
    internal  ;
    internal  ;
    internal  ;
    public ( );
    public ( ,  );
    public ( ,  );
    public ( ,  ,  );
    private ( );
    public static  ( , bool );
    public static  (object );
    public  ();
    public  ();
    public  ();
    public virtual  ();
}
internal enum  : Enum {
    public int value__;
}
internal enum  : Enum {
    public int value__;
}
internal interface  {
    public abstract virtual string ();
    public abstract virtual void (bool ,  );
    public abstract virtual int ();
    public abstract virtual bool ();
    public abstract virtual int (Byte[] , int , Byte[] , int );
    public abstract virtual void ();
}
internal class  : object {
    internal  ;
    internal void ();
    public sealed virtual void ( ,  );
    public sealed virtual void ( ,  );
    public sealed virtual void ( ,  );
    public sealed virtual void ( ,  );
}
internal class  :  {
    internal (int );
}
internal class  : object {
    internal static object (Validation , Byte[] , int , int );
    private static object (Validation , Byte[] );
    internal static object ( );
    private static bool (Validation ,  );
    internal static bool (Validation ,  ,  ,  );
    private static Object[] (Validation ,  , int , int );
    private static bool (Validation ,  ,  ,  );
    private static string (string );
}
internal class  : object {
    []
private  ;
    []
private  ;
    private [][] ;
    private [] ;
    private  ;
    private [] ;
    public ( ,  );
    public sealed virtual void (int );
    public sealed virtual bool (int , int );
    public sealed virtual bool (int ,  );
    public sealed virtual bool (int , int , int );
    public sealed virtual bool (int , int );
    public sealed virtual bool (int , int );
    public sealed virtual bool (int , int , int );
    public sealed virtual object ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
[]
private ThreadedCommentAuthorCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    internal ( , ThreadedCommentAuthorCollection );
    internal virtual void ( );
}
internal class  :  {
    protected internal UInt64[] ;
    public (BigInteger );
    protected internal (UInt64[] );
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual BigInteger ();
    public virtual string ();
    public virtual int ();
    public virtual  ( );
    public virtual  ();
    public virtual  ( );
    public virtual  ( );
    public virtual  ( ,  ,  );
    public virtual  ( ,  ,  );
    public virtual  ( );
    public virtual  ();
    public virtual  ();
    public virtual  ( ,  );
    public virtual  ( ,  );
    public virtual  (int );
    public virtual  ();
    public virtual bool ();
    public virtual int ();
    public virtual  ();
    public virtual  ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual int ();
    public virtual bool Equals(object );
    public virtual bool ( );
    public virtual bool ( );
    public virtual int GetHashCode();
}
internal class  :  {
    private ArrayList ;
    private  ;
    []
private  ;
    public (Byte[] ,  );
    public ( , int , int ,  );
    public Byte[] ();
    public Byte[] (int );
    private void (int , int );
    private void (int );
    private void (int , int );
    private int (int , int );
    private void (Int32[] );
    private void (int , int );
    private Byte[] (Int32[] );
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static UInt16[] ;
    [DebuggerBrowsableAttribute("0")]
private static Point[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private static [] ;
    internal ( , float , float ,  );
    private static ();
    internal virtual void ();
}
internal class  : object {
    private  ;
    public void ( );
    public void ( , int );
    public void ( ,  );
    public  ();
}
internal class  :  {
    internal ( ,  ,  , Int32[] );
    private ( , int ,  );
    protected virtual  ( , bool );
    public virtual bool (int , int );
    private bool (int , int , int );
    public virtual bool ();
    public virtual bool ();
}
internal class  :  {
    internal (ushort , bool );
}
internal class  : object {
    internal bool ;
    internal bool ;
    internal  ;
    internal string ;
    internal string ;
    internal void ( );
}
internal interface  {
    [("True")]
public abstract virtual void ( ,  , SizeF& , RectangleF& ,  );
}
internal class  : object {
    private static string ;
    private static string ;
    public static  ;
    private static string ;
    private static string ;
    public static  ;
    private static string ;
    private static string ;
    public static  ;
    private static string ;
    private static string ;
    public static  ;
    private static string ;
    private static string ;
    public static  ;
    private static string ;
    private static string ;
    public static  ;
    private static string ;
    private static string ;
    public static  ;
    private static string ;
    private static string ;
    public static  ;
    public static  ;
    public static  ;
    private static string ;
    private static string ;
    private static string ;
    public static  ;
    private static string ;
    private static string ;
    private static string ;
    public static  ;
    private static string ;
    private static string ;
    private static string ;
    public static  ;
    public static  ;
    public static  ;
    private static string ;
    public static  ;
    private static string ;
    public static  ;
    private static string ;
    public static  ;
    private static string ;
    public static  ;
    private static string ;
    public static  ;
    private static ();
    private static BigInteger (string );
    private static  (string , string );
    private static  (string , string , string );
    private static  (string , int );
}
internal abstract class  :  {
    internal  ();
    public abstract virtual bool (int );
    public abstract virtual  ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public virtual bool ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    public static  ();
    protected virtual  ( );
    public virtual  ( , int );
    private  ( ,  , int );
    private  ( ,  );
    public sealed virtual  (byte , double ,  );
    public sealed virtual  (byte ,  ,  );
    public sealed virtual  (byte , string ,  );
    public sealed virtual  (byte , bool ,  );
    public sealed virtual  (byte ,  ,  );
    public sealed virtual  (byte ,  );
    public sealed virtual  (byte ,  ,  );
    internal static int ( , bool , bool );
    internal static bool ( , bool ,  );
    internal static int ( , double , bool );
    internal static bool ( , double ,  );
    internal static int ( , bool );
    internal static bool ( ,  );
    internal static int ( ,  ,  );
    internal static bool ( , string ,  );
    public static bool ( ,  ,  );
}
internal class  :  {
    internal virtual object ();
    internal virtual string ();
    internal virtual string ();
    internal virtual  ();
}
internal class  :  {
    [DebuggerBrowsableAttribute("0")]
private Exception ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public string Message { get; }
    public (string );
    public (string , Exception );
    public (string , Exception ,  , int );
    public virtual string get_Message();
    public  ();
    public int ();
}
[DefaultMemberAttribute("")]
internal class  : CollectionBase`1<> {
    [DebuggerBrowsableAttribute("0")]
public   { get; }
    public  (int );
    internal int (string , string );
    internal int (string , string , string );
    internal void ( );
    internal int ( );
}
internal class  : object {
    private int ;
    private string ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    private double ;
    []
internal  ;
    []
internal  ;
    internal ArrayList ;
    internal int ;
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal List`1<> ();
    private void (List`1<> ,  );
}
internal class  :  {
    private  ;
    internal ( ,  );
    private static  ( );
    private bool (Byte[] );
    public long ();
    public  ( );
    public Stream ( );
    private Byte[] ( );
    private static void ( , int , Byte[] );
}
internal interface  {
    public abstract virtual int (double );
    public abstract virtual double (int );
}
internal class  : List`1<> {
    internal  (int );
}
internal class  : object {
    private int ;
    private int ;
    private  ;
    public void (int , int ,  );
    public  ();
}
internal class  : object {
    private List`1<> ;
    private StreamReader ;
    private Encoding ;
    private string ;
    private string ;
    private List`1<> ;
    private string ;
    public List`1<> (Stream , Encoding );
    private void ();
    private void (string );
    private string (string );
    private void (long , Stream , Byte[] );
    private int (Byte[] , int , int );
    private int (Byte[] , Byte[] , int , int );
    private Stream (Stream , string , Encoding );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual void ();
    internal virtual void ();
}
internal class  : object {
    private int ;
    private  ;
    private  ;
    private int ;
    protected Boolean[] ;
    private  ;
    protected  ;
    internal bool ;
    internal bool ;
    internal bool ;
    internal Char[] ;
    internal int ;
    internal int ;
    internal int ;
    internal [] ;
    []
internal  ;
    internal int ;
    internal int ;
    private StreamReader ;
    internal bool ;
    public (Stream );
    public (Stream , Encoding );
    public (string , bool );
    public static  (Stream );
    public static  (string , bool );
    public void ();
    public static int (Stream );
    internal long ();
    internal void ();
    public bool ();
    private void ();
    public void ();
    public virtual  ();
    public  ();
    public virtual void ();
    public void ();
    public virtual bool ();
    public void ();
    private void ( );
    public string ();
    public string (bool );
    public string ();
    public string (bool );
    public int (int );
    public  ();
    public  ();
    public bool ();
    public bool ();
    public bool ();
    public bool ();
    public  (string , string );
    public int (string , string , int );
    public bool (string , string , bool );
    public double (string , string , double );
    public string (string , string );
    public string (string );
    public string ();
    public string ();
    public string ();
    public  ();
    public string ();
    public Byte[] ();
    public bool ();
    public bool ();
    public bool (string );
    public bool (string );
    public int (int );
    public int (int , int );
    public bool (bool );
    public double (double );
    public Guid ();
    public string ();
    public char (char );
    public  ();
    public int ();
    public string ();
    public virtual string ();
    public virtual  ( , bool );
    private void ();
    public void (int );
    private void (int , int , int );
    public void ();
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public bool ();
    public void (bool );
    public  ();
    public void ( );
    public void ();
    public void ();
    public void (int );
    public void ();
    private bool ();
    private void ();
}
internal class  : object {
}
internal class  :  {
    internal (PivotAreaFilter );
}
internal class  : object {
    private  ;
    private  ;
    public ( ,  );
    public virtual  ();
    public virtual  ();
}
internal class  : object {
    public static string (DateTime );
    public static void (DateTime , StringBuilder );
    public static void (DateTime , StringBuilder );
    public static double (string );
    public static bool (string , Single& );
    public static int (string );
    public static int (string );
    public static bool (string );
    public static string (bool );
    public static string (byte );
    public static string (long );
    public static string (int );
    public static string (int );
    public static string (int );
    public static string (int );
    public static string (int );
    public static string (int );
    public static string (int );
    public static string (int );
    public static string (int );
    public static string (int , int );
    public static void (int , int , StringBuilder );
    public static string (double , int );
    public static void (double , int , StringBuilder );
    public static bool (double , double );
    public static string (double );
    public static string (double );
    public static string (double , CultureInfo );
    public static string (double );
    public static string (double , int );
    public static string (int , string );
    public static void (int , string , StringBuilder );
    public static string (int , string , CultureInfo );
    public static void (int , string , CultureInfo , StringBuilder );
    public static string (double , string );
    public static void (double , string , StringBuilder );
    public static string (double , string , CultureInfo );
    public static void (double , string , CultureInfo , StringBuilder );
    public static string (double , string );
    public static void (double , string , StringBuilder );
    public static string (double , string , CultureInfo );
    public static void (double , string , CultureInfo , StringBuilder );
    public static string (double );
    public static string (float );
    public static string (float );
    public static string (double );
    public static string (DateTime , string , CultureInfo );
    public static void (DateTime , string , CultureInfo , StringBuilder );
}
internal class  :  {
    internal ( , float , float ,  );
    internal virtual GraphicsPath (RectangleF );
    internal virtual void (RectangleF );
}
internal class  : object {
    private static IDictionary ;
    private static IDictionary ;
    private static IDictionary ;
    private static ();
    private static  ( , string );
    private static  ( );
    private static BigInteger (string );
    private static void (string ,  ,  );
    public static  (string );
    public static  ( );
    public static  (string );
    public static string ( );
    public static IEnumerable ();
}
public class Aspose.Cells.AboveAverage : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public bool IsAboveAverage { get; public set; }
    public bool IsEqualAverage { get; public set; }
    public int StdDev { get; public set; }
    internal void (AboveAverage );
    public bool get_IsAboveAverage();
    public void set_IsAboveAverage(bool value);
    public bool get_IsEqualAverage();
    public void set_IsEqualAverage(bool value);
    public int get_StdDev();
    public void set_StdDev(int value);
}
public abstract class Aspose.Cells.AbstractCalculationEngine : object {
    public bool IsParamLiteralRequired { get; }
    public bool IsParamArrayModeRequired { get; }
    public bool ProcessBuiltInFunctions { get; }
    public abstract virtual void Calculate(CalculationData data);
    public virtual bool get_IsParamLiteralRequired();
    public virtual bool get_IsParamArrayModeRequired();
    public virtual bool get_ProcessBuiltInFunctions();
    public virtual bool ForceRecalculate(string functionName);
}
public abstract class Aspose.Cells.AbstractCalculationMonitor : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    public object OriginalValue { get; }
    public bool ValueChanged { get; }
    public object CalculatedValue { get; }
    protected void Interrupt(string msg);
    public object get_OriginalValue();
    public bool get_ValueChanged();
    public object get_CalculatedValue();
    public virtual void BeforeCalculate(int sheetIndex, int rowIndex, int colIndex);
    public virtual void AfterCalculate(int sheetIndex, int rowIndex, int colIndex);
    public virtual bool OnCircular(IEnumerator circularCellsData);
}
public abstract class Aspose.Cells.AbstractGlobalizationSettings : object {
    [DebuggerBrowsableAttribute("0")]
private CultureInfo ;
    internal CultureInfo ();
    internal void (CultureInfo );
    public virtual int Compare(string v1, string v2, bool ignoreCase);
    public virtual IComparable GetCollationKey(string v, bool ignoreCase);
}
public abstract class Aspose.Cells.AbstractInterruptMonitor : object {
    public bool IsInterruptionRequested { get; }
    public bool TerminateWithoutException { get; }
    public abstract virtual bool get_IsInterruptionRequested();
    public virtual bool get_TerminateWithoutException();
    internal virtual AbstractInterruptMonitor qsymspwk7dh83mk7qpxsgz83kmj48qxk();
    internal virtual bool qsymspwk7dh83mk7qpxsgz83kmj48qxk();
    internal virtual bool qsymspwk7dh83mk7qpxsgz83kmj48qxk(int );
    internal void ();
}
public class Aspose.Cells.AbstractTextLoadOptions : LoadOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Encoding ;
    [DebuggerBrowsableAttribute("0")]
internal TxtLoadStyleStrategy ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public Encoding Encoding { get; public set; }
    public TxtLoadStyleStrategy LoadStyleStrategy { get; public set; }
    public bool ConvertNumericData { get; public set; }
    public bool ConvertDateTimeData { get; public set; }
    public bool KeepPrecision { get; public set; }
    internal virtual LoadOptions 3brubdvsxd6xvlegksy2gu4sdj469srm();
    protected void Copy(AbstractTextLoadOptions src);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public TxtLoadStyleStrategy get_LoadStyleStrategy();
    public void set_LoadStyleStrategy(TxtLoadStyleStrategy value);
    public bool get_ConvertNumericData();
    public void set_ConvertNumericData(bool value);
    public bool get_ConvertDateTimeData();
    public void set_ConvertDateTimeData(bool value);
    public bool get_KeepPrecision();
    public void set_KeepPrecision(bool value);
}
[FlagsAttribute]
[("And")]
[("Or")]
[("Complement")]
public enum Aspose.Cells.AccessCacheOptions : Enum {
    public int value__;
    public static AccessCacheOptions None;
    public static AccessCacheOptions All;
    public static AccessCacheOptions PositionAndSize;
    public static AccessCacheOptions CellsData;
    public static AccessCacheOptions CellDisplay;
    public static AccessCacheOptions GetFormula;
    public static AccessCacheOptions SetFormula;
    public static AccessCacheOptions CalculateFormula;
    public static AccessCacheOptions ConditionalFormatting;
    public static AccessCacheOptions Validation;
}
public class Aspose.Cells.AdvancedFilter : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Cells ;
    public string ListRange { get; }
    public string CriteriaRange { get; }
    public string CopyToRange { get; }
    internal AdvancedFilter(Cells );
    public string get_ListRange();
    public string get_CriteriaRange();
    public string get_CopyToRange();
    internal void (bool , string , string , string , bool );
    private static void (Cells , int , int , int , int , int );
    private bool (List`1<Row> , int , int , int );
    private static bool (Row , Row , bool , int , int );
}
public enum Aspose.Cells.AutoFillType : Enum {
    public int value__;
    public static AutoFillType Copy;
    public static AutoFillType Default;
    public static AutoFillType Formats;
    public static AutoFillType Series;
    public static AutoFillType Values;
}
public class Aspose.Cells.AutoFilter : object {
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal FilterColumnCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
private DataSorter ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public DataSorter Sorter { get; }
    public string Range { get; public set; }
    public bool ShowFilterButton { get; public set; }
    public FilterColumnCollection FilterColumns { get; }
    internal AutoFilter(Worksheet , object );
    internal Worksheet ();
    internal bool ();
    internal CellArea ();
    internal DataSorter ();
    public DataSorter get_Sorter();
    internal void (AutoFilter , CopyOptions );
    public void SetRange(int row, int startColumn, int endColumn);
    internal bool ();
    internal void (int , int , int , int , bool );
    public CellArea GetCellArea();
    public string get_Range();
    public void set_Range(string value);
    internal void (string , bool );
    private void (CellArea );
    internal void ();
    internal void (Range );
    private void (int );
    public void AddFilter(int fieldIndex, string criteria);
    public void AddDateFilter(int fieldIndex, DateTimeGroupingType dateTimeGroupingType, int year, int month, int day, int hour, int minute, int second);
    public void RemoveDateFilter(int fieldIndex, DateTimeGroupingType dateTimeGroupingType, int year, int month, int day, int hour, int minute, int second);
    public void RemoveFilter(int fieldIndex, string criteria);
    public void Filter(int fieldIndex, string criteria);
    public void FilterTop10(int fieldIndex, bool isTop, bool isPercent, int itemCount);
    public void DynamicFilter(int fieldIndex, DynamicFilterType dynamicFilterType);
    public void AddFontColorFilter(int fieldIndex, CellsColor color);
    public void AddFillColorFilter(int fieldIndex, BackgroundType pattern, CellsColor foregroundColor, CellsColor backgroundColor);
    public void AddIconFilter(int fieldIndex, IconSetType iconSetType, int iconId);
    public void MatchBlanks(int fieldIndex);
    public void MatchNonBlanks(int fieldIndex);
    public void Custom(int fieldIndex, FilterOperatorType operatorType1, object criteria1);
    public void Custom(int fieldIndex, FilterOperatorType operatorType1, object criteria1, bool isAnd, FilterOperatorType operatorType2, object criteria2);
    public void ShowAll();
    public void RemoveFilter(int fieldIndex);
    internal bool (object );
    internal bool ();
    public Int32[] Refresh();
    public Int32[] Refresh(bool hideRows);
    internal void ( );
    private int (Cells );
    public bool get_ShowFilterButton();
    public void set_ShowFilterButton(bool value);
    public FilterColumnCollection get_FilterColumns();
    internal bool ();
    internal int ();
    internal int ();
    internal ushort ();
    internal CellArea ();
    internal void (int , int );
    internal void (int , int );
    internal static string (object );
}
public enum Aspose.Cells.AutoFitMergedCellsType : Enum {
    public int value__;
    public static AutoFitMergedCellsType None;
    public static AutoFitMergedCellsType FirstLine;
    public static AutoFitMergedCellsType LastLine;
    public static AutoFitMergedCellsType EachLine;
}
public class Aspose.Cells.AutoFitterOptions : object {
    [DebuggerBrowsableAttribute("0")]
private DefaultEditLanguage ;
    [DebuggerBrowsableAttribute("0")]
internal AutoFitMergedCellsType ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal AutoFitWrappedTextType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal CellValueFormatStrategy ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public DefaultEditLanguage DefaultEditLanguage { get; public set; }
    [ObsoleteAttribute("Use AutoFitterOptions.AutoFitMergedCellsType property, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool AutoFitMergedCells { get; public set; }
    public AutoFitMergedCellsType AutoFitMergedCellsType { get; public set; }
    public bool OnlyAuto { get; public set; }
    public bool IgnoreHidden { get; public set; }
    public double MaxRowHeight { get; public set; }
    public AutoFitWrappedTextType AutoFitWrappedTextType { get; public set; }
    public CellValueFormatStrategy FormatStrategy { get; public set; }
    public bool ForRendering { get; public set; }
    public DefaultEditLanguage get_DefaultEditLanguage();
    public void set_DefaultEditLanguage(DefaultEditLanguage value);
    public bool get_AutoFitMergedCells();
    public void set_AutoFitMergedCells(bool value);
    public AutoFitMergedCellsType get_AutoFitMergedCellsType();
    public void set_AutoFitMergedCellsType(AutoFitMergedCellsType value);
    public bool get_OnlyAuto();
    public void set_OnlyAuto(bool value);
    public bool get_IgnoreHidden();
    public void set_IgnoreHidden(bool value);
    public double get_MaxRowHeight();
    public void set_MaxRowHeight(double value);
    public AutoFitWrappedTextType get_AutoFitWrappedTextType();
    public void set_AutoFitWrappedTextType(AutoFitWrappedTextType value);
    public CellValueFormatStrategy get_FormatStrategy();
    public void set_FormatStrategy(CellValueFormatStrategy value);
    public bool get_ForRendering();
    public void set_ForRendering(bool value);
}
public enum Aspose.Cells.AutoFitWrappedTextType : Enum {
    public int value__;
    public static AutoFitWrappedTextType Default;
    public static AutoFitWrappedTextType Paragraph;
}
public enum Aspose.Cells.BackgroundType : Enum {
    public int value__;
    public static BackgroundType DiagonalCrosshatch;
    public static BackgroundType DiagonalStripe;
    public static BackgroundType Gray6;
    public static BackgroundType Gray12;
    public static BackgroundType Gray25;
    public static BackgroundType Gray50;
    public static BackgroundType Gray75;
    public static BackgroundType HorizontalStripe;
    public static BackgroundType None;
    public static BackgroundType ReverseDiagonalStripe;
    public static BackgroundType Solid;
    public static BackgroundType ThickDiagonalCrosshatch;
    public static BackgroundType ThinDiagonalCrosshatch;
    public static BackgroundType ThinDiagonalStripe;
    public static BackgroundType ThinHorizontalCrosshatch;
    public static BackgroundType ThinHorizontalStripe;
    public static BackgroundType ThinReverseDiagonalStripe;
    public static BackgroundType ThinVerticalStripe;
    public static BackgroundType VerticalStripe;
}
public class Aspose.Cells.Border : object {
    []
private BorderCollection borders;
    internal  InternalColor;
    private BorderType borderType;
    private CellBorderType lineStyle;
    public ThemeColor ThemeColor { get; public set; }
    public Color Color { get; public set; }
    public int ArgbColor { get; public set; }
    public CellBorderType LineStyle { get; public set; }
    internal Border(BorderCollection );
    internal Border(BorderCollection , BorderType );
    internal void (CellBorderType ,  );
    public ThemeColor get_ThemeColor();
    public void set_ThemeColor(ThemeColor value);
    public Color get_Color();
    public void set_Color(Color value);
    public int get_ArgbColor();
    public void set_ArgbColor(int value);
    private void ();
    internal BorderType ();
    internal void (BorderType );
    public CellBorderType get_LineStyle();
    public void set_LineStyle(CellBorderType value);
    internal void (CellBorderType );
    internal void (Border );
    internal void (Border , CopyOptions );
    internal bool (Border , Workbook , Workbook );
    internal bool (Border );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.BorderCollection : object {
    internal bool Outline;
    []
private Style m_Style;
    internal Border[] borderList;
    public Border Item { get; }
    public Color DiagonalColor { get; public set; }
    public CellBorderType DiagonalStyle { get; public set; }
    internal BorderCollection(Style );
    internal Style ();
    internal Border ();
    internal void (Border );
    internal Border ();
    internal void (Border );
    public Border get_Item(BorderType borderType);
    internal bool ();
    internal bool (BorderCollection , Workbook , Workbook );
    internal void (CellBorderType , Color );
    public void SetColor(Color color);
    public void SetStyle(CellBorderType style);
    public Color get_DiagonalColor();
    public void set_DiagonalColor(Color value);
    internal  ();
    public CellBorderType get_DiagonalStyle();
    public void set_DiagonalStyle(CellBorderType value);
    internal byte ();
    internal void (BorderCollection , BorderType );
    internal void (BorderCollection , CopyOptions );
}
[FlagsAttribute]
[("And")]
[("Or")]
public enum Aspose.Cells.BorderType : Enum {
    public int value__;
    public static BorderType BottomBorder;
    public static BorderType DiagonalDown;
    public static BorderType DiagonalUp;
    public static BorderType LeftBorder;
    public static BorderType RightBorder;
    public static BorderType TopBorder;
    public static BorderType Horizontal;
    public static BorderType Vertical;
}
public enum Aspose.Cells.BuiltinStyleType : Enum {
    public int value__;
    public static BuiltinStyleType TwentyPercentAccent1;
    public static BuiltinStyleType TwentyPercentAccent2;
    public static BuiltinStyleType TwentyPercentAccent3;
    public static BuiltinStyleType TwentyPercentAccent4;
    public static BuiltinStyleType TwentyPercentAccent5;
    public static BuiltinStyleType TwentyPercentAccent6;
    public static BuiltinStyleType FortyPercentAccent1;
    public static BuiltinStyleType FortyPercentAccent2;
    public static BuiltinStyleType FortyPercentAccent3;
    public static BuiltinStyleType FortyPercentAccent4;
    public static BuiltinStyleType FortyPercentAccent5;
    public static BuiltinStyleType FortyPercentAccent6;
    public static BuiltinStyleType SixtyPercentAccent1;
    public static BuiltinStyleType SixtyPercentAccent2;
    public static BuiltinStyleType SixtyPercentAccent3;
    public static BuiltinStyleType SixtyPercentAccent4;
    public static BuiltinStyleType SixtyPercentAccent5;
    public static BuiltinStyleType SixtyPercentAccent6;
    public static BuiltinStyleType Accent1;
    public static BuiltinStyleType Accent2;
    public static BuiltinStyleType Accent3;
    public static BuiltinStyleType Accent4;
    public static BuiltinStyleType Accent5;
    public static BuiltinStyleType Accent6;
    public static BuiltinStyleType Bad;
    public static BuiltinStyleType Calculation;
    public static BuiltinStyleType CheckCell;
    public static BuiltinStyleType Comma;
    public static BuiltinStyleType Comma1;
    public static BuiltinStyleType Currency;
    public static BuiltinStyleType Currency1;
    public static BuiltinStyleType ExplanatoryText;
    public static BuiltinStyleType Good;
    public static BuiltinStyleType Header1;
    public static BuiltinStyleType Header2;
    public static BuiltinStyleType Header3;
    public static BuiltinStyleType Header4;
    public static BuiltinStyleType Hyperlink;
    public static BuiltinStyleType FollowedHyperlink;
    public static BuiltinStyleType Input;
    public static BuiltinStyleType LinkedCell;
    public static BuiltinStyleType Neutral;
    public static BuiltinStyleType Normal;
    public static BuiltinStyleType Note;
    public static BuiltinStyleType Output;
    public static BuiltinStyleType Percent;
    public static BuiltinStyleType Title;
    public static BuiltinStyleType Total;
    public static BuiltinStyleType WarningText;
    public static BuiltinStyleType RowLevel;
    public static BuiltinStyleType ColumnLevel;
}
public enum Aspose.Cells.CalcModeType : Enum {
    public int value__;
    public static CalcModeType Automatic;
    public static CalcModeType AutomaticExceptTable;
    public static CalcModeType Manual;
}
public class Aspose.Cells.CalculationCell : object {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    public Workbook Workbook { get; }
    public Worksheet Worksheet { get; }
    public int CellRow { get; }
    public int CellColumn { get; }
    public Cell Cell { get; }
    internal CalculationCell( , int , int );
    public void SetCalculatedValue(object v);
    internal object ();
    public Workbook get_Workbook();
    public Worksheet get_Worksheet();
    public int get_CellRow();
    public int get_CellColumn();
    public Cell get_Cell();
}
public class Aspose.Cells.CalculationData : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private [] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public object CalculatedValue { get; public set; }
    public Workbook Workbook { get; }
    public Worksheet Worksheet { get; }
    public int CellRow { get; }
    public int CellColumn { get; }
    public Cell Cell { get; }
    public string FunctionName { get; }
    public int ParamCount { get; }
    internal CalculationData( ,  );
    public object get_CalculatedValue();
    public void set_CalculatedValue(object value);
    public Workbook get_Workbook();
    public Worksheet get_Worksheet();
    public int get_CellRow();
    public int get_CellColumn();
    public Cell get_Cell();
    internal  ();
    public string get_FunctionName();
    public int get_ParamCount();
    public object GetParamValue(int index);
    public Object[][] GetParamValueInArrayMode(int index, int maxRowCount, int maxColumnCount);
    public string GetParamText(int index);
}
public class Aspose.Cells.CalculationOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal AbstractCalculationEngine ;
    [DebuggerBrowsableAttribute("0")]
internal AbstractCalculationMonitor ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal CalculationPrecisionStrategy ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Workbook[] ;
    [DebuggerBrowsableAttribute("0")]
internal Encoding ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public bool IgnoreError { get; public set; }
    public bool Recursive { get; public set; }
    public AbstractCalculationEngine CustomEngine { get; public set; }
    public AbstractCalculationMonitor CalculationMonitor { get; public set; }
    public int CalcStackSize { get; public set; }
    public CalculationPrecisionStrategy PrecisionStrategy { get; public set; }
    public Workbook[] LinkedDataSources { get; public set; }
    public Encoding CharacterEncoding { get; public set; }
    public bool get_IgnoreError();
    public void set_IgnoreError(bool value);
    public bool get_Recursive();
    public void set_Recursive(bool value);
    public AbstractCalculationEngine get_CustomEngine();
    public void set_CustomEngine(AbstractCalculationEngine value);
    internal bool ();
    public AbstractCalculationMonitor get_CalculationMonitor();
    public void set_CalculationMonitor(AbstractCalculationMonitor value);
    public int get_CalcStackSize();
    public void set_CalcStackSize(int value);
    public CalculationPrecisionStrategy get_PrecisionStrategy();
    public void set_PrecisionStrategy(CalculationPrecisionStrategy value);
    public Workbook[] get_LinkedDataSources();
    public void set_LinkedDataSources(Workbook[] value);
    public Encoding get_CharacterEncoding();
    public void set_CharacterEncoding(Encoding value);
    internal  ();
    internal void ( );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal bool (CalculationOptions );
}
public enum Aspose.Cells.CalculationPrecisionStrategy : Enum {
    public int value__;
    public static CalculationPrecisionStrategy None;
    public static CalculationPrecisionStrategy Round;
    public static CalculationPrecisionStrategy Decimal;
}
public class Aspose.Cells.Cell : object {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal Row ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Cells ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public Worksheet Worksheet { get; }
    public DateTime DateTimeValue { get; }
    public int Row { get; }
    public int Column { get; }
    public bool IsFormula { get; }
    public CellValueType Type { get; }
    public string Name { get; }
    public bool IsErrorValue { get; }
    public bool IsNumericValue { get; }
    public string StringValue { get; }
    [ObsoleteAttribute("Use GetStringValue(CellValueFormatStrategy) with CellValueFormatStrategy.None instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public string StringValueWithoutFormat { get; }
    public NumberCategoryType NumberCategoryType { get; }
    public string DisplayStringValue { get; }
    public int IntValue { get; }
    public double DoubleValue { get; }
    public float FloatValue { get; }
    public bool BoolValue { get; }
    public bool HasCustomStyle { get; }
    public int SharedStyleIndex { get; }
    public string Formula { get; public set; }
    public string FormulaLocal { get; public set; }
    public string R1C1Formula { get; public set; }
    public bool ContainsExternalLink { get; }
    public bool IsArrayHeader { get; }
    public bool IsDynamicArrayFormula { get; }
    public bool IsArrayFormula { get; }
    [ObsoleteAttribute("Use IsArrayFormula instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsInArray { get; }
    public bool IsSharedFormula { get; }
    public bool IsTableFormula { get; }
    [ObsoleteAttribute("Use IsTableFormula instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsInTable { get; }
    public object Value { get; public set; }
    public bool IsStyleSet { get; }
    public bool IsMerged { get; }
    public Comment Comment { get; }
    public string HtmlString { get; public set; }
    public bool IsCheckBoxStyle { get; public set; }
    public Byte[] EmbeddedImage { get; public set; }
    internal Cell(Row , int );
    internal Cell(Row , int ,  , bool );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk();
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk();
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk();
    internal void ();
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(string ,  );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(string );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk( , object , bool );
    private bool ( , object );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk( , int , bool );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(int );
    internal bool ();
    internal void (bool );
    public void Calculate(CalculationOptions options);
    public Worksheet get_Worksheet();
    private void ();
    public void PutValue(bool boolValue);
    public void PutValue(int intValue);
    public void PutValue(double doubleValue);
    private void (double );
    internal bool ();
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk();
    public void PutValue(string stringValue, bool isConverted, bool setStyle);
    public void PutValue(string stringValue, bool isConverted);
    public void PutValue(string stringValue);
    private bool (string ,  );
    public void PutValue(DateTime dateTime);
    public void PutValue(DateOnly dateOnly);
    public void PutValue(TimeOnly timeOnly);
    private string (DateTime );
    public DateTime get_DateTimeValue();
    public void PutValue(object objectValue);
    public int get_Row();
    public int get_Column();
    internal void (Cell , CopyOptions );
    internal void (Cell , int , CopyOptions );
    public bool get_IsFormula();
    internal bool ();
    internal  ();
    internal CellValue ();
    internal void (CellValue );
    public CellValueType get_Type();
    private CellValueType ( , object );
    public string get_Name();
    internal string ();
    public bool get_IsErrorValue();
    public bool get_IsNumericValue();
    public string GetStringValue(CellValueFormatStrategy formatStrategy);
    public string get_StringValue();
    public string get_StringValueWithoutFormat();
    internal string ();
    public NumberCategoryType get_NumberCategoryType();
    internal  ();
    internal  ( );
    private bool ( );
    private bool ( ,  );
    internal object ();
    internal CellValueType ();
    private string ();
    public string get_DisplayStringValue();
    internal  ();
    internal string (int , bool );
    public int get_IntValue();
    public double get_DoubleValue();
    public float get_FloatValue();
    public bool get_BoolValue();
    public int GetWidthOfValue();
    public int GetHeightOfValue();
    internal Size ();
    internal Size (int , int , Style );
    internal  ();
    public Style GetDisplayStyle();
    []
public Style GetDisplayStyle(bool includeMergedBorders);
    []
internal Style (bool , StyleModifyFlag , int );
    public FormatConditionCollection[] GetFormatConditions();
    internal Style ();
    public Style GetStyle();
    public Style GetStyle(bool checkBorders);
    internal virtual Style 9h4n36pgcfc9mdlssrj284d6hvs88tkk(bool );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(Style , bool );
    public void SetStyle(Style style);
    internal void (Style );
    internal void (Style , CopyOptions );
    public void SetStyle(Style style, bool explicitFlag);
    public void SetStyle(Style style, StyleFlag flag);
    internal Style ();
    internal Style (Style );
    public bool get_HasCustomStyle();
    public int get_SharedStyleIndex();
    internal int ();
    internal int ();
    internal void (int );
    public string get_Formula();
    public void set_Formula(string value);
    public string get_FormulaLocal();
    public void set_FormulaLocal(string value);
    public string get_R1C1Formula();
    public void set_R1C1Formula(string value);
    internal string ();
    public void SetFormula(string formula, object value);
    public string GetFormula(bool isR1C1, bool isLocal);
    [ObsoleteAttribute("Use FormulaParseOptions for more options instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetFormula(string formula, bool isR1C1, bool isLocal, object value);
    public void SetFormula(string formula, FormulaParseOptions options, object value);
    private void ();
    private void ( );
    [ObsoleteAttribute("Use FormulaParseOptions for more options instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetArrayFormula(string arrayFormula, int rowNumber, int columnNumber, bool isR1C1, bool isLocal);
    public void SetArrayFormula(string arrayFormula, int rowNumber, int columnNumber);
    public void SetArrayFormula(string arrayFormula, int rowNumber, int columnNumber, FormulaParseOptions options);
    public void SetArrayFormula(string arrayFormula, int rowNumber, int columnNumber, FormulaParseOptions options, Object[][] values);
    [ObsoleteAttribute("Use FormulaParseOptions for more options instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetSharedFormula(string sharedFormula, int rowNumber, int columnNumber, bool isR1C1, bool isLocal);
    public void SetSharedFormula(string sharedFormula, int rowNumber, int columnNumber);
    public void SetSharedFormula(string sharedFormula, int rowNumber, int columnNumber, FormulaParseOptions options);
    public void SetSharedFormula(string sharedFormula, int rowNumber, int columnNumber, FormulaParseOptions options, Object[][] values);
    private void (string , int , int , CellArea , FormulaParseOptions , Object[][] );
    private void (Byte[] , CellArea , int ,  , Object[][] , int );
    private void (Byte[] , CellArea ,  , object );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk(int , int );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk();
    internal void (Byte[] , bool , bool , object );
    internal void (Byte[] , CellArea ,  , Object[][] , int , int );
    internal void (CellArea , Object[][] , int , int );
    public bool get_ContainsExternalLink();
    public ReferredAreaCollection GetPrecedents();
    public Cell[] GetDependents(bool isAll);
    [("ReferredArea")]
public IEnumerator GetPrecedentsInCalculation();
    [("Cell")]
public IEnumerator GetDependentsInCalculation(bool recursive);
    [ObsoleteAttribute("Use GetDependentsInCalculation(bool) instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public IEnumerator GetLeafs();
    [ObsoleteAttribute("Use GetDependentsInCalculation(bool) instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public IEnumerator GetLeafs(bool recursive);
    internal Byte[] ();
    internal void (Byte[] , object , bool );
    public bool get_IsArrayHeader();
    public bool get_IsDynamicArrayFormula();
    public CellArea GetArrayRange();
    internal bool ();
    public bool get_IsArrayFormula();
    public bool get_IsInArray();
    internal bool ();
    public bool get_IsSharedFormula();
    internal bool ();
    public bool get_IsTableFormula();
    public bool get_IsInTable();
    internal bool ();
    public CellArea SetDynamicArrayFormula(string arrayFormula, FormulaParseOptions options, bool calculateValue);
    public CellArea SetDynamicArrayFormula(string arrayFormula, FormulaParseOptions options, Object[][] values, bool calculateRange, bool calculateValue);
    public CellArea SetDynamicArrayFormula(string arrayFormula, FormulaParseOptions options, Object[][] values, bool calculateRange, bool calculateValue, CalculationOptions copts);
    public void SetTableFormula(int rowNumber, int columnNumber, string rowInputCell, string columnInputCell, Object[][] values);
    public void SetTableFormula(int rowNumber, int columnNumber, string inputCell, bool isRowInput, Object[][] values);
    public void SetTableFormula(int rowNumber, int columnNumber, int rowIndexOfRowInputCell, int columnIndexOfRowInputCell, int rowIndexOfColumnInputCell, int columnIndexOfColumnInputCell, Object[][] values);
    public void SetTableFormula(int rowNumber, int columnNumber, int rowIndexOfInputCell, int columnIndexOfInputCell, bool isRowInput, Object[][] values);
    private CellArea (int , int );
    private void ( , Object[][] );
    internal void ();
    internal void ();
    public void RemoveArrayFormula(bool leaveNormalFormula);
    internal void (Cell , PasteType , CopyOptions );
    public void Copy(Cell cell);
    private void (Cell , CopyOptions );
    internal void (Cell , CopyOptions );
    private void (Cell , CopyOptions );
    internal void (Cell , CopyOptions );
    internal void (Cell , CopyOptions );
    internal void (Cell , CopyOptions );
    internal void (Cell , CopyOptions );
    internal  ();
    internal byte ();
    internal void (byte );
    internal virtual void 9h4n36pgcfc9mdlssrj284d6hvs88tkk( );
    internal void ( , object );
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsStyleSet();
    internal bool ();
    internal void (string , ArrayList );
    public FontSetting Characters(int startIndex, int length);
    public void Replace(string placeHolder, string newValue, ReplaceOptions options);
    public void InsertText(int index, string text);
    public bool IsRichText();
    internal bool ();
    public FontSetting[] GetCharacters();
    public FontSetting[] GetCharacters(bool flag);
    public void SetCharacters(FontSetting[] characters);
    internal ArrayList ();
    internal ArrayList ( , Style );
    public bool get_IsMerged();
    public Range GetMergedRange();
    public Comment get_Comment();
    public string get_HtmlString();
    public void set_HtmlString(string value);
    internal Hyperlink ();
    public string GetHtmlString(bool html5);
    public virtual string ToString();
    public string ToJson();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(Cell cell);
    public ConditionalFormattingResult GetConditionalFormattingResult();
    public Validation GetValidation();
    public bool GetValidationValue();
    public ListObject GetTable();
    public bool get_IsCheckBoxStyle();
    public void set_IsCheckBoxStyle(bool value);
    public Byte[] get_EmbeddedImage();
    public void set_EmbeddedImage(Byte[] value);
    internal int ();
    internal static int (Cells ,  , int );
    internal static int (Cells , int ,  );
    internal static Style (Cells ,  , int );
    internal static Style (Cells ,  , int );
    internal static Style (Cells ,  ,  );
    internal static Style (Cells ,  , int , int );
    internal static Style (Cells , int ,  );
    internal static int (Cells , int , int );
    internal static Style (Cells , Row ,  , int , bool );
    internal static bool ( , int );
    internal static string (Cells ,  ,  );
    internal static string (Cells , Style ,  );
    private static string ( );
    internal static string (Cells ,  ,  , int , bool );
    internal static string ( , int , bool );
    internal static  ( ,  , Style , Cells );
    internal static string ( ,  , Style , Cells , bool );
    internal static string ( ,  , Style , bool );
    internal static void ( );
    internal static void ( );
    internal static void ( , StyleModifyFlag , int );
    internal static void (Cells , int ,  , Byte[] );
    internal static  (Cells ,  , int ,  , Byte[] );
    internal static bool ( , int ,  );
    internal static long (int , int , int );
    internal static int (long );
    internal static int (long );
    internal static int (long );
    internal static long (int , int , int );
    internal static long (int , int );
    internal static long (long );
    internal static long (long , int );
    internal static long (long , int );
    internal static long (long , int );
    internal static int (long );
    internal static int (long );
    internal static int (long );
}
public class Aspose.Cells.CellArea : ValueType {
    [DebuggerBrowsableAttribute("0")]
internal static CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal static CellArea ;
    public int StartRow;
    public int EndRow;
    public int StartColumn;
    public int EndColumn;
    private static CellArea();
    public sealed virtual int CompareTo(object obj);
    public virtual string ToString();
    internal bool (CellArea );
    internal string ();
    internal  (CellArea );
    internal CellArea (CellArea );
    internal bool (int , ArrayList );
    internal void (int , ArrayList , int );
    internal void (int , ArrayList , int );
    internal void (ArrayList , int );
    internal void (ArrayList , int );
    internal void (ArrayList );
    internal void (int , int );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool (int );
    internal bool (int );
    internal bool (int , int );
    internal bool (CellArea );
    internal bool (CellArea );
    internal int (CellArea );
    internal int ();
    internal int ();
    internal int ();
    internal long ();
    internal string ();
    internal string (int , int , bool );
    internal bool (int );
    internal bool (int );
    internal static CellArea (CellArea );
    public static CellArea CreateCellArea(int startRow, int startColumn, int endRow, int endColumn);
    internal static CellArea (int , int );
    internal static CellArea (string );
    public static CellArea CreateCellArea(string startCellName, string endCellName);
    internal static object (string , bool );
    internal static object (Char[] , int , int , bool );
    internal bool (int , int );
}
public enum Aspose.Cells.CellBorderType : Enum {
    public int value__;
    public static CellBorderType DashDot;
    public static CellBorderType DashDotDot;
    public static CellBorderType Dashed;
    public static CellBorderType Dotted;
    public static CellBorderType Double;
    public static CellBorderType Hair;
    public static CellBorderType MediumDashDot;
    public static CellBorderType MediumDashDotDot;
    public static CellBorderType MediumDashed;
    public static CellBorderType None;
    public static CellBorderType Medium;
    public static CellBorderType SlantedDashDot;
    public static CellBorderType Thick;
    public static CellBorderType Thin;
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Cells : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal OdsCellFieldCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private HorizontalPageBreakCollection ;
    [DebuggerBrowsableAttribute("0")]
private VerticalPageBreakCollection ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private RowCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
private PageSetup ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
private ColumnCollection ;
    [DebuggerBrowsableAttribute("0")]
private RangeCollection ;
    public OdsCellFieldCollection OdsCellFields { get; }
    public int Count { get; }
    public long CountLarge { get; }
    public RowCollection Rows { get; }
    [ObsoleteAttribute("Use Cells.GetMergedAreas() instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public ArrayList MergedCells { get; }
    public Cell Item { get; }
    public Cell Item { get; }
    public bool MultiThreadReading { get; public set; }
    public MemorySetting MemorySetting { get; public set; }
    public Style Style { get; public set; }
    public double StandardWidthInch { get; public set; }
    public int StandardWidthPixels { get; public set; }
    public double StandardWidth { get; public set; }
    public double StandardHeight { get; public set; }
    public int StandardHeightPixels { get; public set; }
    public double StandardHeightInch { get; public set; }
    public bool PreserveString { get; public set; }
    public int MinRow { get; }
    public int MaxRow { get; }
    public int MinColumn { get; }
    public int MaxColumn { get; }
    public int MinDataRow { get; }
    public int MaxDataRow { get; }
    public int MinDataColumn { get; }
    public int MaxDataColumn { get; }
    public bool IsDefaultRowHeightMatched { get; public set; }
    public bool IsDefaultRowHidden { get; public set; }
    public ColumnCollection Columns { get; }
    public RangeCollection Ranges { get; }
    public Cell LastCell { get; }
    public Range MaxDisplayRange { get; }
    public Cell FirstCell { get; }
    internal Cells(Worksheet );
    internal void (int );
    internal bool ();
    internal void ();
    public OdsCellFieldCollection get_OdsCellFields();
    public sealed virtual void Dispose();
    public int get_Count();
    public long get_CountLarge();
    [("Cell")]
public sealed virtual IEnumerator GetEnumerator();
    [("Cell")]
private IEnumerator (bool );
    [ObsoleteAttribute("Use RowCollection.GetEnumerator() method, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public IEnumerator GetRowEnumerator();
    internal int ();
    internal void (int );
    internal byte ();
    internal void (byte );
    internal HorizontalPageBreakCollection ();
    internal VerticalPageBreakCollection ();
    internal void ( );
    internal  ();
    internal  ();
    internal void (int , int , int );
    internal void ();
    internal void (int , int );
    internal  (int , int , int , int );
    private  (MemorySetting , int , int , int , int );
    public RowCollection get_Rows();
    private void ();
    internal PageSetup ();
    public ArrayList get_MergedCells();
    public CellArea[] GetMergedAreas();
    internal void ();
    internal bool (AccessCacheOptions );
    internal void (AccessCacheOptions );
    internal void ();
    internal void ();
    [ObsoleteAttribute("Use Cells.CheckCell(int row, int column) instead.")]
public Cell GetCell(int row, int column);
    [ObsoleteAttribute("Use Cells.CheckRow(int row) instead.")]
public Row GetRow(int row);
    public Cell CheckCell(int row, int column);
    public Row CheckRow(int row);
    public Column CheckColumn(int columnIndex);
    public bool IsRowHidden(int rowIndex);
    public bool IsColumnHidden(int columnIndex);
    public void AddRange(Range rangeObject);
    public Range CreateRange(string upperLeftCell, string lowerRightCell);
    public Range CreateRange(int firstRow, int firstColumn, int totalRows, int totalColumns);
    public Range CreateRange(string address);
    public Range CreateRange(int firstIndex, int number, bool isVertical);
    public Cell get_Item(int row, int column);
    public Cell get_Item(string cellName);
    public bool get_MultiThreadReading();
    public void set_MultiThreadReading(bool value);
    public MemorySetting get_MemorySetting();
    public void set_MemorySetting(MemorySetting value);
    internal void (int , int );
    internal void ();
    internal void ();
    internal Cell (int , int , bool );
    public void Clear();
    public Style get_Style();
    public void set_Style(Style value);
    public double get_StandardWidthInch();
    public void set_StandardWidthInch(double value);
    public int get_StandardWidthPixels();
    public void set_StandardWidthPixels(int value);
    public double get_StandardWidth();
    public void set_StandardWidth(double value);
    internal int ();
    public double get_StandardHeight();
    public void set_StandardHeight(double value);
    public int get_StandardHeightPixels();
    public void set_StandardHeightPixels(int value);
    public double get_StandardHeightInch();
    public void set_StandardHeightInch(double value);
    []
public DataTable ExportDataTable(int firstRow, int firstColumn, int totalRows, int totalColumns);
    []
public DataTable ExportDataTable(int firstRow, int firstColumn, int totalRows, int totalColumns, bool exportColumnName);
    []
public DataTable ExportDataTableAsString(int firstRow, int firstColumn, int totalRows, int totalColumns);
    []
public DataTable ExportDataTableAsString(int firstRow, int firstColumn, int totalRows, int totalColumns, bool exportColumnName);
    []
public DataTable ExportDataTable(int firstRow, int firstColumn, int totalRows, int totalColumns, ExportTableOptions options);
    []
public List`1<T> ExportList(int firstRow, int firstColumn, int totalRows, int totalColumns, ExportTableOptions options);
    []
public int ImportData(ICellsDataTable table, int firstRow, int firstColumn, ImportTableOptions options);
    []
public int ImportData(DataTable table, int firstRow, int firstColumn, ImportTableOptions options);
    []
public int ImportData(DataView dataView, int firstRow, int firstColumn, ImportTableOptions options);
    []
public int ImportData(IDataReader reader, int firstRow, int firstColumn);
    []
public int ImportData(IDataReader reader, int firstRow, int firstColumn, ImportTableOptions options);
    []
public void ImportDataRow(DataRow dataRow, int row, int firstColumn);
    []
public void ImportTwoDimensionArray(Object[0...,0...] objArray, int firstRow, int firstColumn);
    []
public void ImportTwoDimensionArray(Object[0...,0...] objArray, int firstRow, int firstColumn, bool convertStringToNumber);
    []
public void ImportTwoDimensionArray(Object[0...,0...] objArray, Object[0...,0...] styles, int firstRow, int firstColumn, bool convertStringToNumber);
    []
public void ImportTwoDimensionArray(Object[0...,0...] objArray, Object[0...,0...] styles, int firstRow, int firstColumn, TxtLoadOptions opts);
    []
public void ImportObjectArray(Object[] objArray, int firstRow, int firstColumn, bool isVertical);
    []
public void ImportArrayList(ArrayList arrayList, int firstRow, int firstColumn, bool isVertical);
    public void ImportObjectArray(Object[] objArray, int firstRow, int firstColumn, bool isVertical, int skip);
    []
public void ImportArray(String[0...,0...] stringArray, int firstRow, int firstColumn);
    public void ImportFormulaArray(String[] stringArray, int firstRow, int firstColumn, bool isVertical);
    []
public void ImportArray(String[] stringArray, int firstRow, int firstColumn, bool isVertical);
    []
public void ImportArray(Int32[0...,0...] intArray, int firstRow, int firstColumn);
    []
public void ImportArray(Int32[] intArray, int firstRow, int firstColumn, bool isVertical);
    []
public void ImportArray(Double[0...,0...] doubleArray, int firstRow, int firstColumn);
    []
public void ImportArray(Double[] doubleArray, int firstRow, int firstColumn, bool isVertical);
    public void TextToColumns(int row, int column, int totalRows, TxtLoadOptions options);
    public void ImportCSV(string fileName, string splitter, bool convertNumericData, int firstRow, int firstColumn);
    public void ImportCSV(Stream stream, string splitter, bool convertNumericData, int firstRow, int firstColumn);
    public void ImportCSV(string fileName, TxtLoadOptions options, int firstRow, int firstColumn);
    public void ImportCSV(Stream stream, TxtLoadOptions options, int firstRow, int firstColumn);
    public bool get_PreserveString();
    public void set_PreserveString(bool value);
    public void Merge(int firstRow, int firstColumn, int totalRows, int totalColumns);
    public void Merge(int firstRow, int firstColumn, int totalRows, int totalColumns, bool mergeConflict);
    public void Merge(int firstRow, int firstColumn, int totalRows, int totalColumns, bool checkConflict, bool mergeConflict);
    public void UnMerge(int firstRow, int firstColumn, int totalRows, int totalColumns);
    public void ClearMergedCells();
    public void HideRow(int row);
    public void UnhideRow(int row, double height);
    public void HideRows(int row, int totalRows);
    public void UnhideRows(int row, int totalRows, double height);
    public void SetRowHeightPixel(int row, int pixels);
    public void SetRowHeightInch(int row, double inches);
    public void SetRowHeight(int row, double height);
    public double GetRowHeight(int row, bool isOriginal, CellsUnitType unitType);
    [ObsoleteAttribute("Use Cells.GetRowHeight(int,bool,CellsUnitType) method, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public double GetRowOriginalHeightPoint(int row);
    public double GetColumnWidth(int column, bool isOriginal, CellsUnitType unitType);
    [ObsoleteAttribute("Use Cells.GetColumnWidth(int ,bool , CellsUnitType ) method, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public double GetColumnOriginalWidthPoint(int column);
    public void HideColumn(int column);
    public void UnhideColumn(int column, double width);
    public void HideColumns(int column, int totalColumns);
    public void UnhideColumns(int column, int totalColumns, double width);
    public double GetRowHeight(int row);
    public double GetViewRowHeight(int row);
    public double GetRowHeightInch(int row);
    public double GetViewRowHeightInch(int row);
    internal int (int );
    public int GetRowHeightPixel(int row);
    public void SetColumnWidthPixel(int column, int pixels);
    public void SetColumnWidthInch(int column, double inches);
    public void SetColumnWidth(int column, double width);
    public int GetColumnWidthPixel(int column);
    [ObsoleteAttribute("Use Cells.GetColumnWidth(int ,bool , CellsUnitType ) method, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public int GetColumnWidthPixel(int column, bool original);
    [ObsoleteAttribute("Use Cells.GetColumnWidth(int ,bool , CellsUnitType ) method, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public double GetColumnWidthInch(int column);
    public double GetColumnWidth(int column);
    public int GetViewColumnWidthPixel(int column);
    public void SetViewColumnWidthPixel(int column, int pixels);
    internal WorksheetCollection ();
    public int get_MinRow();
    public int get_MaxRow();
    public int get_MinColumn();
    public int get_MaxColumn();
    public int get_MinDataRow();
    public int get_MaxDataRow();
    public int get_MinDataColumn();
    public int get_MaxDataColumn();
    public int GetLastDataRow(int column);
    internal int (int );
    internal void ();
    internal void (short );
    internal int (short );
    public bool get_IsDefaultRowHeightMatched();
    public void set_IsDefaultRowHeightMatched(bool value);
    public bool get_IsDefaultRowHidden();
    public void set_IsDefaultRowHidden(bool value);
    public ColumnCollection get_Columns();
    internal byte ();
    internal void (byte );
    internal byte ();
    internal void (byte );
    public void ApplyColumnStyle(int column, Style style, StyleFlag flag);
    public void ApplyRowStyle(int row, Style style, StyleFlag flag);
    public void ApplyStyle(Style style, StyleFlag flag);
    public void CopyColumns(Cells sourceCells0, int sourceColumnIndex, int destinationColumnIndex, int columnNumber, PasteOptions pasteOptions);
    public void CopyColumn(Cells sourceCells, int sourceColumnIndex, int destinationColumnIndex);
    public void CopyColumns(Cells sourceCells0, int sourceColumnIndex, int destinationColumnIndex, int columnNumber);
    public void CopyColumns(Cells sourceCells, int sourceColumnIndex, int sourceTotalColumns, int destinationColumnIndex, int destinationTotalColumns);
    public void CopyRow(Cells sourceCells, int sourceRowIndex, int destinationRowIndex);
    public void CopyRows(Cells sourceCells, int sourceRowIndex, int destinationRowIndex, int rowNumber);
    public void CopyRows(Cells sourceCells0, int sourceRowIndex, int destinationRowIndex, int rowNumber, CopyOptions copyOptions);
    public void CopyRows(Cells sourceCells0, int sourceRowIndex, int destinationRowIndex, int rowNumber, CopyOptions copyOptions, PasteOptions pasteOptions);
    internal void (Cells , CopyOptions );
    public int GetGroupedRowOutlineLevel(int rowIndex);
    public int GetGroupedColumnOutlineLevel(int columnIndex);
    public int GetMaxGroupedColumnOutlineLevel();
    public int GetMaxGroupedRowOutlineLevel();
    public void ShowGroupDetail(bool isVertical, int index);
    public void HideGroupDetail(bool isVertical, int index);
    private void (bool , int , bool );
    public void UngroupColumns(int firstIndex, int lastIndex);
    public void GroupColumns(int firstIndex, int lastIndex);
    public void GroupColumns(int firstIndex, int lastIndex, bool isHidden);
    public void UngroupRows(int firstIndex, int lastIndex, bool isAll);
    public void UngroupRows(int firstIndex, int lastIndex);
    public void GroupRows(int firstIndex, int lastIndex, bool isHidden);
    public void GroupRows(int firstIndex, int lastIndex);
    public void DeleteColumn(int columnIndex, bool updateReference);
    public void DeleteColumn(int columnIndex);
    public void DeleteColumns(int columnIndex, int totalColumns, bool updateReference);
    public bool IsDeletingRangeEnabled(int startRow, int startColumn, int totalRows, int totalColumns);
    public void DeleteRow(int rowIndex);
    public bool DeleteRows(int rowIndex, int totalRows);
    public void DeleteRow(int rowIndex, bool updateReference);
    public bool DeleteRows(int rowIndex, int totalRows, bool updateReference);
    internal bool (int , int , DeleteOptions );
    internal bool (CellArea , CellArea , DeleteOptions );
    public void DeleteBlankColumns();
    public void DeleteBlankColumns(DeleteOptions options);
    public bool IsBlankColumn(int columnIndex);
    public void DeleteBlankRows();
    public void DeleteBlankRows(DeleteOptions options);
    public void InsertColumns(int columnIndex, int totalColumns);
    private void (int , int , InsertOptions );
    internal void (CellArea , int , InsertOptions );
    public void InsertColumns(int columnIndex, int totalColumns, bool updateReference);
    public void InsertColumn(int columnIndex, bool updateReference);
    public void InsertColumn(int columnIndex);
    public void InsertRows(int rowIndex, int totalRows, bool updateReference);
    public void InsertRows(int rowIndex, int totalRows, InsertOptions options);
    public void InsertRows(int rowIndex, int totalRows);
    internal void (CellArea , int );
    internal void (CellArea , int );
    internal void (int , int , InsertOptions );
    internal void (CellArea , int , InsertOptions );
    public void InsertRow(int rowIndex);
    internal void (int , int , CellArea , bool , bool , bool );
    internal void (CellArea , CellArea , bool , bool );
    internal void ( , CellArea[] , CellArea , bool , bool );
    private void ( ,  );
    private void (int , int );
    private void (int , int , int , int );
    public RangeCollection get_Ranges();
    public void ClearRange(CellArea range);
    public void ClearRange(int startRow, int startColumn, int endRow, int endColumn);
    internal void (int , int , int , int );
    public void ClearContents(CellArea range);
    public void ClearContents(int startRow, int startColumn, int endRow, int endColumn);
    public void ClearFormats(CellArea range);
    public void ClearFormats(int startRow, int startColumn, int endRow, int endColumn);
    internal void (int , int , int , int );
    public Cell get_LastCell();
    public void LinkToXmlMap(string mapName, int row, int column, string path);
    public Range get_MaxDisplayRange();
    internal Range ();
    public Cell get_FirstCell();
    []
public int ImportDataView(DataView dataView, int firstRow, int firstColumn);
    internal void (int , int , bool );
    internal void (int , int , bool , bool );
    internal Cell (CellArea ,  , bool , bool );
    internal Cell (CellArea , int , int ,  , bool , bool );
    internal Cell (int , int ,  , bool , bool );
    internal Cell (CellArea , int , int ,  , bool , bool );
    internal Cell (int , int ,  , bool , bool );
    private CellArea ();
    private int ( ,  ,  , bool );
    private Cell (Cell ,  , bool );
    private Cell (CellArea , Cell ,  , bool );
    private Cell (Cell ,  , bool );
    private Cell (CellArea , Cell ,  , bool );
    public Cell Find(object what, Cell previousCell);
    public Cell Find(object what, Cell previousCell, FindOptions findOptions);
    public Cell EndCellInRow(int rowIndex);
    public Cell EndCellInColumn(short columnIndex);
    public Cell EndCellInColumn(int startRow, int endRow, short startColumn, short endColumn);
    private Cell ( , int );
    public Cell EndCellInRow(int startRow, int endRow, int startColumn, int endColumn);
    public void MoveRange(CellArea sourceArea, int destRow, int destColumn);
    public void InsertCutCells(Range cutRange, int row, int column, ShiftType shiftType);
    private void (CellArea , int , bool );
    internal void (CellArea , CellArea , int , bool );
    private void (CellArea , int , bool );
    internal void (CellArea , CellArea , int , bool );
    public void InsertRange(CellArea area, int shiftNumber, ShiftType shiftType, bool updateReference);
    public void InsertRange(CellArea area, ShiftType shiftType);
    public void InsertRange(CellArea area, int shiftNumber, ShiftType shiftType);
    public void DeleteRange(int startRow, int startColumn, int endRow, int endColumn, ShiftType shiftType);
    internal void (CellArea , CellArea );
    internal void (CellArea , CellArea );
    public Object[0...,0...] ExportArray(int firstRow, int firstColumn, int totalRows, int totalColumns);
    []
public CellValueType[0...,0...] ExportTypeArray(int firstRow, int firstColumn, int totalRows, int totalColumns);
    []
public int ImportCustomObjects(ICollection list, String[] propertyNames, bool isPropertyNameShown, int firstRow, int firstColumn, int rowNumber, bool insertRows, string dateFormatString, bool convertStringToNumber);
    []
public int ImportCustomObjects(ICollection list, int firstRow, int firstColumn, ImportTableOptions options);
    public SubtotalSetting RetrieveSubtotalSetting(CellArea ca);
    public void Subtotal(CellArea ca, int groupBy, ConsolidationFunction function, Int32[] totalList);
    public void Subtotal(CellArea ca, int groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    internal void (int , int );
    public void RemoveFormulas();
    public void RemoveDuplicates();
    public void RemoveDuplicates(int startRow, int startColumn, int endRow, int endColumn);
    public void RemoveDuplicates(int startRow, int startColumn, int endRow, int endColumn, bool hasHeaders, Int32[] columnOffsets);
    private void (int , int , int ,  );
    public void ConvertStringToNumericValue();
    public Cell[] GetDependents(bool isAll, int row, int column);
    [("Cell")]
public IEnumerator GetDependentsInCalculation(int row, int column, bool recursive);
    [("Cell")]
public IEnumerator GetCellsWithPlaceInCellPicture();
    internal Style (Style , int , int , int , int , bool ,  );
    internal Style (Style ,  , int , int , int , int , bool , bool );
    public Style GetCellStyle(int row, int column);
    internal Style (int , int , bool );
    internal Style (Row , int , int , bool );
    internal int (int , int );
    internal int (int );
    internal int (int , int , int );
    internal ArrayList ();
}
public class Aspose.Cells.CellsColor : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public bool IsShapeColor { get; public set; }
    public ColorType Type { get; }
    public ThemeColor ThemeColor { get; public set; }
    public int ColorIndex { get; public set; }
    public Color Color { get; public set; }
    public int Argb { get; public set; }
    public double Transparency { get; public set; }
    internal CellsColor(Workbook );
    internal CellsColor(Workbook ,  );
    public bool get_IsShapeColor();
    public void set_IsShapeColor(bool value);
    public ColorType get_Type();
    internal bool ();
    public ThemeColor get_ThemeColor();
    public void set_ThemeColor(ThemeColor value);
    public int get_ColorIndex();
    public void set_ColorIndex(int value);
    internal int ();
    internal void (int );
    public Color get_Color();
    public void set_Color(Color value);
    public int get_Argb();
    public void set_Argb(int value);
    internal void (CellsColor , CopyOptions );
    internal int ();
    internal void (int );
    public double get_Transparency();
    public void set_Transparency(double value);
    public void SetTintOfShapeColor(double tint);
    internal void (double );
}
public class Aspose.Cells.CellsDataTableFactory : object {
    public ICellsDataTable GetInstance(Int32[] vals, String[] columnNames);
    public ICellsDataTable GetInstance(Int32[] vals, bool vertial);
    public ICellsDataTable GetInstance(Double[] vals, String[] columnNames);
    public ICellsDataTable GetInstance(Double[] vals, bool vertial);
    public ICellsDataTable GetInstance(Object[] vals, String[] columnNames);
    public ICellsDataTable GetInstance(Object[] vals, bool vertial);
    public ICellsDataTable GetInstance(Int32[0...,0...] vals);
    public ICellsDataTable GetInstance(Double[0...,0...] vals);
    public ICellsDataTable GetInstance(Object[0...,0...] vals);
    public ICellsDataTable GetInstance(ICollection collection);
}
public class Aspose.Cells.CellsException : ApplicationException {
    [DebuggerBrowsableAttribute("0")]
private ExceptionType ;
    public ExceptionType Code { get; }
    internal CellsException(ExceptionType , string );
    internal CellsException(ExceptionType , string , Exception );
    protected CellsException(SerializationInfo info, StreamingContext context);
    internal virtual void t8hgbpmb4b7q7csuayfxda9sdhsmv9am(SerializationInfo , StreamingContext );
    public ExceptionType get_Code();
}
public class Aspose.Cells.CellsFactory : object {
    public Style CreateStyle();
}
public class Aspose.Cells.CellsHelper : object {
    [DebuggerBrowsableAttribute("0")]
internal static Random ;
    [DebuggerBrowsableAttribute("0")]
private static int ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
internal static bool ;
    public static int SignificantDigits { get; public set; }
    public static double DPI { get; public set; }
    public static string StartupPath { get; public set; }
    public static string AltStartPath { get; public set; }
    public static string LibraryPath { get; public set; }
    public static CustomImplementationFactory CustomImplementationFactory { get; public set; }
    public static bool IsCloudPlatform { get; public set; }
    private static CellsHelper();
    public static int get_SignificantDigits();
    public static void set_SignificantDigits(int value);
    public static double get_DPI();
    public static void set_DPI(double value);
    public static double GetTextWidth(string text, Font font, double scaling);
    internal static SizeF (string , Font , double );
    public static string GetVersion();
    public static void CellNameToIndex(string cellName, Int32& row, Int32& column);
    internal static Int32[] (Char[] , int , int , bool , int , int );
    public static string CellIndexToName(int row, int column);
    internal static string (int , int , bool , bool );
    internal static string (StringBuilder , int , int , bool , bool );
    internal static void (StringBuilder , int , int );
    public static string ColumnIndexToName(int column);
    internal static void (StringBuilder , int );
    public static int ColumnNameToIndex(string columnName);
    internal static int (string , bool );
    public static string RowIndexToName(int row);
    public static int RowNameToIndex(string rowName);
    [ObsoleteAttribute("Use Worksheet.ConvertFormulaReferenceStyle() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public static string ConvertR1C1FormulaToA1(string r1c1Formula, int row, int column);
    [ObsoleteAttribute("Use Worksheet.ConvertFormulaReferenceStyle() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public static string ConvertA1FormulaToR1C1(string formula, int row, int column);
    public static DateTime GetDateTimeFromDouble(double doubleValue, bool date1904);
    public static double GetDoubleFromDateTime(DateTime dateTime, bool date1904);
    public static string get_StartupPath();
    public static void set_StartupPath(string value);
    public static string get_AltStartPath();
    public static void set_AltStartPath(string value);
    public static string get_LibraryPath();
    public static void set_LibraryPath(string value);
    public static Color[] GetUsedColors(Workbook workbook);
    public static CustomImplementationFactory get_CustomImplementationFactory();
    public static void set_CustomImplementationFactory(CustomImplementationFactory value);
    [ObsoleteAttribute("Use WorksheetCollection.RegisterAddInFunction() methods instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public static void AddAddInFunction(string function, int minCountOfParameters, int maxCountOfParameters, ParameterType[] paramersType, ParameterType functionValueType);
    public static void MergeFiles(String[] files, string cachedFile, string destFile);
    internal static string ();
    internal static void (string );
    internal static bool (Image );
    public static string CreateSafeSheetName(string nameProposal);
    public static string CreateSafeSheetName(string nameProposal, char replaceChar);
    internal static bool (char );
    public static bool NeedQuoteInFormula(string sheetName);
    public static void InitForDotNetCore();
    public static bool get_IsCloudPlatform();
    public static void set_IsCloudPlatform(bool value);
}
public enum Aspose.Cells.CellsUnitType : Enum {
    public int value__;
    public static CellsUnitType Pixel;
    public static CellsUnitType Point;
    public static CellsUnitType Inch;
    public static CellsUnitType Cm;
    public static CellsUnitType Character;
}
public class Aspose.Cells.CellValue : object {
    [DebuggerBrowsableAttribute("0")]
internal CellValueType ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    public CellValueType Type { get; public set; }
    public object Value { get; public set; }
    public CellValueType get_Type();
    public void set_Type(CellValueType value);
    public object get_Value();
    public void set_Value(object value);
}
public enum Aspose.Cells.CellValueFormatStrategy : Enum {
    public int value__;
    public static CellValueFormatStrategy None;
    public static CellValueFormatStrategy CellStyle;
    public static CellValueFormatStrategy DisplayStyle;
    public static CellValueFormatStrategy DisplayString;
}
public enum Aspose.Cells.CellValueType : Enum {
    public int value__;
    public static CellValueType IsUnknown;
    public static CellValueType IsNull;
    public static CellValueType IsNumeric;
    public static CellValueType IsDateTime;
    public static CellValueType IsString;
    public static CellValueType IsBool;
    public static CellValueType IsError;
}
public class Aspose.Cells.CellWatch : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public int Row { get; public set; }
    public int Column { get; public set; }
    public string CellName { get; public set; }
    public int get_Row();
    public void set_Row(int value);
    public int get_Column();
    public void set_Column(int value);
    public string get_CellName();
    public void set_CellName(string value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.CellWatchCollection : CollectionBase`1<CellWatch> {
    public CellWatch Item { get; }
    public CellWatch Item { get; }
    public int Add(int row, int column);
    public int Add(string cellName);
    public CellWatch get_Item(int index);
    public CellWatch get_Item(string cellName);
    internal void (CellWatchCollection );
}
public class Aspose.Cells.Charts.Axis : object {
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private AxisType ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Area ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private Line ;
    [DebuggerBrowsableAttribute("0")]
private TickMarkType ;
    [DebuggerBrowsableAttribute("0")]
private TickMarkType ;
    [DebuggerBrowsableAttribute("0")]
private TickLabelPositionType ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private CrossType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal TickLabels ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private DisplayUnitType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private DisplayUnitLabel ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Title ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private CategoryType ;
    [DebuggerBrowsableAttribute("0")]
private TimeUnit ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private TimeUnit ;
    [DebuggerBrowsableAttribute("0")]
private TimeUnit ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private Line ;
    [DebuggerBrowsableAttribute("0")]
private Line ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal ShapePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
internal ShapePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    public Area Area { get; }
    public bool IsAutomaticMinValue { get; public set; }
    public object MinValue { get; public set; }
    public bool IsAutomaticMaxValue { get; public set; }
    public object MaxValue { get; public set; }
    public bool IsAutomaticMajorUnit { get; public set; }
    public double MajorUnit { get; public set; }
    public bool IsAutomaticMinorUnit { get; public set; }
    public double MinorUnit { get; public set; }
    public Line AxisLine { get; }
    public TickMarkType MajorTickMark { get; public set; }
    public TickMarkType MinorTickMark { get; public set; }
    public TickLabelPositionType TickLabelPosition { get; public set; }
    public double CrossAt { get; public set; }
    public CrossType CrossType { get; public set; }
    public double LogBase { get; public set; }
    public bool IsLogarithmic { get; public set; }
    public bool IsPlotOrderReversed { get; public set; }
    public bool AxisBetweenCategories { get; public set; }
    public TickLabels TickLabels { get; }
    public int TickLabelSpacing { get; public set; }
    public bool IsAutoTickLabelSpacing { get; public set; }
    public int TickMarkSpacing { get; public set; }
    public DisplayUnitType DisplayUnit { get; public set; }
    [ObsoleteAttribute("Use Axis.CustomUnit property, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int CustUnit { get; public set; }
    public int CustomUnit { get; public set; }
    public DisplayUnitLabel DisplayUnitLabel { get; }
    public bool IsDisplayUnitLabelShown { get; public set; }
    public Title Title { get; }
    public CategoryType CategoryType { get; public set; }
    public TimeUnit BaseUnitScale { get; public set; }
    public TimeUnit MajorUnitScale { get; public set; }
    public TimeUnit MinorUnitScale { get; public set; }
    public bool IsVisible { get; public set; }
    public Line MajorGridLines { get; }
    public Line MinorGridLines { get; }
    public bool HasMultiLevelLabels { get; public set; }
    [ObsoleteAttribute("Use Axis.GetAxisTexts method, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public ArrayList AxisLabels { get; }
    public AxisBins Bins { get; }
    internal Axis(AxisType , bool , Chart );
    internal Chart ();
    internal AxisType ();
    internal void (AxisType );
    internal  ();
    internal void ( );
    public Area get_Area();
    internal Area ();
    public bool get_IsAutomaticMinValue();
    public void set_IsAutomaticMinValue(bool value);
    public object get_MinValue();
    public void set_MinValue(object value);
    internal void (object );
    internal void (object );
    public bool get_IsAutomaticMaxValue();
    public void set_IsAutomaticMaxValue(bool value);
    internal bool ();
    public object get_MaxValue();
    public void set_MaxValue(object value);
    public bool get_IsAutomaticMajorUnit();
    public void set_IsAutomaticMajorUnit(bool value);
    internal bool ();
    public double get_MajorUnit();
    public void set_MajorUnit(double value);
    internal void (double );
    public bool get_IsAutomaticMinorUnit();
    public void set_IsAutomaticMinorUnit(bool value);
    internal bool ();
    public double get_MinorUnit();
    public void set_MinorUnit(double value);
    internal void (double );
    public Line get_AxisLine();
    internal Line ();
    public TickMarkType get_MajorTickMark();
    public void set_MajorTickMark(TickMarkType value);
    public TickMarkType get_MinorTickMark();
    public void set_MinorTickMark(TickMarkType value);
    public TickLabelPositionType get_TickLabelPosition();
    public void set_TickLabelPosition(TickLabelPositionType value);
    public double get_CrossAt();
    public void set_CrossAt(double value);
    internal void (double );
    public CrossType get_CrossType();
    public void set_CrossType(CrossType value);
    internal bool ();
    public double get_LogBase();
    public void set_LogBase(double value);
    public bool get_IsLogarithmic();
    public void set_IsLogarithmic(bool value);
    public bool get_IsPlotOrderReversed();
    public void set_IsPlotOrderReversed(bool value);
    public bool get_AxisBetweenCategories();
    public void set_AxisBetweenCategories(bool value);
    internal bool ();
    public TickLabels get_TickLabels();
    internal TickLabels ();
    public int get_TickLabelSpacing();
    public void set_TickLabelSpacing(int value);
    internal void (int );
    public bool get_IsAutoTickLabelSpacing();
    public void set_IsAutoTickLabelSpacing(bool value);
    public int get_TickMarkSpacing();
    public void set_TickMarkSpacing(int value);
    public DisplayUnitType get_DisplayUnit();
    public void set_DisplayUnit(DisplayUnitType value);
    public int get_CustUnit();
    public void set_CustUnit(int value);
    public int get_CustomUnit();
    public void set_CustomUnit(int value);
    public DisplayUnitLabel get_DisplayUnitLabel();
    internal DisplayUnitLabel ();
    public bool get_IsDisplayUnitLabelShown();
    public void set_IsDisplayUnitLabelShown(bool value);
    internal void (bool );
    internal Title ();
    public Title get_Title();
    public CategoryType get_CategoryType();
    public void set_CategoryType(CategoryType value);
    internal void (CategoryType );
    public TimeUnit get_BaseUnitScale();
    public void set_BaseUnitScale(TimeUnit value);
    internal void (TimeUnit );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public TimeUnit get_MajorUnitScale();
    public void set_MajorUnitScale(TimeUnit value);
    internal void (TimeUnit );
    public TimeUnit get_MinorUnitScale();
    public void set_MinorUnitScale(TimeUnit value);
    internal void (TimeUnit );
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    internal void (Axis , CopyOptions );
    internal Line ();
    internal void (Line );
    public Line get_MajorGridLines();
    internal Line ();
    internal void (Line );
    public Line get_MinorGridLines();
    internal bool ();
    public bool get_HasMultiLevelLabels();
    public void set_HasMultiLevelLabels(bool value);
    internal ShapePropertyCollection ();
    internal ShapePropertyCollection ();
    internal ShapePropertyCollection ();
    internal ShapePropertyCollection ();
    internal ShapePropertyCollection ();
    public String[] GetAxisTexts();
    public ArrayList get_AxisLabels();
    internal void ( );
    public AxisBins get_Bins();
    internal void ( );
}
public class Aspose.Cells.Charts.AxisBins : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool IsByCategory { get; public set; }
    public bool IsAutomatic { get; public set; }
    public double Width { get; public set; }
    public int Count { get; public set; }
    public double Overflow { get; public set; }
    public double Underflow { get; public set; }
    internal AxisBins(Chart );
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    public bool get_IsByCategory();
    public void set_IsByCategory(bool value);
    public bool get_IsAutomatic();
    public void set_IsAutomatic(bool value);
    public double get_Width();
    public void set_Width(double value);
    public int get_Count();
    public void set_Count(int value);
    public double get_Overflow();
    public void set_Overflow(double value);
    public double get_Underflow();
    public void set_Underflow(double value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    [ObsoleteAttribute("This is an internal method.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public void ResetOverflow();
    [ObsoleteAttribute("This is an internal method.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public void ResetUnderflow();
}
public enum Aspose.Cells.Charts.AxisType : Enum {
    public int value__;
    public static AxisType Category;
    public static AxisType Value;
    public static AxisType Series;
}
public enum Aspose.Cells.Charts.BackgroundMode : Enum {
    public int value__;
    public static BackgroundMode Automatic;
    public static BackgroundMode Opaque;
    public static BackgroundMode Transparent;
}
public enum Aspose.Cells.Charts.Bar3DShapeType : Enum {
    public int value__;
    public static Bar3DShapeType Box;
    public static Bar3DShapeType PyramidToPoint;
    public static Bar3DShapeType PyramidToMax;
    public static Bar3DShapeType Cylinder;
    public static Bar3DShapeType ConeToPoint;
    public static Bar3DShapeType ConeToMax;
}
public enum Aspose.Cells.Charts.BubbleSizeRepresents : Enum {
    public int value__;
    public static BubbleSizeRepresents SizeIsArea;
    public static BubbleSizeRepresents SizeIsWidth;
}
public enum Aspose.Cells.Charts.CategoryType : Enum {
    public int value__;
    public static CategoryType AutomaticScale;
    public static CategoryType CategoryScale;
    public static CategoryType TimeScale;
}
public class Aspose.Cells.Charts.Chart : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private ChartShape ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<Byte[]> ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private PivotOptions ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private PlotEmptyCellsType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
private ShapeCollection ;
    [DebuggerBrowsableAttribute("0")]
private PrintSizeType ;
    [DebuggerBrowsableAttribute("0")]
private ChartType ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private SeriesCollection ;
    [DebuggerBrowsableAttribute("0")]
private SeriesCollection ;
    [DebuggerBrowsableAttribute("0")]
private Title ;
    [DebuggerBrowsableAttribute("0")]
private Title ;
    [DebuggerBrowsableAttribute("0")]
private PlotArea ;
    [DebuggerBrowsableAttribute("0")]
private ChartArea ;
    [DebuggerBrowsableAttribute("0")]
internal Axis ;
    [DebuggerBrowsableAttribute("0")]
internal Axis ;
    [DebuggerBrowsableAttribute("0")]
internal Axis ;
    [DebuggerBrowsableAttribute("0")]
internal Axis ;
    [DebuggerBrowsableAttribute("0")]
private Axis ;
    [DebuggerBrowsableAttribute("0")]
private Legend ;
    [DebuggerBrowsableAttribute("0")]
private ChartDataTable ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Floor ;
    [DebuggerBrowsableAttribute("0")]
private Walls ;
    [DebuggerBrowsableAttribute("0")]
private Walls ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private short ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal PageSetup ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private Line ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    public int Style { get; public set; }
    public ChartShape ChartObject { get; }
    public bool HidePivotFieldButtons { get; public set; }
    public PivotOptions PivotOptions { get; }
    public string PivotSource { get; public set; }
    public PlotDataByType PlotBy { get; }
    public PlotEmptyCellsType PlotEmptyCellsType { get; public set; }
    [ObsoleteAttribute("Use PlotVisibleCellsOnly property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool PlotVisibleCells { get; public set; }
    public bool PlotVisibleCellsOnly { get; public set; }
    public bool DisplayNaAsBlank { get; public set; }
    public string Name { get; public set; }
    public bool SizeWithWindow { get; public set; }
    public Worksheet Worksheet { get; }
    public ShapeCollection Shapes { get; }
    public PrintSizeType PrintSize { get; public set; }
    public ChartType Type { get; public set; }
    public SeriesCollection NSeries { get; }
    public SeriesCollection FilteredNSeries { get; }
    public Title Title { get; }
    public Title SubTitle { get; }
    public PlotArea PlotArea { get; }
    public ChartArea ChartArea { get; }
    public Axis CategoryAxis { get; }
    public Axis ValueAxis { get; }
    public Axis SecondValueAxis { get; }
    public Axis SecondCategoryAxis { get; }
    public Axis SeriesAxis { get; }
    public Legend Legend { get; }
    public ChartDataTable ChartDataTable { get; }
    public bool ShowLegend { get; public set; }
    public bool IsRectangularCornered { get; public set; }
    public bool ShowDataTable { get; public set; }
    public int FirstSliceAngle { get; public set; }
    public int GapWidth { get; public set; }
    public int GapDepth { get; public set; }
    public Floor Floor { get; }
    public Walls Walls { get; }
    public Walls BackWall { get; }
    public Walls SideWall { get; }
    public bool WallsAndGridlines2D { get; public set; }
    public int RotationAngle { get; public set; }
    public int Elevation { get; public set; }
    public bool RightAngleAxes { get; public set; }
    public bool AutoScaling { get; public set; }
    public int HeightPercent { get; public set; }
    public short Perspective { get; public set; }
    public bool Is3D { get; }
    public int DepthPercent { get; public set; }
    [ObsoleteAttribute("Use Chart.GetActualSize() method instead.")]
[]
public Size ActualChartSize { get; }
    public PlacementType Placement { get; public set; }
    public PageSetup PageSetup { get; }
    public Line Line { get; }
    []
internal Chart(Worksheet , ChartType );
    internal Chart(Worksheet );
    internal Chart(Worksheet , ShapeCollection );
    internal int ();
    internal void (int );
    public int get_Style();
    public void set_Style(int value);
    internal void (int );
    public ChartShape get_ChartObject();
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal int ();
    public bool get_HidePivotFieldButtons();
    public void set_HidePivotFieldButtons(bool value);
    public PivotOptions get_PivotOptions();
    public string get_PivotSource();
    public void set_PivotSource(string value);
    internal bool ();
    internal  ();
    internal void ( );
    [ObsoleteAttribute("Use Chart.IsCellReferedByChart(int,int,int) method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsReferedByChart(int rowIndex, int columnIndex);
    public bool IsCellReferedByChart(int sheetIndex, int rowIndex, int columnIndex);
    private bool (Worksheet , int , int ,  );
    public bool IsChartDataChanged();
    internal void ();
    internal void ();
    private void (bool ,  );
    private void ( );
    private void ( );
    public PlotDataByType get_PlotBy();
    private void (StringBuilder , char );
    private bool ();
    public void RefreshPivotData();
    internal void (bool , PivotTable );
    internal byte ();
    internal void (byte );
    public PlotEmptyCellsType get_PlotEmptyCellsType();
    public void set_PlotEmptyCellsType(PlotEmptyCellsType value);
    public bool get_PlotVisibleCells();
    public void set_PlotVisibleCells(bool value);
    public bool get_PlotVisibleCellsOnly();
    public void set_PlotVisibleCellsOnly(bool value);
    public bool get_DisplayNaAsBlank();
    public void set_DisplayNaAsBlank(bool value);
    internal bool ();
    internal void (bool );
    public string get_Name();
    public void set_Name(string value);
    public bool get_SizeWithWindow();
    public void set_SizeWithWindow(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal void ();
    internal void ();
    private void ();
    internal void (string , string );
    internal WorksheetCollection ();
    public Worksheet get_Worksheet();
    internal ChartCollection ();
    public ShapeCollection get_Shapes();
    internal ShapeCollection ();
    internal void (ShapeCollection );
    public PrintSizeType get_PrintSize();
    public void set_PrintSize(PrintSizeType value);
    public void ChangeTemplate(Byte[] data);
    public ChartType get_Type();
    public void set_Type(ChartType value);
    internal  ();
    internal void (ChartType );
    public void Move(int upperLeftRow, int upperLeftColumn, int lowerRightRow, int lowerRightColumn);
    public SeriesCollection get_NSeries();
    internal Series (string );
    public SeriesCollection get_FilteredNSeries();
    public Title get_Title();
    internal Title ();
    public Title get_SubTitle();
    internal Title ();
    public PlotArea get_PlotArea();
    public ChartArea get_ChartArea();
    public Axis get_CategoryAxis();
    public Axis get_ValueAxis();
    public Axis get_SecondValueAxis();
    public Axis get_SecondCategoryAxis();
    public Axis get_SeriesAxis();
    internal Axis ();
    internal void (bool , Axis );
    internal void (bool , Axis , Axis );
    public Legend get_Legend();
    internal Legend ();
    public ChartDataTable get_ChartDataTable();
    internal ChartDataTable ();
    public bool get_ShowLegend();
    public void set_ShowLegend(bool value);
    public bool get_IsRectangularCornered();
    public void set_IsRectangularCornered(bool value);
    public bool get_ShowDataTable();
    public void set_ShowDataTable(bool value);
    public int get_FirstSliceAngle();
    public void set_FirstSliceAngle(int value);
    public int get_GapWidth();
    public void set_GapWidth(int value);
    public int get_GapDepth();
    public void set_GapDepth(int value);
    internal void (bool );
    public void Calculate();
    public void Calculate(ChartCalculateOptions calculateOptions);
    internal void (bool , bool );
    private void (bool , bool , ChartCalculateOptions );
    internal void ();
    internal void (Chart , CopyOptions );
    private static string (string );
    public Floor get_Floor();
    internal Floor ();
    internal Floor ();
    public Walls get_Walls();
    public Walls get_BackWall();
    public Walls get_SideWall();
    internal Walls ();
    internal Walls ();
    internal Walls ();
    internal Walls ();
    internal Walls ();
    internal Walls ();
    public bool get_WallsAndGridlines2D();
    public void set_WallsAndGridlines2D(bool value);
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    public int get_Elevation();
    public void set_Elevation(int value);
    public bool get_RightAngleAxes();
    public void set_RightAngleAxes(bool value);
    public bool get_AutoScaling();
    public void set_AutoScaling(bool value);
    public int get_HeightPercent();
    public void set_HeightPercent(int value);
    public short get_Perspective();
    public void set_Perspective(short value);
    public bool get_Is3D();
    internal bool ();
    public int get_DepthPercent();
    public void set_DepthPercent(int value);
    internal Bitmap ();
    internal Bitmap (ImageOrPrintOptions );
    public void ToImage(string imageFile);
    []
internal void (string , ImageFormat );
    public void ToImage(string imageFile, ImageType imageType);
    public void ToImage(string imageFile, long jpegQuality);
    []
public void ToImage(Stream stream, long jpegQuality);
    []
internal void (Stream , ImageFormat );
    []
public void ToImage(Stream stream, ImageType imageType);
    public void ToPdf(string fileName);
    public void ToPdf(string fileName, float desiredPageWidth, float desiredPageHeight, PageLayoutAlignmentType hAlignmentType, PageLayoutAlignmentType vAlignmentType);
    []
public void ToPdf(Stream stream);
    []
public void ToPdf(Stream stream, float desiredPageWidth, float desiredPageHeight, PageLayoutAlignmentType hAlignmentType, PageLayoutAlignmentType vAlignmentType);
    public void ToImage(string imageFile, ImageOrPrintOptions options);
    []
public void ToImage(Stream stream, ImageOrPrintOptions options);
    internal void ( , RectangleF );
    private void (Stream , ImageOrPrintOptions );
    private void (Stream , ImageOrPrintOptions );
    internal  (bool , IWarningCallback );
    internal  (bool , ImageOrPrintOptions );
    public Size get_ActualChartSize();
    public Int32[] GetActualSize();
    internal ArrayList ();
    internal void (Font ,  );
    internal void ( );
    internal void (Font ,  );
    internal int (Font ,  , int , Boolean& );
    internal void (Font ,  );
    internal  (int );
    internal void ( );
    internal void ( );
    internal void (Title ,  );
    internal void (ChartFrame ,  );
    internal void (DataLabels ,  );
    internal void (Axis ,  );
    internal void (Axis , Axis ,  );
    internal void ();
    public PlacementType get_Placement();
    public void set_Placement(PlacementType value);
    public PageSetup get_PageSetup();
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal void (CellArea , int , ShiftType , Worksheet , bool );
    private bool ( , ChartTextFrame );
    private bool ( , Axis );
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal bool ();
    public bool HasAxis(AxisType aixsType, bool isPrimary);
    internal bool ();
    internal void (bool );
    public bool SwitchRowColumn();
    internal void (ListObject );
    internal string (Boolean[] );
    public string GetChartDataRange();
    public void SetChartDataRange(string area, bool isVertical);
    private void (string , bool );
    private string (Range , string , bool , bool , int , string );
    internal  ();
    internal void ( );
    internal void (Worksheet , int , int , int , int , int , int );
    private void ( , Worksheet , int , int , int , int , int , int );
    public Line get_Line();
    internal Line ();
    internal  ();
    internal  ();
    internal Chart ();
    internal void (int , int );
    internal bool (int );
    internal void (int );
    private bool (int , ChartFrame );
    private bool (int , Area );
    private void (int , ChartFrame );
    private void (int , Area );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal ChartType ();
}
public class Aspose.Cells.Charts.ChartArea : ChartFrame {
    [DebuggerBrowsableAttribute("0")]
private int ;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Height { get; public set; }
    public int Width { get; public set; }
    public Font Font { get; }
    internal ChartArea(Chart );
    public virtual int get_X();
    public virtual void set_X(int value);
    public virtual int get_Y();
    public virtual void set_Y(int value);
    public virtual int get_Height();
    public virtual void set_Height(int value);
    public virtual int get_Width();
    public virtual void set_Width(int value);
    public virtual Font get_Font();
    internal int ();
    internal void (int );
    internal void (ChartArea , CopyOptions );
}
public class Aspose.Cells.Charts.ChartCalculateOptions : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool UpdateAllPoints { get; public set; }
    public bool get_UpdateAllPoints();
    public void set_UpdateAllPoints(bool value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Charts.ChartCollection : CollectionBase`1<Chart> {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    public Chart Item { get; }
    public Chart Item { get; }
    internal ChartCollection(Worksheet );
    internal Worksheet ();
    public int AddFloatingChart(ChartType type, int left, int top, int width, int height);
    public int Add(ChartType type, int upperLeftRow, int upperLeftColumn, int lowerRightRow, int lowerRightColumn);
    [ObsoleteAttribute("Use ChartCollection.Add(ChartType, string, bool ,int , int, int, int ) instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int Add(ChartType type, string dataRange, int topRow, int leftColumn, int rightRow, int bottomColumn);
    public int Add(Byte[] data, string dataRange, bool isVertical, int topRow, int leftColumn, int rightRow, int bottomColumn);
    public int Add(ChartType type, string dataRange, bool isVertical, int topRow, int leftColumn, int rightRow, int bottomColumn);
    internal int (ChartType , int , int , int , int , int , int );
    public Chart get_Item(int index);
    public Chart get_Item(string name);
    internal void (CellArea , int , ShiftType , Worksheet , bool );
    internal void (ChartCollection , int , int , int );
    internal void (Chart );
    internal void (Chart );
    public void RemoveAt(int index);
    internal void ();
    public void Clear();
    internal void (ListObject );
}
public class Aspose.Cells.Charts.ChartDataTable : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private Font ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private BackgroundMode ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Line ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    public Font Font { get; }
    public bool AutoScaleFont { get; public set; }
    public BackgroundMode BackgroundMode { get; public set; }
    [ObsoleteAttribute("Use ChartDataTable.HasHorizontalBorder property, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool HasBorderHorizontal { get; public set; }
    public bool HasHorizontalBorder { get; public set; }
    [ObsoleteAttribute("Use ChartDataTable.HasVerticalBorder property, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool HasBorderVertical { get; public set; }
    public bool HasVerticalBorder { get; public set; }
    [ObsoleteAttribute("Use ChartDataTable.HasOutlineBorder property, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool HasBorderOutline { get; public set; }
    public bool HasOutlineBorder { get; public set; }
    public bool ShowLegendKey { get; public set; }
    public Line Border { get; }
    internal ChartDataTable(Chart );
    internal void (ChartDataTable , CopyOptions );
    public Font get_Font();
    internal Font ();
    internal int ();
    internal void (int );
    internal void (bool );
    public bool get_AutoScaleFont();
    public void set_AutoScaleFont(bool value);
    public BackgroundMode get_BackgroundMode();
    public void set_BackgroundMode(BackgroundMode value);
    public bool get_HasBorderHorizontal();
    public void set_HasBorderHorizontal(bool value);
    public bool get_HasHorizontalBorder();
    public void set_HasHorizontalBorder(bool value);
    public bool get_HasBorderVertical();
    public void set_HasBorderVertical(bool value);
    public bool get_HasVerticalBorder();
    public void set_HasVerticalBorder(bool value);
    public bool get_HasBorderOutline();
    public void set_HasBorderOutline(bool value);
    public bool get_HasOutlineBorder();
    public void set_HasOutlineBorder(bool value);
    public bool get_ShowLegendKey();
    public void set_ShowLegendKey(bool value);
    public Line get_Border();
    internal Line ();
    internal ShapePropertyCollection ();
}
public class Aspose.Cells.Charts.ChartFrame : object {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    protected internal bool m_IsAutoXPos;
    protected internal bool m_IsAutoYPos;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    protected bool m_IsOffsetPosBeSet;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
internal Line ;
    [DebuggerBrowsableAttribute("0")]
internal Area ;
    [DebuggerBrowsableAttribute("0")]
internal Font ;
    protected int m_fontIndex;
    protected bool m_AutoScaleFont;
    protected BackgroundMode m_BackgroundMode;
    protected internal bool m_isAutoSize;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public bool IsInnerMode { get; public set; }
    public Line Border { get; }
    public Area Area { get; }
    [ObsoleteAttribute("Use ChartFrame.Font property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public Font TextFont { get; }
    public TextOptions TextOptions { get; }
    public Font Font { get; }
    public bool AutoScaleFont { get; public set; }
    public BackgroundMode BackgroundMode { get; public set; }
    [ObsoleteAttribute("Use ChartFrame.BackgroundMode property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public BackgroundMode Background { get; public set; }
    public bool IsAutomaticSize { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Height { get; public set; }
    public int Width { get; public set; }
    public bool Shadow { get; public set; }
    public ShapePropertyCollection ShapeProperties { get; }
    public bool IsDefaultPosBeSet { get; }
    public int DefaultX { get; }
    public int DefaultY { get; }
    public int DefaultWidth { get; }
    public int DefaultHeight { get; }
    internal ChartFrame(Chart );
    internal Byte[] ();
    internal void (Byte[] );
    internal Byte[] ();
    internal void (Byte[] );
    internal void (object );
    public bool get_IsInnerMode();
    public void set_IsInnerMode(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal Chart ();
    internal  ();
    internal void ( );
    internal void ();
    public virtual Line get_Border();
    internal Line ();
    internal void (Line );
    public virtual Area get_Area();
    internal Area ();
    internal void (Area );
    public virtual Font get_TextFont();
    public virtual TextOptions get_TextOptions();
    public virtual Font get_Font();
    internal virtual bool mxgp6sk8dnxjmj22quh8nhc5h4unrkty();
    internal Font ();
    internal bool ();
    internal Font ();
    internal Font ();
    internal  ();
    internal int ();
    internal void (int );
    public virtual bool get_AutoScaleFont();
    public virtual void set_AutoScaleFont(bool value);
    internal void (bool ,  );
    public BackgroundMode get_BackgroundMode();
    public void set_BackgroundMode(BackgroundMode value);
    public BackgroundMode get_Background();
    public void set_Background(BackgroundMode value);
    internal void (BackgroundMode );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public virtual bool get_IsAutomaticSize();
    public virtual void set_IsAutomaticSize(bool value);
    public virtual int get_X();
    public virtual void set_X(int value);
    internal void (int );
    internal int ();
    public virtual int get_Y();
    public virtual void set_Y(int value);
    internal void (int );
    internal int ();
    public virtual int get_Height();
    public virtual void set_Height(int value);
    internal int ();
    internal void (int );
    public virtual int get_Width();
    public virtual void set_Width(int value);
    internal void (int );
    internal int ();
    internal void (int , int , int , int );
    public bool get_Shadow();
    public void set_Shadow(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal void (ChartFrame , CopyOptions );
    internal void (ChartFrame , CopyOptions );
    internal void (ChartFrame , CopyOptions );
    internal bool (ChartFrame );
    internal  ();
    internal void ( );
    public ShapePropertyCollection get_ShapeProperties();
    internal ShapePropertyCollection ();
    internal bool ();
    internal void (bool );
    public bool get_IsDefaultPosBeSet();
    public int get_DefaultX();
    public int get_DefaultY();
    public int get_DefaultWidth();
    public int get_DefaultHeight();
    internal void (int , int , int , int );
    internal bool ();
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    public virtual void SetPositionAuto();
}
public class Aspose.Cells.Charts.ChartGlobalizationSettings : object {
    [DebuggerBrowsableAttribute("0")]
internal CountryCode ;
    internal virtual void 825fjwgetd7f9pmcysjdh38tah8k7bqc(CultureInfo );
    public virtual string GetSeriesName();
    public virtual string GetChartTitleName();
    public virtual string GetLegendIncreaseName();
    public virtual string GetLegendDecreaseName();
    public virtual string GetLegendTotalName();
    public virtual string GetAxisTitleName();
    public virtual string GetOtherName();
    public virtual string GetAxisUnitName(DisplayUnitType type);
}
public enum Aspose.Cells.Charts.ChartLineFormattingType : Enum {
    public int value__;
    public static ChartLineFormattingType Automatic;
    public static ChartLineFormattingType Solid;
    public static ChartLineFormattingType None;
    public static ChartLineFormattingType Gradient;
}
public enum Aspose.Cells.Charts.ChartMarkerType : Enum {
    public int value__;
    public static ChartMarkerType Automatic;
    public static ChartMarkerType Circle;
    public static ChartMarkerType Dash;
    public static ChartMarkerType Diamond;
    public static ChartMarkerType Dot;
    public static ChartMarkerType None;
    public static ChartMarkerType SquarePlus;
    public static ChartMarkerType Square;
    public static ChartMarkerType SquareStar;
    public static ChartMarkerType Triangle;
    public static ChartMarkerType SquareX;
    public static ChartMarkerType Picture;
}
public class Aspose.Cells.Charts.ChartPoint : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Series ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private DataLabels ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private CellValueType ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private CellValueType ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    public int Explosion { get; public set; }
    public bool Shadow { get; public set; }
    public Line Border { get; }
    public Area Area { get; }
    public Marker Marker { get; }
    public DataLabels DataLabels { get; }
    public object YValue { get; public set; }
    public CellValueType YValueType { get; }
    public object XValue { get; public set; }
    public CellValueType XValueType { get; }
    public ShapePropertyCollection ShapeProperties { get; }
    public bool IsInSecondaryPlot { get; public set; }
    public int ShapeX { get; }
    public int ShapeY { get; }
    public int ShapeWidth { get; }
    public int ShapeHeight { get; }
    public int ShapeXPx { get; }
    public int ShapeYPx { get; }
    public int ShapeWidthPx { get; }
    public int ShapeHeightPx { get; }
    public int BorderWidthPx { get; }
    public int RadiusPx { get; }
    public int DoughnutInnerRadius { get; }
    [ObsoleteAttribute("Use ChartPoint.DoughnutInnerRadius property, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public int InnerRadiusPx { get; }
    public float StartAngle { get; }
    public float EndAngle { get; }
    public float ArcStartPointXPx { get; }
    public float ArcStartPointYPx { get; }
    public float ArcEndPointXPx { get; }
    public float ArcEndPointYPx { get; }
    public float InnerArcStartPointXPx { get; }
    public float InnerArcStartPointYPx { get; }
    public float InnerArcEndPointXPx { get; }
    public float InnerArcEndPointYPx { get; }
    internal ChartPoint(Series , int );
    internal Series ();
    internal ChartType ();
    internal  ();
    internal void ( );
    internal  ();
    public int get_Explosion();
    public void set_Explosion(int value);
    internal bool ();
    public bool get_Shadow();
    public void set_Shadow(bool value);
    internal bool ();
    public Line get_Border();
    internal Line ();
    public Area get_Area();
    internal Area ();
    public Marker get_Marker();
    internal Marker ();
    internal  ();
    public DataLabels get_DataLabels();
    internal DataLabels ();
    public object get_YValue();
    public void set_YValue(object value);
    public CellValueType get_YValueType();
    internal void (CellValueType );
    public object get_XValue();
    public void set_XValue(object value);
    public CellValueType get_XValueType();
    internal void (CellValueType );
    internal void (ChartPoint , CopyOptions );
    public ShapePropertyCollection get_ShapeProperties();
    internal ShapePropertyCollection ();
    public bool get_IsInSecondaryPlot();
    public void set_IsInSecondaryPlot(bool value);
    public int get_ShapeX();
    public int get_ShapeY();
    public int get_ShapeWidth();
    public int get_ShapeHeight();
    private Chart ();
    public int get_ShapeXPx();
    public int get_ShapeYPx();
    public int get_ShapeWidthPx();
    public int get_ShapeHeightPx();
    public int get_BorderWidthPx();
    public int get_RadiusPx();
    public int get_DoughnutInnerRadius();
    public int get_InnerRadiusPx();
    public float get_StartAngle();
    public float get_EndAngle();
    public float get_ArcStartPointXPx();
    public float get_ArcStartPointYPx();
    public float get_ArcEndPointXPx();
    public float get_ArcEndPointYPx();
    public float get_InnerArcStartPointXPx();
    public float get_InnerArcStartPointYPx();
    public float get_InnerArcEndPointXPx();
    public float get_InnerArcEndPointYPx();
    internal void (float , float );
    internal void (float , float );
    internal void (float , float );
    internal void (float );
    private float (double , double , double );
    private float (double , double , double );
    public int GetTopPointCount();
    public float GetTopPointXPx(int index);
    public float GetTopPointYPx(int index);
    public int GetBottomPointCount();
    public float GetBottomPointXPx(int index);
    public float GetBottomPointYPx(int index);
    internal void (IList );
    internal void (IList );
    public int GetOnCategoryAxisPointCount();
    public float GetOnCategoryAxisPointXPx(int index);
    public float GetOnCategoryAxisPointYPx(int index);
    internal void (IList );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Charts.ChartPointCollection : object {
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
[]
private Series ;
    public int Count { get; }
    public ChartPoint Item { get; }
    internal ChartPointCollection(Series );
    [("ChartPoint")]
public IEnumerator GetEnumerator();
    public void Clear();
    public void RemoveAt(int index);
    public int get_Count();
    public ChartPoint get_Item(int index);
    internal void (ChartPoint );
    private ChartPoint (int , Boolean& );
    private ChartPoint (int );
    internal bool (int );
    internal ChartPoint (int );
    private ChartPoint (int , Boolean& );
    private ChartPoint (int , int , int , Boolean& );
    private void ();
    internal int ();
    internal ChartPoint (int );
    internal ChartPoint (int );
    private ChartPoint (int , int , int );
    internal ChartPoint (int );
    internal void ();
    internal void (ChartPointCollection , CopyOptions );
}
public enum Aspose.Cells.Charts.ChartSplitType : Enum {
    public int value__;
    public static ChartSplitType Position;
    public static ChartSplitType Value;
    public static ChartSplitType PercentValue;
    public static ChartSplitType Custom;
    [ObsoleteAttribute("Use Series.IsAutoSplit property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ChartSplitType Auto;
}
public enum Aspose.Cells.Charts.ChartTextDirectionType : Enum {
    public int value__;
    public static ChartTextDirectionType Horizontal;
    public static ChartTextDirectionType Vertical;
    public static ChartTextDirectionType Rotate90;
    public static ChartTextDirectionType Rotate270;
    public static ChartTextDirectionType Stacked;
}
public class Aspose.Cells.Charts.ChartTextFrame : ChartFrame {
    protected bool m_IsAutoText;
    protected bool m_deleted;
    protected TextAlignmentType horizontal;
    protected TextAlignmentType vertical;
    protected int rotation;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    protected ArrayList m_CharsList;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal TextDirectionType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool IsAutoText { get; public set; }
    public bool IsDeleted { get; public set; }
    public TextAlignmentType TextHorizontalAlignment { get; public set; }
    public TextAlignmentType TextVerticalAlignment { get; public set; }
    public int RotationAngle { get; public set; }
    public bool IsAutomaticRotation { get; }
    public string Text { get; public set; }
    public string LinkedSource { get; public set; }
    [ObsoleteAttribute("Use ChartTextFrame.ReadingOrder property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public TextDirectionType TextDirection { get; public set; }
    public TextDirectionType ReadingOrder { get; public set; }
    public ChartTextDirectionType DirectionType { get; public set; }
    public bool IsTextWrapped { get; public set; }
    public bool IsResizeShapeToFitText { get; public set; }
    internal ChartTextFrame(Chart );
    public virtual bool get_IsAutoText();
    public virtual void set_IsAutoText(bool value);
    internal void (bool );
    public bool get_IsDeleted();
    public void set_IsDeleted(bool value);
    public TextAlignmentType get_TextHorizontalAlignment();
    public void set_TextHorizontalAlignment(TextAlignmentType value);
    internal void (TextAlignmentType );
    public TextAlignmentType get_TextVerticalAlignment();
    public void set_TextVerticalAlignment(TextAlignmentType value);
    internal void (TextAlignmentType );
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    internal void (int );
    public bool get_IsAutomaticRotation();
    internal ArrayList ();
    internal void (ArrayList );
    internal void ();
    public FontSetting Characters(int startIndex, int length);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    internal virtual string 58ltqmx6pp8795ztxv44gzqxrql54n6l();
    internal virtual void 58ltqmx6pp8795ztxv44gzqxrql54n6l(string );
    internal string ();
    internal void (string );
    internal void (string );
    public virtual string get_LinkedSource();
    public virtual void set_LinkedSource(string value);
    internal Byte[] ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public TextDirectionType get_TextDirection();
    public void set_TextDirection(TextDirectionType value);
    public TextDirectionType get_ReadingOrder();
    public void set_ReadingOrder(TextDirectionType value);
    public virtual ChartTextDirectionType get_DirectionType();
    public virtual void set_DirectionType(ChartTextDirectionType value);
    public virtual bool get_IsTextWrapped();
    public virtual void set_IsTextWrapped(bool value);
    public bool get_IsResizeShapeToFitText();
    public void set_IsResizeShapeToFitText(bool value);
    internal void (ChartTextFrame , CopyOptions );
    internal void (ChartTextFrame , CopyOptions );
    internal bool (ChartTextFrame );
}
public enum Aspose.Cells.Charts.ChartType : Enum {
    public int value__;
    public static ChartType Area;
    public static ChartType AreaStacked;
    public static ChartType Area100PercentStacked;
    public static ChartType Area3D;
    public static ChartType Area3DStacked;
    public static ChartType Area3D100PercentStacked;
    public static ChartType Bar;
    public static ChartType BarStacked;
    public static ChartType Bar100PercentStacked;
    public static ChartType Bar3DClustered;
    public static ChartType Bar3DStacked;
    public static ChartType Bar3D100PercentStacked;
    public static ChartType Bubble;
    public static ChartType Bubble3D;
    public static ChartType Column;
    public static ChartType ColumnStacked;
    public static ChartType Column100PercentStacked;
    public static ChartType Column3D;
    public static ChartType Column3DClustered;
    public static ChartType Column3DStacked;
    public static ChartType Column3D100PercentStacked;
    public static ChartType Cone;
    public static ChartType ConeStacked;
    public static ChartType Cone100PercentStacked;
    public static ChartType ConicalBar;
    public static ChartType ConicalBarStacked;
    public static ChartType ConicalBar100PercentStacked;
    public static ChartType ConicalColumn3D;
    public static ChartType Cylinder;
    public static ChartType CylinderStacked;
    public static ChartType Cylinder100PercentStacked;
    public static ChartType CylindricalBar;
    public static ChartType CylindricalBarStacked;
    public static ChartType CylindricalBar100PercentStacked;
    public static ChartType CylindricalColumn3D;
    public static ChartType Doughnut;
    public static ChartType DoughnutExploded;
    public static ChartType Line;
    public static ChartType LineStacked;
    public static ChartType Line100PercentStacked;
    public static ChartType LineWithDataMarkers;
    public static ChartType LineStackedWithDataMarkers;
    public static ChartType Line100PercentStackedWithDataMarkers;
    public static ChartType Line3D;
    public static ChartType Pie;
    public static ChartType Pie3D;
    public static ChartType PiePie;
    public static ChartType PieExploded;
    public static ChartType Pie3DExploded;
    public static ChartType PieBar;
    public static ChartType Pyramid;
    public static ChartType PyramidStacked;
    public static ChartType Pyramid100PercentStacked;
    public static ChartType PyramidBar;
    public static ChartType PyramidBarStacked;
    public static ChartType PyramidBar100PercentStacked;
    public static ChartType PyramidColumn3D;
    public static ChartType Radar;
    public static ChartType RadarWithDataMarkers;
    public static ChartType RadarFilled;
    public static ChartType Scatter;
    public static ChartType ScatterConnectedByCurvesWithDataMarker;
    public static ChartType ScatterConnectedByCurvesWithoutDataMarker;
    public static ChartType ScatterConnectedByLinesWithDataMarker;
    public static ChartType ScatterConnectedByLinesWithoutDataMarker;
    public static ChartType StockHighLowClose;
    public static ChartType StockOpenHighLowClose;
    public static ChartType StockVolumeHighLowClose;
    public static ChartType StockVolumeOpenHighLowClose;
    public static ChartType Surface3D;
    public static ChartType SurfaceWireframe3D;
    public static ChartType SurfaceContour;
    public static ChartType SurfaceContourWireframe;
    public static ChartType BoxWhisker;
    public static ChartType Funnel;
    public static ChartType ParetoLine;
    public static ChartType Sunburst;
    public static ChartType Treemap;
    public static ChartType Waterfall;
    public static ChartType Histogram;
    public static ChartType Map;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ChartType RadialHistogram;
}
public enum Aspose.Cells.Charts.CrossType : Enum {
    public int value__;
    public static CrossType Automatic;
    public static CrossType Maximum;
    public static CrossType Minimum;
    public static CrossType Custom;
}
public class Aspose.Cells.Charts.DataLabels : ChartTextFrame {
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private DataLabelShapeType ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private DataLabelsSeparatorType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private LabelPositionType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private LabelPositionType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private ShapeGuideCollection ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public Line Border { get; }
    public Area Area { get; }
    public bool IsAutoText { get; public set; }
    public ChartTextDirectionType DirectionType { get; public set; }
    public string Text { get; public set; }
    public bool IsTextWrapped { get; public set; }
    public BackgroundMode BackgroundMode { get; public set; }
    public bool ShowValue { get; public set; }
    public bool ShowCellRange { get; public set; }
    public bool ShowPercentage { get; public set; }
    public bool ShowBubbleSize { get; public set; }
    public bool ShowCategoryName { get; public set; }
    public bool ShowSeriesName { get; public set; }
    public bool ShowLegendKey { get; public set; }
    public string NumberFormat { get; public set; }
    public int Number { get; public set; }
    public bool NumberFormatLinked { get; public set; }
    public Font Font { get; }
    public DataLabelsSeparatorType SeparatorType { get; public set; }
    public string SeparatorValue { get; public set; }
    public LabelPositionType Position { get; public set; }
    public bool IsNeverOverlap { get; public set; }
    public DataLabelShapeType ShapeType { get; public set; }
    internal DataLabels(object , Chart );
    public virtual Line get_Border();
    public virtual Area get_Area();
    public virtual bool get_IsAutoText();
    public virtual void set_IsAutoText(bool value);
    public virtual ChartTextDirectionType get_DirectionType();
    public virtual void set_DirectionType(ChartTextDirectionType value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    internal virtual string 58ltqmx6pp8795ztxv44gzqxrql54n6l();
    internal virtual void 58ltqmx6pp8795ztxv44gzqxrql54n6l(string );
    private ArrayList (ArrayList );
    public virtual bool get_IsTextWrapped();
    public virtual void set_IsTextWrapped(bool value);
    internal bool ();
    internal ChartType ();
    public BackgroundMode get_BackgroundMode();
    public void set_BackgroundMode(BackgroundMode value);
    public bool get_ShowValue();
    public void set_ShowValue(bool value);
    public bool get_ShowCellRange();
    public void set_ShowCellRange(bool value);
    internal void ( , bool );
    private void (byte , bool );
    private void (byte , bool );
    public bool get_ShowPercentage();
    public void set_ShowPercentage(bool value);
    public bool get_ShowBubbleSize();
    public void set_ShowBubbleSize(bool value);
    public bool get_ShowCategoryName();
    public void set_ShowCategoryName(bool value);
    public bool get_ShowSeriesName();
    public void set_ShowSeriesName(bool value);
    public bool get_ShowLegendKey();
    public void set_ShowLegendKey(bool value);
    internal void (bool );
    public string get_NumberFormat();
    public void set_NumberFormat(string value);
    private string ();
    internal string ();
    internal void (string );
    public int get_Number();
    public void set_Number(int value);
    internal int ();
    internal void (int );
    public bool get_NumberFormatLinked();
    public void set_NumberFormatLinked(bool value);
    internal void (bool );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal String[] ();
    public void ApplyFont();
    public virtual Font get_Font();
    internal void (Series );
    internal double ();
    public DataLabelsSeparatorType get_SeparatorType();
    public void set_SeparatorType(DataLabelsSeparatorType value);
    private void (DataLabelsSeparatorType );
    internal DataLabelsSeparatorType ();
    internal bool ();
    public string get_SeparatorValue();
    public void set_SeparatorValue(string value);
    internal void (DataLabels , CopyOptions );
    internal void (DataLabels );
    internal void (DataLabels , CopyOptions );
    internal void (DataLabels );
    internal void (DataLabels );
    internal void (DataLabels );
    internal bool (DataLabels );
    internal object ();
    internal bool ();
    internal Series ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool ();
    public LabelPositionType get_Position();
    public void set_Position(LabelPositionType value);
    public bool get_IsNeverOverlap();
    public void set_IsNeverOverlap(bool value);
    internal void (LabelPositionType );
    internal LabelPositionType ();
    internal void (LabelPositionType );
    internal bool ();
    public DataLabelShapeType get_ShapeType();
    public void set_ShapeType(DataLabelShapeType value);
    internal ShapeGuideCollection ();
    internal  ();
    internal void ( );
    internal bool ();
    internal static int (DataLabelShapeType );
    internal ShapeGuideCollection ();
    private string (string );
}
public enum Aspose.Cells.Charts.DataLabelsSeparatorType : Enum {
    public int value__;
    public static DataLabelsSeparatorType Auto;
    public static DataLabelsSeparatorType Space;
    public static DataLabelsSeparatorType Comma;
    public static DataLabelsSeparatorType Semicolon;
    public static DataLabelsSeparatorType Period;
    public static DataLabelsSeparatorType NewLine;
    public static DataLabelsSeparatorType Custom;
}
public class Aspose.Cells.Charts.DisplayUnitLabel : ChartTextFrame {
    [DebuggerBrowsableAttribute("0")]
[]
private Axis ;
    public string Text { get; public set; }
    public Font Font { get; }
    public bool AutoScaleFont { get; public set; }
    internal DisplayUnitLabel(Axis );
    internal Axis ();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    internal virtual string 58ltqmx6pp8795ztxv44gzqxrql54n6l();
    internal virtual void 58ltqmx6pp8795ztxv44gzqxrql54n6l(string );
    public virtual Font get_Font();
    public virtual bool get_AutoScaleFont();
    public virtual void set_AutoScaleFont(bool value);
    internal bool ();
}
public enum Aspose.Cells.Charts.DisplayUnitType : Enum {
    public int value__;
    public static DisplayUnitType None;
    public static DisplayUnitType Hundreds;
    public static DisplayUnitType Thousands;
    public static DisplayUnitType TenThousands;
    public static DisplayUnitType HundredThousands;
    public static DisplayUnitType Millions;
    public static DisplayUnitType TenMillions;
    public static DisplayUnitType HundredMillions;
    public static DisplayUnitType Billions;
    public static DisplayUnitType Trillions;
    public static DisplayUnitType Percentage;
    [ObsoleteAttribute("Use DisplayUnitType.Custom, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static DisplayUnitType Cust;
    public static DisplayUnitType Custom;
}
public class Aspose.Cells.Charts.DropBars : object {
    [DebuggerBrowsableAttribute("0")]
private Area ;
    [DebuggerBrowsableAttribute("0")]
private Line ;
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    public Line Border { get; }
    public Area Area { get; }
    internal DropBars(Chart );
    public Line get_Border();
    internal Line ();
    internal Area ();
    public Area get_Area();
    internal void (DropBars , CopyOptions );
    internal ShapePropertyCollection ();
}
public class Aspose.Cells.Charts.ErrorBar : Line {
    [DebuggerBrowsableAttribute("0")]
[]
private Series ;
    [DebuggerBrowsableAttribute("0")]
private ErrorBarType ;
    [DebuggerBrowsableAttribute("0")]
private ErrorBarDisplayType ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    public ErrorBarType Type { get; public set; }
    public ErrorBarDisplayType DisplayType { get; public set; }
    public double Amount { get; public set; }
    public bool ShowMarkerTTop { get; public set; }
    public string PlusValue { get; public set; }
    public string MinusValue { get; public set; }
    internal ErrorBar(Series , bool );
    internal ErrorBar(Series );
    internal void (ErrorBar , CopyOptions );
    public ErrorBarType get_Type();
    public void set_Type(ErrorBarType value);
    public ErrorBarDisplayType get_DisplayType();
    public void set_DisplayType(ErrorBarDisplayType value);
    internal void (ErrorBarDisplayType );
    public double get_Amount();
    public void set_Amount(double value);
    internal void (double );
    internal bool ();
    internal void (bool );
    public bool get_ShowMarkerTTop();
    public void set_ShowMarkerTTop(bool value);
    public string get_PlusValue();
    public void set_PlusValue(string value);
    private string (string );
    internal  ();
    internal void ( );
    public string get_MinusValue();
    public void set_MinusValue(string value);
    internal  ();
    internal void ( );
    internal Series ();
    internal ShapePropertyCollection ();
}
public enum Aspose.Cells.Charts.ErrorBarDisplayType : Enum {
    public int value__;
    public static ErrorBarDisplayType Both;
    public static ErrorBarDisplayType Minus;
    public static ErrorBarDisplayType None;
    public static ErrorBarDisplayType Plus;
}
public enum Aspose.Cells.Charts.ErrorBarType : Enum {
    public int value__;
    public static ErrorBarType Custom;
    public static ErrorBarType FixedValue;
    public static ErrorBarType Percent;
    public static ErrorBarType StDev;
    public static ErrorBarType StError;
}
public class Aspose.Cells.Charts.Floor : Area {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
internal Line ;
    protected ShapePropertyCollection m_SpPr;
    public Line Border { get; public set; }
    internal Floor(Chart );
    public Line get_Border();
    public void set_Border(Line value);
    internal void (Floor , CopyOptions );
    internal ShapePropertyCollection ();
}
public enum Aspose.Cells.Charts.FormattingType : Enum {
    public int value__;
    public static FormattingType Automatic;
    public static FormattingType Custom;
    public static FormattingType None;
}
public enum Aspose.Cells.Charts.LabelPositionType : Enum {
    public int value__;
    public static LabelPositionType Center;
    public static LabelPositionType InsideBase;
    public static LabelPositionType InsideEnd;
    public static LabelPositionType OutsideEnd;
    public static LabelPositionType Above;
    public static LabelPositionType Below;
    public static LabelPositionType Left;
    public static LabelPositionType Right;
    public static LabelPositionType BestFit;
    public static LabelPositionType Moved;
}
public class Aspose.Cells.Charts.Legend : ChartTextFrame {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private LegendPositionType ;
    [DebuggerBrowsableAttribute("0")]
private LegendEntryCollection ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public LegendPositionType Position { get; public set; }
    public LegendEntryCollection LegendEntries { get; }
    [ObsoleteAttribute("Use Legend.GetLegendLabels method, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public ArrayList LegendEntriesLabels { get; }
    public bool IsOverLay { get; public set; }
    internal Legend(Chart );
    public LegendPositionType get_Position();
    public void set_Position(LegendPositionType value);
    internal void (LegendPositionType );
    public LegendEntryCollection get_LegendEntries();
    public String[] GetLegendLabels();
    public ArrayList get_LegendEntriesLabels();
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal LegendEntryCollection ();
    internal bool ();
    internal void (bool );
    internal void ();
    internal void (Legend , CopyOptions );
    public bool get_IsOverLay();
    public void set_IsOverLay(bool value);
}
public class Aspose.Cells.Charts.LegendEntry : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Legend ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Font ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private BackgroundMode ;
    public bool IsDeleted { get; public set; }
    public Font Font { get; }
    [ObsoleteAttribute("Use LegendEntry.Font property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public Font TextFont { get; }
    public bool IsTextNoFill { get; public set; }
    public bool AutoScaleFont { get; public set; }
    [ObsoleteAttribute("Use LegendEntry.BackgroundMode property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public BackgroundMode Background { get; public set; }
    public BackgroundMode BackgroundMode { get; public set; }
    internal LegendEntry(Legend , int );
    public bool get_IsDeleted();
    public void set_IsDeleted(bool value);
    public Font get_Font();
    public virtual Font get_TextFont();
    internal Font ();
    internal int ();
    internal void (int );
    public bool get_IsTextNoFill();
    public void set_IsTextNoFill(bool value);
    internal int ();
    internal void (int );
    public bool get_AutoScaleFont();
    public void set_AutoScaleFont(bool value);
    internal void (bool );
    public BackgroundMode get_Background();
    public void set_Background(BackgroundMode value);
    public BackgroundMode get_BackgroundMode();
    public void set_BackgroundMode(BackgroundMode value);
    internal void (LegendEntry );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Charts.LegendEntryCollection : CollectionBase`1<LegendEntry> {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    public LegendEntry Item { get; }
    internal LegendEntryCollection(Chart );
    public LegendEntry get_Item(int index);
    internal LegendEntry (int );
    internal LegendEntry (int );
    internal void (LegendEntryCollection );
}
public enum Aspose.Cells.Charts.LegendPositionType : Enum {
    public int value__;
    public static LegendPositionType Bottom;
    public static LegendPositionType Corner;
    public static LegendPositionType Left;
    public static LegendPositionType NotDocked;
    public static LegendPositionType Right;
    public static LegendPositionType Top;
}
public enum Aspose.Cells.Charts.MapChartLabelLayout : Enum {
    public int value__;
    public static MapChartLabelLayout BestFitOnly;
    public static MapChartLabelLayout ShowAll;
    public static MapChartLabelLayout None;
}
public enum Aspose.Cells.Charts.MapChartProjectionType : Enum {
    public int value__;
    public static MapChartProjectionType Automatic;
    public static MapChartProjectionType Mercator;
    public static MapChartProjectionType Miller;
    public static MapChartProjectionType Albers;
}
public enum Aspose.Cells.Charts.MapChartRegionType : Enum {
    public int value__;
    public static MapChartRegionType Automatic;
    public static MapChartRegionType DataOnly;
    public static MapChartRegionType CountryRegionList;
    public static MapChartRegionType World;
}
public class Aspose.Cells.Charts.Marker : object {
    [DebuggerBrowsableAttribute("0")]
private Line ;
    [DebuggerBrowsableAttribute("0")]
private Area ;
    [DebuggerBrowsableAttribute("0")]
private ChartMarkerType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    public Line Border { get; }
    public Area Area { get; }
    public ChartMarkerType MarkerStyle { get; public set; }
    public int MarkerSize { get; public set; }
    public int MarkerSizePx { get; public set; }
    public Color ForegroundColor { get; public set; }
    public FormattingType ForegroundColorSetType { get; public set; }
    public Color BackgroundColor { get; public set; }
    public FormattingType BackgroundColorSetType { get; public set; }
    internal Marker(object ,  );
    internal void ();
    public Line get_Border();
    public Area get_Area();
    public ChartMarkerType get_MarkerStyle();
    public void set_MarkerStyle(ChartMarkerType value);
    internal void (ChartMarkerType );
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
    public int get_MarkerSizePx();
    public void set_MarkerSizePx(int value);
    internal Area ();
    internal Line ();
    internal void (ChartType );
    internal void (Marker , CopyOptions );
    internal bool (Marker );
    public Color get_ForegroundColor();
    public void set_ForegroundColor(Color value);
    public FormattingType get_ForegroundColorSetType();
    public void set_ForegroundColorSetType(FormattingType value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public FormattingType get_BackgroundColorSetType();
    public void set_BackgroundColorSetType(FormattingType value);
    internal void (FormattingType );
    internal void (FormattingType );
    internal Chart ();
    private void ();
    internal ShapePropertyCollection ();
    internal object ();
}
public class Aspose.Cells.Charts.PivotOptions : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool DropZoneFilter { get; public set; }
    public bool DropZoneCategories { get; public set; }
    public bool DropZoneData { get; public set; }
    public bool DropZoneSeries { get; public set; }
    public bool DropZonesVisible { get; public set; }
    internal PivotOptions(Chart );
    public bool get_DropZoneFilter();
    public void set_DropZoneFilter(bool value);
    public bool get_DropZoneCategories();
    public void set_DropZoneCategories(bool value);
    public bool get_DropZoneData();
    public void set_DropZoneData(bool value);
    public bool get_DropZoneSeries();
    public void set_DropZoneSeries(bool value);
    public bool get_DropZonesVisible();
    public void set_DropZonesVisible(bool value);
    internal void (PivotOptions );
    internal void ();
}
public class Aspose.Cells.Charts.PlotArea : ChartFrame {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Height { get; public set; }
    public int Width { get; public set; }
    public int InnerX { get; public set; }
    public int InnerY { get; public set; }
    public int InnerHeight { get; public set; }
    public int InnerWidth { get; public set; }
    public bool IsAutomaticSize { get; public set; }
    internal PlotArea(Chart );
    internal void ();
    public virtual int get_X();
    public virtual void set_X(int value);
    public virtual int get_Y();
    public virtual void set_Y(int value);
    public virtual int get_Height();
    public virtual void set_Height(int value);
    public virtual int get_Width();
    public virtual void set_Width(int value);
    public int get_InnerX();
    public void set_InnerX(int value);
    public int get_InnerY();
    public void set_InnerY(int value);
    public int get_InnerHeight();
    public void set_InnerHeight(int value);
    public int get_InnerWidth();
    public void set_InnerWidth(int value);
    public virtual void SetPositionAuto();
    public virtual bool get_IsAutomaticSize();
    public virtual void set_IsAutomaticSize(bool value);
    internal void (int , int , int , int );
    internal bool ();
    internal void (bool );
    internal void (PlotArea , CopyOptions );
}
public enum Aspose.Cells.Charts.PlotDataByType : Enum {
    public int value__;
    public static PlotDataByType Row;
    public static PlotDataByType Column;
}
public enum Aspose.Cells.Charts.PlotEmptyCellsType : Enum {
    public int value__;
    public static PlotEmptyCellsType NotPlotted;
    public static PlotEmptyCellsType Zero;
    public static PlotEmptyCellsType Interpolated;
}
public enum Aspose.Cells.Charts.QuartileCalculationType : Enum {
    public int value__;
    public static QuartileCalculationType Exclusive;
    public static QuartileCalculationType Inclusive;
}
public class Aspose.Cells.Charts.Series : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal SeriesLayoutProperties ;
    [DebuggerBrowsableAttribute("0")]
private ChartPointCollection ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
[]
private SeriesCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private TrendlineCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal DataLabels ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private ErrorBar ;
    [DebuggerBrowsableAttribute("0")]
private ErrorBar ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
[]
private Line ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Line ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public bool IsFiltered { get; public set; }
    public SeriesLayoutProperties LayoutProperties { get; }
    public ChartPointCollection Points { get; }
    public Area Area { get; }
    public Line Border { get; }
    public string Name { get; public set; }
    public string DisplayName { get; }
    public int CountOfDataValues { get; }
    public bool IsVerticalValues { get; }
    public string Values { get; public set; }
    public string ValuesFormatCode { get; public set; }
    public string XValuesFormatCode { get; public set; }
    public string XValues { get; public set; }
    public string BubbleSizes { get; public set; }
    public TrendlineCollection TrendLines { get; }
    public bool Smooth { get; public set; }
    public bool Shadow { get; public set; }
    public bool Has3DEffect { get; public set; }
    public Bar3DShapeType Bar3DShapeType { get; public set; }
    public DataLabels DataLabels { get; }
    public ChartType Type { get; public set; }
    public Marker Marker { get; }
    public bool PlotOnSecondAxis { get; public set; }
    public ErrorBar XErrorBar { get; }
    public ErrorBar YErrorBar { get; }
    public bool HasHiLoLines { get; public set; }
    public Line HiLoLines { get; }
    public bool HasSeriesLines { get; public set; }
    public Line SeriesLines { get; }
    public bool HasDropLines { get; public set; }
    public Line DropLines { get; }
    public bool HasUpDownBars { get; public set; }
    public DropBars UpBars { get; }
    public DropBars DownBars { get; }
    public bool IsColorVaried { get; public set; }
    public short GapWidth { get; public set; }
    public short FirstSliceAngle { get; public set; }
    public short Overlap { get; public set; }
    public short SecondPlotSize { get; public set; }
    public ChartSplitType SplitType { get; public set; }
    public double SplitValue { get; public set; }
    public bool IsAutoSplit { get; }
    public int BubbleScale { get; public set; }
    public BubbleSizeRepresents SizeRepresents { get; public set; }
    public bool ShowNegativeBubbles { get; public set; }
    public int DoughnutHoleSize { get; public set; }
    public int Explosion { get; public set; }
    public bool HasRadarAxisLabels { get; public set; }
    public bool HasLeaderLines { get; public set; }
    public Line LeaderLines { get; }
    public LegendEntry LegendEntry { get; }
    public ShapePropertyCollection ShapeProperties { get; }
    internal Series(SeriesCollection , int );
    internal  ();
    private int (Series , SeriesCollection );
    private void ();
    public bool get_IsFiltered();
    public void set_IsFiltered(bool value);
    public SeriesLayoutProperties get_LayoutProperties();
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    public void Move(int count);
    public ChartPointCollection get_Points();
    internal ChartPointCollection ();
    internal void ();
    public Area get_Area();
    internal Area ();
    public Line get_Border();
    internal Line ();
    internal  ();
    internal void ( );
    internal  ();
    internal SeriesCollection ();
    internal Worksheet ();
    internal bool ();
    internal void (Byte[] , string );
    public string get_Name();
    public void set_Name(string value);
    private string ();
    public string get_DisplayName();
    public int get_CountOfDataValues();
    public bool get_IsVerticalValues();
    public string get_Values();
    public void set_Values(string value);
    private string (string );
    internal  ();
    internal void ( );
    public string get_ValuesFormatCode();
    public void set_ValuesFormatCode(string value);
    public string get_XValuesFormatCode();
    public void set_XValuesFormatCode(string value);
    internal void ();
    public string get_XValues();
    public void set_XValues(string value);
    internal  ();
    internal void ( );
    public string get_BubbleSizes();
    public void set_BubbleSizes(string value);
    internal  ();
    internal void ( );
    public TrendlineCollection get_TrendLines();
    internal TrendlineCollection ();
    public bool get_Smooth();
    public void set_Smooth(bool value);
    public bool get_Shadow();
    public void set_Shadow(bool value);
    public bool get_Has3DEffect();
    public void set_Has3DEffect(bool value);
    public Bar3DShapeType get_Bar3DShapeType();
    public void set_Bar3DShapeType(Bar3DShapeType value);
    internal void (Bar3DShapeType );
    internal void (Series , CopyOptions );
    internal void (Series , CopyOptions );
    public DataLabels get_DataLabels();
    internal DataLabels ();
    internal int ();
    public ChartType get_Type();
    public void set_Type(ChartType value);
    internal void (ChartType );
    internal ChartType ();
    internal void (ChartType );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal bool ();
    public Marker get_Marker();
    internal Marker ();
    internal Marker ();
    public bool get_PlotOnSecondAxis();
    public void set_PlotOnSecondAxis(bool value);
    public ErrorBar get_XErrorBar();
    internal ErrorBar ();
    public ErrorBar get_YErrorBar();
    internal ErrorBar ();
    internal void (ErrorBar );
    public bool get_HasHiLoLines();
    public void set_HasHiLoLines(bool value);
    public Line get_HiLoLines();
    public bool get_HasSeriesLines();
    public void set_HasSeriesLines(bool value);
    public Line get_SeriesLines();
    public bool get_HasDropLines();
    public void set_HasDropLines(bool value);
    public Line get_DropLines();
    public bool get_HasUpDownBars();
    public void set_HasUpDownBars(bool value);
    public DropBars get_UpBars();
    public DropBars get_DownBars();
    public bool get_IsColorVaried();
    public void set_IsColorVaried(bool value);
    public short get_GapWidth();
    public void set_GapWidth(short value);
    public short get_FirstSliceAngle();
    public void set_FirstSliceAngle(short value);
    public short get_Overlap();
    public void set_Overlap(short value);
    public short get_SecondPlotSize();
    public void set_SecondPlotSize(short value);
    public ChartSplitType get_SplitType();
    public void set_SplitType(ChartSplitType value);
    public double get_SplitValue();
    public void set_SplitValue(double value);
    internal Int32[] ();
    internal void (Int32[] );
    public bool get_IsAutoSplit();
    public int get_BubbleScale();
    public void set_BubbleScale(int value);
    public BubbleSizeRepresents get_SizeRepresents();
    public void set_SizeRepresents(BubbleSizeRepresents value);
    public bool get_ShowNegativeBubbles();
    public void set_ShowNegativeBubbles(bool value);
    public int get_DoughnutHoleSize();
    public void set_DoughnutHoleSize(int value);
    public int get_Explosion();
    public void set_Explosion(int value);
    internal bool ();
    public bool get_HasRadarAxisLabels();
    public void set_HasRadarAxisLabels(bool value);
    public bool get_HasLeaderLines();
    public void set_HasLeaderLines(bool value);
    internal int ();
    internal void (int );
    public Line get_LeaderLines();
    internal Line ();
    internal ShapePropertyCollection ();
    internal int ();
    internal int ();
    public LegendEntry get_LegendEntry();
    internal LegendEntry ();
    internal bool ();
    public ShapePropertyCollection get_ShapeProperties();
    internal ShapePropertyCollection ();
    internal bool ();
    internal void (bool );
    internal Line ();
    internal Line ();
    internal ShapePropertyCollection ();
    internal bool (int , bool );
    internal bool (int );
    internal void (int , bool );
    internal int ();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Charts.SeriesCollection : CollectionBase`1<Series> {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    public Series Item { get; }
    public string CategoryData { get; public set; }
    public string SecondCategoryData { get; public set; }
    public bool IsColorVaried { get; public set; }
    internal SeriesCollection(Chart );
    internal Worksheet ();
    internal WorksheetCollection ();
    public Series get_Item(int index);
    public Series GetSeriesByOrder(int order);
    internal void ();
    internal ArrayList ();
    public void RemoveAt(int index);
    internal void (int , int );
    public string get_CategoryData();
    public void set_CategoryData(string value);
    internal void ( );
    public string get_SecondCategoryData();
    public void set_SecondCategoryData(string value);
    private void (Series );
    private void (Series );
    private void (Series );
    [ObsoleteAttribute("Use SeriesCollection.SwapSeries property, instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public void ChangeSeriesOrder(int sourceIndex, int destIndex);
    public void SwapSeries(int sourceIndex, int destIndex);
    internal void (int , int );
    internal void (int , int );
    internal void (int , Series );
    internal void (Series );
    public void SetSeriesNames(int startIndex, string area, bool isVertical);
    internal void (int , string , int );
    public int AddR1C1(string area, bool isVertical);
    public int Add(string area, bool isVertical);
    public int Add(string area, bool isVertical, bool checkLabels);
    private void (bool , Worksheet , int , int , int , int , bool );
    private bool (Cell , CalculationOptions );
    internal void (SeriesCollection , CopyOptions );
    public bool get_IsColorVaried();
    public void set_IsColorVaried(bool value);
    public void Clear();
    internal Chart ();
    internal int (bool );
    internal void ( , DataLabels );
    internal void (ChartType );
    internal IList ();
    internal void ( );
    private bool ( , ChartTextFrame );
    internal void (ListObject );
}
public class Aspose.Cells.Charts.SeriesLayoutProperties : object {
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private MapChartLabelLayout ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private MapChartRegionType ;
    [DebuggerBrowsableAttribute("0")]
private MapChartProjectionType ;
    [DebuggerBrowsableAttribute("0")]
private AxisBins ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public bool ShowConnectorLines { get; public set; }
    public bool ShowMeanLine { get; public set; }
    public bool ShowOutlierPoints { get; public set; }
    public bool ShowMeanMarker { get; public set; }
    public bool ShowInnerPoints { get; public set; }
    public Int32[] Subtotals { get; public set; }
    public QuartileCalculationType QuartileCalculation { get; public set; }
    public MapChartLabelLayout MapLabelLayout { get; public set; }
    public bool IsIntervalLeftClosed { get; public set; }
    public MapChartRegionType MapChartRegionType { get; public set; }
    public MapChartProjectionType MapChartProjectionType { get; public set; }
    internal void (SeriesLayoutProperties , CopyOptions );
    public bool get_ShowConnectorLines();
    public void set_ShowConnectorLines(bool value);
    public bool get_ShowMeanLine();
    public void set_ShowMeanLine(bool value);
    public bool get_ShowOutlierPoints();
    public void set_ShowOutlierPoints(bool value);
    public bool get_ShowMeanMarker();
    public void set_ShowMeanMarker(bool value);
    public bool get_ShowInnerPoints();
    public void set_ShowInnerPoints(bool value);
    public Int32[] get_Subtotals();
    public void set_Subtotals(Int32[] value);
    public QuartileCalculationType get_QuartileCalculation();
    public void set_QuartileCalculation(QuartileCalculationType value);
    internal  ();
    internal void ( );
    public MapChartLabelLayout get_MapLabelLayout();
    public void set_MapLabelLayout(MapChartLabelLayout value);
    public bool get_IsIntervalLeftClosed();
    public void set_IsIntervalLeftClosed(bool value);
    public MapChartRegionType get_MapChartRegionType();
    public void set_MapChartRegionType(MapChartRegionType value);
    public MapChartProjectionType get_MapChartProjectionType();
    public void set_MapChartProjectionType(MapChartProjectionType value);
    internal AxisBins ();
    internal void (AxisBins );
    internal bool (int );
    internal void (int );
    internal bool (int , bool );
    internal void (int , bool );
}
public class Aspose.Cells.Charts.Sparkline : object {
    [DebuggerBrowsableAttribute("0")]
[]
private SparklineCollection ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private short ;
    public string DataRange { get; public set; }
    public int Row { get; }
    public int Column { get; }
    internal Sparkline(SparklineCollection );
    internal Range ();
    public string get_DataRange();
    public void set_DataRange(string value);
    internal [] ();
    internal static [] (Range );
    public int get_Row();
    internal void (int );
    public int get_Column();
    internal void (int );
    private int ();
    private int ();
    private CellArea ();
    internal bool ();
    internal Bitmap (ImageOrPrintOptions );
    public void ToImage(string fileName, ImageOrPrintOptions options);
    []
public void ToImage(Stream stream, ImageOrPrintOptions options);
    internal  ();
    internal bool (CellArea );
    internal bool (int , int , int , int );
    internal bool (int , int , int , int );
    internal void (Sparkline , CopyOptions );
    internal void (Sparkline , Range , Range , CopyOptions );
    internal void (Sparkline , bool , int , int , int , CopyOptions );
}
public enum Aspose.Cells.Charts.SparklineAxisMinMaxType : Enum {
    public int value__;
    public static SparklineAxisMinMaxType AutoIndividual;
    public static SparklineAxisMinMaxType Group;
    public static SparklineAxisMinMaxType Custom;
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Charts.SparklineCollection : CollectionBase`1<Sparkline> {
    [DebuggerBrowsableAttribute("0")]
[]
private SparklineGroup ;
    public Sparkline Item { get; }
    internal SparklineCollection(SparklineGroup , string , bool , CellArea );
    internal SparklineCollection(SparklineGroup );
    internal void (CellArea );
    internal void (string , bool , CellArea );
    internal SparklineGroup ();
    public Sparkline get_Item(int index);
    internal void (Sparkline );
    public int Add(string dataRange, int row, int column);
    public void Remove(object o);
    internal Worksheet ();
    internal WorksheetCollection ();
    private int (Range , bool );
    private int (CellArea );
    private void (Range , bool );
    private string (string );
    private string (int , bool , int , bool );
    internal void (int , int , int , int );
    internal void (int , int , int , int );
}
public class Aspose.Cells.Charts.SparklineGroup : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal SparklineGroupCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private SparklineCollection ;
    [DebuggerBrowsableAttribute("0")]
private SparklineType ;
    [DebuggerBrowsableAttribute("0")]
private CellsColor ;
    [DebuggerBrowsableAttribute("0")]
private CellsColor ;
    [DebuggerBrowsableAttribute("0")]
private CellsColor ;
    [DebuggerBrowsableAttribute("0")]
private CellsColor ;
    [DebuggerBrowsableAttribute("0")]
private CellsColor ;
    [DebuggerBrowsableAttribute("0")]
private CellsColor ;
    [DebuggerBrowsableAttribute("0")]
private CellsColor ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private CellsColor ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    public SparklinePresetStyleType PresetStyle { get; public set; }
    [ObsoleteAttribute("Use SparklineGroup.Sparklines property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public SparklineCollection SparklineCollection { get; }
    public SparklineCollection Sparklines { get; }
    public SparklineType Type { get; public set; }
    public PlotEmptyCellsType PlotEmptyCellsType { get; public set; }
    public bool DisplayHidden { get; public set; }
    public bool ShowHighPoint { get; public set; }
    public CellsColor HighPointColor { get; public set; }
    public bool ShowLowPoint { get; public set; }
    public CellsColor LowPointColor { get; public set; }
    public bool ShowNegativePoints { get; public set; }
    public CellsColor NegativePointsColor { get; public set; }
    public bool ShowFirstPoint { get; public set; }
    public CellsColor FirstPointColor { get; public set; }
    public bool ShowLastPoint { get; public set; }
    public CellsColor LastPointColor { get; public set; }
    public bool ShowMarkers { get; public set; }
    public CellsColor MarkersColor { get; public set; }
    public CellsColor SeriesColor { get; public set; }
    public bool PlotRightToLeft { get; public set; }
    public double LineWeight { get; public set; }
    public CellsColor HorizontalAxisColor { get; public set; }
    public bool ShowHorizontalAxis { get; public set; }
    public string HorizontalAxisDateRange { get; public set; }
    public SparklineAxisMinMaxType VerticalAxisMaxValueType { get; public set; }
    public double VerticalAxisMaxValue { get; public set; }
    public SparklineAxisMinMaxType VerticalAxisMinValueType { get; public set; }
    public double VerticalAxisMinValue { get; public set; }
    internal SparklineGroup(SparklineGroupCollection , SparklineType , string , bool , CellArea );
    internal SparklineGroup(SparklineGroupCollection );
    private void ();
    public void ResetRanges(string dataRange, bool isVertical, CellArea locationRange);
    internal bool ();
    internal void (bool );
    public SparklinePresetStyleType get_PresetStyle();
    public void set_PresetStyle(SparklinePresetStyleType value);
    public SparklineCollection get_SparklineCollection();
    public SparklineCollection get_Sparklines();
    public SparklineType get_Type();
    public void set_Type(SparklineType value);
    public PlotEmptyCellsType get_PlotEmptyCellsType();
    public void set_PlotEmptyCellsType(PlotEmptyCellsType value);
    public bool get_DisplayHidden();
    public void set_DisplayHidden(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool get_ShowHighPoint();
    public void set_ShowHighPoint(bool value);
    public CellsColor get_HighPointColor();
    public void set_HighPointColor(CellsColor value);
    public bool get_ShowLowPoint();
    public void set_ShowLowPoint(bool value);
    public CellsColor get_LowPointColor();
    public void set_LowPointColor(CellsColor value);
    public bool get_ShowNegativePoints();
    public void set_ShowNegativePoints(bool value);
    public CellsColor get_NegativePointsColor();
    public void set_NegativePointsColor(CellsColor value);
    public bool get_ShowFirstPoint();
    public void set_ShowFirstPoint(bool value);
    public CellsColor get_FirstPointColor();
    public void set_FirstPointColor(CellsColor value);
    public bool get_ShowLastPoint();
    public void set_ShowLastPoint(bool value);
    public CellsColor get_LastPointColor();
    public void set_LastPointColor(CellsColor value);
    public bool get_ShowMarkers();
    public void set_ShowMarkers(bool value);
    public CellsColor get_MarkersColor();
    public void set_MarkersColor(CellsColor value);
    public CellsColor get_SeriesColor();
    public void set_SeriesColor(CellsColor value);
    public bool get_PlotRightToLeft();
    public void set_PlotRightToLeft(bool value);
    public double get_LineWeight();
    public void set_LineWeight(double value);
    public CellsColor get_HorizontalAxisColor();
    public void set_HorizontalAxisColor(CellsColor value);
    public bool get_ShowHorizontalAxis();
    public void set_ShowHorizontalAxis(bool value);
    public string get_HorizontalAxisDateRange();
    public void set_HorizontalAxisDateRange(string value);
    internal Range ();
    public SparklineAxisMinMaxType get_VerticalAxisMaxValueType();
    public void set_VerticalAxisMaxValueType(SparklineAxisMinMaxType value);
    public double get_VerticalAxisMaxValue();
    public void set_VerticalAxisMaxValue(double value);
    public SparklineAxisMinMaxType get_VerticalAxisMinValueType();
    public void set_VerticalAxisMinValueType(SparklineAxisMinMaxType value);
    public double get_VerticalAxisMinValue();
    public void set_VerticalAxisMinValue(double value);
    internal void (SparklineGroup , Range , Range , CopyOptions );
    internal void (SparklineGroup , bool , int , int , int , CopyOptions );
    internal void (SparklineGroup , CopyOptions );
    internal void (SparklineGroup , CopyOptions );
    private CellsColor (CellsColor , CopyOptions );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Charts.SparklineGroupCollection : CollectionBase`1<SparklineGroup> {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    public SparklineGroup Item { get; }
    internal SparklineGroupCollection(Worksheet );
    internal Worksheet ();
    public SparklineGroup get_Item(int index);
    public int Add(SparklineType type);
    public int Add(SparklineType type, string dataRange, bool isVertical, CellArea locationRange);
    internal int (SparklineGroup );
    internal void ();
    public void ClearSparklines(CellArea cellArea);
    public void ClearSparklineGroups(CellArea cellArea);
    internal void ( );
    internal void (int , int , int , int );
    internal void (int , int , int , int );
    internal void (SparklineGroupCollection , bool , int , int , int , CopyOptions );
    internal void (SparklineGroupCollection , Range , Range , CopyOptions );
    internal void (SparklineGroupCollection , CopyOptions );
}
public enum Aspose.Cells.Charts.SparklinePresetStyleType : Enum {
    public int value__;
    public static SparklinePresetStyleType Style1;
    public static SparklinePresetStyleType Style2;
    public static SparklinePresetStyleType Style3;
    public static SparklinePresetStyleType Style4;
    public static SparklinePresetStyleType Style5;
    public static SparklinePresetStyleType Style6;
    public static SparklinePresetStyleType Style7;
    public static SparklinePresetStyleType Style8;
    public static SparklinePresetStyleType Style9;
    public static SparklinePresetStyleType Style10;
    public static SparklinePresetStyleType Style11;
    public static SparklinePresetStyleType Style12;
    public static SparklinePresetStyleType Style13;
    public static SparklinePresetStyleType Style14;
    public static SparklinePresetStyleType Style15;
    public static SparklinePresetStyleType Style16;
    public static SparklinePresetStyleType Style17;
    public static SparklinePresetStyleType Style18;
    public static SparklinePresetStyleType Style19;
    public static SparklinePresetStyleType Style20;
    public static SparklinePresetStyleType Style21;
    public static SparklinePresetStyleType Style22;
    public static SparklinePresetStyleType Style23;
    public static SparklinePresetStyleType Style24;
    public static SparklinePresetStyleType Style25;
    public static SparklinePresetStyleType Style26;
    public static SparklinePresetStyleType Style27;
    public static SparklinePresetStyleType Style28;
    public static SparklinePresetStyleType Style29;
    public static SparklinePresetStyleType Style30;
    public static SparklinePresetStyleType Style31;
    public static SparklinePresetStyleType Style32;
    public static SparklinePresetStyleType Style33;
    public static SparklinePresetStyleType Style34;
    public static SparklinePresetStyleType Style35;
    public static SparklinePresetStyleType Style36;
    public static SparklinePresetStyleType Custom;
}
public enum Aspose.Cells.Charts.SparklineType : Enum {
    public int value__;
    public static SparklineType Line;
    public static SparklineType Column;
    public static SparklineType Stacked;
}
public enum Aspose.Cells.Charts.TickLabelAlignmentType : Enum {
    public int value__;
    public static TickLabelAlignmentType Center;
    public static TickLabelAlignmentType Left;
    public static TickLabelAlignmentType Right;
}
public class Aspose.Cells.Charts.TickLabelItem : object {
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    public double X { get; }
    public double Y { get; }
    public double Width { get; }
    public double Height { get; }
    internal TickLabelItem(TickLabelItem );
    public double get_X();
    public double get_Y();
    public double get_Width();
    public double get_Height();
}
public enum Aspose.Cells.Charts.TickLabelPositionType : Enum {
    public int value__;
    public static TickLabelPositionType High;
    public static TickLabelPositionType Low;
    public static TickLabelPositionType NextToAxis;
    public static TickLabelPositionType None;
}
public class Aspose.Cells.Charts.TickLabels : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Axis ;
    [DebuggerBrowsableAttribute("0")]
internal Font ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private BackgroundMode ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private TextDirectionType ;
    [DebuggerBrowsableAttribute("0")]
internal TickLabelItem[] ;
    [DebuggerBrowsableAttribute("0")]
internal TickLabelAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public Font Font { get; }
    public bool AutoScaleFont { get; public set; }
    public BackgroundMode BackgroundMode { get; public set; }
    public int RotationAngle { get; public set; }
    public bool IsAutomaticRotation { get; public set; }
    public string NumberFormat { get; public set; }
    public int Number { get; public set; }
    public bool NumberFormatLinked { get; public set; }
    public string DisplayNumberFormat { get; }
    public int Offset { get; public set; }
    [ObsoleteAttribute("Use TickLabels.ReadingOrder property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public TextDirectionType TextDirection { get; public set; }
    public TextDirectionType ReadingOrder { get; public set; }
    public ChartTextDirectionType DirectionType { get; public set; }
    public TickLabelItem[] TickLabelItems { get; }
    public TickLabelAlignmentType AlignmentType { get; public set; }
    internal TickLabels(Axis );
    public Font get_Font();
    internal bool ();
    internal Font ();
    internal Font ();
    internal int ();
    internal void (int );
    public bool get_AutoScaleFont();
    public void set_AutoScaleFont(bool value);
    internal void (bool );
    public BackgroundMode get_BackgroundMode();
    public void set_BackgroundMode(BackgroundMode value);
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    internal void (int );
    public bool get_IsAutomaticRotation();
    public void set_IsAutomaticRotation(bool value);
    public string get_NumberFormat();
    public void set_NumberFormat(string value);
    public int get_Number();
    public void set_Number(int value);
    public bool get_NumberFormatLinked();
    public void set_NumberFormatLinked(bool value);
    public string get_DisplayNumberFormat();
    public int get_Offset();
    public void set_Offset(int value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public TextDirectionType get_TextDirection();
    public void set_TextDirection(TextDirectionType value);
    public TextDirectionType get_ReadingOrder();
    public void set_ReadingOrder(TextDirectionType value);
    public ChartTextDirectionType get_DirectionType();
    public void set_DirectionType(ChartTextDirectionType value);
    public TickLabelItem[] get_TickLabelItems();
    public TickLabelAlignmentType get_AlignmentType();
    public void set_AlignmentType(TickLabelAlignmentType value);
    internal void (TickLabels );
}
public enum Aspose.Cells.Charts.TickMarkType : Enum {
    public int value__;
    public static TickMarkType Cross;
    public static TickMarkType Inside;
    public static TickMarkType None;
    public static TickMarkType Outside;
}
public enum Aspose.Cells.Charts.TimeUnit : Enum {
    public int value__;
    public static TimeUnit Days;
    public static TimeUnit Months;
    public static TimeUnit Years;
}
public class Aspose.Cells.Charts.Title : ChartTextFrame {
    [DebuggerBrowsableAttribute("0")]
[]
internal Axis ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal LegendPositionType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public string Text { get; public set; }
    public bool IsVisible { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public bool OverLay { get; public set; }
    internal Title(Chart );
    internal Title(Axis );
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    internal bool ();
    internal static void (Chart , Font , bool );
    public virtual int get_X();
    public virtual void set_X(int value);
    public virtual int get_Y();
    public virtual void set_Y(int value);
    private Int32[] ();
    internal void (Title , CopyOptions );
    internal bool ();
    public bool get_OverLay();
    public void set_OverLay(bool value);
    internal bool ();
    internal void (bool );
    public FontSetting[] Characters();
    internal virtual bool mxgp6sk8dnxjmj22quh8nhc5h4unrkty();
    internal Font ();
}
public class Aspose.Cells.Charts.Trendline : Line {
    [DebuggerBrowsableAttribute("0")]
[]
private Series ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private TrendlineType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private DataLabels ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ShapePropertyCollection ;
    public bool IsNameAuto { get; public set; }
    public TrendlineType Type { get; }
    public string Name { get; public set; }
    public int Order { get; public set; }
    public int Period { get; public set; }
    public double Forward { get; public set; }
    public double Backward { get; public set; }
    public bool DisplayEquation { get; public set; }
    public bool DisplayRSquared { get; public set; }
    public double Intercept { get; public set; }
    public DataLabels DataLabels { get; }
    public LegendEntry LegendEntry { get; }
    internal Trendline(Series , TrendlineType );
    internal Trendline(Series );
    internal Trendline(Series , TrendlineType , string );
    internal Series ();
    internal void (Series );
    private void (Series );
    public bool get_IsNameAuto();
    public void set_IsNameAuto(bool value);
    public TrendlineType get_Type();
    internal void (TrendlineType );
    public string get_Name();
    public void set_Name(string value);
    public int get_Order();
    public void set_Order(int value);
    internal void (int );
    public int get_Period();
    public void set_Period(int value);
    internal void (int );
    public double get_Forward();
    public void set_Forward(double value);
    public double get_Backward();
    public void set_Backward(double value);
    internal void (double );
    public bool get_DisplayEquation();
    public void set_DisplayEquation(bool value);
    public bool get_DisplayRSquared();
    public void set_DisplayRSquared(bool value);
    public double get_Intercept();
    public void set_Intercept(double value);
    public DataLabels get_DataLabels();
    internal DataLabels ();
    internal bool ();
    internal int ();
    internal void (int );
    internal void (int );
    public LegendEntry get_LegendEntry();
    internal LegendEntry ();
    internal void (Trendline , CopyOptions );
    internal  ();
    internal void ( );
    internal  ();
    internal ShapePropertyCollection ();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Charts.TrendlineCollection : CollectionBase`1<Trendline> {
    [DebuggerBrowsableAttribute("0")]
[]
private Series ;
    public Trendline Item { get; }
    internal TrendlineCollection(Series );
    public int Add(TrendlineType type);
    internal int (TrendlineType );
    public int Add(TrendlineType type, string name);
    public Trendline get_Item(int index);
    internal void (Trendline );
    internal void (TrendlineCollection , CopyOptions );
}
public enum Aspose.Cells.Charts.TrendlineType : Enum {
    public int value__;
    public static TrendlineType Exponential;
    public static TrendlineType Linear;
    public static TrendlineType Logarithmic;
    public static TrendlineType MovingAverage;
    public static TrendlineType Polynomial;
    public static TrendlineType Power;
}
public class Aspose.Cells.Charts.Walls : Floor {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    public int CenterX { get; }
    public int CenterY { get; }
    public int Width { get; }
    public int Depth { get; }
    public int Height { get; }
    public int CenterXPx { get; }
    public int CenterYPx { get; }
    public int WidthPx { get; }
    public int DepthPx { get; }
    public int HeightPx { get; }
    []
internal Walls(Chart );
    public int get_CenterX();
    public int get_CenterY();
    public int get_Width();
    public int get_Depth();
    public int get_Height();
    public int get_CenterXPx();
    public int get_CenterYPx();
    public int get_WidthPx();
    public int get_DepthPx();
    public int get_HeightPx();
    internal void (float , float , float , float , float );
    public int GetCubePointCount();
    public float GetCubePointXPx(int index);
    public float GetCubePointYPx(int index);
    internal void (ArrayList );
}
[DefaultMemberAttribute("Item")]
public abstract class Aspose.Cells.CollectionBase`1 : object {
    [DebuggerBrowsableAttribute("0")]
internal List`1<T> ;
    public int Capacity { get; public set; }
    public int Count { get; }
    protected List`1<T> InnerList { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public T Item { get; public set; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    protected CollectionBase`1(int capacity);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    internal int (T );
    internal void (IEnumerable`1<T> );
    private ReadOnlyCollection`1<T> ();
    public int BinarySearch(T item);
    public int BinarySearch(T item, IComparer`1<T> comparer);
    public int BinarySearch(int index, int count, T item, IComparer`1<T> comparer);
    public sealed virtual bool Contains(T item);
    internal List`1<TOutput> (Converter`2<T, TOutput> );
    public void CopyTo(T[] array);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public void CopyTo(int index, T[] array, int arrayIndex, int count);
    public bool Exists(Predicate`1<T> match);
    public T Find(Predicate`1<T> match);
    public List`1<T> FindAll(Predicate`1<T> match);
    public int FindIndex(Predicate`1<T> match);
    public int FindIndex(int startIndex, Predicate`1<T> match);
    public int FindIndex(int startIndex, int count, Predicate`1<T> match);
    public T FindLast(Predicate`1<T> match);
    public int FindLastIndex(Predicate`1<T> match);
    public int FindLastIndex(int startIndex, Predicate`1<T> match);
    public int FindLastIndex(int startIndex, int count, Predicate`1<T> match);
    internal void (Action`1<T> );
    internal List`1<T> (int , int );
    public sealed virtual int IndexOf(T item);
    public int IndexOf(T item, int index);
    public int IndexOf(T item, int index, int count);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private void (int , IEnumerable`1<T> );
    public int LastIndexOf(T item);
    public int LastIndexOf(T item, int index);
    public int LastIndexOf(T item, int index, int count);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    internal int (Predicate`1<T> );
    internal void (int , int );
    internal void ();
    internal void (int , int );
    internal void ();
    internal void (IComparer`1<T> );
    internal void (Comparison`1<T> );
    internal void (int , int , IComparer`1<T> );
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual void Clear();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private void (int , object );
    private void (object );
    private void (ICollection );
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    protected List`1<T> get_InnerList();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    protected virtual void OnClearComplete();
    protected virtual void OnClear();
}
[]
public class Aspose.Cells.ColorFilter : object {
    [DebuggerBrowsableAttribute("0")]
[]
private FilterColumn ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public bool FilterByFillColor { get; public set; }
    internal ColorFilter(FilterColumn );
    internal bool (Cells , int ,  , int ,  );
    private bool (Workbook ,  ,  );
    internal void (ColorFilter , bool );
    public bool get_FilterByFillColor();
    public void set_FilterByFillColor(bool value);
    internal int ();
    internal void (int );
    internal  ();
    internal void ( );
    public Color GetColor(WorksheetCollection sheets);
    internal void (WorksheetCollection );
}
public class Aspose.Cells.ColorScale : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal FormatCondition ;
    [DebuggerBrowsableAttribute("0")]
internal ConditionalFormattingValue ;
    [DebuggerBrowsableAttribute("0")]
internal ConditionalFormattingValue ;
    [DebuggerBrowsableAttribute("0")]
internal ConditionalFormattingValue ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public bool Is3ColorScale { get; public set; }
    public ConditionalFormattingValue MinCfvo { get; }
    public ConditionalFormattingValue MidCfvo { get; }
    public ConditionalFormattingValue MaxCfvo { get; }
    public Color MinColor { get; public set; }
    public Color MidColor { get; public set; }
    public Color MaxColor { get; public set; }
    internal ColorScale(FormatCondition );
    internal void (ColorScale , CopyOptions );
    internal static ColorScale (FormatCondition );
    public bool get_Is3ColorScale();
    public void set_Is3ColorScale(bool value);
    public ConditionalFormattingValue get_MinCfvo();
    public ConditionalFormattingValue get_MidCfvo();
    internal bool ();
    public ConditionalFormattingValue get_MaxCfvo();
    public Color get_MinColor();
    public void set_MinColor(Color value);
    public Color get_MidColor();
    public void set_MidColor(Color value);
    public Color get_MaxColor();
    public void set_MaxColor(Color value);
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
    internal  ();
    internal void ( );
}
public enum Aspose.Cells.ColorType : Enum {
    public int value__;
    public static ColorType Automatic;
    public static ColorType AutomaticIndex;
    public static ColorType RGB;
    public static ColorType IndexedColor;
    public static ColorType Theme;
}
public class Aspose.Cells.Column : object {
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
private short ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    public int Index { get; }
    public double Width { get; public set; }
    public byte GroupLevel { get; public set; }
    public bool IsHidden { get; public set; }
    public bool HasCustomStyle { get; }
    [ObsoleteAttribute("Use Column.GetStyle() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public Style Style { get; }
    public bool IsCollapsed { get; public set; }
    internal Column(int , Worksheet , double );
    internal Column(int , Worksheet , double , Column );
    public int get_Index();
    internal void (int );
    public double get_Width();
    public void set_Width(double value);
    internal int (bool );
    internal void (Worksheet , int );
    internal int ();
    internal void (int );
    internal byte ();
    internal void (byte );
    public byte get_GroupLevel();
    public void set_GroupLevel(byte value);
    internal int ();
    internal void (int );
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    internal bool ();
    internal void (bool );
    internal void (Column );
    internal void (Column , CopyOptions );
    internal bool (Column );
    public bool get_HasCustomStyle();
    internal bool (Column );
    internal void (Byte[] );
    public void ApplyStyle(Style style, StyleFlag flag);
    internal void (Style , StyleFlag );
    public Style get_Style();
    public Style GetStyle();
    public void SetStyle(Style style);
    internal Style ();
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ColumnCollection : CollectionBase`1<Column> {
    [DebuggerBrowsableAttribute("0")]
internal Column ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    public Column Item { get; }
    internal ColumnCollection(Worksheet , double );
    internal Column ();
    internal double ();
    internal void (double );
    internal int (int );
    internal bool (int );
    internal double (int , bool );
    [ObsoleteAttribute("Use Columns.GetColumnByIndex() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public Column GetByIndex(int index);
    public Column GetColumnByIndex(int index);
    internal Column (int );
    internal bool (int );
    public Column get_Item(int columnIndex);
    internal Column (int );
    internal Column (int , int );
    internal int (int );
    internal int (int );
    internal int (int , int , int );
    internal void (int , int );
    internal void (int , int );
    internal ArrayList ();
    internal void (ColumnCollection , int , int , int );
    internal void (ColumnCollection , CopyOptions );
    internal double (int , bool );
    internal int (int , int ,  );
    internal void (Int32[] ,  );
    internal int (int );
    internal void (int , int );
    internal void (int , int );
    internal void (int , int , bool );
    internal void (int , bool );
    internal void (int , int , double );
    internal int (bool , int , int , int );
}
public class Aspose.Cells.Comment : object {
    [DebuggerBrowsableAttribute("0")]
[]
private CommentShape ;
    [DebuggerBrowsableAttribute("0")]
[]
internal CommentCollection ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private short ;
    [DebuggerBrowsableAttribute("0")]
internal ThreadedCommentCollection ;
    public string Author { get; public set; }
    public CommentShape CommentShape { get; }
    public int Row { get; }
    public int Column { get; }
    public bool IsThreadedComment { get; }
    public ThreadedCommentCollection ThreadedComments { get; }
    public string Note { get; public set; }
    public string HtmlNote { get; public set; }
    public Font Font { get; }
    public bool IsVisible { get; public set; }
    public TextOrientationType TextOrientationType { get; public set; }
    public TextAlignmentType TextHorizontalAlignment { get; public set; }
    public TextAlignmentType TextVerticalAlignment { get; public set; }
    public bool AutoSize { get; public set; }
    public double HeightCM { get; public set; }
    public double WidthCM { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public double WidthInch { get; public set; }
    public double HeightInch { get; public set; }
    internal Comment(CommentCollection );
    internal Comment(CommentCollection , int , int );
    public string get_Author();
    public void set_Author(string value);
    internal bool ();
    internal void (bool );
    internal FontSettingCollection ();
    public CommentShape get_CommentShape();
    public int get_Row();
    internal void (int );
    public int get_Column();
    internal void (int );
    public bool get_IsThreadedComment();
    public ThreadedCommentCollection get_ThreadedComments();
    public string get_Note();
    public void set_Note(string value);
    public string get_HtmlNote();
    public void set_HtmlNote(string value);
    public Font get_Font();
    public void FormatCharacters(int startIndex, int length, Font font, StyleFlag flag);
    public FontSetting Characters(int startIndex, int length);
    [ObsoleteAttribute("Use Comment.GetRichFormattings() instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public ArrayList GetCharacters();
    public FontSetting[] GetRichFormattings();
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public TextOrientationType get_TextOrientationType();
    public void set_TextOrientationType(TextOrientationType value);
    public TextAlignmentType get_TextHorizontalAlignment();
    public void set_TextHorizontalAlignment(TextAlignmentType value);
    public TextAlignmentType get_TextVerticalAlignment();
    public void set_TextVerticalAlignment(TextAlignmentType value);
    internal void (Comment , CopyOptions );
    internal void (Comment , CopyOptions );
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public double get_HeightCM();
    public void set_HeightCM(double value);
    public double get_WidthCM();
    public void set_WidthCM(double value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public double get_WidthInch();
    public void set_WidthInch(double value);
    public double get_HeightInch();
    public void set_HeightInch(double value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.CommentCollection : CollectionBase`1<Comment> {
    [DebuggerBrowsableAttribute("0")]
private Comment ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    public Comment Item { get; }
    public Comment Item { get; }
    public Comment Item { get; }
    internal CommentCollection(Worksheet );
    internal Worksheet ();
    public int AddThreadedComment(int row, int column, string text, ThreadedCommentAuthor author);
    public int AddThreadedComment(string cellName, string text, ThreadedCommentAuthor author);
    public ThreadedCommentCollection GetThreadedComments(int row, int column);
    public ThreadedCommentCollection GetThreadedComments(string cellName);
    public int Add(int row, int column);
    public int Add(string cellName);
    internal int (int , int );
    public Comment get_Item(int index);
    public Comment get_Item(string cellName);
    public Comment get_Item(int row, int column);
    internal int (int , int );
    internal void (Comment );
    internal void (CellArea , int , int );
    internal void (Comment );
    public void RemoveAt(string cellName);
    public void RemoveAt(int row, int column);
    internal void (int );
    internal void (Comment );
    internal void ();
    public void Clear();
    internal void (Range , Range , bool , CopyOptions );
    internal void (CommentCollection , int , int , int );
    internal void (int , int );
    internal void (int , int );
    internal void (CellArea , int , ShiftType );
    private void (CellArea , int , ShiftType );
    private void (CellArea , int , ShiftType );
    private void (CellArea , int , ShiftType );
    private void (CellArea , int , ShiftType );
    internal void ();
    internal bool ();
    internal void ();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ConditionalFormattingCollection : CollectionBase`1<FormatConditionCollection> {
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public FormatConditionCollection Item { get; }
    internal ConditionalFormattingCollection(Worksheet );
    public void RemoveArea(int startRow, int startColumn, int totalRows, int totalColumns);
    public void Copy(ConditionalFormattingCollection cfs);
    internal void (ConditionalFormattingCollection , CopyOptions );
    internal void (CellArea , CellArea );
    internal void (ConditionalFormattingCollection , int , int , int , CopyOptions , bool );
    private List`1<FormatConditionCollection> (CellArea , bool , CellArea );
    internal void (ConditionalFormattingCollection , CellArea , CellArea , CopyOptions , bool );
    internal void (int , int , int , int );
    public FormatConditionCollection get_Item(int index);
    public int Add();
    internal int (FormatConditionCollection );
    internal void (int , int , int , int );
    internal void (ConditionalFormattingCollection , int , int , int , CopyOptions );
    private int (FormatConditionCollection , int , int , int , CopyOptions , int );
    private void ( , int , int , int , CopyOptions );
    internal void (int , CellArea , bool );
    internal void (CellArea , bool );
    internal void ();
    internal void ( );
    internal bool (SaveOptions );
    internal bool ();
    internal CellArea ();
}
public class Aspose.Cells.ConditionalFormattingIcon : object {
    [DebuggerBrowsableAttribute("0")]
private IconSetType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public Byte[] ImageData { get; }
    public IconSetType Type { get; public set; }
    public int Index { get; public set; }
    internal ConditionalFormattingIcon(IconSetType , int );
    internal void (ConditionalFormattingIcon );
    public static Byte[] GetIconImageData(IconSetType type, int index);
    public Byte[] GetImageData(Cell cell);
    public Byte[] get_ImageData();
    public IconSetType get_Type();
    public void set_Type(IconSetType value);
    public int get_Index();
    public void set_Index(int value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ConditionalFormattingIconCollection : CollectionBase`1<ConditionalFormattingIcon> {
    public ConditionalFormattingIcon Item { get; }
    internal void (ConditionalFormattingIconCollection );
    public ConditionalFormattingIcon get_Item(int index);
    public int Add(IconSetType type, int index);
    public int Add(ConditionalFormattingIcon cficon);
}
public class Aspose.Cells.ConditionalFormattingResult : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public Style ConditionalStyle { get; }
    public ConditionalFormattingIcon ConditionalFormattingIcon { get; }
    public DataBar ConditionalFormattingDataBar { get; }
    public ColorScale ConditionalFormattingColorScale { get; }
    public Color ColorScaleResult { get; }
    internal ConditionalFormattingResult( );
    public Style get_ConditionalStyle();
    internal Style ();
    public ConditionalFormattingIcon get_ConditionalFormattingIcon();
    public DataBar get_ConditionalFormattingDataBar();
    public ColorScale get_ConditionalFormattingColorScale();
    public Color get_ColorScaleResult();
}
public class Aspose.Cells.ConditionalFormattingValue : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal FormatCondition ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private FormatConditionValueType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public object Value { get; public set; }
    public FormatConditionValueType Type { get; public set; }
    public bool IsGTE { get; public set; }
    internal ConditionalFormattingValue(FormatCondition );
    internal ConditionalFormattingValue(FormatCondition , FormatConditionValueType , object );
    internal void (ConditionalFormattingValue , CopyOptions );
    internal void ();
    public object get_Value();
    public void set_Value(object value);
    internal string ();
    internal void (double );
    internal double ();
    internal bool ();
    internal Byte[] ();
    internal void (Byte[] );
    public FormatConditionValueType get_Type();
    public void set_Type(FormatConditionValueType value);
    public bool get_IsGTE();
    public void set_IsGTE(bool value);
    internal void ( );
    internal  ( );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ConditionalFormattingValueCollection : CollectionBase`1<ConditionalFormattingValue> {
    [DebuggerBrowsableAttribute("0")]
[]
internal FormatCondition ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public ConditionalFormattingValue Item { get; }
    internal ConditionalFormattingValueCollection(FormatCondition );
    internal void (ConditionalFormattingValueCollection , CopyOptions );
    public ConditionalFormattingValue get_Item(int index);
    internal void (ConditionalFormattingValue );
    public int Add(FormatConditionValueType type, string value);
}
public enum Aspose.Cells.ConsolidationFunction : Enum {
    public int value__;
    public static ConsolidationFunction Sum;
    public static ConsolidationFunction Count;
    public static ConsolidationFunction Average;
    public static ConsolidationFunction Max;
    public static ConsolidationFunction Min;
    public static ConsolidationFunction Product;
    public static ConsolidationFunction CountNums;
    public static ConsolidationFunction StdDev;
    public static ConsolidationFunction StdDevp;
    public static ConsolidationFunction Var;
    public static ConsolidationFunction Varp;
    public static ConsolidationFunction DistinctCount;
}
public enum Aspose.Cells.CopyFormatType : Enum {
    public int value__;
    public static CopyFormatType SameAsAbove;
    public static CopyFormatType SameAsBelow;
    public static CopyFormatType Clear;
}
public class Aspose.Cells.CopyOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable[] ;
    [DebuggerBrowsableAttribute("0")]
internal Range ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool KeepMacros { get; public set; }
    public bool ExtendToAdjacentRange { get; public set; }
    public bool CopyNames { get; public set; }
    public bool CopyInvalidFormulasAsValues { get; public set; }
    public bool ColumnCharacterWidth { get; public set; }
    public bool ReferToSheetWithSameName { get; public set; }
    public bool ReferToDestinationSheet { get; public set; }
    internal CopyOptions( );
    internal CopyOptions( , Cell , Cell );
    internal CopyOptions( , Workbook , Workbook );
    internal CopyOptions( , Worksheet , Worksheet , Range );
    internal int (int );
    internal  ();
    internal void (Worksheet , Worksheet );
    public bool get_KeepMacros();
    public void set_KeepMacros(bool value);
    public bool get_ExtendToAdjacentRange();
    public void set_ExtendToAdjacentRange(bool value);
    internal  ();
    internal string (string );
    internal SlicerCache (string );
    internal string (string , SlicerCache );
    internal void (int );
    private bool (Worksheet , string );
    internal bool ();
    internal bool ();
    internal bool ();
    internal Range (Range );
    internal int (int );
    internal void ();
    public bool get_CopyNames();
    public void set_CopyNames(bool value);
    internal int ();
    private void ();
    private void (int ,  , int , int );
    private void ( , int , int ,  );
    private void ( , int , int );
    private void (int );
    internal void (Worksheet , Worksheet );
    private void (int , int , int );
    private void (int , int );
    internal void (int );
    internal void ();
    internal void ();
    internal int ();
    internal int (int );
    internal int (int , int , int , int , int );
    internal int (int , int , int , int , int );
    internal bool (int );
    private int (int );
    internal int (int );
    internal int (int );
    internal int (int );
    internal void (int , int );
    internal int (int );
    internal int (int , int );
    internal Int32[] (int );
    internal void (int , int );
    internal int (int );
    public bool get_CopyInvalidFormulasAsValues();
    public void set_CopyInvalidFormulasAsValues(bool value);
    internal void ();
    public bool get_ColumnCharacterWidth();
    public void set_ColumnCharacterWidth(bool value);
    public bool get_ReferToSheetWithSameName();
    public void set_ReferToSheetWithSameName(bool value);
    internal  ();
    internal  ();
    public bool get_ReferToDestinationSheet();
    public void set_ReferToDestinationSheet(bool value);
    internal bool ();
    internal bool (int );
    internal bool (int , bool );
    internal void (int , bool );
    internal bool (int );
    internal void (int );
    internal void (CopyOptions );
}
public enum Aspose.Cells.CountryCode : Enum {
    public int value__;
    public static CountryCode Default;
    public static CountryCode USA;
    public static CountryCode Canada;
    public static CountryCode LatinAmeric;
    public static CountryCode Russia;
    public static CountryCode Egypt;
    public static CountryCode Greece;
    public static CountryCode Netherlands;
    public static CountryCode Belgium;
    public static CountryCode France;
    public static CountryCode Spain;
    public static CountryCode Hungary;
    public static CountryCode Italy;
    public static CountryCode Switzerland;
    public static CountryCode Austria;
    public static CountryCode UnitedKingdom;
    public static CountryCode Denmark;
    public static CountryCode Sweden;
    public static CountryCode Norway;
    public static CountryCode Poland;
    public static CountryCode Germany;
    public static CountryCode Mexico;
    public static CountryCode Brazil;
    public static CountryCode Australia;
    public static CountryCode NewZealand;
    public static CountryCode Thailand;
    public static CountryCode Japan;
    public static CountryCode SouthKorea;
    public static CountryCode VietNam;
    public static CountryCode China;
    public static CountryCode Turkey;
    public static CountryCode India;
    public static CountryCode Algeria;
    public static CountryCode Morocco;
    public static CountryCode Libya;
    public static CountryCode Portugal;
    public static CountryCode Iceland;
    public static CountryCode Finland;
    public static CountryCode Czech;
    public static CountryCode Taiwan;
    public static CountryCode Lebanon;
    public static CountryCode Jordan;
    public static CountryCode Syria;
    public static CountryCode Iraq;
    public static CountryCode Kuwait;
    public static CountryCode Saudi;
    public static CountryCode UnitedArabEmirates;
    public static CountryCode Israel;
    public static CountryCode Qatar;
    public static CountryCode Iran;
}
public class Aspose.Cells.CustomFilter : object {
    [DebuggerBrowsableAttribute("0")]
[]
private FilterColumn ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public FilterOperatorType FilterOperatorType { get; public set; }
    public object Criteria { get; public set; }
    internal CustomFilter(FilterColumn );
    internal void (CustomFilter );
    public FilterOperatorType get_FilterOperatorType();
    public void set_FilterOperatorType(FilterOperatorType value);
    internal FilterOperatorType ();
    internal void (FilterOperatorType );
    public object get_Criteria();
    public void set_Criteria(object value);
    internal object ();
    internal void (object );
    private byte (FilterOperatorType );
    public void SetCriteria(FilterOperatorType filterOperator, object criteria);
    internal void (FilterOperatorType , object );
    internal void (byte , object );
    internal void ( , object );
    internal void (FilterOperatorType ,  , object );
    internal void (byte ,  , object );
    internal bool ();
    internal bool (Cells ,  , int ,  );
    internal bool (object , bool );
}
[DefaultMemberAttribute("Item")]
[]
public class Aspose.Cells.CustomFilterCollection : CollectionBase`1<CustomFilter> {
    [DebuggerBrowsableAttribute("0")]
[]
internal FilterColumn ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool And { get; public set; }
    public CustomFilter Item { get; }
    internal CustomFilterCollection(FilterColumn );
    internal void (FilterColumn , CustomFilterCollection );
    public bool get_And();
    public void set_And(bool value);
    internal void (CustomFilter );
    public CustomFilter get_Item(int index);
    internal bool (object , bool );
    internal bool (Cells ,  , int ,  );
}
public class Aspose.Cells.CustomFunctionDefinition : object {
    public virtual Int32[] GetArrayModeParameters(string functionName);
}
public class Aspose.Cells.CustomImplementationFactory : object {
    [DebuggerBrowsableAttribute("0")]
internal static CustomImplementationFactory ;
    private static CustomImplementationFactory();
    public virtual MemoryStream CreateMemoryStream();
    public virtual MemoryStream CreateMemoryStream(int capacity);
    public virtual CultureInfo CreateCultureInfo(int lcid);
    public virtual Random CreateRandomInstance();
}
public class Aspose.Cells.DataBar : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal FormatCondition ;
    [DebuggerBrowsableAttribute("0")]
internal ConditionalFormattingValue ;
    [DebuggerBrowsableAttribute("0")]
internal ConditionalFormattingValue ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private DataBarBorder ;
    [DebuggerBrowsableAttribute("0")]
private NegativeBarFormat ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private DataBarAxisPosition ;
    [DebuggerBrowsableAttribute("0")]
private DataBarFillType ;
    [DebuggerBrowsableAttribute("0")]
private TextDirectionType ;
    public Color AxisColor { get; public set; }
    public DataBarAxisPosition AxisPosition { get; public set; }
    public DataBarFillType BarFillType { get; public set; }
    public TextDirectionType Direction { get; public set; }
    public DataBarBorder BarBorder { get; }
    public NegativeBarFormat NegativeBarFormat { get; }
    public ConditionalFormattingValue MinCfvo { get; }
    public ConditionalFormattingValue MaxCfvo { get; }
    public Color Color { get; public set; }
    public int MinLength { get; public set; }
    public int MaxLength { get; public set; }
    public bool ShowValue { get; public set; }
    internal DataBar(FormatCondition );
    internal void (DataBar , CopyOptions );
    internal  ();
    internal void ( );
    public Color get_AxisColor();
    public void set_AxisColor(Color value);
    public DataBarAxisPosition get_AxisPosition();
    public void set_AxisPosition(DataBarAxisPosition value);
    public DataBarFillType get_BarFillType();
    public void set_BarFillType(DataBarFillType value);
    public TextDirectionType get_Direction();
    public void set_Direction(TextDirectionType value);
    public DataBarBorder get_BarBorder();
    public NegativeBarFormat get_NegativeBarFormat();
    internal static DataBar (FormatCondition );
    public ConditionalFormattingValue get_MinCfvo();
    public ConditionalFormattingValue get_MaxCfvo();
    internal void (ConditionalFormattingValue );
    internal void (ConditionalFormattingValue );
    public Color get_Color();
    public void set_Color(Color value);
    internal  ();
    internal void ( );
    public int get_MinLength();
    public void set_MinLength(int value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public bool get_ShowValue();
    public void set_ShowValue(bool value);
    public Byte[] ToImage(Cell cell, ImageOrPrintOptions imgOpts);
}
public enum Aspose.Cells.DataBarAxisPosition : Enum {
    public int value__;
    public static DataBarAxisPosition Automatic;
    public static DataBarAxisPosition Midpoint;
    public static DataBarAxisPosition None;
}
public class Aspose.Cells.DataBarBorder : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private DataBarBorderType ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    public Color Color { get; public set; }
    public DataBarBorderType Type { get; public set; }
    internal DataBarBorder(DataBar );
    internal void (DataBarBorder );
    internal  ();
    internal void ( );
    public Color get_Color();
    public void set_Color(Color value);
    public DataBarBorderType get_Type();
    public void set_Type(DataBarBorderType value);
}
public enum Aspose.Cells.DataBarBorderType : Enum {
    public int value__;
    public static DataBarBorderType None;
    public static DataBarBorderType Solid;
}
public enum Aspose.Cells.DataBarFillType : Enum {
    public int value__;
    public static DataBarFillType Solid;
    public static DataBarFillType Gradient;
}
public enum Aspose.Cells.DataBarNegativeColorType : Enum {
    public int value__;
    public static DataBarNegativeColorType Color;
    public static DataBarNegativeColorType SameAsPositive;
}
public class Aspose.Cells.DataSorter : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
[]
private Cells ;
    [DebuggerBrowsableAttribute("0")]
private CellArea ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private DataSorterKeyCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public DataSorterKeyCollection Keys { get; }
    public bool HasHeaders { get; public set; }
    public int Key1 { get; public set; }
    public SortOrder Order1 { get; public set; }
    public int Key2 { get; public set; }
    public SortOrder Order2 { get; public set; }
    public int Key3 { get; public set; }
    public SortOrder Order3 { get; public set; }
    public bool SortLeftToRight { get; public set; }
    public bool CaseSensitive { get; public set; }
    public bool SortAsNumber { get; public set; }
    internal DataSorter(object );
    public DataSorterKeyCollection get_Keys();
    internal CellArea ();
    internal void (CellArea );
    internal object ();
    internal void (object );
    public void Clear();
    public bool get_HasHeaders();
    public void set_HasHeaders(bool value);
    public void AddKey(int key, SortOrder order);
    public void AddKey(int key, SortOrder order, string customList);
    public void AddKey(int key, SortOnType type, SortOrder order, object customList);
    public void AddKey(int key, SortOrder order, String[] customList);
    internal void (DataSorterKey );
    public int get_Key1();
    public void set_Key1(int value);
    public SortOrder get_Order1();
    public void set_Order1(SortOrder value);
    public int get_Key2();
    public void set_Key2(int value);
    public SortOrder get_Order2();
    public void set_Order2(SortOrder value);
    public int get_Key3();
    public void set_Key3(int value);
    public SortOrder get_Order3();
    public void set_Order3(SortOrder value);
    public bool get_SortLeftToRight();
    public void set_SortLeftToRight(bool value);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public bool get_SortAsNumber();
    public void set_SortAsNumber(bool value);
    public Int32[] Sort(Cells cells, int startRow, int startColumn, int endRow, int endColumn);
    public Int32[] Sort(Cells cells, CellArea area);
    public Int32[] Sort();
    private Int32[] (Int32[] );
    private Int32[] (Int32[] );
    internal static Color (Cells , int , bool );
    private void (RowCollection , int , int , int , int , bool , CellArea[] , Hashtable );
    private int (Int32[] , int );
    private void (Cell , Cell , int , Hashtable );
    private int ();
    private void (int , int , int , ArrayList );
    private ArrayList (int , ArrayList , int , int , Hashtable );
    internal void (DataSorter , CopyOptions );
}
public class Aspose.Cells.DataSorterKey : object {
    [DebuggerBrowsableAttribute("0")]
[]
private DataSorter ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal SortOrder ;
    [DebuggerBrowsableAttribute("0")]
internal SortOnType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private IconSetType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    public SortOrder Order { get; }
    public int Index { get; }
    public SortOnType Type { get; }
    public IconSetType IconSetType { get; }
    public int IconId { get; }
    public Color Color { get; }
    internal DataSorterKey(DataSorter );
    internal void (DataSorterKey , CopyOptions );
    internal DataSorter ();
    public SortOrder get_Order();
    public int get_Index();
    public SortOnType get_Type();
    public IconSetType get_IconSetType();
    public int get_IconId();
    public Color get_Color();
    internal int ();
    internal void (int );
    internal Hashtable ();
    internal void (String[] );
    internal void (IconSetType , int );
    internal void (IconSetType , int );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.DataSorterKeyCollection : CollectionBase`1<DataSorterKey> {
    public DataSorterKey Item { get; }
    public DataSorterKey get_Item(int index);
    internal void (DataSorterKey );
    internal void (int , DataSorterKey );
}
public enum Aspose.Cells.DateTimeGroupingType : Enum {
    public int value__;
    public static DateTimeGroupingType Day;
    public static DateTimeGroupingType Hour;
    public static DateTimeGroupingType Minute;
    public static DateTimeGroupingType Month;
    public static DateTimeGroupingType Second;
    public static DateTimeGroupingType Year;
}
[]
public class Aspose.Cells.DateTimeGroupItem : object {
    [DebuggerBrowsableAttribute("0")]
private DateTimeGroupingType ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    public DateTime MinValue { get; }
    public DateTimeGroupingType DateTimeGroupingType { get; public set; }
    public int Year { get; public set; }
    public int Month { get; public set; }
    public int Day { get; public set; }
    public int Hour { get; public set; }
    public int Minute { get; public set; }
    public int Second { get; public set; }
    public DateTimeGroupItem(DateTimeGroupingType type, int year, int month, int day, int hour, int minute, int second);
    internal void (DateTimeGroupItem );
    internal bool (DateTime );
    public DateTime get_MinValue();
    public DateTimeGroupingType get_DateTimeGroupingType();
    public void set_DateTimeGroupingType(DateTimeGroupingType value);
    public int get_Year();
    public void set_Year(int value);
    public int get_Month();
    public void set_Month(int value);
    public int get_Day();
    public void set_Day(int value);
    public int get_Hour();
    public void set_Hour(int value);
    public int get_Minute();
    public void set_Minute(int value);
    public int get_Second();
    public void set_Second(int value);
}
public enum Aspose.Cells.DefaultEditLanguage : Enum {
    public int value__;
    public static DefaultEditLanguage Auto;
    public static DefaultEditLanguage English;
    public static DefaultEditLanguage CJK;
}
public class Aspose.Cells.DefaultStyleSettings : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool BuiltInPreference { get; public set; }
    public string FontName { get; public set; }
    public double FontSize { get; public set; }
    public TextAlignmentType HorizontalAlignment { get; public set; }
    public TextAlignmentType VerticalAlignment { get; public set; }
    internal DefaultStyleSettings(CultureInfo );
    internal DefaultStyleSettings(DefaultStyleSettings );
    internal void (DefaultStyleSettings , bool );
    internal bool (DefaultStyleSettings );
    internal void (CultureInfo );
    internal ushort ();
    internal byte ();
    public bool get_BuiltInPreference();
    public void set_BuiltInPreference(bool value);
    public string get_FontName();
    public void set_FontName(string value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public TextAlignmentType get_HorizontalAlignment();
    public void set_HorizontalAlignment(TextAlignmentType value);
    public TextAlignmentType get_VerticalAlignment();
    public void set_VerticalAlignment(TextAlignmentType value);
}
public class Aspose.Cells.DeleteBlankOptions : DeleteOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal MergedCellsShrinkType ;
    public bool EmptyStringAsBlank { get; public set; }
    public bool EmptyFormulaValueAsBlank { get; public set; }
    public MergedCellsShrinkType MergedCellsShrinkType { get; public set; }
    internal virtual bool d3yrn9qhb6kn3xlnky5ra6cn52mvukbt();
    public bool get_EmptyStringAsBlank();
    public void set_EmptyStringAsBlank(bool value);
    public bool get_EmptyFormulaValueAsBlank();
    public void set_EmptyFormulaValueAsBlank(bool value);
    public MergedCellsShrinkType get_MergedCellsShrinkType();
    public void set_MergedCellsShrinkType(MergedCellsShrinkType value);
}
public class Aspose.Cells.DeleteOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool UpdateReference { get; public set; }
    internal virtual bool d3yrn9qhb6kn3xlnky5ra6cn52mvukbt();
    public bool get_UpdateReference();
    public void set_UpdateReference(bool value);
}
public class Aspose.Cells.DifSaveOptions : SaveOptions {
    internal DifSaveOptions(SaveOptions );
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
}
public class Aspose.Cells.DigitalSignatures.DigitalSignature : object {
    [DebuggerBrowsableAttribute("0")]
[]
private X509Certificate2 ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private DateTime ;
    [DebuggerBrowsableAttribute("0")]
private Guid ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Guid ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private XAdESType ;
    []
public X509Certificate2 Certificate { get; public set; }
    public string Comments { get; public set; }
    public DateTime SignTime { get; public set; }
    public Guid Id { get; public set; }
    public string Text { get; public set; }
    public Byte[] Image { get; public set; }
    public Guid ProviderId { get; public set; }
    public bool IsValid { get; }
    public XAdESType XAdESType { get; public set; }
    []
public DigitalSignature(X509Certificate2 certificate, string comments, DateTime signTime);
    internal DigitalSignature( , string , DateTime , bool );
    public DigitalSignature(Byte[] rawData, string password, string comments, DateTime signTime);
    public X509Certificate2 get_Certificate();
    public void set_Certificate(X509Certificate2 value);
    internal  ();
    public string get_Comments();
    public void set_Comments(string value);
    public DateTime get_SignTime();
    public void set_SignTime(DateTime value);
    public Guid get_Id();
    public void set_Id(Guid value);
    internal Guid ();
    internal void (Guid );
    public string get_Text();
    public void set_Text(string value);
    public Byte[] get_Image();
    public void set_Image(Byte[] value);
    public Guid get_ProviderId();
    public void set_ProviderId(Guid value);
    internal Guid ();
    internal void (Guid );
    internal int ();
    internal int ();
    public bool get_IsValid();
    public XAdESType get_XAdESType();
    public void set_XAdESType(XAdESType value);
    internal void (XAdESType );
}
public class Aspose.Cells.DigitalSignatures.DigitalSignatureCollection : object {
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    public void Add(DigitalSignature digitalSignature);
    [("DigitalSignature")]
public sealed virtual IEnumerator GetEnumerator();
    internal int ();
}
public enum Aspose.Cells.DigitalSignatures.XAdESType : Enum {
    public int value__;
    public static XAdESType None;
    public static XAdESType XAdES;
}
public enum Aspose.Cells.DirectoryType : Enum {
    public int value__;
    public static DirectoryType Volume;
    public static DirectoryType SameVolume;
    public static DirectoryType DownDirectory;
    public static DirectoryType UpDirectory;
}
public enum Aspose.Cells.DisplayDrawingObjects : Enum {
    public int value__;
    public static DisplayDrawingObjects DisplayShapes;
    public static DisplayDrawingObjects Placeholders;
    public static DisplayDrawingObjects Hide;
}
public class Aspose.Cells.DocxSaveOptions : PaginatedSaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public DocxSaveOptions(bool saveAsImage);
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
}
public abstract class Aspose.Cells.Drawing.ActiveXControls.ActiveXControl : ActiveXControlBase {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Font ;
    public bool IsEnabled { get; public set; }
    public bool IsLocked { get; public set; }
    public bool IsTransparent { get; public set; }
    public bool IsAutoSize { get; public set; }
    public InputMethodEditorMode IMEMode { get; public set; }
    public Font Font { get; }
    public TextAlignmentType TextAlign { get; public set; }
    [("True")]
public Byte[] Data { get; }
    internal ActiveXControl(Shape );
    internal void (object );
    internal virtual ActiveXPersistenceType xa9l26y3bs5yp9etpymwtjetsz27gsz6();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public bool get_IsTransparent();
    public void set_IsTransparent(bool value);
    public virtual bool get_IsAutoSize();
    public virtual void set_IsAutoSize(bool value);
    public InputMethodEditorMode get_IMEMode();
    public void set_IMEMode(InputMethodEditorMode value);
    public Font get_Font();
    internal void ();
    public TextAlignmentType get_TextAlign();
    public void set_TextAlign(TextAlignmentType value);
    public virtual Byte[] get_Data();
    internal virtual void xa9l26y3bs5yp9etpymwtjetsz27gsz6(ActiveXControl , CopyOptions );
}
public abstract class Aspose.Cells.Drawing.ActiveXControls.ActiveXControlBase : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal Shape ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public Workbook Workbook { get; }
    public ControlType Type { get; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public Byte[] MouseIcon { get; public set; }
    public ControlMousePointerType MousePointer { get; public set; }
    public int ForeOleColor { get; public set; }
    public int BackOleColor { get; public set; }
    public bool IsVisible { get; public set; }
    public bool Shadow { get; public set; }
    public string LinkedCell { get; public set; }
    public string ListFillRange { get; public set; }
    [("True")]
public Byte[] Data { get; }
    internal ActiveXControlBase(Shape );
    internal static ActiveXControl (ControlType , UnknownControl , Shape );
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    public Workbook get_Workbook();
    public abstract virtual ControlType get_Type();
    internal abstract virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    internal void ( );
    internal void ( , bool );
    internal virtual bool b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public virtual double get_Width();
    public virtual void set_Width(double value);
    public virtual double get_Height();
    public virtual void set_Height(double value);
    public Byte[] get_MouseIcon();
    public void set_MouseIcon(Byte[] value);
    public ControlMousePointerType get_MousePointer();
    public void set_MousePointer(ControlMousePointerType value);
    public virtual int get_ForeOleColor();
    public virtual void set_ForeOleColor(int value);
    public virtual int get_BackOleColor();
    public virtual void set_BackOleColor(int value);
    public virtual bool get_IsVisible();
    public virtual void set_IsVisible(bool value);
    public virtual bool get_Shadow();
    public virtual void set_Shadow(bool value);
    public string get_LinkedCell();
    public void set_LinkedCell(string value);
    public string get_ListFillRange();
    public void set_ListFillRange(string value);
    public virtual Byte[] get_Data();
}
public enum Aspose.Cells.Drawing.ActiveXControls.ActiveXPersistenceType : Enum {
    public int value__;
    public static ActiveXPersistenceType PropertyBag;
    public static ActiveXPersistenceType Storage;
    public static ActiveXPersistenceType Stream;
    public static ActiveXPersistenceType StreamInit;
}
public class Aspose.Cells.Drawing.ActiveXControls.CheckBoxActiveXControl : ActiveXControl {
    public ControlType Type { get; }
    public string GroupName { get; public set; }
    public ControlCaptionAlignmentType Alignment { get; public set; }
    public bool IsWordWrapped { get; public set; }
    public string Caption { get; public set; }
    public ControlPicturePositionType PicturePosition { get; public set; }
    public ControlSpecialEffectType SpecialEffect { get; public set; }
    public Byte[] Picture { get; public set; }
    public char Accelerator { get; public set; }
    public CheckValueType Value { get; public set; }
    public bool IsTripleState { get; public set; }
    internal CheckBoxActiveXControl(Shape );
    private  ();
    public virtual ControlType get_Type();
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public string get_GroupName();
    public void set_GroupName(string value);
    public ControlCaptionAlignmentType get_Alignment();
    public void set_Alignment(ControlCaptionAlignmentType value);
    public bool get_IsWordWrapped();
    public void set_IsWordWrapped(bool value);
    public string get_Caption();
    public void set_Caption(string value);
    public ControlPicturePositionType get_PicturePosition();
    public void set_PicturePosition(ControlPicturePositionType value);
    public ControlSpecialEffectType get_SpecialEffect();
    public void set_SpecialEffect(ControlSpecialEffectType value);
    public Byte[] get_Picture();
    public void set_Picture(Byte[] value);
    public char get_Accelerator();
    public void set_Accelerator(char value);
    public CheckValueType get_Value();
    public void set_Value(CheckValueType value);
    internal void (CheckValueType );
    public bool get_IsTripleState();
    public void set_IsTripleState(bool value);
}
public class Aspose.Cells.Drawing.ActiveXControls.ComboBoxActiveXControl : ActiveXControl {
    public ControlType Type { get; }
    public int MaxLength { get; public set; }
    public double ListWidth { get; public set; }
    public int BoundColumn { get; public set; }
    public int TextColumn { get; public set; }
    public int ColumnCount { get; public set; }
    public int ListRows { get; public set; }
    public ControlMatchEntryType MatchEntry { get; public set; }
    public DropButtonStyle DropButtonStyle { get; public set; }
    public ShowDropButtonType ShowDropButtonTypeWhen { get; public set; }
    public ControlListStyle ListStyle { get; public set; }
    public ControlBorderType BorderStyle { get; public set; }
    public int BorderOleColor { get; public set; }
    public ControlSpecialEffectType SpecialEffect { get; public set; }
    public bool IsEditable { get; public set; }
    public bool ShowColumnHeads { get; public set; }
    public bool IsDragBehaviorEnabled { get; public set; }
    public bool EnterFieldBehavior { get; public set; }
    public bool IsAutoWordSelected { get; public set; }
    public bool SelectionMargin { get; public set; }
    public string Value { get; public set; }
    public bool HideSelection { get; public set; }
    public double ColumnWidths { get; public set; }
    internal ComboBoxActiveXControl(Shape );
    private  ();
    public virtual ControlType get_Type();
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public double get_ListWidth();
    public void set_ListWidth(double value);
    public int get_BoundColumn();
    public void set_BoundColumn(int value);
    public int get_TextColumn();
    public void set_TextColumn(int value);
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public int get_ListRows();
    public void set_ListRows(int value);
    public ControlMatchEntryType get_MatchEntry();
    public void set_MatchEntry(ControlMatchEntryType value);
    public DropButtonStyle get_DropButtonStyle();
    public void set_DropButtonStyle(DropButtonStyle value);
    public ShowDropButtonType get_ShowDropButtonTypeWhen();
    public void set_ShowDropButtonTypeWhen(ShowDropButtonType value);
    public ControlListStyle get_ListStyle();
    public void set_ListStyle(ControlListStyle value);
    public ControlBorderType get_BorderStyle();
    public void set_BorderStyle(ControlBorderType value);
    public int get_BorderOleColor();
    public void set_BorderOleColor(int value);
    public ControlSpecialEffectType get_SpecialEffect();
    public void set_SpecialEffect(ControlSpecialEffectType value);
    internal bool ();
    internal void (bool );
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    public bool get_ShowColumnHeads();
    public void set_ShowColumnHeads(bool value);
    public bool get_IsDragBehaviorEnabled();
    public void set_IsDragBehaviorEnabled(bool value);
    public bool get_EnterFieldBehavior();
    public void set_EnterFieldBehavior(bool value);
    public virtual bool get_IsAutoWordSelected();
    public virtual void set_IsAutoWordSelected(bool value);
    public bool get_SelectionMargin();
    public void set_SelectionMargin(bool value);
    public string get_Value();
    public void set_Value(string value);
    internal void (string );
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public double get_ColumnWidths();
    public void set_ColumnWidths(double value);
}
public class Aspose.Cells.Drawing.ActiveXControls.CommandButtonActiveXControl : ActiveXControl {
    public ControlType Type { get; }
    public string Caption { get; public set; }
    public ControlPicturePositionType PicturePosition { get; public set; }
    public Byte[] Picture { get; public set; }
    public char Accelerator { get; public set; }
    public bool TakeFocusOnClick { get; public set; }
    public bool IsWordWrapped { get; public set; }
    internal CommandButtonActiveXControl(Shape );
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    public virtual ControlType get_Type();
    public string get_Caption();
    public void set_Caption(string value);
    public ControlPicturePositionType get_PicturePosition();
    public void set_PicturePosition(ControlPicturePositionType value);
    public Byte[] get_Picture();
    public void set_Picture(Byte[] value);
    public char get_Accelerator();
    public void set_Accelerator(char value);
    public bool get_TakeFocusOnClick();
    public void set_TakeFocusOnClick(bool value);
    public bool get_IsWordWrapped();
    public void set_IsWordWrapped(bool value);
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlBorderType : Enum {
    public int value__;
    public static ControlBorderType None;
    public static ControlBorderType Single;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlCaptionAlignmentType : Enum {
    public int value__;
    public static ControlCaptionAlignmentType Left;
    public static ControlCaptionAlignmentType Right;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlListStyle : Enum {
    public int value__;
    public static ControlListStyle Plain;
    public static ControlListStyle Option;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlMatchEntryType : Enum {
    public int value__;
    public static ControlMatchEntryType FirstLetter;
    public static ControlMatchEntryType Complete;
    public static ControlMatchEntryType None;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlMousePointerType : Enum {
    public int value__;
    public static ControlMousePointerType Default;
    public static ControlMousePointerType Arrow;
    public static ControlMousePointerType Cross;
    public static ControlMousePointerType IBeam;
    public static ControlMousePointerType SizeNESW;
    public static ControlMousePointerType SizeNS;
    public static ControlMousePointerType SizeNWSE;
    public static ControlMousePointerType SizeWE;
    public static ControlMousePointerType UpArrow;
    public static ControlMousePointerType HourGlass;
    public static ControlMousePointerType NoDrop;
    public static ControlMousePointerType AppStarting;
    public static ControlMousePointerType Help;
    public static ControlMousePointerType SizeAll;
    public static ControlMousePointerType Custom;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlPictureAlignmentType : Enum {
    public int value__;
    public static ControlPictureAlignmentType TopLeft;
    public static ControlPictureAlignmentType TopRight;
    public static ControlPictureAlignmentType Center;
    public static ControlPictureAlignmentType BottomLeft;
    public static ControlPictureAlignmentType BottomRight;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlPicturePositionType : Enum {
    public int value__;
    public static ControlPicturePositionType LeftTop;
    public static ControlPicturePositionType LeftCenter;
    public static ControlPicturePositionType LeftBottom;
    public static ControlPicturePositionType RightTop;
    public static ControlPicturePositionType RightCenter;
    public static ControlPicturePositionType RightBottom;
    public static ControlPicturePositionType AboveLeft;
    public static ControlPicturePositionType AboveCenter;
    public static ControlPicturePositionType AboveRight;
    public static ControlPicturePositionType BelowLeft;
    public static ControlPicturePositionType BelowCenter;
    public static ControlPicturePositionType BelowRight;
    public static ControlPicturePositionType Center;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlPictureSizeMode : Enum {
    public int value__;
    public static ControlPictureSizeMode Clip;
    public static ControlPictureSizeMode Stretch;
    public static ControlPictureSizeMode Zoom;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlScrollBarType : Enum {
    public int value__;
    public static ControlScrollBarType None;
    public static ControlScrollBarType Horizontal;
    public static ControlScrollBarType BarsVertical;
    public static ControlScrollBarType BarsBoth;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlScrollOrientation : Enum {
    public int value__;
    public static ControlScrollOrientation Auto;
    public static ControlScrollOrientation Vertical;
    public static ControlScrollOrientation Horizontal;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlSpecialEffectType : Enum {
    public int value__;
    public static ControlSpecialEffectType Flat;
    public static ControlSpecialEffectType Raised;
    public static ControlSpecialEffectType Sunken;
    public static ControlSpecialEffectType Etched;
    public static ControlSpecialEffectType Bump;
}
public enum Aspose.Cells.Drawing.ActiveXControls.ControlType : Enum {
    public int value__;
    public static ControlType CommandButton;
    public static ControlType ComboBox;
    public static ControlType CheckBox;
    public static ControlType ListBox;
    public static ControlType TextBox;
    public static ControlType SpinButton;
    public static ControlType RadioButton;
    public static ControlType Label;
    public static ControlType Image;
    public static ControlType ToggleButton;
    public static ControlType ScrollBar;
    public static ControlType BarCode;
    public static ControlType Unknown;
}
public enum Aspose.Cells.Drawing.ActiveXControls.DropButtonStyle : Enum {
    public int value__;
    public static DropButtonStyle Plain;
    public static DropButtonStyle Arrow;
    public static DropButtonStyle Ellipsis;
    public static DropButtonStyle Reduce;
}
public class Aspose.Cells.Drawing.ActiveXControls.ImageActiveXControl : ActiveXControl {
    public ControlType Type { get; }
    public bool IsAutoSize { get; public set; }
    public int BorderOleColor { get; public set; }
    public ControlBorderType BorderStyle { get; public set; }
    public ControlPictureSizeMode PictureSizeMode { get; public set; }
    public ControlSpecialEffectType SpecialEffect { get; public set; }
    public Byte[] Picture { get; public set; }
    public ControlPictureAlignmentType PictureAlignment { get; public set; }
    public bool IsTiled { get; public set; }
    internal ImageActiveXControl(Shape );
    public virtual ControlType get_Type();
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public virtual bool get_IsAutoSize();
    public virtual void set_IsAutoSize(bool value);
    public int get_BorderOleColor();
    public void set_BorderOleColor(int value);
    public ControlBorderType get_BorderStyle();
    public void set_BorderStyle(ControlBorderType value);
    public ControlPictureSizeMode get_PictureSizeMode();
    public void set_PictureSizeMode(ControlPictureSizeMode value);
    public ControlSpecialEffectType get_SpecialEffect();
    public void set_SpecialEffect(ControlSpecialEffectType value);
    public Byte[] get_Picture();
    public void set_Picture(Byte[] value);
    public ControlPictureAlignmentType get_PictureAlignment();
    public void set_PictureAlignment(ControlPictureAlignmentType value);
    public bool get_IsTiled();
    public void set_IsTiled(bool value);
}
public enum Aspose.Cells.Drawing.ActiveXControls.InputMethodEditorMode : Enum {
    public int value__;
    public static InputMethodEditorMode NoControl;
    public static InputMethodEditorMode On;
    public static InputMethodEditorMode Off;
    public static InputMethodEditorMode Disable;
    public static InputMethodEditorMode Hiragana;
    public static InputMethodEditorMode Katakana;
    public static InputMethodEditorMode KatakanaHalf;
    public static InputMethodEditorMode AlphaFull;
    public static InputMethodEditorMode Alpha;
    public static InputMethodEditorMode HangulFull;
    public static InputMethodEditorMode Hangul;
    public static InputMethodEditorMode HanziFull;
    public static InputMethodEditorMode Hanzi;
}
public class Aspose.Cells.Drawing.ActiveXControls.LabelActiveXControl : ActiveXControl {
    public ControlType Type { get; }
    public string Caption { get; public set; }
    public ControlPicturePositionType PicturePosition { get; public set; }
    public int BorderOleColor { get; public set; }
    public ControlBorderType BorderStyle { get; public set; }
    public ControlSpecialEffectType SpecialEffect { get; public set; }
    public Byte[] Picture { get; public set; }
    public char Accelerator { get; public set; }
    public bool IsWordWrapped { get; public set; }
    internal LabelActiveXControl(Shape );
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    public virtual ControlType get_Type();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public string get_Caption();
    public void set_Caption(string value);
    public ControlPicturePositionType get_PicturePosition();
    public void set_PicturePosition(ControlPicturePositionType value);
    public int get_BorderOleColor();
    public void set_BorderOleColor(int value);
    public ControlBorderType get_BorderStyle();
    public void set_BorderStyle(ControlBorderType value);
    public ControlSpecialEffectType get_SpecialEffect();
    public void set_SpecialEffect(ControlSpecialEffectType value);
    public Byte[] get_Picture();
    public void set_Picture(Byte[] value);
    public char get_Accelerator();
    public void set_Accelerator(char value);
    public bool get_IsWordWrapped();
    public void set_IsWordWrapped(bool value);
}
public class Aspose.Cells.Drawing.ActiveXControls.ListBoxActiveXControl : ActiveXControl {
    public ControlType Type { get; }
    public ControlScrollBarType ScrollBars { get; public set; }
    public double ListWidth { get; public set; }
    public int BoundColumn { get; public set; }
    public int TextColumn { get; public set; }
    public int ColumnCount { get; public set; }
    public ControlMatchEntryType MatchEntry { get; public set; }
    public ControlListStyle ListStyle { get; public set; }
    public SelectionType SelectionType { get; public set; }
    public string Value { get; public set; }
    public ControlBorderType BorderStyle { get; public set; }
    public int BorderOleColor { get; public set; }
    public ControlSpecialEffectType SpecialEffect { get; public set; }
    public bool ShowColumnHeads { get; public set; }
    public bool IntegralHeight { get; public set; }
    public double ColumnWidths { get; public set; }
    internal ListBoxActiveXControl(Shape );
    private  ();
    public virtual ControlType get_Type();
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public ControlScrollBarType get_ScrollBars();
    public void set_ScrollBars(ControlScrollBarType value);
    public double get_ListWidth();
    public void set_ListWidth(double value);
    public int get_BoundColumn();
    public void set_BoundColumn(int value);
    public int get_TextColumn();
    public void set_TextColumn(int value);
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public ControlMatchEntryType get_MatchEntry();
    public void set_MatchEntry(ControlMatchEntryType value);
    public ControlListStyle get_ListStyle();
    public void set_ListStyle(ControlListStyle value);
    public SelectionType get_SelectionType();
    public void set_SelectionType(SelectionType value);
    public string get_Value();
    public void set_Value(string value);
    internal void (string );
    public ControlBorderType get_BorderStyle();
    public void set_BorderStyle(ControlBorderType value);
    public int get_BorderOleColor();
    public void set_BorderOleColor(int value);
    public ControlSpecialEffectType get_SpecialEffect();
    public void set_SpecialEffect(ControlSpecialEffectType value);
    public bool get_ShowColumnHeads();
    public void set_ShowColumnHeads(bool value);
    public bool get_IntegralHeight();
    public void set_IntegralHeight(bool value);
    public double get_ColumnWidths();
    public void set_ColumnWidths(double value);
}
public class Aspose.Cells.Drawing.ActiveXControls.RadioButtonActiveXControl : ToggleButtonActiveXControl {
    public ControlType Type { get; }
    public string GroupName { get; public set; }
    public ControlCaptionAlignmentType Alignment { get; public set; }
    public bool IsWordWrapped { get; public set; }
    internal RadioButtonActiveXControl(Shape );
    private  ();
    public virtual ControlType get_Type();
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    public string get_GroupName();
    public void set_GroupName(string value);
    public ControlCaptionAlignmentType get_Alignment();
    public void set_Alignment(ControlCaptionAlignmentType value);
    public bool get_IsWordWrapped();
    public void set_IsWordWrapped(bool value);
}
public class Aspose.Cells.Drawing.ActiveXControls.ScrollBarActiveXControl : SpinButtonActiveXControl {
    public ControlType Type { get; }
    public int LargeChange { get; public set; }
    internal ScrollBarActiveXControl(Shape );
    public virtual ControlType get_Type();
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    public int get_LargeChange();
    public void set_LargeChange(int value);
    internal int ();
    internal void (int );
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
}
public enum Aspose.Cells.Drawing.ActiveXControls.ShowDropButtonType : Enum {
    public int value__;
    public static ShowDropButtonType Never;
    public static ShowDropButtonType Focus;
    public static ShowDropButtonType Always;
}
public class Aspose.Cells.Drawing.ActiveXControls.SpinButtonActiveXControl : ActiveXControl {
    public ControlType Type { get; }
    public int Min { get; public set; }
    public int Max { get; public set; }
    public int Position { get; public set; }
    public int SmallChange { get; public set; }
    public ControlScrollOrientation Orientation { get; public set; }
    internal SpinButtonActiveXControl(Shape );
    internal  ();
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    public virtual ControlType get_Type();
    public int get_Min();
    public void set_Min(int value);
    public int get_Max();
    public void set_Max(int value);
    public int get_Position();
    public void set_Position(int value);
    public int get_SmallChange();
    public void set_SmallChange(int value);
    public ControlScrollOrientation get_Orientation();
    public void set_Orientation(ControlScrollOrientation value);
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
}
public class Aspose.Cells.Drawing.ActiveXControls.TextBoxActiveXControl : ActiveXControl {
    public ControlType Type { get; }
    public ControlBorderType BorderStyle { get; public set; }
    public int BorderOleColor { get; public set; }
    public ControlSpecialEffectType SpecialEffect { get; public set; }
    public int MaxLength { get; public set; }
    public ControlScrollBarType ScrollBars { get; public set; }
    public char PasswordChar { get; public set; }
    public bool IsEditable { get; public set; }
    public bool IntegralHeight { get; public set; }
    public bool IsDragBehaviorEnabled { get; public set; }
    public bool EnterKeyBehavior { get; public set; }
    public bool EnterFieldBehavior { get; public set; }
    public bool TabKeyBehavior { get; public set; }
    public bool HideSelection { get; public set; }
    public bool IsAutoTab { get; public set; }
    public bool IsMultiLine { get; public set; }
    public bool IsAutoWordSelected { get; public set; }
    public bool IsWordWrapped { get; public set; }
    public string Text { get; public set; }
    public DropButtonStyle DropButtonStyle { get; public set; }
    public ShowDropButtonType ShowDropButtonTypeWhen { get; public set; }
    internal TextBoxActiveXControl(Shape );
    private  ();
    public virtual ControlType get_Type();
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public ControlBorderType get_BorderStyle();
    public void set_BorderStyle(ControlBorderType value);
    public int get_BorderOleColor();
    public void set_BorderOleColor(int value);
    public ControlSpecialEffectType get_SpecialEffect();
    public void set_SpecialEffect(ControlSpecialEffectType value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public ControlScrollBarType get_ScrollBars();
    public void set_ScrollBars(ControlScrollBarType value);
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    public bool get_IntegralHeight();
    public void set_IntegralHeight(bool value);
    public bool get_IsDragBehaviorEnabled();
    public void set_IsDragBehaviorEnabled(bool value);
    public bool get_EnterKeyBehavior();
    public void set_EnterKeyBehavior(bool value);
    public bool get_EnterFieldBehavior();
    public void set_EnterFieldBehavior(bool value);
    public bool get_TabKeyBehavior();
    public void set_TabKeyBehavior(bool value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public bool get_IsAutoTab();
    public void set_IsAutoTab(bool value);
    public bool get_IsMultiLine();
    public void set_IsMultiLine(bool value);
    public virtual bool get_IsAutoWordSelected();
    public virtual void set_IsAutoWordSelected(bool value);
    public bool get_IsWordWrapped();
    public void set_IsWordWrapped(bool value);
    public string get_Text();
    public void set_Text(string value);
    internal void (string );
    public DropButtonStyle get_DropButtonStyle();
    public void set_DropButtonStyle(DropButtonStyle value);
    public ShowDropButtonType get_ShowDropButtonTypeWhen();
    public void set_ShowDropButtonTypeWhen(ShowDropButtonType value);
}
public class Aspose.Cells.Drawing.ActiveXControls.ToggleButtonActiveXControl : ActiveXControl {
    public ControlType Type { get; }
    public string Caption { get; public set; }
    public ControlPicturePositionType PicturePosition { get; public set; }
    public ControlSpecialEffectType SpecialEffect { get; public set; }
    public Byte[] Picture { get; public set; }
    public char Accelerator { get; public set; }
    public CheckValueType Value { get; public set; }
    public bool IsTripleState { get; public set; }
    internal ToggleButtonActiveXControl(Shape );
    private  ();
    public virtual ControlType get_Type();
    internal virtual void b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    public string get_Caption();
    public void set_Caption(string value);
    public ControlPicturePositionType get_PicturePosition();
    public void set_PicturePosition(ControlPicturePositionType value);
    public ControlSpecialEffectType get_SpecialEffect();
    public void set_SpecialEffect(ControlSpecialEffectType value);
    public Byte[] get_Picture();
    public void set_Picture(Byte[] value);
    public char get_Accelerator();
    public void set_Accelerator(char value);
    public CheckValueType get_Value();
    public void set_Value(CheckValueType value);
    internal void (CheckValueType );
    public bool get_IsTripleState();
    public void set_IsTripleState(bool value);
}
public class Aspose.Cells.Drawing.ActiveXControls.UnknownControl : ActiveXControl {
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal ActiveXPersistenceType ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [("True")]
public Byte[] Data { get; }
    public ControlType Type { get; }
    internal UnknownControl(Shape );
    internal UnknownControl(Shape , Byte[] , ActiveXPersistenceType );
    internal virtual ActiveXPersistenceType xa9l26y3bs5yp9etpymwtjetsz27gsz6();
    public Byte[] GetRelationshipData(string relId);
    public virtual Byte[] get_Data();
    public virtual ControlType get_Type();
    internal virtual int b5sshd8p7kqk4ngtvh9h3uuuyhx54kkt( );
    internal virtual void xa9l26y3bs5yp9etpymwtjetsz27gsz6(ActiveXControl , CopyOptions );
}
public class Aspose.Cells.Drawing.ArcShape : Shape {
    [ObsoleteAttribute("Use Shape.Line.BeginArrowheadStyle property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadStyle BeginArrowheadStyle { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.BeginArrowheadWidth property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadWidth BeginArrowheadWidth { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.BeginArrowheadLength property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadLength BeginArrowheadLength { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.EndArrowheadStyle property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadStyle EndArrowheadStyle { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.EndArrowheadWidth property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadWidth EndArrowheadWidth { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.EndArrowheadLength property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadLength EndArrowheadLength { get; public set; }
    internal ArcShape(ShapeCollection );
    public MsoArrowheadStyle get_BeginArrowheadStyle();
    public void set_BeginArrowheadStyle(MsoArrowheadStyle value);
    public MsoArrowheadWidth get_BeginArrowheadWidth();
    public void set_BeginArrowheadWidth(MsoArrowheadWidth value);
    public MsoArrowheadLength get_BeginArrowheadLength();
    public void set_BeginArrowheadLength(MsoArrowheadLength value);
    public MsoArrowheadStyle get_EndArrowheadStyle();
    public void set_EndArrowheadStyle(MsoArrowheadStyle value);
    public MsoArrowheadWidth get_EndArrowheadWidth();
    public void set_EndArrowheadWidth(MsoArrowheadWidth value);
    public MsoArrowheadLength get_EndArrowheadLength();
    public void set_EndArrowheadLength(MsoArrowheadLength value);
}
public class Aspose.Cells.Drawing.Area : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public Color BackgroundColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public FormattingType Formatting { get; public set; }
    public bool InvertIfNegative { get; public set; }
    public FillFormat FillFormat { get; }
    public double Transparency { get; public set; }
    internal Area(Chart , object );
    internal Chart ();
    internal bool ();
    internal void ();
    internal void ();
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    internal  ();
    public Color get_ForegroundColor();
    public void set_ForegroundColor(Color value);
    internal void (Color );
    internal  ();
    public FormattingType get_Formatting();
    public void set_Formatting(FormattingType value);
    public bool get_InvertIfNegative();
    public void set_InvertIfNegative(bool value);
    internal  ();
    public FillFormat get_FillFormat();
    internal int ();
    internal void (int );
    public double get_Transparency();
    public void set_Transparency(double value);
    internal FillFormat ();
    internal void (Area , CopyOptions );
    internal bool (Area ,  );
    internal bool (Area );
    internal bool (int );
}
public class Aspose.Cells.Drawing.AutomaticFill : Fill {
    internal virtual FillType 2shawfk3flvxggtejs7dylv5mewjax38();
    internal virtual void 2shawfk3flvxggtejs7dylv5mewjax38(Fill , CopyOptions );
}
public enum Aspose.Cells.Drawing.AutoShapeType : Enum {
    public int value__;
    public static AutoShapeType NotPrimitive;
    public static AutoShapeType Rectangle;
    public static AutoShapeType RoundedRectangle;
    public static AutoShapeType Oval;
    public static AutoShapeType Diamond;
    public static AutoShapeType IsoscelesTriangle;
    public static AutoShapeType RightTriangle;
    public static AutoShapeType Parallelogram;
    public static AutoShapeType Trapezoid;
    public static AutoShapeType Hexagon;
    public static AutoShapeType Octagon;
    public static AutoShapeType Cross;
    public static AutoShapeType Star5;
    public static AutoShapeType RightArrow;
    public static AutoShapeType HomePlate;
    public static AutoShapeType Cube;
    public static AutoShapeType Balloon;
    public static AutoShapeType Seal;
    public static AutoShapeType Arc;
    public static AutoShapeType Line;
    public static AutoShapeType Plaque;
    public static AutoShapeType Can;
    public static AutoShapeType Donut;
    public static AutoShapeType TextSimple;
    public static AutoShapeType TextOctagon;
    public static AutoShapeType TextHexagon;
    public static AutoShapeType TextCurve;
    public static AutoShapeType TextWave;
    public static AutoShapeType TextRing;
    public static AutoShapeType TextOnCurve;
    public static AutoShapeType msosptTextOnRing;
    public static AutoShapeType StraightConnector;
    public static AutoShapeType BentConnector2;
    public static AutoShapeType ElbowConnector;
    public static AutoShapeType BentConnector4;
    public static AutoShapeType BentConnector5;
    public static AutoShapeType CurvedConnector2;
    public static AutoShapeType CurvedConnector;
    public static AutoShapeType CurvedConnector4;
    public static AutoShapeType CurvedConnector5;
    public static AutoShapeType LineCalloutNoBorder2;
    public static AutoShapeType LineCalloutNoBorder3;
    public static AutoShapeType LineCalloutNoBorder4;
    public static AutoShapeType LineCalloutWithAccentBar2;
    public static AutoShapeType LineCalloutWithAccentBar3;
    public static AutoShapeType LineCalloutWithAccentBar4;
    public static AutoShapeType LineCalloutWithBorder2;
    public static AutoShapeType LineCalloutWithBorder3;
    public static AutoShapeType LineCalloutWithBorder4;
    public static AutoShapeType LineCalloutWithBorderAndAccentBar2;
    public static AutoShapeType LineCalloutWithBorderAndAccentBar3;
    public static AutoShapeType LineCalloutWithBorderAndAccentBar4;
    public static AutoShapeType DownRibbon;
    public static AutoShapeType UpRibbon;
    public static AutoShapeType Chevron;
    public static AutoShapeType RegularPentagon;
    public static AutoShapeType NoSymbol;
    public static AutoShapeType Star8;
    public static AutoShapeType Star16;
    public static AutoShapeType Star32;
    public static AutoShapeType RectangularCallout;
    public static AutoShapeType RoundedRectangularCallout;
    public static AutoShapeType OvalCallout;
    public static AutoShapeType Wave;
    public static AutoShapeType FoldedCorner;
    public static AutoShapeType LeftArrow;
    public static AutoShapeType DownArrow;
    public static AutoShapeType UpArrow;
    public static AutoShapeType LeftRightArrow;
    public static AutoShapeType UpDownArrow;
    public static AutoShapeType Explosion1;
    public static AutoShapeType Explosion2;
    public static AutoShapeType LightningBolt;
    public static AutoShapeType Heart;
    public static AutoShapeType PictureFrame;
    public static AutoShapeType QuadArrow;
    public static AutoShapeType LeftArrowCallout;
    public static AutoShapeType RightArrowCallout;
    public static AutoShapeType UpArrowCallout;
    public static AutoShapeType DownArrowCallout;
    public static AutoShapeType LeftRightArrowCallout;
    public static AutoShapeType UpDownArrowCallout;
    public static AutoShapeType QuadArrowCallout;
    public static AutoShapeType Bevel;
    public static AutoShapeType LeftBracket;
    public static AutoShapeType RightBracket;
    public static AutoShapeType LeftBrace;
    public static AutoShapeType RightBrace;
    public static AutoShapeType LeftUpArrow;
    public static AutoShapeType BentUpArrow;
    public static AutoShapeType BentArrow;
    public static AutoShapeType Star24;
    public static AutoShapeType StripedRightArrow;
    public static AutoShapeType NotchedRightArrow;
    public static AutoShapeType BlockArc;
    public static AutoShapeType SmileyFace;
    public static AutoShapeType VerticalScroll;
    public static AutoShapeType HorizontalScroll;
    public static AutoShapeType CircularArrow;
    public static AutoShapeType NotchedCircularArrow;
    public static AutoShapeType UTurnArrow;
    public static AutoShapeType CurvedRightArrow;
    public static AutoShapeType CurvedLeftArrow;
    public static AutoShapeType CurvedUpArrow;
    public static AutoShapeType CurvedDownArrow;
    public static AutoShapeType CloudCallout;
    public static AutoShapeType CurvedDownRibbon;
    public static AutoShapeType CurvedUpRibbon;
    public static AutoShapeType FlowChartProcess;
    public static AutoShapeType FlowChartDecision;
    public static AutoShapeType FlowChartData;
    public static AutoShapeType FlowChartPredefinedProcess;
    public static AutoShapeType FlowChartInternalStorage;
    public static AutoShapeType FlowChartDocument;
    public static AutoShapeType FlowChartMultidocument;
    public static AutoShapeType FlowChartTerminator;
    public static AutoShapeType FlowChartPreparation;
    public static AutoShapeType FlowChartManualInput;
    public static AutoShapeType FlowChartManualOperation;
    public static AutoShapeType FlowChartConnector;
    public static AutoShapeType FlowChartCard;
    public static AutoShapeType FlowChartPunchedTape;
    public static AutoShapeType FlowChartSummingJunction;
    public static AutoShapeType FlowChartOr;
    public static AutoShapeType FlowChartCollate;
    public static AutoShapeType FlowChartSort;
    public static AutoShapeType FlowChartExtract;
    public static AutoShapeType FlowChartMerge;
    public static AutoShapeType FlowChartOfflineStorage;
    public static AutoShapeType FlowChartStoredData;
    public static AutoShapeType FlowChartSequentialAccessStorage;
    public static AutoShapeType FlowChartMagneticDisk;
    public static AutoShapeType FlowChartDirectAccessStorage;
    public static AutoShapeType FlowChartDisplay;
    public static AutoShapeType FlowChartDelay;
    public static AutoShapeType TextPlainText;
    public static AutoShapeType TextStop;
    public static AutoShapeType TextTriangle;
    public static AutoShapeType TextTriangleInverted;
    public static AutoShapeType TextChevron;
    public static AutoShapeType TextChevronInverted;
    public static AutoShapeType TextRingInside;
    public static AutoShapeType TextRingOutside;
    public static AutoShapeType TextArchUpCurve;
    public static AutoShapeType TextArchDownCurve;
    public static AutoShapeType TextCircleCurve;
    public static AutoShapeType TextButtonCurve;
    public static AutoShapeType TextArchUpPour;
    public static AutoShapeType TextArchDownPour;
    public static AutoShapeType TextCirclePour;
    public static AutoShapeType TextButtonPour;
    public static AutoShapeType TextCurveUp;
    public static AutoShapeType TextCurveDown;
    public static AutoShapeType TextCascadeUp;
    public static AutoShapeType TextCascadeDown;
    public static AutoShapeType TextWave1;
    public static AutoShapeType TextWave2;
    public static AutoShapeType TextDoubleWave1;
    public static AutoShapeType TextDoubleWave2;
    public static AutoShapeType TextInflate;
    public static AutoShapeType TextDeflate;
    public static AutoShapeType TextInflateBottom;
    public static AutoShapeType TextDeflateBottom;
    public static AutoShapeType TextInflateTop;
    public static AutoShapeType TextDeflateTop;
    public static AutoShapeType TextDeflateInflate;
    public static AutoShapeType TextDeflateInflateDeflate;
    public static AutoShapeType TextFadeRight;
    public static AutoShapeType TextFadeLeft;
    public static AutoShapeType TextFadeUp;
    public static AutoShapeType TextFadeDown;
    public static AutoShapeType TextSlantUp;
    public static AutoShapeType TextSlantDown;
    public static AutoShapeType TextCanUp;
    public static AutoShapeType TextCanDown;
    public static AutoShapeType FlowChartAlternateProcess;
    public static AutoShapeType FlowChartOffpageConnector;
    public static AutoShapeType LineCalloutNoBorder1;
    public static AutoShapeType LineCalloutWithAccentBar1;
    public static AutoShapeType LineCalloutWithBorder1;
    public static AutoShapeType LineCalloutWithBorderAndAccentBar1;
    public static AutoShapeType LeftRightUpArrow;
    public static AutoShapeType Sun;
    public static AutoShapeType Moon;
    public static AutoShapeType DoubleBracket;
    public static AutoShapeType DoubleBrace;
    public static AutoShapeType Star4;
    public static AutoShapeType DoubleWave;
    public static AutoShapeType BlankActionButton;
    public static AutoShapeType HomeActionButton;
    public static AutoShapeType HelpActionButton;
    public static AutoShapeType InformationActionButton;
    public static AutoShapeType ForwardNextActionButton;
    public static AutoShapeType BackPreviousActionButton;
    public static AutoShapeType EndActionButton;
    public static AutoShapeType BeginningActionButton;
    public static AutoShapeType ReturnActionButton;
    public static AutoShapeType DocumentActionButton;
    public static AutoShapeType SoundActionButton;
    public static AutoShapeType MovieActionButton;
    public static AutoShapeType HostControl;
    public static AutoShapeType TextBox;
    public static AutoShapeType Heptagon;
    public static AutoShapeType Decagon;
    public static AutoShapeType Dodecagon;
    public static AutoShapeType Star6;
    public static AutoShapeType Star7;
    public static AutoShapeType Star10;
    public static AutoShapeType Star12;
    public static AutoShapeType RoundSingleCornerRectangle;
    public static AutoShapeType RoundSameSideCornerRectangle;
    public static AutoShapeType RoundDiagonalCornerRectangle;
    public static AutoShapeType SnipRoundSingleCornerRectangle;
    public static AutoShapeType SnipSingleCornerRectangle;
    public static AutoShapeType SnipSameSideCornerRectangle;
    public static AutoShapeType SnipDiagonalCornerRectangle;
    public static AutoShapeType Teardrop;
    public static AutoShapeType Pie;
    public static AutoShapeType HalfFrame;
    public static AutoShapeType L_Shape;
    public static AutoShapeType DiagonalStripe;
    public static AutoShapeType Chord;
    public static AutoShapeType Cloud;
    public static AutoShapeType MathPlus;
    public static AutoShapeType MathMinus;
    public static AutoShapeType MathMultiply;
    public static AutoShapeType MathDivide;
    public static AutoShapeType MathEqual;
    public static AutoShapeType MathNotEqual;
    public static AutoShapeType LineInv;
    public static AutoShapeType NonIsoscelesTrapezoid;
    public static AutoShapeType PieWedge;
    public static AutoShapeType LeftCircularArrow;
    public static AutoShapeType LeftRightCircularArrow;
    public static AutoShapeType SwooshArrow;
    public static AutoShapeType LeftRightRibbon;
    public static AutoShapeType TextNoShape;
    public static AutoShapeType Gear6;
    public static AutoShapeType Gear9;
    public static AutoShapeType Funnel;
    public static AutoShapeType CornerTabs;
    public static AutoShapeType SquareTabs;
    public static AutoShapeType PlaqueTabs;
    public static AutoShapeType ChartX;
    public static AutoShapeType ChartStar;
    public static AutoShapeType ChartPlus;
    public static AutoShapeType Frame;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static AutoShapeType Model3D;
    public static AutoShapeType RoundCallout;
    public static AutoShapeType TextArchLeftPour;
    public static AutoShapeType TextArchRightPour;
    public static AutoShapeType TextArchLeftCurve;
    public static AutoShapeType TextArchRightCurve;
    public static AutoShapeType Unknown;
}
public class Aspose.Cells.Drawing.BaseShapeGuide : object {
    protected string m_name;
    protected string m_formala;
    internal BaseShapeGuide(string , string );
    internal string ();
    internal string ();
    internal virtual void lpnct9dvyq7k65efbxdjxrqy8v9sxpfw(BaseShapeGuide );
}
public class Aspose.Cells.Drawing.Bevel : object {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal BevelType ;
    public double Width { get; public set; }
    public double Height { get; public set; }
    public BevelPresetType Type { get; public set; }
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public BevelPresetType get_Type();
    public void set_Type(BevelPresetType value);
    internal BevelType ();
    internal void (BevelType );
    internal void (Bevel );
    internal bool (Bevel );
}
public enum Aspose.Cells.Drawing.BevelPresetType : Enum {
    public int value__;
    public static BevelPresetType None;
    public static BevelPresetType Angle;
    public static BevelPresetType ArtDeco;
    public static BevelPresetType Circle;
    public static BevelPresetType Convex;
    public static BevelPresetType CoolSlant;
    public static BevelPresetType Cross;
    public static BevelPresetType Divot;
    public static BevelPresetType HardEdge;
    public static BevelPresetType RelaxedInset;
    public static BevelPresetType Riblet;
    public static BevelPresetType Slope;
    public static BevelPresetType SoftRound;
}
public enum Aspose.Cells.Drawing.BevelType : Enum {
    public int value__;
    public static BevelType None;
    public static BevelType Angle;
    public static BevelType ArtDeco;
    public static BevelType Circle;
    public static BevelType Convex;
    public static BevelType CoolSlant;
    public static BevelType Cross;
    public static BevelType Divot;
    public static BevelType HardEdge;
    public static BevelType RelaxedInset;
    public static BevelType Riblet;
    public static BevelType Slope;
    public static BevelType SoftRound;
}
public class Aspose.Cells.Drawing.Button : Shape {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    internal Button(ShapeCollection );
    internal void (Button , CopyOptions );
}
public class Aspose.Cells.Drawing.CellsDrawing : Shape {
    internal CellsDrawing(ShapeCollection );
    internal CellsDrawing(ShapeCollection , AutoShapeType );
}
public class Aspose.Cells.Drawing.ChartShape : Shape {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    public Chart Chart { get; }
    internal ChartShape(ShapeCollection , Chart );
    internal Chart ();
    public Chart get_Chart();
    internal void (ChartShape , CopyOptions );
}
public class Aspose.Cells.Drawing.CheckBox : Shape {
    [DebuggerBrowsableAttribute("0")]
private CheckValueType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool Value { get; public set; }
    [ObsoleteAttribute("Use CheckBox.CheckValueType property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public CheckValueType CheckValue { get; public set; }
    public CheckValueType CheckedValue { get; public set; }
    public bool Shadow { get; public set; }
    internal CheckBox(ShapeCollection );
    public bool get_Value();
    public void set_Value(bool value);
    public CheckValueType get_CheckValue();
    public void set_CheckValue(CheckValueType value);
    public CheckValueType get_CheckedValue();
    public void set_CheckedValue(CheckValueType value);
    internal void (CheckValueType );
    internal CheckValueType ();
    public bool get_Shadow();
    public void set_Shadow(bool value);
    internal void (CheckBox , CopyOptions );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.CheckBoxCollection : CollectionBase`1<CheckBox> {
    [DebuggerBrowsableAttribute("0")]
[]
private ShapeCollection ;
    public CheckBox Item { get; }
    internal CheckBoxCollection(ShapeCollection );
    public int Add(int upperLeftRow, int upperLeftColumn, int height, int width);
    public CheckBox get_Item(int index);
    internal void (CheckBox );
    internal void (CheckBox );
    internal void (int );
}
public enum Aspose.Cells.Drawing.CheckValueType : Enum {
    public int value__;
    public static CheckValueType UnChecked;
    public static CheckValueType Checked;
    public static CheckValueType Mixed;
}
public class Aspose.Cells.Drawing.ColorHelper : object {
    public static Color FromOleColor(int oleColor);
    internal static Color (int );
    public static int ToOleColor(Color color, Workbook workbook);
    internal static Color (string );
}
public class Aspose.Cells.Drawing.ComboBox : Shape {
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public int SelectedIndex { get; public set; }
    public string SelectedValue { get; }
    public Cell SelectedCell { get; }
    public bool Shadow { get; public set; }
    public int DropDownLines { get; public set; }
    internal ComboBox(ShapeCollection );
    internal ComboBox(ShapeCollection , object );
    internal object ();
    internal virtual Byte[] 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths();
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(Byte[] );
    internal virtual Byte[] 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths();
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(Byte[] );
    internal int ();
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    internal void (int );
    public string get_SelectedValue();
    public Cell get_SelectedCell();
    public bool get_Shadow();
    public void set_Shadow(bool value);
    public int get_DropDownLines();
    public void set_DropDownLines(int value);
    internal void (ComboBox , CopyOptions );
}
public class Aspose.Cells.Drawing.CommentShape : Shape {
    [DebuggerBrowsableAttribute("0")]
private Comment ;
    public Comment Comment { get; }
    internal CommentShape(ShapeCollection , Comment );
    internal Comment ();
    internal void ();
    internal void (int , int );
    public Comment get_Comment();
    internal void (CommentShape , CopyOptions );
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(CellArea , int );
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(CellArea , int );
    internal virtual bool 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(int , int , int , int );
    internal virtual bool 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(int , int , int , int );
}
public class Aspose.Cells.Drawing.CustomGeometry : Geometry {
    [DebuggerBrowsableAttribute("0")]
[]
private Shape ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private ShapePathCollection ;
    [DebuggerBrowsableAttribute("0")]
private ShapeGuideCollection ;
    public ShapePathCollection Paths { get; }
    internal CustomGeometry(Shape );
    internal virtual bool ajaxk7kfp4zxj7ddd2gwkusgbhdmjk38();
    internal string ();
    internal void (string );
    internal ShapePathCollection ();
    public ShapePathCollection get_Paths();
    internal ShapeGuideCollection ();
    internal ShapeGuideCollection ();
    internal void ();
    internal double (Hashtable , string );
    internal double (ShapeGuide , Hashtable );
    internal virtual void ajaxk7kfp4zxj7ddd2gwkusgbhdmjk38(Geometry );
}
public class Aspose.Cells.Drawing.CustomXmlShape : Shape {
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    internal CustomXmlShape(ShapeCollection );
    internal virtual int se5cksze9xucdyex6xvgxrecmujrtdd8();
    internal virtual void se5cksze9xucdyex6xvgxrecmujrtdd8(int );
    internal Picture ();
    internal void (CustomXmlShape , CopyOptions );
}
public enum Aspose.Cells.Drawing.DataLabelShapeType : Enum {
    public int value__;
    public static DataLabelShapeType Rect;
    public static DataLabelShapeType RoundRect;
    public static DataLabelShapeType Ellipse;
    public static DataLabelShapeType RightArrowCallout;
    public static DataLabelShapeType DownArrowCallout;
    public static DataLabelShapeType LeftArrowCallout;
    public static DataLabelShapeType UpArrowCallout;
    public static DataLabelShapeType WedgeRectCallout;
    public static DataLabelShapeType WedgeRoundRectCallout;
    public static DataLabelShapeType WedgeEllipseCallout;
    public static DataLabelShapeType LineCallout;
    public static DataLabelShapeType BentLineCallout;
    public static DataLabelShapeType LineWithAccentBarCallout;
    public static DataLabelShapeType BentLineWithAccentBarCallout;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static DataLabelShapeType Line;
}
public class Aspose.Cells.Drawing.DialogBox : Shape {
    internal DialogBox(ShapeCollection );
}
public class Aspose.Cells.Drawing.Equations.AccentEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
private EquationCombiningCharacterType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public string AccentCharacter { get; public set; }
    public EquationCombiningCharacterType AccentCharacterType { get; public set; }
    internal AccentEquationNode(Workbook , EquationNode , EquationNodeType );
    internal bool (int );
    internal void (int );
    public string get_AccentCharacter();
    public void set_AccentCharacter(string value);
    public EquationCombiningCharacterType get_AccentCharacterType();
    public void set_AccentCharacterType(EquationCombiningCharacterType value);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.ArrayEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    internal ArrayEquationNode(Workbook , EquationNode , EquationNodeType );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.BarEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
private EquationCharacterPositionType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public EquationCharacterPositionType BarPosition { get; public set; }
    internal BarEquationNode(Workbook , EquationNode , EquationNodeType );
    internal bool (int );
    internal void (int );
    public EquationCharacterPositionType get_BarPosition();
    public void set_BarPosition(EquationCharacterPositionType value);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.BorderBoxEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal BorderBoxEquationNode(Workbook , EquationNode , EquationNodeType );
    internal bool (int );
    internal void (int );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.BoxEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal BoxEquationNode(Workbook , EquationNode , EquationNodeType );
    internal bool (int );
    internal void (int );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
}
public class Aspose.Cells.Drawing.Equations.DelimiterEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private EquationDelimiterShapeType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public string BeginChar { get; public set; }
    public string EndChar { get; public set; }
    public bool NaryGrow { get; public set; }
    public string SeparatorChar { get; public set; }
    public EquationDelimiterShapeType DelimiterShape { get; public set; }
    internal DelimiterEquationNode(Workbook , EquationNode , EquationNodeType );
    internal bool (int );
    internal void (int );
    public string get_BeginChar();
    public void set_BeginChar(string value);
    public string get_EndChar();
    public void set_EndChar(string value);
    public bool get_NaryGrow();
    public void set_NaryGrow(bool value);
    public string get_SeparatorChar();
    public void set_SeparatorChar(string value);
    public EquationDelimiterShapeType get_DelimiterShape();
    public void set_DelimiterShape(EquationDelimiterShapeType value);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public enum Aspose.Cells.Drawing.Equations.EquationCharacterPositionType : Enum {
    public int value__;
    public static EquationCharacterPositionType Top;
    public static EquationCharacterPositionType Bottom;
}
public enum Aspose.Cells.Drawing.Equations.EquationCombiningCharacterType : Enum {
    public int value__;
    public static EquationCombiningCharacterType Unknown;
    public static EquationCombiningCharacterType DotAbove;
    public static EquationCombiningCharacterType Diaeresis;
    public static EquationCombiningCharacterType ThreeDotsAbove;
    public static EquationCombiningCharacterType CircumflexAccent;
    public static EquationCombiningCharacterType Caron;
    public static EquationCombiningCharacterType AcuteAccent;
    public static EquationCombiningCharacterType GraveAccent;
    public static EquationCombiningCharacterType Breve;
    public static EquationCombiningCharacterType Tilde;
    public static EquationCombiningCharacterType Overline;
    public static EquationCombiningCharacterType DoubleOverline;
    public static EquationCombiningCharacterType TopCurlyBracket;
    public static EquationCombiningCharacterType BottomCurlyBracket;
    public static EquationCombiningCharacterType LeftArrowAbove;
    public static EquationCombiningCharacterType RightArrowAbove;
    public static EquationCombiningCharacterType LeftRightArrowAbove;
    public static EquationCombiningCharacterType LeftHarpoonAbove;
    public static EquationCombiningCharacterType RightHarpoonAbove;
    public static EquationCombiningCharacterType LeftwardsArrow;
    public static EquationCombiningCharacterType RightwardsArrow;
    public static EquationCombiningCharacterType LeftRightArrow;
    public static EquationCombiningCharacterType LeftwardsDoubleArrow;
    public static EquationCombiningCharacterType RightwardsDoubleArrow;
    public static EquationCombiningCharacterType LeftRightDoubleArrow;
}
public class Aspose.Cells.Drawing.Equations.EquationComponentNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal EquationComponentNode(Workbook , EquationNode , EquationNodeType );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
    internal bool (int );
    internal void (int );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
}
public enum Aspose.Cells.Drawing.Equations.EquationDelimiterShapeType : Enum {
    public int value__;
    public static EquationDelimiterShapeType Centered;
    public static EquationDelimiterShapeType Match;
}
public enum Aspose.Cells.Drawing.Equations.EquationFractionType : Enum {
    public int value__;
    public static EquationFractionType Bar;
    public static EquationFractionType NoBar;
    public static EquationFractionType Linear;
    public static EquationFractionType Skewed;
}
public enum Aspose.Cells.Drawing.Equations.EquationHorizontalJustificationType : Enum {
    public int value__;
    public static EquationHorizontalJustificationType Center;
    public static EquationHorizontalJustificationType CenterGroup;
    public static EquationHorizontalJustificationType Left;
    public static EquationHorizontalJustificationType Right;
}
public enum Aspose.Cells.Drawing.Equations.EquationLimitLocationType : Enum {
    public int value__;
    public static EquationLimitLocationType UndOvr;
    public static EquationLimitLocationType SubSup;
}
public enum Aspose.Cells.Drawing.Equations.EquationMathematicalOperatorType : Enum {
    public int value__;
    public static EquationMathematicalOperatorType Unknown;
    public static EquationMathematicalOperatorType ForAll;
    public static EquationMathematicalOperatorType Complement;
    public static EquationMathematicalOperatorType PartialDifferential;
    public static EquationMathematicalOperatorType Exists;
    public static EquationMathematicalOperatorType NotExists;
    public static EquationMathematicalOperatorType EmptySet;
    public static EquationMathematicalOperatorType Increment;
    public static EquationMathematicalOperatorType Nabla;
    public static EquationMathematicalOperatorType ElementOf;
    public static EquationMathematicalOperatorType NotAnElementOf;
    public static EquationMathematicalOperatorType SmallElementOf;
    public static EquationMathematicalOperatorType Contain;
    public static EquationMathematicalOperatorType NotContain;
    public static EquationMathematicalOperatorType SmallContain;
    public static EquationMathematicalOperatorType EndOfProof;
    public static EquationMathematicalOperatorType NaryProduct;
    public static EquationMathematicalOperatorType NaryCoproduct;
    public static EquationMathematicalOperatorType NarySummation;
    public static EquationMathematicalOperatorType LogicalAnd;
    public static EquationMathematicalOperatorType LogicalOr;
    public static EquationMathematicalOperatorType Intersection;
    public static EquationMathematicalOperatorType Union;
    public static EquationMathematicalOperatorType Integral;
    public static EquationMathematicalOperatorType DoubleIntegral;
    public static EquationMathematicalOperatorType TripleIntegral;
    public static EquationMathematicalOperatorType ContourIntegral;
    public static EquationMathematicalOperatorType SurfaceIntegral;
    public static EquationMathematicalOperatorType VolumeIntegral;
    public static EquationMathematicalOperatorType Clockwise;
    public static EquationMathematicalOperatorType ClockwiseContourIntegral;
    public static EquationMathematicalOperatorType AnticlockwiseContourIntegral;
    public static EquationMathematicalOperatorType NaryLogicalAnd;
    public static EquationMathematicalOperatorType NaryLogicalOr;
    public static EquationMathematicalOperatorType NaryIntersection;
    public static EquationMathematicalOperatorType NaryUnion;
}
public abstract class Aspose.Cells.Drawing.Equations.EquationNode : FontSetting {
    [DebuggerBrowsableAttribute("0")]
[]
internal FontSetting ;
    [DebuggerBrowsableAttribute("0")]
internal SizeF ;
    [DebuggerBrowsableAttribute("0")]
private EquationNodeType ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<EquationNode> ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    public EquationNode ParentNode { get; public set; }
    public TextNodeType Type { get; }
    public EquationNodeType EquationType { get; }
    internal EquationNode(Workbook , FontSetting , EquationNodeType );
    internal Workbook ();
    public EquationNode get_ParentNode();
    public void set_ParentNode(EquationNode value);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    public string ToLaTeX();
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    public string ToMathML();
    [("True")]
internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
    internal void (StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    internal virtual void da73tyc4ytaud2kb8z9jfbu4z5jd57dn(FontSetting , CopyOptions );
    public EquationNode AddChild(EquationNodeType equationType);
    public void AddChild(EquationNode node);
    public EquationNode InsertChild(int index, EquationNodeType equationType);
    public EquationNode InsertAfter(EquationNodeType equationType);
    public EquationNode InsertBefore(EquationNodeType equationType);
    public EquationNode GetChild(int index);
    public void Remove();
    public void RemoveChild(EquationNode node);
    public void RemoveChild(int index);
    public void RemoveAllChildren();
    public virtual bool Equals(object obj);
    public static EquationNode CreateNode(EquationNodeType equationType, Workbook workbook, EquationNode parent);
    internal EquationNode (EquationNodeType , Workbook , EquationNode );
    public virtual TextNodeType get_Type();
    public EquationNodeType get_EquationType();
    internal List`1<EquationNode> ();
    internal bool (int );
    internal void (int );
    internal ArrayList ();
}
public class Aspose.Cells.Drawing.Equations.EquationNodeParagraph : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal TextParagraph ;
    [DebuggerBrowsableAttribute("0")]
private EquationHorizontalJustificationType ;
    public EquationHorizontalJustificationType Justification { get; public set; }
    internal EquationNodeParagraph(Workbook , FontSetting , TextParagraph );
    private EquationHorizontalJustificationType (TextAlignmentType );
    public EquationHorizontalJustificationType get_Justification();
    public void set_Justification(EquationHorizontalJustificationType value);
    public virtual bool Equals(object obj);
}
public enum Aspose.Cells.Drawing.Equations.EquationNodeType : Enum {
    public int value__;
    public static EquationNodeType UnKnow;
    public static EquationNodeType Text;
    public static EquationNodeType Base;
    public static EquationNodeType Denominator;
    public static EquationNodeType Numerator;
    public static EquationNodeType FunctionName;
    public static EquationNodeType Subscript;
    public static EquationNodeType Superscript;
    public static EquationNodeType Degree;
    public static EquationNodeType MatrixRow;
    public static EquationNodeType Limit;
    public static EquationNodeType EquationParagraph;
    [ObsoleteAttribute("Use EquationNodeType.Mathematical instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType MathematicalEquation;
    [ObsoleteAttribute("Use EquationNodeType.Fraction instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType FractionEquation;
    [ObsoleteAttribute("Use EquationNodeType.Function instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType FunctionEquation;
    [ObsoleteAttribute("Use EquationNodeType.Delimiter instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType DelimiterEquation;
    [ObsoleteAttribute("Use EquationNodeType.Nary instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType NaryEquation;
    [ObsoleteAttribute("Use EquationNodeType.Radical instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType RadicalEquation;
    [ObsoleteAttribute("Use EquationNodeType.Sup instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType SuperscriptEquation;
    [ObsoleteAttribute("Use EquationNodeType.Sub instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType SubscriptEquation;
    [ObsoleteAttribute("Use EquationNodeType.SubSup instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType SubSupEquation;
    [ObsoleteAttribute("Use EquationNodeType.PreSubSup instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType PreSubSupEquation;
    [ObsoleteAttribute("Use EquationNodeType.Accent instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType AccentEquation;
    [ObsoleteAttribute("Use EquationNodeType.Bar instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType BarEquation;
    [ObsoleteAttribute("Use EquationNodeType.BorderBox instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType BorderBoxEquation;
    [ObsoleteAttribute("Use EquationNodeType.Box instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType BoxEquation;
    [ObsoleteAttribute("Use EquationNodeType.GroupChr instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType GroupCharacterEquation;
    [ObsoleteAttribute("Use EquationNodeType.Matrix instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static EquationNodeType MatrixEquation;
    public static EquationNodeType LowerLimit;
    public static EquationNodeType UpperLimit;
    public static EquationNodeType Mathematical;
    public static EquationNodeType Fraction;
    public static EquationNodeType Function;
    public static EquationNodeType Delimiter;
    public static EquationNodeType Nary;
    public static EquationNodeType Radical;
    public static EquationNodeType Sup;
    public static EquationNodeType Sub;
    public static EquationNodeType SubSup;
    public static EquationNodeType PreSubSup;
    public static EquationNodeType Accent;
    public static EquationNodeType Bar;
    public static EquationNodeType BorderBox;
    public static EquationNodeType Box;
    public static EquationNodeType GroupChr;
    public static EquationNodeType Matrix;
    public static EquationNodeType ArrayEquation;
}
public enum Aspose.Cells.Drawing.Equations.EquationVerticalJustificationType : Enum {
    public int value__;
    public static EquationVerticalJustificationType Top;
    public static EquationVerticalJustificationType Center;
    public static EquationVerticalJustificationType Bottom;
}
public class Aspose.Cells.Drawing.Equations.FractionEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
private EquationFractionType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public EquationFractionType FractionType { get; public set; }
    internal FractionEquationNode(Workbook , EquationNode , EquationNodeType );
    public EquationFractionType get_FractionType();
    public void set_FractionType(EquationFractionType value);
    internal bool (int );
    internal void (int );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
}
public class Aspose.Cells.Drawing.Equations.FunctionEquationNode : EquationNode {
    internal FunctionEquationNode(Workbook , EquationNode , EquationNodeType );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.GroupCharacterEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private EquationCombiningCharacterType ;
    [DebuggerBrowsableAttribute("0")]
private EquationCharacterPositionType ;
    [DebuggerBrowsableAttribute("0")]
private EquationCharacterPositionType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public string GroupChr { get; public set; }
    public EquationCombiningCharacterType ChrType { get; public set; }
    public EquationCharacterPositionType Position { get; public set; }
    public EquationCharacterPositionType VertJc { get; public set; }
    internal GroupCharacterEquationNode(Workbook , EquationNode , EquationNodeType );
    internal bool (int );
    internal void (int );
    public string get_GroupChr();
    public void set_GroupChr(string value);
    public EquationCombiningCharacterType get_ChrType();
    public void set_ChrType(EquationCombiningCharacterType value);
    public EquationCharacterPositionType get_Position();
    public void set_Position(EquationCharacterPositionType value);
    public EquationCharacterPositionType get_VertJc();
    public void set_VertJc(EquationCharacterPositionType value);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.LimLowUppEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
private EquationCharacterPositionType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal LimLowUppEquationNode(Workbook , EquationNode , EquationNodeType );
    internal bool (int );
    internal void (int );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.MathematicalEquationNode : EquationNode {
    internal MathematicalEquationNode(Workbook , EquationNode , EquationNodeType );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.MatrixEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
private EquationVerticalJustificationType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private EquationHorizontalJustificationType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public EquationVerticalJustificationType BaseJc { get; public set; }
    public bool IsHidePlaceholder { get; public set; }
    internal MatrixEquationNode(Workbook , EquationNode , EquationNodeType );
    internal bool (int );
    internal void (int );
    public EquationVerticalJustificationType get_BaseJc();
    public void set_BaseJc(EquationVerticalJustificationType value);
    internal int ();
    internal void (int );
    internal EquationHorizontalJustificationType ();
    internal void (EquationHorizontalJustificationType );
    public bool get_IsHidePlaceholder();
    public void set_IsHidePlaceholder(bool value);
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.NaryEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
private EquationMathematicalOperatorType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private EquationLimitLocationType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public bool IsHideSubscript { get; public set; }
    public bool IsHideSuperscript { get; public set; }
    public EquationLimitLocationType LimitLocation { get; public set; }
    public string NaryOperator { get; public set; }
    public EquationMathematicalOperatorType NaryOperatorType { get; public set; }
    public bool NaryGrow { get; public set; }
    internal NaryEquationNode(Workbook , EquationNode , EquationNodeType );
    public bool get_IsHideSubscript();
    public void set_IsHideSubscript(bool value);
    public bool get_IsHideSuperscript();
    public void set_IsHideSuperscript(bool value);
    public EquationLimitLocationType get_LimitLocation();
    public void set_LimitLocation(EquationLimitLocationType value);
    public string get_NaryOperator();
    public void set_NaryOperator(string value);
    public EquationMathematicalOperatorType get_NaryOperatorType();
    public void set_NaryOperatorType(EquationMathematicalOperatorType value);
    public bool get_NaryGrow();
    public void set_NaryGrow(bool value);
    internal bool (int );
    internal void (int );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.RadicalEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public bool IsDegHide { get; public set; }
    internal RadicalEquationNode(Workbook , EquationNode , EquationNodeType );
    public bool get_IsDegHide();
    public void set_IsDegHide(bool value);
    internal bool (int );
    internal void (int );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.SubSupEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
internal float ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    internal SubSupEquationNode(Workbook , EquationNode , EquationNodeType );
    internal bool (int );
    internal void (int );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
}
public class Aspose.Cells.Drawing.Equations.TextRunEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal TextOptions ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    public string Text { get; public set; }
    internal TextRunEquationNode(Workbook , EquationNode );
    public string get_Text();
    public void set_Text(string value);
    internal TextOptions ();
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(StringBuilder );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8( );
    internal void ( , string , bool );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
    internal string (string );
}
public class Aspose.Cells.Drawing.Equations.UnknowEquationNode : EquationNode {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    internal UnknowEquationNode(Workbook , EquationNode , EquationNodeType );
    internal virtual void gg5vh7zwhgt9b98bshtj7msb7qnuznv8(EquationNode , CopyOptions );
    public virtual bool Equals(object obj);
}
public abstract class Aspose.Cells.Drawing.Fill : object {
    internal abstract virtual FillType 2shawfk3flvxggtejs7dylv5mewjax38();
    internal abstract virtual void 2shawfk3flvxggtejs7dylv5mewjax38(Fill , CopyOptions );
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Aspose.Cells.Drawing.FillFormat : object {
    [DebuggerBrowsableAttribute("0")]
internal Fill ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [ObsoleteAttribute("Use FillFormat.FillType  instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public FillType Type { get; public set; }
    public FillType FillType { get; public set; }
    public double Transparency { get; public set; }
    [ObsoleteAttribute("Use FillFormat.FillType instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public FormatSetType SetType { get; public set; }
    public GradientFill GradientFill { get; }
    public TextureFill TextureFill { get; }
    public SolidFill SolidFill { get; }
    public PatternFill PatternFill { get; }
    public GradientColorType GradientColorType { get; }
    public GradientStyleType GradientStyle { get; }
    public Color GradientColor1 { get; }
    public Color GradientColor2 { get; }
    public double GradientDegree { get; }
    public int GradientVariant { get; }
    public GradientPresetType PresetColor { get; }
    public TextureType Texture { get; public set; }
    public FillPattern Pattern { get; public set; }
    public FillPictureType PictureFormatType { get; public set; }
    public double Scale { get; public set; }
    public Byte[] ImageData { get; public set; }
    internal FillFormat( );
    internal virtual Color m383kmkfyvgpp8f2jerrad9an7gjfrjf();
    internal Color ();
    internal void (Color );
    internal Color ();
    internal void (Color );
    internal double ();
    internal void (double );
    public FillType get_Type();
    public void set_Type(FillType value);
    public FillType get_FillType();
    public void set_FillType(FillType value);
    internal FillType ();
    internal int ();
    internal void (int );
    public double get_Transparency();
    public void set_Transparency(double value);
    public FormatSetType get_SetType();
    public void set_SetType(FormatSetType value);
    public GradientFill get_GradientFill();
    public TextureFill get_TextureFill();
    public SolidFill get_SolidFill();
    public PatternFill get_PatternFill();
    public GradientColorType get_GradientColorType();
    public GradientStyleType get_GradientStyle();
    public Color get_GradientColor1();
    public Color get_GradientColor2();
    public double get_GradientDegree();
    public int get_GradientVariant();
    public GradientPresetType get_PresetColor();
    public void SetOneColorGradient(Color color, double degree, GradientStyleType style, int variant);
    public void SetTwoColorGradient(Color color1, Color color2, GradientStyleType style, int variant);
    public void SetTwoColorGradient(Color color1, double transparency1, Color color2, double transparency2, GradientStyleType style, int variant);
    public void SetPresetColorGradient(GradientPresetType presetColor, GradientStyleType style, int variant);
    public TextureType get_Texture();
    public void set_Texture(TextureType value);
    public FillPattern get_Pattern();
    public void set_Pattern(FillPattern value);
    internal void (FillFormat , CopyOptions );
    internal bool (FillFormat ,  );
    internal bool (FillFormat );
    internal bool (int );
    public FillPictureType get_PictureFormatType();
    public void set_PictureFormatType(FillPictureType value);
    public double get_Scale();
    public void set_Scale(double value);
    public Byte[] get_ImageData();
    public void set_ImageData(Byte[] value);
    internal void (MsoFillFormatHelper );
    internal void (MsoFillFormatHelper , bool );
    internal Workbook ();
    internal MsoFillFormatHelper (ArrayList );
    internal static void (ArrayList ,  );
    internal static Int32[] (Byte[] , int , ArrayList , int );
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Aspose.Cells.Drawing.FillPattern : Enum {
    public int value__;
    public static FillPattern None;
    public static FillPattern Solid;
    public static FillPattern Gray5;
    public static FillPattern Gray10;
    public static FillPattern Gray20;
    public static FillPattern Gray30;
    public static FillPattern Gray40;
    public static FillPattern Gray50;
    public static FillPattern Gray60;
    public static FillPattern Gray70;
    public static FillPattern Gray75;
    public static FillPattern Gray80;
    public static FillPattern Gray90;
    public static FillPattern Gray25;
    public static FillPattern LightDownwardDiagonal;
    public static FillPattern LightUpwardDiagonal;
    public static FillPattern DarkDownwardDiagonal;
    public static FillPattern DarkUpwardDiagonal;
    public static FillPattern WideDownwardDiagonal;
    public static FillPattern WideUpwardDiagonal;
    public static FillPattern LightVertical;
    public static FillPattern LightHorizontal;
    public static FillPattern NarrowVertical;
    public static FillPattern NarrowHorizontal;
    public static FillPattern DarkVertical;
    public static FillPattern DarkHorizontal;
    public static FillPattern DashedDownwardDiagonal;
    public static FillPattern DashedUpwardDiagonal;
    public static FillPattern DashedVertical;
    public static FillPattern DashedHorizontal;
    public static FillPattern SmallConfetti;
    public static FillPattern LargeConfetti;
    public static FillPattern ZigZag;
    public static FillPattern Wave;
    public static FillPattern DiagonalBrick;
    public static FillPattern HorizontalBrick;
    public static FillPattern Weave;
    public static FillPattern Plaid;
    public static FillPattern Divot;
    public static FillPattern DottedGrid;
    public static FillPattern DottedDiamond;
    public static FillPattern Shingle;
    public static FillPattern Trellis;
    public static FillPattern Sphere;
    public static FillPattern SmallGrid;
    public static FillPattern LargeGrid;
    public static FillPattern SmallCheckerBoard;
    public static FillPattern LargeCheckerBoard;
    public static FillPattern OutlinedDiamond;
    public static FillPattern SolidDiamond;
    public static FillPattern Unknown;
}
public enum Aspose.Cells.Drawing.FillPictureType : Enum {
    public int value__;
    public static FillPictureType Stretch;
    public static FillPictureType Stack;
    public static FillPictureType StackAndScale;
}
public enum Aspose.Cells.Drawing.FillType : Enum {
    public int value__;
    public static FillType Automatic;
    public static FillType None;
    public static FillType Solid;
    public static FillType Gradient;
    public static FillType Texture;
    public static FillType Pattern;
    public static FillType Group;
}
public class Aspose.Cells.Drawing.Format3D : object {
    [DebuggerBrowsableAttribute("0")]
[]
private ShapePropertyCollection ;
    public Bevel TopBevel { get; }
    public PresetMaterialType SurfaceMaterialType { get; public set; }
    public LightRigType SurfaceLightingType { get; public set; }
    public double LightingAngle { get; public set; }
    internal Format3D(ShapePropertyCollection );
    private void ();
    public Bevel get_TopBevel();
    public bool HasTopBevelData();
    public PresetMaterialType get_SurfaceMaterialType();
    public void set_SurfaceMaterialType(PresetMaterialType value);
    public LightRigType get_SurfaceLightingType();
    public void set_SurfaceLightingType(LightRigType value);
    public double get_LightingAngle();
    public void set_LightingAngle(double value);
}
public enum Aspose.Cells.Drawing.FormatSetType : Enum {
    public int value__;
    public static FormatSetType None;
    public static FormatSetType IsGradientSet;
    public static FormatSetType IsTextureSet;
    public static FormatSetType IsPatternSet;
}
public abstract class Aspose.Cells.Drawing.Geometry : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private ShapeGuideCollection ;
    public ShapeGuideCollection ShapeAdjustValues { get; }
    internal ShapeGuideCollection ();
    public ShapeGuideCollection get_ShapeAdjustValues();
    internal abstract virtual bool ajaxk7kfp4zxj7ddd2gwkusgbhdmjk38();
    internal virtual void ajaxk7kfp4zxj7ddd2gwkusgbhdmjk38(Geometry );
}
public class Aspose.Cells.Drawing.GlowEffect : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public CellsColor Color { get; public set; }
    [ObsoleteAttribute("Use GlowEffect.Size property instead.")]
[]
public double Radius { get; public set; }
    public double Size { get; public set; }
    public double Transparency { get; public set; }
    internal GlowEffect( );
    internal bool ();
    public CellsColor get_Color();
    public void set_Color(CellsColor value);
    public double get_Radius();
    public void set_Radius(double value);
    public double get_Size();
    public void set_Size(double value);
    public double get_Transparency();
    public void set_Transparency(double value);
    internal void (GlowEffect );
    internal bool (GlowEffect );
}
public enum Aspose.Cells.Drawing.GradientColorType : Enum {
    public int value__;
    public static GradientColorType None;
    public static GradientColorType OneColor;
    public static GradientColorType PresetColors;
    public static GradientColorType TwoColors;
}
public enum Aspose.Cells.Drawing.GradientDirectionType : Enum {
    public int value__;
    public static GradientDirectionType FromUpperLeftCorner;
    public static GradientDirectionType FromUpperRightCorner;
    public static GradientDirectionType FromLowerLeftCorner;
    public static GradientDirectionType FromLowerRightCorner;
    public static GradientDirectionType FromCenter;
    public static GradientDirectionType Unknown;
}
public class Aspose.Cells.Drawing.GradientFill : Fill {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private GradientStopCollection ;
    [DebuggerBrowsableAttribute("0")]
internal GradientPresetType ;
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    public GradientStopCollection GradientStops { get; }
    public GradientFillType FillType { get; }
    public GradientDirectionType DirectionType { get; }
    public float Angle { get; public set; }
    internal GradientFill(object , Workbook );
    internal virtual FillType 2shawfk3flvxggtejs7dylv5mewjax38();
    internal object ();
    internal Chart ();
    internal virtual void 2shawfk3flvxggtejs7dylv5mewjax38(Fill , CopyOptions );
    internal void (GradientFill , CopyOptions );
    internal bool (GradientFill );
    internal bool (GradientFill );
    internal bool (int );
    public GradientStopCollection get_GradientStops();
    internal bool ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    [("True")]
private void (GradientFillType , double );
    public void SetGradient(GradientFillType type, double angle, GradientDirectionType direction);
    public GradientFillType get_FillType();
    public GradientDirectionType get_DirectionType();
    public float get_Angle();
    public void set_Angle(float value);
    internal void (Style , Workbook );
    internal Color ();
    internal Color ();
    internal double ();
    internal double ();
    internal double ();
    public void SetPresetThemeGradient(PresetThemeGradientType gradientType, ThemeColorType themeColorType);
    internal void (GradientPresetType , GradientStyleType , int );
    internal void (Byte[] , GradientStyleType , int );
    public void SetOneColorGradient(Color color, double degree, GradientStyleType style, int variant);
    public void SetTwoColorGradient(Color color1, Color color2, GradientStyleType style, int variant);
    public void SetTwoColorGradient(Color color1, double transparency1, Color color2, double transparency2, GradientStyleType style, int variant);
    internal void (GradientColorType ,  , double ,  , GradientStyleType , int );
    private void (GradientColorType , Color , double , Color , double , double , GradientStyleType , int );
    internal GradientColorType ();
    internal GradientPresetType ();
    internal void (GradientPresetType );
    internal int ();
    internal GradientStyleType ();
    private void (Workbook );
    internal static Color (Color , double );
}
public enum Aspose.Cells.Drawing.GradientFillType : Enum {
    public int value__;
    public static GradientFillType Linear;
    public static GradientFillType Radial;
    public static GradientFillType Rectangle;
    public static GradientFillType Path;
}
public enum Aspose.Cells.Drawing.GradientPresetType : Enum {
    public int value__;
    public static GradientPresetType Brass;
    public static GradientPresetType CalmWater;
    public static GradientPresetType Chrome;
    public static GradientPresetType ChromeII;
    public static GradientPresetType Daybreak;
    public static GradientPresetType Desert;
    public static GradientPresetType EarlySunset;
    public static GradientPresetType Fire;
    public static GradientPresetType Fog;
    public static GradientPresetType Gold;
    public static GradientPresetType GoldII;
    public static GradientPresetType Horizon;
    public static GradientPresetType LateSunset;
    public static GradientPresetType Mahogany;
    public static GradientPresetType Moss;
    public static GradientPresetType Nightfall;
    public static GradientPresetType Ocean;
    public static GradientPresetType Parchment;
    public static GradientPresetType Peacock;
    public static GradientPresetType Rainbow;
    public static GradientPresetType RainbowII;
    public static GradientPresetType Sapphire;
    public static GradientPresetType Silver;
    public static GradientPresetType Wheat;
    public static GradientPresetType Unknown;
}
public class Aspose.Cells.Drawing.GradientStop : object {
    [DebuggerBrowsableAttribute("0")]
[]
private GradientStopCollection ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public double Position { get; public set; }
    public CellsColor CellsColor { get; }
    public double Transparency { get; public set; }
    internal GradientStop(GradientStopCollection );
    public double get_Position();
    public void set_Position(double value);
    public CellsColor get_CellsColor();
    internal int ();
    internal void (int );
    public double get_Transparency();
    public void set_Transparency(double value);
    internal void (GradientStop , CopyOptions );
    internal bool (GradientStop );
    internal bool (GradientStop );
    internal bool (int );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.GradientStopCollection : CollectionBase`1<GradientStop> {
    [DebuggerBrowsableAttribute("0")]
[]
private GradientFill ;
    public GradientStop Item { get; public set; }
    internal GradientStopCollection(GradientFill );
    internal GradientFill ();
    public void Add(double position, CellsColor color, int alpha);
    public void Add(double position, Color color, int alpha);
    internal void (GradientStop );
    public GradientStop get_Item(int index);
    public void set_Item(int index, GradientStop value);
    internal void (int , GradientStop );
    internal void (GradientStopCollection , CopyOptions );
    internal bool (GradientStopCollection );
    internal bool (GradientStopCollection );
    internal bool (int );
}
public enum Aspose.Cells.Drawing.GradientStyleType : Enum {
    public int value__;
    public static GradientStyleType DiagonalDown;
    public static GradientStyleType DiagonalUp;
    public static GradientStyleType FromCenter;
    public static GradientStyleType FromCorner;
    public static GradientStyleType Horizontal;
    public static GradientStyleType Vertical;
    public static GradientStyleType Unknown;
}
public class Aspose.Cells.Drawing.GroupBox : Shape {
    public bool Shadow { get; public set; }
    internal GroupBox(ShapeCollection );
    public bool get_Shadow();
    public void set_Shadow(bool value);
    internal ArrayList ();
    internal void (GroupBox , CopyOptions );
}
public class Aspose.Cells.Drawing.GroupFill : Fill {
    internal virtual FillType 2shawfk3flvxggtejs7dylv5mewjax38();
    internal virtual void 2shawfk3flvxggtejs7dylv5mewjax38(Fill , CopyOptions );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.GroupShape : Shape {
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public Shape Item { get; }
    internal GroupShape(ShapeCollection );
    internal  ();
    internal void ( );
    internal int ();
    internal void (int );
    internal int ();
    public Shape get_Item(int index);
    public void Ungroup();
    internal ArrayList ();
    internal void (ArrayList );
    public Shape[] GetGroupedShapes();
    internal void (Shape[] );
    internal void ();
    internal void (Shape );
    internal void (GroupShape , CopyOptions );
}
public enum Aspose.Cells.Drawing.ImageType : Enum {
    public int value__;
    public static ImageType Unknown;
    public static ImageType Emf;
    public static ImageType Wmf;
    public static ImageType Pict;
    public static ImageType Jpeg;
    public static ImageType Png;
    public static ImageType Bmp;
    public static ImageType Gif;
    public static ImageType Tiff;
    public static ImageType Svg;
    public static ImageType Svm;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ImageType Gltf;
    public static ImageType OfficeCompatibleEmf;
    public static ImageType WebP;
}
public class Aspose.Cells.Drawing.Label : Shape {
    internal Label(ShapeCollection );
}
public enum Aspose.Cells.Drawing.LightRigDirectionType : Enum {
    public int value__;
    public static LightRigDirectionType Bottom;
    public static LightRigDirectionType BottomLeft;
    public static LightRigDirectionType BottomRight;
    public static LightRigDirectionType Left;
    public static LightRigDirectionType Right;
    public static LightRigDirectionType Top;
    public static LightRigDirectionType TopLeft;
    public static LightRigDirectionType TopRight;
}
public enum Aspose.Cells.Drawing.LightRigType : Enum {
    public int value__;
    public static LightRigType Balanced;
    public static LightRigType BrightRoom;
    public static LightRigType Chilly;
    public static LightRigType Contrasting;
    public static LightRigType Flat;
    public static LightRigType Flood;
    public static LightRigType Freezing;
    public static LightRigType Glow;
    public static LightRigType Harsh;
    public static LightRigType LegacyFlat1;
    public static LightRigType LegacyFlat2;
    public static LightRigType LegacyFlat3;
    public static LightRigType LegacyFlat4;
    public static LightRigType LegacyHarsh1;
    public static LightRigType LegacyHarsh2;
    public static LightRigType LegacyHarsh3;
    public static LightRigType LegacyHarsh4;
    public static LightRigType LegacyNormal1;
    public static LightRigType LegacyNormal2;
    public static LightRigType LegacyNormal3;
    public static LightRigType LegacyNormal4;
    public static LightRigType Morning;
    public static LightRigType Soft;
    public static LightRigType Sunrise;
    public static LightRigType Sunset;
    public static LightRigType ThreePoint;
    public static LightRigType TwoPoint;
    public static LightRigType None;
}
public class Aspose.Cells.Drawing.Line : object {
    []
protected object m_lineParent;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private GradientFill ;
    public MsoLineStyle CompoundType { get; public set; }
    public MsoLineDashStyle DashType { get; public set; }
    public LineCapType CapType { get; public set; }
    public LineJoinType JoinType { get; public set; }
    public MsoArrowheadStyle BeginType { get; public set; }
    public MsoArrowheadStyle EndType { get; public set; }
    public MsoArrowheadLength BeginArrowLength { get; public set; }
    public MsoArrowheadLength EndArrowLength { get; public set; }
    public MsoArrowheadWidth BeginArrowWidth { get; public set; }
    public MsoArrowheadWidth EndArrowWidth { get; public set; }
    public ThemeColor ThemeColor { get; public set; }
    public Color Color { get; public set; }
    public double Transparency { get; public set; }
    public LineType Style { get; public set; }
    public WeightType Weight { get; public set; }
    public double WeightPt { get; public set; }
    public double WeightPx { get; public set; }
    public ChartLineFormattingType FormattingType { get; public set; }
    public bool IsAutomaticColor { get; }
    public bool IsVisible { get; public set; }
    public bool IsAuto { get; public set; }
    public GradientFill GradientFill { get; }
    internal Line(Chart , object );
    internal object ();
    internal void (object );
    internal  ();
    internal  ();
    public MsoLineStyle get_CompoundType();
    public void set_CompoundType(MsoLineStyle value);
    internal void (MsoLineStyle );
    private void (MsoLineStyle );
    public MsoLineDashStyle get_DashType();
    public void set_DashType(MsoLineDashStyle value);
    internal void (MsoLineDashStyle );
    private void (MsoLineDashStyle );
    private Series ();
    public LineCapType get_CapType();
    public void set_CapType(LineCapType value);
    private LineCapType ();
    internal void (LineCapType );
    private void (LineCapType );
    public LineJoinType get_JoinType();
    public void set_JoinType(LineJoinType value);
    internal void (LineJoinType );
    private void (LineJoinType );
    public MsoArrowheadStyle get_BeginType();
    public void set_BeginType(MsoArrowheadStyle value);
    internal void (MsoArrowheadStyle );
    private void (MsoArrowheadStyle );
    public MsoArrowheadStyle get_EndType();
    public void set_EndType(MsoArrowheadStyle value);
    internal void (MsoArrowheadStyle );
    private void (MsoArrowheadStyle );
    public MsoArrowheadLength get_BeginArrowLength();
    public void set_BeginArrowLength(MsoArrowheadLength value);
    internal void (MsoArrowheadLength );
    private void (MsoArrowheadLength );
    public MsoArrowheadLength get_EndArrowLength();
    public void set_EndArrowLength(MsoArrowheadLength value);
    internal void (MsoArrowheadLength );
    private void (MsoArrowheadLength );
    public MsoArrowheadWidth get_BeginArrowWidth();
    public void set_BeginArrowWidth(MsoArrowheadWidth value);
    internal void (MsoArrowheadWidth );
    private void (MsoArrowheadWidth );
    public MsoArrowheadWidth get_EndArrowWidth();
    public void set_EndArrowWidth(MsoArrowheadWidth value);
    internal void (MsoArrowheadWidth );
    private void (MsoArrowheadWidth );
    internal void (Color );
    public ThemeColor get_ThemeColor();
    public void set_ThemeColor(ThemeColor value);
    public Color get_Color();
    public void set_Color(Color value);
    internal bool ();
    internal void (Color );
    private void (Color );
    internal int ();
    internal void (int );
    public double get_Transparency();
    public void set_Transparency(double value);
    internal void (double );
    private void (double );
    internal void ();
    public LineType get_Style();
    public void set_Style(LineType value);
    internal void (LineType );
    private void (LineType );
    public WeightType get_Weight();
    public void set_Weight(WeightType value);
    public double get_WeightPt();
    public void set_WeightPt(double value);
    internal void (double );
    private void (double );
    public double get_WeightPx();
    public void set_WeightPx(double value);
    public ChartLineFormattingType get_FormattingType();
    public void set_FormattingType(ChartLineFormattingType value);
    internal void (ChartLineFormattingType );
    private void (ChartLineFormattingType );
    internal bool ();
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal bool ();
    internal void (bool );
    public bool get_IsAutomaticColor();
    internal void ();
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public bool get_IsAuto();
    public void set_IsAuto(bool value);
    internal void (bool );
    private void (bool );
    public GradientFill get_GradientFill();
    internal void (Line , CopyOptions );
    internal bool (Line );
    internal void (LineFormat );
    internal void (Line );
    internal void (LineFormat );
    internal void (Line );
}
public enum Aspose.Cells.Drawing.LineCapType : Enum {
    public int value__;
    public static LineCapType Square;
    public static LineCapType Round;
    public static LineCapType Flat;
    public static LineCapType None;
}
public class Aspose.Cells.Drawing.LineFormat : FillFormat {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public MsoLineStyle CompoundType { get; public set; }
    public MsoLineDashStyle DashStyle { get; public set; }
    public LineCapType CapType { get; public set; }
    public LineJoinType JoinType { get; public set; }
    public MsoArrowheadStyle BeginArrowheadStyle { get; public set; }
    public MsoArrowheadWidth BeginArrowheadWidth { get; public set; }
    public MsoArrowheadLength BeginArrowheadLength { get; public set; }
    public MsoArrowheadStyle EndArrowheadStyle { get; public set; }
    public MsoArrowheadWidth EndArrowheadWidth { get; public set; }
    public MsoArrowheadLength EndArrowheadLength { get; public set; }
    public double Weight { get; public set; }
    internal LineFormat( );
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal bool ();
    internal virtual Color m383kmkfyvgpp8f2jerrad9an7gjfrjf();
    public MsoLineStyle get_CompoundType();
    public void set_CompoundType(MsoLineStyle value);
    public MsoLineDashStyle get_DashStyle();
    public void set_DashStyle(MsoLineDashStyle value);
    public LineCapType get_CapType();
    public void set_CapType(LineCapType value);
    public LineJoinType get_JoinType();
    public void set_JoinType(LineJoinType value);
    public MsoArrowheadStyle get_BeginArrowheadStyle();
    public void set_BeginArrowheadStyle(MsoArrowheadStyle value);
    public MsoArrowheadWidth get_BeginArrowheadWidth();
    public void set_BeginArrowheadWidth(MsoArrowheadWidth value);
    public MsoArrowheadLength get_BeginArrowheadLength();
    public void set_BeginArrowheadLength(MsoArrowheadLength value);
    public MsoArrowheadStyle get_EndArrowheadStyle();
    public void set_EndArrowheadStyle(MsoArrowheadStyle value);
    public MsoArrowheadWidth get_EndArrowheadWidth();
    public void set_EndArrowheadWidth(MsoArrowheadWidth value);
    public MsoArrowheadLength get_EndArrowheadLength();
    public void set_EndArrowheadLength(MsoArrowheadLength value);
    internal  ();
    internal void ( );
    public double get_Weight();
    public void set_Weight(double value);
    internal  ();
    internal void (LineFormat , CopyOptions );
    internal int ();
    internal void (int );
    internal void ( );
    internal bool ( );
}
public enum Aspose.Cells.Drawing.LineJoinType : Enum {
    public int value__;
    public static LineJoinType Round;
    public static LineJoinType Bevel;
    public static LineJoinType Miter;
    public static LineJoinType None;
}
public class Aspose.Cells.Drawing.LineShape : Shape {
    [ObsoleteAttribute("Use Shape.Line.BeginArrowheadStyle property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadStyle BeginArrowheadStyle { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.BeginArrowheadWidth property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadWidth BeginArrowheadWidth { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.BeginArrowheadLength property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadLength BeginArrowheadLength { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.EndArrowheadStyle property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadStyle EndArrowheadStyle { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.EndArrowheadWidth property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadWidth EndArrowheadWidth { get; public set; }
    [ObsoleteAttribute("Use Shape.Line.EndArrowheadLength property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoArrowheadLength EndArrowheadLength { get; public set; }
    internal LineShape(ShapeCollection );
    internal void (LineShape , CopyOptions );
    public MsoArrowheadStyle get_BeginArrowheadStyle();
    public void set_BeginArrowheadStyle(MsoArrowheadStyle value);
    public MsoArrowheadWidth get_BeginArrowheadWidth();
    public void set_BeginArrowheadWidth(MsoArrowheadWidth value);
    public MsoArrowheadLength get_BeginArrowheadLength();
    public void set_BeginArrowheadLength(MsoArrowheadLength value);
    public MsoArrowheadStyle get_EndArrowheadStyle();
    public void set_EndArrowheadStyle(MsoArrowheadStyle value);
    public MsoArrowheadWidth get_EndArrowheadWidth();
    public void set_EndArrowheadWidth(MsoArrowheadWidth value);
    public MsoArrowheadLength get_EndArrowheadLength();
    public void set_EndArrowheadLength(MsoArrowheadLength value);
}
public enum Aspose.Cells.Drawing.LineType : Enum {
    public int value__;
    public static LineType DarkGray;
    public static LineType Dash;
    public static LineType DashDot;
    public static LineType DashDotDot;
    public static LineType Dot;
    public static LineType LightGray;
    public static LineType MediumGray;
    public static LineType Solid;
}
public class Aspose.Cells.Drawing.ListBox : Shape {
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private SelectionType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public int ItemCount { get; }
    public int SelectedIndex { get; public set; }
    public Cell[] SelectedCells { get; }
    public bool Shadow { get; public set; }
    public SelectionType SelectionType { get; public set; }
    public int PageChange { get; public set; }
    internal ListBox(ShapeCollection );
    public int get_ItemCount();
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    internal void (int );
    public void SelectedItem(int itemIndex, bool isSelected);
    public bool IsSelected(int itemIndex);
    public Cell[] get_SelectedCells();
    internal ArrayList ();
    internal void (ArrayList );
    public bool get_Shadow();
    public void set_Shadow(bool value);
    public SelectionType get_SelectionType();
    public void set_SelectionType(SelectionType value);
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    public int get_PageChange();
    public void set_PageChange(int value);
    internal void (ListBox , CopyOptions );
}
public enum Aspose.Cells.Drawing.MirrorType : Enum {
    public int value__;
    public static MirrorType None;
    public static MirrorType Horizonal;
    public static MirrorType Vertical;
    public static MirrorType Both;
}
public enum Aspose.Cells.Drawing.MsoArrowheadLength : Enum {
    public int value__;
    public static MsoArrowheadLength Short;
    public static MsoArrowheadLength Medium;
    public static MsoArrowheadLength Long;
}
public enum Aspose.Cells.Drawing.MsoArrowheadStyle : Enum {
    public int value__;
    public static MsoArrowheadStyle None;
    public static MsoArrowheadStyle Arrow;
    public static MsoArrowheadStyle ArrowStealth;
    public static MsoArrowheadStyle ArrowDiamond;
    public static MsoArrowheadStyle ArrowOval;
    public static MsoArrowheadStyle ArrowOpen;
}
public enum Aspose.Cells.Drawing.MsoArrowheadWidth : Enum {
    public int value__;
    public static MsoArrowheadWidth Narrow;
    public static MsoArrowheadWidth Medium;
    public static MsoArrowheadWidth Wide;
}
public enum Aspose.Cells.Drawing.MsoDrawingType : Enum {
    public int value__;
    public static MsoDrawingType Group;
    public static MsoDrawingType Line;
    public static MsoDrawingType Rectangle;
    public static MsoDrawingType Oval;
    public static MsoDrawingType Arc;
    public static MsoDrawingType Chart;
    public static MsoDrawingType TextBox;
    public static MsoDrawingType Button;
    public static MsoDrawingType Picture;
    public static MsoDrawingType Polygon;
    public static MsoDrawingType CheckBox;
    public static MsoDrawingType RadioButton;
    public static MsoDrawingType Label;
    public static MsoDrawingType DialogBox;
    public static MsoDrawingType Spinner;
    public static MsoDrawingType ScrollBar;
    public static MsoDrawingType ListBox;
    public static MsoDrawingType GroupBox;
    public static MsoDrawingType ComboBox;
    public static MsoDrawingType Comment;
    public static MsoDrawingType OleObject;
    public static MsoDrawingType CellsDrawing;
    public static MsoDrawingType Unknown;
    public static MsoDrawingType Slicer;
    public static MsoDrawingType WebExtension;
    public static MsoDrawingType SmartArt;
    public static MsoDrawingType CustomXml;
    public static MsoDrawingType Timeline;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static MsoDrawingType Model3D;
}
public class Aspose.Cells.Drawing.MsoFillFormat : object {
    [DebuggerBrowsableAttribute("0")]
private FillFormat ;
    public Color ForeColor { get; public set; }
    public double Transparency { get; public set; }
    public Color BackColor { get; public set; }
    public Byte[] ImageData { get; public set; }
    public TextureType Texture { get; }
    public bool IsVisible { get; public set; }
    internal MsoFillFormat(FillFormat );
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public double get_Transparency();
    public void set_Transparency(double value);
    internal double ();
    internal void (double );
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Byte[] get_ImageData();
    public void set_ImageData(Byte[] value);
    public void SetOneColorGradient(Color color, double degree, GradientStyleType style, int variant);
    public TextureType get_Texture();
    internal  ();
    internal void ( );
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
}
public class Aspose.Cells.Drawing.MsoFillFormatHelper : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Shape ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    public Color ForeColor { get; public set; }
    public double ForeColorTransparency { get; public set; }
    public Color BackColor { get; public set; }
    public Byte[] ImageData { get; public set; }
    public TextureType Texture { get; }
    public bool IsVisible { get; public set; }
    internal MsoFillFormatHelper(Shape ,  , Workbook );
    internal  ();
    internal  ();
    internal void ( );
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public double get_ForeColorTransparency();
    public void set_ForeColorTransparency(double value);
    internal double ();
    internal void (double );
    public Color get_BackColor();
    public void set_BackColor(Color value);
    internal int ();
    internal void (int );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal float ();
    internal void (float );
    internal bool ();
    internal bool ();
    internal float ();
    internal void (float );
    internal double ();
    internal void (double );
    internal void (int );
    internal double ();
    internal void (double );
    internal void (int );
    internal double ();
    internal void (double );
    internal void (int );
    internal double ();
    internal void (double );
    internal void (int );
    internal int ();
    internal void (int );
    internal  ();
    internal Byte[] ();
    internal void (Byte[] );
    public Byte[] get_ImageData();
    public void set_ImageData(Byte[] value);
    internal string ();
    internal void (string );
    private int (double );
    public void SetOneColorGradient(Color color, double degree, GradientStyleType style, int variant);
    internal FillPattern ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    public TextureType get_Texture();
    internal void ();
    internal  ();
    internal void ( );
    internal static TextureType (Byte[] );
    internal GradientPresetType ();
    internal void (GradientPresetType );
    internal static Byte[] (GradientPresetType );
    internal int ();
    internal void (int );
    internal ColorBlend ();
    internal void (ColorBlend );
    internal static ColorBlend (GradientPresetType );
    internal static ColorBlend (Byte[] );
    internal static bool (ColorBlend );
    internal Byte[] ();
    internal void (Byte[] );
    internal bool ();
    internal bool ();
    internal  ();
    internal void ( );
    internal void (int );
    internal int ();
    internal void (int );
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] ();
    internal static Byte[] (FillPattern );
}
public class Aspose.Cells.Drawing.MsoFormatPicture : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Shape ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal [] ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public double TopCropInch { get; public set; }
    public double BottomCropInch { get; public set; }
    public double LeftCropInch { get; public set; }
    public double RightCropInch { get; public set; }
    public double TopCrop { get; public set; }
    public double BottomCrop { get; public set; }
    public double LeftCrop { get; public set; }
    public double RightCrop { get; public set; }
    public double Transparency { get; public set; }
    public CellsColor TransparentColor { get; public set; }
    public double Contrast { get; public set; }
    public double Brightness { get; public set; }
    public double Gamma { get; public set; }
    public bool IsBiLevel { get; public set; }
    public bool IsGray { get; public set; }
    internal MsoFormatPicture(Shape );
    internal bool ();
    public double get_TopCropInch();
    public void set_TopCropInch(double value);
    public double get_BottomCropInch();
    public void set_BottomCropInch(double value);
    public double get_LeftCropInch();
    public void set_LeftCropInch(double value);
    public double get_RightCropInch();
    public void set_RightCropInch(double value);
    public double get_TopCrop();
    public void set_TopCrop(double value);
    public double get_BottomCrop();
    public void set_BottomCrop(double value);
    public double get_LeftCrop();
    public void set_LeftCrop(double value);
    public double get_RightCrop();
    public void set_RightCrop(double value);
    public double get_Transparency();
    public void set_Transparency(double value);
    public CellsColor get_TransparentColor();
    public void set_TransparentColor(CellsColor value);
    public double get_Contrast();
    public void set_Contrast(double value);
    internal int ();
    internal void (int );
    public double get_Brightness();
    public void set_Brightness(double value);
    internal double ();
    internal void (double );
    public double get_Gamma();
    public void set_Gamma(double value);
    public bool get_IsBiLevel();
    public void set_IsBiLevel(bool value);
    public bool get_IsGray();
    public void set_IsGray(bool value);
    internal void (MsoFormatPicture , CopyOptions );
    internal void ();
    internal bool ();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
}
public enum Aspose.Cells.Drawing.MsoLineDashStyle : Enum {
    public int value__;
    public static MsoLineDashStyle Dash;
    public static MsoLineDashStyle DashDot;
    public static MsoLineDashStyle DashDotDot;
    public static MsoLineDashStyle DashLongDash;
    public static MsoLineDashStyle DashLongDashDot;
    public static MsoLineDashStyle RoundDot;
    public static MsoLineDashStyle Solid;
    public static MsoLineDashStyle SquareDot;
    public static MsoLineDashStyle Custom;
}
public class Aspose.Cells.Drawing.MsoLineFormat : object {
    [DebuggerBrowsableAttribute("0")]
private LineFormat ;
    public bool IsVisible { get; public set; }
    public MsoLineStyle Style { get; public set; }
    public Color ForeColor { get; public set; }
    public Color BackColor { get; public set; }
    public MsoLineDashStyle DashStyle { get; public set; }
    public double Transparency { get; public set; }
    public double Weight { get; public set; }
    internal MsoLineFormat(LineFormat );
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public MsoLineStyle get_Style();
    public void set_Style(MsoLineStyle value);
    internal bool ();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public MsoLineDashStyle get_DashStyle();
    public void set_DashStyle(MsoLineDashStyle value);
    public double get_Transparency();
    public void set_Transparency(double value);
    internal double ();
    internal void (double );
    public double get_Weight();
    public void set_Weight(double value);
    internal MsoArrowheadStyle ();
    internal void (MsoArrowheadStyle );
    internal MsoArrowheadWidth ();
    internal void (MsoArrowheadWidth );
    internal MsoArrowheadLength ();
    internal void (MsoArrowheadLength );
    internal MsoArrowheadStyle ();
    internal void (MsoArrowheadStyle );
    internal MsoArrowheadWidth ();
    internal void (MsoArrowheadWidth );
    internal MsoArrowheadLength ();
    internal void (MsoArrowheadLength );
}
public class Aspose.Cells.Drawing.MsoLineFormatHelper : object {
    [DebuggerBrowsableAttribute("0")]
private Shape ;
    public bool IsVisible { get; public set; }
    public MsoLineStyle Style { get; public set; }
    public Color ForeColor { get; public set; }
    public Color BackColor { get; public set; }
    public MsoLineDashStyle DashStyle { get; public set; }
    public double Transparency { get; public set; }
    public double Weight { get; public set; }
    internal MsoLineFormatHelper(Shape );
    internal void (LineFormat );
    internal void ( );
    internal  ();
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public MsoLineStyle get_Style();
    public void set_Style(MsoLineStyle value);
    internal bool ();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public MsoLineDashStyle get_DashStyle();
    public void set_DashStyle(MsoLineDashStyle value);
    public double get_Transparency();
    public void set_Transparency(double value);
    internal double ();
    internal void (double );
    internal bool ( );
    public double get_Weight();
    public void set_Weight(double value);
    internal MsoArrowheadStyle ();
    internal void (MsoArrowheadStyle );
    internal MsoArrowheadWidth ();
    internal void (MsoArrowheadWidth );
    internal MsoArrowheadLength ();
    internal void (MsoArrowheadLength );
    internal MsoArrowheadStyle ();
    internal void (MsoArrowheadStyle );
    internal MsoArrowheadWidth ();
    internal void (MsoArrowheadWidth );
    internal MsoArrowheadLength ();
    internal void (MsoArrowheadLength );
}
public enum Aspose.Cells.Drawing.MsoLineStyle : Enum {
    public int value__;
    public static MsoLineStyle Single;
    public static MsoLineStyle ThickBetweenThin;
    public static MsoLineStyle ThinThick;
    public static MsoLineStyle ThickThin;
    public static MsoLineStyle ThinThin;
}
public enum Aspose.Cells.Drawing.MsoPresetTextEffect : Enum {
    public int value__;
    public static MsoPresetTextEffect TextEffect1;
    public static MsoPresetTextEffect TextEffect2;
    public static MsoPresetTextEffect TextEffect3;
    public static MsoPresetTextEffect TextEffect4;
    public static MsoPresetTextEffect TextEffect5;
    public static MsoPresetTextEffect TextEffect6;
    public static MsoPresetTextEffect TextEffect7;
    public static MsoPresetTextEffect TextEffect8;
    public static MsoPresetTextEffect TextEffect9;
    public static MsoPresetTextEffect TextEffect10;
    public static MsoPresetTextEffect TextEffect11;
    public static MsoPresetTextEffect TextEffect12;
    public static MsoPresetTextEffect TextEffect13;
    public static MsoPresetTextEffect TextEffect14;
    public static MsoPresetTextEffect TextEffect15;
    public static MsoPresetTextEffect TextEffect16;
    public static MsoPresetTextEffect TextEffect17;
    public static MsoPresetTextEffect TextEffect18;
    public static MsoPresetTextEffect TextEffect19;
    public static MsoPresetTextEffect TextEffect20;
    public static MsoPresetTextEffect TextEffect21;
    public static MsoPresetTextEffect TextEffect22;
    public static MsoPresetTextEffect TextEffect23;
    public static MsoPresetTextEffect TextEffect24;
    public static MsoPresetTextEffect TextEffect25;
    public static MsoPresetTextEffect TextEffect26;
    public static MsoPresetTextEffect TextEffect27;
    public static MsoPresetTextEffect TextEffect28;
    public static MsoPresetTextEffect TextEffect29;
    public static MsoPresetTextEffect TextEffect30;
}
public enum Aspose.Cells.Drawing.MsoPresetTextEffectShape : Enum {
    public int value__;
    public static MsoPresetTextEffectShape PlainText;
    public static MsoPresetTextEffectShape Stop;
    public static MsoPresetTextEffectShape TriangleUp;
    public static MsoPresetTextEffectShape TriangleDown;
    public static MsoPresetTextEffectShape ChevronUp;
    public static MsoPresetTextEffectShape ChevronDown;
    public static MsoPresetTextEffectShape RingInside;
    public static MsoPresetTextEffectShape RingOutside;
    public static MsoPresetTextEffectShape ArchUpCurve;
    public static MsoPresetTextEffectShape ArchDownCurve;
    public static MsoPresetTextEffectShape CircleCurve;
    public static MsoPresetTextEffectShape ButtonCurve;
    public static MsoPresetTextEffectShape ArchUpPour;
    public static MsoPresetTextEffectShape ArchDownPour;
    public static MsoPresetTextEffectShape CirclePour;
    public static MsoPresetTextEffectShape ButtonPour;
    public static MsoPresetTextEffectShape CurveUp;
    public static MsoPresetTextEffectShape CurveDown;
    public static MsoPresetTextEffectShape CanUp;
    public static MsoPresetTextEffectShape CanDown;
    public static MsoPresetTextEffectShape Wave1;
    public static MsoPresetTextEffectShape Wave2;
    public static MsoPresetTextEffectShape DoubleWave1;
    public static MsoPresetTextEffectShape DoubleWave2;
    public static MsoPresetTextEffectShape Inflate;
    public static MsoPresetTextEffectShape Deflate;
    public static MsoPresetTextEffectShape InflateBottom;
    public static MsoPresetTextEffectShape DeflateBottom;
    public static MsoPresetTextEffectShape InflateTop;
    public static MsoPresetTextEffectShape DeflateTop;
    public static MsoPresetTextEffectShape DeflateInflate;
    public static MsoPresetTextEffectShape DeflateInflateDeflate;
    public static MsoPresetTextEffectShape FadeRight;
    public static MsoPresetTextEffectShape FadeLeft;
    public static MsoPresetTextEffectShape FadeUp;
    public static MsoPresetTextEffectShape FadeDown;
    public static MsoPresetTextEffectShape SlantUp;
    public static MsoPresetTextEffectShape SlantDown;
    public static MsoPresetTextEffectShape CascadeUp;
    public static MsoPresetTextEffectShape CascadeDown;
    public static MsoPresetTextEffectShape Mixed;
}
public class Aspose.Cells.Drawing.MsoTextFrame : object {
    [DebuggerBrowsableAttribute("0")]
private Shape ;
    public bool AutoSize { get; public set; }
    public bool IsAutoMargin { get; public set; }
    public bool RotateTextWithShape { get; public set; }
    public double LeftMarginPt { get; public set; }
    public double RightMarginPt { get; public set; }
    public double TopMarginPt { get; public set; }
    public double BottomMarginPt { get; public set; }
    internal MsoTextFrame(Shape );
    internal  ();
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public bool get_IsAutoMargin();
    public void set_IsAutoMargin(bool value);
    public bool get_RotateTextWithShape();
    public void set_RotateTextWithShape(bool value);
    internal int ();
    internal void (int );
    public double get_LeftMarginPt();
    public void set_LeftMarginPt(double value);
    internal int ();
    internal void (int );
    public double get_RightMarginPt();
    public void set_RightMarginPt(double value);
    internal int ();
    internal void (int );
    public double get_TopMarginPt();
    public void set_TopMarginPt(double value);
    internal int ();
    internal void (int );
    public double get_BottomMarginPt();
    public void set_BottomMarginPt(double value);
}
public class Aspose.Cells.Drawing.NoneFill : Fill {
    internal virtual FillType 2shawfk3flvxggtejs7dylv5mewjax38();
    internal virtual void 2shawfk3flvxggtejs7dylv5mewjax38(Fill , CopyOptions );
}
public class Aspose.Cells.Drawing.OleObject : Shape {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private FileFormatType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal Guid ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    public bool IsAutoSize { get; public set; }
    public bool IsLink { get; public set; }
    public bool DisplayAsIcon { get; public set; }
    public Byte[] ImageData { get; public set; }
    public Byte[] ObjectData { get; public set; }
    public Byte[] FullObjectBin { get; }
    public string ImageSourceFullName { get; public set; }
    public string ProgID { get; public set; }
    public FileFormatType FileFormatType { get; public set; }
    public string ObjectSourceFullName { get; public set; }
    public string Label { get; public set; }
    [ObsoleteAttribute("Use OleObject.ObjectSourceFullName property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public string SourceFullName { get; public set; }
    public bool AutoUpdate { get; public set; }
    public bool AutoLoad { get; public set; }
    public Byte[] ClassIdentifier { get; public set; }
    public ImageType ImageType { get; }
    internal OleObject(ShapeCollection );
    internal bool ();
    internal void (bool );
    internal byte ();
    internal void (byte );
    public void SetEmbeddedObject(bool linkToFile, Byte[] objectData, string sourceFileName, bool displayAsIcon, string label);
    public void SetEmbeddedObject(bool linkToFile, Byte[] objectData, string sourceFileName, bool displayAsIcon, string label, bool updateIcon);
    public bool get_IsAutoSize();
    public void set_IsAutoSize(bool value);
    public bool get_IsLink();
    public void set_IsLink(bool value);
    internal bool ();
    internal void (bool );
    public bool get_DisplayAsIcon();
    public void set_DisplayAsIcon(bool value);
    internal void (bool );
    internal bool ();
    internal  ();
    internal int ();
    internal void (int );
    public Byte[] get_ImageData();
    public void set_ImageData(Byte[] value);
    public Byte[] get_ObjectData();
    public void set_ObjectData(Byte[] value);
    public Byte[] get_FullObjectBin();
    public string get_ImageSourceFullName();
    public void set_ImageSourceFullName(string value);
    internal int ();
    internal void (int );
    internal bool ();
    internal Byte[] ();
    internal void (Byte[] );
    internal bool ();
    internal Byte[] ();
    internal void (MemoryStream ,  , bool );
    internal static string (Byte[] , Int32& );
    internal static void (Byte[] , Int32& );
    internal bool ();
    internal void (bool );
    internal bool ();
    public void SetNativeSourceFullName(string sourceFullName);
    public string get_ProgID();
    public void set_ProgID(string value);
    internal FileFormatType ();
    internal void (FileFormatType );
    internal string (int );
    public FileFormatType get_FileFormatType();
    public void set_FileFormatType(FileFormatType value);
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal void (string );
    private void (bool );
    public string get_ObjectSourceFullName();
    public void set_ObjectSourceFullName(string value);
    private void (string );
    internal Byte[] ();
    internal string ();
    public string get_Label();
    public void set_Label(string value);
    public string get_SourceFullName();
    public void set_SourceFullName(string value);
    internal void (string );
    internal int ();
    internal string ();
    internal void (string );
    internal Byte[] ();
    internal void (Byte[] );
    public bool get_AutoUpdate();
    public void set_AutoUpdate(bool value);
    public bool get_AutoLoad();
    public void set_AutoLoad(bool value);
    internal int ();
    internal void (int );
    internal Guid ();
    internal void (Guid );
    public Byte[] get_ClassIdentifier();
    public void set_ClassIdentifier(Byte[] value);
    internal void ();
    internal void (OleObject , CopyOptions );
    public ImageType get_ImageType();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.OleObjectCollection : CollectionBase`1<OleObject> {
    [DebuggerBrowsableAttribute("0")]
[]
private ShapeCollection ;
    public OleObject Item { get; }
    internal OleObjectCollection(ShapeCollection );
    internal bool ();
    internal bool ();
    public int Add(int upperLeftRow, int upperLeftColumn, int height, int width, Byte[] imageData);
    public int Add(int upperLeftRow, int upperLeftColumn, int height, int width, Byte[] imageData, string linkedFile);
    public OleObject get_Item(int index);
    public void Clear();
    public void RemoveAt(int index);
    internal void (OleObject );
    internal void (OleObject );
}
public class Aspose.Cells.Drawing.Oval : Shape {
    internal Oval(ShapeCollection );
}
public class Aspose.Cells.Drawing.PatternFill : Fill {
    [DebuggerBrowsableAttribute("0")]
[]
private FillFormat ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private FillPattern ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public FillPattern Pattern { get; public set; }
    public Color BackgroundColor { get; public set; }
    public CellsColor BackgroundCellsColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public CellsColor ForegroundCellsColor { get; public set; }
    public double ForeTransparency { get; public set; }
    public double BackTransparency { get; public set; }
    internal PatternFill(FillFormat , Workbook );
    internal object ();
    internal Chart ();
    public FillPattern get_Pattern();
    public void set_Pattern(FillPattern value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    internal  ();
    public CellsColor get_BackgroundCellsColor();
    public void set_BackgroundCellsColor(CellsColor value);
    public Color get_ForegroundColor();
    public void set_ForegroundColor(Color value);
    public CellsColor get_ForegroundCellsColor();
    public void set_ForegroundCellsColor(CellsColor value);
    internal int ();
    internal void (int );
    public double get_ForeTransparency();
    public void set_ForeTransparency(double value);
    internal int ();
    internal void (int );
    public double get_BackTransparency();
    public void set_BackTransparency(double value);
    internal virtual void 2shawfk3flvxggtejs7dylv5mewjax38(Fill , CopyOptions );
    internal void (PatternFill , CopyOptions );
    internal bool (PatternFill );
    internal virtual FillType 2shawfk3flvxggtejs7dylv5mewjax38();
}
public class Aspose.Cells.Drawing.PicFormatOption : object {
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private FillPictureType ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    public FillPictureType Type { get; public set; }
    public double Scale { get; public set; }
    public double Left { get; public set; }
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    public double Right { get; public set; }
    internal ushort ();
    internal void (ushort );
    public FillPictureType get_Type();
    public void set_Type(FillPictureType value);
    public double get_Scale();
    public void set_Scale(double value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Top();
    public void set_Top(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public double get_Right();
    public void set_Right(double value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal void (PicFormatOption );
    internal bool (PicFormatOption );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
}
public class Aspose.Cells.Drawing.Picture : Shape {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal SignatureLine ;
    public int OriginalHeight { get; }
    public int OriginalWidth { get; }
    public Color BorderLineColor { get; public set; }
    public double BorderWeight { get; public set; }
    public Byte[] Data { get; public set; }
    public string SourceFullName { get; public set; }
    public string Formula { get; public set; }
    public bool IsAutoSize { get; public set; }
    public bool IsLink { get; public set; }
    public bool IsDynamicDataExchange { get; public set; }
    public bool DisplayAsIcon { get; public set; }
    public ImageType ImageType { get; }
    public double OriginalHeightCM { get; }
    public double OriginalWidthCM { get; }
    public double OriginalHeightInch { get; }
    public double OriginalWidthInch { get; }
    public SignatureLine SignatureLine { get; public set; }
    internal Picture(ShapeCollection );
    internal Picture(ShapeCollection , MsoDrawingType , object );
    public void Copy(Picture source, CopyOptions options);
    public void Move(int upperLeftRow, int upperLeftColumn);
    public void PlaceInCell();
    internal  ();
    public int get_OriginalHeight();
    public int get_OriginalWidth();
    internal virtual int hx5gdpfgpscqxealchv45cympj7kh4eu();
    internal virtual void hx5gdpfgpscqxealchv45cympj7kh4eu(int );
    public Color get_BorderLineColor();
    public void set_BorderLineColor(Color value);
    public double get_BorderWeight();
    public void set_BorderWeight(double value);
    internal bool ();
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    internal Byte[] ();
    internal void (Byte[] );
    public string get_SourceFullName();
    public void set_SourceFullName(string value);
    internal string ();
    internal void (string );
    public string get_Formula();
    public void set_Formula(string value);
    internal int ();
    internal void (int );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal bool ();
    internal bool ();
    internal Stream ();
    internal short ();
    internal void (short );
    public bool get_IsAutoSize();
    public void set_IsAutoSize(bool value);
    public bool get_IsLink();
    public void set_IsLink(bool value);
    public bool get_IsDynamicDataExchange();
    public void set_IsDynamicDataExchange(bool value);
    public bool get_DisplayAsIcon();
    public void set_DisplayAsIcon(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public ImageType get_ImageType();
    internal ImageType ();
    public double get_OriginalHeightCM();
    public double get_OriginalWidthCM();
    public double get_OriginalHeightInch();
    public double get_OriginalWidthInch();
    public SignatureLine get_SignatureLine();
    public void set_SignatureLine(SignatureLine value);
    public virtual bool IsSameSetting(object obj);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.PictureCollection : CollectionBase`1<Picture> {
    [DebuggerBrowsableAttribute("0")]
[]
private ShapeCollection ;
    public Picture Item { get; }
    internal PictureCollection(ShapeCollection );
    internal void (int );
    public int Add(int upperLeftRow, int upperLeftColumn, int lowerRightRow, int lowerRightColumn, Stream stream);
    public int Add(int upperLeftRow, int upperLeftColumn, int lowerRightRow, int lowerRightColumn, string fileName);
    public int Add(int upperLeftRow, int upperLeftColumn, Stream stream);
    public int Add(int upperLeftRow, int upperLeftColumn, string fileName);
    public int Add(int upperLeftRow, int upperLeftColumn, Stream stream, int widthScale, int heightScale);
    public int Add(int upperLeftRow, int upperLeftColumn, string fileName, int widthScale, int heightScale);
    public Picture get_Item(int index);
    public void Clear();
    public void RemoveAt(int index);
    internal int (Picture );
    internal void (Picture );
}
public enum Aspose.Cells.Drawing.PlacementType : Enum {
    public int value__;
    public static PlacementType FreeFloating;
    public static PlacementType Move;
    public static PlacementType MoveAndSize;
}
public enum Aspose.Cells.Drawing.PresetCameraType : Enum {
    public int value__;
    public static PresetCameraType IsometricBottomDown;
    public static PresetCameraType IsometricBottomUp;
    public static PresetCameraType IsometricLeftDown;
    public static PresetCameraType IsometricLeftUp;
    public static PresetCameraType IsometricOffAxis1Left;
    public static PresetCameraType IsometricOffAxis1Right;
    public static PresetCameraType IsometricOffAxis1Top;
    public static PresetCameraType IsometricOffAxis2Left;
    public static PresetCameraType IsometricOffAxis2Right;
    public static PresetCameraType IsometricOffAxis2Top;
    public static PresetCameraType IsometricOffAxis3Bottom;
    public static PresetCameraType IsometricOffAxis3Left;
    public static PresetCameraType IsometricOffAxis3Right;
    public static PresetCameraType IsometricOffAxis4Bottom;
    public static PresetCameraType IsometricOffAxis4Left;
    public static PresetCameraType IsometricOffAxis4Right;
    public static PresetCameraType IsometricRightDown;
    public static PresetCameraType IsometricRightUp;
    public static PresetCameraType IsometricTopDown;
    public static PresetCameraType IsometricTopUp;
    public static PresetCameraType LegacyObliqueBottom;
    public static PresetCameraType LegacyObliqueBottomLeft;
    public static PresetCameraType LegacyObliqueBottomRight;
    public static PresetCameraType LegacyObliqueFront;
    public static PresetCameraType LegacyObliqueLeft;
    public static PresetCameraType LegacyObliqueRight;
    public static PresetCameraType LegacyObliqueTop;
    public static PresetCameraType LegacyObliqueTopLeft;
    public static PresetCameraType LegacyObliqueTopRight;
    public static PresetCameraType LegacyPerspectiveBottom;
    public static PresetCameraType LegacyPerspectiveBottomLeft;
    public static PresetCameraType LegacyPerspectiveBottomRight;
    public static PresetCameraType LegacyPerspectiveFront;
    public static PresetCameraType LegacyPerspectiveLeft;
    public static PresetCameraType LegacyPerspectiveRight;
    public static PresetCameraType LegacyPerspectiveTop;
    public static PresetCameraType LegacyPerspectiveTopLeft;
    public static PresetCameraType LegacyPerspectiveTopRight;
    public static PresetCameraType ObliqueBottom;
    public static PresetCameraType ObliqueBottomLeft;
    public static PresetCameraType ObliqueBottomRight;
    public static PresetCameraType ObliqueLeft;
    public static PresetCameraType ObliqueRight;
    public static PresetCameraType ObliqueTop;
    public static PresetCameraType ObliqueTopLeft;
    public static PresetCameraType ObliqueTopRight;
    public static PresetCameraType OrthographicFront;
    public static PresetCameraType PerspectiveAbove;
    public static PresetCameraType PerspectiveAboveLeftFacing;
    public static PresetCameraType PerspectiveAboveRightFacing;
    public static PresetCameraType PerspectiveBelow;
    public static PresetCameraType PerspectiveContrastingLeftFacing;
    public static PresetCameraType PerspectiveContrastingRightFacing;
    public static PresetCameraType PerspectiveFront;
    public static PresetCameraType PerspectiveHeroicExtremeLeftFacing;
    public static PresetCameraType PerspectiveHeroicExtremeRightFacing;
    public static PresetCameraType PerspectiveHeroicLeftFacing;
    public static PresetCameraType PerspectiveHeroicRightFacing;
    public static PresetCameraType PerspectiveLeft;
    public static PresetCameraType PerspectiveRelaxed;
    public static PresetCameraType PerspectiveRelaxedModerately;
    public static PresetCameraType PerspectiveRight;
}
public enum Aspose.Cells.Drawing.PresetMaterialType : Enum {
    public int value__;
    public static PresetMaterialType Clear;
    public static PresetMaterialType DarkEdge;
    public static PresetMaterialType Flat;
    public static PresetMaterialType LegacyMatte;
    public static PresetMaterialType LegacyMetal;
    public static PresetMaterialType LegacyPlastic;
    public static PresetMaterialType LegacyWireframe;
    public static PresetMaterialType Matte;
    public static PresetMaterialType Metal;
    public static PresetMaterialType Plastic;
    public static PresetMaterialType Powder;
    public static PresetMaterialType SoftEdge;
    public static PresetMaterialType SoftMetal;
    public static PresetMaterialType TranslucentPowder;
    public static PresetMaterialType WarmMatte;
}
public enum Aspose.Cells.Drawing.PresetShadowType : Enum {
    public int value__;
    public static PresetShadowType NoShadow;
    public static PresetShadowType Custom;
    public static PresetShadowType OffsetDiagonalBottomRight;
    public static PresetShadowType OffsetBottom;
    public static PresetShadowType OffsetDiagonalBottomLeft;
    public static PresetShadowType OffsetRight;
    public static PresetShadowType OffsetCenter;
    public static PresetShadowType OffsetLeft;
    public static PresetShadowType OffsetDiagonalTopRight;
    public static PresetShadowType OffsetTop;
    public static PresetShadowType OffsetDiagonalTopLeft;
    public static PresetShadowType InsideDiagonalTopLeft;
    public static PresetShadowType InsideTop;
    public static PresetShadowType InsideDiagonalTopRight;
    public static PresetShadowType InsideLeft;
    public static PresetShadowType InsideCenter;
    public static PresetShadowType InsideRight;
    public static PresetShadowType InsideDiagonalBottomLeft;
    public static PresetShadowType InsideBottom;
    public static PresetShadowType InsideDiagonalBottomRight;
    public static PresetShadowType PerspectiveDiagonalUpperLeft;
    public static PresetShadowType PerspectiveDiagonalUpperRight;
    public static PresetShadowType Below;
    public static PresetShadowType PerspectiveDiagonalLowerLeft;
    public static PresetShadowType PerspectiveDiagonalLowerRight;
}
public enum Aspose.Cells.Drawing.PresetThemeGradientType : Enum {
    public int value__;
    public static PresetThemeGradientType LightGradient;
    public static PresetThemeGradientType TopSpotlight;
    public static PresetThemeGradientType MediumGradient;
    public static PresetThemeGradientType BottomSpotlight;
    public static PresetThemeGradientType RadialGradient;
}
public enum Aspose.Cells.Drawing.PresetWordArtStyle : Enum {
    public int value__;
    public static PresetWordArtStyle WordArtStyle1;
    public static PresetWordArtStyle WordArtStyle2;
    public static PresetWordArtStyle WordArtStyle3;
    public static PresetWordArtStyle WordArtStyle4;
    public static PresetWordArtStyle WordArtStyle5;
    public static PresetWordArtStyle WordArtStyle6;
    public static PresetWordArtStyle WordArtStyle7;
    public static PresetWordArtStyle WordArtStyle8;
    public static PresetWordArtStyle WordArtStyle9;
    public static PresetWordArtStyle WordArtStyle10;
    public static PresetWordArtStyle WordArtStyle11;
    public static PresetWordArtStyle WordArtStyle12;
    public static PresetWordArtStyle WordArtStyle13;
    public static PresetWordArtStyle WordArtStyle14;
    public static PresetWordArtStyle WordArtStyle15;
    public static PresetWordArtStyle WordArtStyle16;
    public static PresetWordArtStyle WordArtStyle17;
    public static PresetWordArtStyle WordArtStyle18;
    public static PresetWordArtStyle WordArtStyle19;
    public static PresetWordArtStyle WordArtStyle20;
}
public class Aspose.Cells.Drawing.RadioButton : Shape {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool IsChecked { get; public set; }
    public bool Shadow { get; public set; }
    public GroupBox GroupBox { get; }
    internal RadioButton(ShapeCollection );
    internal virtual Byte[] 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths();
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(Byte[] );
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public int GetOptionIndex();
    private Object[] (bool );
    public bool get_Shadow();
    public void set_Shadow(bool value);
    internal void (RadioButton , CopyOptions );
    public GroupBox get_GroupBox();
}
public enum Aspose.Cells.Drawing.RectangleAlignmentType : Enum {
    public int value__;
    public static RectangleAlignmentType Bottom;
    public static RectangleAlignmentType BottomLeft;
    public static RectangleAlignmentType BottomRight;
    public static RectangleAlignmentType Center;
    public static RectangleAlignmentType Left;
    public static RectangleAlignmentType Right;
    public static RectangleAlignmentType Top;
    public static RectangleAlignmentType TopLeft;
    public static RectangleAlignmentType TopRight;
}
public class Aspose.Cells.Drawing.RectangleShape : Shape {
    internal RectangleShape(ShapeCollection );
    internal void (RectangleShape , CopyOptions );
}
public class Aspose.Cells.Drawing.ReflectionEffect : object {
    [DebuggerBrowsableAttribute("0")]
internal static ReflectionEffect ;
    [DebuggerBrowsableAttribute("0")]
internal static ReflectionEffect ;
    [DebuggerBrowsableAttribute("0")]
internal static ReflectionEffect ;
    [DebuggerBrowsableAttribute("0")]
internal static ReflectionEffect ;
    [DebuggerBrowsableAttribute("0")]
internal static ReflectionEffect ;
    [DebuggerBrowsableAttribute("0")]
internal static ReflectionEffect ;
    [DebuggerBrowsableAttribute("0")]
internal static ReflectionEffect ;
    [DebuggerBrowsableAttribute("0")]
internal static ReflectionEffect ;
    [DebuggerBrowsableAttribute("0")]
internal static ReflectionEffect ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal RectangleAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    public ReflectionEffectType Type { get; public set; }
    public double Transparency { get; public set; }
    public double Size { get; public set; }
    public double Blur { get; public set; }
    public double Direction { get; public set; }
    public double Distance { get; public set; }
    public double FadeDirection { get; public set; }
    public bool RotWithShape { get; public set; }
    internal ReflectionEffect(int , int , int , int , int , int , int , RectangleAlignmentType , bool );
    private static ReflectionEffect();
    private void ();
    public ReflectionEffectType get_Type();
    public void set_Type(ReflectionEffectType value);
    private static ReflectionEffect (ReflectionEffectType );
    public double get_Transparency();
    public void set_Transparency(double value);
    public double get_Size();
    public void set_Size(double value);
    public double get_Blur();
    public void set_Blur(double value);
    public double get_Direction();
    public void set_Direction(double value);
    public double get_Distance();
    public void set_Distance(double value);
    internal RectangleAlignmentType ();
    internal void (RectangleAlignmentType );
    internal int ();
    internal void (int );
    public double get_FadeDirection();
    public void set_FadeDirection(double value);
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    public bool get_RotWithShape();
    public void set_RotWithShape(bool value);
    internal int ();
    internal void (int );
    internal double ();
    internal void (double );
    internal double ();
    internal void (double );
    internal void (ReflectionEffect );
    internal bool (ReflectionEffect );
}
public enum Aspose.Cells.Drawing.ReflectionEffectType : Enum {
    public int value__;
    public static ReflectionEffectType None;
    public static ReflectionEffectType Custom;
    public static ReflectionEffectType TightReflectionTouching;
    public static ReflectionEffectType HalfReflectionTouching;
    public static ReflectionEffectType FullReflectionTouching;
    public static ReflectionEffectType TightReflection4PtOffset;
    public static ReflectionEffectType HalfReflection4PtOffset;
    public static ReflectionEffectType FullReflection4PtOffset;
    public static ReflectionEffectType TightReflection8PtOffset;
    public static ReflectionEffectType HalfReflection8PtOffset;
    public static ReflectionEffectType FullReflection8PtOffset;
}
public class Aspose.Cells.Drawing.ScrollBar : Shape {
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public int CurrentValue { get; public set; }
    public int Min { get; public set; }
    public int Max { get; public set; }
    public int IncrementalChange { get; public set; }
    public int PageChange { get; public set; }
    public bool Shadow { get; public set; }
    public bool IsHorizontal { get; public set; }
    internal ScrollBar(ShapeCollection );
    public int get_CurrentValue();
    public void set_CurrentValue(int value);
    internal void (int );
    public int get_Min();
    public void set_Min(int value);
    public int get_Max();
    public void set_Max(int value);
    public int get_IncrementalChange();
    public void set_IncrementalChange(int value);
    public int get_PageChange();
    public void set_PageChange(int value);
    private void (int );
    public bool get_Shadow();
    public void set_Shadow(bool value);
    public bool get_IsHorizontal();
    public void set_IsHorizontal(bool value);
    internal void (ScrollBar , CopyOptions );
}
public enum Aspose.Cells.Drawing.SelectionType : Enum {
    public int value__;
    public static SelectionType Single;
    public static SelectionType Multi;
    public static SelectionType Extend;
}
public class Aspose.Cells.Drawing.ShadowEffect : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    public PresetShadowType PresetType { get; public set; }
    public CellsColor Color { get; public set; }
    public double Transparency { get; public set; }
    public double Size { get; public set; }
    public double Blur { get; public set; }
    public double Angle { get; public set; }
    public double Distance { get; public set; }
    internal ShadowEffect( );
    internal void (ShadowEffect , CopyOptions );
    internal bool (ShadowEffect );
    internal  ();
    internal void ( );
    internal  ();
    internal  ();
    internal  ();
    internal Workbook ();
    public PresetShadowType get_PresetType();
    public void set_PresetType(PresetShadowType value);
    private PresetShadowType ();
    private void (PresetShadowType );
    private void (int , int , int );
    private void ();
    private void (int , int , int , int );
    private void (int , int , int , int , int , int , int , RectangleAlignmentType , int );
    private bool ( , int , int , int , int , int , int , int , RectangleAlignmentType , int );
    private bool ( , int , int , int );
    public CellsColor get_Color();
    public void set_Color(CellsColor value);
    private void ();
    public double get_Transparency();
    public void set_Transparency(double value);
    public double get_Size();
    public void set_Size(double value);
    public double get_Blur();
    public void set_Blur(double value);
    public double get_Angle();
    public void set_Angle(double value);
    public double get_Distance();
    public void set_Distance(double value);
}
public class Aspose.Cells.Drawing.Shape : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal ShapeCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal MsoFormatPicture ;
    [DebuggerBrowsableAttribute("0")]
internal ShapeAnchorType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private RectangleF ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal FontSettingCollection ;
    [DebuggerBrowsableAttribute("0")]
internal FontSettingCollection ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Geometry ;
    [DebuggerBrowsableAttribute("0")]
private short ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Guid ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public string MacroName { get; public set; }
    public bool IsEquation { get; }
    public bool IsSmartArt { get; }
    public int ZOrderPosition { get; public set; }
    public string Name { get; public set; }
    public string AlternativeText { get; public set; }
    public string Title { get; public set; }
    [ObsoleteAttribute("Use Shape.Line property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoLineFormat LineFormat { get; }
    [ObsoleteAttribute("Use Shape.Fill property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public MsoFillFormat FillFormat { get; }
    public LineFormat Line { get; }
    public FillFormat Fill { get; }
    public ShadowEffect ShadowEffect { get; }
    public ReflectionEffect Reflection { get; }
    public GlowEffect Glow { get; }
    public double SoftEdges { get; public set; }
    public ThreeDFormat ThreeDFormat { get; }
    public MsoFormatPicture FormatPicture { get; }
    public bool IsHidden { get; public set; }
    [ObsoleteAttribute("Use Shape.IsAspectRatioLocked property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool IsLockAspectRatio { get; public set; }
    public bool IsAspectRatioLocked { get; public set; }
    public double RotationAngle { get; public set; }
    public Hyperlink Hyperlink { get; }
    public int Id { get; }
    public string Spid { get; }
    public int Spt { get; }
    public Worksheet Worksheet { get; }
    public bool IsGroup { get; }
    public bool IsInGroup { get; }
    public bool IsWordArt { get; }
    public TextEffectFormat TextEffect { get; }
    public bool IsLocked { get; public set; }
    public bool IsPrintable { get; public set; }
    public MsoDrawingType MsoDrawingType { get; }
    public AutoShapeType AutoShapeType { get; public set; }
    public ShapeAnchorType AnchorType { get; public set; }
    public PlacementType Placement { get; public set; }
    public int UpperLeftRow { get; public set; }
    public int UpperDeltaY { get; public set; }
    public int UpperLeftColumn { get; public set; }
    public int UpperDeltaX { get; public set; }
    public int LowerRightRow { get; public set; }
    public int LowerDeltaY { get; public set; }
    public int LowerRightColumn { get; public set; }
    public int LowerDeltaX { get; public set; }
    public int Right { get; public set; }
    public int Bottom { get; public set; }
    public int Width { get; public set; }
    public double WidthInch { get; public set; }
    public double WidthPt { get; public set; }
    public double WidthCM { get; public set; }
    public int Height { get; public set; }
    public double HeightInch { get; public set; }
    public double HeightPt { get; public set; }
    public double HeightCM { get; public set; }
    public int Left { get; public set; }
    public double LeftInch { get; public set; }
    public double LeftCM { get; public set; }
    public int Top { get; public set; }
    public double TopInch { get; public set; }
    public double TopCM { get; public set; }
    public int TopToCorner { get; public set; }
    public int LeftToCorner { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public int WidthScale { get; public set; }
    public int HeightScale { get; public set; }
    public int TopInShape { get; public set; }
    public int LeftInShape { get; public set; }
    public int WidthInShape { get; public set; }
    public int HeightInShape { get; public set; }
    public GroupShape Group { get; }
    public AutoShapeType Type { get; }
    public bool HasLine { get; public set; }
    public bool IsFilled { get; public set; }
    public bool IsFlippedHorizontally { get; public set; }
    public bool IsFlippedVertically { get; public set; }
    public int ActualLowerRightRow { get; }
    public bool RelativeToOriginalPictureSize { get; public set; }
    public string LinkedCell { get; public set; }
    public string InputRange { get; public set; }
    public AutoShapeType TextShapeType { get; public set; }
    public FontSettingCollection TextBody { get; }
    public Font Font { get; public set; }
    public TextOptions TextOptions { get; public set; }
    public string Text { get; public set; }
    public bool IsRichText { get; }
    public string HtmlText { get; public set; }
    public TextOverflowType TextVerticalOverflow { get; public set; }
    public TextOverflowType TextHorizontalOverflow { get; public set; }
    public bool IsTextWrapped { get; public set; }
    public TextOrientationType TextOrientationType { get; public set; }
    public TextAlignmentType TextHorizontalAlignment { get; public set; }
    public TextAlignmentType TextVerticalAlignment { get; public set; }
    public TextDirectionType TextDirection { get; public set; }
    [("True")]
public Byte[] ControlData { get; }
    public ActiveXControl ActiveXControl { get; }
    public ShapePathCollection Paths { get; }
    public Geometry Geometry { get; }
    public Guid CreateId { get; public set; }
    public bool IsDecorative { get; public set; }
    internal Shape(ShapeCollection , MsoDrawingType , object );
    []
internal Shape(ShapeCollection , MsoDrawingType , AutoShapeType , object );
    public string get_MacroName();
    public void set_MacroName(string value);
    public bool get_IsEquation();
    public bool get_IsSmartArt();
    [("True")]
public virtual GroupShape GetResultOfSmartArt();
    internal Shape ();
    internal int ();
    public void ToFrontOrBack(int orders);
    public int get_ZOrderPosition();
    public void set_ZOrderPosition(int value);
    internal int ();
    private void (AutoShapeType );
    internal  ();
    internal int ();
    internal bool ();
    internal void (string );
    internal string ();
    public string get_Name();
    public void set_Name(string value);
    private void ();
    internal string ();
    internal string ();
    public string get_AlternativeText();
    public void set_AlternativeText(string value);
    public string get_Title();
    public void set_Title(string value);
    public MsoLineFormat get_LineFormat();
    public MsoFillFormat get_FillFormat();
    internal  ();
    internal  ();
    internal bool ();
    internal void ();
    internal void (Geometry , Shape );
    internal FillFormat ( , bool );
    internal LineFormat ( , bool );
    internal  ();
    public LineFormat get_Line();
    public FillFormat get_Fill();
    public ShadowEffect get_ShadowEffect();
    public ReflectionEffect get_Reflection();
    public GlowEffect get_Glow();
    public double get_SoftEdges();
    public void set_SoftEdges(double value);
    public ThreeDFormat get_ThreeDFormat();
    internal ThreeDFormat ();
    public MsoFormatPicture get_FormatPicture();
    internal bool ();
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsLockAspectRatio();
    public void set_IsLockAspectRatio(bool value);
    public bool get_IsAspectRatioLocked();
    public void set_IsAspectRatioLocked(bool value);
    public bool GetLockedProperty(ShapeLockType type);
    public void SetLockedProperty(ShapeLockType type, bool value);
    internal bool ();
    public double get_RotationAngle();
    public void set_RotationAngle(double value);
    internal double ();
    internal bool ();
    internal void (double );
    public Hyperlink AddHyperlink(string address);
    public void RemoveHyperlink();
    public Hyperlink get_Hyperlink();
    internal object ();
    internal void (object );
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(Shape , CopyOptions );
    public void MoveToRange(int upperLeftRow, int upperLeftColumn, int lowerRightRow, int lowerRightColumn);
    public void AlignTopRightCorner(int topRow, int rightColumn);
    internal void (int , int , int , int );
    internal void (PlacementType , int , int , int , int );
    internal void (PlacementType , bool , double , double , double , double );
    internal  ();
    internal Double[] ();
    internal Double[] (bool );
    internal void (int , int , int , int , int , int );
    internal Double[] ();
    internal Int32[] ();
    internal void (PlacementType , int , int , int , int , int , int , int , int );
    internal void (PlacementType , int , double , int , double , int , double , int , double );
    internal  ();
    internal void ( );
    internal ShapeCollection ();
    internal void (ShapeCollection );
    public int get_Id();
    public string get_Spid();
    public int get_Spt();
    internal int ();
    internal void (int );
    internal WorksheetCollection ();
    public Worksheet get_Worksheet();
    internal  ();
    internal  ();
    internal void ( );
    public bool get_IsGroup();
    internal bool ();
    internal bool ();
    internal bool ();
    public bool get_IsInGroup();
    internal int ();
    internal bool ();
    internal bool ();
    public bool get_IsWordArt();
    public TextEffectFormat get_TextEffect();
    internal  ();
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public bool get_IsPrintable();
    public void set_IsPrintable(bool value);
    public MsoDrawingType get_MsoDrawingType();
    internal void (MsoDrawingType );
    public AutoShapeType get_AutoShapeType();
    public void set_AutoShapeType(AutoShapeType value);
    public ShapeAnchorType get_AnchorType();
    public void set_AnchorType(ShapeAnchorType value);
    internal PlacementType ();
    internal void (PlacementType );
    public PlacementType get_Placement();
    public void set_Placement(PlacementType value);
    internal PlacementType ();
    internal void (PlacementType );
    internal Double[] ();
    internal void (Double[] );
    internal Double[] ();
    internal void (Double[] );
    internal Double[] ();
    internal void (Double[] );
    internal Double[] ();
    internal void (Double[] );
    public int get_UpperLeftRow();
    public void set_UpperLeftRow(int value);
    public int get_UpperDeltaY();
    public void set_UpperDeltaY(int value);
    public int get_UpperLeftColumn();
    public void set_UpperLeftColumn(int value);
    public int get_UpperDeltaX();
    public void set_UpperDeltaX(int value);
    public int get_LowerRightRow();
    public void set_LowerRightRow(int value);
    public int get_LowerDeltaY();
    public void set_LowerDeltaY(int value);
    public int get_LowerRightColumn();
    public void set_LowerRightColumn(int value);
    public int get_LowerDeltaX();
    public void set_LowerDeltaX(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public int get_Width();
    public void set_Width(int value);
    internal void (bool , int );
    internal void (bool , double );
    internal double (bool );
    internal void (bool , double );
    internal double (bool );
    internal double (bool );
    internal void (bool , double );
    internal int (bool );
    internal double (bool );
    public double get_WidthInch();
    public void set_WidthInch(double value);
    public double get_WidthPt();
    public void set_WidthPt(double value);
    public double get_WidthCM();
    public void set_WidthCM(double value);
    public int get_Height();
    public void set_Height(int value);
    public double get_HeightInch();
    public void set_HeightInch(double value);
    public double get_HeightPt();
    public void set_HeightPt(double value);
    public double get_HeightCM();
    public void set_HeightCM(double value);
    public int get_Left();
    public void set_Left(int value);
    public double get_LeftInch();
    public void set_LeftInch(double value);
    public double get_LeftCM();
    public void set_LeftCM(double value);
    public int get_Top();
    public void set_Top(int value);
    public double get_TopInch();
    public void set_TopInch(double value);
    public double get_TopCM();
    public void set_TopCM(double value);
    public int get_TopToCorner();
    public void set_TopToCorner(int value);
    public int get_LeftToCorner();
    public void set_LeftToCorner(int value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_WidthScale();
    public void set_WidthScale(int value);
    internal Double[] ();
    private  ();
    public int get_HeightScale();
    public void set_HeightScale(int value);
    private void (int , bool );
    public int get_TopInShape();
    public void set_TopInShape(int value);
    public int get_LeftInShape();
    public void set_LeftInShape(int value);
    public int get_WidthInShape();
    public void set_WidthInShape(int value);
    public int get_HeightInShape();
    public void set_HeightInShape(int value);
    public GroupShape get_Group();
    public AutoShapeType get_Type();
    public bool get_HasLine();
    public void set_HasLine(bool value);
    internal bool ();
    internal void (bool );
    public bool get_IsFilled();
    public void set_IsFilled(bool value);
    public bool get_IsFlippedHorizontally();
    public void set_IsFlippedHorizontally(bool value);
    public bool get_IsFlippedVertically();
    public void set_IsFlippedVertically(bool value);
    internal Single[] (double );
    internal Single[] (double , int , int , double , double );
    internal Int32[] (double );
    internal Single[] (double );
    internal Single[] (double );
    private Rectangle (double , double );
    public int get_ActualLowerRightRow();
    public Single[][] GetConnectionPoints();
    private bool ();
    internal GroupBox ();
    internal bool ();
    public void ToImage(Stream stream, ImageType imageType);
    public void ToImage(string imageFile, ImageOrPrintOptions options);
    []
public void ToImage(Stream stream, ImageOrPrintOptions options);
    internal Bitmap (ImageOrPrintOptions );
    private void (Stream , ImageOrPrintOptions );
    private void (Stream , ImageOrPrintOptions );
    internal  (bool , IWarningCallback );
    internal RectangleF ();
    public bool get_RelativeToOriginalPictureSize();
    public void set_RelativeToOriginalPictureSize(bool value);
    internal virtual Byte[] 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths();
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(Byte[] );
    internal Cell (bool );
    internal Cell (bool , Byte[] );
    internal Range (Byte[] );
    public string get_LinkedCell();
    public void set_LinkedCell(string value);
    private Byte[] (string );
    internal Range ();
    internal virtual Byte[] 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths();
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(Byte[] );
    public string get_InputRange();
    public void set_InputRange(string value);
    public string GetLinkedCell(bool isR1C1, bool isLocal);
    public void SetLinkedCell(string formula, bool isR1C1, bool isLocal);
    public string GetInputRange(bool isR1C1, bool isLocal);
    public void SetInputRange(string formula, bool isR1C1, bool isLocal);
    private Byte[] (string , bool , bool );
    private string (Byte[] , int , int , bool , bool );
    public void UpdateSelectedValue();
    public AutoShapeType get_TextShapeType();
    public void set_TextShapeType(AutoShapeType value);
    public FontSettingCollection get_TextBody();
    public Font get_Font();
    public void set_Font(Font value);
    public TextOptions get_TextOptions();
    public void set_TextOptions(TextOptions value);
    public Int32[] CalculateTextSize();
    public string get_Text();
    public void set_Text(string value);
    public bool get_IsRichText();
    public string get_HtmlText();
    public void set_HtmlText(string value);
    public void FormatCharacters(int startIndex, int length, Font font, StyleFlag flag);
    public FontSetting Characters(int startIndex, int length);
    [ObsoleteAttribute("Use Shape.GetRichFormattings() instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public ArrayList GetCharacters();
    public FontSetting[] GetRichFormattings();
    internal ShapeTextAlignment ();
    public TextOverflowType get_TextVerticalOverflow();
    public void set_TextVerticalOverflow(TextOverflowType value);
    public TextOverflowType get_TextHorizontalOverflow();
    public void set_TextHorizontalOverflow(TextOverflowType value);
    public bool get_IsTextWrapped();
    public void set_IsTextWrapped(bool value);
    public TextOrientationType get_TextOrientationType();
    public void set_TextOrientationType(TextOrientationType value);
    public TextAlignmentType get_TextHorizontalAlignment();
    public void set_TextHorizontalAlignment(TextAlignmentType value);
    public TextAlignmentType get_TextVerticalAlignment();
    public void set_TextVerticalAlignment(TextAlignmentType value);
    public TextDirectionType get_TextDirection();
    public void set_TextDirection(TextDirectionType value);
    internal string ();
    internal void (string );
    public Byte[] get_ControlData();
    public ActiveXControl get_ActiveXControl();
    public void RemoveActiveXControl();
    internal bool ();
    internal bool ();
    internal void ();
    internal bool ();
    public ShapePathCollection get_Paths();
    internal Geometry ();
    internal void (Geometry );
    internal bool ();
    public Geometry get_Geometry();
    internal  ();
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(CellArea , int );
    internal virtual void 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(CellArea , int );
    internal virtual bool 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(int , int , int , int );
    internal virtual bool 6mgjd4zaqf3uecbfh45rxaj5ps5j4ths(int , int , int , int );
    internal void (object );
    internal  ();
    internal  ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal string ();
    public virtual bool IsSameSetting(object obj);
    internal bool (Shape );
    public Guid get_CreateId();
    public void set_CreateId(Guid value);
    public bool get_IsDecorative();
    public void set_IsDecorative(bool value);
    public Single[] GetActualBox();
}
public enum Aspose.Cells.Drawing.ShapeAnchorType : Enum {
    public int value__;
    public static ShapeAnchorType TwoCellAnchor;
    public static ShapeAnchorType OneCellAnchor;
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.ShapeCollection : CollectionBase`1<Shape> {
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    public Shape Item { get; }
    public Shape Item { get; }
    internal ShapeCollection(WorksheetCollection , Worksheet ,  , object , int );
    internal static MsoDrawingType (AutoShapeType );
    internal void ();
    internal void ();
    internal  ();
    internal  ();
    public Shape get_Item(int index);
    public Shape get_Item(string name);
    public Shape AddCopy(Shape sourceShape, int topRow, int top, int leftColumn, int left);
    public CheckBox AddCheckBox(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public TextBox AddTextBox(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public TextBox AddEquation(int topRow, int top, int leftColumn, int left, int height, int width);
    public Spinner AddSpinner(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public ScrollBar AddScrollBar(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public RadioButton AddRadioButton(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public ListBox AddListBox(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public ComboBox AddComboBox(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public GroupBox AddGroupBox(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public Button AddButton(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public Label AddLabel(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public Label AddLabelInChart(int top, int left, int height, int width);
    public TextBox AddTextBoxInChart(int top, int left, int height, int width);
    public Shape AddTextEffectInChart(MsoPresetTextEffect effect, string text, string fontName, int size, bool fontBold, bool fontItalic, int top, int left, int height, int width);
    public Shape AddTextEffect(MsoPresetTextEffect effect, string text, string fontName, int size, bool fontBold, bool fontItalic, int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public Shape AddWordArt(PresetWordArtStyle style, string text, int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public RectangleShape AddRectangle(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public Oval AddOval(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public LineShape AddLine(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public Shape AddFreeFloatingShape(MsoDrawingType type, int top, int left, int height, int width, Byte[] imageData, bool isOriginalSize);
    public Shape AddShapeInChart(MsoDrawingType type, PlacementType placement, int left, int top, int right, int bottom, Byte[] imageData);
    public Shape AddShapeInChart(MsoDrawingType type, PlacementType placement, int left, int top, int right, int bottom);
    public Shape AddShapeInChartByScale(MsoDrawingType type, PlacementType placement, double left, double top, double right, double bottom);
    public Shape AddShapeInChartByScale(MsoDrawingType type, PlacementType placement, double left, double top, double right, double bottom, Byte[] imageData);
    public ArcShape AddArc(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public Shape AddShape(MsoDrawingType type, int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public Shape AddAutoShape(AutoShapeType type, int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width);
    public Shape AddAutoShapeInChart(AutoShapeType type, int top, int left, int height, int width);
    public Shape AddActiveXControl(ControlType type, int topRow, int top, int leftColumn, int left, int width, int height);
    public Picture AddPicture(int upperLeftRow, int upperLeftColumn, int lowerRightRow, int lowerRightColumn, Stream stream);
    public Picture AddPicture(int upperLeftRow, int upperLeftColumn, Stream stream, int widthScale, int heightScale);
    public Picture AddSvg(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width, Byte[] svgData, Byte[] compatibleImageData);
    public Picture AddIcons(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width, Byte[] imageByteData, Byte[] compatibleImageData);
    public Picture AddLinkedPicture(int upperLeftRow, int upperLeftColumn, int height, int width, string sourceFullName);
    public OleObject AddOleObjectWithLinkedImage(int upperLeftRow, int upperLeftColumn, int height, int width, string sourceFullName);
    public Picture AddPictureInChart(int top, int left, Stream stream, int widthScale, int heightScale);
    public OleObject AddOleObject(int upperLeftRow, int top, int upperLeftColumn, int left, int height, int width, Byte[] imageData);
    internal int ();
    internal void (int );
    public void CopyCommentsInRange(ShapeCollection shapes, CellArea ca, int destRow, int destColumn);
    public void CopyInRange(ShapeCollection sourceShapes, CellArea ca, int destRow, int destColumn, bool isContained);
    public void DeleteInRange(CellArea ca);
    public void DeleteShape(Shape shape);
    internal void (ShapeCollection , int , int , int , CopyOptions );
    internal void (ShapeCollection , int , int , int , CopyOptions );
    internal void (ShapeCollection , CellArea , CellArea , CopyOptions );
    internal void (ShapeCollection , CopyOptions );
    internal Shape (Shape , GroupShape , CopyOptions );
    public GroupShape Group(Shape[] groupItems);
    internal void (GroupShape , Shape[] );
    public void Ungroup(GroupShape group);
    public void RemoveAt(int index);
    public void Remove(Shape shape);
    public void Clear();
    internal void ();
    public void UpdateSelectedValue();
    internal void (int );
    private void (int , int );
    internal void (int );
    internal void (int , Shape );
    internal void (Shape );
    internal void (int );
    internal void (CellArea , int );
    internal void (int , int , int , int , bool );
    internal void (CellArea , int );
    internal void (int , int , int , int );
    private void (Shape );
    internal void (Shape );
    internal void (int );
    internal bool (int );
    internal bool (int , Shape );
    internal bool (int );
    internal void (int );
    private void (int , Shape );
    internal void (int );
    internal int (Shape , Byte[] );
    internal void (Shape );
    internal void (Shape , Stream );
    internal bool ();
    internal bool ();
    internal object ();
    internal ArrayList (MsoDrawingType );
    internal WorksheetCollection ();
    internal Worksheet ();
    internal bool ();
    internal void ( );
    internal static bool (LoadDataFilterOptions );
    internal Shape (MsoDrawingType , AutoShapeType , LoadDataFilterOptions );
    internal void (int , int );
}
public class Aspose.Cells.Drawing.ShapeGuide : BaseShapeGuide {
    [DebuggerBrowsableAttribute("0")]
internal double ;
    public double Value { get; public set; }
    internal ShapeGuide(string , string );
    public double get_Value();
    public void set_Value(double value);
    internal double ();
    internal double ();
    internal void (double );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.ShapeGuideCollection : CollectionBase`1<ShapeGuide> {
    public ShapeGuide Item { get; }
    internal int (ShapeGuide );
    public int Add(string name, double val);
    public ShapeGuide get_Item(int index);
    internal double (object );
}
public enum Aspose.Cells.Drawing.ShapeLockType : Enum {
    public int value__;
    public static ShapeLockType Group;
    public static ShapeLockType AdjustHandles;
    public static ShapeLockType Text;
    public static ShapeLockType Points;
    public static ShapeLockType Crop;
    public static ShapeLockType Selection;
    public static ShapeLockType Move;
    public static ShapeLockType AspectRatio;
    public static ShapeLockType Rotation;
    public static ShapeLockType Ungroup;
    public static ShapeLockType Resize;
    public static ShapeLockType ShapeType;
    public static ShapeLockType Arrowhead;
}
public class Aspose.Cells.Drawing.ShapePath : object {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
private ShapeSegmentPathCollection ;
    public ShapeSegmentPathCollection PathSegementList { get; }
    internal bool ();
    public ShapeSegmentPathCollection get_PathSegementList();
    internal int ();
    internal void (ShapeSegmentPath );
    internal void (ShapePath );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.ShapePathCollection : CollectionBase`1<ShapePath> {
    [DebuggerBrowsableAttribute("0")]
[]
private Shape ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public int Count { get; }
    public ShapePath Item { get; }
    internal ShapePathCollection(Shape );
    public int get_Count();
    public ShapePath get_Item(int index);
    public int Add();
    internal int (ShapePath );
    internal int ();
    internal void ();
    private void ();
    internal void (ShapePathCollection );
}
public class Aspose.Cells.Drawing.ShapePathPoint : object {
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    public int X { get; public set; }
    public int Y { get; public set; }
    internal ShapePathPoint(object , object );
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    internal void (ShapePathPoint );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.ShapePathPointCollection : CollectionBase`1<ShapePathPoint> {
    public ShapePathPoint Item { get; }
    public ShapePathPoint get_Item(int index);
    public int Add(int x, int y);
    internal int (ShapePathPoint );
}
public enum Aspose.Cells.Drawing.ShapePathType : Enum {
    public int value__;
    public static ShapePathType LineTo;
    public static ShapePathType CubicBezierCurveTo;
    public static ShapePathType MoveTo;
    public static ShapePathType Close;
    public static ShapePathType End;
    public static ShapePathType Escape;
    public static ShapePathType ArcTo;
    public static ShapePathType Unknown;
}
public class Aspose.Cells.Drawing.ShapePropertyCollection : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Chart ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Format3D ;
    public GlowEffect GlowEffect { get; }
    public Format3D Format3D { get; }
    public double SoftEdgeRadius { get; public set; }
    public ShadowEffect ShadowEffect { get; }
    internal ShapePropertyCollection(Chart , object ,  );
    private void ();
    internal Workbook ();
    internal  ();
    internal  ();
    internal void ( );
    internal void ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal void (ShapePropertyCollection );
    internal void (ShapePropertyCollection , CopyOptions );
    internal bool (ShapePropertyCollection ,  );
    internal bool ();
    internal void (bool );
    internal void ();
    internal Area ();
    private bool (ChartPoint );
    private bool (Series );
    private bool (ChartType );
    internal Area ();
    internal Line ();
    internal Line ();
    public GlowEffect get_GlowEffect();
    public void ClearGlowEffect();
    public bool HasGlowEffect();
    public Format3D get_Format3D();
    public bool HasFormat3D();
    public void ClearFormat3D();
    public double get_SoftEdgeRadius();
    public void set_SoftEdgeRadius(double value);
    public ShadowEffect get_ShadowEffect();
    internal void ();
    public void ClearShadowEffect();
    public bool HasShadowEffect();
}
public class Aspose.Cells.Drawing.ShapeSegmentPath : object {
    [DebuggerBrowsableAttribute("0")]
private ShapePathType ;
    [DebuggerBrowsableAttribute("0")]
private ShapePathPointCollection ;
    public ShapePathType Type { get; }
    public ShapePathPointCollection Points { get; }
    internal ShapeSegmentPath(ShapePathType );
    public ShapePathType get_Type();
    public ShapePathPointCollection get_Points();
    internal void (ShapeSegmentPath );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.ShapeSegmentPathCollection : CollectionBase`1<ShapeSegmentPath> {
    public ShapeSegmentPath Item { get; }
    public int Add(ShapePathType type);
    public ShapeSegmentPath get_Item(int index);
    internal int (ShapeSegmentPath );
}
public class Aspose.Cells.Drawing.SignatureLine : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Guid ;
    [DebuggerBrowsableAttribute("0")]
private Guid ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public Guid Id { get; public set; }
    public Guid ProviderId { get; public set; }
    public string Signer { get; public set; }
    public string Title { get; public set; }
    public string Email { get; public set; }
    public bool IsLine { get; public set; }
    public bool AllowComments { get; public set; }
    public bool ShowSignedDate { get; public set; }
    public string Instructions { get; public set; }
    public Guid get_Id();
    public void set_Id(Guid value);
    internal Guid ();
    internal void (Guid );
    public Guid get_ProviderId();
    public void set_ProviderId(Guid value);
    internal Guid ();
    internal void (Guid );
    public string get_Signer();
    public void set_Signer(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Email();
    public void set_Email(string value);
    public bool get_IsLine();
    public void set_IsLine(bool value);
    public bool get_AllowComments();
    public void set_AllowComments(bool value);
    public bool get_ShowSignedDate();
    public void set_ShowSignedDate(bool value);
    public string get_Instructions();
    public void set_Instructions(string value);
    internal Byte[] ();
}
public class Aspose.Cells.Drawing.SmartArtShape : Shape {
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal GroupShape ;
    internal SmartArtShape(ShapeCollection );
    internal void ( ,  , bool ,  , bool );
    private  (int ,  , Hashtable ,  , bool );
    public virtual GroupShape GetResultOfSmartArt();
    internal void (SmartArtShape , CopyOptions );
}
public class Aspose.Cells.Drawing.SolidFill : Fill {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
private FillFormat ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    public Color Color { get; public set; }
    public CellsColor CellsColor { get; public set; }
    public double Transparency { get; public set; }
    internal SolidFill(FillFormat , Workbook );
    internal Chart ();
    internal object ();
    internal virtual FillType 2shawfk3flvxggtejs7dylv5mewjax38();
    public Color get_Color();
    public void set_Color(Color value);
    internal Color ();
    internal void (Color );
    internal bool ();
    public CellsColor get_CellsColor();
    public void set_CellsColor(CellsColor value);
    internal Color ();
    internal void (Color );
    public double get_Transparency();
    public void set_Transparency(double value);
    internal int ();
    internal void (int );
    internal virtual void 2shawfk3flvxggtejs7dylv5mewjax38(Fill , CopyOptions );
    internal void (SolidFill , CopyOptions );
    internal bool (SolidFill ,  );
    internal bool (SolidFill );
    internal bool (int );
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Aspose.Cells.Drawing.Spinner : Shape {
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public int CurrentValue { get; public set; }
    public int Min { get; public set; }
    public int Max { get; public set; }
    public int IncrementalChange { get; public set; }
    public bool Shadow { get; public set; }
    public bool IsHorizontal { get; public set; }
    internal Spinner(ShapeCollection );
    public int get_CurrentValue();
    public void set_CurrentValue(int value);
    internal void (int );
    public int get_Min();
    public void set_Min(int value);
    public int get_Max();
    public void set_Max(int value);
    public int get_IncrementalChange();
    public void set_IncrementalChange(int value);
    internal int ();
    internal void (int );
    private void (int );
    public bool get_Shadow();
    public void set_Shadow(bool value);
    public bool get_IsHorizontal();
    public void set_IsHorizontal(bool value);
    internal void (Spinner , CopyOptions );
}
public class Aspose.Cells.Drawing.TextBox : Shape {
    internal TextBox(ShapeCollection );
    public EquationNode GetEquationParagraph(int index);
    public EquationNode GetEquationParagraph();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.TextBoxCollection : CollectionBase`1<TextBox> {
    [DebuggerBrowsableAttribute("0")]
[]
private ShapeCollection ;
    public TextBox Item { get; }
    public TextBox Item { get; }
    internal TextBoxCollection(ShapeCollection );
    public TextBox get_Item(int index);
    public TextBox get_Item(string name);
    public int Add(int upperLeftRow, int upperLeftColumn, int height, int width);
    public void RemoveAt(int index);
    internal void (int );
    public void Clear();
    internal int (TextBox );
    internal void (TextBox );
}
public class Aspose.Cells.Drawing.TextEffectFormat : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Shape ;
    public string Text { get; public set; }
    public string FontName { get; public set; }
    public bool FontBold { get; public set; }
    public bool FontItalic { get; public set; }
    public bool RotatedChars { get; public set; }
    public int FontSize { get; public set; }
    public MsoPresetTextEffectShape PresetShape { get; public set; }
    internal TextEffectFormat(Shape );
    public void SetTextEffect(MsoPresetTextEffect effect);
    internal  ();
    public string get_Text();
    public void set_Text(string value);
    public string get_FontName();
    public void set_FontName(string value);
    public bool get_FontBold();
    public void set_FontBold(bool value);
    public bool get_FontItalic();
    public void set_FontItalic(bool value);
    internal bool ();
    internal bool ();
    internal bool ();
    public bool get_RotatedChars();
    public void set_RotatedChars(bool value);
    public int get_FontSize();
    public void set_FontSize(int value);
    internal double ();
    internal  ();
    internal void ( );
    internal static string ( );
    internal static TextAlignmentType ( );
    public MsoPresetTextEffectShape get_PresetShape();
    public void set_PresetShape(MsoPresetTextEffectShape value);
}
public enum Aspose.Cells.Drawing.TextOverflowType : Enum {
    public int value__;
    public static TextOverflowType Clip;
    public static TextOverflowType Ellipsis;
    public static TextOverflowType Overflow;
}
public class Aspose.Cells.Drawing.Texts.AutoNumberedBulletValue : BulletValue {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private TextAutonumberScheme ;
    public BulletType Type { get; }
    public int StartAt { get; public set; }
    public TextAutonumberScheme AutonumberScheme { get; public set; }
    public virtual BulletType get_Type();
    public int get_StartAt();
    public void set_StartAt(int value);
    public TextAutonumberScheme get_AutonumberScheme();
    public void set_AutonumberScheme(TextAutonumberScheme value);
    internal virtual void 47u94unmstlukll9jq4w3ysnkj5beqbw(BulletValue );
}
public class Aspose.Cells.Drawing.Texts.Bullet : object {
    [DebuggerBrowsableAttribute("0")]
[]
private TextParagraph ;
    [DebuggerBrowsableAttribute("0")]
internal BulletValue ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public BulletValue BulletValue { get; }
    public BulletType Type { get; public set; }
    public string FontName { get; public set; }
    internal Bullet(TextParagraph );
    public BulletValue get_BulletValue();
    public BulletType get_Type();
    public void set_Type(BulletType value);
    internal  ();
    internal string ();
    public string get_FontName();
    public void set_FontName(string value);
    internal  ();
    internal void ( );
    internal string (int );
    internal string ();
    internal bool ();
    internal void (Bullet , CopyOptions );
}
public enum Aspose.Cells.Drawing.Texts.BulletType : Enum {
    public int value__;
    public static BulletType None;
    public static BulletType Character;
    public static BulletType Picture;
    public static BulletType AutoNumbered;
}
public abstract class Aspose.Cells.Drawing.Texts.BulletValue : object {
    public BulletType Type { get; }
    public abstract virtual BulletType get_Type();
    internal abstract virtual void 47u94unmstlukll9jq4w3ysnkj5beqbw(BulletValue );
}
public class Aspose.Cells.Drawing.Texts.CharacterBulletValue : BulletValue {
    [DebuggerBrowsableAttribute("0")]
internal char ;
    public BulletType Type { get; }
    public char Character { get; public set; }
    public virtual BulletType get_Type();
    public char get_Character();
    public void set_Character(char value);
    internal virtual void 47u94unmstlukll9jq4w3ysnkj5beqbw(BulletValue );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.Texts.FontSettingCollection : CollectionBase`1<FontSetting> {
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal ShapeTextAlignment ;
    [DebuggerBrowsableAttribute("0")]
internal Double[] ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [("False")]
public ShapeTextAlignment TextAlignment { get; }
    public TextParagraphCollection TextParagraphs { get; }
    public string Text { get; public set; }
    public string HtmlString { get; public set; }
    public FontSetting Item { get; }
    internal FontSettingCollection(WorksheetCollection , object );
    internal short ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public void SetWordArtStyle(PresetWordArtStyle style);
    public ShapeTextAlignment get_TextAlignment();
    internal  ();
    internal bool ();
    internal Font ();
    internal void (Font );
    internal TextOptions ();
    internal void (TextOptions );
    private void (Font );
    internal Font ();
    internal int ();
    public TextParagraphCollection get_TextParagraphs();
    internal int ();
    [("TextParagraph")]
public IEnumerator GetParagraphEnumerator();
    public string get_Text();
    public void set_Text(string value);
    public void AppendText(string text);
    public void InsertText(int index, string text);
    public void Replace(int index, int count, string text);
    public void Replace(string oldValue, string newValue);
    public void DeleteText(int index, int count);
    private static string (string );
    private Font (Font );
    private void (int , int , Char[] , Font );
    public string get_HtmlString();
    public void set_HtmlString(string value);
    internal TextParagraph ();
    internal TextParagraph ();
    internal bool ();
    internal bool ();
    private FontSetting (int , int , Font , StyleFlag );
    private Font (int , int );
    internal FontSetting (int , int );
    private Font (Font , Font , StyleFlag , Font );
    public void Format(int startIndex, int length, Font font, StyleFlag flag);
    private void (int , int , Font , StyleFlag );
    public FontSetting get_Item(int index);
    internal int (FontSetting );
    internal FontSetting (int , int );
    internal FontSetting (TextNodeType , int , int );
    internal FontSetting (int , int , int );
    internal void (FontSettingCollection , CopyOptions );
    internal ArrayList (bool , bool );
    internal ArrayList (bool , bool , bool );
    internal ArrayList (Shape );
    internal ArrayList ();
    internal static StyleFlag (Font );
    internal void ();
    internal bool (FontSettingCollection );
    internal  ();
    internal TextAlignmentType ();
    internal void (TextAlignmentType );
    private int ();
    internal void ();
    public void Clear();
    internal void (string );
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Aspose.Cells.Drawing.Texts.LineSpaceSizeType : Enum {
    public int value__;
    public static LineSpaceSizeType Percentage;
    public static LineSpaceSizeType Points;
}
public class Aspose.Cells.Drawing.Texts.NoneBulletValue : BulletValue {
    public BulletType Type { get; }
    public virtual BulletType get_Type();
    internal virtual void 47u94unmstlukll9jq4w3ysnkj5beqbw(BulletValue );
}
public class Aspose.Cells.Drawing.Texts.PictureBulletValue : BulletValue {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    public BulletType Type { get; }
    public Byte[] ImageData { get; public set; }
    public virtual BulletType get_Type();
    internal int ();
    internal void (int );
    public Byte[] get_ImageData();
    public void set_ImageData(Byte[] value);
    internal virtual void 47u94unmstlukll9jq4w3ysnkj5beqbw(BulletValue );
}
public class Aspose.Cells.Drawing.Texts.ShapeTextAlignment : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal FontSettingCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ThreeDFormat ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public bool IsTextWrapped { get; public set; }
    public bool RotateTextWithShape { get; public set; }
    public TextOverflowType TextVerticalOverflow { get; public set; }
    public TextOverflowType TextHorizontalOverflow { get; public set; }
    public double RotationAngle { get; public set; }
    public TextVerticalType TextVerticalType { get; public set; }
    public bool IsLockedText { get; public set; }
    public bool AutoSize { get; public set; }
    public AutoShapeType TextShapeType { get; public set; }
    public double TopMarginPt { get; public set; }
    public double BottomMarginPt { get; public set; }
    public double LeftMarginPt { get; public set; }
    public double RightMarginPt { get; public set; }
    public bool IsAutoMargin { get; public set; }
    public int NumberOfColumns { get; public set; }
    internal ShapeTextAlignment(FontSettingCollection );
    internal WorksheetCollection ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool get_IsTextWrapped();
    public void set_IsTextWrapped(bool value);
    public bool get_RotateTextWithShape();
    public void set_RotateTextWithShape(bool value);
    internal bool ();
    internal void (bool );
    public TextOverflowType get_TextVerticalOverflow();
    public void set_TextVerticalOverflow(TextOverflowType value);
    public TextOverflowType get_TextHorizontalOverflow();
    public void set_TextHorizontalOverflow(TextOverflowType value);
    internal void (ShapeTextAlignment , CopyOptions );
    public double get_RotationAngle();
    public void set_RotationAngle(double value);
    public TextVerticalType get_TextVerticalType();
    public void set_TextVerticalType(TextVerticalType value);
    public bool get_IsLockedText();
    public void set_IsLockedText(bool value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public AutoShapeType get_TextShapeType();
    public void set_TextShapeType(AutoShapeType value);
    internal  ();
    internal ThreeDFormat ();
    internal ThreeDFormat ();
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    public double get_TopMarginPt();
    public void set_TopMarginPt(double value);
    internal int ();
    internal void (int );
    public double get_BottomMarginPt();
    public void set_BottomMarginPt(double value);
    internal int ();
    internal void (int );
    public double get_LeftMarginPt();
    public void set_LeftMarginPt(double value);
    internal int ();
    internal void (int );
    public double get_RightMarginPt();
    public void set_RightMarginPt(double value);
    public bool get_IsAutoMargin();
    public void set_IsAutoMargin(bool value);
    internal TextAlignmentType ();
    internal void (TextAlignmentType );
    internal TextAlignmentType ();
    internal void (TextAlignmentType );
    internal TextOrientationType ();
    internal void (TextOrientationType );
    internal TextDirectionType ();
    internal void (TextDirectionType );
    public int get_NumberOfColumns();
    public void set_NumberOfColumns(int value);
    internal bool (int , bool );
    internal bool (int );
    internal void (int , bool );
    internal void (int );
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Aspose.Cells.Drawing.Texts.TextAutonumberScheme : Enum {
    public int value__;
    public static TextAutonumberScheme None;
    public static TextAutonumberScheme AlphaLcParenBoth;
    public static TextAutonumberScheme AlphaLcParenR;
    public static TextAutonumberScheme AlphaLcPeriod;
    public static TextAutonumberScheme AlphaUcParenBoth;
    public static TextAutonumberScheme AlphaUcParenR;
    public static TextAutonumberScheme AlphaUcPeriod;
    public static TextAutonumberScheme Arabic1Minus;
    public static TextAutonumberScheme Arabic2Minus;
    public static TextAutonumberScheme ArabicDbPeriod;
    public static TextAutonumberScheme ArabicDbPlain;
    public static TextAutonumberScheme ArabicParenBoth;
    public static TextAutonumberScheme ArabicParenR;
    public static TextAutonumberScheme ArabicPeriod;
    public static TextAutonumberScheme ArabicPlain;
    public static TextAutonumberScheme CircleNumDbPlain;
    public static TextAutonumberScheme CircleNumWdBlackPlain;
    public static TextAutonumberScheme CircleNumWdWhitePlain;
    public static TextAutonumberScheme Ea1ChsPeriod;
    public static TextAutonumberScheme Ea1ChsPlain;
    public static TextAutonumberScheme Ea1ChtPeriod;
    public static TextAutonumberScheme Ea1ChtPlain;
    public static TextAutonumberScheme Ea1JpnChsDbPeriod;
    public static TextAutonumberScheme Ea1JpnKorPeriod;
    public static TextAutonumberScheme Ea1JpnKorPlain;
    public static TextAutonumberScheme Hebrew2Minus;
    public static TextAutonumberScheme HindiAlpha1Period;
    public static TextAutonumberScheme HindiAlphaPeriod;
    public static TextAutonumberScheme HindiNumParenR;
    public static TextAutonumberScheme HindiNumPeriod;
    public static TextAutonumberScheme RomanLcParenBoth;
    public static TextAutonumberScheme RomanLcParenR;
    public static TextAutonumberScheme RomanLcPeriod;
    public static TextAutonumberScheme RomanUcParenBoth;
    public static TextAutonumberScheme RomanUcParenR;
    public static TextAutonumberScheme RomanUcPeriod;
    public static TextAutonumberScheme ThaiAlphaParenBoth;
    public static TextAutonumberScheme ThaiAlphaParenR;
    public static TextAutonumberScheme ThaiAlphaPeriod;
    public static TextAutonumberScheme ThaiNumParenBoth;
    public static TextAutonumberScheme ThaiNumParenR;
    public static TextAutonumberScheme ThaiNumPeriod;
}
public enum Aspose.Cells.Drawing.Texts.TextFontAlignType : Enum {
    public int value__;
    public static TextFontAlignType Automatic;
    public static TextFontAlignType Bottom;
    public static TextFontAlignType Baseline;
    public static TextFontAlignType Center;
    public static TextFontAlignType Top;
}
public enum Aspose.Cells.Drawing.Texts.TextNodeType : Enum {
    public int value__;
    public static TextNodeType TextRun;
    public static TextNodeType TextParagraph;
    public static TextNodeType Equation;
}
public class Aspose.Cells.Drawing.Texts.TextOptions : Font {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public string Name { get; public set; }
    public CountryCode LanguageCode { get; public set; }
    public string LatinName { get; public set; }
    public string FarEastName { get; public set; }
    public FillFormat Fill { get; }
    public LineFormat Outline { get; }
    public ShadowEffect Shadow { get; }
    public CellsColor UnderlineColor { get; public set; }
    public double Kerning { get; public set; }
    public double Spacing { get; public set; }
    internal TextOptions(WorksheetCollection , object );
    internal static TextOptions (Font );
    internal virtual bool dxrjrx7b3a3c6fu99b3det38nyegmhzz();
    internal  ();
    internal void ( );
    internal virtual void dxrjrx7b3a3c6fu99b3det38nyegmhzz(Font , CopyOptions );
    internal virtual void dxrjrx7b3a3c6fu99b3det38nyegmhzz(string );
    internal virtual void dxrjrx7b3a3c6fu99b3det38nyegmhzz(string , bool , FontSchemeType );
    internal TextParagraph ();
    private static string (int , int ,  , string , WorksheetCollection , object );
    internal string (int );
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    public CountryCode get_LanguageCode();
    public void set_LanguageCode(CountryCode value);
    internal CountryCode ();
    internal void (CountryCode );
    internal  ();
    public string get_LatinName();
    public void set_LatinName(string value);
    public string get_FarEastName();
    public void set_FarEastName(string value);
    private string ( );
    public FillFormat get_Fill();
    public LineFormat get_Outline();
    public ShadowEffect get_Shadow();
    internal  ();
    internal virtual bool dxrjrx7b3a3c6fu99b3det38nyegmhzz();
    internal virtual  dxrjrx7b3a3c6fu99b3det38nyegmhzz();
    internal virtual void dxrjrx7b3a3c6fu99b3det38nyegmhzz( );
    public CellsColor get_UnderlineColor();
    public void set_UnderlineColor(CellsColor value);
    internal bool ();
    internal void (bool );
    public double get_Kerning();
    public void set_Kerning(double value);
    internal int ();
    internal void (int );
    public double get_Spacing();
    public void set_Spacing(double value);
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal virtual bool dxrjrx7b3a3c6fu99b3det38nyegmhzz(Font );
    internal virtual bool dxrjrx7b3a3c6fu99b3det38nyegmhzz(Font );
    private bool (Font );
    internal bool ();
}
public class Aspose.Cells.Drawing.Texts.TextParagraph : FontSetting {
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
internal FontSettingCollection ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Bullet ;
    [DebuggerBrowsableAttribute("0")]
internal TextOptions ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal TextTabStopCollection ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public Bullet Bullet { get; }
    public TextNodeType Type { get; }
    public LineSpaceSizeType LineSpaceSizeType { get; public set; }
    public double LineSpace { get; public set; }
    public LineSpaceSizeType SpaceAfterSizeType { get; public set; }
    public double SpaceAfter { get; public set; }
    public LineSpaceSizeType SpaceBeforeSizeType { get; public set; }
    public double SpaceBefore { get; public set; }
    public TextTabStopCollection Stops { get; }
    public bool IsLatinLineBreak { get; public set; }
    public bool IsEastAsianLineBreak { get; public set; }
    public bool IsHangingPunctuation { get; public set; }
    public double RightMargin { get; public set; }
    public double LeftMargin { get; public set; }
    public double FirstLineIndent { get; public set; }
    public TextFontAlignType FontAlignType { get; public set; }
    public TextAlignmentType AlignmentType { get; public set; }
    public double DefaultTabSize { get; public set; }
    public FontSetting[] Children { get; }
    internal TextParagraph(int , int , Workbook , FontSettingCollection );
    public Bullet get_Bullet();
    internal TextOptions ();
    internal TextOptions ();
    public virtual TextNodeType get_Type();
    public LineSpaceSizeType get_LineSpaceSizeType();
    public void set_LineSpaceSizeType(LineSpaceSizeType value);
    public double get_LineSpace();
    public void set_LineSpace(double value);
    public LineSpaceSizeType get_SpaceAfterSizeType();
    public void set_SpaceAfterSizeType(LineSpaceSizeType value);
    public double get_SpaceAfter();
    public void set_SpaceAfter(double value);
    public LineSpaceSizeType get_SpaceBeforeSizeType();
    public void set_SpaceBeforeSizeType(LineSpaceSizeType value);
    public double get_SpaceBefore();
    public void set_SpaceBefore(double value);
    public TextTabStopCollection get_Stops();
    internal bool ();
    internal void (bool );
    public bool get_IsLatinLineBreak();
    public void set_IsLatinLineBreak(bool value);
    public bool get_IsEastAsianLineBreak();
    public void set_IsEastAsianLineBreak(bool value);
    public bool get_IsHangingPunctuation();
    public void set_IsHangingPunctuation(bool value);
    internal int ();
    internal void (int );
    public double get_RightMargin();
    public void set_RightMargin(double value);
    internal int ();
    internal void (int );
    public double get_LeftMargin();
    public void set_LeftMargin(double value);
    internal int ();
    internal void (int );
    public double get_FirstLineIndent();
    public void set_FirstLineIndent(double value);
    internal int ();
    internal void (int );
    public TextFontAlignType get_FontAlignType();
    public void set_FontAlignType(TextFontAlignType value);
    public TextAlignmentType get_AlignmentType();
    public void set_AlignmentType(TextAlignmentType value);
    public double get_DefaultTabSize();
    public void set_DefaultTabSize(double value);
    public FontSetting[] get_Children();
    internal int ();
    internal void (int );
    internal virtual void da73tyc4ytaud2kb8z9jfbu4z5jd57dn(FontSetting , CopyOptions );
    internal bool (int );
    internal void (int );
    internal bool (int , bool );
    internal void (int , bool );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.Texts.TextParagraphCollection : object {
    [DebuggerBrowsableAttribute("0")]
private FontSettingCollection ;
    public int Count { get; }
    public TextParagraph Item { get; }
    internal TextParagraphCollection(FontSettingCollection );
    public int get_Count();
    public TextParagraph get_Item(int index);
    [("TextParagraph")]
public IEnumerator GetEnumerator();
}
public enum Aspose.Cells.Drawing.Texts.TextTabAlignmentType : Enum {
    public int value__;
    public static TextTabAlignmentType Center;
    public static TextTabAlignmentType Decimal;
    public static TextTabAlignmentType Left;
    public static TextTabAlignmentType Right;
}
public class Aspose.Cells.Drawing.Texts.TextTabStop : object {
    [DebuggerBrowsableAttribute("0")]
internal TextTabAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public TextTabAlignmentType TabAlignment { get; public set; }
    public double TabPosition { get; public set; }
    internal TextTabStop(TextTabAlignmentType , int );
    public TextTabAlignmentType get_TabAlignment();
    public void set_TabAlignment(TextTabAlignmentType value);
    public double get_TabPosition();
    public void set_TabPosition(double value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Drawing.Texts.TextTabStopCollection : CollectionBase`1<TextTabStop> {
    public TextTabStop Item { get; }
    internal int (TextTabAlignmentType , int );
    public int Add(TextTabAlignmentType tabAlignment, double tabPosition);
    public TextTabStop get_Item(int index);
}
public enum Aspose.Cells.Drawing.Texts.TextVerticalType : Enum {
    public int value__;
    public static TextVerticalType Vertical;
    public static TextVerticalType Horizontal;
    public static TextVerticalType VerticalLeftToRight;
    public static TextVerticalType Vertical90;
    public static TextVerticalType Vertical270;
    public static TextVerticalType Stacked;
    public static TextVerticalType StackedRightToLeft;
}
public class Aspose.Cells.Drawing.TextureFill : Fill {
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal TextureType ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public TextureType Type { get; public set; }
    public Byte[] ImageData { get; public set; }
    public bool IsTiling { get; public set; }
    public PicFormatOption PicFormatOption { get; public set; }
    public TilePicOption TilePicOption { get; public set; }
    public FillPictureType PictureFormatType { get; public set; }
    public double Scale { get; public set; }
    public double Transparency { get; public set; }
    internal TextureFill(Workbook );
    internal int ();
    internal void (int );
    internal  ();
    internal static TextureType ( );
    internal static TextureType (byte );
    internal Byte[] ();
    internal void (Byte[] );
    public TextureType get_Type();
    public void set_Type(TextureType value);
    public Byte[] get_ImageData();
    public void set_ImageData(Byte[] value);
    internal ImageType ();
    public bool get_IsTiling();
    public void set_IsTiling(bool value);
    public PicFormatOption get_PicFormatOption();
    public void set_PicFormatOption(PicFormatOption value);
    internal PicFormatOption ();
    public TilePicOption get_TilePicOption();
    public void set_TilePicOption(TilePicOption value);
    public FillPictureType get_PictureFormatType();
    public void set_PictureFormatType(FillPictureType value);
    public double get_Scale();
    public void set_Scale(double value);
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    public double get_Transparency();
    public void set_Transparency(double value);
    internal virtual FillType 2shawfk3flvxggtejs7dylv5mewjax38();
    internal virtual void 2shawfk3flvxggtejs7dylv5mewjax38(Fill , CopyOptions );
    internal void (TextureFill , CopyOptions );
    internal bool (TextureFill );
}
public enum Aspose.Cells.Drawing.TextureType : Enum {
    public int value__;
    public static TextureType BlueTissuePaper;
    public static TextureType Bouquet;
    public static TextureType BrownMarble;
    public static TextureType Canvas;
    public static TextureType Cork;
    public static TextureType Denim;
    public static TextureType FishFossil;
    public static TextureType Granite;
    public static TextureType GreenMarble;
    public static TextureType MediumWood;
    public static TextureType Newsprint;
    public static TextureType Oak;
    public static TextureType PaperBag;
    public static TextureType Papyrus;
    public static TextureType Parchment;
    public static TextureType PinkTissuePaper;
    public static TextureType PurpleMesh;
    public static TextureType RecycledPaper;
    public static TextureType Sand;
    public static TextureType Stationery;
    public static TextureType Walnut;
    public static TextureType WaterDroplets;
    public static TextureType WhiteMarble;
    public static TextureType WovenMat;
    public static TextureType Unknown;
}
public class Aspose.Cells.Drawing.ThreeDFormat : object {
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private BevelType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private BevelType ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal PresetMaterialType ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public double BottomBevelWidth { get; public set; }
    public double BottomBevelHeight { get; public set; }
    public BevelType BottomBevelType { get; public set; }
    public double TopBevelWidth { get; public set; }
    public double TopBevelHeight { get; public set; }
    public BevelType TopBevelType { get; public set; }
    public PresetMaterialType Material { get; public set; }
    public CellsColor ContourColor { get; public set; }
    public double ContourWidth { get; public set; }
    public CellsColor ExtrusionColor { get; public set; }
    public double ExtrusionHeight { get; public set; }
    public double Z { get; public set; }
    public double LightAngle { get; public set; }
    public LightRigType Lighting { get; public set; }
    public LightRigDirectionType LightingDirection { get; public set; }
    public double Perspective { get; public set; }
    public double RotationX { get; public set; }
    public double RotationY { get; public set; }
    public double RotationZ { get; public set; }
    public PresetCameraType PresetCameraType { get; public set; }
    internal ThreeDFormat(object );
    internal bool ();
    internal Workbook ();
    public double get_BottomBevelWidth();
    public void set_BottomBevelWidth(double value);
    public double get_BottomBevelHeight();
    public void set_BottomBevelHeight(double value);
    public BevelType get_BottomBevelType();
    public void set_BottomBevelType(BevelType value);
    public double get_TopBevelWidth();
    public void set_TopBevelWidth(double value);
    public double get_TopBevelHeight();
    public void set_TopBevelHeight(double value);
    public BevelType get_TopBevelType();
    public void set_TopBevelType(BevelType value);
    private void (double );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal BevelType ();
    internal void (BevelType );
    private void (double );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal BevelType ();
    internal void (BevelType );
    internal bool (int );
    internal void (int );
    internal void (int );
    internal void ();
    public PresetMaterialType get_Material();
    public void set_Material(PresetMaterialType value);
    public CellsColor get_ContourColor();
    public void set_ContourColor(CellsColor value);
    public double get_ContourWidth();
    public void set_ContourWidth(double value);
    public CellsColor get_ExtrusionColor();
    public void set_ExtrusionColor(CellsColor value);
    public double get_ExtrusionHeight();
    public void set_ExtrusionHeight(double value);
    public double get_Z();
    public void set_Z(double value);
    internal void (ThreeDFormat , CopyOptions );
    internal bool ();
    internal bool ();
    internal bool (ThreeDFormat );
    private void ();
    public double get_LightAngle();
    public void set_LightAngle(double value);
    public LightRigType get_Lighting();
    public void set_Lighting(LightRigType value);
    public LightRigDirectionType get_LightingDirection();
    public void set_LightingDirection(LightRigDirectionType value);
    public double get_Perspective();
    public void set_Perspective(double value);
    public double get_RotationX();
    public void set_RotationX(double value);
    public double get_RotationY();
    public void set_RotationY(double value);
    public double get_RotationZ();
    public void set_RotationZ(double value);
    public PresetCameraType get_PresetCameraType();
    public void set_PresetCameraType(PresetCameraType value);
    internal  ();
    internal  ();
    internal  ();
    internal void (ThreeDFormat , CopyOptions );
    internal bool (ThreeDFormat );
    internal void (ThreeDFormat , CopyOptions );
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Aspose.Cells.Drawing.TilePicOption : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private MirrorType ;
    [DebuggerBrowsableAttribute("0")]
private RectangleAlignmentType ;
    public double OffsetX { get; public set; }
    public double OffsetY { get; public set; }
    public double ScaleX { get; public set; }
    public double ScaleY { get; public set; }
    public MirrorType MirrorType { get; public set; }
    public RectangleAlignmentType AlignmentType { get; public set; }
    public double get_OffsetX();
    public void set_OffsetX(double value);
    public double get_OffsetY();
    public void set_OffsetY(double value);
    public double get_ScaleX();
    public void set_ScaleX(double value);
    public double get_ScaleY();
    public void set_ScaleY(double value);
    public MirrorType get_MirrorType();
    public void set_MirrorType(MirrorType value);
    public RectangleAlignmentType get_AlignmentType();
    public void set_AlignmentType(RectangleAlignmentType value);
    internal void (TilePicOption );
    internal bool (TilePicOption );
}
public class Aspose.Cells.Drawing.VmlShapeGuide : BaseShapeGuide {
    internal VmlShapeGuide(string , string );
}
public class Aspose.Cells.Drawing.WebExtensionShape : Shape {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public WebExtension WebExtension { get; public set; }
    internal WebExtensionShape(ShapeCollection , int );
    public WebExtension get_WebExtension();
    public void set_WebExtension(WebExtension value);
    internal virtual int p9836gw5tyt4bs4a9sh9cecz4zdtcdf3();
    internal virtual void p9836gw5tyt4bs4a9sh9cecz4zdtcdf3(int );
    internal Picture ();
    internal void (Shape , CopyOptions );
}
public enum Aspose.Cells.Drawing.WeightType : Enum {
    public int value__;
    public static WeightType HairLine;
    public static WeightType MediumLine;
    public static WeightType SingleLine;
    public static WeightType WideLine;
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.DxfCollection : CollectionBase`1<Style> {
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    public Style Item { get; }
    internal DxfCollection(WorksheetCollection );
    internal void ();
    internal int (Style );
    internal int (Style );
    public Style get_Item(int index);
}
[]
public class Aspose.Cells.DynamicFilter : object {
    [DebuggerBrowsableAttribute("0")]
[]
private FilterColumn ;
    [DebuggerBrowsableAttribute("0")]
internal DynamicFilterType ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    public DynamicFilterType DynamicFilterType { get; public set; }
    public object Value { get; public set; }
    public object MaxValue { get; public set; }
    internal DynamicFilter(FilterColumn );
    internal void (DynamicFilter );
    public DynamicFilterType get_DynamicFilterType();
    public void set_DynamicFilterType(DynamicFilterType value);
    public object get_Value();
    public void set_Value(object value);
    public object get_MaxValue();
    public void set_MaxValue(object value);
    internal void (Cells , int , int , int );
    internal bool (object , bool );
    internal bool (Cells ,  , int ,  );
    private bool (DateTime );
}
public enum Aspose.Cells.DynamicFilterType : Enum {
    public int value__;
    public static DynamicFilterType AboveAverage;
    public static DynamicFilterType BelowAverage;
    public static DynamicFilterType LastMonth;
    public static DynamicFilterType LastQuarter;
    public static DynamicFilterType LastWeek;
    public static DynamicFilterType LastYear;
    public static DynamicFilterType January;
    public static DynamicFilterType October;
    public static DynamicFilterType November;
    public static DynamicFilterType December;
    public static DynamicFilterType February;
    public static DynamicFilterType March;
    public static DynamicFilterType April;
    public static DynamicFilterType May;
    public static DynamicFilterType June;
    public static DynamicFilterType July;
    public static DynamicFilterType August;
    public static DynamicFilterType September;
    public static DynamicFilterType NextMonth;
    public static DynamicFilterType NextQuarter;
    public static DynamicFilterType NextWeek;
    public static DynamicFilterType NextYear;
    public static DynamicFilterType None;
    public static DynamicFilterType Quarter1;
    public static DynamicFilterType Quarter2;
    public static DynamicFilterType Quarter3;
    public static DynamicFilterType Quarter4;
    public static DynamicFilterType ThisMonth;
    public static DynamicFilterType ThisQuarter;
    public static DynamicFilterType ThisWeek;
    public static DynamicFilterType ThisYear;
    public static DynamicFilterType Today;
    public static DynamicFilterType Tomorrow;
    public static DynamicFilterType YearToDate;
    public static DynamicFilterType Yesterday;
}
public class Aspose.Cells.EbookLoadOptions : HtmlLoadOptions {
    public EbookLoadOptions(LoadFormat loadFormat);
}
public enum Aspose.Cells.EmfRenderSetting : Enum {
    public int value__;
    public static EmfRenderSetting EmfOnly;
    public static EmfRenderSetting EmfPlusPrefer;
}
public enum Aspose.Cells.EncryptionType : Enum {
    public int value__;
    public static EncryptionType XOR;
    public static EncryptionType Compatible;
    public static EncryptionType EnhancedCryptographicProviderV1;
    public static EncryptionType StrongCryptographicProvider;
}
public class Aspose.Cells.ErrorCheckOption : object {
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public bool IsErrorCheck(ErrorCheckType errorCheckType);
    public void SetErrorCheck(ErrorCheckType errorCheckType, bool isCheck);
    public int GetCountOfRange();
    public int AddRange(CellArea ca);
    public CellArea GetRange(int index);
    public void RemoveRange(int index);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ErrorCheckOptionCollection : CollectionBase`1<ErrorCheckOption> {
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    public ErrorCheckOption Item { get; }
    internal ErrorCheckOptionCollection(Worksheet );
    public ErrorCheckOption get_Item(int index);
    public int Add();
}
public enum Aspose.Cells.ErrorCheckType : Enum {
    public int value__;
    public static ErrorCheckType EvaluationError;
    [ObsoleteAttribute("Use ErrorCheckType.EvaluationError instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ErrorCheckType Calc;
    public static ErrorCheckType EmptyCellRef;
    public static ErrorCheckType NumberStoredAsText;
    [ObsoleteAttribute("Use ErrorCheckType.NumberStoredAsText instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ErrorCheckType TextNumber;
    public static ErrorCheckType InconsistRange;
    public static ErrorCheckType InconsistFormula;
    public static ErrorCheckType TwoDigitTextYear;
    [ObsoleteAttribute("Use ErrorCheckType.TwoDigitTextYear instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ErrorCheckType TextDate;
    public static ErrorCheckType UnlockedFormula;
    [ObsoleteAttribute("Use ErrorCheckType.UnproctedFormula instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ErrorCheckType UnproctedFormula;
    public static ErrorCheckType TableDataValidation;
    [ObsoleteAttribute("Use ErrorCheckType.TableDataValidation instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ErrorCheckType Validation;
    public static ErrorCheckType CalculatedColumn;
}
public enum Aspose.Cells.ExceptionType : Enum {
    public int value__;
    public static ExceptionType Chart;
    public static ExceptionType DataType;
    public static ExceptionType DataValidation;
    public static ExceptionType ConditionalFormatting;
    public static ExceptionType FileFormat;
    public static ExceptionType Formula;
    public static ExceptionType InvalidData;
    public static ExceptionType InvalidOperator;
    public static ExceptionType IncorrectPassword;
    public static ExceptionType License;
    public static ExceptionType Limitation;
    public static ExceptionType PageSetup;
    public static ExceptionType PivotTable;
    public static ExceptionType Shape;
    public static ExceptionType Sparkline;
    public static ExceptionType SheetName;
    public static ExceptionType SheetType;
    public static ExceptionType Interrupted;
    public static ExceptionType IO;
    public static ExceptionType Permission;
    public static ExceptionType UnsupportedFeature;
    public static ExceptionType UnsupportedStream;
    public static ExceptionType UndisclosedInformation;
    public static ExceptionType FileCorrupted;
}
public class Aspose.Cells.ExportObjectEvent : object {
    [DebuggerBrowsableAttribute("0")]
private object ;
    internal ExportObjectEvent(object );
    public object GetSource();
}
public class Aspose.Cells.ExportTableOptions : object {
    [DebuggerBrowsableAttribute("0")]
private DataTable ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private CellValueFormatStrategy ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private RenameStrategy ;
    public DataTable DataTable { get; public set; }
    public bool ExportColumnName { get; public set; }
    public bool SkipErrorValue { get; public set; }
    public bool PlotVisibleCells { get; public set; }
    public bool PlotVisibleRows { get; public set; }
    public bool PlotVisibleColumns { get; public set; }
    public bool ExportAsString { get; public set; }
    public bool ExportAsHtmlString { get; public set; }
    public CellValueFormatStrategy FormatStrategy { get; public set; }
    public bool CheckMixedValueType { get; public set; }
    public bool AllowDBNull { get; public set; }
    public bool IsVertical { get; public set; }
    public Int32[] Indexes { get; public set; }
    public RenameStrategy RenameStrategy { get; public set; }
    public DataTable get_DataTable();
    public void set_DataTable(DataTable value);
    public bool get_ExportColumnName();
    public void set_ExportColumnName(bool value);
    public bool get_SkipErrorValue();
    public void set_SkipErrorValue(bool value);
    public bool get_PlotVisibleCells();
    public void set_PlotVisibleCells(bool value);
    public bool get_PlotVisibleRows();
    public void set_PlotVisibleRows(bool value);
    public bool get_PlotVisibleColumns();
    public void set_PlotVisibleColumns(bool value);
    public bool get_ExportAsString();
    public void set_ExportAsString(bool value);
    public bool get_ExportAsHtmlString();
    public void set_ExportAsHtmlString(bool value);
    public CellValueFormatStrategy get_FormatStrategy();
    public void set_FormatStrategy(CellValueFormatStrategy value);
    public bool get_CheckMixedValueType();
    public void set_CheckMixedValueType(bool value);
    public bool get_AllowDBNull();
    public void set_AllowDBNull(bool value);
    public bool get_IsVertical();
    public void set_IsVertical(bool value);
    public Int32[] get_Indexes();
    public void set_Indexes(Int32[] value);
    public RenameStrategy get_RenameStrategy();
    public void set_RenameStrategy(RenameStrategy value);
    public virtual bool PreprocessExportedValue(int cellRow, int cellColumn, CellValue value);
}
public enum Aspose.Cells.ExternalConnections.ConnectionDataSourceType : Enum {
    public int value__;
    public static ConnectionDataSourceType ODBCBasedSource;
    public static ConnectionDataSourceType DAOBasedSource;
    public static ConnectionDataSourceType FileBasedDataBaseSource;
    public static ConnectionDataSourceType WebQuery;
    public static ConnectionDataSourceType OLEDBBasedSource;
    public static ConnectionDataSourceType TextBasedSource;
    public static ConnectionDataSourceType ADORecordSet;
    public static ConnectionDataSourceType DSP;
    public static ConnectionDataSourceType OLEDBDataModel;
    public static ConnectionDataSourceType DataFeedDataModel;
    public static ConnectionDataSourceType WorksheetDataModel;
    [ObsoleteAttribute("Use WorksheetDataModel enum instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ConnectionDataSourceType Table;
    public static ConnectionDataSourceType TextDataModel;
    public static ConnectionDataSourceType Unknown;
}
public class Aspose.Cells.ExternalConnections.ConnectionParameter : object {
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal ConnectionParameterType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal SqlDataType ;
    [DebuggerBrowsableAttribute("0")]
[]
internal ExternalConnection ;
    public SqlDataType SqlType { get; public set; }
    public bool RefreshOnChange { get; public set; }
    public string Prompt { get; public set; }
    public ConnectionParameterType Type { get; public set; }
    public string Name { get; public set; }
    public string CellReference { get; public set; }
    public object Value { get; public set; }
    internal ConnectionParameter(ExternalConnection );
    public SqlDataType get_SqlType();
    public void set_SqlType(SqlDataType value);
    public bool get_RefreshOnChange();
    public void set_RefreshOnChange(bool value);
    public string get_Prompt();
    public void set_Prompt(string value);
    public ConnectionParameterType get_Type();
    public void set_Type(ConnectionParameterType value);
    public string get_Name();
    public void set_Name(string value);
    public string get_CellReference();
    public void set_CellReference(string value);
    public object get_Value();
    public void set_Value(object value);
    internal void (ConnectionParameter );
    internal bool (ConnectionParameter );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ExternalConnections.ConnectionParameterCollection : CollectionBase`1<ConnectionParameter> {
    [DebuggerBrowsableAttribute("0")]
[]
internal ExternalConnection ;
    public ConnectionParameter Item { get; public set; }
    public ConnectionParameter Item { get; }
    internal ConnectionParameterCollection(ExternalConnection );
    public ConnectionParameter get_Item(int index);
    public void set_Item(int index, ConnectionParameter value);
    internal int (ConnectionParameter );
    public ConnectionParameter get_Item(string connParamName);
    internal void (ExternalConnection , ConnectionParameterCollection );
    internal bool (ConnectionParameterCollection );
}
public enum Aspose.Cells.ExternalConnections.ConnectionParameterType : Enum {
    public int value__;
    public static ConnectionParameterType Cell;
    public static ConnectionParameterType Prompt;
    public static ConnectionParameterType Value;
}
public enum Aspose.Cells.ExternalConnections.CredentialsMethodType : Enum {
    public int value__;
    public static CredentialsMethodType Integrated;
    public static CredentialsMethodType None;
    public static CredentialsMethodType Prompt;
    public static CredentialsMethodType Stored;
}
public class Aspose.Cells.ExternalConnections.DataModelConnection : ExternalConnection {
    internal DataModelConnection(ExternalConnectionCollection );
    internal virtual void j7k7dtyaq65wq2dvcrm58y8euvndngxp(ExternalConnection , CopyOptions );
}
public class Aspose.Cells.ExternalConnections.DBConnection : ExternalConnection {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal OLEDBCommandType ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string ConnectionInfo { get; public set; }
    public PowerQueryFormula PowerQueryFormula { get; }
    public OLEDBCommandType CommandType { get; public set; }
    public string Command { get; public set; }
    public string SeverCommand { get; public set; }
    internal DBConnection(ExternalConnectionCollection );
    public string get_ConnectionInfo();
    public void set_ConnectionInfo(string value);
    public virtual PowerQueryFormula get_PowerQueryFormula();
    public OLEDBCommandType get_CommandType();
    public void set_CommandType(OLEDBCommandType value);
    public string get_Command();
    public void set_Command(string value);
    public string get_SeverCommand();
    public void set_SeverCommand(string value);
    internal virtual void j7k7dtyaq65wq2dvcrm58y8euvndngxp(ExternalConnection , CopyOptions );
    internal virtual bool j7k7dtyaq65wq2dvcrm58y8euvndngxp(ExternalConnection );
}
public abstract class Aspose.Cells.ExternalConnections.ExternalConnection : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal ExternalConnectionCollection ;
    [DebuggerBrowsableAttribute("0")]
internal HtmlFormatHandlingType ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ConnectionParameterCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<string> ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal CredentialsMethodType ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal ReConnectionMethodType ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public int Id { get; }
    public PowerQueryFormula PowerQueryFormula { get; }
    public ConnectionDataSourceType Type { get; public set; }
    public string SourceFile { get; public set; }
    public string SSOId { get; public set; }
    public bool SavePassword { get; public set; }
    public bool SaveData { get; public set; }
    public bool RefreshOnLoad { get; public set; }
    public ReConnectionMethodType ReconnectionMethodType { get; public set; }
    [ObsoleteAttribute("Use ExternalConnection.ReconnectionMethodType property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public ReConnectionMethodType ReconnectionMethod { get; public set; }
    public bool OnlyUseConnectionFile { get; public set; }
    public string OdcFile { get; public set; }
    public bool IsNew { get; public set; }
    public string Name { get; public set; }
    public bool KeepAlive { get; public set; }
    public int RefreshInternal { get; public set; }
    public int ConnectionId { get; }
    public string ConnectionDescription { get; public set; }
    public bool IsDeleted { get; public set; }
    public CredentialsMethodType CredentialsMethodType { get; public set; }
    [ObsoleteAttribute("Use ExternalConnection.CredentialsMethodType property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public CredentialsMethodType Credentials { get; public set; }
    public bool BackgroundRefresh { get; public set; }
    public ConnectionParameterCollection Parameters { get; }
    internal ExternalConnection(ExternalConnectionCollection );
    internal  ();
    internal void ();
    public int get_Id();
    internal PowerQueryFormula (string );
    public virtual PowerQueryFormula get_PowerQueryFormula();
    public ConnectionDataSourceType get_Type();
    public void set_Type(ConnectionDataSourceType value);
    public string get_SourceFile();
    public void set_SourceFile(string value);
    public string get_SSOId();
    public void set_SSOId(string value);
    public bool get_SavePassword();
    public void set_SavePassword(bool value);
    internal bool ();
    internal void (bool );
    public bool get_SaveData();
    public void set_SaveData(bool value);
    public bool get_RefreshOnLoad();
    public void set_RefreshOnLoad(bool value);
    internal byte ();
    internal void (byte );
    public ReConnectionMethodType get_ReconnectionMethodType();
    public void set_ReconnectionMethodType(ReConnectionMethodType value);
    public ReConnectionMethodType get_ReconnectionMethod();
    public void set_ReconnectionMethod(ReConnectionMethodType value);
    public bool get_OnlyUseConnectionFile();
    public void set_OnlyUseConnectionFile(bool value);
    public string get_OdcFile();
    public void set_OdcFile(string value);
    public bool get_IsNew();
    public void set_IsNew(bool value);
    public string get_Name();
    public void set_Name(string value);
    internal byte ();
    internal void (byte );
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    public int get_RefreshInternal();
    public void set_RefreshInternal(int value);
    public int get_ConnectionId();
    public string get_ConnectionDescription();
    public void set_ConnectionDescription(string value);
    public bool get_IsDeleted();
    public void set_IsDeleted(bool value);
    public CredentialsMethodType get_CredentialsMethodType();
    public void set_CredentialsMethodType(CredentialsMethodType value);
    public CredentialsMethodType get_Credentials();
    public void set_Credentials(CredentialsMethodType value);
    public bool get_BackgroundRefresh();
    public void set_BackgroundRefresh(bool value);
    public ConnectionParameterCollection get_Parameters();
    internal virtual void j7k7dtyaq65wq2dvcrm58y8euvndngxp(ExternalConnection , CopyOptions );
    internal virtual bool j7k7dtyaq65wq2dvcrm58y8euvndngxp(ExternalConnection );
    internal void ( );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ExternalConnections.ExternalConnectionCollection : CollectionBase`1<ExternalConnection> {
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    public ExternalConnection Item { get; public set; }
    public ExternalConnection Item { get; }
    internal ExternalConnectionCollection(Workbook );
    internal WorksheetCollection ();
    public ExternalConnection get_Item(int index);
    public void set_Item(int index, ExternalConnection value);
    internal int (ExternalConnection );
    internal ExternalConnection (int , int , Workbook , string , Boolean& );
    internal static ExternalConnection (int , Workbook );
    internal bool (int , string );
    internal int (string );
    internal int (string , bool );
    public ExternalConnection get_Item(string connectionName);
    public ExternalConnection GetExternalConnectionById(int connId);
    internal ExternalConnection (ExternalConnection );
    private int ();
    internal void (ExternalConnectionCollection , CopyOptions );
    internal int (ExternalConnection , CopyOptions );
}
public enum Aspose.Cells.ExternalConnections.HtmlFormatHandlingType : Enum {
    public int value__;
    public static HtmlFormatHandlingType All;
    public static HtmlFormatHandlingType None;
    public static HtmlFormatHandlingType Rtf;
}
public enum Aspose.Cells.ExternalConnections.OLEDBCommandType : Enum {
    public int value__;
    public static OLEDBCommandType None;
    public static OLEDBCommandType CubeName;
    public static OLEDBCommandType SqlStatement;
    public static OLEDBCommandType TableName;
    public static OLEDBCommandType DefaultInformation;
    public static OLEDBCommandType WebBasedList;
}
public enum Aspose.Cells.ExternalConnections.ReConnectionMethodType : Enum {
    public int value__;
    public static ReConnectionMethodType Required;
    public static ReConnectionMethodType Always;
    public static ReConnectionMethodType Never;
}
public enum Aspose.Cells.ExternalConnections.SqlDataType : Enum {
    public int value__;
    public static SqlDataType SqlUnsignedOffset;
    public static SqlDataType SqlSignedOffset;
    public static SqlDataType SqlGUID;
    public static SqlDataType SqlWLongVarchar;
    public static SqlDataType SqlWVarchar;
    public static SqlDataType SqlWChar;
    public static SqlDataType SqlBit;
    public static SqlDataType SqlTinyInt;
    public static SqlDataType SqlBigInt;
    public static SqlDataType SqlLongVarBinary;
    public static SqlDataType SqlVarBinary;
    public static SqlDataType SqlBinary;
    public static SqlDataType SqlLongVarChar;
    public static SqlDataType SqlUnknownType;
    public static SqlDataType SqlChar;
    public static SqlDataType SqlNumeric;
    public static SqlDataType SqlDecimal;
    public static SqlDataType SqlInteger;
    public static SqlDataType SqlSmallInt;
    public static SqlDataType SqlFloat;
    public static SqlDataType SqlReal;
    public static SqlDataType SqlDouble;
    public static SqlDataType SqlTypeDate;
    public static SqlDataType SqlTypeTime;
    public static SqlDataType SqlTypeTimestamp;
    public static SqlDataType SqlVarChar;
    public static SqlDataType SqlIntervalYear;
    public static SqlDataType SqlIntervalMonth;
    public static SqlDataType SqlIntervalDay;
    public static SqlDataType SqlIntervalHour;
    public static SqlDataType SqlIntervalMinute;
    public static SqlDataType SqlIntervalSecond;
    public static SqlDataType SqlIntervalYearToMonth;
    public static SqlDataType SqlIntervalDayToHour;
    public static SqlDataType SqlIntervalDayToMinute;
    public static SqlDataType SqlIntervalDayToSecond;
    public static SqlDataType SqlIntervalHourToMinute;
    public static SqlDataType SqlIntervalHourToSecond;
    public static SqlDataType SqlIntervalMinuteToSecond;
}
public class Aspose.Cells.ExternalConnections.WebQueryConnection : ExternalConnection {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public bool IsXml { get; public set; }
    public bool IsXl97 { get; public set; }
    public bool IsXl2000 { get; public set; }
    public string Url { get; public set; }
    public bool IsTextDates { get; public set; }
    public bool IsXmlSourceData { get; public set; }
    public string Post { get; public set; }
    public bool IsParsePre { get; public set; }
    public bool IsHtmlTables { get; public set; }
    public HtmlFormatHandlingType HtmlFormat { get; public set; }
    public bool IsSameSettings { get; public set; }
    public string EditWebPage { get; public set; }
    [ObsoleteAttribute("Use WebQueryConnection.EditWebPage property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public string EditPage { get; public set; }
    public bool IsConsecutive { get; public set; }
    internal WebQueryConnection(ExternalConnectionCollection );
    internal  ();
    public bool get_IsXml();
    public void set_IsXml(bool value);
    public bool get_IsXl97();
    public void set_IsXl97(bool value);
    public bool get_IsXl2000();
    public void set_IsXl2000(bool value);
    public string get_Url();
    public void set_Url(string value);
    public bool get_IsTextDates();
    public void set_IsTextDates(bool value);
    public bool get_IsXmlSourceData();
    public void set_IsXmlSourceData(bool value);
    public string get_Post();
    public void set_Post(string value);
    public bool get_IsParsePre();
    public void set_IsParsePre(bool value);
    public bool get_IsHtmlTables();
    public void set_IsHtmlTables(bool value);
    public HtmlFormatHandlingType get_HtmlFormat();
    public void set_HtmlFormat(HtmlFormatHandlingType value);
    public bool get_IsSameSettings();
    public void set_IsSameSettings(bool value);
    public string get_EditWebPage();
    public void set_EditWebPage(string value);
    public string get_EditPage();
    public void set_EditPage(string value);
    public bool get_IsConsecutive();
    public void set_IsConsecutive(bool value);
    internal virtual void j7k7dtyaq65wq2dvcrm58y8euvndngxp(ExternalConnection , CopyOptions );
    internal virtual bool j7k7dtyaq65wq2dvcrm58y8euvndngxp(ExternalConnection );
}
public class Aspose.Cells.ExternalLink : object {
    [DebuggerBrowsableAttribute("0")]
private ExternalLinkCollection ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public ExternalLinkType Type { get; }
    public string PathType { get; }
    public string OriginalDataSource { get; public set; }
    public string DataSource { get; public set; }
    public bool IsReferred { get; }
    public bool IsVisible { get; }
    internal ExternalLink(ExternalLinkCollection );
    internal void ( );
    internal  ();
    public ExternalLinkType get_Type();
    public string get_PathType();
    public string get_OriginalDataSource();
    public void set_OriginalDataSource(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public void AddExternalName(string text, string referTo);
    public bool get_IsReferred();
    public bool get_IsVisible();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ExternalLinkCollection : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    public int Count { get; }
    public ExternalLink Item { get; }
    internal ExternalLinkCollection(WorksheetCollection );
    internal WorksheetCollection ();
    public int get_Count();
    public int Add(string fileName, String[] sheetNames);
    public int Add(DirectoryType directoryType, string fileName, String[] sheetNames);
    public ExternalLink get_Item(int index);
    public void Clear();
    public void Clear(bool updateReferencesAsLocal);
    public void RemoveAt(int index);
    public void RemoveAt(int index, bool updateReferencesAsLocal);
    [("ExternalLink")]
public sealed virtual IEnumerator GetEnumerator();
}
public enum Aspose.Cells.ExternalLinkType : Enum {
    public int value__;
    public static ExternalLinkType DDELink;
    public static ExternalLinkType External;
}
public class Aspose.Cells.FileFontSource : FontSourceBase {
    [DebuggerBrowsableAttribute("0")]
private string ;
    public string FilePath { get; }
    public FontSourceType Type { get; }
    public FileFontSource(string filePath);
    public string get_FilePath();
    public virtual FontSourceType get_Type();
    internal virtual FontSourceBase wptgtrv5mkbpn63zvxmf7wtbmdbbbr78();
    internal virtual ArrayList wptgtrv5mkbpn63zvxmf7wtbmdbbbr78();
}
public class Aspose.Cells.FileFormatInfo : object {
    [DebuggerBrowsableAttribute("0")]
internal FileFormatType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Guid ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool IsProtectedByRMS { get; }
    public bool IsEncrypted { get; }
    public FileFormatType FileFormatType { get; }
    public LoadFormat LoadFormat { get; }
    public bool get_IsProtectedByRMS();
    public bool get_IsEncrypted();
    public FileFormatType get_FileFormatType();
    public LoadFormat get_LoadFormat();
}
public enum Aspose.Cells.FileFormatType : Enum {
    public int value__;
    public static FileFormatType Csv;
    public static FileFormatType Xlsx;
    public static FileFormatType Xlsm;
    public static FileFormatType Xltx;
    public static FileFormatType Xltm;
    public static FileFormatType Xlam;
    public static FileFormatType Tsv;
    public static FileFormatType TabDelimited;
    public static FileFormatType Html;
    public static FileFormatType MHtml;
    public static FileFormatType Ods;
    public static FileFormatType Excel97To2003;
    public static FileFormatType SpreadsheetML;
    public static FileFormatType Xlsb;
    public static FileFormatType Unknown;
    public static FileFormatType Pdf;
    public static FileFormatType Xps;
    public static FileFormatType Tiff;
    public static FileFormatType Svg;
    public static FileFormatType Excel95;
    public static FileFormatType Excel4;
    public static FileFormatType Excel3;
    public static FileFormatType Excel2;
    public static FileFormatType Pptx;
    public static FileFormatType Docx;
    public static FileFormatType Dif;
    public static FileFormatType Doc;
    public static FileFormatType Ppt;
    public static FileFormatType MapiMessage;
    public static FileFormatType MsEquation;
    public static FileFormatType Ole10Native;
    public static FileFormatType Vsd;
    public static FileFormatType Vsdx;
    public static FileFormatType Docm;
    public static FileFormatType Dotx;
    public static FileFormatType Dotm;
    public static FileFormatType Pptm;
    public static FileFormatType Potx;
    public static FileFormatType Potm;
    public static FileFormatType Ppsx;
    public static FileFormatType Ppsm;
    public static FileFormatType Ooxml;
    public static FileFormatType Odt;
    public static FileFormatType Odp;
    public static FileFormatType Odf;
    public static FileFormatType Odg;
    public static FileFormatType Xml;
    public static FileFormatType Xlt;
    public static FileFormatType Ott;
    public static FileFormatType Bmp;
    public static FileFormatType Ots;
    [ObsoleteAttribute("Use FileFormatType.Numbers09 instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static FileFormatType Numbers;
    public static FileFormatType Numbers09;
    public static FileFormatType Markdown;
    public static FileFormatType GraphChart;
    public static FileFormatType Fods;
    public static FileFormatType Sxc;
    public static FileFormatType Otp;
    public static FileFormatType Numbers35;
    public static FileFormatType Ole;
    public static FileFormatType Emf;
    public static FileFormatType Wmf;
    public static FileFormatType Jpg;
    public static FileFormatType Png;
    public static FileFormatType Gif;
    public static FileFormatType WebP;
    public static FileFormatType Json;
    public static FileFormatType SqlScript;
    public static FileFormatType XHtml;
    public static FileFormatType OneNote;
    public static FileFormatType MicrosoftCabinet;
    public static FileFormatType Rtf;
    public static FileFormatType Epub;
    public static FileFormatType Azw3;
    public static FileFormatType Oxps;
    public static FileFormatType GZip;
}
public class Aspose.Cells.FileFormatUtil : object {
    internal static  (FileFormatType ,  , bool );
    internal static bool (Stream );
    internal static bool (Byte[] );
    internal static bool ( );
    internal static bool ( );
    public static FileFormatInfo DetectFileFormat(Stream stream);
    public static FileFormatInfo DetectFileFormat(Stream stream, string password);
    public static bool VerifyPassword(Stream stream, string password);
    public static FileFormatInfo DetectFileFormat(string filePath);
    public static FileFormatInfo DetectFileFormat(string filePath, string password);
    internal static bool ( );
    internal static void ( , FileFormatInfo , string );
    internal static bool (Byte[] , string );
    internal static bool (Stream ,  , string );
    internal static FileFormatInfo (string , Stream ,  , string );
    private static bool (long , int );
    private static void (FileFormatInfo , Stream );
    internal static void (FileFormatInfo ,  );
    internal static bool (FileFormatType );
    internal static bool (FileFormatInfo , string );
    internal static void ( , FileFormatInfo );
    internal static bool ( );
    internal static bool ( , FileFormatInfo );
    private static FileFormatType ( );
    internal static Guid (FileFormatType , bool );
    internal static LoadFormat (FileFormatType );
    public static SaveFormat FileFormatToSaveFormat(FileFormatType format);
    internal static FileFormatType (SaveFormat , FileFormatType );
    internal static SaveFormat (string , FileFormatType );
    internal static SaveOptions (SaveFormat );
    internal static string (FileFormatType );
    internal static string (FileFormatType , string );
    internal static FileFormatType (ImageType );
    internal static string (string , int );
    internal static FileFormatType (string , FileFormatType );
    public static SaveFormat ExtensionToSaveFormat(string extension);
    public static bool IsTemplateFormat(string extension);
    public static string LoadFormatToExtension(LoadFormat loadFormat);
    public static SaveFormat LoadFormatToSaveFormat(LoadFormat loadFormat);
    public static string SaveFormatToExtension(SaveFormat format);
    public static LoadFormat SaveFormatToLoadFormat(SaveFormat saveFormat);
    internal static SaveOptions (FileFormatType );
    internal static bool (FileFormatType );
    internal static bool (Stream , BinaryReader );
    internal static bool (Stream , BinaryReader );
}
public class Aspose.Cells.FilterColumn : object {
    [DebuggerBrowsableAttribute("0")]
private FilterType ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
[]
private FilterColumnCollection ;
    public bool IsDropdownVisible { get; public set; }
    public object Filter { get; public set; }
    public FilterType FilterType { get; public set; }
    public int FieldIndex { get; public set; }
    internal FilterColumn(FilterColumnCollection , int );
    internal FilterColumn(FilterColumnCollection , int , bool , bool );
    public bool get_IsDropdownVisible();
    public void set_IsDropdownVisible(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public object get_Filter();
    public void set_Filter(object value);
    public FilterType get_FilterType();
    public void set_FilterType(FilterType value);
    public int get_FieldIndex();
    public void set_FieldIndex(int value);
    internal FilterColumnCollection ();
    internal void (FilterColumn );
    private static bool (string );
    internal void (string );
    internal void (int , DateTimeGroupingType , int , int , int , int , int , int );
    internal void (int , DateTimeGroupingType , int , int , int , int , int , int );
    internal void (IconSetType , int );
    internal void (CellsColor );
    internal void (BackgroundType , CellsColor , CellsColor );
    internal void (string );
    internal void (string );
    internal void ();
    internal void ();
    internal bool ();
    internal void (FilterOperatorType , object , bool , FilterOperatorType , object );
    internal void (DynamicFilterType );
    internal void (bool , bool , int );
    internal bool (object );
    internal bool (Cells , int ,  , int ,  );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.FilterColumnCollection : CollectionBase`1<FilterColumn> {
    [DebuggerBrowsableAttribute("0")]
[]
private AutoFilter ;
    public FilterColumn Item { get; }
    internal FilterColumnCollection(AutoFilter );
    internal AutoFilter ();
    public void RemoveAt(int index);
    public FilterColumn GetByIndex(int index);
    public FilterColumn get_Item(int fieldIndex);
    internal FilterColumn (int );
    internal int (FilterColumn );
    internal void (FilterColumnCollection );
}
public enum Aspose.Cells.FilterOperatorType : Enum {
    public int value__;
    public static FilterOperatorType LessOrEqual;
    public static FilterOperatorType LessThan;
    public static FilterOperatorType Equal;
    public static FilterOperatorType GreaterThan;
    public static FilterOperatorType NotEqual;
    public static FilterOperatorType GreaterOrEqual;
    public static FilterOperatorType None;
    public static FilterOperatorType BeginsWith;
    public static FilterOperatorType EndsWith;
    public static FilterOperatorType Contains;
    public static FilterOperatorType NotContains;
}
public enum Aspose.Cells.FilterType : Enum {
    public int value__;
    public static FilterType ColorFilter;
    public static FilterType CustomFilters;
    public static FilterType DynamicFilter;
    public static FilterType MultipleFilters;
    public static FilterType IconFilter;
    public static FilterType Top10;
    public static FilterType None;
}
public class Aspose.Cells.FindOptions : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private LookAtType ;
    [DebuggerBrowsableAttribute("0")]
private CellArea ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private LookInType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Style ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [ObsoleteAttribute("Use FindOptions.CaseSensitive property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsCaseSensitive { get; public set; }
    public bool CaseSensitive { get; public set; }
    public LookAtType LookAtType { get; public set; }
    public bool IsRangeSet { get; }
    [ObsoleteAttribute("Use FindOptions.SearchBackward property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool SearchNext { get; public set; }
    public bool SearchBackward { get; public set; }
    public bool SeachOrderByRows { get; public set; }
    public LookInType LookInType { get; public set; }
    public bool RegexKey { get; public set; }
    public bool ValueTypeSensitive { get; public set; }
    public Style Style { get; public set; }
    public bool ConvertNumericData { get; public set; }
    public bool get_IsCaseSensitive();
    public void set_IsCaseSensitive(bool value);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public LookAtType get_LookAtType();
    public void set_LookAtType(LookAtType value);
    public CellArea GetRange();
    public void SetRange(CellArea ca);
    public bool get_IsRangeSet();
    public bool get_SearchNext();
    public void set_SearchNext(bool value);
    public bool get_SearchBackward();
    public void set_SearchBackward(bool value);
    public bool get_SeachOrderByRows();
    public void set_SeachOrderByRows(bool value);
    public LookInType get_LookInType();
    public void set_LookInType(LookInType value);
    public bool get_RegexKey();
    public void set_RegexKey(bool value);
    public bool get_ValueTypeSensitive();
    public void set_ValueTypeSensitive(bool value);
    public Style get_Style();
    public void set_Style(Style value);
    public bool get_ConvertNumericData();
    public void set_ConvertNumericData(bool value);
}
public class Aspose.Cells.FolderFontSource : FontSourceBase {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public string FolderPath { get; }
    public bool ScanSubFolders { get; }
    public FontSourceType Type { get; }
    public FolderFontSource(string folderPath, bool scanSubfolders);
    public string get_FolderPath();
    public bool get_ScanSubFolders();
    public virtual FontSourceType get_Type();
    internal virtual FontSourceBase wptgtrv5mkbpn63zvxmf7wtbmdbbbr78();
    [("False")]
internal virtual ArrayList wptgtrv5mkbpn63zvxmf7wtbmdbbbr78();
}
public class Aspose.Cells.Font : object {
    internal byte charset;
    internal  _InternalColor;
    []
internal WorksheetCollection Sheets;
    []
internal object Parent;
    private  m_Embedded;
    internal ushort fontHeight;
    private int m_BaseLine;
    internal short weight;
    internal byte family;
    internal string fontName;
    private int fontIndex;
    internal int m_Options;
    internal int SetFlags;
    private double originSize;
    public int Charset { get; public set; }
    public bool IsItalic { get; public set; }
    public bool IsBold { get; public set; }
    public TextCapsType CapsType { get; public set; }
    public TextStrikeType StrikeType { get; public set; }
    public bool IsStrikeout { get; public set; }
    public double ScriptOffset { get; public set; }
    public bool IsSuperscript { get; public set; }
    public bool IsSubscript { get; public set; }
    public FontUnderlineType Underline { get; public set; }
    public string Name { get; public set; }
    public double DoubleSize { get; public set; }
    public int Size { get; public set; }
    public ThemeColor ThemeColor { get; public set; }
    public Color Color { get; public set; }
    public int ArgbColor { get; public set; }
    public bool IsNormalizeHeights { get; public set; }
    public FontSchemeType SchemeType { get; public set; }
    internal Font(WorksheetCollection , object , bool );
    internal Font(WorksheetCollection , object , bool , bool );
    internal string ();
    internal void (string );
    public int get_Charset();
    public void set_Charset(int value);
    internal int (bool , Boolean& );
    internal virtual  dxrjrx7b3a3c6fu99b3det38nyegmhzz();
    internal virtual void dxrjrx7b3a3c6fu99b3det38nyegmhzz( );
    internal void ();
    internal  ();
    internal void ( );
    internal bool ();
    public bool get_IsItalic();
    public void set_IsItalic(bool value);
    public bool get_IsBold();
    public void set_IsBold(bool value);
    internal void (bool );
    public TextCapsType get_CapsType();
    public void set_CapsType(TextCapsType value);
    public TextStrikeType get_StrikeType();
    public void set_StrikeType(TextStrikeType value);
    public bool get_IsStrikeout();
    public void set_IsStrikeout(bool value);
    internal byte ();
    internal int ();
    internal void (int );
    public double get_ScriptOffset();
    public void set_ScriptOffset(double value);
    public bool get_IsSuperscript();
    public void set_IsSuperscript(bool value);
    public bool get_IsSubscript();
    public void set_IsSubscript(bool value);
    internal int ();
    internal void (int );
    public FontUnderlineType get_Underline();
    public void set_Underline(FontUnderlineType value);
    internal byte ();
    internal void (byte );
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal void (string );
    internal virtual bool dxrjrx7b3a3c6fu99b3det38nyegmhzz();
    internal virtual void dxrjrx7b3a3c6fu99b3det38nyegmhzz(string );
    internal virtual void dxrjrx7b3a3c6fu99b3det38nyegmhzz(string , bool , FontSchemeType );
    internal void (string );
    public double get_DoubleSize();
    public void set_DoubleSize(double value);
    public int get_Size();
    public void set_Size(int value);
    internal void (double );
    internal void (double );
    internal int ();
    internal void (int );
    public ThemeColor get_ThemeColor();
    public void set_ThemeColor(ThemeColor value);
    internal double ();
    internal void (double );
    public Color get_Color();
    public void set_Color(Color value);
    public int get_ArgbColor();
    public void set_ArgbColor(int value);
    public bool Equals(Font font);
    internal bool (Font , Workbook , Hashtable );
    internal virtual bool dxrjrx7b3a3c6fu99b3det38nyegmhzz(Font );
    internal bool (Font );
    internal virtual bool dxrjrx7b3a3c6fu99b3det38nyegmhzz(Font );
    internal bool (Font , Workbook , Workbook );
    internal void (Font );
    internal void ( );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal virtual bool dxrjrx7b3a3c6fu99b3det38nyegmhzz();
    internal virtual void dxrjrx7b3a3c6fu99b3det38nyegmhzz(Font , CopyOptions );
    internal int ();
    internal void (int );
    public bool get_IsNormalizeHeights();
    public void set_IsNormalizeHeights(bool value);
    public FontSchemeType get_SchemeType();
    public void set_SchemeType(FontSchemeType value);
    internal void ();
    internal bool (Font );
    internal void (Font );
    internal void (StringBuilder );
    internal bool (StyleModifyFlag );
    internal void (StyleModifyFlag );
    internal FontStyle ();
    internal void (double );
    public virtual string ToString();
}
public class Aspose.Cells.FontConfigs : object {
    [DebuggerBrowsableAttribute("0")]
private static ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private static ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private static FontSourceBase[] ;
    [DebuggerBrowsableAttribute("0")]
private static object ;
    [DebuggerBrowsableAttribute("0")]
private static string ;
    [DebuggerBrowsableAttribute("0")]
private static Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private static object ;
    [DebuggerBrowsableAttribute("0")]
private static bool ;
    public static string DefaultFontName { get; public set; }
    public static bool PreferSystemFontSubstitutes { get; public set; }
    private static FontConfigs();
    public static bool IsFontAvailable(string fontName);
    public static string get_DefaultFontName();
    public static void set_DefaultFontName(string value);
    public static bool get_PreferSystemFontSubstitutes();
    public static void set_PreferSystemFontSubstitutes(bool value);
    public static void SetFontSubstitutes(string originalFontName, String[] substituteFontNames);
    public static String[] GetFontSubstitutes(string originalFontName);
    internal static bool ();
    internal static void (bool );
    public static void SetFontFolder(string fontFolder, bool recursive);
    public static void SetFontFolders(String[] fontFolders, bool recursive);
    public static void SetFontSources(FontSourceBase[] sources);
    internal static void (FontSourceBase[] , bool );
    [("False")]
public static FontSourceBase[] GetFontSources();
    [("False")]
internal static [] ();
    [("False")]
private static void (bool );
    internal static void (string );
    internal static string ();
    internal static void (ArrayList );
    internal static ArrayList ();
    internal static void (ArrayList );
    internal static ArrayList ();
}
public enum Aspose.Cells.FontSchemeType : Enum {
    public int value__;
    public static FontSchemeType None;
    public static FontSchemeType Major;
    public static FontSchemeType Minor;
}
public class Aspose.Cells.FontSetting : object {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal Font ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal FontSettingCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    [DebuggerBrowsableAttribute("0")]
private TextAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
internal TextAlignmentType ;
    public TextNodeType Type { get; }
    public int StartIndex { get; }
    public int Length { get; }
    public Font Font { get; }
    public TextOptions TextOptions { get; }
    public FontSetting(int startIndex, int length, WorksheetCollection sheets);
    internal FontSetting(int , int , WorksheetCollection , FontSettingCollection );
    internal FontSetting(int , int , WorksheetCollection , ChartFrame );
    internal FontSetting(int , int , WorksheetCollection , Chart );
    public virtual TextNodeType get_Type();
    internal TextParagraph ();
    internal TextAlignmentType ();
    internal void (TextAlignmentType );
    internal TextAlignmentType ();
    internal void (TextAlignmentType );
    public int get_StartIndex();
    public int get_Length();
    internal bool ();
    public Font get_Font();
    internal int ();
    internal Font ();
    internal void (Font );
    internal void ();
    public void SetWordArtStyle(PresetWordArtStyle style);
    public TextOptions get_TextOptions();
    internal  ();
    internal  ();
    internal  ();
    internal int ();
    internal int ();
    internal TextParagraph (bool );
    internal int (bool );
    internal Bullet ();
    internal void (FontSetting );
    internal bool (FontSetting );
    internal virtual void da73tyc4ytaud2kb8z9jfbu4z5jd57dn(FontSetting , CopyOptions );
}
public abstract class Aspose.Cells.FontSourceBase : object {
    public FontSourceType Type { get; }
    public abstract virtual FontSourceType get_Type();
    internal abstract virtual FontSourceBase wptgtrv5mkbpn63zvxmf7wtbmdbbbr78();
    internal abstract virtual ArrayList wptgtrv5mkbpn63zvxmf7wtbmdbbbr78();
}
public enum Aspose.Cells.FontSourceType : Enum {
    public int value__;
    public static FontSourceType FontFile;
    public static FontSourceType FontsFolder;
    public static FontSourceType MemoryFont;
}
public enum Aspose.Cells.FontUnderlineType : Enum {
    public int value__;
    public static FontUnderlineType None;
    public static FontUnderlineType Single;
    public static FontUnderlineType Double;
    public static FontUnderlineType Accounting;
    public static FontUnderlineType DoubleAccounting;
    public static FontUnderlineType Dash;
    public static FontUnderlineType DashDotDotHeavy;
    public static FontUnderlineType DashDotHeavy;
    public static FontUnderlineType DashedHeavy;
    public static FontUnderlineType DashLong;
    public static FontUnderlineType DashLongHeavy;
    public static FontUnderlineType DotDash;
    public static FontUnderlineType DotDotDash;
    public static FontUnderlineType Dotted;
    public static FontUnderlineType DottedHeavy;
    public static FontUnderlineType Heavy;
    public static FontUnderlineType Wave;
    public static FontUnderlineType WavyDouble;
    public static FontUnderlineType WavyHeavy;
    public static FontUnderlineType Words;
}
public class Aspose.Cells.FormatCondition : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal FormatConditionCollection ;
    [DebuggerBrowsableAttribute("0")]
internal OperatorType ;
    [DebuggerBrowsableAttribute("0")]
internal FormatConditionType ;
    [DebuggerBrowsableAttribute("0")]
internal Style ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private Guid ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private IconSet ;
    [DebuggerBrowsableAttribute("0")]
private DataBar ;
    [DebuggerBrowsableAttribute("0")]
private ColorScale ;
    [DebuggerBrowsableAttribute("0")]
private Top10 ;
    [DebuggerBrowsableAttribute("0")]
private AboveAverage ;
    [DebuggerBrowsableAttribute("0")]
private TimePeriodType ;
    public string Formula1 { get; public set; }
    public string Formula2 { get; public set; }
    public OperatorType Operator { get; public set; }
    public bool StopIfTrue { get; public set; }
    public int Priority { get; public set; }
    public Style Style { get; public set; }
    public FormatConditionType Type { get; public set; }
    public IconSet IconSet { get; }
    public DataBar DataBar { get; }
    public ColorScale ColorScale { get; }
    public Top10 Top10 { get; }
    public AboveAverage AboveAverage { get; }
    public string Text { get; public set; }
    public TimePeriodType TimePeriod { get; public set; }
    internal FormatCondition(FormatConditionCollection );
    internal bool ();
    internal void (bool );
    private bool ();
    private void (bool );
    private bool ();
    private void (bool );
    internal Byte[] ();
    internal void (Byte[] );
    internal Guid ();
    internal void (Guid );
    internal Byte[] ();
    internal void (Byte[] );
    internal bool ( );
    private Byte[] (FormatConditionCollection , Byte[] , CopyOptions );
    internal void (FormatCondition , CopyOptions );
    public string GetFormula1(bool isR1C1, bool isLocal);
    public string GetFormula2(bool isR1C1, bool isLocal);
    internal string (Byte[] , bool , bool );
    public string GetFormula1(bool isR1C1, bool isLocal, int row, int column);
    public string GetFormula2(bool isR1C1, bool isLocal, int row, int column);
    private string (Byte[] , bool , bool , int , int , bool );
    internal  (bool );
    internal  (bool );
    internal  ();
    internal  ();
    public void SetFormulas(string formula1, string formula2, bool isR1C1, bool isLocal);
    public void SetFormula1(string formula, bool isR1C1, bool isLocal);
    public void SetFormula2(string formula, bool isR1C1, bool isLocal);
    public string get_Formula1();
    public void set_Formula1(string value);
    public string GetFormula1(int row, int column);
    public string get_Formula2();
    public void set_Formula2(string value);
    public string GetFormula2(int row, int column);
    public OperatorType get_Operator();
    public void set_Operator(OperatorType value);
    public bool get_StopIfTrue();
    public void set_StopIfTrue(bool value);
    public int get_Priority();
    public void set_Priority(int value);
    internal int ();
    internal void (int );
    internal WorksheetCollection ();
    public Style get_Style();
    public void set_Style(Style value);
    public FormatConditionType get_Type();
    public void set_Type(FormatConditionType value);
    internal string (bool , int , int );
    private string (Byte[] , int , int , int );
    internal void (string , string ,  );
    internal void ( ,  );
    private Byte[] (string ,  );
    internal string (Byte[] ,  );
    private string ();
    internal string ();
    private string (string );
    private string (char , string );
    private string ( );
    private void (CellArea , StringBuilder );
    public IconSet get_IconSet();
    internal void (IconSet );
    public DataBar get_DataBar();
    internal void (DataBar );
    public ColorScale get_ColorScale();
    internal void (ColorScale );
    public Top10 get_Top10();
    internal void (Top10 );
    internal Top10 ();
    public AboveAverage get_AboveAverage();
    public string get_Text();
    public void set_Text(string value);
    public TimePeriodType get_TimePeriod();
    public void set_TimePeriod(TimePeriodType value);
    internal bool (bool );
    internal void ();
    internal void ( );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.FormatConditionCollection : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal ConditionalFormattingCollection ;
    [DebuggerBrowsableAttribute("0")]
private FormatCondition[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public int Count { get; }
    public int RangeCount { get; }
    public FormatCondition Item { get; }
    internal FormatConditionCollection(ConditionalFormattingCollection );
    internal void ();
    internal int (FormatConditionCollection ,  , CopyOptions , int );
    internal void (FormatConditionCollection , CopyOptions );
    internal void (FormatConditionCollection , CopyOptions );
    public Int32[] Add(CellArea cellArea, FormatConditionType type, OperatorType operatorType, string formula1, string formula2);
    public int AddArea(CellArea cellArea);
    private void (int , int );
    public int AddCondition(FormatConditionType type, OperatorType operatorType, string formula1, string formula2);
    public int AddCondition(FormatConditionType type);
    private int (int , int , int );
    private int (FormatCondition );
    internal void (FormatCondition , int );
    internal void ();
    internal void (FormatCondition );
    internal bool (CellArea );
    private void (int , FormatCondition );
    internal void (FormatCondition );
    internal void (int , FormatCondition );
    public int get_Count();
    public int get_RangeCount();
    public FormatCondition get_Item(int index);
    public CellArea GetCellArea(int index);
    public void RemoveArea(int index);
    public bool RemoveArea(int startRow, int startColumn, int totalRows, int totalColumns);
    internal bool (int , int , int , int , bool );
    private static CellArea (CellArea , CellArea , Boolean& );
    public void RemoveCondition(int index);
    internal bool ();
    internal bool ();
    internal bool ();
    internal bool (bool );
    internal int (bool );
    internal void ();
    internal void ( );
    internal void (Byte[] , int );
    internal static int (Byte[] , int , CellArea );
    private void (int );
    internal Double[] ( );
    internal Double[] ( );
    internal bool ( , bool );
    private bool ();
    private CellArea (CellArea ,  );
}
public enum Aspose.Cells.FormatConditionType : Enum {
    public int value__;
    public static FormatConditionType CellValue;
    public static FormatConditionType Expression;
    public static FormatConditionType Top10;
    public static FormatConditionType UniqueValues;
    public static FormatConditionType DuplicateValues;
    public static FormatConditionType ContainsText;
    public static FormatConditionType NotContainsText;
    public static FormatConditionType BeginsWith;
    public static FormatConditionType EndsWith;
    public static FormatConditionType ContainsBlanks;
    public static FormatConditionType NotContainsBlanks;
    public static FormatConditionType ContainsErrors;
    public static FormatConditionType NotContainsErrors;
    public static FormatConditionType TimePeriod;
    public static FormatConditionType AboveAverage;
    public static FormatConditionType ColorScale;
    public static FormatConditionType DataBar;
    public static FormatConditionType IconSet;
}
public enum Aspose.Cells.FormatConditionValueType : Enum {
    public int value__;
    public static FormatConditionValueType Formula;
    public static FormatConditionValueType Max;
    public static FormatConditionValueType Min;
    public static FormatConditionValueType Number;
    public static FormatConditionValueType Percent;
    public static FormatConditionValueType Percentile;
    public static FormatConditionValueType AutomaticMax;
    public static FormatConditionValueType AutomaticMin;
}
public class Aspose.Cells.FormulaParseOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal CustomFunctionDefinition ;
    public bool LocaleDependent { get; public set; }
    public bool R1C1Style { get; public set; }
    public bool CheckAddIn { get; public set; }
    public bool Parse { get; public set; }
    public CustomFunctionDefinition CustomFunctionDefinition { get; public set; }
    public bool get_LocaleDependent();
    public void set_LocaleDependent(bool value);
    public bool get_R1C1Style();
    public void set_R1C1Style(bool value);
    public bool get_CheckAddIn();
    public void set_CheckAddIn(bool value);
    public bool get_Parse();
    public void set_Parse(bool value);
    internal bool ();
    internal void (bool );
    public CustomFunctionDefinition get_CustomFunctionDefinition();
    public void set_CustomFunctionDefinition(CustomFunctionDefinition value);
}
public class Aspose.Cells.FormulaSettings : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private CalcModeType ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<string> ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool CalculateOnOpen { get; public set; }
    public bool CalculateOnSave { get; public set; }
    public bool ForceFullCalculation { get; public set; }
    public CalcModeType CalculationMode { get; public set; }
    public string CalculationId { get; public set; }
    public bool EnableIterativeCalculation { get; public set; }
    public int MaxIteration { get; public set; }
    public double MaxChange { get; public set; }
    public bool PrecisionAsDisplayed { get; public set; }
    public bool EnableCalculationChain { get; public set; }
    public bool PreservePaddingSpaces { get; public set; }
    internal FormulaSettings(Workbook );
    internal void (FormulaSettings );
    internal byte ();
    internal bool ();
    internal void (string );
    internal void ();
    public bool get_CalculateOnOpen();
    public void set_CalculateOnOpen(bool value);
    internal bool ();
    internal void (bool );
    public bool get_CalculateOnSave();
    public void set_CalculateOnSave(bool value);
    public bool get_ForceFullCalculation();
    public void set_ForceFullCalculation(bool value);
    internal bool ();
    internal void (bool );
    public CalcModeType get_CalculationMode();
    public void set_CalculationMode(CalcModeType value);
    public string get_CalculationId();
    public void set_CalculationId(string value);
    public bool get_EnableIterativeCalculation();
    public void set_EnableIterativeCalculation(bool value);
    public int get_MaxIteration();
    public void set_MaxIteration(int value);
    public double get_MaxChange();
    public void set_MaxChange(double value);
    public bool get_PrecisionAsDisplayed();
    public void set_PrecisionAsDisplayed(bool value);
    internal bool ();
    internal void (bool );
    public bool get_EnableCalculationChain();
    public void set_EnableCalculationChain(bool value);
    public bool get_PreservePaddingSpaces();
    public void set_PreservePaddingSpaces(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
public class Aspose.Cells.GlobalizationSettings : object {
    [DebuggerBrowsableAttribute("0")]
private CultureInfo ;
    [DebuggerBrowsableAttribute("0")]
private ChartGlobalizationSettings ;
    [DebuggerBrowsableAttribute("0")]
private PivotGlobalizationSettings ;
    public ChartGlobalizationSettings ChartSettings { get; public set; }
    public PivotGlobalizationSettings PivotSettings { get; public set; }
    public char ListSeparator { get; }
    public char RowSeparatorOfFormulaArray { get; }
    public char ColumnSeparatorOfFormulaArray { get; }
    internal virtual CultureInfo legx5dqttqakcldhjm88kp9cw4lqzlzp();
    internal virtual void legx5dqttqakcldhjm88kp9cw4lqzlzp(CultureInfo );
    public ChartGlobalizationSettings get_ChartSettings();
    public void set_ChartSettings(ChartGlobalizationSettings value);
    public PivotGlobalizationSettings get_PivotSettings();
    public void set_PivotSettings(PivotGlobalizationSettings value);
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfTotal() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public virtual string GetPivotTotalName();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfGrandTotal() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public virtual string GetPivotGrandTotalName();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfMultipleItems() method instead.")]
[]
public virtual string GetMultipleItemsName();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfAll() method instead.")]
[]
public virtual string GetAllName();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfProtectedName(string) method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public virtual string GetProtectionNameOfPivotTable();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfColumnLabels() method instead.")]
[]
public virtual string GetColumnLabelsOfPivotTable();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfRowLabels() method instead.")]
[]
public virtual string GetRowLabelsNameOfPivotTable();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfEmptyData() method instead.")]
[]
public virtual string GetEmptyDataName();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfDataFieldHeader() method instead.")]
[]
public virtual string GetDataFieldHeaderNameOfPivotTable();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfSubTotal() method instead.")]
[]
public virtual string GetSubTotalName(PivotFieldSubtotalType subTotalType);
    public virtual string GetTotalName(ConsolidationFunction functionType);
    public virtual string GetGrandTotalName(ConsolidationFunction functionType);
    public virtual string GetDefaultSheetName();
    public virtual string GetTableRowTypeOfHeaders();
    public virtual string GetTableRowTypeOfData();
    public virtual string GetTableRowTypeOfAll();
    public virtual string GetTableRowTypeOfTotals();
    public virtual string GetTableRowTypeOfCurrent();
    public virtual string GetErrorValueString(string err);
    public virtual string GetBooleanValueString(bool bv);
    public virtual string GetLocalFunctionName(string standardName);
    public virtual string GetStandardFunctionName(string localName);
    public virtual string GetLocalBuiltInName(string standardName);
    public virtual string GetStandardBuiltInName(string localName);
    public virtual char get_ListSeparator();
    public virtual char get_RowSeparatorOfFormulaArray();
    public virtual char get_ColumnSeparatorOfFormulaArray();
    public virtual string GetStandardHeaderFooterFontStyleName(string localfontStyleName);
    public virtual string GetCommentTitleName(CommentTitleType type);
    public virtual int Compare(string v1, string v2, bool ignoreCase);
    []
public virtual IComparable GetCollationKey(string v, bool ignoreCase);
}
public enum Aspose.Cells.GridlineType : Enum {
    public int value__;
    public static GridlineType Dotted;
    public static GridlineType Hair;
}
public class Aspose.Cells.HeaderFooterCommand : object {
    [DebuggerBrowsableAttribute("0")]
private HeaderFooterCommandType ;
    [DebuggerBrowsableAttribute("0")]
internal Font ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public HeaderFooterCommandType Type { get; }
    public Font Font { get; }
    public string Text { get; }
    internal HeaderFooterCommand(HeaderFooterCommandType , Font , string );
    public HeaderFooterCommandType get_Type();
    public Font get_Font();
    public string get_Text();
    internal static ArrayList (Workbook , string );
    internal static ArrayList (Workbook , Char[] , int );
    private static void (Font , string );
}
public enum Aspose.Cells.HeaderFooterCommandType : Enum {
    public int value__;
    public static HeaderFooterCommandType Text;
    public static HeaderFooterCommandType CurrentPage;
    public static HeaderFooterCommandType Pagecount;
    public static HeaderFooterCommandType CurrentDate;
    public static HeaderFooterCommandType CurrentTime;
    public static HeaderFooterCommandType SheetName;
    public static HeaderFooterCommandType FileName;
    public static HeaderFooterCommandType FilePath;
    public static HeaderFooterCommandType Picture;
}
public class Aspose.Cells.HorizontalPageBreak : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public int StartColumn { get; }
    public int EndColumn { get; }
    public int Row { get; }
    internal HorizontalPageBreak(int );
    public int get_StartColumn();
    public int get_EndColumn();
    internal void (int );
    internal void (int );
    public int get_Row();
    internal void (int );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.HorizontalPageBreakCollection : CollectionBase`1<HorizontalPageBreak> {
    public HorizontalPageBreak Item { get; }
    public HorizontalPageBreak Item { get; }
    public HorizontalPageBreak get_Item(int index);
    public HorizontalPageBreak get_Item(string cellName);
    public int Add(int row, int startColumn, int endColumn);
    internal void (int , int , int );
    internal void (int );
    internal void (int , int );
    public int Add(int row);
    public int Add(int row, int column);
    public int Add(string cellName);
    internal void (HorizontalPageBreakCollection );
    public void RemoveAt(int index);
    internal int (int );
    internal void (int , int );
}
public enum Aspose.Cells.HtmlCrossType : Enum {
    public int value__;
    public static HtmlCrossType Default;
    public static HtmlCrossType MSExport;
    public static HtmlCrossType Cross;
    public static HtmlCrossType CrossHideRight;
    public static HtmlCrossType FitToCell;
}
public enum Aspose.Cells.HtmlExportDataOptions : Enum {
    public int value__;
    public static HtmlExportDataOptions Table;
    public static HtmlExportDataOptions All;
}
public enum Aspose.Cells.HtmlHiddenColDisplayType : Enum {
    public int value__;
    public static HtmlHiddenColDisplayType Hidden;
    public static HtmlHiddenColDisplayType Remove;
}
public enum Aspose.Cells.HtmlHiddenRowDisplayType : Enum {
    public int value__;
    public static HtmlHiddenRowDisplayType Hidden;
    public static HtmlHiddenRowDisplayType Remove;
}
public enum Aspose.Cells.HtmlLinkTargetType : Enum {
    public int value__;
    public static HtmlLinkTargetType Blank;
    public static HtmlLinkTargetType Parent;
    public static HtmlLinkTargetType Self;
    public static HtmlLinkTargetType Top;
}
public class Aspose.Cells.HtmlLoadOptions : AbstractTextLoadOptions {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private IStreamProvider ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal HtmlTableLoadOptionCollection ;
    [ObsoleteAttribute("Use HtmlLoadOptions.StreamProvider property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public string AttachedFilesDirectory { get; public set; }
    public bool LoadFormulas { get; public set; }
    public bool SupportDivTag { get; public set; }
    public bool DeleteRedundantSpaces { get; public set; }
    public bool AutoFitColsAndRows { get; public set; }
    [ObsoleteAttribute("Use HtmlLoadOptions.HasFormula property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool ConvertFormulasData { get; public set; }
    public bool HasFormula { get; public set; }
    public IStreamProvider StreamProvider { get; public set; }
    public string ProgId { get; }
    public HtmlTableLoadOptionCollection TableLoadOptions { get; }
    public HtmlLoadOptions(LoadFormat loadFormat);
    public string get_AttachedFilesDirectory();
    public void set_AttachedFilesDirectory(string value);
    public bool get_LoadFormulas();
    public void set_LoadFormulas(bool value);
    public bool get_SupportDivTag();
    public void set_SupportDivTag(bool value);
    private bool ();
    private void (bool );
    public bool get_DeleteRedundantSpaces();
    public void set_DeleteRedundantSpaces(bool value);
    public bool get_AutoFitColsAndRows();
    public void set_AutoFitColsAndRows(bool value);
    public bool get_ConvertFormulasData();
    public void set_ConvertFormulasData(bool value);
    public bool get_HasFormula();
    public void set_HasFormula(bool value);
    public IStreamProvider get_StreamProvider();
    public void set_StreamProvider(IStreamProvider value);
    public string get_ProgId();
    public HtmlTableLoadOptionCollection get_TableLoadOptions();
    internal bool ();
    internal bool ();
}
public enum Aspose.Cells.HtmlOfficeMathOutputType : Enum {
    public int value__;
    public static HtmlOfficeMathOutputType Image;
    public static HtmlOfficeMathOutputType MathML;
}
public class Aspose.Cells.HtmlSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private PrintCommentsType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private CellArea ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private HtmlCrossType ;
    [DebuggerBrowsableAttribute("0")]
private HtmlHiddenColDisplayType ;
    [DebuggerBrowsableAttribute("0")]
private HtmlHiddenRowDisplayType ;
    [DebuggerBrowsableAttribute("0")]
[]
private Encoding ;
    [DebuggerBrowsableAttribute("0")]
private IExportObjectListener ;
    [DebuggerBrowsableAttribute("0")]
private IFilePathProvider ;
    [DebuggerBrowsableAttribute("0")]
private IStreamProvider ;
    [DebuggerBrowsableAttribute("0")]
private ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private MergeEmptyTdType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private HtmlExportDataOptions ;
    [DebuggerBrowsableAttribute("0")]
private HtmlLinkTargetType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private HtmlOfficeMathOutputType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public bool IgnoreInvisibleShapes { get; public set; }
    public string PageTitle { get; public set; }
    public string AttachedFilesDirectory { get; public set; }
    public string AttachedFilesUrlPrefix { get; public set; }
    public string DefaultFontName { get; public set; }
    public bool AddGenericFont { get; public set; }
    public bool WorksheetScalable { get; public set; }
    public bool IsExportComments { get; public set; }
    public PrintCommentsType ExportCommentsType { get; public set; }
    public bool DisableDownlevelRevealedComments { get; public set; }
    public bool IsExpImageToTempDir { get; public set; }
    public bool ImageScalable { get; public set; }
    public bool WidthScalable { get; public set; }
    public bool ExportSingleTab { get; public set; }
    public bool ExportImagesAsBase64 { get; public set; }
    public bool ExportActiveWorksheetOnly { get; public set; }
    public bool ExportPrintAreaOnly { get; public set; }
    public CellArea ExportArea { get; public set; }
    public bool ParseHtmlTagInCell { get; public set; }
    public HtmlCrossType HtmlCrossStringType { get; public set; }
    public HtmlHiddenColDisplayType HiddenColDisplayType { get; public set; }
    public HtmlHiddenRowDisplayType HiddenRowDisplayType { get; public set; }
    public Encoding Encoding { get; public set; }
    [ObsoleteAttribute("Use HtmlSaveOptions.IStreamProvider property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public IExportObjectListener ExportObjectListener { get; public set; }
    public IFilePathProvider FilePathProvider { get; public set; }
    public IStreamProvider StreamProvider { get; public set; }
    public ImageOrPrintOptions ImageOptions { get; }
    public bool SaveAsSingleFile { get; public set; }
    public bool ShowAllSheets { get; public set; }
    public bool ExportPageHeaders { get; public set; }
    public bool ExportPageFooters { get; public set; }
    public bool ExportHiddenWorksheet { get; public set; }
    public bool PresentationPreference { get; public set; }
    public string CellCssPrefix { get; public set; }
    public string TableCssId { get; public set; }
    public bool IsFullPathLink { get; public set; }
    public bool ExportWorksheetCSSSeparately { get; public set; }
    public bool ExportSimilarBorderStyle { get; public set; }
    [ObsoleteAttribute("Use HtmlSaveOptions.MergeEmptyTdType instead.")]
public bool MergeEmptyTdForcely { get; public set; }
    public MergeEmptyTdType MergeEmptyTdType { get; public set; }
    public bool ExportCellCoordinate { get; public set; }
    public bool ExportExtraHeadings { get; public set; }
    [ObsoleteAttribute("Use HtmlSaveOptions.ExportRowColumnHeadings instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool ExportHeadings { get; public set; }
    public bool ExportRowColumnHeadings { get; public set; }
    public bool ExportFormula { get; public set; }
    public bool AddTooltipText { get; public set; }
    public bool ExportGridLines { get; public set; }
    public bool ExportBogusRowData { get; public set; }
    public bool ExcludeUnusedStyles { get; public set; }
    public bool ExportDocumentProperties { get; public set; }
    public bool ExportWorksheetProperties { get; public set; }
    public bool ExportWorkbookProperties { get; public set; }
    public bool ExportFrameScriptsAndProperties { get; public set; }
    public HtmlExportDataOptions ExportDataOptions { get; public set; }
    public HtmlLinkTargetType LinkTargetType { get; public set; }
    public bool IsIECompatible { get; public set; }
    public bool FormatDataIgnoreColumnWidth { get; public set; }
    public bool CalculateFormula { get; public set; }
    public bool IsJsBrowserCompatible { get; public set; }
    public bool IsMobileCompatible { get; public set; }
    public string CssStyles { get; public set; }
    public bool HideOverflowWrappedText { get; public set; }
    public bool IsBorderCollapsed { get; public set; }
    public bool EncodeEntityAsCode { get; public set; }
    public HtmlOfficeMathOutputType OfficeMathOutputMode { get; public set; }
    public string CellNameAttribute { get; public set; }
    public HtmlSaveOptions(SaveFormat saveFormat);
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    public bool get_IgnoreInvisibleShapes();
    public void set_IgnoreInvisibleShapes(bool value);
    public string get_PageTitle();
    public void set_PageTitle(string value);
    public string get_AttachedFilesDirectory();
    public void set_AttachedFilesDirectory(string value);
    public string get_AttachedFilesUrlPrefix();
    public void set_AttachedFilesUrlPrefix(string value);
    public string get_DefaultFontName();
    public void set_DefaultFontName(string value);
    public bool get_AddGenericFont();
    public void set_AddGenericFont(bool value);
    public bool get_WorksheetScalable();
    public void set_WorksheetScalable(bool value);
    public bool get_IsExportComments();
    public void set_IsExportComments(bool value);
    public PrintCommentsType get_ExportCommentsType();
    public void set_ExportCommentsType(PrintCommentsType value);
    public bool get_DisableDownlevelRevealedComments();
    public void set_DisableDownlevelRevealedComments(bool value);
    public bool get_IsExpImageToTempDir();
    public void set_IsExpImageToTempDir(bool value);
    public bool get_ImageScalable();
    public void set_ImageScalable(bool value);
    public bool get_WidthScalable();
    public void set_WidthScalable(bool value);
    public bool get_ExportSingleTab();
    public void set_ExportSingleTab(bool value);
    public bool get_ExportImagesAsBase64();
    public void set_ExportImagesAsBase64(bool value);
    public bool get_ExportActiveWorksheetOnly();
    public void set_ExportActiveWorksheetOnly(bool value);
    public bool get_ExportPrintAreaOnly();
    public void set_ExportPrintAreaOnly(bool value);
    public CellArea get_ExportArea();
    public void set_ExportArea(CellArea value);
    internal bool (Worksheet );
    public bool get_ParseHtmlTagInCell();
    public void set_ParseHtmlTagInCell(bool value);
    public HtmlCrossType get_HtmlCrossStringType();
    public void set_HtmlCrossStringType(HtmlCrossType value);
    public HtmlHiddenColDisplayType get_HiddenColDisplayType();
    public void set_HiddenColDisplayType(HtmlHiddenColDisplayType value);
    public HtmlHiddenRowDisplayType get_HiddenRowDisplayType();
    public void set_HiddenRowDisplayType(HtmlHiddenRowDisplayType value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public IExportObjectListener get_ExportObjectListener();
    public void set_ExportObjectListener(IExportObjectListener value);
    public IFilePathProvider get_FilePathProvider();
    public void set_FilePathProvider(IFilePathProvider value);
    public IStreamProvider get_StreamProvider();
    public void set_StreamProvider(IStreamProvider value);
    private void ();
    public ImageOrPrintOptions get_ImageOptions();
    public bool get_SaveAsSingleFile();
    public void set_SaveAsSingleFile(bool value);
    public bool get_ShowAllSheets();
    public void set_ShowAllSheets(bool value);
    public bool get_ExportPageHeaders();
    public void set_ExportPageHeaders(bool value);
    public bool get_ExportPageFooters();
    public void set_ExportPageFooters(bool value);
    public bool get_ExportHiddenWorksheet();
    public void set_ExportHiddenWorksheet(bool value);
    public bool get_PresentationPreference();
    public void set_PresentationPreference(bool value);
    public string get_CellCssPrefix();
    public void set_CellCssPrefix(string value);
    public string get_TableCssId();
    public void set_TableCssId(string value);
    public bool get_IsFullPathLink();
    public void set_IsFullPathLink(bool value);
    public bool get_ExportWorksheetCSSSeparately();
    public void set_ExportWorksheetCSSSeparately(bool value);
    public bool get_ExportSimilarBorderStyle();
    public void set_ExportSimilarBorderStyle(bool value);
    public bool get_MergeEmptyTdForcely();
    public void set_MergeEmptyTdForcely(bool value);
    public MergeEmptyTdType get_MergeEmptyTdType();
    public void set_MergeEmptyTdType(MergeEmptyTdType value);
    public bool get_ExportCellCoordinate();
    public void set_ExportCellCoordinate(bool value);
    public bool get_ExportExtraHeadings();
    public void set_ExportExtraHeadings(bool value);
    public bool get_ExportHeadings();
    public void set_ExportHeadings(bool value);
    public bool get_ExportRowColumnHeadings();
    public void set_ExportRowColumnHeadings(bool value);
    public bool get_ExportFormula();
    public void set_ExportFormula(bool value);
    public bool get_AddTooltipText();
    public void set_AddTooltipText(bool value);
    public bool get_ExportGridLines();
    public void set_ExportGridLines(bool value);
    public bool get_ExportBogusRowData();
    public void set_ExportBogusRowData(bool value);
    public bool get_ExcludeUnusedStyles();
    public void set_ExcludeUnusedStyles(bool value);
    public bool get_ExportDocumentProperties();
    public void set_ExportDocumentProperties(bool value);
    public bool get_ExportWorksheetProperties();
    public void set_ExportWorksheetProperties(bool value);
    public bool get_ExportWorkbookProperties();
    public void set_ExportWorkbookProperties(bool value);
    public bool get_ExportFrameScriptsAndProperties();
    public void set_ExportFrameScriptsAndProperties(bool value);
    public HtmlExportDataOptions get_ExportDataOptions();
    public void set_ExportDataOptions(HtmlExportDataOptions value);
    public HtmlLinkTargetType get_LinkTargetType();
    public void set_LinkTargetType(HtmlLinkTargetType value);
    public bool get_IsIECompatible();
    public void set_IsIECompatible(bool value);
    public bool get_FormatDataIgnoreColumnWidth();
    public void set_FormatDataIgnoreColumnWidth(bool value);
    public bool get_CalculateFormula();
    public void set_CalculateFormula(bool value);
    public bool get_IsJsBrowserCompatible();
    public void set_IsJsBrowserCompatible(bool value);
    public bool get_IsMobileCompatible();
    public void set_IsMobileCompatible(bool value);
    public string get_CssStyles();
    public void set_CssStyles(string value);
    public bool get_HideOverflowWrappedText();
    public void set_HideOverflowWrappedText(bool value);
    public bool get_IsBorderCollapsed();
    public void set_IsBorderCollapsed(bool value);
    public bool get_EncodeEntityAsCode();
    public void set_EncodeEntityAsCode(bool value);
    public HtmlOfficeMathOutputType get_OfficeMathOutputMode();
    public void set_OfficeMathOutputMode(HtmlOfficeMathOutputType value);
    public string get_CellNameAttribute();
    public void set_CellNameAttribute(string value);
    private void (string );
}
public class Aspose.Cells.HtmlTableLoadOption : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private TableStyleType ;
    public int TableIndex { get; public set; }
    public string Id { get; public set; }
    [ObsoleteAttribute("Please use HtmlTableLoadOption.Id instead")]
public string Name { get; public set; }
    public int OriginalSheetIndex { get; public set; }
    public int TargetSheetIndex { get; public set; }
    public bool TableToListObject { get; public set; }
    public int get_TableIndex();
    public void set_TableIndex(int value);
    public string get_Id();
    public void set_Id(string value);
    public string get_Name();
    public void set_Name(string value);
    public int get_OriginalSheetIndex();
    public void set_OriginalSheetIndex(int value);
    public int get_TargetSheetIndex();
    public void set_TargetSheetIndex(int value);
    public bool get_TableToListObject();
    public void set_TableToListObject(bool value);
    internal TableStyleType ();
    internal void (TableStyleType );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.HtmlTableLoadOptionCollection : CollectionBase`1<HtmlTableLoadOption> {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool TableToListObject { get; public set; }
    public HtmlTableLoadOption Item { get; }
    public bool get_TableToListObject();
    public void set_TableToListObject(bool value);
    public HtmlTableLoadOption get_Item(int index);
    public int Add(HtmlTableLoadOption item);
    public int Add(int tableIndex);
    public int Add(string tableId);
    public int Add(int tableIndex, int targetSheetIndex);
    public int Add(string tableId, int targetSheetIndex);
    public int Add(int tableIndex, int targetSheetIndex, int originalSheetIndex);
    public int Add(string tableId, int targetSheetIndex, int originalSheetIndex);
    private int (int , string , int , int );
}
public class Aspose.Cells.Hyperlink : object {
    [DebuggerBrowsableAttribute("0")]
[]
private HyperlinkCollection ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    public string Address { get; public set; }
    public string TextToDisplay { get; public set; }
    public CellArea Area { get; }
    public string ScreenTip { get; public set; }
    public TargetModeType LinkType { get; }
    internal Hyperlink(HyperlinkCollection , CellArea );
    internal string ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public string get_Address();
    public void set_Address(string value);
    internal void (string );
    internal void (string , bool );
    public string get_TextToDisplay();
    public void set_TextToDisplay(string value);
    internal void (string ,  );
    internal void (Cell );
    internal void (string );
    public CellArea get_Area();
    internal void (CellArea );
    public string get_ScreenTip();
    public void set_ScreenTip(string value);
    internal void (Hyperlink , CopyOptions );
    internal void (Hyperlink , CopyOptions );
    internal bool (Hyperlink );
    internal Byte[] ();
    internal void (Byte[] );
    public TargetModeType get_LinkType();
    internal int (WorksheetCollection );
    internal Cell (Worksheet , Hashtable );
    public void Delete();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.HyperlinkCollection : CollectionBase`1<Hyperlink> {
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    public Hyperlink Item { get; }
    internal HyperlinkCollection(object );
    internal Worksheet ();
    public int Add(int firstRow, int firstColumn, int totalRows, int totalColumns, string address);
    internal int (int , int , int , int , string , bool ,  );
    public int Add(string cellName, int totalRows, int totalColumns, string address);
    public int Add(string startCellName, string endCellName, string address, string textToDisplay, string screenTip);
    internal int (Hyperlink );
    public Hyperlink get_Item(int index);
    internal void (int );
    internal void (Hyperlink );
    public void RemoveAt(int index);
    public void Clear();
    internal void (HyperlinkCollection , CopyOptions );
    internal void (int , int );
    internal void (int , int );
    internal void (CellArea , int );
    internal void (CellArea , int );
    internal void (CellArea , int );
    internal void (HyperlinkCollection , int , int , int , CopyOptions );
    internal void (HyperlinkCollection , int , int , int , CopyOptions );
    internal void (HyperlinkCollection , CellArea , CellArea , CopyOptions );
    private void (Hyperlink );
}
public enum Aspose.Cells.HyperlinkType : Enum {
    public int value__;
    public static HyperlinkType URL;
    public static HyperlinkType File;
    public static HyperlinkType Cell;
    public static HyperlinkType Unknown;
}
[DefaultMemberAttribute("Item")]
public interface Aspose.Cells.ICellsDataTable {
    public String[] Columns { get; }
    public int Count { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual String[] get_Columns();
    public abstract virtual int get_Count();
    public abstract virtual void BeforeFirst();
    public abstract virtual object get_Item(int columnIndex);
    public abstract virtual object get_Item(string columnName);
    public abstract virtual bool Next();
}
[]
public class Aspose.Cells.IconFilter : object {
    [DebuggerBrowsableAttribute("0")]
[]
private FilterColumn ;
    [DebuggerBrowsableAttribute("0")]
private IconSetType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public IconSetType IconSetType { get; public set; }
    public int IconId { get; public set; }
    internal IconFilter(FilterColumn );
    internal void (IconFilter );
    public IconSetType get_IconSetType();
    public void set_IconSetType(IconSetType value);
    public int get_IconId();
    public void set_IconId(int value);
}
public class Aspose.Cells.IconSet : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal FormatCondition ;
    [DebuggerBrowsableAttribute("0")]
internal IconSetType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal ConditionalFormattingIconCollection ;
    [DebuggerBrowsableAttribute("0")]
private ConditionalFormattingValueCollection ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public ConditionalFormattingIconCollection CfIcons { get; }
    public ConditionalFormattingValueCollection Cfvos { get; }
    public IconSetType Type { get; public set; }
    public bool IsCustom { get; }
    public bool ShowValue { get; public set; }
    public bool Reverse { get; public set; }
    internal IconSet(FormatCondition );
    internal void (IconSet , CopyOptions );
    internal static IconSet (FormatCondition );
    public ConditionalFormattingIconCollection get_CfIcons();
    private void (int );
    public ConditionalFormattingValueCollection get_Cfvos();
    public IconSetType get_Type();
    public void set_Type(IconSetType value);
    public bool get_IsCustom();
    internal void (IconSetType );
    public bool get_ShowValue();
    public void set_ShowValue(bool value);
    public bool get_Reverse();
    public void set_Reverse(bool value);
    internal bool ();
    internal void (bool );
}
public enum Aspose.Cells.IconSetType : Enum {
    public int value__;
    public static IconSetType Arrows3;
    public static IconSetType ArrowsGray3;
    public static IconSetType Flags3;
    public static IconSetType Signs3;
    public static IconSetType Symbols3;
    public static IconSetType Symbols32;
    public static IconSetType TrafficLights31;
    public static IconSetType TrafficLights32;
    public static IconSetType Arrows4;
    public static IconSetType ArrowsGray4;
    public static IconSetType Rating4;
    public static IconSetType RedToBlack4;
    public static IconSetType TrafficLights4;
    public static IconSetType Arrows5;
    public static IconSetType ArrowsGray5;
    public static IconSetType Quarters5;
    public static IconSetType Rating5;
    public static IconSetType Stars3;
    public static IconSetType Boxes5;
    public static IconSetType Triangles3;
    public static IconSetType None;
    public static IconSetType CustomSet;
    public static IconSetType Smilies3;
    public static IconSetType ColorSmilies3;
}
public interface Aspose.Cells.ICustomParser {
    public abstract virtual object ParseObject(string value);
    public abstract virtual string GetFormat();
}
public interface Aspose.Cells.IExportObjectListener {
    public abstract virtual object ExportObject(ExportObjectEvent e);
}
public interface Aspose.Cells.IFilePathProvider {
    public abstract virtual string GetFullName(string sheetName);
}
public class Aspose.Cells.ImageSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
private ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
private IStreamProvider ;
    public ImageOrPrintOptions ImageOrPrintOptions { get; }
    public IStreamProvider StreamProvider { get; public set; }
    public ImageSaveOptions(SaveFormat saveFormat);
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    private static ImageType (SaveFormat );
    internal void ();
    public ImageOrPrintOptions get_ImageOrPrintOptions();
    public IStreamProvider get_StreamProvider();
    public void set_StreamProvider(IStreamProvider value);
    internal void (ImageSaveOptions );
    internal static ImageSaveOptions (SaveOptions );
}
public class Aspose.Cells.ImportTableOptions : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private String[] ;
    [DebuggerBrowsableAttribute("0")]
private Boolean[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private Object[] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool ConvertGridStyle { get; public set; }
    public bool ConvertNumericData { get; public set; }
    public bool InsertRows { get; public set; }
    public bool ShiftFirstRowDown { get; public set; }
    public bool IsFieldNameShown { get; public set; }
    public bool ExportCaptionAsFieldName { get; public set; }
    public string DateFormat { get; public set; }
    public String[] NumberFormats { get; public set; }
    public Boolean[] IsFormulas { get; public set; }
    public int TotalRows { get; public set; }
    public int TotalColumns { get; public set; }
    public Int32[] ColumnIndexes { get; public set; }
    public Object[] DefaultValues { get; public set; }
    public bool IsHtmlString { get; public set; }
    public bool CheckMergedCells { get; public set; }
    public bool get_ConvertGridStyle();
    public void set_ConvertGridStyle(bool value);
    public bool get_ConvertNumericData();
    public void set_ConvertNumericData(bool value);
    public bool get_InsertRows();
    public void set_InsertRows(bool value);
    public bool get_ShiftFirstRowDown();
    public void set_ShiftFirstRowDown(bool value);
    public bool get_IsFieldNameShown();
    public void set_IsFieldNameShown(bool value);
    public bool get_ExportCaptionAsFieldName();
    public void set_ExportCaptionAsFieldName(bool value);
    public string get_DateFormat();
    public void set_DateFormat(string value);
    public String[] get_NumberFormats();
    public void set_NumberFormats(String[] value);
    public Boolean[] get_IsFormulas();
    public void set_IsFormulas(Boolean[] value);
    public int get_TotalRows();
    public void set_TotalRows(int value);
    public int get_TotalColumns();
    public void set_TotalColumns(int value);
    public Int32[] get_ColumnIndexes();
    public void set_ColumnIndexes(Int32[] value);
    public Object[] get_DefaultValues();
    public void set_DefaultValues(Object[] value);
    public bool get_IsHtmlString();
    public void set_IsHtmlString(bool value);
    public bool get_CheckMergedCells();
    public void set_CheckMergedCells(bool value);
    internal object (int );
    internal void (ImportTableOptions );
}
public class Aspose.Cells.IndividualFontConfigs : object {
    [DebuggerBrowsableAttribute("0")]
private FontSourceBase[] ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public void SetFontSubstitutes(string originalFontName, String[] substituteFontNames);
    public String[] GetFontSubstitutes(string originalFontName);
    public void SetFontFolder(string fontFolder, bool recursive);
    public void SetFontFolders(String[] fontFolders, bool recursive);
    public void SetFontSources(FontSourceBase[] sources);
    internal void (FontSourceBase[] , bool );
    [("False")]
public FontSourceBase[] GetFontSources();
    [("False")]
internal [] ();
    [("False")]
private void (bool );
    internal  ();
    internal bool ();
}
public class Aspose.Cells.InsertOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal CopyFormatType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public CopyFormatType CopyFormatType { get; public set; }
    public bool UpdateReference { get; public set; }
    public CopyFormatType get_CopyFormatType();
    public void set_CopyFormatType(CopyFormatType value);
    public bool get_UpdateReference();
    public void set_UpdateReference(bool value);
}
public class Aspose.Cells.InterruptMonitor : AbstractInterruptMonitor {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool IsInterruptionRequested { get; }
    public virtual bool get_IsInterruptionRequested();
    public void Interrupt();
}
public interface Aspose.Cells.ISmartMarkerCallBack {
    public abstract virtual void Process(int sheetIndex, int rowIndex, int colIndex, string tableName, string columnName);
}
public interface Aspose.Cells.IStreamProvider {
    [("True")]
public abstract virtual void InitStream(StreamProviderOptions options);
    [("True")]
public abstract virtual void CloseStream(StreamProviderOptions options);
}
public interface Aspose.Cells.IWarningCallback {
    public abstract virtual void Warning(WarningInfo warningInfo);
}
public enum Aspose.Cells.Json.JsonExportHyperlinkType : Enum {
    public int value__;
    public static JsonExportHyperlinkType DisplayString;
    public static JsonExportHyperlinkType Address;
    public static JsonExportHyperlinkType HtmlString;
}
public class Aspose.Cells.JsonLoadOptions : LoadOptions {
    [DebuggerBrowsableAttribute("0")]
internal JsonLayoutOptions ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public string StartCell { get; public set; }
    public JsonLayoutOptions LayoutOptions { get; public set; }
    public bool MultipleWorksheets { get; public set; }
    public bool KeptSchema { get; public set; }
    internal static JsonLoadOptions (LoadOptions );
    public string get_StartCell();
    public void set_StartCell(string value);
    public JsonLayoutOptions get_LayoutOptions();
    public void set_LayoutOptions(JsonLayoutOptions value);
    public bool get_MultipleWorksheets();
    public void set_MultipleWorksheets(bool value);
    public bool get_KeptSchema();
    public void set_KeptSchema(bool value);
}
public class Aspose.Cells.JsonSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal JsonExportHyperlinkType ;
    [DebuggerBrowsableAttribute("0")]
internal Int32[] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public JsonExportHyperlinkType ExportHyperlinkType { get; public set; }
    public bool SkipEmptyRows { get; public set; }
    public Int32[] SheetIndexes { get; public set; }
    public String[] Schemas { get; public set; }
    public CellArea ExportArea { get; public set; }
    public bool HasHeaderRow { get; public set; }
    public bool ExportAsString { get; public set; }
    public string Indent { get; public set; }
    public bool ExportNestedStructure { get; public set; }
    public bool ExportEmptyCells { get; public set; }
    public bool AlwaysExportAsJsonObject { get; public set; }
    public bool ToExcelStruct { get; public set; }
    internal JsonSaveOptions(ExportRangeToJsonOptions );
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    public JsonExportHyperlinkType get_ExportHyperlinkType();
    public void set_ExportHyperlinkType(JsonExportHyperlinkType value);
    public bool get_SkipEmptyRows();
    public void set_SkipEmptyRows(bool value);
    public Int32[] get_SheetIndexes();
    public void set_SheetIndexes(Int32[] value);
    public String[] get_Schemas();
    public void set_Schemas(String[] value);
    public CellArea get_ExportArea();
    public void set_ExportArea(CellArea value);
    public bool get_HasHeaderRow();
    public void set_HasHeaderRow(bool value);
    public bool get_ExportAsString();
    public void set_ExportAsString(bool value);
    public string get_Indent();
    public void set_Indent(string value);
    public bool get_ExportNestedStructure();
    public void set_ExportNestedStructure(bool value);
    public bool get_ExportEmptyCells();
    public void set_ExportEmptyCells(bool value);
    public bool get_AlwaysExportAsJsonObject();
    public void set_AlwaysExportAsJsonObject(bool value);
    public bool get_ToExcelStruct();
    public void set_ToExcelStruct(bool value);
}
public class Aspose.Cells.License : object {
    private static Stream (string , Assembly );
    private static string (string , Assembly );
    private static string (Assembly );
    private static Stream (Assembly , string );
    public void SetLicense(string licenseName);
    private void (string , Assembly );
    public void SetLicense(Stream stream);
    private void (int , string );
    private String[] (Stream );
    private static void ();
}
public interface Aspose.Cells.LightCellsDataHandler {
    public abstract virtual bool StartSheet(Worksheet sheet);
    public abstract virtual bool StartRow(int rowIndex);
    public abstract virtual bool ProcessRow(Row row);
    public abstract virtual bool StartCell(int columnIndex);
    public abstract virtual bool ProcessCell(Cell cell);
}
public interface Aspose.Cells.LightCellsDataProvider {
    public abstract virtual bool StartSheet(int sheetIndex);
    public abstract virtual int NextRow();
    public abstract virtual void StartRow(Row row);
    public abstract virtual int NextCell();
    public abstract virtual void StartCell(Cell cell);
    public abstract virtual bool IsGatherString();
}
[("And")]
[("Or")]
[("Complement")]
public enum Aspose.Cells.LoadDataFilterOptions : Enum {
    public int value__;
    [ObsoleteAttribute("Use Structure instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static LoadDataFilterOptions None;
    public static LoadDataFilterOptions All;
    public static LoadDataFilterOptions CellBlank;
    public static LoadDataFilterOptions CellString;
    public static LoadDataFilterOptions CellNumeric;
    public static LoadDataFilterOptions CellError;
    public static LoadDataFilterOptions CellBool;
    public static LoadDataFilterOptions CellValue;
    public static LoadDataFilterOptions Formula;
    public static LoadDataFilterOptions CellData;
    public static LoadDataFilterOptions Chart;
    [ObsoleteAttribute("Use Drawing instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static LoadDataFilterOptions Shape;
    public static LoadDataFilterOptions Drawing;
    public static LoadDataFilterOptions MergedArea;
    public static LoadDataFilterOptions ConditionalFormatting;
    public static LoadDataFilterOptions DataValidation;
    public static LoadDataFilterOptions PivotTable;
    public static LoadDataFilterOptions Table;
    public static LoadDataFilterOptions Hyperlinks;
    public static LoadDataFilterOptions SheetSettings;
    public static LoadDataFilterOptions SheetData;
    public static LoadDataFilterOptions BookSettings;
    public static LoadDataFilterOptions Settings;
    public static LoadDataFilterOptions XmlMap;
    public static LoadDataFilterOptions Structure;
    public static LoadDataFilterOptions DocumentProperties;
    public static LoadDataFilterOptions DefinedNames;
    public static LoadDataFilterOptions VBA;
    public static LoadDataFilterOptions Style;
    public static LoadDataFilterOptions Picture;
    public static LoadDataFilterOptions OleObject;
    public static LoadDataFilterOptions Revision;
}
public class Aspose.Cells.LoadFilter : object {
    [DebuggerBrowsableAttribute("0")]
private LoadDataFilterOptions ;
    public LoadDataFilterOptions LoadDataFilterOptions { get; public set; }
    public Int32[] SheetsInLoadingOrder { get; }
    public LoadFilter(LoadDataFilterOptions opts);
    public LoadDataFilterOptions get_LoadDataFilterOptions();
    public void set_LoadDataFilterOptions(LoadDataFilterOptions value);
    public virtual Int32[] get_SheetsInLoadingOrder();
    public virtual void StartSheet(Worksheet sheet);
}
public enum Aspose.Cells.LoadFormat : Enum {
    public int value__;
    public static LoadFormat Auto;
    public static LoadFormat Csv;
    [ObsoleteAttribute("Use LoadFormat.Csv instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static LoadFormat CSV;
    public static LoadFormat Xlsx;
    public static LoadFormat Tsv;
    [ObsoleteAttribute("Use LoadFormat.Tsv instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static LoadFormat TSV;
    public static LoadFormat TabDelimited;
    public static LoadFormat Html;
    public static LoadFormat MHtml;
    public static LoadFormat Ods;
    [ObsoleteAttribute("Use LoadFormat.Ods instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static LoadFormat ODS;
    public static LoadFormat Excel97To2003;
    public static LoadFormat SpreadsheetML;
    public static LoadFormat Xlsb;
    public static LoadFormat Ots;
    public static LoadFormat Numbers;
    public static LoadFormat Fods;
    [ObsoleteAttribute("Use LoadFormat.Fods instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static LoadFormat FODS;
    public static LoadFormat Sxc;
    [ObsoleteAttribute("Use LoadFormat.Sxc instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static LoadFormat SXC;
    public static LoadFormat Xml;
    public static LoadFormat Epub;
    public static LoadFormat Azw3;
    public static LoadFormat Unknown;
    public static LoadFormat Image;
    public static LoadFormat Json;
}
public class Aspose.Cells.LoadOptions : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    protected LoadFormat m_LoadFormat;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private CountryCode ;
    [DebuggerBrowsableAttribute("0")]
internal CultureInfo ;
    [DebuggerBrowsableAttribute("0")]
internal DefaultStyleSettings ;
    [DebuggerBrowsableAttribute("0")]
private AbstractInterruptMonitor ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private LoadFilter ;
    [DebuggerBrowsableAttribute("0")]
private LightCellsDataHandler ;
    [DebuggerBrowsableAttribute("0")]
private MemorySetting ;
    [DebuggerBrowsableAttribute("0")]
private IWarningCallback ;
    [DebuggerBrowsableAttribute("0")]
private AutoFitterOptions ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private IndividualFontConfigs ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public LoadFormat LoadFormat { get; }
    public string Password { get; public set; }
    public bool ParsingFormulaOnOpen { get; public set; }
    public bool ParsingPivotCachedRecords { get; public set; }
    public CountryCode LanguageCode { get; public set; }
    public CountryCode Region { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public DefaultStyleSettings DefaultStyleSettings { get; }
    [ObsoleteAttribute("Use DefaultStyleSettings.FontName property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public string StandardFont { get; public set; }
    [ObsoleteAttribute("Use DefaultStyleSettings.FontSize property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public double StandardFontSize { get; public set; }
    public AbstractInterruptMonitor InterruptMonitor { get; public set; }
    public bool IgnoreNotPrinted { get; public set; }
    public bool CheckDataValid { get; public set; }
    public bool CheckExcelRestriction { get; public set; }
    public bool KeepUnparsedData { get; public set; }
    public LoadFilter LoadFilter { get; public set; }
    public LightCellsDataHandler LightCellsDataHandler { get; public set; }
    public MemorySetting MemorySetting { get; public set; }
    public IWarningCallback WarningCallback { get; public set; }
    public AutoFitterOptions AutoFitterOptions { get; public set; }
    public bool AutoFilter { get; public set; }
    public IndividualFontConfigs FontConfigs { get; public set; }
    public bool IgnoreUselessShapes { get; public set; }
    public bool PreservePaddingSpacesInFormula { get; public set; }
    public LoadOptions(LoadFormat loadFormat);
    internal  ();
    internal void ( );
    public LoadFormat get_LoadFormat();
    internal virtual LoadOptions 3brubdvsxd6xvlegksy2gu4sdj469srm();
    internal void (LoadFormat );
    public string get_Password();
    public void set_Password(string value);
    public bool get_ParsingFormulaOnOpen();
    public void set_ParsingFormulaOnOpen(bool value);
    public bool get_ParsingPivotCachedRecords();
    public void set_ParsingPivotCachedRecords(bool value);
    public void SetPaperSize(PaperSizeType type);
    public CountryCode get_LanguageCode();
    public void set_LanguageCode(CountryCode value);
    public CountryCode get_Region();
    public void set_Region(CountryCode value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public DefaultStyleSettings get_DefaultStyleSettings();
    public string get_StandardFont();
    public void set_StandardFont(string value);
    public double get_StandardFontSize();
    public void set_StandardFontSize(double value);
    public AbstractInterruptMonitor get_InterruptMonitor();
    public void set_InterruptMonitor(AbstractInterruptMonitor value);
    public bool get_IgnoreNotPrinted();
    public void set_IgnoreNotPrinted(bool value);
    public bool get_CheckDataValid();
    public void set_CheckDataValid(bool value);
    public bool get_CheckExcelRestriction();
    public void set_CheckExcelRestriction(bool value);
    public bool get_KeepUnparsedData();
    public void set_KeepUnparsedData(bool value);
    public LoadFilter get_LoadFilter();
    public void set_LoadFilter(LoadFilter value);
    public LightCellsDataHandler get_LightCellsDataHandler();
    public void set_LightCellsDataHandler(LightCellsDataHandler value);
    public MemorySetting get_MemorySetting();
    public void set_MemorySetting(MemorySetting value);
    internal void (LoadOptions );
    public void set_WarningCallback(IWarningCallback value);
    public IWarningCallback get_WarningCallback();
    public AutoFitterOptions get_AutoFitterOptions();
    public void set_AutoFitterOptions(AutoFitterOptions value);
    public bool get_AutoFilter();
    public void set_AutoFilter(bool value);
    public IndividualFontConfigs get_FontConfigs();
    public void set_FontConfigs(IndividualFontConfigs value);
    public bool get_IgnoreUselessShapes();
    public void set_IgnoreUselessShapes(bool value);
    public bool get_PreservePaddingSpacesInFormula();
    public void set_PreservePaddingSpacesInFormula(bool value);
}
public enum Aspose.Cells.LookAtType : Enum {
    public int value__;
    public static LookAtType Contains;
    public static LookAtType StartWith;
    public static LookAtType EndWith;
    public static LookAtType EntireContent;
}
public enum Aspose.Cells.LookInType : Enum {
    public int value__;
    public static LookInType Formulas;
    public static LookInType Values;
    public static LookInType ValuesExcludeFormulaCell;
    public static LookInType Comments;
    public static LookInType OnlyFormulas;
    public static LookInType OriginalValues;
}
public class Aspose.Cells.MarkdownSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Encoding ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal CellValueFormatStrategy ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public Encoding Encoding { get; public set; }
    public CellValueFormatStrategy FormatStrategy { get; public set; }
    public LightCellsDataProvider LightCellsDataProvider { get; public set; }
    public string LineSeparator { get; public set; }
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    internal static MarkdownSaveOptions (WorkbookSettings , SaveOptions );
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public CellValueFormatStrategy get_FormatStrategy();
    public void set_FormatStrategy(CellValueFormatStrategy value);
    public LightCellsDataProvider get_LightCellsDataProvider();
    public void set_LightCellsDataProvider(LightCellsDataProvider value);
    public string get_LineSeparator();
    public void set_LineSeparator(string value);
}
public class Aspose.Cells.Markup.CustomXmlPart : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public Byte[] Data { get; public set; }
    public Byte[] SchemaData { get; public set; }
    public string ID { get; public set; }
    internal CustomXmlPart(Byte[] , Byte[] );
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public Byte[] get_SchemaData();
    public void set_SchemaData(Byte[] value);
    public string get_ID();
    public void set_ID(string value);
    [("False")]
private void ();
    internal void ();
    internal void (CustomXmlPart );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Markup.CustomXmlPartCollection : CollectionBase`1<CustomXmlPart> {
    public CustomXmlPart Item { get; }
    public int Add(Byte[] data, Byte[] shemaData);
    internal int (CustomXmlPart );
    public CustomXmlPart get_Item(int index);
    public CustomXmlPart SelectByID(string id);
    internal void (CustomXmlPartCollection );
}
public class Aspose.Cells.Markup.SmartTag : object {
    [DebuggerBrowsableAttribute("0")]
[]
private SmartTagCollection ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
private SmartTagPropertyCollection ;
    public bool Deleted { get; public set; }
    public SmartTagPropertyCollection Properties { get; public set; }
    public string Uri { get; }
    public string Name { get; }
    internal SmartTag(SmartTagCollection );
    public bool get_Deleted();
    public void set_Deleted(bool value);
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
    public SmartTagPropertyCollection get_Properties();
    public void set_Properties(SmartTagPropertyCollection value);
    public string get_Uri();
    public string get_Name();
    public void SetLink(string uri, string name);
    internal void (SmartTag );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Markup.SmartTagCollection : CollectionBase`1<SmartTag> {
    [DebuggerBrowsableAttribute("0")]
[]
private SmartTagSetting ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public int Row { get; }
    public int Column { get; }
    public SmartTag Item { get; }
    internal SmartTagCollection(SmartTagSetting , int , int );
    internal SmartTagSetting ();
    public int get_Row();
    internal void (int );
    public int get_Column();
    internal void (int );
    public SmartTag get_Item(int index);
    public int Add(string uri, string name);
    internal int (SmartTag );
    internal void (SmartTagCollection );
}
public class Aspose.Cells.Markup.SmartTagOptions : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private SmartTagShowType ;
    public bool EmbedSmartTags { get; public set; }
    public SmartTagShowType ShowType { get; public set; }
    public bool get_EmbedSmartTags();
    public void set_EmbedSmartTags(bool value);
    public SmartTagShowType get_ShowType();
    public void set_ShowType(SmartTagShowType value);
    internal void (SmartTagOptions );
}
public class Aspose.Cells.Markup.SmartTagProperty : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public string Name { get; public set; }
    public string Value { get; public set; }
    internal SmartTagProperty(string , string );
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Markup.SmartTagPropertyCollection : CollectionBase`1<SmartTagProperty> {
    public SmartTagProperty Item { get; }
    public SmartTagProperty Item { get; }
    public SmartTagProperty get_Item(int index);
    public SmartTagProperty get_Item(string name);
    public int Add(string name, string value);
    internal void (SmartTagPropertyCollection );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Markup.SmartTagSetting : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    public SmartTagCollection Item { get; }
    public SmartTagCollection Item { get; }
    public SmartTagCollection Item { get; }
    internal SmartTagSetting(Worksheet );
    internal Worksheet ();
    public int Add(int row, int column);
    public int Add(string cellName);
    public SmartTagCollection get_Item(int index);
    public SmartTagCollection get_Item(int row, int column);
    public SmartTagCollection get_Item(string cellName);
    internal void (SmartTagSetting );
    internal void (int , int );
    internal void (int , int );
    internal void (SmartTagSetting , int , int , int );
    internal void (SmartTagSetting , int , int , int );
    internal void (SmartTagSetting , int , int , int , int , int , int );
}
public enum Aspose.Cells.Markup.SmartTagShowType : Enum {
    public int value__;
    public static SmartTagShowType All;
    public static SmartTagShowType NoSmartTagIndicator;
    public static SmartTagShowType None;
}
public class Aspose.Cells.MemoryFontSource : FontSourceBase {
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    public Byte[] FontData { get; }
    public FontSourceType Type { get; }
    public MemoryFontSource(Byte[] fontData);
    public Byte[] get_FontData();
    public virtual FontSourceType get_Type();
    internal virtual FontSourceBase wptgtrv5mkbpn63zvxmf7wtbmdbbbr78();
    internal virtual ArrayList wptgtrv5mkbpn63zvxmf7wtbmdbbbr78();
}
public enum Aspose.Cells.MemorySetting : Enum {
    public int value__;
    public static MemorySetting Normal;
    public static MemorySetting MemoryPreference;
}
public enum Aspose.Cells.MergedCellsShrinkType : Enum {
    public int value__;
    public static MergedCellsShrinkType None;
    public static MergedCellsShrinkType ShrinkToFit;
    public static MergedCellsShrinkType KeepHeaderOnly;
}
public enum Aspose.Cells.MergeEmptyTdType : Enum {
    public int value__;
    public static MergeEmptyTdType Default;
    public static MergeEmptyTdType None;
    public static MergeEmptyTdType MergeForcely;
}
public class Aspose.Cells.Metadata.MetadataOptions : object {
    [DebuggerBrowsableAttribute("0")]
private MetadataType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public MetadataType MetadataType { get; }
    public string Password { get; public set; }
    public int KeyLength { get; public set; }
    public MetadataOptions(MetadataType metadataType);
    public MetadataType get_MetadataType();
    public string get_Password();
    public void set_Password(string value);
    public int get_KeyLength();
    public void set_KeyLength(int value);
}
[FlagsAttribute]
[("And")]
public enum Aspose.Cells.Metadata.MetadataType : Enum {
    public int value__;
    public static MetadataType Encryption;
    public static MetadataType Decryption;
    public static MetadataType DocumentProperties;
}
public class Aspose.Cells.Metadata.WorkbookMetadata : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private Stream ;
    [DebuggerBrowsableAttribute("0")]
private MetadataOptions ;
    [DebuggerBrowsableAttribute("0")]
private FileFormatType ;
    public MetadataOptions Options { get; }
    public BuiltInDocumentPropertyCollection BuiltInDocumentProperties { get; }
    public CustomDocumentPropertyCollection CustomDocumentProperties { get; }
    public WorkbookMetadata(string fileName, MetadataOptions options);
    public WorkbookMetadata(Stream stream, MetadataOptions options);
    public MetadataOptions get_Options();
    public BuiltInDocumentPropertyCollection get_BuiltInDocumentProperties();
    public CustomDocumentPropertyCollection get_CustomDocumentProperties();
    private void (Stream );
    public void Save(string fileName);
    public void Save(Stream stream);
}
[]
public class Aspose.Cells.Metered : object {
    public void SetMeteredKey(string publicKey, string privateKey);
    public static decimal GetConsumptionQuantity();
    public static decimal GetConsumptionCredit();
    public string GetProductName();
    public static bool IsMeteredLicensed();
}
[DefaultMemberAttribute("Item")]
[]
public class Aspose.Cells.MultipleFilterCollection : CollectionBase {
    [DebuggerBrowsableAttribute("0")]
[]
internal FilterColumn ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public bool MatchBlank { get; public set; }
    public object Item { get; }
    internal MultipleFilterCollection(FilterColumn );
    internal void (DateTimeGroupingType , int , int , int , int , int , int );
    internal void (string );
    internal void (MultipleFilterCollection );
    public bool get_MatchBlank();
    public void set_MatchBlank(bool value);
    public object get_Item(int index);
    public void Add(string filter);
    internal void (string );
    internal void (DateTimeGroupItem );
    internal void (DateTimeGroupingType , int , int , int );
    internal void (DateTimeGroupingType , int , int , int , int , int , int );
    internal bool (Cells ,  , int ,  );
    internal bool (object );
}
public class Aspose.Cells.Name : object {
    [DebuggerBrowsableAttribute("0")]
private static Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private static object ;
    [DebuggerBrowsableAttribute("0")]
[]
internal string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string Comment { get; public set; }
    public string Text { get; public set; }
    public string FullText { get; }
    public string RefersTo { get; public set; }
    public string R1C1RefersTo { get; public set; }
    public bool IsReferred { get; }
    public bool IsVisible { get; public set; }
    public int SheetIndex { get; public set; }
    internal Name(WorksheetCollection );
    internal Name(WorksheetCollection , string );
    internal Name(WorksheetCollection , string , int );
    private static Name();
    internal static Hashtable ();
    internal ushort ();
    internal void (ushort );
    internal Byte[] ();
    internal void (Byte[] );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    public string get_Comment();
    public void set_Comment(string value);
    internal byte ();
    internal void (byte );
    internal WorksheetCollection ();
    internal static string (string , WorksheetCollection );
    internal static int (string );
    internal void (string );
    internal bool (NameScopeType , int );
    internal int ();
    public string get_Text();
    public void set_Text(string value);
    public string get_FullText();
    internal string ();
    internal void (string );
    public string get_RefersTo();
    public void set_RefersTo(string value);
    internal void ();
    internal void (string );
    public string get_R1C1RefersTo();
    public void set_R1C1RefersTo(string value);
    public string GetRefersTo(bool isR1C1, bool isLocal);
    public string GetRefersTo(bool isR1C1, bool isLocal, int row, int column);
    private string (bool , bool , bool , int , int );
    public void SetRefersTo(string refersTo, bool isR1C1, bool isLocal);
    internal void (string , bool , bool , bool );
    public bool get_IsReferred();
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal bool ();
    internal void (bool );
    internal void ();
    internal  ();
    internal void ( );
    public int get_SheetIndex();
    public void set_SheetIndex(int value);
    internal int ();
    internal byte ();
    internal void (byte );
    internal void (int , CellArea );
    internal static string (byte );
    internal Byte[] ();
    internal void (string );
    internal void (Name , CopyOptions );
    internal void ();
    public virtual string ToString();
    private  ();
    public Range[] GetRanges();
    public Range[] GetRanges(bool recalculate);
    public ReferredArea[] GetReferredAreas(bool recalculate);
    internal Object[] (int );
    public Range GetRange();
    public Range GetRange(bool recalculate);
    public Range GetRange(int sheetIndex, int row, int column);
    internal void ();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.NameCollection : CollectionBase`1<Name> {
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    public Name Item { get; }
    public Name Item { get; }
    internal NameCollection(WorksheetCollection );
    internal WorksheetCollection ();
    internal Range[] (WorksheetCollection );
    public int Add(string text);
    internal int (string );
    internal int (int , string );
    internal int (int , string );
    internal int (int , string );
    internal int (int , string );
    private Hashtable ();
    internal int (Name , bool );
    public Name get_Item(int index);
    public Name[] Filter(NameScopeType type, int sheetIndex);
    public Name get_Item(string text);
    internal void (Hashtable );
    public void Remove(String[] names);
    public void Remove(string text);
    public void RemoveAt(int index);
    public void Clear();
    internal void ();
    public void RemoveDuplicateNames();
    public void Sort();
    private void (Hashtable );
    internal int (string , int , bool );
    internal Name (string , int );
    internal int (string , int );
    internal Int32[] (int , string , bool , bool );
    internal void (int , string );
    internal Hashtable (int );
    internal void (int );
    internal void (int , int );
    internal void (NameCollection , CopyOptions );
    internal void ();
    internal void ();
    internal void (Worksheet , CellArea , int , ShiftType );
    internal Range[] (int , string );
    internal void (int , string , string , bool , bool );
    internal void (Name , string );
    private static string (int , string );
    private int (string , int );
    private int (string );
}
public enum Aspose.Cells.NameScopeType : Enum {
    public int value__;
    public static NameScopeType All;
    public static NameScopeType Workbook;
    public static NameScopeType Worksheet;
}
public class Aspose.Cells.NegativeBarFormat : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private DataBarNegativeColorType ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private DataBarNegativeColorType ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    public Color BorderColor { get; public set; }
    public DataBarNegativeColorType BorderColorType { get; public set; }
    public Color Color { get; public set; }
    public DataBarNegativeColorType ColorType { get; public set; }
    internal NegativeBarFormat(DataBar );
    internal void (NegativeBarFormat );
    internal  ();
    internal void ( );
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public DataBarNegativeColorType get_BorderColorType();
    public void set_BorderColorType(DataBarNegativeColorType value);
    internal  ();
    internal void ( );
    public Color get_Color();
    public void set_Color(Color value);
    public DataBarNegativeColorType get_ColorType();
    public void set_ColorType(DataBarNegativeColorType value);
}
public enum Aspose.Cells.NumberCategoryType : Enum {
    public int value__;
    public static NumberCategoryType General;
    public static NumberCategoryType Text;
    public static NumberCategoryType Number;
    public static NumberCategoryType Date;
    public static NumberCategoryType Time;
    public static NumberCategoryType Fraction;
    public static NumberCategoryType Scientific;
}
public enum Aspose.Cells.Numbers.LoadNumbersTableType : Enum {
    public int value__;
    public static LoadNumbersTableType OneTablePerSheet;
    public static LoadNumbersTableType OverrideOtherTables;
    public static LoadNumbersTableType TileTables;
}
public class Aspose.Cells.Numbers.NumbersLoadOptions : LoadOptions {
    [DebuggerBrowsableAttribute("0")]
internal LoadNumbersTableType ;
    public LoadNumbersTableType LoadTableType { get; public set; }
    internal static NumbersLoadOptions (LoadOptions );
    public LoadNumbersTableType get_LoadTableType();
    public void set_LoadTableType(LoadNumbersTableType value);
}
public class Aspose.Cells.Ods.OdsCellField : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal OdsCellFieldType ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public string CustomFormat { get; public set; }
    public OdsCellFieldType FieldType { get; public set; }
    public int Row { get; public set; }
    public int Column { get; public set; }
    internal OdsCellField(int , int , OdsCellFieldType , string );
    public string get_CustomFormat();
    public void set_CustomFormat(string value);
    public OdsCellFieldType get_FieldType();
    public void set_FieldType(OdsCellFieldType value);
    public int get_Row();
    public void set_Row(int value);
    public int get_Column();
    public void set_Column(int value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Ods.OdsCellFieldCollection : CollectionBase`1<OdsCellField> {
    [DebuggerBrowsableAttribute("0")]
[]
internal Cells ;
    public OdsCellField Item { get; }
    public OdsCellField Item { get; }
    internal OdsCellFieldCollection(Cells );
    public OdsCellField get_Item(int index);
    public OdsCellField get_Item(int row, int column);
    public int Add(int row, int column, OdsCellFieldType fieldType, string format);
    public void UpdateFieldsValue();
}
public enum Aspose.Cells.Ods.OdsCellFieldType : Enum {
    public int value__;
    public static OdsCellFieldType Date;
    public static OdsCellFieldType SheetName;
    public static OdsCellFieldType Title;
}
public enum Aspose.Cells.Ods.OdsGeneratorType : Enum {
    public int value__;
    public static OdsGeneratorType LibreOffice;
    public static OdsGeneratorType OpenOffice;
}
public class Aspose.Cells.Ods.OdsPageBackground : object {
    [DebuggerBrowsableAttribute("0")]
internal OdsPageBackgroundType ;
    [DebuggerBrowsableAttribute("0")]
internal Color ;
    [DebuggerBrowsableAttribute("0")]
internal OdsPageBackgroundGraphicType ;
    [DebuggerBrowsableAttribute("0")]
internal OdsPageBackgroundGraphicPositionType ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public OdsPageBackgroundType Type { get; public set; }
    public Color Color { get; public set; }
    public OdsPageBackgroundGraphicType GraphicType { get; public set; }
    public OdsPageBackgroundGraphicPositionType GraphicPositionType { get; public set; }
    public bool IsLink { get; }
    public string LinkedGraphic { get; public set; }
    public Byte[] GraphicData { get; public set; }
    public OdsPageBackgroundType get_Type();
    public void set_Type(OdsPageBackgroundType value);
    public Color get_Color();
    public void set_Color(Color value);
    public OdsPageBackgroundGraphicType get_GraphicType();
    public void set_GraphicType(OdsPageBackgroundGraphicType value);
    public OdsPageBackgroundGraphicPositionType get_GraphicPositionType();
    public void set_GraphicPositionType(OdsPageBackgroundGraphicPositionType value);
    public bool get_IsLink();
    public string get_LinkedGraphic();
    public void set_LinkedGraphic(string value);
    public Byte[] get_GraphicData();
    public void set_GraphicData(Byte[] value);
}
public enum Aspose.Cells.Ods.OdsPageBackgroundGraphicPositionType : Enum {
    public int value__;
    public static OdsPageBackgroundGraphicPositionType TopLeft;
    public static OdsPageBackgroundGraphicPositionType TopCenter;
    public static OdsPageBackgroundGraphicPositionType TopRight;
    public static OdsPageBackgroundGraphicPositionType CenterLeft;
    public static OdsPageBackgroundGraphicPositionType CenterCenter;
    public static OdsPageBackgroundGraphicPositionType CenterRight;
    public static OdsPageBackgroundGraphicPositionType BottomLeft;
    public static OdsPageBackgroundGraphicPositionType BottomCenter;
    public static OdsPageBackgroundGraphicPositionType BottomRight;
}
public enum Aspose.Cells.Ods.OdsPageBackgroundGraphicType : Enum {
    public int value__;
    public static OdsPageBackgroundGraphicType Position;
    public static OdsPageBackgroundGraphicType Area;
    public static OdsPageBackgroundGraphicType Tile;
}
public enum Aspose.Cells.Ods.OdsPageBackgroundType : Enum {
    public int value__;
    public static OdsPageBackgroundType None;
    public static OdsPageBackgroundType Color;
    public static OdsPageBackgroundType Graphic;
}
public enum Aspose.Cells.Ods.OpenDocumentFormatVersionType : Enum {
    public int value__;
    public static OpenDocumentFormatVersionType None;
    public static OpenDocumentFormatVersionType Odf11;
    public static OpenDocumentFormatVersionType Odf12;
    public static OpenDocumentFormatVersionType Odf13;
}
public class Aspose.Cells.OdsLoadOptions : LoadOptions {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool ApplyExcelDefaultStyleToHyperlink { get; public set; }
    public bool RefreshPivotTables { get; public set; }
    public OdsLoadOptions(LoadFormat type);
    internal virtual LoadOptions 3brubdvsxd6xvlegksy2gu4sdj469srm();
    public bool get_ApplyExcelDefaultStyleToHyperlink();
    public void set_ApplyExcelDefaultStyleToHyperlink(bool value);
    public bool get_RefreshPivotTables();
    public void set_RefreshPivotTables(bool value);
}
public class Aspose.Cells.OdsSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal OdsGeneratorType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private OpenDocumentFormatVersionType ;
    public OdsGeneratorType GeneratorType { get; public set; }
    [ObsoleteAttribute("Use OdsSaveOptions.OdfStrictVersion property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool IsStrictSchema11 { get; public set; }
    public OpenDocumentFormatVersionType OdfStrictVersion { get; public set; }
    public OdsSaveOptions(SaveFormat saveFormat);
    internal OdsSaveOptions(SaveFormat , SaveOptions );
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    public OdsGeneratorType get_GeneratorType();
    public void set_GeneratorType(OdsGeneratorType value);
    public bool get_IsStrictSchema11();
    public void set_IsStrictSchema11(bool value);
    public OpenDocumentFormatVersionType get_OdfStrictVersion();
    public void set_OdfStrictVersion(OpenDocumentFormatVersionType value);
}
public enum Aspose.Cells.OoxmlCompliance : Enum {
    public int value__;
    public static OoxmlCompliance Ecma376_2006;
    public static OoxmlCompliance Iso29500_2008_Strict;
}
public enum Aspose.Cells.OoxmlCompressionType : Enum {
    public int value__;
    public static OoxmlCompressionType Level1;
    public static OoxmlCompressionType Level2;
    public static OoxmlCompressionType Level3;
    public static OoxmlCompressionType Level4;
    public static OoxmlCompressionType Level5;
    public static OoxmlCompressionType Level6;
    public static OoxmlCompressionType Level7;
    public static OoxmlCompressionType Level8;
    public static OoxmlCompressionType Level9;
}
public class Aspose.Cells.OoxmlSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal OoxmlCompressionType ;
    public bool ExportCellName { get; public set; }
    public LightCellsDataProvider LightCellsDataProvider { get; public set; }
    public bool UpdateZoom { get; public set; }
    public bool EnableZip64 { get; public set; }
    public bool EmbedOoxmlAsOleObject { get; public set; }
    public OoxmlCompressionType CompressionType { get; public set; }
    public OoxmlSaveOptions(SaveFormat saveFormat);
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    public bool get_ExportCellName();
    public void set_ExportCellName(bool value);
    public LightCellsDataProvider get_LightCellsDataProvider();
    public void set_LightCellsDataProvider(LightCellsDataProvider value);
    public bool get_UpdateZoom();
    public void set_UpdateZoom(bool value);
    public bool get_EnableZip64();
    public void set_EnableZip64(bool value);
    public bool get_EmbedOoxmlAsOleObject();
    public void set_EmbedOoxmlAsOleObject(bool value);
    public OoxmlCompressionType get_CompressionType();
    public void set_CompressionType(OoxmlCompressionType value);
}
[("2")]
public enum Aspose.Cells.OperatorType : Enum {
    public int value__;
    public static OperatorType Between;
    public static OperatorType Equal;
    public static OperatorType GreaterThan;
    public static OperatorType GreaterOrEqual;
    public static OperatorType LessThan;
    public static OperatorType LessOrEqual;
    public static OperatorType None;
    public static OperatorType NotBetween;
    public static OperatorType NotEqual;
}
public class Aspose.Cells.Outline : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool SummaryRowBelow { get; public set; }
    public bool SummaryColumnRight { get; public set; }
    public bool get_SummaryRowBelow();
    public void set_SummaryRowBelow(bool value);
    public bool get_SummaryColumnRight();
    public void set_SummaryColumnRight(bool value);
    internal void (Outline );
}
public enum Aspose.Cells.PageLayoutAlignmentType : Enum {
    public int value__;
    public static PageLayoutAlignmentType Bottom;
    public static PageLayoutAlignmentType Center;
    public static PageLayoutAlignmentType Left;
    public static PageLayoutAlignmentType Right;
    public static PageLayoutAlignmentType Top;
}
public enum Aspose.Cells.PageOrientationType : Enum {
    public int value__;
    public static PageOrientationType Landscape;
    public static PageOrientationType Portrait;
}
public class Aspose.Cells.PageSetup : object {
    [DebuggerBrowsableAttribute("0")]
internal OdsPageBackground ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
internal String[] ;
    [DebuggerBrowsableAttribute("0")]
private static Regex ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private PrintOrderType ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
private PageOrientationType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private PrintCommentsType ;
    [DebuggerBrowsableAttribute("0")]
private PrintErrorsType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
internal ShapeCollection ;
    [DebuggerBrowsableAttribute("0")]
private short ;
    public OdsPageBackground ODSPageBackground { get; }
    public string PrintArea { get; public set; }
    public string PrintTitleColumns { get; public set; }
    public string PrintTitleRows { get; public set; }
    public bool BlackAndWhite { get; public set; }
    public bool CenterHorizontally { get; public set; }
    public bool CenterVertically { get; public set; }
    public bool PrintDraft { get; public set; }
    public double FooterMargin { get; public set; }
    public double FooterMarginInch { get; public set; }
    public double HeaderMargin { get; public set; }
    public double HeaderMarginInch { get; public set; }
    public Byte[] PrinterSettings { get; public set; }
    public double LeftMargin { get; public set; }
    public double LeftMarginInch { get; public set; }
    public double RightMargin { get; public set; }
    public double RightMarginInch { get; public set; }
    public double TopMargin { get; public set; }
    public double TopMarginInch { get; public set; }
    public double BottomMargin { get; public set; }
    public double BottomMarginInch { get; public set; }
    public int FirstPageNumber { get; public set; }
    public int FitToPagesTall { get; public set; }
    public int FitToPagesWide { get; public set; }
    public bool IsPercentScale { get; public set; }
    public PrintOrderType Order { get; public set; }
    public bool IsAutomaticPaperSize { get; }
    public PaperSizeType PaperSize { get; public set; }
    public double PaperWidth { get; }
    public double PaperHeight { get; }
    public PageOrientationType Orientation { get; public set; }
    public PrintCommentsType PrintComments { get; public set; }
    public PrintErrorsType PrintErrors { get; public set; }
    public bool PrintHeadings { get; public set; }
    public bool PrintGridlines { get; public set; }
    public int Zoom { get; public set; }
    public bool IsAutoFirstPageNumber { get; public set; }
    public int PrintQuality { get; public set; }
    public int PrintCopies { get; public set; }
    public bool IsHFDiffOddEven { get; public set; }
    public bool IsHFDiffFirst { get; public set; }
    public bool IsHFScaleWithDoc { get; public set; }
    public bool IsHFAlignMargins { get; public set; }
    internal PageSetup(Worksheet , object );
    public OdsPageBackground get_ODSPageBackground();
    private static Regex ();
    public void Copy(PageSetup source, CopyOptions copyOptions);
    private bool ();
    public string get_PrintArea();
    public void set_PrintArea(string value);
    public string get_PrintTitleColumns();
    public void set_PrintTitleColumns(string value);
    public string get_PrintTitleRows();
    public void set_PrintTitleRows(string value);
    internal string ();
    internal void (string );
    internal bool (bool );
    internal Range[] (bool );
    public bool get_BlackAndWhite();
    public void set_BlackAndWhite(bool value);
    public bool get_CenterHorizontally();
    public void set_CenterHorizontally(bool value);
    public bool get_CenterVertically();
    public void set_CenterVertically(bool value);
    public bool get_PrintDraft();
    public void set_PrintDraft(bool value);
    public double get_FooterMargin();
    public void set_FooterMargin(double value);
    public double get_FooterMarginInch();
    public void set_FooterMarginInch(double value);
    public double get_HeaderMargin();
    public void set_HeaderMargin(double value);
    public double get_HeaderMarginInch();
    public void set_HeaderMarginInch(double value);
    public Byte[] get_PrinterSettings();
    public void set_PrinterSettings(Byte[] value);
    public double get_LeftMargin();
    public void set_LeftMargin(double value);
    public double get_LeftMarginInch();
    public void set_LeftMarginInch(double value);
    public double get_RightMargin();
    public void set_RightMargin(double value);
    public double get_RightMarginInch();
    public void set_RightMarginInch(double value);
    public double get_TopMargin();
    public void set_TopMargin(double value);
    public double get_TopMarginInch();
    public void set_TopMarginInch(double value);
    public double get_BottomMargin();
    public void set_BottomMargin(double value);
    public double get_BottomMarginInch();
    public void set_BottomMarginInch(double value);
    public int get_FirstPageNumber();
    public void set_FirstPageNumber(int value);
    public void SetFitToPages(int wide, int tall);
    public int get_FitToPagesTall();
    public void set_FitToPagesTall(int value);
    internal void (int );
    internal void (int );
    public int get_FitToPagesWide();
    public void set_FitToPagesWide(int value);
    public bool get_IsPercentScale();
    public void set_IsPercentScale(bool value);
    public PrintOrderType get_Order();
    public void set_Order(PrintOrderType value);
    internal PaperSizeType ();
    public bool get_IsAutomaticPaperSize();
    public PaperSizeType get_PaperSize();
    public void set_PaperSize(PaperSizeType value);
    public double get_PaperWidth();
    public double get_PaperHeight();
    public void CustomPaperSize(double width, double height);
    internal void ();
    internal bool ();
    internal void (bool );
    public PageOrientationType get_Orientation();
    public void set_Orientation(PageOrientationType value);
    public PrintCommentsType get_PrintComments();
    public void set_PrintComments(PrintCommentsType value);
    public PrintErrorsType get_PrintErrors();
    public void set_PrintErrors(PrintErrorsType value);
    public bool get_PrintHeadings();
    public void set_PrintHeadings(bool value);
    public bool get_PrintGridlines();
    public void set_PrintGridlines(bool value);
    public int get_Zoom();
    public void set_Zoom(int value);
    internal void (int );
    internal int ();
    public bool get_IsAutoFirstPageNumber();
    public void set_IsAutoFirstPageNumber(bool value);
    internal void (Byte[] );
    internal Byte[] ();
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    public int get_PrintQuality();
    public void set_PrintQuality(int value);
    public int get_PrintCopies();
    public void set_PrintCopies(int value);
    public void ClearHeaderFooter();
    public string GetHeader(int section);
    public HeaderFooterCommand[] GetCommands(string headerFooterScript);
    internal string (int );
    public string GetFooter(int section);
    internal string (int );
    public void SetHeader(int section, string headerScript);
    public void SetFooter(int section, string footerScript);
    internal static void (String[] , int , string );
    internal byte ();
    internal void (byte );
    public void SetEvenHeader(int section, string headerScript);
    internal string (int );
    public string GetEvenHeader(int section);
    internal string (int );
    public void SetEvenFooter(int section, string footerScript);
    public string GetEvenFooter(int section);
    private static string (String[] );
    internal string (bool ,  );
    public void SetFirstPageHeader(int section, string headerScript);
    public string GetFirstPageHeader(int section);
    public void SetFirstPageFooter(int section, string footerScript);
    internal string (int );
    internal string (int );
    public string GetFirstPageFooter(int section);
    public bool get_IsHFDiffOddEven();
    public void set_IsHFDiffOddEven(bool value);
    public bool get_IsHFDiffFirst();
    public void set_IsHFDiffFirst(bool value);
    public bool get_IsHFScaleWithDoc();
    public void set_IsHFScaleWithDoc(bool value);
    public bool get_IsHFAlignMargins();
    public void set_IsHFAlignMargins(bool value);
    internal static void (string , String[] );
    internal static char (int );
    internal ShapeCollection ();
    internal void (ShapeCollection );
    internal ShapeCollection ();
    public Picture SetHeaderPicture(int section, Byte[] headerPicture);
    public Picture SetFooterPicture(int section, Byte[] footerPicture);
    public Picture SetPicture(bool isFirst, bool isEven, bool isHeader, int section, Byte[] imageData);
    public Picture GetPicture(bool isHeader, int section);
    public Picture GetPicture(bool isFirst, bool isEven, bool isHeader, int section);
    internal Picture (string , Byte[] );
    private string (bool , bool , bool , int );
    private int (string );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
public abstract class Aspose.Cells.PaginatedSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal ImageOrPrintOptions ;
    public string DefaultFont { get; public set; }
    public bool CheckWorkbookDefaultFont { get; public set; }
    public bool CheckFontCompatibility { get; public set; }
    public bool IsFontSubstitutionCharGranularity { get; public set; }
    public bool OnePagePerSheet { get; public set; }
    public bool AllColumnsInOnePagePerSheet { get; public set; }
    public bool IgnoreError { get; public set; }
    public bool OutputBlankPageWhenNothingToPrint { get; public set; }
    public int PageIndex { get; public set; }
    public int PageCount { get; public set; }
    public PrintingPageType PrintingPageType { get; public set; }
    public GridlineType GridlineType { get; public set; }
    public TextCrossType TextCrossType { get; public set; }
    public DefaultEditLanguage DefaultEditLanguage { get; public set; }
    public SheetSet SheetSet { get; public set; }
    public DrawObjectEventHandler DrawObjectEventHandler { get; public set; }
    public IPageSavingCallback PageSavingCallback { get; public set; }
    public EmfRenderSetting EmfRenderSetting { get; public set; }
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    public string get_DefaultFont();
    public void set_DefaultFont(string value);
    public bool get_CheckWorkbookDefaultFont();
    public void set_CheckWorkbookDefaultFont(bool value);
    public void set_CheckFontCompatibility(bool value);
    public bool get_CheckFontCompatibility();
    public void set_IsFontSubstitutionCharGranularity(bool value);
    public bool get_IsFontSubstitutionCharGranularity();
    public bool get_OnePagePerSheet();
    public void set_OnePagePerSheet(bool value);
    public bool get_AllColumnsInOnePagePerSheet();
    public void set_AllColumnsInOnePagePerSheet(bool value);
    public bool get_IgnoreError();
    public void set_IgnoreError(bool value);
    public bool get_OutputBlankPageWhenNothingToPrint();
    public void set_OutputBlankPageWhenNothingToPrint(bool value);
    public void set_PageIndex(int value);
    public int get_PageIndex();
    public void set_PageCount(int value);
    public int get_PageCount();
    public PrintingPageType get_PrintingPageType();
    public void set_PrintingPageType(PrintingPageType value);
    public GridlineType get_GridlineType();
    public void set_GridlineType(GridlineType value);
    public TextCrossType get_TextCrossType();
    public void set_TextCrossType(TextCrossType value);
    public DefaultEditLanguage get_DefaultEditLanguage();
    public void set_DefaultEditLanguage(DefaultEditLanguage value);
    public SheetSet get_SheetSet();
    public void set_SheetSet(SheetSet value);
    public DrawObjectEventHandler get_DrawObjectEventHandler();
    public void set_DrawObjectEventHandler(DrawObjectEventHandler value);
    public IPageSavingCallback get_PageSavingCallback();
    public void set_PageSavingCallback(IPageSavingCallback value);
    public EmfRenderSetting get_EmfRenderSetting();
    public void set_EmfRenderSetting(EmfRenderSetting value);
}
internal class Aspose.Cells.Palette : object {
    internal static Int32[] ;
    internal Int32[] colorList;
    private Color[] m_Colors;
    private static Palette();
    internal static int (int );
    internal int (Color );
    internal void (int , Color );
    internal Color (int );
    internal bool (Color );
    internal int (Color );
    internal Color[] ();
    internal void (Palette );
}
public class Aspose.Cells.PaneCollection : object {
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private short ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public int FirstVisibleRowOfBottomPane { get; public set; }
    public int FirstVisibleColumnOfRightPane { get; public set; }
    public RectangleAlignmentType AcitvePaneType { get; public set; }
    internal PaneCollection( );
    public int get_FirstVisibleRowOfBottomPane();
    public void set_FirstVisibleRowOfBottomPane(int value);
    public int get_FirstVisibleColumnOfRightPane();
    public void set_FirstVisibleColumnOfRightPane(int value);
    public RectangleAlignmentType get_AcitvePaneType();
    public void set_AcitvePaneType(RectangleAlignmentType value);
    internal byte ();
    internal void (byte );
    internal void (int , int );
    internal void (int , int );
    internal void (PaneCollection );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal void (string );
    private void ( );
    private void ( );
    private void ( );
    internal void ();
    internal void (int , int , int , int );
    internal void (int , int , int , int );
    internal void (int , int , int , int );
}
public enum Aspose.Cells.PaneStateType : Enum {
    public int value__;
    public static PaneStateType Frozen;
    public static PaneStateType FrozenSplit;
    public static PaneStateType Split;
    public static PaneStateType Normal;
}
public enum Aspose.Cells.PaperSizeType : Enum {
    public int value__;
    public static PaperSizeType PaperLetter;
    public static PaperSizeType PaperLetterSmall;
    public static PaperSizeType PaperTabloid;
    public static PaperSizeType PaperLedger;
    public static PaperSizeType PaperLegal;
    public static PaperSizeType PaperStatement;
    public static PaperSizeType PaperExecutive;
    public static PaperSizeType PaperA3;
    public static PaperSizeType PaperA4;
    public static PaperSizeType PaperA4Small;
    public static PaperSizeType PaperA5;
    public static PaperSizeType PaperB4;
    public static PaperSizeType PaperB5;
    public static PaperSizeType PaperFolio;
    public static PaperSizeType PaperQuarto;
    public static PaperSizeType Paper10x14;
    public static PaperSizeType Paper11x17;
    public static PaperSizeType PaperNote;
    public static PaperSizeType PaperEnvelope9;
    public static PaperSizeType PaperEnvelope10;
    public static PaperSizeType PaperEnvelope11;
    public static PaperSizeType PaperEnvelope12;
    public static PaperSizeType PaperEnvelope14;
    public static PaperSizeType PaperCSheet;
    public static PaperSizeType PaperDSheet;
    public static PaperSizeType PaperESheet;
    public static PaperSizeType PaperEnvelopeDL;
    public static PaperSizeType PaperEnvelopeC5;
    public static PaperSizeType PaperEnvelopeC3;
    public static PaperSizeType PaperEnvelopeC4;
    public static PaperSizeType PaperEnvelopeC6;
    public static PaperSizeType PaperEnvelopeC65;
    public static PaperSizeType PaperEnvelopeB4;
    public static PaperSizeType PaperEnvelopeB5;
    public static PaperSizeType PaperEnvelopeB6;
    public static PaperSizeType PaperEnvelopeItaly;
    public static PaperSizeType PaperEnvelopeMonarch;
    public static PaperSizeType PaperEnvelopePersonal;
    public static PaperSizeType PaperFanfoldUS;
    public static PaperSizeType PaperFanfoldStdGerman;
    public static PaperSizeType PaperFanfoldLegalGerman;
    public static PaperSizeType PaperISOB4;
    public static PaperSizeType PaperJapanesePostcard;
    public static PaperSizeType Paper9x11;
    public static PaperSizeType Paper10x11;
    public static PaperSizeType Paper15x11;
    public static PaperSizeType PaperEnvelopeInvite;
    public static PaperSizeType PaperLetterExtra;
    public static PaperSizeType PaperLegalExtra;
    public static PaperSizeType PaperTabloidExtra;
    public static PaperSizeType PaperA4Extra;
    public static PaperSizeType PaperLetterTransverse;
    public static PaperSizeType PaperA4Transverse;
    public static PaperSizeType PaperLetterExtraTransverse;
    public static PaperSizeType PaperSuperA;
    public static PaperSizeType PaperSuperB;
    public static PaperSizeType PaperLetterPlus;
    public static PaperSizeType PaperA4Plus;
    public static PaperSizeType PaperA5Transverse;
    public static PaperSizeType PaperJISB5Transverse;
    public static PaperSizeType PaperA3Extra;
    public static PaperSizeType PaperA5Extra;
    public static PaperSizeType PaperISOB5Extra;
    public static PaperSizeType PaperA2;
    public static PaperSizeType PaperA3Transverse;
    public static PaperSizeType PaperA3ExtraTransverse;
    public static PaperSizeType PaperJapaneseDoublePostcard;
    public static PaperSizeType PaperA6;
    public static PaperSizeType PaperJapaneseEnvelopeKaku2;
    public static PaperSizeType PaperJapaneseEnvelopeKaku3;
    public static PaperSizeType PaperJapaneseEnvelopeChou3;
    public static PaperSizeType PaperJapaneseEnvelopeChou4;
    public static PaperSizeType PaperLetterRotated;
    public static PaperSizeType PaperA3Rotated;
    public static PaperSizeType PaperA4Rotated;
    public static PaperSizeType PaperA5Rotated;
    public static PaperSizeType PaperJISB4Rotated;
    public static PaperSizeType PaperJISB5Rotated;
    public static PaperSizeType PaperJapanesePostcardRotated;
    public static PaperSizeType PaperJapaneseDoublePostcardRotated;
    public static PaperSizeType PaperA6Rotated;
    public static PaperSizeType PaperJapaneseEnvelopeKaku2Rotated;
    public static PaperSizeType PaperJapaneseEnvelopeKaku3Rotated;
    public static PaperSizeType PaperJapaneseEnvelopeChou3Rotated;
    public static PaperSizeType PaperJapaneseEnvelopeChou4Rotated;
    public static PaperSizeType PaperJISB6;
    public static PaperSizeType PaperJISB6Rotated;
    public static PaperSizeType Paper12x11;
    public static PaperSizeType PaperJapaneseEnvelopeYou4;
    public static PaperSizeType PaperJapaneseEnvelopeYou4Rotated;
    public static PaperSizeType PaperPRC16K;
    public static PaperSizeType PaperPRC32K;
    public static PaperSizeType PaperPRCBig32K;
    public static PaperSizeType PaperPRCEnvelope1;
    public static PaperSizeType PaperPRCEnvelope2;
    public static PaperSizeType PaperPRCEnvelope3;
    public static PaperSizeType PaperPRCEnvelope4;
    public static PaperSizeType PaperPRCEnvelope5;
    public static PaperSizeType PaperPRCEnvelope6;
    public static PaperSizeType PaperPRCEnvelope7;
    public static PaperSizeType PaperPRCEnvelope8;
    public static PaperSizeType PaperPRCEnvelope9;
    public static PaperSizeType PaperPRCEnvelope10;
    public static PaperSizeType PaperPRC16KRotated;
    public static PaperSizeType PaperPRC32KRotated;
    public static PaperSizeType PaperPRCBig32KRotated;
    public static PaperSizeType PaperPRCEnvelope1Rotated;
    public static PaperSizeType PaperPRCEnvelope2Rotated;
    public static PaperSizeType PaperPRCEnvelope3Rotated;
    public static PaperSizeType PaperPRCEnvelope4Rotated;
    public static PaperSizeType PaperPRCEnvelope5Rotated;
    public static PaperSizeType PaperPRCEnvelope6Rotated;
    public static PaperSizeType PaperPRCEnvelope7Rotated;
    public static PaperSizeType PaperPRCEnvelope8Rotated;
    public static PaperSizeType PaperPRCEnvelope9Rotated;
    public static PaperSizeType PaperPRCEnvelope10Rotated;
    public static PaperSizeType PaperB3;
    public static PaperSizeType PaperBusinessCard;
    public static PaperSizeType PaperThermal;
    public static PaperSizeType Custom;
}
public enum Aspose.Cells.ParameterType : Enum {
    public int value__;
    public static ParameterType Reference;
    public static ParameterType Value;
    public static ParameterType Array;
}
public enum Aspose.Cells.PasteOperationType : Enum {
    public int value__;
    public static PasteOperationType None;
    public static PasteOperationType Add;
    public static PasteOperationType Subtract;
    public static PasteOperationType Multiply;
    public static PasteOperationType Divide;
}
public class Aspose.Cells.PasteOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private PasteType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal PasteOperationType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public PasteType PasteType { get; public set; }
    public bool SkipBlanks { get; public set; }
    public bool OnlyVisibleCells { get; public set; }
    public bool Transpose { get; public set; }
    public PasteOperationType OperationType { get; public set; }
    public bool IgnoreLinksToOriginalFile { get; public set; }
    public PasteType get_PasteType();
    public void set_PasteType(PasteType value);
    internal bool ();
    public bool get_SkipBlanks();
    public void set_SkipBlanks(bool value);
    public bool get_OnlyVisibleCells();
    public void set_OnlyVisibleCells(bool value);
    public bool get_Transpose();
    public void set_Transpose(bool value);
    public PasteOperationType get_OperationType();
    public void set_OperationType(PasteOperationType value);
    public bool get_IgnoreLinksToOriginalFile();
    public void set_IgnoreLinksToOriginalFile(bool value);
}
public enum Aspose.Cells.PasteType : Enum {
    public int value__;
    public static PasteType All;
    public static PasteType Default;
    public static PasteType AllExceptBorders;
    public static PasteType DefaultExceptBorders;
    public static PasteType ColumnWidths;
    public static PasteType RowHeights;
    public static PasteType Comments;
    public static PasteType Formats;
    public static PasteType Formulas;
    public static PasteType FormulasAndNumberFormats;
    public static PasteType Validation;
    public static PasteType Values;
    public static PasteType ValuesAndFormats;
    public static PasteType ValuesAndNumberFormats;
}
public class Aspose.Cells.PdfSaveOptions : PaginatedSaveOptions {
    [DebuggerBrowsableAttribute("0")]
private ImageFormat ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public bool EmbedStandardWindowsFonts { get; public set; }
    public PdfBookmarkEntry Bookmark { get; public set; }
    public PdfCompliance Compliance { get; public set; }
    public PdfSecurityOptions SecurityOptions { get; public set; }
    [ObsoleteAttribute("Chart and Shape are always rendered as vector elements(e.g. point, line) for rendering quality.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public ImageType ImageType { get; public set; }
    public bool CalculateFormula { get; public set; }
    public PdfCompressionCore PdfCompression { get; public set; }
    public DateTime CreatedTime { get; public set; }
    public string Producer { get; public set; }
    public PdfOptimizationType OptimizationType { get; public set; }
    public PdfCustomPropertiesExport CustomPropertiesExport { get; public set; }
    public bool ExportDocumentStructure { get; public set; }
    public bool DisplayDocTitle { get; public set; }
    public PdfFontEncoding FontEncoding { get; public set; }
    public RenderingWatermark Watermark { get; public set; }
    public bool EmbedAttachments { get; public set; }
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    public bool get_EmbedStandardWindowsFonts();
    public void set_EmbedStandardWindowsFonts(bool value);
    public PdfBookmarkEntry get_Bookmark();
    public void set_Bookmark(PdfBookmarkEntry value);
    public PdfCompliance get_Compliance();
    public void set_Compliance(PdfCompliance value);
    public PdfSecurityOptions get_SecurityOptions();
    public void set_SecurityOptions(PdfSecurityOptions value);
    public ImageType get_ImageType();
    public void set_ImageType(ImageType value);
    public bool get_CalculateFormula();
    public void set_CalculateFormula(bool value);
    public PdfCompressionCore get_PdfCompression();
    public void set_PdfCompression(PdfCompressionCore value);
    public void SetImageResample(int desiredPPI, int jpegQuality);
    public DateTime get_CreatedTime();
    public void set_CreatedTime(DateTime value);
    public string get_Producer();
    public void set_Producer(string value);
    public PdfOptimizationType get_OptimizationType();
    public void set_OptimizationType(PdfOptimizationType value);
    public PdfCustomPropertiesExport get_CustomPropertiesExport();
    public void set_CustomPropertiesExport(PdfCustomPropertiesExport value);
    public bool get_ExportDocumentStructure();
    public void set_ExportDocumentStructure(bool value);
    public bool get_DisplayDocTitle();
    public void set_DisplayDocTitle(bool value);
    public PdfFontEncoding get_FontEncoding();
    public void set_FontEncoding(PdfFontEncoding value);
    public RenderingWatermark get_Watermark();
    public void set_Watermark(RenderingWatermark value);
    public bool get_EmbedAttachments();
    public void set_EmbedAttachments(bool value);
}
public class Aspose.Cells.Pivot.CustomPiovtFieldGroupItem : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Int32[] ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public CustomPiovtFieldGroupItem(string name, Int32[] itemIndexes);
}
public class Aspose.Cells.Pivot.PivotArea : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotTable ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal PivotAreaFilterCollection ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public PivotAreaFilterCollection Filters { get; }
    public bool OnlyData { get; public set; }
    public bool OnlyLabel { get; public set; }
    public bool IsRowGrandIncluded { get; public set; }
    public bool IsColumnGrandIncluded { get; public set; }
    public PivotFieldType AxisType { get; public set; }
    public PivotAreaType RuleType { get; public set; }
    public bool IsOutline { get; public set; }
    public PivotArea(PivotTable table);
    public PivotAreaFilterCollection get_Filters();
    public void Select(PivotFieldType axisType, int fieldPosition, PivotTableSelectionType selectionType);
    internal void (PivotFieldType , int , PivotTableSelectionType , bool , bool );
    internal void (PivotArea , CopyOptions );
    public bool get_OnlyData();
    public void set_OnlyData(bool value);
    public bool get_OnlyLabel();
    public void set_OnlyLabel(bool value);
    public bool get_IsRowGrandIncluded();
    public void set_IsRowGrandIncluded(bool value);
    public bool get_IsColumnGrandIncluded();
    public void set_IsColumnGrandIncluded(bool value);
    internal bool ();
    internal void (bool );
    public PivotFieldType get_AxisType();
    public void set_AxisType(PivotFieldType value);
    public PivotAreaType get_RuleType();
    public void set_RuleType(PivotAreaType value);
    public bool get_IsOutline();
    public void set_IsOutline(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    private static bool (List`1<PivotAreaFilter> , int ,  );
    private void (Boolean[] , List`1<> , int , List`1[] , bool );
    internal void (PivotFieldType , int , List`1[] , List`1[] , Boolean[] );
    internal List`1<CellArea> ();
    private static bool (Boolean[] );
    private static int (Boolean[] , int );
    internal List`1<CellArea> ();
    internal List`1<CellArea> ();
    internal List`1<CellArea> ();
    internal List`1<CellArea> ();
    internal List`1<CellArea> ();
}
public class Aspose.Cells.Pivot.PivotAreaFilter : object {
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    public bool Selected { get; public set; }
    internal int ();
    internal void (int );
    public bool IsSubtotalSet(PivotFieldSubtotalType subtotalType);
    public void SetSubtotals(PivotFieldSubtotalType subtotalType, bool shown);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal void (PivotAreaFilter );
    internal ushort ();
    internal void (ushort );
    internal byte ();
    internal void (byte );
    internal ushort ();
    internal void (ushort );
    internal PivotFieldType ();
    internal void (PivotFieldType );
    internal bool ();
    public bool get_Selected();
    public void set_Selected(bool value);
    internal bool ( );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Pivot.PivotAreaFilterCollection : CollectionBase`1<PivotAreaFilter> {
    public PivotAreaFilter Item { get; }
    public PivotAreaFilter get_Item(int index);
    internal void (PivotAreaFilter );
}
public enum Aspose.Cells.Pivot.PivotAreaType : Enum {
    public int value__;
    public static PivotAreaType None;
    public static PivotAreaType Normal;
    public static PivotAreaType Data;
    public static PivotAreaType All;
    public static PivotAreaType Origin;
    public static PivotAreaType Button;
    public static PivotAreaType TopRight;
}
public enum Aspose.Cells.Pivot.PivotConditionFormatRuleType : Enum {
    public int value__;
    public static PivotConditionFormatRuleType None;
    public static PivotConditionFormatRuleType All;
    public static PivotConditionFormatRuleType Row;
    public static PivotConditionFormatRuleType Column;
}
public enum Aspose.Cells.Pivot.PivotConditionFormatScopeType : Enum {
    public int value__;
    public static PivotConditionFormatScopeType Data;
    public static PivotConditionFormatScopeType Field;
    public static PivotConditionFormatScopeType Selection;
}
public class Aspose.Cells.Pivot.PivotDateTimeRangeGroupSettings : PivotFieldGroupSettings {
    [DebuggerBrowsableAttribute("0")]
private PivotGroupByType[] ;
    [DebuggerBrowsableAttribute("0")]
private DateTime ;
    [DebuggerBrowsableAttribute("0")]
private DateTime ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    public PivotFieldGroupType Type { get; }
    public DateTime Start { get; }
    public DateTime End { get; }
    public double Interval { get; }
    public PivotGroupByType[] GroupByTypes { get; }
    internal PivotDateTimeRangeGroupSettings([] );
    public virtual PivotFieldGroupType get_Type();
    public DateTime get_Start();
    public DateTime get_End();
    public double get_Interval();
    public PivotGroupByType[] get_GroupByTypes();
    public bool IsGroupedBy(PivotGroupByType type);
}
public class Aspose.Cells.Pivot.PivotDiscreteGroupSettings : PivotFieldGroupSettings {
    [DebuggerBrowsableAttribute("0")]
private CustomPiovtFieldGroupItem[] ;
    public PivotFieldGroupType Type { get; }
    public CustomPiovtFieldGroupItem[] Items { get; }
    internal PivotDiscreteGroupSettings([] );
    public virtual PivotFieldGroupType get_Type();
    public CustomPiovtFieldGroupItem[] get_Items();
}
public class Aspose.Cells.Pivot.PivotField : object {
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotFieldCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal PivotItemCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotField ;
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotTable ;
    [DebuggerBrowsableAttribute("0")]
internal PivotFieldType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private PivotShowValuesSetting ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public PivotItemCollection PivotItems { get; }
    [ObsoleteAttribute("Use PivotField.GroupSettings property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public SxRng Range { get; }
    public PivotFieldGroupSettings GroupSettings { get; }
    public bool IsCalculatedField { get; }
    public int BaseIndex { get; public set; }
    public int Position { get; }
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public bool IsAutoSubtotals { get; public set; }
    public bool DragToColumn { get; public set; }
    public bool DragToHide { get; public set; }
    public bool DragToRow { get; public set; }
    public bool DragToPage { get; public set; }
    public bool DragToData { get; public set; }
    public bool IsMultipleItemSelectionAllowed { get; public set; }
    public bool IsRepeatItemLabels { get; public set; }
    public bool IsIncludeNewItemsInFilter { get; public set; }
    public bool IsInsertPageBreaksBetweenItems { get; public set; }
    public bool ShowAllItems { get; public set; }
    public bool NonAutoSortDefault { get; public set; }
    public bool IsAutoSort { get; public set; }
    public bool IsAscendSort { get; public set; }
    public PivotFieldSortSetting SortSetting { get; }
    public int AutoSortField { get; public set; }
    public bool IsAutoShow { get; public set; }
    public bool IsAscendShow { get; public set; }
    public int AutoShowCount { get; public set; }
    public int AutoShowField { get; public set; }
    public ConsolidationFunction Function { get; public set; }
    public PivotShowValuesSetting ShowValuesSetting { get; }
    [ObsoleteAttribute("Use PivotField.ShowValuesSetting.CalculationType property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public PivotFieldDataDisplayFormat DataDisplayFormat { get; public set; }
    [ObsoleteAttribute("Use PivotField.ShowValuesSetting.BaseFieldIndex property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int BaseFieldIndex { get; public set; }
    [ObsoleteAttribute("Use PivotField.ShowValuesSetting.BaseItemPositionType property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public PivotItemPosition BaseItemPosition { get; public set; }
    [ObsoleteAttribute("Use PivotField.ShowValuesSetting.BaseItemIndex property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int BaseItemIndex { get; public set; }
    public short CurrentPageItem { get; public set; }
    public int Number { get; public set; }
    public bool InsertBlankRow { get; public set; }
    public bool ShowSubtotalAtTop { get; public set; }
    public bool ShowInOutlineForm { get; public set; }
    public string NumberFormat { get; public set; }
    public String[] Items { get; }
    public String[] OriginalItems { get; }
    public int ItemCount { get; }
    public bool ShowCompact { get; public set; }
    internal PivotField(PivotTable , PivotFieldCollection );
    internal PivotField(PivotFieldCollection );
    internal PivotField(PivotFieldCollection , PivotField );
    private string ();
    public PivotItemCollection get_PivotItems();
    public SxRng get_Range();
    public PivotFieldGroupSettings get_GroupSettings();
    public PivotFilter GetPivotFilterByType(PivotFilterType type);
    [ObsoleteAttribute("Use PivotField.GetFilters() instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public ArrayList GetPivotFilters();
    public PivotFilter[] GetFilters();
    internal bool ();
    internal bool ();
    internal void (PivotField , CopyOptions );
    public void InitPivotItems();
    internal void ();
    internal void ();
    internal bool ();
    internal bool ();
    internal void (bool );
    internal bool ();
    private  ();
    public void GroupBy(double interval, bool newField);
    public void GroupBy(DateTime start, DateTime end, PivotGroupByType[] groups, double interval, bool firstAsNewField);
    public void GroupBy(double start, double end, double interval, bool newField);
    public void GroupBy(CustomPiovtFieldGroupItem[] customGroupItems, bool newField);
    public void Ungroup();
    public bool get_IsCalculatedField();
    [ObsoleteAttribute("Use PivotField.GetFormula() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public string GetCalculatedFieldFormula();
    public string GetFormula();
    internal bool ();
    public int get_BaseIndex();
    public void set_BaseIndex(int value);
    internal void (int );
    public int get_Position();
    public string get_Name();
    public void set_Name(string value);
    internal bool ();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public void SetSubtotals(PivotFieldSubtotalType subtotalType, bool shown);
    public bool GetSubtotals(PivotFieldSubtotalType subtotalType);
    internal bool (int );
    internal bool ();
    public bool get_IsAutoSubtotals();
    public void set_IsAutoSubtotals(bool value);
    public bool get_DragToColumn();
    public void set_DragToColumn(bool value);
    public bool get_DragToHide();
    public void set_DragToHide(bool value);
    public bool get_DragToRow();
    public void set_DragToRow(bool value);
    public bool get_DragToPage();
    public void set_DragToPage(bool value);
    public bool get_DragToData();
    public void set_DragToData(bool value);
    public bool get_IsMultipleItemSelectionAllowed();
    public void set_IsMultipleItemSelectionAllowed(bool value);
    public bool get_IsRepeatItemLabels();
    public void set_IsRepeatItemLabels(bool value);
    public bool get_IsIncludeNewItemsInFilter();
    public void set_IsIncludeNewItemsInFilter(bool value);
    public bool get_IsInsertPageBreaksBetweenItems();
    public void set_IsInsertPageBreaksBetweenItems(bool value);
    public bool get_ShowAllItems();
    public void set_ShowAllItems(bool value);
    public void SortBy(SortOrder sortType, int fieldSortedBy);
    public void SortBy(SortOrder sortType, int fieldSortedBy, PivotLineType dataType, string cellName);
    public bool get_NonAutoSortDefault();
    public void set_NonAutoSortDefault(bool value);
    public bool get_IsAutoSort();
    public void set_IsAutoSort(bool value);
    internal bool ();
    public bool get_IsAscendSort();
    public void set_IsAscendSort(bool value);
    internal int ();
    public PivotFieldSortSetting get_SortSetting();
    public int get_AutoSortField();
    public void set_AutoSortField(int value);
    public bool get_IsAutoShow();
    public void set_IsAutoShow(bool value);
    public bool get_IsAscendShow();
    public void set_IsAscendShow(bool value);
    public int get_AutoShowCount();
    public void set_AutoShowCount(int value);
    public int get_AutoShowField();
    public void set_AutoShowField(int value);
    public ConsolidationFunction get_Function();
    public void set_Function(ConsolidationFunction value);
    public void ShowValuesAs(PivotFieldDataDisplayFormat displayFormat, int baseField, PivotItemPositionType baseItemPositionType, int baseItem);
    public PivotShowValuesSetting get_ShowValuesSetting();
    public PivotFieldDataDisplayFormat get_DataDisplayFormat();
    public void set_DataDisplayFormat(PivotFieldDataDisplayFormat value);
    public int get_BaseFieldIndex();
    public void set_BaseFieldIndex(int value);
    public PivotItemPosition get_BaseItemPosition();
    public void set_BaseItemPosition(PivotItemPosition value);
    public int get_BaseItemIndex();
    public void set_BaseItemIndex(int value);
    public short get_CurrentPageItem();
    public void set_CurrentPageItem(short value);
    public int get_Number();
    public void set_Number(int value);
    public bool get_InsertBlankRow();
    public void set_InsertBlankRow(bool value);
    public bool get_ShowSubtotalAtTop();
    public void set_ShowSubtotalAtTop(bool value);
    public bool get_ShowInOutlineForm();
    public void set_ShowInOutlineForm(bool value);
    internal void (int );
    public string get_NumberFormat();
    public void set_NumberFormat(string value);
    public bool IsHiddenItem(int index);
    public void HideItem(int index, bool isHidden);
    public bool IsHiddenItemDetail(int index);
    public void HideItemDetail(int index, bool isHiddenDetail);
    public void HideDetail(bool isHiddenDetail);
    public void HideItem(string itemValue, bool isHidden);
    public String[] get_Items();
    public String[] get_OriginalItems();
    public int get_ItemCount();
    public void AddCalculatedItem(string name, string formula);
    internal bool ();
    internal int ();
    public bool get_ShowCompact();
    public void set_ShowCompact(bool value);
    internal void ();
    internal int ();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Pivot.PivotFieldCollection : object {
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotTable ;
    [DebuggerBrowsableAttribute("0")]
internal PivotFieldType ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public PivotFieldType Type { get; }
    public int Count { get; }
    public PivotField Item { get; }
    public PivotField Item { get; }
    internal PivotFieldCollection(PivotTable , PivotFieldType );
    internal PivotFieldCollection(PivotTable ,  );
    internal void ( );
    public PivotFieldType get_Type();
    public int get_Count();
    [("PivotField")]
public sealed virtual IEnumerator GetEnumerator();
    public PivotField get_Item(int index);
    public PivotField get_Item(string name);
    internal PivotField (string );
    internal int (string );
    internal void (int );
    internal bool ();
    internal int ();
    public int AddByBaseIndex(int baseFieldIndex);
    internal static void (PivotField , int );
    public int Add(PivotField pivotField);
    internal int (PivotField , int );
    internal void ();
    private void (int );
    internal void (PivotField );
    internal void (PivotField );
    internal void (PivotField );
    public void Clear();
    internal void (PivotField );
    private void (bool , int );
    public void Move(int currPos, int destPos);
    internal int (PivotField );
}
public enum Aspose.Cells.Pivot.PivotFieldDataDisplayFormat : Enum {
    public int value__;
    public static PivotFieldDataDisplayFormat Normal;
    public static PivotFieldDataDisplayFormat DifferenceFrom;
    public static PivotFieldDataDisplayFormat PercentageOf;
    public static PivotFieldDataDisplayFormat PercentageDifferenceFrom;
    public static PivotFieldDataDisplayFormat RunningTotalIn;
    public static PivotFieldDataDisplayFormat PercentageOfRow;
    public static PivotFieldDataDisplayFormat PercentageOfColumn;
    public static PivotFieldDataDisplayFormat PercentageOfTotal;
    public static PivotFieldDataDisplayFormat Index;
    public static PivotFieldDataDisplayFormat PercentageOfParentRowTotal;
    public static PivotFieldDataDisplayFormat PercentageOfParentColumnTotal;
    public static PivotFieldDataDisplayFormat PercentageOfParentTotal;
    public static PivotFieldDataDisplayFormat PercentageOfRunningTotalIn;
    public static PivotFieldDataDisplayFormat RankSmallestToLargest;
    public static PivotFieldDataDisplayFormat RankLargestToSmallest;
}
public class Aspose.Cells.Pivot.PivotFieldGroupSettings : object {
    public PivotFieldGroupType Type { get; }
    public virtual PivotFieldGroupType get_Type();
    internal static PivotFieldGroupSettings ([] );
}
public enum Aspose.Cells.Pivot.PivotFieldGroupType : Enum {
    public int value__;
    public static PivotFieldGroupType None;
    public static PivotFieldGroupType DateTimeRange;
    public static PivotFieldGroupType NumbericRange;
    public static PivotFieldGroupType Discrete;
}
public class Aspose.Cells.Pivot.PivotFieldSortSetting : object {
    [DebuggerBrowsableAttribute("0")]
private PivotField ;
    public SortOrder SortType { get; }
    public bool IsSortByLabels { get; }
    public int FieldIndex { get; }
    public PivotLineType LineTypeSortedBy { get; }
    public bool IsSimpleSort { get; }
    public string Cell { get; }
    internal PivotFieldSortSetting(PivotField );
    public SortOrder get_SortType();
    public bool get_IsSortByLabels();
    public int get_FieldIndex();
    public PivotLineType get_LineTypeSortedBy();
    public bool get_IsSimpleSort();
    public string get_Cell();
}
public enum Aspose.Cells.Pivot.PivotFieldSubtotalType : Enum {
    public int value__;
    public static PivotFieldSubtotalType None;
    public static PivotFieldSubtotalType Automatic;
    public static PivotFieldSubtotalType Sum;
    public static PivotFieldSubtotalType Count;
    public static PivotFieldSubtotalType Average;
    public static PivotFieldSubtotalType Max;
    public static PivotFieldSubtotalType Min;
    public static PivotFieldSubtotalType Product;
    public static PivotFieldSubtotalType CountNums;
    public static PivotFieldSubtotalType Stdev;
    public static PivotFieldSubtotalType Stdevp;
    public static PivotFieldSubtotalType Var;
    public static PivotFieldSubtotalType Varp;
}
public enum Aspose.Cells.Pivot.PivotFieldType : Enum {
    public int value__;
    public static PivotFieldType Undefined;
    public static PivotFieldType Row;
    public static PivotFieldType Column;
    public static PivotFieldType Page;
    public static PivotFieldType Data;
}
public class Aspose.Cells.Pivot.PivotFilter : object {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal PivotFilterType ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal AutoFilter ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public AutoFilter AutoFilter { get; }
    public PivotFilterType FilterType { get; }
    public int FieldIndex { get; }
    public string Value1 { get; public set; }
    public string Value2 { get; public set; }
    public int MeasureFldIndex { get; public set; }
    public int MemberPropertyFieldIndex { get; public set; }
    public string Name { get; public set; }
    public int EvaluationOrder { get; public set; }
    internal PivotFilter(Worksheet );
    internal void (PivotFilter , CopyOptions );
    public AutoFilter get_AutoFilter();
    public PivotFilterType get_FilterType();
    public int get_FieldIndex();
    public string get_Value1();
    public void set_Value1(string value);
    public string get_Value2();
    public void set_Value2(string value);
    public int get_MeasureFldIndex();
    public void set_MeasureFldIndex(int value);
    public int get_MemberPropertyFieldIndex();
    public void set_MemberPropertyFieldIndex(int value);
    public string get_Name();
    public void set_Name(string value);
    public int get_EvaluationOrder();
    public void set_EvaluationOrder(int value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Pivot.PivotFilterCollection : CollectionBase`1<PivotFilter> {
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotTable ;
    public PivotFilter Item { get; }
    internal PivotFilterCollection(PivotTable );
    public PivotFilter get_Item(int index);
    internal void (PivotFilter );
    public int Add(int fieldIndex, PivotFilterType type);
    public void ClearFilter(int fieldIndex);
    internal void (PivotFilterCollection , CopyOptions );
}
public enum Aspose.Cells.Pivot.PivotFilterType : Enum {
    public int value__;
    public static PivotFilterType CaptionBeginsWith;
    public static PivotFilterType CaptionBetween;
    public static PivotFilterType CaptionContains;
    public static PivotFilterType CaptionEndsWith;
    public static PivotFilterType CaptionEqual;
    public static PivotFilterType CaptionGreaterThan;
    public static PivotFilterType CaptionGreaterThanOrEqual;
    public static PivotFilterType CaptionLessThan;
    public static PivotFilterType CaptionLessThanOrEqual;
    public static PivotFilterType CaptionNotBeginsWith;
    public static PivotFilterType CaptionNotBetween;
    public static PivotFilterType CaptionNotContains;
    public static PivotFilterType CaptionNotEndsWith;
    public static PivotFilterType CaptionNotEqual;
    public static PivotFilterType Count;
    public static PivotFilterType DateBetween;
    public static PivotFilterType DateEqual;
    public static PivotFilterType DateNewerThan;
    public static PivotFilterType DateNewerThanOrEqual;
    public static PivotFilterType DateNotBetween;
    public static PivotFilterType DateNotEqual;
    public static PivotFilterType DateOlderThan;
    public static PivotFilterType DateOlderThanOrEqual;
    public static PivotFilterType LastMonth;
    public static PivotFilterType LastQuarter;
    public static PivotFilterType LastWeek;
    public static PivotFilterType LastYear;
    public static PivotFilterType M1;
    public static PivotFilterType M2;
    public static PivotFilterType M3;
    public static PivotFilterType M4;
    public static PivotFilterType M5;
    public static PivotFilterType M6;
    public static PivotFilterType M7;
    public static PivotFilterType M8;
    public static PivotFilterType M9;
    public static PivotFilterType M10;
    public static PivotFilterType M11;
    public static PivotFilterType M12;
    public static PivotFilterType NextMonth;
    public static PivotFilterType NextQuarter;
    public static PivotFilterType NextWeek;
    public static PivotFilterType NextYear;
    public static PivotFilterType Percent;
    public static PivotFilterType Q1;
    public static PivotFilterType Q2;
    public static PivotFilterType Q3;
    public static PivotFilterType Q4;
    public static PivotFilterType Sum;
    public static PivotFilterType ThisMonth;
    public static PivotFilterType ThisQuarter;
    public static PivotFilterType ThisWeek;
    public static PivotFilterType ThisYear;
    public static PivotFilterType Today;
    public static PivotFilterType Tomorrow;
    public static PivotFilterType Unknown;
    public static PivotFilterType ValueBetween;
    public static PivotFilterType ValueEqual;
    public static PivotFilterType ValueGreaterThan;
    public static PivotFilterType ValueGreaterThanOrEqual;
    public static PivotFilterType ValueLessThan;
    public static PivotFilterType ValueLessThanOrEqual;
    public static PivotFilterType ValueNotBetween;
    public static PivotFilterType ValueNotEqual;
    public static PivotFilterType YearToDate;
    public static PivotFilterType Yesterday;
}
public class Aspose.Cells.Pivot.PivotFormatCondition : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotFormatConditionCollection ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal PivotConditionFormatScopeType ;
    [DebuggerBrowsableAttribute("0")]
internal PivotConditionFormatRuleType ;
    [DebuggerBrowsableAttribute("0")]
internal FormatConditionCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    public PivotConditionFormatScopeType ScopeType { get; public set; }
    public PivotConditionFormatRuleType RuleType { get; public set; }
    public FormatConditionCollection FormatConditions { get; }
    internal PivotFormatCondition(PivotFormatConditionCollection , bool );
    public void AddDataAreaCondition(string fieldName);
    public void AddDataAreaCondition(PivotField dataField);
    public void AddRowAreaCondition(string fieldName);
    public void AddRowAreaCondition(PivotField rowField);
    public void AddColumnAreaCondition(string fieldName);
    public void AddColumnAreaCondition(PivotField columnField);
    public void SetConditionalAreas();
    private void (PivotAreaFilter , PivotField );
    public PivotConditionFormatScopeType get_ScopeType();
    public void set_ScopeType(PivotConditionFormatScopeType value);
    public PivotConditionFormatRuleType get_RuleType();
    public void set_RuleType(PivotConditionFormatRuleType value);
    internal FormatConditionCollection ();
    public FormatConditionCollection get_FormatConditions();
    internal void (PivotFormatCondition );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Pivot.PivotFormatConditionCollection : CollectionBase`1<PivotFormatCondition> {
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotTable ;
    public PivotFormatCondition Item { get; }
    internal PivotFormatConditionCollection(PivotTable , Worksheet );
    internal int ();
    public int Add();
    public PivotFormatCondition get_Item(int index);
    internal void (PivotFormatConditionCollection );
}
public enum Aspose.Cells.Pivot.PivotGroupByType : Enum {
    public int value__;
    [ObsoleteAttribute("Use  PivotGroupByType.Numbers instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static PivotGroupByType RangeOfValues;
    public static PivotGroupByType Numbers;
    public static PivotGroupByType Seconds;
    public static PivotGroupByType Minutes;
    public static PivotGroupByType Hours;
    public static PivotGroupByType Days;
    public static PivotGroupByType Months;
    public static PivotGroupByType Quarters;
    public static PivotGroupByType Years;
}
public class Aspose.Cells.Pivot.PivotItem : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotItemCollection ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal ushort ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotField ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public bool IsHidden { get; public set; }
    public int Position { get; public set; }
    public int PositionInSameParentNode { get; public set; }
    public bool IsHideDetail { get; public set; }
    public bool IsFormula { get; public set; }
    public bool IsMissing { get; }
    public object Value { get; }
    public string Name { get; public set; }
    public int Index { get; public set; }
    internal PivotItem(PivotItemCollection );
    internal void (PivotItem , CopyOptions );
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public int get_Position();
    public void set_Position(int value);
    public int get_PositionInSameParentNode();
    public void set_PositionInSameParentNode(int value);
    public void Move(int count, bool isSameParent);
    internal void (int );
    internal void (int );
    public bool get_IsHideDetail();
    public void set_IsHideDetail(bool value);
    public bool get_IsFormula();
    public void set_IsFormula(bool value);
    public string GetFormula();
    internal  ();
    public bool get_IsMissing();
    internal bool ();
    internal void (bool );
    internal bool (int );
    internal void (bool , int );
    internal  ();
    public string GetStringValue();
    public double GetDoubleValue();
    public DateTime GetDateTimeValue();
    internal  ();
    internal  ();
    public object get_Value();
    public string get_Name();
    public void set_Name(string value);
    public int get_Index();
    public void set_Index(int value);
    internal int ();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Pivot.PivotItemCollection : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotField ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    public PivotItem Item { get; }
    public PivotItem Item { get; }
    public int Count { get; }
    internal PivotItemCollection(PivotField );
    internal int (PivotItem );
    [("PivotItem")]
public sealed virtual IEnumerator GetEnumerator();
    public PivotItem get_Item(int index);
    public PivotItem get_Item(string itemValue);
    internal int (int );
    public int get_Count();
    internal void (int );
    internal void ();
    internal int ();
    internal int ();
    internal void ();
    [ObsoleteAttribute("Use PivotItemCollection.SwapItem() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void ChangeitemsOrder(int sourceIndex, int destIndex);
    public void SwapItem(int index1, int index2);
    internal void (int , int );
    internal void (int , int );
    private void (PivotItem );
    private PivotItem ();
    internal int (PivotItem );
    internal void (SortedList );
}
[ObsoleteAttribute("Use PivotItemPositionType enum instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public enum Aspose.Cells.Pivot.PivotItemPosition : Enum {
    public int value__;
    public static PivotItemPosition Previous;
    public static PivotItemPosition Next;
    public static PivotItemPosition Custom;
}
public enum Aspose.Cells.Pivot.PivotItemPositionType : Enum {
    public int value__;
    public static PivotItemPositionType Previous;
    public static PivotItemPositionType Next;
    public static PivotItemPositionType Custom;
}
public enum Aspose.Cells.Pivot.PivotLineType : Enum {
    public int value__;
    public static PivotLineType Regular;
    public static PivotLineType Subtotal;
    public static PivotLineType GrandTotal;
    public static PivotLineType Blank;
}
public enum Aspose.Cells.Pivot.PivotMissingItemLimitType : Enum {
    public int value__;
    public static PivotMissingItemLimitType Automatic;
    public static PivotMissingItemLimitType Max;
    public static PivotMissingItemLimitType None;
}
public class Aspose.Cells.Pivot.PivotNumbericRangeGroupSettings : PivotFieldGroupSettings {
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    public PivotFieldGroupType Type { get; }
    public double Start { get; }
    public double End { get; }
    public double Interval { get; }
    internal PivotNumbericRangeGroupSettings([] );
    public virtual PivotFieldGroupType get_Type();
    public double get_Start();
    public double get_End();
    public double get_Interval();
}
public class Aspose.Cells.Pivot.PivotPageFields : object {
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    public int PageFieldCount { get; }
    public void AddPageField(String[] pageItems);
    public int get_PageFieldCount();
    internal int ();
    public void AddIdentify(int rangeIndex, Int32[] pageItemIndex);
    internal ArrayList ();
    internal ArrayList ();
}
public class Aspose.Cells.Pivot.PivotShowValuesSetting : object {
    [DebuggerBrowsableAttribute("0")]
[]
private PivotField ;
    public PivotFieldDataDisplayFormat CalculationType { get; public set; }
    public int BaseFieldIndex { get; public set; }
    public PivotItemPositionType BaseItemPositionType { get; public set; }
    public int BaseItemIndex { get; public set; }
    internal PivotShowValuesSetting(PivotField );
    public PivotFieldDataDisplayFormat get_CalculationType();
    public void set_CalculationType(PivotFieldDataDisplayFormat value);
    public int get_BaseFieldIndex();
    public void set_BaseFieldIndex(int value);
    public PivotItemPositionType get_BaseItemPositionType();
    public void set_BaseItemPositionType(PivotItemPositionType value);
    public int get_BaseItemIndex();
    public void set_BaseItemIndex(int value);
}
public class Aspose.Cells.Pivot.PivotTable : object {
    [DebuggerBrowsableAttribute("0")]
internal static string ;
    [DebuggerBrowsableAttribute("0")]
internal static string ;
    [DebuggerBrowsableAttribute("0")]
internal static string ;
    [DebuggerBrowsableAttribute("0")]
internal static string ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotTableCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal PivotField ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Int32[0...,0...] ;
    [DebuggerBrowsableAttribute("0")]
internal Int32[0...,0...] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal PivotTableFormatCollection ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal PivotFilterCollection ;
    [DebuggerBrowsableAttribute("0")]
internal PivotFormatConditionCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotField ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    public bool IsExcel2003Compatible { get; public set; }
    public string RefreshedByWho { get; }
    public DateTime RefreshDate { get; }
    public string PivotTableStyleName { get; public set; }
    public PivotTableStyleType PivotTableStyleType { get; public set; }
    public PivotFieldCollection ColumnFields { get; }
    public PivotFieldCollection RowFields { get; }
    public PivotFieldCollection PageFields { get; }
    public PivotFieldCollection DataFields { get; }
    public PivotField DataField { get; }
    public PivotFieldCollection BaseFields { get; }
    public PivotFilterCollection PivotFilters { get; }
    public CellArea ColumnRange { get; }
    public CellArea RowRange { get; }
    public CellArea DataBodyRange { get; }
    public CellArea TableRange1 { get; }
    public CellArea TableRange2 { get; }
    public bool ColumnGrand { get; public set; }
    public bool IsGridDropZones { get; public set; }
    public bool RowGrand { get; public set; }
    public bool DisplayNullString { get; public set; }
    public string NullString { get; public set; }
    public bool DisplayErrorString { get; public set; }
    public string DataFieldHeaderName { get; public set; }
    public string ErrorString { get; public set; }
    public bool IsAutoFormat { get; public set; }
    public bool AutofitColumnWidthOnUpdate { get; public set; }
    public PivotTableAutoFormatType AutoFormatType { get; public set; }
    public bool HasBlankRows { get; public set; }
    public bool MergeLabels { get; public set; }
    public bool PreserveFormatting { get; public set; }
    public bool ShowDrill { get; public set; }
    public bool EnableDrilldown { get; public set; }
    public bool EnableFieldDialog { get; public set; }
    public bool EnableFieldList { get; public set; }
    public bool EnableWizard { get; public set; }
    public bool SubtotalHiddenPageItems { get; public set; }
    public string GrandTotalName { get; public set; }
    public bool ManualUpdate { get; public set; }
    public bool IsMultipleFieldFilters { get; public set; }
    public PivotMissingItemLimitType MissingItemsLimit { get; public set; }
    public bool EnableDataValueEditing { get; public set; }
    public bool ShowDataTips { get; public set; }
    public bool ShowMemberPropertyTips { get; public set; }
    public bool ShowValuesRow { get; public set; }
    public bool ShowEmptyCol { get; public set; }
    public bool ShowEmptyRow { get; public set; }
    public bool FieldListSortAscending { get; public set; }
    public bool PrintDrill { get; public set; }
    public string AltTextTitle { get; public set; }
    public string AltTextDescription { get; public set; }
    public string Name { get; public set; }
    public string ColumnHeaderCaption { get; public set; }
    public int Indent { get; public set; }
    public string RowHeaderCaption { get; public set; }
    public bool ShowRowHeaderCaption { get; public set; }
    public bool CustomListSort { get; public set; }
    public PivotFormatConditionCollection PivotFormatConditions { get; }
    public PrintOrderType PageFieldOrder { get; public set; }
    public int PageFieldWrapCount { get; public set; }
    public string Tag { get; public set; }
    public bool SaveData { get; public set; }
    public bool RefreshDataOnOpeningFile { get; public set; }
    public bool RefreshDataFlag { get; public set; }
    public PivotTableSourceType SourceType { get; }
    public ExternalConnection ExternalConnectionDataSource { get; }
    public String[] DataSource { get; public set; }
    public PivotTableFormatCollection PivotFormats { get; }
    public bool ItemPrintTitles { get; public set; }
    public bool PrintTitles { get; public set; }
    public bool DisplayImmediateItems { get; public set; }
    public bool IsSelected { get; public set; }
    public bool ShowPivotStyleRowHeader { get; public set; }
    public bool ShowPivotStyleColumnHeader { get; public set; }
    public bool ShowPivotStyleRowStripes { get; public set; }
    public bool ShowPivotStyleColumnStripes { get; public set; }
    public bool ShowPivotStyleLastColumn { get; public set; }
    internal PivotTable(PivotTableCollection );
    internal PivotTable(PivotTableCollection ,  , int , short , string );
    private static PivotTable();
    public sealed virtual void Dispose();
    public bool get_IsExcel2003Compatible();
    public void set_IsExcel2003Compatible(bool value);
    public string get_RefreshedByWho();
    public DateTime get_RefreshDate();
    internal Worksheet ();
    internal WorksheetCollection ();
    internal Workbook ();
    internal void ();
    internal bool ();
    private void ();
    internal TableStyle ();
    internal void (TableStyle );
    public string get_PivotTableStyleName();
    public void set_PivotTableStyleName(string value);
    public PivotTableStyleType get_PivotTableStyleType();
    public void set_PivotTableStyleType(PivotTableStyleType value);
    public void CopyStyle(PivotTable pivotTable);
    private void (PivotTable , CopyOptions );
    private string (WorksheetCollection , string );
    public void ShowReportFilterPage(PivotField pageField);
    public void ShowReportFilterPageByName(string fieldName);
    public void ShowReportFilterPageByIndex(int posIndex);
    internal void (PivotTable , CopyOptions , int , int );
    internal bool ();
    internal void ();
    internal  ( );
    private bool ( ,  ,  );
    private bool ([] ,  , Int32[] , Int32[] , int );
    private int (List`1<> , Int32[] , PivotFieldCollection );
    internal  (string , [] ,  );
    internal void (PivotField );
    public void RemoveField(PivotFieldType fieldType, string fieldName);
    public void RemoveField(PivotFieldType fieldType, int baseFieldIndex);
    public void RemoveField(PivotFieldType fieldType, PivotField pivotField);
    public int AddFieldToArea(PivotFieldType fieldType, string fieldName);
    public int AddFieldToArea(PivotFieldType fieldType, int baseFieldIndex);
    public int AddFieldToArea(PivotFieldType fieldType, PivotField pivotField);
    public void AddCalculatedField(string name, string formula, bool dragToDataArea);
    public void AddCalculatedField(string name, string formula);
    public PivotFieldCollection GetFields(PivotFieldType fieldType);
    [ObsoleteAttribute("Use PivotField.GetFields() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public PivotFieldCollection Fields(PivotFieldType fieldType);
    public PivotFieldCollection get_ColumnFields();
    public PivotFieldCollection get_RowFields();
    public PivotFieldCollection get_PageFields();
    public PivotFieldCollection get_DataFields();
    public PivotField get_DataField();
    public PivotFieldCollection get_BaseFields();
    public PivotFilterCollection get_PivotFilters();
    internal int ();
    internal int ();
    internal CellArea ();
    public CellArea get_ColumnRange();
    public CellArea get_RowRange();
    public CellArea get_DataBodyRange();
    public CellArea get_TableRange1();
    public CellArea get_TableRange2();
    public void Move(int row, int column);
    public void Move(string destCellName);
    public bool get_ColumnGrand();
    public void set_ColumnGrand(bool value);
    public bool get_IsGridDropZones();
    public void set_IsGridDropZones(bool value);
    public bool get_RowGrand();
    public void set_RowGrand(bool value);
    public bool get_DisplayNullString();
    public void set_DisplayNullString(bool value);
    public string get_NullString();
    public void set_NullString(string value);
    public bool get_DisplayErrorString();
    public void set_DisplayErrorString(bool value);
    public string get_DataFieldHeaderName();
    public void set_DataFieldHeaderName(string value);
    public string get_ErrorString();
    public void set_ErrorString(string value);
    public bool get_IsAutoFormat();
    public void set_IsAutoFormat(bool value);
    public bool get_AutofitColumnWidthOnUpdate();
    public void set_AutofitColumnWidthOnUpdate(bool value);
    public PivotTableAutoFormatType get_AutoFormatType();
    public void set_AutoFormatType(PivotTableAutoFormatType value);
    public bool get_HasBlankRows();
    public void set_HasBlankRows(bool value);
    public bool get_MergeLabels();
    public void set_MergeLabels(bool value);
    public bool get_PreserveFormatting();
    public void set_PreserveFormatting(bool value);
    public bool get_ShowDrill();
    public void set_ShowDrill(bool value);
    public bool get_EnableDrilldown();
    public void set_EnableDrilldown(bool value);
    public bool get_EnableFieldDialog();
    public void set_EnableFieldDialog(bool value);
    public bool get_EnableFieldList();
    public void set_EnableFieldList(bool value);
    public bool get_EnableWizard();
    public void set_EnableWizard(bool value);
    public bool get_SubtotalHiddenPageItems();
    public void set_SubtotalHiddenPageItems(bool value);
    public string get_GrandTotalName();
    public void set_GrandTotalName(string value);
    public bool get_ManualUpdate();
    public void set_ManualUpdate(bool value);
    public bool get_IsMultipleFieldFilters();
    public void set_IsMultipleFieldFilters(bool value);
    public PivotMissingItemLimitType get_MissingItemsLimit();
    public void set_MissingItemsLimit(PivotMissingItemLimitType value);
    public bool get_EnableDataValueEditing();
    public void set_EnableDataValueEditing(bool value);
    public bool get_ShowDataTips();
    public void set_ShowDataTips(bool value);
    public bool get_ShowMemberPropertyTips();
    public void set_ShowMemberPropertyTips(bool value);
    public bool get_ShowValuesRow();
    public void set_ShowValuesRow(bool value);
    public bool get_ShowEmptyCol();
    public void set_ShowEmptyCol(bool value);
    public bool get_ShowEmptyRow();
    public void set_ShowEmptyRow(bool value);
    public bool get_FieldListSortAscending();
    public void set_FieldListSortAscending(bool value);
    public bool get_PrintDrill();
    public void set_PrintDrill(bool value);
    public string get_AltTextTitle();
    public void set_AltTextTitle(string value);
    public string get_AltTextDescription();
    public void set_AltTextDescription(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ColumnHeaderCaption();
    public void set_ColumnHeaderCaption(string value);
    public int get_Indent();
    public void set_Indent(int value);
    public string get_RowHeaderCaption();
    public void set_RowHeaderCaption(string value);
    public bool get_ShowRowHeaderCaption();
    public void set_ShowRowHeaderCaption(bool value);
    public bool get_CustomListSort();
    public void set_CustomListSort(bool value);
    private string ();
    private void (string );
    private string ();
    private void (string );
    private string ();
    private void (string );
    public PivotFormatConditionCollection get_PivotFormatConditions();
    public PrintOrderType get_PageFieldOrder();
    public void set_PageFieldOrder(PrintOrderType value);
    public int get_PageFieldWrapCount();
    public void set_PageFieldWrapCount(int value);
    public string get_Tag();
    public void set_Tag(string value);
    public bool get_SaveData();
    public void set_SaveData(bool value);
    public bool get_RefreshDataOnOpeningFile();
    public void set_RefreshDataOnOpeningFile(bool value);
    public bool get_RefreshDataFlag();
    public void set_RefreshDataFlag(bool value);
    public PivotTableSourceType get_SourceType();
    public ExternalConnection get_ExternalConnectionDataSource();
    public String[] get_DataSource();
    public void set_DataSource(String[] value);
    public void ChangeDataSource(String[] source);
    public String[] GetSource();
    public void RefreshData();
    public void RefreshData(PivotTableRefreshOption option);
    public void CalculateData();
    public void CalculateData(PivotTableCalculateOption option);
    public void ClearData();
    internal void (Chart , string , bool );
    public void CalculateRange();
    public void FormatAll(Style style);
    public void FormatRow(int row, Style style);
    public void Format(PivotArea pivotArea, Style style);
    public void ShowDetail(int rowOffset, int columnOffset, bool newSheet, int destRow, int destColumn);
    public PivotTableFormatCollection get_PivotFormats();
    public void Format(int row, int column, Style style);
    internal bool (int , int , int , int , InsertOptions );
    internal bool (int , int , int , int );
    internal bool (CellArea , int , ShiftType );
    public bool get_ItemPrintTitles();
    public void set_ItemPrintTitles(bool value);
    public bool get_PrintTitles();
    public void set_PrintTitles(bool value);
    internal void (bool );
    public bool get_DisplayImmediateItems();
    public void set_DisplayImmediateItems(bool value);
    internal void ();
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    internal byte ();
    internal void (byte );
    public bool get_ShowPivotStyleRowHeader();
    public void set_ShowPivotStyleRowHeader(bool value);
    public bool get_ShowPivotStyleColumnHeader();
    public void set_ShowPivotStyleColumnHeader(bool value);
    public bool get_ShowPivotStyleRowStripes();
    public void set_ShowPivotStyleRowStripes(bool value);
    public bool get_ShowPivotStyleColumnStripes();
    public void set_ShowPivotStyleColumnStripes(bool value);
    public bool get_ShowPivotStyleLastColumn();
    public void set_ShowPivotStyleLastColumn(bool value);
    [ObsoleteAttribute("Use PivotField.GroupBy() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetAutoGroupField(int baseFieldIndex);
    [ObsoleteAttribute("Use PivotField.GroupBy() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetAutoGroupField(PivotField pivotField);
    [ObsoleteAttribute("Use PivotField.GroupBy() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetManualGroupField(int baseFieldIndex, double startVal, double endVal, ArrayList groupByList, double intervalNum);
    [ObsoleteAttribute("Use PivotField.GroupBy() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetManualGroupField(PivotField pivotField, double startVal, double endVal, ArrayList groupByList, double intervalNum);
    [ObsoleteAttribute("Use PivotField.GroupBy() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetManualGroupField(int baseFieldIndex, DateTime startVal, DateTime endVal, ArrayList groupByList, int intervalNum);
    [ObsoleteAttribute("Use PivotField.GroupBy() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetManualGroupField(PivotField pivotField, DateTime startVal, DateTime endVal, ArrayList groupByList, int intervalNum);
    [ObsoleteAttribute("Use PivotField.Ungroup() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetUngroup(int baseFieldIndex);
    [ObsoleteAttribute("Use PivotField.Ungroup() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void SetUngroup(PivotField pivotField);
    public ArrayList GetHorizontalBreaks();
    internal bool ();
    public void ShowInCompactForm();
    internal bool ();
    public void ShowInOutlineForm();
    internal bool ();
    public void ShowInTabularForm();
    public Cell GetCellByDisplayName(string displayName);
    public PivotTable[] GetChildren();
    internal void (PivotField );
    private string (int , int ,  );
    private void (string , String& , Int32& , Int32& , Int32& , Int32& );
}
public enum Aspose.Cells.Pivot.PivotTableAutoFormatType : Enum {
    public int value__;
    public static PivotTableAutoFormatType None;
    public static PivotTableAutoFormatType Classic;
    public static PivotTableAutoFormatType Report1;
    public static PivotTableAutoFormatType Report2;
    public static PivotTableAutoFormatType Report3;
    public static PivotTableAutoFormatType Report4;
    public static PivotTableAutoFormatType Report5;
    public static PivotTableAutoFormatType Report6;
    public static PivotTableAutoFormatType Report7;
    public static PivotTableAutoFormatType Report8;
    public static PivotTableAutoFormatType Report9;
    public static PivotTableAutoFormatType Report10;
    public static PivotTableAutoFormatType Table1;
    public static PivotTableAutoFormatType Table2;
    public static PivotTableAutoFormatType Table3;
    public static PivotTableAutoFormatType Table4;
    public static PivotTableAutoFormatType Table5;
    public static PivotTableAutoFormatType Table6;
    public static PivotTableAutoFormatType Table7;
    public static PivotTableAutoFormatType Table8;
    public static PivotTableAutoFormatType Table9;
    public static PivotTableAutoFormatType Table10;
}
public class Aspose.Cells.Pivot.PivotTableCalculateOption : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private ReserveMissingPivotItemType ;
    public bool RefreshData { get; public set; }
    public bool RefreshCharts { get; public set; }
    public ReserveMissingPivotItemType ReserveMissingPivotItemType { get; public set; }
    public bool get_RefreshData();
    public void set_RefreshData(bool value);
    public bool get_RefreshCharts();
    public void set_RefreshCharts(bool value);
    public ReserveMissingPivotItemType get_ReserveMissingPivotItemType();
    public void set_ReserveMissingPivotItemType(ReserveMissingPivotItemType value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Pivot.PivotTableCollection : CollectionBase`1<PivotTable> {
    [DebuggerBrowsableAttribute("0")]
[]
internal Worksheet ;
    public PivotTable Item { get; }
    public PivotTable Item { get; }
    public PivotTable Item { get; }
    internal PivotTableCollection(Worksheet );
    public sealed virtual void Dispose();
    internal void (PivotTableCollection , int , int , int , Worksheet , CopyOptions );
    internal void (PivotTableCollection , int , int , int , Worksheet , CopyOptions );
    internal void (PivotTableCollection , CopyOptions );
    internal void (CellArea , int , ShiftType );
    internal void (int , int , int , int , InsertOptions );
    internal void (int , int , int , int );
    internal bool ( );
    internal  (int , int , string , [] ,  );
    internal void ( );
    internal ArrayList ();
    public int Add(string sourceData, string destCellName, string tableName);
    public int Add(string sourceData, string destCellName, string tableName, bool useSameSource);
    public int Add(string sourceData, int row, int column, string tableName);
    public int Add(string sourceData, int row, int column, string tableName, bool useSameSource);
    public int Add(PivotTable pivotTable, string destCellName, string tableName);
    public int Add(PivotTable pivotTable, int row, int column, string tableName);
    public int Add(String[] sourceData, bool isAutoPage, PivotPageFields pageFields, string destCellName, string tableName);
    public int Add(String[] sourceData, bool isAutoPage, PivotPageFields pageFields, int row, int column, string tableName);
    internal int ( , int , int , string );
    public PivotTable get_Item(int index);
    public PivotTable get_Item(string name);
    public PivotTable get_Item(int row, int column);
    public void Clear();
    internal void (PivotTable );
    public void Remove(PivotTable pivotTable);
    public void Remove(PivotTable pivotTable, bool keepData);
    public void RemoveAt(int index);
    public void RemoveAt(int index, bool keepData);
    internal void (int , int );
    internal void (byte , byte );
    private string ();
    private string ();
    internal bool (int , int );
    internal bool (string , PivotTable );
    internal bool (string , PivotTable );
}
public class Aspose.Cells.Pivot.PivotTableFormat : object {
    [DebuggerBrowsableAttribute("0")]
[]
private PivotTableFormatCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal PivotArea ;
    public PivotArea PivotArea { get; }
    internal PivotTableFormat(PivotTableFormatCollection );
    public PivotArea get_PivotArea();
    public Style GetStyle();
    public void SetStyle(Style style);
    internal  ();
    internal void (Style );
    internal Style ();
    private bool (Style );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Pivot.PivotTableFormatCollection : CollectionBase`1<PivotTableFormat> {
    [DebuggerBrowsableAttribute("0")]
[]
internal PivotTable ;
    public PivotTableFormat Item { get; }
    internal PivotTableFormatCollection(PivotTable );
    public PivotTableFormat get_Item(int index);
    public int Add();
    public PivotTableFormat FormatArea(PivotFieldType axisType, int fieldPosition, PivotFieldSubtotalType subtotalType, PivotTableSelectionType selectionType, bool isGrandRow, bool isGrandColumn, Style style);
    internal void (PivotTableFormat );
    internal void (PivotTableFormat );
    internal void (PivotTableFormatCollection , CopyOptions );
}
public class Aspose.Cells.Pivot.PivotTableRefreshOption : object {
    [DebuggerBrowsableAttribute("0")]
private ReserveMissingPivotItemType ;
    public ReserveMissingPivotItemType ReserveMissingPivotItemType { get; public set; }
    public ReserveMissingPivotItemType get_ReserveMissingPivotItemType();
    public void set_ReserveMissingPivotItemType(ReserveMissingPivotItemType value);
}
public enum Aspose.Cells.Pivot.PivotTableSelectionType : Enum {
    public int value__;
    public static PivotTableSelectionType DataAndLabel;
    public static PivotTableSelectionType DataOnly;
    public static PivotTableSelectionType LabelOnly;
}
public enum Aspose.Cells.Pivot.PivotTableSourceType : Enum {
    public byte value__;
    public static PivotTableSourceType Sheet;
    public static PivotTableSourceType External;
    public static PivotTableSourceType Consolidation;
    public static PivotTableSourceType Scenario;
    public static PivotTableSourceType Unknown;
}
public enum Aspose.Cells.Pivot.PivotTableStyleType : Enum {
    public int value__;
    public static PivotTableStyleType None;
    public static PivotTableStyleType PivotTableStyleLight1;
    public static PivotTableStyleType PivotTableStyleLight2;
    public static PivotTableStyleType PivotTableStyleLight3;
    public static PivotTableStyleType PivotTableStyleLight4;
    public static PivotTableStyleType PivotTableStyleLight5;
    public static PivotTableStyleType PivotTableStyleLight6;
    public static PivotTableStyleType PivotTableStyleLight7;
    public static PivotTableStyleType PivotTableStyleLight8;
    public static PivotTableStyleType PivotTableStyleLight9;
    public static PivotTableStyleType PivotTableStyleLight10;
    public static PivotTableStyleType PivotTableStyleLight11;
    public static PivotTableStyleType PivotTableStyleLight12;
    public static PivotTableStyleType PivotTableStyleLight13;
    public static PivotTableStyleType PivotTableStyleLight14;
    public static PivotTableStyleType PivotTableStyleLight15;
    public static PivotTableStyleType PivotTableStyleLight16;
    public static PivotTableStyleType PivotTableStyleLight17;
    public static PivotTableStyleType PivotTableStyleLight18;
    public static PivotTableStyleType PivotTableStyleLight19;
    public static PivotTableStyleType PivotTableStyleLight20;
    public static PivotTableStyleType PivotTableStyleLight21;
    public static PivotTableStyleType PivotTableStyleLight22;
    public static PivotTableStyleType PivotTableStyleLight23;
    public static PivotTableStyleType PivotTableStyleLight24;
    public static PivotTableStyleType PivotTableStyleLight25;
    public static PivotTableStyleType PivotTableStyleLight26;
    public static PivotTableStyleType PivotTableStyleLight27;
    public static PivotTableStyleType PivotTableStyleLight28;
    public static PivotTableStyleType PivotTableStyleMedium1;
    public static PivotTableStyleType PivotTableStyleMedium2;
    public static PivotTableStyleType PivotTableStyleMedium3;
    public static PivotTableStyleType PivotTableStyleMedium4;
    public static PivotTableStyleType PivotTableStyleMedium5;
    public static PivotTableStyleType PivotTableStyleMedium6;
    public static PivotTableStyleType PivotTableStyleMedium7;
    public static PivotTableStyleType PivotTableStyleMedium8;
    public static PivotTableStyleType PivotTableStyleMedium9;
    public static PivotTableStyleType PivotTableStyleMedium10;
    public static PivotTableStyleType PivotTableStyleMedium11;
    public static PivotTableStyleType PivotTableStyleMedium12;
    public static PivotTableStyleType PivotTableStyleMedium13;
    public static PivotTableStyleType PivotTableStyleMedium14;
    public static PivotTableStyleType PivotTableStyleMedium15;
    public static PivotTableStyleType PivotTableStyleMedium16;
    public static PivotTableStyleType PivotTableStyleMedium17;
    public static PivotTableStyleType PivotTableStyleMedium18;
    public static PivotTableStyleType PivotTableStyleMedium19;
    public static PivotTableStyleType PivotTableStyleMedium20;
    public static PivotTableStyleType PivotTableStyleMedium21;
    public static PivotTableStyleType PivotTableStyleMedium22;
    public static PivotTableStyleType PivotTableStyleMedium23;
    public static PivotTableStyleType PivotTableStyleMedium24;
    public static PivotTableStyleType PivotTableStyleMedium25;
    public static PivotTableStyleType PivotTableStyleMedium26;
    public static PivotTableStyleType PivotTableStyleMedium27;
    public static PivotTableStyleType PivotTableStyleMedium28;
    public static PivotTableStyleType PivotTableStyleDark1;
    public static PivotTableStyleType PivotTableStyleDark2;
    public static PivotTableStyleType PivotTableStyleDark3;
    public static PivotTableStyleType PivotTableStyleDark4;
    public static PivotTableStyleType PivotTableStyleDark5;
    public static PivotTableStyleType PivotTableStyleDark6;
    public static PivotTableStyleType PivotTableStyleDark7;
    public static PivotTableStyleType PivotTableStyleDark8;
    public static PivotTableStyleType PivotTableStyleDark9;
    public static PivotTableStyleType PivotTableStyleDark10;
    public static PivotTableStyleType PivotTableStyleDark11;
    public static PivotTableStyleType PivotTableStyleDark12;
    public static PivotTableStyleType PivotTableStyleDark13;
    public static PivotTableStyleType PivotTableStyleDark14;
    public static PivotTableStyleType PivotTableStyleDark15;
    public static PivotTableStyleType PivotTableStyleDark16;
    public static PivotTableStyleType PivotTableStyleDark17;
    public static PivotTableStyleType PivotTableStyleDark18;
    public static PivotTableStyleType PivotTableStyleDark19;
    public static PivotTableStyleType PivotTableStyleDark20;
    public static PivotTableStyleType PivotTableStyleDark21;
    public static PivotTableStyleType PivotTableStyleDark22;
    public static PivotTableStyleType PivotTableStyleDark23;
    public static PivotTableStyleType PivotTableStyleDark24;
    public static PivotTableStyleType PivotTableStyleDark25;
    public static PivotTableStyleType PivotTableStyleDark26;
    public static PivotTableStyleType PivotTableStyleDark27;
    public static PivotTableStyleType PivotTableStyleDark28;
    public static PivotTableStyleType Custom;
}
public enum Aspose.Cells.Pivot.ReserveMissingPivotItemType : Enum {
    public int value__;
    public static ReserveMissingPivotItemType Default;
    public static ReserveMissingPivotItemType All;
    public static ReserveMissingPivotItemType None;
}
[ObsoleteAttribute("Use PivotFieldGroupSettings class instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Aspose.Cells.Pivot.SxRng : object {
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    [DebuggerBrowsableAttribute("0")]
private Boolean[] ;
    public object IsAutoStart { get; }
    public object IsAutoEnd { get; }
    public object Start { get; }
    public object End { get; }
    public object By { get; }
    public Boolean[] GroupByTypes { get; }
    internal SxRng(PivotFieldGroupSettings );
    public object get_IsAutoStart();
    public object get_IsAutoEnd();
    public object get_Start();
    public object get_End();
    public object get_By();
    public Boolean[] get_GroupByTypes();
}
public class Aspose.Cells.PptxSaveOptions : PaginatedSaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal AdjustFontSizeForRowType ;
    [DebuggerBrowsableAttribute("0")]
internal SlideViewType ;
    public bool IgnoreHiddenRows { get; public set; }
    public AdjustFontSizeForRowType AdjustFontSizeForRowType { get; public set; }
    public SlideViewType ExportViewType { get; public set; }
    public PptxSaveOptions(bool saveAsImage);
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    public bool get_IgnoreHiddenRows();
    public void set_IgnoreHiddenRows(bool value);
    public AdjustFontSizeForRowType get_AdjustFontSizeForRowType();
    public void set_AdjustFontSizeForRowType(AdjustFontSizeForRowType value);
    public SlideViewType get_ExportViewType();
    public void set_ExportViewType(SlideViewType value);
}
public enum Aspose.Cells.PrintCommentsType : Enum {
    public int value__;
    public static PrintCommentsType PrintInPlace;
    public static PrintCommentsType PrintNoComments;
    public static PrintCommentsType PrintSheetEnd;
    public static PrintCommentsType PrintWithThreadedComments;
}
public enum Aspose.Cells.PrintErrorsType : Enum {
    public int value__;
    public static PrintErrorsType PrintErrorsBlank;
    public static PrintErrorsType PrintErrorsDash;
    public static PrintErrorsType PrintErrorsDisplayed;
    public static PrintErrorsType PrintErrorsNA;
}
public enum Aspose.Cells.PrintingPageType : Enum {
    public int value__;
    public static PrintingPageType Default;
    public static PrintingPageType IgnoreBlank;
    public static PrintingPageType IgnoreStyle;
}
public enum Aspose.Cells.PrintOrderType : Enum {
    public int value__;
    public static PrintOrderType DownThenOver;
    public static PrintOrderType OverThenDown;
}
public enum Aspose.Cells.PrintSizeType : Enum {
    public int value__;
    public static PrintSizeType Full;
    public static PrintSizeType Fit;
    public static PrintSizeType Custom;
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Properties.BuiltInDocumentPropertyCollection : DocumentPropertyCollection {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private static Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private static ArrayList ;
    public DocumentProperty Item { get; }
    public string Language { get; public set; }
    public string Author { get; public set; }
    [ObsoleteAttribute("This property is written for Word and PowerPoint. Excel will omit this property")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int Bytes { get; public set; }
    [ObsoleteAttribute("This property is written for Word and PowerPoint. Excel will omit this property")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int Characters { get; public set; }
    [ObsoleteAttribute("This property is written for Word and PowerPoint. Excel will omit this property")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int CharactersWithSpaces { get; public set; }
    public string Comments { get; public set; }
    public string Category { get; public set; }
    public string ContentType { get; public set; }
    public string ContentStatus { get; public set; }
    public string Company { get; public set; }
    public string HyperlinkBase { get; public set; }
    public DateTime CreatedTime { get; public set; }
    public DateTime CreatedUniversalTime { get; public set; }
    public string Keywords { get; public set; }
    public DateTime LastPrinted { get; public set; }
    public DateTime LastPrintedUniversalTime { get; public set; }
    public string LastSavedBy { get; public set; }
    public DateTime LastSavedTime { get; public set; }
    public DateTime LastSavedUniversalTime { get; public set; }
    [ObsoleteAttribute("This property is written for Word and PowerPoint. Excel will omit this property")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int Lines { get; public set; }
    public string Manager { get; public set; }
    public string NameOfApplication { get; public set; }
    public int Pages { get; public set; }
    [ObsoleteAttribute("This property is written for Word and PowerPoint. Excel will omit this property")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int Paragraphs { get; public set; }
    public string RevisionNumber { get; public set; }
    public string Subject { get; public set; }
    public string Template { get; public set; }
    public string Title { get; public set; }
    public double TotalEditingTime { get; public set; }
    public string Version { get; public set; }
    public string DocumentVersion { get; public set; }
    public bool ScaleCrop { get; public set; }
    public bool LinksUpToDate { get; public set; }
    public int Words { get; public set; }
    private static BuiltInDocumentPropertyCollection();
    public virtual DocumentProperty get_Item(string name);
    internal DocumentProperty (string );
    public string get_Language();
    public void set_Language(string value);
    public string get_Author();
    public void set_Author(string value);
    internal string ();
    public int get_Bytes();
    public void set_Bytes(int value);
    public int get_Characters();
    public void set_Characters(int value);
    public int get_CharactersWithSpaces();
    public void set_CharactersWithSpaces(int value);
    public string get_Comments();
    public void set_Comments(string value);
    public string get_Category();
    public void set_Category(string value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_ContentStatus();
    public void set_ContentStatus(string value);
    public string get_Company();
    public void set_Company(string value);
    public string get_HyperlinkBase();
    public void set_HyperlinkBase(string value);
    public DateTime get_CreatedTime();
    public void set_CreatedTime(DateTime value);
    public DateTime get_CreatedUniversalTime();
    public void set_CreatedUniversalTime(DateTime value);
    public string get_Keywords();
    public void set_Keywords(string value);
    public DateTime get_LastPrinted();
    public void set_LastPrinted(DateTime value);
    public DateTime get_LastPrintedUniversalTime();
    public void set_LastPrintedUniversalTime(DateTime value);
    public string get_LastSavedBy();
    public void set_LastSavedBy(string value);
    internal string ();
    public DateTime get_LastSavedTime();
    public void set_LastSavedTime(DateTime value);
    public DateTime get_LastSavedUniversalTime();
    public void set_LastSavedUniversalTime(DateTime value);
    public int get_Lines();
    public void set_Lines(int value);
    public string get_Manager();
    public void set_Manager(string value);
    public string get_NameOfApplication();
    public void set_NameOfApplication(string value);
    public int get_Pages();
    public void set_Pages(int value);
    public int get_Paragraphs();
    public void set_Paragraphs(int value);
    public string get_RevisionNumber();
    public void set_RevisionNumber(string value);
    internal static bool (string );
    internal string ();
    internal void (string );
    internal int ();
    internal void (int );
    public string get_Subject();
    public void set_Subject(string value);
    public string get_Template();
    public void set_Template(string value);
    public string get_Title();
    public void set_Title(string value);
    public double get_TotalEditingTime();
    public void set_TotalEditingTime(double value);
    public string get_Version();
    public void set_Version(string value);
    public string get_DocumentVersion();
    public void set_DocumentVersion(string value);
    public bool get_ScaleCrop();
    public void set_ScaleCrop(bool value);
    public bool get_LinksUpToDate();
    public void set_LinksUpToDate(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public int get_Words();
    public void set_Words(int value);
    internal static string (int ,  );
    private static  (string );
}
public class Aspose.Cells.Properties.ContentTypeProperty : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal ContentTypePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string Type { get; public set; }
    public bool IsNillable { get; public set; }
    internal ContentTypeProperty(ContentTypePropertyCollection );
    internal Hashtable ();
    internal void (ContentTypeProperty );
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Type();
    public void set_Type(string value);
    public bool get_IsNillable();
    public void set_IsNillable(bool value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Properties.ContentTypePropertyCollection : CollectionBase`1<ContentTypeProperty> {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<string> ;
    public ContentTypeProperty Item { get; }
    public ContentTypeProperty Item { get; }
    internal void (ContentTypePropertyCollection );
    public int Add(string name, string value);
    public int Add(string name, string value, string type);
    internal int (ContentTypeProperty );
    public ContentTypeProperty get_Item(int index);
    public ContentTypeProperty get_Item(string name);
}
public class Aspose.Cells.Properties.CustomDocumentPropertyCollection : DocumentPropertyCollection {
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    internal CustomDocumentPropertyCollection(WorksheetCollection );
    internal DocumentProperty (string , object );
    public DocumentProperty Add(string name, string value);
    public DocumentProperty Add(string name, int value);
    public DocumentProperty Add(string name, DateTime value);
    public DocumentProperty Add(string name, bool value);
    public DocumentProperty Add(string name, double value);
    public DocumentProperty AddLinkToContent(string name, string source);
    public void UpdateLinkedPropertyValue();
    public void UpdateLinkedRange();
    private int ();
}
public class Aspose.Cells.Properties.CustomProperty : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    public string Name { get; public set; }
    [ObsoleteAttribute("Use CustomProperty.Value property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public string StringValue { get; public set; }
    public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_StringValue();
    public void set_StringValue(string value);
    public string get_Value();
    public void set_Value(string value);
    internal void (CustomProperty );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Properties.CustomPropertyCollection : CollectionBase`1<CustomProperty> {
    public CustomProperty Item { get; }
    public CustomProperty Item { get; }
    public int Add(string name, string value);
    public CustomProperty get_Item(int index);
    public CustomProperty get_Item(string name);
    internal void (CustomPropertyCollection );
}
public class Aspose.Cells.Properties.DocumentProperty : object {
    [DebuggerBrowsableAttribute("0")]
[]
private DocumentPropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public string Name { get; }
    public object Value { get; public set; }
    public bool IsLinkedToContent { get; }
    public string Source { get; }
    public PropertyType Type { get; }
    public bool IsGeneratedName { get; }
    internal DocumentProperty(DocumentPropertyCollection ,  , int , string , object , bool );
    public string get_Name();
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsLinkedToContent();
    public string get_Source();
    public PropertyType get_Type();
    public bool get_IsGeneratedName();
    internal int ();
    internal int ();
    internal bool ();
    internal  ();
    public virtual string ToString();
    internal string ();
    public int ToInt();
    internal long ();
    public double ToDouble();
    public DateTime ToDateTime();
    internal DateTime ();
    internal void (DateTime );
    public bool ToBool();
}
[DefaultMemberAttribute("Item")]
public abstract class Aspose.Cells.Properties.DocumentPropertyCollection : CollectionBase`1<DocumentProperty> {
    public DocumentProperty Item { get; }
    public DocumentProperty Item { get; }
    public virtual DocumentProperty get_Item(string name);
    public DocumentProperty get_Item(int index);
    internal DocumentProperty ( , int , string , object , bool );
    internal DocumentProperty (DocumentProperty );
    public bool Contains(string name);
    public int IndexOf(string name);
    public void Remove(string name);
    public void RemoveAt(int index);
}
public enum Aspose.Cells.Properties.PropertyType : Enum {
    public int value__;
    public static PropertyType Boolean;
    public static PropertyType DateTime;
    public static PropertyType Double;
    public static PropertyType Number;
    public static PropertyType String;
    public static PropertyType Blob;
}
public class Aspose.Cells.ProtectedRange : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    public string Name { get; public set; }
    public CellArea CellArea { get; }
    public bool IsProtectedWithPassword { get; }
    public string Password { get; public set; }
    public string SecurityDescriptor { get; public set; }
    internal ProtectedRange(ProtectedRangeCollection );
    internal ProtectedRange(ProtectedRangeCollection , string , CellArea );
    internal ProtectedRange(ProtectedRangeCollection , string , ArrayList );
    internal void (ProtectedRange );
    public string get_Name();
    public void set_Name(string value);
    public CellArea get_CellArea();
    public CellArea[] GetAreas();
    public void AddArea(int startRow, int startColumn, int endRow, int endColumn);
    internal void (CellArea );
    public bool get_IsProtectedWithPassword();
    internal  ();
    internal void ( );
    public string get_Password();
    public void set_Password(string value);
    internal ushort ();
    internal void (ushort );
    public string get_SecurityDescriptor();
    public void set_SecurityDescriptor(string value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ProtectedRangeCollection : CollectionBase`1<ProtectedRange> {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    public ProtectedRange Item { get; }
    internal ProtectedRangeCollection(Worksheet );
    internal void ();
    public ProtectedRange get_Item(int index);
    public int Add(string name, int startRow, int startColumn, int endRow, int endColumn);
    internal int (ProtectedRange );
    internal int (string , CellArea );
    internal int (string , ArrayList );
    internal void (ProtectedRangeCollection );
}
public class Aspose.Cells.Protection : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public bool AllowDeletingColumn { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowDeletingColumn property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsDeletingColumnsAllowed { get; public set; }
    public bool AllowDeletingRow { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowDeletingRow property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsDeletingRowsAllowed { get; public set; }
    public bool AllowFiltering { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowFiltering property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsFilteringAllowed { get; public set; }
    public bool AllowFormattingCell { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowFormattingCell property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsFormattingCellsAllowed { get; public set; }
    public bool AllowFormattingColumn { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowFormattingColumn property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsFormattingColumnsAllowed { get; public set; }
    public bool AllowFormattingRow { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowFormattingRow property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsFormattingRowsAllowed { get; public set; }
    public bool AllowInsertingColumn { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowInsertingColumn property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsInsertingColumnsAllowed { get; public set; }
    public bool AllowInsertingHyperlink { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowInsertingHyperlink property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsInsertingHyperlinksAllowed { get; public set; }
    public bool AllowInsertingRow { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowInsertingRow property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsInsertingRowsAllowed { get; public set; }
    public bool AllowSorting { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowSorting property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsSortingAllowed { get; public set; }
    public bool AllowUsingPivotTable { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowUsingPivotTable property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsUsingPivotTablesAllowed { get; public set; }
    public bool AllowEditingContent { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowEditingContent property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsEditingContentsAllowed { get; public set; }
    public bool AllowEditingObject { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowEditingObject property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsEditingObjectsAllowed { get; public set; }
    public bool AllowEditingScenario { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowEditingScenario property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsEditingScenariosAllowed { get; public set; }
    public string Password { get; public set; }
    public bool IsProtectedWithPassword { get; }
    public bool AllowSelectingLockedCell { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowSelectingLockedCell property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsSelectingLockedCellsAllowed { get; public set; }
    public bool AllowSelectingUnlockedCell { get; public set; }
    [ObsoleteAttribute("Use Protection.AllowSelectingUnlockedCell property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsSelectingUnlockedCellsAllowed { get; public set; }
    internal  ();
    internal void ( );
    public void Copy(Protection source);
    internal void (Byte[] );
    public bool get_AllowDeletingColumn();
    public void set_AllowDeletingColumn(bool value);
    public bool get_IsDeletingColumnsAllowed();
    public void set_IsDeletingColumnsAllowed(bool value);
    public bool get_AllowDeletingRow();
    public void set_AllowDeletingRow(bool value);
    public bool get_IsDeletingRowsAllowed();
    public void set_IsDeletingRowsAllowed(bool value);
    public bool get_AllowFiltering();
    public void set_AllowFiltering(bool value);
    public bool get_IsFilteringAllowed();
    public void set_IsFilteringAllowed(bool value);
    public bool get_AllowFormattingCell();
    public void set_AllowFormattingCell(bool value);
    public bool get_IsFormattingCellsAllowed();
    public void set_IsFormattingCellsAllowed(bool value);
    public bool get_AllowFormattingColumn();
    public void set_AllowFormattingColumn(bool value);
    public bool get_IsFormattingColumnsAllowed();
    public void set_IsFormattingColumnsAllowed(bool value);
    public bool get_AllowFormattingRow();
    public void set_AllowFormattingRow(bool value);
    public bool get_IsFormattingRowsAllowed();
    public void set_IsFormattingRowsAllowed(bool value);
    public bool get_AllowInsertingColumn();
    public void set_AllowInsertingColumn(bool value);
    public bool get_IsInsertingColumnsAllowed();
    public void set_IsInsertingColumnsAllowed(bool value);
    public bool get_AllowInsertingHyperlink();
    public void set_AllowInsertingHyperlink(bool value);
    public bool get_IsInsertingHyperlinksAllowed();
    public void set_IsInsertingHyperlinksAllowed(bool value);
    public bool get_AllowInsertingRow();
    public void set_AllowInsertingRow(bool value);
    public bool get_IsInsertingRowsAllowed();
    public void set_IsInsertingRowsAllowed(bool value);
    public bool get_AllowSorting();
    public void set_AllowSorting(bool value);
    public bool get_IsSortingAllowed();
    public void set_IsSortingAllowed(bool value);
    public bool get_AllowUsingPivotTable();
    public void set_AllowUsingPivotTable(bool value);
    public bool get_IsUsingPivotTablesAllowed();
    public void set_IsUsingPivotTablesAllowed(bool value);
    public bool get_AllowEditingContent();
    public void set_AllowEditingContent(bool value);
    public bool get_IsEditingContentsAllowed();
    public void set_IsEditingContentsAllowed(bool value);
    public bool get_AllowEditingObject();
    public void set_AllowEditingObject(bool value);
    public bool get_IsEditingObjectsAllowed();
    public void set_IsEditingObjectsAllowed(bool value);
    public bool get_AllowEditingScenario();
    public void set_AllowEditingScenario(bool value);
    public bool get_IsEditingScenariosAllowed();
    public void set_IsEditingScenariosAllowed(bool value);
    public string get_Password();
    public void set_Password(string value);
    internal ushort ();
    internal ushort ();
    internal void (ushort );
    public int GetPasswordHash();
    public bool get_IsProtectedWithPassword();
    public bool VerifyPassword(string password);
    public bool get_AllowSelectingLockedCell();
    public void set_AllowSelectingLockedCell(bool value);
    public bool get_IsSelectingLockedCellsAllowed();
    public void set_IsSelectingLockedCellsAllowed(bool value);
    public bool get_AllowSelectingUnlockedCell();
    public void set_AllowSelectingUnlockedCell(bool value);
    public bool get_IsSelectingUnlockedCellsAllowed();
    public void set_IsSelectingUnlockedCellsAllowed(bool value);
}
public enum Aspose.Cells.ProtectionType : Enum {
    public int value__;
    public static ProtectionType All;
    public static ProtectionType Contents;
    public static ProtectionType Objects;
    public static ProtectionType Scenarios;
    public static ProtectionType Structure;
    public static ProtectionType Windows;
    public static ProtectionType None;
}
public class Aspose.Cells.QueryTable : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal DataSorter ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    public int ConnectionId { get; }
    public ExternalConnection ExternalConnection { get; }
    public string Name { get; }
    public Range ResultRange { get; }
    public bool PreserveFormatting { get; public set; }
    public bool AdjustColumnWidth { get; public set; }
    internal QueryTable(object );
    internal void (QueryTable , CopyOptions );
    public int get_ConnectionId();
    public ExternalConnection get_ExternalConnection();
    public string get_Name();
    internal Worksheet ();
    public Range get_ResultRange();
    internal Name (int );
    internal string ();
    internal int ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
    internal DataSorter ();
    internal CellArea ();
    internal  ();
    internal  ();
    internal int ();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool get_PreserveFormatting();
    public void set_PreserveFormatting(bool value);
    public bool get_AdjustColumnWidth();
    public void set_AdjustColumnWidth(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.QueryTableCollection : CollectionBase`1<QueryTable> {
    public QueryTable Item { get; }
    internal void (Worksheet , QueryTableCollection , CopyOptions );
    internal int (QueryTable );
    public QueryTable get_Item(int index);
    internal QueryTable (string );
}
public class Aspose.Cells.QueryTables.DataMashup : object {
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal PowerQueryFormulaCollection ;
    [DebuggerBrowsableAttribute("0")]
internal PowerQueryFormulaParameterCollection ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<string> ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public PowerQueryFormulaCollection PowerQueryFormulas { get; }
    public PowerQueryFormulaParameterCollection PowerQueryFormulaParameters { get; }
    public PowerQueryFormulaCollection get_PowerQueryFormulas();
    public PowerQueryFormulaParameterCollection get_PowerQueryFormulaParameters();
    internal void (DataMashup , CopyOptions );
}
public class Aspose.Cells.QueryTables.PowerQueryFormula : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private PowerQueryFormulaItemCollection ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string FormulaDefinition { get; }
    public string Name { get; public set; }
    public PowerQueryFormulaItemCollection PowerQueryFormulaItems { get; }
    internal PowerQueryFormula(string );
    public string get_FormulaDefinition();
    public string get_Name();
    public void set_Name(string value);
    public PowerQueryFormulaItemCollection get_PowerQueryFormulaItems();
    internal void (PowerQueryFormula , CopyOptions );
    internal string ();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.QueryTables.PowerQueryFormulaCollection : CollectionBase`1<PowerQueryFormula> {
    [DebuggerBrowsableAttribute("0")]
[]
private DataMashup ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    public PowerQueryFormula Item { get; }
    public PowerQueryFormula Item { get; }
    internal PowerQueryFormulaCollection(DataMashup );
    internal void (PowerQueryFormula );
    public PowerQueryFormula get_Item(int index);
    public PowerQueryFormula get_Item(string name);
    internal string ();
    internal void (PowerQueryFormulaCollection , CopyOptions );
}
public class Aspose.Cells.QueryTables.PowerQueryFormulaFunction : PowerQueryFormula {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string F { get; public set; }
    internal PowerQueryFormulaFunction(string );
    public string get_F();
    public void set_F(string value);
}
public class Aspose.Cells.QueryTables.PowerQueryFormulaItem : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
[]
private PowerQueryFormulaItemCollection ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public string Name { get; }
    public string Value { get; public set; }
    internal PowerQueryFormulaItem(PowerQueryFormulaItemCollection , string , string );
    public string get_Name();
    public string get_Value();
    public void set_Value(string value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.QueryTables.PowerQueryFormulaItemCollection : CollectionBase`1<PowerQueryFormulaItem> {
    [DebuggerBrowsableAttribute("0")]
[]
internal PowerQueryFormula ;
    public PowerQueryFormulaItem Item { get; }
    public PowerQueryFormulaItem Item { get; }
    internal PowerQueryFormulaItemCollection(PowerQueryFormula );
    public PowerQueryFormulaItem get_Item(int index);
    public PowerQueryFormulaItem get_Item(string name);
    internal int (string , string );
}
public class Aspose.Cells.QueryTables.PowerQueryFormulaParameter : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string ParameterDefinition { get; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_ParameterDefinition();
    internal void (PowerQueryFormulaParameter , CopyOptions );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.QueryTables.PowerQueryFormulaParameterCollection : CollectionBase`1<PowerQueryFormulaParameter> {
    public PowerQueryFormulaParameter Item { get; }
    public PowerQueryFormulaParameter Item { get; }
    public PowerQueryFormulaParameter get_Item(int index);
    public PowerQueryFormulaParameter get_Item(string name);
    internal void (string , string , string );
    internal void (PowerQueryFormulaParameterCollection , CopyOptions );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Range : object {
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Cells ;
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public Range CurrentRegion { get; }
    public Hyperlink[] Hyperlinks { get; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    public string Name { get; public set; }
    public string RefersTo { get; }
    public string Address { get; }
    public double Left { get; }
    public double Top { get; }
    public double Width { get; }
    public double Height { get; }
    public int FirstRow { get; }
    public int FirstColumn { get; }
    public object Value { get; public set; }
    public double ColumnWidth { get; public set; }
    public double RowHeight { get; public set; }
    public Cell Item { get; }
    public Range EntireColumn { get; }
    public Range EntireRow { get; }
    public Worksheet Worksheet { get; }
    internal Range(CellArea , Cells );
    internal Range(int , int , int , int , Cells );
    public void AutoFill(Range target);
    public void AutoFill(Range target, AutoFillType autoFillType);
    public Range get_CurrentRegion();
    public Hyperlink[] get_Hyperlinks();
    public Hyperlink AddHyperlink(string address, string textToDisplay, string screenTip);
    internal void (List`1<Hyperlink> );
    [("Cell")]
public IEnumerator GetEnumerator();
    private IEnumerator (bool );
    public bool IsIntersect(Range range);
    public Range Intersect(Range range);
    [ObsoleteAttribute("Use Range.UnionRanges() instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public Range[] UnionRang(Range range);
    public UnionRange UnionRanges(Range[] ranges);
    [ObsoleteAttribute("Use Range.UnionRanges() instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public ArrayList Union(Range range);
    internal CellArea ();
    internal void (int , int );
    internal void (int , int );
    public int get_RowCount();
    public int get_ColumnCount();
    public string get_Name();
    public void set_Name(string value);
    internal void (string );
    public string get_RefersTo();
    internal string ();
    public string get_Address();
    internal string ();
    internal string (int , int , bool );
    internal bool (int );
    internal bool (int );
    public bool IsBlank();
    public double get_Left();
    public double get_Top();
    public double get_Width();
    public double get_Height();
    public int get_FirstRow();
    public int get_FirstColumn();
    public void Merge();
    public void UnMerge();
    public void PutValue(string stringValue, bool isConverted, bool setStyle);
    public object get_Value();
    public void set_Value(object value);
    internal bool ();
    internal bool ();
    private void (Style );
    private PivotTable (Hashtable , int , int );
    public void SetStyle(Style style, bool explicitFlag);
    public void ApplyStyle(Style style, StyleFlag flag);
    internal void (Style , StyleFlag , bool );
    public void SetStyle(Style style);
    internal void (int );
    public void SetOutlineBorders(CellBorderType borderStyle, CellsColor borderColor);
    public void SetOutlineBorders(CellBorderType borderStyle, Color borderColor);
    public void SetOutlineBorders(CellBorderType[] borderStyles, Color[] borderColors);
    private void (Cell , Hashtable , BorderType , CellBorderType ,  );
    private static StyleFlag (BorderType );
    public void SetOutlineBorder(BorderType borderEdge, CellBorderType borderStyle, CellsColor borderColor);
    public void SetOutlineBorder(BorderType borderEdge, CellBorderType borderStyle, Color borderColor);
    public void SetInsideBorders(BorderType borderEdge, CellBorderType lineStyle, CellsColor borderColor);
    private void (int , Style , CellBorderType , CellsColor );
    public double get_ColumnWidth();
    public void set_ColumnWidth(double value);
    public double get_RowHeight();
    public void set_RowHeight(double value);
    internal void (Range );
    private void (int , int );
    private void (int , int );
    private void (int , int , int , int );
    public void MoveTo(int destRow, int destColumn);
    public void CopyData(Range range);
    public void CopyValue(Range range);
    internal void (CellArea , PasteOptions );
    public void CopyStyle(Range range);
    internal int (int , int );
    private void (Range , bool );
    private static bool (PasteType );
    public void Copy(Range range, PasteOptions options);
    private bool (Range );
    private void (Cell , double , double , PasteOperationType );
    private Range (Range , PasteOperationType , Worksheet[] );
    private void (Range , PasteOptions );
    public void Transpose();
    public void Copy(Range range);
    public Cell get_Item(int rowOffset, int columnOffset);
    public Cell GetCellOrNull(int rowOffset, int columnOffset);
    public Range GetOffset(int rowOffset, int columnOffset);
    public Range get_EntireColumn();
    public Range get_EntireRow();
    public Worksheet get_Worksheet();
    public virtual string ToString();
    internal void (StringBuilder );
    public Byte[] ToImage(ImageOrPrintOptions options);
    public string ToJson(JsonSaveOptions options);
    public Byte[] ToHtml(HtmlSaveOptions saveOptions);
    []
public DataTable ExportDataTable();
    []
public DataTable ExportDataTable(ExportTableOptions options);
    []
public DataTable ExportDataTableAsString();
    internal void (Cells , int , int , ShiftType , ShiftType );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.RangeCollection : CollectionBase`1<Range> {
    public Range Item { get; }
    public Range get_Item(int index);
    public int Add(Range range);
}
public class Aspose.Cells.ReferredArea : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    public bool IsExternalLink { get; }
    public string ExternalFileName { get; }
    public string SheetName { get; }
    public bool IsEntireRow { get; }
    public bool IsEntireColumn { get; }
    public bool IsArea { get; }
    public int EndColumn { get; }
    public int StartColumn { get; }
    public int EndRow { get; }
    public int StartRow { get; }
    internal ReferredArea( ,  );
    internal  ();
    private  ();
    public bool get_IsExternalLink();
    public string get_ExternalFileName();
    public string get_SheetName();
    public bool get_IsEntireRow();
    public bool get_IsEntireColumn();
    public bool get_IsArea();
    public int get_EndColumn();
    public int get_StartColumn();
    public int get_EndRow();
    public int get_StartRow();
    public object GetValues();
    public object GetValues(bool calculateFormulas);
    public object GetValue(int rowOffset, int colOffset);
    public object GetValue(int rowOffset, int colOffset, bool calculateFormulas);
    internal object ();
    internal object (bool );
    internal bool (ReferredArea );
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ReferredAreaCollection : CollectionBase`1<ReferredArea> {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public ReferredArea Item { get; }
    internal ReferredAreaCollection(bool );
    internal void (ReferredArea );
    internal void (ReferredArea );
    public ReferredArea get_Item(int index);
}
public enum Aspose.Cells.RenameStrategy : Enum {
    public int value__;
    public static RenameStrategy Exception;
    public static RenameStrategy Digit;
    public static RenameStrategy Letter;
}
public enum Aspose.Cells.Rendering.ColorDepth : Enum {
    public int value__;
    public static ColorDepth Default;
    public static ColorDepth Format1bpp;
    public static ColorDepth Format4bpp;
    public static ColorDepth Format8bpp;
    public static ColorDepth Format24bpp;
    public static ColorDepth Format32bpp;
}
public enum Aspose.Cells.Rendering.CommentTitleType : Enum {
    public int value__;
    public static CommentTitleType Cell;
    public static CommentTitleType Comment;
    public static CommentTitleType Note;
    public static CommentTitleType Reply;
}
public class Aspose.Cells.Rendering.DrawObject : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Cell ;
    [DebuggerBrowsableAttribute("0")]
[]
private Shape ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private DrawObjectEnum ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public Cell Cell { get; }
    public Shape Shape { get; }
    public Byte[] ImageBytes { get; }
    public DrawObjectEnum Type { get; }
    public int CurrentPage { get; }
    public int TotalPages { get; }
    public int SheetIndex { get; }
    internal DrawObject(Cell , int , int , int );
    internal DrawObject(Shape , Byte[] , int , int , int );
    public Cell get_Cell();
    public Shape get_Shape();
    public Byte[] get_ImageBytes();
    public DrawObjectEnum get_Type();
    public int get_CurrentPage();
    public int get_TotalPages();
    public int get_SheetIndex();
}
public enum Aspose.Cells.Rendering.DrawObjectEnum : Enum {
    public int value__;
    public static DrawObjectEnum Image;
    public static DrawObjectEnum Cell;
}
public abstract class Aspose.Cells.Rendering.DrawObjectEventHandler : object {
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public virtual void Draw(DrawObject drawObject, float x, float y, float width, float height);
    internal void (float , float );
    internal void (int , int , int );
    internal void ( );
    [("True")]
internal void (Shape , MemoryStream , RectangleF );
}
public enum Aspose.Cells.Rendering.ImageBinarizationMethod : Enum {
    public int value__;
    public static ImageBinarizationMethod Threshold;
    public static ImageBinarizationMethod FloydSteinbergDithering;
}
public class Aspose.Cells.Rendering.ImageOrPrintOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private SaveFormat ;
    [DebuggerBrowsableAttribute("0")]
private PrintPageEventHandler ;
    [DebuggerBrowsableAttribute("0")]
private QueryPageSettingsEventHandler ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private TiffCompression ;
    [DebuggerBrowsableAttribute("0")]
private ColorDepth ;
    [DebuggerBrowsableAttribute("0")]
private ImageBinarizationMethod ;
    [DebuggerBrowsableAttribute("0")]
private PrintingPageType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private ImageType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private DrawObjectEventHandler ;
    [DebuggerBrowsableAttribute("0")]
private ImageFormat ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private TextRenderingHint ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private SmoothingMode ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private PixelFormat ;
    [DebuggerBrowsableAttribute("0")]
private IWarningCallback ;
    [DebuggerBrowsableAttribute("0")]
private IPageSavingCallback ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private GridlineType ;
    [DebuggerBrowsableAttribute("0")]
private TextCrossType ;
    [DebuggerBrowsableAttribute("0")]
internal EmfType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private DefaultEditLanguage ;
    [DebuggerBrowsableAttribute("0")]
private SheetSet ;
    [DebuggerBrowsableAttribute("0")]
private EmfRenderSetting ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private RenderingWatermark ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [ObsoleteAttribute("For Tiff/Svg, use ImageType; For Xps, use Workbook.Save(string, SaveOptions) with XpsSaveOptions")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public SaveFormat SaveFormat { get; public set; }
    public PrintPageEventHandler CustomPrintPageEventHandler { get; public set; }
    public QueryPageSettingsEventHandler CustomQueryPageSettingsEventHandler { get; public set; }
    public bool PrintWithStatusDialog { get; public set; }
    public int HorizontalResolution { get; public set; }
    public int VerticalResolution { get; public set; }
    public TiffCompression TiffCompression { get; public set; }
    public ColorDepth TiffColorDepth { get; public set; }
    public ImageBinarizationMethod TiffBinarizationMethod { get; public set; }
    public PrintingPageType PrintingPage { get; public set; }
    public int Quality { get; public set; }
    public ImageType ImageType { get; public set; }
    [ObsoleteAttribute("Use Worksheet.AutoFitColumns(AutoFitterOptions) and Worksheet.AutoFitRows(AutoFitterOptions) instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsCellAutoFit { get; public set; }
    public bool OnePagePerSheet { get; public set; }
    public bool AllColumnsInOnePagePerSheet { get; public set; }
    public DrawObjectEventHandler DrawObjectEventHandler { get; public set; }
    [ObsoleteAttribute("Chart and Shape are always rendered as vector elements(e.g. point, line) for rendering quality.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public ImageFormat ChartImageType { get; public set; }
    public string EmbededImageNameInSvg { get; public set; }
    public bool SVGFitToViewPort { get; public set; }
    public bool OnlyArea { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public bool Transparent { get; public set; }
    public PixelFormat PixelFormat { get; public set; }
    public IWarningCallback WarningCallback { get; public set; }
    public IPageSavingCallback PageSavingCallback { get; public set; }
    public bool IsFontSubstitutionCharGranularity { get; public set; }
    public int PageIndex { get; public set; }
    public int PageCount { get; public set; }
    public bool IsOptimized { get; public set; }
    public string DefaultFont { get; public set; }
    public bool CheckWorkbookDefaultFont { get; public set; }
    public bool OutputBlankPageWhenNothingToPrint { get; public set; }
    public GridlineType GridlineType { get; public set; }
    public TextCrossType TextCrossType { get; public set; }
    public EmfType EmfType { get; public set; }
    public DefaultEditLanguage DefaultEditLanguage { get; public set; }
    public SheetSet SheetSet { get; public set; }
    public EmfRenderSetting EmfRenderSetting { get; public set; }
    public void set_SaveFormat(SaveFormat value);
    public SaveFormat get_SaveFormat();
    public void set_CustomPrintPageEventHandler(PrintPageEventHandler value);
    public PrintPageEventHandler get_CustomPrintPageEventHandler();
    public void set_CustomQueryPageSettingsEventHandler(QueryPageSettingsEventHandler value);
    public QueryPageSettingsEventHandler get_CustomQueryPageSettingsEventHandler();
    public void set_PrintWithStatusDialog(bool value);
    public bool get_PrintWithStatusDialog();
    public int get_HorizontalResolution();
    public void set_HorizontalResolution(int value);
    public int get_VerticalResolution();
    public void set_VerticalResolution(int value);
    public TiffCompression get_TiffCompression();
    public void set_TiffCompression(TiffCompression value);
    public ColorDepth get_TiffColorDepth();
    public void set_TiffColorDepth(ColorDepth value);
    public ImageBinarizationMethod get_TiffBinarizationMethod();
    public void set_TiffBinarizationMethod(ImageBinarizationMethod value);
    public PrintingPageType get_PrintingPage();
    public void set_PrintingPage(PrintingPageType value);
    public int get_Quality();
    public void set_Quality(int value);
    public ImageType get_ImageType();
    public void set_ImageType(ImageType value);
    internal ImageType ();
    internal void (ImageType );
    public bool get_IsCellAutoFit();
    public void set_IsCellAutoFit(bool value);
    public bool get_OnePagePerSheet();
    public void set_OnePagePerSheet(bool value);
    public bool get_AllColumnsInOnePagePerSheet();
    public void set_AllColumnsInOnePagePerSheet(bool value);
    public DrawObjectEventHandler get_DrawObjectEventHandler();
    public void set_DrawObjectEventHandler(DrawObjectEventHandler value);
    public ImageFormat get_ChartImageType();
    public void set_ChartImageType(ImageFormat value);
    public string get_EmbededImageNameInSvg();
    public void set_EmbededImageNameInSvg(string value);
    public bool get_SVGFitToViewPort();
    public void set_SVGFitToViewPort(bool value);
    public bool get_OnlyArea();
    public void set_OnlyArea(bool value);
    public TextRenderingHint get_TextRenderingHint();
    public void set_TextRenderingHint(TextRenderingHint value);
    public SmoothingMode get_SmoothingMode();
    public void set_SmoothingMode(SmoothingMode value);
    public bool get_Transparent();
    public void set_Transparent(bool value);
    public PixelFormat get_PixelFormat();
    public void set_PixelFormat(PixelFormat value);
    public void set_WarningCallback(IWarningCallback value);
    public IWarningCallback get_WarningCallback();
    public IPageSavingCallback get_PageSavingCallback();
    public void set_PageSavingCallback(IPageSavingCallback value);
    public void set_IsFontSubstitutionCharGranularity(bool value);
    public bool get_IsFontSubstitutionCharGranularity();
    internal void (bool );
    internal bool ();
    public void set_PageIndex(int value);
    public int get_PageIndex();
    public void set_PageCount(int value);
    public int get_PageCount();
    internal bool ();
    [ObsoleteAttribute("Use SetDesiredSize(int, int, bool) by setting param keepAspectRatio to false instead.")]
[]
public void SetDesiredSize(int desiredWidth, int desiredHeight);
    public void SetDesiredSize(int desiredWidth, int desiredHeight, bool keepAspectRatio);
    public bool get_IsOptimized();
    public void set_IsOptimized(bool value);
    public string get_DefaultFont();
    public void set_DefaultFont(string value);
    public bool get_CheckWorkbookDefaultFont();
    public void set_CheckWorkbookDefaultFont(bool value);
    public bool get_OutputBlankPageWhenNothingToPrint();
    public void set_OutputBlankPageWhenNothingToPrint(bool value);
    public GridlineType get_GridlineType();
    public void set_GridlineType(GridlineType value);
    public TextCrossType get_TextCrossType();
    public void set_TextCrossType(TextCrossType value);
    public EmfType get_EmfType();
    public void set_EmfType(EmfType value);
    internal bool ();
    internal void (bool );
    public DefaultEditLanguage get_DefaultEditLanguage();
    public void set_DefaultEditLanguage(DefaultEditLanguage value);
    public SheetSet get_SheetSet();
    public void set_SheetSet(SheetSet value);
    public EmfRenderSetting get_EmfRenderSetting();
    public void set_EmfRenderSetting(EmfRenderSetting value);
    internal void (ImageOrPrintOptions );
    internal bool ();
    internal void (bool );
    internal RenderingWatermark ();
    internal void (RenderingWatermark );
    internal bool ();
    internal void (bool );
    internal  ();
}
public interface Aspose.Cells.Rendering.IPageSavingCallback {
    public abstract virtual void PageStartSaving(PageStartSavingArgs args);
    public abstract virtual void PageEndSaving(PageEndSavingArgs args);
}
public class Aspose.Cells.Rendering.PageEndSavingArgs : PageSavingArgs {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool HasMorePages { get; public set; }
    internal PageEndSavingArgs(int , int );
    public bool get_HasMorePages();
    public void set_HasMorePages(bool value);
}
public class Aspose.Cells.Rendering.PageSavingArgs : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public int PageIndex { get; }
    public int PageCount { get; }
    internal PageSavingArgs(int , int );
    public int get_PageIndex();
    public int get_PageCount();
}
public class Aspose.Cells.Rendering.PageStartSavingArgs : PageSavingArgs {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool IsToOutput { get; public set; }
    internal PageStartSavingArgs(int , int );
    public bool get_IsToOutput();
    public void set_IsToOutput(bool value);
}
public class Aspose.Cells.Rendering.PdfBookmarkEntry : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
[]
private Cell ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal PointF ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public string Text { get; public set; }
    public Cell Destination { get; public set; }
    public string DestinationName { get; public set; }
    public ArrayList SubEntry { get; public set; }
    public bool IsOpen { get; public set; }
    public bool IsCollapse { get; public set; }
    public string get_Text();
    public void set_Text(string value);
    public Cell get_Destination();
    public void set_Destination(Cell value);
    public string get_DestinationName();
    public void set_DestinationName(string value);
    public ArrayList get_SubEntry();
    public void set_SubEntry(ArrayList value);
    internal void (int , PointF );
    internal bool ();
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public bool get_IsCollapse();
    public void set_IsCollapse(bool value);
}
public enum Aspose.Cells.Rendering.PdfCompliance : Enum {
    public int value__;
    [ObsoleteAttribute("Use PdfCompliance.Pdf14 instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static PdfCompliance None;
    public static PdfCompliance Pdf14;
    public static PdfCompliance Pdf15;
    public static PdfCompliance Pdf16;
    public static PdfCompliance Pdf17;
    public static PdfCompliance PdfA1b;
    public static PdfCompliance PdfA1a;
    public static PdfCompliance PdfA2b;
    public static PdfCompliance PdfA2u;
    public static PdfCompliance PdfA2a;
    public static PdfCompliance PdfA3b;
    public static PdfCompliance PdfA3u;
    public static PdfCompliance PdfA3a;
}
public enum Aspose.Cells.Rendering.PdfCompressionCore : Enum {
    public int value__;
    public static PdfCompressionCore None;
    public static PdfCompressionCore Rle;
    public static PdfCompressionCore Lzw;
    public static PdfCompressionCore Flate;
}
public enum Aspose.Cells.Rendering.PdfCustomPropertiesExport : Enum {
    public int value__;
    public static PdfCustomPropertiesExport None;
    public static PdfCustomPropertiesExport Standard;
}
public enum Aspose.Cells.Rendering.PdfFontEncoding : Enum {
    public int value__;
    public static PdfFontEncoding Identity;
    public static PdfFontEncoding AnsiPrefer;
}
public enum Aspose.Cells.Rendering.PdfOptimizationType : Enum {
    public int value__;
    public static PdfOptimizationType Standard;
    public static PdfOptimizationType MinimumSize;
}
public class Aspose.Cells.Rendering.PdfSecurity.PdfSecurityOptions : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public string UserPassword { get; public set; }
    public string OwnerPassword { get; public set; }
    public bool PrintPermission { get; public set; }
    public bool ModifyDocumentPermission { get; public set; }
    [ObsoleteAttribute("Use ExtractContentPermission property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool ExtractContentPermissionObsolete { get; public set; }
    public bool AnnotationsPermission { get; public set; }
    public bool FillFormsPermission { get; public set; }
    public bool ExtractContentPermission { get; public set; }
    public bool AccessibilityExtractContent { get; public set; }
    public bool AssembleDocumentPermission { get; public set; }
    public bool FullQualityPrintPermission { get; public set; }
    public string get_UserPassword();
    public void set_UserPassword(string value);
    public string get_OwnerPassword();
    public void set_OwnerPassword(string value);
    public bool get_PrintPermission();
    public void set_PrintPermission(bool value);
    public bool get_ModifyDocumentPermission();
    public void set_ModifyDocumentPermission(bool value);
    public bool get_ExtractContentPermissionObsolete();
    public void set_ExtractContentPermissionObsolete(bool value);
    public bool get_AnnotationsPermission();
    public void set_AnnotationsPermission(bool value);
    public bool get_FillFormsPermission();
    public void set_FillFormsPermission(bool value);
    public bool get_ExtractContentPermission();
    public void set_ExtractContentPermission(bool value);
    public bool get_AccessibilityExtractContent();
    public void set_AccessibilityExtractContent(bool value);
    public bool get_AssembleDocumentPermission();
    public void set_AssembleDocumentPermission(bool value);
    public bool get_FullQualityPrintPermission();
    public void set_FullQualityPrintPermission(bool value);
}
public class Aspose.Cells.Rendering.RenderingFont : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private FontStyle ;
    [DebuggerBrowsableAttribute("0")]
private Color ;
    public string Name { get; }
    public float Size { get; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public Color Color { get; public set; }
    public RenderingFont(string fontName, float fontSize);
    public string get_Name();
    public float get_Size();
    public bool get_Bold();
    public void set_Bold(bool value);
    public bool get_Italic();
    public void set_Italic(bool value);
    internal FontStyle ();
    public Color get_Color();
    public void set_Color(Color value);
}
public class Aspose.Cells.Rendering.RenderingWatermark : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private RenderingFont ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private TextAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
private TextAlignmentType ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    [DebuggerBrowsableAttribute("0")]
private float ;
    public float Rotation { get; public set; }
    public int ScaleToPagePercent { get; public set; }
    public float Opacity { get; public set; }
    public bool IsBackground { get; public set; }
    public string Text { get; }
    public RenderingFont Font { get; }
    public Byte[] Image { get; }
    public TextAlignmentType HAlignment { get; public set; }
    public TextAlignmentType VAlignment { get; public set; }
    public float OffsetX { get; public set; }
    public float OffsetY { get; public set; }
    public RenderingWatermark(string text, RenderingFont renderingFont);
    public RenderingWatermark(Byte[] imageData);
    public float get_Rotation();
    public void set_Rotation(float value);
    internal float ();
    public int get_ScaleToPagePercent();
    public void set_ScaleToPagePercent(int value);
    public float get_Opacity();
    public void set_Opacity(float value);
    public bool get_IsBackground();
    public void set_IsBackground(bool value);
    public string get_Text();
    public RenderingFont get_Font();
    public Byte[] get_Image();
    public TextAlignmentType get_HAlignment();
    public void set_HAlignment(TextAlignmentType value);
    public TextAlignmentType get_VAlignment();
    public void set_VAlignment(TextAlignmentType value);
    public float get_OffsetX();
    public void set_OffsetX(float value);
    public float get_OffsetY();
    public void set_OffsetY(float value);
}
public class Aspose.Cells.Rendering.SheetPrintingPreview : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public int EvaluatedPageCount { get; }
    public SheetPrintingPreview(Worksheet sheet, ImageOrPrintOptions options);
    public int get_EvaluatedPageCount();
}
public class Aspose.Cells.Rendering.SheetRender : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
[]
private ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    public int PageCount { get; }
    public double PageScale { get; }
    public SheetRender(Worksheet worksheet, ImageOrPrintOptions options);
    public int get_PageCount();
    public double get_PageScale();
    internal int ();
    public Single[] GetPageSizeInch(int pageIndex);
    internal CellArea (int );
    private void (int );
    internal void (int , Graphics , float , float , float , float );
    internal void (int , Graphics , float , float );
    public void ToImage(int pageIndex, string fileName);
    []
public void ToImage(int pageIndex, Stream stream);
    internal void (int , Stream ,  );
    internal void (int , Stream ,  );
    internal Bitmap (int );
    public void ToTiff(Stream stream);
    public void ToTiff(string filename);
    []
public void ToPrinter(string printerName);
    []
public void ToPrinter(string printerName, string jobName);
    public void ToPrinter(PrinterSettings printerSettings);
    public void ToPrinter(PrinterSettings printerSettings, string jobName);
    [ObsoleteAttribute("Use ToPrinter(string PrinterName) and ImageOrPrintOptions.PageIndex, PageCount instead.")]
[]
public void ToPrinter(string printerName, int printPageIndex, int printPageCount);
    public int CustomPrint(bool nextPageAfterPrint, PrintPageEventArgs printPageEventArgs);
    private void (int );
    public void Dispose();
}
public class Aspose.Cells.Rendering.SheetSet : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private static SheetSet ;
    [DebuggerBrowsableAttribute("0")]
private static SheetSet ;
    [DebuggerBrowsableAttribute("0")]
private static SheetSet ;
    public static SheetSet Active { get; }
    public static SheetSet Visible { get; }
    public static SheetSet All { get; }
    private SheetSet( );
    public SheetSet(Int32[] sheets);
    private static SheetSet();
    public static SheetSet get_Active();
    public static SheetSet get_Visible();
    public static SheetSet get_All();
    internal  (WorksheetCollection );
}
public enum Aspose.Cells.Rendering.TiffCompression : Enum {
    public int value__;
    public static TiffCompression CompressionNone;
    public static TiffCompression CompressionRle;
    public static TiffCompression CompressionLZW;
    public static TiffCompression CompressionCCITT3;
    public static TiffCompression CompressionCCITT4;
}
public class Aspose.Cells.Rendering.WorkbookPrintingPreview : object {
    [DebuggerBrowsableAttribute("0")]
private  ;
    public int EvaluatedPageCount { get; }
    public WorkbookPrintingPreview(Workbook workbook, ImageOrPrintOptions options);
    public int get_EvaluatedPageCount();
}
public class Aspose.Cells.Rendering.WorkbookRender : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
[]
private ImageOrPrintOptions ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    public int PageCount { get; }
    public WorkbookRender(Workbook workbook, ImageOrPrintOptions options);
    public int get_PageCount();
    public Single[] GetPageSizeInch(int pageIndex);
    []
public void ToImage(Stream stream);
    public void ToImage(string filename);
    public void ToImage(int pageIndex, string fileName);
    []
public void ToImage(int pageIndex, Stream stream);
    internal Bitmap (int );
    private void (int );
    private void (int );
    []
public void ToPrinter(string printerName);
    []
public void ToPrinter(string printerName, string jobName);
    public void ToPrinter(PrinterSettings PrinterSettings);
    public void ToPrinter(PrinterSettings PrinterSettings, string jobName);
    [ObsoleteAttribute("Use ToPrinter(string PrinterName) and ImageOrPrintOptions.PageIndex, PageCount instead.")]
[]
public void ToPrinter(string printerName, int printPageIndex, int printPageCount);
    public int CustomPrint(bool nextPageAfterPrint, PrintPageEventArgs printPageEventArgs);
    public void Dispose();
}
public class Aspose.Cells.ReplaceOptions : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal FontSetting[] ;
    public bool CaseSensitive { get; public set; }
    public bool MatchEntireCellContents { get; public set; }
    public bool RegexKey { get; public set; }
    public FontSetting[] FontSettings { get; public set; }
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public bool get_MatchEntireCellContents();
    public void set_MatchEntireCellContents(bool value);
    public bool get_RegexKey();
    public void set_RegexKey(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public FontSetting[] get_FontSettings();
    public void set_FontSettings(FontSetting[] value);
}
public enum Aspose.Cells.ResourceLoadingType : Enum {
    public int value__;
    public static ResourceLoadingType Default;
    public static ResourceLoadingType Skip;
    public static ResourceLoadingType UserProvided;
}
public class Aspose.Cells.Revisions.HighlightChangesOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public HighlightChangesOptions(bool highlightOnScreen, bool listOnNewSheet);
}
public abstract class Aspose.Cells.Revisions.Revision : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal RevisionCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public RevisionType Type { get; }
    public Worksheet Worksheet { get; }
    public int Id { get; }
    internal Revision(RevisionCollection );
    public virtual RevisionType get_Type();
    public Worksheet get_Worksheet();
    public int get_Id();
    internal virtual WorksheetCollection 4hbkvv86sb9zvlglsty9cm2p5jqb6lkb();
    internal virtual void 4hbkvv86sb9zvlglsty9cm2p5jqb6lkb(HighlightChangesOptions );
    internal virtual int 4hbkvv86sb9zvlglsty9cm2p5jqb6lkb(Cells , int , HighlightChangesOptions );
    internal void (Row );
}
public enum Aspose.Cells.Revisions.RevisionActionType : Enum {
    public int value__;
    public static RevisionActionType Add;
    public static RevisionActionType Delete;
    public static RevisionActionType DeleteColumn;
    public static RevisionActionType DeleteRow;
    public static RevisionActionType InsertColumn;
    public static RevisionActionType InsertRow;
}
public class Aspose.Cells.Revisions.RevisionAutoFormat : Revision {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    public RevisionType Type { get; }
    public CellArea CellArea { get; }
    internal RevisionAutoFormat(RevisionCollection );
    public virtual RevisionType get_Type();
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public CellArea get_CellArea();
}
public class Aspose.Cells.Revisions.RevisionCellChange : Revision {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Font[] ;
    public RevisionType Type { get; }
    public string CellName { get; }
    public int Row { get; }
    public int Column { get; }
    public bool IsNewFormatted { get; }
    public bool IsOldFormatted { get; }
    public string OldFormula { get; }
    public object OldValue { get; }
    public object NewValue { get; }
    public string NewFormula { get; }
    public Style NewStyle { get; }
    public Style OldStyle { get; }
    internal RevisionCellChange(RevisionCollection );
    public virtual RevisionType get_Type();
    public string get_CellName();
    public int get_Row();
    public int get_Column();
    public bool get_IsNewFormatted();
    public bool get_IsOldFormatted();
    private static string (Workbook ,  );
    public string get_OldFormula();
    public object get_OldValue();
    public object get_NewValue();
    public string get_NewFormula();
    public Style get_NewStyle();
    public Style get_OldStyle();
    internal virtual void 4hbkvv86sb9zvlglsty9cm2p5jqb6lkb(HighlightChangesOptions );
    internal virtual int 4hbkvv86sb9zvlglsty9cm2p5jqb6lkb(Cells , int , HighlightChangesOptions );
}
public class Aspose.Cells.Revisions.RevisionCellComment : Revision {
    [DebuggerBrowsableAttribute("0")]
internal RevisionActionType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public RevisionType Type { get; }
    public int Row { get; }
    public int Column { get; }
    public string CellName { get; public set; }
    public RevisionActionType ActionType { get; }
    public bool IsOldComment { get; }
    public int OldLength { get; }
    public int NewLength { get; }
    internal RevisionCellComment(RevisionCollection );
    public virtual RevisionType get_Type();
    internal string ();
    internal void (string );
    public int get_Row();
    public int get_Column();
    public string get_CellName();
    public void set_CellName(string value);
    public RevisionActionType get_ActionType();
    public bool get_IsOldComment();
    public int get_OldLength();
    public int get_NewLength();
}
public class Aspose.Cells.Revisions.RevisionCellMove : Revision {
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal RevisionCollection ;
    public RevisionType Type { get; }
    public CellArea SourceArea { get; }
    public CellArea DestinationArea { get; }
    public Worksheet SourceWorksheet { get; }
    internal RevisionCellMove(RevisionCollection );
    public virtual RevisionType get_Type();
    public CellArea get_SourceArea();
    internal string ();
    internal void (string );
    public CellArea get_DestinationArea();
    internal string ();
    internal void (string );
    internal RevisionCollection ();
    public Worksheet get_SourceWorksheet();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Revisions.RevisionCollection : CollectionBase`1<Revision> {
    [DebuggerBrowsableAttribute("0")]
[]
internal object ;
    public Revision Item { get; }
    internal RevisionCollection(object );
    internal Workbook ();
    public Revision get_Item(int index);
    internal RevisionLog ();
    internal int (Revision );
    internal void ( );
}
public class Aspose.Cells.Revisions.RevisionCustomView : Revision {
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal RevisionActionType ;
    public RevisionType Type { get; }
    public RevisionActionType ActionType { get; }
    public Guid Guid { get; }
    internal RevisionCustomView(RevisionCollection );
    public virtual RevisionType get_Type();
    public RevisionActionType get_ActionType();
    public Guid get_Guid();
}
public class Aspose.Cells.Revisions.RevisionDefinedName : Revision {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public RevisionType Type { get; }
    public string Text { get; }
    public string OldFormula { get; }
    public string NewFormula { get; }
    internal RevisionDefinedName(RevisionCollection );
    public virtual RevisionType get_Type();
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal byte ();
    internal void (byte );
    internal byte ();
    internal void (byte );
    internal byte ();
    internal void (byte );
    internal byte ();
    internal void (byte );
    public string get_Text();
    public string get_OldFormula();
    public string get_NewFormula();
}
public class Aspose.Cells.Revisions.RevisionFormat : Revision {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public RevisionType Type { get; }
    public CellArea[] Areas { get; }
    public Style Style { get; }
    internal RevisionFormat(RevisionCollection );
    public virtual RevisionType get_Type();
    public CellArea[] get_Areas();
    public Style get_Style();
}
public class Aspose.Cells.Revisions.RevisionHeader : object {
    [DebuggerBrowsableAttribute("0")]
internal DateTime ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Int32[] ;
    [DebuggerBrowsableAttribute("0")]
internal Int32[] ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public DateTime SavedTime { get; public set; }
    public string UserName { get; public set; }
    public DateTime get_SavedTime();
    public void set_SavedTime(DateTime value);
    public string get_UserName();
    public void set_UserName(string value);
}
public class Aspose.Cells.Revisions.RevisionInsertDelete : Revision {
    [DebuggerBrowsableAttribute("0")]
internal RevisionActionType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal RevisionCollection ;
    public RevisionType Type { get; }
    public CellArea CellArea { get; }
    public RevisionActionType ActionType { get; }
    public RevisionCollection Revisions { get; }
    internal RevisionInsertDelete(RevisionCollection );
    public virtual RevisionType get_Type();
    public CellArea get_CellArea();
    public RevisionActionType get_ActionType();
    public RevisionCollection get_Revisions();
    internal virtual int 4hbkvv86sb9zvlglsty9cm2p5jqb6lkb(Cells , int , HighlightChangesOptions );
    private static string (RevisionActionType , bool );
}
public class Aspose.Cells.Revisions.RevisionInsertSheet : Revision {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal RevisionActionType ;
    public RevisionType Type { get; }
    public RevisionActionType ActionType { get; }
    public string Name { get; }
    public int SheetPosition { get; }
    internal RevisionInsertSheet(RevisionCollection );
    public virtual RevisionType get_Type();
    public RevisionActionType get_ActionType();
    public string get_Name();
    public int get_SheetPosition();
    internal virtual int 4hbkvv86sb9zvlglsty9cm2p5jqb6lkb(Cells , int , HighlightChangesOptions );
}
public class Aspose.Cells.Revisions.RevisionLog : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal RevisionLogCollection ;
    [DebuggerBrowsableAttribute("0")]
internal RevisionHeader ;
    [DebuggerBrowsableAttribute("0")]
internal RevisionCollection ;
    public RevisionHeader MetadataTable { get; }
    public RevisionCollection Revisions { get; }
    internal RevisionLog(RevisionLogCollection );
    public RevisionHeader get_MetadataTable();
    public RevisionCollection get_Revisions();
    internal void (HighlightChangesOptions );
    internal int (Cells , int , HighlightChangesOptions );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Revisions.RevisionLogCollection : CollectionBase`1<RevisionLog> {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal long ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public int DaysPreservingHistory { get; public set; }
    public RevisionLog Item { get; }
    internal RevisionLogCollection(Workbook );
    public int get_DaysPreservingHistory();
    public void set_DaysPreservingHistory(int value);
    public RevisionLog get_Item(int index);
    internal int (RevisionLog );
    internal void ();
    internal void ( );
    public void HighlightChanges(HighlightChangesOptions options);
}
public class Aspose.Cells.Revisions.RevisionMergeConflict : Revision {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public RevisionType Type { get; }
    internal RevisionMergeConflict(RevisionCollection );
    public virtual RevisionType get_Type();
}
public class Aspose.Cells.Revisions.RevisionQueryTable : Revision {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal CellArea ;
    public RevisionType Type { get; }
    public CellArea CellArea { get; }
    public int FieldId { get; }
    internal RevisionQueryTable(RevisionCollection );
    public virtual RevisionType get_Type();
    public CellArea get_CellArea();
    public int get_FieldId();
}
public class Aspose.Cells.Revisions.RevisionRenameSheet : Revision {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public RevisionType Type { get; }
    public string OldName { get; }
    public string NewName { get; }
    internal RevisionRenameSheet(RevisionCollection );
    public virtual RevisionType get_Type();
    public string get_OldName();
    public string get_NewName();
    internal virtual int 4hbkvv86sb9zvlglsty9cm2p5jqb6lkb(Cells , int , HighlightChangesOptions );
    private string (string );
}
public enum Aspose.Cells.Revisions.RevisionType : Enum {
    public int value__;
    public static RevisionType CustomView;
    public static RevisionType DefinedName;
    public static RevisionType ChangeCells;
    public static RevisionType AutoFormat;
    public static RevisionType MergeConflict;
    public static RevisionType Comment;
    public static RevisionType Format;
    public static RevisionType InsertSheet;
    public static RevisionType MoveCells;
    public static RevisionType Undo;
    public static RevisionType QueryTable;
    public static RevisionType InsertDelete;
    public static RevisionType RenameSheet;
    public static RevisionType Unknown;
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Row : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal RowCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Cells ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool IsBlank { get; }
    public Cell Item { get; }
    public bool IsCollapsed { get; public set; }
    public double Height { get; public set; }
    public bool IsHidden { get; public set; }
    public int Index { get; }
    public byte GroupLevel { get; public set; }
    public bool IsHeightMatched { get; public set; }
    public bool HasCustomStyle { get; }
    public Cell FirstCell { get; }
    public Cell FirstDataCell { get; }
    public Cell LastCell { get; }
    public Cell LastDataCell { get; }
    internal Row(Cells , RowCollection , int );
    internal Row(Cells , RowCollection ,  , bool );
    internal void (int );
    internal void ();
    internal int ();
    internal bool ();
    internal Cell (int );
    internal void ();
    internal void (int , int );
    internal void (int , int );
    internal void ();
    public Cell GetCellByIndex(int index);
    internal Cell (int );
    public bool get_IsBlank();
    internal static bool ( ,  );
    internal bool ();
    internal static bool (Cells ,  ,  );
    public Cell get_Item(int column);
    [("Cell")]
public sealed virtual IEnumerator GetEnumerator();
    [("Cell")]
public IEnumerator GetEnumerator(bool reversed, bool sync);
    internal Cell (int );
    internal int (int );
    internal Cell (int , bool , bool );
    internal Cell (RowCollection , int , int , bool , bool );
    internal Cell (RowCollection , int , bool , bool , bool );
    private void (Cell );
    public Cell GetCellOrNull(int column);
    internal int ();
    internal void (int );
    internal void (ushort );
    internal ushort ();
    internal void (ushort );
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
    public double get_Height();
    public void set_Height(double value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    internal double ();
    internal bool ();
    internal void (bool );
    public int get_Index();
    internal byte ();
    internal void (byte );
    public byte get_GroupLevel();
    public void set_GroupLevel(byte value);
    public bool get_IsHeightMatched();
    public void set_IsHeightMatched(bool value);
    internal Style ();
    public Style GetStyle();
    public void SetStyle(Style style);
    public bool get_HasCustomStyle();
    public void CopySettings(Row source, bool checkStyle);
    internal void (Row );
    internal void (Row );
    internal Worksheet ();
    internal void (Row , CopyOptions );
    internal int ();
    internal int ();
    public Cell get_FirstCell();
    public Cell get_FirstDataCell();
    public Cell get_LastCell();
    public Cell get_LastDataCell();
    private void (Style , StyleFlag );
    public void ApplyStyle(Style style, StyleFlag flag);
    internal void (Style , StyleFlag );
    internal bool (Row );
    public virtual bool Equals(object obj);
    public bool Equals(Row row);
    internal static bool ( );
    internal static void ( , bool );
    internal static bool ( , int );
    internal static void ( , bool );
    internal static bool ( );
    internal static void ( , bool );
    internal static bool ( , int );
    internal static byte ( );
    internal static void ( , byte );
    internal static void ( , bool );
    internal static byte ( , int );
    internal static int ( );
    internal static void ( , int );
    internal static void (Cells ,  , bool );
    internal static Style (Cells ,  );
    internal static Style (Cells ,  );
    internal static void ( , int );
    internal static double ( );
    internal static double ( , int );
    internal static double ( );
    internal static double ( , int );
    internal static int ( );
    internal static int ( , int );
    internal static void (Cells ,  , double );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.RowCollection : object {
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Cells ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    public int Count { get; }
    public Row Item { get; }
    internal RowCollection(Cells ,  );
    internal void ( );
    internal void ( );
    internal void ( );
    internal void ( , bool );
    internal void ();
    internal void ();
    internal void (double , bool );
    public int get_Count();
    [("Row")]
public sealed virtual IEnumerator GetEnumerator();
    [("Row")]
public IEnumerator GetEnumerator(bool reversed, bool sync);
    public Row GetRowByIndex(int index);
    public Row get_Item(int rowIndex);
    internal Row (int , int );
    internal  (int );
    internal Row (int , bool );
    internal Row (int , int , bool );
    internal int (int , int );
    internal Row (int , bool , bool , bool );
    internal int (int );
    internal int (int );
    internal void (int , int , int , int );
    internal void (int , int );
    public void Clear();
    internal Cell (int , int , bool , bool , bool );
    public void RemoveAt(int index);
    internal int ();
    internal int (int , int );
    internal void (int , int , int , RowCollection );
    internal void (int , int , InsertOptions );
    private void (int , int , int , InsertOptions );
    internal void (CellArea );
    internal void (CellArea );
    internal void (CellArea , int );
    internal void (CellArea , int );
    internal void (RowCollection , CopyOptions );
    internal void (RowCollection , int , int , int , CopyOptions );
    internal void (RowCollection , int , int , int , CopyOptions );
    internal void (int , int );
    internal void (CellArea , int );
    internal void (CellArea );
    internal void (CellArea , int );
    internal void (CellArea );
    private void (CellArea , int , int );
    internal int (int );
    internal void (int , int );
    internal void (int , int , bool );
    internal void ( , int , int , bool );
    internal void (int , bool );
    internal void (int );
    internal void (int , int );
    internal void (int , double );
    internal void (int , int , double );
}
public enum Aspose.Cells.SaveFormat : Enum {
    public int value__;
    public static SaveFormat Csv;
    [ObsoleteAttribute("Use SaveFormat.Csv instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static SaveFormat CSV;
    public static SaveFormat Xlsx;
    public static SaveFormat Xlsm;
    public static SaveFormat Xltx;
    public static SaveFormat Xltm;
    public static SaveFormat Xlam;
    public static SaveFormat Tsv;
    [ObsoleteAttribute("Use FileFormatType.Tsv instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static SaveFormat TSV;
    public static SaveFormat TabDelimited;
    public static SaveFormat Html;
    public static SaveFormat MHtml;
    public static SaveFormat Ods;
    [ObsoleteAttribute("Use SaveFormat.Ods instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static SaveFormat ODS;
    public static SaveFormat Excel97To2003;
    public static SaveFormat SpreadsheetML;
    public static SaveFormat Xlsb;
    public static SaveFormat Auto;
    public static SaveFormat Unknown;
    public static SaveFormat Pdf;
    public static SaveFormat Xps;
    [ObsoleteAttribute("Use SaveFormat.Xps instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static SaveFormat XPS;
    public static SaveFormat Tiff;
    [ObsoleteAttribute("Use SaveFormat.Tiff instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static SaveFormat TIFF;
    public static SaveFormat Svg;
    [ObsoleteAttribute("Use SaveFormat.Svg instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static SaveFormat SVG;
    public static SaveFormat Dif;
    public static SaveFormat Ots;
    public static SaveFormat Xlt;
    public static SaveFormat Xml;
    public static SaveFormat Numbers;
    public static SaveFormat Markdown;
    public static SaveFormat Fods;
    [ObsoleteAttribute("Use SaveFormat.Fods instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static SaveFormat FODS;
    public static SaveFormat Sxc;
    [ObsoleteAttribute("Use SaveFormat.Sxc instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static SaveFormat SXC;
    public static SaveFormat Pptx;
    public static SaveFormat Docx;
    public static SaveFormat Emf;
    public static SaveFormat Jpg;
    public static SaveFormat Png;
    public static SaveFormat Bmp;
    public static SaveFormat Gif;
    public static SaveFormat Json;
    public static SaveFormat SqlScript;
    public static SaveFormat XHtml;
    public static SaveFormat Epub;
    public static SaveFormat Azw3;
}
public class Aspose.Cells.SaveOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal FileFormatType ;
    protected SaveFormat m_SaveFormat;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private IWarningCallback ;
    [DebuggerBrowsableAttribute("0")]
internal LightCellsDataProvider ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public SaveFormat SaveFormat { get; }
    public bool ClearData { get; public set; }
    public string CachedFileFolder { get; public set; }
    public bool ValidateMergedAreas { get; public set; }
    public bool MergeAreas { get; public set; }
    public bool CreateDirectory { get; public set; }
    public bool SortNames { get; public set; }
    public bool SortExternalNames { get; public set; }
    public bool RefreshChartCache { get; public set; }
    public IWarningCallback WarningCallback { get; public set; }
    public bool UpdateSmartArt { get; public set; }
    public bool EncryptDocumentProperties { get; public set; }
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    public SaveFormat get_SaveFormat();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveFormat );
    public bool get_ClearData();
    public void set_ClearData(bool value);
    public string get_CachedFileFolder();
    public void set_CachedFileFolder(string value);
    public bool get_ValidateMergedAreas();
    public void set_ValidateMergedAreas(bool value);
    public bool get_MergeAreas();
    public void set_MergeAreas(bool value);
    public bool get_CreateDirectory();
    public void set_CreateDirectory(bool value);
    public bool get_SortNames();
    public void set_SortNames(bool value);
    public bool get_SortExternalNames();
    public void set_SortExternalNames(bool value);
    public bool get_RefreshChartCache();
    public void set_RefreshChartCache(bool value);
    public void set_WarningCallback(IWarningCallback value);
    public IWarningCallback get_WarningCallback();
    internal virtual int wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    public bool get_UpdateSmartArt();
    public void set_UpdateSmartArt(bool value);
    public bool get_EncryptDocumentProperties();
    public void set_EncryptDocumentProperties(bool value);
    internal bool ();
}
public class Aspose.Cells.Saving.EbookSaveOptions : HtmlSaveOptions {
    public EbookSaveOptions(SaveFormat saveFormat);
    internal EbookSaveOptions(SaveOptions );
}
public class Aspose.Cells.Saving.SqlScriptColumnTypeMap : object {
    public virtual string GetStringType();
    public virtual string GetNumbericType();
}
public enum Aspose.Cells.Saving.SqlScriptOperatorType : Enum {
    public int value__;
    public static SqlScriptOperatorType Insert;
    public static SqlScriptOperatorType Update;
    public static SqlScriptOperatorType Delete;
}
public class Aspose.Cells.Saving.SqlScriptSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Int32[] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal SqlScriptOperatorType ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal char ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal SqlScriptColumnTypeMap ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool CheckIfTableExists { get; public set; }
    public SqlScriptColumnTypeMap ColumnTypeMap { get; public set; }
    public bool CheckAllDataForColumnType { get; public set; }
    public bool AddBlankLineBetweenRows { get; public set; }
    public char Separator { get; public set; }
    public SqlScriptOperatorType OperatorType { get; public set; }
    public int PrimaryKey { get; public set; }
    public bool CreateTable { get; public set; }
    public string IdName { get; public set; }
    public int StartId { get; public set; }
    public string TableName { get; public set; }
    public bool ExportAsString { get; public set; }
    public Int32[] SheetIndexes { get; public set; }
    public CellArea ExportArea { get; public set; }
    public bool HasHeaderRow { get; public set; }
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    public bool get_CheckIfTableExists();
    public void set_CheckIfTableExists(bool value);
    public SqlScriptColumnTypeMap get_ColumnTypeMap();
    public void set_ColumnTypeMap(SqlScriptColumnTypeMap value);
    public bool get_CheckAllDataForColumnType();
    public void set_CheckAllDataForColumnType(bool value);
    public bool get_AddBlankLineBetweenRows();
    public void set_AddBlankLineBetweenRows(bool value);
    public char get_Separator();
    public void set_Separator(char value);
    public SqlScriptOperatorType get_OperatorType();
    public void set_OperatorType(SqlScriptOperatorType value);
    public int get_PrimaryKey();
    public void set_PrimaryKey(int value);
    public bool get_CreateTable();
    public void set_CreateTable(bool value);
    public string get_IdName();
    public void set_IdName(string value);
    public int get_StartId();
    public void set_StartId(int value);
    public string get_TableName();
    public void set_TableName(string value);
    public bool get_ExportAsString();
    public void set_ExportAsString(bool value);
    public Int32[] get_SheetIndexes();
    public void set_SheetIndexes(Int32[] value);
    public CellArea get_ExportArea();
    public void set_ExportArea(CellArea value);
    public bool get_HasHeaderRow();
    public void set_HasHeaderRow(bool value);
}
public class Aspose.Cells.Scenario : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal ScenarioInputCellCollection ;
    public string Comment { get; public set; }
    public string Name { get; public set; }
    public string User { get; }
    public bool IsHidden { get; public set; }
    public bool IsLocked { get; public set; }
    public ScenarioInputCellCollection InputCells { get; }
    public string get_Comment();
    public void set_Comment(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_User();
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public ScenarioInputCellCollection get_InputCells();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ScenarioCollection : CollectionBase`1<Scenario> {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    public int ActiveIndex { get; public set; }
    public int LastSelected { get; public set; }
    public Scenario Item { get; }
    public int get_ActiveIndex();
    public void set_ActiveIndex(int value);
    public int get_LastSelected();
    public void set_LastSelected(int value);
    public Scenario get_Item(int index);
    public int Add(string name);
    internal int (Scenario );
}
public class Aspose.Cells.ScenarioInputCell : object {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public int Row { get; }
    public int Column { get; }
    public string Name { get; }
    public string Value { get; public set; }
    public bool IsDeleted { get; public set; }
    public int get_Row();
    public int get_Column();
    public string get_Name();
    internal string ();
    internal void (string );
    public string get_Value();
    public void set_Value(string value);
    public bool get_IsDeleted();
    public void set_IsDeleted(bool value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ScenarioInputCellCollection : CollectionBase`1<ScenarioInputCell> {
    public ScenarioInputCell Item { get; }
    internal void (ScenarioInputCell );
    public ScenarioInputCell get_Item(int index);
    public int Add(int row, int column, string value);
}
public class Aspose.Cells.SettableChartGlobalizationSettings : ChartGlobalizationSettings {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    internal virtual void 825fjwgetd7f9pmcysjdh38tah8k7bqc(CultureInfo );
    public virtual string GetSeriesName();
    public void SetSeriesName(string name);
    public virtual string GetChartTitleName();
    public void SetChartTitleName(string name);
    public virtual string GetLegendIncreaseName();
    public void SetLegendIncreaseName(string name);
    public virtual string GetLegendDecreaseName();
    public void SetLegendDecreaseName(string name);
    public virtual string GetLegendTotalName();
    public void SetLegendTotalName(string name);
    public virtual string GetAxisTitleName();
    public void SetAxisTitleName(string name);
    public virtual string GetOtherName();
    public void SetOtherName(string name);
    public virtual string GetAxisUnitName(DisplayUnitType type);
    public void SetAxisUnitName(DisplayUnitType type, string name);
}
public class Aspose.Cells.SettableGlobalizationSettings : GlobalizationSettings {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private char ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private char ;
    [DebuggerBrowsableAttribute("0")]
private char ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public char ListSeparator { get; }
    public char RowSeparatorOfFormulaArray { get; }
    public char ColumnSeparatorOfFormulaArray { get; }
    public virtual string GetTotalName(ConsolidationFunction functionType);
    public void SetTotalName(ConsolidationFunction functionType, string name);
    public virtual string GetGrandTotalName(ConsolidationFunction functionType);
    public void SetGrandTotalName(ConsolidationFunction functionType, string name);
    public virtual string GetTableRowTypeOfHeaders();
    public void SetTableRowTypeOfHeaders(string name);
    public virtual string GetTableRowTypeOfData();
    public void SetTableRowTypeOfData(string name);
    public virtual string GetTableRowTypeOfAll();
    public void SetTableRowTypeOfAll(string name);
    public virtual string GetTableRowTypeOfTotals();
    public void SetTableRowTypeOfTotals(string name);
    public virtual string GetTableRowTypeOfCurrent();
    public void SetTableRowTypeOfCurrent(string name);
    public virtual string GetErrorValueString(string err);
    public virtual string GetBooleanValueString(bool bv);
    public void SetBooleanValueString(bool bv, string name);
    public virtual string GetLocalFunctionName(string standardName);
    public void SetLocalFunctionName(string standardName, string localName, bool bidirectional);
    public virtual string GetStandardFunctionName(string localName);
    public void SetStandardFunctionName(string localName, string standardName, bool bidirectional);
    public virtual string GetLocalBuiltInName(string standardName);
    public void SetLocalBuiltInName(string standardName, string localName, bool bidirectional);
    public virtual string GetStandardBuiltInName(string localName);
    public void SetStandardBuiltInName(string localName, string standardName, bool bidirectional);
    public virtual char get_ListSeparator();
    public void SetListSeparator(char c);
    public virtual char get_RowSeparatorOfFormulaArray();
    public void SetRowSeparatorOfFormulaArray(char c);
    public virtual char get_ColumnSeparatorOfFormulaArray();
    public void SetColumnSeparatorOfFormulaArray(char c);
    public virtual string GetStandardHeaderFooterFontStyleName(string localfontStyleName);
    public void SetStandardHeaderFooterFontStyleName(string localfontStyleName, string standardName);
    public virtual string GetCommentTitleName(CommentTitleType type);
    public void SetCommentTitleName(CommentTitleType type, string name);
}
public class Aspose.Cells.SettablePivotGlobalizationSettings : PivotGlobalizationSettings {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public virtual string GetTextOfTotal();
    public void SetTextOfTotal(string text);
    public virtual string GetTextOfGrandTotal();
    public void SetTextOfGrandTotal(string text);
    public virtual string GetTextOfMultipleItems();
    public void SetTextOfMultipleItems(string text);
    public virtual string GetTextOfAll();
    public void SetTextOfAll(string text);
    public virtual string GetTextOfProtectedName(string protectedName);
    public void SetTextOfProtectedName(string protectedName, string text);
    public virtual string GetTextOfColumnLabels();
    public void SetTextOfColumnLabels(string text);
    public virtual string GetTextOfRowLabels();
    public void SetTextOfRowLabels(string text);
    public virtual string GetTextOfEmptyData();
    public void SetTextOfEmptyData(string text);
    public virtual string GetTextOfDataFieldHeader();
    public void SetTextOfDataFieldHeader(string text);
    public virtual string GetTextOfSubTotal(PivotFieldSubtotalType subTotalType);
    public void SetTextOfSubTotal(PivotFieldSubtotalType subTotalType, string text);
}
public class Aspose.Cells.Settings.PivotGlobalizationSettings : object {
    internal void (CultureInfo );
    public virtual string GetTextOfTotal();
    public virtual string GetTextOfGrandTotal();
    public virtual string GetTextOfMultipleItems();
    public virtual string GetTextOfAll();
    [ObsoleteAttribute("Use PivotGlobalizationSettings.GetTextOfProtectedName(string) method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public virtual string GetTextOfProtection();
    public virtual string GetTextOfProtectedName(string protectedName);
    public virtual string GetTextOfColumnLabels();
    public virtual string GetTextOfRowLabels();
    public virtual string GetTextOfEmptyData();
    public virtual string GetTextOfDataFieldHeader();
    public virtual String[] GetShortTextOf12Months();
    public virtual String[] GetTextOf4Quaters();
    public virtual string GetTextOfYears();
    public virtual string GetTextOfQuarters();
    public virtual string GetTextOfMonths();
    public virtual string GetTextOfDays();
    public virtual string GetTextOfHours();
    public virtual string GetTextOfMinutes();
    public virtual string GetTextOfSeconds();
    public virtual string GetTextOfRange();
    public virtual string GetTextOfSubTotal(PivotFieldSubtotalType subTotalType);
}
public enum Aspose.Cells.SheetType : Enum {
    public int value__;
    public static SheetType VB;
    public static SheetType Worksheet;
    public static SheetType Chart;
    public static SheetType BIFF4Macro;
    public static SheetType InternationalMacro;
    public static SheetType Other;
    public static SheetType Dialog;
}
public enum Aspose.Cells.ShiftType : Enum {
    public int value__;
    public static ShiftType Down;
    public static ShiftType Left;
    public static ShiftType None;
    public static ShiftType Right;
    public static ShiftType Up;
}
public class Aspose.Cells.Slicers.Slicer : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
[]
internal SlicerCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal SlicerCache ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public string Title { get; public set; }
    public string AlternativeText { get; public set; }
    public bool IsPrintable { get; public set; }
    public bool IsLocked { get; public set; }
    public PlacementType Placement { get; public set; }
    public bool LockedAspectRatio { get; public set; }
    public bool LockedPosition { get; public set; }
    public SlicerCache SlicerCache { get; }
    public Worksheet Parent { get; }
    public SlicerStyleType StyleType { get; public set; }
    public string Name { get; public set; }
    public string Caption { get; public set; }
    public bool CaptionVisible { get; public set; }
    public int NumberOfColumns { get; public set; }
    public int LeftPixel { get; public set; }
    public int TopPixel { get; public set; }
    public double Width { get; public set; }
    public int WidthPixel { get; public set; }
    public double Height { get; public set; }
    public int HeightPixel { get; public set; }
    public int ColumnWidthPixel { get; public set; }
    public double ColumnWidth { get; public set; }
    public int RowHeightPixel { get; public set; }
    public double RowHeight { get; public set; }
    internal Slicer(SlicerCollection ,  );
    internal Slicer(SlicerCollection );
    internal void (Slicer , CopyOptions );
    private void ();
    public void AddPivotConnection(PivotTable pivot);
    public void RemovePivotConnection(PivotTable pivot);
    private bool (PivotTable );
    public string get_Title();
    public void set_Title(string value);
    public string get_AlternativeText();
    public void set_AlternativeText(string value);
    public bool get_IsPrintable();
    public void set_IsPrintable(bool value);
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public PlacementType get_Placement();
    public void set_Placement(PlacementType value);
    public bool get_LockedAspectRatio();
    public void set_LockedAspectRatio(bool value);
    public bool get_LockedPosition();
    public void set_LockedPosition(bool value);
    public void Refresh();
    internal  ();
    public SlicerCache get_SlicerCache();
    public Worksheet get_Parent();
    internal  ();
    public SlicerStyleType get_StyleType();
    public void set_StyleType(SlicerStyleType value);
    internal string ();
    internal void (string );
    public string get_Name();
    public void set_Name(string value);
    public string get_Caption();
    public void set_Caption(string value);
    internal int ();
    internal void (int );
    public bool get_CaptionVisible();
    public void set_CaptionVisible(bool value);
    private Style ();
    internal  ();
    internal double ();
    internal UInt32 ();
    internal double ();
    internal double ();
    internal double ();
    internal double ();
    public int get_NumberOfColumns();
    public void set_NumberOfColumns(int value);
    internal double ();
    internal void (double );
    internal int ();
    internal void (int );
    public int get_LeftPixel();
    public void set_LeftPixel(int value);
    internal double ();
    internal void (double );
    internal int ();
    internal void (int );
    public int get_TopPixel();
    public void set_TopPixel(int value);
    public double get_Width();
    public void set_Width(double value);
    internal int ();
    internal void (int );
    public int get_WidthPixel();
    public void set_WidthPixel(int value);
    public double get_Height();
    public void set_Height(double value);
    internal int ();
    internal void (int );
    public int get_HeightPixel();
    public void set_HeightPixel(int value);
    internal int ();
    internal void (int );
    public int get_ColumnWidthPixel();
    public void set_ColumnWidthPixel(int value);
    public double get_ColumnWidth();
    public void set_ColumnWidth(double value);
    internal int ();
    internal void (int );
    public int get_RowHeightPixel();
    public void set_RowHeightPixel(int value);
    public double get_RowHeight();
    public void set_RowHeight(double value);
}
public class Aspose.Cells.Slicers.SlicerCache : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal UInt32 ;
    [DebuggerBrowsableAttribute("0")]
internal SlicerCacheItemSortType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal SlicerCacheCrossFilterType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal SlicerCacheItemCollection ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal ArrayList ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
[]
private ListColumn ;
    public SlicerCacheCrossFilterType CrossFilterType { get; public set; }
    public bool List { get; }
    public SlicerCacheItemCollection SlicerCacheItems { get; }
    public string Name { get; }
    public string SourceName { get; }
    internal SlicerCache( );
    internal void (SlicerCache , CopyOptions );
    internal ListColumn ();
    private ListColumn (ListObject , int );
    internal int ();
    public SlicerCacheCrossFilterType get_CrossFilterType();
    public void set_CrossFilterType(SlicerCacheCrossFilterType value);
    internal WorksheetCollection ();
    internal bool ();
    public bool get_List();
    public SlicerCacheItemCollection get_SlicerCacheItems();
    internal bool (Slicer );
    internal  ();
    public string get_Name();
    public string get_SourceName();
    internal  ();
    internal SlicerCacheItemCollection ();
    internal SlicerCacheItemCollection ();
    private int (object , SortedList , int , int );
    private void (bool , int , SlicerCacheItemCollection , SortedList );
    internal bool ();
    private  ( );
    internal  ();
    internal PivotItemCollection ();
    internal  ();
    private Hashtable (ListObject );
    private Hashtable (Hashtable , FilterColumnCollection , int , int );
    private int (ListObject , int , object );
    internal void ();
    private void (SlicerCacheItem , int );
}
public enum Aspose.Cells.Slicers.SlicerCacheCrossFilterType : Enum {
    public int value__;
    public static SlicerCacheCrossFilterType None;
    public static SlicerCacheCrossFilterType ShowItemsWithDataAtTop;
    public static SlicerCacheCrossFilterType ShowItemsWithNoData;
}
public class Aspose.Cells.Slicers.SlicerCacheItem : object {
    [DebuggerBrowsableAttribute("0")]
[]
private SlicerCacheItemCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool Selected { get; public set; }
    public string Value { get; }
    internal SlicerCacheItem(SlicerCacheItemCollection );
    internal void (SlicerCacheItem );
    internal bool ();
    public bool get_Selected();
    public void set_Selected(bool value);
    private void (SlicerCache );
    private ListObject (WorksheetCollection , int );
    private int (SlicerCacheItemCollection );
    private void (bool , int );
    private int (PivotItemCollection );
    private int (PivotItemCollection , int );
    private void (PivotTable , PivotField , int , bool );
    internal object ();
    private object ();
    public string get_Value();
    private string ();
    private string ();
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Slicers.SlicerCacheItemCollection : CollectionBase`1<SlicerCacheItem> {
    [DebuggerBrowsableAttribute("0")]
[]
internal SlicerCache ;
    public SlicerCacheItem Item { get; }
    public int Count { get; }
    internal SlicerCacheItemCollection(SlicerCache );
    internal SlicerCache ();
    public SlicerCacheItem get_Item(int index);
    public int get_Count();
    internal bool (SlicerCacheItem );
    internal int (SlicerCacheItem );
}
public enum Aspose.Cells.Slicers.SlicerCacheItemSortType : Enum {
    public int value__;
    public static SlicerCacheItemSortType Natural;
    public static SlicerCacheItemSortType Ascending;
    public static SlicerCacheItemSortType Descending;
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Slicers.SlicerCollection : CollectionBase`1<Slicer> {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    public Slicer Item { get; }
    public Slicer Item { get; }
    internal SlicerCollection(Worksheet );
    internal Worksheet ();
    internal WorksheetCollection ();
    public Slicer get_Item(int index);
    public Slicer get_Item(string name);
    internal Slicer (string );
    internal void (SlicerCollection , CopyOptions );
    internal int (Slicer );
    internal void (Slicer );
    public void Remove(Slicer slicer);
    public void RemoveAt(int index);
    public void Clear();
    public int Add(PivotTable pivot, string destCellName, string baseFieldName);
    public int Add(PivotTable pivot, int row, int column, string baseFieldName);
    private string (string );
    private int ();
    private int (string );
    public int Add(PivotTable pivot, int row, int column, int baseFieldIndex);
    public int Add(PivotTable pivot, string destCellName, int baseFieldIndex);
    public int Add(PivotTable pivot, int row, int column, PivotField baseField);
    public int Add(PivotTable pivot, string destCellName, PivotField baseField);
    public int Add(ListObject table, int index, string destCellName);
    public int Add(ListObject table, ListColumn listColumn, string destCellName);
    public int Add(ListObject table, ListColumn listColumn, int row, int column);
}
public enum Aspose.Cells.Slicers.SlicerStyleType : Enum {
    public int value__;
    public static SlicerStyleType SlicerStyleLight1;
    public static SlicerStyleType SlicerStyleLight2;
    public static SlicerStyleType SlicerStyleLight3;
    public static SlicerStyleType SlicerStyleLight4;
    public static SlicerStyleType SlicerStyleLight5;
    public static SlicerStyleType SlicerStyleLight6;
    public static SlicerStyleType SlicerStyleOther1;
    public static SlicerStyleType SlicerStyleOther2;
    public static SlicerStyleType SlicerStyleDark1;
    public static SlicerStyleType SlicerStyleDark2;
    public static SlicerStyleType SlicerStyleDark3;
    public static SlicerStyleType SlicerStyleDark4;
    public static SlicerStyleType SlicerStyleDark5;
    public static SlicerStyleType SlicerStyleDark6;
    public static SlicerStyleType Custom;
}
public enum Aspose.Cells.Slides.AdjustFontSizeForRowType : Enum {
    public int value__;
    public static AdjustFontSizeForRowType None;
    public static AdjustFontSizeForRowType EmptyRows;
}
public enum Aspose.Cells.Slides.SlideViewType : Enum {
    public int value__;
    public static SlideViewType View;
    public static SlideViewType Print;
}
public enum Aspose.Cells.SortOnType : Enum {
    public int value__;
    public static SortOnType Value;
    public static SortOnType CellColor;
    public static SortOnType FontColor;
    public static SortOnType Icon;
}
public enum Aspose.Cells.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
    public static SortOrder Natural;
}
public class Aspose.Cells.SpreadsheetML2003SaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public bool IsIndentedFormatting { get; public set; }
    public bool LimitAsXls { get; public set; }
    public bool ExportColumnIndexOfCell { get; public set; }
    [ObsoleteAttribute("Use SpreadsheetML2003SaveOptions() constructor instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public SpreadsheetML2003SaveOptions(SaveFormat saveFormat);
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    public bool get_IsIndentedFormatting();
    public void set_IsIndentedFormatting(bool value);
    public bool get_LimitAsXls();
    public void set_LimitAsXls(bool value);
    public bool get_ExportColumnIndexOfCell();
    public void set_ExportColumnIndexOfCell(bool value);
}
public class Aspose.Cells.StreamProviderOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Stream ;
    [DebuggerBrowsableAttribute("0")]
private ResourceLoadingType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public ResourceLoadingType ResourceLoadingType { get; public set; }
    public string DefaultPath { get; }
    public string CustomPath { get; public set; }
    public Stream Stream { get; public set; }
    public StreamProviderOptions(ResourceLoadingType loadingType, string defaultPath);
    public ResourceLoadingType get_ResourceLoadingType();
    public void set_ResourceLoadingType(ResourceLoadingType value);
    public string get_DefaultPath();
    public string get_CustomPath();
    public void set_CustomPath(string value);
    internal void ();
    public Stream get_Stream();
    public void set_Stream(Stream value);
    internal Stream ();
}
public class Aspose.Cells.Style : object {
    internal  BackgroundInternalColor;
    internal  ForeInternalColor;
    private string name;
    internal int BuiltinId;
    internal BackgroundType pattern;
    private BorderCollection m_Borders;
    internal int ParentXFIndex;
    internal byte m_UsedFlag;
    internal int m_ModifiedFlag;
    internal byte m_IndentLevel;
    private int m_RelativeIndent;
    private int number;
    private Font font;
    []
private WorksheetCollection sheets;
    internal int _rotationAngle;
    internal byte m_aligment;
    internal string _Custom;
    internal short m_Zip;
    internal byte m_gradient;
    private bool mShowButton;
    internal int xfComplement;
    public ThemeColor BackgroundThemeColor { get; public set; }
    public ThemeColor ForegroundThemeColor { get; public set; }
    public string Name { get; public set; }
    public BackgroundType Pattern { get; public set; }
    public BorderCollection Borders { get; }
    public Color BackgroundColor { get; public set; }
    public int BackgroundArgbColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public int ForegroundArgbColor { get; public set; }
    public bool HasBorders { get; }
    public Style ParentStyle { get; }
    public bool IsNumberFormatApplied { get; public set; }
    public bool IsFontApplied { get; public set; }
    public bool IsAlignmentApplied { get; public set; }
    public bool IsBorderApplied { get; public set; }
    public bool IsFillApplied { get; public set; }
    public bool IsProtectionApplied { get; public set; }
    public int IndentLevel { get; public set; }
    public Font Font { get; }
    public int RotationAngle { get; public set; }
    public TextAlignmentType HorizontalAlignment { get; public set; }
    public TextAlignmentType VerticalAlignment { get; public set; }
    public bool IsTextWrapped { get; public set; }
    public int Number { get; public set; }
    public bool IsLocked { get; public set; }
    public string Custom { get; public set; }
    public string CultureCustom { get; public set; }
    public string InvariantCustom { get; }
    public bool IsFormulaHidden { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public TextDirectionType TextDirection { get; public set; }
    public bool IsJustifyDistributed { get; public set; }
    public bool QuotePrefix { get; public set; }
    public bool IsGradient { get; public set; }
    public bool IsPercent { get; }
    public bool IsDateTime { get; }
    internal Style(WorksheetCollection );
    public ThemeColor get_BackgroundThemeColor();
    public void set_BackgroundThemeColor(ThemeColor value);
    internal int ();
    internal int ();
    public ThemeColor get_ForegroundThemeColor();
    public void set_ForegroundThemeColor(ThemeColor value);
    internal int ();
    public string get_Name();
    public void set_Name(string value);
    internal string ();
    internal void (string );
    public BackgroundType get_Pattern();
    public void set_Pattern(BackgroundType value);
    public void SetPatternColor(BackgroundType pattern, Color color1, Color color2);
    internal BorderCollection ();
    public BorderCollection get_Borders();
    internal WorksheetCollection ();
    internal void (WorksheetCollection );
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public int get_BackgroundArgbColor();
    public void set_BackgroundArgbColor(int value);
    public Color get_ForegroundColor();
    public void set_ForegroundColor(Color value);
    public int get_ForegroundArgbColor();
    public void set_ForegroundArgbColor(int value);
    internal int ( , int );
    internal int ( , int , Boolean& );
    public void Copy(Style style);
    internal void (Style , CopyOptions );
    internal void (Style , CopyOptions );
    internal bool (Style , CopyOptions );
    public bool get_HasBorders();
    internal bool ();
    internal void (bool );
    internal void (bool );
    public Style get_ParentStyle();
    internal void (WorksheetCollection , int );
    public void Update();
    internal void (Style );
    internal void (Style );
    internal byte ();
    internal void (byte );
    public bool get_IsNumberFormatApplied();
    public void set_IsNumberFormatApplied(bool value);
    public bool get_IsFontApplied();
    public void set_IsFontApplied(bool value);
    public bool get_IsAlignmentApplied();
    public void set_IsAlignmentApplied(bool value);
    public bool get_IsBorderApplied();
    public void set_IsBorderApplied(bool value);
    public bool get_IsFillApplied();
    public void set_IsFillApplied(bool value);
    public bool get_IsProtectionApplied();
    public void set_IsProtectionApplied(bool value);
    internal bool (Style );
    internal bool (Style );
    private bool (Hashtable , Hashtable );
    internal bool (Style , byte );
    internal bool (Style );
    private static bool (Color , Color );
    public bool IsModified(StyleModifyFlag modifyFlag);
    internal void (StyleModifyFlag );
    internal void (StyleModifyFlag );
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void (StringBuilder );
    private void (Border , StringBuilder );
    public int get_IndentLevel();
    public void set_IndentLevel(int value);
    internal void (int );
    internal int ();
    internal void (int );
    internal Font ();
    public Font get_Font();
    internal Color (int );
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    internal static TextAlignmentType (byte );
    internal static TextAlignmentType (byte );
    public TextAlignmentType get_HorizontalAlignment();
    public void set_HorizontalAlignment(TextAlignmentType value);
    public TextAlignmentType get_VerticalAlignment();
    public void set_VerticalAlignment(TextAlignmentType value);
    public bool get_IsTextWrapped();
    public void set_IsTextWrapped(bool value);
    internal bool ();
    public int get_Number();
    public void set_Number(int value);
    internal void (Style );
    internal void (Int32& , String& );
    internal void (int , string );
    internal void (int , string );
    internal int ();
    internal void (int );
    public bool SetBorder(BorderType borderType, CellBorderType borderStyle, Color borderColor);
    public bool SetBorder(BorderType borderType, CellBorderType borderStyle, CellsColor borderColor);
    internal void (CellBorderType , CellsColor );
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public void SetCustom(string custom, bool builtinPreference);
    public string get_Custom();
    public void set_Custom(string value);
    internal string ();
    internal void (string );
    internal void (string , bool );
    public string get_CultureCustom();
    public void set_CultureCustom(string value);
    public string get_InvariantCustom();
    internal string ();
    public bool get_IsFormulaHidden();
    public void set_IsFormulaHidden(bool value);
    public bool get_ShrinkToFit();
    public void set_ShrinkToFit(bool value);
    public TextDirectionType get_TextDirection();
    public void set_TextDirection(TextDirectionType value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool get_IsJustifyDistributed();
    public void set_IsJustifyDistributed(bool value);
    public bool get_QuotePrefix();
    public void set_QuotePrefix(bool value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public bool get_IsGradient();
    public void set_IsGradient(bool value);
    internal GradientStyleType ();
    internal void (GradientStyleType );
    internal int ();
    internal void (int );
    public void SetTwoColorGradient(Color color1, Color color2, GradientStyleType gradientStyleType, int variant);
    internal void ( ,  , GradientStyleType , int );
    [ObsoleteAttribute("Use Style.GetTwoColorGradientSetting() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void GetTwoColorGradient(Color& color1, Color& color2, GradientStyleType& gradientStyleType, Int32& variant);
    public TwoColorGradient GetTwoColorGradientSetting();
    public bool get_IsPercent();
    internal void (bool );
    public bool get_IsDateTime();
    internal void (int , string );
    internal void (int , string , ColorType , int , double );
    internal void (int , ColorType , int , double );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public string ToJson();
}
public class Aspose.Cells.StyleFlag : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    public bool All { get; public set; }
    public bool Borders { get; public set; }
    public bool LeftBorder { get; public set; }
    public bool RightBorder { get; public set; }
    public bool TopBorder { get; public set; }
    public bool BottomBorder { get; public set; }
    public bool DiagonalDownBorder { get; public set; }
    public bool DiagonalUpBorder { get; public set; }
    public bool Font { get; public set; }
    public bool FontSize { get; public set; }
    public bool FontName { get; public set; }
    public bool FontColor { get; public set; }
    public bool FontBold { get; public set; }
    public bool FontItalic { get; public set; }
    public bool FontUnderline { get; public set; }
    public bool FontStrike { get; public set; }
    public bool FontScript { get; public set; }
    public bool NumberFormat { get; public set; }
    public bool Alignments { get; public set; }
    public bool HorizontalAlignment { get; public set; }
    public bool VerticalAlignment { get; public set; }
    public bool Indent { get; public set; }
    public bool Rotation { get; public set; }
    public bool WrapText { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public bool TextDirection { get; public set; }
    public bool CellShading { get; public set; }
    public bool Locked { get; public set; }
    public bool HideFormula { get; public set; }
    public bool QuotePrefix { get; public set; }
    internal StyleFlag(int );
    internal void (int );
    internal void (int );
    public bool get_All();
    public void set_All(bool value);
    public bool get_Borders();
    public void set_Borders(bool value);
    public bool get_LeftBorder();
    public void set_LeftBorder(bool value);
    public bool get_RightBorder();
    public void set_RightBorder(bool value);
    public bool get_TopBorder();
    public void set_TopBorder(bool value);
    public bool get_BottomBorder();
    public void set_BottomBorder(bool value);
    public bool get_DiagonalDownBorder();
    public void set_DiagonalDownBorder(bool value);
    public bool get_DiagonalUpBorder();
    public void set_DiagonalUpBorder(bool value);
    public bool get_Font();
    public void set_Font(bool value);
    public bool get_FontSize();
    public void set_FontSize(bool value);
    public bool get_FontName();
    public void set_FontName(bool value);
    public bool get_FontColor();
    public void set_FontColor(bool value);
    public bool get_FontBold();
    public void set_FontBold(bool value);
    public bool get_FontItalic();
    public void set_FontItalic(bool value);
    public bool get_FontUnderline();
    public void set_FontUnderline(bool value);
    public bool get_FontStrike();
    public void set_FontStrike(bool value);
    public bool get_FontScript();
    public void set_FontScript(bool value);
    public bool get_NumberFormat();
    public void set_NumberFormat(bool value);
    public bool get_Alignments();
    public void set_Alignments(bool value);
    public bool get_HorizontalAlignment();
    public void set_HorizontalAlignment(bool value);
    public bool get_VerticalAlignment();
    public void set_VerticalAlignment(bool value);
    public bool get_Indent();
    public void set_Indent(bool value);
    public bool get_Rotation();
    public void set_Rotation(bool value);
    public bool get_WrapText();
    public void set_WrapText(bool value);
    public bool get_ShrinkToFit();
    public void set_ShrinkToFit(bool value);
    public bool get_TextDirection();
    public void set_TextDirection(bool value);
    public bool get_CellShading();
    public void set_CellShading(bool value);
    public bool get_Locked();
    public void set_Locked(bool value);
    public bool get_HideFormula();
    public void set_HideFormula(bool value);
    public bool get_QuotePrefix();
    public void set_QuotePrefix(bool value);
    internal void (Style );
}
[("And")]
public enum Aspose.Cells.StyleModifyFlag : Enum {
    public int value__;
    public static StyleModifyFlag LeftBorder;
    public static StyleModifyFlag RightBorder;
    public static StyleModifyFlag TopBorder;
    public static StyleModifyFlag BottomBorder;
    public static StyleModifyFlag DiagonalDownBorder;
    public static StyleModifyFlag DiagonalUpBorder;
    public static StyleModifyFlag Diagonal;
    public static StyleModifyFlag HorizontalBorder;
    public static StyleModifyFlag VerticalBorder;
    public static StyleModifyFlag Borders;
    public static StyleModifyFlag NumberFormat;
    public static StyleModifyFlag HorizontalAlignment;
    public static StyleModifyFlag VerticalAlignment;
    public static StyleModifyFlag Indent;
    public static StyleModifyFlag Rotation;
    public static StyleModifyFlag WrapText;
    public static StyleModifyFlag ShrinkToFit;
    public static StyleModifyFlag TextDirection;
    public static StyleModifyFlag RelativeIndent;
    public static StyleModifyFlag AlignmentSettings;
    public static StyleModifyFlag Pattern;
    public static StyleModifyFlag ForegroundColor;
    public static StyleModifyFlag BackgroundColor;
    public static StyleModifyFlag CellShading;
    public static StyleModifyFlag Locked;
    public static StyleModifyFlag HideFormula;
    public static StyleModifyFlag ProtectionSettings;
    public static StyleModifyFlag FontSize;
    public static StyleModifyFlag FontName;
    public static StyleModifyFlag FontColor;
    public static StyleModifyFlag FontWeight;
    public static StyleModifyFlag FontItalic;
    public static StyleModifyFlag FontUnderline;
    public static StyleModifyFlag FontStrike;
    public static StyleModifyFlag FontScript;
    public static StyleModifyFlag FontFamily;
    public static StyleModifyFlag FontCharset;
    public static StyleModifyFlag FontScheme;
    public static StyleModifyFlag FontDirty;
    public static StyleModifyFlag FontSpellingError;
    public static StyleModifyFlag FontUFillTx;
    public static StyleModifyFlag FontSpacing;
    public static StyleModifyFlag FontKerning;
    public static StyleModifyFlag FontEqualize;
    public static StyleModifyFlag FontCap;
    public static StyleModifyFlag FontVerticalText;
    public static StyleModifyFlag Font;
    public static StyleModifyFlag All;
}
public class Aspose.Cells.SubtotalSetting : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private ConsolidationFunction ;
    [DebuggerBrowsableAttribute("0")]
private Int32[] ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public int GroupBy { get; }
    public ConsolidationFunction SubtotalFunction { get; }
    public Int32[] TotalList { get; }
    public bool SummaryBelowData { get; }
    internal SubtotalSetting(CellArea , Cells );
    internal static ConsolidationFunction (string );
    public int get_GroupBy();
    public ConsolidationFunction get_SubtotalFunction();
    public Int32[] get_TotalList();
    public bool get_SummaryBelowData();
}
[ObsoleteAttribute("Use ImageSaveOptions class instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Aspose.Cells.SvgSaveOptions : ImageSaveOptions {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [ObsoleteAttribute("Use ImageSaveOptions.ImageOrPrintOptions.SheetSet instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public int SheetIndex { get; public set; }
    [ObsoleteAttribute("Use SvgSaveOptions() constructor instead.")]
public SvgSaveOptions(SaveFormat saveFormat);
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    internal static SvgSaveOptions (SaveOptions );
    public int get_SheetIndex();
    public void set_SheetIndex(int value);
}
public class Aspose.Cells.SystemTimeInterruptMonitor : AbstractInterruptMonitor {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private long ;
    public bool IsInterruptionRequested { get; }
    public bool TerminateWithoutException { get; }
    public SystemTimeInterruptMonitor(bool terminateWithoutException);
    public void StartMonitor(int msLimit);
    public virtual bool get_IsInterruptionRequested();
    public virtual bool get_TerminateWithoutException();
}
public class Aspose.Cells.Tables.ListColumn : object {
    [DebuggerBrowsableAttribute("0")]
[]
private ListColumnCollection ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private XmlColumnProperty ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal TotalsCalculation ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal UInt32 ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public string Name { get; public set; }
    public TotalsCalculation TotalsCalculation { get; public set; }
    public Range Range { get; }
    public string Formula { get; public set; }
    public string TotalsRowLabel { get; public set; }
    internal ListColumn(ListColumnCollection , string , int );
    internal ListColumn(ListColumnCollection );
    internal XmlColumnProperty ();
    internal void (XmlColumnProperty );
    internal FilterColumn ();
    internal bool ();
    internal void (ListColumn , CopyOptions );
    internal void (ListColumn , CopyOptions );
    private WorksheetCollection ();
    public string get_Name();
    public void set_Name(string value);
    internal void (string );
    internal void (string );
    internal int ();
    internal int ();
    public TotalsCalculation get_TotalsCalculation();
    public void set_TotalsCalculation(TotalsCalculation value);
    internal void (TotalsCalculation );
    internal void (int , int , bool );
    internal void (int , int );
    internal string (TotalsCalculation );
    private int (TotalsCalculation );
    public Range get_Range();
    internal void (string , bool );
    internal bool ();
    internal string ();
    internal void ( );
    internal void ( );
    public string GetCustomTotalsRowFormula(bool isR1C1, bool isLocal);
    public void SetCustomTotalsRowFormula(string formula, bool isR1C1, bool isLocal);
    internal void (string , bool , bool , bool );
    private void (string );
    internal void ( );
    internal void (string , bool );
    internal bool ();
    public string get_Formula();
    public void set_Formula(string value);
    public string GetCustomCalculatedFormula(bool isR1C1, bool isLocal);
    public void SetCustomCalculatedFormula(string formula, bool isR1C1, bool isLocal);
    internal string ();
    internal void (string );
    internal void ( );
    internal void ( );
    internal string ();
    internal void (string );
    public string get_TotalsRowLabel();
    public void set_TotalsRowLabel(string value);
    internal Style ();
    internal void (Style );
    private string (Style );
    internal  (Style );
    internal Style ();
    internal void (Style );
    public Style GetDataStyle();
    public void SetDataStyle(Style style);
    internal Style ();
    internal void (Style );
    internal Style ();
    internal void (Style );
    internal int ();
    internal void (int );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Tables.ListColumnCollection : CollectionBase`1<ListColumn> {
    [DebuggerBrowsableAttribute("0")]
[]
private ListObject ;
    public ListColumn Item { get; }
    public ListColumn Item { get; }
    internal ListColumnCollection(ListObject );
    internal void (int , ListColumn );
    internal void (ListColumnCollection , CopyOptions );
    internal void (ListColumnCollection , CopyOptions );
    public ListColumn get_Item(int index);
    public ListColumn get_Item(string name);
    internal int ();
    internal int (string );
    internal bool ();
    internal void (ListColumn );
    internal ListObject ();
}
public class Aspose.Cells.Tables.ListObject : object {
    [DebuggerBrowsableAttribute("0")]
internal TableDataSourceType ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private ListColumnCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
private ListObjectCollection ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private AutoFilter ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public int StartRow { get; }
    public int StartColumn { get; }
    public int EndRow { get; }
    public int EndColumn { get; }
    public ListColumnCollection ListColumns { get; }
    public bool ShowHeaderRow { get; public set; }
    public bool ShowTotals { get; public set; }
    public Range DataRange { get; }
    public QueryTable QueryTable { get; }
    public TableDataSourceType DataSourceType { get; }
    public AutoFilter AutoFilter { get; }
    public string DisplayName { get; public set; }
    public string Comment { get; public set; }
    public bool ShowTableStyleFirstColumn { get; public set; }
    public bool ShowTableStyleLastColumn { get; public set; }
    public bool ShowTableStyleRowStripes { get; public set; }
    public bool ShowTableStyleColumnStripes { get; public set; }
    public TableStyleType TableStyleType { get; public set; }
    public string TableStyleName { get; public set; }
    public XmlMap XmlMap { get; }
    public string AlternativeText { get; public set; }
    public string AlternativeDescription { get; public set; }
    internal ListObject(ListObjectCollection , string , int );
    internal ListObject(ListObjectCollection );
    internal int ();
    internal void (ListObject , CopyOptions );
    internal Style ();
    internal void (Style );
    internal Style ();
    internal void (Style );
    private string (Style );
    internal WorksheetCollection ();
    public int get_StartRow();
    internal void (int );
    public int get_StartColumn();
    internal void (int );
    public int get_EndRow();
    internal void (int );
    public int get_EndColumn();
    internal void (int );
    public ListColumnCollection get_ListColumns();
    private void (int , bool , bool );
    public void Resize(int startRow, int startColumn, int endRow, int endColumn, bool hasHeaders);
    internal void (int , int , int , int ,  );
    internal void (int , int , int , int , bool );
    public void PutCellValue(int rowOffset, int columnOffset, object value);
    public void PutCellValue(int rowOffset, int columnOffset, object value, bool isTotalsRowLabel);
    public void PutCellFormula(int rowOffset, int columnOffset, string formula);
    public void PutCellFormula(int rowOffset, int columnOffset, string formula, bool isTotalsRowFormula);
    internal void (int , int , object , bool , bool );
    public bool get_ShowHeaderRow();
    public void set_ShowHeaderRow(bool value);
    private void ();
    private void ();
    public bool get_ShowTotals();
    public void set_ShowTotals(bool value);
    private void ();
    private void ();
    public Range get_DataRange();
    public void UpdateColumnName();
    internal void (bool );
    internal bool (CellArea );
    internal bool (int , int , int , int );
    internal string (string );
    internal bool (int , int , int , int , ShiftType );
    internal bool (CellArea );
    internal bool (int , int , int , int );
    internal bool (CellArea , int , ShiftType );
    internal string ();
    internal ListObjectCollection ();
    public QueryTable get_QueryTable();
    public TableDataSourceType get_DataSourceType();
    internal void ();
    internal void (string );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal string ();
    internal void (string );
    internal string ();
    internal void (string );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal int ();
    internal void (int );
    internal Byte[] ();
    internal void (Byte[] );
    internal bool ();
    internal AutoFilter ();
    internal AutoFilter ();
    public AutoFilter Filter();
    public AutoFilter get_AutoFilter();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    internal string ();
    internal void (string );
    public string get_Comment();
    public void set_Comment(string value);
    internal byte ();
    internal void (byte );
    public bool get_ShowTableStyleFirstColumn();
    public void set_ShowTableStyleFirstColumn(bool value);
    public bool get_ShowTableStyleLastColumn();
    public void set_ShowTableStyleLastColumn(bool value);
    public bool get_ShowTableStyleRowStripes();
    public void set_ShowTableStyleRowStripes(bool value);
    public bool get_ShowTableStyleColumnStripes();
    public void set_ShowTableStyleColumnStripes(bool value);
    public void ApplyStyleToRange();
    internal void (int , bool );
    public void ConvertToRange();
    private void ();
    public void ConvertToRange(TableToRangeOptions options);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal TableStyle ();
    public TableStyleType get_TableStyleType();
    public void set_TableStyleType(TableStyleType value);
    public string get_TableStyleName();
    public void set_TableStyleName(string value);
    internal  (Style , bool );
    internal Style ();
    internal void (Style );
    internal Style ();
    internal void (Style );
    internal Style ();
    internal void (Style );
    internal Style ();
    internal void (Style );
    internal Style ();
    internal void (Style );
    internal Style ();
    internal void (Style );
    internal bool ();
    internal Style[] (TableStyle );
    private void (int , int , Style[] , int );
    internal void (int );
    internal void (string );
    internal int ();
    internal void (int );
    internal string ();
    internal bool ();
    internal void ( );
    internal int (int , int );
    internal Style (int );
    internal Style (int , int );
    internal void ();
    private void ();
    internal  (TableStyleElementType , int , int , int , int );
    internal CellArea ();
    internal int ();
    public XmlMap get_XmlMap();
    internal void ( );
    public string get_AlternativeText();
    public void set_AlternativeText(string value);
    public string get_AlternativeDescription();
    public void set_AlternativeDescription(string value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Tables.ListObjectCollection : CollectionBase`1<ListObject> {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public ListObject Item { get; }
    public ListObject Item { get; }
    internal ListObjectCollection(Worksheet );
    internal void ();
    internal void ();
    internal Style (int , int );
    internal string (string );
    internal void (ListObjectCollection , CopyOptions );
    internal void (ListObjectCollection , CellArea , CellArea , CopyOptions );
    internal int (int , int );
    internal ListObject (int , int );
    public ListObject get_Item(int index);
    public ListObject get_Item(string tableName);
    internal ListObject (string );
    public int Add(int startRow, int startColumn, int endRow, int endColumn, bool hasHeaders);
    public int Add(string startCell, string endCell, bool hasHeaders);
    internal int ();
    internal void (int , int , int , int );
    internal void (int , int , int , int );
    internal void (CellArea , int , ShiftType );
    internal bool (CellArea );
    internal bool (ListObject , int , int , int , int , ShiftType );
    internal bool (CellArea );
    internal void (int , int , int , int );
    internal int (ListObject );
    internal ListObject (int );
    internal void (int , int );
    internal Worksheet ();
    internal bool (int , int );
    internal void ( );
    public void UpdateColumnName();
    internal void (bool );
    internal void (ListObject );
    internal void ( );
}
public enum Aspose.Cells.Tables.TableDataSourceType : Enum {
    public int value__;
    public static TableDataSourceType Worksheet;
    public static TableDataSourceType SharePoint;
    public static TableDataSourceType XML;
    public static TableDataSourceType QueryTable;
}
public class Aspose.Cells.Tables.TableStyle : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
[]
private TableStyleCollection ;
    [DebuggerBrowsableAttribute("0")]
private TableStyleElementCollection ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public string Name { get; }
    public TableStyleElementCollection TableStyleElements { get; }
    internal TableStyle(TableStyleCollection , string );
    internal TableStyleCollection ();
    internal void (TableStyle , CopyOptions );
    public string get_Name();
    public TableStyleElementCollection get_TableStyleElements();
    internal void (TableStyleElementCollection );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal void (TableStyleElementType , int , Style );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Tables.TableStyleCollection : CollectionBase`1<TableStyle> {
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    public string DefaultTableStyleName { get; public set; }
    public string DefaultPivotStyleName { get; public set; }
    public TableStyle Item { get; }
    public TableStyle Item { get; }
    internal TableStyleCollection(WorksheetCollection );
    internal void ();
    public string get_DefaultTableStyleName();
    public void set_DefaultTableStyleName(string value);
    public string get_DefaultPivotStyleName();
    public void set_DefaultPivotStyleName(string value);
    internal WorksheetCollection ();
    public int AddTableStyle(string name);
    public int AddPivotTableStyle(string name);
    internal int (string );
    public TableStyle get_Item(int index);
    public TableStyle get_Item(string name);
    public TableStyle GetBuiltinTableStyle(TableStyleType type);
    internal TableStyle (PivotTableStyleType );
}
public class Aspose.Cells.Tables.TableStyleElement : object {
    [DebuggerBrowsableAttribute("0")]
[]
private TableStyleElementCollection ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private TableStyleElementType ;
    [DebuggerBrowsableAttribute("0")]
private Style ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public int Size { get; public set; }
    public TableStyleElementType Type { get; }
    internal TableStyleElement(TableStyleElementCollection , TableStyleElementType );
    internal void (TableStyleElement , CopyOptions );
    private WorksheetCollection ();
    public int get_Size();
    public void set_Size(int value);
    public TableStyleElementType get_Type();
    public Style GetElementStyle();
    public void SetElementStyle(Style style);
    internal Style ();
    internal void (Style );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Tables.TableStyleElementCollection : CollectionBase`1<TableStyleElement> {
    [DebuggerBrowsableAttribute("0")]
[]
private TableStyle ;
    public TableStyleElement Item { get; }
    public TableStyleElement Item { get; }
    internal TableStyleElementCollection(TableStyle );
    internal TableStyle ();
    public TableStyleElement get_Item(int index);
    public TableStyleElement get_Item(TableStyleElementType type);
    public int Add(TableStyleElementType type);
    internal int (TableStyleElement );
    internal void (TableStyleElementCollection , CopyOptions );
}
public enum Aspose.Cells.Tables.TableStyleElementType : Enum {
    public int value__;
    public static TableStyleElementType BlankRow;
    public static TableStyleElementType FirstColumn;
    public static TableStyleElementType FirstColumnStripe;
    public static TableStyleElementType FirstColumnSubheading;
    public static TableStyleElementType FirstHeaderCell;
    public static TableStyleElementType FirstRowStripe;
    public static TableStyleElementType FirstRowSubheading;
    public static TableStyleElementType FirstSubtotalColumn;
    public static TableStyleElementType FirstSubtotalRow;
    public static TableStyleElementType GrandTotalColumn;
    public static TableStyleElementType GrandTotalRow;
    public static TableStyleElementType FirstTotalCell;
    public static TableStyleElementType HeaderRow;
    public static TableStyleElementType LastColumn;
    public static TableStyleElementType LastHeaderCell;
    public static TableStyleElementType LastTotalCell;
    public static TableStyleElementType PageFieldLabels;
    public static TableStyleElementType PageFieldValues;
    public static TableStyleElementType SecondColumnStripe;
    public static TableStyleElementType SecondColumnSubheading;
    public static TableStyleElementType SecondRowStripe;
    public static TableStyleElementType SecondRowSubheading;
    public static TableStyleElementType SecondSubtotalColumn;
    public static TableStyleElementType SecondSubtotalRow;
    public static TableStyleElementType ThirdColumnSubheading;
    public static TableStyleElementType ThirdRowSubheading;
    public static TableStyleElementType ThirdSubtotalColumn;
    public static TableStyleElementType ThirdSubtotalRow;
    public static TableStyleElementType TotalRow;
    public static TableStyleElementType WholeTable;
}
public enum Aspose.Cells.Tables.TableStyleType : Enum {
    public int value__;
    public static TableStyleType None;
    public static TableStyleType TableStyleLight1;
    public static TableStyleType TableStyleLight2;
    public static TableStyleType TableStyleLight3;
    public static TableStyleType TableStyleLight4;
    public static TableStyleType TableStyleLight5;
    public static TableStyleType TableStyleLight6;
    public static TableStyleType TableStyleLight7;
    public static TableStyleType TableStyleLight8;
    public static TableStyleType TableStyleLight9;
    public static TableStyleType TableStyleLight10;
    public static TableStyleType TableStyleLight11;
    public static TableStyleType TableStyleLight12;
    public static TableStyleType TableStyleLight13;
    public static TableStyleType TableStyleLight14;
    public static TableStyleType TableStyleLight15;
    public static TableStyleType TableStyleLight16;
    public static TableStyleType TableStyleLight17;
    public static TableStyleType TableStyleLight18;
    public static TableStyleType TableStyleLight19;
    public static TableStyleType TableStyleLight20;
    public static TableStyleType TableStyleLight21;
    public static TableStyleType TableStyleMedium1;
    public static TableStyleType TableStyleMedium2;
    public static TableStyleType TableStyleMedium3;
    public static TableStyleType TableStyleMedium4;
    public static TableStyleType TableStyleMedium5;
    public static TableStyleType TableStyleMedium6;
    public static TableStyleType TableStyleMedium7;
    public static TableStyleType TableStyleMedium8;
    public static TableStyleType TableStyleMedium9;
    public static TableStyleType TableStyleMedium10;
    public static TableStyleType TableStyleMedium11;
    public static TableStyleType TableStyleMedium12;
    public static TableStyleType TableStyleMedium13;
    public static TableStyleType TableStyleMedium14;
    public static TableStyleType TableStyleMedium15;
    public static TableStyleType TableStyleMedium16;
    public static TableStyleType TableStyleMedium17;
    public static TableStyleType TableStyleMedium18;
    public static TableStyleType TableStyleMedium19;
    public static TableStyleType TableStyleMedium20;
    public static TableStyleType TableStyleMedium21;
    public static TableStyleType TableStyleMedium22;
    public static TableStyleType TableStyleMedium23;
    public static TableStyleType TableStyleMedium24;
    public static TableStyleType TableStyleMedium25;
    public static TableStyleType TableStyleMedium26;
    public static TableStyleType TableStyleMedium27;
    public static TableStyleType TableStyleMedium28;
    public static TableStyleType TableStyleDark1;
    public static TableStyleType TableStyleDark2;
    public static TableStyleType TableStyleDark3;
    public static TableStyleType TableStyleDark4;
    public static TableStyleType TableStyleDark5;
    public static TableStyleType TableStyleDark6;
    public static TableStyleType TableStyleDark7;
    public static TableStyleType TableStyleDark8;
    public static TableStyleType TableStyleDark9;
    public static TableStyleType TableStyleDark10;
    public static TableStyleType TableStyleDark11;
    public static TableStyleType Custom;
}
public class Aspose.Cells.Tables.TableToRangeOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public int LastRow { get; public set; }
    public int get_LastRow();
    public void set_LastRow(int value);
}
public enum Aspose.Cells.Tables.TotalsCalculation : Enum {
    public int value__;
    public static TotalsCalculation Sum;
    public static TotalsCalculation Count;
    public static TotalsCalculation Average;
    public static TotalsCalculation Max;
    public static TotalsCalculation Min;
    public static TotalsCalculation Var;
    public static TotalsCalculation CountNums;
    public static TotalsCalculation StdDev;
    public static TotalsCalculation None;
    public static TotalsCalculation Custom;
}
public enum Aspose.Cells.TargetModeType : Enum {
    public int value__;
    public static TargetModeType External;
    public static TargetModeType FilePath;
    public static TargetModeType Email;
    public static TargetModeType CellReference;
}
public enum Aspose.Cells.TextAlignmentType : Enum {
    public int value__;
    public static TextAlignmentType General;
    public static TextAlignmentType Bottom;
    public static TextAlignmentType Center;
    public static TextAlignmentType CenterAcross;
    public static TextAlignmentType Distributed;
    public static TextAlignmentType Fill;
    public static TextAlignmentType Justify;
    public static TextAlignmentType Left;
    public static TextAlignmentType Right;
    public static TextAlignmentType Top;
    public static TextAlignmentType JustifiedLow;
    public static TextAlignmentType ThaiDistributed;
}
public enum Aspose.Cells.TextCapsType : Enum {
    public int value__;
    public static TextCapsType None;
    public static TextCapsType All;
    public static TextCapsType Small;
}
public enum Aspose.Cells.TextCrossType : Enum {
    public int value__;
    public static TextCrossType Default;
    public static TextCrossType CrossKeep;
    public static TextCrossType CrossOverride;
    public static TextCrossType StrictInCell;
}
public enum Aspose.Cells.TextDirectionType : Enum {
    public int value__;
    public static TextDirectionType Context;
    public static TextDirectionType LeftToRight;
    public static TextDirectionType RightToLeft;
}
public enum Aspose.Cells.TextOrientationType : Enum {
    public int value__;
    public static TextOrientationType ClockWise;
    public static TextOrientationType CounterClockWise;
    public static TextOrientationType NoRotation;
    public static TextOrientationType TopToBottom;
}
public enum Aspose.Cells.TextStrikeType : Enum {
    public int value__;
    public static TextStrikeType Single;
    public static TextStrikeType Double;
    public static TextStrikeType None;
}
public class Aspose.Cells.ThemeColor : object {
    [DebuggerBrowsableAttribute("0")]
private ThemeColorType ;
    [DebuggerBrowsableAttribute("0")]
private double ;
    public ThemeColorType ColorType { get; public set; }
    public double Tint { get; public set; }
    public ThemeColor(ThemeColorType type, double tint);
    public ThemeColorType get_ColorType();
    public void set_ColorType(ThemeColorType value);
    public double get_Tint();
    public void set_Tint(double value);
}
public enum Aspose.Cells.ThemeColorType : Enum {
    public int value__;
    public static ThemeColorType Background1;
    public static ThemeColorType Text1;
    public static ThemeColorType Background2;
    public static ThemeColorType Text2;
    public static ThemeColorType Accent1;
    public static ThemeColorType Accent2;
    public static ThemeColorType Accent3;
    public static ThemeColorType Accent4;
    public static ThemeColorType Accent5;
    public static ThemeColorType Accent6;
    public static ThemeColorType Hyperlink;
    public static ThemeColorType FollowedHyperlink;
    public static ThemeColorType StyleColor;
}
public class Aspose.Cells.ThreadedComment : object {
    [DebuggerBrowsableAttribute("0")]
[]
internal ThreadedCommentCollection ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal DateTime ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public int Row { get; }
    public int Column { get; }
    public string Notes { get; public set; }
    public ThreadedCommentAuthor Author { get; public set; }
    public DateTime CreatedTime { get; public set; }
    internal ThreadedComment(ThreadedCommentCollection );
    internal ThreadedComment(ThreadedCommentCollection , string );
    public int get_Row();
    public int get_Column();
    public string get_Notes();
    public void set_Notes(string value);
    public ThreadedCommentAuthor get_Author();
    public void set_Author(ThreadedCommentAuthor value);
    public DateTime get_CreatedTime();
    public void set_CreatedTime(DateTime value);
    internal void (ThreadedComment , CopyOptions , Hashtable );
}
public class Aspose.Cells.ThreadedCommentAuthor : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string Name { get; public set; }
    public string UserId { get; public set; }
    public string ProviderId { get; public set; }
    internal ThreadedCommentAuthor(string , string , string );
    public string get_Name();
    public void set_Name(string value);
    public string get_UserId();
    public void set_UserId(string value);
    public string get_ProviderId();
    public void set_ProviderId(string value);
    internal bool (ThreadedCommentAuthor );
    internal static ThreadedCommentAuthor (ThreadedCommentAuthor );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ThreadedCommentAuthorCollection : CollectionBase`1<ThreadedCommentAuthor> {
    [DebuggerBrowsableAttribute("0")]
internal ThreadedCommentAuthor ;
    public ThreadedCommentAuthor CurrentPerson { get; public set; }
    public ThreadedCommentAuthor Item { get; }
    public ThreadedCommentAuthor Item { get; }
    internal ThreadedCommentAuthor ();
    public ThreadedCommentAuthor get_CurrentPerson();
    public void set_CurrentPerson(ThreadedCommentAuthor value);
    public int IndexOf(ThreadedCommentAuthor author);
    public ThreadedCommentAuthor get_Item(int index);
    public ThreadedCommentAuthor get_Item(string name);
    internal ThreadedCommentAuthor (string );
    public int Add(string name, string userId, string providerId);
    internal void (ThreadedCommentAuthor );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ThreadedCommentCollection : CollectionBase`1<ThreadedComment> {
    [DebuggerBrowsableAttribute("0")]
internal static string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Comment ;
    public ThreadedComment Item { get; }
    internal ThreadedCommentCollection(Comment );
    private static ThreadedCommentCollection();
    public ThreadedComment get_Item(int index);
    public int Add(string text, ThreadedCommentAuthor author);
    internal Worksheet ();
    internal int (ThreadedComment );
    internal int ();
}
public class Aspose.Cells.ThreadInterruptMonitor : AbstractInterruptMonitor {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Thread ;
    public bool IsInterruptionRequested { get; }
    public bool TerminateWithoutException { get; }
    public ThreadInterruptMonitor(bool terminateWithoutException);
    public void StartMonitor(int msLimit);
    public void FinishMonitor();
    public virtual bool get_IsInterruptionRequested();
    public virtual bool get_TerminateWithoutException();
    private void (int );
    private static void (object );
}
public class Aspose.Cells.Timelines.Timeline : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal DateTime ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal TimelineCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public string Caption { get; public set; }
    public string Name { get; public set; }
    public int LeftPixel { get; public set; }
    public int TopPixel { get; public set; }
    public int WidthPixel { get; public set; }
    public int HeightPixel { get; public set; }
    internal Timeline(TimelineCollection ,  );
    internal void (Timeline , CopyOptions );
    private void ();
    internal  ();
    internal  ();
    internal void ( );
    internal string ();
    internal void (string );
    public string get_Caption();
    public void set_Caption(string value);
    internal  ();
    public string get_Name();
    public void set_Name(string value);
    public int get_LeftPixel();
    public void set_LeftPixel(int value);
    public int get_TopPixel();
    public void set_TopPixel(int value);
    public int get_WidthPixel();
    public void set_WidthPixel(int value);
    public int get_HeightPixel();
    public void set_HeightPixel(int value);
    internal  ();
    private void ( ,  );
    private void ( ,  ,  , int , int );
    private void ( ,  , int , int , int , int ,  );
    private void ( ,  , int , int , int ,  );
    private void ( ,  , int , int , int ,  );
    private void ( ,  , int ,  );
    private int (DateTime , DateTime ,  );
    private int (int , int );
    private bool ( , int );
    private bool ( , int , int );
    private bool ( , int , int );
    private bool ( , int , int , int );
    private void (int , Int32& , Int32& );
    private string ( );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Timelines.TimelineCollection : CollectionBase`1<Timeline> {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    public Timeline Item { get; }
    public Timeline Item { get; }
    internal TimelineCollection(Worksheet );
    internal Worksheet ();
    internal WorksheetCollection ();
    public Timeline get_Item(int index);
    public Timeline get_Item(string name);
    internal int (Timeline );
    public int Add(PivotTable pivot, int row, int column, string baseFieldName);
    private string (string );
    private int ();
    private int (string );
    public int Add(PivotTable pivot, string destCellName, string baseFieldName);
    public int Add(PivotTable pivot, int row, int column, int baseFieldIndex);
    public int Add(PivotTable pivot, string destCellName, int baseFieldIndex);
    public int Add(PivotTable pivot, int row, int column, PivotField baseField);
    public int Add(PivotTable pivot, string destCellName, PivotField baseField);
}
public enum Aspose.Cells.TimePeriodType : Enum {
    public int value__;
    public static TimePeriodType Today;
    public static TimePeriodType Yesterday;
    public static TimePeriodType Tomorrow;
    public static TimePeriodType Last7Days;
    public static TimePeriodType ThisMonth;
    public static TimePeriodType LastMonth;
    public static TimePeriodType NextMonth;
    public static TimePeriodType ThisWeek;
    public static TimePeriodType LastWeek;
    public static TimePeriodType NextWeek;
    public static TimePeriodType ThisYear;
    public static TimePeriodType LastYear;
    public static TimePeriodType NextYear;
}
public class Aspose.Cells.Top10 : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public bool IsPercent { get; public set; }
    public bool IsBottom { get; public set; }
    public int Rank { get; public set; }
    internal void (Top10 );
    public bool get_IsPercent();
    public void set_IsPercent(bool value);
    public bool get_IsBottom();
    public void set_IsBottom(bool value);
    public int get_Rank();
    public void set_Rank(int value);
}
[]
public class Aspose.Cells.Top10Filter : object {
    [DebuggerBrowsableAttribute("0")]
[]
private FilterColumn ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    public bool IsTop { get; public set; }
    public bool IsPercent { get; public set; }
    public int Items { get; public set; }
    public object Criteria { get; public set; }
    internal Top10Filter(FilterColumn );
    internal Top10Filter(FilterColumn , bool , bool , int );
    internal void (Top10Filter );
    public bool get_IsTop();
    public void set_IsTop(bool value);
    public bool get_IsPercent();
    public void set_IsPercent(bool value);
    public int get_Items();
    public void set_Items(int value);
    internal void (bool , bool , int );
    public object get_Criteria();
    public void set_Criteria(object value);
}
public class Aspose.Cells.TwoColorGradient : object {
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
private Color ;
    [DebuggerBrowsableAttribute("0")]
private GradientStyleType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public Color Color1 { get; public set; }
    public Color Color2 { get; public set; }
    public GradientStyleType GradientStyleType { get; public set; }
    public int Variant { get; public set; }
    public TwoColorGradient(Color color1, Color color2, GradientStyleType gradientStyleType, int variant);
    public Color get_Color1();
    public void set_Color1(Color value);
    public Color get_Color2();
    public void set_Color2(Color value);
    public GradientStyleType get_GradientStyleType();
    public void set_GradientStyleType(GradientStyleType value);
    public int get_Variant();
    public void set_Variant(int value);
}
public class Aspose.Cells.TxtLoadOptions : AbstractTextLoadOptions {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private ICustomParser[] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal char ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public char Separator { get; public set; }
    public string SeparatorString { get; public set; }
    public bool IsMultiEncoded { get; public set; }
    public ICustomParser[] PreferredParsers { get; public set; }
    public bool HasFormula { get; public set; }
    public bool HasTextQualifier { get; public set; }
    public char TextQualifier { get; public set; }
    public bool TreatConsecutiveDelimitersAsOne { get; public set; }
    public bool TreatQuotePrefixAsValue { get; public set; }
    public bool ExtendToNextSheet { get; public set; }
    public int HeaderRowsCount { get; public set; }
    public int HeaderColumnsCount { get; public set; }
    public int MaxRowCount { get; public set; }
    public int MaxColumnCount { get; public set; }
    public TxtLoadOptions(LoadFormat loadFormat);
    internal static LoadOptions (char , bool , string );
    internal virtual LoadOptions 3brubdvsxd6xvlegksy2gu4sdj469srm();
    public char get_Separator();
    public void set_Separator(char value);
    public string get_SeparatorString();
    public void set_SeparatorString(string value);
    internal bool ();
    public bool get_IsMultiEncoded();
    public void set_IsMultiEncoded(bool value);
    public ICustomParser[] get_PreferredParsers();
    public void set_PreferredParsers(ICustomParser[] value);
    internal bool ();
    internal void (bool );
    public bool get_HasFormula();
    public void set_HasFormula(bool value);
    public bool get_HasTextQualifier();
    public void set_HasTextQualifier(bool value);
    public char get_TextQualifier();
    public void set_TextQualifier(char value);
    public bool get_TreatConsecutiveDelimitersAsOne();
    public void set_TreatConsecutiveDelimitersAsOne(bool value);
    public bool get_TreatQuotePrefixAsValue();
    public void set_TreatQuotePrefixAsValue(bool value);
    public bool get_ExtendToNextSheet();
    public void set_ExtendToNextSheet(bool value);
    public int get_HeaderRowsCount();
    public void set_HeaderRowsCount(int value);
    public int get_HeaderColumnsCount();
    public void set_HeaderColumnsCount(int value);
    public int get_MaxRowCount();
    public void set_MaxRowCount(int value);
    public int get_MaxColumnCount();
    public void set_MaxColumnCount(int value);
}
public enum Aspose.Cells.TxtLoadStyleStrategy : Enum {
    public int value__;
    public static TxtLoadStyleStrategy None;
    public static TxtLoadStyleStrategy BuiltIn;
    public static TxtLoadStyleStrategy ExactFormat;
}
public class Aspose.Cells.TxtSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Encoding ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private TxtValueQuoteType ;
    [DebuggerBrowsableAttribute("0")]
private CellValueFormatStrategy ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal char ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public char Separator { get; public set; }
    public string SeparatorString { get; public set; }
    public Encoding Encoding { get; public set; }
    [ObsoleteAttribute("Use QuoteType property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool AlwaysQuoted { get; public set; }
    public TxtValueQuoteType QuoteType { get; public set; }
    public CellValueFormatStrategy FormatStrategy { get; public set; }
    public LightCellsDataProvider LightCellsDataProvider { get; public set; }
    public bool TrimLeadingBlankRowAndColumn { get; public set; }
    public bool TrimTailingBlankCells { get; public set; }
    public bool KeepSeparatorsForBlankRow { get; public set; }
    public CellArea ExportArea { get; public set; }
    public bool ExportQuotePrefix { get; public set; }
    public bool ExportAllSheets { get; public set; }
    public TxtSaveOptions(SaveFormat saveFormat);
    internal static TxtSaveOptions (WorkbookSettings , SaveFormat , SaveOptions );
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    public char get_Separator();
    public void set_Separator(char value);
    public string get_SeparatorString();
    public void set_SeparatorString(string value);
    internal bool ();
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_AlwaysQuoted();
    public void set_AlwaysQuoted(bool value);
    public TxtValueQuoteType get_QuoteType();
    public void set_QuoteType(TxtValueQuoteType value);
    public CellValueFormatStrategy get_FormatStrategy();
    public void set_FormatStrategy(CellValueFormatStrategy value);
    public LightCellsDataProvider get_LightCellsDataProvider();
    public void set_LightCellsDataProvider(LightCellsDataProvider value);
    public bool get_TrimLeadingBlankRowAndColumn();
    public void set_TrimLeadingBlankRowAndColumn(bool value);
    public bool get_TrimTailingBlankCells();
    public void set_TrimTailingBlankCells(bool value);
    public bool get_KeepSeparatorsForBlankRow();
    public void set_KeepSeparatorsForBlankRow(bool value);
    public CellArea get_ExportArea();
    public void set_ExportArea(CellArea value);
    public bool get_ExportQuotePrefix();
    public void set_ExportQuotePrefix(bool value);
    public bool get_ExportAllSheets();
    public void set_ExportAllSheets(bool value);
}
public enum Aspose.Cells.TxtValueQuoteType : Enum {
    public int value__;
    public static TxtValueQuoteType Normal;
    public static TxtValueQuoteType Always;
    public static TxtValueQuoteType Minimum;
    public static TxtValueQuoteType Never;
}
public class Aspose.Cells.UnionRange : object {
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal Range[] ;
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    public int FirstRow { get; }
    public int FirstColumn { get; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    public object Value { get; public set; }
    public string Name { get; public set; }
    public string RefersTo { get; }
    public bool HasRange { get; }
    public Hyperlink[] Hyperlinks { get; }
    public int CellCount { get; }
    public int RangeCount { get; }
    public Range[] Ranges { get; }
    internal UnionRange(WorksheetCollection );
    internal UnionRange(WorksheetCollection , Range[] );
    internal UnionRange(UnionRange );
    public int get_FirstRow();
    public int get_FirstColumn();
    public int get_RowCount();
    public int get_ColumnCount();
    public void Merge();
    public void UnMerge();
    public void PutValue(string stringValue, bool isConverted, bool setStyle);
    public object get_Value();
    public void set_Value(object value);
    public string get_Name();
    public void set_Name(string value);
    public string get_RefersTo();
    public bool get_HasRange();
    public Hyperlink[] get_Hyperlinks();
    public void SetStyle(Style style);
    public void ApplyStyle(Style style, StyleFlag flag);
    public void Copy(UnionRange range, PasteOptions options);
    [("Cell")]
public IEnumerator GetEnumerator();
    public int get_CellCount();
    public int get_RangeCount();
    public Range[] get_Ranges();
    public void SetOutlineBorders(CellBorderType[] borderStyles, Color[] borderColors);
    public void SetOutlineBorders(CellBorderType borderStyle, Color borderColor);
    public UnionRange Intersect(string range);
    public UnionRange Intersect(UnionRange unionRange);
    public UnionRange Intersect(Range[] ranges);
    private static void (List`1<Range> , Range[] , Range );
    public UnionRange Union(string range);
    public UnionRange Union(UnionRange unionRange);
    public UnionRange Union(Range[] ranges);
    private void (List`1<Range> , Range[] , Range );
    private static List`1<Range> (List`1<Range> );
}
public enum Aspose.Cells.UpdateLinksType : Enum {
    public int value__;
    public static UpdateLinksType UserSet;
    public static UpdateLinksType Never;
    public static UpdateLinksType Always;
}
public class Aspose.Cells.Utility.ConversionUtility : object {
    public static void Convert(string source, string saveAs);
    public static void Convert(string source, LoadOptions loadOptions, string saveAs, SaveOptions saveOptions);
}
public class Aspose.Cells.Utility.ExportRangeToJsonOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool HasHeaderRow { get; public set; }
    public bool ExportAsString { get; public set; }
    public bool ExportEmptyCells { get; public set; }
    public string Indent { get; public set; }
    public bool get_HasHeaderRow();
    public void set_HasHeaderRow(bool value);
    public bool get_ExportAsString();
    public void set_ExportAsString(bool value);
    public bool get_ExportEmptyCells();
    public void set_ExportEmptyCells(bool value);
    public string get_Indent();
    public void set_Indent(string value);
}
public class Aspose.Cells.Utility.JsonLayoutOptions : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private Style ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public bool ArrayAsTable { get; public set; }
    public bool IgnoreNull { get; public set; }
    [ObsoleteAttribute("Use JsonLayoutOptions.IgnoreTitle property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IgnoreArrayTitle { get; public set; }
    [ObsoleteAttribute("Use JsonLayoutOptions.IgnoreTitle property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IgnoreObjectTitle { get; public set; }
    public bool IgnoreTitle { get; public set; }
    public bool ConvertNumericOrDate { get; public set; }
    public string NumberFormat { get; public set; }
    public string DateFormat { get; public set; }
    public Style TitleStyle { get; public set; }
    public bool KeptSchema { get; public set; }
    public bool get_ArrayAsTable();
    public void set_ArrayAsTable(bool value);
    public bool get_IgnoreNull();
    public void set_IgnoreNull(bool value);
    public bool get_IgnoreArrayTitle();
    public void set_IgnoreArrayTitle(bool value);
    public bool get_IgnoreObjectTitle();
    public void set_IgnoreObjectTitle(bool value);
    public bool get_IgnoreTitle();
    public void set_IgnoreTitle(bool value);
    public bool get_ConvertNumericOrDate();
    public void set_ConvertNumericOrDate(bool value);
    public string get_NumberFormat();
    public void set_NumberFormat(string value);
    public string get_DateFormat();
    public void set_DateFormat(string value);
    public Style get_TitleStyle();
    public void set_TitleStyle(Style value);
    public bool get_KeptSchema();
    public void set_KeptSchema(bool value);
}
public class Aspose.Cells.Utility.JsonUtility : object {
    public static Int32[] ImportData(string json, Cells cells, int row, int column, JsonLayoutOptions option);
    internal static Int32[] (string , Workbook , JsonLoadOptions );
    internal static Int32[] ( , int , bool , Workbook , JsonLoadOptions );
    private static  (string );
    internal static void ( , string ,  ,  );
    internal static void ( , string ,  ,  , Hashtable );
    internal static void ( , string ,  ,  );
    private static Int32[] (Worksheet , int , int , JsonLayoutOptions ,  , int , bool );
    private static bool ( );
    [ObsoleteAttribute("Use ExportRangeToJson(Range range, JsonSaveOptions options) method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public static string ExportRangeToJson(Range range, ExportRangeToJsonOptions options);
    public static string ExportRangeToJson(Range range, JsonSaveOptions options);
}
public class Aspose.Cells.Validation : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
[]
internal ValidationCollection ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private OperatorType ;
    [DebuggerBrowsableAttribute("0")]
private ValidationAlertType ;
    [DebuggerBrowsableAttribute("0")]
private ValidationType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    public OperatorType Operator { get; public set; }
    public ValidationAlertType AlertStyle { get; public set; }
    public ValidationType Type { get; public set; }
    public string InputMessage { get; public set; }
    public string InputTitle { get; public set; }
    public string ErrorMessage { get; public set; }
    public string ErrorTitle { get; public set; }
    public bool ShowInput { get; public set; }
    public bool ShowError { get; public set; }
    public bool IgnoreBlank { get; public set; }
    public string Formula1 { get; public set; }
    public string Formula2 { get; public set; }
    public object Value1 { get; public set; }
    public object Value2 { get; public set; }
    public bool InCellDropDown { get; public set; }
    public CellArea[] Areas { get; }
    internal Validation(ValidationCollection );
    internal bool ();
    public OperatorType get_Operator();
    public void set_Operator(OperatorType value);
    public ValidationAlertType get_AlertStyle();
    public void set_AlertStyle(ValidationAlertType value);
    public ValidationType get_Type();
    public void set_Type(ValidationType value);
    public string get_InputMessage();
    public void set_InputMessage(string value);
    public string get_InputTitle();
    public void set_InputTitle(string value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public string get_ErrorTitle();
    public void set_ErrorTitle(string value);
    public bool get_ShowInput();
    public void set_ShowInput(bool value);
    public bool get_ShowError();
    public void set_ShowError(bool value);
    public bool get_IgnoreBlank();
    public void set_IgnoreBlank(bool value);
    public string GetFormula1(bool isR1C1, bool isLocal);
    public string GetFormula2(bool isR1C1, bool isLocal);
    public string GetFormula1(bool isR1C1, bool isLocal, int row, int column);
    public string GetFormula2(bool isR1C1, bool isLocal, int row, int column);
    internal string ();
    internal string (bool );
    private string (Byte[] , bool );
    public void SetFormula1(string formula, bool isR1C1, bool isLocal);
    public void SetFormula2(string formula, bool isR1C1, bool isLocal);
    internal Byte[] (string ,  );
    public string get_Formula1();
    public void set_Formula1(string value);
    public string get_Formula2();
    public void set_Formula2(string value);
    public object GetListValue(int row, int column);
    public object get_Value1();
    public void set_Value1(object value);
    public object get_Value2();
    public void set_Value2(object value);
    public object GetValue(int row, int column, bool isValue1);
    private  (bool );
    private  (bool );
    internal Byte[] (object );
    public bool get_InCellDropDown();
    public void set_InCellDropDown(bool value);
    internal void ( );
    internal Int32[] ();
    public CellArea[] get_Areas();
    public void AddArea(CellArea cellArea);
    public void AddArea(CellArea cellArea, bool checkIntersection, bool checkEdge);
    public void AddAreas(CellArea[] areas, bool checkIntersection, bool checkEdge);
    private void (int , int );
    public void RemoveArea(CellArea cellArea);
    public void RemoveAreas(CellArea[] areas);
    public void RemoveACell(int row, int column);
    internal void (int , CellArea , bool );
    internal void (CellArea , bool );
    internal  ();
    internal void ( );
    internal void (Validation );
    public void Copy(Validation source, CopyOptions copyOption);
    internal void (Validation , CellArea , Worksheet , CopyOptions );
    internal bool ();
    internal void (string , string ,  );
    internal string ();
}
public enum Aspose.Cells.ValidationAlertType : Enum {
    public int value__;
    public static ValidationAlertType Information;
    public static ValidationAlertType Stop;
    public static ValidationAlertType Warning;
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.ValidationCollection : CollectionBase`1<Validation> {
    [DebuggerBrowsableAttribute("0")]
[]
private Worksheet ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public Validation Item { get; }
    internal ValidationCollection(Worksheet );
    internal Worksheet ();
    internal int (Validation );
    [ObsoleteAttribute("Use ValidationCollection.Add(CellArea) method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public int Add();
    public int Add(CellArea ca);
    internal int (Validation );
    public Validation get_Item(int index);
    public void RemoveACell(int row, int column);
    public void RemoveArea(CellArea ca);
    internal void (CellArea , Validation );
    internal void (CellArea[] , Validation );
    public Validation GetValidationInCell(int row, int column);
    internal void (ValidationCollection , CopyOptions );
    internal void (ValidationCollection , int , int , int , CopyOptions );
    internal void (ValidationCollection , int , int , int , CopyOptions );
    internal void (ValidationCollection , CellArea , CellArea , CopyOptions , bool );
    internal void ( );
    internal void (int , CellArea , bool );
    internal void (CellArea , bool );
    internal int ();
    internal void (int );
    internal bool ();
    internal void (Byte[] );
    internal void ();
}
public enum Aspose.Cells.ValidationType : Enum {
    public int value__;
    public static ValidationType AnyValue;
    public static ValidationType WholeNumber;
    public static ValidationType Decimal;
    public static ValidationType List;
    public static ValidationType Date;
    public static ValidationType Time;
    public static ValidationType TextLength;
    public static ValidationType Custom;
}
public class Aspose.Cells.Vba.VbaModule : object {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal VbaModuleType ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal static string ;
    [DebuggerBrowsableAttribute("0")]
[]
internal VbaProject ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string Name { get; public set; }
    public VbaModuleType Type { get; }
    public string Codes { get; public set; }
    internal VbaModule(VbaProject );
    internal VbaModule(VbaProject , VbaModuleType , string );
    internal VbaModule(VbaProject , VbaModuleType , Byte[] , Byte[] );
    private static VbaModule();
    public string get_Name();
    public void set_Name(string value);
    public VbaModuleType get_Type();
    public string get_Codes();
    public void set_Codes(string value);
    internal void (VbaModule );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Vba.VbaModuleCollection : CollectionBase`1<VbaModule> {
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
[]
internal VbaProject ;
    public VbaModule Item { get; }
    public VbaModule Item { get; }
    internal VbaModuleCollection(VbaProject );
    internal void (VbaModule );
    public void AddDesignerStorage(string name, Byte[] data);
    public Byte[] GetDesignerStorage(string name);
    public int Add(Worksheet sheet);
    public int Add(VbaModuleType type, string name);
    public int AddUserForm(string name, string codes, Byte[] designerStorage);
    internal int (VbaModuleType , Byte[] , Byte[] );
    public VbaModule get_Item(int index);
    public void Remove(Worksheet sheet);
    public void Remove(string name);
    public VbaModule get_Item(string name);
    internal bool ();
}
public enum Aspose.Cells.Vba.VbaModuleType : Enum {
    public int value__;
    public static VbaModuleType Procedural;
    public static VbaModuleType Document;
    public static VbaModuleType Class;
    public static VbaModuleType Designer;
}
public class Aspose.Cells.Vba.VbaProject : object {
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Encoding ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal VbaProjectReferenceCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Workbook ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private VbaModuleCollection ;
    public bool IsValidSigned { get; }
    public Byte[] CertRawData { get; }
    public Encoding Encoding { get; public set; }
    public string Name { get; public set; }
    public bool IsSigned { get; }
    public bool IsProtected { get; }
    public bool IslockedForViewing { get; }
    public VbaModuleCollection Modules { get; }
    public VbaProjectReferenceCollection References { get; }
    internal VbaProject(Workbook );
    internal VbaProject(Workbook ,  , string );
    internal void (DigitalSignatureCollection );
    public void Sign(DigitalSignature digitalSignature);
    public bool get_IsValidSigned();
    public Byte[] get_CertRawData();
    internal Byte[] ();
    internal void (Byte[] );
    internal Byte[] ();
    internal void (Byte[] );
    private static Byte[] (Byte[] );
    private static Byte[] (Byte[] );
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsSigned();
    private void (Workbook );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public void Protect(bool islockedForViewing, string password);
    public bool get_IsProtected();
    public bool get_IslockedForViewing();
    internal bool ();
    internal void (bool );
    public void Copy(VbaProject source);
    internal Stream (string );
    internal void ();
    internal Stream ( );
    internal  ();
    internal  ();
    public VbaModuleCollection get_Modules();
    public VbaProjectReferenceCollection get_References();
    internal void (string , string );
    public bool ValidatePassword(string password);
}
public class Aspose.Cells.Vba.VbaProjectReference : object {
    [DebuggerBrowsableAttribute("0")]
internal VbaProjectReferenceType ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    public VbaProjectReferenceType Type { get; }
    public string Name { get; public set; }
    public string Libid { get; public set; }
    public string Twiddledlibid { get; public set; }
    public string ExtendedLibid { get; public set; }
    public string RelativeLibid { get; public set; }
    internal VbaProjectReference(VbaProjectReferenceType , string , string , string , string );
    public void Copy(VbaProjectReference source);
    public VbaProjectReferenceType get_Type();
    public string get_Name();
    public void set_Name(string value);
    public string get_Libid();
    public void set_Libid(string value);
    public string get_Twiddledlibid();
    public void set_Twiddledlibid(string value);
    public string get_ExtendedLibid();
    public void set_ExtendedLibid(string value);
    public string get_RelativeLibid();
    public void set_RelativeLibid(string value);
    internal bool (VbaProjectReference );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.Vba.VbaProjectReferenceCollection : CollectionBase`1<VbaProjectReference> {
    [DebuggerBrowsableAttribute("0")]
[]
private VbaProject ;
    public VbaProjectReference Item { get; }
    internal VbaProjectReferenceCollection(VbaProject );
    public VbaProjectReference get_Item(int i);
    internal int (VbaProjectReference );
    public int AddRegisteredReference(string name, string libid);
    public int AddControlRefrernce(string name, string libid, string twiddledlibid, string extendedLibid);
    public int AddProjectRefrernce(string name, string absoluteLibid, string relativeLibid);
    public void Copy(VbaProjectReferenceCollection source);
}
public enum Aspose.Cells.Vba.VbaProjectReferenceType : Enum {
    public int value__;
    public static VbaProjectReferenceType Registered;
    public static VbaProjectReferenceType Control;
    public static VbaProjectReferenceType Project;
}
public class Aspose.Cells.VerticalPageBreak : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public int StartRow { get; }
    public int EndRow { get; }
    public int Column { get; }
    internal VerticalPageBreak(int );
    public int get_StartRow();
    public int get_EndRow();
    internal void (int );
    internal void (int );
    public int get_Column();
    internal void (int );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.VerticalPageBreakCollection : CollectionBase`1<VerticalPageBreak> {
    public VerticalPageBreak Item { get; }
    public VerticalPageBreak Item { get; }
    public VerticalPageBreak get_Item(int index);
    public VerticalPageBreak get_Item(string cellName);
    public int Add(int startRow, int endRow, int column);
    internal void (int , int , int );
    internal void (int );
    internal void (int , int );
    public int Add(int column);
    public int Add(int row, int column);
    public int Add(string cellName);
    internal void (VerticalPageBreakCollection );
    public void RemoveAt(int index);
    internal void (int , int );
}
public enum Aspose.Cells.ViewType : Enum {
    public int value__;
    public static ViewType NormalView;
    public static ViewType PageBreakPreview;
    public static ViewType PageLayoutView;
}
public enum Aspose.Cells.VisibilityType : Enum {
    public int value__;
    public static VisibilityType Visible;
    public static VisibilityType Hidden;
    public static VisibilityType VeryHidden;
}
public class Aspose.Cells.WarningInfo : object {
    [DebuggerBrowsableAttribute("0")]
private WarningType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
private object ;
    public WarningType WarningType { get; }
    public string Description { get; }
    public object ErrorObject { get; }
    public object CorrectedObject { get; public set; }
    internal WarningInfo(WarningType , string );
    internal static WarningInfo (CellsException );
    public WarningType get_WarningType();
    public string get_Description();
    public object get_ErrorObject();
    public object get_CorrectedObject();
    public void set_CorrectedObject(object value);
}
public enum Aspose.Cells.WarningType : Enum {
    public int value__;
    public static WarningType FontSubstitution;
    public static WarningType DuplicateDefinedName;
    public static WarningType UnsupportedFileFormat;
    public static WarningType InvalidTextOfDefinedName;
    public static WarningType InvalidFontName;
    public static WarningType InvalidAutoFilterRange;
    public static WarningType IO;
    public static WarningType Limitation;
    public static WarningType InvalidData;
    public static WarningType Formula;
    public static WarningType InvalidOperator;
}
public class Aspose.Cells.WebExtensions.WebExtension : object {
    [DebuggerBrowsableAttribute("0")]
[]
private WebExtensionCollection ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal WebExtensionReference ;
    [DebuggerBrowsableAttribute("0")]
internal WebExtensionReferenceCollection ;
    [DebuggerBrowsableAttribute("0")]
internal WebExtensionPropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
internal WebExtensionBindingCollection ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string Id { get; public set; }
    public bool IsFrozen { get; public set; }
    public WebExtensionReference Reference { get; }
    public WebExtensionReferenceCollection AlterReferences { get; }
    public WebExtensionPropertyCollection Properties { get; }
    public WebExtensionBindingCollection Bindings { get; }
    internal WebExtension(WebExtensionCollection );
    internal int ();
    public string get_Id();
    public void set_Id(string value);
    public bool get_IsFrozen();
    public void set_IsFrozen(bool value);
    public WebExtensionReference get_Reference();
    public WebExtensionReferenceCollection get_AlterReferences();
    public WebExtensionPropertyCollection get_Properties();
    public WebExtensionBindingCollection get_Bindings();
}
public class Aspose.Cells.WebExtensions.WebExtensionBinding : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string Id { get; public set; }
    public string Type { get; public set; }
    public string Appref { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Appref();
    public void set_Appref(string value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.WebExtensions.WebExtensionBindingCollection : CollectionBase`1<WebExtensionBinding> {
    public WebExtensionBinding Item { get; }
    public WebExtensionBinding get_Item(int index);
    public int Add();
    internal int (WebExtensionBinding );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.WebExtensions.WebExtensionCollection : CollectionBase`1<WebExtension> {
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    public WebExtension Item { get; }
    internal WebExtensionCollection(WorksheetCollection );
    public WebExtension get_Item(int index);
    public int Add();
    public int AddWebVideoPlayer(string url, bool autoPlay, int startTime, int endTime);
    public void RemoveAt(int index);
}
public class Aspose.Cells.WebExtensions.WebExtensionProperty : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string Name { get; public set; }
    public string Value { get; public set; }
    internal WebExtensionProperty(string , string );
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.WebExtensions.WebExtensionPropertyCollection : CollectionBase`1<WebExtensionProperty> {
    public WebExtensionProperty Item { get; }
    public WebExtensionProperty Item { get; }
    public WebExtensionProperty get_Item(int index);
    public WebExtensionProperty get_Item(string name);
    public int Add(string name, string value);
    public void RemoveAt(string name);
    internal int (string , string );
}
public class Aspose.Cells.WebExtensions.WebExtensionReference : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal WebExtensionStoreType ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    public string Id { get; public set; }
    public string Version { get; public set; }
    public string StoreName { get; public set; }
    public WebExtensionStoreType StoreType { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_StoreName();
    public void set_StoreName(string value);
    public WebExtensionStoreType get_StoreType();
    public void set_StoreType(WebExtensionStoreType value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.WebExtensions.WebExtensionReferenceCollection : CollectionBase`1<WebExtensionReference> {
    public WebExtensionReference Item { get; }
    public WebExtensionReference get_Item(int index);
    public int Add();
    internal int (WebExtensionReference );
}
public enum Aspose.Cells.WebExtensions.WebExtensionStoreType : Enum {
    public int value__;
    public static WebExtensionStoreType OMEX;
    public static WebExtensionStoreType SPCatalog;
    public static WebExtensionStoreType SPApp;
    public static WebExtensionStoreType Exchange;
    public static WebExtensionStoreType FileSystem;
    public static WebExtensionStoreType Registry;
    public static WebExtensionStoreType ExCatalog;
}
public class Aspose.Cells.WebExtensions.WebExtensionTaskPane : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
[]
private WebExtensionTaskPaneCollection ;
    public WebExtension WebExtension { get; public set; }
    public string DockState { get; public set; }
    public bool IsVisible { get; public set; }
    public bool IsLocked { get; public set; }
    public double Width { get; public set; }
    public int Row { get; public set; }
    internal WebExtensionTaskPane(WebExtensionTaskPaneCollection );
    public WebExtension get_WebExtension();
    public void set_WebExtension(WebExtension value);
    public string get_DockState();
    public void set_DockState(string value);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public double get_Width();
    public void set_Width(double value);
    public int get_Row();
    public void set_Row(int value);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.WebExtensions.WebExtensionTaskPaneCollection : CollectionBase`1<WebExtensionTaskPane> {
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    public WebExtensionTaskPane Item { get; }
    internal WebExtensionTaskPaneCollection(WorksheetCollection );
    public WebExtensionTaskPane get_Item(int index);
    public int Add();
}
public class Aspose.Cells.Workbook : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
internal WorkbookSettings ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
[]
private static CellsDataTableFactory ;
    [DebuggerBrowsableAttribute("0")]
private DataSorter ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal FileFormatType ;
    [DebuggerBrowsableAttribute("0")]
internal FileFormatType ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal AbstractInterruptMonitor ;
    [DebuggerBrowsableAttribute("0")]
internal ContentTypePropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
internal CustomXmlPartCollection ;
    [DebuggerBrowsableAttribute("0")]
internal DataMashup ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal ExternalConnectionCollection ;
    [DebuggerBrowsableAttribute("0")]
internal DigitalSignatureCollection ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public WorkbookSettings Settings { get; }
    public WorksheetCollection Worksheets { get; }
    public bool IsLicensed { get; }
    public Color[] Colors { get; }
    public int CountOfStylesInPool { get; }
    public Style DefaultStyle { get; public set; }
    public bool IsDigitallySigned { get; }
    public bool IsWorkbookProtectedWithPassword { get; }
    public VbaProject VbaProject { get; }
    public bool HasMacro { get; }
    public bool HasRevisions { get; }
    public string FileName { get; public set; }
    []
public CellsDataTableFactory CellsDataTableFactory { get; }
    public DataSorter DataSorter { get; }
    public string Theme { get; }
    public BuiltInDocumentPropertyCollection BuiltInDocumentProperties { get; }
    public CustomDocumentPropertyCollection CustomDocumentProperties { get; }
    public FileFormatType FileFormat { get; public set; }
    public AbstractInterruptMonitor InterruptMonitor { get; public set; }
    public ContentTypePropertyCollection ContentTypeProperties { get; }
    public CustomXmlPartCollection CustomXmlParts { get; }
    public DataMashup DataMashup { get; }
    public string RibbonXml { get; public set; }
    public string AbsolutePath { get; public set; }
    public ExternalConnectionCollection DataConnections { get; }
    private static Workbook();
    public Workbook(FileFormatType fileFormatType);
    []
public Workbook(string file);
    []
public Workbook(Stream stream);
    []
public Workbook(string file, LoadOptions loadOptions);
    []
public Workbook(Stream stream, LoadOptions loadOptions);
    internal void (int );
    internal bool ();
    internal void ();
    public WorkbookSettings get_Settings();
    internal void ();
    internal void ();
    internal void ();
    public void ParseFormulas(bool ignoreError);
    internal void ( );
    public void StartAccessCache(AccessCacheOptions opts);
    public void CloseAccessCache(AccessCacheOptions opts);
    private void (string , LoadOptions );
    private void (Stream , LoadOptions , bool );
    public void Save(string fileName, SaveFormat saveFormat);
    public void Save(string fileName);
    public void Save(string fileName, SaveOptions saveOptions);
    []
public void Save(Stream stream, SaveFormat saveFormat);
    []
public void Save(Stream stream, SaveOptions saveOptions);
    public MemoryStream SaveToStream();
    public WorksheetCollection get_Worksheets();
    public bool get_IsLicensed();
    public void RemoveUnusedStyles();
    public Style CreateStyle();
    public Style CreateBuiltinStyle(BuiltinStyleType type);
    public CellsColor CreateCellsColor();
    public int Replace(string placeHolder, string newValue);
    public int Replace(string placeHolder, int newValue);
    public int Replace(string placeHolder, double newValue);
    public int Replace(string placeHolder, String[] newValues, bool isVertical);
    public int Replace(string placeHolder, Int32[] newValues, bool isVertical);
    public int Replace(string placeHolder, Double[] newValues, bool isVertical);
    []
public int Replace(string placeHolder, DataTable insertTable);
    public int Replace(bool boolValue, object newValue);
    public int Replace(int intValue, object newValue);
    public int Replace(string placeHolder, string newValue, ReplaceOptions options);
    public void Copy(Workbook source, CopyOptions copyOptions);
    public void Copy(Workbook source);
    public void Combine(Workbook secondWorkbook);
    public Color[] get_Colors();
    public Style GetStyleInPool(int index);
    public int get_CountOfStylesInPool();
    public Font[] GetFonts();
    private void (List`1<Font> , Font );
    public Style GetNamedStyle(string name);
    public void ChangePalette(Color color, int index);
    public bool IsColorInPalette(Color color);
    public void CalculateFormula();
    public void CalculateFormula(bool ignoreError);
    public void CalculateFormula(CalculationOptions options);
    public void RefreshDynamicArrayFormulas(bool calculate);
    public void RefreshDynamicArrayFormulas(bool calculate, CalculationOptions copts);
    public Style get_DefaultStyle();
    public void set_DefaultStyle(Style value);
    public Color GetMatchingColor(Color rawColor);
    public bool get_IsDigitallySigned();
    public void SetEncryptionOptions(EncryptionType encryptionType, int keyLength);
    public void Protect(ProtectionType protectionType, string password);
    public void ProtectSharedWorkbook(string password);
    public void Unprotect(string password);
    public void UnprotectSharedWorkbook(string password);
    public bool get_IsWorkbookProtectedWithPassword();
    public void RemoveMacro();
    public VbaProject get_VbaProject();
    public void RemoveDigitalSignature();
    public void AcceptAllRevisions();
    public bool get_HasMacro();
    internal bool ();
    public bool get_HasRevisions();
    public string get_FileName();
    public void set_FileName(string value);
    public CellsDataTableFactory get_CellsDataTableFactory();
    public DataSorter get_DataSorter();
    [ObsoleteAttribute("Use ExternalLinkCollection.Clear() method instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public void RemoveExternalLinks();
    public Color GetThemeColor(ThemeColorType type);
    public void SetThemeColor(ThemeColorType type, Color color);
    public string get_Theme();
    internal  ();
    public void CustomTheme(string themeName, Color[] colors);
    public void CopyTheme(Workbook source);
    internal string ();
    [ObsoleteAttribute("Use ExternalLinkCollection.Count property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool HasExernalLinks();
    public void UpdateCustomFunctionDefinition(CustomFunctionDefinition definition);
    public void UpdateLinkedDataSource(Workbook[] externalWorkbooks);
    public BuiltInDocumentPropertyCollection get_BuiltInDocumentProperties();
    public CustomDocumentPropertyCollection get_CustomDocumentProperties();
    public FileFormatType get_FileFormat();
    public void set_FileFormat(FileFormatType value);
    internal void (FileFormatType , bool , bool );
    internal  ();
    internal void ( );
    internal void (FileFormatType );
    internal bool ();
    internal  ();
    internal int ();
    internal int ();
    private void ( ,  );
    private void ( , bool );
    internal void ( );
    public AbstractInterruptMonitor get_InterruptMonitor();
    public void set_InterruptMonitor(AbstractInterruptMonitor value);
    public ContentTypePropertyCollection get_ContentTypeProperties();
    public CustomXmlPartCollection get_CustomXmlParts();
    public DataMashup get_DataMashup();
    public string get_RibbonXml();
    public void set_RibbonXml(string value);
    public string get_AbsolutePath();
    public void set_AbsolutePath(string value);
    public ExternalConnectionCollection get_DataConnections();
    public void ImportXml(string url, string sheetName, int row, int col);
    public void ImportXml(Stream stream, string sheetName, int row, int col);
    public void ExportXml(string mapName, string path);
    []
public void ExportXml(string mapName, Stream stream);
    public void SetDigitalSignature(DigitalSignatureCollection digitalSignatureCollection);
    public void AddDigitalSignature(DigitalSignatureCollection digitalSignatureCollection);
    public DigitalSignatureCollection GetDigitalSignature();
    public void RemovePersonalInformation();
    internal void ();
    public sealed virtual void Dispose();
}
public class Aspose.Cells.WorkbookDesigner : object {
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
[]
private object ;
    [DebuggerBrowsableAttribute("0")]
private static Regex ;
    [DebuggerBrowsableAttribute("0")]
private static Regex ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
[]
private ISmartMarkerCallBack ;
    [DebuggerBrowsableAttribute("0")]
private Range ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    public Workbook Workbook { get; public set; }
    public bool RepeatFormulasWithSubtotal { get; public set; }
    public bool UpdateEmptyStringAsNull { get; public set; }
    public bool UpdateReference { get; public set; }
    public bool CalculateFormula { get; public set; }
    public ISmartMarkerCallBack CallBack { get; public set; }
    public bool LineByLine { get; public set; }
    public WorkbookDesigner(Workbook workbook);
    private static WorkbookDesigner();
    public Workbook get_Workbook();
    public void set_Workbook(Workbook value);
    public bool get_RepeatFormulasWithSubtotal();
    public void set_RepeatFormulasWithSubtotal(bool value);
    public void ClearDataSource();
    []
public void SetDataSource(string dataSource, ICellsDataTable cellsDataTable);
    []
public void SetDataSource(DataSet dataSet);
    []
public void SetDataSource(DataTable dataTable);
    []
public void SetDataSource(string dataSourceName, DataView dataView);
    []
public void SetDataSource(DataView dataView);
    []
public void SetDataSource(string name, IDataReader dataReader, int rowCount);
    public void SetJsonDataSource(string variable, string data);
    []
public void SetDataSource(string variable, object data);
    private void ( );
    private void (Cells , int , ArrayList );
    private void (Cells , int , ArrayList , bool );
    private void (Cells , ArrayList , ICellsDataTable );
    private void (Cells , Int32& , ArrayList , Hashtable , bool , ArrayList , Hashtable );
    private void (Cells ,  , int , int , Byte[] );
    private void (Cell , bool , string ,  , bool );
    private String[] (string );
    internal void (Cell ,  , ArrayList , bool );
    private void ( , string , Cell , bool );
    private String[] (string );
    private int (Cells , int , ArrayList , string , Boolean& );
    private void (Cells , int , ArrayList );
    private object (Cells ,  , int );
    private object (Cells , int , ArrayList , Int32& ,  );
    public bool get_UpdateEmptyStringAsNull();
    public void set_UpdateEmptyStringAsNull(bool value);
    public bool get_UpdateReference();
    public void set_UpdateReference(bool value);
    public bool get_CalculateFormula();
    public void set_CalculateFormula(bool value);
    public ISmartMarkerCallBack get_CallBack();
    public void set_CallBack(ISmartMarkerCallBack value);
    public bool get_LineByLine();
    public void set_LineByLine(bool value);
    public void Process();
    public void Process(bool isPreserved);
    private int (Cells , int , string , ICellsDataTable , Range[] , Hashtable , List`1[] , Int32[] , int , bool );
    private void (int , bool , ArrayList );
    private bool (ArrayList , PivotTable );
    public void Process(int sheetIndex, bool isPreserved);
    private bool (Cell , ArrayList );
    private  (int , bool );
    private ArrayList ( , int , bool );
    private void (Cells ,  );
    internal int ( , int , int , Cells , object , bool );
    private void ( , Cells , object , bool );
    private void ( , Cells , int , int , object );
    private void ( , Cells , int , int );
    private void (Cells ,  );
    private void (Cells ,  , int );
    private void (Cells , int , int , bool , int , bool , int );
    private void (Cells , int , int , bool , int , bool , int );
    private void (Cells , CellArea , int , ShiftType );
    private void (Cells , int , int );
    private void (Cells , int , int , ArrayList , bool );
    public String[] GetSmartMarkers();
    private ArrayList (ArrayList , string , bool , Boolean& , bool );
    private void (string );
    private void (string , ICellsDataTable );
    private ICellsDataTable (string );
    private Hashtable (Hashtable , ICellsDataTable , ArrayList , int );
}
public class Aspose.Cells.WorkbookSettings : object {
    [DebuggerBrowsableAttribute("0")]
internal FormulaSettings ;
    [DebuggerBrowsableAttribute("0")]
internal LoadOptions ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
[]
internal Encoding ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal byte ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal WriteProtection ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private IStreamProvider ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private GlobalizationSettings ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private Palette ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private DisplayDrawingObjects ;
    [DebuggerBrowsableAttribute("0")]
private CountryCode ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private EncryptionType ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private short ;
    [DebuggerBrowsableAttribute("0")]
private SmartTagOptions ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private MemorySetting ;
    [DebuggerBrowsableAttribute("0")]
private IWarningCallback ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private OoxmlCompliance ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [ObsoleteAttribute("Use ResourceProvider property instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public IStreamProvider StreamProvider { get; public set; }
    public IStreamProvider ResourceProvider { get; public set; }
    public string Author { get; public set; }
    public bool CheckCustomNumberFormat { get; public set; }
    public bool EnableMacros { get; public set; }
    public bool Date1904 { get; public set; }
    public ProtectionType ProtectionType { get; }
    public DisplayDrawingObjects DisplayDrawingObjects { get; public set; }
    public int SheetTabBarWidth { get; public set; }
    public bool ShowTabs { get; public set; }
    public int FirstVisibleTab { get; public set; }
    public bool IsHScrollBarVisible { get; public set; }
    public bool IsVScrollBarVisible { get; public set; }
    public bool Shared { get; public set; }
    public CountryCode LanguageCode { get; public set; }
    public CountryCode Region { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public GlobalizationSettings GlobalizationSettings { get; public set; }
    public char NumberDecimalSeparator { get; public set; }
    public char NumberGroupSeparator { get; public set; }
    public string Password { get; public set; }
    public WriteProtection WriteProtection { get; }
    public bool IsEncrypted { get; }
    public bool IsProtected { get; }
    public bool IsDefaultEncrypted { get; public set; }
    public bool IsMinimized { get; public set; }
    public bool IsHidden { get; public set; }
    public bool AutoCompressPictures { get; public set; }
    public bool RemovePersonalInformation { get; public set; }
    public bool HidePivotFieldList { get; public set; }
    public UpdateLinksType UpdateLinksType { get; public set; }
    public int MaxRow { get; }
    public int MaxColumn { get; }
    public DefaultStyleSettings DefaultStyleSettings { get; }
    public double WindowLeft { get; public set; }
    public double WindowLeftInch { get; public set; }
    public double WindowLeftCM { get; public set; }
    public double WindowTop { get; public set; }
    public double WindowTopInch { get; public set; }
    public double WindowTopCM { get; public set; }
    public double WindowWidth { get; public set; }
    public double WindowWidthInch { get; public set; }
    public double WindowWidthCM { get; public set; }
    public double WindowHeight { get; public set; }
    public double WindowHeightInch { get; public set; }
    public double WindowHeightCM { get; public set; }
    public bool UpdateAdjacentCellsBorder { get; public set; }
    public int SignificantDigits { get; public set; }
    public bool CheckCompatibility { get; public set; }
    public bool CheckExcelRestriction { get; public set; }
    public bool AutoRecover { get; public set; }
    public bool CrashSave { get; public set; }
    public bool DataExtractLoad { get; public set; }
    public bool RepairLoad { get; public set; }
    public string BuildVersion { get; public set; }
    public MemorySetting MemorySetting { get; public set; }
    public PaperSizeType PaperSize { get; public set; }
    public IWarningCallback WarningCallback { get; public set; }
    public int MaxRowsOfSharedFormula { get; public set; }
    public OoxmlCompliance Compliance { get; public set; }
    public bool QuotePrefixToStyle { get; public set; }
    public FormulaSettings FormulaSettings { get; }
    internal WorkbookSettings(Workbook );
    internal WorkbookSettings(Workbook , LoadOptions , IndividualFontConfigs );
    public sealed virtual void Dispose();
    private void ();
    public string GetThemeFont(FontSchemeType type);
    public IStreamProvider get_StreamProvider();
    public void set_StreamProvider(IStreamProvider value);
    public IStreamProvider get_ResourceProvider();
    public void set_ResourceProvider(IStreamProvider value);
    internal void ();
    internal  ();
    internal void ( );
    internal Palette ();
    public string get_Author();
    public void set_Author(string value);
    public bool get_CheckCustomNumberFormat();
    public void set_CheckCustomNumberFormat(bool value);
    public bool get_EnableMacros();
    public void set_EnableMacros(bool value);
    public bool get_Date1904();
    public void set_Date1904(bool value);
    public ProtectionType get_ProtectionType();
    public DisplayDrawingObjects get_DisplayDrawingObjects();
    public void set_DisplayDrawingObjects(DisplayDrawingObjects value);
    public int get_SheetTabBarWidth();
    public void set_SheetTabBarWidth(int value);
    public bool get_ShowTabs();
    public void set_ShowTabs(bool value);
    public int get_FirstVisibleTab();
    public void set_FirstVisibleTab(int value);
    internal  ();
    public bool get_IsHScrollBarVisible();
    public void set_IsHScrollBarVisible(bool value);
    public bool get_IsVScrollBarVisible();
    public void set_IsVScrollBarVisible(bool value);
    public bool get_Shared();
    public void set_Shared(bool value);
    public CountryCode get_LanguageCode();
    public void set_LanguageCode(CountryCode value);
    internal  ();
    public CountryCode get_Region();
    public void set_Region(CountryCode value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public GlobalizationSettings get_GlobalizationSettings();
    public void set_GlobalizationSettings(GlobalizationSettings value);
    public char get_NumberDecimalSeparator();
    public void set_NumberDecimalSeparator(char value);
    public char get_NumberGroupSeparator();
    public void set_NumberGroupSeparator(char value);
    internal Encoding ();
    internal void (Encoding );
    public string get_Password();
    public void set_Password(string value);
    public WriteProtection get_WriteProtection();
    internal EncryptionType ();
    internal void (EncryptionType );
    internal int ();
    internal void (int );
    public bool get_IsEncrypted();
    public bool get_IsProtected();
    public bool get_IsDefaultEncrypted();
    public void set_IsDefaultEncrypted(bool value);
    internal string (string );
    internal Hashtable ();
    internal void (Hashtable );
    public bool get_IsMinimized();
    public void set_IsMinimized(bool value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    internal bool ();
    internal void (bool );
    public bool get_AutoCompressPictures();
    public void set_AutoCompressPictures(bool value);
    public bool get_RemovePersonalInformation();
    public void set_RemovePersonalInformation(bool value);
    public bool get_HidePivotFieldList();
    public void set_HidePivotFieldList(bool value);
    internal short ();
    internal void (short );
    public UpdateLinksType get_UpdateLinksType();
    public void set_UpdateLinksType(UpdateLinksType value);
    public void SetPageOrientationType(PageOrientationType pageOrientationType);
    internal void (WorkbookSettings , CopyOptions );
    public int get_MaxRow();
    public int get_MaxColumn();
    internal SmartTagOptions ();
    internal SmartTagOptions ();
    public DefaultStyleSettings get_DefaultStyleSettings();
    internal int ();
    internal void (int );
    public double get_WindowLeft();
    public void set_WindowLeft(double value);
    public double get_WindowLeftInch();
    public void set_WindowLeftInch(double value);
    public double get_WindowLeftCM();
    public void set_WindowLeftCM(double value);
    internal int ();
    internal void (int );
    public double get_WindowTop();
    public void set_WindowTop(double value);
    public double get_WindowTopInch();
    public void set_WindowTopInch(double value);
    public double get_WindowTopCM();
    public void set_WindowTopCM(double value);
    internal int ();
    internal void (int );
    public double get_WindowWidth();
    public void set_WindowWidth(double value);
    public double get_WindowWidthInch();
    public void set_WindowWidthInch(double value);
    public double get_WindowWidthCM();
    public void set_WindowWidthCM(double value);
    internal int ();
    internal void (int );
    public double get_WindowHeight();
    public void set_WindowHeight(double value);
    public double get_WindowHeightInch();
    public void set_WindowHeightInch(double value);
    public double get_WindowHeightCM();
    public void set_WindowHeightCM(double value);
    public bool get_UpdateAdjacentCellsBorder();
    public void set_UpdateAdjacentCellsBorder(bool value);
    public int get_SignificantDigits();
    public void set_SignificantDigits(int value);
    public bool get_CheckCompatibility();
    public void set_CheckCompatibility(bool value);
    public bool get_CheckExcelRestriction();
    public void set_CheckExcelRestriction(bool value);
    public bool get_AutoRecover();
    public void set_AutoRecover(bool value);
    public bool get_CrashSave();
    public void set_CrashSave(bool value);
    public bool get_DataExtractLoad();
    public void set_DataExtractLoad(bool value);
    public bool get_RepairLoad();
    public void set_RepairLoad(bool value);
    internal  ();
    internal void ( );
    internal  ();
    public string get_BuildVersion();
    public void set_BuildVersion(string value);
    public MemorySetting get_MemorySetting();
    public void set_MemorySetting(MemorySetting value);
    public PaperSizeType get_PaperSize();
    public void set_PaperSize(PaperSizeType value);
    public void set_WarningCallback(IWarningCallback value);
    public IWarningCallback get_WarningCallback();
    public int get_MaxRowsOfSharedFormula();
    public void set_MaxRowsOfSharedFormula(int value);
    public OoxmlCompliance get_Compliance();
    public void set_Compliance(OoxmlCompliance value);
    public bool get_QuotePrefixToStyle();
    public void set_QuotePrefixToStyle(bool value);
    public FormulaSettings get_FormulaSettings();
}
public class Aspose.Cells.Worksheet : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private SheetType ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private Cells ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Protection ;
    [DebuggerBrowsableAttribute("0")]
[]
internal WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
internal QueryTableCollection ;
    [DebuggerBrowsableAttribute("0")]
internal PivotTableCollection ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal ListObjectCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal HyperlinkCollection ;
    [DebuggerBrowsableAttribute("0")]
private AutoFilter ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal short ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
internal DataSorter ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal SparklineGroupCollection ;
    [DebuggerBrowsableAttribute("0")]
private ChartCollection ;
    [DebuggerBrowsableAttribute("0")]
internal CommentCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private PictureCollection ;
    [DebuggerBrowsableAttribute("0")]
private TextBoxCollection ;
    [DebuggerBrowsableAttribute("0")]
private CheckBoxCollection ;
    [DebuggerBrowsableAttribute("0")]
private OleObjectCollection ;
    [DebuggerBrowsableAttribute("0")]
internal ShapeCollection ;
    [DebuggerBrowsableAttribute("0")]
internal SlicerCollection ;
    [DebuggerBrowsableAttribute("0")]
internal TimelineCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private ValidationCollection ;
    [DebuggerBrowsableAttribute("0")]
private ProtectedRangeCollection ;
    [DebuggerBrowsableAttribute("0")]
internal ErrorCheckOptionCollection ;
    [DebuggerBrowsableAttribute("0")]
private Outline ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal Double[] ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal ConditionalFormattingCollection ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private CustomPropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
private SmartTagSetting ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal ScenarioCollection ;
    [DebuggerBrowsableAttribute("0")]
internal CellWatchCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public Protection Protection { get; }
    public string UniqueId { get; public set; }
    public Workbook Workbook { get; }
    public Cells Cells { get; }
    public QueryTableCollection QueryTables { get; }
    public PivotTableCollection PivotTables { get; }
    public SheetType Type { get; public set; }
    public string Name { get; public set; }
    public bool ShowFormulas { get; public set; }
    public bool IsGridlinesVisible { get; public set; }
    public bool IsRowColumnHeadersVisible { get; public set; }
    public PaneStateType PaneState { get; }
    public bool DisplayZeros { get; public set; }
    public bool DisplayRightToLeft { get; public set; }
    public bool IsOutlineShown { get; public set; }
    public bool IsSelected { get; public set; }
    public ListObjectCollection ListObjects { get; }
    public int TabId { get; public set; }
    public HorizontalPageBreakCollection HorizontalPageBreaks { get; }
    public VerticalPageBreakCollection VerticalPageBreaks { get; }
    public HyperlinkCollection Hyperlinks { get; }
    public PageSetup PageSetup { get; }
    public AutoFilter AutoFilter { get; }
    public bool HasAutofilter { get; }
    public bool TransitionEvaluation { get; public set; }
    public bool TransitionEntry { get; public set; }
    public VisibilityType VisibilityType { get; public set; }
    public bool IsVisible { get; public set; }
    public SparklineGroupCollection SparklineGroups { get; }
    public ChartCollection Charts { get; }
    public CommentCollection Comments { get; }
    public PictureCollection Pictures { get; }
    public TextBoxCollection TextBoxes { get; }
    public CheckBoxCollection CheckBoxes { get; }
    public OleObjectCollection OleObjects { get; }
    public ShapeCollection Shapes { get; }
    public SlicerCollection Slicers { get; }
    public TimelineCollection Timelines { get; }
    public int Index { get; }
    public bool IsProtected { get; }
    public ValidationCollection Validations { get; }
    public ProtectedRangeCollection AllowEditRanges { get; }
    public ErrorCheckOptionCollection ErrorCheckOptions { get; }
    public Outline Outline { get; }
    public int FirstVisibleRow { get; public set; }
    public int FirstVisibleColumn { get; public set; }
    public int Zoom { get; public set; }
    public ViewType ViewType { get; public set; }
    public bool IsPageBreakPreview { get; public set; }
    public bool IsRulerVisible { get; public set; }
    public Color TabColor { get; public set; }
    public string CodeName { get; public set; }
    public Byte[] BackgroundImage { get; public set; }
    public ConditionalFormattingCollection ConditionalFormattings { get; }
    public string ActiveCell { get; public set; }
    public CustomPropertyCollection CustomProperties { get; }
    public SmartTagSetting SmartTagSetting { get; }
    public ScenarioCollection Scenarios { get; }
    public CellWatchCollection CellWatches { get; }
    internal Worksheet(WorksheetCollection );
    internal Worksheet(WorksheetCollection , string );
    internal void (int );
    internal bool ();
    internal void ();
    public sealed virtual void Dispose();
    public Protection get_Protection();
    public string get_UniqueId();
    public void set_UniqueId(string value);
    public PaneCollection GetPanes();
    internal Workbook ();
    public Workbook get_Workbook();
    public Cells get_Cells();
    public QueryTableCollection get_QueryTables();
    public PivotTableCollection get_PivotTables();
    internal void ();
    public SheetType get_Type();
    public void set_Type(SheetType value);
    public string get_Name();
    public void set_Name(string value);
    internal string (string , bool );
    internal string (string );
    internal void (string );
    private void ();
    internal  ();
    public bool get_ShowFormulas();
    public void set_ShowFormulas(bool value);
    public bool get_IsGridlinesVisible();
    public void set_IsGridlinesVisible(bool value);
    public bool get_IsRowColumnHeadersVisible();
    public void set_IsRowColumnHeadersVisible(bool value);
    public PaneStateType get_PaneState();
    internal bool ();
    internal void (bool );
    public bool get_DisplayZeros();
    public void set_DisplayZeros(bool value);
    public bool get_DisplayRightToLeft();
    public void set_DisplayRightToLeft(bool value);
    public bool get_IsOutlineShown();
    public void set_IsOutlineShown(bool value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public void FreezePanes(int row, int column, int freezedRows, int freezedColumns);
    public bool GetFreezedPanes(Int32& row, Int32& column, Int32& freezedRows, Int32& freezedColumns);
    public void Split();
    public void FreezePanes(string cellName, int freezedRows, int freezedColumns);
    public void UnFreezePanes();
    public void RemoveSplit();
    internal ListObjectCollection ();
    public ListObjectCollection get_ListObjects();
    internal  ();
    public int get_TabId();
    public void set_TabId(int value);
    public HorizontalPageBreakCollection get_HorizontalPageBreaks();
    public VerticalPageBreakCollection get_VerticalPageBreaks();
    public void AddPageBreaks(string cellName);
    public HyperlinkCollection get_Hyperlinks();
    public void Copy(Worksheet sourceSheet);
    public void Copy(Worksheet sourceSheet, CopyOptions copyOptions);
    internal void (Worksheet , CopyOptions );
    private void (Worksheet );
    public void AutoFitColumn(int columnIndex, int firstRow, int lastRow);
    public void AutoFitColumns();
    public void AutoFitColumns(AutoFitterOptions options);
    public void AutoFitColumn(int columnIndex);
    public void AutoFitColumns(int firstColumn, int lastColumn);
    public void AutoFitColumns(int firstColumn, int lastColumn, AutoFitterOptions options);
    public void AutoFitColumns(int firstRow, int firstColumn, int lastRow, int lastColumn);
    public void AutoFitColumns(int firstRow, int firstColumn, int lastRow, int lastColumn, AutoFitterOptions options);
    public void AutoFitRow(int rowIndex, int firstColumn, int lastColumn);
    public void AutoFitRow(int rowIndex, int firstColumn, int lastColumn, AutoFitterOptions options);
    public void AutoFitRows();
    public void AutoFitRows(bool onlyAuto);
    public void AutoFitRows(AutoFitterOptions options);
    public void AutoFitRows(int startRow, int endRow);
    public void AutoFitRows(int startRow, int endRow, AutoFitterOptions options);
    public void AutoFitRow(int startRow, int endRow, int startColumn, int endColumn);
    public void AutoFitRow(int rowIndex);
    public PageSetup get_PageSetup();
    public AutoFilter get_AutoFilter();
    public AdvancedFilter GetAdvancedFilter();
    public void AdvancedFilter(bool isFilter, string listRange, string criteriaRange, string copyTo, bool uniqueRecordOnly);
    public void RemoveAutoFilter();
    public bool get_HasAutofilter();
    internal bool ();
    public bool get_TransitionEvaluation();
    public void set_TransitionEvaluation(bool value);
    public bool get_TransitionEntry();
    public void set_TransitionEntry(bool value);
    internal byte ();
    internal void (byte );
    public VisibilityType get_VisibilityType();
    public void set_VisibilityType(VisibilityType value);
    private void (byte );
    public void SetVisible(bool isVisible, bool ignoreError);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    internal void (bool , bool );
    internal bool ();
    internal DataSorter ();
    public void SelectRange(int startRow, int startColumn, int totalRows, int totalColumns, bool removeOthers);
    public void RemoveAllDrawingObjects();
    public void ClearComments();
    public SparklineGroupCollection get_SparklineGroups();
    public ChartCollection get_Charts();
    private void (Worksheet , CopyOptions );
    public CommentCollection get_Comments();
    public PictureCollection get_Pictures();
    public TextBoxCollection get_TextBoxes();
    public CheckBoxCollection get_CheckBoxes();
    public OleObjectCollection get_OleObjects();
    internal OleObjectCollection ();
    public ShapeCollection get_Shapes();
    internal ShapeCollection ();
    internal void (ShapeCollection );
    public SlicerCollection get_Slicers();
    public TimelineCollection get_Timelines();
    private void (ProtectionType );
    public void Protect(ProtectionType type);
    public void Protect(ProtectionType type, string password, string oldPassword);
    public void Unprotect();
    public void Unprotect(string password);
    public int get_Index();
    public void MoveTo(int index);
    public bool get_IsProtected();
    public ValidationCollection get_Validations();
    public ProtectedRangeCollection get_AllowEditRanges();
    public ErrorCheckOptionCollection get_ErrorCheckOptions();
    public Outline get_Outline();
    public int get_FirstVisibleRow();
    public void set_FirstVisibleRow(int value);
    public int get_FirstVisibleColumn();
    public void set_FirstVisibleColumn(int value);
    public int Replace(string oldString, string newString);
    public int get_Zoom();
    public void set_Zoom(int value);
    public ViewType get_ViewType();
    public void set_ViewType(ViewType value);
    public bool get_IsPageBreakPreview();
    public void set_IsPageBreakPreview(bool value);
    public bool get_IsRulerVisible();
    public void set_IsRulerVisible(bool value);
    public ArrayList GetSelectedRanges();
    public Color get_TabColor();
    public void set_TabColor(Color value);
    internal void (int );
    internal int ();
    internal Color ();
    internal void (Color );
    public string get_CodeName();
    public void set_CodeName(string value);
    internal string ();
    internal Double[] ();
    internal void ();
    internal ArrayList ();
    internal void (ArrayList );
    public Byte[] get_BackgroundImage();
    public void set_BackgroundImage(Byte[] value);
    internal object ();
    public ConditionalFormattingCollection get_ConditionalFormattings();
    public string get_ActiveCell();
    public void set_ActiveCell(string value);
    internal ArrayList ();
    internal void (ArrayList );
    public CustomPropertyCollection get_CustomProperties();
    internal CustomPropertyCollection ();
    public CellArea[] GetPrintingPageBreaks(ImageOrPrintOptions options);
    public SmartTagSetting get_SmartTagSetting();
    internal SmartTagSetting ();
    public virtual string ToString();
    internal  ();
    internal void ( );
    public ScenarioCollection get_Scenarios();
    public void StartAccessCache(AccessCacheOptions opts);
    public void CloseAccessCache(AccessCacheOptions opts);
    public string ConvertFormulaReferenceStyle(string formula, bool toR1C1, int baseCellRow, int baseCellColumn);
    public object CalculateFormula(string formula);
    public object CalculateFormula(string formula, CalculationOptions opts);
    public object CalculateFormula(string formula, FormulaParseOptions pOpts, CalculationOptions cOpts, int baseCellRow, int baseCellColumn, CalculationData calculationData);
    public Object[][] CalculateArrayFormula(string formula, CalculationOptions opts);
    public Object[][] CalculateArrayFormula(string formula, CalculationOptions opts, int maxRowCount, int maxColumnCount);
    public Object[][] CalculateArrayFormula(string formula, FormulaParseOptions pOpts, CalculationOptions cOpts, int baseCellRow, int baseCellColumn, int maxRowCount, int maxColumnCount, CalculationData calculationData);
    public void CalculateFormula(CalculationOptions options, bool recursive);
    public ArrayList XmlMapQuery(string path, XmlMap xmlMap);
    public CellWatchCollection get_CellWatches();
    public void RefreshPivotTables();
    public void RefreshPivotTables(PivotTableRefreshOption option);
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.WorksheetCollection : CollectionBase`1<Worksheet> {
    [DebuggerBrowsableAttribute("0")]
internal double ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Hashtable ;
    [DebuggerBrowsableAttribute("0")]
internal WebExtensionCollection ;
    [DebuggerBrowsableAttribute("0")]
internal WebExtensionTaskPaneCollection ;
    [DebuggerBrowsableAttribute("0")]
internal List`1<> ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
internal ThreadedCommentAuthorCollection ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    [DebuggerBrowsableAttribute("0")]
private NameCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private byte ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ushort ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private DxfCollection ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal VbaProject ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private Style ;
    [DebuggerBrowsableAttribute("0")]
private XmlMapCollection ;
    [DebuggerBrowsableAttribute("0")]
private BuiltInDocumentPropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
private CustomDocumentPropertyCollection ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal object ;
    [DebuggerBrowsableAttribute("0")]
private ExternalLinkCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
private DxfCollection ;
    [DebuggerBrowsableAttribute("0")]
private DxfCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
private Workbook ;
    [DebuggerBrowsableAttribute("0")]
private TableStyleCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal RevisionLogCollection ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal Byte[] ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public WebExtensionTaskPaneCollection WebExtensionTaskPanes { get; }
    public WebExtensionCollection WebExtensions { get; }
    public ThreadedCommentAuthorCollection ThreadedCommentAuthors { get; }
    public bool IsRefreshAllConnections { get; public set; }
    public NameCollection Names { get; }
    public Worksheet Item { get; }
    public Worksheet Item { get; }
    public string ActiveSheetName { get; public set; }
    public int ActiveSheetIndex { get; public set; }
    public DxfCollection Dxfs { get; }
    [DebuggerBrowsableAttribute("0")]
[("False")]
internal VbaProject  { get; }
    public XmlMapCollection XmlMaps { get; public set; }
    public BuiltInDocumentPropertyCollection BuiltInDocumentProperties { get; }
    public CustomDocumentPropertyCollection CustomDocumentProperties { get; }
    public object OleSize { get; public set; }
    public ExternalLinkCollection ExternalLinks { get; }
    public TableStyleCollection TableStyles { get; }
    public RevisionLogCollection RevisionLogs { get; }
    internal WorksheetCollection(Workbook , bool );
    public WebExtensionTaskPaneCollection get_WebExtensionTaskPanes();
    public WebExtensionCollection get_WebExtensions();
    internal void ();
    internal string ();
    internal void (string );
    public ThreadedCommentAuthorCollection get_ThreadedCommentAuthors();
    public bool get_IsRefreshAllConnections();
    public void set_IsRefreshAllConnections(bool value);
    public Range CreateRange(string address, int sheetIndex);
    public UnionRange CreateUnionRange(string address, int sheetIndex);
    internal  ();
    internal Hashtable ();
    internal void ();
    public NameCollection get_Names();
    internal  ();
    internal void ( );
    internal bool ();
    internal void (bool );
    internal string ();
    internal void (string );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal  ();
    internal  ();
    internal void ( );
    internal void (WorksheetCollection , CopyOptions );
    internal void ( );
    internal Palette ();
    internal Workbook ();
    public Worksheet get_Item(int index);
    internal Worksheet (int );
    internal int (string );
    public Worksheet get_Item(string sheetName);
    internal void ();
    internal  (SaveOptions );
    internal void ();
    public Worksheet GetSheetByCodeName(string codeName);
    internal  ();
    public string get_ActiveSheetName();
    public void set_ActiveSheetName(string value);
    public int get_ActiveSheetIndex();
    public void set_ActiveSheetIndex(int value);
    internal int ();
    internal void (int );
    public void SortNames();
    internal void (int );
    internal void (int );
    internal void ();
    public Worksheet Insert(int index, SheetType sheetType);
    public Worksheet Insert(int index, SheetType sheetType, string sheetName);
    public int Add(SheetType type);
    internal int ();
    internal void (int );
    internal void (int , int );
    public void SwapSheet(int sheetIndex1, int sheetIndex2);
    public int Add();
    public Worksheet Add(string sheetName);
    internal int (string );
    internal  ();
    public int RegisterAddInFunction(string addInFile, string functionName, bool lib);
    public string RegisterAddInFunction(int id, string functionName);
    internal Int32[] (string , bool );
    internal ushort ();
    internal void (ushort );
    internal  ();
    public void RemoveAt(string name);
    internal void (int );
    [("False")]
public void RemoveAt(int index);
    public void Clear();
    internal Style (int );
    internal Style (int );
    internal string (int );
    internal  (int );
    public int AddCopy(string sheetName);
    public int AddCopy(int sheetIndex);
    public void AddCopy(Worksheet[] source, String[] destSheetNames);
    internal void (WorksheetCollection );
    internal  ();
    internal void ( );
    internal  ();
    internal ArrayList ();
    public DxfCollection get_Dxfs();
    internal  ();
    internal void ( );
    internal int (Style );
    private void (SaveOptions );
    private void ();
    internal int (string );
    internal void (string );
    internal  ();
    private void (bool , ProtectionType , string );
    internal ProtectionType ();
    internal void (bool , ProtectionType , string );
    internal bool ();
    internal bool ();
    internal VbaProject ();
    internal void (VbaProject );
    internal VbaProject ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal  ();
    internal void ( );
    internal  ();
    private void (bool , bool );
    private void ();
    public Range GetRangeByName(string rangeName);
    public Range GetRangeByName(string rangeName, int currentSheetIndex, bool includeTable);
    public Range[] GetNamedRanges();
    public Range[] GetNamedRangesAndTables();
    internal Style ();
    internal void (Style );
    public XmlMapCollection get_XmlMaps();
    public void set_XmlMaps(XmlMapCollection value);
    internal BuiltInDocumentPropertyCollection ();
    public BuiltInDocumentPropertyCollection get_BuiltInDocumentProperties();
    internal CustomDocumentPropertyCollection ();
    public CustomDocumentPropertyCollection get_CustomDocumentProperties();
    internal Font ();
    internal bool ();
    public object get_OleSize();
    public void set_OleSize(object value);
    public void SetOleSize(int startRow, int endRow, int startColumn, int endColumn);
    public ExternalLinkCollection get_ExternalLinks();
    internal  ();
    internal  ();
    internal DxfCollection ();
    internal DxfCollection ();
    internal DxfCollection ();
    internal DxfCollection ();
    internal TableStyleCollection ();
    public TableStyleCollection get_TableStyles();
    internal  ();
    internal void (byte );
    internal void ();
    internal void ();
    internal void ();
    internal ListObject (string );
    public void ClearPivottables();
    internal RevisionLogCollection ();
    public RevisionLogCollection get_RevisionLogs();
    internal void (int , int );
    public void RefreshAll();
    public void RefreshPivotTables();
    public void RefreshPivotTables(PivotTableRefreshOption option);
    internal  ();
    internal  ();
    internal  ();
}
public class Aspose.Cells.WriteProtection : object {
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal  ;
    public string Author { get; public set; }
    public bool RecommendReadOnly { get; public set; }
    public bool IsWriteProtected { get; }
    public string Password { get; public set; }
    public string get_Author();
    public void set_Author(string value);
    internal  ();
    internal void ( );
    public bool get_RecommendReadOnly();
    public void set_RecommendReadOnly(bool value);
    internal bool ();
    public bool get_IsWriteProtected();
    public string get_Password();
    public void set_Password(string value);
    public bool ValidatePassword(string password);
    internal ushort ();
    internal void (ushort );
    internal void (WriteProtection );
}
public class Aspose.Cells.XlsbSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal OoxmlCompressionType ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    public OoxmlCompressionType CompressionType { get; public set; }
    public bool ExportAllColumnIndexes { get; public set; }
    public LightCellsDataProvider LightCellsDataProvider { get; public set; }
    [ObsoleteAttribute("Use XlsbSaveOptions() constructor instead.")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public XlsbSaveOptions(SaveFormat saveFormat);
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    public OoxmlCompressionType get_CompressionType();
    public void set_CompressionType(OoxmlCompressionType value);
    public bool get_ExportAllColumnIndexes();
    public void set_ExportAllColumnIndexes(bool value);
    public LightCellsDataProvider get_LightCellsDataProvider();
    public void set_LightCellsDataProvider(LightCellsDataProvider value);
}
public class Aspose.Cells.XlsSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public LightCellsDataProvider LightCellsDataProvider { get; public set; }
    [ObsoleteAttribute("Use XlsSaveOptions(SaveFormat.Xlt) when it is template, otherwise use XlsSaveOptions().")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[]
public bool IsTemplate { get; public set; }
    public bool MatchColor { get; public set; }
    public bool WpsCompatibility { get; public set; }
    public XlsSaveOptions(SaveFormat saveFormat);
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    public LightCellsDataProvider get_LightCellsDataProvider();
    public void set_LightCellsDataProvider(LightCellsDataProvider value);
    public bool get_IsTemplate();
    public void set_IsTemplate(bool value);
    public bool get_MatchColor();
    public void set_MatchColor(bool value);
    internal virtual int wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    public bool get_WpsCompatibility();
    public void set_WpsCompatibility(bool value);
}
public class Aspose.Cells.XmlColumnProperty : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal  ();
    internal void ( );
}
public class Aspose.Cells.XmlDataBinding : object {
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private  ;
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
[]
private XmlMap ;
    public string Url { get; }
    internal XmlDataBinding(WorksheetCollection , XmlMap );
    internal int ();
    internal void (int );
    internal string ();
    internal void (string );
    internal bool ();
    internal void (bool );
    internal string ();
    internal void (string );
    internal  ();
    internal void ( );
    public string get_Url();
    internal void (string );
    private void (int );
}
public class Aspose.Cells.XmlLoadOptions : LoadOptions {
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
internal int ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public string StartCell { get; public set; }
    public bool IsXmlMap { get; public set; }
    public bool ContainsMultipleWorksheets { get; public set; }
    public bool ConvertNumericOrDate { get; public set; }
    public string NumberFormat { get; public set; }
    public string DateFormat { get; public set; }
    public bool IgnoreRootAttributes { get; public set; }
    public XmlLoadOptions(LoadFormat type);
    internal static XmlLoadOptions (LoadOptions );
    public string get_StartCell();
    public void set_StartCell(string value);
    public bool get_IsXmlMap();
    public void set_IsXmlMap(bool value);
    public bool get_ContainsMultipleWorksheets();
    public void set_ContainsMultipleWorksheets(bool value);
    public bool get_ConvertNumericOrDate();
    public void set_ConvertNumericOrDate(bool value);
    public string get_NumberFormat();
    public void set_NumberFormat(string value);
    public string get_DateFormat();
    public void set_DateFormat(string value);
    public bool get_IgnoreRootAttributes();
    public void set_IgnoreRootAttributes(bool value);
}
public class Aspose.Cells.XmlMap : object {
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private bool ;
    [DebuggerBrowsableAttribute("0")]
private XmlDataBinding ;
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private Hashtable ;
    public string Name { get; public set; }
    public string RootElementName { get; }
    public XmlDataBinding DataBinding { get; }
    internal XmlMap(WorksheetCollection );
    internal WorksheetCollection ();
    internal void (WorksheetCollection );
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    internal int ();
    internal void (int );
    public string get_Name();
    public void set_Name(string value);
    internal bool ();
    internal void (bool );
    internal bool ();
    internal void (bool );
    public string get_RootElementName();
    internal string ();
    internal void (string );
    internal string ();
    internal string ();
    internal string ();
    internal string ();
    internal void (string );
    internal bool ();
    internal void (bool );
    public XmlDataBinding get_DataBinding();
    internal void (XmlDataBinding );
    internal Hashtable ();
    internal ArrayList (string , int );
    private void (string , int , ArrayList );
}
[DefaultMemberAttribute("Item")]
public class Aspose.Cells.XmlMapCollection : CollectionBase`1<XmlMap> {
    [DebuggerBrowsableAttribute("0")]
[]
private WorksheetCollection ;
    [DebuggerBrowsableAttribute("0")]
private ArrayList ;
    [DebuggerBrowsableAttribute("0")]
private static Regex ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private string ;
    [DebuggerBrowsableAttribute("0")]
private int ;
    public XmlMap Item { get; }
    internal XmlMapCollection(WorksheetCollection );
    private static XmlMapCollection();
    internal ArrayList ();
    internal void (ArrayList );
    internal string ();
    internal void (string );
    internal Hashtable ();
    internal string ();
    internal void (string );
    internal int ();
    internal void (int );
    internal int ();
    internal int (XmlMap );
    public XmlMap get_Item(int index);
    internal XmlMap (string );
    internal XmlMap (int );
    public int Add(string url);
    internal int (string ,  );
    private string (string );
    private string (int );
    internal  (string );
    public void Clear();
}
public class Aspose.Cells.XmlSaveOptions : SaveOptions {
    [DebuggerBrowsableAttribute("0")]
internal Int32[] ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
private CellArea ;
    [DebuggerBrowsableAttribute("0")]
internal string ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    [DebuggerBrowsableAttribute("0")]
internal bool ;
    public Int32[] SheetIndexes { get; public set; }
    public CellArea ExportArea { get; public set; }
    public bool HasHeaderRow { get; public set; }
    public string XmlMapName { get; public set; }
    public bool SheetNameAsElementName { get; public set; }
    public bool DataAsAttribute { get; public set; }
    internal virtual SaveOptions wzp4avzjx2e43g74cv3rklmp3mj23nw4();
    public Int32[] get_SheetIndexes();
    public void set_SheetIndexes(Int32[] value);
    public CellArea get_ExportArea();
    public void set_ExportArea(CellArea value);
    public bool get_HasHeaderRow();
    public void set_HasHeaderRow(bool value);
    public string get_XmlMapName();
    public void set_XmlMapName(string value);
    public bool get_SheetNameAsElementName();
    public void set_SheetNameAsElementName(bool value);
    public bool get_DataAsAttribute();
    public void set_DataAsAttribute(bool value);
}
public class Aspose.Cells.XpsSaveOptions : PaginatedSaveOptions {
    [ObsoleteAttribute("Use XpsSaveOptions() constructor instead.")]
[]
public XpsSaveOptions(SaveFormat saveFormat);
    internal virtual void wzp4avzjx2e43g74cv3rklmp3mj23nw4(SaveOptions );
    internal static XpsSaveOptions (SaveOptions );
}
internal class d : object {
    private Nullable`1<UInt32> ;
    private [] ;
    private [] ;
    private static object ;
    private object ;
    private static Type ;
    private static Type ;
    private Stack`1<> ;
    private  ;
    private static Type ;
    private UInt32 ;
    private Byte[] ;
    private  ;
    private static Dictionary`2<int, > ;
    private Object[] ;
    private [] ;
    private static Dictionary`2<MethodBase, int> ;
    private bool ;
    private UInt32 ;
    private static Dictionary`2<int, object> ;
    private static Dictionary`2<, > ;
    private Stream ;
    private  ;
    private  ;
    private  ;
    private UInt32 ;
    private bool ;
    private Module ;
    private static Type ;
    private Stack`1<> ;
    private static Type ;
    private Type[] ;
    private static Type ;
    private Type ;
    private long ;
    private  ;
    private Stack`1<> ;
    private static Dictionary`2<MethodBase, object> ;
    private static Type ;
    private Type[] ;
    public d( , Module );
    public d( );
    private static d();
    private static Exception (string , string );
    private static  ( ,  , bool , bool );
    private static void (d ,  );
    private void (Type , object , long , Array );
    private static Exception (string , string );
    private static void (d ,  );
    private FieldInfo (int ,  , Boolean& );
    private static void (d ,  );
    private static void (d ,  );
    private static  (d );
    private void (bool , bool );
    private static void (d ,  );
    private static void (d ,  );
    private void (object , UInt32 );
    private void ();
    private static void (d ,  );
    private  ( ,  );
    private void (bool );
    private static void (d ,  );
    private void (bool );
    private static bool ( ,  );
    private static void (d ,  );
    private static void (ILGenerator , Type );
    [DebuggerNonUserCodeAttribute]
private MethodBase (int );
    private static bool ( ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static  ( );
    private static void (d ,  );
    private static  ( ,  , bool , bool );
    private static void (d ,  );
    private [] ( );
    private bool ( , Type );
    private static void (d ,  );
    private void ( );
    private void (object );
    private static void (d ,  );
    private void ( );
    private long ();
    private static void (d ,  );
    private static void (d ,  );
    private static bool ( ,  );
    private bool (Type ,  , Int32& );
    private void (MethodBase , bool );
    private static void (d ,  );
    private void ();
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private object (Stream , int , Object[] , Type[] , Type[] , Object[] );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private  ();
    private static void (d ,  );
    private void (bool );
    public static void (T[] , Comparison`1<T> );
    private static void (d ,  );
    private static  ( ,  , bool , bool );
    private static Exception (string , string );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void (int );
    private static void (d ,  );
    public object (Stream , string , Object[] , Type[] , Type[] , Object[] );
    private static void (d ,  );
    private bool ();
    private static void (d ,  );
    private void (Type );
    private static void (d ,  );
    private static void (d ,  );
    private static void (ILGenerator , Type );
    private  ( , byte );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private object (Object[] , Type[] , Type[] , Object[] );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void (Type );
    private FieldInfo (int );
    private static void (d ,  );
    private static void (d ,  );
    private void (bool );
    private static void (d ,  );
    private void (bool );
    private void ();
    private static void (d ,  );
    private void (Stream , string );
    private static object (MethodBase , object , Object[] , bool );
    private static bool ( ,  );
    private void ();
    private bool (MethodBase , object , Object& , Object[] );
    private void (bool );
    private static void (d ,  );
    private static void (d ,  );
    [DebuggerNonUserCodeAttribute]
private MethodBase (int ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static bool (UInt32 , UInt32 , UInt32 );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void (MemberInfo );
    private static void (d ,  );
    private static  ( );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private [] ();
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void (long );
    private void ( );
    private static void (d ,  );
    private static object (MethodBase , object , Object[] , bool );
    [ConditionalAttribute("DEBUG")]
private void (object );
    private void ( ,  );
    private  ( ,  );
    private static void (d ,  );
    private void (UInt32 );
    private static void (d ,  );
    private static object (MethodBase , object , Object[] );
    private static  (MethodBase , bool );
    private void (int );
    private static void (d ,  );
    private string (int );
    private void (& , MethodBase , bool );
    private static void (d ,  );
    private void ( );
    private static void (d ,  );
    private static bool (object );
    private static void (d ,  );
    private string ( );
    private void (int );
    private void (bool );
    private void (Type );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void ( );
    private void (Stream , long , string );
    private static void (d ,  );
    private static void (d ,  );
    private void ( );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void (& );
    private long (string );
    private static void (d ,  );
    private void ();
    private  ( );
    private static void (d ,  );
    private static void (d ,  );
    private void (int );
    private static void (ILGenerator , Type );
    private  ();
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private long ();
    private static void (d ,  );
    private static  ( ,  , bool );
    private Type (int , bool );
    private void ();
    private static  ( ,  , bool , bool );
    private static void (d ,  );
    private static void (ILGenerator , int );
    private bool ( );
    private static void (d ,  );
    private static void (d ,  );
    private void (bool , bool );
    private static  ( ,  , bool , bool );
    private static void (d ,  );
    private static Byte[] ( );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    public void (Stream , string , Object[] );
    private [] (Object[] );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private  ( ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void (int );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private int ();
    private static void (d ,  );
    private static void (d ,  );
    private  ( );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static Dictionary`2<int, > ( );
    [ConditionalAttribute("DEBUG")]
public static void (string );
    private static [] ( );
    private static void (d ,  );
    private static  ( ,  , bool );
    private static void (Exception );
    private  ( );
    private Stack`1<> ();
    private void (int );
    private static void (d ,  );
    private static bool ();
    public static object (Type );
    private bool (MethodBase , object , [] , Object[] , bool , Object& );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void ( );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void (bool );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static bool ( ,  );
    private static void (d ,  );
    private void (bool );
    private static void (d ,  );
    private static void (d ,  );
    private int ();
    private  ( ,  );
    private void ();
    private static void (d ,  );
    private static void (d ,  );
    private static  ( ,  , bool );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private Type (int ,  , Boolean& , bool );
    private void ();
    private static void (d ,  );
    private static void (d ,  );
    private void (int , Type[] , Type[] , bool );
    private static void (d ,  );
    private void (bool , bool );
    private void ( );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private  ( );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    public object (Stream , string , Object[] );
    private void (bool );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (object );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void ();
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private  (int );
    private void (bool );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private MethodBase ( );
    private static  ( );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static  ( ,  , bool );
    private static void (d ,  );
    private static void (d ,  );
    private void (bool );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private bool (MethodBase );
    private void (bool );
    private static bool ();
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private bool (MethodInfo ,  , Type[] , Int32& );
    private  ( );
    private static BindingFlags (bool );
    private static void (d ,  );
    private [] ( );
    private  ( ,  , bool );
    private static void (d ,  );
    private static string (string , string );
    private static void (d ,  );
    private  ( );
    private static void (d ,  );
    private static void (d ,  );
    private static  ( ,  , bool , bool );
    private static void (d ,  );
    private static bool (MethodBase );
    private bool (MethodBase , object , Object& , Object[] );
    private static string (MethodBase );
    private void ();
    private object (int );
    private  ( );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
    private void (bool );
    private static void (d ,  );
    private static void (d ,  );
    private static void (d ,  );
}
internal class Org.BouncyCastle.Math.BigInteger : object {
    internal static Int32[][] ;
    internal static Int32[] ;
    private static Int32[] ;
    private static Byte[] ;
    private static BigInteger[] ;
    public static BigInteger ;
    public static BigInteger ;
    public static BigInteger ;
    public static BigInteger ;
    public static BigInteger ;
    public static BigInteger ;
    private static Byte[] ;
    private static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    private static BigInteger ;
    private static  ;
    private static Int32[] ;
    private Int32[] magnitude;
    private int sign;
    private int nBits;
    private int nBitLength;
    private int mQuote;
    private static BigInteger();
    private BigInteger(int , Int32[] , bool );
    public BigInteger(string );
    public BigInteger(string , int );
    public BigInteger(Byte[] );
    public BigInteger(Byte[] , int , int );
    public BigInteger(int , Byte[] );
    public BigInteger(int , Byte[] , int , int );
    public BigInteger(int , Random );
    public BigInteger(int , int , Random );
    private static int (int );
    public static BigInteger (int );
    private static Int32[] (Byte[] , int , int );
    public BigInteger ();
    private static Int32[] (Int32[] , Int32[] );
    public BigInteger (BigInteger );
    private BigInteger (Int32[] );
    public BigInteger (BigInteger );
    public BigInteger (BigInteger );
    public int ();
    public static int (int );
    private static int (int , int , Int32[] );
    public int ();
    internal static int (int );
    private bool ();
    public int (object );
    private static int (int , Int32[] , int , Int32[] );
    private static int (int , Int32[] , int , Int32[] );
    public int (BigInteger );
    private Int32[] (Int32[] , Int32[] );
    public BigInteger (BigInteger );
    public BigInteger[] (BigInteger );
    public virtual bool Equals(object );
    private bool (BigInteger );
    public BigInteger (BigInteger );
    public virtual int GetHashCode();
    private BigInteger ();
    public int ();
    public int ();
    public bool (int );
    internal bool (int , bool );
    private bool (int , Random , bool );
    public bool (int , Random );
    internal bool (int , Random , bool );
    public long ();
    public long ();
    public BigInteger (BigInteger );
    public BigInteger (BigInteger );
    public BigInteger (BigInteger );
    public BigInteger (BigInteger );
    private BigInteger (BigInteger );
    private static int (int );
    private static long (long );
    private static BigInteger (BigInteger , BigInteger , BigInteger& );
    private static void (Int32[] );
    public BigInteger (BigInteger , BigInteger );
    private static BigInteger (BigInteger , BigInteger , BigInteger );
    private static BigInteger (BigInteger , BigInteger , BigInteger , BigInteger );
    private static BigInteger (BigInteger , BigInteger , BigInteger , bool );
    private static Int32[] (Int32[] , int );
    private static int (int , int );
    private static Int32[] (Int32[] , Int32[] );
    private static Int32[] (Int32[] , Int32[] , Int32[] );
    private int ();
    private static void (Int32[] , Int32[] , UInt32 );
    private static void (Int32[] , Int32[] , Int32[] , Int32[] , UInt32 , bool );
    private static void (Int32[] , Int32[] , Int32[] , UInt32 , bool );
    private static UInt32 (UInt32 , UInt32 , UInt32 , UInt32 );
    public BigInteger (BigInteger );
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger ();
    public BigInteger (int );
    public static BigInteger (int , Random );
    private int (int );
    private static Int32[] (Int32[] , Int32[] );
    public BigInteger (BigInteger );
    private Int32[] (int );
    private BigInteger (int );
    private BigInteger (int );
    private static Int32[] (Int32[] , int );
    private static int (Int32[] , int );
    public BigInteger (int );
    private static void (int , Int32[] , int );
    private static void (int , Int32[] );
    public BigInteger (int );
    public int ();
    private static Int32[] (int , Int32[] , int , Int32[] );
    public BigInteger (BigInteger );
    private static Int32[] (Int32[] , Int32[] );
    public Byte[] ();
    public Byte[] ();
    private Byte[] (bool );
    public virtual string ToString();
    public string (int );
    private static void (StringBuilder , int , IList , int , BigInteger );
    private static void (StringBuilder , string , int );
    private static BigInteger (ulong );
    private static BigInteger (long );
    public static BigInteger (long );
    public int ();
    private int (int );
    public bool (int );
    public BigInteger (BigInteger );
    public BigInteger (BigInteger );
    public BigInteger (int );
    public BigInteger (int );
    public BigInteger (int );
    private BigInteger (int );
}
internal static class v : object {
    public static void (UInt32 );
    public static UInt32 d(IntPtr d);
    public static UInt32 d(c d, Byte[] v, int c, IntPtr t, Byte[] n, int B, Int32& b, int m);
    public static UInt32 d(d d, IntPtr v, string c, IntPtr t, c& n, Byte[] B, int b, UInt32 m);
    public static UInt32 d(d& d, string v, UInt32 c);
}
