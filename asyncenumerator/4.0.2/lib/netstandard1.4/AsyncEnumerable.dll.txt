public abstract class Dasync.Collections.AsyncEnumerable : object {
    public static IAsyncEnumerable`1<T> Empty();
    private sealed virtual override IAsyncEnumerator Dasync.Collections.IAsyncEnumerable.GetAsyncEnumerator(CancellationToken cancellationToken);
}
public class Dasync.Collections.AsyncEnumerable`1 : AsyncEnumerable {
    private Func`2<Yield<T>, Task> _enumerationFunction;
    public static IAsyncEnumerable`1<T> Empty;
    public AsyncEnumerable`1(Func`2<Yield<T>, Task> enumerationFunction);
    private static AsyncEnumerable`1();
    public sealed virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override IAsyncEnumerator Dasync.Collections.IAsyncEnumerable.GetAsyncEnumerator(CancellationToken cancellationToken);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Dasync.Collections.AsyncEnumerableAdapterExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IEnumerable ToEnumerable(IAsyncEnumerable asyncEnumerable);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IEnumerator ToEnumerator(IAsyncEnumerator asyncEnumerator);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IEnumerator GetEnumerator(IAsyncEnumerable asyncEnumerable);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static bool MoveNext(IAsyncEnumerator asyncEnumerator);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IEnumerable`1<T> ToEnumerable(IAsyncEnumerable`1<T> asyncEnumerable);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IEnumerator`1<T> ToEnumerator(IAsyncEnumerator`1<T> asyncEnumerator);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IEnumerator`1<T> GetEnumerator(IAsyncEnumerable`1<T> asyncEnumerable);
}
public class Dasync.Collections.AsyncEnumerableWithState`2 : AsyncEnumerable {
    private Func`3<Yield<TItem>, TState, Task> _enumerationFunction;
    [CompilerGeneratedAttribute]
private TState <State>k__BackingField;
    protected TState State { get; }
    public AsyncEnumerableWithState`2(Func`3<Yield<TItem>, TState, Task> enumerationFunction, TState state);
    [CompilerGeneratedAttribute]
protected TState get_State();
    public virtual IAsyncEnumerator`1<TItem> GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override IAsyncEnumerator Dasync.Collections.IAsyncEnumerable.GetAsyncEnumerator(CancellationToken cancellationToken);
}
public class Dasync.Collections.AsyncEnumerationCanceledException : OperationCanceledException {
}
public abstract class Dasync.Collections.AsyncEnumerator : object {
    public static IAsyncEnumerator`1<T> Empty();
}
public class Dasync.Collections.AsyncEnumerator`1 : AsyncEnumeratorWithState`2<T, NoStateAdapter<T>> {
    public static IAsyncEnumerator`1<T> Empty;
    public AsyncEnumerator`1(Func`2<Yield<T>, Task> enumerationFunction, Action onDispose);
    private static AsyncEnumerator`1();
}
public class Dasync.Collections.AsyncEnumeratorWithState`2 : CurrentValueContainer`1<TItem> {
    private static Action`2<Task, object> OnEnumerationCompleteAction;
    private Func`3<Yield<TItem>, TState, Task> _enumerationFunction;
    private Action`1<TState> _onDisposeAction;
    private Yield<TItem> _yield;
    private Task _enumerationTask;
    internal CancellationToken MasterCancellationToken;
    [CompilerGeneratedAttribute]
private TState <State>k__BackingField;
    protected TState State { get; }
    public TItem Current { get; }
    public bool IsEnumerationComplete { get; }
    private object Dasync.Collections.IAsyncEnumerator.Current { get; }
    public AsyncEnumeratorWithState`2(Func`3<Yield<TItem>, TState, Task> enumerationFunction, TState state, Action`1<TState> onDispose);
    private static AsyncEnumeratorWithState`2();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
protected TState get_State();
    public virtual TItem get_Current();
    public bool get_IsEnumerationComplete();
    private sealed virtual override object Dasync.Collections.IAsyncEnumerator.get_Current();
    public virtual ValueTask`1<bool> MoveNextAsync();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Dasync.Collections.AsyncEnumeratorWithState`2/<DisposeAsync>d__19")]
public sealed virtual ValueTask DisposeAsync();
    protected virtual void Dispose(bool manualDispose);
    private static void OnEnumerationComplete(Task task, object state);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Dasync.Collections.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IAsyncEnumerable ToAsyncEnumerable(IEnumerable enumerable, bool runSynchronously);
}
public static class Dasync.Collections.ForEachAsync : object {
    public static void Break();
}
public class Dasync.Collections.ForEachAsyncBreakException : OperationCanceledException {
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Dasync.Collections.ForEachAsyncExtensions : object {
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__0")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerable enumerable, Action`1<object> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__1")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerator enumerator, Action`1<object> action);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__2")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerable enumerable, Action`2<object, long> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__3")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerator enumerator, Action`2<object, long> action);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__4")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerable enumerable, Func`2<object, Task> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__5")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerator enumerator, Func`2<object, Task> action);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__6")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerable enumerable, Func`3<object, long, Task> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__7")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerator enumerator, Func`3<object, long, Task> action);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__8`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerable`1<T> enumerable, Action`1<T> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__9`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerator`1<T> enumerator, Action`1<T> action);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__10`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerable`1<T> enumerable, Action`2<T, long> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__11`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerator`1<T> enumerator, Action`2<T, long> action);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__12`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerable`1<T> enumerable, Func`2<T, Task> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__13`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`2<T, Task> action);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__14`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerable`1<T> enumerable, Func`3<T, long, Task> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.ForEachAsyncExtensions/<ForEachAsync>d__15`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`3<T, long, Task> action);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Dasync.Collections.GenericEnumerableExtensions : object {
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> ToAsyncEnumerable(IEnumerable`1<T> enumerable, bool runSynchronously);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<T> GetAsyncEnumerator(IEnumerable`1<T> enumerable, bool runSynchronously);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<T> ToAsyncEnumerator(IEnumerator`1<T> enumerator, bool runSynchronously);
}
public interface Dasync.Collections.IAsyncDisposable {
    public abstract virtual ValueTask DisposeAsync();
}
public interface Dasync.Collections.IAsyncEnumerable {
    public abstract virtual IAsyncEnumerator GetAsyncEnumerator(CancellationToken cancellationToken);
}
public interface Dasync.Collections.IAsyncEnumerable`1 {
    public abstract virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Dasync.Collections.IAsyncEnumerableExtensions : object {
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IAsyncEnumerable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IAsyncEnumerable`1<TSource> source, string noneExceptionMessage, string manyExceptionMessage, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<SingleAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, string noneExceptionMessage, string manyExceptionMessage, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IAsyncEnumerable`1<TSource> source, CancellationToken token);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<SingleOrDefaultAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IAsyncEnumerable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IAsyncEnumerable`1<TSource> source, string exceptionMessage, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken token);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<FirstAsync>d__10`1")]
[ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, string exceptionMessage, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IAsyncEnumerable`1<TSource> source, CancellationToken token);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<FirstOrDefaultAsync>d__12`1")]
[ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken token);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> Select(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> Select(IAsyncEnumerable`1<TSource> source, Func`3<TSource, long, TResult> selector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> SelectMany(IAsyncEnumerable`1<TSource> source, Func`2<TSource, IAsyncEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> SelectMany(IAsyncEnumerable`1<TSource> source, Func`2<TSource, IAsyncEnumerable`1<TItem>> collectionSelector, Func`3<TSource, TItem, TResult> resultSelector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> SelectMany(IAsyncEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> SelectMany(IAsyncEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TItem>> collectionSelector, Func`3<TSource, TItem, TResult> resultSelector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> Take(IAsyncEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> TakeWhile(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToListAsync>d__27`1")]
[ExtensionAttribute]
public static Task`1<List`1<T>> ToListAsync(IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToArrayAsync>d__28`1")]
[ExtensionAttribute]
public static Task`1<T[]> ToArrayAsync(IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToDictionaryAsync>d__29`2")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToDictionaryAsync>d__30`2")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToDictionaryAsync>d__31`3")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToDictionaryAsync>d__32`3")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToLookupAsync>d__35`2")]
[ExtensionAttribute]
public static Task`1<ILookup`2<TKey, TSource>> ToLookupAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToLookupAsync>d__36`2")]
[ExtensionAttribute]
public static Task`1<ILookup`2<TKey, TSource>> ToLookupAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToLookupAsync>d__37`3")]
[ExtensionAttribute]
public static Task`1<ILookup`2<TKey, TElement>> ToLookupAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<ToLookupAsync>d__38`3")]
[ExtensionAttribute]
public static Task`1<ILookup`2<TKey, TElement>> ToLookupAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> Skip(IAsyncEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> SkipWhile(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> Where(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> Where(IAsyncEnumerable`1<TSource> source, Func`3<TSource, long, bool> predicate);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> Cast(IAsyncEnumerable source);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TResult> OfType(IAsyncEnumerable source);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> DefaultIfEmpty(IAsyncEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> DefaultIfEmpty(IAsyncEnumerable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<List`1<TSource>> Batch(IAsyncEnumerable`1<TSource> source, int batchSize);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TStandardCollection> Batch(IAsyncEnumerable`1<TSource> source, int batchSize);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<List`1<TSource>> Batch(IAsyncEnumerable`1<TSource> source, long maxBatchWeight, Func`2<TSource, long> weightSelector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TStandardCollection> Batch(IAsyncEnumerable`1<TSource> source, long maxBatchWeight, Func`2<TSource, long> weightSelector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<List`1<TSource>> Batch(IAsyncEnumerable`1<TSource> source, int maxItemsInBatch, long maxBatchWeight, Func`2<TSource, long> weightSelector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TStandardCollection> Batch(IAsyncEnumerable`1<TSource> source, int maxItemsInBatch, long maxBatchWeight, Func`2<TSource, long> weightSelector);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TBatch> Batch(IAsyncEnumerable`1<TSource> source, Nullable`1<int> maxItemsInBatch, long maxBatchWeight, Func`2<TSource, long> weightSelector, Func`2<Nullable`1<int>, TBatch> createBatch, Action`2<TBatch, TSource> addItem);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> UnionAll(IAsyncEnumerable`1<T> first, IAsyncEnumerable`1<T> second);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> UnionAll(IEnumerable`1<IAsyncEnumerable`1<T>> collections);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> Append(IAsyncEnumerable`1<TSource> source, TSource element);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> Prepend(IAsyncEnumerable`1<TSource> source, TSource element);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> Concat(IAsyncEnumerable`1<TSource> first, IAsyncEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> Distinct(IAsyncEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> Distinct(IAsyncEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<AggregateAsync>d__74`1")]
[ExtensionAttribute]
public static Task`1<TSource> AggregateAsync(IAsyncEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> func, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<AggregateAsync>d__75`2")]
[ExtensionAttribute]
public static Task`1<TAccumulate> AggregateAsync(IAsyncEnumerable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<AggregateAsync>d__76`3")]
[ExtensionAttribute]
public static Task`1<TResult> AggregateAsync(IAsyncEnumerable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<AllAsync>d__77`1")]
[ExtensionAttribute]
public static Task`1<bool> AllAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumerableExtensions/<AnyAsync>d__78`1")]
[ExtensionAttribute]
public static Task`1<bool> AnyAsync(IAsyncEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken cancellationToken);
}
public interface Dasync.Collections.IAsyncEnumerator {
    public object Current { get; }
    public abstract virtual object get_Current();
    public abstract virtual ValueTask`1<bool> MoveNextAsync();
}
public interface Dasync.Collections.IAsyncEnumerator`1 {
    public T Current { get; }
    public abstract virtual T get_Current();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Dasync.Collections.IAsyncEnumeratorExtensions : object {
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IAsyncEnumerator`1<TSource> source, bool disposeSource);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IAsyncEnumerator`1<TSource> source, string noneExceptionMessage, string manyExceptionMessage, bool disposeSource);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IAsyncEnumerator`1<TSource> source, Func`2<TSource, bool> predicate, bool disposeSource);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumeratorExtensions/<SingleAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IAsyncEnumerator`1<TSource> source, Func`2<TSource, bool> predicate, string noneExceptionMessage, string manyExceptionMessage, bool disposeSource);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IAsyncEnumerator`1<TSource> source, bool disposeSource);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumeratorExtensions/<SingleOrDefaultAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IAsyncEnumerator`1<TSource> source, Func`2<TSource, bool> predicate, bool disposeSource);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IAsyncEnumerator`1<TSource> source, bool disposeSource);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IAsyncEnumerator`1<TSource> source, string exceptionMessage, bool disposeSource);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IAsyncEnumerator`1<TSource> source, Func`2<TSource, bool> predicate, bool disposeSource);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumeratorExtensions/<FirstAsync>d__9`1")]
[ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IAsyncEnumerator`1<TSource> source, Func`2<TSource, bool> predicate, string exceptionMessage, bool disposeSource);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IAsyncEnumerator`1<TSource> source, bool disposeSource);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumeratorExtensions/<FirstOrDefaultAsync>d__11`1")]
[ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IAsyncEnumerator`1<TSource> source, Func`2<TSource, bool> predicate, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TResult> Select(IAsyncEnumerator`1<TSource> source, Func`2<TSource, TResult> selector, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TResult> Select(IAsyncEnumerator`1<TSource> source, Func`3<TSource, long, TResult> selector, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TSource> Take(IAsyncEnumerator`1<TSource> source, int count, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TSource> TakeWhile(IAsyncEnumerator`1<TSource> source, Func`2<TSource, bool> predicate, bool disposeSource);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumeratorExtensions/<ToListAsync>d__20`1")]
[ExtensionAttribute]
public static Task`1<List`1<T>> ToListAsync(IAsyncEnumerator`1<T> source, bool disposeSource);
    [AsyncStateMachineAttribute("Dasync.Collections.IAsyncEnumeratorExtensions/<ToArrayAsync>d__21`1")]
[ExtensionAttribute]
public static Task`1<T[]> ToArrayAsync(IAsyncEnumerator`1<T> source, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TSource> Skip(IAsyncEnumerator`1<TSource> source, int count, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TSource> SkipWhile(IAsyncEnumerator`1<TSource> source, Func`2<TSource, bool> predicate, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TSource> Where(IAsyncEnumerator`1<TSource> source, Func`2<TSource, bool> predicate, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TSource> Where(IAsyncEnumerator`1<TSource> source, Func`3<TSource, long, bool> predicate, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TResult> Cast(IAsyncEnumerator source, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TSource> DefaultIfEmpty(IAsyncEnumerator`1<TSource> source, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TSource> DefaultIfEmpty(IAsyncEnumerator`1<TSource> source, TSource defaultValue, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<List`1<TSource>> Batch(IAsyncEnumerator`1<TSource> source, int batchSize, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TStandardCollection> Batch(IAsyncEnumerator`1<TSource> source, int batchSize, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<List`1<TSource>> Batch(IAsyncEnumerator`1<TSource> source, long maxBatchWeight, Func`2<TSource, long> weightSelector, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TStandardCollection> Batch(IAsyncEnumerator`1<TSource> source, long maxBatchWeight, Func`2<TSource, long> weightSelector, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<List`1<TSource>> Batch(IAsyncEnumerator`1<TSource> source, int maxItemsInBatch, long maxBatchWeight, Func`2<TSource, long> weightSelector, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TStandardCollection> Batch(IAsyncEnumerator`1<TSource> source, int maxItemsInBatch, long maxBatchWeight, Func`2<TSource, long> weightSelector, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<TBatch> Batch(IAsyncEnumerator`1<TSource> source, Nullable`1<int> maxItemsInBatch, long maxBatchWeight, Func`2<TSource, long> weightSelector, Func`2<Nullable`1<int>, TBatch> createBatch, Action`2<TBatch, TSource> addItem, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<T> UnionAll(IAsyncEnumerator`1<T> first, IAsyncEnumerator`1<T> second, bool disposeSource);
    [ExtensionAttribute]
public static IAsyncEnumerator`1<T> UnionAll(IEnumerable`1<IAsyncEnumerator`1<T>> collections, bool disposeSource);
}
internal class Dasync.Collections.Internals.AsyncEnumerableWrapper`1 : object {
    private IEnumerable`1<T> _enumerable;
    private bool _runSynchronously;
    public AsyncEnumerableWrapper`1(IEnumerable`1<T> enumerable, bool runSynchronously);
    private sealed virtual override IAsyncEnumerator Dasync.Collections.IAsyncEnumerable.GetAsyncEnumerator(CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
}
internal class Dasync.Collections.Internals.AsyncEnumeratorWrapper`1 : object {
    private IEnumerator`1<T> _enumerator;
    private bool _runSynchronously;
    internal CancellationToken MasterCancellationToken;
    public T Current { get; }
    private object Dasync.Collections.IAsyncEnumerator.Current { get; }
    public AsyncEnumeratorWrapper`1(IEnumerator`1<T> enumerator, bool runSynchronously);
    public sealed virtual T get_Current();
    private sealed virtual override object Dasync.Collections.IAsyncEnumerator.get_Current();
    public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
private bool <MoveNextAsync>b__8_0();
}
internal static class Dasync.Collections.Internals.CancellationTokenEx : object {
    public static CancellationToken Canceled;
    private static CancellationTokenEx();
}
public abstract class Dasync.Collections.Internals.CurrentValueContainer`1 : AsyncEnumerator {
    private T _currentValue;
    [CompilerGeneratedAttribute]
private bool <HasCurrentValue>k__BackingField;
    internal T CurrentValue { get; internal set; }
    internal bool HasCurrentValue { get; private set; }
    internal T get_CurrentValue();
    internal void set_CurrentValue(T value);
    [CompilerGeneratedAttribute]
internal bool get_HasCurrentValue();
    [CompilerGeneratedAttribute]
private void set_HasCurrentValue(bool value);
}
internal class Dasync.Collections.Internals.EmptyAsyncEnumerable`1 : object {
    public sealed virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override IAsyncEnumerator Dasync.Collections.IAsyncEnumerable.GetAsyncEnumerator(CancellationToken cancellationToken);
}
internal class Dasync.Collections.Internals.EmptyAsyncEnumerator`1 : object {
    public T Current { get; }
    private object Dasync.Collections.IAsyncEnumerator.Current { get; }
    public sealed virtual T get_Current();
    private sealed virtual override object Dasync.Collections.IAsyncEnumerator.get_Current();
    public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
}
internal class Dasync.Collections.Internals.EnumerableAdapter : object {
    private IAsyncEnumerable _asyncEnumerable;
    public EnumerableAdapter(IAsyncEnumerable asyncEnumerable);
    public sealed virtual IEnumerator GetEnumerator();
}
internal class Dasync.Collections.Internals.EnumerableAdapter`1 : object {
    private IAsyncEnumerable`1<T> _asyncEnumerable;
    public EnumerableAdapter`1(IAsyncEnumerable`1<T> asyncEnumerable);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
}
internal class Dasync.Collections.Internals.EnumeratorAdapter : object {
    private IAsyncEnumerator _asyncEnumerator;
    public object Current { get; }
    public EnumeratorAdapter(IAsyncEnumerator asyncEnumerator);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public void Dispose();
}
internal class Dasync.Collections.Internals.EnumeratorAdapter`1 : object {
    private IAsyncEnumerator`1<T> _asyncEnumerator;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public EnumeratorAdapter`1(IAsyncEnumerator`1<T> asyncEnumerator);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
public static class Dasync.Collections.Internals.TaskCompletionSource : object {
    private static Func`3<Task, object, int> _resetTaskFunc;
    private static TaskCompletionSource();
    private static void TestResetFunction();
    public static void DisableTaskCompletionSourceReUse();
    public static void Reset(TaskCompletionSource`1& taskCompletionSource, object stateObject);
}
internal static class Dasync.Collections.Internals.TaskEx : object {
    public static Task`1<bool> True;
    public static Task`1<bool> False;
    public static Task Completed;
    private static TaskEx();
    public static Task`1<T> FromException(Exception ex);
}
public class Dasync.Collections.ParallelForEachException : AggregateException {
    public ParallelForEachException(IEnumerable`1<Exception> innerExceptions);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Dasync.Collections.ParallelForEachExtensions : object {
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerable`1<T> collection, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, bool gracefulBreak, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, bool gracefulBreak, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerable`1<T> collection, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerable`1<T> collection, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerable`1<T> collection, Func`3<T, long, Task> asyncItemAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`3<T, long, Task> asyncItemAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerable`1<T> collection, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerable`1<T> collection, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, bool gracefulBreak, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, bool gracefulBreak, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerable`1<T> collection, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerable`1<T> collection, Func`2<T, Task> asyncItemAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IAsyncEnumerator`1<T> enumerator, Func`2<T, Task> asyncItemAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerable`1<T> collection, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerator`1<T> enumerator, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerable`1<T> collection, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerator`1<T> enumerator, Func`3<T, long, Task> asyncItemAction, int maxDegreeOfParallelism, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerable`1<T> collection, Func`3<T, long, Task> asyncItemAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerator`1<T> enumerator, Func`3<T, long, Task> asyncItemAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerable`1<T> collection, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerator`1<T> enumerator, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, bool breakLoopOnException, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerable`1<T> collection, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerator`1<T> enumerator, Func`2<T, Task> asyncItemAction, int maxDegreeOfParallelism, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerable`1<T> collection, Func`2<T, Task> asyncItemAction, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ParallelForEachAsync(IEnumerator`1<T> enumerator, Func`2<T, Task> asyncItemAction, CancellationToken cancellationToken);
}
