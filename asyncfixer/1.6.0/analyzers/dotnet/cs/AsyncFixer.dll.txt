[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AsyncFixer.AsyncCallInsideUsingBlock.AsyncCallInsideUsingBlockAnalyzer : DiagnosticAnalyzer {
    private static LocalizableString Title;
    private static LocalizableString MessageFormat;
    private static LocalizableString Description;
    private static DiagnosticDescriptor Rule;
    private static String[] BlockingCalls;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AsyncCallInsideUsingBlockAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeUsingBlock(SyntaxNodeAnalysisContext context);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AsyncFixer.AsyncVoid.AsyncVoidAnalyzer : DiagnosticAnalyzer {
    private static LocalizableString Title;
    private static LocalizableString MessageFormat;
    private static LocalizableString Description;
    private static DiagnosticDescriptor Rule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AsyncVoidAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeMethodDeclaration(SyntaxNodeAnalysisContext context);
    private void AnalyzeAnonymousFunction(OperationAnalysisContext context);
    private void AnalyzeExpression(SyntaxNodeAnalysisContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class AsyncFixer.AsyncVoid.AsyncVoidFixer : CodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static AsyncVoidFixer();
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("AsyncFixer.AsyncVoid.AsyncVoidFixer/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("AsyncFixer.AsyncVoid.AsyncVoidFixer/<ConvertToTask>d__5")]
private Task`1<Document> ConvertToTask(Document document, MethodDeclarationSyntax methodDecl, CancellationToken cancellationToken);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AsyncFixer.BlockingCallInsideAsync.BlockingCallInsideAsyncAnalyzer : DiagnosticAnalyzer {
    private static LocalizableString Title;
    private static LocalizableString MessageFormat;
    private static LocalizableString Description;
    private static DiagnosticDescriptor Rule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static BlockingCallInsideAsyncAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeMethodDeclaration(SyntaxNodeAnalysisContext context);
    private void AnalyzeInvocation(SyntaxNodeAnalysisContext context, InvocationExpressionSyntax invocation, string enclosingMethodName);
    private void AnalyzeMemberAccess(SyntaxNodeAnalysisContext context, MethodDeclarationSyntax method, MemberAccessExpressionSyntax memberAccess);
    private static string DetectSynchronousUsages(Location location, IMethodSymbol methodCallSymbol, ITypeSymbol receiverTypeCandidate, SemanticModel semanticModel);
    private static bool IsSignatureCompatible(IMethodSymbol old, IMethodSymbol replacement);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class AsyncFixer.BlockingCallInsideAsync.BlockingCallInsideAsyncFixer : CodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static BlockingCallInsideAsyncFixer();
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("AsyncFixer.BlockingCallInsideAsync.BlockingCallInsideAsyncFixer/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("AsyncFixer.BlockingCallInsideAsync.BlockingCallInsideAsyncFixer/<InsertAsyncCallForTaskResult>d__5")]
private Task`1<Document> InsertAsyncCallForTaskResult(Document document, MemberAccessExpressionSyntax memberAccess, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AsyncFixer.BlockingCallInsideAsync.BlockingCallInsideAsyncFixer/<InsertAsyncCallForInvocation>d__6")]
private Task`1<Document> InsertAsyncCallForInvocation(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
    private AwaitExpressionSyntax MakeItAwaited(ExpressionSyntax expression, SyntaxNode oldNode);
}
public static class AsyncFixer.Constants : object {
    public static string DiagnosticCategory;
    public static string RepositoryLink;
}
public static class AsyncFixer.DiagnosticIds : object {
    public static string UnnecessaryAsync;
    public static string BlockingCallInsideAsync;
    public static string AsyncVoid;
    public static string AsyncCallInsideUsingBlock;
    public static string NestedTaskToOuterTask;
}
[ExtensionAttribute]
public static class AsyncFixer.Helpers : object {
    [ExtensionAttribute]
public static bool IsTaskCreationMethod(IMethodSymbol symbol);
    [ExtensionAttribute]
public static bool IsTask(ITypeSymbol type);
    [ExtensionAttribute]
public static bool ReturnTask(IMethodSymbol symbol);
    [ExtensionAttribute]
public static bool IsAsync(MethodDeclarationSyntax method);
    [ExtensionAttribute]
public static bool IsTestMethod(MethodDeclarationSyntax method);
    [ExtensionAttribute]
public static bool HasEventArgsParameter(MethodDeclarationSyntax method);
    [ExtensionAttribute]
public static bool HasObjectStateParameter(MethodDeclarationSyntax method);
    [ExtensionAttribute]
public static bool ReturnsVoid(MethodDeclarationSyntax method);
    [ExtensionAttribute]
public static bool IsImplicitTypeCasting(TypeInfo typeInfo);
    public static ExpressionSyntax RemoveConfigureAwait(ExpressionSyntax expression);
    [ExtensionAttribute]
public static T FirstAncestorOrSelfUnderGivenNode(SyntaxNode node, SyntaxNode parent);
    [ExtensionAttribute]
public static T ReplaceAll(T node, SyntaxReplacementPair[] syntaxReplacementPairs);
    [ExtensionAttribute]
public static T ReplaceAll(T node, IEnumerable`1<SyntaxReplacementPair> replacementPairs);
    [IteratorStateMachineAttribute("AsyncFixer.Helpers/<GetAccessedVariableNamesWithPointsToAnalysis>d__13")]
public static IEnumerable`1<string> GetAccessedVariableNamesWithPointsToAnalysis(SemanticModel semanticModel, SyntaxNode root, SyntaxNode node, int depth);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AsyncFixer.NestedTaskToOuterTask.NestedTaskToOuterTaskAnalyzer : DiagnosticAnalyzer {
    private static LocalizableString Title;
    private static LocalizableString MessageFormat;
    private static LocalizableString Description;
    private static DiagnosticDescriptor Rule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static NestedTaskToOuterTaskAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeAwait(SyntaxNodeAnalysisContext context);
    private void AnalyzeVariableDecl(SyntaxNodeAnalysisContext context);
    private void AnalyzeSimpleAssignmentExpr(SyntaxNodeAnalysisContext context);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class AsyncFixer.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AsyncCallInsideUsingBlockDescription { get; }
    internal static string AsyncCallInsideUsingBlockMessageFormat { get; }
    internal static string AsyncCallInsideUsingBlockTitle { get; }
    internal static string AsyncVoidDescription { get; }
    internal static string AsyncVoidFixerTitle { get; }
    internal static string AsyncVoidMessageFormat { get; }
    internal static string AsyncVoidTitle { get; }
    internal static string BlockingCallInsideAsyncDescription { get; }
    internal static string BlockingCallInsideAsyncFixerTitle { get; }
    internal static string BlockingCallInsideAsyncMessageFormat { get; }
    internal static string BlockingCallInsideAsyncTitle { get; }
    internal static string NestedTaskToOuterTaskDescription { get; }
    internal static string NestedTaskToOuterTaskMessageFormat { get; }
    internal static string NestedTaskToOuterTaskTitle { get; }
    internal static string UnnecessaryAsyncDescription { get; }
    internal static string UnnecessaryAsyncFixerTitle { get; }
    internal static string UnnecessaryAsyncMessageFormat { get; }
    internal static string UnnecessaryAsyncTitle { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AsyncCallInsideUsingBlockDescription();
    internal static string get_AsyncCallInsideUsingBlockMessageFormat();
    internal static string get_AsyncCallInsideUsingBlockTitle();
    internal static string get_AsyncVoidDescription();
    internal static string get_AsyncVoidFixerTitle();
    internal static string get_AsyncVoidMessageFormat();
    internal static string get_AsyncVoidTitle();
    internal static string get_BlockingCallInsideAsyncDescription();
    internal static string get_BlockingCallInsideAsyncFixerTitle();
    internal static string get_BlockingCallInsideAsyncMessageFormat();
    internal static string get_BlockingCallInsideAsyncTitle();
    internal static string get_NestedTaskToOuterTaskDescription();
    internal static string get_NestedTaskToOuterTaskMessageFormat();
    internal static string get_NestedTaskToOuterTaskTitle();
    internal static string get_UnnecessaryAsyncDescription();
    internal static string get_UnnecessaryAsyncFixerTitle();
    internal static string get_UnnecessaryAsyncMessageFormat();
    internal static string get_UnnecessaryAsyncTitle();
}
public class AsyncFixer.SyntaxReplacementPair : object {
    public SyntaxNode NewNode;
    public SyntaxNode OldNode;
    public SyntaxReplacementPair(SyntaxNode oldNode, SyntaxNode newNode);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AsyncFixer.UnnecessaryAsync.UnnecessaryAsyncAnalyzer : DiagnosticAnalyzer {
    private static LocalizableString Title;
    private static LocalizableString MessageFormat;
    private static LocalizableString Description;
    private static DiagnosticDescriptor Rule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static UnnecessaryAsyncAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private bool IsInUsingOrTryScope(SyntaxNode node, SyntaxNode root);
    private void AnalyzeMethodDeclaration(SyntaxNodeAnalysisContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class AsyncFixer.UnnecessaryAsync.UnnecessaryAsyncFixer : CodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static UnnecessaryAsyncFixer();
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("AsyncFixer.UnnecessaryAsync.UnnecessaryAsyncFixer/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("AsyncFixer.UnnecessaryAsync.UnnecessaryAsyncFixer/<RemoveAsyncAwait>d__5")]
private Task`1<Document> RemoveAsyncAwait(Document document, SemanticModel semanticModel, MethodDeclarationSyntax methodDecl, CancellationToken cancellationToken);
    private ExpressionSyntax RemoveAwaitFromExpression(AwaitExpressionSyntax awaitExpr);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
