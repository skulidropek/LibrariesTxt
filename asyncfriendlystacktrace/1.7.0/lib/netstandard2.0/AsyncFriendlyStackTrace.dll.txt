internal static class AsyncFriendlyStackTrace.EnvironmentUtil : object {
    private static Lazy`1<bool> _runningOnMono;
    private static EnvironmentUtil();
    internal static bool IsRunningOnMono();
}
[ExtensionAttribute]
public static class AsyncFriendlyStackTrace.ExceptionExtensions : object {
    private static string EndOfInnerExceptionStack;
    private static string AggregateExceptionFormatString;
    private static string AsyncStackTraceExceptionData;
    private static Lazy`1<string> StackTraceFieldNameGuesser;
    private static Func`2<Exception, string> GetRemoteStackTraceString;
    private static Func`2<Exception, string> GetStackTraceString { get; }
    private static ExceptionExtensions();
    private static Func`2<Exception, string> get_GetStackTraceString();
    [ExtensionAttribute]
public static string ToAsyncString(Exception exception);
    [ExtensionAttribute]
public static void PrepareForAsyncSerialization(Exception exception);
    private static IList`1<Exception> GetInnerExceptions(Exception exception);
    private static string ToAsyncAggregateString(Exception exception, IList`1<Exception> inner);
    private static string ToAsyncStringCore(Exception exception, bool includeMessageOnly);
    private static string GetAsyncStackTrace(Exception exception);
}
internal static class AsyncFriendlyStackTrace.ReflectionUtil : object {
    internal static Func`2<TOwner, TField> GenerateGetField(string fieldName);
    internal static bool HasField(string field);
}
[ExtensionAttribute]
public static class AsyncFriendlyStackTrace.StackTraceExtensions : object {
    private static string AtString;
    private static string LineFormat;
    private static string AsyncMethodPrefix;
    [ExtensionAttribute]
public static string ToAsyncString(StackTrace stackTrace);
    private static bool FormatMethodName(StringBuilder stringBuilder, TypeInfo declaringType);
    private static bool FormatFileName(bool displayFilenames, StackFrame frame, StringBuilder stringBuilder);
    private static void FormatParameters(StringBuilder stringBuilder, MethodBase method);
    private static void FormatGenericArguments(StringBuilder stringBuilder, Type[] genericArguments);
}
