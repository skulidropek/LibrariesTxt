internal class AsyncKeyedLock.AsyncKeyedLockDictionary`1 : ConcurrentDictionary`2<TKey, AsyncKeyedLockReleaser`1<TKey>> {
    [CompilerGeneratedAttribute]
private int <MaxCount>k__BackingField;
    internal AsyncKeyedLockPool`1<TKey> _pool;
    [CompilerGeneratedAttribute]
private bool <PoolingEnabled>k__BackingField;
    public int MaxCount { get; private set; }
    public bool PoolingEnabled { get; internal set; }
    public AsyncKeyedLockDictionary`1(AsyncKeyedLockOptions options);
    public AsyncKeyedLockDictionary`1(AsyncKeyedLockOptions options, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLockDictionary`1(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity);
    public AsyncKeyedLockDictionary`1(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    [CompilerGeneratedAttribute]
public int get_MaxCount();
    [CompilerGeneratedAttribute]
private void set_MaxCount(int value);
    [CompilerGeneratedAttribute]
public bool get_PoolingEnabled();
    [CompilerGeneratedAttribute]
internal void set_PoolingEnabled(bool value);
    public AsyncKeyedLockReleaser`1<TKey> GetOrAdd(TKey key);
    public void Release(AsyncKeyedLockReleaser`1<TKey> releaser);
    public void ReleaseWithoutSemaphoreRelease(AsyncKeyedLockReleaser`1<TKey> releaser);
    public sealed virtual void Dispose();
}
public class AsyncKeyedLock.AsyncKeyedLocker : AsyncKeyedLocker`1<object> {
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(AsyncKeyedLockOptions options);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(Action`1<AsyncKeyedLockOptions> options);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(IEqualityComparer`1<object> comparer);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(AsyncKeyedLockOptions options, IEqualityComparer`1<object> comparer);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(Action`1<AsyncKeyedLockOptions> options, IEqualityComparer`1<object> comparer);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(int concurrencyLevel, int capacity);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(Action`1<AsyncKeyedLockOptions> options, int concurrencyLevel, int capacity);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(int concurrencyLevel, int capacity, IEqualityComparer`1<object> comparer);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity, IEqualityComparer`1<object> comparer);
    [ObsoleteAttribute("Unless you're mixing different types of objects, it is recommended to use the generic version AsyncKeyedLocker<T>.")]
public AsyncKeyedLocker(Action`1<AsyncKeyedLockOptions> options, int concurrencyLevel, int capacity, IEqualityComparer`1<object> comparer);
}
public class AsyncKeyedLock.AsyncKeyedLocker`1 : object {
    internal AsyncKeyedLockDictionary`1<TKey> _dictionary;
    private static EmptyDisposable _emptyDisposable;
    public IReadOnlyDictionary`2<TKey, AsyncKeyedLockReleaser`1<TKey>> Index { get; }
    public int MaxCount { get; }
    public AsyncKeyedLocker`1(AsyncKeyedLockOptions options);
    public AsyncKeyedLocker`1(Action`1<AsyncKeyedLockOptions> options);
    public AsyncKeyedLocker`1(IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(AsyncKeyedLockOptions options, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(Action`1<AsyncKeyedLockOptions> options, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(int concurrencyLevel, int capacity);
    public AsyncKeyedLocker`1(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity);
    public AsyncKeyedLocker`1(Action`1<AsyncKeyedLockOptions> options, int concurrencyLevel, int capacity);
    public AsyncKeyedLocker`1(int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(Action`1<AsyncKeyedLockOptions> options, int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    private static AsyncKeyedLocker`1();
    public IReadOnlyDictionary`2<TKey, AsyncKeyedLockReleaser`1<TKey>> get_Index();
    public int get_MaxCount();
    public AsyncKeyedLockReleaser`1<TKey> GetOrAdd(TKey key);
    private void Release(AsyncKeyedLockReleaser`1<TKey> releaser);
    private void ReleaseWithoutSemaphoreRelease(AsyncKeyedLockReleaser`1<TKey> releaser);
    public IDisposable Lock(TKey key);
    public IDisposable Lock(TKey key, CancellationToken cancellationToken);
    public IDisposable Lock(TKey key, int millisecondsTimeout, Boolean& entered);
    public IDisposable Lock(TKey key, TimeSpan timeout, Boolean& entered);
    public IDisposable Lock(TKey key, int millisecondsTimeout, CancellationToken cancellationToken, Boolean& entered);
    public IDisposable Lock(TKey key, TimeSpan timeout, CancellationToken cancellationToken, Boolean& entered);
    public bool TryLock(TKey key, Action action, int millisecondsTimeout);
    public bool TryLock(TKey key, Action action, TimeSpan timeout);
    public bool TryLock(TKey key, Action action, int millisecondsTimeout, CancellationToken cancellationToken);
    public bool TryLock(TKey key, Action action, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__31")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__32")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__33")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__34")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__35")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__36")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__37")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__38")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__39")]
public ValueTask`1<IDisposable> LockAsync(TKey key, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__40")]
public ValueTask`1<IDisposable> LockAsync(TKey key, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__41")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> LockAsync(TKey key, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__42")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> LockAsync(TKey key, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__43")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> LockAsync(TKey key, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__44")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> LockAsync(TKey key, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public IDisposable ConditionalLock(TKey key, bool getLock);
    public IDisposable ConditionalLock(TKey key, bool getLock, CancellationToken cancellationToken);
    public IDisposable ConditionalLock(TKey key, bool getLock, int millisecondsTimeout, Boolean& entered);
    public IDisposable ConditionalLock(TKey key, bool getLock, TimeSpan timeout, Boolean& entered);
    public IDisposable ConditionalLock(TKey key, bool getLock, int millisecondsTimeout, CancellationToken cancellationToken, Boolean& entered);
    public IDisposable ConditionalLock(TKey key, bool getLock, TimeSpan timeout, CancellationToken cancellationToken, Boolean& entered);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<ConditionalLockAsync>d__51")]
public ValueTask`1<IDisposable> ConditionalLockAsync(TKey key, bool getLock, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<ConditionalLockAsync>d__52")]
public ValueTask`1<IDisposable> ConditionalLockAsync(TKey key, bool getLock, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<ConditionalLockAsync>d__53")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> ConditionalLockAsync(TKey key, bool getLock, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<ConditionalLockAsync>d__54")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> ConditionalLockAsync(TKey key, bool getLock, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<ConditionalLockAsync>d__55")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> ConditionalLockAsync(TKey key, bool getLock, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncKeyedLocker`1/<ConditionalLockAsync>d__56")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> ConditionalLockAsync(TKey key, bool getLock, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public bool IsInUse(TKey key);
    [ObsoleteAttribute("This method should not longer be used as it is confusing with Semaphore terminology. Use <see cref="GetCurrentCount"/> or <see cref="GetRemaningCount"/> instead depending what you want to do.", "True")]
public int GetCount(TKey key);
    public int GetRemainingCount(TKey key);
    public int GetCurrentCount(TKey key);
    public sealed virtual void Dispose();
}
public class AsyncKeyedLock.AsyncKeyedLockOptions : object {
    [CompilerGeneratedAttribute]
private int <MaxCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolInitialFill>k__BackingField;
    public int MaxCount { get; public set; }
    public int PoolSize { get; public set; }
    public int PoolInitialFill { get; public set; }
    public static AsyncKeyedLockOptions Default { get; }
    public AsyncKeyedLockOptions(int maxCount, int poolSize, int poolInitialFill);
    [CompilerGeneratedAttribute]
public int get_MaxCount();
    [CompilerGeneratedAttribute]
public void set_MaxCount(int value);
    [CompilerGeneratedAttribute]
public int get_PoolSize();
    [CompilerGeneratedAttribute]
public void set_PoolSize(int value);
    [CompilerGeneratedAttribute]
public int get_PoolInitialFill();
    [CompilerGeneratedAttribute]
public void set_PoolInitialFill(int value);
    public static AsyncKeyedLockOptions get_Default();
}
internal class AsyncKeyedLock.AsyncKeyedLockPool`1 : object {
    private List`1<AsyncKeyedLockReleaser`1<TKey>> _objects;
    private Func`2<TKey, AsyncKeyedLockReleaser`1<TKey>> _objectGenerator;
    private int _capacity;
    public AsyncKeyedLockPool`1(AsyncKeyedLockDictionary`1<TKey> asyncKeyedLockDictionary, int capacity, int initialFill);
    public sealed virtual void Dispose();
    public AsyncKeyedLockReleaser`1<TKey> GetObject(TKey key);
    public void PutObject(AsyncKeyedLockReleaser`1<TKey> item);
}
public class AsyncKeyedLock.AsyncKeyedLockReleaser`1 : object {
    [CompilerGeneratedAttribute]
private bool <IsNotInUse>k__BackingField;
    private TKey _key;
    private int _referenceCount;
    private SemaphoreSlim _semaphoreSlim;
    private AsyncKeyedLockDictionary`1<TKey> _dictionary;
    internal bool IsNotInUse { get; internal set; }
    public TKey Key { get; internal set; }
    public int ReferenceCount { get; internal set; }
    public SemaphoreSlim SemaphoreSlim { get; }
    internal AsyncKeyedLockReleaser`1(TKey key, SemaphoreSlim semaphoreSlim, AsyncKeyedLockDictionary`1<TKey> dictionary);
    [CompilerGeneratedAttribute]
internal bool get_IsNotInUse();
    [CompilerGeneratedAttribute]
internal void set_IsNotInUse(bool value);
    public TKey get_Key();
    internal void set_Key(TKey value);
    public int get_ReferenceCount();
    internal void set_ReferenceCount(int value);
    public SemaphoreSlim get_SemaphoreSlim();
    internal bool TryIncrement(TKey key);
    internal bool TryIncrementNoPooling();
    public sealed virtual void Dispose();
    internal void Dispose(bool enteredSemaphore);
}
public class AsyncKeyedLock.AsyncKeyedLockTimeoutReleaser`1 : object {
    [CompilerGeneratedAttribute]
private bool <EnteredSemaphore>k__BackingField;
    internal AsyncKeyedLockReleaser`1<TKey> _releaser;
    public bool EnteredSemaphore { get; internal set; }
    public AsyncKeyedLockTimeoutReleaser`1(bool enteredSemaphore, AsyncKeyedLockReleaser`1<TKey> releaser);
    [CompilerGeneratedAttribute]
public bool get_EnteredSemaphore();
    [CompilerGeneratedAttribute]
internal void set_EnteredSemaphore(bool value);
    public sealed virtual void Dispose();
}
[DebuggerDisplayAttribute("Current Count = {GetCurrentCount()}")]
public class AsyncKeyedLock.AsyncNonKeyedLocker : object {
    private int _maxCount;
    internal SemaphoreSlim _semaphoreSlim;
    public int MaxCount { get; }
    public AsyncNonKeyedLocker(int maxCount);
    public int get_MaxCount();
    public AsyncNonKeyedLockReleaser Lock();
    public AsyncNonKeyedLockReleaser Lock(CancellationToken cancellationToken);
    public IDisposable Lock(int millisecondsTimeout, Boolean& entered);
    public IDisposable Lock(TimeSpan timeout, Boolean& entered);
    public IDisposable Lock(int millisecondsTimeout, CancellationToken cancellationToken, Boolean& entered);
    public IDisposable Lock(TimeSpan timeout, CancellationToken cancellationToken, Boolean& entered);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<LockAsync>d__11")]
public ValueTask`1<AsyncNonKeyedLockReleaser> LockAsync(bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<LockAsync>d__12")]
public ValueTask`1<AsyncNonKeyedLockReleaser> LockAsync(CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<LockAsync>d__13")]
public ValueTask`1<AsyncNonKeyedLockTimeoutReleaser> LockAsync(int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<LockAsync>d__14")]
public ValueTask`1<AsyncNonKeyedLockTimeoutReleaser> LockAsync(TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<LockAsync>d__15")]
public ValueTask`1<AsyncNonKeyedLockTimeoutReleaser> LockAsync(int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<LockAsync>d__16")]
public ValueTask`1<AsyncNonKeyedLockTimeoutReleaser> LockAsync(TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public AsyncNonKeyedLockReleaser ConditionalLock(bool getLock);
    public AsyncNonKeyedLockReleaser ConditionalLock(bool getLock, CancellationToken cancellationToken);
    public IDisposable ConditionalLock(bool getLock, int millisecondsTimeout, Boolean& entered);
    public IDisposable ConditionalLock(bool getLock, TimeSpan timeout, Boolean& entered);
    public IDisposable ConditionalLock(bool getLock, int millisecondsTimeout, CancellationToken cancellationToken, Boolean& entered);
    public IDisposable ConditionalLock(bool getLock, TimeSpan timeout, CancellationToken cancellationToken, Boolean& entered);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<ConditionalLockAsync>d__23")]
public ValueTask`1<AsyncNonKeyedLockReleaser> ConditionalLockAsync(bool getLock, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<ConditionalLockAsync>d__24")]
public ValueTask`1<AsyncNonKeyedLockReleaser> ConditionalLockAsync(bool getLock, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<ConditionalLockAsync>d__25")]
public ValueTask`1<AsyncNonKeyedLockTimeoutReleaser> ConditionalLockAsync(bool getLock, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<ConditionalLockAsync>d__26")]
public ValueTask`1<AsyncNonKeyedLockTimeoutReleaser> ConditionalLockAsync(bool getLock, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<ConditionalLockAsync>d__27")]
public ValueTask`1<AsyncNonKeyedLockTimeoutReleaser> ConditionalLockAsync(bool getLock, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.AsyncNonKeyedLocker/<ConditionalLockAsync>d__28")]
public ValueTask`1<AsyncNonKeyedLockTimeoutReleaser> ConditionalLockAsync(bool getLock, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public int GetRemainingCount();
    public int GetCurrentCount();
    public sealed virtual void Dispose();
}
[IsReadOnlyAttribute]
public class AsyncKeyedLock.AsyncNonKeyedLockReleaser : ValueType {
    private AsyncNonKeyedLocker _locker;
    internal AsyncNonKeyedLockReleaser(AsyncNonKeyedLocker locker);
    public sealed virtual void Dispose();
}
[IsReadOnlyAttribute]
public class AsyncKeyedLock.AsyncNonKeyedLockTimeoutReleaser : ValueType {
    private bool _enteredSemaphore;
    private AsyncNonKeyedLocker _locker;
    public bool EnteredSemaphore { get; }
    internal AsyncNonKeyedLockTimeoutReleaser(AsyncNonKeyedLocker locker, bool enteredSemaphore);
    public bool get_EnteredSemaphore();
    public sealed virtual void Dispose();
}
public class AsyncKeyedLock.EmptyDisposable : object {
    public sealed virtual void Dispose();
}
public class AsyncKeyedLock.StripedAsyncKeyedLocker`1 : object {
    [CompilerGeneratedAttribute]
private int <MaxCount>k__BackingField;
    private StripedAsyncKeyedLockReleaser[] _releasers;
    private IEqualityComparer`1<TKey> _comparer;
    private int _numberOfStripes;
    private static EmptyDisposable _emptyDisposable;
    public int MaxCount { get; private set; }
    public StripedAsyncKeyedLocker`1(int numberOfStripes, int maxCount, IEqualityComparer`1<TKey> comparer);
    private static StripedAsyncKeyedLocker`1();
    [CompilerGeneratedAttribute]
public int get_MaxCount();
    [CompilerGeneratedAttribute]
private void set_MaxCount(int value);
    private StripedAsyncKeyedLockReleaser Get(TKey key);
    public IDisposable Lock(TKey key);
    public IDisposable Lock(TKey key, CancellationToken cancellationToken);
    public IDisposable Lock(TKey key, int millisecondsTimeout, Boolean& entered);
    public IDisposable Lock(TKey key, TimeSpan timeout, Boolean& entered);
    public IDisposable Lock(TKey key, int millisecondsTimeout, CancellationToken cancellationToken, Boolean& entered);
    public IDisposable Lock(TKey key, TimeSpan timeout, CancellationToken cancellationToken, Boolean& entered);
    public bool TryLock(TKey key, Action action, int millisecondsTimeout);
    public bool TryLock(TKey key, Action action, TimeSpan timeout);
    public bool TryLock(TKey key, Action action, int millisecondsTimeout, CancellationToken cancellationToken);
    public bool TryLock(TKey key, Action action, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<TryLockAsync>d__20")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<TryLockAsync>d__21")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<TryLockAsync>d__22")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<TryLockAsync>d__23")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<TryLockAsync>d__24")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<TryLockAsync>d__25")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<TryLockAsync>d__26")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<TryLockAsync>d__27")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<LockAsync>d__28")]
public ValueTask`1<StripedAsyncKeyedLockReleaser> LockAsync(TKey key, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<LockAsync>d__29")]
public ValueTask`1<StripedAsyncKeyedLockReleaser> LockAsync(TKey key, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<LockAsync>d__30")]
public ValueTask`1<StripedAsyncKeyedLockTimeoutReleaser> LockAsync(TKey key, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<LockAsync>d__31")]
public ValueTask`1<StripedAsyncKeyedLockTimeoutReleaser> LockAsync(TKey key, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<LockAsync>d__32")]
public ValueTask`1<StripedAsyncKeyedLockTimeoutReleaser> LockAsync(TKey key, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<LockAsync>d__33")]
public ValueTask`1<StripedAsyncKeyedLockTimeoutReleaser> LockAsync(TKey key, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public IDisposable ConditionalLock(TKey key, bool getLock);
    public IDisposable ConditionalLock(TKey key, bool getLock, CancellationToken cancellationToken);
    public IDisposable ConditionalLock(TKey key, bool getLock, int millisecondsTimeout, Boolean& entered);
    public IDisposable ConditionalLock(TKey key, bool getLock, TimeSpan timeout, Boolean& entered);
    public IDisposable ConditionalLock(TKey key, bool getLock, int millisecondsTimeout, CancellationToken cancellationToken, Boolean& entered);
    public IDisposable ConditionalLock(TKey key, bool getLock, TimeSpan timeout, CancellationToken cancellationToken, Boolean& entered);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<ConditionalLockAsync>d__40")]
public ValueTask`1<StripedAsyncKeyedLockReleaser> ConditionalLockAsync(TKey key, bool getLock, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<ConditionalLockAsync>d__41")]
public ValueTask`1<StripedAsyncKeyedLockReleaser> ConditionalLockAsync(TKey key, bool getLock, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<ConditionalLockAsync>d__42")]
public ValueTask`1<StripedAsyncKeyedLockTimeoutReleaser> ConditionalLockAsync(TKey key, bool getLock, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<ConditionalLockAsync>d__43")]
public ValueTask`1<StripedAsyncKeyedLockTimeoutReleaser> ConditionalLockAsync(TKey key, bool getLock, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<ConditionalLockAsync>d__44")]
public ValueTask`1<StripedAsyncKeyedLockTimeoutReleaser> ConditionalLockAsync(TKey key, bool getLock, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("AsyncKeyedLock.StripedAsyncKeyedLocker`1/<ConditionalLockAsync>d__45")]
public ValueTask`1<StripedAsyncKeyedLockTimeoutReleaser> ConditionalLockAsync(TKey key, bool getLock, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public bool IsInUse(TKey key);
}
public class AsyncKeyedLock.StripedAsyncKeyedLockReleaser : ValueType {
    [CompilerGeneratedAttribute]
private SemaphoreSlim <SemaphoreSlim>k__BackingField;
    public SemaphoreSlim SemaphoreSlim { get; internal set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SemaphoreSlim get_SemaphoreSlim();
    [CompilerGeneratedAttribute]
internal void set_SemaphoreSlim(SemaphoreSlim value);
    public sealed virtual void Dispose();
}
public class AsyncKeyedLock.StripedAsyncKeyedLockTimeoutReleaser : object {
    [CompilerGeneratedAttribute]
private bool <EnteredSemaphore>k__BackingField;
    internal StripedAsyncKeyedLockReleaser _releaser;
    public bool EnteredSemaphore { get; internal set; }
    internal StripedAsyncKeyedLockTimeoutReleaser(bool enteredSemaphore, StripedAsyncKeyedLockReleaser releaser);
    [CompilerGeneratedAttribute]
public bool get_EnteredSemaphore();
    [CompilerGeneratedAttribute]
internal void set_EnteredSemaphore(bool value);
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.Collections.HashHelpers : object {
    public static UInt32 HashCollisionThreshold;
    public static int MaxPrimeArrayLength;
    public static int HashPrime;
    internal static ReadOnlySpan`1<int> Primes { get; }
    internal static ReadOnlySpan`1<int> get_Primes();
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
