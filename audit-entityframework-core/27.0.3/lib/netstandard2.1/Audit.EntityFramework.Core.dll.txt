[ExtensionAttribute]
public static class Audit.Core.EntityFrameworkConfiguratorExtensions : object {
    [ExtensionAttribute]
internal static ICreationPolicyConfigurator UseEntityFramework(IConfigurator configurator, Func`3<Type, EventEntry, Type> auditTypeMapper, Action`3<AuditEvent, EventEntry, object> auditEntityAction, Func`2<Type, bool> ignoreMatchedPropertiesFunc, Func`2<EventEntry, Type> explicitMapper, Func`3<DbContext, EventEntry, object> auditEntityCreator);
    [ExtensionAttribute]
internal static ICreationPolicyConfigurator UseEntityFramework(IConfigurator configurator, Func`3<Type, EventEntry, Type> auditTypeMapper, Func`4<AuditEvent, EventEntry, object, Task`1<bool>> auditEntityAction, Func`2<Type, bool> ignoreMatchedPropertiesFunc, Func`2<AuditEventEntityFramework, DbContext> dbContextBuilder, Func`2<EventEntry, Type> explicitMapper, Func`3<DbContext, EventEntry, object> auditEntityCreator, bool disposeDbContext);
    [ExtensionAttribute]
public static ICreationPolicyConfigurator UseEntityFramework(IConfigurator configurator, Action`1<IEntityFrameworkProviderConfigurator> config);
}
public abstract class Audit.EntityFramework.AuditDbContext : DbContext {
    private DbContextHelper _helper;
    [CompilerGeneratedAttribute]
private string <AuditEventType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AuditDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEntityObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeValidationResults>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditOptionMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditDataProvider <AuditDataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuditScopeFactory <AuditScopeFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ExtraFields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeTransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EarlySavingAudit>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, EfEntitySettings> <EntitySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReloadDatabaseValues>k__BackingField;
    public string AuditEventType { get; public set; }
    public bool AuditDisabled { get; public set; }
    public bool IncludeEntityObjects { get; public set; }
    public bool ExcludeValidationResults { get; public set; }
    public AuditOptionMode Mode { get; public set; }
    public AuditDataProvider AuditDataProvider { get; public set; }
    public IAuditScopeFactory AuditScopeFactory { get; public set; }
    public Dictionary`2<string, object> ExtraFields { get; }
    public bool ExcludeTransactionId { get; public set; }
    public bool EarlySavingAudit { get; public set; }
    public DbContext DbContext { get; }
    public Dictionary`2<Type, EfEntitySettings> EntitySettings { get; public set; }
    public bool ReloadDatabaseValues { get; public set; }
    protected AuditDbContext(DbContextOptions options);
    [CompilerGeneratedAttribute]
public virtual string get_AuditEventType();
    [CompilerGeneratedAttribute]
public virtual void set_AuditEventType(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_AuditDisabled();
    [CompilerGeneratedAttribute]
public virtual void set_AuditDisabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IncludeEntityObjects();
    [CompilerGeneratedAttribute]
public virtual void set_IncludeEntityObjects(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ExcludeValidationResults();
    [CompilerGeneratedAttribute]
public virtual void set_ExcludeValidationResults(bool value);
    [CompilerGeneratedAttribute]
public virtual AuditOptionMode get_Mode();
    [CompilerGeneratedAttribute]
public virtual void set_Mode(AuditOptionMode value);
    [CompilerGeneratedAttribute]
public virtual AuditDataProvider get_AuditDataProvider();
    [CompilerGeneratedAttribute]
public virtual void set_AuditDataProvider(AuditDataProvider value);
    [CompilerGeneratedAttribute]
public virtual IAuditScopeFactory get_AuditScopeFactory();
    [CompilerGeneratedAttribute]
public virtual void set_AuditScopeFactory(IAuditScopeFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_ExtraFields();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExcludeTransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeTransactionId(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EarlySavingAudit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EarlySavingAudit(bool value);
    public sealed virtual DbContext get_DbContext();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Type, EfEntitySettings> get_EntitySettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EntitySettings(Dictionary`2<Type, EfEntitySettings> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReloadDatabaseValues();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReloadDatabaseValues(bool value);
    public virtual void OnScopeCreated(IAuditScope auditScope);
    public virtual void OnScopeSaving(IAuditScope auditScope);
    public virtual void OnScopeSaved(IAuditScope auditScope);
    public void AddAuditCustomField(string fieldName, object value);
    public virtual int SaveChanges(bool acceptAllChangesOnSuccess);
    [AsyncStateMachineAttribute("Audit.EntityFramework.AuditDbContext/<SaveChangesAsync>d__57")]
public virtual Task`1<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    public EntityFrameworkEvent SaveChangesGetAudit(bool acceptAllChangesOnSuccess);
    [AsyncStateMachineAttribute("Audit.EntityFramework.AuditDbContext/<SaveChangesGetAuditAsync>d__59")]
public Task`1<EntityFrameworkEvent> SaveChangesGetAuditAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    private sealed virtual override int Audit.EntityFramework.IAuditBypass.SaveChangesBypassAudit();
    private sealed virtual override Task`1<int> Audit.EntityFramework.IAuditBypass.SaveChangesBypassAuditAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private int <>n__0(bool acceptAllChangesOnSuccess);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__1(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("4")]
public class Audit.EntityFramework.AuditDbContextAttribute : Attribute {
    internal EfSettings InternalConfig;
    public bool ExcludeTransactionId { get; public set; }
    public bool IncludeEntityObjects { get; public set; }
    public bool ExcludeValidationResults { get; public set; }
    public AuditOptionMode Mode { get; public set; }
    public string AuditEventType { get; public set; }
    public bool ReloadDatabaseValues { get; public set; }
    public bool get_ExcludeTransactionId();
    public void set_ExcludeTransactionId(bool value);
    public bool get_IncludeEntityObjects();
    public void set_IncludeEntityObjects(bool value);
    public bool get_ExcludeValidationResults();
    public void set_ExcludeValidationResults(bool value);
    public AuditOptionMode get_Mode();
    public void set_Mode(AuditOptionMode value);
    public string get_AuditEventType();
    public void set_AuditEventType(string value);
    public bool get_ReloadDatabaseValues();
    public void set_ReloadDatabaseValues(bool value);
}
public class Audit.EntityFramework.AuditEventCommandEntityFramework : AuditEvent {
    [CompilerGeneratedAttribute]
private CommandEvent <CommandEvent>k__BackingField;
    public CommandEvent CommandEvent { get; public set; }
    [CompilerGeneratedAttribute]
public CommandEvent get_CommandEvent();
    [CompilerGeneratedAttribute]
public void set_CommandEvent(CommandEvent value);
}
public class Audit.EntityFramework.AuditEventEntityFramework : AuditEvent {
    [CompilerGeneratedAttribute]
private EntityFrameworkEvent <EntityFrameworkEvent>k__BackingField;
    public EntityFrameworkEvent EntityFrameworkEvent { get; public set; }
    [CompilerGeneratedAttribute]
public EntityFrameworkEvent get_EntityFrameworkEvent();
    [CompilerGeneratedAttribute]
public void set_EntityFrameworkEvent(EntityFrameworkEvent value);
}
[ExtensionAttribute]
public static class Audit.EntityFramework.AuditEventExtensions : object {
    [ExtensionAttribute]
public static EntityFrameworkEvent GetEntityFrameworkEvent(IAuditScope auditScope);
    [ExtensionAttribute]
public static EntityFrameworkEvent GetEntityFrameworkEvent(AuditEvent auditEvent);
    [ExtensionAttribute]
public static CommandEvent GetCommandEntityFrameworkEvent(IAuditScope auditScope);
    [ExtensionAttribute]
public static CommandEvent GetCommandEntityFrameworkEvent(AuditEvent auditEvent);
    [ExtensionAttribute]
public static TransactionEvent GetTransactionEntityFrameworkEvent(IAuditScope auditScope);
    [ExtensionAttribute]
public static TransactionEvent GetTransactionEntityFrameworkEvent(AuditEvent auditEvent);
}
public class Audit.EntityFramework.AuditEventTransactionEntityFramework : AuditEvent {
    [CompilerGeneratedAttribute]
private TransactionEvent <TransactionEvent>k__BackingField;
    public TransactionEvent TransactionEvent { get; public set; }
    [CompilerGeneratedAttribute]
public TransactionEvent get_TransactionEvent();
    [CompilerGeneratedAttribute]
public void set_TransactionEvent(TransactionEvent value);
}
[AttributeUsageAttribute("132")]
public class Audit.EntityFramework.AuditIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Audit.EntityFramework.AuditIncludeAttribute : Attribute {
}
public enum Audit.EntityFramework.AuditOptionMode : Enum {
    public int value__;
    public static AuditOptionMode OptOut;
    public static AuditOptionMode OptIn;
}
[AttributeUsageAttribute("128")]
public class Audit.EntityFramework.AuditOverrideAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; public set; }
    public AuditOverrideAttribute(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class Audit.EntityFramework.AuditSaveChangesInterceptor : SaveChangesInterceptor {
    private DbContextHelper _helper;
    private IAuditDbContext _auditContext;
    private IAuditScope _auditScope;
    public virtual InterceptionResult`1<int> SavingChanges(DbContextEventData eventData, InterceptionResult`1<int> result);
    [AsyncStateMachineAttribute("Audit.EntityFramework.AuditSaveChangesInterceptor/<SavingChangesAsync>d__4")]
public virtual ValueTask`1<InterceptionResult`1<int>> SavingChangesAsync(DbContextEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    public virtual int SavedChanges(SaveChangesCompletedEventData eventData, int result);
    [AsyncStateMachineAttribute("Audit.EntityFramework.AuditSaveChangesInterceptor/<SavedChangesAsync>d__6")]
public virtual ValueTask`1<int> SavedChangesAsync(SaveChangesCompletedEventData eventData, int result, CancellationToken cancellationToken);
    public virtual void SaveChangesFailed(DbContextErrorEventData eventData);
    [AsyncStateMachineAttribute("Audit.EntityFramework.AuditSaveChangesInterceptor/<SaveChangesFailedAsync>d__8")]
public virtual Task SaveChangesFailedAsync(DbContextErrorEventData eventData, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<InterceptionResult`1<int>> <>n__0(DbContextEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<int> <>n__1(SaveChangesCompletedEventData eventData, int result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(DbContextErrorEventData eventData, CancellationToken cancellationToken);
}
public class Audit.EntityFramework.CommandEvent : InterceptorEventBase {
    [CompilerGeneratedAttribute]
private DbCommandMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <DbContext>k__BackingField;
    public DbCommandMethod Method { get; public set; }
    public CommandType CommandType { get; public set; }
    public string CommandText { get; public set; }
    public Dictionary`2<string, object> Parameters { get; public set; }
    public object Result { get; public set; }
    [JsonIgnoreAttribute]
internal DbContext DbContext { get; internal set; }
    [CompilerGeneratedAttribute]
public DbCommandMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(DbCommandMethod value);
    [CompilerGeneratedAttribute]
public CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public void set_CommandType(CommandType value);
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
    [CompilerGeneratedAttribute]
internal DbContext get_DbContext();
    [CompilerGeneratedAttribute]
internal void set_DbContext(DbContext value);
    public DbContext GetDbContext();
}
public static class Audit.EntityFramework.Configuration : object {
    private static ConcurrentDictionary`2<Type, EfSettings> _currentConfig;
    private static Configuration();
    public static IContextConfigurator Setup();
    internal static void SetContextEntitySetting(Action`1<IContextEntitySetting`1<TEntity>> config);
    internal static void SetAuditEventType(string eventType);
    internal static void SetIncludeEntityObjects(bool include);
    internal static void SetExcludeValidationResults(bool exclude);
    internal static void SetExcludeTransactionId(bool exclude);
    internal static void SetEarlySavingAudit(bool earlySaving);
    internal static void SetReloadDatabaseValues(bool reloadDatabaseValues);
    internal static void SetMode(AuditOptionMode mode);
    internal static void IncludeEntity(Type entityType);
    internal static void IgnoreEntity(Type entityType);
    internal static void IgnoredEntitiesFilter(Func`2<Type, bool> predicate);
    internal static void IncludedEntitiesFilter(Func`2<Type, bool> predicate);
    internal static void Reset();
    internal static EfSettings EnsureConfigFor();
    internal static EfEntitySettings EnsureConfigForEntity();
    internal static EfSettings GetConfigForType(Type contextType);
}
public class Audit.EntityFramework.ConfigurationApi.AuditEntityMapping : object {
    private Dictionary`2<Type, MappingInfo> _mapping;
    private List`1<KeyValuePair`2<Func`2<EventEntry, bool>, MappingInfo>> _explicitMapping;
    private Func`4<AuditEvent, EventEntry, object, Task`1<bool>> _commonAction;
    public sealed virtual IAuditEntityMapping Map();
    public sealed virtual IAuditEntityMapping Map(Action`3<AuditEvent, EventEntry, TAuditEntity> entityAction);
    public sealed virtual IAuditEntityMapping Map(Func`4<AuditEvent, EventEntry, TAuditEntity, Task> entityAsyncAction);
    public sealed virtual IAuditEntityMapping Map(Func`4<AuditEvent, EventEntry, TAuditEntity, bool> entityAction);
    public sealed virtual IAuditEntityMapping Map(Func`4<AuditEvent, EventEntry, TAuditEntity, Task`1<bool>> entityAsyncAction);
    public sealed virtual IAuditEntityMapping Map(Action`2<TSourceEntity, TAuditEntity> entityAction);
    public sealed virtual IAuditEntityMapping Map(Func`3<TSourceEntity, TAuditEntity, Task> entityAsyncAction);
    public sealed virtual IAuditEntityMapping Map(Func`3<TSourceEntity, TAuditEntity, bool> entityAction);
    public sealed virtual IAuditEntityMapping Map(Func`3<TSourceEntity, TAuditEntity, Task`1<bool>> entityAsyncAction);
    public sealed virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper, Func`4<AuditEvent, EventEntry, object, bool> entityAction);
    public sealed virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper, Func`4<AuditEvent, EventEntry, object, Task`1<bool>> entityAsyncAction);
    public sealed virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper, Action`3<AuditEvent, EventEntry, object> entityAction);
    public sealed virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper, Func`4<AuditEvent, EventEntry, object, Task> entityAsyncAction);
    public sealed virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper);
    public sealed virtual IAuditEntityMapping MapExplicit(Func`2<EventEntry, bool> predicate, Action`2<EventEntry, TAuditEntity> entityAction);
    public sealed virtual IAuditEntityMapping MapExplicit(Func`2<EventEntry, bool> predicate, Func`3<EventEntry, TAuditEntity, Task> entityAsyncAction);
    public sealed virtual IAuditEntityMapping MapTable(string tableName, Action`2<EventEntry, TAuditEntity> entityAction);
    public sealed virtual IAuditEntityMapping MapTable(string tableName, Func`3<EventEntry, TAuditEntity, Task> entityAsyncAction);
    public sealed virtual void AuditEntityAction(Action`3<AuditEvent, EventEntry, object> entityAction);
    public sealed virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, object, bool> entityAction);
    public sealed virtual void AuditEntityAction(Action`3<AuditEvent, EventEntry, T> entityAction);
    public sealed virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, T, bool> entityAction);
    public sealed virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, object, Task`1<bool>> entityAsyncAction);
    public sealed virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, T, Task`1<bool>> entityAsyncAction);
    public sealed virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, object, Task> entityAsyncAction);
    public sealed virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, T, Task> entityAsyncAction);
    internal Func`3<Type, EventEntry, Type> GetMapper();
    internal Func`2<EventEntry, Type> GetExplicitMapper();
    internal Func`4<AuditEvent, EventEntry, object, Task`1<bool>> GetAction();
    [CompilerGeneratedAttribute]
private Type <GetMapper>b__29_0(Type t, EventEntry e);
    [CompilerGeneratedAttribute]
private Type <GetExplicitMapper>b__30_0(EventEntry e);
    [AsyncStateMachineAttribute("Audit.EntityFramework.ConfigurationApi.AuditEntityMapping/<<GetAction>b__31_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <GetAction>b__31_0(AuditEvent ev, EventEntry ent, object auditEntity);
}
public class Audit.EntityFramework.ConfigurationApi.ContextConfigurator : object {
    public sealed virtual IModeConfigurator`1<AuditDbContext> ForAnyContext(Action`1<IContextSettingsConfigurator`1<AuditDbContext>> config);
    public sealed virtual IModeConfigurator`1<T> ForContext(Action`1<IContextSettingsConfigurator`1<T>> config);
}
public class Audit.EntityFramework.ConfigurationApi.ContextEntitySetting`1 : object {
    internal HashSet`1<string> IgnoredProperties;
    internal Dictionary`2<string, Func`2<EntityEntry, object>> OverrideProperties;
    internal Dictionary`2<string, Func`2<object, object>> FormatProperties;
    public sealed virtual IContextEntitySetting`1<TEntity> Format(Expression`1<Func`2<TEntity, TProp>> property, Func`2<TProp, object> format);
    public sealed virtual IContextEntitySetting`1<TEntity> Format(string propertyName, Func`2<TProp, object> format);
    public sealed virtual IContextEntitySetting`1<TEntity> Override(Expression`1<Func`2<TEntity, TProp>> property, Func`2<EntityEntry, object> valueSelector);
    public sealed virtual IContextEntitySetting`1<TEntity> Override(string propertyName, Func`2<EntityEntry, object> valueSelector);
    public sealed virtual IContextEntitySetting`1<TEntity> Override(Expression`1<Func`2<TEntity, TProp>> property, object value);
    public sealed virtual IContextEntitySetting`1<TEntity> Override(string propertyName, object value);
    public sealed virtual IContextEntitySetting`1<TEntity> Ignore(Expression`1<Func`2<TEntity, TProp>> property);
    public sealed virtual IContextEntitySetting`1<TEntity> Ignore(string propertyName);
    private string GetMemberName(Expression`1<Func`2<T, TS>> expression);
}
public class Audit.EntityFramework.ConfigurationApi.ContextSettingsConfigurator`1 : object {
    public sealed virtual IContextSettingsConfigurator`1<T> AuditEventType(string eventType);
    public sealed virtual IContextSettingsConfigurator`1<T> ForEntity(Action`1<IContextEntitySetting`1<TEntity>> config);
    public sealed virtual IContextSettingsConfigurator`1<T> IncludeEntityObjects(bool include);
    public sealed virtual IContextSettingsConfigurator`1<T> ExcludeValidationResults(bool exclude);
    public sealed virtual IContextSettingsConfigurator`1<T> ExcludeTransactionId(bool exclude);
    public sealed virtual IContextSettingsConfigurator`1<T> EarlySavingAudit(bool earlySaving);
    public sealed virtual IContextSettingsConfigurator`1<T> ReloadDatabaseValues(bool reloadDatabaseValues);
}
public class Audit.EntityFramework.ConfigurationApi.EfEntitySettings : object {
    public HashSet`1<string> IgnoredProperties;
    public Dictionary`2<string, Func`2<EntityEntry, object>> OverrideProperties;
    public Dictionary`2<string, Func`2<object, object>> FormatProperties;
}
internal class Audit.EntityFramework.ConfigurationApi.EfSettings : object {
    [CompilerGeneratedAttribute]
private string <AuditEventType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeEntityObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExcludeValidationResults>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AuditOptionMode> <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <IncludedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <IgnoredTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <IgnoredTypesFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <IncludedTypesFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, EfEntitySettings> <EntitySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExcludeTransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EarlySavingAudit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReloadDatabaseValues>k__BackingField;
    public string AuditEventType { get; public set; }
    public Nullable`1<bool> IncludeEntityObjects { get; public set; }
    public Nullable`1<bool> ExcludeValidationResults { get; public set; }
    public Nullable`1<AuditOptionMode> Mode { get; public set; }
    public HashSet`1<Type> IncludedTypes { get; public set; }
    public HashSet`1<Type> IgnoredTypes { get; public set; }
    public Func`2<Type, bool> IgnoredTypesFilter { get; public set; }
    public Func`2<Type, bool> IncludedTypesFilter { get; public set; }
    public Dictionary`2<Type, EfEntitySettings> EntitySettings { get; public set; }
    public Nullable`1<bool> ExcludeTransactionId { get; public set; }
    public Nullable`1<bool> EarlySavingAudit { get; public set; }
    public Nullable`1<bool> ReloadDatabaseValues { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AuditEventType();
    [CompilerGeneratedAttribute]
public void set_AuditEventType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeEntityObjects();
    [CompilerGeneratedAttribute]
public void set_IncludeEntityObjects(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExcludeValidationResults();
    [CompilerGeneratedAttribute]
public void set_ExcludeValidationResults(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<AuditOptionMode> get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(Nullable`1<AuditOptionMode> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_IncludedTypes();
    [CompilerGeneratedAttribute]
public void set_IncludedTypes(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_IgnoredTypes();
    [CompilerGeneratedAttribute]
public void set_IgnoredTypes(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_IgnoredTypesFilter();
    [CompilerGeneratedAttribute]
public void set_IgnoredTypesFilter(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_IncludedTypesFilter();
    [CompilerGeneratedAttribute]
public void set_IncludedTypesFilter(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, EfEntitySettings> get_EntitySettings();
    [CompilerGeneratedAttribute]
public void set_EntitySettings(Dictionary`2<Type, EfEntitySettings> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExcludeTransactionId();
    [CompilerGeneratedAttribute]
public void set_ExcludeTransactionId(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EarlySavingAudit();
    [CompilerGeneratedAttribute]
public void set_EarlySavingAudit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReloadDatabaseValues();
    [CompilerGeneratedAttribute]
public void set_ReloadDatabaseValues(Nullable`1<bool> value);
}
public class Audit.EntityFramework.ConfigurationApi.EntityFrameworkProviderConfigurator : object {
    internal Func`2<Type, bool> _ignoreMatchedPropertiesFunc;
    internal Func`3<Type, EventEntry, Type> _auditTypeMapper;
    internal Func`4<AuditEvent, EventEntry, object, Task`1<bool>> _auditEntityAction;
    internal Func`2<AuditEventEntityFramework, DbContext> _dbContextBuilder;
    internal Func`2<EventEntry, Type> _explicitMapper;
    internal Func`3<DbContext, EventEntry, object> _auditEntityCreator;
    internal bool _disposeDbContext;
    public sealed virtual IEntityFrameworkProviderConfigurator UseDbContext(Func`2<AuditEventEntityFramework, DbContext> dbContextBuilder);
    public sealed virtual IEntityFrameworkProviderConfigurator UseDbContext(Object[] constructorArgs);
    public sealed virtual IEntityFrameworkProviderConfigurator DisposeDbContext(bool dispose);
    public sealed virtual IEntityFrameworkProviderConfiguratorAction AuditTypeMapper(Func`2<Type, Type> mapper);
    public sealed virtual IEntityFrameworkProviderConfiguratorAction AuditTypeNameMapper(Func`2<string, string> mapper);
    public sealed virtual IEntityFrameworkProviderConfiguratorExtra AuditTypeExplicitMapper(Action`1<IAuditEntityMapping> config);
    public sealed virtual IEntityFrameworkProviderConfiguratorAction AuditEntityCreator(Func`3<DbContext, EventEntry, object> auditEntityCreator);
    public sealed virtual IEntityFrameworkProviderConfiguratorAction AuditEntityCreator(Func`2<DbContext, object> auditEntityCreator);
    public sealed virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Action`3<AuditEvent, EventEntry, object> action);
    public sealed virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, object, Task> asyncAction);
    public sealed virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, object, bool> function);
    public sealed virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, object, Task`1<bool>> asyncFunction);
    public sealed virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Action`3<AuditEvent, EventEntry, T> action);
    public sealed virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, T, Task> asyncAction);
    public sealed virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, T, bool> function);
    public sealed virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, T, Task`1<bool>> asyncFunction);
    public sealed virtual void IgnoreMatchedProperties(bool ignore);
    public sealed virtual void IgnoreMatchedProperties(Func`2<Type, bool> ignoreFunc);
}
public class Audit.EntityFramework.ConfigurationApi.ExcludeConfigurator`1 : object {
    public sealed virtual IExcludeConfigurator`1<T> Ignore(Type entityType);
    public sealed virtual IExcludeConfigurator`1<T> Ignore();
    public sealed virtual IExcludeConfigurator`1<T> IgnoreAny(Func`2<Type, bool> predicate);
}
public interface Audit.EntityFramework.ConfigurationApi.IAuditEntityMapping {
    public abstract virtual IAuditEntityMapping Map(Action`3<AuditEvent, EventEntry, TAuditEntity> entityAction);
    public abstract virtual IAuditEntityMapping Map(Func`4<AuditEvent, EventEntry, TAuditEntity, Task> entityAsyncAction);
    public abstract virtual IAuditEntityMapping Map(Func`4<AuditEvent, EventEntry, TAuditEntity, bool> entityAction);
    public abstract virtual IAuditEntityMapping Map(Func`4<AuditEvent, EventEntry, TAuditEntity, Task`1<bool>> entityAsyncAction);
    public abstract virtual IAuditEntityMapping Map(Action`2<TSourceEntity, TAuditEntity> entityAction);
    public abstract virtual IAuditEntityMapping Map(Func`3<TSourceEntity, TAuditEntity, Task> entityAsyncAction);
    public abstract virtual IAuditEntityMapping Map(Func`3<TSourceEntity, TAuditEntity, bool> entityAction);
    public abstract virtual IAuditEntityMapping Map(Func`3<TSourceEntity, TAuditEntity, Task`1<bool>> entityAsyncAction);
    public abstract virtual IAuditEntityMapping Map();
    public abstract virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper, Func`4<AuditEvent, EventEntry, object, bool> entityAction);
    public abstract virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper, Func`4<AuditEvent, EventEntry, object, Task`1<bool>> entityAsyncAction);
    public abstract virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper, Action`3<AuditEvent, EventEntry, object> entityAction);
    public abstract virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper, Func`4<AuditEvent, EventEntry, object, Task> entityAsyncAction);
    public abstract virtual IAuditEntityMapping Map(Func`2<EventEntry, Type> mapper);
    public abstract virtual IAuditEntityMapping MapExplicit(Func`2<EventEntry, bool> predicate, Action`2<EventEntry, TAuditEntity> entityAction);
    public abstract virtual IAuditEntityMapping MapExplicit(Func`2<EventEntry, bool> predicate, Func`3<EventEntry, TAuditEntity, Task> entityAsyncAction);
    public abstract virtual IAuditEntityMapping MapTable(string tableName, Action`2<EventEntry, TAuditEntity> entityAction);
    public abstract virtual IAuditEntityMapping MapTable(string tableName, Func`3<EventEntry, TAuditEntity, Task> entityAsyncAction);
    public abstract virtual void AuditEntityAction(Action`3<AuditEvent, EventEntry, object> entityAction);
    public abstract virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, object, bool> entityAction);
    public abstract virtual void AuditEntityAction(Action`3<AuditEvent, EventEntry, T> entityAction);
    public abstract virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, T, bool> entityAction);
    public abstract virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, object, Task> entityAsyncAction);
    public abstract virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, object, Task`1<bool>> entityAsyncAction);
    public abstract virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, T, Task> entityAsyncAction);
    public abstract virtual void AuditEntityAction(Func`4<AuditEvent, EventEntry, T, Task`1<bool>> entityAsyncAction);
}
public interface Audit.EntityFramework.ConfigurationApi.IContextConfigurator {
    public abstract virtual IModeConfigurator`1<T> ForContext(Action`1<IContextSettingsConfigurator`1<T>> config);
    public abstract virtual IModeConfigurator`1<AuditDbContext> ForAnyContext(Action`1<IContextSettingsConfigurator`1<AuditDbContext>> config);
}
public interface Audit.EntityFramework.ConfigurationApi.IContextEntitySetting`1 {
    public abstract virtual IContextEntitySetting`1<TEntity> Ignore(Expression`1<Func`2<TEntity, TProp>> property);
    public abstract virtual IContextEntitySetting`1<TEntity> Ignore(string propertyName);
    public abstract virtual IContextEntitySetting`1<TEntity> Format(Expression`1<Func`2<TEntity, TProp>> property, Func`2<TProp, object> format);
    public abstract virtual IContextEntitySetting`1<TEntity> Format(string propertyName, Func`2<TProp, object> format);
    public abstract virtual IContextEntitySetting`1<TEntity> Override(Expression`1<Func`2<TEntity, TProp>> property, object value);
    public abstract virtual IContextEntitySetting`1<TEntity> Override(string propertyName, object value);
    public abstract virtual IContextEntitySetting`1<TEntity> Override(Expression`1<Func`2<TEntity, TProp>> property, Func`2<EntityEntry, object> valueSelector);
    public abstract virtual IContextEntitySetting`1<TEntity> Override(string propertyName, Func`2<EntityEntry, object> valueSelector);
}
public interface Audit.EntityFramework.ConfigurationApi.IContextSettingsConfigurator`1 {
    public abstract virtual IContextSettingsConfigurator`1<T> AuditEventType(string eventType);
    public abstract virtual IContextSettingsConfigurator`1<T> IncludeEntityObjects(bool include);
    public abstract virtual IContextSettingsConfigurator`1<T> ExcludeValidationResults(bool exclude);
    public abstract virtual IContextSettingsConfigurator`1<T> ForEntity(Action`1<IContextEntitySetting`1<TEntity>> config);
    public abstract virtual IContextSettingsConfigurator`1<T> ExcludeTransactionId(bool exclude);
    public abstract virtual IContextSettingsConfigurator`1<T> EarlySavingAudit(bool earlySaving);
    public abstract virtual IContextSettingsConfigurator`1<T> ReloadDatabaseValues(bool reloadDatabaseValues);
}
public interface Audit.EntityFramework.ConfigurationApi.IEntityFrameworkProviderConfigurator {
    public abstract virtual IEntityFrameworkProviderConfigurator UseDbContext(Func`2<AuditEventEntityFramework, DbContext> dbContextBuilder);
    public abstract virtual IEntityFrameworkProviderConfigurator UseDbContext(Object[] constructorArgs);
    public abstract virtual IEntityFrameworkProviderConfigurator DisposeDbContext(bool dispose);
    public abstract virtual IEntityFrameworkProviderConfiguratorAction AuditTypeMapper(Func`2<Type, Type> mapper);
    public abstract virtual IEntityFrameworkProviderConfiguratorAction AuditTypeNameMapper(Func`2<string, string> mapper);
    public abstract virtual IEntityFrameworkProviderConfiguratorExtra AuditTypeExplicitMapper(Action`1<IAuditEntityMapping> config);
    public abstract virtual IEntityFrameworkProviderConfiguratorAction AuditEntityCreator(Func`3<DbContext, EventEntry, object> auditEntityCreator);
    public abstract virtual IEntityFrameworkProviderConfiguratorAction AuditEntityCreator(Func`2<DbContext, object> auditEntityCreator);
}
public interface Audit.EntityFramework.ConfigurationApi.IEntityFrameworkProviderConfiguratorAction {
    public abstract virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Action`3<AuditEvent, EventEntry, object> action);
    public abstract virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, object, Task> asyncAction);
    public abstract virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Action`3<AuditEvent, EventEntry, T> action);
    public abstract virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, T, Task> asyncAction);
    public abstract virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, object, bool> function);
    public abstract virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, object, Task`1<bool>> asyncFunction);
    public abstract virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, T, bool> function);
    public abstract virtual IEntityFrameworkProviderConfiguratorExtra AuditEntityAction(Func`4<AuditEvent, EventEntry, T, Task`1<bool>> asyncFunction);
}
public interface Audit.EntityFramework.ConfigurationApi.IEntityFrameworkProviderConfiguratorExtra {
    public abstract virtual void IgnoreMatchedProperties(bool ignore);
    public abstract virtual void IgnoreMatchedProperties(Func`2<Type, bool> ignoreFunc);
}
public interface Audit.EntityFramework.ConfigurationApi.IExcludeConfigurator`1 {
    public abstract virtual IExcludeConfigurator`1<T> Ignore();
    public abstract virtual IExcludeConfigurator`1<T> Ignore(Type entityType);
    public abstract virtual IExcludeConfigurator`1<T> IgnoreAny(Func`2<Type, bool> predicate);
}
public interface Audit.EntityFramework.ConfigurationApi.IIncludeConfigurator`1 {
    public abstract virtual IncludeConfigurator`1<T> Include();
    public abstract virtual IncludeConfigurator`1<T> Include(Type entityType);
    public abstract virtual IncludeConfigurator`1<T> IncludeAny(Func`2<Type, bool> predicate);
}
public interface Audit.EntityFramework.ConfigurationApi.IModeConfigurator`1 {
    public abstract virtual IExcludeConfigurator`1<T> UseOptOut();
    public abstract virtual IIncludeConfigurator`1<T> UseOptIn();
    public abstract virtual IModeConfigurator`1<T> Reset();
}
public class Audit.EntityFramework.ConfigurationApi.IncludeConfigurator`1 : object {
    public sealed virtual IncludeConfigurator`1<T> Include(Type entityType);
    public sealed virtual IncludeConfigurator`1<T> Include();
    public sealed virtual IncludeConfigurator`1<T> IncludeAny(Func`2<Type, bool> predicate);
}
internal class Audit.EntityFramework.ConfigurationApi.MappingInfo : object {
    [CompilerGeneratedAttribute]
private Func`2<EventEntry, Type> <TargetTypeMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<AuditEvent, EventEntry, object, Task`1<bool>> <Action>k__BackingField;
    unknown Type TargetType {public set; }
    public Func`2<EventEntry, Type> TargetTypeMapper { get; public set; }
    public Func`4<AuditEvent, EventEntry, object, Task`1<bool>> Action { get; public set; }
    public void set_TargetType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<EventEntry, Type> get_TargetTypeMapper();
    [CompilerGeneratedAttribute]
public void set_TargetTypeMapper(Func`2<EventEntry, Type> value);
    [CompilerGeneratedAttribute]
public Func`4<AuditEvent, EventEntry, object, Task`1<bool>> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Func`4<AuditEvent, EventEntry, object, Task`1<bool>> value);
}
public class Audit.EntityFramework.ConfigurationApi.ModeConfigurator`1 : object {
    public sealed virtual IIncludeConfigurator`1<T> UseOptIn();
    public sealed virtual IExcludeConfigurator`1<T> UseOptOut();
    public sealed virtual IModeConfigurator`1<T> Reset();
}
public class Audit.EntityFramework.DbContextHelper : object {
    private static ConcurrentDictionary`2<Type, Nullable`1<bool>> EntitiesIncludeIgnoreAttrCache;
    private static ConcurrentDictionary`2<Type, HashSet`1<string>> PropertiesIgnoreAttrCache;
    private static ConcurrentDictionary`2<Type, Dictionary`2<string, AuditOverrideAttribute>> PropertiesOverrideAttrCache;
    private static ConcurrentDictionary`2<Type, AuditDbContextAttribute> _auditAttributeCache;
    private static DbContextHelper();
    private List`1<EventEntryChange> GetChanges(IAuditDbContext context, EntityEntry entry);
    private Dictionary`2<string, object> GetColumnValues(IAuditDbContext context, EntityEntry entry);
    internal static string GetColumnName(IProperty prop);
    private bool IncludeProperty(IAuditDbContext context, EntityEntry entry, string propName);
    private bool IncludeProperty(IAuditDbContext context, Type entityType, string propName);
    private bool HasPropertyValue(IAuditDbContext context, EntityEntry entry, string propName, object currentValue, Object& value);
    private bool HasPropertyValue(IAuditDbContext context, EntityEntry entry, Type entityType, string propName, object currentValue, Object& value);
    private static EntityName GetEntityName(DbContext dbContext, EntityEntry entry);
    private static IEntityType GetDefiningType(DbContext dbContext, EntityEntry entry);
    private static Dictionary`2<string, object> GetForeignKeys(DbContext dbContext, EntityEntry entry);
    private static Dictionary`2<string, object> GetPrimaryKey(DbContext dbContext, EntityEntry entry);
    public EntityFrameworkEvent CreateAuditEvent(IAuditDbContext context);
    public void UpdateAuditEvent(EntityFrameworkEvent efEvent, IAuditDbContext context);
    private string GetAmbientTransactionId();
    private string GetCurrentTransactionId(DbContext dbContext, string clientConnectionId);
    private bool IsRelational(DbContext dbContext);
    public void SetConfig(IAuditDbContext context);
    internal Dictionary`2<Type, EfEntitySettings> MergeEntitySettings(Dictionary`2<Type, EfEntitySettings> attr, Dictionary`2<Type, EfEntitySettings> local, Dictionary`2<Type, EfEntitySettings> global);
    public static List`1<ValidationResult> GetValidationResults(object entity);
    public static string GetStateName(EntityState state);
    public void SaveScope(IAuditDbContext context, IAuditScope scope, EntityFrameworkEvent event);
    [AsyncStateMachineAttribute("Audit.EntityFramework.DbContextHelper/<SaveScopeAsync>d__25")]
public Task SaveScopeAsync(IAuditDbContext context, IAuditScope scope, EntityFrameworkEvent event, CancellationToken cancellationToken);
    private bool IncludeEntity(IAuditDbContext context, object entity, AuditOptionMode mode);
    private Nullable`1<bool> EnsureEntitiesIncludeIgnoreAttrCache(Type type);
    private HashSet`1<string> EnsurePropertiesIgnoreAttrCache(Type type);
    private Dictionary`2<string, AuditOverrideAttribute> EnsurePropertiesOverrideAttrCache(Type type);
    private bool EvalIncludeFilter(Type type, EfSettings localConfig, EfSettings globalConfig);
    private bool EvalIgnoreFilter(Type type, EfSettings localConfig, EfSettings globalConfig);
    public IAuditScope CreateAuditScope(IAuditDbContext context, EntityFrameworkEvent efEvent);
    [AsyncStateMachineAttribute("Audit.EntityFramework.DbContextHelper/<CreateAuditScopeAsync>d__33")]
public Task`1<IAuditScope> CreateAuditScopeAsync(IAuditDbContext context, EntityFrameworkEvent efEvent, CancellationToken cancellationToken);
    internal IAuditScopeFactory GetAuditScopeFactory(DbContext dbContext);
    internal AuditDataProvider GetDataProvider(DbContext dbContext);
    private T TryGetService(DbContext dbContext);
    public List`1<EntityEntry> GetModifiedEntries(IAuditDbContext context);
    private static string GetTransactionId(DbTransaction transaction, string clientConnectionId);
    public string TryGetClientConnectionId(DbContext dbContext);
    public string GetClientConnectionId(DbConnection dbConnection);
    public int SaveChanges(IAuditDbContext context, Func`1<int> baseSaveChanges);
    [AsyncStateMachineAttribute("Audit.EntityFramework.DbContextHelper/<SaveChangesAsync>d__42")]
public Task`1<int> SaveChangesAsync(IAuditDbContext context, Func`1<Task`1<int>> baseSaveChanges, CancellationToken cancellationToken);
    public EntityFrameworkEvent SaveChangesGetAudit(IAuditDbContext context, Func`1<int> baseSaveChanges);
    [AsyncStateMachineAttribute("Audit.EntityFramework.DbContextHelper/<SaveChangesGetAuditAsync>d__44")]
public Task`1<EntityFrameworkEvent> SaveChangesGetAuditAsync(IAuditDbContext context, Func`1<Task`1<int>> baseSaveChanges, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.EntityFramework.DbContextHelper/<SaveChangesGetAuditAsyncImpl>d__45")]
private Task`1<EntityFrameworkEvent> SaveChangesGetAuditAsyncImpl(IAuditDbContext context, Func`1<Task`1<int>> baseSaveChanges, CancellationToken cancellationToken);
    private EntityFrameworkEvent SaveChangesGetAuditImpl(IAuditDbContext context, Func`1<int> baseSaveChanges);
    public IAuditScope BeginSaveChanges(IAuditDbContext context);
    [AsyncStateMachineAttribute("Audit.EntityFramework.DbContextHelper/<BeginSaveChangesAsync>d__48")]
public Task`1<IAuditScope> BeginSaveChangesAsync(IAuditDbContext context, CancellationToken cancellationToken);
    public void EndSaveChanges(IAuditDbContext context, IAuditScope scope, int result, Exception exception);
    [AsyncStateMachineAttribute("Audit.EntityFramework.DbContextHelper/<EndSaveChangesAsync>d__50")]
public Task EndSaveChangesAsync(IAuditDbContext context, IAuditScope scope, int result, Exception exception, CancellationToken cancellationToken);
}
public class Audit.EntityFramework.DefaultAuditContext : object {
    [CompilerGeneratedAttribute]
private DbContext <DbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuditEventType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AuditDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEntityObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeValidationResults>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditOptionMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ExtraFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, EfEntitySettings> <EntitySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditDataProvider <AuditDataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuditScopeFactory <AuditScopeFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeTransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EarlySavingAudit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReloadDatabaseValues>k__BackingField;
    public DbContext DbContext { get; public set; }
    public string AuditEventType { get; public set; }
    public bool AuditDisabled { get; public set; }
    public bool IncludeEntityObjects { get; public set; }
    public bool ExcludeValidationResults { get; public set; }
    public AuditOptionMode Mode { get; public set; }
    public Dictionary`2<string, object> ExtraFields { get; public set; }
    public Dictionary`2<Type, EfEntitySettings> EntitySettings { get; public set; }
    public AuditDataProvider AuditDataProvider { get; public set; }
    public IAuditScopeFactory AuditScopeFactory { get; public set; }
    public bool ExcludeTransactionId { get; public set; }
    public bool EarlySavingAudit { get; public set; }
    public bool ReloadDatabaseValues { get; public set; }
    public DefaultAuditContext(DbContext dbContext);
    [CompilerGeneratedAttribute]
public virtual DbContext get_DbContext();
    [CompilerGeneratedAttribute]
public virtual void set_DbContext(DbContext value);
    [CompilerGeneratedAttribute]
public virtual string get_AuditEventType();
    [CompilerGeneratedAttribute]
public virtual void set_AuditEventType(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_AuditDisabled();
    [CompilerGeneratedAttribute]
public virtual void set_AuditDisabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IncludeEntityObjects();
    [CompilerGeneratedAttribute]
public virtual void set_IncludeEntityObjects(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ExcludeValidationResults();
    [CompilerGeneratedAttribute]
public virtual void set_ExcludeValidationResults(bool value);
    [CompilerGeneratedAttribute]
public virtual AuditOptionMode get_Mode();
    [CompilerGeneratedAttribute]
public virtual void set_Mode(AuditOptionMode value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, object> get_ExtraFields();
    [CompilerGeneratedAttribute]
public virtual void set_ExtraFields(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<Type, EfEntitySettings> get_EntitySettings();
    [CompilerGeneratedAttribute]
public virtual void set_EntitySettings(Dictionary`2<Type, EfEntitySettings> value);
    [CompilerGeneratedAttribute]
public virtual AuditDataProvider get_AuditDataProvider();
    [CompilerGeneratedAttribute]
public virtual void set_AuditDataProvider(AuditDataProvider value);
    [CompilerGeneratedAttribute]
public virtual IAuditScopeFactory get_AuditScopeFactory();
    [CompilerGeneratedAttribute]
public virtual void set_AuditScopeFactory(IAuditScopeFactory value);
    public virtual void OnScopeCreated(IAuditScope auditScope);
    public virtual void OnScopeSaving(IAuditScope auditScope);
    public virtual void OnScopeSaved(IAuditScope auditScope);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExcludeTransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeTransactionId(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EarlySavingAudit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EarlySavingAudit(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReloadDatabaseValues();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReloadDatabaseValues(bool value);
}
public class Audit.EntityFramework.EntityFrameworkEvent : object {
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AmbientTransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EventEntry> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <DbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <CustomFields>k__BackingField;
    public string Database { get; public set; }
    public string ConnectionId { get; public set; }
    public string ContextId { get; public set; }
    public string AmbientTransactionId { get; public set; }
    public string TransactionId { get; public set; }
    public List`1<EventEntry> Entries { get; public set; }
    public int Result { get; public set; }
    public bool Success { get; public set; }
    public string ErrorMessage { get; public set; }
    [JsonIgnoreAttribute]
internal DbContext DbContext { get; internal set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> CustomFields { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public string get_ContextId();
    [CompilerGeneratedAttribute]
public void set_ContextId(string value);
    [CompilerGeneratedAttribute]
public string get_AmbientTransactionId();
    [CompilerGeneratedAttribute]
public void set_AmbientTransactionId(string value);
    [CompilerGeneratedAttribute]
public string get_TransactionId();
    [CompilerGeneratedAttribute]
public void set_TransactionId(string value);
    [CompilerGeneratedAttribute]
public List`1<EventEntry> get_Entries();
    [CompilerGeneratedAttribute]
public void set_Entries(List`1<EventEntry> value);
    [CompilerGeneratedAttribute]
public int get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(int value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
internal DbContext get_DbContext();
    [CompilerGeneratedAttribute]
internal void set_DbContext(DbContext value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_CustomFields();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomFields(Dictionary`2<string, object> value);
    public DbContext GetDbContext();
    public sealed virtual string ToJson();
    public static EntityFrameworkEvent FromJson(string json);
}
public class Audit.EntityFramework.EntityName : object {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Schema { get; public set; }
    public string Table { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(string value);
}
public class Audit.EntityFramework.EventEntry : object {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EventEntryChange> <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ColumnValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Valid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ValidationResults>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <CustomFields>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityEntry <Entry>k__BackingField;
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public string Name { get; public set; }
    public IDictionary`2<string, object> PrimaryKey { get; public set; }
    public string Action { get; public set; }
    public object Entity { get; public set; }
    public List`1<EventEntryChange> Changes { get; public set; }
    public IDictionary`2<string, object> ColumnValues { get; public set; }
    public bool Valid { get; public set; }
    public List`1<string> ValidationResults { get; public set; }
    [JsonIgnoreAttribute]
public Type EntityType { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> CustomFields { get; public set; }
    [JsonIgnoreAttribute]
internal EntityEntry Entry { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public object get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(object value);
    [CompilerGeneratedAttribute]
public List`1<EventEntryChange> get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(List`1<EventEntryChange> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_ColumnValues();
    [CompilerGeneratedAttribute]
public void set_ColumnValues(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_Valid();
    [CompilerGeneratedAttribute]
public void set_Valid(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ValidationResults();
    [CompilerGeneratedAttribute]
public void set_ValidationResults(List`1<string> value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_CustomFields();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomFields(Dictionary`2<string, object> value);
    public sealed virtual string ToJson();
    public static EventEntry FromJson(string json);
    [CompilerGeneratedAttribute]
internal EntityEntry get_Entry();
    [CompilerGeneratedAttribute]
internal void set_Entry(EntityEntry value);
    public EntityEntry GetEntry();
}
public class Audit.EntityFramework.EventEntryChange : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    public string ColumnName { get; public set; }
    public object OriginalValue { get; public set; }
    public object NewValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public object get_OriginalValue();
    [CompilerGeneratedAttribute]
public void set_OriginalValue(object value);
    [CompilerGeneratedAttribute]
public object get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(object value);
}
public interface Audit.EntityFramework.IAuditBypass {
    public abstract virtual int SaveChangesBypassAudit();
    public abstract virtual Task`1<int> SaveChangesBypassAuditAsync(CancellationToken cancellationToken);
}
public interface Audit.EntityFramework.IAuditDbContext {
    public string AuditEventType { get; public set; }
    public bool AuditDisabled { get; public set; }
    public bool IncludeEntityObjects { get; public set; }
    public bool ExcludeValidationResults { get; public set; }
    public AuditOptionMode Mode { get; public set; }
    public AuditDataProvider AuditDataProvider { get; public set; }
    public IAuditScopeFactory AuditScopeFactory { get; public set; }
    public Dictionary`2<string, object> ExtraFields { get; }
    public bool ExcludeTransactionId { get; public set; }
    public bool EarlySavingAudit { get; public set; }
    public DbContext DbContext { get; }
    public Dictionary`2<Type, EfEntitySettings> EntitySettings { get; public set; }
    public bool ReloadDatabaseValues { get; public set; }
    public abstract virtual string get_AuditEventType();
    public abstract virtual void set_AuditEventType(string value);
    public abstract virtual bool get_AuditDisabled();
    public abstract virtual void set_AuditDisabled(bool value);
    public abstract virtual bool get_IncludeEntityObjects();
    public abstract virtual void set_IncludeEntityObjects(bool value);
    public abstract virtual bool get_ExcludeValidationResults();
    public abstract virtual void set_ExcludeValidationResults(bool value);
    public abstract virtual AuditOptionMode get_Mode();
    public abstract virtual void set_Mode(AuditOptionMode value);
    public abstract virtual AuditDataProvider get_AuditDataProvider();
    public abstract virtual void set_AuditDataProvider(AuditDataProvider value);
    public abstract virtual IAuditScopeFactory get_AuditScopeFactory();
    public abstract virtual void set_AuditScopeFactory(IAuditScopeFactory value);
    public abstract virtual Dictionary`2<string, object> get_ExtraFields();
    public abstract virtual bool get_ExcludeTransactionId();
    public abstract virtual void set_ExcludeTransactionId(bool value);
    public abstract virtual bool get_EarlySavingAudit();
    public abstract virtual void set_EarlySavingAudit(bool value);
    public abstract virtual DbContext get_DbContext();
    public abstract virtual Dictionary`2<Type, EfEntitySettings> get_EntitySettings();
    public abstract virtual void set_EntitySettings(Dictionary`2<Type, EfEntitySettings> value);
    public abstract virtual void OnScopeCreated(IAuditScope auditScope);
    public abstract virtual void OnScopeSaving(IAuditScope auditScope);
    public abstract virtual void OnScopeSaved(IAuditScope auditScope);
    public abstract virtual bool get_ReloadDatabaseValues();
    public abstract virtual void set_ReloadDatabaseValues(bool value);
}
public abstract class Audit.EntityFramework.InterceptorEventBase : object {
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string Database { get; public set; }
    public string ConnectionId { get; public set; }
    public string DbConnectionId { get; public set; }
    public string ContextId { get; public set; }
    public string TransactionId { get; public set; }
    public bool IsAsync { get; public set; }
    public Nullable`1<bool> Success { get; public set; }
    public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Database();
    [CompilerGeneratedAttribute]
public virtual void set_Database(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DbConnectionId();
    [CompilerGeneratedAttribute]
public virtual void set_DbConnectionId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ContextId();
    [CompilerGeneratedAttribute]
public virtual void set_ContextId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TransactionId();
    [CompilerGeneratedAttribute]
public virtual void set_TransactionId(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Success();
    [CompilerGeneratedAttribute]
public virtual void set_Success(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public virtual void set_ErrorMessage(string value);
}
public class Audit.EntityFramework.Interceptors.AuditCommandInterceptor : DbCommandInterceptor {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LogParameterValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeReaderEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<CommandEventData, bool> <IncludeReaderEventsPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeNonQueryEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeScalarEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuditEventType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeReaderResults>k__BackingField;
    private DbContextHelper _dbContextHelper;
    private IAuditScope _currentScope;
    public Nullable`1<bool> LogParameterValues { get; public set; }
    public bool ExcludeReaderEvents { get; public set; }
    public Func`2<CommandEventData, bool> IncludeReaderEventsPredicate { get; public set; }
    public bool ExcludeNonQueryEvents { get; public set; }
    public bool ExcludeScalarEvents { get; public set; }
    public string AuditEventType { get; public set; }
    public bool IncludeReaderResults { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LogParameterValues();
    [CompilerGeneratedAttribute]
public void set_LogParameterValues(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeReaderEvents();
    [CompilerGeneratedAttribute]
public void set_ExcludeReaderEvents(bool value);
    [CompilerGeneratedAttribute]
public Func`2<CommandEventData, bool> get_IncludeReaderEventsPredicate();
    [CompilerGeneratedAttribute]
public void set_IncludeReaderEventsPredicate(Func`2<CommandEventData, bool> value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeNonQueryEvents();
    [CompilerGeneratedAttribute]
public void set_ExcludeNonQueryEvents(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeScalarEvents();
    [CompilerGeneratedAttribute]
public void set_ExcludeScalarEvents(bool value);
    [CompilerGeneratedAttribute]
public string get_AuditEventType();
    [CompilerGeneratedAttribute]
public void set_AuditEventType(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeReaderResults();
    [CompilerGeneratedAttribute]
public void set_IncludeReaderResults(bool value);
    protected IAuditScope GetAuditScope();
    public virtual InterceptionResult`1<DbDataReader> ReaderExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result);
    public virtual DbDataReader ReaderExecuted(DbCommand command, CommandExecutedEventData eventData, DbDataReader result);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditCommandInterceptor/<ReaderExecutingAsync>d__33")]
public virtual ValueTask`1<InterceptionResult`1<DbDataReader>> ReaderExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditCommandInterceptor/<ReaderExecutedAsync>d__34")]
public virtual ValueTask`1<DbDataReader> ReaderExecutedAsync(DbCommand command, CommandExecutedEventData eventData, DbDataReader result, CancellationToken cancellationToken);
    public virtual InterceptionResult`1<int> NonQueryExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result);
    public virtual int NonQueryExecuted(DbCommand command, CommandExecutedEventData eventData, int result);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditCommandInterceptor/<NonQueryExecutingAsync>d__37")]
public virtual ValueTask`1<InterceptionResult`1<int>> NonQueryExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditCommandInterceptor/<NonQueryExecutedAsync>d__38")]
public virtual ValueTask`1<int> NonQueryExecutedAsync(DbCommand command, CommandExecutedEventData eventData, int result, CancellationToken cancellationToken);
    public virtual InterceptionResult`1<object> ScalarExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result);
    public virtual object ScalarExecuted(DbCommand command, CommandExecutedEventData eventData, object result);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditCommandInterceptor/<ScalarExecutingAsync>d__41")]
public virtual ValueTask`1<InterceptionResult`1<object>> ScalarExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditCommandInterceptor/<ScalarExecutedAsync>d__42")]
public virtual ValueTask`1<object> ScalarExecutedAsync(DbCommand command, CommandExecutedEventData eventData, object result, CancellationToken cancellationToken);
    public virtual void CommandFailed(DbCommand command, CommandErrorEventData eventData);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditCommandInterceptor/<CommandFailedAsync>d__44")]
public virtual Task CommandFailedAsync(DbCommand command, CommandErrorEventData eventData, CancellationToken cancellationToken);
    protected virtual CommandEvent CreateAuditEvent(DbCommand command, CommandEventData eventData);
    protected virtual DbDataReader UpdateExecutedEvent(CommandExecutedEventData eventData, DbDataReader result);
    protected virtual void UpdateFailedEvent(CommandErrorEventData eventData);
    protected virtual Dictionary`2<string, List`1<Dictionary`2<string, object>>> SerializeDataReader(DbDataReader reader, DbDataReader& newDataReader);
    private Dictionary`2<string, object> GetParameters(DbCommand command, CommandEventData eventData);
    private IAuditScope CreateAuditScope(AuditEventCommandEntityFramework cmdEvent);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditCommandInterceptor/<CreateAuditScopeAsync>d__51")]
private Task`1<IAuditScope> CreateAuditScopeAsync(AuditEventCommandEntityFramework cmdEvent, CancellationToken cancellationToken);
    private void EndScope();
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditCommandInterceptor/<EndScopeAsync>d__53")]
private Task EndScopeAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<InterceptionResult`1<DbDataReader>> <>n__0(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<DbDataReader> <>n__1(DbCommand command, CommandExecutedEventData eventData, DbDataReader result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<InterceptionResult`1<int>> <>n__2(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<int> <>n__3(DbCommand command, CommandExecutedEventData eventData, int result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<InterceptionResult`1<object>> <>n__4(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<object> <>n__5(DbCommand command, CommandExecutedEventData eventData, object result, CancellationToken cancellationToken);
}
public class Audit.EntityFramework.Interceptors.AuditTransactionInterceptor : DbTransactionInterceptor {
    private DbContextHelper _dbContextHelper;
    private IAuditScope _currentScope;
    [CompilerGeneratedAttribute]
private string <AuditEventType>k__BackingField;
    public string AuditEventType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AuditEventType();
    [CompilerGeneratedAttribute]
public void set_AuditEventType(string value);
    public virtual InterceptionResult`1<DbTransaction> TransactionStarting(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditTransactionInterceptor/<TransactionStartingAsync>d__7")]
public virtual ValueTask`1<InterceptionResult`1<DbTransaction>> TransactionStartingAsync(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result, CancellationToken cancellationToken);
    public virtual DbTransaction TransactionStarted(DbConnection connection, TransactionEndEventData eventData, DbTransaction result);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditTransactionInterceptor/<TransactionStartedAsync>d__9")]
public virtual ValueTask`1<DbTransaction> TransactionStartedAsync(DbConnection connection, TransactionEndEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    public virtual InterceptionResult TransactionCommitting(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditTransactionInterceptor/<TransactionCommittingAsync>d__11")]
public virtual ValueTask`1<InterceptionResult> TransactionCommittingAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual void TransactionCommitted(DbTransaction transaction, TransactionEndEventData eventData);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditTransactionInterceptor/<TransactionCommittedAsync>d__13")]
public virtual Task TransactionCommittedAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult TransactionRollingBack(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditTransactionInterceptor/<TransactionRollingBackAsync>d__15")]
public virtual ValueTask`1<InterceptionResult> TransactionRollingBackAsync(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    public virtual void TransactionRolledBack(DbTransaction transaction, TransactionEndEventData eventData);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditTransactionInterceptor/<TransactionRolledBackAsync>d__17")]
public virtual Task TransactionRolledBackAsync(DbTransaction transaction, TransactionEndEventData eventData, CancellationToken cancellationToken);
    public virtual void TransactionFailed(DbTransaction transaction, TransactionErrorEventData eventData);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditTransactionInterceptor/<TransactionFailedAsync>d__19")]
public virtual Task TransactionFailedAsync(DbTransaction transaction, TransactionErrorEventData eventData, CancellationToken cancellationToken);
    private void UpdateFailedEvent(TransactionErrorEventData eventData);
    private TransactionEvent CreateAuditEvent(DbConnection connection, TransactionStartingEventData eventData, string action);
    private TransactionEvent CreateAuditEvent(DbTransaction transaction, TransactionEventData eventData, string action);
    private void UpdateExecutedEventSuccess(TransactionEndEventData eventData);
    private IAuditScope CreateAuditScope(AuditEventTransactionEntityFramework tranEvent);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditTransactionInterceptor/<CreateAuditScopeAsync>d__25")]
private Task`1<IAuditScope> CreateAuditScopeAsync(AuditEventTransactionEntityFramework tranEvent, CancellationToken cancellationToken);
    private void EndScope();
    [AsyncStateMachineAttribute("Audit.EntityFramework.Interceptors.AuditTransactionInterceptor/<EndScopeAsync>d__27")]
private Task EndScopeAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<InterceptionResult`1<DbTransaction>> <>n__0(DbConnection connection, TransactionStartingEventData eventData, InterceptionResult`1<DbTransaction> result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<DbTransaction> <>n__1(DbConnection connection, TransactionEndEventData eventData, DbTransaction result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<InterceptionResult> <>n__2(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<InterceptionResult> <>n__3(DbTransaction transaction, TransactionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
}
public class Audit.EntityFramework.Providers.EntityFrameworkDataProvider : AuditDataProvider {
    private Func`2<Type, bool> _ignoreMatchedPropertiesFunc;
    private Func`3<Type, EventEntry, Type> _auditTypeMapper;
    private Func`4<AuditEvent, EventEntry, object, Task`1<bool>> _auditEntityAction;
    private Func`2<AuditEventEntityFramework, DbContext> _dbContextBuilder;
    private bool _disposeDbContext;
    private Func`2<EventEntry, Type> _explicitMapper;
    private Func`3<DbContext, EventEntry, object> _auditEntityCreator;
    public Func`3<DbContext, EventEntry, object> AuditEntityCreator { get; public set; }
    public Func`3<Type, EventEntry, Type> AuditTypeMapper { get; public set; }
    public Func`4<AuditEvent, EventEntry, object, Task`1<bool>> AuditEntityAction { get; public set; }
    public Func`2<EventEntry, Type> ExplicitMapper { get; public set; }
    public Func`2<Type, bool> IgnoreMatchedPropertiesFunc { get; public set; }
    public Func`2<AuditEventEntityFramework, DbContext> DbContextBuilder { get; public set; }
    public bool DisposeDbContext { get; public set; }
    public EntityFrameworkDataProvider(Action`1<IEntityFrameworkProviderConfigurator> config);
    public Func`3<DbContext, EventEntry, object> get_AuditEntityCreator();
    public void set_AuditEntityCreator(Func`3<DbContext, EventEntry, object> value);
    public Func`3<Type, EventEntry, Type> get_AuditTypeMapper();
    public void set_AuditTypeMapper(Func`3<Type, EventEntry, Type> value);
    public Func`4<AuditEvent, EventEntry, object, Task`1<bool>> get_AuditEntityAction();
    public void set_AuditEntityAction(Func`4<AuditEvent, EventEntry, object, Task`1<bool>> value);
    public Func`2<EventEntry, Type> get_ExplicitMapper();
    public void set_ExplicitMapper(Func`2<EventEntry, Type> value);
    public Func`2<Type, bool> get_IgnoreMatchedPropertiesFunc();
    public void set_IgnoreMatchedPropertiesFunc(Func`2<Type, bool> value);
    public Func`2<AuditEventEntityFramework, DbContext> get_DbContextBuilder();
    public void set_DbContextBuilder(Func`2<AuditEventEntityFramework, DbContext> value);
    public bool get_DisposeDbContext();
    public void set_DisposeDbContext(bool value);
    public virtual object InsertEvent(AuditEvent auditEvent);
    [AsyncStateMachineAttribute("Audit.EntityFramework.Providers.EntityFrameworkDataProvider/<InsertEventAsync>d__31")]
public virtual Task`1<object> InsertEventAsync(AuditEvent auditEvent, CancellationToken cancellationToken);
    private Type GetEntityType(EventEntry entry, DbContext localDbContext);
    private object CreateAuditEntityFromType(Type definingType, Type auditType, EventEntry entry);
    private object CreateAuditEntityFromFactory(Type definingType, EventEntry entry, DbContext auditDbContext);
    private void SetAuditEntityMatchedProperties(Type definingType, EventEntry entry, Type auditType, object auditEntity);
    private Dictionary`2<string, PropertyInfo> GetPropertiesToSet(Type type);
    private Type GetTypeNoProxy(Type type);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
    public virtual Task ReplaceEventAsync(object eventId, AuditEvent auditEvent, CancellationToken cancellationToken);
}
public class Audit.EntityFramework.TransactionEvent : InterceptorEventBase {
    [CompilerGeneratedAttribute]
private string <EventIdCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <DbContext>k__BackingField;
    public string EventIdCode { get; public set; }
    public string Message { get; public set; }
    public string Action { get; public set; }
    [JsonIgnoreAttribute]
internal DbContext DbContext { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_EventIdCode();
    [CompilerGeneratedAttribute]
public void set_EventIdCode(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
internal DbContext get_DbContext();
    [CompilerGeneratedAttribute]
internal void set_DbContext(DbContext value);
    public DbContext GetDbContext();
}
