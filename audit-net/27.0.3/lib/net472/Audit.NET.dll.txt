public enum Audit.Core.ActionType : Enum {
    public int value__;
    public static ActionType OnScopeCreated;
    public static ActionType OnEventSaving;
    public static ActionType OnEventSaved;
    public static ActionType OnScopeDisposed;
}
public abstract class Audit.Core.AuditDataProvider : object {
    public virtual object CloneValue(T value, AuditEvent auditEvent);
    public abstract virtual object InsertEvent(AuditEvent auditEvent);
    [AsyncStateMachineAttribute("Audit.Core.AuditDataProvider/<InsertEventAsync>d__2")]
public virtual Task`1<object> InsertEventAsync(AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
    [AsyncStateMachineAttribute("Audit.Core.AuditDataProvider/<ReplaceEventAsync>d__4")]
public virtual Task ReplaceEventAsync(object eventId, AuditEvent auditEvent, CancellationToken cancellationToken);
    public AuditEvent GetEvent(object eventId);
    public virtual T GetEvent(object eventId);
    [AsyncStateMachineAttribute("Audit.Core.AuditDataProvider/<GetEventAsync>d__7")]
public Task`1<AuditEvent> GetEventAsync(object eventId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.Core.AuditDataProvider/<GetEventAsync>d__8`1")]
public virtual Task`1<T> GetEventAsync(object eventId, CancellationToken cancellationToken);
}
public class Audit.Core.AuditEvent : object {
    [CompilerGeneratedAttribute]
private string <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditEventEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <CustomFields>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Duration>k__BackingField;
    private WeakReference _auditScope;
    public string EventType { get; public set; }
    [JsonIgnoreAttribute]
public AuditEventEnvironment Environment { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> CustomFields { get; public set; }
    [JsonIgnoreAttribute]
public AuditTarget Target { get; public set; }
    [JsonIgnoreAttribute]
public List`1<string> Comments { get; public set; }
    public DateTime StartDate { get; public set; }
    public Nullable`1<DateTime> EndDate { get; public set; }
    public int Duration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EventType();
    [CompilerGeneratedAttribute]
public void set_EventType(string value);
    [CompilerGeneratedAttribute]
public AuditEventEnvironment get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(AuditEventEnvironment value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_CustomFields();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomFields(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public AuditTarget get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(AuditTarget value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Comments();
    [CompilerGeneratedAttribute]
public void set_Comments(List`1<string> value);
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public int get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(int value);
    internal void SetScope(IAuditScope auditScope);
    public IAuditScope GetScope();
    public sealed virtual string ToJson();
    public static T FromJson(string json);
    public static AuditEvent FromJson(string json);
}
public class Audit.Core.AuditEventEnvironment : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallingMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <CustomFields>k__BackingField;
    public string UserName { get; public set; }
    [JsonIgnoreAttribute]
public string MachineName { get; public set; }
    [JsonIgnoreAttribute]
public string DomainName { get; public set; }
    [JsonIgnoreAttribute]
public string CallingMethodName { get; public set; }
    [JsonIgnoreAttribute]
public string StackTrace { get; public set; }
    [JsonIgnoreAttribute]
public string AssemblyName { get; public set; }
    [JsonIgnoreAttribute]
public string Exception { get; public set; }
    [JsonIgnoreAttribute]
public string Culture { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> CustomFields { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
public void set_DomainName(string value);
    [CompilerGeneratedAttribute]
public string get_CallingMethodName();
    [CompilerGeneratedAttribute]
public void set_CallingMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_CustomFields();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomFields(Dictionary`2<string, object> value);
    public sealed virtual string ToJson();
    public static AuditEventEnvironment FromJson(string json);
}
public class Audit.Core.AuditScope : object {
    private AuditScopeOptions _options;
    private SaveMode _saveMode;
    private EventCreationPolicy _creationPolicy;
    private AuditEvent _event;
    private object _eventId;
    private bool _disposed;
    private bool _ended;
    private AuditDataProvider _dataProvider;
    private ISystemClock _systemClock;
    private Func`1<object> _targetGetter;
    private IDictionary`2<string, object> _items;
    public SaveMode SaveMode { get; }
    public string EventType { get; public set; }
    public AuditEvent Event { get; }
    public AuditDataProvider DataProvider { get; }
    public object EventId { get; }
    public EventCreationPolicy EventCreationPolicy { get; }
    public IDictionary`2<string, object> Items { get; }
    internal AuditScope(AuditScopeOptions options);
    public sealed virtual SaveMode get_SaveMode();
    public sealed virtual string get_EventType();
    public sealed virtual void set_EventType(string value);
    public sealed virtual AuditEvent get_Event();
    public sealed virtual AuditDataProvider get_DataProvider();
    public sealed virtual object get_EventId();
    public sealed virtual EventCreationPolicy get_EventCreationPolicy();
    public sealed virtual IDictionary`2<string, object> get_Items();
    public sealed virtual void SetTargetGetter(Func`1<object> targetGetter);
    public sealed virtual void Comment(string text);
    public sealed virtual void Comment(string format, Object[] args);
    public sealed virtual void SetCustomField(string fieldName, TC value, bool serialize);
    public sealed virtual T GetItem(string key);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Audit.Core.AuditScope/<DisposeAsync>d__33")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Discard();
    private void End();
    [AsyncStateMachineAttribute("Audit.Core.AuditScope/<EndAsync>d__36")]
private Task EndAsync();
    public sealed virtual void Save();
    [AsyncStateMachineAttribute("Audit.Core.AuditScope/<SaveAsync>d__38")]
public sealed virtual Task SaveAsync(CancellationToken cancellationToken);
    public sealed virtual T EventAs();
    private AuditEventEnvironment GetEnvironmentInfo(AuditScopeOptions options);
    internal AuditScope Start();
    [AsyncStateMachineAttribute("Audit.Core.AuditScope/<StartAsync>d__42")]
internal Task`1<AuditScope> StartAsync(CancellationToken cancellationToken);
    private bool IsEndedOrDisabled();
    private void EndEvent();
    private Exception GetCurrentException();
    private void ProcessExtraFields(object extraFields);
    private void SaveEvent(bool forceInsert);
    [AsyncStateMachineAttribute("Audit.Core.AuditScope/<SaveEventAsync>d__48")]
private Task SaveEventAsync(bool forceInsert, CancellationToken cancellationToken);
    public static AuditScope Create(AuditScopeOptions options);
    [AsyncStateMachineAttribute("Audit.Core.AuditScope/<CreateAsync>d__50")]
public static Task`1<AuditScope> CreateAsync(AuditScopeOptions options, CancellationToken cancellationToken);
    public static IAuditScope Create(Action`1<IAuditScopeOptionsConfigurator> config);
    [AsyncStateMachineAttribute("Audit.Core.AuditScope/<CreateAsync>d__52")]
public static Task`1<IAuditScope> CreateAsync(Action`1<IAuditScopeOptionsConfigurator> config, CancellationToken cancellationToken);
    public static AuditScope Create(string eventType, Func`1<object> target, object extraFields);
    [AsyncStateMachineAttribute("Audit.Core.AuditScope/<CreateAsync>d__54")]
public static Task`1<AuditScope> CreateAsync(string eventType, Func`1<object> target, object extraFields, CancellationToken cancellationToken);
    public static void Log(string eventType, object extraFields);
    [AsyncStateMachineAttribute("Audit.Core.AuditScope/<LogAsync>d__56")]
public static Task LogAsync(string eventType, object extraFields, CancellationToken cancellationToken);
}
public class Audit.Core.AuditScopeFactory : object {
    public virtual void OnConfiguring(AuditScopeOptions options);
    public virtual void OnScopeCreated(AuditScope auditScope);
    public sealed virtual IAuditScope Create(AuditScopeOptions options);
    [AsyncStateMachineAttribute("Audit.Core.AuditScopeFactory/<CreateAsync>d__3")]
public sealed virtual Task`1<IAuditScope> CreateAsync(AuditScopeOptions options, CancellationToken cancellationToken);
    public sealed virtual IAuditScope Create(Action`1<IAuditScopeOptionsConfigurator> config);
    [AsyncStateMachineAttribute("Audit.Core.AuditScopeFactory/<CreateAsync>d__5")]
public sealed virtual Task`1<IAuditScope> CreateAsync(Action`1<IAuditScopeOptionsConfigurator> config, CancellationToken cancellationToken);
    public IAuditScope Create(string eventType, Func`1<object> target);
    [AsyncStateMachineAttribute("Audit.Core.AuditScopeFactory/<CreateAsync>d__7")]
public Task`1<IAuditScope> CreateAsync(string eventType, Func`1<object> target, CancellationToken cancellationToken);
    public IAuditScope Create(string eventType, Func`1<object> target, EventCreationPolicy creationPolicy, AuditDataProvider dataProvider);
    [AsyncStateMachineAttribute("Audit.Core.AuditScopeFactory/<CreateAsync>d__9")]
public Task`1<IAuditScope> CreateAsync(string eventType, Func`1<object> target, Nullable`1<EventCreationPolicy> creationPolicy, AuditDataProvider dataProvider, CancellationToken cancellationToken);
    public IAuditScope Create(string eventType, Func`1<object> target, object extraFields, Nullable`1<EventCreationPolicy> creationPolicy, AuditDataProvider dataProvider);
    [AsyncStateMachineAttribute("Audit.Core.AuditScopeFactory/<CreateAsync>d__11")]
public Task`1<IAuditScope> CreateAsync(string eventType, Func`1<object> target, object extraFields, Nullable`1<EventCreationPolicy> creationPolicy, AuditDataProvider dataProvider, CancellationToken cancellationToken);
    public void Log(string eventType, object extraFields);
    [AsyncStateMachineAttribute("Audit.Core.AuditScopeFactory/<LogAsync>d__13")]
public Task LogAsync(string eventType, object extraFields, CancellationToken cancellationToken);
}
public class Audit.Core.AuditScopeOptions : object {
    [CompilerGeneratedAttribute]
private string <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<object> <TargetGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ExtraFields>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditDataProvider <DataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EventCreationPolicy> <CreationPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCreateAndSave>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditEvent <AuditEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipExtraFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodBase <CallingMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemClock <SystemClock>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExcludeEnvironmentInfo>k__BackingField;
    public string EventType { get; public set; }
    public Func`1<object> TargetGetter { get; public set; }
    public object ExtraFields { get; public set; }
    unknown Func`1<AuditDataProvider> DataProviderFactory {public set; }
    public AuditDataProvider DataProvider { get; public set; }
    public Nullable`1<EventCreationPolicy> CreationPolicy { get; public set; }
    public bool IsCreateAndSave { get; public set; }
    public AuditEvent AuditEvent { get; public set; }
    public int SkipExtraFrames { get; public set; }
    public MethodBase CallingMethod { get; public set; }
    public Nullable`1<bool> IncludeStackTrace { get; public set; }
    public Dictionary`2<string, object> Items { get; public set; }
    public ISystemClock SystemClock { get; public set; }
    public Nullable`1<bool> ExcludeEnvironmentInfo { get; public set; }
    public AuditScopeOptions(Action`1<IAuditScopeOptionsConfigurator> config);
    [CompilerGeneratedAttribute]
public string get_EventType();
    [CompilerGeneratedAttribute]
public void set_EventType(string value);
    [CompilerGeneratedAttribute]
public Func`1<object> get_TargetGetter();
    [CompilerGeneratedAttribute]
public void set_TargetGetter(Func`1<object> value);
    [CompilerGeneratedAttribute]
public object get_ExtraFields();
    [CompilerGeneratedAttribute]
public void set_ExtraFields(object value);
    public void set_DataProviderFactory(Func`1<AuditDataProvider> value);
    [CompilerGeneratedAttribute]
public AuditDataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
public void set_DataProvider(AuditDataProvider value);
    [CompilerGeneratedAttribute]
public Nullable`1<EventCreationPolicy> get_CreationPolicy();
    [CompilerGeneratedAttribute]
public void set_CreationPolicy(Nullable`1<EventCreationPolicy> value);
    [CompilerGeneratedAttribute]
public bool get_IsCreateAndSave();
    [CompilerGeneratedAttribute]
public void set_IsCreateAndSave(bool value);
    [CompilerGeneratedAttribute]
public AuditEvent get_AuditEvent();
    [CompilerGeneratedAttribute]
public void set_AuditEvent(AuditEvent value);
    [CompilerGeneratedAttribute]
public int get_SkipExtraFrames();
    [CompilerGeneratedAttribute]
public void set_SkipExtraFrames(int value);
    [CompilerGeneratedAttribute]
public MethodBase get_CallingMethod();
    [CompilerGeneratedAttribute]
public void set_CallingMethod(MethodBase value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeStackTrace();
    [CompilerGeneratedAttribute]
public void set_IncludeStackTrace(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ISystemClock get_SystemClock();
    [CompilerGeneratedAttribute]
public void set_SystemClock(ISystemClock value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExcludeEnvironmentInfo();
    [CompilerGeneratedAttribute]
public void set_ExcludeEnvironmentInfo(Nullable`1<bool> value);
}
public class Audit.Core.AuditScopeOptionsConfigurator : object {
    internal AuditScopeOptions _options;
    public sealed virtual IAuditScopeOptionsConfigurator AuditEvent(AuditEvent auditEvent);
    public sealed virtual IAuditScopeOptionsConfigurator CallingMethod(MethodBase method);
    public sealed virtual IAuditScopeOptionsConfigurator CreationPolicy(EventCreationPolicy creationPolicy);
    public sealed virtual IAuditScopeOptionsConfigurator DataProvider(AuditDataProvider dataProvider);
    public sealed virtual IAuditScopeOptionsConfigurator DataProviderLazyFactory(Func`1<AuditDataProvider> dataProviderFactory);
    public sealed virtual IAuditScopeOptionsConfigurator DataProviderDeferredFactory(Func`2<AuditEvent, AuditDataProvider> dataProviderFactory);
    public sealed virtual IAuditScopeOptionsConfigurator EventType(string eventType);
    public sealed virtual IAuditScopeOptionsConfigurator ExtraFields(object extraFields);
    public sealed virtual IAuditScopeOptionsConfigurator IsCreateAndSave(bool isCreateAndSave);
    public sealed virtual IAuditScopeOptionsConfigurator SkipExtraFrames(int extraFrames);
    public sealed virtual IAuditScopeOptionsConfigurator Target(Func`1<object> targetGetter);
    public sealed virtual IAuditScopeOptionsConfigurator IncludeStackTrace(bool includeStackTrace);
    public sealed virtual IAuditScopeOptionsConfigurator ExcludeEnvironmentInfo(bool excludeEnvironmentInfo);
    public sealed virtual IAuditScopeOptionsConfigurator SystemClock(ISystemClock systemClock);
    public sealed virtual IAuditScopeOptionsConfigurator WithItem(string key, object value);
}
public class Audit.Core.AuditTarget : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Old>k__BackingField;
    [CompilerGeneratedAttribute]
private object <New>k__BackingField;
    public string Type { get; public set; }
    public object Old { get; public set; }
    public object New { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public object get_Old();
    [CompilerGeneratedAttribute]
public void set_Old(object value);
    [CompilerGeneratedAttribute]
public object get_New();
    [CompilerGeneratedAttribute]
public void set_New(object value);
}
public static class Audit.Core.Configuration : object {
    [CompilerGeneratedAttribute]
private static ISystemClock <SystemClock>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventCreationPolicy <CreationPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuditDataProvider <DataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IncludeTypeNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IncludeStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ExcludeEnvironmentInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <AuditDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions <JsonSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<ActionType, List`1<Func`3<AuditScope, CancellationToken, Task`1<bool>>>> <AuditScopeActions>k__BackingField;
    internal static object Locker;
    private static IAuditScopeFactory _auditScopeFactory;
    [CompilerGeneratedAttribute]
private static IJsonAdapter <JsonAdapter>k__BackingField;
    public static ISystemClock SystemClock { get; public set; }
    public static EventCreationPolicy CreationPolicy { get; public set; }
    unknown static Func`1<AuditDataProvider> DataProviderFactory {public set; }
    public static AuditDataProvider DataProvider { get; public set; }
    public static bool IncludeTypeNamespaces { get; public set; }
    public static bool IncludeStackTrace { get; public set; }
    public static bool ExcludeEnvironmentInfo { get; public set; }
    public static IAuditScopeFactory AuditScopeFactory { get; public set; }
    public static bool AuditDisabled { get; public set; }
    public static JsonSerializerOptions JsonSettings { get; public set; }
    internal static Dictionary`2<ActionType, List`1<Func`3<AuditScope, CancellationToken, Task`1<bool>>>> AuditScopeActions { get; private set; }
    public static IJsonAdapter JsonAdapter { get; public set; }
    private static Configuration();
    [CompilerGeneratedAttribute]
public static ISystemClock get_SystemClock();
    [CompilerGeneratedAttribute]
public static void set_SystemClock(ISystemClock value);
    [CompilerGeneratedAttribute]
public static EventCreationPolicy get_CreationPolicy();
    [CompilerGeneratedAttribute]
public static void set_CreationPolicy(EventCreationPolicy value);
    public static void set_DataProviderFactory(Func`1<AuditDataProvider> value);
    [CompilerGeneratedAttribute]
public static AuditDataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
public static void set_DataProvider(AuditDataProvider value);
    public static T DataProviderAs();
    [CompilerGeneratedAttribute]
public static bool get_IncludeTypeNamespaces();
    [CompilerGeneratedAttribute]
public static void set_IncludeTypeNamespaces(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IncludeStackTrace();
    [CompilerGeneratedAttribute]
public static void set_IncludeStackTrace(bool value);
    [CompilerGeneratedAttribute]
public static bool get_ExcludeEnvironmentInfo();
    [CompilerGeneratedAttribute]
public static void set_ExcludeEnvironmentInfo(bool value);
    public static IAuditScopeFactory get_AuditScopeFactory();
    public static void set_AuditScopeFactory(IAuditScopeFactory value);
    [CompilerGeneratedAttribute]
public static bool get_AuditDisabled();
    [CompilerGeneratedAttribute]
public static void set_AuditDisabled(bool value);
    [CompilerGeneratedAttribute]
public static JsonSerializerOptions get_JsonSettings();
    [CompilerGeneratedAttribute]
public static void set_JsonSettings(JsonSerializerOptions value);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<ActionType, List`1<Func`3<AuditScope, CancellationToken, Task`1<bool>>>> get_AuditScopeActions();
    [CompilerGeneratedAttribute]
private static void set_AuditScopeActions(Dictionary`2<ActionType, List`1<Func`3<AuditScope, CancellationToken, Task`1<bool>>>> value);
    [CompilerGeneratedAttribute]
public static IJsonAdapter get_JsonAdapter();
    [CompilerGeneratedAttribute]
public static void set_JsonAdapter(IJsonAdapter value);
    public static void Reset();
    public static IConfigurator Setup();
    public static void AddCustomAction(ActionType when, Action`1<AuditScope> action);
    public static void AddCustomAction(ActionType when, Func`2<AuditScope, bool> action);
    public static void AddCustomAction(ActionType when, Func`2<AuditScope, Task> asyncAction);
    public static void AddCustomAction(ActionType when, Func`2<AuditScope, Task`1<bool>> asyncAction);
    public static void AddCustomAction(ActionType when, Func`3<AuditScope, CancellationToken, Task> asyncAction);
    public static void AddCustomAction(ActionType when, Func`3<AuditScope, CancellationToken, Task`1<bool>> asyncAction);
    public static void AddOnSavingAction(Action`1<AuditScope> action);
    public static void AddOnSavingAction(Func`2<AuditScope, bool> action);
    public static void AddOnSavingAction(Func`2<AuditScope, Task> asyncAction);
    public static void AddOnSavingAction(Func`2<AuditScope, Task`1<bool>> asyncAction);
    public static void AddOnSavingAction(Func`3<AuditScope, CancellationToken, Task> asyncAction);
    public static void AddOnSavingAction(Func`3<AuditScope, CancellationToken, Task`1<bool>> asyncAction);
    public static void AddOnCreatedAction(Action`1<AuditScope> action);
    public static void AddOnCreatedAction(Func`2<AuditScope, bool> action);
    public static void AddOnCreatedAction(Func`2<AuditScope, Task> asyncAction);
    public static void AddOnCreatedAction(Func`2<AuditScope, Task`1<bool>> asyncAction);
    public static void AddOnCreatedAction(Func`3<AuditScope, CancellationToken, Task> asyncAction);
    public static void AddOnCreatedAction(Func`3<AuditScope, CancellationToken, Task`1<bool>> asyncAction);
    public static void AddOnDisposedAction(Action`1<AuditScope> action);
    public static void AddOnDisposedAction(Func`2<AuditScope, bool> action);
    public static void AddOnDisposedAction(Func`2<AuditScope, Task> asyncAction);
    public static void AddOnDisposedAction(Func`2<AuditScope, Task`1<bool>> asyncAction);
    public static void AddOnDisposedAction(Func`3<AuditScope, CancellationToken, Task> asyncAction);
    public static void AddOnDisposedAction(Func`3<AuditScope, CancellationToken, Task`1<bool>> asyncAction);
    public static void ResetCustomActions();
    public static void ResetCustomActions(ActionType actionType);
    internal static void InvokeCustomActions(ActionType type, AuditScope auditScope);
    [AsyncStateMachineAttribute("Audit.Core.Configuration/<InvokeCustomActionsAsync>d__78")]
internal static Task InvokeCustomActionsAsync(ActionType type, AuditScope auditScope, CancellationToken cancellationToken);
}
public class Audit.Core.ConfigurationApi.ActionConfigurator : object {
    public sealed virtual IActionConfigurator WithAction(Action`1<IActionEventSelector> actionSelector);
    public sealed virtual IActionConfigurator ResetActions();
}
public class Audit.Core.ConfigurationApi.ActionEventSelector : object {
    public sealed virtual void OnEventSaved(Action`1<AuditScope> action);
    public sealed virtual void OnEventSaved(Func`2<AuditScope, Task> action);
    public sealed virtual void OnEventSaving(Action`1<AuditScope> action);
    public sealed virtual void OnEventSaving(Func`2<AuditScope, Task> action);
    public sealed virtual void OnScopeCreated(Action`1<AuditScope> action);
    public sealed virtual void OnScopeCreated(Func`2<AuditScope, Task> action);
    public sealed virtual void OnScopeDisposed(Func`2<AuditScope, Task> action);
    public sealed virtual void OnScopeDisposed(Action`1<AuditScope> action);
}
public class Audit.Core.ConfigurationApi.BlockingCollectionProviderConfigurator : object {
    internal int _collectionType;
    internal BlockingCollectionProviderExtraConfigurator _extra;
    public sealed virtual IBlockingCollectionProviderExtraConfigurator AsQueue();
    public sealed virtual IBlockingCollectionProviderExtraConfigurator AsStack();
    public sealed virtual IBlockingCollectionProviderExtraConfigurator AsBag();
}
public class Audit.Core.ConfigurationApi.BlockingCollectionProviderExtraConfigurator : object {
    internal Nullable`1<int> _capacity;
    public sealed virtual IBlockingCollectionProviderExtraConfigurator WithCapacity(int capacity);
}
public class Audit.Core.ConfigurationApi.ConditionalDataProviderConfigurator : object {
    internal List`1<GuardCondition> _guardConditions;
    public sealed virtual IConditionalDataProviderConfigurator When(Func`2<AuditEvent, bool> guardCondition, Func`2<AuditEvent, AuditDataProvider> dataProviderFactory);
    public sealed virtual IConditionalDataProviderConfigurator When(Func`2<AuditEvent, bool> guardCondition, Func`1<AuditDataProvider> dataProviderInitializer);
    public sealed virtual IConditionalDataProviderConfigurator When(Func`2<AuditEvent, bool> guardCondition, AuditDataProvider dataProvider);
    public sealed virtual void Otherwise(Func`2<AuditEvent, AuditDataProvider> dataProviderFactory);
    public sealed virtual void Otherwise(Func`1<AuditDataProvider> dataProviderInitializer);
    public sealed virtual void Otherwise(AuditDataProvider dataProvider);
}
public class Audit.Core.ConfigurationApi.Configurator : object {
    public sealed virtual IConfigurator AuditDisabled(bool auditDisabled);
    public sealed virtual IConfigurator JsonAdapter(IJsonAdapter adapter);
    public sealed virtual IConfigurator JsonAdapter();
    public sealed virtual IConfigurator IncludeStackTrace(bool includeStackTrace);
    public sealed virtual ICreationPolicyConfigurator UseNullProvider();
    public sealed virtual ICreationPolicyConfigurator Use(Action`1<IDynamicDataProviderConfigurator> config);
    public sealed virtual ICreationPolicyConfigurator UseDeferredFactory(Func`2<AuditEvent, AuditDataProvider> dataProviderFactory);
    public sealed virtual ICreationPolicyConfigurator UseLazyFactory(Func`1<AuditDataProvider> dataProviderInitializer);
    public sealed virtual ICreationPolicyConfigurator UseConditional(Action`1<IConditionalDataProviderConfigurator> config);
    public sealed virtual ICreationPolicyConfigurator Use(AuditDataProvider provider);
    public sealed virtual ICreationPolicyConfigurator UseDynamicProvider(Action`1<IDynamicDataProviderConfigurator> config);
    public sealed virtual ICreationPolicyConfigurator UseDynamicAsyncProvider(Action`1<IDynamicAsyncDataProviderConfigurator> config);
    public sealed virtual ICreationPolicyConfigurator UseFileLogProvider(Action`1<IFileLogProviderConfigurator> config);
    public sealed virtual ICreationPolicyConfigurator UseCustomProvider(AuditDataProvider provider);
    public sealed virtual ICreationPolicyConfigurator UseEventLogProvider(string logName, string sourcePath, string machineName, Func`2<AuditEvent, string> messageBuilder);
    public sealed virtual ICreationPolicyConfigurator UseEventLogProvider(Action`1<IEventLogProviderConfigurator> config);
    public sealed virtual ICreationPolicyConfigurator UseInMemoryProvider();
    public sealed virtual ICreationPolicyConfigurator UseInMemoryProvider(InMemoryDataProvider& dataProvider);
    public sealed virtual ICreationPolicyConfigurator UseInMemoryBlockingCollectionProvider(Action`1<IBlockingCollectionProviderConfigurator> config);
    public sealed virtual ICreationPolicyConfigurator UseInMemoryBlockingCollectionProvider();
}
public class Audit.Core.ConfigurationApi.CreationPolicyConfigurator : object {
    public sealed virtual IActionConfigurator WithCreationPolicy(EventCreationPolicy creationPolicy);
    public sealed virtual IActionConfigurator WithManualCreationPolicy();
    public sealed virtual IActionConfigurator WithInsertOnEndCreationPolicy();
    public sealed virtual IActionConfigurator WithInsertOnStartReplaceOnEndCreationPolicy();
    public sealed virtual IActionConfigurator WithInsertOnStartInsertOnEndCreationPolicy();
}
public class Audit.Core.ConfigurationApi.DynamicAsyncDataProviderConfigurator : object {
    public DynamicAsyncDataProvider _dynamicAsyncDataProvider;
    public DynamicAsyncDataProviderConfigurator(DynamicAsyncDataProvider dynamicAsyncDataProvider);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnInsert(Func`2<AuditEvent, Task> insertAction);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnInsert(Func`3<AuditEvent, CancellationToken, Task> insertAction);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnInsert(Func`2<AuditEvent, Task`1<object>> insertAction);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnInsert(Func`3<AuditEvent, CancellationToken, Task`1<object>> insertAction);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnInsertAndReplace(Func`3<object, AuditEvent, Task> insertReplaceAction);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnInsertAndReplace(Func`2<AuditEvent, Task> insertReplaceAction);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnInsertAndReplace(Func`4<object, AuditEvent, CancellationToken, Task> insertReplaceAction);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnInsertAndReplace(Func`3<AuditEvent, CancellationToken, Task> insertReplaceAction);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnReplace(Func`3<object, AuditEvent, Task> replaceAction);
    public sealed virtual IDynamicAsyncDataProviderConfigurator OnReplace(Func`4<object, AuditEvent, CancellationToken, Task> replaceAction);
}
public class Audit.Core.ConfigurationApi.DynamicDataProviderConfigurator : object {
    public DynamicDataProvider _dynamicDataProvider;
    public DynamicDataProviderConfigurator(DynamicDataProvider dynamicDataProvider);
    public sealed virtual IDynamicDataProviderConfigurator OnInsert(Action`1<AuditEvent> insertAction);
    public sealed virtual IDynamicDataProviderConfigurator OnInsert(Func`2<AuditEvent, object> insertFunction);
    public sealed virtual IDynamicDataProviderConfigurator OnInsertAndReplace(Action`2<object, AuditEvent> insertReplaceAction);
    public sealed virtual IDynamicDataProviderConfigurator OnInsertAndReplace(Action`1<AuditEvent> insertReplaceAction);
    public sealed virtual IDynamicDataProviderConfigurator OnReplace(Action`2<object, AuditEvent> replaceAction);
}
public class Audit.Core.ConfigurationApi.EventLogProviderConfigurator : object {
    internal Setting`1<string> _logName;
    internal Setting`1<string> _sourcePath;
    internal Setting`1<string> _machineName;
    internal Func`2<AuditEvent, string> _messageBuilder;
    public sealed virtual IEventLogProviderConfigurator LogName(string logName);
    public sealed virtual IEventLogProviderConfigurator LogName(Func`2<AuditEvent, string> logName);
    public sealed virtual IEventLogProviderConfigurator MachineName(string machineName);
    public sealed virtual IEventLogProviderConfigurator MachineName(Func`2<AuditEvent, string> machineName);
    public sealed virtual IEventLogProviderConfigurator SourcePath(string sourcePath);
    public sealed virtual IEventLogProviderConfigurator SourcePath(Func`2<AuditEvent, string> sourcePath);
    public sealed virtual IEventLogProviderConfigurator MessageBuilder(Func`2<AuditEvent, string> messageBuilder);
}
public class Audit.Core.ConfigurationApi.FileLogProviderConfigurator : object {
    internal Setting`1<string> _directoryPath;
    internal Setting`1<string> _filenamePrefix;
    internal Func`2<AuditEvent, string> _filenameBuilder;
    public sealed virtual IFileLogProviderConfigurator Directory(string directoryPath);
    public sealed virtual IFileLogProviderConfigurator DirectoryBuilder(Func`2<AuditEvent, string> directoryPathBuilder);
    public sealed virtual IFileLogProviderConfigurator FilenamePrefix(string filenamePrefix);
    public sealed virtual IFileLogProviderConfigurator FilenameBuilder(Func`2<AuditEvent, string> filenameBuilder);
}
public interface Audit.Core.ConfigurationApi.IActionConfigurator {
    public abstract virtual IActionConfigurator WithAction(Action`1<IActionEventSelector> actionSelector);
    public abstract virtual IActionConfigurator ResetActions();
}
public interface Audit.Core.ConfigurationApi.IActionEventSelector {
    public abstract virtual void OnScopeCreated(Action`1<AuditScope> action);
    public abstract virtual void OnEventSaving(Action`1<AuditScope> action);
    public abstract virtual void OnEventSaved(Action`1<AuditScope> action);
    public abstract virtual void OnScopeCreated(Func`2<AuditScope, Task> action);
    public abstract virtual void OnEventSaving(Func`2<AuditScope, Task> action);
    public abstract virtual void OnEventSaved(Func`2<AuditScope, Task> action);
    public abstract virtual void OnScopeDisposed(Func`2<AuditScope, Task> action);
    public abstract virtual void OnScopeDisposed(Action`1<AuditScope> action);
}
public interface Audit.Core.ConfigurationApi.IBlockingCollectionProviderConfigurator {
    public abstract virtual IBlockingCollectionProviderExtraConfigurator AsQueue();
    public abstract virtual IBlockingCollectionProviderExtraConfigurator AsStack();
    public abstract virtual IBlockingCollectionProviderExtraConfigurator AsBag();
}
public interface Audit.Core.ConfigurationApi.IBlockingCollectionProviderExtraConfigurator {
    public abstract virtual IBlockingCollectionProviderExtraConfigurator WithCapacity(int capacity);
}
public interface Audit.Core.ConfigurationApi.IConditionalDataProviderConfigurator {
    public abstract virtual IConditionalDataProviderConfigurator When(Func`2<AuditEvent, bool> guardCondition, Func`2<AuditEvent, AuditDataProvider> dataProviderFactory);
    public abstract virtual IConditionalDataProviderConfigurator When(Func`2<AuditEvent, bool> guardCondition, Func`1<AuditDataProvider> dataProviderInitializer);
    public abstract virtual IConditionalDataProviderConfigurator When(Func`2<AuditEvent, bool> guardCondition, AuditDataProvider dataProvider);
    public abstract virtual void Otherwise(Func`2<AuditEvent, AuditDataProvider> dataProviderFactory);
    public abstract virtual void Otherwise(Func`1<AuditDataProvider> dataProviderInitializer);
    public abstract virtual void Otherwise(AuditDataProvider dataProvider);
}
public interface Audit.Core.ConfigurationApi.IConfigurator {
    public abstract virtual IConfigurator AuditDisabled(bool auditDisabled);
    public abstract virtual IConfigurator JsonAdapter(IJsonAdapter adapter);
    public abstract virtual IConfigurator JsonAdapter();
    public abstract virtual IConfigurator IncludeStackTrace(bool includeStackTrace);
    public abstract virtual ICreationPolicyConfigurator UseNullProvider();
    public abstract virtual ICreationPolicyConfigurator UseDynamicProvider(Action`1<IDynamicDataProviderConfigurator> config);
    public abstract virtual ICreationPolicyConfigurator UseDynamicAsyncProvider(Action`1<IDynamicAsyncDataProviderConfigurator> config);
    public abstract virtual ICreationPolicyConfigurator UseFileLogProvider(Action`1<IFileLogProviderConfigurator> config);
    public abstract virtual ICreationPolicyConfigurator UseEventLogProvider(string logName, string sourcePath, string machineName, Func`2<AuditEvent, string> messageBuilder);
    public abstract virtual ICreationPolicyConfigurator UseEventLogProvider(Action`1<IEventLogProviderConfigurator> config);
    public abstract virtual ICreationPolicyConfigurator UseCustomProvider(AuditDataProvider provider);
    public abstract virtual ICreationPolicyConfigurator Use(Action`1<IDynamicDataProviderConfigurator> config);
    public abstract virtual ICreationPolicyConfigurator UseDeferredFactory(Func`2<AuditEvent, AuditDataProvider> dataProviderFactory);
    public abstract virtual ICreationPolicyConfigurator UseLazyFactory(Func`1<AuditDataProvider> dataProviderInitializer);
    public abstract virtual ICreationPolicyConfigurator UseConditional(Action`1<IConditionalDataProviderConfigurator> config);
    public abstract virtual ICreationPolicyConfigurator Use(AuditDataProvider provider);
    public abstract virtual ICreationPolicyConfigurator UseInMemoryProvider();
    public abstract virtual ICreationPolicyConfigurator UseInMemoryProvider(InMemoryDataProvider& dataProvider);
    public abstract virtual ICreationPolicyConfigurator UseInMemoryBlockingCollectionProvider(Action`1<IBlockingCollectionProviderConfigurator> config);
    public abstract virtual ICreationPolicyConfigurator UseInMemoryBlockingCollectionProvider();
}
public interface Audit.Core.ConfigurationApi.ICreationPolicyConfigurator {
    public abstract virtual IActionConfigurator WithCreationPolicy(EventCreationPolicy policy);
    public abstract virtual IActionConfigurator WithInsertOnEndCreationPolicy();
    public abstract virtual IActionConfigurator WithInsertOnStartInsertOnEndCreationPolicy();
    public abstract virtual IActionConfigurator WithInsertOnStartReplaceOnEndCreationPolicy();
    public abstract virtual IActionConfigurator WithManualCreationPolicy();
}
public interface Audit.Core.ConfigurationApi.IDynamicAsyncDataProviderConfigurator {
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnInsert(Func`2<AuditEvent, Task`1<object>> insertAction);
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnInsert(Func`3<AuditEvent, CancellationToken, Task> insertAction);
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnInsert(Func`2<AuditEvent, Task> insertAction);
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnInsert(Func`3<AuditEvent, CancellationToken, Task`1<object>> insertAction);
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnReplace(Func`3<object, AuditEvent, Task> replaceAction);
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnReplace(Func`4<object, AuditEvent, CancellationToken, Task> replaceAction);
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnInsertAndReplace(Func`2<AuditEvent, Task> insertReplaceAction);
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnInsertAndReplace(Func`4<object, AuditEvent, CancellationToken, Task> insertReplaceAction);
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnInsertAndReplace(Func`3<AuditEvent, CancellationToken, Task> insertReplaceAction);
    public abstract virtual IDynamicAsyncDataProviderConfigurator OnInsertAndReplace(Func`3<object, AuditEvent, Task> insertReplaceAction);
}
public interface Audit.Core.ConfigurationApi.IDynamicDataProviderConfigurator {
    public abstract virtual IDynamicDataProviderConfigurator OnInsert(Func`2<AuditEvent, object> insertFunction);
    public abstract virtual IDynamicDataProviderConfigurator OnInsert(Action`1<AuditEvent> insertAction);
    public abstract virtual IDynamicDataProviderConfigurator OnReplace(Action`2<object, AuditEvent> replaceAction);
    public abstract virtual IDynamicDataProviderConfigurator OnInsertAndReplace(Action`1<AuditEvent> insertReplaceAction);
    public abstract virtual IDynamicDataProviderConfigurator OnInsertAndReplace(Action`2<object, AuditEvent> insertReplaceAction);
}
public interface Audit.Core.ConfigurationApi.IEventLogProviderConfigurator {
    public abstract virtual IEventLogProviderConfigurator LogName(string logName);
    public abstract virtual IEventLogProviderConfigurator LogName(Func`2<AuditEvent, string> logName);
    public abstract virtual IEventLogProviderConfigurator SourcePath(string sourcePath);
    public abstract virtual IEventLogProviderConfigurator SourcePath(Func`2<AuditEvent, string> sourcePath);
    public abstract virtual IEventLogProviderConfigurator MachineName(string machineName);
    public abstract virtual IEventLogProviderConfigurator MachineName(Func`2<AuditEvent, string> machineName);
    public abstract virtual IEventLogProviderConfigurator MessageBuilder(Func`2<AuditEvent, string> messageBuilder);
}
public interface Audit.Core.ConfigurationApi.IFileLogProviderConfigurator {
    public abstract virtual IFileLogProviderConfigurator Directory(string directoryPath);
    public abstract virtual IFileLogProviderConfigurator DirectoryBuilder(Func`2<AuditEvent, string> directoryPathBuilder);
    public abstract virtual IFileLogProviderConfigurator FilenamePrefix(string filenamePrefix);
    public abstract virtual IFileLogProviderConfigurator FilenameBuilder(Func`2<AuditEvent, string> filenameBuilder);
}
public class Audit.Core.DefaultSystemClock : object {
    public sealed virtual DateTime GetCurrentDateTime();
}
public enum Audit.Core.EventCreationPolicy : Enum {
    public int value__;
    public static EventCreationPolicy Manual;
    public static EventCreationPolicy InsertOnEnd;
    public static EventCreationPolicy InsertOnStartReplaceOnEnd;
    public static EventCreationPolicy InsertOnStartInsertOnEnd;
}
[ExtensionAttribute]
public static class Audit.Core.Extensions.ExceptionExtensions : object {
    [ExtensionAttribute]
public static string GetExceptionInfo(Exception exception);
}
[ExtensionAttribute]
public static class Audit.Core.Extensions.TypeExtensions : object {
    private static Regex AnonymousTypeRegex;
    private static string AnonymousReplacementString;
    private static TypeExtensions();
    [ExtensionAttribute]
public static string GetFullTypeName(Type type);
}
public interface Audit.Core.IAuditOutput {
    public Dictionary`2<string, object> CustomFields { get; public set; }
    public abstract virtual Dictionary`2<string, object> get_CustomFields();
    public abstract virtual void set_CustomFields(Dictionary`2<string, object> value);
    public abstract virtual string ToJson();
}
public interface Audit.Core.IAuditScope {
    public AuditDataProvider DataProvider { get; }
    public AuditEvent Event { get; }
    public EventCreationPolicy EventCreationPolicy { get; }
    public IDictionary`2<string, object> Items { get; }
    public object EventId { get; }
    public string EventType { get; public set; }
    public SaveMode SaveMode { get; }
    public abstract virtual AuditDataProvider get_DataProvider();
    public abstract virtual AuditEvent get_Event();
    public abstract virtual EventCreationPolicy get_EventCreationPolicy();
    public abstract virtual IDictionary`2<string, object> get_Items();
    public abstract virtual object get_EventId();
    public abstract virtual string get_EventType();
    public abstract virtual void set_EventType(string value);
    public abstract virtual SaveMode get_SaveMode();
    public abstract virtual void Comment(string text);
    public abstract virtual void Comment(string format, Object[] args);
    public abstract virtual void Discard();
    public abstract virtual void Save();
    public abstract virtual Task SaveAsync(CancellationToken cancellationToken);
    public abstract virtual void SetCustomField(string fieldName, TC value, bool serialize);
    public abstract virtual void SetTargetGetter(Func`1<object> targetGetter);
    public abstract virtual T EventAs();
    public abstract virtual T GetItem(string key);
}
public interface Audit.Core.IAuditScopeFactory {
    public abstract virtual IAuditScope Create(AuditScopeOptions options);
    public abstract virtual Task`1<IAuditScope> CreateAsync(AuditScopeOptions options, CancellationToken cancellationToken);
    public abstract virtual IAuditScope Create(Action`1<IAuditScopeOptionsConfigurator> config);
    public abstract virtual Task`1<IAuditScope> CreateAsync(Action`1<IAuditScopeOptionsConfigurator> config, CancellationToken cancellationToken);
}
public interface Audit.Core.IAuditScopeOptionsConfigurator {
    public abstract virtual IAuditScopeOptionsConfigurator EventType(string eventType);
    public abstract virtual IAuditScopeOptionsConfigurator Target(Func`1<object> targetGetter);
    public abstract virtual IAuditScopeOptionsConfigurator ExtraFields(object extraFields);
    public abstract virtual IAuditScopeOptionsConfigurator CreationPolicy(EventCreationPolicy creationPolicy);
    public abstract virtual IAuditScopeOptionsConfigurator DataProvider(AuditDataProvider dataProvider);
    public abstract virtual IAuditScopeOptionsConfigurator DataProviderDeferredFactory(Func`2<AuditEvent, AuditDataProvider> dataProviderFactory);
    public abstract virtual IAuditScopeOptionsConfigurator DataProviderLazyFactory(Func`1<AuditDataProvider> dataProviderFactory);
    public abstract virtual IAuditScopeOptionsConfigurator IsCreateAndSave(bool isCreateAndSave);
    public abstract virtual IAuditScopeOptionsConfigurator AuditEvent(AuditEvent auditEvent);
    public abstract virtual IAuditScopeOptionsConfigurator SkipExtraFrames(int extraFrames);
    public abstract virtual IAuditScopeOptionsConfigurator CallingMethod(MethodBase method);
    public abstract virtual IAuditScopeOptionsConfigurator IncludeStackTrace(bool includeStackTrace);
    public abstract virtual IAuditScopeOptionsConfigurator ExcludeEnvironmentInfo(bool excludeEnvironmentInfo);
    public abstract virtual IAuditScopeOptionsConfigurator SystemClock(ISystemClock systemClock);
    public abstract virtual IAuditScopeOptionsConfigurator WithItem(string key, object value);
}
public interface Audit.Core.IJsonAdapter {
    public abstract virtual string Serialize(object value);
    public abstract virtual T Deserialize(string json);
    public abstract virtual object Deserialize(string json, Type type);
    public abstract virtual Task SerializeAsync(Stream stream, object value, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    public abstract virtual T ToObject(object value);
}
public interface Audit.Core.ISystemClock {
    public abstract virtual DateTime GetCurrentDateTime();
}
public class Audit.Core.JsonAdapter : object {
    public sealed virtual string Serialize(object value);
    public sealed virtual T Deserialize(string json);
    public sealed virtual object Deserialize(string json, Type type);
    [AsyncStateMachineAttribute("Audit.Core.JsonAdapter/<SerializeAsync>d__3")]
public sealed virtual Task SerializeAsync(Stream stream, object value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.Core.JsonAdapter/<DeserializeAsync>d__4`1")]
public sealed virtual Task`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual T ToObject(object value);
}
internal static class Audit.Core.PlatformHelper : object {
    private static Lazy`1<bool> IsRunningOnMonoValue;
    private static PlatformHelper();
    public static bool IsRunningOnMono();
}
public class Audit.Core.Providers.BlockingCollectionDataProvider : AuditDataProvider {
    private BlockingCollection`1<AuditEvent> _events;
    public int Count { get; }
    public BlockingCollectionDataProvider(Action`1<IBlockingCollectionProviderConfigurator> config);
    public BlockingCollectionDataProvider(IProducerConsumerCollection`1<AuditEvent> collection, Nullable`1<int> capacity);
    public int get_Count();
    public virtual object InsertEvent(AuditEvent auditEvent);
    public virtual Task`1<object> InsertEventAsync(AuditEvent auditEvent, CancellationToken cancellationToken);
    public IList`1<AuditEvent> GetAllEvents();
    public AuditEvent Take(CancellationToken cancellationToken);
    public Task`1<AuditEvent> TakeAsync(CancellationToken cancellationToken);
    public AuditEvent TryTake(int millisecondsTimeout, CancellationToken cancellationToken);
    public IEnumerable`1<AuditEvent> GetConsumingEnumerable(CancellationToken cancellationToken);
    public BlockingCollection`1<AuditEvent> GetBlockingCollection();
}
public class Audit.Core.Providers.DynamicAsyncDataProvider : AuditDataProvider {
    private List`1<Func`3<AuditEvent, CancellationToken, Task`1<object>>> _onInsert;
    private List`1<Func`4<object, AuditEvent, CancellationToken, Task>> _onReplace;
    public DynamicAsyncDataProvider(Action`1<IDynamicAsyncDataProviderConfigurator> config);
    public void AttachOnInsert(Func`2<AuditEvent, Task`1<object>> insertFunction);
    public void AttachOnInsert(Func`3<AuditEvent, CancellationToken, Task`1<object>> insertFunction);
    public void AttachOnInsert(Func`2<AuditEvent, Task> insertAction);
    public void AttachOnInsert(Func`3<AuditEvent, CancellationToken, Task> insertAction);
    public void AttachOnReplace(Func`3<object, AuditEvent, Task> replaceAction);
    public void AttachOnReplace(Func`4<object, AuditEvent, CancellationToken, Task> replaceAction);
    public void AttachOnInsertAndReplace(Func`2<AuditEvent, Task> action);
    public void AttachOnInsertAndReplace(Func`3<AuditEvent, CancellationToken, Task> action);
    public void AttachOnInsertAndReplace(Func`3<object, AuditEvent, Task> action);
    public void AttachOnInsertAndReplace(Func`4<object, AuditEvent, CancellationToken, Task> action);
    [AsyncStateMachineAttribute("Audit.Core.Providers.DynamicAsyncDataProvider/<InsertEventAsync>d__14")]
public virtual Task`1<object> InsertEventAsync(AuditEvent auditEvent, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.Core.Providers.DynamicAsyncDataProvider/<ReplaceEventAsync>d__15")]
public virtual Task ReplaceEventAsync(object eventId, AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual object InsertEvent(AuditEvent auditEvent);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
}
public class Audit.Core.Providers.DynamicDataProvider : AuditDataProvider {
    private List`1<Func`2<AuditEvent, object>> _onInsert;
    private List`1<Action`2<object, AuditEvent>> _onReplace;
    public DynamicDataProvider(Action`1<IDynamicDataProviderConfigurator> config);
    public void AttachOnInsert(Func`2<AuditEvent, object> insertFunction);
    public void AttachOnInsert(Action`1<AuditEvent> insertAction);
    public void AttachOnReplace(Action`2<object, AuditEvent> replaceAction);
    public void AttachOnInsertAndReplace(Action`1<AuditEvent> action);
    public void AttachOnInsertAndReplace(Action`2<object, AuditEvent> action);
    public virtual object InsertEvent(AuditEvent auditEvent);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
}
public class Audit.Core.Providers.EventLogDataProvider : AuditDataProvider {
    [CompilerGeneratedAttribute]
private Setting`1<string> <LogName>k__BackingField;
    [CompilerGeneratedAttribute]
private Setting`1<string> <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuditEvent, string> <MessageBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Setting`1<string> <MachineName>k__BackingField;
    public Setting`1<string> LogName { get; public set; }
    public Setting`1<string> SourcePath { get; public set; }
    public Func`2<AuditEvent, string> MessageBuilder { get; public set; }
    public Setting`1<string> MachineName { get; public set; }
    public EventLogDataProvider(Action`1<IEventLogProviderConfigurator> config);
    [CompilerGeneratedAttribute]
public Setting`1<string> get_LogName();
    [CompilerGeneratedAttribute]
public void set_LogName(Setting`1<string> value);
    [CompilerGeneratedAttribute]
public Setting`1<string> get_SourcePath();
    [CompilerGeneratedAttribute]
public void set_SourcePath(Setting`1<string> value);
    [CompilerGeneratedAttribute]
public Func`2<AuditEvent, string> get_MessageBuilder();
    [CompilerGeneratedAttribute]
public void set_MessageBuilder(Func`2<AuditEvent, string> value);
    [CompilerGeneratedAttribute]
public Setting`1<string> get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(Setting`1<string> value);
    public virtual object InsertEvent(AuditEvent auditEvent);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
}
public class Audit.Core.Providers.FileDataProvider : AuditDataProvider {
    [CompilerGeneratedAttribute]
private Func`2<AuditEvent, string> <FilenameBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Setting`1<string> <FilenamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Setting`1<string> <DirectoryPath>k__BackingField;
    public Func`2<AuditEvent, string> FilenameBuilder { get; public set; }
    public Setting`1<string> FilenamePrefix { get; public set; }
    public Setting`1<string> DirectoryPath { get; public set; }
    public FileDataProvider(Action`1<IFileLogProviderConfigurator> config);
    [CompilerGeneratedAttribute]
public Func`2<AuditEvent, string> get_FilenameBuilder();
    [CompilerGeneratedAttribute]
public void set_FilenameBuilder(Func`2<AuditEvent, string> value);
    [CompilerGeneratedAttribute]
public Setting`1<string> get_FilenamePrefix();
    [CompilerGeneratedAttribute]
public void set_FilenamePrefix(Setting`1<string> value);
    [CompilerGeneratedAttribute]
public Setting`1<string> get_DirectoryPath();
    [CompilerGeneratedAttribute]
public void set_DirectoryPath(Setting`1<string> value);
    public virtual object InsertEvent(AuditEvent auditEvent);
    [AsyncStateMachineAttribute("Audit.Core.Providers.FileDataProvider/<InsertEventAsync>d__15")]
public virtual Task`1<object> InsertEventAsync(AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual void ReplaceEvent(object path, AuditEvent auditEvent);
    public virtual T GetEvent(object path);
    [AsyncStateMachineAttribute("Audit.Core.Providers.FileDataProvider/<ReplaceEventAsync>d__18")]
public virtual Task ReplaceEventAsync(object path, AuditEvent auditEvent, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.Core.Providers.FileDataProvider/<GetEventAsync>d__19`1")]
public virtual Task`1<T> GetEventAsync(object path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.Core.Providers.FileDataProvider/<SaveFileAsync>d__20")]
private Task SaveFileAsync(string fullPath, AuditEvent auditEvent, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Audit.Core.Providers.FileDataProvider/<GetFromFileAsync>d__21`1")]
private Task`1<T> GetFromFileAsync(string fullPath, CancellationToken cancellationToken);
    private string GetFilePath(AuditEvent auditEvent);
}
public class Audit.Core.Providers.InMemoryDataProvider : AuditDataProvider {
    private List`1<AuditEvent> _events;
    private object _lock;
    public virtual object InsertEvent(AuditEvent auditEvent);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
    public virtual T GetEvent(object eventId);
    public IList`1<AuditEvent> GetAllEvents();
    public IList`1<T> GetAllEventsOfType();
    public void ClearEvents();
}
public class Audit.Core.Providers.NullDataProvider : AuditDataProvider {
    public virtual object InsertEvent(AuditEvent auditEvent);
    public virtual Task`1<object> InsertEventAsync(AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
    public virtual Task ReplaceEventAsync(object eventId, AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual T GetEvent(object eventId);
    public virtual Task`1<T> GetEventAsync(object eventId, CancellationToken cancellationToken);
}
public class Audit.Core.Providers.Wrappers.ConditionalDataProvider : AuditDataProvider {
    [CompilerGeneratedAttribute]
private List`1<GuardCondition> <GuardConditions>k__BackingField;
    public List`1<GuardCondition> GuardConditions { get; public set; }
    public ConditionalDataProvider(Action`1<IConditionalDataProviderConfigurator> config);
    [CompilerGeneratedAttribute]
public List`1<GuardCondition> get_GuardConditions();
    [CompilerGeneratedAttribute]
public void set_GuardConditions(List`1<GuardCondition> value);
    protected virtual AuditDataProvider GetDataProvider(AuditEvent auditEvent);
    public virtual object InsertEvent(AuditEvent auditEvent);
    public virtual Task`1<object> InsertEventAsync(AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
    public virtual Task ReplaceEventAsync(object eventId, AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual object CloneValue(T value, AuditEvent auditEvent);
    public virtual T GetEvent(object eventId);
    public virtual Task`1<T> GetEventAsync(object eventId, CancellationToken cancellationToken);
}
public class Audit.Core.Providers.Wrappers.DeferredDataProvider : AuditDataProvider {
    private Func`2<AuditEvent, AuditDataProvider> _factory;
    unknown Func`2<AuditEvent, AuditDataProvider> Factory {public set; }
    public DeferredDataProvider(Func`2<AuditEvent, AuditDataProvider> dataProviderFactory);
    public void set_Factory(Func`2<AuditEvent, AuditDataProvider> value);
    protected virtual AuditDataProvider GetDataProvider(AuditEvent auditEvent);
    public virtual object InsertEvent(AuditEvent auditEvent);
    public virtual Task`1<object> InsertEventAsync(AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
    public virtual Task ReplaceEventAsync(object eventId, AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual object CloneValue(T value, AuditEvent auditEvent);
    public virtual T GetEvent(object eventId);
    public virtual Task`1<T> GetEventAsync(object eventId, CancellationToken cancellationToken);
}
public class Audit.Core.Providers.Wrappers.LazyDataProvider : AuditDataProvider {
    private Lazy`1<AuditDataProvider> _factory;
    unknown Func`1<AuditDataProvider> Factory {public set; }
    public LazyDataProvider(Func`1<AuditDataProvider> dataProviderFactory);
    public void set_Factory(Func`1<AuditDataProvider> value);
    protected virtual AuditDataProvider GetDataProvider();
    public virtual object InsertEvent(AuditEvent auditEvent);
    public virtual Task`1<object> InsertEventAsync(AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual void ReplaceEvent(object eventId, AuditEvent auditEvent);
    public virtual Task ReplaceEventAsync(object eventId, AuditEvent auditEvent, CancellationToken cancellationToken);
    public virtual object CloneValue(T value, AuditEvent auditEvent);
    public virtual T GetEvent(object eventId);
    public virtual Task`1<T> GetEventAsync(object eventId, CancellationToken cancellationToken);
}
public enum Audit.Core.SaveMode : Enum {
    public int value__;
    public static SaveMode Manual;
    public static SaveMode InsertOnStart;
    public static SaveMode InsertOnEnd;
    public static SaveMode ReplaceOnEnd;
}
[IsReadOnlyAttribute]
public class Audit.Core.Setting`1 : ValueType {
    private bool _isBuilder;
    private T _value;
    private Func`2<AuditEvent, T> _valueBuilder;
    public Setting`1(T value);
    public Setting`1(Func`2<AuditEvent, T> valueBuilder);
    public T GetValue(AuditEvent auditEvent);
    public T GetDefault();
    public static Setting`1<T> op_Implicit(T value);
    public static Setting`1<T> op_Implicit(Func`2<AuditEvent, T> func);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
