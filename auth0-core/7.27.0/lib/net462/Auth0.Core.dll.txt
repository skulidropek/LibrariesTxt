internal class Auth0.Core.ConcurrentRandom : object {
    private static Random SRandom;
    private static ConcurrentRandom();
    public int Next(int minValue, int maxValue);
}
[JsonConverterAttribute("Auth0.Core.Serialization.ApiErrorConverter")]
public class Auth0.Core.Exceptions.ApiError : object {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ExtraData>k__BackingField;
    [JsonPropertyAttribute("error")]
public string Error { get; public set; }
    [JsonPropertyAttribute("errorCode")]
public string ErrorCode { get; public set; }
    [JsonPropertyAttribute("message")]
public string Message { get; public set; }
    [JsonPropertyAttribute("extraData")]
public Dictionary`2<string, string> ExtraData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ExtraData();
    [CompilerGeneratedAttribute]
public void set_ExtraData(Dictionary`2<string, string> value);
    [AsyncStateMachineAttribute("Auth0.Core.Exceptions.ApiError/<Parse>d__16")]
public static Task`1<ApiError> Parse(HttpResponseMessage response);
    internal static ApiError Parse(string content);
}
public abstract class Auth0.Core.Exceptions.ApiException : Exception {
    protected ApiException(string message);
    protected ApiException(string message, Exception innerException);
    protected ApiException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [AsyncStateMachineAttribute("Auth0.Core.Exceptions.ApiException/<CreateSpecificExceptionAsync>d__4")]
public static Task`1<ApiException> CreateSpecificExceptionAsync(HttpResponseMessage response);
}
public class Auth0.Core.Exceptions.ErrorApiException : ApiException {
    [CompilerGeneratedAttribute]
private ApiError <ApiError>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    public ApiError ApiError { get; }
    public HttpStatusCode StatusCode { get; }
    public ErrorApiException(string message);
    public ErrorApiException(string message, Exception innerException);
    public ErrorApiException(HttpStatusCode statusCode, ApiError apiError);
    protected ErrorApiException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [CompilerGeneratedAttribute]
public ApiError get_ApiError();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [AsyncStateMachineAttribute("Auth0.Core.Exceptions.ErrorApiException/<CreateAsync>d__11")]
internal static Task`1<ErrorApiException> CreateAsync(HttpResponseMessage response);
}
public class Auth0.Core.Exceptions.RateLimit : object {
    private static DateTimeOffset epoch;
    [CompilerGeneratedAttribute]
private long <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Remaining>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Reset>k__BackingField;
    public long Limit { get; internal set; }
    public long Remaining { get; internal set; }
    public Nullable`1<DateTimeOffset> Reset { get; internal set; }
    private static RateLimit();
    [CompilerGeneratedAttribute]
public long get_Limit();
    [CompilerGeneratedAttribute]
internal void set_Limit(long value);
    [CompilerGeneratedAttribute]
public long get_Remaining();
    [CompilerGeneratedAttribute]
internal void set_Remaining(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Reset();
    [CompilerGeneratedAttribute]
internal void set_Reset(Nullable`1<DateTimeOffset> value);
    public static RateLimit Parse(HttpHeaders headers);
    private static long GetHeaderValue(HttpHeaders headers, string name);
}
public class Auth0.Core.Exceptions.RateLimitApiException : ApiException {
    [CompilerGeneratedAttribute]
private RateLimit <RateLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiError <ApiError>k__BackingField;
    public RateLimit RateLimit { get; }
    public ApiError ApiError { get; }
    public RateLimitApiException(string message);
    public RateLimitApiException(string message, Exception innerException);
    public RateLimitApiException(RateLimit rateLimit, ApiError apiError);
    protected RateLimitApiException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [CompilerGeneratedAttribute]
public RateLimit get_RateLimit();
    [CompilerGeneratedAttribute]
public ApiError get_ApiError();
    [AsyncStateMachineAttribute("Auth0.Core.Exceptions.RateLimitApiException/<CreateAsync>d__10")]
internal static Task`1<RateLimitApiException> CreateAsync(HttpResponseMessage response);
}
internal static class Auth0.Core.Http.Utils : object {
    internal static Byte[] Base64UrlDecode(string input);
    internal static string Base64UrlEncode(Byte[] input);
    internal static Uri BuildUri(string baseUrl, string resource, IDictionary`2<string, string> urlSegments, IDictionary`2<string, string> queryStrings, bool includeEmptyParameters);
    internal static string CombineUriParts(String[] uriParts);
}
internal class Auth0.Core.Serialization.ApiErrorConverter : JsonConverter {
    private Dictionary`2<string, string> _propertyMappings;
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
internal class Auth0.Core.Serialization.StringOrObjectAsStringConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
