[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Extensions.DependencyInjection.AnyKeyRegistrationSource : object {
    public bool IsAdapterForIndividualComponents { get; }
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    private static bool IsCollection(Type serviceType);
    private static bool IsGenericTypeDefinedBy(Type type, Type openGeneric);
    private static bool IsGenericListOrCollectionInterfaceType(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeConfigurationAdapter : object {
    private List`1<Action`1<ContainerBuilder>> _configurationActions;
    public IReadOnlyList`1<Action`1<ContainerBuilder>> ConfigurationActions { get; }
    public void Add(Action`1<ContainerBuilder> configurationAction);
    public IReadOnlyList`1<Action`1<ContainerBuilder>> get_ConfigurationActions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeServiceProviderFactory : object {
    private Action`1<ContainerBuilder> _containerConfigurationAction;
    private ILifetimeScope _rootLifetimeScope;
    private static Action`1<ContainerBuilder> FallbackConfigurationAction;
    public AutofacChildLifetimeScopeServiceProviderFactory(Func`1<ILifetimeScope> rootLifetimeScopeAccessor, Action`1<ContainerBuilder> configurationAction);
    public AutofacChildLifetimeScopeServiceProviderFactory(ILifetimeScope rootLifetimeScope, Action`1<ContainerBuilder> configurationAction);
    private static AutofacChildLifetimeScopeServiceProviderFactory();
    public sealed virtual AutofacChildLifetimeScopeConfigurationAdapter CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(AutofacChildLifetimeScopeConfigurationAdapter containerBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.Extensions.DependencyInjection.AutofacRegistration : object {
    [ExtensionAttribute]
public static void Populate(ContainerBuilder builder, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void Populate(ContainerBuilder builder, IEnumerable`1<ServiceDescriptor> descriptors, object lifetimeScopeTagForSingletons);
    private static void AddFromKeyedServiceParameterMiddleware(object sender, ComponentRegisteredEventArgs e);
    [ExtensionAttribute]
private static IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle> ConfigureServiceType(IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle> registrationBuilder, ServiceDescriptor descriptor);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle> ConfigureLifecycle(IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle> registrationBuilder, ServiceLifetime lifecycleKind, object lifetimeScopeTagForSingleton);
    private static void Register(ContainerBuilder builder, IEnumerable`1<ServiceDescriptor> descriptors, object lifetimeScopeTagForSingletons);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Extensions.DependencyInjection.AutofacServiceProvider : object {
    private ILifetimeScope _lifetimeScope;
    private bool _disposed;
    public ILifetimeScope LifetimeScope { get; }
    public AutofacServiceProvider(ILifetimeScope lifetimeScope);
    [NullableContextAttribute("2")]
public sealed virtual object GetKeyedService(Type serviceType, object serviceKey);
    public sealed virtual object GetRequiredKeyedService(Type serviceType, object serviceKey);
    public sealed virtual object GetRequiredService(Type serviceType);
    public sealed virtual bool IsKeyedService(Type serviceType, object serviceKey);
    public sealed virtual bool IsService(Type serviceType);
    public sealed virtual object GetService(Type serviceType);
    public ILifetimeScope get_LifetimeScope();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Autofac.Extensions.DependencyInjection.AutofacServiceProvider/<DisposeAsync>d__13")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory : object {
    private Action`1<ContainerBuilder> _configurationAction;
    private ContainerBuildOptions _containerBuildOptions;
    public AutofacServiceProviderFactory(ContainerBuildOptions containerBuildOptions, Action`1<ContainerBuilder> configurationAction);
    public AutofacServiceProviderFactory(Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ContainerBuilder CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(ContainerBuilder containerBuilder);
}
internal class Autofac.Extensions.DependencyInjection.AutofacServiceScope : object {
    private bool _disposed;
    [NullableAttribute("1")]
private AutofacServiceProvider _serviceProvider;
    [NullableAttribute("1")]
public IServiceProvider ServiceProvider { get; }
    [NullableContextAttribute("1")]
public AutofacServiceScope(ILifetimeScope lifetimeScope);
    [NullableContextAttribute("1")]
public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Autofac.Extensions.DependencyInjection.AutofacServiceScope/<DisposeAsync>d__7")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory : object {
    private ILifetimeScope _lifetimeScope;
    public AutofacServiceScopeFactory(ILifetimeScope lifetimeScope);
    public sealed virtual IServiceScope CreateScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Extensions.DependencyInjection.FromKeyedServicesAttributeExtensions : object {
    [ExtensionAttribute]
public static object ResolveParameter(FromKeyedServicesAttribute attribute, ParameterInfo parameter, IComponentContext context);
    [ExtensionAttribute]
public static bool CanResolveParameter(FromKeyedServicesAttribute attribute, ParameterInfo parameter, IComponentContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Extensions.DependencyInjection.KeyedServiceMiddleware : object {
    private static Parameter FromKeyedServicesParameter;
    [CompilerGeneratedAttribute]
private static KeyedServiceMiddleware <InstanceWithoutFromKeyedServicesParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private static KeyedServiceMiddleware <InstanceWithFromKeyedServicesParameter>k__BackingField;
    private bool _addFromKeyedServiceParameter;
    public static KeyedServiceMiddleware InstanceWithoutFromKeyedServicesParameter { get; }
    public static KeyedServiceMiddleware InstanceWithFromKeyedServicesParameter { get; }
    public PipelinePhase Phase { get; }
    public KeyedServiceMiddleware(bool addFromKeyedServiceParameter);
    private static KeyedServiceMiddleware();
    [CompilerGeneratedAttribute]
public static KeyedServiceMiddleware get_InstanceWithoutFromKeyedServicesParameter();
    [CompilerGeneratedAttribute]
public static KeyedServiceMiddleware get_InstanceWithFromKeyedServicesParameter();
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Extensions.DependencyInjection.KeyTypeConversionException : Exception {
    [CompilerGeneratedAttribute]
private Type <AttributeKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResolutionKeyType>k__BackingField;
    public Type AttributeKeyType { get; }
    public Type ResolutionKeyType { get; }
    public KeyTypeConversionException(Type resolutionKeyType, Type attributeKeyType);
    public KeyTypeConversionException(Type resolutionKeyType, Type attributeKeyType, string message);
    public KeyTypeConversionException(Type resolutionKeyType, Type attributeKeyType, Exception innerException);
    public KeyTypeConversionException(Type resolutionKeyType, Type attributeKeyType, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public Type get_AttributeKeyType();
    [CompilerGeneratedAttribute]
public Type get_ResolutionKeyType();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Extensions.DependencyInjection.KeyTypeConversionExceptionResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Message { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Extensions.DependencyInjection.KeyTypeManipulation : object {
    public static object ChangeToCompatibleType(object value, Type destinationType, ParameterInfo memberInfo);
    public static object ChangeToCompatibleType(object value, Type destinationType, MemberInfo memberInfo);
    [NullableContextAttribute("2")]
public static object ChangeToCompatibleType(object value, Type destinationType, TypeConverterAttribute converterAttribute);
    private static TypeConverter GetTypeConverterFromName(string converterTypeName);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Extensions.DependencyInjection.KeyTypeManipulationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string TypeConversionUnsupported { get; }
    internal static string TypeConverterAttributeTypeNotConverter { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_TypeConversionUnsupported();
    internal static string get_TypeConverterAttributeTypeNotConverter();
}
[ExtensionAttribute]
public static class Autofac.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddAutofac(IServiceCollection services, Action`1<ContainerBuilder> configurationAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Extensions.DependencyInjection.ServiceDescriptorExtensions : object {
    [ExtensionAttribute]
public static object NormalizedImplementationInstance(ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static Type NormalizedImplementationType(ServiceDescriptor descriptor);
}
[ExtensionAttribute]
public static class Autofac.Extensions.DependencyInjection.ServiceProviderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILifetimeScope GetAutofacRoot(IServiceProvider serviceProvider);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Extensions.DependencyInjection.ServiceProviderExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string WrongProviderType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_WrongProviderType();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
