[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Extras.Moq.AutoMock : object {
    private bool _disposed;
    private HashSet`1<Type> _createdServiceTypes;
    private HashSet`1<Type> _mockedServiceTypes;
    [CompilerGeneratedAttribute]
private IContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private MockRepository <MockRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerifyAll>k__BackingField;
    public IContainer Container { get; private set; }
    public MockRepository MockRepository { get; private set; }
    public bool VerifyAll { get; public set; }
    private AutoMock(MockBehavior behavior, Action`1<ContainerBuilder> beforeBuild);
    private AutoMock(MockRepository repository, Action`1<ContainerBuilder> beforeBuild);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public IContainer get_Container();
    [CompilerGeneratedAttribute]
private void set_Container(IContainer value);
    [CompilerGeneratedAttribute]
public MockRepository get_MockRepository();
    [CompilerGeneratedAttribute]
private void set_MockRepository(MockRepository value);
    [CompilerGeneratedAttribute]
public bool get_VerifyAll();
    [CompilerGeneratedAttribute]
public void set_VerifyAll(bool value);
    public static AutoMock GetFromRepository(MockRepository repository);
    public static AutoMock GetFromRepository(MockRepository repository, Action`1<ContainerBuilder> beforeBuild);
    public static AutoMock GetLoose();
    public static AutoMock GetLoose(Action`1<ContainerBuilder> beforeBuild);
    public static AutoMock GetStrict();
    public static AutoMock GetStrict(Action`1<ContainerBuilder> beforeBuild);
    public T Create(Parameter[] parameters);
    public object Create(Type serviceType, Parameter[] parameters);
    public sealed virtual void Dispose();
    public Mock`1<T> Mock(Parameter[] parameters);
    private object Create(bool isMock, Type serviceType, Parameter[] parameters);
    private T Create(bool isMock, Parameter[] parameters);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Autofac.Extras.Moq.MockRegistrationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TMocked, SimpleActivatorData, SingleRegistrationStyle> RegisterMock(ContainerBuilder builder, Mock`1<TMocked> mock);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Extras.Moq.MoqRegistrationHandler : object {
    private ISet`1<Type> _createdServiceTypes;
    private ISet`1<Type> _mockedServiceTypes;
    private MethodInfo _createMethod;
    public bool IsAdapterForIndividualComponents { get; }
    public MoqRegistrationHandler(ISet`1<Type> createdServiceTypes, ISet`1<Type> mockedServiceTypes);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    private static bool IsIEnumerable(IServiceWithType typedService);
    private static bool IsIStartable(IServiceWithType typedService);
    private static bool IsInsideAutofac(IServiceWithType typedService);
    private static bool ServiceCompatibleWithAutomaticDirectRegistration(IServiceWithType typedService);
    private static bool ServiceCompatibleWithMockRepositoryCreate(IServiceWithType typedService);
    private static bool ShouldMockService(IServiceWithType typedService);
    private bool ServiceManuallyCreated(IServiceWithType typedService);
    private static bool IsLazy(IServiceWithType typedService);
    private static bool IsOwned(IServiceWithType typedService);
    private static bool IsMeta(IServiceWithType typedService);
    private object CreateMock(IComponentContext context, TypedService typedService);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
