internal class Autofac.Integration.Mvc.ActionFilterOverride : object {
    private IActionFilter _wrappedFilter;
    public Type FiltersToOverride { get; }
    public ActionFilterOverride(IActionFilter wrappedFilter);
    public sealed virtual Type get_FiltersToOverride();
    public sealed virtual void OnActionExecuted(ActionExecutedContext filterContext);
    public sealed virtual void OnActionExecuting(ActionExecutingContext filterContext);
}
internal class Autofac.Integration.Mvc.AuthenticationFilterOverride : object {
    private IAuthenticationFilter _wrappedFilter;
    public Type FiltersToOverride { get; }
    public AuthenticationFilterOverride(IAuthenticationFilter wrappedFilter);
    public sealed virtual Type get_FiltersToOverride();
    public sealed virtual void OnAuthentication(AuthenticationContext filterContext);
    public sealed virtual void OnAuthenticationChallenge(AuthenticationChallengeContext filterContext);
}
internal class Autofac.Integration.Mvc.AuthorizationFilterOverride : object {
    private IAuthorizationFilter _wrappedFilter;
    public Type FiltersToOverride { get; }
    public AuthorizationFilterOverride(IAuthorizationFilter wrappedFilter);
    public sealed virtual Type get_FiltersToOverride();
    public sealed virtual void OnAuthorization(AuthorizationContext filterContext);
}
public class Autofac.Integration.Mvc.AutofacDependencyResolver : object {
    private static Func`1<AutofacDependencyResolver> _resolverAccessor;
    private Action`1<ContainerBuilder> _configurationAction;
    private ILifetimeScope _container;
    private ILifetimeScopeProvider _lifetimeScopeProvider;
    public static AutofacDependencyResolver Current { get; }
    public ILifetimeScope ApplicationContainer { get; }
    public ILifetimeScope RequestLifetimeScope { get; }
    public AutofacDependencyResolver(ILifetimeScope container);
    public AutofacDependencyResolver(ILifetimeScope container, Action`1<ContainerBuilder> configurationAction);
    public AutofacDependencyResolver(ILifetimeScope container, ILifetimeScopeProvider lifetimeScopeProvider);
    public AutofacDependencyResolver(ILifetimeScope container, ILifetimeScopeProvider lifetimeScopeProvider, Action`1<ContainerBuilder> configurationAction);
    private static AutofacDependencyResolver();
    public static AutofacDependencyResolver get_Current();
    public ILifetimeScope get_ApplicationContainer();
    public ILifetimeScope get_RequestLifetimeScope();
    public static void SetAutofacDependencyResolverAccessor(Func`1<AutofacDependencyResolver> accessor);
    public virtual object GetService(Type serviceType);
    public virtual IEnumerable`1<object> GetServices(Type serviceType);
    private static AutofacDependencyResolver DefaultResolverAccessor();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Integration.Mvc.AutofacDependencyResolverResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AutofacDependencyResolverNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AutofacDependencyResolverNotFound();
}
public class Autofac.Integration.Mvc.AutofacFilterProvider : FilterAttributeFilterProvider {
    internal static string ActionFilterMetadataKey;
    internal static string ActionFilterOverrideMetadataKey;
    internal static string AuthenticationFilterMetadataKey;
    internal static string AuthenticationFilterOverrideMetadataKey;
    internal static string AuthorizationFilterMetadataKey;
    internal static string AuthorizationFilterOverrideMetadataKey;
    internal static string ExceptionFilterMetadataKey;
    internal static string ExceptionFilterOverrideMetadataKey;
    internal static string ResultFilterMetadataKey;
    internal static string ResultFilterOverrideMetadataKey;
    public virtual IEnumerable`1<Filter> GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    private static bool FilterMatchesAction(FilterContext filterContext, MethodInfo methodInfo, FilterMetadata metadata);
    private static bool FilterMatchesController(FilterContext filterContext, FilterMetadata metadata);
    private static void ResolveActionScopedEmptyOverrideFilters(FilterContext filterContext, Func`2<T, MethodInfo> methodSelector);
    private static void ResolveActionScopedFilter(FilterContext filterContext, MethodInfo methodInfo, string metadataKey, Func`2<TFilter, TFilter> wrapperFactory);
    private static void ResolveActionScopedFilterOverrides(FilterContext filterContext, Func`2<T, MethodInfo> methodSelector);
    private static void ResolveActionScopedFilters(FilterContext filterContext, Func`2<T, MethodInfo> methodSelector);
    private static void ResolveActionScopedOverrideFilter(FilterContext filterContext, MethodInfo methodInfo, string metadataKey);
    private static void ResolveControllerScopedEmptyOverrideFilters(FilterContext filterContext);
    private static void ResolveControllerScopedFilter(FilterContext filterContext, string metadataKey, Func`2<TFilter, TFilter> wrapperFactory);
    private static void ResolveControllerScopedFilterOverrides(FilterContext filterContext);
    private static void ResolveControllerScopedFilters(FilterContext filterContext);
    private static void ResolveControllerScopedOverrideFilter(FilterContext filterContext, string metadataKey);
}
public class Autofac.Integration.Mvc.AutofacModelBinderProvider : object {
    internal static string MetadataKey;
    public sealed virtual IModelBinder GetBinder(Type modelType);
}
internal class Autofac.Integration.Mvc.AutofacOverrideFilter : object {
    [CompilerGeneratedAttribute]
private Type <FiltersToOverride>k__BackingField;
    public Type FiltersToOverride { get; private set; }
    public AutofacOverrideFilter(Type filtersToOverride);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_FiltersToOverride();
    [CompilerGeneratedAttribute]
private void set_FiltersToOverride(Type value);
}
public class Autofac.Integration.Mvc.AutofacWebTypesModule : Module {
    protected virtual void Load(ContainerBuilder builder);
}
internal class Autofac.Integration.Mvc.ExceptionFilterOverride : object {
    private IExceptionFilter _wrappedFilter;
    public Type FiltersToOverride { get; }
    public ExceptionFilterOverride(IExceptionFilter wrappedFilter);
    public sealed virtual Type get_FiltersToOverride();
    public sealed virtual void OnException(ExceptionContext filterContext);
}
public class Autofac.Integration.Mvc.ExtensibleActionInvoker : AsyncControllerActionInvoker {
    private IPropertySelector _propertySelector;
    public ExtensibleActionInvoker(IPropertySelector propertySelector);
    protected virtual object GetParameterValue(ControllerContext controllerContext, ParameterDescriptor parameterDescriptor);
}
internal class Autofac.Integration.Mvc.FilterMetadata : object {
    [CompilerGeneratedAttribute]
private Type <ControllerType>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterScope <FilterScope>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [DefaultValueAttribute("")]
public Type ControllerType { get; public set; }
    [DefaultValueAttribute]
public FilterScope FilterScope { get; public set; }
    [DefaultValueAttribute("")]
public MethodInfo MethodInfo { get; public set; }
    [DefaultValueAttribute("-1")]
public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_ControllerType();
    [CompilerGeneratedAttribute]
public void set_ControllerType(Type value);
    [CompilerGeneratedAttribute]
public FilterScope get_FilterScope();
    [CompilerGeneratedAttribute]
public void set_FilterScope(FilterScope value);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
}
public interface Autofac.Integration.Mvc.ILifetimeScopeProvider {
    public ILifetimeScope ApplicationContainer { get; }
    public abstract virtual ILifetimeScope GetLifetimeScope(Action`1<ContainerBuilder> configurationAction);
    public abstract virtual ValueTask EndLifetimeScope();
    public abstract virtual ILifetimeScope get_ApplicationContainer();
}
[AttributeUsageAttribute("4")]
public class Autofac.Integration.Mvc.ModelBinderTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <TargetTypes>k__BackingField;
    public IEnumerable`1<Type> TargetTypes { get; private set; }
    public ModelBinderTypeAttribute(Type[] targetTypes);
    public ModelBinderTypeAttribute(Type targetType);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Type> get_TargetTypes();
    [CompilerGeneratedAttribute]
private void set_TargetTypes(IEnumerable`1<Type> value);
}
[EditorBrowsableAttribute("1")]
public static class Autofac.Integration.Mvc.PreApplicationStartCode : object {
    private static bool _startWasCalled;
    public static void Start();
}
[ExtensionAttribute]
public static class Autofac.Integration.Mvc.RegistrationExtensions : object {
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsAuthenticationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsAuthenticationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsAuthenticationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsAuthenticationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsAuthorizationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsAuthorizationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsAuthorizationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsAuthorizationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsExceptionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsExceptionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsExceptionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsExceptionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> AsModelBinderForTypes(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registration, Type[] types);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsResultFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsResultFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsResultFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsResultFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector, int order);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> CacheInSession(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InjectActionInvoker(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registrationBuilder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InjectActionInvoker(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registrationBuilder, Service actionInvokerService);
    [ExtensionAttribute]
[ObsoleteAttribute("Instead of using the MVC-specific InstancePerHttpRequest, please switch to the InstancePerRequest shared registration extension from Autofac core.")]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> InstancePerHttpRequest(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Object[] lifetimeScopeTags);
    [ExtensionAttribute]
public static void OverrideActionFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideActionFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideAuthenticationFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideAuthenticationFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideAuthorizationFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideAuthorizationFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideExceptionFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideExceptionFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideResultFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideResultFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterControllers(ContainerBuilder builder, Assembly[] controllerAssemblies);
    [ExtensionAttribute]
public static void RegisterFilterProvider(ContainerBuilder builder);
    [ExtensionAttribute]
public static void RegisterModelBinderProvider(ContainerBuilder builder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterModelBinders(ContainerBuilder builder, Assembly[] modelBinderAssemblies);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, string metadataKey, int order);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, string metadataKey, Expression`1<Action`1<TController>> actionSelector, int order);
    private static void AsOverrideFor(ContainerBuilder builder, string metadataKey);
    private static void AsOverrideFor(ContainerBuilder builder, string metadataKey, Expression`1<Action`1<TController>> actionSelector);
    private static MethodInfo GetMethodInfo(LambdaExpression expression);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Integration.Mvc.RegistrationExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidActionExpress { get; }
    internal static string InvalidModelBinderType { get; }
    internal static string MustBeAssignableToFilterType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidActionExpress();
    internal static string get_InvalidModelBinderType();
    internal static string get_MustBeAssignableToFilterType();
}
internal class Autofac.Integration.Mvc.RequestLifetimeHttpModule : object {
    [CompilerGeneratedAttribute]
private static ILifetimeScopeProvider <LifetimeScopeProvider>k__BackingField;
    internal static ILifetimeScopeProvider LifetimeScopeProvider { get; private set; }
    [CompilerGeneratedAttribute]
internal static ILifetimeScopeProvider get_LifetimeScopeProvider();
    [CompilerGeneratedAttribute]
private static void set_LifetimeScopeProvider(ILifetimeScopeProvider value);
    public sealed virtual void Init(HttpApplication context);
    public sealed virtual void Dispose();
    public static void SetLifetimeScopeProvider(ILifetimeScopeProvider lifetimeScopeProvider);
    private static Task OnEndRequest(object sender, EventArgs e);
}
public class Autofac.Integration.Mvc.RequestLifetimeScopeProvider : object {
    private ILifetimeScope _container;
    public ILifetimeScope ApplicationContainer { get; }
    private static ILifetimeScope LifetimeScope { get; private set; }
    public RequestLifetimeScopeProvider(ILifetimeScope container);
    public sealed virtual ILifetimeScope get_ApplicationContainer();
    private static ILifetimeScope get_LifetimeScope();
    private static void set_LifetimeScope(ILifetimeScope value);
    public sealed virtual ILifetimeScope GetLifetimeScope(Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ValueTask EndLifetimeScope();
    protected virtual ILifetimeScope GetLifetimeScopeCore(Action`1<ContainerBuilder> configurationAction);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Integration.Mvc.RequestLifetimeScopeProviderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string HttpContextNotAvailable { get; }
    internal static string NullLifetimeScopeReturned { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_HttpContextNotAvailable();
    internal static string get_NullLifetimeScopeReturned();
}
internal class Autofac.Integration.Mvc.ResultFilterOverride : object {
    private IResultFilter _wrappedFilter;
    public Type FiltersToOverride { get; }
    public ResultFilterOverride(IResultFilter wrappedFilter);
    public sealed virtual Type get_FiltersToOverride();
    public sealed virtual void OnResultExecuted(ResultExecutedContext filterContext);
    public sealed virtual void OnResultExecuting(ResultExecutingContext filterContext);
}
public class Autofac.Integration.Mvc.ViewRegistrationSource : object {
    public bool IsAdapterForIndividualComponents { get; }
    [IteratorStateMachineAttribute("Autofac.Integration.Mvc.ViewRegistrationSource/<RegistrationsFor>d__0")]
public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    private static bool IsSupportedView(Type serviceType);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
