internal class Autofac.Integration.WebApi.AuthenticationFilterOverrideWrapper : AuthenticationFilterWrapper {
    [NullableAttribute("1")]
public Type FiltersToOverride { get; }
    [NullableContextAttribute("1")]
public AuthenticationFilterOverrideWrapper(HashSet`1<FilterMetadata> filterMetadata);
    [NullableContextAttribute("1")]
public sealed virtual Type get_FiltersToOverride();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Integration.WebApi.AuthenticationFilterWrapper : object {
    private HashSet`1<FilterMetadata> _allFilters;
    private bool System.Web.Http.Filters.IFilter.AllowMultiple { get; }
    public AuthenticationFilterWrapper(HashSet`1<FilterMetadata> filterMetadata);
    private sealed virtual override bool System.Web.Http.Filters.IFilter.get_AllowMultiple();
    [AsyncStateMachineAttribute("Autofac.Integration.WebApi.AuthenticationFilterWrapper/<AuthenticateAsync>d__4")]
public sealed virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Autofac.Integration.WebApi.AuthenticationFilterWrapper/<ChallengeAsync>d__5")]
public sealed virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
    private bool FilterMatchesMetadata(Meta`1<Lazy`1<IAutofacAuthenticationFilter>> filter);
}
[AttributeUsageAttribute("68")]
internal class Autofac.Integration.WebApi.AuthorizationFilterOverrideWrapper : AuthorizationFilterWrapper {
    [NullableAttribute("1")]
public Type FiltersToOverride { get; }
    [NullableContextAttribute("1")]
public AuthorizationFilterOverrideWrapper(HashSet`1<FilterMetadata> filterMetadata);
    [NullableContextAttribute("1")]
public sealed virtual Type get_FiltersToOverride();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
internal class Autofac.Integration.WebApi.AuthorizationFilterWrapper : AuthorizationFilterAttribute {
    private HashSet`1<FilterMetadata> _allFilters;
    public IEnumerable`1<FilterMetadata> FilterMetadata { get; }
    public AuthorizationFilterWrapper(HashSet`1<FilterMetadata> filterMetadata);
    public IEnumerable`1<FilterMetadata> get_FilterMetadata();
    [AsyncStateMachineAttribute("Autofac.Integration.WebApi.AuthorizationFilterWrapper/<OnAuthorizationAsync>d__4")]
public virtual Task OnAuthorizationAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    private bool FilterMatchesMetadata(Meta`1<Lazy`1<IAutofacAuthorizationFilter>> filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Integration.WebApi.AutofacActionFilterAdapter : object {
    private IAutofacActionFilter _legacyFilter;
    public AutofacActionFilterAdapter(IAutofacActionFilter legacyFilter);
    [AsyncStateMachineAttribute("Autofac.Integration.WebApi.AutofacActionFilterAdapter/<ExecuteActionFilterAsync>d__2")]
public sealed virtual Task`1<HttpResponseMessage> ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [AsyncStateMachineAttribute("Autofac.Integration.WebApi.AutofacActionFilterAdapter/<CallOnActionExecutedAsync>d__3")]
private Task`1<HttpResponseMessage> CallOnActionExecutedAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Autofac.Integration.WebApi.AutofacControllerConfigurationAttribute : Attribute {
    private static string InitializedKey;
    internal static string ClearServiceListKey;
    public sealed virtual void Initialize(HttpControllerSettings controllerSettings, HttpControllerDescriptor controllerDescriptor);
    private static void UpdateControllerService(ServicesContainer services, IComponentContext container, ControllerTypeKey serviceKey);
    private static void UpdateControllerServices(ServicesContainer services, IComponentContext container, ControllerTypeKey serviceKey);
    private static void UpdateControllerFormatters(ICollection`1<MediaTypeFormatter> collection, IComponentContext container, ControllerTypeKey serviceKey);
    private static bool ClearExistingServices(IDictionary`2<string, object> metadata);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Integration.WebApi.AutofacControllerConfigurationAttributeResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DependencyResolverMissing { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DependencyResolverMissing();
}
internal enum Autofac.Integration.WebApi.AutofacFilterCategory : Enum {
    public int value__;
    public static AutofacFilterCategory AuthorizationFilter;
    public static AutofacFilterCategory AuthorizationFilterOverride;
    public static AutofacFilterCategory AuthenticationFilter;
    public static AutofacFilterCategory AuthenticationFilterOverride;
    public static AutofacFilterCategory ActionFilter;
    public static AutofacFilterCategory ActionFilterOverride;
    public static AutofacFilterCategory ExceptionFilter;
    public static AutofacFilterCategory ExceptionFilterOverride;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Integration.WebApi.AutofacOverrideFilter : object {
    [CompilerGeneratedAttribute]
private Type <FiltersToOverride>k__BackingField;
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; private set; }
    public AutofacOverrideFilter(Type filtersToOverride);
    public sealed virtual bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_FiltersToOverride();
    [CompilerGeneratedAttribute]
private void set_FiltersToOverride(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Integration.WebApi.AutofacWebApiDependencyResolver : object {
    private bool _disposed;
    private IDependencyScope _rootDependencyScope;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ContainerBuilder> _configurationAction;
    [CompilerGeneratedAttribute]
private ILifetimeScope <Container>k__BackingField;
    public ILifetimeScope Container { get; }
    public AutofacWebApiDependencyResolver(ILifetimeScope container, Action`1<ContainerBuilder> configurationAction);
    public AutofacWebApiDependencyResolver(ILifetimeScope container);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public ILifetimeScope get_Container();
    public virtual object GetService(Type serviceType);
    public virtual IEnumerable`1<object> GetServices(Type serviceType);
    public sealed virtual IDependencyScope BeginScope();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Integration.WebApi.AutofacWebApiDependencyScope : object {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private ILifetimeScope <LifetimeScope>k__BackingField;
    public ILifetimeScope LifetimeScope { get; }
    public AutofacWebApiDependencyScope(ILifetimeScope lifetimeScope);
    [CompilerGeneratedAttribute]
public ILifetimeScope get_LifetimeScope();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IEnumerable`1<object> GetServices(Type serviceType);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Integration.WebApi.AutofacWebApiFilterProvider : object {
    private ILifetimeScope _rootLifetimeScope;
    private ActionDescriptorFilterProvider _filterProvider;
    internal static string FilterMetadataKey;
    public AutofacWebApiFilterProvider(ILifetimeScope lifetimeScope);
    public sealed virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
    private static void ResolveScopedNoopFilterOverrides(FilterContext filterContext, FilterScope scope, ILifetimeScope lifeTimeScope, HttpActionDescriptor descriptor);
    private static void ResolveAllScopedFilterOverrides(FilterContext filterContext, FilterScope scope, ILifetimeScope lifeTimeScope, HttpActionDescriptor descriptor);
    private static void ResolveAllScopedFilters(FilterContext filterContext, FilterScope scope, ILifetimeScope lifeTimeScope, HttpActionDescriptor descriptor);
    private static void ResolveScopedFilter(FilterContext filterContext, FilterScope scope, ILifetimeScope lifeTimeScope, HttpActionDescriptor descriptor, Func`2<HashSet`1<FilterMetadata>, TWrapper> wrapperFactory, AutofacFilterCategory filterCategory);
    private static void ResolveScopedOverrideFilter(FilterContext filterContext, FilterScope scope, AutofacFilterCategory filterCategory, ILifetimeScope lifeTimeScope, HttpActionDescriptor descriptor);
    private static bool MatchingFilterAlreadyAdded(FilterContext filterContext, AutofacFilterCategory filterCategory, ILifetimeScope lifeTimeScope, HttpActionDescriptor descriptor, FilterPredicateMetadata metadata);
    private static bool FilterMatches(FilterScope scope, AutofacFilterCategory filterCategory, ILifetimeScope lifeTimeScope, HttpActionDescriptor descriptor, FilterPredicateMetadata metadata);
    private static bool FilterMatchesAndNotAlreadyAdded(FilterContext filterContext, FilterScope scope, AutofacFilterCategory filterCategory, ILifetimeScope lifeTimeScope, FilterPredicateMetadata metadata, HttpActionDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Integration.WebApi.AutofacWebApiModelBinderProvider : ModelBinderProvider {
    internal static string MetadataKey;
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class Autofac.Integration.WebApi.ContinuationActionFilterOverrideWrapper : ContinuationActionFilterWrapper {
    [NullableAttribute("1")]
public Type FiltersToOverride { get; }
    [NullableContextAttribute("1")]
public ContinuationActionFilterOverrideWrapper(HashSet`1<FilterMetadata> filterMetadata);
    [NullableContextAttribute("1")]
public sealed virtual Type get_FiltersToOverride();
}
internal class Autofac.Integration.WebApi.ContinuationActionFilterWrapper : object {
    [NullableAttribute("1")]
private HashSet`1<FilterMetadata> _allFilters;
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    public bool AllowMultiple { get; }
    [NullableContextAttribute("1")]
public ContinuationActionFilterWrapper(HashSet`1<FilterMetadata> filterMetadata);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowMultiple();
    [NullableContextAttribute("1")]
public sealed virtual Task`1<HttpResponseMessage> ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [NullableContextAttribute("1")]
private bool FilterMatchesMetadata(Meta`1<Lazy`1<IAutofacContinuationActionFilter>> filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Integration.WebApi.ControllerTypeKey : object {
    [CompilerGeneratedAttribute]
private Type <ControllerType>k__BackingField;
    public Type ControllerType { get; private set; }
    public ControllerTypeKey(Type controllerType);
    [CompilerGeneratedAttribute]
public Type get_ControllerType();
    [CompilerGeneratedAttribute]
private void set_ControllerType(Type value);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ControllerTypeKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Integration.WebApi.CurrentRequestHandler : DelegatingHandler {
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    internal static void UpdateScopeWithHttpRequestMessage(HttpRequestMessage request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.Integration.WebApi.DependencyResolverExtensions : object {
    [ExtensionAttribute]
public static ILifetimeScope GetRootLifetimeScope(IDependencyResolver dependencyResolver);
    [ExtensionAttribute]
public static ILifetimeScope GetRequestLifetimeScope(IDependencyScope dependencyScope);
}
[AttributeUsageAttribute("68")]
internal class Autofac.Integration.WebApi.ExceptionFilterOverrideWrapper : ExceptionFilterWrapper {
    [NullableAttribute("1")]
public Type FiltersToOverride { get; }
    [NullableContextAttribute("1")]
public ExceptionFilterOverrideWrapper(HashSet`1<FilterMetadata> filterMetadata);
    [NullableContextAttribute("1")]
public sealed virtual Type get_FiltersToOverride();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
internal class Autofac.Integration.WebApi.ExceptionFilterWrapper : ExceptionFilterAttribute {
    private HashSet`1<FilterMetadata> _allFilters;
    public IEnumerable`1<FilterMetadata> FilterMetadata { get; }
    public ExceptionFilterWrapper(HashSet`1<FilterMetadata> filterMetadata);
    public IEnumerable`1<FilterMetadata> get_FilterMetadata();
    [AsyncStateMachineAttribute("Autofac.Integration.WebApi.ExceptionFilterWrapper/<OnExceptionAsync>d__4")]
public virtual Task OnExceptionAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    private bool FilterMatchesMetadata(Meta`1<Lazy`1<IAutofacExceptionFilter>> filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Integration.WebApi.FilterMetadata : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FilterPredicateMetadata> <PredicateSet>k__BackingField;
    public Guid Id { get; }
    public List`1<FilterPredicateMetadata> PredicateSet { get; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public List`1<FilterPredicateMetadata> get_PredicateSet();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Autofac.Integration.WebApi.FilterPredicateMetadata : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<ILifetimeScope, HttpActionDescriptor, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private AutofacFilterCategory <FilterCategory>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<ILifetimeScope, HttpActionDescriptor, bool> Predicate { get; public set; }
    public FilterScope Scope { get; public set; }
    public AutofacFilterCategory FilterCategory { get; public set; }
    [CompilerGeneratedAttribute]
public Func`3<ILifetimeScope, HttpActionDescriptor, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`3<ILifetimeScope, HttpActionDescriptor, bool> value);
    [CompilerGeneratedAttribute]
public FilterScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(FilterScope value);
    [CompilerGeneratedAttribute]
public AutofacFilterCategory get_FilterCategory();
    [CompilerGeneratedAttribute]
public void set_FilterCategory(AutofacFilterCategory value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.Integration.WebApi.HttpConfigurationExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("The HttpRequestMessage must be registered using the RegisterHttpRequestMessage extension method on ContainerBuilder.", "True")]
public static void RegisterHttpRequestMessage(HttpConfiguration config);
    [ExtensionAttribute]
internal static void RegisterHttpRequestMessage(HttpConfiguration config, ContainerBuilder builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Autofac.Integration.WebApi.HttpRequestMessageProvider : object {
    [NullableAttribute("1")]
private static AsyncLocal`1<HttpRequestMessageHolder> CurrentRequest;
    internal static HttpRequestMessage Current { get; internal set; }
    private static HttpRequestMessageProvider();
    internal static HttpRequestMessage get_Current();
    internal static void set_Current(HttpRequestMessage value);
}
[NullableContextAttribute("1")]
public interface Autofac.Integration.WebApi.IAutofacActionFilter {
    public abstract virtual Task OnActionExecutedAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    public abstract virtual Task OnActionExecutingAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Autofac.Integration.WebApi.IAutofacAuthenticationFilter {
    public abstract virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    public abstract virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Autofac.Integration.WebApi.IAutofacAuthorizationFilter {
    public abstract virtual Task OnAuthorizationAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Autofac.Integration.WebApi.IAutofacContinuationActionFilter {
    public abstract virtual Task`1<HttpResponseMessage> ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> next);
}
[NullableContextAttribute("1")]
public interface Autofac.Integration.WebApi.IAutofacExceptionFilter {
    public abstract virtual Task OnExceptionAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.Integration.WebApi.RegistrationExtensions : object {
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterApiControllers(ContainerBuilder builder, Assembly[] controllerAssemblies);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterApiControllers(ContainerBuilder builder, string controllerSuffix, Assembly[] controllerAssemblies);
    [ExtensionAttribute]
[ObsoleteAttribute("Instead of using the Web-API-specific InstancePerApiRequest, please switch to the InstancePerRequest shared registration extension from Autofac core.")]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> InstancePerApiRequest(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Object[] lifetimeScopeTags);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> InstancePerApiControllerType(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Type controllerType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> InstancePerApiControllerType(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Type controllerType, bool clearExistingServices);
    [ExtensionAttribute]
public static void RegisterHttpRequestMessage(ContainerBuilder builder, HttpConfiguration config);
    [ExtensionAttribute]
public static void RegisterWebApiModelBinderProvider(ContainerBuilder builder);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the AsModelBinderForTypes() registration extension to register model binders and be sure to RegisterWebApiModelBinderProvider() in your container if you do. This method doesn't connect the model binders to the Autofac binder provider. It will be removed in a future version.")]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterWebApiModelBinders(ContainerBuilder builder, Assembly[] modelBinderAssemblies);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> AsModelBinderForTypes(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registration, Type[] types);
    [ExtensionAttribute]
public static void RegisterWebApiFilterProvider(ContainerBuilder builder, HttpConfiguration configuration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Func`2<TController, Task>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterForAllControllers(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterOverrideForAllControllers(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterOverrideWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterOverrideWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Func`2<TController, Task>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterForAllControllers(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Func`2<TController, Task>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterOverrideForAllControllers(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterOverrideWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterOverrideWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Func`2<TController, Task>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterForAllControllers(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Func`2<TController, Task>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterOverrideForAllControllers(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterOverrideWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterOverrideWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Func`2<TController, Task>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterForAllControllers(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Func`2<TController, Task>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterOverrideForAllControllers(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterOverrideWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterOverrideWhere(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    [ExtensionAttribute]
public static void OverrideWebApiActionFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideWebApiActionFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideWebApiAuthorizationFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideWebApiAuthorizationFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideWebApiExceptionFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideWebApiExceptionFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideWebApiAuthenticationFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideWebApiAuthenticationFilterFor(ContainerBuilder builder);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, Func`2<HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, Func`3<ILifetimeScope, HttpActionDescriptor, bool> predicate, FilterScope filterScope);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, Expression`1<Action`1<TController>> actionSelector);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, Expression`1<Func`2<TController, Task>> actionSelector);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, MethodInfo action);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, Expression`1<Action`1<TController>> actionSelector);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, Expression`1<Func`2<TController, Task>> actionSelector);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, AutofacFilterCategory filterCategory, MethodInfo action);
    [ExtensionAttribute]
private static void ValidateFilterType(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
private static void ValidateActionFilterType(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Boolean& isLegacyFilterType);
    [NullableContextAttribute("2")]
private static void AsOverrideFor(ContainerBuilder builder, AutofacFilterCategory filterCategory);
    private static void AsOverrideFor(ContainerBuilder builder, AutofacFilterCategory filterCategory, Expression`1<Action`1<TController>> actionSelector);
    private static MethodInfo GetMethodInfo(LambdaExpression expression);
    [ExtensionAttribute]
private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> GetOrCreateMetadata(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, FilterMetadata& filterMeta);
    [ExtensionAttribute]
private static IRegistrationBuilder`3<AutofacOverrideFilter, SimpleActivatorData, SingleRegistrationStyle> GetOrCreateOverrideMetadata(IRegistrationBuilder`3<AutofacOverrideFilter, SimpleActivatorData, SingleRegistrationStyle> registration, FilterMetadata& filterMeta);
    private static bool ActionMethodMatches(HttpActionDescriptor action, MethodInfo knownMethod);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Integration.WebApi.RegistrationExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidActionExpress { get; }
    internal static string ListMustNotBeEmptyOrContainNulls { get; }
    internal static string MustBeAssignableToActionFilterType { get; }
    internal static string MustBeAssignableToFilterType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidActionExpress();
    internal static string get_ListMustNotBeEmptyOrContainNulls();
    internal static string get_MustBeAssignableToActionFilterType();
    internal static string get_MustBeAssignableToFilterType();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
