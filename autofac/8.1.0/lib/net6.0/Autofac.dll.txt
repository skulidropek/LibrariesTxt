[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Builder.BuildCallbackManager : object {
    private static TypedService CallbackServiceType;
    private static string BuildCallbacksExecutedKey;
    private static BuildCallbackManager();
    internal static void RunBuildCallbacks(ILifetimeScope scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Builder.BuildCallbackService : object {
    private List`1<Action`1<ILifetimeScope>> _callbacks;
    public void AddCallback(Action`1<ILifetimeScope> callback);
    public void Execute(ILifetimeScope scope);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Builder.BuildCallbackServiceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BuildCallbacksAlreadyRun { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BuildCallbacksAlreadyRun();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Builder.ConcreteReflectionActivatorData : ReflectionActivatorData {
    public IInstanceActivator Activator { get; }
    public ConcreteReflectionActivatorData(Type implementer);
    public sealed virtual IInstanceActivator get_Activator();
}
[FlagsAttribute]
public enum Autofac.Builder.ContainerBuildOptions : Enum {
    public int value__;
    public static ContainerBuildOptions None;
    public static ContainerBuildOptions ExcludeDefaultModules;
    public static ContainerBuildOptions IgnoreStartableComponents;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Builder.DeferredCallback : object {
    private Action`1<IComponentRegistryBuilder> _callback;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Action`1<IComponentRegistryBuilder> Callback { get; public set; }
    public Guid Id { get; }
    public DeferredCallback(Action`1<IComponentRegistryBuilder> callback);
    public Action`1<IComponentRegistryBuilder> get_Callback();
    public void set_Callback(Action`1<IComponentRegistryBuilder> value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
}
public class Autofac.Builder.DynamicRegistrationStyle : object {
}
[NullableContextAttribute("1")]
public interface Autofac.Builder.IConcreteActivatorData {
    public IInstanceActivator Activator { get; }
    public abstract virtual IInstanceActivator get_Activator();
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface Autofac.Builder.IHideObjectMembers {
    [EditorBrowsableAttribute("1")]
public abstract virtual Type GetType();
    [EditorBrowsableAttribute("1")]
public abstract virtual int GetHashCode();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public abstract virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Equals(object other);
}
[NullableContextAttribute("1")]
public interface Autofac.Builder.IRegistrationBuilder`3 {
    [EditorBrowsableAttribute("1")]
public RegistrationData RegistrationData { get; }
    [EditorBrowsableAttribute("1")]
public TActivatorData ActivatorData { get; }
    [EditorBrowsableAttribute("1")]
public TRegistrationStyle RegistrationStyle { get; }
    [EditorBrowsableAttribute("1")]
public IResolvePipelineBuilder ResolvePipeline { get; }
    public abstract virtual RegistrationData get_RegistrationData();
    public abstract virtual TActivatorData get_ActivatorData();
    public abstract virtual TRegistrationStyle get_RegistrationStyle();
    public abstract virtual IResolvePipelineBuilder get_ResolvePipeline();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> ExternallyOwned();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OwnedByLifetimeScope();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerDependency();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> SingleInstance();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerLifetimeScope();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerMatchingLifetimeScope(Object[] lifetimeScopeTag);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(Type serviceType);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(object serviceKey);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(Object[] serviceKeys);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(object serviceKey, Type serviceType);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Type[] services);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Service[] services);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Named(string serviceName, Type serviceType);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Named(string serviceName);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Keyed(object serviceKey, Type serviceType);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Keyed(object serviceKey);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnPreparing(Action`1<PreparingEventArgs> handler);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnPreparing(Func`2<PreparingEventArgs, ValueTask> handler);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivating(Action`1<IActivatingEventArgs`1<TLimit>> handler);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivating(Func`2<IActivatingEventArgs`1<TLimit>, ValueTask> handler);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivated(Action`1<IActivatedEventArgs`1<TLimit>> handler);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivated(Func`2<IActivatedEventArgs`1<TLimit>, ValueTask> handler);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> PropertiesAutowired(IPropertySelector propertySelector, bool allowCircularDependencies);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(string key, object value);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(IEnumerable`1<KeyValuePair`2<string, object>> properties);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(Action`1<MetadataConfiguration`1<TMetadata>> configurationAction);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> ConfigurePipeline(Action`1<IResolvePipelineBuilder> configurationAction);
}
public class Autofac.Builder.MetadataConfiguration`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _properties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IEnumerable`1<KeyValuePair`2<string, object>> Properties { get; }
    internal IEnumerable`1<KeyValuePair`2<string, object>> get_Properties();
    [NullableContextAttribute("1")]
public MetadataConfiguration`1<TMetadata> For(Expression`1<Func`2<TMetadata, TProperty>> propertyAccessor, TProperty value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Builder.MetadataKeys : object {
    internal static string RegistrationOrderMetadataKey;
    internal static string AutoActivated;
    internal static string StartOnActivatePropertyKey;
    internal static string ContainerBuildOptions;
    internal static string RegisteredPropertyKey;
    internal static string RegistrationSourceAddedPropertyKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Builder.ReflectionActivatorData : object {
    private Type _implementer;
    private IConstructorFinder _constructorFinder;
    private IConstructorSelector _constructorSelector;
    private static IConstructorFinder DefaultConstructorFinder;
    private static IConstructorSelector DefaultConstructorSelector;
    [CompilerGeneratedAttribute]
private IList`1<Parameter> <ConfiguredParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Parameter> <ConfiguredProperties>k__BackingField;
    public Type ImplementationType { get; public set; }
    public IConstructorFinder ConstructorFinder { get; public set; }
    public IConstructorSelector ConstructorSelector { get; public set; }
    public IList`1<Parameter> ConfiguredParameters { get; }
    public IList`1<Parameter> ConfiguredProperties { get; }
    public ReflectionActivatorData(Type implementer);
    private static ReflectionActivatorData();
    public Type get_ImplementationType();
    public void set_ImplementationType(Type value);
    public IConstructorFinder get_ConstructorFinder();
    public void set_ConstructorFinder(IConstructorFinder value);
    public IConstructorSelector get_ConstructorSelector();
    public void set_ConstructorSelector(IConstructorSelector value);
    [CompilerGeneratedAttribute]
public IList`1<Parameter> get_ConfiguredParameters();
    [CompilerGeneratedAttribute]
public IList`1<Parameter> get_ConfiguredProperties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.Builder.RegistrationBuilder : object {
    public static IRegistrationBuilder`3<T, SimpleActivatorData, SingleRegistrationStyle> ForDelegate(Func`3<IComponentContext, IEnumerable`1<Parameter>, T> delegate);
    public static IRegistrationBuilder`3<object, SimpleActivatorData, SingleRegistrationStyle> ForDelegate(Type limitType, Func`3<IComponentContext, IEnumerable`1<Parameter>, object> delegate);
    public static IRegistrationBuilder`3<TImplementer, ConcreteReflectionActivatorData, SingleRegistrationStyle> ForType();
    public static IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle> ForType(Type implementationType);
    [ExtensionAttribute]
public static IComponentRegistration CreateRegistration(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> builder);
    public static IComponentRegistration CreateRegistration(Guid id, RegistrationData data, IInstanceActivator activator, IResolvePipelineBuilder pipelineBuilder, Service[] services);
    public static IComponentRegistration CreateRegistration(Guid id, RegistrationData data, IInstanceActivator activator, IResolvePipelineBuilder pipelineBuilder, Service[] services, IComponentRegistration target);
    public static void RegisterSingleComponent(IComponentRegistryBuilder cr, IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Builder.RegistrationBuilder`3 : object {
    [CompilerGeneratedAttribute]
private TActivatorData <ActivatorData>k__BackingField;
    [CompilerGeneratedAttribute]
private TRegistrationStyle <RegistrationStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private RegistrationData <RegistrationData>k__BackingField;
    [CompilerGeneratedAttribute]
private IResolvePipelineBuilder <ResolvePipeline>k__BackingField;
    [EditorBrowsableAttribute("1")]
public TActivatorData ActivatorData { get; }
    [EditorBrowsableAttribute("1")]
public TRegistrationStyle RegistrationStyle { get; }
    [EditorBrowsableAttribute("1")]
public RegistrationData RegistrationData { get; }
    [EditorBrowsableAttribute("1")]
public IResolvePipelineBuilder ResolvePipeline { get; }
    public RegistrationBuilder`3(Service defaultService, TActivatorData activatorData, TRegistrationStyle style);
    [CompilerGeneratedAttribute]
public sealed virtual TActivatorData get_ActivatorData();
    [CompilerGeneratedAttribute]
public sealed virtual TRegistrationStyle get_RegistrationStyle();
    [CompilerGeneratedAttribute]
public sealed virtual RegistrationData get_RegistrationData();
    [CompilerGeneratedAttribute]
public sealed virtual IResolvePipelineBuilder get_ResolvePipeline();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> ExternallyOwned();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OwnedByLifetimeScope();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerDependency();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> SingleInstance();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerLifetimeScope();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerMatchingLifetimeScope(Object[] lifetimeScopeTag);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(Type serviceType);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(object serviceKey);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(Object[] serviceKeys);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(object serviceKey, Type serviceType);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Type[] services);
    public IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Type service);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Service[] services);
    public IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Service service);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Named(string serviceName, Type serviceType);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Named(string serviceName);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Keyed(object serviceKey, Type serviceType);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Keyed(object serviceKey);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnPreparing(Action`1<PreparingEventArgs> handler);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnPreparing(Func`2<PreparingEventArgs, ValueTask> handler);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivating(Action`1<IActivatingEventArgs`1<TLimit>> handler);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivating(Func`2<IActivatingEventArgs`1<TLimit>, ValueTask> handler);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivated(Action`1<IActivatedEventArgs`1<TLimit>> handler);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivated(Func`2<IActivatedEventArgs`1<TLimit>, ValueTask> handler);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> PropertiesAutowired(IPropertySelector propertySelector, bool allowCircularDependencies);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(string key, object value);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(IEnumerable`1<KeyValuePair`2<string, object>> properties);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(Action`1<MetadataConfiguration`1<TMetadata>> configurationAction);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> ConfigurePipeline(Action`1<IResolvePipelineBuilder> configurationAction);
    private sealed virtual override Type Autofac.Builder.IHideObjectMembers.GetType();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Builder.RegistrationBuilderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ComponentDoesNotSupportService { get; }
    internal static string OnlyRegisterableTypesAllowed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ComponentDoesNotSupportService();
    internal static string get_OnlyRegisterableTypesAllowed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Builder.RegistrationData : object {
    private bool _defaultServiceOverridden;
    private Service _defaultService;
    private ICollection`1<Service> _services;
    private IComponentLifetime _lifetime;
    [CompilerGeneratedAttribute]
private InstanceOwnership <Ownership>k__BackingField;
    [CompilerGeneratedAttribute]
private InstanceSharing <Sharing>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private RegistrationOptions <Options>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DeferredCallback <DeferredCallback>k__BackingField;
    public IEnumerable`1<Service> Services { get; }
    public InstanceOwnership Ownership { get; public set; }
    public IComponentLifetime Lifetime { get; public set; }
    public InstanceSharing Sharing { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public RegistrationOptions Options { get; public set; }
    [NullableAttribute("2")]
public DeferredCallback DeferredCallback { get; public set; }
    public RegistrationData(Service defaultService);
    public IEnumerable`1<Service> get_Services();
    public void AddServices(IEnumerable`1<Service> services);
    public void AddService(Service service);
    [CompilerGeneratedAttribute]
public InstanceOwnership get_Ownership();
    [CompilerGeneratedAttribute]
public void set_Ownership(InstanceOwnership value);
    public IComponentLifetime get_Lifetime();
    public void set_Lifetime(IComponentLifetime value);
    [CompilerGeneratedAttribute]
public InstanceSharing get_Sharing();
    [CompilerGeneratedAttribute]
public void set_Sharing(InstanceSharing value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public RegistrationOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(RegistrationOptions value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DeferredCallback get_DeferredCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DeferredCallback(DeferredCallback value);
    public void CopyFrom(RegistrationData that, bool includeDefaultService);
    private static void AddAll(ICollection`1<T> to, IEnumerable`1<T> from);
    public void ClearServices();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.Builder.RegistrationExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Update your code to use the Func<T> implicit relationship or delegate factories. See https://autofac.readthedocs.io/en/latest/resolve/relationships.html and https://autofac.readthedocs.io/en/latest/advanced/delegate-factories.html for more information.")]
public static IRegistrationBuilder`3<Delegate, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder, Type delegateType);
    [ExtensionAttribute]
[ObsoleteAttribute("Update your code to use the Func<T> implicit relationship or delegate factories. See https://autofac.readthedocs.io/en/latest/resolve/relationships.html and https://autofac.readthedocs.io/en/latest/advanced/delegate-factories.html for more information.")]
public static IRegistrationBuilder`3<Delegate, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder, Type delegateType, Service service);
    [ExtensionAttribute]
[ObsoleteAttribute("Update your code to use the Func<T> implicit relationship or delegate factories. See https://autofac.readthedocs.io/en/latest/resolve/relationships.html and https://autofac.readthedocs.io/en/latest/advanced/delegate-factories.html for more information.")]
public static IRegistrationBuilder`3<TDelegate, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder, Service service);
    [ExtensionAttribute]
[ObsoleteAttribute("Update your code to use the Func<T> implicit relationship or delegate factories. See https://autofac.readthedocs.io/en/latest/resolve/relationships.html and https://autofac.readthedocs.io/en/latest/advanced/delegate-factories.html for more information.")]
public static IRegistrationBuilder`3<TDelegate, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder);
    [ExtensionAttribute]
[ObsoleteAttribute("Update your code to use the Func<T> implicit relationship or delegate factories. See https://autofac.readthedocs.io/en/latest/resolve/relationships.html and https://autofac.readthedocs.io/en/latest/advanced/delegate-factories.html for more information.")]
public static IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> NamedParameterMapping(IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> registration);
    [ExtensionAttribute]
[ObsoleteAttribute("Update your code to use the Func<T> implicit relationship or delegate factories. See https://autofac.readthedocs.io/en/latest/resolve/relationships.html and https://autofac.readthedocs.io/en/latest/advanced/delegate-factories.html for more information.")]
public static IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> PositionalParameterMapping(IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> registration);
    [ExtensionAttribute]
[ObsoleteAttribute("Update your code to use the Func<T> implicit relationship or delegate factories. See https://autofac.readthedocs.io/en/latest/resolve/relationships.html and https://autofac.readthedocs.io/en/latest/advanced/delegate-factories.html for more information.")]
public static IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> TypedParameterMapping(IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> registration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Builder.RegistrationOrderExtensions : object {
    [ExtensionAttribute]
internal static long GetRegistrationOrder(IComponentRegistration registration);
    [ExtensionAttribute]
internal static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> InheritRegistrationOrderFrom(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration, IComponentRegistration source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Builder.SimpleActivatorData : object {
    [CompilerGeneratedAttribute]
private IInstanceActivator <Activator>k__BackingField;
    public IInstanceActivator Activator { get; }
    public SimpleActivatorData(IInstanceActivator activator);
    [CompilerGeneratedAttribute]
public sealed virtual IInstanceActivator get_Activator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Autofac.Builder.SingleRegistrationStyle : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ICollection`1<EventHandler`1<ComponentRegisteredEventArgs>> <RegisteredHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRegistration <Target>k__BackingField;
    public Guid Id { get; public set; }
    [NullableAttribute("1")]
public ICollection`1<EventHandler`1<ComponentRegisteredEventArgs>> RegisteredHandlers { get; }
    public bool PreserveDefaults { get; public set; }
    public IComponentRegistration Target { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ICollection`1<EventHandler`1<ComponentRegisteredEventArgs>> get_RegisteredHandlers();
    [CompilerGeneratedAttribute]
public bool get_PreserveDefaults();
    [CompilerGeneratedAttribute]
public void set_PreserveDefaults(bool value);
    [CompilerGeneratedAttribute]
public IComponentRegistration get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(IComponentRegistration value);
}
internal static class Autofac.Builder.StartableManager : object {
    [NullableContextAttribute("1")]
internal static void StartStartableComponents(IDictionary`2<string, object> properties, IComponentContext componentContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.ContainerBuilder : object {
    private static int _builderAlreadyAllocated;
    private bool _clearRegistrationCaches;
    private List`1<DeferredCallback> _configurationCallbacks;
    [NullableAttribute("2")]
private BuildCallbackService _buildCallbacks;
    private bool _wasBuilt;
    [CompilerGeneratedAttribute]
private IComponentRegistryBuilder <ComponentRegistryBuilder>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    public IComponentRegistryBuilder ComponentRegistryBuilder { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Properties { get; }
    internal ContainerBuilder(IDictionary`2<string, object> properties);
    internal ContainerBuilder(IComponentRegistryBuilder componentRegistryBuilder);
    internal ContainerBuilder(IDictionary`2<string, object> properties, IComponentRegistryBuilder componentRegistryBuilder);
    [CompilerGeneratedAttribute]
public IComponentRegistryBuilder get_ComponentRegistryBuilder();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    public DeferredCallback RegisterCallback(Action`1<IComponentRegistryBuilder> configurationCallback);
    public ContainerBuilder RegisterBuildCallback(Action`1<ILifetimeScope> buildCallback);
    public IContainer Build(ContainerBuildOptions options);
    internal void UpdateRegistry(IComponentRegistryBuilder componentRegistry);
    private void Build(IComponentRegistryBuilder componentRegistry, bool excludeDefaultModules);
    private void RegisterDefaultAdapters(IComponentRegistryBuilder componentRegistry);
    private static bool IsFirstContainerBuilder();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.ContainerBuilderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BuildCanOnlyBeCalledOnce { get; }
    internal static string ErrorAutoActivating { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BuildCanOnlyBeCalledOnce();
    internal static string get_ErrorAutoActivating();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.ContainerExtensions : object {
    [ExtensionAttribute]
public static void SubscribeToDiagnostics(IContainer container, DiagnosticTracerBase tracer);
    [ExtensionAttribute]
public static T SubscribeToDiagnostics(IContainer container);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.ActivatedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private Service <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRegistration <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Parameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Instance>k__BackingField;
    public Service Service { get; }
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public T Instance { get; }
    public ActivatedEventArgs`1(IComponentContext context, Service service, IComponentRegistration component, IEnumerable`1<Parameter> parameters, T instance);
    [CompilerGeneratedAttribute]
public sealed virtual Service get_Service();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentRegistration get_Component();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Parameter> get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual T get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.ActivatingEventArgs`1 : EventArgs {
    private T _instance;
    [CompilerGeneratedAttribute]
private Service <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRegistration <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Parameter> <Parameters>k__BackingField;
    public Service Service { get; }
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public T Instance { get; public set; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public ActivatingEventArgs`1(IComponentContext context, Service service, IComponentRegistration component, IEnumerable`1<Parameter> parameters, T instance);
    [CompilerGeneratedAttribute]
public sealed virtual Service get_Service();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentRegistration get_Component();
    public sealed virtual T get_Instance();
    public void set_Instance(T value);
    public sealed virtual void ReplaceInstance(object instance);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Parameter> get_Parameters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Activators.Delegate.DelegateActivator : InstanceActivator {
    private Func`3<IComponentContext, IEnumerable`1<Parameter>, object> _activationFunction;
    public DelegateActivator(Type limitType, Func`3<IComponentContext, IEnumerable`1<Parameter>, object> activationFunction);
    public sealed virtual void ConfigurePipeline(IComponentRegistryServices componentRegistryServices, IResolvePipelineBuilder pipelineBuilder);
    private object ActivateInstance(IComponentContext context, IEnumerable`1<Parameter> parameters);
    [CompilerGeneratedAttribute]
private void <ConfigurePipeline>b__2_0(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Delegate.DelegateActivatorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NullFromActivationDelegateFor { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NullFromActivationDelegateFor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Autofac.Core.Activators.InstanceActivator : Disposable {
    [CompilerGeneratedAttribute]
private Type <LimitType>k__BackingField;
    public Type LimitType { get; }
    protected InstanceActivator(Type limitType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_LimitType();
    public virtual string ToString();
    protected void CheckNotDisposed();
    [DoesNotReturnAttribute]
private static void ThrowDisposedException();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.InstanceActivatorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InstanceActivatorDisposed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InstanceActivatorDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator : InstanceActivator {
    private object _instance;
    private bool _activated;
    [CompilerGeneratedAttribute]
private bool <DisposeInstance>k__BackingField;
    public bool DisposeInstance { get; public set; }
    public ProvidedInstanceActivator(object instance);
    public sealed virtual void ConfigurePipeline(IComponentRegistryServices componentRegistryServices, IResolvePipelineBuilder pipelineBuilder);
    private object GetInstance();
    [CompilerGeneratedAttribute]
public bool get_DisposeInstance();
    [CompilerGeneratedAttribute]
public void set_DisposeInstance(bool value);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsync(bool disposing);
    private static Type GetType(object instance);
    [CompilerGeneratedAttribute]
private void <ConfigurePipeline>b__3_0(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    [AsyncStateMachineAttribute("Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator/<<DisposeAsync>g__Awaiter|10_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__Awaiter|10_0(ValueTask vt);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InstanceAlreadyActivated { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InstanceAlreadyActivated();
}
public class Autofac.Core.Activators.Reflection.AutowiringParameter : Parameter {
    [NullableContextAttribute("1")]
public virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Core.Activators.Reflection.AutowiringPropertyInjector : object {
    internal static string InstanceTypeNamedParameter;
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private static AutowiringPropertyInjector();
    public static void InjectProperties(IComponentContext context, object instance, IPropertySelector propertySelector, IEnumerable`1<Parameter> parameters);
    [IteratorStateMachineAttribute("Autofac.Core.Activators.Reflection.AutowiringPropertyInjector/<GetInjectableProperties>d__3")]
private static IEnumerable`1<PropertyInfo> GetInjectableProperties(Type instanceType);
    private static Action`2<object, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object target, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Activators.Reflection.BoundConstructor : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Object[], object> _factory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1[] _valueRetrievers;
    [NullableAttribute("2")]
private ParameterInfo _firstNonBindableParameter;
    [CompilerGeneratedAttribute]
private ConstructorBinder <Binder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanInstantiate>k__BackingField;
    public ConstructorBinder Binder { get; }
    public bool SetsRequiredMembers { get; }
    public ConstructorInfo TargetConstructor { get; }
    public int ArgumentCount { get; }
    public bool CanInstantiate { get; }
    public string Description { get; }
    internal BoundConstructor(ConstructorBinder binder, Func`2<Object[], object> factory, Func`1[] valueRetrievers);
    internal BoundConstructor(ConstructorBinder binder, ParameterInfo firstNonBindableParameter);
    public static BoundConstructor ForBindSuccess(ConstructorBinder binder, Func`2<Object[], object> factory, Func`1[] valueRetrievers);
    public static BoundConstructor ForBindFailure(ConstructorBinder binder, ParameterInfo firstNonBindableParameter);
    [CompilerGeneratedAttribute]
public ConstructorBinder get_Binder();
    public bool get_SetsRequiredMembers();
    public ConstructorInfo get_TargetConstructor();
    public int get_ArgumentCount();
    [CompilerGeneratedAttribute]
public bool get_CanInstantiate();
    public object Instantiate();
    public string get_Description();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Reflection.BoundConstructorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BoundConstructor { get; }
    internal static string CannotInstantitate { get; }
    internal static string ExceptionDuringInstantiation { get; }
    internal static string NonBindableConstructor { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BoundConstructor();
    internal static string get_CannotInstantitate();
    internal static string get_ExceptionDuringInstantiation();
    internal static string get_NonBindableConstructor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Activators.Reflection.ConstructorBinder : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<ConstructorInfo, Func`2<Object[], object>> FactoryBuilder;
    private ParameterInfo[] _constructorArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Object[], object> _factory;
    [NullableAttribute("2")]
private ParameterInfo _illegalParameter;
    [CompilerGeneratedAttribute]
private ConstructorInfo <Constructor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetsRequiredMembers>k__BackingField;
    public ConstructorInfo Constructor { get; }
    public bool SetsRequiredMembers { get; }
    public IReadOnlyList`1<ParameterInfo> Parameters { get; }
    public int ParameterCount { get; }
    public ConstructorBinder(ConstructorInfo constructorInfo);
    private static ConstructorBinder();
    [CompilerGeneratedAttribute]
public ConstructorInfo get_Constructor();
    [CompilerGeneratedAttribute]
public bool get_SetsRequiredMembers();
    public IReadOnlyList`1<ParameterInfo> get_Parameters();
    public int get_ParameterCount();
    public BoundConstructor Bind(IEnumerable`1<Parameter> availableParameters, IComponentContext context);
    internal Func`2<Object[], object> GetConstructorInvoker();
    private static Func`2<Object[], object> GetConstructorInvoker(ConstructorInfo constructorInfo);
    private static MethodCallExpression ConvertPrimitiveType(Expression valueExpression, Type conversionType);
    private static ParameterInfo DetectIllegalParameter(ParameterInfo[] constructorArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Activators.Reflection.DefaultConstructorFinder : object {
    private Func`2<Type, ConstructorInfo[]> _finder;
    public DefaultConstructorFinder(Func`2<Type, ConstructorInfo[]> finder);
    public sealed virtual ConstructorInfo[] FindConstructors(Type targetType);
    private static ConstructorInfo[] GetDefaultPublicConstructors(Type type);
}
public class Autofac.Core.Activators.Reflection.DefaultValueParameter : Parameter {
    [NullableContextAttribute("1")]
public virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Activators.Reflection.IConstructorFinder {
    public abstract virtual ConstructorInfo[] FindConstructors(Type targetType);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Activators.Reflection.IConstructorSelector {
    public abstract virtual BoundConstructor SelectConstructorBinding(BoundConstructor[] constructorBindings, IEnumerable`1<Parameter> parameters);
}
public interface Autofac.Core.Activators.Reflection.IConstructorSelectorWithEarlyBinding {
    [NullableContextAttribute("1")]
public abstract virtual ConstructorBinder SelectConstructorBinder(ConstructorBinder[] constructorBinders);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Activators.Reflection.InjectableProperty : object {
    private MethodInfo _setter;
    private ParameterInfo _setterParameter;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    public PropertyInfo Property { get; }
    public bool IsRequired { get; }
    public InjectableProperty(PropertyInfo prop);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    public bool TrySupplyValue(object instance, Parameter p, IComponentContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Activators.Reflection.InjectablePropertyState : ValueType {
    [CompilerGeneratedAttribute]
private InjectableProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Set>k__BackingField;
    public InjectableProperty Property { get; }
    public bool Set { get; public set; }
    public InjectablePropertyState(InjectableProperty property);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public InjectableProperty get_Property();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Set();
    [CompilerGeneratedAttribute]
public void set_Set(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector : object {
    private Type[] _signature;
    public MatchingSignatureConstructorSelector(Type[] signature);
    public sealed virtual BoundConstructor SelectConstructorBinding(BoundConstructor[] constructorBindings, IEnumerable`1<Parameter> parameters);
    public sealed virtual ConstructorBinder SelectConstructorBinder(ConstructorBinder[] constructorBinders);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AtLeastOneBindingRequired { get; }
    internal static string RequiredConstructorNotAvailable { get; }
    internal static string TooManyConstructorsMatch { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AtLeastOneBindingRequired();
    internal static string get_RequiredConstructorNotAvailable();
    internal static string get_TooManyConstructorsMatch();
}
public class Autofac.Core.Activators.Reflection.MostParametersConstructorSelector : object {
    [NullableContextAttribute("1")]
public sealed virtual BoundConstructor SelectConstructorBinding(BoundConstructor[] constructorBindings, IEnumerable`1<Parameter> parameters);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string UnableToChooseFromMultipleConstructors { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_UnableToChooseFromMultipleConstructors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Activators.Reflection.NoConstructorsFoundException : Exception {
    [CompilerGeneratedAttribute]
private IConstructorFinder <ConstructorFinder>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OffendingType>k__BackingField;
    public IConstructorFinder ConstructorFinder { get; private set; }
    public Type OffendingType { get; private set; }
    public NoConstructorsFoundException(Type offendingType, IConstructorFinder constructorFinder);
    public NoConstructorsFoundException(Type offendingType, IConstructorFinder constructorFinder, string message);
    public NoConstructorsFoundException(Type offendingType, IConstructorFinder constructorFinder, Exception innerException);
    public NoConstructorsFoundException(Type offendingType, IConstructorFinder constructorFinder, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public IConstructorFinder get_ConstructorFinder();
    [CompilerGeneratedAttribute]
private void set_ConstructorFinder(IConstructorFinder value);
    [CompilerGeneratedAttribute]
public Type get_OffendingType();
    [CompilerGeneratedAttribute]
private void set_OffendingType(Type value);
    private static string FormatMessage(Type offendingType, IConstructorFinder constructorFinder);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Reflection.NoConstructorsFoundExceptionResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Message { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Activators.Reflection.ReflectionActivator : InstanceActivator {
    private Type _implementationType;
    private Parameter[] _configuredProperties;
    private Parameter[] _defaultParameters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConstructorBinder[] _constructorBinders;
    private bool _anyRequiredMembers;
    [NullableAttribute("2")]
private InjectablePropertyState[] _defaultFoundPropertySet;
    [CompilerGeneratedAttribute]
private IConstructorFinder <ConstructorFinder>k__BackingField;
    [CompilerGeneratedAttribute]
private IConstructorSelector <ConstructorSelector>k__BackingField;
    public IConstructorFinder ConstructorFinder { get; }
    public IConstructorSelector ConstructorSelector { get; }
    public ReflectionActivator(Type implementationType, IConstructorFinder constructorFinder, IConstructorSelector constructorSelector, IEnumerable`1<Parameter> configuredParameters, IEnumerable`1<Parameter> configuredProperties);
    [CompilerGeneratedAttribute]
public IConstructorFinder get_ConstructorFinder();
    [CompilerGeneratedAttribute]
public IConstructorSelector get_ConstructorSelector();
    public sealed virtual void ConfigurePipeline(IComponentRegistryServices componentRegistryServices, IResolvePipelineBuilder pipelineBuilder);
    private void UseSingleConstructorActivation(IResolvePipelineBuilder pipelineBuilder, ConstructorBinder singleConstructor);
    private object ActivateInstance(IComponentContext context, IEnumerable`1<Parameter> parameters);
    private BoundConstructor[] GetAllBindings(ConstructorBinder[] availableConstructors, IComponentContext context, IEnumerable`1<Parameter> allParameters);
    private IEnumerable`1<Parameter> GetAllParameters(IEnumerable`1<Parameter> parameters);
    [IteratorStateMachineAttribute("Autofac.Core.Activators.Reflection.ReflectionActivator/<EnumerateParameters>d__18")]
private IEnumerable`1<Parameter> EnumerateParameters(IEnumerable`1<Parameter> parameters);
    private string GetBindingFailureMessage(BoundConstructor[] constructorBindings);
    private void InjectProperties(object instance, IComponentContext context, BoundConstructor constructor, IEnumerable`1<Parameter> allParameters);
    private string BuildRequiredPropertyResolutionMessage(IReadOnlyList`1<InjectableProperty> failingRequiredProperties);
    [CompilerGeneratedAttribute]
private void <ConfigurePipeline>b__13_1(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Reflection.ReflectionActivatorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ConstructorSelectorCannotSelectAnInvalidBinding { get; }
    internal static string NoConstructorsBindable { get; }
    internal static string NoConstructorsBindableDefaultBinder { get; }
    internal static string RequiredPropertiesCouldNotBeBound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ConstructorSelectorCannotSelectAnInvalidBinding();
    internal static string get_NoConstructorsBindable();
    internal static string get_NoConstructorsBindableDefaultBinder();
    internal static string get_RequiredPropertiesCouldNotBeBound();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.AutoActivateService : Service {
    public string Description { get; }
    public virtual string get_Description();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.ComponentRegisteredEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IComponentRegistryBuilder <ComponentRegistryBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRegistration <ComponentRegistration>k__BackingField;
    public IComponentRegistryBuilder ComponentRegistryBuilder { get; }
    public IComponentRegistration ComponentRegistration { get; }
    public ComponentRegisteredEventArgs(IComponentRegistryBuilder registryBuilder, IComponentRegistration componentRegistration);
    [CompilerGeneratedAttribute]
public IComponentRegistryBuilder get_ComponentRegistryBuilder();
    [CompilerGeneratedAttribute]
public IComponentRegistration get_ComponentRegistration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.Core.ComponentRegistrationExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<object> MatchingLifetimeScopeTags(IComponentRegistration registration);
    [ExtensionAttribute]
public static void ConfigurePipeline(IComponentRegistration componentRegistration, Action`1<IResolvePipelineBuilder> configurationAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Autofac.Core.ConstantParameter : Parameter {
    private Predicate`1<ParameterInfo> _predicate;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [NullableAttribute("2")]
public object Value { get; }
    protected ConstantParameter(object value, Predicate`1<ParameterInfo> predicate);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    public virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private object <CanSupplyValue>b__5_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Tag = {Tag}, IsDisposed = {IsDisposed}")]
public class Autofac.Core.Container : Disposable {
    private LifetimeScope _rootLifetimeScope;
    [CompilerGeneratedAttribute]
private IComponentRegistry <ComponentRegistry>k__BackingField;
    public DiagnosticListener DiagnosticSource { get; }
    public IDisposer Disposer { get; }
    public object Tag { get; }
    public IComponentRegistry ComponentRegistry { get; }
    internal Container(IComponentRegistry componentRegistry);
    public sealed virtual ILifetimeScope BeginLifetimeScope();
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag);
    public sealed virtual ILifetimeScope BeginLifetimeScope(Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag, Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ILifetimeScope BeginLoadContextLifetimeScope(AssemblyLoadContext loadContext, Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ILifetimeScope BeginLoadContextLifetimeScope(object tag, AssemblyLoadContext loadContext, Action`1<ContainerBuilder> configurationAction);
    public sealed virtual DiagnosticListener get_DiagnosticSource();
    public sealed virtual IDisposer get_Disposer();
    public sealed virtual object get_Tag();
    public sealed virtual void add_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public sealed virtual void remove_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public sealed virtual void add_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public sealed virtual void remove_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public sealed virtual void add_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    public sealed virtual void remove_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual IComponentRegistry get_ComponentRegistry();
    public object ResolveComponent(ResolveRequest& request);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Autofac.Core.Container/<DisposeAsync>d__28")]
protected virtual ValueTask DisposeAsync(bool disposing);
    public sealed virtual object GetService(Type serviceType);
    private sealed virtual override object Autofac.IComponentContext.ResolveComponent(ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.ContainerResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SelfRegistrationCannotBeActivated { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SelfRegistrationCannotBeActivated();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.DefaultPropertySelector : object {
    [CompilerGeneratedAttribute]
private bool <PreserveSetValues>k__BackingField;
    [CompilerGeneratedAttribute]
private static IPropertySelector <OverwriteSetValueInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private static IPropertySelector <PreserveSetValueInstance>k__BackingField;
    public bool PreserveSetValues { get; }
    internal static IPropertySelector OverwriteSetValueInstance { get; }
    internal static IPropertySelector PreserveSetValueInstance { get; }
    public DefaultPropertySelector(bool preserveSetValues);
    private static DefaultPropertySelector();
    [CompilerGeneratedAttribute]
public bool get_PreserveSetValues();
    [CompilerGeneratedAttribute]
internal static IPropertySelector get_OverwriteSetValueInstance();
    [CompilerGeneratedAttribute]
internal static IPropertySelector get_PreserveSetValueInstance();
    public virtual bool InjectProperty(PropertyInfo propertyInfo, object instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.DelegatePropertySelector : object {
    private Func`3<PropertyInfo, object, bool> _finder;
    public DelegatePropertySelector(Func`3<PropertyInfo, object, bool> finder);
    public sealed virtual bool InjectProperty(PropertyInfo propertyInfo, object instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.DependencyResolutionException : Exception {
    public DependencyResolutionException(string message);
    public DependencyResolutionException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Disposer : Disposable {
    private Stack`1<object> _items;
    private SemaphoreSlim _synchRoot;
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Autofac.Core.Disposer/<DisposeAsync>d__3")]
protected virtual ValueTask DisposeAsync(bool disposing);
    public sealed virtual void AddInstanceForAsyncDisposal(IAsyncDisposable instance);
    public sealed virtual void AddInstanceForDisposal(IDisposable instance);
    private void AddInternal(object instance);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.DisposerResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotAddToDisposedDisposer { get; }
    internal static string TypeOnlyImplementsIAsyncDisposable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotAddToDisposedDisposer();
    internal static string get_TypeOnlyImplementsIAsyncDisposable();
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IActivatedEventArgs`1 {
    public Service Service { get; }
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public T Instance { get; }
    public abstract virtual Service get_Service();
    public abstract virtual IComponentContext get_Context();
    public abstract virtual IComponentRegistration get_Component();
    public abstract virtual IEnumerable`1<Parameter> get_Parameters();
    public abstract virtual T get_Instance();
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IActivatingEventArgs`1 {
    public Service Service { get; }
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public T Instance { get; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public abstract virtual Service get_Service();
    public abstract virtual IComponentContext get_Context();
    public abstract virtual IComponentRegistration get_Component();
    public abstract virtual T get_Instance();
    public abstract virtual void ReplaceInstance(object instance);
    public abstract virtual IEnumerable`1<Parameter> get_Parameters();
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IComponentLifetime {
    public abstract virtual ISharingLifetimeScope FindScope(ISharingLifetimeScope mostNestedVisibleScope);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IComponentRegistration {
    public Guid Id { get; }
    public IInstanceActivator Activator { get; }
    public IComponentLifetime Lifetime { get; }
    public InstanceSharing Sharing { get; }
    public InstanceOwnership Ownership { get; }
    public IEnumerable`1<Service> Services { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public IComponentRegistration Target { get; }
    public IResolvePipeline ResolvePipeline { get; }
    public RegistrationOptions Options { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual IInstanceActivator get_Activator();
    public abstract virtual IComponentLifetime get_Lifetime();
    public abstract virtual InstanceSharing get_Sharing();
    public abstract virtual InstanceOwnership get_Ownership();
    public abstract virtual IEnumerable`1<Service> get_Services();
    public abstract virtual IDictionary`2<string, object> get_Metadata();
    public abstract virtual IComponentRegistration get_Target();
    public abstract virtual IResolvePipeline get_ResolvePipeline();
    public abstract virtual RegistrationOptions get_Options();
    [CompilerGeneratedAttribute]
public abstract virtual void add_PipelineBuilding(EventHandler`1<IResolvePipelineBuilder> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PipelineBuilding(EventHandler`1<IResolvePipelineBuilder> value);
    public abstract virtual void BuildResolvePipeline(IComponentRegistryServices registryServices);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IComponentRegistry {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Properties { get; }
    public IEnumerable`1<IComponentRegistration> Registrations { get; }
    public IEnumerable`1<IRegistrationSource> Sources { get; }
    public IEnumerable`1<IServiceMiddlewareSource> ServiceMiddlewareSources { get; }
    public bool HasLocalComponents { get; }
    public abstract virtual IDictionary`2<string, object> get_Properties();
    public abstract virtual IEnumerable`1<IComponentRegistration> get_Registrations();
    public abstract virtual IEnumerable`1<IRegistrationSource> get_Sources();
    public abstract virtual IEnumerable`1<IServiceMiddlewareSource> get_ServiceMiddlewareSources();
    public abstract virtual bool get_HasLocalComponents();
    public abstract virtual bool TryGetRegistration(Service service, IComponentRegistration& registration);
    public abstract virtual bool TryGetServiceRegistration(Service service, ServiceRegistration& serviceRegistration);
    public abstract virtual bool IsRegistered(Service service);
    public abstract virtual IEnumerable`1<IResolveMiddleware> ServiceMiddlewareFor(Service service);
    public abstract virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service);
    public abstract virtual IEnumerable`1<ServiceRegistration> ServiceRegistrationsFor(Service service);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IComponentRegistryServices {
    public abstract virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service);
    public abstract virtual bool TryGetRegistration(Service service, IComponentRegistration& registration);
    public abstract virtual bool IsRegistered(Service service);
}
public interface Autofac.Core.IDisposer {
    [NullableContextAttribute("1")]
public abstract virtual void AddInstanceForDisposal(IDisposable instance);
    [NullableContextAttribute("1")]
public abstract virtual void AddInstanceForAsyncDisposal(IAsyncDisposable instance);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IInstanceActivator {
    public Type LimitType { get; }
    public abstract virtual void ConfigurePipeline(IComponentRegistryServices componentRegistryServices, IResolvePipelineBuilder pipelineBuilder);
    public abstract virtual Type get_LimitType();
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IModule {
    public abstract virtual void Configure(IComponentRegistryBuilder componentRegistry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Autofac.Core.ImplicitRegistrationSource : object {
    private static MethodInfo CreateRegistrationMethod;
    private Type _type;
    private string _cacheKey;
    public bool IsAdapterForIndividualComponents { get; }
    public string Description { get; }
    protected ImplicitRegistrationSource(Type type);
    private static ImplicitRegistrationSource();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public virtual bool get_IsAdapterForIndividualComponents();
    public virtual string get_Description();
    public virtual string ToString();
    protected abstract virtual object ResolveInstance(IComponentContext ctx, ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
    protected virtual IRegistrationBuilder`3<object, SimpleActivatorData, SingleRegistrationStyle> BuildRegistration(IRegistrationBuilder`3<object, SimpleActivatorData, SingleRegistrationStyle> registration);
    private IComponentRegistration CreateRegistration(Service providedService, Service valueService, ServiceRegistration serviceRegistration);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.ImplicitRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string GenericTypeMustBeUnary { get; }
    internal static string TypeMustBeGeneric { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_GenericTypeMustBeUnary();
    internal static string get_TypeMustBeGeneric();
}
public enum Autofac.Core.InstanceOwnership : Enum {
    public int value__;
    public static InstanceOwnership ExternallyOwned;
    public static InstanceOwnership OwnedByLifetimeScope;
}
public enum Autofac.Core.InstanceSharing : Enum {
    public int value__;
    public static InstanceSharing None;
    public static InstanceSharing Shared;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.InternalReflectionCaches : object {
    [CompilerGeneratedAttribute]
private ReflectionCacheAssemblyDictionary`2<Assembly, IEnumerable`1<Type>> <AssemblyScanAllowedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ReflectionCacheDictionary`2<Type, bool> <IsGenericEnumerableInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private ReflectionCacheDictionary`2<Type, bool> <IsGenericListOrCollectionInterfaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private ReflectionCacheTupleDictionary`2<Type, bool> <IsGenericTypeDefinedBy>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ReflectionCacheDictionary`2<ConstructorInfo, Func`2<Object[], object>> <ConstructorBinderFactory>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ReflectionCacheDictionary`2<PropertyInfo, Action`2<object, object>> <AutowiringPropertySetters>k__BackingField;
    [CompilerGeneratedAttribute]
private ReflectionCacheDictionary`2<Type, IReadOnlyList`1<PropertyInfo>> <AutowiringInjectableProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReflectionCacheDictionary`2<Type, ConstructorInfo[]> <DefaultPublicConstructors>k__BackingField;
    [CompilerGeneratedAttribute]
private ReflectionCacheDictionary`2<Type, Type> <GenericTypeDefinitionByType>k__BackingField;
    [CompilerGeneratedAttribute]
private ReflectionCacheDictionary`2<Type, bool> <HasRequiredMemberAttribute>k__BackingField;
    public ReflectionCacheAssemblyDictionary`2<Assembly, IEnumerable`1<Type>> AssemblyScanAllowedTypes { get; }
    public ReflectionCacheDictionary`2<Type, bool> IsGenericEnumerableInterface { get; }
    public ReflectionCacheDictionary`2<Type, bool> IsGenericListOrCollectionInterfaceType { get; }
    public ReflectionCacheTupleDictionary`2<Type, bool> IsGenericTypeDefinedBy { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReflectionCacheDictionary`2<ConstructorInfo, Func`2<Object[], object>> ConstructorBinderFactory { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReflectionCacheDictionary`2<PropertyInfo, Action`2<object, object>> AutowiringPropertySetters { get; }
    public ReflectionCacheDictionary`2<Type, IReadOnlyList`1<PropertyInfo>> AutowiringInjectableProperties { get; }
    public ReflectionCacheDictionary`2<Type, ConstructorInfo[]> DefaultPublicConstructors { get; }
    public ReflectionCacheDictionary`2<Type, Type> GenericTypeDefinitionByType { get; }
    public ReflectionCacheDictionary`2<Type, bool> HasRequiredMemberAttribute { get; }
    public InternalReflectionCaches(ReflectionCacheSet set);
    [CompilerGeneratedAttribute]
public ReflectionCacheAssemblyDictionary`2<Assembly, IEnumerable`1<Type>> get_AssemblyScanAllowedTypes();
    [CompilerGeneratedAttribute]
public ReflectionCacheDictionary`2<Type, bool> get_IsGenericEnumerableInterface();
    [CompilerGeneratedAttribute]
public ReflectionCacheDictionary`2<Type, bool> get_IsGenericListOrCollectionInterfaceType();
    [CompilerGeneratedAttribute]
public ReflectionCacheTupleDictionary`2<Type, bool> get_IsGenericTypeDefinedBy();
    [CompilerGeneratedAttribute]
public ReflectionCacheDictionary`2<ConstructorInfo, Func`2<Object[], object>> get_ConstructorBinderFactory();
    [CompilerGeneratedAttribute]
public ReflectionCacheDictionary`2<PropertyInfo, Action`2<object, object>> get_AutowiringPropertySetters();
    [CompilerGeneratedAttribute]
public ReflectionCacheDictionary`2<Type, IReadOnlyList`1<PropertyInfo>> get_AutowiringInjectableProperties();
    [CompilerGeneratedAttribute]
public ReflectionCacheDictionary`2<Type, ConstructorInfo[]> get_DefaultPublicConstructors();
    [CompilerGeneratedAttribute]
public ReflectionCacheDictionary`2<Type, Type> get_GenericTypeDefinitionByType();
    [CompilerGeneratedAttribute]
public ReflectionCacheDictionary`2<Type, bool> get_HasRequiredMemberAttribute();
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IPropertySelector {
    public abstract virtual bool InjectProperty(PropertyInfo propertyInfo, object instance);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IReflectionCache {
    public ReflectionCacheUsage Usage { get; }
    public abstract virtual ReflectionCacheUsage get_Usage();
    public abstract virtual void Clear();
    public abstract virtual void Clear(ReflectionCacheClearPredicate predicate);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IRegistrationSource {
    public bool IsAdapterForIndividualComponents { get; }
    public abstract virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public abstract virtual bool get_IsAdapterForIndividualComponents();
}
[NullableContextAttribute("1")]
public interface Autofac.Core.IServiceWithType {
    public Type ServiceType { get; }
    public abstract virtual Type get_ServiceType();
    public abstract virtual Service ChangeType(Type newType);
}
public interface Autofac.Core.ISharingLifetimeScope {
    [NullableAttribute("1")]
public ISharingLifetimeScope RootLifetimeScope { get; }
    [NullableAttribute("2")]
public ISharingLifetimeScope ParentLifetimeScope { get; }
    [NullableContextAttribute("1")]
public abstract virtual ISharingLifetimeScope get_RootLifetimeScope();
    [NullableContextAttribute("2")]
public abstract virtual ISharingLifetimeScope get_ParentLifetimeScope();
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetSharedInstance(Guid id, Object& value);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetSharedInstance(Guid primaryId, Nullable`1<Guid> qualifyingId, Object& value);
    [NullableContextAttribute("1")]
public abstract virtual object CreateSharedInstance(Guid id, Func`1<object> creator);
    [NullableContextAttribute("1")]
public abstract virtual object CreateSharedInstance(Guid primaryId, Nullable`1<Guid> qualifyingId, Func`1<object> creator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.KeyedService : Service {
    [CompilerGeneratedAttribute]
private object <ServiceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    public object ServiceKey { get; }
    public Type ServiceType { get; }
    public string Description { get; }
    public KeyedService(object serviceKey, Type serviceType);
    [CompilerGeneratedAttribute]
public object get_ServiceKey();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    public virtual string get_Description();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(KeyedService other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual Service ChangeType(Type newType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Lifetime.CurrentScopeLifetime : object {
    [CompilerGeneratedAttribute]
private static IComponentLifetime <Instance>k__BackingField;
    public static IComponentLifetime Instance { get; }
    private static CurrentScopeLifetime();
    [CompilerGeneratedAttribute]
public static IComponentLifetime get_Instance();
    public sealed virtual ISharingLifetimeScope FindScope(ISharingLifetimeScope mostNestedVisibleScope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Tag = {Tag}, IsDisposed = {IsDisposed}")]
public class Autofac.Core.Lifetime.LifetimeScope : Disposable {
    private object _synchRoot;
    private ConcurrentDictionary`2<Guid, object> _sharedInstances;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`2<Guid, Guid>, object> _sharedQualifiedInstances;
    [NullableAttribute("2")]
private object _anonymousTag;
    [NullableAttribute("2")]
private LifetimeScope _parentScope;
    [CompilerGeneratedAttribute]
private static Guid <SelfRegistrationId>k__BackingField;
    public static object RootTag;
    [CompilerGeneratedAttribute]
private DiagnosticListener <DiagnosticSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ISharingLifetimeScope <RootLifetimeScope>k__BackingField;
    [CompilerGeneratedAttribute]
private IDisposer <Disposer>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRegistry <ComponentRegistry>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<LifetimeScopeBeginningEventArgs> ChildLifetimeScopeBeginning;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<LifetimeScopeEndingEventArgs> CurrentScopeEnding;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ResolveOperationBeginningEventArgs> ResolveOperationBeginning;
    internal static Guid SelfRegistrationId { get; }
    internal DiagnosticListener DiagnosticSource { get; }
    [NullableAttribute("2")]
public ISharingLifetimeScope ParentLifetimeScope { get; }
    public ISharingLifetimeScope RootLifetimeScope { get; }
    public IDisposer Disposer { get; }
    public object Tag { get; }
    public IComponentRegistry ComponentRegistry { get; }
    protected LifetimeScope(IComponentRegistry componentRegistry, LifetimeScope parent, object tag);
    public LifetimeScope(IComponentRegistry componentRegistry, object tag);
    public LifetimeScope(IComponentRegistry componentRegistry);
    private static LifetimeScope();
    [CompilerGeneratedAttribute]
internal static Guid get_SelfRegistrationId();
    private object MakeAnonymousTag();
    public sealed virtual ILifetimeScope BeginLifetimeScope();
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag);
    private void CheckTagIsUnique(object tag);
    private void RaiseBeginning(ILifetimeScope scope);
    [CompilerGeneratedAttribute]
internal DiagnosticListener get_DiagnosticSource();
    public sealed virtual ILifetimeScope BeginLifetimeScope(Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag, Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ILifetimeScope BeginLoadContextLifetimeScope(AssemblyLoadContext loadContext, Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ILifetimeScope BeginLoadContextLifetimeScope(object tag, AssemblyLoadContext loadContext, Action`1<ContainerBuilder> configurationAction);
    private LifetimeScope InternalBeginLifetimeScope(object tag, Action`1<ContainerBuilder> configurationAction, bool isolatedScope);
    private ComponentRegistryBuilder CreateScopeRestrictedRegistry(object tag, Action`1<ContainerBuilder> configurationAction, bool isolatedScope);
    public object ResolveComponent(ResolveRequest& request);
    [NullableContextAttribute("2")]
public sealed virtual ISharingLifetimeScope get_ParentLifetimeScope();
    [CompilerGeneratedAttribute]
public sealed virtual ISharingLifetimeScope get_RootLifetimeScope();
    public sealed virtual object CreateSharedInstance(Guid id, Func`1<object> creator);
    public sealed virtual object CreateSharedInstance(Guid primaryId, Nullable`1<Guid> qualifyingId, Func`1<object> creator);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetSharedInstance(Guid id, Object& value);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetSharedInstance(Guid primaryId, Nullable`1<Guid> qualifyingId, Object& value);
    [CompilerGeneratedAttribute]
public sealed virtual IDisposer get_Disposer();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentRegistry get_ComponentRegistry();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Autofac.Core.Lifetime.LifetimeScope/<DisposeAsync>d__46")]
protected virtual ValueTask DisposeAsync(bool disposing);
    private void CheckNotDisposed();
    private bool IsTreeDisposed();
    public sealed virtual object GetService(Type serviceType);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    [DoesNotReturnAttribute]
private static void ThrowDisposedException();
    private sealed virtual override object Autofac.IComponentContext.ResolveComponent(ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ILifetimeScope <LifetimeScope>k__BackingField;
    public ILifetimeScope LifetimeScope { get; }
    public LifetimeScopeBeginningEventArgs(ILifetimeScope lifetimeScope);
    [CompilerGeneratedAttribute]
public ILifetimeScope get_LifetimeScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ILifetimeScope <LifetimeScope>k__BackingField;
    public ILifetimeScope LifetimeScope { get; }
    public LifetimeScopeEndingEventArgs(ILifetimeScope lifetimeScope);
    [CompilerGeneratedAttribute]
public ILifetimeScope get_LifetimeScope();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Lifetime.LifetimeScopeResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DefaultLoadContextError { get; }
    internal static string DuplicateTagDetected { get; }
    internal static string ScopeIsDisposed { get; }
    internal static string SelfConstructingDependencyDetected { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DefaultLoadContextError();
    internal static string get_DuplicateTagDetected();
    internal static string get_ScopeIsDisposed();
    internal static string get_SelfConstructingDependencyDetected();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Lifetime.MatchingScopeLifetime : object {
    private Object[] _tagsToMatch;
    public IEnumerable`1<object> TagsToMatch { get; }
    public MatchingScopeLifetime(Object[] lifetimeScopeTagsToMatch);
    public IEnumerable`1<object> get_TagsToMatch();
    public sealed virtual ISharingLifetimeScope FindScope(ISharingLifetimeScope mostNestedVisibleScope);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Lifetime.MatchingScopeLifetimeResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MatchingScopeNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MatchingScopeNotFound();
}
public static class Autofac.Core.Lifetime.MatchingScopeLifetimeTags : object {
    [NullableAttribute("1")]
public static object RequestLifetimeScopeTag;
    private static MatchingScopeLifetimeTags();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Lifetime.RootScopeLifetime : object {
    [CompilerGeneratedAttribute]
private static IComponentLifetime <Instance>k__BackingField;
    public static IComponentLifetime Instance { get; }
    private static RootScopeLifetime();
    [CompilerGeneratedAttribute]
public static IComponentLifetime get_Instance();
    public sealed virtual ISharingLifetimeScope FindScope(ISharingLifetimeScope mostNestedVisibleScope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.NamedPropertyParameter : ConstantParameter {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public NamedPropertyParameter(string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public abstract class Autofac.Core.Parameter : object {
    [NullableContextAttribute("1")]
public abstract virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
}
internal class Autofac.Core.Pipeline.ResolvePipeline : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ResolveRequestContext> _entryPoint;
    public ResolvePipeline(Action`1<ResolveRequestContext> entryPoint);
    [NullableContextAttribute("1")]
public sealed virtual void Invoke(ResolveRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.PreparingEventArgs : EventArgs {
    private IEnumerable`1<Parameter> _parameters;
    [CompilerGeneratedAttribute]
private Service <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRegistration <Component>k__BackingField;
    public Service Service { get; }
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public IEnumerable`1<Parameter> Parameters { get; public set; }
    public PreparingEventArgs(IComponentContext context, Service service, IComponentRegistration component, IEnumerable`1<Parameter> parameters);
    [CompilerGeneratedAttribute]
public Service get_Service();
    [CompilerGeneratedAttribute]
public IComponentContext get_Context();
    [CompilerGeneratedAttribute]
public IComponentRegistration get_Component();
    public IEnumerable`1<Parameter> get_Parameters();
    public void set_Parameters(IEnumerable`1<Parameter> value);
}
public class Autofac.Core.ReflectionCacheClearPredicate : MulticastDelegate {
    public ReflectionCacheClearPredicate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(MemberInfo member, IEnumerable`1<Assembly> referencedAssemblies);
    public virtual IAsyncResult BeginInvoke(MemberInfo member, IEnumerable`1<Assembly> referencedAssemblies, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.ReflectionCacheSet : object {
    private static object CacheAllocationLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static WeakReference`1<ReflectionCacheSet> _sharedSet;
    private ConcurrentDictionary`2<string, IReflectionCache> _caches;
    [CompilerGeneratedAttribute]
private InternalReflectionCaches <Internal>k__BackingField;
    public static ReflectionCacheSet Shared { get; }
    internal InternalReflectionCaches Internal { get; }
    private static ReflectionCacheSet();
    public static ReflectionCacheSet get_Shared();
    [CompilerGeneratedAttribute]
internal InternalReflectionCaches get_Internal();
    public TCacheStore GetOrCreateCache(string cacheName);
    public TCacheStore GetOrCreateCache(string cacheName, Func`2<string, TCacheStore> cacheFactory);
    public void Clear();
    public void Clear(ReflectionCacheClearPredicate predicate);
    internal void OnContainerBuildClearCaches(bool clearRegistrationCaches);
    [NullableContextAttribute("2")]
private static bool TryGetSharedCache(ReflectionCacheSet& sharedCache);
    [IteratorStateMachineAttribute("Autofac.Core.ReflectionCacheSet/<GetAllCaches>d__16")]
private IEnumerable`1<IReflectionCache> GetAllCaches();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.ReflectionCacheSetResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CacheRetrievalTypeChange { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CacheRetrievalTypeChange();
}
[FlagsAttribute]
public enum Autofac.Core.ReflectionCacheUsage : Enum {
    public int value__;
    public static ReflectionCacheUsage None;
    public static ReflectionCacheUsage Registration;
    public static ReflectionCacheUsage Resolution;
    public static ReflectionCacheUsage All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Registration.ComponentNotRegisteredException : DependencyResolutionException {
    public ComponentNotRegisteredException(Service service);
    public ComponentNotRegisteredException(Service service, Exception innerException);
    private static string FormatMessage(Service service);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Registration.ComponentNotRegisteredExceptionResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Message { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Registration.ComponentPipelineBuildingArgs : object {
    [CompilerGeneratedAttribute]
private IComponentRegistration <Registration>k__BackingField;
    [CompilerGeneratedAttribute]
private IResolvePipelineBuilder <PipelineBuilder>k__BackingField;
    public IComponentRegistration Registration { get; }
    public IResolvePipelineBuilder PipelineBuilder { get; }
    public ComponentPipelineBuildingArgs(IComponentRegistration registration, IResolvePipelineBuilder pipelineBuilder);
    [CompilerGeneratedAttribute]
public IComponentRegistration get_Registration();
    [CompilerGeneratedAttribute]
public IResolvePipelineBuilder get_PipelineBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Registration.ComponentRegistration : Disposable {
    [NullableAttribute("2")]
private IComponentRegistration _target;
    private IResolvePipelineBuilder _lateBuildPipeline;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<IResolvePipelineBuilder> _pipelineBuildEvent;
    [NullableAttribute("2")]
private IResolvePipeline _builtComponentPipeline;
    private static RegistrationOptions OptionsCopiedFromTargetRegistration;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IInstanceActivator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentLifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private InstanceSharing <Sharing>k__BackingField;
    [CompilerGeneratedAttribute]
private InstanceOwnership <Ownership>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Service> <Services>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private RegistrationOptions <Options>k__BackingField;
    public IComponentRegistration Target { get; }
    public Guid Id { get; }
    public IInstanceActivator Activator { get; }
    public IComponentLifetime Lifetime { get; }
    public InstanceSharing Sharing { get; }
    public InstanceOwnership Ownership { get; }
    public IEnumerable`1<Service> Services { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public RegistrationOptions Options { get; }
    public IResolvePipeline ResolvePipeline { get; protected set; }
    public ComponentRegistration(Guid id, IInstanceActivator activator, IComponentLifetime lifetime, InstanceSharing sharing, InstanceOwnership ownership, IEnumerable`1<Service> services, IDictionary`2<string, object> metadata, IComponentRegistration target, RegistrationOptions options);
    public ComponentRegistration(Guid id, IInstanceActivator activator, IComponentLifetime lifetime, InstanceSharing sharing, InstanceOwnership ownership, IEnumerable`1<Service> services, IDictionary`2<string, object> metadata, RegistrationOptions options);
    public ComponentRegistration(Guid id, IInstanceActivator activator, IComponentLifetime lifetime, InstanceSharing sharing, InstanceOwnership ownership, IResolvePipelineBuilder pipelineBuilder, IEnumerable`1<Service> services, IDictionary`2<string, object> metadata, RegistrationOptions options);
    public ComponentRegistration(Guid id, IInstanceActivator activator, IComponentLifetime lifetime, InstanceSharing sharing, InstanceOwnership ownership, IResolvePipelineBuilder pipelineBuilder, IEnumerable`1<Service> services, IDictionary`2<string, object> metadata, IComponentRegistration target, RegistrationOptions options);
    public sealed virtual IComponentRegistration get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual IInstanceActivator get_Activator();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentLifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual InstanceSharing get_Sharing();
    [CompilerGeneratedAttribute]
public sealed virtual InstanceOwnership get_Ownership();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Service> get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public sealed virtual RegistrationOptions get_Options();
    public sealed virtual void add_PipelineBuilding(EventHandler`1<IResolvePipelineBuilder> value);
    public sealed virtual void remove_PipelineBuilding(EventHandler`1<IResolvePipelineBuilder> value);
    public sealed virtual IResolvePipeline get_ResolvePipeline();
    protected void set_ResolvePipeline(IResolvePipeline value);
    public sealed virtual void BuildResolvePipeline(IComponentRegistryServices registryServices);
    protected virtual IResolvePipeline BuildResolvePipeline(IComponentRegistryServices registryServices, IResolvePipelineBuilder pipelineBuilder);
    private bool HasStartableService();
    public virtual string ToString();
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsync(bool disposing);
    [AsyncStateMachineAttribute("Autofac.Core.Registration.ComponentRegistration/<<DisposeAsync>g__Awaiter|46_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__Awaiter|46_0(ValueTask vt);
}
[ExtensionAttribute]
internal static class Autofac.Core.Registration.ComponentRegistrationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsAdapting(IComponentRegistration componentRegistration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator : Disposable {
    private IComponentRegistration _inner;
    [CompilerGeneratedAttribute]
private IComponentLifetime <Lifetime>k__BackingField;
    public Guid Id { get; }
    public IInstanceActivator Activator { get; }
    public IComponentLifetime Lifetime { get; }
    public InstanceSharing Sharing { get; }
    public InstanceOwnership Ownership { get; }
    public IEnumerable`1<Service> Services { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public IComponentRegistration Target { get; }
    public IResolvePipeline ResolvePipeline { get; }
    public RegistrationOptions Options { get; }
    public ComponentRegistrationLifetimeDecorator(IComponentRegistration inner, IComponentLifetime lifetime);
    public sealed virtual Guid get_Id();
    public sealed virtual IInstanceActivator get_Activator();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentLifetime get_Lifetime();
    public sealed virtual InstanceSharing get_Sharing();
    public sealed virtual InstanceOwnership get_Ownership();
    public sealed virtual IEnumerable`1<Service> get_Services();
    public sealed virtual IDictionary`2<string, object> get_Metadata();
    public sealed virtual IComponentRegistration get_Target();
    public sealed virtual IResolvePipeline get_ResolvePipeline();
    public sealed virtual RegistrationOptions get_Options();
    public sealed virtual void add_PipelineBuilding(EventHandler`1<IResolvePipelineBuilder> value);
    public sealed virtual void remove_PipelineBuilding(EventHandler`1<IResolvePipelineBuilder> value);
    public sealed virtual void BuildResolvePipeline(IComponentRegistryServices registryServices);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsync(bool disposing);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Registration.ComponentRegistrationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ComponentPipelineHasNotBeenBuilt { get; }
    internal static string PipelineAlreadyBuilt { get; }
    internal static string PipelineNotBuilt { get; }
    internal static string ToStringFormat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ComponentPipelineHasNotBeenBuilt();
    internal static string get_PipelineAlreadyBuilt();
    internal static string get_PipelineNotBuilt();
    internal static string get_ToStringFormat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ComponentRegistry : Disposable {
    private IRegisteredServicesTracker _registeredServicesTracker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Properties { get; }
    public IEnumerable`1<IComponentRegistration> Registrations { get; }
    public IEnumerable`1<IRegistrationSource> Sources { get; }
    public IEnumerable`1<IServiceMiddlewareSource> ServiceMiddlewareSources { get; }
    public bool HasLocalComponents { get; }
    internal ComponentRegistry(IRegisteredServicesTracker registeredServicesTracker, IDictionary`2<string, object> properties);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Properties();
    public sealed virtual IEnumerable`1<IComponentRegistration> get_Registrations();
    public sealed virtual IEnumerable`1<IRegistrationSource> get_Sources();
    public sealed virtual IEnumerable`1<IServiceMiddlewareSource> get_ServiceMiddlewareSources();
    public sealed virtual bool get_HasLocalComponents();
    public sealed virtual bool TryGetRegistration(Service service, IComponentRegistration& registration);
    public sealed virtual bool TryGetServiceRegistration(Service service, ServiceRegistration& serviceRegistration);
    public sealed virtual bool IsRegistered(Service service);
    public sealed virtual IEnumerable`1<IResolveMiddleware> ServiceMiddlewareFor(Service service);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service);
    public sealed virtual IEnumerable`1<ServiceRegistration> ServiceRegistrationsFor(Service service);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsync(bool disposing);
    [AsyncStateMachineAttribute("Autofac.Core.Registration.ComponentRegistry/<<DisposeAsync>g__Awaiter|20_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__Awaiter|20_0(ValueTask vt);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ComponentRegistryBuilder : Disposable {
    private IRegisteredServicesTracker _registeredServicesTracker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Properties { get; }
    internal ComponentRegistryBuilder(IRegisteredServicesTracker registeredServicesTracker, IDictionary`2<string, object> properties);
    private void OnRegistered(object sender, IComponentRegistration e);
    private void OnRegistrationSourceAdded(object sender, IRegistrationSource e);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsync(bool disposing);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Properties();
    public sealed virtual IComponentRegistry Build();
    public sealed virtual bool IsRegistered(Service service);
    public sealed virtual void Register(IComponentRegistration registration);
    public sealed virtual void RegisterServiceMiddleware(Service service, IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    public sealed virtual void Register(IComponentRegistration registration, bool preserveDefaults);
    public sealed virtual void add_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    public sealed virtual void remove_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    public sealed virtual void AddRegistrationSource(IRegistrationSource source);
    public sealed virtual void AddServiceMiddlewareSource(IServiceMiddlewareSource servicePipelineSource);
    public sealed virtual void add_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
    public sealed virtual void remove_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
    private EventHandler`1<ComponentRegisteredEventArgs> GetRegistered();
    private EventHandler`1<RegistrationSourceAddedEventArgs> GetRegistrationSourceAdded();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.DefaultRegisteredServicesTracker : Disposable {
    private static Func`2<Service, ServiceRegistrationInfo> RegInfoFactory;
    private Func`2<Service, IEnumerable`1<ServiceRegistration>> _registrationAccessor;
    private ConcurrentDictionary`2<Service, ServiceRegistrationInfo> _serviceInfo;
    private Stack`1<IRegistrationSource> _dynamicRegistrationSources;
    private ConcurrentQueue`1<IComponentRegistration> _registrations;
    private List`1<IServiceMiddlewareSource> _servicePipelineSources;
    private ReflectionCacheSet _capturedReflectionCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Service, ServiceRegistrationInfo> _ephemeralServiceInfo;
    private bool _trackerPopulationComplete;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IComponentRegistration> Registered;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IRegistrationSource> RegistrationSourceAdded;
    public IEnumerable`1<IComponentRegistration> Registrations { get; }
    public IEnumerable`1<IRegistrationSource> Sources { get; }
    public IEnumerable`1<IServiceMiddlewareSource> ServiceMiddlewareSources { get; }
    private static DefaultRegisteredServicesTracker();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Registered(EventHandler`1<IComponentRegistration> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Registered(EventHandler`1<IComponentRegistration> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RegistrationSourceAdded(EventHandler`1<IRegistrationSource> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RegistrationSourceAdded(EventHandler`1<IRegistrationSource> value);
    public sealed virtual IEnumerable`1<IComponentRegistration> get_Registrations();
    public sealed virtual IEnumerable`1<IRegistrationSource> get_Sources();
    public sealed virtual IEnumerable`1<IServiceMiddlewareSource> get_ServiceMiddlewareSources();
    public sealed virtual void AddServiceMiddleware(Service service, IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    public virtual void AddRegistration(IComponentRegistration registration, bool preserveDefaults, bool originatedFromDynamicSource);
    public sealed virtual void AddRegistrationSource(IRegistrationSource source);
    public sealed virtual void AddServiceMiddlewareSource(IServiceMiddlewareSource serviceMiddlewareSource);
    public sealed virtual IEnumerable`1<IResolveMiddleware> ServiceMiddlewareFor(Service service);
    public sealed virtual bool TryGetRegistration(Service service, IComponentRegistration& registration);
    public sealed virtual bool TryGetServiceRegistration(Service service, ServiceRegistration& serviceData);
    public sealed virtual bool IsRegistered(Service service);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service);
    public sealed virtual IEnumerable`1<ServiceRegistration> ServiceRegistrationsFor(Service service);
    public sealed virtual void Complete();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Autofac.Core.Registration.DefaultRegisteredServicesTracker/<DisposeAsync>d__34")]
protected virtual ValueTask DisposeAsync(bool disposing);
    private ServiceRegistrationInfo GetInitializedServiceInfo(Service service);
    private void BeginServiceInfoInitialization(Service service, ServiceRegistrationInfo info, IEnumerable`1<IRegistrationSource> registrationSources);
    [IteratorStateMachineAttribute("Autofac.Core.Registration.DefaultRegisteredServicesTracker/<ExcludeSource>d__37")]
private static IEnumerable`1<IRegistrationSource> ExcludeSource(IEnumerable`1<IRegistrationSource> sources, IRegistrationSource exclude);
    private ServiceRegistrationInfo GetServiceInfo(Service service);
    private static ServiceRegistrationInfo GetEphemeralServiceInfo(Dictionary`2<Service, ServiceRegistrationInfo> ephemeralSet, Service service, ServiceRegistrationInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ExternalComponentRegistration : ComponentRegistration {
    public ExternalComponentRegistration(Service service, IComponentRegistration target);
    protected virtual IResolvePipeline BuildResolvePipeline(IComponentRegistryServices registryServices, IResolvePipelineBuilder pipelineBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ExternalRegistryServiceMiddlewareSource : object {
    private IComponentRegistry _componentRegistry;
    private bool _isolatedScope;
    public ExternalRegistryServiceMiddlewareSource(IComponentRegistry componentRegistry, bool isolatedScope);
    public sealed virtual void ProvideMiddleware(Service service, IComponentRegistryServices availableServices, IResolvePipelineBuilder pipelineBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ExternalRegistrySource : object {
    private IComponentRegistry _registry;
    private bool _isolatedScope;
    public bool IsAdapterForIndividualComponents { get; }
    public ExternalRegistrySource(IComponentRegistry registry, bool isolatedScope);
    [IteratorStateMachineAttribute("Autofac.Core.Registration.ExternalRegistrySource/<RegistrationsFor>d__3")]
public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Registration.IComponentRegistryBuilder {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Properties { get; }
    public abstract virtual IComponentRegistry Build();
    public abstract virtual IDictionary`2<string, object> get_Properties();
    public abstract virtual void Register(IComponentRegistration registration);
    public abstract virtual void Register(IComponentRegistration registration, bool preserveDefaults);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    public abstract virtual bool IsRegistered(Service service);
    public abstract virtual void AddRegistrationSource(IRegistrationSource source);
    public abstract virtual void AddServiceMiddlewareSource(IServiceMiddlewareSource serviceMiddlewareSource);
    public abstract virtual void RegisterServiceMiddleware(Service service, IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Registration.IModuleRegistrar {
    [EditorBrowsableAttribute("1")]
public ModuleRegistrarData RegistrarData { get; }
    public abstract virtual ModuleRegistrarData get_RegistrarData();
    public abstract virtual IModuleRegistrar RegisterModule(IModule module);
}
public interface Autofac.Core.Registration.IPerScopeRegistrationSource {
}
[NullableContextAttribute("1")]
internal interface Autofac.Core.Registration.IRegisteredServicesTracker {
    public IEnumerable`1<IComponentRegistration> Registrations { get; }
    public IEnumerable`1<IRegistrationSource> Sources { get; }
    public IEnumerable`1<IServiceMiddlewareSource> ServiceMiddlewareSources { get; }
    public abstract virtual void AddRegistration(IComponentRegistration registration, bool preserveDefaults, bool originatedFromDynamicSource);
    public abstract virtual void AddServiceMiddleware(Service service, IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    public abstract virtual void AddRegistrationSource(IRegistrationSource source);
    public abstract virtual void AddServiceMiddlewareSource(IServiceMiddlewareSource serviceMiddlewareSource);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Registered(EventHandler`1<IComponentRegistration> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Registered(EventHandler`1<IComponentRegistration> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RegistrationSourceAdded(EventHandler`1<IRegistrationSource> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RegistrationSourceAdded(EventHandler`1<IRegistrationSource> value);
    public abstract virtual void Complete();
    public abstract virtual IEnumerable`1<IComponentRegistration> get_Registrations();
    public abstract virtual IEnumerable`1<IRegistrationSource> get_Sources();
    public abstract virtual IEnumerable`1<IServiceMiddlewareSource> get_ServiceMiddlewareSources();
    public abstract virtual IEnumerable`1<IResolveMiddleware> ServiceMiddlewareFor(Service service);
    public abstract virtual bool TryGetServiceRegistration(Service service, ServiceRegistration& serviceRegistration);
    public abstract virtual IEnumerable`1<ServiceRegistration> ServiceRegistrationsFor(Service service);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Registration.IServiceMiddlewareSource {
    public abstract virtual void ProvideMiddleware(Service service, IComponentRegistryServices availableServices, IResolvePipelineBuilder pipelineBuilder);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Registration.IServiceMiddlewareSourceRegistrar {
    public abstract virtual IServiceMiddlewareSourceRegistrar RegisterServiceMiddlewareSource(IServiceMiddlewareSource serviceMiddlewareSource);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Registration.ISourceRegistrar {
    public abstract virtual ISourceRegistrar RegisterSource(IRegistrationSource registrationSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ModuleRegistrar : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IComponentRegistryBuilder> _moduleConfigureChain;
    [CompilerGeneratedAttribute]
private ModuleRegistrarData <RegistrarData>k__BackingField;
    public ModuleRegistrarData RegistrarData { get; }
    public ModuleRegistrar(ContainerBuilder builder);
    [CompilerGeneratedAttribute]
public sealed virtual ModuleRegistrarData get_RegistrarData();
    public sealed virtual IModuleRegistrar RegisterModule(IModule module);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(IComponentRegistryBuilder reg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Registration.ModuleRegistrarData : object {
    [CompilerGeneratedAttribute]
private DeferredCallback <Callback>k__BackingField;
    public DeferredCallback Callback { get; }
    public ModuleRegistrarData(DeferredCallback callback);
    [CompilerGeneratedAttribute]
public DeferredCallback get_Callback();
}
[FlagsAttribute]
public enum Autofac.Core.Registration.RegistrationOptions : Enum {
    public int value__;
    public static RegistrationOptions None;
    public static RegistrationOptions Fixed;
    public static RegistrationOptions DisableDecoration;
    public static RegistrationOptions ExcludeFromCollections;
    public static RegistrationOptions Composite;
}
[ExtensionAttribute]
public static class Autofac.Core.Registration.RegistrationOptionsExtensions : object {
    [ExtensionAttribute]
public static bool HasOption(RegistrationOptions options, RegistrationOptions flag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ScopeRestrictedRegisteredServicesTracker : DefaultRegisteredServicesTracker {
    private IComponentLifetime _restrictedRootScopeLifetime;
    internal ScopeRestrictedRegisteredServicesTracker(IComponentLifetime restrictedRootScopeLifetime);
    public virtual void AddRegistration(IComponentRegistration registration, bool preserveDefaults, bool originatedFromSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ServiceMiddlewareSourceRegistrar : object {
    private ContainerBuilder _builder;
    public ServiceMiddlewareSourceRegistrar(ContainerBuilder builder);
    public sealed virtual IServiceMiddlewareSourceRegistrar RegisterServiceMiddlewareSource(IServiceMiddlewareSource serviceMiddlewareSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ServiceRegistrationInfo : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isInitialized;
    private Service _service;
    [NullableAttribute("2")]
private IComponentRegistration _fixedRegistration;
    private List`1<IComponentRegistration> _defaultImplementations;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IComponentRegistration> _sourceImplementations;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IComponentRegistration> _preserveDefaultImplementations;
    [NullableAttribute("2")]
private IComponentRegistration _defaultImplementation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<IRegistrationSource> _sourcesToQuery;
    [NullableAttribute("2")]
private IResolvePipeline _resolvePipeline;
    [NullableAttribute("2")]
private IResolvePipelineBuilder _customPipelineBuilder;
    [CompilerGeneratedAttribute]
private int <InitializationDepth>k__BackingField;
    public bool IsInitialized { get; private set; }
    public int InitializationDepth { get; public set; }
    public IEnumerable`1<IComponentRegistration> Implementations { get; }
    public IResolvePipeline ServicePipeline { get; }
    public IEnumerable`1<IResolveMiddleware> ServiceMiddleware { get; }
    public bool IsRegistered { get; }
    public bool HasCustomServiceMiddleware { get; }
    private bool Any { get; }
    public bool IsInitializing { get; }
    public bool HasSourcesToQuery { get; }
    private IEnumerable`1<IResolveMiddleware> Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Middleware { get; }
    private PipelineType Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Type { get; }
    public ServiceRegistrationInfo(Service service);
    public bool get_IsInitialized();
    private void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public int get_InitializationDepth();
    [CompilerGeneratedAttribute]
public void set_InitializationDepth(int value);
    [IteratorStateMachineAttribute("Autofac.Core.Registration.ServiceRegistrationInfo/<get_Implementations>d__19")]
public IEnumerable`1<IComponentRegistration> get_Implementations();
    public IResolvePipeline get_ServicePipeline();
    public IEnumerable`1<IResolveMiddleware> get_ServiceMiddleware();
    private void RequiresInitialization();
    public bool get_IsRegistered();
    public bool get_HasCustomServiceMiddleware();
    private bool get_Any();
    public void AddImplementation(IComponentRegistration registration, bool preserveDefaults, bool originatedFromSource);
    public void UseServiceMiddleware(IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    public void UseServiceMiddlewareRange(IEnumerable`1<IResolveMiddleware> middleware, MiddlewareInsertionMode insertionMode);
    [NullableContextAttribute("2")]
public bool TryGetRegistration(IComponentRegistration& registration);
    public bool get_IsInitializing();
    public bool get_HasSourcesToQuery();
    public void BeginInitialization(IEnumerable`1<IRegistrationSource> sources);
    public void SkipSource(IRegistrationSource source);
    private void EnforceDuringInitialization();
    public IRegistrationSource DequeueNextSource();
    public void CompleteInitialization();
    public virtual string ToString();
    private IResolvePipeline BuildPipeline();
    public ServiceRegistrationInfo CloneUninitialized();
    private sealed virtual override IEnumerable`1<IResolveMiddleware> Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.get_Middleware();
    private sealed virtual override PipelineType Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.get_Type();
    private sealed virtual override IResolvePipeline Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Build();
    private sealed virtual override IResolvePipelineBuilder Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Use(IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    private sealed virtual override IResolvePipelineBuilder Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.UseRange(IEnumerable`1<IResolveMiddleware> middleware, MiddlewareInsertionMode insertionMode);
    private sealed virtual override IResolvePipelineBuilder Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Clone();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Registration.ServiceRegistrationInfoResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NotAfterInitialization { get; }
    internal static string NotDuringInitialization { get; }
    internal static string NotInitialized { get; }
    internal static string ServicePipelineCannotBeBuilt { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NotAfterInitialization();
    internal static string get_NotDuringInitialization();
    internal static string get_NotInitialized();
    internal static string get_ServicePipelineCannotBeBuilt();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.ServiceWithTypeMiddlewareSource : object {
    private Type _serviceType;
    private IResolveMiddleware _middleware;
    private MiddlewareInsertionMode _insertionMode;
    public ServiceWithTypeMiddlewareSource(Type serviceType, IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    public sealed virtual void ProvideMiddleware(Service service, IComponentRegistryServices availableServices, IResolvePipelineBuilder pipelineBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Registration.SourceRegistrar : object {
    private ContainerBuilder _builder;
    public SourceRegistrar(ContainerBuilder builder);
    public sealed virtual ISourceRegistrar RegisterSource(IRegistrationSource registrationSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.RegistrationSourceAddedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IRegistrationSource <RegistrationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRegistryBuilder <ComponentRegistry>k__BackingField;
    public IRegistrationSource RegistrationSource { get; }
    public IComponentRegistryBuilder ComponentRegistry { get; }
    public RegistrationSourceAddedEventArgs(IComponentRegistryBuilder componentRegistry, IRegistrationSource registrationSource);
    [CompilerGeneratedAttribute]
public IRegistrationSource get_RegistrationSource();
    [CompilerGeneratedAttribute]
public IComponentRegistryBuilder get_ComponentRegistry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.ResolvedParameter : Parameter {
    private Func`3<ParameterInfo, IComponentContext, bool> _predicate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<ParameterInfo, IComponentContext, object> _valueAccessor;
    public ResolvedParameter(Func`3<ParameterInfo, IComponentContext, bool> predicate, Func`3<ParameterInfo, IComponentContext, object> valueAccessor);
    public virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
    public static ResolvedParameter ForNamed(string serviceName);
    public static ResolvedParameter ForKeyed(object serviceKey);
}
[ExtensionAttribute]
internal static class Autofac.Core.Resolving.ActivatorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string DisplayName(IInstanceActivator activator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Autofac.Core.Resolving.BaseGenericResolveDelegateInvoker : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterInfo[] _methodParameters;
    protected abstract virtual ParameterInfo[] GetDelegateParameters();
    protected T ResolveWithParametersOrRegistration(IComponentContext context, IEnumerable`1<Parameter> parameters, int parameterInfoPosition);
    protected static bool AnyParameters(IEnumerable`1<Parameter> parameters);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Resolving.ComponentActivationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActivationAlreadyExecuted { get; }
    internal static string ErrorDuringActivation { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActivationAlreadyExecuted();
    internal static string get_ErrorDuringActivation();
}
internal static class Autofac.Core.Resolving.DelegateInvokers : object {
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Resolving.IDependencyTrackingResolveOperation {
    public SegmentedStack`1<ResolveRequestContext> RequestStack { get; }
    public abstract virtual IDisposable EnterNewDependencyDetectionBlock();
    public abstract virtual SegmentedStack`1<ResolveRequestContext> get_RequestStack();
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Resolving.IResolveOperation {
    [NullableAttribute("2")]
public ResolveRequestContext ActiveRequestContext { get; }
    public ISharingLifetimeScope CurrentScope { get; }
    public IEnumerable`1<ResolveRequestContext> InProgressRequests { get; }
    public DiagnosticListener DiagnosticSource { get; }
    public int RequestDepth { get; }
    public Nullable`1<ResolveRequest> InitiatingRequest { get; }
    [NullableContextAttribute("2")]
public abstract virtual ResolveRequestContext get_ActiveRequestContext();
    public abstract virtual ISharingLifetimeScope get_CurrentScope();
    public abstract virtual IEnumerable`1<ResolveRequestContext> get_InProgressRequests();
    public abstract virtual DiagnosticListener get_DiagnosticSource();
    public abstract virtual int get_RequestDepth();
    public abstract virtual Nullable`1<ResolveRequest> get_InitiatingRequest();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResolveRequestBeginning(EventHandler`1<ResolveRequestBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResolveRequestBeginning(EventHandler`1<ResolveRequestBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CurrentOperationEnding(EventHandler`1<ResolveOperationEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CurrentOperationEnding(EventHandler`1<ResolveOperationEndingEventArgs> value);
    public abstract virtual object GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Middleware.ActivatorErrorHandlingMiddleware : object {
    private static string ActivatorChainExceptionData;
    [CompilerGeneratedAttribute]
private static ActivatorErrorHandlingMiddleware <Instance>k__BackingField;
    public static ActivatorErrorHandlingMiddleware Instance { get; }
    public PipelinePhase Phase { get; }
    private static ActivatorErrorHandlingMiddleware();
    [CompilerGeneratedAttribute]
public static ActivatorErrorHandlingMiddleware get_Instance();
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    private static DependencyResolutionException PropagateActivationException(IInstanceActivator activator, Exception exception);
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CircularDependency { get; }
    internal static string MaxDepthExceeded { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CircularDependency();
    internal static string get_MaxDepthExceeded();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware : object {
    public static int DefaultMaxResolveDepth;
    [CompilerGeneratedAttribute]
private static CircularDependencyDetectorMiddleware <Default>k__BackingField;
    private int _maxResolveDepth;
    public static CircularDependencyDetectorMiddleware Default { get; }
    public PipelinePhase Phase { get; }
    public CircularDependencyDetectorMiddleware(int maxResolveDepth);
    private static CircularDependencyDetectorMiddleware();
    [CompilerGeneratedAttribute]
public static CircularDependencyDetectorMiddleware get_Default();
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    public virtual string ToString();
    private static string CreateDependencyGraphTo(IComponentRegistration registration, IEnumerable`1<ResolveRequestContext> requestStack);
    private static string Display(IComponentRegistration registration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Resolving.Middleware.CoreEventMiddleware : object {
    private Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> _callback;
    [CompilerGeneratedAttribute]
private PipelinePhase <Phase>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolveEventType <EventType>k__BackingField;
    public PipelinePhase Phase { get; }
    public ResolveEventType EventType { get; }
    internal CoreEventMiddleware(ResolveEventType eventType, PipelinePhase phase, Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> callback);
    [CompilerGeneratedAttribute]
public sealed virtual PipelinePhase get_Phase();
    [CompilerGeneratedAttribute]
public ResolveEventType get_EventType();
    public virtual string ToString();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Middleware.DelegateMiddleware : object {
    private string _descriptor;
    private Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> _callback;
    [CompilerGeneratedAttribute]
private PipelinePhase <Phase>k__BackingField;
    public PipelinePhase Phase { get; }
    public DelegateMiddleware(string descriptor, PipelinePhase phase, Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> callback);
    [CompilerGeneratedAttribute]
public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware : object {
    [CompilerGeneratedAttribute]
private static DisposalTrackingMiddleware <Instance>k__BackingField;
    public static DisposalTrackingMiddleware Instance { get; }
    public PipelinePhase Phase { get; }
    private static DisposalTrackingMiddleware();
    [CompilerGeneratedAttribute]
public static DisposalTrackingMiddleware get_Instance();
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Resolving.Middleware.MiddlewareMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActivatorDidNotPopulateInstance { get; }
    internal static string UnableToLocateLifetimeScope { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActivatorDidNotPopulateInstance();
    internal static string get_UnableToLocateLifetimeScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Middleware.RegistrationPipelineInvokeMiddleware : object {
    [CompilerGeneratedAttribute]
private static RegistrationPipelineInvokeMiddleware <Instance>k__BackingField;
    public static RegistrationPipelineInvokeMiddleware Instance { get; }
    public PipelinePhase Phase { get; }
    private static RegistrationPipelineInvokeMiddleware();
    [CompilerGeneratedAttribute]
public static RegistrationPipelineInvokeMiddleware get_Instance();
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    public virtual string ToString();
}
public enum Autofac.Core.Resolving.Middleware.ResolveEventType : Enum {
    public int value__;
    public static ResolveEventType OnPreparing;
    public static ResolveEventType OnActivating;
    public static ResolveEventType OnActivated;
    public static ResolveEventType OnRelease;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Middleware.ScopeSelectionMiddleware : object {
    public static ScopeSelectionMiddleware Instance { get; }
    public PipelinePhase Phase { get; }
    public static ScopeSelectionMiddleware get_Instance();
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Middleware.SharingMiddleware : object {
    [CompilerGeneratedAttribute]
private static SharingMiddleware <Instance>k__BackingField;
    public static SharingMiddleware Instance { get; }
    public PipelinePhase Phase { get; }
    private static SharingMiddleware();
    [CompilerGeneratedAttribute]
public static SharingMiddleware get_Instance();
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Middleware.StartableMiddleware : object {
    [CompilerGeneratedAttribute]
private static StartableMiddleware <Instance>k__BackingField;
    public static StartableMiddleware Instance { get; }
    public PipelinePhase Phase { get; }
    private static StartableMiddleware();
    [CompilerGeneratedAttribute]
public static StartableMiddleware get_Instance();
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext : ResolveRequestContext {
    private ResolveRequest _resolveRequest;
    [NullableAttribute("2")]
private object _instance;
    [CompilerGeneratedAttribute]
private IResolveOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ISharingLifetimeScope <ActivationScope>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticListener <DiagnosticSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Parameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private PipelinePhase <PhaseReached>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ResolveRequestCompletingEventArgs> RequestCompleting;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DecoratorContext <DecoratorContext>k__BackingField;
    public IResolveOperation Operation { get; }
    public ISharingLifetimeScope ActivationScope { get; protected set; }
    public IComponentRegistration Registration { get; }
    public Service Service { get; }
    [NullableAttribute("2")]
public IComponentRegistration DecoratorTarget { get; }
    [NullableAttribute("2")]
public object Instance { get; public set; }
    public bool NewInstanceActivated { get; }
    public DiagnosticListener DiagnosticSource { get; }
    public IEnumerable`1<Parameter> Parameters { get; protected set; }
    public PipelinePhase PhaseReached { get; public set; }
    public IComponentRegistry ComponentRegistry { get; }
    [NullableAttribute("2")]
public DecoratorContext DecoratorContext { get; public set; }
    internal DefaultResolveRequestContext(IResolveOperation owningOperation, ResolveRequest& request, ISharingLifetimeScope scope, DiagnosticListener diagnosticSource);
    [CompilerGeneratedAttribute]
public virtual IResolveOperation get_Operation();
    [CompilerGeneratedAttribute]
public virtual ISharingLifetimeScope get_ActivationScope();
    [CompilerGeneratedAttribute]
protected virtual void set_ActivationScope(ISharingLifetimeScope value);
    public virtual IComponentRegistration get_Registration();
    public virtual Service get_Service();
    [NullableContextAttribute("2")]
public virtual IComponentRegistration get_DecoratorTarget();
    [NullableContextAttribute("2")]
public virtual object get_Instance();
    [NullableContextAttribute("2")]
public virtual void set_Instance(object value);
    public virtual bool get_NewInstanceActivated();
    [CompilerGeneratedAttribute]
public virtual DiagnosticListener get_DiagnosticSource();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<Parameter> get_Parameters();
    [CompilerGeneratedAttribute]
protected virtual void set_Parameters(IEnumerable`1<Parameter> value);
    [CompilerGeneratedAttribute]
public virtual PipelinePhase get_PhaseReached();
    [CompilerGeneratedAttribute]
public virtual void set_PhaseReached(PipelinePhase value);
    public virtual IComponentRegistry get_ComponentRegistry();
    [CompilerGeneratedAttribute]
public virtual void add_RequestCompleting(EventHandler`1<ResolveRequestCompletingEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_RequestCompleting(EventHandler`1<ResolveRequestCompletingEventArgs> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual DecoratorContext get_DecoratorContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_DecoratorContext(DecoratorContext value);
    public virtual void ChangeScope(ISharingLifetimeScope newScope);
    public virtual void ChangeParameters(IEnumerable`1<Parameter> newParameters);
    public virtual object ResolveComponent(ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
    public void CompleteRequest();
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Resolving.Pipeline.IResolveMiddleware {
    public PipelinePhase Phase { get; }
    public abstract virtual PipelinePhase get_Phase();
    public abstract virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Resolving.Pipeline.IResolvePipeline {
    public abstract virtual void Invoke(ResolveRequestContext context);
}
[NullableContextAttribute("1")]
public interface Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder {
    public IEnumerable`1<IResolveMiddleware> Middleware { get; }
    public PipelineType Type { get; }
    public abstract virtual IResolvePipeline Build();
    public abstract virtual IEnumerable`1<IResolveMiddleware> get_Middleware();
    public abstract virtual PipelineType get_Type();
    public abstract virtual IResolvePipelineBuilder Use(IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    public abstract virtual IResolvePipelineBuilder UseRange(IEnumerable`1<IResolveMiddleware> middleware, MiddlewareInsertionMode insertionMode);
    public abstract virtual IResolvePipelineBuilder Clone();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration : object {
    [CompilerGeneratedAttribute]
private MiddlewareDeclaration <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private MiddlewareDeclaration <Previous>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IResolveMiddleware <Middleware>k__BackingField;
    [CompilerGeneratedAttribute]
private PipelinePhase <Phase>k__BackingField;
    public MiddlewareDeclaration Next { get; public set; }
    public MiddlewareDeclaration Previous { get; public set; }
    [NullableAttribute("1")]
public IResolveMiddleware Middleware { get; }
    public PipelinePhase Phase { get; }
    [NullableContextAttribute("1")]
public MiddlewareDeclaration(IResolveMiddleware middleware);
    [CompilerGeneratedAttribute]
public MiddlewareDeclaration get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(MiddlewareDeclaration value);
    [CompilerGeneratedAttribute]
public MiddlewareDeclaration get_Previous();
    [CompilerGeneratedAttribute]
public void set_Previous(MiddlewareDeclaration value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IResolveMiddleware get_Middleware();
    [CompilerGeneratedAttribute]
public PipelinePhase get_Phase();
}
public enum Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode : Enum {
    public int value__;
    public static MiddlewareInsertionMode EndOfPhase;
    public static MiddlewareInsertionMode StartOfPhase;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator : object {
    [NullableAttribute("2")]
private MiddlewareDeclaration _first;
    [NullableAttribute("2")]
private MiddlewareDeclaration _current;
    private bool _ended;
    private object System.Collections.IEnumerator.Current { get; }
    public IResolveMiddleware Current { get; }
    [NullableContextAttribute("2")]
public PipelineBuilderEnumerator(MiddlewareDeclaration first);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual IResolveMiddleware get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
public enum Autofac.Core.Resolving.Pipeline.PipelinePhase : Enum {
    public int value__;
    public static PipelinePhase ResolveRequestStart;
    public static PipelinePhase ScopeSelection;
    public static PipelinePhase Decoration;
    public static PipelinePhase Sharing;
    public static PipelinePhase ServicePipelineEnd;
    public static PipelinePhase RegistrationPipelineStart;
    public static PipelinePhase ParameterSelection;
    public static PipelinePhase Activation;
}
public enum Autofac.Core.Resolving.Pipeline.PipelineType : Enum {
    public int value__;
    public static PipelineType Service;
    public static PipelineType Registration;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder : object {
    private static Action`1<ResolveRequestContext> TerminateAction;
    [NullableAttribute("2")]
private MiddlewareDeclaration _first;
    [NullableAttribute("2")]
private MiddlewareDeclaration _last;
    [CompilerGeneratedAttribute]
private PipelineType <Type>k__BackingField;
    public IEnumerable`1<IResolveMiddleware> Middleware { get; }
    public PipelineType Type { get; }
    public ResolvePipelineBuilder(PipelineType pipelineType);
    private static ResolvePipelineBuilder();
    public sealed virtual IEnumerable`1<IResolveMiddleware> get_Middleware();
    [CompilerGeneratedAttribute]
public sealed virtual PipelineType get_Type();
    public sealed virtual IResolvePipelineBuilder Use(IResolveMiddleware stage, MiddlewareInsertionMode insertionMode);
    public sealed virtual IResolvePipelineBuilder UseRange(IEnumerable`1<IResolveMiddleware> stages, MiddlewareInsertionMode insertionMode);
    private void AddStage(IResolveMiddleware stage, MiddlewareInsertionMode insertionLocation);
    private void AppendStage(IResolveMiddleware stage);
    public sealed virtual IResolvePipeline Build();
    private static ResolvePipeline BuildPipeline(MiddlewareDeclaration lastDecl);
    public sealed virtual IResolvePipelineBuilder Clone();
    public sealed virtual IEnumerator`1<IResolveMiddleware> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void VerifyPhase(PipelinePhase middlewarePhase);
    private static string DescribeValidEnumRange(PipelinePhase start, PipelinePhase end);
    [CompilerGeneratedAttribute]
internal static Action`1<ResolveRequestContext> <BuildPipeline>g__Chain|14_0(Action`1<ResolveRequestContext> next, IResolveMiddleware stage);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilderMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotAddRegistrationMiddlewareToServicePipeline { get; }
    internal static string CannotAddServiceMiddlewareToRegistrationPipeline { get; }
    internal static string MiddlewareMustBeInPhaseOrder { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotAddRegistrationMiddlewareToServicePipeline();
    internal static string get_CannotAddServiceMiddlewareToRegistrationPipeline();
    internal static string get_MiddlewareMustBeInPhaseOrder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Autofac.Core.Resolving.Pipeline.ResolveRequestContext : object {
    public IResolveOperation Operation { get; }
    public ISharingLifetimeScope ActivationScope { get; protected set; }
    public IComponentRegistration Registration { get; }
    public Service Service { get; }
    [NullableAttribute("2")]
public IComponentRegistration DecoratorTarget { get; }
    [NullableAttribute("2")]
public object Instance { get; public set; }
    public bool NewInstanceActivated { get; }
    public DiagnosticListener DiagnosticSource { get; }
    public IEnumerable`1<Parameter> Parameters { get; protected set; }
    public PipelinePhase PhaseReached { get; public set; }
    [NullableAttribute("2")]
public DecoratorContext DecoratorContext { get; public set; }
    public IComponentRegistry ComponentRegistry { get; }
    public abstract virtual IResolveOperation get_Operation();
    public abstract virtual ISharingLifetimeScope get_ActivationScope();
    protected abstract virtual void set_ActivationScope(ISharingLifetimeScope value);
    public abstract virtual IComponentRegistration get_Registration();
    public abstract virtual Service get_Service();
    [NullableContextAttribute("2")]
public abstract virtual IComponentRegistration get_DecoratorTarget();
    [NullableContextAttribute("2")]
public abstract virtual object get_Instance();
    [NullableContextAttribute("2")]
public abstract virtual void set_Instance(object value);
    public abstract virtual bool get_NewInstanceActivated();
    public abstract virtual DiagnosticListener get_DiagnosticSource();
    public abstract virtual IEnumerable`1<Parameter> get_Parameters();
    protected abstract virtual void set_Parameters(IEnumerable`1<Parameter> value);
    public abstract virtual PipelinePhase get_PhaseReached();
    public abstract virtual void set_PhaseReached(PipelinePhase value);
    [NullableContextAttribute("2")]
public abstract virtual DecoratorContext get_DecoratorContext();
    [NullableContextAttribute("2")]
public abstract virtual void set_DecoratorContext(DecoratorContext value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestCompleting(EventHandler`1<ResolveRequestCompletingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestCompleting(EventHandler`1<ResolveRequestCompletingEventArgs> value);
    public abstract virtual void ChangeScope(ISharingLifetimeScope newScope);
    public abstract virtual void ChangeParameters(IEnumerable`1<Parameter> newParameters);
    public abstract virtual IComponentRegistry get_ComponentRegistry();
    public abstract virtual object ResolveComponent(ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Autofac.Core.Resolving.Pipeline.ServicePipelines : object {
    [CompilerGeneratedAttribute]
private static IReadOnlyList`1<IResolveMiddleware> <DefaultMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private static IResolvePipeline <DefaultServicePipeline>k__BackingField;
    public static IReadOnlyList`1<IResolveMiddleware> DefaultMiddleware { get; }
    public static IResolvePipeline DefaultServicePipeline { get; }
    private static ServicePipelines();
    [CompilerGeneratedAttribute]
public static IReadOnlyList`1<IResolveMiddleware> get_DefaultMiddleware();
    [CompilerGeneratedAttribute]
public static IResolvePipeline get_DefaultServicePipeline();
    public static bool IsDefaultMiddleware(IResolveMiddleware middleware);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.Resolving.ResolveOperation : object {
    private static int SuccessListInitialCapacity;
    private bool _ended;
    private List`1<DefaultResolveRequestContext> _successfulRequests;
    private int _nextCompleteSuccessfulRequestStartPos;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ResolveRequestContext <ActiveRequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ISharingLifetimeScope <CurrentScope>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticListener <DiagnosticSource>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ResolveRequest> <InitiatingRequest>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ResolveRequestBeginningEventArgs> ResolveRequestBeginning;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ResolveOperationEndingEventArgs> CurrentOperationEnding;
    [CompilerGeneratedAttribute]
private SegmentedStack`1<ResolveRequestContext> <RequestStack>k__BackingField;
    [NullableAttribute("2")]
public ResolveRequestContext ActiveRequestContext { get; private set; }
    public ISharingLifetimeScope CurrentScope { get; private set; }
    public IEnumerable`1<ResolveRequestContext> InProgressRequests { get; }
    public DiagnosticListener DiagnosticSource { get; }
    public int RequestDepth { get; private set; }
    public Nullable`1<ResolveRequest> InitiatingRequest { get; private set; }
    public SegmentedStack`1<ResolveRequestContext> RequestStack { get; }
    public ResolveOperation(ISharingLifetimeScope mostNestedLifetimeScope, DiagnosticListener diagnosticSource);
    public object Execute(ResolveRequest& request);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ResolveRequestContext get_ActiveRequestContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ActiveRequestContext(ResolveRequestContext value);
    [CompilerGeneratedAttribute]
public sealed virtual ISharingLifetimeScope get_CurrentScope();
    [CompilerGeneratedAttribute]
private void set_CurrentScope(ISharingLifetimeScope value);
    public sealed virtual IEnumerable`1<ResolveRequestContext> get_InProgressRequests();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticListener get_DiagnosticSource();
    [CompilerGeneratedAttribute]
public sealed virtual int get_RequestDepth();
    [CompilerGeneratedAttribute]
private void set_RequestDepth(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ResolveRequest> get_InitiatingRequest();
    [CompilerGeneratedAttribute]
private void set_InitiatingRequest(Nullable`1<ResolveRequest> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResolveRequestBeginning(EventHandler`1<ResolveRequestBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResolveRequestBeginning(EventHandler`1<ResolveRequestBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CurrentOperationEnding(EventHandler`1<ResolveOperationEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CurrentOperationEnding(EventHandler`1<ResolveOperationEndingEventArgs> value);
    public sealed virtual IDisposable EnterNewDependencyDetectionBlock();
    [CompilerGeneratedAttribute]
public sealed virtual SegmentedStack`1<ResolveRequestContext> get_RequestStack();
    public object GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, ResolveRequest& request);
    private object ExecuteOperation(ResolveRequest& request);
    private void InvokePipeline(ResolveRequest& request, DefaultResolveRequestContext requestContext);
    private void CompleteRequests();
    private void ResetSuccessfulRequests();
    [NullableContextAttribute("2")]
private void End(Exception exception);
    private sealed virtual override object Autofac.Core.Resolving.IResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Resolving.ResolveOperationBeginningEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IResolveOperation <ResolveOperation>k__BackingField;
    public IResolveOperation ResolveOperation { get; }
    public ResolveOperationBeginningEventArgs(IResolveOperation resolveOperation);
    [CompilerGeneratedAttribute]
public IResolveOperation get_ResolveOperation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Resolving.ResolveOperationEndingEventArgs : EventArgs {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private IResolveOperation <ResolveOperation>k__BackingField;
    [NullableAttribute("2")]
public Exception Exception { get; }
    public IResolveOperation ResolveOperation { get; }
    public ResolveOperationEndingEventArgs(IResolveOperation resolveOperation, Exception exception);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public IResolveOperation get_ResolveOperation();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Resolving.ResolveOperationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ExceptionDuringResolve { get; }
    internal static string MaxDepthExceeded { get; }
    internal static string PipelineCompletedWithNoInstance { get; }
    internal static string TemporaryContextDisposed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ExceptionDuringResolve();
    internal static string get_MaxDepthExceeded();
    internal static string get_PipelineCompletedWithNoInstance();
    internal static string get_TemporaryContextDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Resolving.ResolveRequestBeginningEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ResolveRequestContext <RequestContext>k__BackingField;
    public ResolveRequestContext RequestContext { get; }
    public ResolveRequestBeginningEventArgs(ResolveRequestContext requestContext);
    [CompilerGeneratedAttribute]
public ResolveRequestContext get_RequestContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Resolving.ResolveRequestCompletingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ResolveRequestContext <RequestContext>k__BackingField;
    public ResolveRequestContext RequestContext { get; }
    public ResolveRequestCompletingEventArgs(ResolveRequestContext requestContext);
    [CompilerGeneratedAttribute]
public ResolveRequestContext get_RequestContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.Resolving.SegmentedStack`1 : object {
    private T[] _array;
    private int _next;
    private int _activeSegmentBase;
    private static int InitialCapacity;
    public int Count { get; }
    public void Push(T item);
    private void PushWithResize(T item);
    public T Pop();
    public int get_Count();
    public IDisposable EnterSegment();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Resolving.SegmentedStackResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotExitSegmentWithRemainingItems { get; }
    internal static string CurrentStackSegmentEmpty { get; }
    internal static string EnumeratorNotValid { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotExitSegmentWithRemainingItems();
    internal static string get_CurrentStackSegmentEmpty();
    internal static string get_EnumeratorNotValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Core.ScopeIsolatedService : Service {
    [CompilerGeneratedAttribute]
private Service <Service>k__BackingField;
    public Service Service { get; }
    public string Description { get; }
    public ScopeIsolatedService(Service service);
    [CompilerGeneratedAttribute]
public Service get_Service();
    public virtual string get_Description();
}
internal class Autofac.Core.SelfComponentRegistration : ComponentRegistration {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Autofac.Core.Service : object {
    public string Description { get; }
    public abstract virtual string get_Description();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool op_Equality(Service left, Service right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(Service left, Service right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Autofac.Core.ServiceRegistration : ValueType {
    [CompilerGeneratedAttribute]
private IResolvePipeline <Pipeline>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRegistration <Registration>k__BackingField;
    public IResolvePipeline Pipeline { get; }
    public IComponentRegistration Registration { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public ServiceRegistration(IResolvePipeline servicePipeline, IComponentRegistration registration);
    [CompilerGeneratedAttribute]
public IResolvePipeline get_Pipeline();
    [CompilerGeneratedAttribute]
public IComponentRegistration get_Registration();
    public IDictionary`2<string, object> get_Metadata();
    public long GetRegistrationOrder();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ServiceRegistration other);
    public virtual int GetHashCode();
    public static bool op_Equality(ServiceRegistration left, ServiceRegistration right);
    public static bool op_Inequality(ServiceRegistration left, ServiceRegistration right);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.ServiceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MustOverrideEquals { get; }
    internal static string MustOverrideGetHashCode { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MustOverrideEquals();
    internal static string get_MustOverrideGetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.TypedService : Service {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    public Type ServiceType { get; }
    public string Description { get; }
    public TypedService(Type serviceType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    public virtual string get_Description();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(TypedService other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual Service ChangeType(Type newType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Core.UniqueService : Service {
    private Guid _id;
    public string Description { get; }
    public UniqueService(Guid id);
    public virtual string get_Description();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Autofac.Diagnostics.DefaultDiagnosticTracer : OperationDiagnosticTracerBase`1<string> {
    private static string RequestExceptionTraced;
    private ConcurrentDictionary`2<IResolveOperation, IndentingStringBuilder> _operationBuilders;
    private static String[] NewLineSplit;
    public int OperationsInProgress { get; }
    private static DefaultDiagnosticTracer();
    public virtual int get_OperationsInProgress();
    protected virtual void OnOperationStart(OperationStartDiagnosticData data);
    protected virtual void OnRequestStart(RequestDiagnosticData data);
    protected virtual void OnMiddlewareStart(MiddlewareDiagnosticData data);
    protected virtual void OnMiddlewareFailure(MiddlewareDiagnosticData data);
    protected virtual void OnMiddlewareSuccess(MiddlewareDiagnosticData data);
    protected virtual void OnRequestFailure(RequestFailureDiagnosticData data);
    protected virtual void OnRequestSuccess(RequestDiagnosticData data);
    protected virtual void OnOperationFailure(OperationFailureDiagnosticData data);
    protected virtual void OnOperationSuccess(OperationSuccessDiagnosticData data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Diagnostics.DiagnosticEventKeys : object {
    public static string MiddlewareStart;
    public static string MiddlewareFailure;
    public static string MiddlewareSuccess;
    public static string OperationFailure;
    public static string OperationStart;
    public static string OperationSuccess;
    public static string RequestFailure;
    public static string RequestStart;
    public static string RequestSuccess;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Diagnostics.DiagnosticSourceExtensions : object {
    [ExtensionAttribute]
public static void MiddlewareStart(DiagnosticListener diagnosticSource, ResolveRequestContext requestContext, IResolveMiddleware middleware);
    [ExtensionAttribute]
public static void MiddlewareFailure(DiagnosticListener diagnosticSource, ResolveRequestContext requestContext, IResolveMiddleware middleware);
    [ExtensionAttribute]
public static void MiddlewareSuccess(DiagnosticListener diagnosticSource, ResolveRequestContext requestContext, IResolveMiddleware middleware);
    [ExtensionAttribute]
public static void OperationStart(DiagnosticListener diagnosticSource, IResolveOperation operation, ResolveRequest& initiatingRequest);
    [ExtensionAttribute]
public static void OperationFailure(DiagnosticListener diagnosticSource, IResolveOperation operation, Exception operationException);
    [ExtensionAttribute]
public static void OperationSuccess(DiagnosticListener diagnosticSource, IResolveOperation operation, object resolvedInstance);
    [ExtensionAttribute]
public static void RequestStart(DiagnosticListener diagnosticSource, IResolveOperation operation, ResolveRequestContext requestContext);
    [ExtensionAttribute]
public static void RequestFailure(DiagnosticListener diagnosticSource, IResolveOperation operation, ResolveRequestContext requestContext, Exception requestException);
    [ExtensionAttribute]
public static void RequestSuccess(DiagnosticListener diagnosticSource, IResolveOperation operation, ResolveRequestContext requestContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Autofac.Diagnostics.DiagnosticTracerBase : object {
    private List`1<string> _subscriptions;
    public virtual void Enable(string diagnosticName);
    protected void EnableBase(string diagnosticName);
    public void EnableAll();
    public virtual void Disable(string diagnosticName);
    protected void DisableBase(string diagnosticName);
    public bool IsEnabled(string diagnosticName);
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnCompleted();
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnError(Exception error);
    private sealed virtual override void System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.OnNext(KeyValuePair`2<string, object> value);
    protected virtual void OnMiddlewareFailure(MiddlewareDiagnosticData data);
    protected virtual void OnMiddlewareStart(MiddlewareDiagnosticData data);
    protected virtual void OnMiddlewareSuccess(MiddlewareDiagnosticData data);
    protected virtual void OnOperationFailure(OperationFailureDiagnosticData data);
    protected virtual void OnOperationStart(OperationStartDiagnosticData data);
    protected virtual void OnOperationSuccess(OperationSuccessDiagnosticData data);
    protected virtual void OnRequestFailure(RequestFailureDiagnosticData data);
    protected virtual void OnRequestStart(RequestDiagnosticData data);
    protected virtual void OnRequestSuccess(RequestDiagnosticData data);
    protected virtual void Write(string diagnosticName, object data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Diagnostics.MiddlewareDiagnosticData : object {
    [CompilerGeneratedAttribute]
private ResolveRequestContext <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IResolveMiddleware <Middleware>k__BackingField;
    public ResolveRequestContext RequestContext { get; private set; }
    public IResolveMiddleware Middleware { get; private set; }
    public MiddlewareDiagnosticData(ResolveRequestContext requestContext, IResolveMiddleware middleware);
    [CompilerGeneratedAttribute]
public ResolveRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
private void set_RequestContext(ResolveRequestContext value);
    [CompilerGeneratedAttribute]
public IResolveMiddleware get_Middleware();
    [CompilerGeneratedAttribute]
private void set_Middleware(IResolveMiddleware value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Autofac.Diagnostics.OperationDiagnosticTracerBase`1 : DiagnosticTracerBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<OperationTraceCompletedArgs`1<TContent>> OperationCompleted;
    public int OperationsInProgress { get; }
    protected OperationDiagnosticTracerBase`1(IEnumerable`1<string> subscriptions);
    public virtual void Enable(string diagnosticName);
    public virtual void Disable(string diagnosticName);
    [CompilerGeneratedAttribute]
public void add_OperationCompleted(EventHandler`1<OperationTraceCompletedArgs`1<TContent>> value);
    [CompilerGeneratedAttribute]
public void remove_OperationCompleted(EventHandler`1<OperationTraceCompletedArgs`1<TContent>> value);
    public abstract virtual int get_OperationsInProgress();
    protected virtual void OnOperationCompleted(OperationTraceCompletedArgs`1<TContent> args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Diagnostics.OperationFailureDiagnosticData : object {
    [CompilerGeneratedAttribute]
private IResolveOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <OperationException>k__BackingField;
    public IResolveOperation Operation { get; private set; }
    public Exception OperationException { get; private set; }
    public OperationFailureDiagnosticData(IResolveOperation operation, Exception operationException);
    [CompilerGeneratedAttribute]
public IResolveOperation get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(IResolveOperation value);
    [CompilerGeneratedAttribute]
public Exception get_OperationException();
    [CompilerGeneratedAttribute]
private void set_OperationException(Exception value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Diagnostics.OperationStartDiagnosticData : object {
    [CompilerGeneratedAttribute]
private IResolveOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolveRequest <InitiatingRequest>k__BackingField;
    public IResolveOperation Operation { get; private set; }
    public ResolveRequest InitiatingRequest { get; private set; }
    public OperationStartDiagnosticData(IResolveOperation operation, ResolveRequest& initiatingRequest);
    [CompilerGeneratedAttribute]
public IResolveOperation get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(IResolveOperation value);
    [CompilerGeneratedAttribute]
public ResolveRequest get_InitiatingRequest();
    [CompilerGeneratedAttribute]
private void set_InitiatingRequest(ResolveRequest value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Diagnostics.OperationSuccessDiagnosticData : object {
    [CompilerGeneratedAttribute]
private IResolveOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResolvedInstance>k__BackingField;
    public IResolveOperation Operation { get; private set; }
    public object ResolvedInstance { get; private set; }
    public OperationSuccessDiagnosticData(IResolveOperation operation, object resolvedInstance);
    [CompilerGeneratedAttribute]
public IResolveOperation get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(IResolveOperation value);
    [CompilerGeneratedAttribute]
public object get_ResolvedInstance();
    [CompilerGeneratedAttribute]
private void set_ResolvedInstance(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Diagnostics.OperationTraceCompletedArgs`1 : object {
    [CompilerGeneratedAttribute]
private IResolveOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OperationSucceeded>k__BackingField;
    [CompilerGeneratedAttribute]
private TContent <TraceContent>k__BackingField;
    public IResolveOperation Operation { get; }
    public bool OperationSucceeded { get; }
    public TContent TraceContent { get; }
    public OperationTraceCompletedArgs`1(IResolveOperation operation, bool operationSucceeded, TContent traceContent);
    [CompilerGeneratedAttribute]
public IResolveOperation get_Operation();
    [CompilerGeneratedAttribute]
public bool get_OperationSucceeded();
    [CompilerGeneratedAttribute]
public TContent get_TraceContent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Diagnostics.RequestDiagnosticData : object {
    [CompilerGeneratedAttribute]
private IResolveOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolveRequestContext <RequestContext>k__BackingField;
    public IResolveOperation Operation { get; private set; }
    public ResolveRequestContext RequestContext { get; private set; }
    public RequestDiagnosticData(IResolveOperation operation, ResolveRequestContext requestContext);
    [CompilerGeneratedAttribute]
public IResolveOperation get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(IResolveOperation value);
    [CompilerGeneratedAttribute]
public ResolveRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
private void set_RequestContext(ResolveRequestContext value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Diagnostics.RequestFailureDiagnosticData : object {
    [CompilerGeneratedAttribute]
private IResolveOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolveRequestContext <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <RequestException>k__BackingField;
    public IResolveOperation Operation { get; private set; }
    public ResolveRequestContext RequestContext { get; private set; }
    public Exception RequestException { get; private set; }
    public RequestFailureDiagnosticData(IResolveOperation operation, ResolveRequestContext requestContext, Exception requestException);
    [CompilerGeneratedAttribute]
public IResolveOperation get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(IResolveOperation value);
    [CompilerGeneratedAttribute]
public ResolveRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
private void set_RequestContext(ResolveRequestContext value);
    [CompilerGeneratedAttribute]
public Exception get_RequestException();
    [CompilerGeneratedAttribute]
private void set_RequestException(Exception value);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Diagnostics.TracerMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ComponentDisplay { get; }
    internal static string EnterMiddleware { get; }
    internal static string EntryBrace { get; }
    internal static string ExceptionDisplay { get; }
    internal static string ExitBrace { get; }
    internal static string ExitMiddlewareFailure { get; }
    internal static string ExitMiddlewareSuccess { get; }
    internal static string InstanceDisplay { get; }
    internal static string OperationFailed { get; }
    internal static string OperationSucceeded { get; }
    internal static string OutdentFailure { get; }
    internal static string Pipeline { get; }
    internal static string ResolveOperationStarting { get; }
    internal static string ResolveRequestFailed { get; }
    internal static string ResolveRequestFailedNested { get; }
    internal static string ResolveRequestStarting { get; }
    internal static string ResolveRequestSucceeded { get; }
    internal static string ServiceDisplay { get; }
    internal static string SubscriptionsDisabled { get; }
    internal static string TargetDisplay { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ComponentDisplay();
    internal static string get_EnterMiddleware();
    internal static string get_EntryBrace();
    internal static string get_ExceptionDisplay();
    internal static string get_ExitBrace();
    internal static string get_ExitMiddlewareFailure();
    internal static string get_ExitMiddlewareSuccess();
    internal static string get_InstanceDisplay();
    internal static string get_OperationFailed();
    internal static string get_OperationSucceeded();
    internal static string get_OutdentFailure();
    internal static string get_Pipeline();
    internal static string get_ResolveOperationStarting();
    internal static string get_ResolveRequestFailed();
    internal static string get_ResolveRequestFailedNested();
    internal static string get_ResolveRequestStarting();
    internal static string get_ResolveRequestSucceeded();
    internal static string get_ServiceDisplay();
    internal static string get_SubscriptionsDisabled();
    internal static string get_TargetDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.AttributeFilters.KeyFilterAttribute : ParameterFilterAttribute {
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    public object Key { get; }
    public KeyFilterAttribute(object key);
    [CompilerGeneratedAttribute]
public object get_Key();
    public virtual object ResolveParameter(ParameterInfo parameter, IComponentContext context);
    public virtual bool CanResolveParameter(ParameterInfo parameter, IComponentContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.AttributeFilters.MetadataFilterAttribute : ParameterFilterAttribute {
    private static MethodInfo FilterOneMethod;
    private static MethodInfo FilterAllMethod;
    private static MethodInfo CanResolveMethod;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Key { get; }
    public object Value { get; private set; }
    public MetadataFilterAttribute(string key, object value);
    private static MetadataFilterAttribute();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    public virtual object ResolveParameter(ParameterInfo parameter, IComponentContext context);
    public virtual bool CanResolveParameter(ParameterInfo parameter, IComponentContext context);
    private static Type GetElementType(Type type);
    private static T FilterOne(IComponentContext context, string metadataKey, object metadataValue);
    private static T[] FilterAll(IComponentContext context, string metadataKey, object metadataValue);
    private static bool CanResolve(IComponentContext context, string metadataKey, object metadataValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public abstract class Autofac.Features.AttributeFilters.ParameterFilterAttribute : Attribute {
    public abstract virtual object ResolveParameter(ParameterInfo parameter, IComponentContext context);
    public abstract virtual bool CanResolveParameter(ParameterInfo parameter, IComponentContext context);
}
[ExtensionAttribute]
public static class Autofac.Features.AttributeFilters.RegistrationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TRegistrationStyle> WithAttributeFiltering(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TRegistrationStyle> builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.Collections.CollectionRegistrationSource : object {
    public bool IsAdapterForIndividualComponents { get; }
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    private static Func`2<int, IList> GenerateListFactory(Type elementType);
    private static Func`2<int, IList> GenerateArrayFactory(Type elementType);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.Collections.CollectionRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CollectionRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CollectionRegistrationSourceDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.Decorators.DecoratorContext : object {
    private IComponentContext _componentContext;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Type> <AppliedDecoratorTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <AppliedDecorators>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CurrentInstance>k__BackingField;
    public Type ImplementationType { get; private set; }
    public Type ServiceType { get; private set; }
    public IReadOnlyList`1<Type> AppliedDecoratorTypes { get; private set; }
    public IReadOnlyList`1<object> AppliedDecorators { get; private set; }
    public object CurrentInstance { get; private set; }
    public IComponentRegistry ComponentRegistry { get; }
    private DecoratorContext(IComponentContext componentContext, Type implementationType, Type serviceType, object currentInstance, IReadOnlyList`1<Type> appliedDecoratorTypes, IReadOnlyList`1<object> appliedDecorators);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
private void set_ImplementationType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
private void set_ServiceType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Type> get_AppliedDecoratorTypes();
    [CompilerGeneratedAttribute]
private void set_AppliedDecoratorTypes(IReadOnlyList`1<Type> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<object> get_AppliedDecorators();
    [CompilerGeneratedAttribute]
private void set_AppliedDecorators(IReadOnlyList`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_CurrentInstance();
    [CompilerGeneratedAttribute]
private void set_CurrentInstance(object value);
    public sealed virtual IComponentRegistry get_ComponentRegistry();
    internal static DecoratorContext Create(IComponentContext componentContext, Type implementationType, Type serviceType, object implementationInstance);
    internal DecoratorContext UpdateContext(object decoratorInstance);
    public object ResolveComponent(ResolveRequest& request);
    private sealed virtual override object Autofac.IComponentContext.ResolveComponent(ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.Decorators.DecoratorMiddleware : object {
    private DecoratorService _decoratorService;
    private IComponentRegistration _decoratorRegistration;
    public PipelinePhase Phase { get; }
    public DecoratorMiddleware(DecoratorService decoratorService, IComponentRegistration decoratorRegistration);
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.Decorators.DecoratorService : Service {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDecoratorContext, bool> <Condition>k__BackingField;
    public Type ServiceType { get; }
    public Func`2<IDecoratorContext, bool> Condition { get; }
    public string Description { get; }
    public DecoratorService(Type serviceType, Func`2<IDecoratorContext, bool> condition);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
public Func`2<IDecoratorContext, bool> get_Condition();
    public virtual string get_Description();
    public sealed virtual Service ChangeType(Type newType);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(DecoratorService other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Autofac.Features.Decorators.IDecoratorContext {
    public Type ImplementationType { get; }
    public Type ServiceType { get; }
    public IReadOnlyList`1<Type> AppliedDecoratorTypes { get; }
    public IReadOnlyList`1<object> AppliedDecorators { get; }
    public object CurrentInstance { get; }
    public abstract virtual Type get_ImplementationType();
    public abstract virtual Type get_ServiceType();
    public abstract virtual IReadOnlyList`1<Type> get_AppliedDecoratorTypes();
    public abstract virtual IReadOnlyList`1<object> get_AppliedDecorators();
    public abstract virtual object get_CurrentInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.Decorators.OpenGenericDecoratorMiddlewareSource : object {
    private DecoratorService _decoratorService;
    private RegistrationData _registrationData;
    private ReflectionActivatorData _activatorData;
    public OpenGenericDecoratorMiddlewareSource(DecoratorService decoratorService, RegistrationData registrationData, ReflectionActivatorData activatorData);
    public sealed virtual void ProvideMiddleware(Service service, IComponentRegistryServices availableServices, IResolvePipelineBuilder pipelineBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.GeneratedFactories.FactoryGenerator : object {
    private Func`3<IComponentContext, IEnumerable`1<Parameter>, Delegate> _generator;
    private static ConstructorInfo RequestConstructor;
    public FactoryGenerator(Type delegateType, Service service, ParameterMapping parameterMapping);
    public FactoryGenerator(Type delegateType, Service service, ServiceRegistration productRegistration, ParameterMapping parameterMapping);
    private static FactoryGenerator();
    private static ParameterMapping GetParameterMapping(Type delegateType, ParameterMapping configuredParameterMapping);
    private static bool DelegateTypeIsFunc(Type delegateType);
    private static Func`3<IComponentContext, IEnumerable`1<Parameter>, Delegate> CreateGenerator(Func`3<Expression, Expression[], Expression> makeResolveCall, Type delegateType, ParameterMapping pm);
    private static Expression[] MapParameters(IEnumerable`1<ParameterExpression> creatorParams, ParameterMapping pm);
    public Delegate GenerateFactory(IComponentContext context, IEnumerable`1<Parameter> parameters);
    public TDelegate GenerateFactory(IComponentContext context, IEnumerable`1<Parameter> parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Update your code to use the Func<T> implicit relationship or delegate factories. See https://autofac.readthedocs.io/en/latest/resolve/relationships.html and https://autofac.readthedocs.io/en/latest/advanced/delegate-factories.html for more information.")]
public class Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData : object {
    private Type _delegateType;
    private Service _productService;
    [CompilerGeneratedAttribute]
private ParameterMapping <ParameterMapping>k__BackingField;
    public ParameterMapping ParameterMapping { get; public set; }
    public IInstanceActivator Activator { get; }
    public GeneratedFactoryActivatorData(Type delegateType, Service productService);
    [CompilerGeneratedAttribute]
public ParameterMapping get_ParameterMapping();
    [CompilerGeneratedAttribute]
public void set_ParameterMapping(ParameterMapping value);
    public sealed virtual IInstanceActivator get_Activator();
}
internal static class Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationExtensions : object {
    [NullableContextAttribute("1")]
internal static IRegistrationBuilder`3<TLimit, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder, Type delegateType, Service service);
}
internal class Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource : object {
    public bool IsAdapterForIndividualComponents { get; }
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DuplicateTypesInTypeMappedFuncParameterList { get; }
    internal static string GeneratedFactoryRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DuplicateTypesInTypeMappedFuncParameterList();
    internal static string get_GeneratedFactoryRegistrationSourceDescription();
}
public enum Autofac.Features.GeneratedFactories.ParameterMapping : Enum {
    public int value__;
    public static ParameterMapping Adaptive;
    public static ParameterMapping ByName;
    public static ParameterMapping ByType;
    public static ParameterMapping ByPosition;
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Autofac.Features.Indexed.IIndex`2 {
    public TValue Item { get; }
    public abstract virtual TValue get_Item(TKey key);
    public abstract virtual bool TryGetValue(TKey key, TValue& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Autofac.Features.Indexed.KeyedServiceIndex`2 : object {
    private IComponentContext _context;
    public TValue Item { get; }
    public KeyedServiceIndex`2(IComponentContext context);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private static KeyedService GetService(TKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.LazyDependencies.LazyRegistrationSource : ImplicitRegistrationSource {
    public string Description { get; }
    public virtual string get_Description();
    protected virtual object ResolveInstance(IComponentContext context, ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.LazyDependencies.LazyRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string LazyRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_LazyRegistrationSourceDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource : object {
    private static string ReflectionCacheName;
    private static MethodInfo CreateLazyRegistrationMethod;
    public bool IsAdapterForIndividualComponents { get; }
    private static LazyWithMetadataRegistrationSource();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    private static IComponentRegistration CreateLazyRegistration(Service providedService, Service valueService, ServiceRegistration registrationResolveInfo);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string LazyWithMetadataRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_LazyWithMetadataRegistrationSourceDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData : object {
    [CompilerGeneratedAttribute]
private Func`4<IComponentContext, IEnumerable`1<Parameter>, object, object> <Adapter>k__BackingField;
    [CompilerGeneratedAttribute]
private Service <FromService>k__BackingField;
    public Func`4<IComponentContext, IEnumerable`1<Parameter>, object, object> Adapter { get; }
    public Service FromService { get; }
    public LightweightAdapterActivatorData(Service fromService, Func`4<IComponentContext, IEnumerable`1<Parameter>, object, object> adapter);
    [CompilerGeneratedAttribute]
public Func`4<IComponentContext, IEnumerable`1<Parameter>, object, object> get_Adapter();
    [CompilerGeneratedAttribute]
public Service get_FromService();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationExtensions : object {
    public static IRegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TFrom, TTo> adapter);
    public static IRegistrationBuilder`3<TService, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterDecorator(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TService, TService> decorator, object fromKey, object toKey);
    [NullableContextAttribute("2")]
private static Service ServiceWithKey(object key);
    private static RegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TFrom, TTo> adapter, Service fromService, Service toService);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource : object {
    private RegistrationData _registrationData;
    private LightweightAdapterActivatorData _activatorData;
    public bool IsAdapterForIndividualComponents { get; }
    public LightweightAdapterRegistrationSource(RegistrationData registrationData, LightweightAdapterActivatorData activatorData);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AdapterFromToDescription { get; }
    internal static string FromAndToMustDiffer { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AdapterFromToDescription();
    internal static string get_FromAndToMustDiffer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.Metadata.Meta`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metadata>k__BackingField;
    public T Value { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public Meta`1(T value, IDictionary`2<string, object> metadata);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.Metadata.Meta`2 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TMetadata <Metadata>k__BackingField;
    public T Value { get; }
    public TMetadata Metadata { get; }
    public Meta`2(T value, TMetadata metadata);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public TMetadata get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Features.Metadata.MetadataViewProvider : object {
    private static MethodInfo GetMetadataValueMethod;
    private static MetadataViewProvider();
    [NullableContextAttribute("2")]
public static Func`2<IDictionary`2<string, object>, TMetadata> GetMetadataViewProvider();
    private static TValue GetMetadataValue(IDictionary`2<string, object> metadata, string name, DefaultValueAttribute defaultValue);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.Metadata.MetadataViewProviderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidViewImplementation { get; }
    internal static string MissingMetadata { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidViewImplementation();
    internal static string get_MissingMetadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.Metadata.MetaRegistrationSource : ImplicitRegistrationSource {
    public string Description { get; }
    public virtual string get_Description();
    protected virtual object ResolveInstance(IComponentContext ctx, ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.Metadata.MetaRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MetaRegistrationSourceDescription { get; }
    internal static string StronglyTypedMetaRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MetaRegistrationSourceDescription();
    internal static string get_StronglyTypedMetaRegistrationSourceDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource : object {
    private static string ReflectionCacheName;
    private static MethodInfo CreateMetaRegistrationMethod;
    public bool IsAdapterForIndividualComponents { get; }
    private static StronglyTypedMetaRegistrationSource();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    private static IComponentRegistration CreateMetaRegistration(Service providedService, Service valueService, ServiceRegistration implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData : ReflectionActivatorData {
    [CompilerGeneratedAttribute]
private IServiceWithType <FromService>k__BackingField;
    public IServiceWithType FromService { get; }
    public OpenGenericDecoratorActivatorData(Type implementer, IServiceWithType fromService);
    [CompilerGeneratedAttribute]
public IServiceWithType get_FromService();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DecoratedServiceIsNotOpenGeneric { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DecoratedServiceIsNotOpenGeneric();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource : object {
    private RegistrationData _registrationData;
    private OpenGenericDecoratorActivatorData _activatorData;
    private IResolvePipelineBuilder _existingPipeline;
    public bool IsAdapterForIndividualComponents { get; }
    public OpenGenericDecoratorRegistrationSource(RegistrationData registrationData, IResolvePipelineBuilder existingPipelineBuilder, OpenGenericDecoratorActivatorData activatorData);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    private static Parameter[] AddDecoratedComponentParameter(Service service, Type decoratedParameterType, ServiceRegistration decoratedComponent, IList`1<Parameter> configuredParameters);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string FromAndToMustDiffer { get; }
    internal static string OpenGenericDecoratorRegistrationSourceImplFromTo { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_FromAndToMustDiffer();
    internal static string get_OpenGenericDecoratorRegistrationSourceImplFromTo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.OpenGenerics.OpenGenericDelegateActivatorData : object {
    [CompilerGeneratedAttribute]
private Func`4<IComponentContext, Type[], IEnumerable`1<Parameter>, object> <Factory>k__BackingField;
    public Func`4<IComponentContext, Type[], IEnumerable`1<Parameter>, object> Factory { get; }
    public OpenGenericDelegateActivatorData(Func`4<IComponentContext, Type[], IEnumerable`1<Parameter>, object> factory);
    [CompilerGeneratedAttribute]
public Func`4<IComponentContext, Type[], IEnumerable`1<Parameter>, object> get_Factory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource : object {
    private RegistrationData _registrationData;
    private IResolvePipelineBuilder _existingPipelineBuilder;
    private OpenGenericDelegateActivatorData _activatorData;
    public bool IsAdapterForIndividualComponents { get; }
    public OpenGenericDelegateRegistrationSource(RegistrationData registrationData, IResolvePipelineBuilder existingPipelineBuilder, OpenGenericDelegateActivatorData activatorData);
    [IteratorStateMachineAttribute("Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource/<RegistrationsFor>d__4")]
public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string OpenGenericDelegateRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_OpenGenericDelegateRegistrationSourceDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensions : object {
    public static IRegistrationBuilder`3<object, ReflectionActivatorData, DynamicRegistrationStyle> RegisterGeneric(ContainerBuilder builder, Type implementer);
    public static IRegistrationBuilder`3<object, OpenGenericDelegateActivatorData, DynamicRegistrationStyle> RegisterGeneric(ContainerBuilder builder, Func`4<IComponentContext, Type[], IEnumerable`1<Parameter>, object> factory);
    public static IRegistrationBuilder`3<object, ReflectionActivatorData, DynamicRegistrationStyle> CreateGenericBuilder(Type implementer);
    public static IRegistrationBuilder`3<object, OpenGenericDelegateActivatorData, DynamicRegistrationStyle> CreateGenericBuilder(Func`4<IComponentContext, Type[], IEnumerable`1<Parameter>, object> factory);
    public static IRegistrationBuilder`3<object, OpenGenericDecoratorActivatorData, DynamicRegistrationStyle> RegisterGenericDecorator(ContainerBuilder builder, Type decoratorType, Type decoratedServiceType, object fromKey, object toKey);
    private static IServiceWithType GetServiceWithKey(Type serviceType, object key);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ImplementorMustBeOpenGenericType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ImplementorMustBeOpenGenericType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.OpenGenerics.OpenGenericRegistrationSource : object {
    private RegistrationData _registrationData;
    private IResolvePipelineBuilder _existingPipelineBuilder;
    private ReflectionActivatorData _activatorData;
    public bool IsAdapterForIndividualComponents { get; }
    public OpenGenericRegistrationSource(RegistrationData registrationData, IResolvePipelineBuilder existingPipelineBuilder, ReflectionActivatorData activatorData);
    [IteratorStateMachineAttribute("Autofac.Features.OpenGenerics.OpenGenericRegistrationSource/<RegistrationsFor>d__4")]
public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string OpenGenericRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_OpenGenericRegistrationSourceDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Features.OpenGenerics.OpenGenericServiceBinder : object {
    public static bool TryBindOpenGenericTypedService(IServiceWithType serviceWithType, IEnumerable`1<Service> configuredOpenGenericServices, Type openGenericImplementationType, Type& constructedImplementationType, Service[]& constructedServices);
    private static Type GetGenericTypeDefinition(Type type);
    public static bool TryBindOpenGenericDelegateService(IServiceWithType serviceWithType, IEnumerable`1<Service> configuredOpenGenericServices, Func`4<IComponentContext, Type[], IEnumerable`1<Parameter>, object> openGenericFactory, Func`3& constructedFactory, Service[]& constructedServices);
    private static Type[] TryMapImplementationGenericArguments(Type implementationType, Type serviceType, Type serviceTypeDefinition, Type[] serviceGenericArguments);
    private static Type[] TryFindServiceArgumentsForImplementation(Type implementationType, IEnumerable`1<Type> serviceGenericArguments, IEnumerable`1<Type> serviceArgumentDefinitions);
    private static Type GetGenericBaseType(Type implementationType, Type serviceTypeDefinition);
    private static Type[] GetInterfaces(Type implementationType, Type serviceType);
    private static Type TryFindServiceArgumentForImplementationArgumentDefinition(Type implementationGenericArgumentDefinition, IEnumerable`1<KeyValuePair`2<Type, Type>> serviceArgumentDefinitionToArgument);
    public static void EnforceBindable(Type implementationType, IEnumerable`1<Service> services);
    private static bool IsCompatibleGenericClassDefinition(Type implementor, Type serviceType);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ImplementorDoesntImplementService { get; }
    internal static string ImplementorMustBeOpenGenericTypeDefinition { get; }
    internal static string ServiceTypeMustBeOpenGenericTypeDefinition { get; }
    internal static string TypesAreNotConvertible { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ImplementorDoesntImplementService();
    internal static string get_ImplementorMustBeOpenGenericTypeDefinition();
    internal static string get_ServiceTypeMustBeOpenGenericTypeDefinition();
    internal static string get_TypesAreNotConvertible();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.OwnedInstances.InstancePerOwnedKey : object {
    private TypedService _serviceWithType;
    public InstancePerOwnedKey(TypedService typedService);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IServiceWithType other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.OwnedInstances.Owned`1 : Disposable {
    [NullableAttribute("2")]
private IDisposable _lifetime;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; public set; }
    public Owned`1(T value, IDisposable lifetime);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Autofac.Features.OwnedInstances.Owned`1/<DisposeAsync>d__7")]
protected virtual ValueTask DisposeAsync(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource : ImplicitRegistrationSource {
    public string Description { get; }
    protected virtual object ResolveInstance(IComponentContext ctx, ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
    protected virtual IRegistrationBuilder`3<object, SimpleActivatorData, SingleRegistrationStyle> BuildRegistration(IRegistrationBuilder`3<object, SimpleActivatorData, SingleRegistrationStyle> registration);
    public virtual string get_Description();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string OwnedInstanceRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_OwnedInstanceRegistrationSourceDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource : object {
    private Func`2<Type, bool> _predicate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> <RegistrationConfiguration>k__BackingField;
    public bool IsAdapterForIndividualComponents { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> RegistrationConfiguration { get; public set; }
    public AnyConcreteTypeNotAlreadyRegisteredSource(Func`2<Type, bool> predicate);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    [CompilerGeneratedAttribute]
public Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> get_RegistrationConfiguration();
    [CompilerGeneratedAttribute]
public void set_RegistrationConfiguration(Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> value);
    public virtual string ToString();
    private static bool ShouldRegisterGenericService(Type type);
    private static bool IsInsideAutofac(Type type);
}
[ExtensionAttribute]
public static class Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AnyConcreteTypeNotAlreadyRegisteredSource WithRegistrationsAs(AnyConcreteTypeNotAlreadyRegisteredSource source, Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> configurationAction);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AnyConcreteTypeNotAlreadyRegisteredSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AnyConcreteTypeNotAlreadyRegisteredSourceDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Features.Scanning.AssemblyExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<Type> GetPermittedTypesForAssemblyScanning(Assembly assembly);
    [ExtensionAttribute]
internal static void ScanAssemblies(IEnumerable`1<Assembly> assemblies, IComponentRegistryBuilder cr, IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> rb);
    [CompilerGeneratedAttribute]
internal static IReadOnlyList`1<Type> <GetPermittedTypesForAssemblyScanning>g__Uncached|0_0(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Autofac.Features.Scanning.BaseScanningActivatorData`2 : ReflectionActivatorData {
    [CompilerGeneratedAttribute]
private ICollection`1<Action`2<Type, IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle>>> <ConfigurationActions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Func`2<Type, bool>> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Action`1<IComponentRegistryBuilder>> <PostScanningCallbacks>k__BackingField;
    public ICollection`1<Action`2<Type, IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle>>> ConfigurationActions { get; }
    public ICollection`1<Func`2<Type, bool>> Filters { get; }
    public ICollection`1<Action`1<IComponentRegistryBuilder>> PostScanningCallbacks { get; }
    protected BaseScanningActivatorData`2(ICollection`1<Action`2<Type, IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle>>> configurationActions);
    [CompilerGeneratedAttribute]
public ICollection`1<Action`2<Type, IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle>>> get_ConfigurationActions();
    [CompilerGeneratedAttribute]
public ICollection`1<Func`2<Type, bool>> get_Filters();
    [CompilerGeneratedAttribute]
public ICollection`1<Action`1<IComponentRegistryBuilder>> get_PostScanningCallbacks();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Autofac.Features.Scanning.OpenGenericScanningActivatorData : BaseScanningActivatorData`2<ReflectionActivatorData, DynamicRegistrationStyle> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Features.Scanning.OpenGenericScanningRegistrationExtensions : object {
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> ScanAndRegisterOpenGenericAssemblyTypes(ContainerBuilder builder, Assembly[] assemblies);
    public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<Service>> serviceMapping);
    private static void ScanAssembliesForOpenGenerics(IEnumerable`1<Assembly> assemblies, IComponentRegistryBuilder cr, IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> rb);
    public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType);
    public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType, object serviceKey);
    public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType, Func`2<Type, object> serviceKeyMapping);
    [CompilerGeneratedAttribute]
internal static IRegistrationBuilder`3<object, ReflectionActivatorData, DynamicRegistrationStyle> <ScanAssembliesForOpenGenerics>g__TypeBuilderFactory|2_3(Type type);
    [CompilerGeneratedAttribute]
internal static void <ScanAssembliesForOpenGenerics>g__RegistrationSourceFactory|2_4(IComponentRegistryBuilder registry, IRegistrationBuilder`3<object, ReflectionActivatorData, DynamicRegistrationStyle> data);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Autofac.Features.Scanning.ScanningActivatorData : BaseScanningActivatorData`2<ConcreteReflectionActivatorData, SingleRegistrationStyle> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Features.Scanning.ScanningRegistrationExtensions : object {
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> ScanAndRegisterAssemblyTypes(ContainerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> ScanAndRegisterTypes(ContainerBuilder builder, Type[] types);
    public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AsClosedTypesOf(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType);
    public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AsClosedTypesOf(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType, object serviceKey);
    public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AsClosedTypesOf(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType, Func`2<Type, object> serviceKeyMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type type);
    public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<Service>> serviceMapping);
    public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> PreserveExistingDefaults(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Features.Scanning.TypeExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<Type> AllowedByActivatorFilters(IEnumerable`1<Type> types, BaseScanningActivatorData`2<TActivatorData, TRegistrationStyle> activatorData);
    [ExtensionAttribute]
internal static IEnumerable`1<Type> WhichAreAllowedThroughScanning(IEnumerable`1<Type> types);
    [ExtensionAttribute]
internal static void FilterAndRegisterConcreteTypes(IEnumerable`1<Type> types, IComponentRegistryBuilder cr, IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> rb);
    [ExtensionAttribute]
internal static void RegisterUsingTemplate(IEnumerable`1<Type> types, IComponentRegistryBuilder cr, IRegistrationBuilder`3<object, BaseScanningActivatorData`2<TActivatorData, TScanStyle>, TRegistrationBuilderStyle> rb, Func`2<Type, IRegistrationBuilder`3<object, TActivatorData, TScanStyle>> scannedConstructorFunc, Action`2<IComponentRegistryBuilder, IRegistrationBuilder`3<object, TActivatorData, TScanStyle>> register);
    [ExtensionAttribute]
private static void ConfigureFrom(IRegistrationBuilder`3<object, TActivatorData, TScanStyle> scanned, IRegistrationBuilder`3<object, BaseScanningActivatorData`2<TActivatorData, TScanStyle>, TRegistrationBuilderStyle> rb, Type type);
    [CompilerGeneratedAttribute]
internal static IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle> <FilterAndRegisterConcreteTypes>g__TypeBuilderFactory|2_2(Type type);
    [CompilerGeneratedAttribute]
internal static void <FilterAndRegisterConcreteTypes>g__SingleComponentRegistration|2_3(IComponentRegistryBuilder registry, IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.Features.Variance.ContravariantRegistrationSource : object {
    private static string IsContravariantAdapter;
    public bool IsAdapterForIndividualComponents { get; }
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<ServiceRegistration>> registrationAccessor);
    private static Type[] SubstituteArrayElementAt(Type[] array, Type newElement, int index);
    private static IEnumerable`1<Type> GetTypesAssignableFrom(Type type);
    [IteratorStateMachineAttribute("Autofac.Features.Variance.ContravariantRegistrationSource/<GetBagOfTypesAssignableFrom>d__4")]
private static IEnumerable`1<Type> GetBagOfTypesAssignableFrom(Type type);
    private static bool IsCompatibleInterfaceType(Type type, Int32& contravariantParameterIndex);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
}
[NullableContextAttribute("1")]
public interface Autofac.IComponentContext {
    public IComponentRegistry ComponentRegistry { get; }
    public abstract virtual IComponentRegistry get_ComponentRegistry();
    public abstract virtual object ResolveComponent(ResolveRequest& modreq(System.Runtime.InteropServices.InAttribute) request);
}
public interface Autofac.IContainer {
    [NullableAttribute("1")]
public DiagnosticListener DiagnosticSource { get; }
    [NullableContextAttribute("1")]
public abstract virtual DiagnosticListener get_DiagnosticSource();
}
[NullableContextAttribute("1")]
public interface Autofac.ILifetimeScope {
    public IDisposer Disposer { get; }
    public object Tag { get; }
    public abstract virtual ILifetimeScope BeginLifetimeScope();
    public abstract virtual ILifetimeScope BeginLifetimeScope(object tag);
    public abstract virtual ILifetimeScope BeginLifetimeScope(Action`1<ContainerBuilder> configurationAction);
    public abstract virtual ILifetimeScope BeginLifetimeScope(object tag, Action`1<ContainerBuilder> configurationAction);
    public abstract virtual ILifetimeScope BeginLoadContextLifetimeScope(AssemblyLoadContext loadContext, Action`1<ContainerBuilder> configurationAction);
    public abstract virtual ILifetimeScope BeginLoadContextLifetimeScope(object tag, AssemblyLoadContext loadContext, Action`1<ContainerBuilder> configurationAction);
    public abstract virtual IDisposer get_Disposer();
    public abstract virtual object get_Tag();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
}
public interface Autofac.IStartable {
    public abstract virtual void Start();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Autofac.Module : object {
    protected Assembly ThisAssembly { get; }
    public sealed virtual void Configure(IComponentRegistryBuilder componentRegistry);
    protected virtual void Load(ContainerBuilder builder);
    protected virtual void AttachToComponentRegistration(IComponentRegistryBuilder componentRegistry, IComponentRegistration registration);
    protected virtual void AttachToRegistrationSource(IComponentRegistryBuilder componentRegistry, IRegistrationSource registrationSource);
    private void AttachToRegistrations(IComponentRegistryBuilder componentRegistry);
    private void AttachToSources(IComponentRegistryBuilder componentRegistry);
    protected virtual Assembly get_ThisAssembly();
    [CompilerGeneratedAttribute]
private void <AttachToRegistrations>b__4_0(object sender, ComponentRegisteredEventArgs e);
    [CompilerGeneratedAttribute]
private void <AttachToSources>b__5_0(object sender, RegistrationSourceAddedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.ModuleRegistrationExtensions : object {
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(ContainerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(IModuleRegistrar registrar, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(ContainerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(IModuleRegistrar registrar, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(ContainerBuilder builder, Type moduleType, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(IModuleRegistrar registrar, Type moduleType, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterModule(ContainerBuilder builder);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterModule(IModuleRegistrar registrar);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterModule(ContainerBuilder builder, IModule module);
    [ExtensionAttribute]
public static IModuleRegistrar OnlyIf(IModuleRegistrar registrar, Predicate`1<IComponentRegistryBuilder> predicate);
    [ExtensionAttribute]
public static IModuleRegistrar IfNotRegistered(IModuleRegistrar registrar, Type serviceType);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.ModuleResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ThisAssemblyUnavailable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ThisAssemblyUnavailable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.NamedParameter : ConstantParameter {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public NamedParameter(string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.ParameterExtensions : object {
    [ExtensionAttribute]
public static T Named(IEnumerable`1<Parameter> parameters, string name);
    [ExtensionAttribute]
public static T Positional(IEnumerable`1<Parameter> parameters, int position);
    [ExtensionAttribute]
public static T TypedAs(IEnumerable`1<Parameter> parameters);
    private static TValue ConstantValue(IEnumerable`1<Parameter> parameters, Func`2<TParameter, bool> predicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.PipelineBuilderExtensions : object {
    private static string AnonymousDescriptor;
    [ExtensionAttribute]
public static IResolvePipelineBuilder Use(IResolvePipelineBuilder builder, PipelinePhase phase, Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> callback);
    [ExtensionAttribute]
public static IResolvePipelineBuilder Use(IResolvePipelineBuilder builder, PipelinePhase phase, MiddlewareInsertionMode insertionMode, Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> callback);
    [ExtensionAttribute]
public static IResolvePipelineBuilder Use(IResolvePipelineBuilder builder, string descriptor, PipelinePhase phase, Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> callback);
    [ExtensionAttribute]
public static IResolvePipelineBuilder Use(IResolvePipelineBuilder builder, string descriptor, PipelinePhase phase, MiddlewareInsertionMode insertionMode, Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> callback);
}
public class Autofac.PositionalParameter : ConstantParameter {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; private set; }
    [NullableContextAttribute("1")]
public PositionalParameter(int position, object value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
}
[FlagsAttribute]
public enum Autofac.PropertyWiringOptions : Enum {
    public int value__;
    public static PropertyWiringOptions None;
    public static PropertyWiringOptions AllowCircularDependencies;
    public static PropertyWiringOptions PreserveSetValues;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.RegistrationExtensions : object {
    private static string AssemblyScanningWarning;
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TFrom, TTo> adapter);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`3<IComponentContext, TFrom, TTo> adapter);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`2<TFrom, TTo> adapter);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Assembly scanning is unlikely to be compatible with member-level trimming; the linker will not be able to determine which types to preserve.")]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterAssemblyTypes(ContainerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<Service>> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, Service> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, Type> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<Type>> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ScanningActivatorData, DynamicRegistrationStyle> AsSelf(IRegistrationBuilder`3<TLimit, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TConcreteActivatorData, SingleRegistrationStyle> AsSelf(IRegistrationBuilder`3<TLimit, TConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ReflectionActivatorData, DynamicRegistrationStyle> AsSelf(IRegistrationBuilder`3<TLimit, ReflectionActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ScanningActivatorData, DynamicRegistrationStyle> AsImplementedInterfaces(IRegistrationBuilder`3<TLimit, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TConcreteActivatorData, SingleRegistrationStyle> AsImplementedInterfaces(IRegistrationBuilder`3<TLimit, TConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ReflectionActivatorData, DynamicRegistrationStyle> AsImplementedInterfaces(IRegistrationBuilder`3<TLimit, ReflectionActivatorData, DynamicRegistrationStyle> registration);
    private static Type[] GetImplementedInterfaces(Type type);
    [ExtensionAttribute]
private static Type[] GetOpenGenericImplementedInterfaces(Type this);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ScanningActivatorData, TRegistrationStyle> PreserveExistingDefaults(IRegistrationBuilder`3<TLimit, ScanningActivatorData, TRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterTypes(ContainerBuilder builder, Type[] types);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AsClosedTypesOf(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AsClosedTypesOf(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType, object serviceKey);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AsClosedTypesOf(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType, Func`2<Type, object> serviceKeyMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type type);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> AssignableTo(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> Except(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> Except(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration, Action`1<IRegistrationBuilder`3<T, ConcreteReflectionActivatorData, SingleRegistrationStyle>> customizedRegistration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> InNamespaceOf(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> InNamespace(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, string ns);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> Where(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, bool> predicate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComposite, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterComposite(ContainerBuilder builder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterComposite(ContainerBuilder builder, Type compositeType, Type serviceType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TService, SimpleActivatorData, SingleRegistrationStyle> RegisterComposite(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, IEnumerable`1<TService>, TService> compositeDelegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TService, SimpleActivatorData, SingleRegistrationStyle> RegisterComposite(ContainerBuilder builder, Func`3<IComponentContext, IEnumerable`1<TService>, TService> compositeDelegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ReflectionActivatorData, DynamicRegistrationStyle> RegisterGenericComposite(ContainerBuilder builder, Type compositeType, Type serviceType);
    [NullableContextAttribute("2")]
private static void ApplyCompositeConfiguration(ContainerBuilder builder, IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> OnlyIf(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Predicate`1<IComponentRegistryBuilder> predicate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> IfNotRegistered(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Type serviceType);
    [ExtensionAttribute]
public static void RegisterComponent(ContainerBuilder builder, IComponentRegistration registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<T, SimpleActivatorData, SingleRegistrationStyle> RegisterInstance(ContainerBuilder builder, T instance);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TImplementer, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterType(ContainerBuilder builder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterType(ContainerBuilder builder, Type implementationType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<T, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`2<IComponentContext, T> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<T, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`3<IComponentContext, IEnumerable`1<Parameter>, T> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> PreserveExistingDefaults(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> WithMetadata(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<KeyValuePair`2<string, object>>> metadataMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> WithMetadataFrom(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> WithMetadata(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, string metadataKey, Func`2<Type, object> metadataValueMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> FindConstructorsWith(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, IConstructorFinder constructorFinder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> FindConstructorsWith(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Func`2<Type, ConstructorInfo[]> finder);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> PropertiesAutowired(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registration, PropertyWiringOptions wiringFlags);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Autowired properties with a custom selector may not be compatible with member-level trimming.")]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> PropertiesAutowired(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Func`3<PropertyInfo, object, bool> propertySelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> UsingConstructor(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Type[] signature);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> UsingConstructor(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, IConstructorSelector constructorSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> UsingConstructor(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Expression`1<Func`1<TLimit>> constructorSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithParameter(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, string parameterName, object parameterValue);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithParameter(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Parameter parameter);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithParameter(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Func`3<ParameterInfo, IComponentContext, bool> parameterSelector, Func`3<ParameterInfo, IComponentContext, object> valueProvider);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithParameters(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithProperty(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, string propertyName, object propertyValue);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithProperty(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Parameter property);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithProperty(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Expression`1<Func`2<TLimit, TProperty>> propertyExpression, TProperty propertyValue);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithProperties(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, IEnumerable`1<Parameter> properties);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> Targeting(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration, IComponentRegistration target);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> AutoActivate(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> InstancePerRequest(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Object[] lifetimeScopeTags);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, OpenGenericDecoratorActivatorData, DynamicRegistrationStyle> RegisterGenericDecorator(ContainerBuilder builder, Type decoratorType, Type decoratedServiceType, object fromKey, object toKey);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TService, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterDecorator(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TService, TService> decorator, object fromKey, object toKey);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TService, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterDecorator(ContainerBuilder builder, Func`3<IComponentContext, TService, TService> decorator, object fromKey, object toKey);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TService, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterDecorator(ContainerBuilder builder, Func`2<TService, TService> decorator, object fromKey, object toKey);
    [ExtensionAttribute]
public static void RegisterDecorator(ContainerBuilder builder, Func`2<IDecoratorContext, bool> condition);
    [ExtensionAttribute]
public static void RegisterDecorator(ContainerBuilder builder, Type decoratorType, Type serviceType, Func`2<IDecoratorContext, bool> condition);
    [ExtensionAttribute]
public static void RegisterDecorator(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TService, TService> decorator, Func`2<IDecoratorContext, bool> condition);
    [ExtensionAttribute]
public static void RegisterGenericDecorator(ContainerBuilder builder, Type decoratorType, Type serviceType, Func`2<IDecoratorContext, bool> condition);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> OnRegistered(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration, Action`1<ComponentRegisteredEventArgs> handler);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ScanningActivatorData, TRegistrationStyle> OnRegistered(IRegistrationBuilder`3<TLimit, ScanningActivatorData, TRegistrationStyle> registration, Action`1<ComponentRegisteredEventArgs> handler);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnRelease(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registration, Action`1<TLimit> releaseAction);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnRelease(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registration, Func`2<TLimit, ValueTask> releaseAction);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ReflectionActivatorData, DynamicRegistrationStyle> RegisterGeneric(ContainerBuilder builder, Type implementer);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, OpenGenericDelegateActivatorData, DynamicRegistrationStyle> RegisterGeneric(ContainerBuilder builder, Func`3<IComponentContext, Type[], object> factory);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, OpenGenericDelegateActivatorData, DynamicRegistrationStyle> RegisterGeneric(ContainerBuilder builder, Func`4<IComponentContext, Type[], IEnumerable`1<Parameter>, object> factory);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> Keyed(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration, Func`2<Type, object> serviceKeyMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> Keyed(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, object> serviceKeyMapping, Type serviceType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> Named(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration, Func`2<Type, string> serviceNameMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> Named(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, string> serviceNameMapping, Type serviceType);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Assembly scanning is unlikely to be compatible with member-level trimming; the linker will not be able to determine which types to preserve.")]
public static IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> RegisterAssemblyOpenGenericTypes(ContainerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<Service>> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, Service> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, Type> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<Type>> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, DynamicRegistrationStyle> AsSelf(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> Except(IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> registration, Type openGenericType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> Except(IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> registration, Type openGenericType, Action`1<IRegistrationBuilder`3<object, ReflectionActivatorData, DynamicRegistrationStyle>> customizedRegistration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> Where(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, bool> predicate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType, object serviceKey);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType, Func`2<Type, object> serviceKeyMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> InNamespaceOf(IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> InNamespace(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, string ns);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, DynamicRegistrationStyle> AsImplementedInterfaces(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> WithMetadata(IRegistrationBuilder`3<TLimit, OpenGenericScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<KeyValuePair`2<string, object>>> metadataMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> WithMetadataFrom(IRegistrationBuilder`3<object, OpenGenericScanningActivatorData, DynamicRegistrationStyle> registration);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`2<TDependency1, TComponent> delegate);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`3<IComponentContext, TDependency1, TComponent> delegate);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`3<TDependency1, TDependency2, TComponent> delegate);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`4<IComponentContext, TDependency1, TDependency2, TComponent> delegate);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`4<TDependency1, TDependency2, TDependency3, TComponent> delegate);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`5<IComponentContext, TDependency1, TDependency2, TDependency3, TComponent> delegate);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`5<TDependency1, TDependency2, TDependency3, TDependency4, TComponent> delegate);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`6<IComponentContext, TDependency1, TDependency2, TDependency3, TDependency4, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`6<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`7<IComponentContext, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`7<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`8<IComponentContext, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`8<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`9<IComponentContext, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`9<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`10<IComponentContext, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`10<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`11<IComponentContext, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`11<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TDependency10, TComponent> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TComponent, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`12<IComponentContext, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TDependency10, TComponent> delegate);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.RegistrationExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CompositesCannotProvideMultipleServices { get; }
    internal static string DecoratorRequiresInstanceParameter { get; }
    internal static string ExpressionDoesNotReferToProperty { get; }
    internal static string InstanceRegistrationsAreSingleInstanceOnly { get; }
    internal static string MetadataAttributeNotFound { get; }
    internal static string MultipleMetadataAttributesSameType { get; }
    internal static string NoMatchingConstructorExists { get; }
    internal static string OnlyIfRequiresCallbackContainer { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CompositesCannotProvideMultipleServices();
    internal static string get_DecoratorRequiresInstanceParameter();
    internal static string get_ExpressionDoesNotReferToProperty();
    internal static string get_InstanceRegistrationsAreSingleInstanceOnly();
    internal static string get_MetadataAttributeNotFound();
    internal static string get_MultipleMetadataAttributesSameType();
    internal static string get_NoMatchingConstructorExists();
    internal static string get_OnlyIfRequiresCallbackContainer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.ResolutionExtensions : object {
    public static string PropertyInjectedInstanceTypeNamedParameter;
    [ExtensionAttribute]
public static TService InjectProperties(IComponentContext context, TService instance);
    [ExtensionAttribute]
public static TService InjectProperties(IComponentContext context, TService instance, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService InjectProperties(IComponentContext context, TService instance, Parameter[] parameters);
    [ExtensionAttribute]
public static TService InjectProperties(IComponentContext context, TService instance, IPropertySelector propertySelector);
    [ExtensionAttribute]
public static TService InjectProperties(IComponentContext context, TService instance, IPropertySelector propertySelector, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService InjectProperties(IComponentContext context, TService instance, IPropertySelector propertySelector, Parameter[] parameters);
    [ExtensionAttribute]
public static TService InjectUnsetProperties(IComponentContext context, TService instance);
    [ExtensionAttribute]
public static TService InjectUnsetProperties(IComponentContext context, TService instance, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService InjectUnsetProperties(IComponentContext context, TService instance, Parameter[] parameters);
    [ExtensionAttribute]
public static bool IsRegistered(IComponentContext context);
    [ExtensionAttribute]
public static bool IsRegistered(IComponentContext context, Type serviceType);
    [ExtensionAttribute]
public static bool IsRegisteredService(IComponentContext context, Service service);
    [ExtensionAttribute]
public static bool IsRegisteredWithKey(IComponentContext context, object serviceKey);
    [ExtensionAttribute]
public static bool IsRegisteredWithKey(IComponentContext context, object serviceKey, Type serviceType);
    [ExtensionAttribute]
public static bool IsRegisteredWithName(IComponentContext context, string serviceName);
    [ExtensionAttribute]
public static bool IsRegisteredWithName(IComponentContext context, string serviceName, Type serviceType);
    [ExtensionAttribute]
public static TService Resolve(IComponentContext context);
    [ExtensionAttribute]
public static TService Resolve(IComponentContext context, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService Resolve(IComponentContext context, Parameter[] parameters);
    [ExtensionAttribute]
public static object Resolve(IComponentContext context, Type serviceType);
    [ExtensionAttribute]
public static object Resolve(IComponentContext context, Type serviceType, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object Resolve(IComponentContext context, Type serviceType, Parameter[] parameters);
    [ExtensionAttribute]
public static TService ResolveKeyed(IComponentContext context, object serviceKey);
    [ExtensionAttribute]
public static TService ResolveKeyed(IComponentContext context, object serviceKey, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveKeyed(IComponentContext context, object serviceKey, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveKeyed(IComponentContext context, object serviceKey, Type serviceType);
    [ExtensionAttribute]
public static object ResolveKeyed(IComponentContext context, object serviceKey, Type serviceType, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveKeyed(IComponentContext context, object serviceKey, Type serviceType, Parameter[] parameters);
    [ExtensionAttribute]
public static TService ResolveNamed(IComponentContext context, string serviceName);
    [ExtensionAttribute]
public static TService ResolveNamed(IComponentContext context, string serviceName, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveNamed(IComponentContext context, string serviceName, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveNamed(IComponentContext context, string serviceName, Type serviceType);
    [ExtensionAttribute]
public static object ResolveNamed(IComponentContext context, string serviceName, Type serviceType, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveNamed(IComponentContext context, string serviceName, Type serviceType, Parameter[] parameters);
    [ExtensionAttribute]
public static TService ResolveOptional(IComponentContext context);
    [ExtensionAttribute]
public static TService ResolveOptional(IComponentContext context, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveOptional(IComponentContext context, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveOptional(IComponentContext context, Type serviceType);
    [ExtensionAttribute]
public static object ResolveOptional(IComponentContext context, Type serviceType, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveOptional(IComponentContext context, Type serviceType, Parameter[] parameters);
    [ExtensionAttribute]
public static TService ResolveOptionalKeyed(IComponentContext context, object serviceKey);
    [ExtensionAttribute]
public static TService ResolveOptionalKeyed(IComponentContext context, object serviceKey, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveOptionalKeyed(IComponentContext context, object serviceKey, Parameter[] parameters);
    [ExtensionAttribute]
public static TService ResolveOptionalNamed(IComponentContext context, string serviceName);
    [ExtensionAttribute]
public static TService ResolveOptionalNamed(IComponentContext context, string serviceName, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveOptionalNamed(IComponentContext context, string serviceName, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveOptionalService(IComponentContext context, Service service);
    [ExtensionAttribute]
public static object ResolveOptionalService(IComponentContext context, Service service, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveOptionalService(IComponentContext context, Service service, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveService(IComponentContext context, Service service);
    [ExtensionAttribute]
public static object ResolveService(IComponentContext context, Service service, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveService(IComponentContext context, Service service, Parameter[] parameters);
    [ExtensionAttribute]
public static bool TryResolve(IComponentContext context, T& instance);
    [ExtensionAttribute]
public static bool TryResolve(IComponentContext context, Type serviceType, Object& instance);
    [ExtensionAttribute]
public static bool TryResolveKeyed(IComponentContext context, object serviceKey, T& instance);
    [ExtensionAttribute]
public static bool TryResolveKeyed(IComponentContext context, object serviceKey, Type serviceType, Object& instance);
    [ExtensionAttribute]
public static bool TryResolveNamed(IComponentContext context, string serviceName, T& instance);
    [ExtensionAttribute]
public static bool TryResolveNamed(IComponentContext context, string serviceName, Type serviceType, Object& instance);
    [ExtensionAttribute]
public static bool TryResolveService(IComponentContext context, Service service, Object& instance);
    [ExtensionAttribute]
public static bool TryResolveService(IComponentContext context, Service service, IEnumerable`1<Parameter> parameters, Object& instance);
    [NullableContextAttribute("2")]
private static TService CastInstance(object instance);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.ResolutionExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CouldNotCastInstance { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CouldNotCastInstance();
}
[ExtensionAttribute]
public static class Autofac.ResolutionValueExtensions : object {
    [NullableAttribute("1")]
private static IEnumerable`1<Parameter> NoParameters;
    private static ResolutionValueExtensions();
    [ExtensionAttribute]
public static Nullable`1<TService> ResolveOptional(IComponentContext context);
    [ExtensionAttribute]
public static Nullable`1<TService> ResolveOptional(IComponentContext context, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static Nullable`1<TService> ResolveOptional(IComponentContext context, Parameter[] parameters);
    [ExtensionAttribute]
public static Nullable`1<TService> ResolveOptionalKeyed(IComponentContext context, object serviceKey);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Nullable`1<TService> ResolveOptionalKeyed(IComponentContext context, object serviceKey, IEnumerable`1<Parameter> parameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Nullable`1<TService> ResolveOptionalKeyed(IComponentContext context, object serviceKey, Parameter[] parameters);
    [ExtensionAttribute]
public static Nullable`1<TService> ResolveOptionalNamed(IComponentContext context, string serviceName);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Nullable`1<TService> ResolveOptionalNamed(IComponentContext context, string serviceName, IEnumerable`1<Parameter> parameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Nullable`1<TService> ResolveOptionalNamed(IComponentContext context, string serviceName, Parameter[] parameters);
    [ExtensionAttribute]
public static bool TryResolve(IComponentContext context, Nullable`1& instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Autofac.ResolveRequest : ValueType {
    internal static IEnumerable`1<Parameter> NoParameters;
    [CompilerGeneratedAttribute]
private Service <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentRegistration <Registration>k__BackingField;
    [CompilerGeneratedAttribute]
private IResolvePipeline <ResolvePipeline>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Parameter> <Parameters>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IComponentRegistration <DecoratorTarget>k__BackingField;
    public Service Service { get; }
    public IComponentRegistration Registration { get; }
    public IResolvePipeline ResolvePipeline { get; }
    public IEnumerable`1<Parameter> Parameters { get; }
    [NullableAttribute("2")]
public IComponentRegistration DecoratorTarget { get; }
    public ResolveRequest(Service service, ServiceRegistration serviceRegistration, IEnumerable`1<Parameter> parameters, IComponentRegistration decoratorTarget);
    private static ResolveRequest();
    [CompilerGeneratedAttribute]
public Service get_Service();
    [CompilerGeneratedAttribute]
public IComponentRegistration get_Registration();
    [CompilerGeneratedAttribute]
public IResolvePipeline get_ResolvePipeline();
    [CompilerGeneratedAttribute]
public IEnumerable`1<Parameter> get_Parameters();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IComponentRegistration get_DecoratorTarget();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ResolveRequest other);
    public static bool op_Equality(ResolveRequest left, ResolveRequest right);
    public static bool op_Inequality(ResolveRequest left, ResolveRequest right);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Autofac.ScanningFilterExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> PublicOnly(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.ServiceMiddlewareRegistrationExtensions : object {
    private static string AnonymousDescriptor;
    [ExtensionAttribute]
public static void RegisterServiceMiddleware(ContainerBuilder builder, Service service, IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    [ExtensionAttribute]
public static void RegisterServiceMiddleware(ContainerBuilder builder, IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    [ExtensionAttribute]
public static void RegisterServiceMiddleware(ContainerBuilder builder, PipelinePhase phase, Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> callback);
    [ExtensionAttribute]
public static void RegisterServiceMiddleware(ContainerBuilder builder, string descriptor, PipelinePhase phase, Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> callback);
    [ExtensionAttribute]
public static void RegisterServiceMiddleware(ContainerBuilder builder, string descriptor, PipelinePhase phase, MiddlewareInsertionMode insertionMode, Action`2<ResolveRequestContext, Action`1<ResolveRequestContext>> callback);
    [ExtensionAttribute]
public static void RegisterServiceMiddleware(ContainerBuilder builder, Type serviceType, IResolveMiddleware middleware, MiddlewareInsertionMode insertionMode);
    [ExtensionAttribute]
public static IServiceMiddlewareSourceRegistrar RegisterServiceMiddlewareSource(ContainerBuilder builder, IServiceMiddlewareSource serviceMiddlewareSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.SourceRegistrationExtensions : object {
    [ExtensionAttribute]
public static ISourceRegistrar RegisterSource(ContainerBuilder builder, IRegistrationSource registrationSource);
    [ExtensionAttribute]
public static ISourceRegistrar RegisterSource(ContainerBuilder builder);
    [ExtensionAttribute]
public static ISourceRegistrar RegisterSource(ISourceRegistrar registrar);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Autofac.TypedParameter : ConstantParameter {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; private set; }
    public TypedParameter(Type type, object value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    public static TypedParameter From(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.TypeExtensions : object {
    private static BindingFlags DeclaredConstructorPublicFlags;
    private static BindingFlags DeclaredConstructorFlags;
    private static BindingFlags DeclaredMemberFlags;
    [ExtensionAttribute]
public static bool IsInNamespace(Type this, string namespace);
    [ExtensionAttribute]
public static bool IsInNamespaceOf(Type this);
    [ExtensionAttribute]
public static bool IsClosedTypeOf(Type this, Type openGeneric);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type this);
    [ExtensionAttribute]
public static MethodInfo GetDeclaredMethod(Type this, string methodName);
    [ExtensionAttribute]
public static PropertyInfo GetDeclaredProperty(Type this, string propertyName);
    [ExtensionAttribute]
public static ConstructorInfo[] GetDeclaredConstructors(Type this);
    [ExtensionAttribute]
public static ConstructorInfo[] GetDeclaredPublicConstructors(Type this);
    [ExtensionAttribute]
public static ConstructorInfo GetMatchingConstructor(Type type, Type[] constructorParameterTypes);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.TypeExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MemberNotFound { get; }
    internal static string NotOpenGenericType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MemberNotFound();
    internal static string get_NotOpenGenericType();
}
[ExtensionAttribute]
public static class Autofac.Util.AssemblyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetLoadableTypes(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Util.AsyncReleaseAction`1 : Disposable {
    private Func`2<TLimit, ValueTask> _action;
    private Func`1<TLimit> _factory;
    public AsyncReleaseAction`1(Func`2<TLimit, ValueTask> action, Func`1<TLimit> factory);
    [AsyncStateMachineAttribute("Autofac.Util.AsyncReleaseAction`1/<DisposeAsync>d__3")]
protected virtual ValueTask DisposeAsync(bool disposing);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool disposing);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Autofac.Util.Cache.ReflectionCacheAssemblyDictionary`2 : ConcurrentDictionary`2<TKey, TValue> {
    [CompilerGeneratedAttribute]
private ReflectionCacheUsage <Usage>k__BackingField;
    public ReflectionCacheUsage Usage { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ReflectionCacheUsage get_Usage();
    [CompilerGeneratedAttribute]
public void set_Usage(ReflectionCacheUsage value);
    [NullableContextAttribute("2")]
public sealed virtual void Clear(ReflectionCacheClearPredicate predicate);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Autofac.Util.Cache.ReflectionCacheDictionary`2 : ConcurrentDictionary`2<TKey, TValue> {
    [CompilerGeneratedAttribute]
private ReflectionCacheUsage <Usage>k__BackingField;
    public ReflectionCacheUsage Usage { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ReflectionCacheUsage get_Usage();
    [CompilerGeneratedAttribute]
public void set_Usage(ReflectionCacheUsage value);
    [NullableContextAttribute("1")]
public sealed virtual void Clear(ReflectionCacheClearPredicate predicate);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Autofac.Util.Cache.ReflectionCacheTupleDictionary`2 : ConcurrentDictionary`2<ValueTuple`2<TKey, TKey>, TValue> {
    [CompilerGeneratedAttribute]
private ReflectionCacheUsage <Usage>k__BackingField;
    public ReflectionCacheUsage Usage { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ReflectionCacheUsage get_Usage();
    [CompilerGeneratedAttribute]
public void set_Usage(ReflectionCacheUsage value);
    [NullableContextAttribute("1")]
public sealed virtual void Clear(ReflectionCacheClearPredicate predicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Util.Cache.TypeAssemblyReferenceProvider : object {
    public static IEnumerable`1<Assembly> GetAllReferencedAssemblies(MemberInfo memberInfo);
    public static IEnumerable`1<Assembly> GetAllReferencedAssemblies(MemberInfo memberInfo, HashSet`1<Assembly> holdingSet);
    private static void PopulateAllReferencedAssemblies(Type inputType, HashSet`1<Assembly> holdingSet);
}
public class Autofac.Util.Disposable : object {
    private static int DisposedFlag;
    private int _isDisposed;
    protected bool IsDisposed { get; }
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected bool get_IsDisposed();
    public sealed virtual ValueTask DisposeAsync();
    protected virtual ValueTask DisposeAsync(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autofac.Util.Enforce : object {
    public static IEnumerable`1<T> ArgumentElementNotNull(IEnumerable`1<T> value, string name);
    public static T NotNull(T value);
    public static string ArgumentNotNullOrEmpty(string value, string description);
    public static void ArgumentTypeIsFunction(Type delegateType);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Util.EnforceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotBeEmpty { get; }
    internal static string CannotBeNull { get; }
    internal static string DelegateReturnsVoid { get; }
    internal static string ElementCannotBeNull { get; }
    internal static string NotDelegate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotBeEmpty();
    internal static string get_CannotBeNull();
    internal static string get_DelegateReturnsVoid();
    internal static string get_ElementCannotBeNull();
    internal static string get_NotDelegate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Autofac.Util.FallbackDictionary`2 : object {
    private IDictionary`2<TKey, TValue> _localValues;
    private IDictionary`2<TKey, TValue> _parent;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public FallbackDictionary`2(IDictionary`2<TKey, TValue> parent);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [IteratorStateMachineAttribute("Autofac.Util.FallbackDictionary`2/<GetEnumerator>d__21")]
public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private IEnumerable`1<TKey> OrderedKeys();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Util.FallbackDictionaryResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DuplicateItem { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DuplicateItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Util.InternalTypeExtensions : object {
    [ExtensionAttribute]
public static Type FunctionReturnType(Type type);
    [ExtensionAttribute]
public static bool IsOpenGeneric(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesThatClose(Type this, Type openGeneric);
    [ExtensionAttribute]
public static bool IsClosedTypeOf(Type this, Type openGeneric);
    [ExtensionAttribute]
public static bool IsCompatibleWithGenericParameterConstraints(Type genericTypeDefinition, Type[] parameters);
    [ExtensionAttribute]
public static bool IsCompilerGenerated(Type type);
    [ExtensionAttribute]
public static bool IsDelegate(Type type);
    [ExtensionAttribute]
public static bool IsGenericEnumerableInterfaceType(Type type);
    [ExtensionAttribute]
public static bool IsGenericListOrCollectionInterfaceType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinedBy(Type this, Type openGeneric);
    [ExtensionAttribute]
public static bool IsOpenGenericTypeOf(Type this, Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool MayAllowReflectionActivation(Type type, bool allowCompilerGenerated);
    [ExtensionAttribute]
private static bool CheckBaseTypeIsOpenGenericTypeOf(Type this, Type type);
    [ExtensionAttribute]
private static bool CheckInterfacesAreOpenGenericTypeOf(Type this, Type type);
    private static IEnumerable`1<Type> FindAssignableTypesThatClose(Type candidateType, Type openGenericServiceType);
    private static Type SubstituteGenericParameterConstraint(Type[] parameters, Type constraint);
    private static bool ParameterCompatibleWithTypeConstraint(Type parameter, Type constraint);
    private static bool ParameterEqualsConstraint(Type parameter, Type constraint);
    private static IEnumerable`1<Type> TypesAssignableFrom(Type candidateType);
    [CompilerGeneratedAttribute]
internal static bool <IsGenericEnumerableInterfaceType>g__Uncached|7_0(Type type);
    [CompilerGeneratedAttribute]
internal static bool <IsGenericListOrCollectionInterfaceType>g__Uncached|8_0(Type type);
    [CompilerGeneratedAttribute]
internal static bool <IsGenericTypeDefinedBy>g__Uncached|9_0(Type type, Type openGeneric);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Util.ReflectionExtensions : object {
    [ExtensionAttribute]
public static TDelegate CreateDelegate(MethodInfo method, object target);
    [ExtensionAttribute]
public static bool TryGetDeclaringProperty(ParameterInfo pi, PropertyInfo& prop);
    public static PropertyInfo GetProperty(Expression`1<Func`2<TDeclaring, TProperty>> propertyAccessor);
    public static MethodInfo GetMethod(Expression`1<Action`1<TDeclaring>> methodCallExpression);
    public static ConstructorInfo GetConstructor(Expression`1<Func`1<TDeclaring>> constructorCallExpression);
    [ExtensionAttribute]
public static bool HasRequiredMemberAttribute(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool HasSetsRequiredMembersAttribute(ConstructorInfo constructorInfo);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Util.ReflectionExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ExpressionNotConstructorCall { get; }
    internal static string ExpressionNotMethodCall { get; }
    internal static string ExpressionNotPropertyAccessor { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ExpressionNotConstructorCall();
    internal static string get_ExpressionNotMethodCall();
    internal static string get_ExpressionNotPropertyAccessor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Autofac.Util.ReleaseAction`1 : Disposable {
    private Action`1<TLimit> _action;
    private Func`1<TLimit> _factory;
    public ReleaseAction`1(Action`1<TLimit> action, Func`1<TLimit> factory);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Autofac.Util.SequenceExtensions : object {
    [ExtensionAttribute]
public static string JoinWith(IEnumerable`1<string> elements, string separator);
    [IteratorStateMachineAttribute("Autofac.Util.SequenceExtensions/<AppendItem>d__1`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> AppendItem(IEnumerable`1<T> sequence, T trailingItem);
    [IteratorStateMachineAttribute("Autofac.Util.SequenceExtensions/<Prepend>d__2`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Prepend(IEnumerable`1<T> sequence, T leadingItem);
    [ExtensionAttribute]
public static void AddRange(ICollection`1<T> collection, IEnumerable`1<T> items);
}
internal static class Autofac.Util.SequenceGenerator : object {
    private static long _lastSequence;
    internal static long GetNextUniqueSequence();
}
internal static class Autofac.Util.Traverse : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Autofac.Util.Traverse/<Across>d__0`1")]
public static IEnumerable`1<T> Across(T first, Func`2<T, T> next);
}
[AttributeUsageAttribute("2048")]
internal class Autofac.Util.ValidatedNotNullAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
