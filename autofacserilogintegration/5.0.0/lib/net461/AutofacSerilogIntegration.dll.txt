internal class AutofacSerilogIntegration.ContextualLoggingModule : Module {
    private static string TargetTypeParameterName;
    private ILogger _logger;
    private bool _autowireProperties;
    private bool _skipRegistration;
    private bool _dispose;
    private bool _alwaysSupplyParameter;
    internal ContextualLoggingModule(ILogger logger, bool autowireProperties, bool dispose, bool alwaysSupplyParameter);
    protected virtual void Load(ContainerBuilder builder);
    private void RegisterLoggerAndProviderForDisposingMode(ContainerBuilder builder);
    private void RegisterLoggerForNonDisposingMode(ContainerBuilder builder);
    protected virtual void AttachToComponentRegistration(IComponentRegistryBuilder componentRegistry, IComponentRegistration registration);
    private static ConstructorInfo[] SafelyGetConstructors(ReflectionActivator ra);
    private void AttachRegistrationsPipelineBuild(IComponentRegistration registration);
    [CompilerGeneratedAttribute]
private LoggerProvider <RegisterLoggerAndProviderForDisposingMode>b__9_0(IComponentContext c);
    [CompilerGeneratedAttribute]
private ILogger <RegisterLoggerForNonDisposingMode>b__10_0(IComponentContext c, IEnumerable`1<Parameter> p);
}
internal class AutofacSerilogIntegration.LoggerProvider : object {
    private ILogger _logger;
    private Action _releaseAction;
    public LoggerProvider(ILogger logger);
    public ILogger GetLogger();
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1();
}
[ExtensionAttribute]
public static class AutofacSerilogIntegration.SerilogContainerBuilderExtensions : object {
    [ExtensionAttribute]
public static IModuleRegistrar RegisterLogger(ContainerBuilder builder, ILogger logger, bool autowireProperties, bool dispose, bool alwaysSupplyParameter);
}
public class AutofacSerilogIntegration.SerilogMiddleware : object {
    private Type _limitType;
    private ILogger _logger;
    private bool _autowireProperties;
    public PipelinePhase Phase { get; }
    public SerilogMiddleware(Type limitType, ILogger logger, bool autowireProperties);
    public sealed virtual PipelinePhase get_Phase();
    public sealed virtual void Execute(ResolveRequestContext context, Action`1<ResolveRequestContext> next);
}
