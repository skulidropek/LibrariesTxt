public class AutoFixture.AutoFakeItEasy.AutoFakeItEasyCustomization : object {
    private ISpecimenBuilder relay;
    [CompilerGeneratedAttribute]
private bool <GenerateDelegates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConfigureMembers>k__BackingField;
    public ISpecimenBuilder Relay { get; public set; }
    public bool GenerateDelegates { get; public set; }
    public bool ConfigureMembers { get; public set; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in the future version of the product. Please use the AutoFakeItEasyCustomization() overload (without arguments) instead and set the Relay property.")]
public AutoFakeItEasyCustomization(ISpecimenBuilder relay);
    public ISpecimenBuilder get_Relay();
    public void set_Relay(ISpecimenBuilder value);
    [CompilerGeneratedAttribute]
public bool get_GenerateDelegates();
    [CompilerGeneratedAttribute]
public void set_GenerateDelegates(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConfigureMembers();
    [CompilerGeneratedAttribute]
public void set_ConfigureMembers(bool value);
    public sealed virtual void Customize(IFixture fixture);
}
internal class AutoFixture.AutoFakeItEasy.CallResultCache : object {
    private ConcurrentDictionary`2<MethodCall, MethodCallResult> cachedResults;
    public MethodCallResult GetOrAdd(MethodCall methodCall, Func`1<MethodCallResult> resultFactory);
    public void Put(MethodCall methodCall, MethodCallResult methodCallResult);
}
public class AutoFixture.AutoFakeItEasy.ConfigureFakeMembersCommand : object {
    public sealed virtual void Execute(object specimen, ISpecimenContext context);
    private static FakeManager GetFakeManager(object specimen);
}
public class AutoFixture.AutoFakeItEasy.ConfigureSealedMembersCommand : object {
    private ISpecimenCommand autoPropertiesCommand;
    public sealed virtual void Execute(object specimen, ISpecimenContext context);
}
public class AutoFixture.AutoFakeItEasy.FakeItEasyBuilder : object {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public FakeItEasyBuilder(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public sealed virtual object Create(object request, ISpecimenContext context);
}
public class AutoFixture.AutoFakeItEasy.FakeItEasyMethodQuery : object {
    private static DelegateSpecification DelegateSpecification;
    private static FakeItEasyMethodQuery();
    public sealed virtual IEnumerable`1<IMethod> SelectMethods(Type type);
}
public class AutoFixture.AutoFakeItEasy.FakeItEasyRelay : object {
    [CompilerGeneratedAttribute]
private IRequestSpecification <FakeableSpecification>k__BackingField;
    public IRequestSpecification FakeableSpecification { get; }
    public FakeItEasyRelay(IRequestSpecification fakeableSpecification);
    [CompilerGeneratedAttribute]
public IRequestSpecification get_FakeableSpecification();
    public sealed virtual object Create(object request, ISpecimenContext context);
}
[ExtensionAttribute]
internal static class AutoFixture.AutoFakeItEasy.FakeItEasyType : object {
    [ExtensionAttribute]
internal static bool IsFake(Type type);
    [ExtensionAttribute]
internal static ConstructorInfo GetDefaultConstructor(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<ConstructorInfo> GetPublicAndProtectedConstructors(Type type);
    [ExtensionAttribute]
internal static Type GetFakedType(Type type);
}
internal class AutoFixture.AutoFakeItEasy.MethodCall : object {
    private Type declaringType;
    private string methodName;
    private IList`1<Type> parameterTypes;
    private IList`1<object> arguments;
    public MethodCall(Type declaringType, string methodName, IEnumerable`1<ParameterInfo> parameters, IEnumerable`1<object> arguments);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static IEnumerable`1<object> ExpandParamsArgument(IList`1<ParameterInfo> parameters, IEnumerable`1<object> arguments);
}
internal class AutoFixture.AutoFakeItEasy.MethodCallResult : object {
    private List`1<PositionedValue> outAndRefValues;
    private object returnValue;
    public MethodCallResult(object returnValue);
    public void ApplyToCall(IInterceptedFakeObjectCall fakeObjectCall);
    public void AddOutOrRefValue(int position, object value);
}
internal class AutoFixture.AutoFakeItEasy.MethodRule : object {
    private ISpecimenContext context;
    private CallResultCache resultSource;
    public Nullable`1<int> NumberOfTimesToCall { get; }
    public MethodRule(ISpecimenContext context, CallResultCache resultSource);
    public sealed virtual Nullable`1<int> get_NumberOfTimesToCall();
    public sealed virtual bool IsApplicableTo(IFakeObjectCall fakeObjectCall);
    public sealed virtual void Apply(IInterceptedFakeObjectCall fakeObjectCall);
    private static MethodCall CreateMethodCall(IFakeObjectCall fakeObjectCall);
    private MethodCallResult CreateMethodCallResult(IFakeObjectCall fakeObjectCall);
    private object ResolveReturnValue(IFakeObjectCall fakeObjectCall);
    private void AddOutAndRefValues(MethodCallResult result, IFakeObjectCall fakeObjectCall);
}
internal class AutoFixture.AutoFakeItEasy.PropertySetterRule : object {
    private CallResultCache resultCache;
    public Nullable`1<int> NumberOfTimesToCall { get; }
    public PropertySetterRule(CallResultCache resultCache);
    public sealed virtual Nullable`1<int> get_NumberOfTimesToCall();
    public sealed virtual bool IsApplicableTo(IFakeObjectCall fakeObjectCall);
    public sealed virtual void Apply(IInterceptedFakeObjectCall fakeObjectCall);
    private static bool IsSetter(MethodInfo method);
    private static MethodCall CreateMethodCallForGetter(IFakeObjectCall fakeObjectCall);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
