[ObsoleteAttribute("This customization is obsolete and will be removed in the future versions of product. Please use 'new AutoMoqCustomization { ConfigureMembers = true }' customization instead.")]
public class AutoFixture.AutoMoq.AutoConfiguredMoqCustomization : AutoMoqCustomization {
    public AutoConfiguredMoqCustomization(ISpecimenBuilder relay);
}
public class AutoFixture.AutoMoq.AutoMockPropertiesCommand : object {
    private ISpecimenCommand autoPropertiesCommand;
    public sealed virtual void Execute(object specimen, ISpecimenContext context);
}
public class AutoFixture.AutoMoq.AutoMoqCustomization : object {
    private ISpecimenBuilder relay;
    [CompilerGeneratedAttribute]
private bool <ConfigureMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateDelegates>k__BackingField;
    public bool ConfigureMembers { get; public set; }
    public bool GenerateDelegates { get; public set; }
    public ISpecimenBuilder Relay { get; public set; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version of the product. Please use the AutoMoqCustomization() overload (without arguments) instead and set the Relay property.")]
public AutoMoqCustomization(ISpecimenBuilder relay);
    [CompilerGeneratedAttribute]
public bool get_ConfigureMembers();
    [CompilerGeneratedAttribute]
public void set_ConfigureMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateDelegates();
    [CompilerGeneratedAttribute]
public void set_GenerateDelegates(bool value);
    public ISpecimenBuilder get_Relay();
    public void set_Relay(ISpecimenBuilder value);
    public sealed virtual void Customize(IFixture fixture);
}
[ExtensionAttribute]
internal static class AutoFixture.AutoMoq.Extensions.MethodInfoExtensions : object {
    [ExtensionAttribute]
internal static bool IsOverridable(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsSealed(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsVoid(MethodInfo method);
    [ExtensionAttribute]
internal static bool HasOutParameters(MethodInfo method);
    [ExtensionAttribute]
internal static bool HasRefParameters(MethodInfo method);
}
[ExtensionAttribute]
internal static class AutoFixture.AutoMoq.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<MethodInfo> GetAllMethods(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<PropertyInfo> GetAllProperties(Type type);
    [ExtensionAttribute]
internal static bool IsDelegate(Type type);
}
public class AutoFixture.AutoMoq.GreedyMockConstructorQuery : object {
    public sealed virtual IEnumerable`1<IMethod> SelectMethods(Type type);
}
internal class AutoFixture.AutoMoq.MockConstructorMethod : object {
    private ConstructorInfo ctor;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ParameterInfo> <Parameters>k__BackingField;
    public IEnumerable`1<ParameterInfo> Parameters { get; }
    internal MockConstructorMethod(ConstructorInfo ctor, ParameterInfo[] paramInfos);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ParameterInfo> get_Parameters();
    public sealed virtual object Invoke(IEnumerable`1<object> parameters);
}
public class AutoFixture.AutoMoq.MockConstructorQuery : object {
    private static DelegateSpecification DelegateSpecification;
    private static MockConstructorQuery();
    public sealed virtual IEnumerable`1<IMethod> SelectMethods(Type type);
}
public class AutoFixture.AutoMoq.MockPostprocessor : object {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public MockPostprocessor(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public sealed virtual object Create(object request, ISpecimenContext context);
}
public class AutoFixture.AutoMoq.MockRelay : object {
    [CompilerGeneratedAttribute]
private IRequestSpecification <MockableSpecification>k__BackingField;
    public IRequestSpecification MockableSpecification { get; }
    public MockRelay(IRequestSpecification mockableSpecification);
    [CompilerGeneratedAttribute]
public IRequestSpecification get_MockableSpecification();
    public sealed virtual object Create(object request, ISpecimenContext context);
    private static object ResolveMock(Type t, ISpecimenContext context);
}
[ObsoleteAttribute("This class will be removed in a future version of AutoFixture. Use AutoMockPropertiesCommand instead, which will populate both sealed and overridable properties.", "True")]
public class AutoFixture.AutoMoq.MockSealedPropertiesCommand : object {
    private ISpecimenCommand autoPropertiesCommand;
    public sealed virtual void Execute(object specimen, ISpecimenContext context);
}
[ExtensionAttribute]
public static class AutoFixture.AutoMoq.MockType : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IReturnsResult`1<TMock> ReturnsUsingFixture(IReturns`2<TMock, TResult> setup, ISpecimenBuilder fixture);
    [ExtensionAttribute]
internal static bool IsMock(Type type);
    [ExtensionAttribute]
internal static ConstructorInfo GetDefaultConstructor(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<ConstructorInfo> GetPublicAndProtectedConstructors(Type type);
    [ExtensionAttribute]
internal static ConstructorInfo GetParamsConstructor(Type type);
    [ExtensionAttribute]
internal static Type GetMockedType(Type type);
    [ExtensionAttribute]
internal static IReturnsResult`1<TMock> ReturnsUsingContext(IReturns`2<TMock, TResult> setup, ISpecimenContext context);
}
public class AutoFixture.AutoMoq.MockVirtualMethodsCommand : object {
    private static DelegateSpecification DelegateSpecification;
    private static MockVirtualMethodsCommand();
    public sealed virtual void Execute(object specimen, ISpecimenContext context);
    private static void SetupVoidMethod(Mock`1<TMock> mock, Expression`1<Action`1<TMock>> methodCallExpression);
    private static void SetupMethod(Mock`1<TMock> mock, Expression`1<Func`2<TMock, TResult>> methodCallExpression, ISpecimenContext context);
    private static IEnumerable`1<MethodInfo> GetConfigurableMethods(Type type);
    private static IEnumerable`1<MethodInfo> SkipWritablePropertyGetters(Type type, IEnumerable`1<MethodInfo> methods);
    private static bool CanBeConfigured(MethodInfo method);
    private static Expression MakeMethodInvocationLambda(Type mockedType, MethodInfo method, ISpecimenContext context);
    private static Expression MakeParameterExpression(ParameterInfo parameter, ISpecimenContext context);
}
public class AutoFixture.AutoMoq.StubPropertiesCommand : object {
    public sealed virtual void Execute(object specimen, ISpecimenContext context);
}
