[ObsoleteAttribute("This customization is obsolete and will be removed in a future versions of product. Please use 'new AutoNSubstituteCustomization { ConfigureMembers = true }' customization instead.")]
public class AutoFixture.AutoNSubstitute.AutoConfiguredNSubstituteCustomization : AutoNSubstituteCustomization {
    public AutoConfiguredNSubstituteCustomization(ISpecimenBuilder relay);
}
public class AutoFixture.AutoNSubstitute.AutoNSubstituteCustomization : object {
    private ISpecimenBuilder relay;
    [CompilerGeneratedAttribute]
private bool <ConfigureMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateDelegates>k__BackingField;
    [ObsoleteAttribute("This property is obsolete - use the Relay property instead.")]
public ISpecimenBuilder Builder { get; }
    public ISpecimenBuilder Relay { get; public set; }
    public bool ConfigureMembers { get; public set; }
    public bool GenerateDelegates { get; public set; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version of the product. Please use the AutoNSubstituteCustomization() overload (without arguments) instead and set the Relay property.")]
public AutoNSubstituteCustomization(ISpecimenBuilder relay);
    public ISpecimenBuilder get_Builder();
    public ISpecimenBuilder get_Relay();
    public void set_Relay(ISpecimenBuilder value);
    [CompilerGeneratedAttribute]
public bool get_ConfigureMembers();
    [CompilerGeneratedAttribute]
public void set_ConfigureMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateDelegates();
    [CompilerGeneratedAttribute]
public void set_GenerateDelegates(bool value);
    public sealed virtual void Customize(IFixture fixture);
}
internal static class AutoFixture.AutoNSubstitute.CompatShim : object {
    private static Func`3<ISubstituteState, ISubstitutionContext, ICallSpecificationFactory> CallSpecificationFactoryResolver;
    private static Func`3<ICallResults, ICall, bool> HasCallResultForResolver;
    private static Func`2<ICallHandler[], Route> RouteFactory;
    private static CompatShim();
    public static ICallSpecificationFactory GetCallSpecificationFactory(ISubstituteState substituteState, ISubstitutionContext substitutionContext);
    public static bool CallResults_HasCallResultFor(ICallResults callResults, ICall call);
    public static Route Route_CreateNew(ICallHandler[] handlers);
    private static Func`3<ISubstituteState, ISubstitutionContext, ICallSpecificationFactory> GetCallSpecificationFactoryResolver();
    private static Func`3<ICallResults, ICall, bool> GetHasCallResultForResolver();
    private static Func`2<ICallHandler[], Route> GetRouteFactory();
    private static Func`2<TThis, TResult> MakeUnboundDelegate(MethodInfo mi);
}
public class AutoFixture.AutoNSubstitute.CustomCallHandler.AutoFixtureValuesHandler : object {
    [CompilerGeneratedAttribute]
private ICallSpecificationFactory <CallSpecificationFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallResultCache <ResultCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallResultResolver <ResultResolver>k__BackingField;
    public ICallSpecificationFactory CallSpecificationFactory { get; }
    public ICallResultCache ResultCache { get; }
    public ICallResultResolver ResultResolver { get; }
    public AutoFixtureValuesHandler(ICallResultResolver resultResolver, ICallResultCache resultCache, ICallSpecificationFactory callSpecificationFactory);
    [CompilerGeneratedAttribute]
public ICallSpecificationFactory get_CallSpecificationFactory();
    [CompilerGeneratedAttribute]
public ICallResultCache get_ResultCache();
    [CompilerGeneratedAttribute]
public ICallResultResolver get_ResultResolver();
    public sealed virtual RouteAction Handle(ICall call);
    private static bool ArgValueWasModified(object current, object original);
}
public class AutoFixture.AutoNSubstitute.CustomCallHandler.CallResultCache : object {
    [CompilerGeneratedAttribute]
private ConcurrentStack`1<ResultForCallSpec> <CallResults>k__BackingField;
    private ConcurrentStack`1<ResultForCallSpec> CallResults { get; }
    [CompilerGeneratedAttribute]
private ConcurrentStack`1<ResultForCallSpec> get_CallResults();
    public sealed virtual void AddResult(ICallSpecification callSpecification, CallResultData result);
    public sealed virtual bool TryGetResult(ICall callInfo, CallResultData& callResult);
}
public class AutoFixture.AutoNSubstitute.CustomCallHandler.CallResultCacheFactory : object {
    public sealed virtual ICallResultCache CreateCache();
}
public class AutoFixture.AutoNSubstitute.CustomCallHandler.CallResultData : object {
    [CompilerGeneratedAttribute]
private Maybe`1<object> <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ArgumentValue> <ArgumentValues>k__BackingField;
    public Maybe`1<object> ReturnValue { get; }
    public IEnumerable`1<ArgumentValue> ArgumentValues { get; }
    public CallResultData(Maybe`1<object> returnValue, IEnumerable`1<ArgumentValue> argumentValues);
    [CompilerGeneratedAttribute]
public Maybe`1<object> get_ReturnValue();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ArgumentValue> get_ArgumentValues();
}
public class AutoFixture.AutoNSubstitute.CustomCallHandler.CallResultResolver : object {
    private static Type DelegateCallType;
    private static FieldInfo DelegateTypeFieldInfo;
    [CompilerGeneratedAttribute]
private ISpecimenContext <SpecimenContext>k__BackingField;
    public ISpecimenContext SpecimenContext { get; }
    private static CallResultResolver();
    public CallResultResolver(ISpecimenContext specimenContext);
    [CompilerGeneratedAttribute]
public ISpecimenContext get_SpecimenContext();
    public sealed virtual CallResultData ResolveResult(ICall callInfo);
    private object ResolveReturnValue(ICall call);
    private static ParameterInfo[] GetMethodParameters(ICall call);
}
public class AutoFixture.AutoNSubstitute.CustomCallHandler.CallResultResolverFactory : object {
    public sealed virtual ICallResultResolver Create(ISpecimenContext specimenContext);
}
public interface AutoFixture.AutoNSubstitute.CustomCallHandler.ICallResultCache {
    public abstract virtual void AddResult(ICallSpecification callSpecification, CallResultData result);
    public abstract virtual bool TryGetResult(ICall callInfo, CallResultData& callResult);
}
public interface AutoFixture.AutoNSubstitute.CustomCallHandler.ICallResultCacheFactory {
    public abstract virtual ICallResultCache CreateCache();
}
public interface AutoFixture.AutoNSubstitute.CustomCallHandler.ICallResultResolver {
    public abstract virtual CallResultData ResolveResult(ICall callInfo);
}
public interface AutoFixture.AutoNSubstitute.CustomCallHandler.ICallResultResolverFactory {
    public abstract virtual ICallResultResolver Create(ISpecimenContext specimenContext);
}
[ExtensionAttribute]
internal static class AutoFixture.AutoNSubstitute.Extensions.MethodInfoExtensions : object {
    [ExtensionAttribute]
internal static bool IsOverridable(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsSealed(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsVoid(MethodInfo method);
}
[ObsoleteAttribute("This class belongs to the legacy integration approach. Use the NSubstituteRegisterCallHandlerCommand class and its dependencies instead.")]
internal class AutoFixture.AutoNSubstitute.NoSetupCallbackHandler : object {
    private ISubstituteState state;
    private Action action;
    public NoSetupCallbackHandler(ISubstituteState state, Action action);
    public bool HasResultFor(ICall call);
    private sealed virtual override RouteAction NSubstitute.Core.ICallHandler.Handle(ICall call);
}
public class AutoFixture.AutoNSubstitute.NSubstituteBuilder : object {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestSpecification <SubstitutionSpecification>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public IRequestSpecification SubstitutionSpecification { get; }
    public NSubstituteBuilder(ISpecimenBuilder builder);
    public NSubstituteBuilder(ISpecimenBuilder builder, IRequestSpecification substitutionSpecification);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    [CompilerGeneratedAttribute]
public IRequestSpecification get_SubstitutionSpecification();
    public sealed virtual object Create(object request, ISpecimenContext context);
}
public class AutoFixture.AutoNSubstitute.NSubstituteMethodQuery : object {
    private static IRequestSpecification DelegateSpecification;
    private static NSubstituteMethodQuery();
    public sealed virtual IEnumerable`1<IMethod> SelectMethods(Type type);
}
public class AutoFixture.AutoNSubstitute.NSubstituteRegisterCallHandlerCommand : object {
    [CompilerGeneratedAttribute]
private ISubstitutionContext <SubstitutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallResultCacheFactory <CallResultCacheFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallResultResolverFactory <CallResultResolverFactory>k__BackingField;
    public ISubstitutionContext SubstitutionContext { get; }
    public ICallResultCacheFactory CallResultCacheFactory { get; }
    public ICallResultResolverFactory CallResultResolverFactory { get; }
    public NSubstituteRegisterCallHandlerCommand(ISubstitutionContext substitutionContext);
    public NSubstituteRegisterCallHandlerCommand(ISubstitutionContext substitutionContext, ICallResultCacheFactory callResultCacheFactory, ICallResultResolverFactory callResultResolverFactory);
    [CompilerGeneratedAttribute]
public ISubstitutionContext get_SubstitutionContext();
    [CompilerGeneratedAttribute]
public ICallResultCacheFactory get_CallResultCacheFactory();
    [CompilerGeneratedAttribute]
public ICallResultResolverFactory get_CallResultResolverFactory();
    public sealed virtual void Execute(object specimen, ISpecimenContext context);
}
public class AutoFixture.AutoNSubstitute.NSubstituteSealedPropertiesCommand : object {
    private static AutoPropertiesCommand AutoPropertiesCommand;
    private static NSubstituteSealedPropertiesCommand();
    public sealed virtual void Execute(object specimen, ISpecimenContext context);
}
[ExtensionAttribute]
internal static class AutoFixture.AutoNSubstitute.NSubstituteType : object {
    [ExtensionAttribute]
internal static IEnumerable`1<ConstructorInfo> GetPublicAndProtectedConstructors(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<Type> GetSubstituteTypes(Type type);
}
[ObsoleteAttribute("This class belongs to the legacy integration approach. Use the NSubstituteRegisterCallHandlerCommand class and its dependencies instead.")]
public class AutoFixture.AutoNSubstitute.NSubstituteVirtualMethodsCommand : object {
    private static MethodInfo[] ObjectMethods;
    private static NSubstituteVirtualMethodsCommand();
    public sealed virtual void Execute(object specimen, ISpecimenContext context);
    private static IEnumerable`1<MethodInfo> GetVirtualMethods(Type substituteType);
}
[AttributeUsageAttribute("2432")]
public class AutoFixture.AutoNSubstitute.SubstituteAttribute : Attribute {
}
public class AutoFixture.AutoNSubstitute.SubstituteAttributeRelay : object {
    public sealed virtual object Create(object request, ISpecimenContext context);
    private static object CreateSubstituteRequest(ICustomAttributeProvider request, SubstituteAttribute attribute);
}
public class AutoFixture.AutoNSubstitute.SubstituteRelay : object {
    [CompilerGeneratedAttribute]
private IRequestSpecification <Specification>k__BackingField;
    public IRequestSpecification Specification { get; }
    public SubstituteRelay(IRequestSpecification specification);
    [CompilerGeneratedAttribute]
public IRequestSpecification get_Specification();
    public sealed virtual object Create(object request, ISpecimenContext context);
}
public class AutoFixture.AutoNSubstitute.SubstituteRequest : object {
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    public Type TargetType { get; }
    public SubstituteRequest(Type targetType);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    public virtual string ToString();
}
public class AutoFixture.AutoNSubstitute.SubstituteRequestHandler : object {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <SubstituteFactory>k__BackingField;
    public ISpecimenBuilder SubstituteFactory { get; }
    public SubstituteRequestHandler(ISpecimenBuilder substituteFactory);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_SubstituteFactory();
    public sealed virtual object Create(object request, ISpecimenContext context);
}
