public class AutoFixture.Idioms.CompositeBehaviorExpectation : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IBehaviorExpectation> <BehaviorExpectations>k__BackingField;
    public IEnumerable`1<IBehaviorExpectation> BehaviorExpectations { get; }
    public CompositeBehaviorExpectation(IBehaviorExpectation[] behaviorExpectations);
    public CompositeBehaviorExpectation(IEnumerable`1<IBehaviorExpectation> behaviorExpectations);
    public sealed virtual void Verify(IGuardClauseCommand command);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IBehaviorExpectation> get_BehaviorExpectations();
}
public class AutoFixture.Idioms.CompositeIdiomaticAssertion : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IIdiomaticAssertion> <Assertions>k__BackingField;
    public IEnumerable`1<IIdiomaticAssertion> Assertions { get; }
    public CompositeIdiomaticAssertion(IIdiomaticAssertion[] assertions);
    public CompositeIdiomaticAssertion(IEnumerable`1<IIdiomaticAssertion> assertions);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IIdiomaticAssertion> get_Assertions();
    public sealed virtual void Verify(ConstructorInfo constructorInfo);
    public sealed virtual void Verify(IEnumerable`1<ConstructorInfo> constructorInfos);
    public sealed virtual void Verify(Assembly[] assemblies);
    public sealed virtual void Verify(IEnumerable`1<Assembly> assemblies);
    public sealed virtual void Verify(Assembly assembly);
    public sealed virtual void Verify(Type[] types);
    public sealed virtual void Verify(IEnumerable`1<Type> types);
    public sealed virtual void Verify(Type type);
    public sealed virtual void Verify(MemberInfo[] memberInfos);
    public sealed virtual void Verify(IEnumerable`1<MemberInfo> memberInfos);
    public sealed virtual void Verify(MemberInfo memberInfo);
    public sealed virtual void Verify(ConstructorInfo[] constructorInfos);
    public sealed virtual void Verify(MethodInfo methodInfo);
    public sealed virtual void Verify(IEnumerable`1<MethodInfo> methodInfos);
    public sealed virtual void Verify(MethodInfo[] methodInfos);
    public sealed virtual void Verify(PropertyInfo propertyInfo);
    public sealed virtual void Verify(IEnumerable`1<PropertyInfo> propertyInfos);
    public sealed virtual void Verify(PropertyInfo[] propertyInfos);
    public sealed virtual void Verify(FieldInfo fieldInfo);
    public sealed virtual void Verify(IEnumerable`1<FieldInfo> fieldInfos);
    public sealed virtual void Verify(FieldInfo[] fieldInfos);
}
public class AutoFixture.Idioms.ConstructorInitializedMemberAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<IReflectionElement> <ParameterMemberMatcher>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public IEqualityComparer Comparer { get; }
    public IEqualityComparer`1<IReflectionElement> ParameterMemberMatcher { get; }
    public ConstructorInitializedMemberAssertion(ISpecimenBuilder builder, IEqualityComparer comparer, IEqualityComparer`1<IReflectionElement> parameterMemberMatcher);
    public ConstructorInitializedMemberAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    [CompilerGeneratedAttribute]
public IEqualityComparer get_Comparer();
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<IReflectionElement> get_ParameterMemberMatcher();
    public virtual void Verify(ConstructorInfo constructorInfo);
    public virtual void Verify(PropertyInfo propertyInfo);
    public virtual void Verify(FieldInfo fieldInfo);
    private static bool CouldLeadToFalsePositive(Type type);
    private static ConstructorInitializedMemberException BuildExceptionDueToPotentialFalsePositive(MemberInfo propertyOrField);
    private ExpectedAndActual BuildSpecimenFromConstructor(ConstructorInfo ci, MemberInfo propertyOrField);
    private object GetParameterValue(ParameterInfo parameterInfo);
    private object GetEnumParameterValue(ParameterInfo parameterInfo);
    private IEnumerable`1<ConstructorInfo> GetConstructorsWithInitializerForMember(MemberInfo member);
    private bool IsMatchingParameterAndMember(ParameterInfo parameter, MemberInfo fieldOrProperty);
    private bool IsConstructorWithMatchingArgument(ConstructorInfo ci, MemberInfo memberInfo);
    private static IEnumerable`1<MemberInfo> GetPublicPropertiesAndFields(Type t);
    private static bool RequiresConstructorInitialization(PropertyInfo propertyInfo);
    private static bool RequiresConstructorInitialization(FieldInfo fieldInfo);
}
public class AutoFixture.Idioms.ConstructorInitializedMemberException : Exception {
    private MemberInfo memberInfo;
    private ParameterInfo missingParameter;
    public MemberInfo MemberInfo { get; }
    public PropertyInfo PropertyInfo { get; }
    public FieldInfo FieldInfo { get; }
    public ConstructorInfo ConstructorInfo { get; }
    public ParameterInfo MissingParameter { get; }
    public ConstructorInitializedMemberException(ConstructorInfo constructorInfo, ParameterInfo missingParameter);
    public ConstructorInitializedMemberException(ConstructorInfo constructorInfo, ParameterInfo missingParameter, string message);
    public ConstructorInitializedMemberException(ConstructorInfo constructorInfo, ParameterInfo missingParameter, string message, Exception innerException);
    public ConstructorInitializedMemberException(FieldInfo fieldInfo);
    public ConstructorInitializedMemberException(FieldInfo fieldInfo, string message);
    public ConstructorInitializedMemberException(FieldInfo fieldInfo, string message, Exception innerException);
    public ConstructorInitializedMemberException(PropertyInfo propertyInfo);
    public ConstructorInitializedMemberException(PropertyInfo propertyInfo, string message);
    public ConstructorInitializedMemberException(PropertyInfo propertyInfo, string message, Exception innerException);
    protected ConstructorInitializedMemberException(SerializationInfo info, StreamingContext context);
    public MemberInfo get_MemberInfo();
    public PropertyInfo get_PropertyInfo();
    public FieldInfo get_FieldInfo();
    public ConstructorInfo get_ConstructorInfo();
    public ParameterInfo get_MissingParameter();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static string FormatDefaultMessage(ConstructorInfo constructorInfo, ParameterInfo missingParameter);
    private static string FormatDefaultMessage(PropertyInfo propertyInfo);
    private static string FormatDefaultMessage(FieldInfo fieldInfo);
}
public class AutoFixture.Idioms.CopyAndUpdateAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<IReflectionElement> <ParameterMemberMatcher>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public IEqualityComparer Comparer { get; }
    public IEqualityComparer`1<IReflectionElement> ParameterMemberMatcher { get; }
    public CopyAndUpdateAssertion(ISpecimenBuilder builder, IEqualityComparer comparer, IEqualityComparer`1<IReflectionElement> parameterMemberMatcher);
    public CopyAndUpdateAssertion(ISpecimenBuilder builder, IEqualityComparer comparer);
    public CopyAndUpdateAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    [CompilerGeneratedAttribute]
public IEqualityComparer get_Comparer();
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<IReflectionElement> get_ParameterMemberMatcher();
    public virtual void Verify(MethodInfo methodInfo);
    private static void VerifyCopiedAndUpdatedSpecimenType(MethodInfo methodInfo, object copiedAndUpdatedSpecimen, object specimen);
    private bool AreMemberValuesEqual(object specimen, object copiedAndUpdatedSpecimen, MemberInfo member);
    private static IEnumerable`1<MemberInfo> GetPublicPropertiesAndFields(Type t);
    private bool IsMatchingParameterAndMember(ParameterInfo parameter, MemberInfo fieldOrProperty);
}
public class AutoFixture.Idioms.CopyAndUpdateException : Exception {
    private MethodInfo methodInfo;
    private MemberInfo memberWithInvalidValue;
    private ParameterInfo argumentWithNoMatchingPublicMember;
    public MethodInfo MethodInfo { get; }
    public MemberInfo MemberWithInvalidValue { get; }
    public ParameterInfo ArgumentWithNoMatchingPublicMember { get; public set; }
    public CopyAndUpdateException(string message, MethodInfo methodInfo);
    public CopyAndUpdateException(MethodInfo methodInfo, MemberInfo memberWithInvalidValue);
    public CopyAndUpdateException(MethodInfo methodInfo, ParameterInfo argumentWithNoMatchingPublicMember);
    public CopyAndUpdateException(string message);
    public CopyAndUpdateException(string message, Exception innerException);
    protected CopyAndUpdateException(SerializationInfo info, StreamingContext context);
    public MethodInfo get_MethodInfo();
    public MemberInfo get_MemberWithInvalidValue();
    public ParameterInfo get_ArgumentWithNoMatchingPublicMember();
    public void set_ArgumentWithNoMatchingPublicMember(ParameterInfo value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static string FormatMessageForMethodAndArgument(MethodInfo methodInfo, ParameterInfo argumentWithNoMatchingPublicMember);
    private static string FormatMessageForMethodAndMember(MethodInfo methodInfo, MemberInfo memberWithInvalidValue);
}
public class AutoFixture.Idioms.EmptyGuidBehaviorExpectation : object {
    public sealed virtual void Verify(IGuardClauseCommand command);
}
public class AutoFixture.Idioms.EmptyStringBehaviorExpectation : object {
    public sealed virtual void Verify(IGuardClauseCommand command);
}
public class AutoFixture.Idioms.EqualityComparerAssertion : CompositeIdiomaticAssertion {
    public EqualityComparerAssertion(ISpecimenBuilder builder);
    [IteratorStateMachineAttribute("AutoFixture.Idioms.EqualityComparerAssertion/<CreateChildAssertions>d__1")]
private static IEnumerable`1<IIdiomaticAssertion> CreateChildAssertions(ISpecimenBuilder builder);
}
public abstract class AutoFixture.Idioms.EqualityComparerEqualsAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    protected EqualityComparerEqualsAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public virtual void Verify(MethodInfo methodInfo);
    protected abstract virtual void VerifyEquals(MethodInfo methodInfo, Type argumentType);
    private static bool IsEqualityComparerEqualsMethod(MethodInfo methodInfo);
}
public class AutoFixture.Idioms.EqualityComparerEqualsNullAssertion : EqualityComparerEqualsAssertion {
    public EqualityComparerEqualsNullAssertion(ISpecimenBuilder builder);
    protected virtual void VerifyEquals(MethodInfo methodInfo, Type argumentType);
}
public class AutoFixture.Idioms.EqualityComparerEqualsNullNullAssertion : EqualityComparerEqualsAssertion {
    public EqualityComparerEqualsNullNullAssertion(ISpecimenBuilder builder);
    protected virtual void VerifyEquals(MethodInfo methodInfo, Type argumentType);
}
public class AutoFixture.Idioms.EqualityComparerEqualsSelfAssertion : EqualityComparerEqualsAssertion {
    public EqualityComparerEqualsSelfAssertion(ISpecimenBuilder builder);
    protected virtual void VerifyEquals(MethodInfo methodInfo, Type argumentType);
}
public class AutoFixture.Idioms.EqualityComparerEqualsSymmetricAssertion : EqualityComparerEqualsAssertion {
    public EqualityComparerEqualsSymmetricAssertion(ISpecimenBuilder builder);
    protected virtual void VerifyEquals(MethodInfo methodInfo, Type argumentType);
}
public class AutoFixture.Idioms.EqualityComparerEqualsTransitiveAssertion : EqualityComparerEqualsAssertion {
    public EqualityComparerEqualsTransitiveAssertion(ISpecimenBuilder builder);
    protected virtual void VerifyEquals(MethodInfo methodInfo, Type argumentType);
}
public class AutoFixture.Idioms.EqualityComparerGetHashCodeAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public EqualityComparerGetHashCodeAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public virtual void Verify(MethodInfo methodInfo);
    private static bool IsEqualityComparerGetHashCode(MethodInfo methodInfo);
}
public class AutoFixture.Idioms.EqualityComparerImplementationException : Exception {
    public EqualityComparerImplementationException(string message);
    public EqualityComparerImplementationException(string message, Exception innerException);
    protected EqualityComparerImplementationException(SerializationInfo info, StreamingContext context);
}
public class AutoFixture.Idioms.EqualsNewObjectAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public EqualsNewObjectAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public virtual void Verify(MethodInfo methodInfo);
}
public class AutoFixture.Idioms.EqualsNullAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public EqualsNullAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public virtual void Verify(MethodInfo methodInfo);
}
public class AutoFixture.Idioms.EqualsOverrideException : Exception {
    public EqualsOverrideException(string message);
    public EqualsOverrideException(string message, Exception innerException);
    protected EqualsOverrideException(SerializationInfo info, StreamingContext context);
}
public class AutoFixture.Idioms.EqualsSelfAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public EqualsSelfAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public virtual void Verify(MethodInfo methodInfo);
}
public class AutoFixture.Idioms.EqualsSuccessiveAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public EqualsSuccessiveAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public virtual void Verify(MethodInfo methodInfo);
}
public class AutoFixture.Idioms.GetHashCodeOverrideException : Exception {
    public GetHashCodeOverrideException(string message);
    public GetHashCodeOverrideException(string message, Exception innerException);
    protected GetHashCodeOverrideException(SerializationInfo info, StreamingContext context);
}
public class AutoFixture.Idioms.GetHashCodeSuccessiveAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public GetHashCodeSuccessiveAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public virtual void Verify(MethodInfo methodInfo);
}
public class AutoFixture.Idioms.GuardClauseAssertion : IdiomaticAssertion {
    private OpenGenericTypeClosingUtil openGenericTypeClosingUtil;
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private IBehaviorExpectation <BehaviorExpectation>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public IBehaviorExpectation BehaviorExpectation { get; }
    public GuardClauseAssertion(ISpecimenBuilder builder);
    public GuardClauseAssertion(ISpecimenBuilder builder, IBehaviorExpectation behaviorExpectation);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    [CompilerGeneratedAttribute]
public IBehaviorExpectation get_BehaviorExpectation();
    public virtual void Verify(ConstructorInfo constructorInfo);
    public virtual void Verify(MethodInfo methodInfo);
    public virtual void Verify(PropertyInfo propertyInfo);
    private IMethod CreateMethod(MethodInfo methodInfo);
    private object CreateOwner(PropertyInfo property);
    private object CreateOwner(MethodBase method);
    private object CreateOwner(Type type);
    private void DoVerify(IMethod method, bool isReturnValueDeferable, bool isReturnValueTask);
    private void VerifyDeferrableIterator(IMethod method);
    private void VerifyDeferrableTask(IMethod method);
    private void VerifyNormal(IMethod method);
    private IEnumerable`1<ReflectionExceptionUnwrappingCommand> GetParameterGuardCommands(IMethod method);
    private List`1<object> GetParameters(IMethod method);
    private static Type GetParameterType(ParameterInfo pi);
}
public class AutoFixture.Idioms.GuardClauseException : Exception {
    public GuardClauseException(string message);
    public GuardClauseException(string message, Exception innerException);
    protected GuardClauseException(SerializationInfo info, StreamingContext context);
}
public interface AutoFixture.Idioms.IBehaviorExpectation {
    public abstract virtual void Verify(IGuardClauseCommand command);
}
public abstract class AutoFixture.Idioms.IdiomaticAssertion : object {
    public virtual void Verify(Assembly[] assemblies);
    public virtual void Verify(IEnumerable`1<Assembly> assemblies);
    public virtual void Verify(Assembly assembly);
    public virtual void Verify(Type[] types);
    public virtual void Verify(IEnumerable`1<Type> types);
    public virtual void Verify(Type type);
    public virtual void Verify(MemberInfo[] memberInfos);
    public virtual void Verify(IEnumerable`1<MemberInfo> memberInfos);
    public virtual void Verify(MemberInfo memberInfo);
    public virtual void Verify(ConstructorInfo[] constructorInfos);
    public virtual void Verify(IEnumerable`1<ConstructorInfo> constructorInfos);
    public virtual void Verify(FieldInfo fieldInfo);
    public virtual void Verify(FieldInfo[] fieldInfos);
    public virtual void Verify(IEnumerable`1<FieldInfo> fieldInfos);
    public virtual void Verify(ConstructorInfo constructorInfo);
    public virtual void Verify(MethodInfo[] methodInfos);
    public virtual void Verify(IEnumerable`1<MethodInfo> methodInfos);
    public virtual void Verify(MethodInfo methodInfo);
    public virtual void Verify(PropertyInfo[] propertyInfos);
    public virtual void Verify(IEnumerable`1<PropertyInfo> propertyInfos);
    public virtual void Verify(PropertyInfo propertyInfo);
    private static IEnumerable`1<MethodInfo> GetMethodsForAssertion(Type type);
    private static bool IsStaticClass(Type type);
    private static IEnumerable`1<MethodInfo> GetMethodsExceptPropertyAccessors(Type type);
}
public interface AutoFixture.Idioms.IExpansion`1 {
    public abstract virtual IEnumerable`1<T> Expand(T value);
}
public interface AutoFixture.Idioms.IGuardClauseCommand {
    public Type RequestedType { get; }
    public string RequestedParameterName { get; }
    public abstract virtual Type get_RequestedType();
    public abstract virtual string get_RequestedParameterName();
    public abstract virtual void Execute(object value);
    public abstract virtual Exception CreateException(string value);
    public abstract virtual Exception CreateException(string value, Exception innerException);
    public abstract virtual Exception CreateException(string value, string customError, Exception innerException);
}
public interface AutoFixture.Idioms.IIdiomaticAssertion {
    public abstract virtual void Verify(Assembly[] assemblies);
    public abstract virtual void Verify(IEnumerable`1<Assembly> assemblies);
    public abstract virtual void Verify(Assembly assembly);
    public abstract virtual void Verify(Type[] types);
    public abstract virtual void Verify(IEnumerable`1<Type> types);
    public abstract virtual void Verify(Type type);
    public abstract virtual void Verify(MemberInfo[] memberInfos);
    public abstract virtual void Verify(IEnumerable`1<MemberInfo> memberInfos);
    public abstract virtual void Verify(MemberInfo memberInfo);
    public abstract virtual void Verify(ConstructorInfo[] constructorInfos);
    public abstract virtual void Verify(IEnumerable`1<ConstructorInfo> constructorInfos);
    public abstract virtual void Verify(ConstructorInfo constructorInfo);
    public abstract virtual void Verify(MethodInfo[] methodInfos);
    public abstract virtual void Verify(IEnumerable`1<MethodInfo> methodInfos);
    public abstract virtual void Verify(MethodInfo methodInfo);
    public abstract virtual void Verify(PropertyInfo[] propertyInfos);
    public abstract virtual void Verify(IEnumerable`1<PropertyInfo> propertyInfos);
    public abstract virtual void Verify(PropertyInfo propertyInfo);
    public abstract virtual void Verify(FieldInfo fieldInfo);
    public abstract virtual void Verify(FieldInfo[] fieldInfos);
    public abstract virtual void Verify(IEnumerable`1<FieldInfo> fieldInfos);
}
public class AutoFixture.Idioms.IndexedReplacement`1 : object {
    [CompilerGeneratedAttribute]
private int <ReplacementIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Source>k__BackingField;
    public int ReplacementIndex { get; }
    public IEnumerable`1<T> Source { get; }
    public IndexedReplacement`1(int replacementIndex, T[] source);
    public IndexedReplacement`1(int replacementIndex, IEnumerable`1<T> source);
    public sealed virtual IEnumerable`1<T> Expand(T value);
    [CompilerGeneratedAttribute]
public int get_ReplacementIndex();
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Source();
}
[ExtensionAttribute]
internal static class AutoFixture.Idioms.MethodInfoExtensions : object {
    [ExtensionAttribute]
internal static bool IsEqualsMethod(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsGetHashCodeMethod(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsToString(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsGetType(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsObjectEqualsMethod(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsObjectGetHashCodeMethod(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsObjectEqualsOverrideMethod(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsObjectGetHashCodeOverrideMethod(MethodInfo method);
}
public class AutoFixture.Idioms.MethodInvokeCommand : object {
    [CompilerGeneratedAttribute]
private IMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpansion`1<object> <Expansion>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public IMethod Method { get; }
    public IExpansion`1<object> Expansion { get; }
    public ParameterInfo ParameterInfo { get; }
    public Type RequestedType { get; }
    public string RequestedParameterName { get; }
    public MethodInvokeCommand(IMethod method, IExpansion`1<object> expansion, ParameterInfo parameterInfo);
    [CompilerGeneratedAttribute]
public IMethod get_Method();
    [CompilerGeneratedAttribute]
public IExpansion`1<object> get_Expansion();
    [CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    public sealed virtual Type get_RequestedType();
    public sealed virtual string get_RequestedParameterName();
    public sealed virtual void Execute(object value);
    public sealed virtual Exception CreateException(string value);
    public sealed virtual Exception CreateException(string value, Exception innerException);
    public sealed virtual Exception CreateException(string value, string customError, Exception innerException);
    private string CreateExceptionMessage(string value, string failureReason);
}
internal class AutoFixture.Idioms.NameAndType : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; }
    public Type Type { get; }
    public NameAndType(string name, Type type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Type get_Type();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class AutoFixture.Idioms.NameAndTypeCollectingVisitor : ReflectionVisitor`1<IEnumerable`1<NameAndType>> {
    private NameAndType[] values;
    public IEnumerable`1<NameAndType> Value { get; }
    public NameAndTypeCollectingVisitor(NameAndType[] values);
    public virtual IEnumerable`1<NameAndType> get_Value();
    public virtual IReflectionVisitor`1<IEnumerable`1<NameAndType>> Visit(FieldInfoElement fieldInfoElement);
    public virtual IReflectionVisitor`1<IEnumerable`1<NameAndType>> Visit(ParameterInfoElement parameterInfoElement);
    public virtual IReflectionVisitor`1<IEnumerable`1<NameAndType>> Visit(PropertyInfoElement propertyInfoElement);
}
public class AutoFixture.Idioms.NullReferenceBehaviorExpectation : object {
    public sealed virtual void Verify(IGuardClauseCommand command);
}
internal class AutoFixture.Idioms.OpenGenericTypeClosingUtil : object {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    private ISpecimenBuilder Builder { get; }
    public OpenGenericTypeClosingUtil(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
private ISpecimenBuilder get_Builder();
    public ConstructorInfo CloseGenericType(ConstructorInfo constructorInfo);
    public PropertyInfo CloseGenericType(PropertyInfo propertyInfo);
    public MethodInfo CloseGenericMethod(MethodInfo methodInfo);
    public MethodInfo CloseGenericType(MethodInfo methodInfo);
    private MethodBase ResolveUnclosedGenericType(MethodBase method, Func`2<Type, IEnumerable`1<MethodBase>> methodSetToMatch);
    private static bool IsMatched(MethodBase resolved, MethodBase method, AutoGenericType autoGenericType);
}
public class AutoFixture.Idioms.PropertySetCommand : object {
    [CompilerGeneratedAttribute]
private object <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public object Owner { get; }
    public PropertyInfo PropertyInfo { get; }
    public Type RequestedType { get; }
    public string RequestedParameterName { get; }
    public PropertySetCommand(PropertyInfo propertyInfo, object owner);
    [CompilerGeneratedAttribute]
public object get_Owner();
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    public sealed virtual Type get_RequestedType();
    public sealed virtual string get_RequestedParameterName();
    public sealed virtual void Execute(object value);
    public sealed virtual Exception CreateException(string value);
    public sealed virtual Exception CreateException(string value, Exception innerException);
    public sealed virtual Exception CreateException(string value, string customError, Exception innerException);
    private string CreateExceptionMessage(string value, string failureReason);
}
public class AutoFixture.Idioms.ReflectionExceptionUnwrappingCommand : object {
    [CompilerGeneratedAttribute]
private IGuardClauseCommand <Command>k__BackingField;
    public IGuardClauseCommand Command { get; }
    public Type RequestedType { get; }
    public string RequestedParameterName { get; }
    public ReflectionExceptionUnwrappingCommand(IGuardClauseCommand command);
    [CompilerGeneratedAttribute]
public IGuardClauseCommand get_Command();
    public sealed virtual Type get_RequestedType();
    public sealed virtual string get_RequestedParameterName();
    public sealed virtual void Execute(object value);
    public sealed virtual Exception CreateException(string value);
    public sealed virtual Exception CreateException(string value, Exception innerException);
    public sealed virtual Exception CreateException(string value, string customError, Exception innerException);
}
internal abstract class AutoFixture.Idioms.ReflectionVisitorElementComparer`1 : object {
    private IReflectionVisitor`1<IEnumerable`1<T>> visitor;
    private IEqualityComparer`1<T> comparer;
    internal ReflectionVisitorElementComparer`1(IReflectionVisitor`1<IEnumerable`1<T>> visitor, IEqualityComparer`1<T> comparer);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<Albedo.IReflectionElement>.Equals(IReflectionElement x, IReflectionElement y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<Albedo.IReflectionElement>.GetHashCode(IReflectionElement obj);
}
[ExtensionAttribute]
internal static class AutoFixture.Idioms.SpecimenBuilderComposer : object {
    [ExtensionAttribute]
internal static object CreateAnonymous(ISpecimenBuilder builder, object request);
}
[ExtensionAttribute]
internal static class AutoFixture.Idioms.TypeExtensions : object {
    [ExtensionAttribute]
public static bool ImplementsGenericInterfaceDefinition(Type type, Type interfaceType);
    [ExtensionAttribute]
public static bool ImplementsGenericInterface(Type type, Type interfaceType, Type[] argumentTypes);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
}
public class AutoFixture.Idioms.WhiteSpaceStringBehaviorExpectation : object {
    public sealed virtual void Verify(IGuardClauseCommand command);
}
public class AutoFixture.Idioms.WritablePropertyAssertion : IdiomaticAssertion {
    [CompilerGeneratedAttribute]
private ISpecimenBuilder <Builder>k__BackingField;
    public ISpecimenBuilder Builder { get; }
    public WritablePropertyAssertion(ISpecimenBuilder builder);
    [CompilerGeneratedAttribute]
public ISpecimenBuilder get_Builder();
    public virtual void Verify(PropertyInfo propertyInfo);
}
public class AutoFixture.Idioms.WritablePropertyException : Exception {
    private PropertyInfo propertyInfo;
    public PropertyInfo PropertyInfo { get; }
    public WritablePropertyException(PropertyInfo propertyInfo);
    public WritablePropertyException(PropertyInfo propertyInfo, string message);
    public WritablePropertyException(PropertyInfo propertyInfo, string message, Exception innerException);
    protected WritablePropertyException(SerializationInfo info, StreamingContext context);
    public PropertyInfo get_PropertyInfo();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static string FormatDefaultMessage(PropertyInfo propertyInfo);
}
