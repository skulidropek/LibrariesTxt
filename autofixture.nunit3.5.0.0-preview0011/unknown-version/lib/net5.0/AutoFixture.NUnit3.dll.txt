[AttributeUsageAttribute("64")]
public class AutoFixture.NUnit3.AutoDataAttribute : Attribute {
    private Lazy`1<IFixture> fixtureLazy;
    private ITestMethodBuilder testMethodBuilder;
    private IFixture Fixture { get; }
    public ITestMethodBuilder TestMethodBuilder { get; public set; }
    [ObsoleteAttribute("This constructor overload is deprecated because it offers poor performance, and will be removed in a future version. Please use the AutoDataAttribute(Func<IFixture> fixtureFactory) overload, so fixture will be constructed only if needed.")]
protected AutoDataAttribute(IFixture fixture);
    protected AutoDataAttribute(Func`1<IFixture> fixtureFactory);
    private IFixture get_Fixture();
    public ITestMethodBuilder get_TestMethodBuilder();
    public void set_TestMethodBuilder(ITestMethodBuilder value);
    [IteratorStateMachineAttribute("AutoFixture.NUnit3.AutoDataAttribute/<BuildFrom>d__10")]
public sealed virtual IEnumerable`1<TestMethod> BuildFrom(IMethodInfo method, Test suite);
    private IEnumerable`1<object> GetParameterValues(IMethodInfo method);
    private object Resolve(IParameterInfo parameterInfo);
    private void CustomizeFixtureByParameter(IParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public abstract class AutoFixture.NUnit3.CustomizeAttribute : Attribute {
    public abstract virtual ICustomization GetCustomization(ParameterInfo parameter);
}
internal class AutoFixture.NUnit3.CustomizeAttributeComparer : Comparer`1<IParameterCustomizationSource> {
    public virtual int Compare(IParameterCustomizationSource x, IParameterCustomizationSource y);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.NUnit3.FavorArraysAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.NUnit3.FavorEnumerablesAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.NUnit3.FavorListsAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
public class AutoFixture.NUnit3.FixedNameTestMethodBuilder : object {
    public virtual TestMethod Build(IMethodInfo method, Test suite, IEnumerable`1<object> parameterValues, int autoDataStartIndex);
    private static TestCaseParameters GetParametersForMethod(IMethodInfo method, IEnumerable`1<object> parameterValues, int autoDataStartIndex);
    private static TestCaseParameters GetParametersForMethod(IMethodInfo method, Object[] args, int autoDataStartIndex);
    private static void EnsureOriginalArgumentsArrayIsNotShared(TestCaseParameters parameters);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.NUnit3.FrozenAttribute : CustomizeAttribute {
    [CompilerGeneratedAttribute]
private Matching <By>k__BackingField;
    public Matching By { get; }
    public FrozenAttribute(Matching by);
    [CompilerGeneratedAttribute]
public Matching get_By();
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
    private ICustomization FreezeByCriteria(ParameterInfo parameter);
    private static IRequestSpecification ByEqual(object target);
    private IRequestSpecification ByExactType(Type type);
    private IRequestSpecification ByBaseType(Type type);
    private IRequestSpecification ByImplementedInterfaces(Type type);
    private IRequestSpecification ByParameterName(Type type, string name);
    private IRequestSpecification ByPropertyName(Type type, string name);
    private IRequestSpecification ByFieldName(Type type, string name);
    private bool ShouldMatchBy(Matching criteria);
    private static IRequestSpecification NoMatch();
    private static Criterion`1<Type> DerivesFrom(Type type);
    private static Criterion`1<string> IsNamed(string name);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.NUnit3.GreedyAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("64")]
[CLSCompliantAttribute("False")]
public class AutoFixture.NUnit3.InlineAutoDataAttribute : Attribute {
    private Object[] existingParameterValues;
    private Lazy`1<IFixture> fixtureLazy;
    private ITestMethodBuilder testMethodBuilder;
    private IFixture Fixture { get; }
    public ITestMethodBuilder TestMethodBuilder { get; public set; }
    public IEnumerable`1<object> Arguments { get; }
    public InlineAutoDataAttribute(Object[] arguments);
    [ObsoleteAttribute("This constructor overload is deprecated because it offers poor performance, and will be removed in a future version. Please use the overload with a factory method, so fixture will be constructed only if needed.")]
protected InlineAutoDataAttribute(IFixture fixture, Object[] arguments);
    protected InlineAutoDataAttribute(Func`1<IFixture> fixtureFactory, Object[] arguments);
    private IFixture get_Fixture();
    public ITestMethodBuilder get_TestMethodBuilder();
    public void set_TestMethodBuilder(ITestMethodBuilder value);
    public IEnumerable`1<object> get_Arguments();
    [IteratorStateMachineAttribute("AutoFixture.NUnit3.InlineAutoDataAttribute/<BuildFrom>d__13")]
public sealed virtual IEnumerable`1<TestMethod> BuildFrom(IMethodInfo method, Test suite);
    private IEnumerable`1<object> GetParameterValues(IMethodInfo method);
    private IEnumerable`1<object> GetMissingValues(IEnumerable`1<IParameterInfo> parameters);
    private object GetValueForParameter(IParameterInfo parameterInfo);
    private void CustomizeFixtureByParameter(IParameterInfo parameter);
}
public interface AutoFixture.NUnit3.ITestMethodBuilder {
    public abstract virtual TestMethod Build(IMethodInfo method, Test suite, IEnumerable`1<object> parameterValues, int autoDataStartIndex);
}
[FlagsAttribute]
public enum AutoFixture.NUnit3.Matching : Enum {
    public int value__;
    public static Matching ExactType;
    public static Matching DirectBaseType;
    public static Matching ImplementedInterfaces;
    public static Matching ParameterName;
    public static Matching PropertyName;
    public static Matching FieldName;
    public static Matching MemberName;
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.NUnit3.ModestAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.NUnit3.NoAutoPropertiesAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
public class AutoFixture.NUnit3.VolatileNameTestMethodBuilder : object {
    public sealed virtual TestMethod Build(IMethodInfo method, Test suite, IEnumerable`1<object> parameterValues, int autoDataStartIndex);
    private static TestCaseParameters GetParametersForMethod(IEnumerable`1<object> parameterValues);
    private static TestCaseParameters GetParametersForMethod(Object[] args);
}
