[DataDiscovererAttribute("AutoFixture.Xunit2.NoPreDiscoveryDataDiscoverer", "AutoFixture.Xunit2")]
[AttributeUsageAttribute("64")]
[CLSCompliantAttribute("False")]
public class AutoFixture.Xunit2.AutoDataAttribute : DataAttribute {
    [CompilerGeneratedAttribute]
private Func`1<IFixture> <FixtureFactory>k__BackingField;
    public Func`1<IFixture> FixtureFactory { get; }
    protected AutoDataAttribute(Func`1<IFixture> fixtureFactory);
    [CompilerGeneratedAttribute]
public Func`1<IFixture> get_FixtureFactory();
    public virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
}
[DataDiscovererAttribute("AutoFixture.Xunit2.NoPreDiscoveryDataDiscoverer", "AutoFixture.Xunit2")]
[AttributeUsageAttribute("64")]
[CLSCompliantAttribute("False")]
public class AutoFixture.Xunit2.ClassAutoDataAttribute : DataAttribute {
    [CompilerGeneratedAttribute]
private Func`1<IFixture> <FixtureFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Parameters>k__BackingField;
    public Func`1<IFixture> FixtureFactory { get; private set; }
    public Type SourceType { get; private set; }
    public Object[] Parameters { get; private set; }
    public ClassAutoDataAttribute(Type sourceType, Object[] parameters);
    protected ClassAutoDataAttribute(Func`1<IFixture> fixtureFactory, Type sourceType, Object[] parameters);
    [CompilerGeneratedAttribute]
public Func`1<IFixture> get_FixtureFactory();
    [CompilerGeneratedAttribute]
private void set_FixtureFactory(Func`1<IFixture> value);
    [CompilerGeneratedAttribute]
public Type get_SourceType();
    [CompilerGeneratedAttribute]
private void set_SourceType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(Object[] value);
    public virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
}
[AttributeUsageAttribute("64")]
[CLSCompliantAttribute("False")]
public class AutoFixture.Xunit2.CompositeDataAttribute : DataAttribute {
    [CompilerGeneratedAttribute]
private IEnumerable`1<DataAttribute> <Attributes>k__BackingField;
    public IEnumerable`1<DataAttribute> Attributes { get; }
    public CompositeDataAttribute(IEnumerable`1<DataAttribute> attributes);
    public CompositeDataAttribute(DataAttribute[] attributes);
    [CompilerGeneratedAttribute]
public IEnumerable`1<DataAttribute> get_Attributes();
    public virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
}
[AttributeUsageAttribute("2048")]
public abstract class AutoFixture.Xunit2.CustomizeAttribute : Attribute {
    public abstract virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.Xunit2.FavorArraysAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.Xunit2.FavorEnumerablesAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.Xunit2.FavorListsAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.Xunit2.FrozenAttribute : CustomizeAttribute {
    [CompilerGeneratedAttribute]
private Matching <By>k__BackingField;
    public Matching By { get; }
    public FrozenAttribute(Matching by);
    [CompilerGeneratedAttribute]
public Matching get_By();
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.Xunit2.GreedyAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[DataDiscovererAttribute("AutoFixture.Xunit2.NoPreDiscoveryDataDiscoverer", "AutoFixture.Xunit2")]
[AttributeUsageAttribute("64")]
[CLSCompliantAttribute("False")]
public class AutoFixture.Xunit2.InlineAutoDataAttribute : DataAttribute {
    [CompilerGeneratedAttribute]
private Func`1<IFixture> <FixtureFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Values>k__BackingField;
    public Func`1<IFixture> FixtureFactory { get; }
    public Object[] Values { get; }
    public InlineAutoDataAttribute(Object[] values);
    protected InlineAutoDataAttribute(Func`1<IFixture> fixtureFactory, Object[] values);
    [CompilerGeneratedAttribute]
public Func`1<IFixture> get_FixtureFactory();
    [CompilerGeneratedAttribute]
public Object[] get_Values();
    public virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
}
internal class AutoFixture.Xunit2.Internal.Argument : object {
    [CompilerGeneratedAttribute]
private TestParameter <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public TestParameter Parameter { get; }
    public object Value { get; }
    public Argument(TestParameter parameter, object value);
    [CompilerGeneratedAttribute]
public TestParameter get_Parameter();
    [CompilerGeneratedAttribute]
public object get_Value();
    public ICustomization GetCustomization();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AutoFixture.Xunit2.Internal.AutoTestCaseSource : object {
    [CompilerGeneratedAttribute]
private Func`1<IFixture> <CreateFixture>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITestCaseSource <Source>k__BackingField;
    public Func`1<IFixture> CreateFixture { get; }
    [NullableAttribute("2")]
public ITestCaseSource Source { get; }
    public AutoTestCaseSource(Func`1<IFixture> createFixture, ITestCaseSource source);
    [CompilerGeneratedAttribute]
public Func`1<IFixture> get_CreateFixture();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ITestCaseSource get_Source();
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetTestCases(MethodInfo method);
    [IteratorStateMachineAttribute("AutoFixture.Xunit2.Internal.AutoTestCaseSource/<GenerateValues>d__8")]
private IEnumerable`1<IEnumerable`1<object>> GenerateValues(MethodBase methodInfo);
    [IteratorStateMachineAttribute("AutoFixture.Xunit2.Internal.AutoTestCaseSource/<CombineValues>d__9")]
private IEnumerable`1<IEnumerable`1<object>> CombineValues(MethodInfo methodInfo, ITestCaseSource source);
    private static object GenerateAutoValue(TestParameter parameter, IFixture fixture);
}
internal class AutoFixture.Xunit2.Internal.ClassTestCaseSource : TestCaseSourceBase {
    private Lazy`1<IEnumerable> lazyEnumerable;
    private Object[] parameters;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    public IReadOnlyList`1<object> Parameters { get; }
    public ClassTestCaseSource(Type type, Object[] parameters);
    [CompilerGeneratedAttribute]
public Type get_Type();
    public IReadOnlyList`1<object> get_Parameters();
    public virtual IEnumerator GetEnumerator();
    private static IEnumerable CreateInstance(Type type, Object[] parameters);
    [CompilerGeneratedAttribute]
private IEnumerable <.ctor>b__2_0();
}
[ExtensionAttribute]
internal static class AutoFixture.Xunit2.Internal.CustomizationExtensions : object {
    [ExtensionAttribute]
public static object Resolve(IFixture source, object request);
}
internal class AutoFixture.Xunit2.Internal.CustomizeAttributeComparer : Comparer`1<IParameterCustomizationSource> {
    public virtual int Compare(IParameterCustomizationSource x, IParameterCustomizationSource y);
}
[ExtensionAttribute]
internal static class AutoFixture.Xunit2.Internal.EnumerableExtensions : object {
    [IteratorStateMachineAttribute("AutoFixture.Xunit2.Internal.EnumerableExtensions/<Zip>d__0`2")]
[ExtensionAttribute]
internal static IEnumerable`1<TResult> Zip(IEnumerable`1<IEnumerable`1<T>> sequences, Func`2<IEnumerable`1<T>, TResult> resultSelector);
    [IteratorStateMachineAttribute("AutoFixture.Xunit2.Internal.EnumerableExtensions/<Collapse>d__1`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> Collapse(IEnumerable`1<IEnumerable`1<T>> sequences);
}
internal class AutoFixture.Xunit2.Internal.FieldTestCaseSource : TestCaseSourceBase {
    [CompilerGeneratedAttribute]
private FieldInfo <FieldInfo>k__BackingField;
    public FieldInfo FieldInfo { get; }
    public FieldTestCaseSource(FieldInfo fieldInfo);
    [CompilerGeneratedAttribute]
public FieldInfo get_FieldInfo();
    public virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AutoFixture.Xunit2.Internal.FrozenValueCustomization : object {
    private IRequestSpecification specification;
    [NullableAttribute("2")]
private object value;
    public FrozenValueCustomization(IRequestSpecification specification, object value);
    public sealed virtual void Customize(IFixture fixture);
}
internal class AutoFixture.Xunit2.Internal.InlineTestCaseSource : object {
    private Object[] values;
    public IReadOnlyCollection`1<object> Values { get; }
    public InlineTestCaseSource(Object[] values);
    public IReadOnlyCollection`1<object> get_Values();
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetTestCases(MethodInfo method);
    [IteratorStateMachineAttribute("AutoFixture.Xunit2.Internal.InlineTestCaseSource/<<GetTestCases>g__GetTestCasesEnumerable|4_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<Object[]> <GetTestCases>g__GetTestCasesEnumerable|4_0(MethodBase method, Object[] values);
}
internal interface AutoFixture.Xunit2.Internal.ITestCaseSource {
    public abstract virtual IEnumerable`1<IEnumerable`1<object>> GetTestCases(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AutoFixture.Xunit2.Internal.MemberTestCaseSource : object {
    private Object[] arguments;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Type Type { get; }
    public string Name { get; }
    public IReadOnlyList`1<object> Arguments { get; }
    public MemberTestCaseSource(Type type, string name, Object[] arguments);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    public IReadOnlyList`1<object> get_Arguments();
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetTestCases(MethodInfo method);
}
internal class AutoFixture.Xunit2.Internal.MethodTestCaseSource : TestCaseSourceBase {
    private Object[] arguments;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public IReadOnlyList`1<object> Arguments { get; }
    public MethodTestCaseSource(MethodInfo methodInfo, Object[] arguments);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    public IReadOnlyList`1<object> get_Arguments();
    public virtual IEnumerator GetEnumerator();
}
internal class AutoFixture.Xunit2.Internal.NullCustomization : object {
    public sealed virtual void Customize(IFixture fixture);
}
internal class AutoFixture.Xunit2.Internal.ParameterFilter : object {
    private Lazy`1<IRequestSpecification> lazySpecification;
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Matching <Flags>k__BackingField;
    public ParameterInfo ParameterInfo { get; }
    public Matching Flags { get; }
    public ParameterFilter(ParameterInfo parameterInfo, Matching flags);
    [CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
public Matching get_Flags();
    public sealed virtual bool IsSatisfiedBy(object request);
    [CompilerGeneratedAttribute]
private IRequestSpecification <.ctor>b__1_0();
}
internal class AutoFixture.Xunit2.Internal.ParameterMatcherBuilder : object {
    private ParameterInfo parameterInfo;
    [CompilerGeneratedAttribute]
private bool <MatchExactRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchExactType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchDirectBaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchImplementedInterfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchField>k__BackingField;
    public bool MatchExactRequest { get; public set; }
    public bool MatchExactType { get; public set; }
    public bool MatchDirectBaseType { get; public set; }
    public bool MatchImplementedInterfaces { get; public set; }
    public bool MatchParameter { get; public set; }
    public bool MatchProperty { get; public set; }
    public bool MatchField { get; public set; }
    public ParameterMatcherBuilder(ParameterInfo parameterInfo);
    [CompilerGeneratedAttribute]
public bool get_MatchExactRequest();
    [CompilerGeneratedAttribute]
public void set_MatchExactRequest(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchExactType();
    [CompilerGeneratedAttribute]
public void set_MatchExactType(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchDirectBaseType();
    [CompilerGeneratedAttribute]
public void set_MatchDirectBaseType(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchImplementedInterfaces();
    [CompilerGeneratedAttribute]
public void set_MatchImplementedInterfaces(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchParameter();
    [CompilerGeneratedAttribute]
public void set_MatchParameter(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchProperty();
    [CompilerGeneratedAttribute]
public void set_MatchProperty(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchField();
    [CompilerGeneratedAttribute]
public void set_MatchField(bool value);
    public ParameterMatcherBuilder SetFlags(Matching flags);
    public IRequestSpecification Build();
    private IRequestSpecification AsExactRequest();
    private IRequestSpecification AsExactType();
    private IRequestSpecification AsDirectBaseType();
    private IRequestSpecification AsImplementedInterfaces();
    private IRequestSpecification AsParameter();
    private IRequestSpecification AsProperty();
    private IRequestSpecification AsField();
}
internal class AutoFixture.Xunit2.Internal.PropertyTestCaseSource : TestCaseSourceBase {
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public PropertyInfo PropertyInfo { get; }
    public PropertyTestCaseSource(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    public virtual IEnumerator GetEnumerator();
}
[ExtensionAttribute]
internal static class AutoFixture.Xunit2.Internal.ReflectionExtensions : object {
    [ExtensionAttribute]
public static Type GetReturnType(MemberInfo member);
}
internal abstract class AutoFixture.Xunit2.Internal.TestCaseSourceBase : object {
    public abstract virtual IEnumerator GetEnumerator();
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetTestCases(MethodInfo method);
}
internal class AutoFixture.Xunit2.Internal.TestParameter : object {
    private Lazy`1<ICustomization> lazyCustomization;
    private Lazy`1<FrozenAttribute> lazyFrozenAttribute;
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public ParameterInfo ParameterInfo { get; }
    public TestParameter(ParameterInfo parameterInfo);
    [CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    public ICustomization GetCustomization();
    public ICustomization GetCustomization(object value);
    private static ICustomization GetCustomization(ParameterInfo parameter);
    public static TestParameter From(ParameterInfo parameterInfo);
}
[FlagsAttribute]
public enum AutoFixture.Xunit2.Matching : Enum {
    public int value__;
    public static Matching ExactType;
    public static Matching DirectBaseType;
    public static Matching ImplementedInterfaces;
    public static Matching ParameterName;
    public static Matching PropertyName;
    public static Matching FieldName;
    public static Matching MemberName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataDiscovererAttribute("AutoFixture.Xunit2.NoPreDiscoveryDataDiscoverer", "AutoFixture.Xunit2")]
[AttributeUsageAttribute("64")]
[CLSCompliantAttribute("False")]
public class AutoFixture.Xunit2.MemberAutoDataAttribute : DataAttribute {
    [CompilerGeneratedAttribute]
private Func`1<IFixture> <FixtureFactory>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Parameters>k__BackingField;
    public Func`1<IFixture> FixtureFactory { get; }
    [NullableAttribute("2")]
public Type MemberType { get; }
    public string MemberName { get; }
    public Object[] Parameters { get; }
    public MemberAutoDataAttribute(string memberName, Object[] parameters);
    public MemberAutoDataAttribute(Type memberType, string memberName, Object[] parameters);
    protected MemberAutoDataAttribute(Func`1<IFixture> fixtureFactory, string memberName, Object[] parameters);
    protected MemberAutoDataAttribute(Func`1<IFixture> fixtureFactory, Type memberType, string memberName, Object[] parameters);
    [CompilerGeneratedAttribute]
public Func`1<IFixture> get_FixtureFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public Object[] get_Parameters();
    public virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.Xunit2.ModestAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
[AttributeUsageAttribute("2048")]
public class AutoFixture.Xunit2.NoAutoPropertiesAttribute : CustomizeAttribute {
    public virtual ICustomization GetCustomization(ParameterInfo parameter);
}
public class AutoFixture.Xunit2.NoPreDiscoveryDataDiscoverer : DataDiscoverer {
    public virtual bool SupportsDiscoveryEnumeration(IAttributeInfo dataAttribute, IMethodInfo testMethod);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
