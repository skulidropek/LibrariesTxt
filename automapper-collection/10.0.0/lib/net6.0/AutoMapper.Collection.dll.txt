public class AutoMapper.Collection.Configuration.CollectionMappingExpressionFeature`2 : object {
    private Expression`1<Func`3<TSource, TDestination, bool>> _expression;
    public CollectionMappingExpressionFeature`2(Expression`1<Func`3<TSource, TDestination, bool>> expression);
    public sealed virtual void Configure(TypeMap typeMap);
    public sealed virtual IMappingFeature Reverse();
}
public class AutoMapper.Collection.Configuration.GeneratePropertyMapsExpressionFeature : object {
    private ObjectToEquivalencyExpressionByEquivalencyExistingMapper _mapper;
    private List`1<Func`2<Func`2<Type, object>, IGeneratePropertyMaps>> _generators;
    public GeneratePropertyMapsExpressionFeature(ObjectToEquivalencyExpressionByEquivalencyExistingMapper mapper);
    public void Add(Func`2<Func`2<Type, object>, IGeneratePropertyMaps> creator);
    private sealed virtual override void AutoMapper.Features.IGlobalFeature.Configure(IGlobalConfiguration configurationProvider);
}
public enum AutoMapper.Collection.ElemntTypeFlags : Enum {
    public int value__;
    public static ElemntTypeFlags None;
    public static ElemntTypeFlags BreakKeyValuePair;
}
[ExtensionAttribute]
internal static class AutoMapper.Collection.PrimitiveExtensions : object {
    [ExtensionAttribute]
public static bool IsCollectionType(Type type);
    [ExtensionAttribute]
public static bool IsDictionaryType(Type type);
    [ExtensionAttribute]
public static bool IsEnumerableType(Type type);
    [ExtensionAttribute]
private static bool ImplementsGenericInterface(Type type, Type interfaceType);
    [ExtensionAttribute]
private static bool IsGenericType(Type type, Type genericType);
}
[ExtensionAttribute]
internal static class AutoMapper.Collection.ReflectionHelper : object {
    [ExtensionAttribute]
public static object GetMemberValue(MemberInfo propertyOrField, object target);
    private static ArgumentOutOfRangeException Expected(MemberInfo propertyOrField);
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
}
public class AutoMapper.Collection.Runtime.CollectionMappingFeature : object {
    [CompilerGeneratedAttribute]
private IEquivalentComparer <EquivalentComparer>k__BackingField;
    public IEquivalentComparer EquivalentComparer { get; }
    public CollectionMappingFeature(IEquivalentComparer equivalentComparer);
    [CompilerGeneratedAttribute]
public IEquivalentComparer get_EquivalentComparer();
    private sealed virtual override void AutoMapper.Features.IRuntimeFeature.Seal(IGlobalConfiguration configurationProvider);
}
public class AutoMapper.Collection.Runtime.GeneratePropertyMapsFeature : object {
    private IList`1<IGeneratePropertyMaps> _generators;
    private ConcurrentDictionary`2<TypePair, IEquivalentComparer> _comparers;
    public GeneratePropertyMapsFeature(List`1<IGeneratePropertyMaps> generators);
    public IEquivalentComparer Get(TypeMap typeMap);
    private sealed virtual override void AutoMapper.Features.IRuntimeFeature.Seal(IGlobalConfiguration configurationProvider);
    private IEquivalentComparer CreateEquivalentExpression(IEnumerable`1<PropertyMap> propertyMaps);
    private BinaryExpression SourceEqualsDestinationExpression(PropertyMap propertyMap, Expression srcExpr, Expression destExpr);
}
[ExtensionAttribute]
internal static class AutoMapper.Collection.TypeExtensions : object {
    [ExtensionAttribute]
public static Type GetGenericTypeDefinitionIfGeneric(Type type);
    [ExtensionAttribute]
public static Type[] GetGenericArguments(Type type);
    [ExtensionAttribute]
public static Type[] GetGenericParameters(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<ConstructorInfo> GetDeclaredConstructors(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetDeclaredMembers(Type type);
    [IteratorStateMachineAttribute("AutoMapper.Collection.TypeExtensions/<GetAllMembers>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetAllMembers(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetMember(Type type, string name);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetDeclaredMethods(Type type);
    [ExtensionAttribute]
public static MethodInfo GetDeclaredMethod(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetDeclaredMethod(Type type, string name, Type[] parameters);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetAllMethods(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetDeclaredProperties(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetDeclaredProperty(Type type, string name);
    [ExtensionAttribute]
public static Object[] GetCustomAttributes(Type type, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static bool IsStatic(FieldInfo fieldInfo);
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsStatic(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsPublic(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> PropertiesWithAnInaccessibleSetter(Type type);
    [ExtensionAttribute]
public static bool HasAnInaccessibleSetter(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsPublic(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsNotPublic(ConstructorInfo constructorInfo);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type type, Type other);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsSealed(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsInstanceOfType(Type type, object o);
    [ExtensionAttribute]
public static ConstructorInfo[] GetConstructors(Type type);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type type);
    [ExtensionAttribute]
public static MethodInfo GetGetMethod(PropertyInfo propertyInfo, bool ignored);
    [ExtensionAttribute]
public static MethodInfo GetSetMethod(PropertyInfo propertyInfo, bool ignored);
    [ExtensionAttribute]
public static FieldInfo GetField(Type type, string name);
}
internal static class AutoMapper.Collection.TypeHelper : object {
    public static Type GetElementType(Type enumerableType);
    private static Type[] GetElementTypes(Type enumerableType, IEnumerable enumerable, ElemntTypeFlags flags);
    private static Type GetIEnumerableType(Type enumerableType);
}
internal class AutoMapper.EquivalencyExpression.CustomExpressionVisitor : ExpressionVisitor {
    private ParameterExpression _parameter;
    private IEnumerable`1<PropertyMap> _propertyMaps;
    internal CustomExpressionVisitor(ParameterExpression parameter, IEnumerable`1<PropertyMap> propertyMaps);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
}
internal class AutoMapper.EquivalencyExpression.EquivalentExpression : object {
    [CompilerGeneratedAttribute]
private static IEquivalentComparer <BadValue>k__BackingField;
    internal static IEquivalentComparer BadValue { get; private set; }
    private static EquivalentExpression();
    [CompilerGeneratedAttribute]
internal static IEquivalentComparer get_BadValue();
    [CompilerGeneratedAttribute]
private static void set_BadValue(IEquivalentComparer value);
    public sealed virtual int GetHashCode(object obj);
    public sealed virtual bool IsEquivalent(object source, object destination);
}
internal class AutoMapper.EquivalencyExpression.EquivalentExpression`2 : object {
    private Expression`1<Func`3<TSource, TDestination, bool>> _equivalentExpression;
    private Func`3<TSource, TDestination, bool> _equivalentFunc;
    private Func`2<TSource, int> _sourceHashCodeFunc;
    private Func`2<TDestination, int> _destinationHashCodeFunc;
    public EquivalentExpression`2(Expression`1<Func`3<TSource, TDestination, bool>> equivalentExpression);
    public sealed virtual bool IsEquivalent(object source, object destination);
    public sealed virtual Expression`1<Func`2<TDestination, bool>> ToSingleSourceExpression(TSource source);
    public sealed virtual int GetHashCode(object obj);
}
[ExtensionAttribute]
public static class AutoMapper.EquivalencyExpression.EquivalentExpressions : object {
    [ExtensionAttribute]
public static void AddCollectionMappers(IMapperConfigurationExpression cfg);
    [ExtensionAttribute]
private static void InsertBefore(IMapperConfigurationExpression cfg, IObjectMapper[] adds);
    [ExtensionAttribute]
internal static IEquivalentComparer GetEquivalentExpression(IObjectMapper mapper, Type sourceType, Type destinationType, IConfigurationProvider configuration);
    internal static IEquivalentComparer GetEquivalentExpression(IConfigurationProvider configurationProvider, TypeMap typeMap);
    [ExtensionAttribute]
public static IMappingExpression`2<TSource, TDestination> EqualityComparison(IMappingExpression`2<TSource, TDestination> mappingExpression, Expression`1<Func`3<TSource, TDestination, bool>> EquivalentExpression);
    [ExtensionAttribute]
public static void SetGeneratePropertyMaps(IMapperConfigurationExpression cfg);
    [ExtensionAttribute]
public static void SetGeneratePropertyMaps(IMapperConfigurationExpression cfg, IGeneratePropertyMaps generatePropertyMaps);
}
[ExtensionAttribute]
internal static class AutoMapper.EquivalencyExpression.ExpressionExtentions : object {
    private static ConcurrentDictionary`2<Type, Type> _singleParameterTypeDictionary;
    private static ExpressionExtentions();
    [ExtensionAttribute]
public static Type GetSinglePredicateExpressionArgumentType(Type type);
    private static Type CacheAndReturnType(Type type, Type objType);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, int>> GetHashCodeExpression(List`1<Expression> members, ParameterExpression sourceParam);
}
internal class AutoMapper.EquivalencyExpression.GenerateEquivalentExpressionFromTypeMap : object {
    private static ConcurrentDictionary`2<TypeMap, GenerateEquivalentExpressionFromTypeMap> _EquivalentExpressionses;
    private TypeMap _typeMap;
    private GenerateEquivalentExpressionFromTypeMap(TypeMap typeMap);
    private static GenerateEquivalentExpressionFromTypeMap();
    internal static Expression GetExpression(TypeMap typeMap, object value);
    private Expression CreateEquivalentExpression(object value);
}
internal class AutoMapper.EquivalencyExpression.HashableExpressionsVisitor : ExpressionVisitor {
    private List`1<Expression> _destinationMembers;
    private ParameterExpression _destinationParameter;
    private List`1<Expression> _sourceMembers;
    private ParameterExpression _sourceParameter;
    private ParameterFinderVisitor _paramFinder;
    internal HashableExpressionsVisitor(ParameterExpression sourceParameter, ParameterExpression destinationParameter);
    internal static Tuple`2<List`1<Expression>, List`1<Expression>> Expand(ParameterExpression sourceParameter, ParameterExpression destinationParameter, Expression expression);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    private void VisitCompare(Expression leftNode, Expression rightNode);
    [CompilerGeneratedAttribute]
private bool <VisitCompare>b__9_0(ParameterExpression p);
    [CompilerGeneratedAttribute]
private bool <VisitCompare>b__9_1(ParameterExpression p);
    [CompilerGeneratedAttribute]
private bool <VisitCompare>b__9_2(ParameterExpression p);
    [CompilerGeneratedAttribute]
private bool <VisitCompare>b__9_3(ParameterExpression p);
}
public interface AutoMapper.EquivalencyExpression.IEquivalentComparer {
    public abstract virtual int GetHashCode(object obj);
    public abstract virtual bool IsEquivalent(object source, object destination);
}
public interface AutoMapper.EquivalencyExpression.IEquivalentComparer`2 {
    public abstract virtual Expression`1<Func`2<TDestination, bool>> ToSingleSourceExpression(TSource destination);
}
public interface AutoMapper.EquivalencyExpression.IGeneratePropertyMaps {
    public abstract virtual IEnumerable`1<PropertyMap> GeneratePropertyMaps(TypeMap typeMap);
}
internal class AutoMapper.EquivalencyExpression.ParameterFinderVisitor : ExpressionVisitor {
    [CompilerGeneratedAttribute]
private IList`1<ParameterExpression> <Parameters>k__BackingField;
    public IList`1<ParameterExpression> Parameters { get; private set; }
    [CompilerGeneratedAttribute]
public IList`1<ParameterExpression> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(IList`1<ParameterExpression> value);
    public virtual Expression Visit(Expression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
}
internal class AutoMapper.EquivalencyExpression.ParametersToConstantVisitor`1 : ExpressionVisitor {
    private T _value;
    public ParametersToConstantVisitor`1(T value);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
}
public class AutoMapper.Mappers.EquivalentExpressionAddRemoveCollectionMapper : object {
    private CollectionMapper _collectionMapper;
    private static MethodInfo _mapMethodInfo;
    private static ConcurrentDictionary`2<TypePair, IObjectMapper> _objectMapperCache;
    private static EquivalentExpressionAddRemoveCollectionMapper();
    public static TDestination Map(TSource source, TDestination destination, ResolutionContext context, IEquivalentComparer equivalentComparer);
    public sealed virtual bool IsMatch(TypePair typePair);
    public sealed virtual Expression MapExpression(IGlobalConfiguration configurationProvider, ProfileMap profileMap, MemberMap memberMap, Expression sourceExpression, Expression destExpression);
}
public class AutoMapper.Mappers.ObjectToEquivalencyExpressionByEquivalencyExistingMapper : object {
    [CompilerGeneratedAttribute]
private IConfigurationProvider <Configuration>k__BackingField;
    private static MethodInfo MapMethodInfo;
    internal IConfigurationProvider Configuration { get; internal set; }
    private static ObjectToEquivalencyExpressionByEquivalencyExistingMapper();
    [CompilerGeneratedAttribute]
internal IConfigurationProvider get_Configuration();
    [CompilerGeneratedAttribute]
internal void set_Configuration(IConfigurationProvider value);
    public static Expression`1<Func`2<TDestination, bool>> Map(TSource source, IEquivalentComparer`2<TSource, TDestination> toSourceExpression);
    public sealed virtual bool IsMatch(TypePair typePair);
    public sealed virtual Expression MapExpression(IGlobalConfiguration configurationProvider, ProfileMap profileMap, MemberMap memberMap, Expression sourceExpression, Expression destExpression);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
