[ExtensionAttribute]
public static class AutoMapper.Extensions.EnumMapping.EnumMapperConfigurationExpressionExtensions : object {
    [ExtensionAttribute]
public static void EnableEnumMappingValidation(IMapperConfigurationExpression mapperConfigurationExpression);
}
[ExtensionAttribute]
public static class AutoMapper.Extensions.EnumMapping.EnumMappingExpressionExtensions : object {
    [ExtensionAttribute]
public static IEnumMappingExpression`2<TSource, TDestination> ConvertUsingEnumMapping(IMappingExpression`2<TSource, TDestination> mappingExpression);
    [ExtensionAttribute]
public static IEnumMappingExpression`2<TSource, TDestination> ConvertUsingEnumMapping(IMappingExpression`2<TSource, TDestination> mappingExpression, Action`1<IEnumConfigurationExpression`2<TSource, TDestination>> options);
}
public interface AutoMapper.Extensions.EnumMapping.IEnumConfigurationExpression`2 {
    public abstract virtual IEnumConfigurationExpression`2<TSource, TDestination> MapByName(bool ignoreCase);
    public abstract virtual IEnumConfigurationExpression`2<TSource, TDestination> MapByValue();
    public abstract virtual IEnumConfigurationExpression`2<TSource, TDestination> MapValue(TSource source, TDestination destination);
    public abstract virtual IEnumConfigurationExpression`2<TSource, TDestination> MapException(TSource source, Func`1<Exception> destination);
}
public interface AutoMapper.Extensions.EnumMapping.IEnumMappingExpression`2 {
    public abstract virtual void ReverseMap();
    public abstract virtual void ReverseMap(Action`1<IEnumConfigurationExpression`2<TDestination, TSource>> options);
}
internal class AutoMapper.Extensions.EnumMapping.Internal.CustomMapExpressionFactory`2 : object {
    private Dictionary`2<TSource, GetDestinationObject`1<TDestination>> _enumValueMappings;
    public CustomMapExpressionFactory`2(Dictionary`2<TSource, GetDestinationObject`1<TDestination>> enumValueMappings);
    public LambdaExpression Create();
    private TDestination ConvertEnumValue(TSource source);
}
internal class AutoMapper.Extensions.EnumMapping.Internal.EnumMappingExpression`2 : object {
    [CompilerGeneratedAttribute]
private IMappingExpression`2<TSource, TDestination> <MappingExpression>k__BackingField;
    protected IMappingExpression`2<TSource, TDestination> MappingExpression { get; }
    public EnumMappingExpression`2(IMappingExpression`2<TSource, TDestination> mappingExpression);
    [CompilerGeneratedAttribute]
protected IMappingExpression`2<TSource, TDestination> get_MappingExpression();
    public sealed virtual void ReverseMap();
    public sealed virtual void ReverseMap(Action`1<IEnumConfigurationExpression`2<TDestination, TSource>> options);
}
internal class AutoMapper.Extensions.EnumMapping.Internal.EnumMappingFeature`2 : object {
    protected EnumMappingType EnumMappingType;
    protected bool IgnoreCase;
    protected Dictionary`2<TSource, GetDestinationObject`1<TDestination>> EnumValueMappingsOverride;
    public sealed virtual void Configure(TypeMap typeMap);
    private Dictionary`2<TSource, GetDestinationObject`1<TDestination>> CreateOverridedEnumValueMappings(Type sourceType, Type destinationType);
    private Dictionary`2<TSource, GetDestinationObject`1<TDestination>> CreateDefaultEnumValueMappings(Type sourceType, Type destinationType);
    public sealed virtual IEnumConfigurationExpression`2<TSource, TDestination> MapByName(bool ignoreCase);
    public sealed virtual IEnumConfigurationExpression`2<TSource, TDestination> MapByValue();
    public sealed virtual IEnumConfigurationExpression`2<TSource, TDestination> MapValue(TSource source, TDestination destination);
    public sealed virtual IEnumConfigurationExpression`2<TSource, TDestination> MapException(TSource source, Func`1<Exception> throwExceptionFunc);
    public sealed virtual IMappingFeature Reverse();
    private bool HasDestinationSameValueAsSource(TSource sourceValue, Type destinationEnumValueType, Nullable`1& sourceValueAsDestinationType);
    private Nullable`1<TSource> GetDestinationValueAsSourceType(TDestination destinationValue, Type sourceEnumValueType);
}
internal enum AutoMapper.Extensions.EnumMapping.Internal.EnumMappingType : Enum {
    public int value__;
    public static EnumMappingType Value;
    public static EnumMappingType Name;
}
internal class AutoMapper.Extensions.EnumMapping.Internal.EnumMappingValidationRuntimeFeature`2 : object {
    private Dictionary`2<TSource, GetDestinationObject`1<TDestination>> _enumValueMappings;
    private EnumMappingType _enumMappingType;
    public EnumMappingValidationRuntimeFeature`2(Dictionary`2<TSource, GetDestinationObject`1<TDestination>> enumValueMappings, EnumMappingType enumMappingType);
    public sealed virtual void Seal(IGlobalConfiguration configurationProvider);
    private sealed virtual override void AutoMapper.Extensions.EnumMapping.Internal.IEnumMappingValidationRuntimeFeature.Validate(TypePair typePair);
}
internal class AutoMapper.Extensions.EnumMapping.Internal.EnumMappingValidationRuntimeFeatureProxy : object {
    private IEnumMappingValidationRuntimeFeature _innerValidationRuntimeFeature;
    public EnumMappingValidationRuntimeFeatureProxy(IEnumMappingValidationRuntimeFeature innerValidationRuntimeFeature);
    public sealed virtual void Seal(IGlobalConfiguration configurationProvider);
    public sealed virtual void Validate(TypePair typePair);
}
internal static class AutoMapper.Extensions.EnumMapping.Internal.GetDestinationObject : object {
    public static GetDestinationObject`1<TDestination> Value(TDestination value);
    public static GetDestinationObject`1<TDestination> Exception(Func`1<Exception> throwExceptionFunc);
}
internal class AutoMapper.Extensions.EnumMapping.Internal.GetDestinationObject`1 : ValueType {
    [CompilerGeneratedAttribute]
private GetDestinationType <GetDestinationType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<TDestination> <GetDestinationFunc>k__BackingField;
    public GetDestinationType GetDestinationType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<TDestination> GetDestinationFunc { get; }
    public GetDestinationObject`1(GetDestinationType getDestinationType, Func`1<TDestination> getDestinationFunc);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public GetDestinationType get_GetDestinationType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Func`1<TDestination> get_GetDestinationFunc();
}
public enum AutoMapper.Extensions.EnumMapping.Internal.GetDestinationType : Enum {
    public int value__;
    public static GetDestinationType Value;
    public static GetDestinationType Exception;
}
internal interface AutoMapper.Extensions.EnumMapping.Internal.IEnumMappingValidationRuntimeFeature {
    public abstract virtual void Validate(TypePair typePair);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
