public interface Automatonymous.Accessors.CompositeEventStatusAccessor`1 {
    public abstract virtual CompositeEventStatus Get(TInstance instance);
    public abstract virtual void Set(TInstance instance, CompositeEventStatus status);
}
public class Automatonymous.Accessors.DefaultInstanceStateAccessor`1 : object {
    private Lazy`1<StateAccessor`1<TInstance>> _accessor;
    private State`1<TInstance> _initialState;
    private StateMachine`1<TInstance> _machine;
    private StateObserver`1<TInstance> _observer;
    public DefaultInstanceStateAccessor`1(StateMachine`1<TInstance> machine, State`1<TInstance> initialState, StateObserver`1<TInstance> observer);
    private sealed virtual override Task`1<State`1<TInstance>> Automatonymous.StateAccessor<TInstance>.Get(InstanceContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.StateAccessor<TInstance>.Set(InstanceContext`1<TInstance> context, State`1<TInstance> state);
    public sealed virtual Expression`1<Func`2<TInstance, bool>> GetStateExpression(State[] states);
    public sealed virtual void Probe(ProbeContext context);
    private StateAccessor`1<TInstance> CreateDefaultAccessor();
}
public class Automatonymous.Accessors.InitialIfNullStateAccessor`1 : object {
    private Behavior`1<TInstance> _initialBehavior;
    private StateAccessor`1<TInstance> _stateAccessor;
    public InitialIfNullStateAccessor`1(State`1<TInstance> initialState, StateAccessor`1<TInstance> stateAccessor);
    [AsyncStateMachineAttribute("Automatonymous.Accessors.InitialIfNullStateAccessor`1/<Automatonymous-StateAccessor<TInstance>-Get>d__3")]
private sealed virtual override Task`1<State`1<TInstance>> Automatonymous.StateAccessor<TInstance>.Get(InstanceContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.StateAccessor<TInstance>.Set(InstanceContext`1<TInstance> context, State`1<TInstance> state);
    public sealed virtual Expression`1<Func`2<TInstance, bool>> GetStateExpression(State[] states);
    public sealed virtual void Probe(ProbeContext context);
}
public class Automatonymous.Accessors.IntCompositeEventStatusAccessor`1 : object {
    private ReadWriteProperty`2<TInstance, int> _property;
    public IntCompositeEventStatusAccessor`1(PropertyInfo propertyInfo);
    public sealed virtual CompositeEventStatus Get(TInstance instance);
    public sealed virtual void Set(TInstance instance, CompositeEventStatus status);
    public sealed virtual void Probe(ProbeContext context);
}
public class Automatonymous.Accessors.IntStateAccessor`1 : object {
    private StateAccessorIndex`1<TInstance> _index;
    private StateObserver`1<TInstance> _observer;
    private ReadWriteProperty`2<TInstance, int> _property;
    public IntStateAccessor`1(Expression`1<Func`2<TInstance, int>> currentStateExpression, StateAccessorIndex`1<TInstance> index, StateObserver`1<TInstance> observer);
    private sealed virtual override Task`1<State`1<TInstance>> Automatonymous.StateAccessor<TInstance>.Get(InstanceContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.StateAccessor<TInstance>.Set(InstanceContext`1<TInstance> context, State`1<TInstance> state);
    public sealed virtual Expression`1<Func`2<TInstance, bool>> GetStateExpression(State[] states);
    public sealed virtual void Probe(ProbeContext context);
    private static ReadWriteProperty`2<TInstance, int> GetCurrentStateProperty(Expression`1<Func`2<TInstance, int>> currentStateExpression);
}
public class Automatonymous.Accessors.RawStateAccessor`1 : object {
    private StateMachine`1<TInstance> _machine;
    private StateObserver`1<TInstance> _observer;
    private ReadWriteProperty`2<TInstance, State> _property;
    public RawStateAccessor`1(StateMachine`1<TInstance> machine, Expression`1<Func`2<TInstance, State>> currentStateExpression, StateObserver`1<TInstance> observer);
    private sealed virtual override Task`1<State`1<TInstance>> Automatonymous.StateAccessor<TInstance>.Get(InstanceContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.StateAccessor<TInstance>.Set(InstanceContext`1<TInstance> context, State`1<TInstance> state);
    public sealed virtual Expression`1<Func`2<TInstance, bool>> GetStateExpression(State[] states);
    public sealed virtual void Probe(ProbeContext context);
    private static ReadWriteProperty`2<TInstance, State> GetCurrentStateProperty(Expression`1<Func`2<TInstance, State>> currentStateExpression);
}
[DefaultMemberAttribute("Item")]
public class Automatonymous.Accessors.StateAccessorIndex`1 : object {
    private State`1[] _assignedStates;
    private StateMachine`1<TInstance> _stateMachine;
    private Lazy`1<State`1[]> _states;
    public int Item { get; }
    public State`1<TInstance> Item { get; }
    public StateAccessorIndex`1(StateMachine`1<TInstance> stateMachine, State`1<TInstance> initial, State`1<TInstance> final, State[] states);
    public int get_Item(string name);
    public State`1<TInstance> get_Item(int index);
    private State`1[] CreateStateArray();
}
public class Automatonymous.Accessors.StringStateAccessor`1 : object {
    private StateMachine`1<TInstance> _machine;
    private StateObserver`1<TInstance> _observer;
    private ReadWriteProperty`2<TInstance, string> _property;
    public StringStateAccessor`1(StateMachine`1<TInstance> machine, Expression`1<Func`2<TInstance, string>> currentStateExpression, StateObserver`1<TInstance> observer);
    private sealed virtual override Task`1<State`1<TInstance>> Automatonymous.StateAccessor<TInstance>.Get(InstanceContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.StateAccessor<TInstance>.Set(InstanceContext`1<TInstance> context, State`1<TInstance> state);
    public sealed virtual Expression`1<Func`2<TInstance, bool>> GetStateExpression(State[] states);
    public sealed virtual void Probe(ProbeContext context);
    private static ReadWriteProperty`2<TInstance, string> GetCurrentStateProperty(Expression`1<Func`2<TInstance, string>> currentStateExpression);
}
public class Automatonymous.Accessors.StructCompositeEventStatusAccessor`1 : object {
    private ReadWriteProperty`2<TInstance, CompositeEventStatus> _property;
    public StructCompositeEventStatusAccessor`1(PropertyInfo propertyInfo);
    public sealed virtual CompositeEventStatus Get(TInstance instance);
    public sealed virtual void Set(TInstance instance, CompositeEventStatus status);
    public sealed virtual void Probe(ProbeContext context);
}
public class Automatonymous.Activities.ActionActivity`1 : object {
    private Action`1<BehaviorContext`1<TInstance>> _action;
    public ActionActivity`1(Action`1<BehaviorContext`1<TInstance>> action);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.Activities.ActionActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__4")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.ActionActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__5`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.ActionActivity`2 : object {
    private Action`1<BehaviorContext`2<TInstance, TData>> _action;
    public ActionActivity`2(Action`1<BehaviorContext`2<TInstance, TData>> action);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.Activities.ActionActivity`2/<Automatonymous-Activity<TInstance,TData>-Execute>d__4")]
private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.AsyncActivity`1 : object {
    private Func`2<BehaviorContext`1<TInstance>, Task> _asyncAction;
    public AsyncActivity`1(Func`2<BehaviorContext`1<TInstance>, Task> asyncAction);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__4")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__5`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.AsyncActivity`2 : object {
    private Func`2<BehaviorContext`2<TInstance, TData>, Task> _asyncAction;
    public AsyncActivity`2(Func`2<BehaviorContext`2<TInstance, TData>, Task> asyncAction);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncActivity`2/<Automatonymous-Activity<TInstance,TData>-Execute>d__4")]
private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.AsyncFactoryActivity`1 : object {
    private Func`2<BehaviorContext`1<TInstance>, Task`1<Activity`1<TInstance>>> _activityFactory;
    public AsyncFactoryActivity`1(Func`2<BehaviorContext`1<TInstance>, Task`1<Activity`1<TInstance>>> activityFactory);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncFactoryActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__4")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncFactoryActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__5`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncFactoryActivity`1/<Automatonymous-Activity<TInstance>-Faulted>d__6`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncFactoryActivity`1/<Automatonymous-Activity<TInstance>-Faulted>d__7`2")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.AsyncFactoryActivity`2 : object {
    private Func`2<BehaviorContext`2<TInstance, TData>, Task`1<Activity`2<TInstance, TData>>> _activityFactory;
    public AsyncFactoryActivity`2(Func`2<BehaviorContext`2<TInstance, TData>, Task`1<Activity`2<TInstance, TData>>> activityFactory);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncFactoryActivity`2/<Automatonymous-Activity<TInstance,TData>-Execute>d__4")]
private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncFactoryActivity`2/<Automatonymous-Activity<TInstance,TData>-Faulted>d__5`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.AsyncFaultedActionActivity`2 : object {
    private Func`2<BehaviorExceptionContext`2<TInstance, TException>, Task> _asyncAction;
    public AsyncFaultedActionActivity`2(Func`2<BehaviorExceptionContext`2<TInstance, TException>, Task> asyncAction);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncFaultedActionActivity`2/<Automatonymous-Activity<TInstance>-Faulted>d__6`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, T> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncFaultedActionActivity`2/<Automatonymous-Activity<TInstance>-Faulted>d__7`2")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, TData, T> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.AsyncFaultedActionActivity`3 : object {
    private Func`2<BehaviorExceptionContext`3<TInstance, TData, TException>, Task> _asyncAction;
    public AsyncFaultedActionActivity`3(Func`2<BehaviorExceptionContext`3<TInstance, TData, TException>, Task> asyncAction);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.AsyncFaultedActionActivity`3/<Automatonymous-Activity<TInstance,TData>-Faulted>d__5`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, T> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.CatchFaultActivity`2 : object {
    private Behavior`1<TInstance> _behavior;
    public CatchFaultActivity`2(Behavior`1<TInstance> behavior);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.CatchFaultActivity`2/<Automatonymous-Activity<TInstance>-Faulted>d__6`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, T> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.CatchFaultActivity`2/<Automatonymous-Activity<TInstance>-Faulted>d__7`2")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, TData, T> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.CompositeEventActivity`1 : object {
    private CompositeEventStatusAccessor`1<TInstance> _accessor;
    private CompositeEventStatus _complete;
    private Event _event;
    private int _flag;
    public Event Event { get; }
    public CompositeEventActivity`1(CompositeEventStatusAccessor`1<TInstance> accessor, int flag, CompositeEventStatus complete, Event event);
    public Event get_Event();
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.Activities.CompositeEventActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__9")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.CompositeEventActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__10`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
    private Task Execute(BehaviorContext`1<TInstance> context);
    private Task RaiseCompositeEvent(BehaviorContext`1<TInstance> context);
}
public class Automatonymous.Activities.ConditionActivity`1 : object {
    private StateMachineAsyncCondition`1<TInstance> _condition;
    private Behavior`1<TInstance> _elseBehavior;
    private Behavior`1<TInstance> _thenBehavior;
    public ConditionActivity`1(StateMachineAsyncCondition`1<TInstance> condition, Behavior`1<TInstance> thenBehavior, Behavior`1<TInstance> elseBehavior);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    [AsyncStateMachineAttribute("Automatonymous.Activities.ConditionActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__6")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.ConditionActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__7`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.ConditionActivity`2 : object {
    private StateMachineAsyncCondition`2<TInstance, TData> _condition;
    private Behavior`1<TInstance> _elseBehavior;
    private Behavior`1<TInstance> _thenBehavior;
    public ConditionActivity`2(StateMachineAsyncCondition`2<TInstance, TData> condition, Behavior`1<TInstance> thenBehavior, Behavior`1<TInstance> elseBehavior);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.ConditionActivity`2/<Automatonymous-Activity<TInstance>-Execute>d__7`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.ConditionExceptionActivity`2 : object {
    private StateMachineAsyncExceptionCondition`2<TInstance, TConditionException> _condition;
    private Behavior`1<TInstance> _elseBehavior;
    private Behavior`1<TInstance> _thenBehavior;
    public ConditionExceptionActivity`2(StateMachineAsyncExceptionCondition`2<TInstance, TConditionException> condition, Behavior`1<TInstance> thenBehavior, Behavior`1<TInstance> elseBehavior);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.ConditionExceptionActivity`2/<Automatonymous-Activity<TInstance>-Faulted>d__8`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.ConditionExceptionActivity`2/<Automatonymous-Activity<TInstance>-Faulted>d__9`2")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.ConditionExceptionActivity`3 : object {
    private StateMachineAsyncExceptionCondition`3<TInstance, TData, TConditionException> _condition;
    private Behavior`1<TInstance> _elseBehavior;
    private Behavior`1<TInstance> _thenBehavior;
    public ConditionExceptionActivity`3(StateMachineAsyncExceptionCondition`3<TInstance, TData, TConditionException> condition, Behavior`1<TInstance> thenBehavior, Behavior`1<TInstance> elseBehavior);
    private sealed virtual override void GreenPipes.IProbeSite.Probe(ProbeContext context);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.ConditionExceptionActivity`3/<Automatonymous-Activity<TInstance>-Faulted>d__9`2")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.DataConverterActivity`2 : object {
    private Activity`2<TInstance, TData> _activity;
    public DataConverterActivity`2(Activity`2<TInstance, TData> activity);
    public sealed virtual void Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.ExceptionBehavior`2 : object {
    private BehaviorExceptionContext`2<TInstance, TException> _context;
    private Behavior`1<TInstance> _next;
    public ExceptionBehavior`2(Behavior`1<TInstance> next, BehaviorExceptionContext`2<TInstance, TException> context);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, TData, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, T> context);
}
public class Automatonymous.Activities.ExceptionBehavior`3 : object {
    private BehaviorExceptionContext`3<TInstance, TData, TException> _context;
    private Behavior`2<TInstance, TData> _next;
    public ExceptionBehavior`3(Behavior`2<TInstance, TData> next, BehaviorExceptionContext`3<TInstance, TData, TException> context);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, TD, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, T> context);
}
public class Automatonymous.Activities.ExecuteOnFaultedActivity`1 : object {
    private Activity`1<TInstance> _activity;
    public ExecuteOnFaultedActivity`1(Activity`1<TInstance> activity);
    public sealed virtual void Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    public sealed virtual Task Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    public sealed virtual Task Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    public sealed virtual Task Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    public sealed virtual Task Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.FactoryActivity`1 : object {
    private Func`2<BehaviorContext`1<TInstance>, Activity`1<TInstance>> _activityFactory;
    public FactoryActivity`1(Func`2<BehaviorContext`1<TInstance>, Activity`1<TInstance>> activityFactory);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public class Automatonymous.Activities.FactoryActivity`2 : object {
    private Func`2<BehaviorContext`2<TInstance, TData>, Activity`2<TInstance, TData>> _activityFactory;
    public FactoryActivity`2(Func`2<BehaviorContext`2<TInstance, TData>, Activity`2<TInstance, TData>> activityFactory);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.FaultedActionActivity`2 : object {
    private Action`1<BehaviorExceptionContext`2<TInstance, TException>> _action;
    public FaultedActionActivity`2(Action`1<BehaviorExceptionContext`2<TInstance, TException>> action);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, T> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, TData, T> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.FaultedActionActivity`3 : object {
    private Action`1<BehaviorExceptionContext`3<TInstance, TData, TException>> _action;
    public FaultedActionActivity`3(Action`1<BehaviorExceptionContext`3<TInstance, TData, TException>> action);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, T> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.SlimActivity`2 : object {
    private Activity`1<TInstance> _activity;
    public SlimActivity`2(Activity`1<TInstance> activity);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> behavior);
    private sealed virtual override Task Automatonymous.Activity<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.Activities.TransitionActivity`1 : object {
    private StateAccessor`1<TInstance> _currentStateAccessor;
    private State`1<TInstance> _toState;
    public State ToState { get; }
    public TransitionActivity`1(State`1<TInstance> toState, StateAccessor`1<TInstance> currentStateAccessor);
    public State get_ToState();
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.Activities.TransitionActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__7")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.TransitionActivity`1/<Automatonymous-Activity<TInstance>-Execute>d__8`1")]
private sealed virtual override Task Automatonymous.Activity<TInstance>.Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    private sealed virtual override Task Automatonymous.Activity<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
    [AsyncStateMachineAttribute("Automatonymous.Activities.TransitionActivity`1/<Transition>d__11")]
private Task Transition(BehaviorContext`1<TInstance> context);
    [AsyncStateMachineAttribute("Automatonymous.Activities.TransitionActivity`1/<RaiseBeforeEnterEvents>d__12")]
private Task RaiseBeforeEnterEvents(BehaviorContext`1<TInstance> context, State`1<TInstance> currentState, State`1<TInstance> toState);
    [AsyncStateMachineAttribute("Automatonymous.Activities.TransitionActivity`1/<RaiseAfterLeaveEvents>d__13")]
private Task RaiseAfterLeaveEvents(BehaviorContext`1<TInstance> context, State`1<TInstance> fromState, State`1<TInstance> toState);
    [AsyncStateMachineAttribute("Automatonymous.Activities.TransitionActivity`1/<RaiseCurrentStateLeaveEvents>d__14")]
private Task RaiseCurrentStateLeaveEvents(BehaviorContext`1<TInstance> context, State`1<TInstance> fromState);
}
public interface Automatonymous.Activity {
}
public interface Automatonymous.Activity`1 {
    public abstract virtual Task Execute(BehaviorContext`1<TInstance> context, Behavior`1<TInstance> next);
    public abstract virtual Task Execute(BehaviorContext`2<TInstance, T> context, Behavior`2<TInstance, T> next);
    public abstract virtual Task Faulted(BehaviorExceptionContext`2<TInstance, TException> context, Behavior`1<TInstance> next);
    public abstract virtual Task Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context, Behavior`2<TInstance, T> next);
}
public interface Automatonymous.Activity`2 {
    public abstract virtual Task Execute(BehaviorContext`2<TInstance, TData> context, Behavior`2<TInstance, TData> next);
    public abstract virtual Task Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context, Behavior`2<TInstance, TData> next);
}
public class Automatonymous.AutomatonymousException : Exception {
    public AutomatonymousException(string message);
    public AutomatonymousException(Type machineType, string message);
    public AutomatonymousException(string message, Exception innerException);
    public AutomatonymousException(Type machineType, string message, Exception innerException);
    protected AutomatonymousException(SerializationInfo info, StreamingContext context);
}
public abstract class Automatonymous.AutomatonymousStateMachine`1 : object {
    private Dictionary`2<string, StateMachineEvent`1<TInstance>> _eventCache;
    private EventObservable`1<TInstance> _eventObservers;
    private State`1<TInstance> _final;
    private State`1<TInstance> _initial;
    private Lazy`1<StateMachineRegistration[]> _registrations;
    private Dictionary`2<string, State`1<TInstance>> _stateCache;
    private StateObservable`1<TInstance> _stateObservers;
    private StateAccessor`1<TInstance> _accessor;
    private string _name;
    private UnhandledEventCallback`1<TInstance> _unhandledEventCallback;
    private IEnumerable`1<State`1<TInstance>> IntrospectionStates { get; }
    private string Automatonymous.StateMachine.Name { get; }
    private StateAccessor`1<TInstance> Automatonymous.StateMachine<TInstance>.Accessor { get; }
    public State Initial { get; }
    public State Final { get; }
    public IEnumerable`1<State> States { get; }
    public IEnumerable`1<Event> Events { get; }
    private Type Automatonymous.StateMachine.InstanceType { get; }
    [IteratorStateMachineAttribute("Automatonymous.AutomatonymousStateMachine`1/<get_IntrospectionStates>d__12")]
private IEnumerable`1<State`1<TInstance>> get_IntrospectionStates();
    private sealed virtual override string Automatonymous.StateMachine.get_Name();
    private sealed virtual override StateAccessor`1<TInstance> Automatonymous.StateMachine<TInstance>.get_Accessor();
    public sealed virtual State get_Initial();
    public sealed virtual State get_Final();
    private sealed virtual override State Automatonymous.StateMachine.GetState(string name);
    [AsyncStateMachineAttribute("Automatonymous.AutomatonymousStateMachine`1/<Automatonymous-StateMachine<TInstance>-RaiseEvent>d__22")]
private sealed virtual override Task Automatonymous.StateMachine<TInstance>.RaiseEvent(EventContext`1<TInstance> context);
    [AsyncStateMachineAttribute("Automatonymous.AutomatonymousStateMachine`1/<Automatonymous-StateMachine<TInstance>-RaiseEvent>d__23`1")]
private sealed virtual override Task Automatonymous.StateMachine<TInstance>.RaiseEvent(EventContext`2<TInstance, T> context);
    public sealed virtual State`1<TInstance> GetState(string name);
    public sealed virtual IEnumerable`1<State> get_States();
    private sealed virtual override Event Automatonymous.StateMachine.GetEvent(string name);
    public sealed virtual IEnumerable`1<Event> get_Events();
    private sealed virtual override Type Automatonymous.StateMachine.get_InstanceType();
    private sealed virtual override IEnumerable`1<Event> Automatonymous.StateMachine.NextEvents(State state);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override IDisposable Automatonymous.StateMachine<TInstance>.ConnectEventObserver(EventObserver`1<TInstance> observer);
    private sealed virtual override IDisposable Automatonymous.StateMachine<TInstance>.ConnectEventObserver(Event event, EventObserver`1<TInstance> observer);
    private sealed virtual override IDisposable Automatonymous.StateMachine<TInstance>.ConnectStateObserver(StateObserver`1<TInstance> observer);
    public bool TryGetState(string name, State`1& state);
    private Task DefaultUnhandledEventCallback(UnhandledEventContext`1<TInstance> context);
    protected internal void InstanceState(Expression`1<Func`2<TInstance, State>> instanceStateProperty);
    protected internal void InstanceState(Expression`1<Func`2<TInstance, string>> instanceStateProperty);
    protected internal void InstanceState(Expression`1<Func`2<TInstance, int>> instanceStateProperty, State[] states);
    protected internal void Name(string machineName);
    protected internal virtual void Event(Expression`1<Func`1<Event>> propertyExpression);
    protected internal virtual Event Event(string name);
    private Event DeclareTriggerEvent(string name);
    protected internal virtual void Event(Expression`1<Func`1<Event`1<T>>> propertyExpression);
    protected internal virtual Event`1<T> Event(string name);
    private Event`1<T> DeclareDataEvent(string name);
    private void DeclarePropertyBasedEvent(Func`2<PropertyInfo, TEvent> ctor, PropertyInfo property);
    private TEvent DeclareEvent(Func`2<string, TEvent> ctor, string name);
    protected internal virtual void Event(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, Event`1<T>>> eventPropertyExpression);
    protected internal virtual void CompositeEvent(Expression`1<Func`1<Event>> propertyExpression, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, Event[] events);
    protected internal virtual void CompositeEvent(Expression`1<Func`1<Event>> propertyExpression, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    protected internal virtual void CompositeEvent(Expression`1<Func`1<Event>> propertyExpression, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, Event[] events);
    protected internal virtual void CompositeEvent(Expression`1<Func`1<Event>> propertyExpression, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    private void CompositeEvent(Expression`1<Func`1<Event>> propertyExpression, CompositeEventStatusAccessor`1<TInstance> accessor, CompositeEventOptions options, Event[] events);
    internal virtual void CompositeEvent(string name, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, Event[] events);
    internal virtual Event CompositeEvent(string name, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    internal virtual Event CompositeEvent(string name, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, Event[] events);
    internal virtual Event CompositeEvent(string name, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    private Event CompositeEvent(string name, CompositeEventStatusAccessor`1<TInstance> accessor, CompositeEventOptions options, Event[] events);
    protected internal virtual void CompositeEvent(Event event, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, Event[] events);
    protected internal virtual Event CompositeEvent(Event event, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    protected internal virtual Event CompositeEvent(Event event, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, Event[] events);
    protected internal virtual Event CompositeEvent(Event event, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    private Event CompositeEvent(Event event, CompositeEventStatusAccessor`1<TInstance> accessor, CompositeEventOptions options, Event[] events);
    protected internal virtual void State(Expression`1<Func`1<State>> propertyExpression);
    protected internal virtual State`1<TInstance> State(string name);
    private void DeclareState(PropertyInfo property);
    protected internal virtual void State(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, State>> statePropertyExpression);
    private static StateMachineState`1<TInstance> GetStateProperty(PropertyInfo stateProperty, TProperty propertyValue);
    protected internal virtual void SubState(Expression`1<Func`1<State>> propertyExpression, State superState);
    protected internal virtual State`1<TInstance> SubState(string name, State superState);
    protected internal virtual void SubState(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, State>> statePropertyExpression, State superState);
    private void SetState(string name, StateMachineState`1<TInstance> state);
    protected internal void During(State state, EventActivities`1[] activities);
    protected internal void During(State state1, State state2, EventActivities`1[] activities);
    protected internal void During(State state1, State state2, State state3, EventActivities`1[] activities);
    protected internal void During(State state1, State state2, State state3, State state4, EventActivities`1[] activities);
    protected internal void During(IEnumerable`1<State> states, EventActivities`1[] activities);
    private void BindActivitiesToState(State state, IEnumerable`1<ActivityBinder`1<TInstance>> eventActivities);
    protected internal void Initially(EventActivities`1[] activities);
    protected internal void DuringAny(EventActivities`1[] activities);
    protected internal void Finally(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    private void BindTransitionEvents(State`1<TInstance> state, IEnumerable`1<EventActivities`1<TInstance>> activities);
    protected internal EventActivityBinder`1<TInstance> When(Event event);
    protected internal EventActivityBinder`1<TInstance> When(Event event, StateMachineEventFilter`1<TInstance> filter);
    protected internal void WhenEnter(State state, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    protected internal void WhenEnterAny(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    protected internal void WhenLeaveAny(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    private void BindEveryTransitionEvent(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback, Func`2<State`1<TInstance>, Event> eventProvider);
    protected internal void BeforeEnterAny(Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    protected internal void AfterLeaveAny(Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    private void BindEveryTransitionEvent(Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback, Func`2<State`1<TInstance>, Event`1<State>> eventProvider);
    protected internal void WhenLeave(State state, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    protected internal void BeforeEnter(State state, Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    protected internal void AfterLeave(State state, Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    protected internal EventActivityBinder`2<TInstance, TData> When(Event`1<TData> event);
    protected internal EventActivityBinder`2<TInstance, TData> When(Event`1<TData> event, StateMachineEventFilter`2<TInstance, TData> filter);
    protected internal EventActivities`1<TInstance> Ignore(Event event);
    protected internal EventActivities`1<TInstance> Ignore(Event`1<TData> event);
    protected internal EventActivities`1<TInstance> Ignore(Event`1<TData> event, StateMachineEventFilter`2<TInstance, TData> filter);
    protected internal void OnUnhandledEvent(UnhandledEventCallback`1<TInstance> callback);
    internal Task UnhandledEvent(EventContext`1<TInstance> context, State state);
    private void RegisterImplicit();
    private StateMachine`1<TInstance> Modify(Action`1<StateMachineModifier`1<TInstance>> modifier);
    public static AutomatonymousStateMachine`1<TInstance> New(Action`1<StateMachineModifier`1<TInstance>> modifier);
    [CompilerGeneratedAttribute]
private StateMachineRegistration[] <.ctor>b__10_0();
    [CompilerGeneratedAttribute]
private Event <Event>b__44_0(PropertyInfo prop);
    [CompilerGeneratedAttribute]
private Event`1<T> <Event>b__47_0(PropertyInfo prop);
    [CompilerGeneratedAttribute]
private bool <DuringAny>b__84_0(State`1<TInstance> x);
}
public static class Automatonymous.Behavior : object {
    public static Behavior`1<T> Empty();
    public static Behavior`2<T, TData> Empty();
    public static Behavior`1<T> Exception();
    public static Behavior`2<T, TData> Exception();
}
public interface Automatonymous.Behavior`1 {
    public abstract virtual Task Execute(BehaviorContext`1<TInstance> context);
    public abstract virtual Task Execute(BehaviorContext`2<TInstance, T> context);
    public abstract virtual Task Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context);
    public abstract virtual Task Faulted(BehaviorExceptionContext`2<TInstance, TException> context);
}
public interface Automatonymous.Behavior`2 {
    public abstract virtual Task Execute(BehaviorContext`2<TInstance, TData> context);
    public abstract virtual Task Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context);
}
public interface Automatonymous.BehaviorContext`1 {
    public abstract virtual BehaviorContext`1<TInstance> GetProxy(Event event);
    public abstract virtual BehaviorContext`2<TInstance, T> GetProxy(Event`1<T> event, T data);
}
public interface Automatonymous.BehaviorContext`2 {
}
public interface Automatonymous.BehaviorExceptionContext`2 {
    public TException Exception { get; }
    public abstract virtual TException get_Exception();
    public abstract virtual BehaviorExceptionContext`3<TInstance, T, TException> GetProxy(Event`1<T> event, T data);
}
public interface Automatonymous.BehaviorExceptionContext`3 {
    public abstract virtual BehaviorExceptionContext`3<TInstance, T, TException> GetProxy(Event`1<T> event, T data);
}
public class Automatonymous.Behaviors.ActivityBehavior`1 : object {
    private Activity`1<TInstance> _activity;
    private Behavior`1<TInstance> _next;
    public ActivityBehavior`1(Activity`1<TInstance> activity, Behavior`1<TInstance> next);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.Behaviors.ActivityBehavior`1/<Automatonymous-Behavior<TInstance>-Execute>d__5")]
private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`1<TInstance> context);
    [AsyncStateMachineAttribute("Automatonymous.Behaviors.ActivityBehavior`1/<Automatonymous-Behavior<TInstance>-Execute>d__6`1")]
private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context);
}
public class Automatonymous.Behaviors.ActivityBehaviorBuilder`1 : object {
    private List`1<Activity`1<TInstance>> _activities;
    private Lazy`1<Behavior`1<TInstance>> _behavior;
    public Behavior`1<TInstance> Behavior { get; }
    public Behavior`1<TInstance> get_Behavior();
    public sealed virtual void Add(Activity`1<TInstance> activity);
    private Behavior`1<TInstance> CreateBehavior();
}
public interface Automatonymous.Behaviors.BehaviorBuilder`1 {
    public abstract virtual void Add(Activity`1<TInstance> activity);
}
public class Automatonymous.Behaviors.CatchBehaviorBuilder`1 : object {
    private List`1<Activity`1<TInstance>> _activities;
    private Lazy`1<Behavior`1<TInstance>> _behavior;
    public Behavior`1<TInstance> Behavior { get; }
    public Behavior`1<TInstance> get_Behavior();
    public sealed virtual void Add(Activity`1<TInstance> activity);
    private Behavior`1<TInstance> CreateBehavior();
}
public class Automatonymous.Behaviors.DataBehavior`2 : object {
    private Behavior`1<TInstance> _behavior;
    public DataBehavior`2(Behavior`1<TInstance> behavior);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context);
}
public class Automatonymous.Behaviors.EmptyBehavior`1 : object {
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context);
}
public class Automatonymous.Behaviors.EmptyBehavior`2 : object {
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context);
}
public class Automatonymous.Behaviors.ExceptionBehavior`1 : object {
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context);
}
public class Automatonymous.Behaviors.ExceptionBehavior`2 : object {
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance,TData>.Execute(BehaviorContext`2<TInstance, TData> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance,TData>.Faulted(BehaviorExceptionContext`3<TInstance, TData, TException> context);
}
public static class Automatonymous.Behaviors.ExceptionTypeCache : object {
    private static CachedConfigurator GetOrAdd(Type type);
    public static Task Faulted(Behavior`1<TInstance> behavior, BehaviorContext`1<TInstance> context, Exception exception);
    public static Task Faulted(Behavior`2<TInstance, TData> behavior, BehaviorContext`2<TInstance, TData> context, Exception exception);
}
public class Automatonymous.Behaviors.LastBehavior`1 : object {
    private Activity`1<TInstance> _activity;
    public LastBehavior`1(Activity`1<TInstance> activity);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context);
}
public class Automatonymous.Behaviors.LastFaultedBehavior`1 : object {
    private Activity`1<TInstance> _activity;
    public LastFaultedBehavior`1(Activity`1<TInstance> activity);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context);
}
public class Automatonymous.Behaviors.WidenBehavior`2 : object {
    private TData _data;
    private Event`1<TData> _event;
    private Behavior`2<TInstance, TData> _next;
    public WidenBehavior`2(Behavior`2<TInstance, TData> next, EventContext`2<TInstance, TData> context);
    private sealed virtual override void Automatonymous.Visitable.Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Execute(BehaviorContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`3<TInstance, T, TException> context);
    private sealed virtual override Task Automatonymous.Behavior<TInstance>.Faulted(BehaviorExceptionContext`2<TInstance, TException> context);
}
public interface Automatonymous.Binders.ActivityBinder`1 {
    public abstract virtual bool IsStateTransitionEvent(State state);
    public abstract virtual void Bind(State`1<TInstance> state);
    public abstract virtual void Bind(BehaviorBuilder`1<TInstance> builder);
}
public class Automatonymous.Binders.CatchActivityBinder`2 : object {
    private EventActivities`1<TInstance> _activities;
    private Event _event;
    public CatchActivityBinder`2(Event event, EventActivities`1<TInstance> activities);
    public sealed virtual bool IsStateTransitionEvent(State state);
    public sealed virtual void Bind(State`1<TInstance> state);
    public sealed virtual void Bind(BehaviorBuilder`1<TInstance> builder);
}
public class Automatonymous.Binders.CatchExceptionActivityBinder`2 : object {
    private ActivityBinder`1[] _activities;
    private Event _event;
    private StateMachine`1<TInstance> _machine;
    public StateMachine`1<TInstance> StateMachine { get; }
    public Event Event { get; }
    public CatchExceptionActivityBinder`2(StateMachine`1<TInstance> machine, Event event);
    private CatchExceptionActivityBinder`2(StateMachine`1<TInstance> machine, Event event, ActivityBinder`1[] activities, ActivityBinder`1[] appendActivity);
    public sealed virtual IEnumerable`1<ActivityBinder`1<TInstance>> GetStateActivityBinders();
    public sealed virtual StateMachine`1<TInstance> get_StateMachine();
    public sealed virtual Event get_Event();
    public sealed virtual ExceptionActivityBinder`2<TInstance, TException> Add(Activity`1<TInstance> activity);
    public sealed virtual ExceptionActivityBinder`2<TInstance, TException> Catch(Func`2<ExceptionActivityBinder`2<TInstance, T>, ExceptionActivityBinder`2<TInstance, T>> activityCallback);
    public sealed virtual ExceptionActivityBinder`2<TInstance, TException> If(StateMachineExceptionCondition`2<TInstance, TException> condition, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> activityCallback);
    public sealed virtual ExceptionActivityBinder`2<TInstance, TException> IfAsync(StateMachineAsyncExceptionCondition`2<TInstance, TException> condition, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> activityCallback);
    public sealed virtual ExceptionActivityBinder`2<TInstance, TException> IfElse(StateMachineExceptionCondition`2<TInstance, TException> condition, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> thenActivityCallback, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> elseActivityCallback);
    public sealed virtual ExceptionActivityBinder`2<TInstance, TException> IfElseAsync(StateMachineAsyncExceptionCondition`2<TInstance, TException> condition, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> thenActivityCallback, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> elseActivityCallback);
    private ExceptionActivityBinder`2<TInstance, TException> GetBinder(Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> callback);
}
public class Automatonymous.Binders.CatchExceptionActivityBinder`3 : object {
    private ActivityBinder`1[] _activities;
    private Event`1<TData> _event;
    private StateMachine`1<TInstance> _machine;
    public StateMachine`1<TInstance> StateMachine { get; }
    public Event`1<TData> Event { get; }
    public CatchExceptionActivityBinder`3(StateMachine`1<TInstance> machine, Event`1<TData> event);
    private CatchExceptionActivityBinder`3(StateMachine`1<TInstance> machine, Event`1<TData> event, ActivityBinder`1[] activities, ActivityBinder`1[] appendActivity);
    public sealed virtual IEnumerable`1<ActivityBinder`1<TInstance>> GetStateActivityBinders();
    public sealed virtual StateMachine`1<TInstance> get_StateMachine();
    public sealed virtual Event`1<TData> get_Event();
    public sealed virtual ExceptionActivityBinder`3<TInstance, TData, TException> Add(Activity`1<TInstance> activity);
    public sealed virtual ExceptionActivityBinder`3<TInstance, TData, TException> Add(Activity`2<TInstance, TData> activity);
    public sealed virtual ExceptionActivityBinder`3<TInstance, TData, TException> Catch(Func`2<ExceptionActivityBinder`3<TInstance, TData, T>, ExceptionActivityBinder`3<TInstance, TData, T>> activityCallback);
    public sealed virtual ExceptionActivityBinder`3<TInstance, TData, TException> If(StateMachineExceptionCondition`3<TInstance, TData, TException> condition, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> activityCallback);
    public sealed virtual ExceptionActivityBinder`3<TInstance, TData, TException> IfAsync(StateMachineAsyncExceptionCondition`3<TInstance, TData, TException> condition, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> activityCallback);
    public sealed virtual ExceptionActivityBinder`3<TInstance, TData, TException> IfElse(StateMachineExceptionCondition`3<TInstance, TData, TException> condition, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> thenActivityCallback, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> elseActivityCallback);
    public sealed virtual ExceptionActivityBinder`3<TInstance, TData, TException> IfElseAsync(StateMachineAsyncExceptionCondition`3<TInstance, TData, TException> condition, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> thenActivityCallback, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> elseActivityCallback);
    private ExceptionActivityBinder`3<TInstance, TData, TException> GetBinder(Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> callback);
}
public class Automatonymous.Binders.ConditionalActivityBinder`1 : object {
    private StateMachineAsyncCondition`1<TInstance> _condition;
    private EventActivities`1<TInstance> _elseActivities;
    private Event _event;
    private EventActivities`1<TInstance> _thenActivities;
    public ConditionalActivityBinder`1(Event event, StateMachineCondition`1<TInstance> condition, EventActivities`1<TInstance> thenActivities, EventActivities`1<TInstance> elseActivities);
    public ConditionalActivityBinder`1(Event event, StateMachineAsyncCondition`1<TInstance> condition, EventActivities`1<TInstance> thenActivities, EventActivities`1<TInstance> elseActivities);
    public sealed virtual bool IsStateTransitionEvent(State state);
    public sealed virtual void Bind(State`1<TInstance> state);
    public sealed virtual void Bind(BehaviorBuilder`1<TInstance> builder);
    private static Behavior`1<TInstance> GetBehavior(EventActivities`1<TInstance> activities);
}
public class Automatonymous.Binders.ConditionalActivityBinder`2 : object {
    private StateMachineAsyncCondition`2<TInstance, TData> _condition;
    private EventActivities`1<TInstance> _elseActivities;
    private Event _event;
    private EventActivities`1<TInstance> _thenActivities;
    public ConditionalActivityBinder`2(Event event, StateMachineCondition`2<TInstance, TData> condition, EventActivities`1<TInstance> thenActivities, EventActivities`1<TInstance> elseActivities);
    public ConditionalActivityBinder`2(Event event, StateMachineAsyncCondition`2<TInstance, TData> condition, EventActivities`1<TInstance> thenActivities, EventActivities`1<TInstance> elseActivities);
    public sealed virtual bool IsStateTransitionEvent(State state);
    public sealed virtual void Bind(State`1<TInstance> state);
    public sealed virtual void Bind(BehaviorBuilder`1<TInstance> builder);
    private static Behavior`1<TInstance> GetBehavior(EventActivities`1<TInstance> activities);
}
public class Automatonymous.Binders.ConditionalExceptionActivityBinder`2 : object {
    private StateMachineAsyncExceptionCondition`2<TInstance, TException> _condition;
    private EventActivities`1<TInstance> _elseActivities;
    private Event _event;
    private EventActivities`1<TInstance> _thenActivities;
    public ConditionalExceptionActivityBinder`2(Event event, StateMachineExceptionCondition`2<TInstance, TException> condition, EventActivities`1<TInstance> thenActivities, EventActivities`1<TInstance> elseActivities);
    public ConditionalExceptionActivityBinder`2(Event event, StateMachineAsyncExceptionCondition`2<TInstance, TException> condition, EventActivities`1<TInstance> thenActivities, EventActivities`1<TInstance> elseActivities);
    public sealed virtual bool IsStateTransitionEvent(State state);
    public sealed virtual void Bind(State`1<TInstance> state);
    public sealed virtual void Bind(BehaviorBuilder`1<TInstance> builder);
    private static Behavior`1<TInstance> GetBehavior(EventActivities`1<TInstance> activities);
}
public class Automatonymous.Binders.ConditionalExceptionActivityBinder`3 : object {
    private StateMachineAsyncExceptionCondition`3<TInstance, TData, TException> _condition;
    private EventActivities`1<TInstance> _elseActivities;
    private Event _event;
    private EventActivities`1<TInstance> _thenActivities;
    public ConditionalExceptionActivityBinder`3(Event event, StateMachineExceptionCondition`3<TInstance, TData, TException> condition, EventActivities`1<TInstance> thenActivities, EventActivities`1<TInstance> elseActivities);
    public ConditionalExceptionActivityBinder`3(Event event, StateMachineAsyncExceptionCondition`3<TInstance, TData, TException> condition, EventActivities`1<TInstance> thenActivities, EventActivities`1<TInstance> elseActivities);
    public sealed virtual bool IsStateTransitionEvent(State state);
    public sealed virtual void Bind(State`1<TInstance> state);
    public sealed virtual void Bind(BehaviorBuilder`1<TInstance> builder);
    private static Behavior`1<TInstance> GetBehavior(EventActivities`1<TInstance> activities);
}
public class Automatonymous.Binders.DataEventActivityBinder`2 : object {
    private ActivityBinder`1[] _activities;
    private Event`1<TData> _event;
    private StateMachineEventFilter`2<TInstance, TData> _filter;
    private StateMachine`1<TInstance> _machine;
    private Event`1<TData> Automatonymous.Binders.EventActivityBinder<TInstance,TData>.Event { get; }
    private StateMachine`1<TInstance> Automatonymous.Binders.EventActivityBinder<TInstance,TData>.StateMachine { get; }
    public DataEventActivityBinder`2(StateMachine`1<TInstance> machine, Event`1<TData> event, ActivityBinder`1[] activities);
    public DataEventActivityBinder`2(StateMachine`1<TInstance> machine, Event`1<TData> event, StateMachineEventFilter`2<TInstance, TData> filter, ActivityBinder`1[] activities);
    private DataEventActivityBinder`2(StateMachine`1<TInstance> machine, Event`1<TData> event, StateMachineEventFilter`2<TInstance, TData> filter, ActivityBinder`1[] activities, ActivityBinder`1[] appendActivity);
    private sealed virtual override Event`1<TData> Automatonymous.Binders.EventActivityBinder<TInstance,TData>.get_Event();
    private sealed virtual override EventActivityBinder`2<TInstance, TData> Automatonymous.Binders.EventActivityBinder<TInstance,TData>.Add(Activity`1<TInstance> activity);
    private sealed virtual override EventActivityBinder`2<TInstance, TData> Automatonymous.Binders.EventActivityBinder<TInstance,TData>.Add(Activity`2<TInstance, TData> activity);
    private sealed virtual override EventActivityBinder`2<TInstance, TData> Automatonymous.Binders.EventActivityBinder<TInstance,TData>.Catch(Func`2<ExceptionActivityBinder`3<TInstance, TData, T>, ExceptionActivityBinder`3<TInstance, TData, T>> activityCallback);
    private sealed virtual override EventActivityBinder`2<TInstance, TData> Automatonymous.Binders.EventActivityBinder<TInstance,TData>.If(StateMachineCondition`2<TInstance, TData> condition, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> activityCallback);
    private sealed virtual override EventActivityBinder`2<TInstance, TData> Automatonymous.Binders.EventActivityBinder<TInstance,TData>.IfAsync(StateMachineAsyncCondition`2<TInstance, TData> condition, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> activityCallback);
    public sealed virtual EventActivityBinder`2<TInstance, TData> IfElse(StateMachineCondition`2<TInstance, TData> condition, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> thenActivityCallback, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> elseActivityCallback);
    public sealed virtual EventActivityBinder`2<TInstance, TData> IfElseAsync(StateMachineAsyncCondition`2<TInstance, TData> condition, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> thenActivityCallback, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> elseActivityCallback);
    private sealed virtual override StateMachine`1<TInstance> Automatonymous.Binders.EventActivityBinder<TInstance,TData>.get_StateMachine();
    public sealed virtual IEnumerable`1<ActivityBinder`1<TInstance>> GetStateActivityBinders();
    private EventActivityBinder`2<TInstance, TData> GetBinder(Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> activityCallback);
    private ActivityBinder`1<TInstance> CreateStateActivityBinder(Activity`2<TInstance, TData> activity);
    private ActivityBinder`1<TInstance> CreateConditionalActivityBinder();
    [CompilerGeneratedAttribute]
private bool <CreateConditionalActivityBinder>b__21_0(BehaviorContext`2<TInstance, TData> context);
}
public interface Automatonymous.Binders.EventActivities`1 {
    public abstract virtual IEnumerable`1<ActivityBinder`1<TInstance>> GetStateActivityBinders();
}
public interface Automatonymous.Binders.EventActivityBinder`1 {
    public StateMachine`1<TInstance> StateMachine { get; }
    public Event Event { get; }
    public abstract virtual StateMachine`1<TInstance> get_StateMachine();
    public abstract virtual Event get_Event();
    public abstract virtual EventActivityBinder`1<TInstance> Add(Activity`1<TInstance> activity);
    public abstract virtual EventActivityBinder`1<TInstance> Catch(Func`2<ExceptionActivityBinder`2<TInstance, T>, ExceptionActivityBinder`2<TInstance, T>> activityCallback);
    public abstract virtual EventActivityBinder`1<TInstance> If(StateMachineCondition`1<TInstance> condition, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public abstract virtual EventActivityBinder`1<TInstance> IfAsync(StateMachineAsyncCondition`1<TInstance> condition, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public abstract virtual EventActivityBinder`1<TInstance> IfElse(StateMachineCondition`1<TInstance> condition, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> thenActivityCallback, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> elseActivityCallback);
    public abstract virtual EventActivityBinder`1<TInstance> IfElseAsync(StateMachineAsyncCondition`1<TInstance> condition, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> thenActivityCallback, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> elseActivityCallback);
}
public interface Automatonymous.Binders.EventActivityBinder`2 {
    public StateMachine`1<TInstance> StateMachine { get; }
    public Event`1<TData> Event { get; }
    public abstract virtual StateMachine`1<TInstance> get_StateMachine();
    public abstract virtual Event`1<TData> get_Event();
    public abstract virtual EventActivityBinder`2<TInstance, TData> Add(Activity`1<TInstance> activity);
    public abstract virtual EventActivityBinder`2<TInstance, TData> Add(Activity`2<TInstance, TData> activity);
    public abstract virtual EventActivityBinder`2<TInstance, TData> Catch(Func`2<ExceptionActivityBinder`3<TInstance, TData, T>, ExceptionActivityBinder`3<TInstance, TData, T>> activityCallback);
    public abstract virtual EventActivityBinder`2<TInstance, TData> If(StateMachineCondition`2<TInstance, TData> condition, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> activityCallback);
    public abstract virtual EventActivityBinder`2<TInstance, TData> IfAsync(StateMachineAsyncCondition`2<TInstance, TData> condition, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> activityCallback);
    public abstract virtual EventActivityBinder`2<TInstance, TData> IfElse(StateMachineCondition`2<TInstance, TData> condition, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> thenActivityCallback, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> elseActivityCallback);
    public abstract virtual EventActivityBinder`2<TInstance, TData> IfElseAsync(StateMachineAsyncCondition`2<TInstance, TData> condition, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> thenActivityCallback, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> elseActivityCallback);
}
public interface Automatonymous.Binders.ExceptionActivityBinder`2 {
    public StateMachine`1<TInstance> StateMachine { get; }
    public Event Event { get; }
    public abstract virtual StateMachine`1<TInstance> get_StateMachine();
    public abstract virtual Event get_Event();
    public abstract virtual ExceptionActivityBinder`2<TInstance, TException> Add(Activity`1<TInstance> activity);
    public abstract virtual ExceptionActivityBinder`2<TInstance, TException> Catch(Func`2<ExceptionActivityBinder`2<TInstance, T>, ExceptionActivityBinder`2<TInstance, T>> activityCallback);
    public abstract virtual ExceptionActivityBinder`2<TInstance, TException> If(StateMachineExceptionCondition`2<TInstance, TException> condition, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> activityCallback);
    public abstract virtual ExceptionActivityBinder`2<TInstance, TException> IfAsync(StateMachineAsyncExceptionCondition`2<TInstance, TException> condition, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> activityCallback);
    public abstract virtual ExceptionActivityBinder`2<TInstance, TException> IfElse(StateMachineExceptionCondition`2<TInstance, TException> condition, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> thenActivityCallback, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> elseActivityCallback);
    public abstract virtual ExceptionActivityBinder`2<TInstance, TException> IfElseAsync(StateMachineAsyncExceptionCondition`2<TInstance, TException> condition, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> thenActivityCallback, Func`2<ExceptionActivityBinder`2<TInstance, TException>, ExceptionActivityBinder`2<TInstance, TException>> elseActivityCallback);
}
public interface Automatonymous.Binders.ExceptionActivityBinder`3 {
    public StateMachine`1<TInstance> StateMachine { get; }
    public Event`1<TData> Event { get; }
    public abstract virtual StateMachine`1<TInstance> get_StateMachine();
    public abstract virtual Event`1<TData> get_Event();
    public abstract virtual ExceptionActivityBinder`3<TInstance, TData, TException> Add(Activity`1<TInstance> activity);
    public abstract virtual ExceptionActivityBinder`3<TInstance, TData, TException> Add(Activity`2<TInstance, TData> activity);
    public abstract virtual ExceptionActivityBinder`3<TInstance, TData, TException> Catch(Func`2<ExceptionActivityBinder`3<TInstance, TData, T>, ExceptionActivityBinder`3<TInstance, TData, T>> activityCallback);
    public abstract virtual ExceptionActivityBinder`3<TInstance, TData, TException> If(StateMachineExceptionCondition`3<TInstance, TData, TException> condition, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> activityCallback);
    public abstract virtual ExceptionActivityBinder`3<TInstance, TData, TException> IfAsync(StateMachineAsyncExceptionCondition`3<TInstance, TData, TException> condition, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> activityCallback);
    public abstract virtual ExceptionActivityBinder`3<TInstance, TData, TException> IfElse(StateMachineExceptionCondition`3<TInstance, TData, TException> condition, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> thenActivityCallback, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> elseActivityCallback);
    public abstract virtual ExceptionActivityBinder`3<TInstance, TData, TException> IfElseAsync(StateMachineAsyncExceptionCondition`3<TInstance, TData, TException> condition, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> thenActivityCallback, Func`2<ExceptionActivityBinder`3<TInstance, TData, TException>, ExceptionActivityBinder`3<TInstance, TData, TException>> elseActivityCallback);
}
public class Automatonymous.Binders.ExecuteActivityBinder`1 : object {
    private Activity`1<TInstance> _activity;
    private Event _event;
    public ExecuteActivityBinder`1(Event event, Activity`1<TInstance> activity);
    public sealed virtual bool IsStateTransitionEvent(State state);
    public sealed virtual void Bind(State`1<TInstance> state);
    public sealed virtual void Bind(BehaviorBuilder`1<TInstance> builder);
}
public class Automatonymous.Binders.IgnoreEventActivityBinder`1 : object {
    private Event _event;
    public IgnoreEventActivityBinder`1(Event event);
    public sealed virtual bool IsStateTransitionEvent(State state);
    public sealed virtual void Bind(State`1<TInstance> state);
    public sealed virtual void Bind(BehaviorBuilder`1<TInstance> builder);
}
public class Automatonymous.Binders.IgnoreEventActivityBinder`2 : object {
    private Event`1<TData> _event;
    private StateMachineEventFilter`2<TInstance, TData> _filter;
    public IgnoreEventActivityBinder`2(Event`1<TData> event, StateMachineEventFilter`2<TInstance, TData> filter);
    public sealed virtual bool IsStateTransitionEvent(State state);
    public sealed virtual void Bind(State`1<TInstance> state);
    public sealed virtual void Bind(BehaviorBuilder`1<TInstance> builder);
}
public class Automatonymous.Binders.TriggerEventActivityBinder`1 : object {
    private ActivityBinder`1[] _activities;
    private Event _event;
    private StateMachineEventFilter`1<TInstance> _filter;
    private StateMachine`1<TInstance> _machine;
    private Event Automatonymous.Binders.EventActivityBinder<TInstance>.Event { get; }
    private StateMachine`1<TInstance> Automatonymous.Binders.EventActivityBinder<TInstance>.StateMachine { get; }
    public TriggerEventActivityBinder`1(StateMachine`1<TInstance> machine, Event event, ActivityBinder`1[] activities);
    public TriggerEventActivityBinder`1(StateMachine`1<TInstance> machine, Event event, StateMachineEventFilter`1<TInstance> filter, ActivityBinder`1[] activities);
    private TriggerEventActivityBinder`1(StateMachine`1<TInstance> machine, Event event, StateMachineEventFilter`1<TInstance> filter, ActivityBinder`1[] activities, ActivityBinder`1[] appendActivity);
    private sealed virtual override Event Automatonymous.Binders.EventActivityBinder<TInstance>.get_Event();
    private sealed virtual override EventActivityBinder`1<TInstance> Automatonymous.Binders.EventActivityBinder<TInstance>.Add(Activity`1<TInstance> activity);
    private sealed virtual override EventActivityBinder`1<TInstance> Automatonymous.Binders.EventActivityBinder<TInstance>.Catch(Func`2<ExceptionActivityBinder`2<TInstance, T>, ExceptionActivityBinder`2<TInstance, T>> activityCallback);
    private sealed virtual override EventActivityBinder`1<TInstance> Automatonymous.Binders.EventActivityBinder<TInstance>.If(StateMachineCondition`1<TInstance> condition, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    private sealed virtual override EventActivityBinder`1<TInstance> Automatonymous.Binders.EventActivityBinder<TInstance>.IfAsync(StateMachineAsyncCondition`1<TInstance> condition, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public sealed virtual EventActivityBinder`1<TInstance> IfElse(StateMachineCondition`1<TInstance> condition, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> thenActivityCallback, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> elseActivityCallback);
    public sealed virtual EventActivityBinder`1<TInstance> IfElseAsync(StateMachineAsyncCondition`1<TInstance> condition, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> thenActivityCallback, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> elseActivityCallback);
    private sealed virtual override StateMachine`1<TInstance> Automatonymous.Binders.EventActivityBinder<TInstance>.get_StateMachine();
    public sealed virtual IEnumerable`1<ActivityBinder`1<TInstance>> GetStateActivityBinders();
    private EventActivityBinder`1<TInstance> GetBinder(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    private ActivityBinder`1<TInstance> CreateConditionalActivityBinder();
    [CompilerGeneratedAttribute]
private bool <CreateConditionalActivityBinder>b__19_0(BehaviorContext`1<TInstance> context);
}
internal class Automatonymous.Builder.InternalStateMachineEventActivitiesBuilder`1 : object {
    private List`1<EventActivities`1<TInstance>> _activities;
    private Action`1<EventActivities`1[]> _committer;
    private AutomatonymousStateMachine`1<TInstance> _machine;
    private StateMachineModifier`1<TInstance> _modifier;
    [CompilerGeneratedAttribute]
private bool <IsCommitted>k__BackingField;
    public bool IsCommitted { get; private set; }
    public State Initial { get; }
    public State Final { get; }
    public InternalStateMachineEventActivitiesBuilder`1(AutomatonymousStateMachine`1<TInstance> machine, StateMachineModifier`1<TInstance> modifier, Action`1<EventActivities`1[]> committer);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCommitted();
    [CompilerGeneratedAttribute]
private void set_IsCommitted(bool value);
    public sealed virtual State get_Initial();
    public sealed virtual State get_Final();
    public sealed virtual StateMachineModifier`1<TInstance> CommitActivities();
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> When(Event event, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> configure);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> When(Event event, StateMachineEventFilter`1<TInstance> filter, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> configure);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> When(Event`1<TData> event, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> configure);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> When(Event`1<TData> event, StateMachineEventFilter`2<TInstance, TData> filter, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> configure);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> Ignore(Event event);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> Ignore(Event`1<TData> event);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> Ignore(Event`1<TData> event, StateMachineEventFilter`2<TInstance, TData> filter);
    public sealed virtual void Apply();
    public sealed virtual StateMachineModifier`1<TInstance> AfterLeave(State state, Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> AfterLeaveAny(Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> BeforeEnter(State state, Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> BeforeEnterAny(Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, Event[] events);
    public sealed virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    public sealed virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, Event[] events);
    public sealed virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> During(State[] states);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> DuringAny();
    public sealed virtual StateMachineModifier`1<TInstance> Event(string name, Event& event);
    public sealed virtual StateMachineModifier`1<TInstance> Event(string name, Event`1& event);
    public sealed virtual StateMachineModifier`1<TInstance> Event(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, Event`1<T>>> eventPropertyExpression);
    public sealed virtual StateMachineModifier`1<TInstance> Finally(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> Initially();
    public sealed virtual StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, State>> instanceStateProperty);
    public sealed virtual StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, string>> instanceStateProperty);
    public sealed virtual StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, int>> instanceStateProperty, State[] states);
    public sealed virtual StateMachineModifier`1<TInstance> Name(string machineName);
    public sealed virtual StateMachineModifier`1<TInstance> OnUnhandledEvent(UnhandledEventCallback`1<TInstance> callback);
    public sealed virtual StateMachineModifier`1<TInstance> State(string name, State`1& state);
    public sealed virtual StateMachineModifier`1<TInstance> State(string name, State& state);
    public sealed virtual StateMachineModifier`1<TInstance> State(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, State>> statePropertyExpression);
    public sealed virtual StateMachineModifier`1<TInstance> SubState(string name, State superState, State`1& subState);
    public sealed virtual StateMachineModifier`1<TInstance> SubState(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, State>> statePropertyExpression, State superState);
    public sealed virtual StateMachineModifier`1<TInstance> WhenEnter(State state, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> WhenEnterAny(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> WhenLeave(State state, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> WhenLeaveAny(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
}
internal class Automatonymous.Builder.InternalStateMachineModifier`1 : object {
    private List`1<StateMachineEventActivitiesBuilder`1<TInstance>> _activityBuilders;
    private AutomatonymousStateMachine`1<TInstance> _machine;
    public State Initial { get; }
    public State Final { get; }
    public InternalStateMachineModifier`1(AutomatonymousStateMachine`1<TInstance> machine);
    public sealed virtual State get_Initial();
    public sealed virtual State get_Final();
    public sealed virtual void Apply();
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> During(State[] states);
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> DuringAny();
    public sealed virtual StateMachineEventActivitiesBuilder`1<TInstance> Initially();
    public sealed virtual StateMachineModifier`1<TInstance> AfterLeave(State state, Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> AfterLeaveAny(Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> BeforeEnter(State state, Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> BeforeEnterAny(Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, Event[] events);
    public sealed virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    public sealed virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, Event[] events);
    public sealed virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    public sealed virtual StateMachineModifier`1<TInstance> Event(string name, Event& event);
    public sealed virtual StateMachineModifier`1<TInstance> Event(string name, Event`1& event);
    public sealed virtual StateMachineModifier`1<TInstance> Event(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, Event`1<T>>> eventPropertyExpression);
    public sealed virtual StateMachineModifier`1<TInstance> Finally(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, State>> instanceStateProperty);
    public sealed virtual StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, string>> instanceStateProperty);
    public sealed virtual StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, int>> instanceStateProperty, State[] states);
    public sealed virtual StateMachineModifier`1<TInstance> Name(string machineName);
    public sealed virtual StateMachineModifier`1<TInstance> OnUnhandledEvent(UnhandledEventCallback`1<TInstance> callback);
    public sealed virtual StateMachineModifier`1<TInstance> State(string name, State`1& state);
    public sealed virtual StateMachineModifier`1<TInstance> State(string name, State& state);
    public sealed virtual StateMachineModifier`1<TInstance> State(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, State>> statePropertyExpression);
    public sealed virtual StateMachineModifier`1<TInstance> SubState(string name, State superState, State`1& subState);
    public sealed virtual StateMachineModifier`1<TInstance> SubState(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, State>> statePropertyExpression, State superState);
    public sealed virtual StateMachineModifier`1<TInstance> WhenEnter(State state, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> WhenEnterAny(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> WhenLeave(State state, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public sealed virtual StateMachineModifier`1<TInstance> WhenLeaveAny(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, int>> instanceStateProperty, String[] stateNames);
    [CompilerGeneratedAttribute]
private void <DuringAny>b__9_0(EventActivities`1[] activities);
    [CompilerGeneratedAttribute]
private void <Initially>b__10_0(EventActivities`1[] activities);
    [CompilerGeneratedAttribute]
private State`1<TInstance> <InstanceState>b__37_0(string name);
}
public interface Automatonymous.Builder.StateMachineEventActivitiesBuilder`1 {
    public bool IsCommitted { get; }
    public abstract virtual bool get_IsCommitted();
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> When(Event event, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> configure);
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> When(Event event, StateMachineEventFilter`1<TInstance> filter, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> configure);
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> When(Event`1<TData> event, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> configure);
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> When(Event`1<TData> event, StateMachineEventFilter`2<TInstance, TData> filter, Func`2<EventActivityBinder`2<TInstance, TData>, EventActivityBinder`2<TInstance, TData>> configure);
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> Ignore(Event event);
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> Ignore(Event`1<TData> event);
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> Ignore(Event`1<TData> event, StateMachineEventFilter`2<TInstance, TData> filter);
    public abstract virtual StateMachineModifier`1<TInstance> CommitActivities();
}
public interface Automatonymous.Builder.StateMachineModifier`1 {
    public State Initial { get; }
    public State Final { get; }
    public abstract virtual State get_Initial();
    public abstract virtual State get_Final();
    public abstract virtual StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, State>> instanceStateProperty);
    public abstract virtual StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, string>> instanceStateProperty);
    public abstract virtual StateMachineModifier`1<TInstance> InstanceState(Expression`1<Func`2<TInstance, int>> instanceStateProperty, State[] states);
    public abstract virtual StateMachineModifier`1<TInstance> Name(string machineName);
    public abstract virtual StateMachineModifier`1<TInstance> Event(string name, Event& event);
    public abstract virtual StateMachineModifier`1<TInstance> Event(string name, Event`1& event);
    public abstract virtual StateMachineModifier`1<TInstance> Event(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, Event`1<T>>> eventPropertyExpression);
    public abstract virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, Event[] events);
    public abstract virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, CompositeEventStatus>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    public abstract virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, Event[] events);
    public abstract virtual StateMachineModifier`1<TInstance> CompositeEvent(Event event, Expression`1<Func`2<TInstance, int>> trackingPropertyExpression, CompositeEventOptions options, Event[] events);
    public abstract virtual StateMachineModifier`1<TInstance> State(string name, State`1& state);
    public abstract virtual StateMachineModifier`1<TInstance> State(string name, State& state);
    public abstract virtual StateMachineModifier`1<TInstance> State(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, State>> statePropertyExpression);
    public abstract virtual StateMachineModifier`1<TInstance> SubState(string name, State superState, State`1& subState);
    public abstract virtual StateMachineModifier`1<TInstance> SubState(Expression`1<Func`1<TProperty>> propertyExpression, Expression`1<Func`2<TProperty, State>> statePropertyExpression, State superState);
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> During(State[] states);
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> Initially();
    public abstract virtual StateMachineEventActivitiesBuilder`1<TInstance> DuringAny();
    public abstract virtual StateMachineModifier`1<TInstance> Finally(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public abstract virtual StateMachineModifier`1<TInstance> WhenEnter(State state, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public abstract virtual StateMachineModifier`1<TInstance> WhenEnterAny(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public abstract virtual StateMachineModifier`1<TInstance> WhenLeaveAny(Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public abstract virtual StateMachineModifier`1<TInstance> BeforeEnterAny(Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public abstract virtual StateMachineModifier`1<TInstance> AfterLeaveAny(Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public abstract virtual StateMachineModifier`1<TInstance> WhenLeave(State state, Func`2<EventActivityBinder`1<TInstance>, EventActivityBinder`1<TInstance>> activityCallback);
    public abstract virtual StateMachineModifier`1<TInstance> BeforeEnter(State state, Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public abstract virtual StateMachineModifier`1<TInstance> AfterLeave(State state, Func`2<EventActivityBinder`2<TInstance, State>, EventActivityBinder`2<TInstance, State>> activityCallback);
    public abstract virtual StateMachineModifier`1<TInstance> OnUnhandledEvent(UnhandledEventCallback`1<TInstance> callback);
    public abstract virtual void Apply();
}
[FlagsAttribute]
public enum Automatonymous.CompositeEventOptions : Enum {
    public int value__;
    public static CompositeEventOptions None;
    public static CompositeEventOptions IncludeInitial;
}
[DebuggerDisplayAttribute("{Status}")]
public class Automatonymous.CompositeEventStatus : ValueType {
    private int _bits;
    [EditorBrowsableAttribute("1")]
public string Status { get; }
    public int Bits { get; }
    public CompositeEventStatus(int bits);
    public string get_Status();
    public int get_Bits();
    public sealed virtual int CompareTo(CompositeEventStatus other);
    public bool Equals(CompositeEventStatus other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Set(int flag);
}
public class Automatonymous.Contexts.BehaviorContextProxy`1 : ProxyPipeContext {
    private BehaviorContext`1<TInstance> _context;
    [CompilerGeneratedAttribute]
private Event <Event>k__BackingField;
    public Event Event { get; }
    public TInstance Instance { get; }
    public BehaviorContextProxy`1(BehaviorContext`1<TInstance> context, Event event);
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<TData> event, TData data);
    [CompilerGeneratedAttribute]
public sealed virtual Event get_Event();
    public sealed virtual TInstance get_Instance();
    public sealed virtual BehaviorContext`1<TInstance> GetProxy(Event event);
    public sealed virtual BehaviorContext`2<TInstance, T> GetProxy(Event`1<T> event, T data);
}
public class Automatonymous.Contexts.BehaviorContextProxy`2 : ProxyPipeContext {
    private BehaviorContext`1<TInstance> _context;
    private Event`1<TData> _event;
    [CompilerGeneratedAttribute]
private TData <Data>k__BackingField;
    public TData Data { get; }
    private Event Automatonymous.EventContext<TInstance>.Event { get; }
    private Event`1<TData> Automatonymous.EventContext<TInstance,TData>.Event { get; }
    public TInstance Instance { get; }
    public BehaviorContextProxy`2(BehaviorContext`1<TInstance> context, Event`1<TData> event, TData data);
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<TData1> event, TData1 data);
    [CompilerGeneratedAttribute]
public sealed virtual TData get_Data();
    private sealed virtual override Event Automatonymous.EventContext<TInstance>.get_Event();
    private sealed virtual override Event`1<TData> Automatonymous.EventContext<TInstance,TData>.get_Event();
    public sealed virtual TInstance get_Instance();
    public sealed virtual BehaviorContext`1<TInstance> GetProxy(Event event);
    public sealed virtual BehaviorContext`2<TInstance, T> GetProxy(Event`1<T> event, T data);
}
public class Automatonymous.Contexts.BehaviorExceptionContextProxy`2 : ProxyPipeContext {
    private BehaviorContext`1<TInstance> _context;
    private TException _exception;
    public TInstance Instance { get; }
    public Event Event { get; }
    public TException Exception { get; }
    public BehaviorExceptionContextProxy`2(BehaviorContext`1<TInstance> context, TException exception);
    public sealed virtual TInstance get_Instance();
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<TData> event, TData data);
    public sealed virtual Event get_Event();
    public sealed virtual BehaviorContext`1<TInstance> GetProxy(Event event);
    private sealed virtual override BehaviorExceptionContext`3<TInstance, T, TException> Automatonymous.BehaviorExceptionContext<TInstance,TException>.GetProxy(Event`1<T> event, T data);
    public sealed virtual TException get_Exception();
    public sealed virtual BehaviorContext`2<TInstance, T> GetProxy(Event`1<T> event, T data);
}
public class Automatonymous.Contexts.BehaviorExceptionContextProxy`3 : ProxyPipeContext {
    private BehaviorContext`2<TInstance, TData> _context;
    private TException _exception;
    public TInstance Instance { get; }
    public Event Event { get; }
    public TData Data { get; }
    public TException Exception { get; }
    private Event`1<TData> Automatonymous.EventContext<TInstance,TData>.Event { get; }
    public BehaviorExceptionContextProxy`3(BehaviorContext`2<TInstance, TData> context, TException exception);
    public sealed virtual TInstance get_Instance();
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<TData1> event, TData1 data);
    public sealed virtual Event get_Event();
    public sealed virtual TData get_Data();
    public sealed virtual BehaviorContext`1<TInstance> GetProxy(Event event);
    private sealed virtual override BehaviorExceptionContext`3<TInstance, T, TException> Automatonymous.BehaviorExceptionContext<TInstance,TException>.GetProxy(Event`1<T> event, T data);
    private sealed virtual override BehaviorExceptionContext`3<TInstance, T, TException> Automatonymous.BehaviorExceptionContext<TInstance,TData,TException>.GetProxy(Event`1<T> event, T data);
    public sealed virtual TException get_Exception();
    public sealed virtual BehaviorContext`2<TInstance, T> GetProxy(Event`1<T> event, T data);
    private sealed virtual override Event`1<TData> Automatonymous.EventContext<TInstance,TData>.get_Event();
}
public class Automatonymous.Contexts.EventBehaviorContext`1 : ProxyPipeContext {
    private InstanceContext`1<TInstance> _context;
    private EventContext`1<TInstance> _eventContext;
    [CompilerGeneratedAttribute]
private Event <Event>k__BackingField;
    public Event Event { get; }
    public TInstance Instance { get; }
    public EventBehaviorContext`1(EventContext`1<TInstance> context);
    public EventBehaviorContext`1(InstanceContext`1<TInstance> context);
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<TData> event, TData data);
    [CompilerGeneratedAttribute]
public sealed virtual Event get_Event();
    public sealed virtual TInstance get_Instance();
    public sealed virtual BehaviorContext`1<TInstance> GetProxy(Event event);
    public sealed virtual BehaviorContext`2<TInstance, T> GetProxy(Event`1<T> event, T data);
}
public class Automatonymous.Contexts.EventBehaviorContext`2 : EventBehaviorContext`1<TInstance> {
    private EventContext`2<TInstance, TData> _context;
    private Event`1<TData> Automatonymous.EventContext<TInstance,TData>.Event { get; }
    private TData Automatonymous.EventContext<TInstance,TData>.Data { get; }
    public EventBehaviorContext`2(EventContext`2<TInstance, TData> context);
    private sealed virtual override Event`1<TData> Automatonymous.EventContext<TInstance,TData>.get_Event();
    private sealed virtual override TData Automatonymous.EventContext<TInstance,TData>.get_Data();
}
public class Automatonymous.Contexts.EventContextProxy`1 : ProxyPipeContext {
    private EventContext`1<TInstance> _context;
    [CompilerGeneratedAttribute]
private Event <Event>k__BackingField;
    public Event Event { get; }
    public TInstance Instance { get; }
    public EventContextProxy`1(EventContext`1<TInstance> context, Event event);
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<T> event, T data);
    [CompilerGeneratedAttribute]
public sealed virtual Event get_Event();
    public sealed virtual TInstance get_Instance();
}
public class Automatonymous.Contexts.EventContextProxy`2 : ProxyPipeContext {
    private EventContext`1<TInstance> _context;
    private Event`1<TData> _event;
    [CompilerGeneratedAttribute]
private TData <Data>k__BackingField;
    public TData Data { get; }
    private Event Automatonymous.EventContext<TInstance>.Event { get; }
    private Event`1<TData> Automatonymous.EventContext<TInstance,TData>.Event { get; }
    public TInstance Instance { get; }
    public EventContextProxy`2(EventContext`1<TInstance> context, Event`1<TData> event, TData data);
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<T> event, T data);
    [CompilerGeneratedAttribute]
public sealed virtual TData get_Data();
    private sealed virtual override Event Automatonymous.EventContext<TInstance>.get_Event();
    private sealed virtual override Event`1<TData> Automatonymous.EventContext<TInstance,TData>.get_Event();
    public sealed virtual TInstance get_Instance();
}
public class Automatonymous.Contexts.StateMachineEventContext`1 : BasePipeContext {
    private Event _event;
    private TInstance _instance;
    private StateMachine`1<TInstance> _machine;
    private Event Automatonymous.EventContext<TInstance>.Event { get; }
    private TInstance Automatonymous.InstanceContext<TInstance>.Instance { get; }
    public StateMachineEventContext`1(StateMachine`1<TInstance> machine, TInstance instance, Event event, CancellationToken cancellationToken);
    public StateMachineEventContext`1(StateMachine`1<TInstance> machine, TInstance instance, Event event, CancellationToken cancellationToken, Object[] payloads);
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<TData> event, TData data);
    private sealed virtual override Event Automatonymous.EventContext<TInstance>.get_Event();
    private sealed virtual override TInstance Automatonymous.InstanceContext<TInstance>.get_Instance();
}
public class Automatonymous.Contexts.StateMachineEventContext`2 : StateMachineEventContext`1<TInstance> {
    private TData _data;
    private Event`1<TData> _event;
    private TData Automatonymous.EventContext<TInstance,TData>.Data { get; }
    private Event`1<TData> Automatonymous.EventContext<TInstance,TData>.Event { get; }
    public StateMachineEventContext`2(StateMachine`1<TInstance> machine, TInstance instance, Event`1<TData> event, TData data, CancellationToken cancellationToken);
    public StateMachineEventContext`2(StateMachine`1<TInstance> machine, TInstance instance, Event`1<TData> event, TData data, CancellationToken cancellationToken, Object[] payloads);
    private sealed virtual override TData Automatonymous.EventContext<TInstance,TData>.get_Data();
    private sealed virtual override Event`1<TData> Automatonymous.EventContext<TInstance,TData>.get_Event();
}
public class Automatonymous.Contexts.StateMachineEventContextProxy`2 : ProxyPipeContext {
    private TData _data;
    private Event`1<TData> _event;
    private TInstance _instance;
    private StateMachine`1<TInstance> _machine;
    private Event Automatonymous.EventContext<TInstance>.Event { get; }
    private TInstance Automatonymous.InstanceContext<TInstance>.Instance { get; }
    private TData Automatonymous.EventContext<TInstance,TData>.Data { get; }
    private Event`1<TData> Automatonymous.EventContext<TInstance,TData>.Event { get; }
    public StateMachineEventContextProxy`2(PipeContext context, StateMachine`1<TInstance> machine, TInstance instance, Event`1<TData> event, TData data);
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<T> event, T data);
    private sealed virtual override Event Automatonymous.EventContext<TInstance>.get_Event();
    private sealed virtual override TInstance Automatonymous.InstanceContext<TInstance>.get_Instance();
    private sealed virtual override TData Automatonymous.EventContext<TInstance,TData>.get_Data();
    private sealed virtual override Event`1<TData> Automatonymous.EventContext<TInstance,TData>.get_Event();
}
public class Automatonymous.Contexts.StateMachineInstanceContext`1 : BasePipeContext {
    [CompilerGeneratedAttribute]
private TInstance <Instance>k__BackingField;
    public TInstance Instance { get; }
    public StateMachineInstanceContext`1(TInstance instance);
    public StateMachineInstanceContext`1(TInstance instance, Object[] payloads);
    public StateMachineInstanceContext`1(TInstance instance, CancellationToken cancellationToken);
    public StateMachineInstanceContext`1(TInstance instance, CancellationToken cancellationToken, Object[] payloads);
    [CompilerGeneratedAttribute]
public sealed virtual TInstance get_Instance();
}
public class Automatonymous.Contexts.StateMachineInstanceContextProxy`1 : ProxyPipeContext {
    [CompilerGeneratedAttribute]
private TInstance <Instance>k__BackingField;
    public TInstance Instance { get; }
    public StateMachineInstanceContextProxy`1(PipeContext context, TInstance instance);
    [CompilerGeneratedAttribute]
public sealed virtual TInstance get_Instance();
}
public class Automatonymous.Contexts.StateUnhandledEventContext`1 : ProxyPipeContext {
    private EventContext`1<TInstance> _context;
    private StateMachine`1<TInstance> _machine;
    private State _state;
    public State CurrentState { get; }
    public TInstance Instance { get; }
    public Event Event { get; }
    public StateUnhandledEventContext`1(EventContext`1<TInstance> context, State state, StateMachine`1<TInstance> machine);
    public sealed virtual State get_CurrentState();
    public sealed virtual TInstance get_Instance();
    public sealed virtual Event get_Event();
    public sealed virtual Task Raise(Event event);
    public sealed virtual Task Raise(Event`1<TData> event, TData data);
    public sealed virtual Task Ignore();
    public sealed virtual Task Throw();
}
public interface Automatonymous.Event {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Automatonymous.Event`1 {
}
public interface Automatonymous.EventContext`1 {
    public Event Event { get; }
    public abstract virtual Event get_Event();
    public abstract virtual Task Raise(Event event);
    public abstract virtual Task Raise(Event`1<TData> event, TData data);
}
public interface Automatonymous.EventContext`2 {
    public Event`1<TData> Event { get; }
    public TData Data { get; }
    public abstract virtual Event`1<TData> get_Event();
    public abstract virtual TData get_Data();
}
public class Automatonymous.EventExecutionException : AutomatonymousException {
    public EventExecutionException(string message);
    public EventExecutionException(string message, Exception innerException);
    protected EventExecutionException(SerializationInfo info, StreamingContext context);
}
public interface Automatonymous.EventLift`1 {
    public abstract virtual Task Raise(TInstance instance, CancellationToken cancellationToken);
}
public interface Automatonymous.EventLift`2 {
    public abstract virtual Task Raise(TInstance instance, TData data, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Automatonymous.EventLiftExtensions : object {
    [ExtensionAttribute]
public static EventLift`1<TInstance> CreateEventLift(StateMachine`1<TInstance> stateMachine, Event event);
    [ExtensionAttribute]
public static EventLift`2<TInstance, TData> CreateEventLift(StateMachine`1<TInstance> stateMachine, Event`1<TData> event);
    [ExtensionAttribute]
public static Task Raise(EventLift`1<TInstance> lift, TInstance instance, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Raise(EventLift`2<TInstance, TData> lift, TInstance instance, TData value, CancellationToken cancellationToken);
}
public interface Automatonymous.EventObserver`1 {
    public abstract virtual Task PreExecute(EventContext`1<TInstance> context);
    public abstract virtual Task PreExecute(EventContext`2<TInstance, T> context);
    public abstract virtual Task PostExecute(EventContext`1<TInstance> context);
    public abstract virtual Task PostExecute(EventContext`2<TInstance, T> context);
    public abstract virtual Task ExecuteFault(EventContext`1<TInstance> context, Exception exception);
    public abstract virtual Task ExecuteFault(EventContext`2<TInstance, T> context, Exception exception);
}
public class Automatonymous.Events.DataEvent`1 : TriggerEvent {
    public DataEvent`1(string name);
    public virtual void Accept(StateMachineVisitor visitor);
    public virtual void Probe(ProbeContext context);
    public sealed virtual bool Equals(DataEvent`1<TData> other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Automatonymous.Events.StateMachineEvent`1 : object {
    [CompilerGeneratedAttribute]
private bool <IsTransitionEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Event <Event>k__BackingField;
    public bool IsTransitionEvent { get; }
    public Event Event { get; }
    public StateMachineEvent`1(Event event, bool isTransitionEvent);
    [CompilerGeneratedAttribute]
public bool get_IsTransitionEvent();
    [CompilerGeneratedAttribute]
public Event get_Event();
}
public class Automatonymous.Events.TriggerEvent : object {
    private string _name;
    public string Name { get; }
    public TriggerEvent(string name);
    public sealed virtual string get_Name();
    public virtual void Accept(StateMachineVisitor visitor);
    public virtual void Probe(ProbeContext context);
    public sealed virtual int CompareTo(Event other);
    public bool Equals(TriggerEvent other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Automatonymous.Graphing.Edge : object {
    [CompilerGeneratedAttribute]
private Vertex <To>k__BackingField;
    [CompilerGeneratedAttribute]
private Vertex <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public Vertex To { get; }
    public Vertex From { get; }
    private string Title { get; }
    public Edge(Vertex from, Vertex to, string title);
    [CompilerGeneratedAttribute]
public Vertex get_To();
    [CompilerGeneratedAttribute]
public Vertex get_From();
    [CompilerGeneratedAttribute]
private string get_Title();
    public sealed virtual bool Equals(Edge other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Automatonymous.Graphing.GraphStateMachineExtensions : object {
    [ExtensionAttribute]
public static StateMachineGraph GetGraph(StateMachine`1<TInstance> machine);
}
public class Automatonymous.Graphing.GraphStateMachineVisitor`1 : object {
    private HashSet`1<Edge> _edges;
    private Dictionary`2<Event, Vertex> _events;
    private Dictionary`2<State, Vertex> _states;
    private Vertex _currentEvent;
    private Vertex _currentState;
    public StateMachineGraph Graph { get; }
    public StateMachineGraph get_Graph();
    public sealed virtual void Visit(State state, Action`1<State> next);
    public sealed virtual void Visit(Event event, Action`1<Event> next);
    public sealed virtual void Visit(Event`1<TData> event, Action`1<Event`1<TData>> next);
    public sealed virtual void Visit(Activity activity);
    public sealed virtual void Visit(Behavior`1<T> behavior);
    public sealed virtual void Visit(Behavior`1<T> behavior, Action`1<Behavior`1<T>> next);
    public sealed virtual void Visit(Behavior`2<T, TData> behavior);
    public sealed virtual void Visit(Behavior`2<T, TData> behavior, Action`1<Behavior`2<T, TData>> next);
    public sealed virtual void Visit(Activity activity, Action`1<Activity> next);
    private void InspectCompositeEventActivity(CompositeEventActivity`1<TInstance> compositeActivity);
    private void InspectTransitionActivity(TransitionActivity`1<TInstance> transitionActivity);
    private Vertex GetStateVertex(State state);
    private Vertex GetEventVertex(Event state);
    private static Vertex CreateStateVertex(State state);
    private static Vertex CreateEventVertex(Event event);
    private static Vertex CreateEventVertex(Type exceptionType);
}
public class Automatonymous.Graphing.StateMachineGraph : object {
    private Edge[] _edges;
    private Vertex[] _vertices;
    public IEnumerable`1<Vertex> Vertices { get; }
    public IEnumerable`1<Edge> Edges { get; }
    public StateMachineGraph(IEnumerable`1<Vertex> vertices, IEnumerable`1<Edge> edges);
    public IEnumerable`1<Vertex> get_Vertices();
    public IEnumerable`1<Edge> get_Edges();
}
public class Automatonymous.Graphing.Vertex : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <VertexType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    public string Title { get; }
    public Type VertexType { get; }
    public Type TargetType { get; }
    public Vertex(Type type, Type targetType, string title);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Type get_VertexType();
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    public sealed virtual bool Equals(Vertex other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface Automatonymous.InstanceContext`1 {
    public TInstance Instance { get; }
    public abstract virtual TInstance get_Instance();
}
public interface Automatonymous.InstanceLift`1 {
    public abstract virtual Task Raise(Event event, CancellationToken cancellationToken);
    public abstract virtual Task Raise(Event`1<TData> event, TData data, CancellationToken cancellationToken);
    public abstract virtual Task Raise(Func`2<T, Event> eventSelector, CancellationToken cancellationToken);
    public abstract virtual Task Raise(Func`2<T, Event`1<TData>> eventSelector, TData data, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Automatonymous.InstanceLiftExtensions : object {
    [ExtensionAttribute]
public static InstanceLift`1<T> CreateInstanceLift(T stateMachine, TInstance instance);
}
[ExtensionAttribute]
public static class Automatonymous.IntrospectionExtensions : object {
    [AsyncStateMachineAttribute("Automatonymous.IntrospectionExtensions/<NextEvents>d__0`2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<Event>> NextEvents(T machine, TInstance instance);
}
public class Automatonymous.Lifts.StateMachineEventLift`1 : object {
    private Event _event;
    private StateMachine`1<TInstance> _machine;
    public StateMachineEventLift`1(StateMachine`1<TInstance> machine, Event event);
    private sealed virtual override Task Automatonymous.EventLift<TInstance>.Raise(TInstance instance, CancellationToken cancellationToken);
}
public class Automatonymous.Lifts.StateMachineEventLift`2 : object {
    private Event`1<TData> _event;
    private StateMachine`1<TInstance> _machine;
    public StateMachineEventLift`2(StateMachine`1<TInstance> machine, Event`1<TData> event);
    private sealed virtual override Task Automatonymous.EventLift<TInstance,TData>.Raise(TInstance instance, TData data, CancellationToken cancellationToken);
}
public class Automatonymous.Lifts.StateMachineInstanceLift`2 : object {
    private TInstance _instance;
    private TStateMachine _stateMachine;
    public StateMachineInstanceLift`2(TStateMachine stateMachine, TInstance instance);
    private sealed virtual override Task Automatonymous.InstanceLift<TStateMachine>.Raise(Event event, CancellationToken cancellationToken);
    private sealed virtual override Task Automatonymous.InstanceLift<TStateMachine>.Raise(Event`1<T> event, T data, CancellationToken cancellationToken);
    private sealed virtual override Task Automatonymous.InstanceLift<TStateMachine>.Raise(Func`2<TStateMachine, Event> eventSelector, CancellationToken cancellationToken);
    private sealed virtual override Task Automatonymous.InstanceLift<TStateMachine>.Raise(Func`2<TStateMachine, Event`1<T>> eventSelector, T data, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Automatonymous.ObserverExtensions : object {
    [ExtensionAttribute]
public static IDisposable ConnectStateObserver(StateMachine`1<T> machine, StateObserver`1<T> observer);
    [ExtensionAttribute]
public static IDisposable ConnectEventObserver(StateMachine`1<T> machine, EventObserver`1<T> observer);
    [ExtensionAttribute]
public static IDisposable ConnectEventObserver(StateMachine`1<T> machine, Event event, EventObserver`1<T> observer);
}
internal class Automatonymous.Observers.EventObservable`1 : Connectable`1<EventObserver`1<TInstance>> {
    private sealed virtual override Task Automatonymous.EventObserver<TInstance>.PreExecute(EventContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.EventObserver<TInstance>.PreExecute(EventContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.EventObserver<TInstance>.PostExecute(EventContext`1<TInstance> context);
    private sealed virtual override Task Automatonymous.EventObserver<TInstance>.PostExecute(EventContext`2<TInstance, T> context);
    private sealed virtual override Task Automatonymous.EventObserver<TInstance>.ExecuteFault(EventContext`1<TInstance> context, Exception exception);
    private sealed virtual override Task Automatonymous.EventObserver<TInstance>.ExecuteFault(EventContext`2<TInstance, T> context, Exception exception);
}
internal class Automatonymous.Observers.NonTransitionEventObserver`1 : object {
    private IReadOnlyDictionary`2<string, StateMachineEvent`1<TInstance>> _eventCache;
    private EventObserver`1<TInstance> _observer;
    public NonTransitionEventObserver`1(IReadOnlyDictionary`2<string, StateMachineEvent`1<TInstance>> eventCache, EventObserver`1<TInstance> observer);
    public sealed virtual Task PreExecute(EventContext`1<TInstance> context);
    public sealed virtual Task PreExecute(EventContext`2<TInstance, T> context);
    public sealed virtual Task PostExecute(EventContext`1<TInstance> context);
    public sealed virtual Task PostExecute(EventContext`2<TInstance, T> context);
    public sealed virtual Task ExecuteFault(EventContext`1<TInstance> context, Exception exception);
    public sealed virtual Task ExecuteFault(EventContext`2<TInstance, T> context, Exception exception);
}
internal class Automatonymous.Observers.SelectedEventObserver`1 : object {
    private Event _event;
    private EventObserver`1<TInstance> _observer;
    public SelectedEventObserver`1(Event event, EventObserver`1<TInstance> observer);
    public sealed virtual Task PreExecute(EventContext`1<TInstance> context);
    public sealed virtual Task PreExecute(EventContext`2<TInstance, T> context);
    public sealed virtual Task PostExecute(EventContext`1<TInstance> context);
    public sealed virtual Task PostExecute(EventContext`2<TInstance, T> context);
    public sealed virtual Task ExecuteFault(EventContext`1<TInstance> context, Exception exception);
    public sealed virtual Task ExecuteFault(EventContext`2<TInstance, T> context, Exception exception);
}
internal class Automatonymous.Observers.StateObservable`1 : Connectable`1<StateObserver`1<TInstance>> {
    public sealed virtual Task StateChanged(InstanceContext`1<TInstance> context, State currentState, State previousState);
}
[ExtensionAttribute]
[DebuggerNonUserCodeAttribute]
public static class Automatonymous.RaiseEventExtensions : object {
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, T15 context15, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, T15 context15, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, T15 context15, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, T15 context15, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event event, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, T15 context15, T16 context16, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event> eventSelector, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, T15 context15, T16 context16, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Event`1<TData> event, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, T15 context15, T16 context16, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RaiseEvent(T machine, TInstance instance, Func`2<T, Event`1<TData>> eventSelector, TData data, T1 context1, T2 context2, T3 context3, T4 context4, T5 context5, T6 context6, T7 context7, T8 context8, T9 context9, T10 context10, T11 context11, T12 context12, T13 context13, T14 context14, T15 context15, T16 context16, CancellationToken cancellationToken);
}
public interface Automatonymous.State {
    public string Name { get; }
    public Event Enter { get; }
    public Event Leave { get; }
    public Event`1<State> BeforeEnter { get; }
    public Event`1<State> AfterLeave { get; }
    public abstract virtual string get_Name();
    public abstract virtual Event get_Enter();
    public abstract virtual Event get_Leave();
    public abstract virtual Event`1<State> get_BeforeEnter();
    public abstract virtual Event`1<State> get_AfterLeave();
}
public interface Automatonymous.State`1 {
    public IEnumerable`1<Event> Events { get; }
    public State`1<TInstance> SuperState { get; }
    public abstract virtual IEnumerable`1<Event> get_Events();
    public abstract virtual State`1<TInstance> get_SuperState();
    public abstract virtual Task Raise(EventContext`1<TInstance> context);
    public abstract virtual Task Raise(EventContext`2<TInstance, T> context);
    public abstract virtual void Bind(Event event, Activity`1<TInstance> activity);
    public abstract virtual void Ignore(Event event);
    public abstract virtual void Ignore(Event`1<T> event, StateMachineEventFilter`2<TInstance, T> filter);
    public abstract virtual void AddSubstate(State`1<TInstance> subState);
    public abstract virtual bool HasState(State`1<TInstance> state);
    public abstract virtual bool IsStateOf(State`1<TInstance> state);
}
public interface Automatonymous.StateAccessor`1 {
    public abstract virtual Task`1<State`1<TInstance>> Get(InstanceContext`1<TInstance> context);
    public abstract virtual Task Set(InstanceContext`1<TInstance> context, State`1<TInstance> state);
    public abstract virtual Expression`1<Func`2<TInstance, bool>> GetStateExpression(State[] states);
}
[ExtensionAttribute]
public static class Automatonymous.StateAccessorExtensions : object {
    [ExtensionAttribute]
public static Task`1<State`1<TInstance>> GetState(StateAccessor`1<TInstance> accessor, TInstance instance);
    [ExtensionAttribute]
public static Task`1<State`1<TInstance>> GetState(StateMachine`1<TInstance> accessor, TInstance instance);
}
public interface Automatonymous.StateMachine {
    public string Name { get; }
    public IEnumerable`1<Event> Events { get; }
    public IEnumerable`1<State> States { get; }
    public Type InstanceType { get; }
    public State Initial { get; }
    public State Final { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<Event> get_Events();
    public abstract virtual IEnumerable`1<State> get_States();
    public abstract virtual Type get_InstanceType();
    public abstract virtual State get_Initial();
    public abstract virtual State get_Final();
    public abstract virtual Event GetEvent(string name);
    public abstract virtual State GetState(string name);
    public abstract virtual IEnumerable`1<Event> NextEvents(State state);
}
public interface Automatonymous.StateMachine`1 {
    public StateAccessor`1<TInstance> Accessor { get; }
    public abstract virtual StateAccessor`1<TInstance> get_Accessor();
    public abstract virtual State`1<TInstance> GetState(string name);
    public abstract virtual Task RaiseEvent(EventContext`1<TInstance> context);
    public abstract virtual Task RaiseEvent(EventContext`2<TInstance, T> context);
    public abstract virtual IDisposable ConnectEventObserver(EventObserver`1<TInstance> observer);
    public abstract virtual IDisposable ConnectEventObserver(Event event, EventObserver`1<TInstance> observer);
    public abstract virtual IDisposable ConnectStateObserver(StateObserver`1<TInstance> observer);
}
public class Automatonymous.StateMachineAsyncCondition`1 : MulticastDelegate {
    public StateMachineAsyncCondition`1(object object, IntPtr method);
    public virtual Task`1<bool> Invoke(BehaviorContext`1<TInstance> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TInstance> context, AsyncCallback callback, object object);
    public virtual Task`1<bool> EndInvoke(IAsyncResult result);
}
public class Automatonymous.StateMachineAsyncCondition`2 : MulticastDelegate {
    public StateMachineAsyncCondition`2(object object, IntPtr method);
    public virtual Task`1<bool> Invoke(BehaviorContext`2<TInstance, TData> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TInstance, TData> context, AsyncCallback callback, object object);
    public virtual Task`1<bool> EndInvoke(IAsyncResult result);
}
public class Automatonymous.StateMachineAsyncExceptionCondition`2 : MulticastDelegate {
    public StateMachineAsyncExceptionCondition`2(object object, IntPtr method);
    public virtual Task`1<bool> Invoke(BehaviorExceptionContext`2<TInstance, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TInstance, TException> context, AsyncCallback callback, object object);
    public virtual Task`1<bool> EndInvoke(IAsyncResult result);
}
public class Automatonymous.StateMachineAsyncExceptionCondition`3 : MulticastDelegate {
    public StateMachineAsyncExceptionCondition`3(object object, IntPtr method);
    public virtual Task`1<bool> Invoke(BehaviorExceptionContext`3<TInstance, TData, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TInstance, TData, TException> context, AsyncCallback callback, object object);
    public virtual Task`1<bool> EndInvoke(IAsyncResult result);
}
public class Automatonymous.StateMachineCondition`1 : MulticastDelegate {
    public StateMachineCondition`1(object object, IntPtr method);
    public virtual bool Invoke(BehaviorContext`1<TInstance> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`1<TInstance> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Automatonymous.StateMachineCondition`2 : MulticastDelegate {
    public StateMachineCondition`2(object object, IntPtr method);
    public virtual bool Invoke(BehaviorContext`2<TInstance, TData> context);
    public virtual IAsyncResult BeginInvoke(BehaviorContext`2<TInstance, TData> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Automatonymous.StateMachineEventFilter`1 : MulticastDelegate {
    public StateMachineEventFilter`1(object object, IntPtr method);
    public virtual bool Invoke(EventContext`1<TInstance> context);
    public virtual IAsyncResult BeginInvoke(EventContext`1<TInstance> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Automatonymous.StateMachineEventFilter`2 : MulticastDelegate {
    public StateMachineEventFilter`2(object object, IntPtr method);
    public virtual bool Invoke(EventContext`2<TInstance, TData> context);
    public virtual IAsyncResult BeginInvoke(EventContext`2<TInstance, TData> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Automatonymous.StateMachineExceptionCondition`2 : MulticastDelegate {
    public StateMachineExceptionCondition`2(object object, IntPtr method);
    public virtual bool Invoke(BehaviorExceptionContext`2<TInstance, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`2<TInstance, TException> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Automatonymous.StateMachineExceptionCondition`3 : MulticastDelegate {
    public StateMachineExceptionCondition`3(object object, IntPtr method);
    public virtual bool Invoke(BehaviorExceptionContext`3<TInstance, TData, TException> context);
    public virtual IAsyncResult BeginInvoke(BehaviorExceptionContext`3<TInstance, TData, TException> context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Automatonymous.StateMachineExtensions : object {
    [ExtensionAttribute]
public static Task TransitionToState(StateMachine`1<TInstance> machine, TInstance instance, State state, CancellationToken cancellationToken);
}
public interface Automatonymous.StateMachineVisitor {
    public abstract virtual void Visit(State state, Action`1<State> next);
    public abstract virtual void Visit(Event event, Action`1<Event> next);
    public abstract virtual void Visit(Event`1<TData> event, Action`1<Event`1<TData>> next);
    public abstract virtual void Visit(Activity activity);
    public abstract virtual void Visit(Behavior`1<T> behavior);
    public abstract virtual void Visit(Behavior`1<T> behavior, Action`1<Behavior`1<T>> next);
    public abstract virtual void Visit(Behavior`2<T, TData> behavior);
    public abstract virtual void Visit(Behavior`2<T, TData> behavior, Action`1<Behavior`2<T, TData>> next);
    public abstract virtual void Visit(Activity activity, Action`1<Activity> next);
}
public interface Automatonymous.StateObserver`1 {
    public abstract virtual Task StateChanged(InstanceContext`1<TInstance> context, State currentState, State previousState);
}
public class Automatonymous.States.AllStateEventFilter`1 : object {
    public sealed virtual bool Filter(EventContext`1<TInstance> context);
    public sealed virtual bool Filter(EventContext`2<TInstance, T> context);
}
public class Automatonymous.States.SelectedStateEventFilter`2 : object {
    private StateMachineEventFilter`2<TInstance, TData> _filter;
    public SelectedStateEventFilter`2(StateMachineEventFilter`2<TInstance, TData> filter);
    public sealed virtual bool Filter(EventContext`2<TInstance, T> context);
    public sealed virtual bool Filter(EventContext`1<TInstance> context);
}
public interface Automatonymous.States.StateEventFilter`1 {
    public abstract virtual bool Filter(EventContext`1<TInstance> context);
    public abstract virtual bool Filter(EventContext`2<TInstance, T> context);
}
public class Automatonymous.States.StateMachineState`1 : object {
    private Dictionary`2<Event, ActivityBehaviorBuilder`1<TInstance>> _behaviors;
    private Dictionary`2<Event, StateEventFilter`1<TInstance>> _ignoredEvents;
    private AutomatonymousStateMachine`1<TInstance> _machine;
    private string _name;
    private EventObserver`1<TInstance> _observer;
    private HashSet`1<State`1<TInstance>> _subStates;
    private State`1<TInstance> _superState;
    [CompilerGeneratedAttribute]
private State`1<TInstance> <SuperState>k__BackingField;
    [CompilerGeneratedAttribute]
private Event <Enter>k__BackingField;
    [CompilerGeneratedAttribute]
private Event <Leave>k__BackingField;
    [CompilerGeneratedAttribute]
private Event`1<State> <BeforeEnter>k__BackingField;
    [CompilerGeneratedAttribute]
private Event`1<State> <AfterLeave>k__BackingField;
    public State`1<TInstance> SuperState { get; }
    public string Name { get; }
    public Event Enter { get; }
    public Event Leave { get; }
    public Event`1<State> BeforeEnter { get; }
    public Event`1<State> AfterLeave { get; }
    public IEnumerable`1<Event> Events { get; }
    public StateMachineState`1(AutomatonymousStateMachine`1<TInstance> machine, string name, EventObserver`1<TInstance> observer, State`1<TInstance> superState);
    public sealed virtual bool Equals(State other);
    [CompilerGeneratedAttribute]
public sealed virtual State`1<TInstance> get_SuperState();
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Event get_Enter();
    [CompilerGeneratedAttribute]
public sealed virtual Event get_Leave();
    [CompilerGeneratedAttribute]
public sealed virtual Event`1<State> get_BeforeEnter();
    [CompilerGeneratedAttribute]
public sealed virtual Event`1<State> get_AfterLeave();
    public sealed virtual void Accept(StateMachineVisitor visitor);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("Automatonymous.States.StateMachineState`1/<Automatonymous-State<TInstance>-Raise>d__28")]
private sealed virtual override Task Automatonymous.State<TInstance>.Raise(EventContext`1<TInstance> context);
    [AsyncStateMachineAttribute("Automatonymous.States.StateMachineState`1/<Automatonymous-State<TInstance>-Raise>d__29`1")]
private sealed virtual override Task Automatonymous.State<TInstance>.Raise(EventContext`2<TInstance, T> context);
    public sealed virtual void Bind(Event event, Activity`1<TInstance> activity);
    public sealed virtual void Ignore(Event event);
    public sealed virtual void Ignore(Event`1<T> event, StateMachineEventFilter`2<TInstance, T> filter);
    public sealed virtual void AddSubstate(State`1<TInstance> subState);
    public sealed virtual bool HasState(State`1<TInstance> state);
    public sealed virtual bool IsStateOf(State`1<TInstance> state);
    public sealed virtual IEnumerable`1<Event> get_Events();
    public sealed virtual int CompareTo(State other);
    private bool IsRealEvent(Event event);
    private IEnumerable`1<Event> GetStateEvents();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(State`1<TInstance> left, StateMachineState`1<TInstance> right);
    public static bool op_Inequality(State`1<TInstance> left, StateMachineState`1<TInstance> right);
    public static bool op_Equality(StateMachineState`1<TInstance> left, State`1<TInstance> right);
    public static bool op_Inequality(StateMachineState`1<TInstance> left, State`1<TInstance> right);
    public static bool op_Equality(StateMachineState`1<TInstance> left, StateMachineState`1<TInstance> right);
    public static bool op_Inequality(StateMachineState`1<TInstance> left, StateMachineState`1<TInstance> right);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <Probe>b__27_0(KeyValuePair`2<Event, StateEventFilter`1<TInstance>> x);
}
[ExtensionAttribute]
public static class Automatonymous.ThenExtensions : object {
    [ExtensionAttribute]
public static EventActivityBinder`1<TInstance> Then(EventActivityBinder`1<TInstance> binder, Action`1<BehaviorContext`1<TInstance>> action);
    [ExtensionAttribute]
public static ExceptionActivityBinder`2<TInstance, TException> Then(ExceptionActivityBinder`2<TInstance, TException> binder, Action`1<BehaviorExceptionContext`2<TInstance, TException>> action);
    [ExtensionAttribute]
public static ExceptionActivityBinder`2<TInstance, TException> ThenAsync(ExceptionActivityBinder`2<TInstance, TException> binder, Func`2<BehaviorExceptionContext`2<TInstance, TException>, Task> asyncAction);
    [ExtensionAttribute]
public static EventActivityBinder`1<TInstance> ThenAsync(EventActivityBinder`1<TInstance> binder, Func`2<BehaviorContext`1<TInstance>, Task> action);
    [ExtensionAttribute]
public static EventActivityBinder`2<TInstance, TData> Then(EventActivityBinder`2<TInstance, TData> binder, Action`1<BehaviorContext`2<TInstance, TData>> action);
    [ExtensionAttribute]
public static ExceptionActivityBinder`3<TInstance, TData, TException> Then(ExceptionActivityBinder`3<TInstance, TData, TException> binder, Action`1<BehaviorExceptionContext`3<TInstance, TData, TException>> action);
    [ExtensionAttribute]
public static ExceptionActivityBinder`3<TInstance, TData, TException> ThenAsync(ExceptionActivityBinder`3<TInstance, TData, TException> binder, Func`2<BehaviorExceptionContext`3<TInstance, TData, TException>, Task> asyncAction);
    [ExtensionAttribute]
public static EventActivityBinder`2<TInstance, TData> ThenAsync(EventActivityBinder`2<TInstance, TData> binder, Func`2<BehaviorContext`2<TInstance, TData>, Task> action);
    [ExtensionAttribute]
public static EventActivityBinder`1<TInstance> Execute(EventActivityBinder`1<TInstance> binder, Func`2<BehaviorContext`1<TInstance>, Activity`1<TInstance>> activityFactory);
    [ExtensionAttribute]
public static EventActivityBinder`1<TInstance> Execute(EventActivityBinder`1<TInstance> binder, Activity`1<TInstance> activity);
    [ExtensionAttribute]
public static EventActivityBinder`1<TInstance> ExecuteAsync(EventActivityBinder`1<TInstance> binder, Func`2<BehaviorContext`1<TInstance>, Task`1<Activity`1<TInstance>>> activityFactory);
    [ExtensionAttribute]
public static EventActivityBinder`2<TInstance, TData> Execute(EventActivityBinder`2<TInstance, TData> binder, Func`2<BehaviorContext`2<TInstance, TData>, Activity`2<TInstance, TData>> activityFactory);
    [ExtensionAttribute]
public static EventActivityBinder`2<TInstance, TData> ExecuteAsync(EventActivityBinder`2<TInstance, TData> binder, Func`2<BehaviorContext`2<TInstance, TData>, Task`1<Activity`2<TInstance, TData>>> activityFactory);
    [ExtensionAttribute]
public static EventActivityBinder`2<TInstance, TData> Execute(EventActivityBinder`2<TInstance, TData> binder, Func`2<BehaviorContext`2<TInstance, TData>, Activity`1<TInstance>> activityFactory);
    [ExtensionAttribute]
public static EventActivityBinder`2<TInstance, TData> ExecuteAsync(EventActivityBinder`2<TInstance, TData> binder, Func`2<BehaviorContext`2<TInstance, TData>, Task`1<Activity`1<TInstance>>> activityFactory);
}
[ExtensionAttribute]
public static class Automatonymous.TransitionExtensions : object {
    [ExtensionAttribute]
public static EventActivityBinder`1<TInstance> TransitionTo(EventActivityBinder`1<TInstance> source, State toState);
    [ExtensionAttribute]
public static ExceptionActivityBinder`2<TInstance, TException> TransitionTo(ExceptionActivityBinder`2<TInstance, TException> source, State toState);
    [ExtensionAttribute]
public static EventActivityBinder`2<TInstance, TData> TransitionTo(EventActivityBinder`2<TInstance, TData> source, State toState);
    [ExtensionAttribute]
public static ExceptionActivityBinder`3<TInstance, TData, TException> TransitionTo(ExceptionActivityBinder`3<TInstance, TData, TException> source, State toState);
    [ExtensionAttribute]
public static EventActivityBinder`2<TInstance, TData> Finalize(EventActivityBinder`2<TInstance, TData> source);
    [ExtensionAttribute]
public static EventActivityBinder`1<TInstance> Finalize(EventActivityBinder`1<TInstance> source);
    [ExtensionAttribute]
public static ExceptionActivityBinder`3<TInstance, TData, TException> Finalize(ExceptionActivityBinder`3<TInstance, TData, TException> source);
    [ExtensionAttribute]
public static ExceptionActivityBinder`2<TInstance, TException> Finalize(ExceptionActivityBinder`2<TInstance, TException> source);
}
public class Automatonymous.UnhandledEventCallback`1 : MulticastDelegate {
    public UnhandledEventCallback`1(object object, IntPtr method);
    public virtual Task Invoke(UnhandledEventContext`1<TInstance> context);
    public virtual IAsyncResult BeginInvoke(UnhandledEventContext`1<TInstance> context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public interface Automatonymous.UnhandledEventContext`1 {
    public State CurrentState { get; }
    public abstract virtual State get_CurrentState();
    public abstract virtual Task Ignore();
    public abstract virtual Task Throw();
}
public class Automatonymous.UnhandledEventException : AutomatonymousException {
    public UnhandledEventException(string machineType, string eventName, string stateName);
    protected UnhandledEventException(SerializationInfo info, StreamingContext context);
}
public class Automatonymous.UnknownEventException : AutomatonymousException {
    public UnknownEventException(string machineType, string eventName);
    protected UnknownEventException(SerializationInfo info, StreamingContext context);
}
public class Automatonymous.UnknownStateException : AutomatonymousException {
    public UnknownStateException(string machineType, string stateName);
    protected UnknownStateException(SerializationInfo info, StreamingContext context);
}
public interface Automatonymous.Visitable {
    public abstract virtual void Accept(StateMachineVisitor visitor);
}
