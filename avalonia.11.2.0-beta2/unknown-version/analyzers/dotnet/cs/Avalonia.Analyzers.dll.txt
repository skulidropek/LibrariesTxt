[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Analyzers.AvaloniaAnalysisException : Exception {
    public AvaloniaAnalysisException(string message, Exception innerException);
    protected AvaloniaAnalysisException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Analyzers.AvaloniaPropertyAnalyzer : DiagnosticAnalyzer {
    private static string Category;
    private static string TypeMismatchTag;
    private static string NameCollisionTag;
    private static string AssociatedClrPropertyTag;
    private static string InappropriateReadWriteTag;
    private static DiagnosticDescriptor AssociatedAvaloniaProperty;
    private static DiagnosticDescriptor InappropriatePropertyAssignment;
    private static DiagnosticDescriptor InappropriatePropertyRegistration;
    private static DiagnosticDescriptor PropertyOwnedByGenericType;
    private static DiagnosticDescriptor OwnerDoesNotMatchOuterType;
    private static DiagnosticDescriptor UnexpectedPropertyAccess;
    private static DiagnosticDescriptor SettingOwnStyledPropertyValue;
    private static DiagnosticDescriptor SuperfluousAddOwnerCall;
    private static DiagnosticDescriptor DuplicatePropertyName;
    private static DiagnosticDescriptor AmbiguousPropertyName;
    private static DiagnosticDescriptor PropertyNameMismatch;
    private static DiagnosticDescriptor AccessorSideEffects;
    private static DiagnosticDescriptor MissingAccessor;
    private static DiagnosticDescriptor InconsistentAccessibility;
    private static DiagnosticDescriptor PropertyTypeMismatch;
    private static SymbolDisplayFormat TypeQualifiedName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AvaloniaPropertyAnalyzer();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static bool IsAvaloniaPropertyType(ITypeSymbol type, INamedTypeSymbol[] propertyTypes);
    private static bool IsAvaloniaPropertyType(ITypeSymbol type, IEnumerable`1<INamedTypeSymbol> propertyTypes);
    [NullableContextAttribute("2")]
private static bool DerivesFrom(ITypeSymbol type, ITypeSymbol baseType, bool includeSelf);
    private static IOperation ResolveOperationSource(IOperation operation, CancellationToken cancellationToken);
    private static IOperation ResolveOperationTarget(IOperation operation, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static ISymbol GetReferencedFieldOrProperty(IOperation operation, CancellationToken cancellationToken);
    private static bool IsValidAvaloniaPropertyStorage(IFieldSymbol field);
    private static bool IsValidAvaloniaPropertyStorage(IPropertySymbol field);
    private static void WrapAndThrowIfNotCancellation(Exception exception, string analysisContextMessage, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static bool SymbolEquals(ISymbol x, ISymbol y, bool includeNullability);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Analyzers.OnPropertyChangedOverrideAnalyzer : DiagnosticAnalyzer {
    public static string DiagnosticId;
    private static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static OnPropertyChangedOverrideAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeMethod(SyntaxNodeAnalysisContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
