internal enum Avalonia.Generators.BuildProperties : Enum {
    public int value__;
    public static BuildProperties AvaloniaNameGeneratorIsEnabled;
    public static BuildProperties AvaloniaNameGeneratorBehavior;
    public static BuildProperties AvaloniaNameGeneratorDefaultFieldModifier;
    public static BuildProperties AvaloniaNameGeneratorFilterByPath;
    public static BuildProperties AvaloniaNameGeneratorFilterByNamespace;
    public static BuildProperties AvaloniaNameGeneratorViewFileNamingStrategy;
    public static BuildProperties AvaloniaNameGeneratorAttachDevTools;
}
[NullableContextAttribute("1")]
internal interface Avalonia.Generators.Common.Domain.ICodeGenerator {
    public abstract virtual string GenerateCode(string className, string nameSpace, IXamlType xamlType, IEnumerable`1<ResolvedName> names);
}
[NullableContextAttribute("1")]
internal interface Avalonia.Generators.Common.Domain.IGlobPattern {
    public abstract virtual bool Matches(string str);
}
[NullableContextAttribute("1")]
internal interface Avalonia.Generators.Common.Domain.INameResolver {
    public abstract virtual IReadOnlyList`1<ResolvedName> ResolveNames(XamlDocument xaml);
}
[NullableContextAttribute("1")]
internal interface Avalonia.Generators.Common.Domain.IViewResolver {
    public abstract virtual ResolvedView ResolveView(string xaml);
}
internal enum Avalonia.Generators.Common.Domain.NamedFieldModifier : Enum {
    public int value__;
    public static NamedFieldModifier Public;
    public static NamedFieldModifier Private;
    public static NamedFieldModifier Internal;
    public static NamedFieldModifier Protected;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Common.Domain.ResolvedName : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldModifier>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string TypeName { get; public set; }
    public string Name { get; public set; }
    public string FieldModifier { get; public set; }
    public ResolvedName(string TypeName, string Name, string FieldModifier);
    [CompilerGeneratedAttribute]
protected ResolvedName(ResolvedName original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FieldModifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FieldModifier(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ResolvedName left, ResolvedName right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ResolvedName left, ResolvedName right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ResolvedName other);
    [CompilerGeneratedAttribute]
public virtual ResolvedName <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& TypeName, String& Name, String& FieldModifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Common.Domain.ResolvedView : object {
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <XamlType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlDocument <Xaml>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string ClassName { get; public set; }
    public IXamlType XamlType { get; public set; }
    public string Namespace { get; public set; }
    public XamlDocument Xaml { get; public set; }
    public ResolvedView(string ClassName, IXamlType XamlType, string Namespace, XamlDocument Xaml);
    [CompilerGeneratedAttribute]
protected ResolvedView(ResolvedView original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClassName(string value);
    [CompilerGeneratedAttribute]
public IXamlType get_XamlType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_XamlType(IXamlType value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Namespace(string value);
    [CompilerGeneratedAttribute]
public XamlDocument get_Xaml();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Xaml(XamlDocument value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ResolvedView left, ResolvedView right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ResolvedView left, ResolvedView right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ResolvedView other);
    [CompilerGeneratedAttribute]
public virtual ResolvedView <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ClassName, IXamlType& XamlType, String& Namespace, XamlDocument& Xaml);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Common.GlobPattern : object {
    private static RegexOptions GlobOptions;
    private Regex _regex;
    public GlobPattern(string pattern);
    public sealed virtual bool Matches(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Common.GlobPatternGroup : object {
    private GlobPattern[] _patterns;
    public GlobPatternGroup(IEnumerable`1<string> patterns);
    public sealed virtual bool Matches(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Avalonia.Generators.Common.ResolverExtensions : object {
    [ExtensionAttribute]
public static bool IsAvaloniaStyledElement(IXamlType clrType);
    [ExtensionAttribute]
private static bool HasStyledElementBaseType(IXamlType clrType);
    [ExtensionAttribute]
private static bool HasIStyledElementInterface(IXamlType clrType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Common.XamlXNameResolver : object {
    private List`1<ResolvedName> _items;
    private string _defaultFieldModifier;
    public XamlXNameResolver(NamedFieldModifier namedFieldModifier);
    public sealed virtual IReadOnlyList`1<ResolvedName> ResolveNames(XamlDocument xaml);
    private sealed virtual override IXamlAstNode XamlX.Ast.IXamlAstVisitor.Visit(IXamlAstNode node);
    private sealed virtual override void XamlX.Ast.IXamlAstVisitor.Push(IXamlAstNode node);
    private sealed virtual override void XamlX.Ast.IXamlAstVisitor.Pop();
    private string TryGetFieldModifier(XamlAstObjectNode objectNode);
    private static bool IsAttachedProperty(XamlAstNamePropertyReference namedProperty);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Common.XamlXViewResolver : object {
    private RoslynTypeSystem _typeSystem;
    private MiniCompiler _compiler;
    private bool _checkTypeValidity;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<string> _onTypeInvalid;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> _onUnhandledError;
    [NullableAttribute("2")]
private ResolvedView _resolvedClass;
    [NullableAttribute("2")]
private XamlDocument _xaml;
    public XamlXViewResolver(RoslynTypeSystem typeSystem, MiniCompiler compiler, bool checkTypeValidity, Action`1<string> onTypeInvalid, Action`1<Exception> onUnhandledError);
    public sealed virtual ResolvedView ResolveView(string xaml);
    private sealed virtual override IXamlAstNode XamlX.Ast.IXamlAstVisitor.Visit(IXamlAstNode node);
    private sealed virtual override void XamlX.Ast.IXamlAstVisitor.Push(IXamlAstNode node);
    private sealed virtual override void XamlX.Ast.IXamlAstVisitor.Pop();
}
internal class Avalonia.Generators.Compiler.DataTemplateTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Avalonia.Generators.Compiler.MiniCompiler : XamlCompiler`2<object, IXamlEmitResult> {
    public static string AvaloniaXmlnsDefinitionAttribute;
    private MiniCompiler(TransformerConfiguration configuration);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2072")]
public static MiniCompiler CreateDefault(RoslynTypeSystem typeSystem, String[] additionalTypes);
    protected virtual XamlEmitContext`2<object, IXamlEmitResult> InitCodeGen(IFileSource file, IXamlTypeBuilder`1<object> declaringType, object codeGen, XamlRuntimeContext`2<object, IXamlEmitResult> context, bool needContextLocal);
}
internal class Avalonia.Generators.Compiler.NameDirectiveTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Compiler.RoslynAssembly : object {
    private IAssemblySymbol _symbol;
    public string Name { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public RoslynAssembly(IAssemblySymbol symbol);
    public sealed virtual bool Equals(IXamlAssembly other);
    public sealed virtual string get_Name();
    public sealed virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public sealed virtual IXamlType FindType(string fullName);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RoslynAttribute <get_CustomAttributes>b__6_0(AttributeData data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Compiler.RoslynAttribute : object {
    private AttributeData _data;
    private RoslynAssembly _assembly;
    public IXamlType Type { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<object> Parameters { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Properties { get; }
    public RoslynAttribute(AttributeData data, RoslynAssembly assembly);
    public sealed virtual bool Equals(IXamlCustomAttribute other);
    public sealed virtual IXamlType get_Type();
    public sealed virtual List`1<object> get_Parameters();
    public sealed virtual Dictionary`2<string, object> get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Compiler.RoslynConstructor : object {
    private IMethodSymbol _symbol;
    private RoslynAssembly _assembly;
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public IReadOnlyList`1<IXamlType> Parameters { get; }
    public string Name { get; }
    public IXamlType DeclaringType { get; }
    public RoslynConstructor(IMethodSymbol symbol, RoslynAssembly assembly);
    public sealed virtual bool Equals(IXamlConstructor other);
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IReadOnlyList`1<IXamlType> get_Parameters();
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_DeclaringType();
    public sealed virtual IXamlParameterInfo GetParameterInfo(int index);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IXamlType <get_Parameters>b__9_0(IParameterSymbol parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Compiler.RoslynMethod : object {
    private IMethodSymbol _symbol;
    private RoslynAssembly _assembly;
    public string Name { get; }
    public bool IsPublic { get; }
    public bool IsPrivate { get; }
    public bool IsFamily { get; }
    public bool IsStatic { get; }
    public bool ContainsGenericParameters { get; }
    public bool IsGenericMethod { get; }
    public bool IsGenericMethodDefinition { get; }
    public IReadOnlyList`1<IXamlType> GenericParameters { get; }
    public IReadOnlyList`1<IXamlType> GenericArguments { get; }
    public IXamlType ReturnType { get; }
    public IReadOnlyList`1<IXamlType> Parameters { get; }
    public IXamlType DeclaringType { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public RoslynMethod(IMethodSymbol symbol, RoslynAssembly assembly);
    public sealed virtual bool Equals(IXamlMethod other);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsPrivate();
    public sealed virtual bool get_IsFamily();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_ContainsGenericParameters();
    public sealed virtual bool get_IsGenericMethod();
    public sealed virtual bool get_IsGenericMethodDefinition();
    public sealed virtual IReadOnlyList`1<IXamlType> get_GenericParameters();
    public sealed virtual IReadOnlyList`1<IXamlType> get_GenericArguments();
    public sealed virtual IXamlType get_ReturnType();
    public sealed virtual IReadOnlyList`1<IXamlType> get_Parameters();
    public sealed virtual IXamlType get_DeclaringType();
    public sealed virtual IXamlMethod MakeGenericMethod(IReadOnlyList`1<IXamlType> typeArguments);
    public sealed virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public sealed virtual IXamlParameterInfo GetParameterInfo(int index);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RoslynType <get_GenericArguments>b__23_0(ITypeSymbol ga);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IXamlType <get_Parameters>b__27_0(IParameterSymbol parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Compiler.RoslynParameter : object {
    private RoslynAssembly _assembly;
    private IParameterSymbol _symbol;
    public string Name { get; }
    public IXamlType ParameterType { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public RoslynParameter(RoslynAssembly assembly, IParameterSymbol symbol);
    public string get_Name();
    public sealed virtual IXamlType get_ParameterType();
    public sealed virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Compiler.RoslynProperty : object {
    private IPropertySymbol _symbol;
    private RoslynAssembly _assembly;
    public string Name { get; }
    public IXamlType DeclaringType { get; }
    public IXamlType PropertyType { get; }
    [NullableAttribute("2")]
public IXamlMethod Getter { get; }
    [NullableAttribute("2")]
public IXamlMethod Setter { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public IReadOnlyList`1<IXamlType> IndexerParameters { get; }
    public RoslynProperty(IPropertySymbol symbol, RoslynAssembly assembly);
    public sealed virtual bool Equals(IXamlProperty other);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_DeclaringType();
    public sealed virtual IXamlType get_PropertyType();
    [NullableContextAttribute("2")]
public sealed virtual IXamlMethod get_Getter();
    [NullableContextAttribute("2")]
public sealed virtual IXamlMethod get_Setter();
    public sealed virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public sealed virtual IReadOnlyList`1<IXamlType> get_IndexerParameters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Compiler.RoslynType : object {
    private static SymbolDisplayFormat SymbolDisplayFormat;
    private RoslynAssembly _assembly;
    private INamedTypeSymbol _symbol;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IXamlType> <GenericArguments>k__BackingField;
    public object Id { get; }
    public string Name { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public IXamlAssembly Assembly { get; }
    public bool IsPublic { get; }
    public bool IsNestedPrivate { get; }
    [NullableAttribute("2")]
public IXamlType DeclaringType { get; }
    public IReadOnlyList`1<IXamlProperty> Properties { get; }
    public IReadOnlyList`1<IXamlEventInfo> Events { get; }
    public IReadOnlyList`1<IXamlField> Fields { get; }
    public IReadOnlyList`1<IXamlMethod> Methods { get; }
    public IReadOnlyList`1<IXamlConstructor> Constructors { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public IReadOnlyList`1<IXamlType> GenericArguments { get; private set; }
    public IXamlType GenericTypeDefinition { get; }
    public bool IsArray { get; }
    [NullableAttribute("2")]
public IXamlType ArrayElementType { get; }
    [NullableAttribute("2")]
public IXamlType BaseType { get; }
    public bool IsValueType { get; }
    public bool IsEnum { get; }
    public IReadOnlyList`1<IXamlType> Interfaces { get; }
    public bool IsInterface { get; }
    public IReadOnlyList`1<IXamlType> GenericParameters { get; }
    public bool IsFunctionPointer { get; }
    public RoslynType(INamedTypeSymbol symbol, RoslynAssembly assembly);
    private static RoslynType();
    public sealed virtual bool Equals(IXamlType other);
    public sealed virtual object get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual IXamlAssembly get_Assembly();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsNestedPrivate();
    [NullableContextAttribute("2")]
public sealed virtual IXamlType get_DeclaringType();
    public sealed virtual IReadOnlyList`1<IXamlProperty> get_Properties();
    public sealed virtual IReadOnlyList`1<IXamlEventInfo> get_Events();
    public sealed virtual IReadOnlyList`1<IXamlField> get_Fields();
    public sealed virtual IReadOnlyList`1<IXamlMethod> get_Methods();
    public sealed virtual IReadOnlyList`1<IXamlConstructor> get_Constructors();
    public sealed virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IXamlType> get_GenericArguments();
    [CompilerGeneratedAttribute]
private void set_GenericArguments(IReadOnlyList`1<IXamlType> value);
    public sealed virtual bool IsAssignableFrom(IXamlType type);
    public sealed virtual IXamlType MakeGenericType(IReadOnlyList`1<IXamlType> typeArguments);
    public sealed virtual IXamlType get_GenericTypeDefinition();
    public sealed virtual bool get_IsArray();
    [NullableContextAttribute("2")]
public sealed virtual IXamlType get_ArrayElementType();
    public sealed virtual IXamlType MakeArrayType(int dimensions);
    [NullableContextAttribute("2")]
public sealed virtual IXamlType get_BaseType();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual IReadOnlyList`1<IXamlType> get_Interfaces();
    public sealed virtual bool get_IsInterface();
    public sealed virtual IXamlType GetEnumUnderlyingType();
    public sealed virtual IReadOnlyList`1<IXamlType> get_GenericParameters();
    public sealed virtual bool get_IsFunctionPointer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RoslynProperty <get_Properties>b__22_1(IPropertySymbol property);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RoslynConstructor <get_Constructors>b__30_0(IMethodSymbol method);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RoslynType <get_Interfaces>b__53_0(INamedTypeSymbol abstraction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.Compiler.RoslynTypeSystem : object {
    private List`1<IXamlAssembly> _assemblies;
    public IEnumerable`1<IXamlAssembly> Assemblies { get; }
    public RoslynTypeSystem(CSharpCompilation compilation);
    public sealed virtual IEnumerable`1<IXamlAssembly> get_Assemblies();
    public sealed virtual IXamlAssembly FindAssembly(string name);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2092")]
public sealed virtual IXamlType FindType(string name);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2092")]
public sealed virtual IXamlType FindType(string name, string assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Avalonia.Generators.GeneratorContextExtensions : object {
    private static string UnhandledErrorDescriptorId;
    private static string InvalidTypeDescriptorId;
    [ExtensionAttribute]
public static string GetMsBuildProperty(GeneratorExecutionContext context, string name, string defaultValue);
    [ExtensionAttribute]
public static void ReportNameGeneratorUnhandledError(GeneratorExecutionContext context, Exception error);
    [ExtensionAttribute]
public static void ReportNameGeneratorInvalidType(GeneratorExecutionContext context, string typeName);
    [ExtensionAttribute]
private static void Report(GeneratorExecutionContext context, string id, string title, string message, string description);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.GeneratorOptions : object {
    private GeneratorExecutionContext _context;
    public bool AvaloniaNameGeneratorIsEnabled { get; }
    public Behavior AvaloniaNameGeneratorBehavior { get; }
    public NamedFieldModifier AvaloniaNameGeneratorClassFieldModifier { get; }
    public ViewFileNamingStrategy AvaloniaNameGeneratorViewFileNamingStrategy { get; }
    public String[] AvaloniaNameGeneratorFilterByPath { get; }
    public String[] AvaloniaNameGeneratorFilterByNamespace { get; }
    public bool AvaloniaNameGeneratorAttachDevTools { get; }
    public GeneratorOptions(GeneratorExecutionContext context);
    public bool get_AvaloniaNameGeneratorIsEnabled();
    public Behavior get_AvaloniaNameGeneratorBehavior();
    public NamedFieldModifier get_AvaloniaNameGeneratorClassFieldModifier();
    public ViewFileNamingStrategy get_AvaloniaNameGeneratorViewFileNamingStrategy();
    public String[] get_AvaloniaNameGeneratorFilterByPath();
    public String[] get_AvaloniaNameGeneratorFilterByNamespace();
    public bool get_AvaloniaNameGeneratorAttachDevTools();
    private String[] GetStringArrayProperty(BuildProperties name, string defaultValue);
    [NullableContextAttribute("0")]
private TEnum GetEnumProperty(BuildProperties name, TEnum defaultValue);
    private bool GetBoolProperty(BuildProperties name, bool defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.NameGenerator.AvaloniaNameGenerator : object {
    private ViewFileNamingStrategy _naming;
    private IGlobPattern _pathPattern;
    private IGlobPattern _namespacePattern;
    private IViewResolver _classes;
    private INameResolver _names;
    private ICodeGenerator _code;
    public AvaloniaNameGenerator(ViewFileNamingStrategy naming, IGlobPattern pathPattern, IGlobPattern namespacePattern, IViewResolver classes, INameResolver names, ICodeGenerator code);
    public sealed virtual IEnumerable`1<GeneratedPartialClass> GenerateNameReferences(IEnumerable`1<AdditionalText> additionalFiles, CancellationToken cancellationToken);
    private static string ResolveViewFileName(ResolvedView view, ViewFileNamingStrategy strategy);
}
[GeneratorAttribute]
public class Avalonia.Generators.NameGenerator.AvaloniaNameSourceGenerator : object {
    [NullableAttribute("1")]
private static string SourceItemGroupMetadata;
    public sealed virtual void Initialize(GeneratorInitializationContext context);
    public sealed virtual void Execute(GeneratorExecutionContext context);
    [NullableContextAttribute("1")]
private static IEnumerable`1<AdditionalText> ResolveAdditionalFiles(GeneratorExecutionContext context);
    [NullableContextAttribute("2")]
private static INameGenerator CreateNameGenerator(GeneratorExecutionContext context);
}
internal enum Avalonia.Generators.NameGenerator.Behavior : Enum {
    public int value__;
    public static Behavior OnlyProperties;
    public static Behavior InitializeComponent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.NameGenerator.GeneratedPartialClass : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string FileName { get; public set; }
    public string Content { get; public set; }
    public GeneratedPartialClass(string FileName, string Content);
    [CompilerGeneratedAttribute]
protected GeneratedPartialClass(GeneratedPartialClass original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Content(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(GeneratedPartialClass left, GeneratedPartialClass right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(GeneratedPartialClass left, GeneratedPartialClass right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(GeneratedPartialClass other);
    [CompilerGeneratedAttribute]
public virtual GeneratedPartialClass <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& FileName, String& Content);
}
[NullableContextAttribute("1")]
internal interface Avalonia.Generators.NameGenerator.INameGenerator {
    public abstract virtual IEnumerable`1<GeneratedPartialClass> GenerateNameReferences(IEnumerable`1<AdditionalText> additionalFiles, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.NameGenerator.InitializeComponentCodeGenerator : object {
    private string _generatorName;
    private string _generatorVersion;
    private bool _diagnosticsAreConnected;
    private static string AttachDevToolsCodeBlock;
    private static string AttachDevToolsParameterDocumentation;
    public InitializeComponentCodeGenerator(IXamlTypeSystem types, bool avaloniaNameGeneratorAttachDevTools);
    public sealed virtual string GenerateCode(string className, string nameSpace, IXamlType xamlType, IEnumerable`1<ResolvedName> names);
    private static bool IsWindow(IXamlType xamlType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Generators.NameGenerator.OnlyPropertiesCodeGenerator : object {
    private string _generatorName;
    private string _generatorVersion;
    public sealed virtual string GenerateCode(string className, string nameSpace, IXamlType xamlType, IEnumerable`1<ResolvedName> names);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCode>b__2_0(ResolvedName info);
}
internal enum Avalonia.Generators.NameGenerator.Options : Enum {
    public int value__;
    public static Options Public;
    public static Options Private;
    public static Options Internal;
    public static Options Protected;
}
internal enum Avalonia.Generators.NameGenerator.ViewFileNamingStrategy : Enum {
    public int value__;
    public static ViewFileNamingStrategy ClassName;
    public static ViewFileNamingStrategy NamespaceAndClassName;
}
internal static class Avalonia.Generators.TrimmingMessages : object {
    [NullableAttribute("1")]
public static string Roslyn;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("352")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[ExtensionAttribute]
public static class System.StringCompatibilityExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Contains(string str, char search);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsTopLevelInternal(Type t);
    [ExtensionAttribute]
public static bool IsNestedlPublic_Or_Internal(Type t);
}
internal interface XamlX.Ast.ISkipXamlAstNode {
}
internal interface XamlX.Ast.IXamlAstImperativeNode {
}
internal interface XamlX.Ast.IXamlAstManipulationNode {
}
[NullableContextAttribute("1")]
internal interface XamlX.Ast.IXamlAstNode {
    public abstract virtual void VisitChildren(IXamlAstVisitor visitor);
    public abstract virtual IXamlAstNode Visit(IXamlAstVisitor visitor);
}
internal interface XamlX.Ast.IXamlAstNodeNeedsParentStack {
    public bool NeedsParentStack { get; }
    public abstract virtual bool get_NeedsParentStack();
}
internal interface XamlX.Ast.IXamlAstPropertyReference {
}
internal interface XamlX.Ast.IXamlAstTypeReference {
    public bool IsMarkupExtension { get; }
    public abstract virtual bool get_IsMarkupExtension();
    [NullableContextAttribute("1")]
public abstract virtual bool Equals(IXamlAstTypeReference other);
}
internal interface XamlX.Ast.IXamlAstValueNode {
    [NullableAttribute("1")]
public IXamlAstTypeReference Type { get; }
    [NullableContextAttribute("1")]
public abstract virtual IXamlAstTypeReference get_Type();
}
[NullableContextAttribute("1")]
internal interface XamlX.Ast.IXamlAstVisitor {
    public abstract virtual IXamlAstNode Visit(IXamlAstNode node);
    public abstract virtual void Push(IXamlAstNode node);
    public abstract virtual void Pop();
}
internal interface XamlX.Ast.IXamlILOptimizedEmitablePropertySetter {
    [NullableContextAttribute("1")]
public abstract virtual void EmitWithArguments(XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter emitter, IReadOnlyList`1<IXamlAstValueNode> arguments);
}
internal interface XamlX.Ast.IXamlLineInfo {
    public int Line { get; public set; }
    public int Position { get; public set; }
    public abstract virtual int get_Line();
    public abstract virtual void set_Line(int value);
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
}
[NullableContextAttribute("1")]
internal interface XamlX.Ast.IXamlPropertySetter {
    public IXamlType TargetType { get; }
    public PropertySetterBinderParameters BinderParameters { get; }
    public IReadOnlyList`1<IXamlType> Parameters { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public abstract virtual IXamlType get_TargetType();
    public abstract virtual PropertySetterBinderParameters get_BinderParameters();
    public abstract virtual IReadOnlyList`1<IXamlType> get_Parameters();
    public abstract virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
}
[NullableContextAttribute("1")]
internal interface XamlX.Ast.IXamlWrappedMethod {
    public string Name { get; }
    public IXamlType ReturnType { get; }
    public IXamlType DeclaringType { get; }
    public IReadOnlyList`1<IXamlType> ParametersWithThis { get; }
    public abstract virtual string get_Name();
    public abstract virtual IXamlType get_ReturnType();
    public abstract virtual IXamlType get_DeclaringType();
    public abstract virtual IReadOnlyList`1<IXamlType> get_ParametersWithThis();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class XamlX.Ast.PropertySetterBinderParameters : object {
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowXNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRuntimeNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAttributeSyntax>k__BackingField;
    public bool AllowMultiple { get; public set; }
    public bool AllowXNull { get; public set; }
    public bool AllowRuntimeNull { get; public set; }
    public bool AllowAttributeSyntax { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public void set_AllowMultiple(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowXNull();
    [CompilerGeneratedAttribute]
public void set_AllowXNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowRuntimeNull();
    [CompilerGeneratedAttribute]
public void set_AllowRuntimeNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAttributeSyntax();
    [CompilerGeneratedAttribute]
public void set_AllowAttributeSyntax(bool value);
    public sealed virtual bool Equals(PropertySetterBinderParameters other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class XamlX.Ast.SkipXamlAstNode : XamlAstNode {
    [NullableAttribute("1")]
public IXamlAstTypeReference Type { get; }
    [NullableContextAttribute("1")]
public SkipXamlAstNode(IXamlLineInfo lineInfo);
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstTypeReference get_Type();
    [NullableContextAttribute("1")]
public virtual void VisitChildren(IXamlAstVisitor visitor);
}
internal class XamlX.Ast.SkipXamlValueWithManipulationNode : XamlValueWithManipulationNode {
    [NullableContextAttribute("1")]
public SkipXamlValueWithManipulationNode(IXamlLineInfo lineInfo);
    [NullableContextAttribute("1")]
public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstClrProperty : XamlAstNode {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrivate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFamily>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IXamlMethod <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlPropertySetter> <Setters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlCustomAttribute> <CustomAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IXamlType, IXamlType> <TypeConverters>k__BackingField;
    public string Name { get; public set; }
    public bool IsPublic { get; public set; }
    public bool IsPrivate { get; public set; }
    public bool IsFamily { get; public set; }
    [NullableAttribute("2")]
public IXamlMethod Getter { get; public set; }
    public List`1<IXamlPropertySetter> Setters { get; public set; }
    public List`1<IXamlCustomAttribute> CustomAttributes { get; public set; }
    public IXamlType DeclaringType { get; public set; }
    public Dictionary`2<IXamlType, IXamlType> TypeConverters { get; public set; }
    public XamlAstClrProperty(IXamlLineInfo lineInfo, IXamlProperty property, TransformerConfiguration cfg);
    public XamlAstClrProperty(IXamlLineInfo lineInfo, string name, IXamlType declaringType, IXamlMethod getter, IEnumerable`1<IXamlPropertySetter> setters);
    public XamlAstClrProperty(IXamlLineInfo lineInfo, string name, IXamlType declaringType, IXamlMethod getter, IXamlMethod[] setters);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPublic();
    [CompilerGeneratedAttribute]
public void set_IsPublic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPrivate();
    [CompilerGeneratedAttribute]
public void set_IsPrivate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFamily();
    [CompilerGeneratedAttribute]
public void set_IsFamily(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IXamlMethod get_Getter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Getter(IXamlMethod value);
    [CompilerGeneratedAttribute]
public List`1<IXamlPropertySetter> get_Setters();
    [CompilerGeneratedAttribute]
public void set_Setters(List`1<IXamlPropertySetter> value);
    [CompilerGeneratedAttribute]
public List`1<IXamlCustomAttribute> get_CustomAttributes();
    [CompilerGeneratedAttribute]
public void set_CustomAttributes(List`1<IXamlCustomAttribute> value);
    [CompilerGeneratedAttribute]
public IXamlType get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(IXamlType value);
    [CompilerGeneratedAttribute]
public Dictionary`2<IXamlType, IXamlType> get_TypeConverters();
    [CompilerGeneratedAttribute]
public void set_TypeConverters(Dictionary`2<IXamlType, IXamlType> value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstClrTypeReference : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMarkupExtension>k__BackingField;
    public IXamlType Type { get; }
    public bool IsMarkupExtension { get; }
    public XamlAstClrTypeReference(IXamlLineInfo lineInfo, IXamlType type, bool isMarkupExtension);
    [CompilerGeneratedAttribute]
public IXamlType get_Type();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMarkupExtension();
    public sealed virtual bool Equals(IXamlAstTypeReference other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstCompilerLocalNode : XamlAstNode {
    private XamlAstClrTypeReference _typeReference;
    [CompilerGeneratedAttribute]
private IXamlType <Type>k__BackingField;
    public IXamlType Type { get; }
    private IXamlAstTypeReference XamlX.Ast.IXamlAstValueNode.Type { get; }
    public XamlAstCompilerLocalNode(IXamlLineInfo lineInfo, XamlAstClrTypeReference type);
    public XamlAstCompilerLocalNode(IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public IXamlType get_Type();
    private sealed virtual override IXamlAstTypeReference XamlX.Ast.IXamlAstValueNode.get_Type();
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstConstructableObjectNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlConstructor <Constructor>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstValueNode> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstNode> <Children>k__BackingField;
    public IXamlAstTypeReference Type { get; public set; }
    public IXamlConstructor Constructor { get; }
    public List`1<IXamlAstValueNode> Arguments { get; public set; }
    public List`1<IXamlAstNode> Children { get; public set; }
    public XamlAstConstructableObjectNode(IXamlLineInfo lineInfo, XamlAstClrTypeReference type, IXamlConstructor ctor, List`1<IXamlAstValueNode> arguments, List`1<IXamlAstNode> children);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IXamlAstTypeReference value);
    [CompilerGeneratedAttribute]
public IXamlConstructor get_Constructor();
    [CompilerGeneratedAttribute]
public List`1<IXamlAstValueNode> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(List`1<IXamlAstValueNode> value);
    [CompilerGeneratedAttribute]
public List`1<IXamlAstNode> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<IXamlAstNode> value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstContextLocalNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public IXamlAstTypeReference Type { get; }
    public XamlAstContextLocalNode(IXamlLineInfo lineInfo, IXamlType type);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class XamlX.Ast.XamlAstExtensions : object {
    [ExtensionAttribute]
public static IXamlType GetClrType(IXamlAstTypeReference r);
    [ExtensionAttribute]
public static XamlAstClrTypeReference GetClrTypeReference(IXamlAstTypeReference r);
    [ExtensionAttribute]
public static XamlAstClrProperty GetClrProperty(IXamlAstPropertyReference r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstImperativeValueManipulation : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstValueNode <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstManipulationNode <Manipulation>k__BackingField;
    public IXamlAstValueNode Value { get; public set; }
    public IXamlAstManipulationNode Manipulation { get; public set; }
    public XamlAstImperativeValueManipulation(IXamlLineInfo lineInfo, IXamlAstValueNode value, IXamlAstManipulationNode manipulation);
    [CompilerGeneratedAttribute]
public IXamlAstValueNode get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public IXamlAstManipulationNode get_Manipulation();
    [CompilerGeneratedAttribute]
public void set_Manipulation(IXamlAstManipulationNode value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstLocalInitializationNodeEmitter : XamlValueWithSideEffectNodeBase {
    [CompilerGeneratedAttribute]
private XamlAstCompilerLocalNode <Local>k__BackingField;
    public XamlAstCompilerLocalNode Local { get; public set; }
    public XamlAstLocalInitializationNodeEmitter(IXamlLineInfo lineInfo, IXamlAstValueNode value, XamlAstCompilerLocalNode local);
    [CompilerGeneratedAttribute]
public XamlAstCompilerLocalNode get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(XamlAstCompilerLocalNode value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstManipulationImperativeNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstImperativeNode <Imperative>k__BackingField;
    public IXamlAstImperativeNode Imperative { get; public set; }
    public XamlAstManipulationImperativeNode(IXamlLineInfo lineInfo, IXamlAstImperativeNode imperative);
    [CompilerGeneratedAttribute]
public IXamlAstImperativeNode get_Imperative();
    [CompilerGeneratedAttribute]
public void set_Imperative(IXamlAstImperativeNode value);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstNamePropertyReference : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <TargetType>k__BackingField;
    public IXamlAstTypeReference DeclaringType { get; public set; }
    public string Name { get; public set; }
    public IXamlAstTypeReference TargetType { get; public set; }
    public XamlAstNamePropertyReference(IXamlLineInfo lineInfo, IXamlAstTypeReference declaringType, string name, IXamlAstTypeReference targetType);
    [CompilerGeneratedAttribute]
public IXamlAstTypeReference get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(IXamlAstTypeReference value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IXamlAstTypeReference get_TargetType();
    [CompilerGeneratedAttribute]
public void set_TargetType(IXamlAstTypeReference value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
internal class XamlX.Ast.XamlAstNeedsParentStackValueNode : XamlValueWithSideEffectNodeBase {
    public bool NeedsParentStack { get; }
    [NullableContextAttribute("1")]
public XamlAstNeedsParentStackValueNode(IXamlLineInfo lineInfo, IXamlAstValueNode value);
    [NullableContextAttribute("1")]
public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
    public sealed virtual bool get_NeedsParentStack();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstNewClrObjectNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlConstructor <Constructor>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstValueNode> <Arguments>k__BackingField;
    public IXamlAstTypeReference Type { get; public set; }
    public IXamlConstructor Constructor { get; }
    public List`1<IXamlAstValueNode> Arguments { get; public set; }
    public XamlAstNewClrObjectNode(IXamlLineInfo lineInfo, XamlAstClrTypeReference type, IXamlConstructor ctor, List`1<IXamlAstValueNode> arguments);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IXamlAstTypeReference value);
    [CompilerGeneratedAttribute]
public IXamlConstructor get_Constructor();
    [CompilerGeneratedAttribute]
public List`1<IXamlAstValueNode> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(List`1<IXamlAstValueNode> value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class XamlX.Ast.XamlAstNode : object {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Line { get; public set; }
    public int Position { get; public set; }
    public XamlAstNode(IXamlLineInfo lineInfo);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Line();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Line(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Position();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Position(int value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    public sealed virtual IXamlAstNode Visit(IXamlAstVisitor visitor);
    protected static void VisitList(IList`1<T> list, IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstObjectNode : XamlAstNode {
    private IXamlAstTypeReference _type;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstValueNode> <Arguments>k__BackingField;
    public IXamlAstTypeReference Type { get; public set; }
    public List`1<IXamlAstNode> Children { get; public set; }
    public List`1<IXamlAstValueNode> Arguments { get; public set; }
    public XamlAstObjectNode(IXamlLineInfo lineInfo, IXamlAstTypeReference type);
    public sealed virtual IXamlAstTypeReference get_Type();
    public void set_Type(IXamlAstTypeReference value);
    [CompilerGeneratedAttribute]
public List`1<IXamlAstNode> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<IXamlAstNode> value);
    [CompilerGeneratedAttribute]
public List`1<IXamlAstValueNode> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(List`1<IXamlAstValueNode> value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstRuntimeCastNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstValueNode <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public IXamlAstValueNode Value { get; public set; }
    public IXamlAstTypeReference Type { get; public set; }
    public XamlAstRuntimeCastNode(IXamlLineInfo lineInfo, IXamlAstValueNode value, IXamlAstTypeReference castTo);
    [CompilerGeneratedAttribute]
public IXamlAstValueNode get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IXamlAstTypeReference value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstTextNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveWhitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public string Text { get; public set; }
    public bool PreserveWhitespace { get; }
    public IXamlAstTypeReference Type { get; public set; }
    public XamlAstTextNode(IXamlLineInfo lineInfo, string text, bool preserveWhitespace, IXamlType type);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_PreserveWhitespace();
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IXamlAstTypeReference value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstXamlPropertyValueNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstPropertyReference <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstValueNode> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttributeSyntax>k__BackingField;
    public IXamlAstPropertyReference Property { get; public set; }
    public List`1<IXamlAstValueNode> Values { get; public set; }
    public bool IsAttributeSyntax { get; }
    public XamlAstXamlPropertyValueNode(IXamlLineInfo lineInfo, IXamlAstPropertyReference property, IXamlAstValueNode value, bool isAttributeSyntax);
    public XamlAstXamlPropertyValueNode(IXamlLineInfo lineInfo, IXamlAstPropertyReference property, IEnumerable`1<IXamlAstValueNode> values, bool isAttributeSyntax);
    [CompilerGeneratedAttribute]
public IXamlAstPropertyReference get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(IXamlAstPropertyReference value);
    [CompilerGeneratedAttribute]
public List`1<IXamlAstValueNode> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<IXamlAstValueNode> value);
    [CompilerGeneratedAttribute]
public bool get_IsAttributeSyntax();
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstXmlDirective : XamlAstNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstValueNode> <Values>k__BackingField;
    [NullableAttribute("2")]
public string Namespace { get; public set; }
    public string Name { get; public set; }
    public List`1<IXamlAstValueNode> Values { get; public set; }
    public XamlAstXmlDirective(IXamlLineInfo lineInfo, string ns, string name, IEnumerable`1<IXamlAstValueNode> values);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Namespace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<IXamlAstValueNode> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<IXamlAstValueNode> value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlAstXmlTypeReference : XamlAstNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMarkupExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XamlAstXmlTypeReference> <GenericArguments>k__BackingField;
    [NullableAttribute("2")]
public string XmlNamespace { get; public set; }
    public string Name { get; public set; }
    public bool IsMarkupExtension { get; public set; }
    public List`1<XamlAstXmlTypeReference> GenericArguments { get; public set; }
    public XamlAstXmlTypeReference(IXamlLineInfo lineInfo, string xmlNamespace, string name, IEnumerable`1<XamlAstXmlTypeReference> genericArguments);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_XmlNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMarkupExtension();
    [CompilerGeneratedAttribute]
public void set_IsMarkupExtension(bool value);
    public sealed virtual bool Equals(IXamlAstTypeReference other);
    [CompilerGeneratedAttribute]
public List`1<XamlAstXmlTypeReference> get_GenericArguments();
    [CompilerGeneratedAttribute]
public void set_GenericArguments(List`1<XamlAstXmlTypeReference> value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlConstantNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private object <Constant>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public object Constant { get; }
    public IXamlAstTypeReference Type { get; }
    public XamlConstantNode(IXamlLineInfo lineInfo, IXamlType type, object constant);
    [CompilerGeneratedAttribute]
public object get_Constant();
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlDeferredContentInitializeIntermediateRootNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstValueNode <Value>k__BackingField;
    public IXamlAstValueNode Value { get; public set; }
    public IXamlAstTypeReference Type { get; }
    public XamlDeferredContentInitializeIntermediateRootNode(IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public IXamlAstValueNode get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IXamlAstValueNode value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    public sealed virtual IXamlAstTypeReference get_Type();
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlDeferredContentNode : XamlAstNode {
    [NullableAttribute("2")]
private IXamlMethod _deferredContentCustomization;
    [NullableAttribute("2")]
private IXamlType _deferredContentCustomizationTypeParameter;
    private IXamlType _funcType;
    [CompilerGeneratedAttribute]
private IXamlAstValueNode <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public IXamlAstValueNode Value { get; public set; }
    public IXamlAstTypeReference Type { get; }
    public XamlDeferredContentNode(IXamlAstValueNode value, IXamlType deferredContentCustomizationTypeParameter, TransformerConfiguration config);
    [CompilerGeneratedAttribute]
public IXamlAstValueNode get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    private void CompileBuilder(ILEmitContext context, XamlClosureInfo xamlClosure);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
    private static bool IsFunctionPointerLike(IXamlType xamlType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlDirectCallPropertySetter : object {
    private IXamlMethod _method;
    [CompilerGeneratedAttribute]
private IXamlType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertySetterBinderParameters <BinderParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IXamlType> <Parameters>k__BackingField;
    public IXamlType TargetType { get; }
    public PropertySetterBinderParameters BinderParameters { get; }
    public IReadOnlyList`1<IXamlType> Parameters { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public XamlDirectCallPropertySetter(IXamlMethod method);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlType get_TargetType();
    [CompilerGeneratedAttribute]
public sealed virtual PropertySetterBinderParameters get_BinderParameters();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IXamlType> get_Parameters();
    public sealed virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public sealed virtual void Emit(IXamlILEmitter emitter);
    public sealed virtual void EmitWithArguments(XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter emitter, IReadOnlyList`1<IXamlAstValueNode> arguments);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(XamlDirectCallPropertySetter other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlDocument : object {
    [NullableAttribute("2")]
private IXamlAstNode _root;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <NamespaceAliases>k__BackingField;
    public IXamlAstNode Root { get; public set; }
    [NullableAttribute("2")]
public string Document { get; public set; }
    public Dictionary`2<string, string> NamespaceAliases { get; public set; }
    public IXamlAstNode get_Root();
    public void set_Root(IXamlAstNode value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Document();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Document(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_NamespaceAliases();
    [CompilerGeneratedAttribute]
public void set_NamespaceAliases(Dictionary`2<string, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlIntermediateRootObjectNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public IXamlAstTypeReference Type { get; public set; }
    public XamlIntermediateRootObjectNode(IXamlLineInfo lineInfo, XamlTypeWellKnownTypes types);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IXamlAstTypeReference value);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlLoadMethodDelegateNode : XamlValueWithSideEffectNodeBase {
    [CompilerGeneratedAttribute]
private IXamlType <DelegateType>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public IXamlType DelegateType { get; }
    public IXamlMethod Method { get; }
    public IXamlAstTypeReference Type { get; }
    public XamlLoadMethodDelegateNode(IXamlLineInfo lineInfo, IXamlAstValueNode value, IXamlType delegateType, IXamlMethod method);
    [CompilerGeneratedAttribute]
public IXamlType get_DelegateType();
    [CompilerGeneratedAttribute]
public IXamlMethod get_Method();
    [CompilerGeneratedAttribute]
public virtual IXamlAstTypeReference get_Type();
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlManipulationGroupNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private List`1<IXamlAstManipulationNode> <Children>k__BackingField;
    public List`1<IXamlAstManipulationNode> Children { get; public set; }
    public XamlManipulationGroupNode(IXamlLineInfo lineInfo, IEnumerable`1<IXamlAstManipulationNode> children);
    [CompilerGeneratedAttribute]
public List`1<IXamlAstManipulationNode> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<IXamlAstManipulationNode> value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlMarkupExtensionNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstValueNode <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlMethod <ProvideValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public IXamlAstValueNode Value { get; public set; }
    public IXamlMethod ProvideValue { get; }
    public bool NeedsParentStack { get; }
    public IXamlAstTypeReference Type { get; }
    public XamlMarkupExtensionNode(IXamlLineInfo lineInfo, IXamlMethod provideValue, IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public IXamlAstValueNode get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public IXamlMethod get_ProvideValue();
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    public sealed virtual bool get_NeedsParentStack();
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class XamlX.Ast.XamlMethodCallBaseNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlWrappedMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstValueNode> <Arguments>k__BackingField;
    public IXamlWrappedMethod Method { get; public set; }
    public List`1<IXamlAstValueNode> Arguments { get; public set; }
    public XamlMethodCallBaseNode(IXamlLineInfo lineInfo, IXamlWrappedMethod method, IEnumerable`1<IXamlAstValueNode> args);
    [CompilerGeneratedAttribute]
public IXamlWrappedMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(IXamlWrappedMethod value);
    [CompilerGeneratedAttribute]
public List`1<IXamlAstValueNode> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(List`1<IXamlAstValueNode> value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlMethodWithCasts : object {
    private IXamlMethod _method;
    private IReadOnlyList`1<IXamlType> _baseParametersWithThis;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IXamlType> <Parameters>k__BackingField;
    public string Name { get; }
    public IXamlType ReturnType { get; }
    public IXamlType DeclaringType { get; }
    public bool IsPublic { get; }
    public bool IsPrivate { get; }
    public bool IsFamily { get; }
    public bool IsStatic { get; }
    public IReadOnlyList`1<IXamlType> Parameters { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public bool IsGenericMethodDefinition { get; }
    public IReadOnlyList`1<IXamlType> GenericParameters { get; }
    public IReadOnlyList`1<IXamlType> GenericArguments { get; }
    public bool IsGenericMethod { get; }
    public bool ContainsGenericParameters { get; }
    public XamlMethodWithCasts(IXamlMethod method, IEnumerable`1<IXamlType> newArgumentTypes);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_ReturnType();
    public sealed virtual IXamlType get_DeclaringType();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsPrivate();
    public sealed virtual bool get_IsFamily();
    public sealed virtual bool get_IsStatic();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IXamlType> get_Parameters();
    public sealed virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public sealed virtual IXamlParameterInfo GetParameterInfo(int index);
    public sealed virtual bool get_IsGenericMethodDefinition();
    public sealed virtual IReadOnlyList`1<IXamlType> get_GenericParameters();
    public sealed virtual IReadOnlyList`1<IXamlType> get_GenericArguments();
    public sealed virtual bool get_IsGenericMethod();
    public sealed virtual bool get_ContainsGenericParameters();
    public sealed virtual void EmitCall(IXamlILEmitter codeGen);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IXamlMethod other);
    public sealed virtual IXamlMethod MakeGenericMethod(IReadOnlyList`1<IXamlType> typeArguments);
}
internal class XamlX.Ast.XamlNoReturnMethodCallNode : XamlMethodCallBaseNode {
    [NullableContextAttribute("1")]
public XamlNoReturnMethodCallNode(IXamlLineInfo lineInfo, IXamlMethod method, IEnumerable`1<IXamlAstValueNode> args);
    [NullableContextAttribute("1")]
public XamlNoReturnMethodCallNode(IXamlLineInfo lineInfo, IXamlWrappedMethod method, IEnumerable`1<IXamlAstValueNode> args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlNullExtensionNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public IXamlAstTypeReference Type { get; }
    public XamlNullExtensionNode(IXamlLineInfo lineInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlObjectInitializationNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstManipulationNode <Manipulation>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipBeginInit>k__BackingField;
    public IXamlAstManipulationNode Manipulation { get; public set; }
    public IXamlType Type { get; public set; }
    public bool SkipBeginInit { get; public set; }
    public XamlObjectInitializationNode(IXamlLineInfo lineInfo, IXamlAstManipulationNode manipulation, IXamlType type);
    [CompilerGeneratedAttribute]
public IXamlAstManipulationNode get_Manipulation();
    [CompilerGeneratedAttribute]
public void set_Manipulation(IXamlAstManipulationNode value);
    [CompilerGeneratedAttribute]
public IXamlType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IXamlType value);
    [CompilerGeneratedAttribute]
public bool get_SkipBeginInit();
    [CompilerGeneratedAttribute]
public void set_SkipBeginInit(bool value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlPropertyAssignmentNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private XamlAstClrProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlPropertySetter> <PossibleSetters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstValueNode> <Values>k__BackingField;
    public XamlAstClrProperty Property { get; }
    public List`1<IXamlPropertySetter> PossibleSetters { get; public set; }
    public List`1<IXamlAstValueNode> Values { get; public set; }
    public XamlPropertyAssignmentNode(IXamlLineInfo lineInfo, XamlAstClrProperty property, IEnumerable`1<IXamlPropertySetter> setters, IEnumerable`1<IXamlAstValueNode> values);
    [CompilerGeneratedAttribute]
public XamlAstClrProperty get_Property();
    [CompilerGeneratedAttribute]
public List`1<IXamlPropertySetter> get_PossibleSetters();
    [CompilerGeneratedAttribute]
public void set_PossibleSetters(List`1<IXamlPropertySetter> value);
    [CompilerGeneratedAttribute]
public List`1<IXamlAstValueNode> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<IXamlAstValueNode> value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlPropertyValueManipulationNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private XamlAstClrProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstManipulationNode <Manipulation>k__BackingField;
    public XamlAstClrProperty Property { get; public set; }
    public IXamlAstManipulationNode Manipulation { get; public set; }
    public XamlPropertyValueManipulationNode(IXamlLineInfo lineInfo, XamlAstClrProperty property, IXamlAstManipulationNode manipulation);
    [CompilerGeneratedAttribute]
public XamlAstClrProperty get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(XamlAstClrProperty value);
    [CompilerGeneratedAttribute]
public IXamlAstManipulationNode get_Manipulation();
    [CompilerGeneratedAttribute]
public void set_Manipulation(IXamlAstManipulationNode value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlRootObjectNode : XamlAstNode {
    private IXamlAstTypeReference _type;
    public IXamlAstTypeReference Type { get; public set; }
    public XamlRootObjectNode(XamlAstObjectNode root);
    public sealed virtual IXamlAstTypeReference get_Type();
    public void set_Type(IXamlAstTypeReference value);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlStaticExtensionNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private string <Member>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IXamlAstTypeReference <TargetType>k__BackingField;
    public string Member { get; public set; }
    [NullableAttribute("2")]
public IXamlAstTypeReference TargetType { get; public set; }
    public IXamlAstTypeReference Type { get; }
    public XamlStaticExtensionNode(XamlAstObjectNode lineInfo, IXamlAstTypeReference targetType, string member);
    [CompilerGeneratedAttribute]
public string get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IXamlAstTypeReference get_TargetType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TargetType(IXamlAstTypeReference value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
    [NullableContextAttribute("2")]
internal IXamlMember ResolveMember(bool throwOnUnknown);
    public sealed virtual IXamlAstTypeReference get_Type();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ResolveMember>b__11_0(IXamlField f);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ResolveMember>b__11_1(IXamlProperty p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlStaticOrTargetedReturnMethodCallNode : XamlMethodCallBaseNode {
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public IXamlAstTypeReference Type { get; }
    public XamlStaticOrTargetedReturnMethodCallNode(IXamlLineInfo lineInfo, IXamlWrappedMethod method, IEnumerable`1<IXamlAstValueNode> args);
    public XamlStaticOrTargetedReturnMethodCallNode(IXamlLineInfo lineInfo, IXamlMethod method, IEnumerable`1<IXamlAstValueNode> args);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlToArrayNode : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstValueNode <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    public IXamlAstValueNode Value { get; public set; }
    public IXamlAstTypeReference Type { get; }
    public XamlToArrayNode(IXamlLineInfo lineInfo, IXamlAstTypeReference arrayType, IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public IXamlAstValueNode get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlTypeExtensionNode : XamlAstNode {
    private IXamlType _systemType;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlAstTypeReference <Value>k__BackingField;
    public IXamlAstTypeReference Type { get; }
    public IXamlAstTypeReference Value { get; public set; }
    public XamlTypeExtensionNode(IXamlLineInfo lineInfo, IXamlAstTypeReference value, IXamlType systemType);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlAstTypeReference get_Type();
    [CompilerGeneratedAttribute]
public IXamlAstTypeReference get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IXamlAstTypeReference value);
    public virtual void VisitChildren(IXamlAstVisitor visitor);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlValueNodeWithBeginInit : XamlValueWithSideEffectNodeBase {
    public XamlValueNodeWithBeginInit(IXamlAstValueNode value);
    public sealed virtual XamlILNodeEmitResult Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlValueWithManipulationNode : XamlValueWithSideEffectNodeBase {
    [CompilerGeneratedAttribute]
private IXamlAstManipulationNode <Manipulation>k__BackingField;
    public IXamlAstManipulationNode Manipulation { get; public set; }
    [NullableContextAttribute("1")]
public XamlValueWithManipulationNode(IXamlLineInfo lineInfo, IXamlAstValueNode value, IXamlAstManipulationNode manipulation);
    [CompilerGeneratedAttribute]
public IXamlAstManipulationNode get_Manipulation();
    [CompilerGeneratedAttribute]
public void set_Manipulation(IXamlAstManipulationNode value);
    [NullableContextAttribute("1")]
public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class XamlX.Ast.XamlValueWithSideEffectNodeBase : XamlAstNode {
    [CompilerGeneratedAttribute]
private IXamlAstValueNode <Value>k__BackingField;
    public IXamlAstValueNode Value { get; public set; }
    public IXamlAstTypeReference Type { get; }
    protected XamlValueWithSideEffectNodeBase(IXamlLineInfo lineInfo, IXamlAstValueNode value);
    [CompilerGeneratedAttribute]
public IXamlAstValueNode get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IXamlAstValueNode value);
    public virtual IXamlAstTypeReference get_Type();
    public virtual void VisitChildren(IXamlAstVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlWrappedMethod : object {
    private IXamlMethod _method;
    [CompilerGeneratedAttribute]
private IXamlType <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IXamlType> <ParametersWithThis>k__BackingField;
    public string Name { get; }
    public IXamlType ReturnType { get; }
    public IXamlType DeclaringType { get; }
    public IReadOnlyList`1<IXamlType> ParametersWithThis { get; }
    public XamlWrappedMethod(IXamlMethod method);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IXamlType get_ReturnType();
    public sealed virtual IXamlType get_DeclaringType();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IXamlType> get_ParametersWithThis();
    public sealed virtual void Emit(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen, bool swallowResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Ast.XamlWrappedMethodWithCasts : object {
    private IXamlWrappedMethod _method;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IXamlType> <ParametersWithThis>k__BackingField;
    public string Name { get; }
    public IXamlType ReturnType { get; }
    public IXamlType DeclaringType { get; }
    public IReadOnlyList`1<IXamlType> ParametersWithThis { get; }
    public XamlWrappedMethodWithCasts(IXamlWrappedMethod method, IEnumerable`1<IXamlType> newArgumentTypes);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_ReturnType();
    public sealed virtual IXamlType get_DeclaringType();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IXamlType> get_ParametersWithThis();
    public sealed virtual void Emit(XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen, bool swallowResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class XamlX.Compiler.XamlCompiler`2 : object {
    protected TransformerConfiguration _configuration;
    protected XamlLanguageEmitMappings`2<TBackendEmitter, TEmitResult> _emitMappings;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstTransformer> <Transformers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IXamlAstTransformer> <SimplificationTransformers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <Emitters>k__BackingField;
    public List`1<IXamlAstTransformer> Transformers { get; }
    public List`1<IXamlAstTransformer> SimplificationTransformers { get; }
    public List`1<object> Emitters { get; }
    public XamlCompiler`2(TransformerConfiguration configuration, XamlLanguageEmitMappings`2<TBackendEmitter, TEmitResult> emitMappings, bool fillWithDefaults);
    [CompilerGeneratedAttribute]
public List`1<IXamlAstTransformer> get_Transformers();
    [CompilerGeneratedAttribute]
public List`1<IXamlAstTransformer> get_SimplificationTransformers();
    [CompilerGeneratedAttribute]
public List`1<object> get_Emitters();
    public AstTransformationContext CreateTransformationContext(XamlDocument doc);
    public void Transform(XamlDocument doc);
    protected abstract virtual XamlEmitContext`2<TBackendEmitter, TEmitResult> InitCodeGen(IFileSource file, IXamlTypeBuilder`1<TBackendEmitter> declaringType, TBackendEmitter codeGen, XamlRuntimeContext`2<TBackendEmitter, TEmitResult> context, bool needContextLocal);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class XamlX.Compiler.XamlImperativeCompiler`2 : XamlCompiler`2<TBackendEmitter, TEmitResult> {
    public XamlImperativeCompiler`2(TransformerConfiguration configuration, XamlLanguageEmitMappings`2<TBackendEmitter, TEmitResult> emitMappings, bool fillWithDefaults);
    public IXamlMethodBuilder`1<TBackendEmitter> DefinePopulateMethod(IXamlTypeBuilder`1<TBackendEmitter> typeBuilder, XamlDocument doc, string name, XamlVisibility visibility);
    public IXamlMethodBuilder`1<TBackendEmitter> DefineBuildMethod(IXamlTypeBuilder`1<TBackendEmitter> typeBuilder, XamlDocument doc, string name, XamlVisibility visibility);
    public void Compile(XamlDocument doc, IXamlTypeBuilder`1<TBackendEmitter> typeBuilder, IXamlType contextType, string populateMethodName, string createMethodName, string namespaceInfoClassName, string baseUri, IFileSource fileSource);
    public void Compile(XamlDocument doc, IXamlType contextType, IXamlMethodBuilder`1<TBackendEmitter> populateMethod, IXamlTypeBuilder`1<TBackendEmitter> populateDeclaringType, IXamlMethodBuilder`1<TBackendEmitter> buildMethod, IXamlTypeBuilder`1<TBackendEmitter> buildDeclaringType, IXamlTypeBuilder`1<TBackendEmitter> namespaceInfoBuilder, string baseUri, IFileSource fileSource);
    protected abstract virtual void CompilePopulate(IFileSource fileSource, IXamlAstManipulationNode manipulation, IXamlTypeBuilder`1<TBackendEmitter> declaringType, TBackendEmitter codeGen, XamlRuntimeContext`2<TBackendEmitter, TEmitResult> context);
    protected abstract virtual void CompileBuild(IFileSource fileSource, IXamlAstValueNode rootInstance, IXamlTypeBuilder`1<TBackendEmitter> declaringType, TBackendEmitter codeGen, XamlRuntimeContext`2<TBackendEmitter, TEmitResult> context, IXamlMethod compiledPopulate);
    protected abstract virtual XamlRuntimeContext`2<TBackendEmitter, TEmitResult> CreateRuntimeContext(XamlDocument doc, IXamlType contextType, IXamlTypeBuilder`1<TBackendEmitter> namespaceInfoBuilder, string baseUri, IXamlType rootType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class XamlX.ContextDiagnosticExtensions : object {
    [ExtensionAttribute]
public static IXamlAstNode ReportDiagnostic(AstTransformationContext context, string diagnosticCode, XamlDiagnosticSeverity severity, string title, IXamlAstNode offender, XamlDiagnosticSeverity minSeverity);
    [ExtensionAttribute]
public static IXamlAstNode ReportTransformError(AstTransformationContext context, string title, IXamlAstNode offender);
    [ExtensionAttribute]
public static TReturn ReportTransformError(AstTransformationContext context, string title, IXamlLineInfo offender, TReturn ret);
    [ExtensionAttribute]
public static TReturn ReportError(AstTransformationContext context, Exception exception, TReturn ret);
    [ExtensionAttribute]
public static XamlDiagnostic ToDiagnostic(Exception exception, AstTransformationContext context);
    [ExtensionAttribute]
public static Exception ToException(XamlDiagnostic diagnostic);
    [ExtensionAttribute]
public static void ThrowExceptionIfAnyError(IEnumerable`1<XamlDiagnostic> diagnostics);
}
[NullableContextAttribute("1")]
internal interface XamlX.Emit.IHasLocalsPool {
    public XamlLocalsPool LocalsPool { get; }
    public abstract virtual XamlLocalsPool get_LocalsPool();
    public abstract virtual IXamlLocal DefineLocal(IXamlType type);
}
[NullableContextAttribute("1")]
internal interface XamlX.Emit.IXamlAstEmitableNode`2 {
    public abstract virtual TEmitResult Emit(XamlEmitContext`2<TBackendEmitter, TEmitResult> context, TBackendEmitter codeGen);
}
[NullableContextAttribute("1")]
internal interface XamlX.Emit.IXamlAstLocalsEmitableNode`2 {
    public abstract virtual TEmitResult Emit(XamlEmitContextWithLocals`2<TBackendEmitter, TEmitResult> context, TBackendEmitter codeGen);
}
[NullableContextAttribute("1")]
internal interface XamlX.Emit.IXamlAstLocalsNodeEmitter`2 {
    public abstract virtual TEmitResult Emit(IXamlAstNode node, XamlEmitContextWithLocals`2<TBackendEmitter, TEmitResult> context, TBackendEmitter codeGen);
}
[NullableContextAttribute("1")]
internal interface XamlX.Emit.IXamlAstNodeEmitter`2 {
    public abstract virtual TEmitResult Emit(IXamlAstNode node, XamlEmitContext`2<TBackendEmitter, TEmitResult> context, TBackendEmitter codeGen);
}
internal interface XamlX.Emit.IXamlCustomEmitMethod`1 {
    [NullableContextAttribute("1")]
public abstract virtual void EmitCall(TBackendEmitter emitter);
}
internal interface XamlX.Emit.IXamlCustomEmitMethodWithContext`2 {
    [NullableContextAttribute("1")]
public abstract virtual void EmitCall(XamlEmitContext`2<TBackendEmitter, TEmitResult> context, TBackendEmitter emitter);
}
internal interface XamlX.Emit.IXamlEmitablePropertySetter`1 {
    [NullableContextAttribute("1")]
public abstract virtual void Emit(TBackendEmitter emitter);
}
internal interface XamlX.Emit.IXamlEmitableWrappedMethod`2 {
    [NullableContextAttribute("1")]
public abstract virtual void Emit(XamlEmitContext`2<TBackendEmitter, TEmitResult> context, TBackendEmitter emitter, bool swallowResult);
}
internal interface XamlX.Emit.IXamlEmitableWrappedMethodWithLocals`2 {
    [NullableContextAttribute("1")]
public abstract virtual void Emit(XamlEmitContextWithLocals`2<TBackendEmitter, TEmitResult> context, TBackendEmitter emitter, bool swallowResult);
}
[NullableContextAttribute("2")]
internal interface XamlX.Emit.IXamlEmitResult {
    public IXamlType ReturnType { get; }
    public bool Valid { get; }
    public abstract virtual IXamlType get_ReturnType();
    public abstract virtual bool get_Valid();
}
[NullableContextAttribute("1")]
internal interface XamlX.Emit.IXamlPropertySetterEmitter`1 {
    public abstract virtual bool EmitCall(IXamlPropertySetter setter, TBackendEmitter emitter);
}
[NullableContextAttribute("1")]
internal interface XamlX.Emit.IXamlWrappedMethodEmitter`2 {
    public abstract virtual bool EmitCall(XamlEmitContext`2<TBackendEmitter, TEmitResult> context, IXamlWrappedMethod method, TBackendEmitter emitter, bool swallowResult);
}
[NullableContextAttribute("1")]
internal interface XamlX.Emit.IXamlWrappedMethodEmitterWithLocals`2 {
    public abstract virtual bool EmitCall(XamlEmitContextWithLocals`2<TBackendEmitter, TEmitResult> context, IXamlWrappedMethod method, TBackendEmitter emitter, bool swallowResult);
}
internal class XamlX.Emit.XamlContextFactoryCallback`2 : MulticastDelegate {
    public XamlContextFactoryCallback`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(XamlRuntimeContext`2<TBackendEmitter, TEmitResult> context, TBackendEmitter emitter);
    public virtual IAsyncResult BeginInvoke(XamlRuntimeContext`2<TBackendEmitter, TEmitResult> context, TBackendEmitter emitter, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class XamlX.Emit.XamlContextTypeBuilderCallback`1 : MulticastDelegate {
    public XamlContextTypeBuilderCallback`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(IXamlILContextDefinition`1<TBackendEmitter> contextDefinition);
    public virtual IAsyncResult BeginInvoke(IXamlILContextDefinition`1<TBackendEmitter> contextDefinition, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class XamlX.Emit.XamlEmitContext`2 : XamlContextBase {
    [NullableAttribute("2")]
private IXamlLocal _contextLocal;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFileSource <File>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <Emitters>k__BackingField;
    private List`1<Action> _afterEmitCallbacks;
    [NullableAttribute("2")]
private IXamlAstNode _currentNode;
    [CompilerGeneratedAttribute]
private TransformerConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlLanguageEmitMappings`2<TBackendEmitter, TEmitResult> <EmitMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlRuntimeContext`2<TBackendEmitter, TEmitResult> <RuntimeContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlTypeBuilder`1<TBackendEmitter> <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private TBackendEmitter <Emitter>k__BackingField;
    [NullableAttribute("2")]
public IFileSource File { get; }
    public List`1<object> Emitters { get; }
    public TransformerConfiguration Configuration { get; }
    public XamlLanguageEmitMappings`2<TBackendEmitter, TEmitResult> EmitMappings { get; }
    public XamlRuntimeContext`2<TBackendEmitter, TEmitResult> RuntimeContext { get; }
    public IXamlTypeBuilder`1<TBackendEmitter> DeclaringType { get; }
    public TBackendEmitter Emitter { get; }
    public IXamlLocal ContextLocal { get; }
    public XamlEmitContext`2(TBackendEmitter emitter, TransformerConfiguration configuration, XamlLanguageEmitMappings`2<TBackendEmitter, TEmitResult> emitMappings, XamlRuntimeContext`2<TBackendEmitter, TEmitResult> runtimeContext, IXamlLocal contextLocal, IXamlTypeBuilder`1<TBackendEmitter> declaringType, IFileSource file, IEnumerable`1<object> emitters);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IFileSource get_File();
    [CompilerGeneratedAttribute]
public List`1<object> get_Emitters();
    [CompilerGeneratedAttribute]
public TransformerConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public XamlLanguageEmitMappings`2<TBackendEmitter, TEmitResult> get_EmitMappings();
    [CompilerGeneratedAttribute]
public XamlRuntimeContext`2<TBackendEmitter, TEmitResult> get_RuntimeContext();
    [CompilerGeneratedAttribute]
public IXamlTypeBuilder`1<TBackendEmitter> get_DeclaringType();
    [CompilerGeneratedAttribute]
public TBackendEmitter get_Emitter();
    public IXamlLocal get_ContextLocal();
    public TEmitResult Emit(IXamlAstNode value, TBackendEmitter codeGen, IXamlType expectedType);
    public void Emit(IXamlPropertySetter setter, TBackendEmitter codeGen);
    protected virtual bool EmitCore(IXamlPropertySetter setter, TBackendEmitter codeGen);
    public void Emit(IXamlWrappedMethod wrapped, TBackendEmitter codeGen, bool swallowResult);
    protected virtual bool EmitCore(IXamlWrappedMethod wrapped, TBackendEmitter codeGen, bool swallowResult);
    private TEmitResult EmitCore(IXamlAstNode value, TBackendEmitter codeGen, IXamlType expectedType);
    protected virtual TEmitResult EmitNode(IXamlAstNode value, TBackendEmitter codeGen);
    protected abstract virtual void EmitConvert(IXamlAstNode value, TBackendEmitter codeGen, IXamlType expectedType, IXamlType returnedType);
    protected virtual TEmitResult EmitNodeCore(IXamlAstNode value, TBackendEmitter codeGen, Boolean& foundEmitter);
    public void AddAfterEmitCallbacks(Action callback);
    public void ExecuteAfterEmitCallbacks();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class XamlX.Emit.XamlEmitContextWithLocals`2 : XamlEmitContext`2<TBackendEmitter, TEmitResult> {
    protected Dictionary`2<XamlAstCompilerLocalNode, IXamlLocal> _locals;
    public XamlEmitContextWithLocals`2(TBackendEmitter emitter, TransformerConfiguration configuration, XamlLanguageEmitMappings`2<TBackendEmitter, TEmitResult> emitMappings, XamlRuntimeContext`2<TBackendEmitter, TEmitResult> runtimeContext, IXamlLocal contextLocal, IXamlTypeBuilder`1<TBackendEmitter> declaringType, IFileSource file, IEnumerable`1<object> emitters);
    public IXamlLocal GetLocalForNode(XamlAstCompilerLocalNode node, TBackendEmitter codeGen, bool throwOnUninitialized);
    public abstract virtual void LoadLocalValue(XamlAstCompilerLocalNode node, TBackendEmitter codeGen);
    public PooledLocal GetLocalOfType(IXamlType type);
    protected virtual TEmitResult EmitNodeCore(IXamlAstNode value, TBackendEmitter codeGen, Boolean& foundEmitter);
    protected virtual bool EmitCore(IXamlWrappedMethod wrapped, TBackendEmitter codeGen, bool swallowResult);
}
internal class XamlX.Emit.XamlLanguageEmitMappings`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<XamlEmitContext`2<TBackendEmitter, TEmitResult>, TBackendEmitter, XamlAstClrProperty, bool> <ProvideValueTargetPropertyEmitter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private XamlContextTypeBuilderCallback`1<TBackendEmitter> <ContextTypeBuilderCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private XamlContextFactoryCallback`2<TBackendEmitter, TEmitResult> <ContextFactoryCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<XamlEmitContext`2<TBackendEmitter, TEmitResult>, TBackendEmitter, XamlAstClrProperty, bool> ProvideValueTargetPropertyEmitter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public XamlContextTypeBuilderCallback`1<TBackendEmitter> ContextTypeBuilderCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public XamlContextFactoryCallback`2<TBackendEmitter, TEmitResult> ContextFactoryCallback { get; public set; }
    [CompilerGeneratedAttribute]
public Func`4<XamlEmitContext`2<TBackendEmitter, TEmitResult>, TBackendEmitter, XamlAstClrProperty, bool> get_ProvideValueTargetPropertyEmitter();
    [CompilerGeneratedAttribute]
public void set_ProvideValueTargetPropertyEmitter(Func`4<XamlEmitContext`2<TBackendEmitter, TEmitResult>, TBackendEmitter, XamlAstClrProperty, bool> value);
    [CompilerGeneratedAttribute]
public XamlContextTypeBuilderCallback`1<TBackendEmitter> get_ContextTypeBuilderCallback();
    [CompilerGeneratedAttribute]
public void set_ContextTypeBuilderCallback(XamlContextTypeBuilderCallback`1<TBackendEmitter> value);
    [CompilerGeneratedAttribute]
public XamlContextFactoryCallback`2<TBackendEmitter, TEmitResult> get_ContextFactoryCallback();
    [CompilerGeneratedAttribute]
public void set_ContextFactoryCallback(XamlContextFactoryCallback`2<TBackendEmitter, TEmitResult> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class XamlX.Emit.XamlRuntimeContext`2 : object {
    [CompilerGeneratedAttribute]
private IXamlField <RootObjectField>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlField <IntermediateRootObjectField>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlField <ParentListField>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IXamlType <ContextType>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlField <PropertyTargetObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlField <PropertyTargetProperty>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IXamlConstructor <Constructor>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Action`1<TBackendEmitter> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlMethod <PushParentMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlMethod <PopParentMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseUrl>k__BackingField;
    public IXamlField RootObjectField { get; public set; }
    public IXamlField IntermediateRootObjectField { get; public set; }
    public IXamlField ParentListField { get; public set; }
    [NullableAttribute("1")]
public IXamlType ContextType { get; public set; }
    public IXamlField PropertyTargetObject { get; public set; }
    public IXamlField PropertyTargetProperty { get; public set; }
    [NullableAttribute("1")]
public IXamlConstructor Constructor { get; public set; }
    [NullableAttribute("1")]
public Action`1<TBackendEmitter> Factory { get; public set; }
    public IXamlMethod PushParentMethod { get; public set; }
    public IXamlMethod PopParentMethod { get; public set; }
    public string BaseUrl { get; public set; }
    [NullableContextAttribute("1")]
public XamlRuntimeContext`2(IXamlType definition, IXamlType constructedType, string baseUri, XamlLanguageEmitMappings`2<TBackendEmitter, TEmitResult> mappings, Action`2<XamlRuntimeContext`2<TBackendEmitter, TEmitResult>, TBackendEmitter> factory);
    [CompilerGeneratedAttribute]
public IXamlField get_RootObjectField();
    [CompilerGeneratedAttribute]
public void set_RootObjectField(IXamlField value);
    [CompilerGeneratedAttribute]
public IXamlField get_IntermediateRootObjectField();
    [CompilerGeneratedAttribute]
public void set_IntermediateRootObjectField(IXamlField value);
    [CompilerGeneratedAttribute]
public IXamlField get_ParentListField();
    [CompilerGeneratedAttribute]
public void set_ParentListField(IXamlField value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IXamlType get_ContextType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ContextType(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlField get_PropertyTargetObject();
    [CompilerGeneratedAttribute]
public void set_PropertyTargetObject(IXamlField value);
    [CompilerGeneratedAttribute]
public IXamlField get_PropertyTargetProperty();
    [CompilerGeneratedAttribute]
public void set_PropertyTargetProperty(IXamlField value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IXamlConstructor get_Constructor();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Constructor(IXamlConstructor value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Action`1<TBackendEmitter> get_Factory();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Factory(Action`1<TBackendEmitter> value);
    [CompilerGeneratedAttribute]
public IXamlMethod get_PushParentMethod();
    [CompilerGeneratedAttribute]
public void set_PushParentMethod(IXamlMethod value);
    [CompilerGeneratedAttribute]
public IXamlMethod get_PopParentMethod();
    [CompilerGeneratedAttribute]
public void set_PopParentMethod(IXamlMethod value);
    [CompilerGeneratedAttribute]
public string get_BaseUrl();
    [CompilerGeneratedAttribute]
public void set_BaseUrl(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class XamlX.Emit.XamlRuntimeContextDefintion : object {
    public static string RootObjectFieldName;
    public static string IntermediateRootObjectFieldName;
    public static string ParentListFieldName;
    public static string ProvideTargetObjectName;
    public static string ProvideTargetPropertyName;
    public static string PushParentMethodName;
    public static string PopParentMethodName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.IL.CheckingILEmitter : object {
    private IXamlILEmitter _inner;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IXamlLabel, string> _unmarkedLabels;
    private Dictionary`2<IXamlLabel, Instruction> _labels;
    private List`1<IXamlLabel> _labelsToMarkOnNextInstruction;
    private bool _paused;
    private List`1<Instruction> _instructions;
    private static Dictionary`2<StackBehaviour, int> s_balance;
    public IXamlTypeSystem TypeSystem { get; }
    public XamlLocalsPool LocalsPool { get; }
    public CheckingILEmitter(IXamlILEmitter inner);
    private static CheckingILEmitter();
    public sealed virtual IXamlTypeSystem get_TypeSystem();
    [NullableContextAttribute("2")]
private static int GetInstructionBalance(OpCode code, object operand);
    private static int Balance(StackBehaviour op);
    [NullableContextAttribute("2")]
private static int GetInstructionPopBalance(OpCode code, object operand);
    [NullableContextAttribute("2")]
private static int GetInstructionPushBalance(OpCode code, object operand);
    public void Pause();
    public void Resume();
    public void ExplicitStack(int change);
    [NullableContextAttribute("2")]
private void Track(OpCode code, object operand);
    public sealed virtual IXamlILEmitter Emit(OpCode code);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlField field);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlMethod method);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlConstructor ctor);
    public sealed virtual IXamlILEmitter Emit(OpCode code, string arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, int arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, long arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, sbyte arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, byte arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlType type);
    public sealed virtual IXamlILEmitter Emit(OpCode code, float arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, double arg);
    public sealed virtual IXamlLocal DefineLocal(IXamlType type);
    public sealed virtual IXamlLabel DefineLabel();
    public sealed virtual IXamlILEmitter MarkLabel(IXamlLabel label);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlLabel label);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlLocal local);
    public sealed virtual void InsertSequencePoint(IFileSource file, int line, int position);
    public sealed virtual XamlLocalsPool get_LocalsPool();
    [NullableContextAttribute("2")]
private string VerifyAndGetBalanceAtExit(int expectedBalance, bool expectReturn);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public string Check(int expectedBalance, bool expectReturn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.IL.Emitters.DefaultXamlDynamicSetterContainer : object {
    [CompilerGeneratedAttribute]
private IXamlTypeBuilder`1<IXamlILEmitter> <TypeBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlVisibility <GeneratedMethodsVisibility>k__BackingField;
    public IXamlTypeBuilder`1<IXamlILEmitter> TypeBuilder { get; }
    public XamlVisibility GeneratedMethodsVisibility { get; }
    public DefaultXamlDynamicSetterContainer(IXamlTypeBuilder`1<IXamlILEmitter> typeBuilder, XamlVisibility generatedMethodsVisibility);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlTypeBuilder`1<IXamlILEmitter> get_TypeBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual XamlVisibility get_GeneratedMethodsVisibility();
    public sealed virtual string GetDynamicSetterMethodName(int setterIndex);
}
internal class XamlX.IL.Emitters.DefaultXamlDynamicSetterContainerProvider : object {
    [NullableAttribute("2")]
private IXamlDynamicSetterContainer _sharedContainer;
    public DefaultXamlDynamicSetterContainerProvider(IXamlTypeBuilder`1<IXamlILEmitter> sharedContainerType);
    [NullableContextAttribute("1")]
public sealed virtual IXamlDynamicSetterContainer ProvideDynamicSetterContainer(XamlAstClrProperty property, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context);
    [NullableContextAttribute("2")]
private static bool IsTypeEffectivelyPrivate(IXamlType xamlType);
    [NullableContextAttribute("1")]
private static DefaultXamlDynamicSetterContainer GetOrCreatePrivateContainer(XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context);
}
[NullableContextAttribute("1")]
internal interface XamlX.IL.Emitters.IXamlDynamicSetterContainer {
    public IXamlTypeBuilder`1<IXamlILEmitter> TypeBuilder { get; }
    public XamlVisibility GeneratedMethodsVisibility { get; }
    public abstract virtual IXamlTypeBuilder`1<IXamlILEmitter> get_TypeBuilder();
    public abstract virtual XamlVisibility get_GeneratedMethodsVisibility();
    public abstract virtual string GetDynamicSetterMethodName(int setterIndex);
}
[NullableContextAttribute("1")]
internal interface XamlX.IL.Emitters.IXamlDynamicSetterContainerProvider {
    public abstract virtual IXamlDynamicSetterContainer ProvideDynamicSetterContainer(XamlAstClrProperty property, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context);
}
internal class XamlX.IL.Emitters.ManipulationGroupEmitter : object {
    [NullableContextAttribute("1")]
public sealed virtual XamlILNodeEmitResult Emit(IXamlAstNode node, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
internal class XamlX.IL.Emitters.MarkupExtensionEmitter : object {
    [NullableContextAttribute("1")]
public sealed virtual XamlILNodeEmitResult Emit(IXamlAstNode node, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter ilgen);
    [CompilerGeneratedAttribute]
internal static void <Emit>g__EmitPropertyDescriptor|0_0(<>c__DisplayClass0_0& );
}
internal class XamlX.IL.Emitters.MethodCallEmitter : object {
    [NullableContextAttribute("1")]
public sealed virtual XamlILNodeEmitResult Emit(IXamlAstNode node, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
internal class XamlX.IL.Emitters.NewObjectEmitter : object {
    [NullableContextAttribute("1")]
public sealed virtual XamlILNodeEmitResult Emit(IXamlAstNode node, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
internal class XamlX.IL.Emitters.ObjectInitializationNodeEmitter : object {
    [NullableContextAttribute("1")]
public sealed virtual XamlILNodeEmitResult Emit(IXamlAstNode node, XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.IL.Emitters.PropertyAssignmentEmitter : object {
    private List`1<IXamlPropertySetter> ValidateAndGetSetters(XamlPropertyAssignmentNode an);
    public sealed virtual XamlILNodeEmitResult Emit(IXamlAstNode node, XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
    private static void RemoveRedundantSetters(IXamlType valueType, List`1<IXamlPropertySetter> setters);
    private static bool IsAssignableToWithNullability(IXamlPropertySetter from, IXamlPropertySetter to);
    private static IXamlMethod GetOrCreateDynamicSetterMethod(XamlAstClrProperty property, IReadOnlyList`1<IXamlType> valueTypes, IReadOnlyList`1<IXamlPropertySetter> setters, IXamlLineInfo lineInfo, XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context);
    private static void EmitDynamicSetterMethod(IReadOnlyList`1<IXamlType> valueTypes, IReadOnlyList`1<IXamlPropertySetter> setters, IXamlLineInfo lineInfo, XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context);
    [CompilerGeneratedAttribute]
internal static void <EmitDynamicSetterMethod>g__EmitSetterAfterChecks|5_0(IXamlPropertySetter setter, IXamlType typeOnStack, <>c__DisplayClass5_0& );
}
internal class XamlX.IL.Emitters.PropertyValueManipulationEmitter : object {
    [NullableContextAttribute("1")]
public sealed virtual XamlILNodeEmitResult Emit(IXamlAstNode node, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
internal class XamlX.IL.Emitters.TextNodeEmitter : object {
    [NullableContextAttribute("1")]
public sealed virtual XamlILNodeEmitResult Emit(IXamlAstNode node, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
internal class XamlX.IL.Emitters.ValueWithManipulationsEmitter : object {
    [NullableContextAttribute("1")]
public sealed virtual XamlILNodeEmitResult Emit(IXamlAstNode node, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class XamlX.IL.Emitters.XamlNeedsParentStackCache : Dictionary`2<IXamlAstNode, bool> {
    public static void Verify(XamlContextBase ctx, IXamlAstNode node);
    public bool NeedsParentStack(IXamlAstNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class XamlX.IL.ILEmitContext : XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> {
    [CompilerGeneratedAttribute]
private bool <EnableIlVerification>k__BackingField;
    public bool EnableIlVerification { get; }
    public ILEmitContext(IXamlILEmitter emitter, TransformerConfiguration configuration, XamlLanguageEmitMappings`2<IXamlILEmitter, XamlILNodeEmitResult> emitMappings, XamlRuntimeContext`2<IXamlILEmitter, XamlILNodeEmitResult> runtimeContext, IXamlLocal contextLocal, IXamlTypeBuilder`1<IXamlILEmitter> declaringType, IFileSource file, IEnumerable`1<object> emitters);
    [CompilerGeneratedAttribute]
public bool get_EnableIlVerification();
    protected virtual XamlILNodeEmitResult EmitNode(IXamlAstNode value, IXamlILEmitter codeGen);
    protected virtual XamlILNodeEmitResult EmitNodeCore(IXamlAstNode value, IXamlILEmitter codeGen, Boolean& foundEmitter);
    protected virtual void EmitConvert(IXamlAstNode value, IXamlILEmitter codeGen, IXamlType expectedType, IXamlType returnedType);
    public virtual void LoadLocalValue(XamlAstCompilerLocalNode node, IXamlILEmitter codeGen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.IL.ILEmitContextSettings : object {
    [NullableAttribute("2")]
private IXamlDynamicSetterContainerProvider _dynamicSetterContainerProvider;
    [CompilerGeneratedAttribute]
private bool <EnableILVerification>k__BackingField;
    public bool EnableILVerification { get; public set; }
    public IXamlDynamicSetterContainerProvider DynamicSetterContainerProvider { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableILVerification();
    [CompilerGeneratedAttribute]
public void set_EnableILVerification(bool value);
    public IXamlDynamicSetterContainerProvider get_DynamicSetterContainerProvider();
    public void set_DynamicSetterContainerProvider(IXamlDynamicSetterContainerProvider value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.IL.ILEmitHelpers : object {
    public static void EmitFieldLiteral(IXamlField field, IXamlILEmitter codeGen);
    public static void EmitConvert(XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter ilgen, IXamlLineInfo node, IXamlType what, IXamlType to, IXamlLocal local);
    public static void EmitConvert(XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlILEmitter ilgen, IXamlLineInfo node, IXamlType what, IXamlType to);
    public static void EmitConvert(XamlEmitContextWithLocals`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlLineInfo node, IXamlType what, IXamlType to, Func`2<bool, IXamlILEmitter> ld);
}
internal interface XamlX.IL.IXamlAstILEmitableNode {
}
internal interface XamlX.IL.IXamlILAstNodeEmitter {
}
[NullableContextAttribute("2")]
internal interface XamlX.IL.IXamlILContextDefinition`1 {
    [NullableAttribute("1")]
public IXamlTypeBuilder`1<TBackendEmitter> TypeBuilder { get; }
    [NullableAttribute("1")]
public IXamlConstructorBuilder`1<TBackendEmitter> ConstructorBuilder { get; }
    public IXamlField ParentListField { get; }
    [NullableAttribute("1")]
public IXamlField ParentServiceProviderField { get; }
    public IXamlField InnerServiceProviderField { get; }
    public IXamlField TargetObjectField { get; }
    public IXamlField TargetPropertyField { get; }
    [NullableContextAttribute("1")]
public abstract virtual IXamlTypeBuilder`1<TBackendEmitter> get_TypeBuilder();
    [NullableContextAttribute("1")]
public abstract virtual IXamlConstructorBuilder`1<TBackendEmitter> get_ConstructorBuilder();
    public abstract virtual IXamlField get_ParentListField();
    [NullableContextAttribute("1")]
public abstract virtual IXamlField get_ParentServiceProviderField();
    public abstract virtual IXamlField get_InnerServiceProviderField();
    public abstract virtual IXamlField get_TargetObjectField();
    public abstract virtual IXamlField get_TargetPropertyField();
}
[NullableContextAttribute("1")]
internal interface XamlX.IL.IXamlILEmitter {
    public IXamlTypeSystem TypeSystem { get; }
    public abstract virtual IXamlTypeSystem get_TypeSystem();
    public abstract virtual IXamlILEmitter Emit(OpCode code);
    public abstract virtual IXamlILEmitter Emit(OpCode code, IXamlField field);
    public abstract virtual IXamlILEmitter Emit(OpCode code, IXamlMethod method);
    public abstract virtual IXamlILEmitter Emit(OpCode code, IXamlConstructor ctor);
    public abstract virtual IXamlILEmitter Emit(OpCode code, string arg);
    public abstract virtual IXamlILEmitter Emit(OpCode code, int arg);
    public abstract virtual IXamlILEmitter Emit(OpCode code, long arg);
    public abstract virtual IXamlILEmitter Emit(OpCode code, sbyte arg);
    public abstract virtual IXamlILEmitter Emit(OpCode code, byte arg);
    public abstract virtual IXamlILEmitter Emit(OpCode code, IXamlType type);
    public abstract virtual IXamlILEmitter Emit(OpCode code, float arg);
    public abstract virtual IXamlILEmitter Emit(OpCode code, double arg);
    public abstract virtual IXamlLabel DefineLabel();
    public abstract virtual IXamlILEmitter MarkLabel(IXamlLabel label);
    public abstract virtual IXamlILEmitter Emit(OpCode code, IXamlLabel label);
    public abstract virtual IXamlILEmitter Emit(OpCode code, IXamlLocal local);
    public abstract virtual void InsertSequencePoint(IFileSource file, int line, int position);
}
internal interface XamlX.IL.IXamlILLocal {
    public int Index { get; }
    public abstract virtual int get_Index();
}
internal static class XamlX.IL.NamespaceInfoProvider : object {
    [NullableContextAttribute("1")]
public static IXamlField EmitNamespaceInfoProvider(TransformerConfiguration configuration, IXamlTypeBuilder`1<IXamlILEmitter> typeBuilder, XamlDocument document);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static IXamlMethod <EmitNamespaceInfoProvider>g__EmitCreateNamespaceInfoMethod|0_1(<>c__DisplayClass0_0& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static IXamlMethod <EmitNamespaceInfoProvider>g__EmitCreateNamespacesMethod|0_2(<>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static void <EmitNamespaceInfoProvider>g__EmitNamespacesProperty|0_3(<>c__DisplayClass0_0& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static IXamlConstructor <EmitNamespaceInfoProvider>g__EmitConstructor|0_4(<>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static void <EmitNamespaceInfoProvider>g__EmitStaticConstructor|0_5(<>c__DisplayClass0_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.IL.RecordingIlEmitter : object {
    private IXamlILEmitter _inner;
    [CompilerGeneratedAttribute]
private List`1<RecordedInstruction> <Instructions>k__BackingField;
    private Dictionary`2<IXamlLabel, LabelInfo> _labels;
    private Dictionary`2<IXamlLocal, LocalInfo> _locals;
    public List`1<RecordedInstruction> Instructions { get; }
    public IXamlTypeSystem TypeSystem { get; }
    public XamlLocalsPool LocalsPool { get; }
    public RecordingIlEmitter(IXamlILEmitter inner);
    [CompilerGeneratedAttribute]
public List`1<RecordedInstruction> get_Instructions();
    public sealed virtual IXamlTypeSystem get_TypeSystem();
    public sealed virtual IXamlILEmitter Emit(OpCode code);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlField field);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlMethod method);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlConstructor ctor);
    public sealed virtual IXamlILEmitter Emit(OpCode code, string arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, int arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, long arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, sbyte arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, byte arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlType type);
    public sealed virtual IXamlILEmitter Emit(OpCode code, float arg);
    public sealed virtual IXamlILEmitter Emit(OpCode code, double arg);
    public sealed virtual IXamlLocal DefineLocal(IXamlType type);
    public sealed virtual IXamlLabel DefineLabel();
    public sealed virtual IXamlILEmitter MarkLabel(IXamlLabel label);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlLabel label);
    public sealed virtual IXamlILEmitter Emit(OpCode code, IXamlLocal local);
    public sealed virtual void InsertSequencePoint(IFileSource file, int line, int position);
    public sealed virtual XamlLocalsPool get_LocalsPool();
    [NullableContextAttribute("2")]
private void Record(OpCode code, object operand);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class XamlX.IL.RuntimeContext : XamlRuntimeContext`2<IXamlILEmitter, XamlILNodeEmitResult> {
    public RuntimeContext(IXamlType definition, IXamlType constructedType, XamlLanguageEmitMappings`2<IXamlILEmitter, XamlILNodeEmitResult> mappings, string baseUri, List`1<IXamlField> staticProviders);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class XamlX.IL.XamlILCompiler : XamlImperativeCompiler`2<IXamlILEmitter, XamlILNodeEmitResult> {
    public bool EnableIlVerification { get; public set; }
    public IXamlDynamicSetterContainerProvider DynamicSetterContainerProvider { get; public set; }
    private ILEmitContextSettings Settings { get; }
    public XamlILCompiler(TransformerConfiguration configuration, XamlLanguageEmitMappings`2<IXamlILEmitter, XamlILNodeEmitResult> emitMappings, bool fillWithDefaults);
    public bool get_EnableIlVerification();
    public void set_EnableIlVerification(bool value);
    public IXamlDynamicSetterContainerProvider get_DynamicSetterContainerProvider();
    public void set_DynamicSetterContainerProvider(IXamlDynamicSetterContainerProvider value);
    private ILEmitContextSettings get_Settings();
    public IXamlType CreateContextType(IXamlTypeBuilder`1<IXamlILEmitter> builder);
    protected virtual XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> InitCodeGen(IFileSource file, IXamlTypeBuilder`1<IXamlILEmitter> declaringType, IXamlILEmitter codeGen, XamlRuntimeContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, bool needContextLocal);
    protected virtual void CompileBuild(IFileSource fileSource, IXamlAstValueNode rootInstance, IXamlTypeBuilder`1<IXamlILEmitter> declaringType, IXamlILEmitter codeGen, XamlRuntimeContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, IXamlMethod compiledPopulate);
    protected virtual void CompilePopulate(IFileSource fileSource, IXamlAstManipulationNode manipulation, IXamlTypeBuilder`1<IXamlILEmitter> declaringType, IXamlILEmitter codeGen, XamlRuntimeContext`2<IXamlILEmitter, XamlILNodeEmitResult> context);
    protected virtual XamlRuntimeContext`2<IXamlILEmitter, XamlILNodeEmitResult> CreateRuntimeContext(XamlDocument doc, IXamlType contextType, IXamlTypeBuilder`1<IXamlILEmitter> namespaceInfoBuilder, string baseUri, IXamlType rootType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.IL.XamlILContextDefinition : object {
    [CompilerGeneratedAttribute]
private IXamlTypeBuilder`1<IXamlILEmitter> <TypeBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlConstructorBuilder`1<IXamlILEmitter> <ConstructorBuilder>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IXamlField <ParentListField>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlField <ParentServiceProviderField>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IXamlField <InnerServiceProviderField>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IXamlField <TargetObjectField>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IXamlField <TargetPropertyField>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <ContextType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action> <CreateCallbacks>k__BackingField;
    public static int BaseUriArg;
    public static int StaticProvidersArg;
    public IXamlTypeBuilder`1<IXamlILEmitter> TypeBuilder { get; }
    public IXamlConstructorBuilder`1<IXamlILEmitter> ConstructorBuilder { get; }
    [NullableAttribute("2")]
public IXamlField ParentListField { get; }
    public IXamlField ParentServiceProviderField { get; }
    [NullableAttribute("2")]
public IXamlField InnerServiceProviderField { get; }
    [NullableAttribute("2")]
public IXamlField TargetObjectField { get; }
    [NullableAttribute("2")]
public IXamlField TargetPropertyField { get; }
    public IXamlType ContextType { get; }
    public List`1<Action> CreateCallbacks { get; }
    private XamlILContextDefinition(IXamlTypeBuilder`1<IXamlILEmitter> parentBuilder, IXamlTypeSystem typeSystem, XamlLanguageTypeMappings mappings, XamlLanguageEmitMappings`2<IXamlILEmitter, XamlILNodeEmitResult> emitMappings);
    public static IXamlType GenerateContextClass(IXamlTypeBuilder`1<IXamlILEmitter> builder, IXamlTypeSystem typeSystem, XamlLanguageTypeMappings mappings, XamlLanguageEmitMappings`2<IXamlILEmitter, XamlILNodeEmitResult> emitMappings);
    [CompilerGeneratedAttribute]
public sealed virtual IXamlTypeBuilder`1<IXamlILEmitter> get_TypeBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual IXamlConstructorBuilder`1<IXamlILEmitter> get_ConstructorBuilder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IXamlField get_ParentListField();
    [CompilerGeneratedAttribute]
public sealed virtual IXamlField get_ParentServiceProviderField();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IXamlField get_InnerServiceProviderField();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IXamlField get_TargetObjectField();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IXamlField get_TargetPropertyField();
    [CompilerGeneratedAttribute]
public IXamlType get_ContextType();
    [CompilerGeneratedAttribute]
public List`1<Action> get_CreateCallbacks();
    public void CreateAllTypes();
    private void EmitPushPopParent(IXamlTypeBuilder`1<IXamlILEmitter> builder, IXamlTypeSystem ts);
    private IXamlMethodBuilder`1<IXamlILEmitter> ImplementInterfacePropertyGetter(IXamlTypeBuilder`1<IXamlILEmitter> builder, IXamlType type, string name);
    private IXamlType EmitTypeDescriptorContextStub(IXamlTypeSystem typeSystem, IXamlTypeBuilder`1<IXamlILEmitter> builder, XamlLanguageTypeMappings mappings);
    private ValueTuple`3<IXamlType, IXamlConstructor, Action> EmitParentEnumerable(IXamlTypeSystem typeSystem, IXamlTypeBuilder`1<IXamlILEmitter> parentBuilder, XamlLanguageTypeMappings mappings);
    [CompilerGeneratedAttribute]
private void <EmitTypeDescriptorContextStub>g__PropertyStub|34_0(string name, <>c__DisplayClass34_0& );
    [CompilerGeneratedAttribute]
private void <EmitTypeDescriptorContextStub>g__MethodStub|34_1(string name, <>c__DisplayClass34_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class XamlX.IL.XamlIlEmitterExtensions : object {
    [ExtensionAttribute]
public static IXamlILEmitter EmitCall(IXamlILEmitter emitter, IXamlMethod method, bool swallowResult);
    [ExtensionAttribute]
public static IXamlILEmitter EmitCall(IXamlILEmitter emitter, IXamlMethod method, XamlEmitContext`2<IXamlILEmitter, XamlILNodeEmitResult> context, bool swallowResult);
    [ExtensionAttribute]
public static IXamlILEmitter DebugHatch(IXamlILEmitter emitter, string message);
    [ExtensionAttribute]
public static IXamlILEmitter Ldarg(IXamlILEmitter emitter, int arg);
    [ExtensionAttribute]
public static IXamlILEmitter Ldarg_0(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter Ldfld(IXamlILEmitter emitter, IXamlField field);
    [ExtensionAttribute]
public static IXamlILEmitter Ldsfld(IXamlILEmitter emitter, IXamlField field);
    [ExtensionAttribute]
public static IXamlILEmitter LdThisFld(IXamlILEmitter emitter, IXamlField field);
    [ExtensionAttribute]
public static IXamlILEmitter Stfld(IXamlILEmitter emitter, IXamlField field);
    [ExtensionAttribute]
public static IXamlILEmitter Stsfld(IXamlILEmitter emitter, IXamlField field);
    [ExtensionAttribute]
public static IXamlILEmitter Ldloc(IXamlILEmitter emitter, IXamlLocal local);
    [ExtensionAttribute]
public static IXamlILEmitter Ldloca(IXamlILEmitter emitter, IXamlLocal local);
    [ExtensionAttribute]
public static IXamlILEmitter Stloc(IXamlILEmitter emitter, IXamlLocal local);
    [ExtensionAttribute]
public static IXamlILEmitter Ldnull(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter Ldstr(IXamlILEmitter emitter, string arg);
    [ExtensionAttribute]
public static IXamlILEmitter Throw(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter Ldc_I4(IXamlILEmitter emitter, int arg);
    [ExtensionAttribute]
public static IXamlILEmitter Ldc_R8(IXamlILEmitter emitter, double arg);
    [ExtensionAttribute]
public static IXamlILEmitter Beq(IXamlILEmitter emitter, IXamlLabel label);
    [ExtensionAttribute]
public static IXamlILEmitter Blt(IXamlILEmitter emitter, IXamlLabel label);
    [ExtensionAttribute]
public static IXamlILEmitter Ble(IXamlILEmitter emitter, IXamlLabel label);
    [ExtensionAttribute]
public static IXamlILEmitter Bgt(IXamlILEmitter emitter, IXamlLabel label);
    [ExtensionAttribute]
public static IXamlILEmitter Bge(IXamlILEmitter emitter, IXamlLabel label);
    [ExtensionAttribute]
public static IXamlILEmitter Br(IXamlILEmitter emitter, IXamlLabel label);
    [ExtensionAttribute]
public static IXamlILEmitter Brfalse(IXamlILEmitter emitter, IXamlLabel label);
    [ExtensionAttribute]
public static IXamlILEmitter Brtrue(IXamlILEmitter emitter, IXamlLabel label);
    [ExtensionAttribute]
public static IXamlILEmitter Ret(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter Dup(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter Pop(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter Ldtoken(IXamlILEmitter emitter, IXamlType type);
    [ExtensionAttribute]
public static IXamlILEmitter Ldtoken(IXamlILEmitter emitter, IXamlMethod method);
    [ExtensionAttribute]
public static IXamlILEmitter Ldtype(IXamlILEmitter emitter, IXamlType type);
    [ExtensionAttribute]
public static IXamlILEmitter LdMethodInfo(IXamlILEmitter emitter, IXamlMethod method);
    [ExtensionAttribute]
public static IXamlILEmitter Ldftn(IXamlILEmitter emitter, IXamlMethod method);
    [ExtensionAttribute]
public static IXamlILEmitter Isinst(IXamlILEmitter emitter, IXamlType type);
    [ExtensionAttribute]
public static IXamlILEmitter Castclass(IXamlILEmitter emitter, IXamlType type);
    [ExtensionAttribute]
public static IXamlILEmitter Box(IXamlILEmitter emitter, IXamlType type);
    [ExtensionAttribute]
public static IXamlILEmitter Unbox_Any(IXamlILEmitter emitter, IXamlType type);
    [ExtensionAttribute]
public static IXamlILEmitter Unbox(IXamlILEmitter emitter, IXamlType type);
    [ExtensionAttribute]
public static IXamlILEmitter Newobj(IXamlILEmitter emitter, IXamlConstructor ctor);
    [ExtensionAttribute]
public static IXamlILEmitter Newarr(IXamlILEmitter emitter, IXamlType type);
    [ExtensionAttribute]
public static IXamlILEmitter Ldelem_ref(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter Stelem_ref(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter Ldlen(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter Add(IXamlILEmitter emitter);
    [ExtensionAttribute]
public static IXamlILEmitter EmitDefault(IXamlILEmitter emitter, IXamlType type);
    [CompilerGeneratedAttribute]
internal static IXamlILEmitter <EmitDefault>g__EmitNewStruct|45_0(IXamlILEmitter emitter, IXamlType type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class XamlX.IL.XamlILNodeEmitResult : object {
    [CompilerGeneratedAttribute]
private int <ConsumedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCast>k__BackingField;
    public int ConsumedItems { get; }
    public IXamlType ReturnType { get; public set; }
    public int ProducedItems { get; }
    public bool AllowCast { get; public set; }
    private bool XamlX.Emit.IXamlEmitResult.Valid { get; }
    public XamlILNodeEmitResult(int consumedItems, IXamlType returnType);
    [CompilerGeneratedAttribute]
public int get_ConsumedItems();
    [CompilerGeneratedAttribute]
public sealed virtual IXamlType get_ReturnType();
    [CompilerGeneratedAttribute]
public void set_ReturnType(IXamlType value);
    public int get_ProducedItems();
    [CompilerGeneratedAttribute]
public bool get_AllowCast();
    [CompilerGeneratedAttribute]
public void set_AllowCast(bool value);
    private sealed virtual override bool XamlX.Emit.IXamlEmitResult.get_Valid();
    [NullableContextAttribute("1")]
public static XamlILNodeEmitResult Void(int consumedItems);
    [NullableContextAttribute("1")]
public static XamlILNodeEmitResult Type(int consumedItems, IXamlType type);
}
internal class XamlX.Parsers.CommaSeparatedParenthesesTreeParser : object {
    [NullableContextAttribute("1")]
public static List`1<Node> Parse(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Parsers.CompatibleXmlReader : XmlReader {
    private XmlReader _base;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _compatible;
    private Dictionary`2<string, string> _nsmap;
    private HashSet`1<string> _knownNamespaces;
    private Stack`1<Scope> _scopeStack;
    private Scope _scope;
    private bool _previousWasEmpty;
    private int _ignoredAttributes;
    private bool _savedPositionWasAttribute;
    [NullableAttribute("2")]
private string _savedPositionAttributeName;
    [NullableAttribute("2")]
private IXmlLineInfo _baseLineInfo;
    [NullableAttribute("2")]
private IXmlNamespaceResolver _baseNamespaceResolver;
    private static Char[] Splitter;
    public int AttributeCount { get; }
    public string NamespaceURI { get; }
    public string Value { get; }
    public string BaseURI { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public ReadState ReadState { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public CompatibleXmlReader(XmlReader baseReader, Dictionary`2<string, string> compatible);
    private static CompatibleXmlReader();
    private void PushScope(string prefixes);
    private void PopScopeIfNeeded();
    private bool ShouldIgnore(string ns);
    private string GetMapped(string ns);
    public virtual bool Read();
    private bool ProcessStartElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    private void SavePosition();
    private void RestorePosition();
    private void MoveTo(int i);
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    [NullableContextAttribute("2")]
public virtual string GetAttribute(string name, string namespaceURI);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual int get_AttributeCount();
    public virtual string get_NamespaceURI();
    public sealed virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual string LookupNamespace(string prefix);
    public sealed virtual string LookupPrefix(string namespaceName);
    public virtual string get_Value();
    public virtual bool ReadAttributeValue();
    public virtual bool MoveToElement();
    public virtual void ResolveEntity();
    public virtual string get_BaseURI();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual ReadState get_ReadState();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class XamlX.Parsers.Extensions : object {
    private static XName SpaceAttributeName;
    private static Extensions();
    [ExtensionAttribute]
public static IXamlLineInfo AsLi(IXmlLineInfo info);
    [ExtensionAttribute]
public static XmlSpace GetDeclaredWhitespaceMode(XNode node);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class XamlX.Parsers.SystemXamlMarkupExtensionParser.MeScanner : object {
    public static char Space;
    public static char OpenCurlie;
    public static char CloseCurlie;
    public static char Comma;
    public static char EqualSign;
    public static char Quote1;
    public static char Quote2;
    public static char Backslash;
    public static char NullChar;
    [NullableAttribute("1")]
private MeScannerContext _context;
    [NullableAttribute("1")]
private string _inputText;
    private int _idx;
    private MeTokenType _token;
    private MeScannerTypeName _tokenXamlType;
    private XamlAstNamePropertyReference _tokenProperty;
    private string _tokenNamespace;
    [NullableAttribute("1")]
private string _tokenText;
    private StringState _state;
    private bool _hasTrailingWhitespace;
    private int _lineNumber;
    private int _startPosition;
    private string _currentParameterName;
    private MeScannerSpecialBracketCharacters _currentSpecialBracketCharacters;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Namespace { get; }
    public MeTokenType Token { get; }
    public MeScannerTypeName TokenType { get; }
    public XamlAstNamePropertyReference TokenProperty { get; }
    [NullableAttribute("1")]
public string TokenText { get; }
    public bool IsAtEndOfInput { get; }
    public bool HasTrailingWhitespace { get; }
    private char CurrentChar { get; }
    private char NextChar { get; }
    [NullableContextAttribute("1")]
public MeScanner(MeScannerContext context, string text, int lineNumber, int linePosition);
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_Namespace();
    public MeTokenType get_Token();
    public MeScannerTypeName get_TokenType();
    public XamlAstNamePropertyReference get_TokenProperty();
    [NullableContextAttribute("1")]
public string get_TokenText();
    public bool get_IsAtEndOfInput();
    public bool get_HasTrailingWhitespace();
    public void Read();
    [NullableContextAttribute("1")]
private static string RemoveEscapes(string value);
    [NullableContextAttribute("1")]
private void ResolveTypeName(string longName);
    [NullableContextAttribute("1")]
private void ResolvePropertyName(string longName);
    [NullableContextAttribute("1")]
private string ReadString();
    private char get_CurrentChar();
    private char get_NextChar();
    private bool Advance();
    private static bool IsWhitespaceChar(char ch);
    private void AdvanceOverWhitespace();
    private void PushBack();
    private MeScannerSpecialBracketCharacters GetBracketCharacterForProperty(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Parsers.SystemXamlMarkupExtensionParser.MeScannerBracketModeParseParameters : object {
    [CompilerGeneratedAttribute]
private bool <IsConstructorParsingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentConstructorParam>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConstructorParams>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBracketEscapeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<char> <BracketCharacterStack>k__BackingField;
    public bool IsConstructorParsingMode { get; public set; }
    public int CurrentConstructorParam { get; public set; }
    public int MaxConstructorParams { get; public set; }
    public bool IsBracketEscapeMode { get; public set; }
    public Stack`1<char> BracketCharacterStack { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsConstructorParsingMode();
    [CompilerGeneratedAttribute]
public void set_IsConstructorParsingMode(bool value);
    [CompilerGeneratedAttribute]
public int get_CurrentConstructorParam();
    [CompilerGeneratedAttribute]
public void set_CurrentConstructorParam(int value);
    [CompilerGeneratedAttribute]
public int get_MaxConstructorParams();
    [CompilerGeneratedAttribute]
public void set_MaxConstructorParams(int value);
    [CompilerGeneratedAttribute]
public bool get_IsBracketEscapeMode();
    [CompilerGeneratedAttribute]
public void set_IsBracketEscapeMode(bool value);
    [CompilerGeneratedAttribute]
public Stack`1<char> get_BracketCharacterStack();
    [CompilerGeneratedAttribute]
public void set_BracketCharacterStack(Stack`1<char> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Parsers.SystemXamlMarkupExtensionParser.MeScannerContext : object {
    private Func`2<string, XamlAstXmlTypeReference> _typeResolver;
    private IXamlLineInfo _lineInfo;
    [CompilerGeneratedAttribute]
private MeScannerBracketModeParseParameters <CurrentBracketModeParseParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private MeScannerTypeName <CurrentType>k__BackingField;
    public MeScannerBracketModeParseParameters CurrentBracketModeParseParameters { get; }
    public MeScannerTypeName CurrentType { get; public set; }
    public MeScannerContext FindNamespaceByPrefix { get; }
    public Func`2<string, XamlAstXmlTypeReference> TypeResolver { get; }
    public MeScannerContext(Func`2<string, XamlAstXmlTypeReference> typeResolver, IXamlLineInfo lineInfo);
    [CompilerGeneratedAttribute]
public MeScannerBracketModeParseParameters get_CurrentBracketModeParseParameters();
    [CompilerGeneratedAttribute]
public MeScannerTypeName get_CurrentType();
    [CompilerGeneratedAttribute]
public void set_CurrentType(MeScannerTypeName value);
    public MeScannerContext get_FindNamespaceByPrefix();
    public Func`2<string, XamlAstXmlTypeReference> get_TypeResolver();
    public XamlAstNamePropertyReference ResolvePropertyName(string pname);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class XamlX.Parsers.SystemXamlMarkupExtensionParser.MeScannerKnownStrings : object {
    public static string XmlPrefix;
    public static string XmlNsPrefix;
    public static string Preserve;
    public static string Default;
    public static string UriClrNamespace;
    public static string UriAssembly;
    public static string StringType;
    public static string ObjectType;
    public static string Get;
    public static string Set;
    public static string Add;
    public static string Handler;
    public static string Extension;
    public static string IsReadOnly;
    public static string ShouldSerialize;
    public static string FrameworkElement;
    public static string TypeExtension;
    public static char GraveQuote;
    public static char NestedTypeDelimiter;
    public static string GetEnumerator;
    public static string ICollectionOfT;
    public static string IDictionary;
    public static string IDictionaryOfKT;
    public static string NullableOfT;
    public static string KeyValuePairOfTT;
    public static string AmbientPropertyAttribute;
    public static string DependencyPropertySuffix;
    public static string XpsNamespace;
    public static string LocalPrefix;
    public static string DefaultPrefix;
    public static string ReferenceName;
    public static Char[] WhitespaceChars;
    public static char SpaceChar;
    public static char TabChar;
    public static char NewlineChar;
    public static char ReturnChar;
    public static string ClrNamespaceFormat;
    public static string CreateDelegateHelper;
    public static string CreateDelegate;
    public static string InvokeMember;
    public static string GetTypeFromHandle;
    public static string Member;
    public static string Property;
    private static MeScannerKnownStrings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Parsers.SystemXamlMarkupExtensionParser.MeScannerParseException : Exception {
    public MeScannerParseException(MeScanner meScanner, string error);
    public MeScannerParseException(string error);
}
internal class XamlX.Parsers.SystemXamlMarkupExtensionParser.MeScannerSpecialBracketCharacters : object {
    public bool StartsEscapeSequence(char ch);
    public bool EndsEscapeSequence(char ch);
    public bool Match(char peek, char ch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Parsers.SystemXamlMarkupExtensionParser.MeScannerSr : object {
    public static string Get(string error);
    public static string Get(string error, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Parsers.SystemXamlMarkupExtensionParser.MeScannerSRID : object {
    public static string UnexpectedTokenAfterME;
    public static string MalformedBracketCharacters;
    public static string UnclosedQuote;
    public static string QuoteCharactersOutOfPlace;
    public static string InvalidClosingBracketCharacers;
    public static string MalformedPropertyName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Parsers.SystemXamlMarkupExtensionParser.MeScannerTypeName : object {
    [CompilerGeneratedAttribute]
private XamlAstXmlTypeReference <TypeReference>k__BackingField;
    public XamlAstXmlTypeReference TypeReference { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Namespace { get; }
    public bool IsMarkupExtension { get; }
    public MeScannerTypeName(XamlAstXmlTypeReference typeReference);
    [CompilerGeneratedAttribute]
public XamlAstXmlTypeReference get_TypeReference();
    public static MeScannerTypeName ParseInternal(string longName, MeScannerContext context);
    public string get_Name();
    [NullableContextAttribute("2")]
public string get_Namespace();
    public bool get_IsMarkupExtension();
}
internal enum XamlX.Parsers.SystemXamlMarkupExtensionParser.MeTokenType : Enum {
    public int value__;
    public static MeTokenType None;
    public static MeTokenType Open;
    public static MeTokenType Close;
    public static MeTokenType EqualSign;
    public static MeTokenType Comma;
    public static MeTokenType TypeName;
    public static MeTokenType PropertyName;
    public static MeTokenType String;
    public static MeTokenType QuotedMarkupExtension;
}
internal class XamlX.Parsers.SystemXamlMarkupExtensionParser.SystemXamlMarkupExtensionParser : object {
    [NullableContextAttribute("1")]
public static IXamlAstValueNode Parse(IXamlLineInfo li, string ext, Func`2<string, XamlAstXmlTypeReference> typeResolver);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static IXamlAstValueNode <Parse>g__ReadExtension|0_0(<>c__DisplayClass0_0& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static IXamlAstValueNode <Parse>g__Read|0_1(<>c__DisplayClass0_0& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static IXamlAstValueNode <Parse>g__ReadCurrent|0_2(<>c__DisplayClass0_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Parsers.XDocumentXamlParser : object {
    public static XamlDocument Parse(string s, Dictionary`2<string, string> compatibilityMappings);
    public static XamlDocument Parse(TextReader reader, Dictionary`2<string, string> compatibilityMappings);
}
internal class XamlX.Parsers.XDocumentXamlParserSettings : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CompatibleNamespaces>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> CompatibleNamespaces { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CompatibleNamespaces();
    [CompilerGeneratedAttribute]
public void set_CompatibleNamespaces(Dictionary`2<string, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Transform.AstTransformationContext : XamlContextBase {
    [NullableAttribute("2")]
private IXamlAstValueNode _rootObject;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <NamespaceAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformerConfiguration <Configuration>k__BackingField;
    [NullableAttribute("2")]
public string Document { get; }
    public Dictionary`2<string, string> NamespaceAliases { get; public set; }
    public TransformerConfiguration Configuration { get; }
    public IXamlAstValueNode RootObject { get; public set; }
    public AstTransformationContext(TransformerConfiguration configuration, XamlDocument xamlDocument);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Document();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_NamespaceAliases();
    [CompilerGeneratedAttribute]
public void set_NamespaceAliases(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public TransformerConfiguration get_Configuration();
    public IXamlAstValueNode get_RootObject();
    public void set_RootObject(IXamlAstValueNode value);
    public XamlDiagnosticSeverity ReportDiagnostic(XamlDiagnostic diagnostic, bool throwOnFatal);
    public IXamlAstNode Visit(IXamlAstNode root, IXamlAstTransformer transformer);
    public void VisitChildren(IXamlAstNode root, IXamlAstTransformer transformer);
    protected bool OnUnhandledTransformError(Exception exception);
}
internal class XamlX.Transform.GuidIdentifierGenerator : object {
    [NullableContextAttribute("1")]
public sealed virtual string GenerateIdentifierPart();
}
[NullableContextAttribute("1")]
internal interface XamlX.Transform.IXamlAstTransformer {
    public abstract virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
[NullableContextAttribute("1")]
internal interface XamlX.Transform.IXamlCustomAttributeResolver {
    public abstract virtual IXamlCustomAttribute GetCustomAttribute(IXamlType type, IXamlType attributeType);
    public abstract virtual IXamlCustomAttribute GetCustomAttribute(IXamlProperty property, IXamlType attributeType);
}
[NullableContextAttribute("1")]
internal interface XamlX.Transform.IXamlIdentifierGenerator {
    public abstract virtual string GenerateIdentifierPart();
}
internal static class XamlX.Transform.NamespaceInfoHelper : object {
    [NullableContextAttribute("1")]
public static List`1<NamespaceResolveResult> TryResolve(TransformerConfiguration config, string xmlns);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Transform.TransformerConfiguration : object {
    private Dictionary`2<Type, object> _extras;
    [CompilerGeneratedAttribute]
private IXamlTypeSystem <TypeSystem>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IXamlAssembly <DefaultAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlLanguageTypeMappings <TypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlXmlnsMappings <XmlnsMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlTypeWellKnownTypes <WellKnownTypes>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private XamlValueConverter <CustomValueConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlDiagnosticsHandler <DiagnosticsHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlIdentifierGenerator <IdentifierGenerator>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, string>> <KnownDirectives>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<object, IXamlProperty> _contentPropertyCache;
    private IDictionary`2<object, bool> _whitespaceSignificantCollectionCache;
    private IDictionary`2<object, bool> _trimSurroundingWhitespaceCache;
    public IXamlTypeSystem TypeSystem { get; }
    [NullableAttribute("2")]
public IXamlAssembly DefaultAssembly { get; }
    public XamlLanguageTypeMappings TypeMappings { get; }
    public XamlXmlnsMappings XmlnsMappings { get; }
    public XamlTypeWellKnownTypes WellKnownTypes { get; }
    [NullableAttribute("2")]
public XamlValueConverter CustomValueConverter { get; }
    public XamlDiagnosticsHandler DiagnosticsHandler { get; }
    public IXamlIdentifierGenerator IdentifierGenerator { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, string>> KnownDirectives { get; }
    [NullableContextAttribute("2")]
public TransformerConfiguration(IXamlTypeSystem typeSystem, IXamlAssembly defaultAssembly, XamlLanguageTypeMappings typeMappings, XamlXmlnsMappings xmlnsMappings, XamlValueConverter customValueConverter, IXamlIdentifierGenerator identifierGenerator, XamlDiagnosticsHandler diagnosticsHandler);
    public T GetExtra();
    public T GetOrCreateExtra();
    public void AddExtra(T extra);
    [CompilerGeneratedAttribute]
public IXamlTypeSystem get_TypeSystem();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IXamlAssembly get_DefaultAssembly();
    [CompilerGeneratedAttribute]
public XamlLanguageTypeMappings get_TypeMappings();
    [CompilerGeneratedAttribute]
public XamlXmlnsMappings get_XmlnsMappings();
    [CompilerGeneratedAttribute]
public XamlTypeWellKnownTypes get_WellKnownTypes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public XamlValueConverter get_CustomValueConverter();
    [CompilerGeneratedAttribute]
public XamlDiagnosticsHandler get_DiagnosticsHandler();
    [CompilerGeneratedAttribute]
public IXamlIdentifierGenerator get_IdentifierGenerator();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<string, string>> get_KnownDirectives();
    public IXamlProperty FindContentProperty(IXamlType type);
    public bool IsWhitespaceSignificantCollection(IXamlType type);
    public bool IsTrimSurroundingWhitespaceElement(IXamlType type);
    private bool IsAttributePresentInTypeHierarchy(IXamlType type, List`1<IXamlType> attributes, IDictionary`2<object, bool> cache);
    [IteratorStateMachineAttribute("XamlX.Transform.TransformerConfiguration/<GetCustomAttribute>d__40")]
public IEnumerable`1<IXamlCustomAttribute> GetCustomAttribute(IXamlType type, IXamlType attributeType);
    [IteratorStateMachineAttribute("XamlX.Transform.TransformerConfiguration/<GetCustomAttribute>d__41")]
public IEnumerable`1<IXamlCustomAttribute> GetCustomAttribute(IXamlType type, IEnumerable`1<IXamlType> types);
    [IteratorStateMachineAttribute("XamlX.Transform.TransformerConfiguration/<GetCustomAttribute>d__42")]
public IEnumerable`1<IXamlCustomAttribute> GetCustomAttribute(IXamlProperty prop, IXamlType attributeType);
    [IteratorStateMachineAttribute("XamlX.Transform.TransformerConfiguration/<GetCustomAttribute>d__43")]
public IEnumerable`1<IXamlCustomAttribute> GetCustomAttribute(IXamlProperty prop, IEnumerable`1<IXamlType> types);
}
internal class XamlX.Transform.Transformers.ApplyWhitespaceNormalization : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
    [NullableContextAttribute("1")]
private static bool WantsWhitespaceOnlyElements(TransformerConfiguration config, XamlAstClrProperty property, IList`1<IXamlAstValueNode> childNodes);
}
internal class XamlX.Transform.Transformers.ConstructableObjectTransformer : object {
    [NullableContextAttribute("1")]
private IXamlConstructor TransformArgumentsAndGetConstructor(AstTransformationContext context, XamlAstObjectNode n);
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.ContentConvertTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.ConvertPropertyValuesToAssignmentsTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
    [NullableContextAttribute("1")]
private static IXamlAstValueNode FindAndRemoveKey(AstTransformationContext context, IXamlAstValueNode value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <Transform>g__CanAssign|0_3(IXamlAstValueNode value, IXamlType type, <>c__DisplayClass0_0& , <>c__DisplayClass0_4& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <FindAndRemoveKey>g__IsKeyDirective|1_0(object node);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <FindAndRemoveKey>g__ProcessDirective|1_1(object d, <>c__DisplayClass1_0& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <FindAndRemoveKey>g__ProcessDirectiveCandidateList|1_2(IList nodes, <>c__DisplayClass1_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static IXamlAstManipulationNode <FindAndRemoveKey>g__VisitManipulationNode|1_3(IXamlAstManipulationNode man, <>c__DisplayClass1_0& );
}
internal class XamlX.Transform.Transformers.DeferredContentTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.FlattenAstTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.KnownDirectivesTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.MarkupExtensionTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.NewObjectTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.ObsoleteWarningsTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.PropertyReferenceResolver : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.RemoveWhitespaceBetweenPropertyValuesTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.ResolveContentPropertyTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.ResolvePropertyValueAddersTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.StaticIntrinsicsPostProcessTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.TextNodeMerger : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
internal class XamlX.Transform.Transformers.TopDownInitializationTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <Transform>g__UsableDuringInitialization|0_0(IXamlType type, <>c__DisplayClass0_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <Transform>g__TryConvert|0_1(IXamlAstValueNode checkedNode, IXamlAstValueNode& value, IXamlAstManipulationNode& deferred, <>c__DisplayClass0_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Transform.Transformers.TypeReferenceResolver : object {
    public static XamlAstClrTypeReference ResolveType(AstTransformationContext context, string xmlns, string name, bool isMarkupExtension, List`1<XamlAstXmlTypeReference> typeArguments, IXamlLineInfo lineInfo);
    private static XamlAstClrTypeReference ResolveTypeCore(AstTransformationContext context, string xmlns, string name, bool isMarkupExtension, List`1<XamlAstXmlTypeReference> typeArguments, IXamlLineInfo lineInfo);
    public static XamlAstClrTypeReference ResolveType(AstTransformationContext context, string xmlName, bool isMarkupExtension, IXamlLineInfo lineInfo, bool strict);
    public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
    public static XamlAstClrTypeReference ResolveType(AstTransformationContext context, XamlAstXmlTypeReference xmlref);
}
internal class XamlX.Transform.Transformers.XamlIntrinsicsTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static XamlAstTextNode <Transform>g__ResolveArgumentOrValue|0_0(string extension, string name, <>c__DisplayClass0_0& );
}
internal class XamlX.Transform.Transformers.XArgumentsTransformer : object {
    [NullableContextAttribute("1")]
public sealed virtual IXamlAstNode Transform(AstTransformationContext context, IXamlAstNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class XamlX.Transform.WhitespaceNormalization : object {
    public static bool IsWhitespace(string text);
    private static bool IsWhitespace(char ch);
    internal static string NormalizeWhitespace(string text, bool trimStart, bool trimEnd);
    public static void Apply(List`1<IXamlAstValueNode> contentNodes, TransformerConfiguration config);
    public static void RemoveWhitespaceNodes(List`1<T> nodes);
    private static bool ShouldRemoveNode(IXamlAstNode node);
    [CompilerGeneratedAttribute]
internal static bool <Apply>g__ShouldTrimWhitespaceAround|3_0(int index, <>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Transform.XamlContextBase : object {
    private Dictionary`2<Type, object> _items;
    private List`1<IXamlAstNode> _parentNodes;
    public T GetItem();
    public T GetOrCreateItem();
    public bool TryGetItem(T& rv);
    public void SetItem(T item);
    [IteratorStateMachineAttribute("XamlX.Transform.XamlContextBase/<ParentNodes>d__6")]
public IEnumerable`1<IXamlAstNode> ParentNodes();
    protected void PushParent(IXamlAstNode node);
    protected IXamlAstNode PopParent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Transform.XamlDiagnosticsHandler : object {
    [CompilerGeneratedAttribute]
private Func`2<object, string> <CodeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Exception, string> <ExceptionFormatter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<XamlDiagnostic, XamlDiagnosticSeverity> <HandleDiagnostic>k__BackingField;
    public Func`2<object, string> CodeMappings { get; public set; }
    public Func`2<Exception, string> ExceptionFormatter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<XamlDiagnostic, XamlDiagnosticSeverity> HandleDiagnostic { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_CodeMappings();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CodeMappings(Func`2<object, string> value);
    [CompilerGeneratedAttribute]
public Func`2<Exception, string> get_ExceptionFormatter();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExceptionFormatter(Func`2<Exception, string> value);
    [CompilerGeneratedAttribute]
public Func`2<XamlDiagnostic, XamlDiagnosticSeverity> get_HandleDiagnostic();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HandleDiagnostic(Func`2<XamlDiagnostic, XamlDiagnosticSeverity> value);
    internal XamlDiagnosticSeverity ReportDiagnostic(XamlDiagnostic diagnostic);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class XamlX.Transform.XamlLanguageTypeMappings : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<IXamlType> <XmlnsAttributes>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<IXamlType> <UsableDuringInitializationAttributes>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<IXamlType> <ContentAttributes>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<IXamlType> <WhitespaceSignificantCollectionAttributes>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<IXamlType> <TrimSurroundingWhitespaceAttributes>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<IXamlType> <TypeConverterAttributes>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IXamlType <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <TypeDescriptorContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <SupportInitialize>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <ProvideValueTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <RootObjectProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <ParentStackProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <XmlNamespaceInfoProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <UriContextProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <IAddChild>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <IAddChildOfT>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlCustomAttributeResolver <CustomAttributeResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlMethod <InnerServiceProviderFactoryMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlMethod <DeferredContentExecutorCustomization>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<IXamlType> <DeferredContentPropertyAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <DeferredContentExecutorCustomizationDefaultTypeParameter>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<string> <DeferredContentExecutorCustomizationTypeParameterDeferredContentAttributePropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootObjectProviderIntermediateRootPropertyName>k__BackingField;
    [NullableAttribute("1")]
public List`1<IXamlType> XmlnsAttributes { get; public set; }
    [NullableAttribute("1")]
public List`1<IXamlType> UsableDuringInitializationAttributes { get; public set; }
    [NullableAttribute("1")]
public List`1<IXamlType> ContentAttributes { get; public set; }
    [NullableAttribute("1")]
public List`1<IXamlType> WhitespaceSignificantCollectionAttributes { get; public set; }
    [NullableAttribute("1")]
public List`1<IXamlType> TrimSurroundingWhitespaceAttributes { get; public set; }
    [NullableAttribute("1")]
public List`1<IXamlType> TypeConverterAttributes { get; public set; }
    [NullableAttribute("1")]
public IXamlType ServiceProvider { get; public set; }
    public IXamlType TypeDescriptorContext { get; public set; }
    public IXamlType SupportInitialize { get; public set; }
    public IXamlType ProvideValueTarget { get; public set; }
    public IXamlType RootObjectProvider { get; public set; }
    public IXamlType ParentStackProvider { get; public set; }
    public IXamlType XmlNamespaceInfoProvider { get; public set; }
    public IXamlType UriContextProvider { get; public set; }
    public IXamlType IAddChild { get; public set; }
    public IXamlType IAddChildOfT { get; public set; }
    public IXamlCustomAttributeResolver CustomAttributeResolver { get; public set; }
    public IXamlMethod InnerServiceProviderFactoryMethod { get; public set; }
    public IXamlMethod DeferredContentExecutorCustomization { get; public set; }
    [NullableAttribute("1")]
public List`1<IXamlType> DeferredContentPropertyAttributes { get; public set; }
    public IXamlType DeferredContentExecutorCustomizationDefaultTypeParameter { get; public set; }
    [NullableAttribute("1")]
public List`1<string> DeferredContentExecutorCustomizationTypeParameterDeferredContentAttributePropertyNames { get; public set; }
    public string RootObjectProviderIntermediateRootPropertyName { get; public set; }
    [NullableContextAttribute("1")]
public XamlLanguageTypeMappings(IXamlTypeSystem typeSystem);
    [NullableContextAttribute("1")]
public XamlLanguageTypeMappings(IXamlTypeSystem typeSystem, bool useDefault);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<IXamlType> get_XmlnsAttributes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_XmlnsAttributes(List`1<IXamlType> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<IXamlType> get_UsableDuringInitializationAttributes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_UsableDuringInitializationAttributes(List`1<IXamlType> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<IXamlType> get_ContentAttributes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ContentAttributes(List`1<IXamlType> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<IXamlType> get_WhitespaceSignificantCollectionAttributes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_WhitespaceSignificantCollectionAttributes(List`1<IXamlType> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<IXamlType> get_TrimSurroundingWhitespaceAttributes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TrimSurroundingWhitespaceAttributes(List`1<IXamlType> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<IXamlType> get_TypeConverterAttributes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TypeConverterAttributes(List`1<IXamlType> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IXamlType get_ServiceProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ServiceProvider(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlType get_TypeDescriptorContext();
    [CompilerGeneratedAttribute]
public void set_TypeDescriptorContext(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlType get_SupportInitialize();
    [CompilerGeneratedAttribute]
public void set_SupportInitialize(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlType get_ProvideValueTarget();
    [CompilerGeneratedAttribute]
public void set_ProvideValueTarget(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlType get_RootObjectProvider();
    [CompilerGeneratedAttribute]
public void set_RootObjectProvider(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlType get_ParentStackProvider();
    [CompilerGeneratedAttribute]
public void set_ParentStackProvider(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlType get_XmlNamespaceInfoProvider();
    [CompilerGeneratedAttribute]
public void set_XmlNamespaceInfoProvider(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlType get_UriContextProvider();
    [CompilerGeneratedAttribute]
public void set_UriContextProvider(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlType get_IAddChild();
    [CompilerGeneratedAttribute]
public void set_IAddChild(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlType get_IAddChildOfT();
    [CompilerGeneratedAttribute]
public void set_IAddChildOfT(IXamlType value);
    [CompilerGeneratedAttribute]
public IXamlCustomAttributeResolver get_CustomAttributeResolver();
    [CompilerGeneratedAttribute]
public void set_CustomAttributeResolver(IXamlCustomAttributeResolver value);
    [CompilerGeneratedAttribute]
public IXamlMethod get_InnerServiceProviderFactoryMethod();
    [CompilerGeneratedAttribute]
public void set_InnerServiceProviderFactoryMethod(IXamlMethod value);
    [CompilerGeneratedAttribute]
public IXamlMethod get_DeferredContentExecutorCustomization();
    [CompilerGeneratedAttribute]
public void set_DeferredContentExecutorCustomization(IXamlMethod value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<IXamlType> get_DeferredContentPropertyAttributes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_DeferredContentPropertyAttributes(List`1<IXamlType> value);
    [CompilerGeneratedAttribute]
public IXamlType get_DeferredContentExecutorCustomizationDefaultTypeParameter();
    [CompilerGeneratedAttribute]
public void set_DeferredContentExecutorCustomizationDefaultTypeParameter(IXamlType value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<string> get_DeferredContentExecutorCustomizationTypeParameterDeferredContentAttributePropertyNames();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_DeferredContentExecutorCustomizationTypeParameterDeferredContentAttributePropertyNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_RootObjectProviderIntermediateRootPropertyName();
    [CompilerGeneratedAttribute]
public void set_RootObjectProviderIntermediateRootPropertyName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class XamlX.Transform.XamlTransformHelpers : object {
    public static IReadOnlyList`1<IXamlMethod> FindPossibleAdders(AstTransformationContext context, IXamlType type);
    public static IEnumerable`1<IXamlMethod> GetMarkupExtensionProvideValueAlternatives(AstTransformationContext context, IXamlType type);
    public static bool TryConvertMarkupExtension(AstTransformationContext context, IXamlAstValueNode node, XamlMarkupExtensionNode& o);
    public static bool TryGetCorrectlyTypedValue(AstTransformationContext context, IXamlAstValueNode node, IXamlType xamlType, IXamlAstValueNode& rv);
    public static bool TryGetCorrectlyTypedValue(AstTransformationContext context, IXamlAstValueNode node, IXamlProperty property, IXamlAstValueNode& rv);
    public static bool TryGetCorrectlyTypedValue(AstTransformationContext context, IXamlAstValueNode node, IXamlParameterInfo parameterInfo, IXamlAstValueNode& rv);
    public static bool TryGetCorrectlyTypedValue(AstTransformationContext context, IXamlAstValueNode node, IReadOnlyList`1<IXamlCustomAttribute> customAttributes, IXamlType type, IXamlAstValueNode& rv);
    [NullableContextAttribute("2")]
public static IXamlType TryGetTypeConverterFromCustomAttribute(TransformerConfiguration cfg, IXamlCustomAttribute attribute);
    [ExtensionAttribute]
public static IXamlType GetCommonBaseClass(IXamlType[] types);
    private static IXamlAstValueNode CreateInvariantCulture(TransformerConfiguration cfg, IXamlLineInfo lineInfo);
    public static bool TryConvertValue(AstTransformationContext context, IXamlAstValueNode node, IReadOnlyList`1<IXamlCustomAttribute> customAttributes, IXamlType type, XamlAstClrProperty propertyContext, IXamlAstValueNode& rv);
    private static IXamlAstValueNode ConvertWithConverter(IXamlAstValueNode node, IXamlType converterType, TransformerConfiguration cfg, IXamlType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.Transform.XamlTypeWellKnownTypes : object {
    [CompilerGeneratedAttribute]
private IXamlType <IList>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <IEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <IEnumerableT>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <IListOfT>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <String>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <Int32>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <Void>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <Boolean>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <Double>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <NullableT>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <IFormatProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <Delegate>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <ObsoleteAttribute>k__BackingField;
    public IXamlType IList { get; }
    public IXamlType IEnumerable { get; }
    public IXamlType IEnumerableT { get; }
    public IXamlType IListOfT { get; }
    public IXamlType Object { get; }
    public IXamlType String { get; }
    public IXamlType Int32 { get; }
    public IXamlType Void { get; }
    public IXamlType Boolean { get; }
    public IXamlType Double { get; }
    public IXamlType NullableT { get; }
    public IXamlType CultureInfo { get; }
    public IXamlType IFormatProvider { get; }
    public IXamlType Delegate { get; }
    public IXamlType ObsoleteAttribute { get; }
    public XamlTypeWellKnownTypes(IXamlTypeSystem typeSystem);
    [CompilerGeneratedAttribute]
public IXamlType get_IList();
    [CompilerGeneratedAttribute]
public IXamlType get_IEnumerable();
    [CompilerGeneratedAttribute]
public IXamlType get_IEnumerableT();
    [CompilerGeneratedAttribute]
public IXamlType get_IListOfT();
    [CompilerGeneratedAttribute]
public IXamlType get_Object();
    [CompilerGeneratedAttribute]
public IXamlType get_String();
    [CompilerGeneratedAttribute]
public IXamlType get_Int32();
    [CompilerGeneratedAttribute]
public IXamlType get_Void();
    [CompilerGeneratedAttribute]
public IXamlType get_Boolean();
    [CompilerGeneratedAttribute]
public IXamlType get_Double();
    [CompilerGeneratedAttribute]
public IXamlType get_NullableT();
    [CompilerGeneratedAttribute]
public IXamlType get_CultureInfo();
    [CompilerGeneratedAttribute]
public IXamlType get_IFormatProvider();
    [CompilerGeneratedAttribute]
public IXamlType get_Delegate();
    [CompilerGeneratedAttribute]
public IXamlType get_ObsoleteAttribute();
}
internal class XamlX.Transform.XamlXmlnsMappings : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<ValueTuple`2<IXamlAssembly, string>>> <Namespaces>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, List`1<ValueTuple`2<IXamlAssembly, string>>> Namespaces { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<ValueTuple`2<IXamlAssembly, string>>> get_Namespaces();
    [CompilerGeneratedAttribute]
public void set_Namespaces(Dictionary`2<string, List`1<ValueTuple`2<IXamlAssembly, string>>> value);
    [NullableContextAttribute("1")]
public static XamlXmlnsMappings Resolve(IXamlTypeSystem typeSystem, XamlLanguageTypeMappings typeMappings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class XamlX.TrimmingMessages : object {
    public static string TrimmedAttributes;
    public static string CanBeSafelyTrimmed;
    public static string TypePreservedElsewhere;
    public static string GeneratedTypes;
    public static string Cecil;
    public static string DynamicXamlReference;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.TypeSystem.AnonymousParameterInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <ParameterType>k__BackingField;
    public string Name { get; }
    public IXamlType ParameterType { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public AnonymousParameterInfo(IXamlType type, string name);
    public AnonymousParameterInfo(IXamlType type, int index);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IXamlType get_ParameterType();
    public sealed virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.TypeSystem.FindMethodMethodSignature : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlType <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExactMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeclaringOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IXamlType> <Parameters>k__BackingField;
    public string Name { get; public set; }
    public IXamlType ReturnType { get; public set; }
    public bool IsStatic { get; public set; }
    public bool IsExactMatch { get; public set; }
    public bool DeclaringOnly { get; public set; }
    public IReadOnlyList`1<IXamlType> Parameters { get; public set; }
    public FindMethodMethodSignature(string name, IXamlType returnType, IXamlType[] parameters);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IXamlType get_ReturnType();
    [CompilerGeneratedAttribute]
public void set_ReturnType(IXamlType value);
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    [CompilerGeneratedAttribute]
public void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExactMatch();
    [CompilerGeneratedAttribute]
public void set_IsExactMatch(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeclaringOnly();
    [CompilerGeneratedAttribute]
public void set_DeclaringOnly(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IXamlType> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IReadOnlyList`1<IXamlType> value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IFileSource {
    public string FilePath { get; }
    public Byte[] FileContents { get; }
    public abstract virtual string get_FilePath();
    public abstract virtual Byte[] get_FileContents();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlAssembly {
    public string Name { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public abstract virtual string get_Name();
    public abstract virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public abstract virtual IXamlType FindType(string fullName);
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlConstructor {
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public IReadOnlyList`1<IXamlType> Parameters { get; }
    public abstract virtual bool get_IsPublic();
    public abstract virtual bool get_IsStatic();
    public abstract virtual IReadOnlyList`1<IXamlType> get_Parameters();
    public abstract virtual IXamlParameterInfo GetParameterInfo(int index);
}
internal interface XamlX.TypeSystem.IXamlConstructorBuilder`1 {
    [NullableAttribute("1")]
public TBackendEmitter Generator { get; }
    [NullableContextAttribute("1")]
public abstract virtual TBackendEmitter get_Generator();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlCustomAttribute {
    public IXamlType Type { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<object> Parameters { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Properties { get; }
    public abstract virtual IXamlType get_Type();
    public abstract virtual List`1<object> get_Parameters();
    public abstract virtual Dictionary`2<string, object> get_Properties();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlDelegateTypeBuilder {
    public abstract virtual IXamlType DefineDelegateType(IXamlType returnType, IList`1<IXamlType> argumentTypes);
}
[NullableContextAttribute("2")]
internal interface XamlX.TypeSystem.IXamlEventInfo {
    public IXamlMethod Add { get; }
    public abstract virtual IXamlMethod get_Add();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlField {
    public IXamlType FieldType { get; }
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public bool IsLiteral { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public abstract virtual IXamlType get_FieldType();
    public abstract virtual bool get_IsPublic();
    public abstract virtual bool get_IsStatic();
    public abstract virtual bool get_IsLiteral();
    public abstract virtual object GetLiteralValue();
    public abstract virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
}
internal interface XamlX.TypeSystem.IXamlLabel {
}
internal interface XamlX.TypeSystem.IXamlLocal {
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlMember {
    public string Name { get; }
    public IXamlType DeclaringType { get; }
    public abstract virtual string get_Name();
    public abstract virtual IXamlType get_DeclaringType();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlMethod {
    public bool IsPublic { get; }
    public bool IsPrivate { get; }
    public bool IsFamily { get; }
    public bool IsStatic { get; }
    public bool ContainsGenericParameters { get; }
    public bool IsGenericMethod { get; }
    public bool IsGenericMethodDefinition { get; }
    public IXamlType ReturnType { get; }
    public IReadOnlyList`1<IXamlType> Parameters { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public IReadOnlyList`1<IXamlType> GenericParameters { get; }
    public IReadOnlyList`1<IXamlType> GenericArguments { get; }
    public abstract virtual bool get_IsPublic();
    public abstract virtual bool get_IsPrivate();
    public abstract virtual bool get_IsFamily();
    public abstract virtual bool get_IsStatic();
    public abstract virtual bool get_ContainsGenericParameters();
    public abstract virtual bool get_IsGenericMethod();
    public abstract virtual bool get_IsGenericMethodDefinition();
    public abstract virtual IXamlType get_ReturnType();
    public abstract virtual IReadOnlyList`1<IXamlType> get_Parameters();
    public abstract virtual IXamlMethod MakeGenericMethod(IReadOnlyList`1<IXamlType> typeArguments);
    public abstract virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public abstract virtual IXamlParameterInfo GetParameterInfo(int index);
    public abstract virtual IReadOnlyList`1<IXamlType> get_GenericParameters();
    public abstract virtual IReadOnlyList`1<IXamlType> get_GenericArguments();
}
internal interface XamlX.TypeSystem.IXamlMethodBuilder`1 {
    [NullableAttribute("1")]
public TBackendEmitter Generator { get; }
    [NullableContextAttribute("1")]
public abstract virtual TBackendEmitter get_Generator();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlParameterInfo {
    public IXamlType ParameterType { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public abstract virtual IXamlType get_ParameterType();
    public abstract virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlProperty {
    public IXamlType PropertyType { get; }
    [NullableAttribute("2")]
public IXamlMethod Setter { get; }
    [NullableAttribute("2")]
public IXamlMethod Getter { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public IReadOnlyList`1<IXamlType> IndexerParameters { get; }
    public abstract virtual IXamlType get_PropertyType();
    [NullableContextAttribute("2")]
public abstract virtual IXamlMethod get_Setter();
    [NullableContextAttribute("2")]
public abstract virtual IXamlMethod get_Getter();
    public abstract virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public abstract virtual IReadOnlyList`1<IXamlType> get_IndexerParameters();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlType {
    public object Id { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Namespace { get; }
    public string FullName { get; }
    public bool IsPublic { get; }
    public bool IsNestedPrivate { get; }
    [NullableAttribute("2")]
public IXamlAssembly Assembly { get; }
    public IReadOnlyList`1<IXamlProperty> Properties { get; }
    public IReadOnlyList`1<IXamlEventInfo> Events { get; }
    public IReadOnlyList`1<IXamlField> Fields { get; }
    public IReadOnlyList`1<IXamlMethod> Methods { get; }
    public IReadOnlyList`1<IXamlConstructor> Constructors { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public IReadOnlyList`1<IXamlType> GenericArguments { get; }
    [NullableAttribute("2")]
public IXamlType GenericTypeDefinition { get; }
    public bool IsArray { get; }
    [NullableAttribute("2")]
public IXamlType ArrayElementType { get; }
    [NullableAttribute("2")]
public IXamlType BaseType { get; }
    [NullableAttribute("2")]
public IXamlType DeclaringType { get; }
    public bool IsValueType { get; }
    public bool IsEnum { get; }
    public IReadOnlyList`1<IXamlType> Interfaces { get; }
    public bool IsInterface { get; }
    public IReadOnlyList`1<IXamlType> GenericParameters { get; }
    public bool IsFunctionPointer { get; }
    public abstract virtual object get_Id();
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual string get_Namespace();
    public abstract virtual string get_FullName();
    public abstract virtual bool get_IsPublic();
    public abstract virtual bool get_IsNestedPrivate();
    [NullableContextAttribute("2")]
public abstract virtual IXamlAssembly get_Assembly();
    public abstract virtual IReadOnlyList`1<IXamlProperty> get_Properties();
    public abstract virtual IReadOnlyList`1<IXamlEventInfo> get_Events();
    public abstract virtual IReadOnlyList`1<IXamlField> get_Fields();
    public abstract virtual IReadOnlyList`1<IXamlMethod> get_Methods();
    public abstract virtual IReadOnlyList`1<IXamlConstructor> get_Constructors();
    public abstract virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public abstract virtual IReadOnlyList`1<IXamlType> get_GenericArguments();
    public abstract virtual bool IsAssignableFrom(IXamlType type);
    public abstract virtual IXamlType MakeGenericType(IReadOnlyList`1<IXamlType> typeArguments);
    [NullableContextAttribute("2")]
public abstract virtual IXamlType get_GenericTypeDefinition();
    public abstract virtual bool get_IsArray();
    [NullableContextAttribute("2")]
public abstract virtual IXamlType get_ArrayElementType();
    public abstract virtual IXamlType MakeArrayType(int dimensions);
    [NullableContextAttribute("2")]
public abstract virtual IXamlType get_BaseType();
    [NullableContextAttribute("2")]
public abstract virtual IXamlType get_DeclaringType();
    public abstract virtual bool get_IsValueType();
    public abstract virtual bool get_IsEnum();
    public abstract virtual IReadOnlyList`1<IXamlType> get_Interfaces();
    public abstract virtual bool get_IsInterface();
    public abstract virtual IXamlType GetEnumUnderlyingType();
    public abstract virtual IReadOnlyList`1<IXamlType> get_GenericParameters();
    public abstract virtual bool get_IsFunctionPointer();
    public abstract virtual int GetHashCode();
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlTypeBuilder`1 {
    public abstract virtual IXamlField DefineField(IXamlType type, string name, XamlVisibility visibility, bool isStatic);
    public abstract virtual void AddInterfaceImplementation(IXamlType type);
    public abstract virtual IXamlMethodBuilder`1<TBackendEmitter> DefineMethod(IXamlType returnType, IEnumerable`1<IXamlType> args, string name, XamlVisibility visibility, bool isStatic, bool isInterfaceImpl, IXamlMethod overrideMethod);
    public abstract virtual IXamlProperty DefineProperty(IXamlType propertyType, string name, IXamlMethod setter, IXamlMethod getter);
    public abstract virtual IXamlConstructorBuilder`1<TBackendEmitter> DefineConstructor(bool isStatic, IXamlType[] args);
    public abstract virtual IXamlType CreateType();
    public abstract virtual IXamlTypeBuilder`1<TBackendEmitter> DefineSubType(IXamlType baseType, string name, XamlVisibility visibility);
    public abstract virtual IXamlTypeBuilder`1<TBackendEmitter> DefineDelegateSubType(string name, XamlVisibility visibility, IXamlType returnType, IEnumerable`1<IXamlType> parameterTypes);
    public abstract virtual void DefineGenericParameters(IReadOnlyList`1<KeyValuePair`2<string, XamlGenericParameterConstraint>> names);
}
[NullableContextAttribute("1")]
internal interface XamlX.TypeSystem.IXamlTypeSystem {
    public IEnumerable`1<IXamlAssembly> Assemblies { get; }
    public abstract virtual IEnumerable`1<IXamlAssembly> get_Assemblies();
    public abstract virtual IXamlAssembly FindAssembly(string substring);
    public abstract virtual IXamlType FindType(string name);
    public abstract virtual IXamlType FindType(string name, string assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.TypeSystem.TypeSystemHelpers : object {
    public static int ConvertLiteralToInt(object literal);
    public static long ConvertLiteralToLong(object literal);
    public static XamlConstantNode GetLiteralFieldConstantNode(IXamlField field, IXamlLineInfo info);
    public static object GetLiteralFieldConstantValue(IXamlField field);
    public static bool TryGetEnumValueNode(IXamlType enumType, string value, IXamlLineInfo lineInfo, bool ignoreCase, XamlConstantNode& rv);
    public static bool TryGetEnumValue(IXamlType enumType, string value, bool ignoreCase, Object& rv);
    private static object Or(object l, object r);
    public static bool ParseConstantIfTypeAllows(string s, IXamlType type, IXamlLineInfo info, XamlConstantNode& rv);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static object <ParseConstantIfTypeAllows>g__Parse|7_0(<>c__DisplayClass7_0& );
}
internal class XamlX.TypeSystem.XamlGenericParameterConstraint : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsClass>k__BackingField;
    public bool IsClass { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsClass();
    [CompilerGeneratedAttribute]
public void set_IsClass(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.TypeSystem.XamlLocalsPool : object {
    private Func`2<IXamlType, IXamlLocal> _localFactory;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<IXamlType, IXamlLocal>> _localsPool;
    public XamlLocalsPool(Func`2<IXamlType, IXamlLocal> localFactory);
    public PooledLocal GetLocal(IXamlType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.TypeSystem.XamlPseudoType : object {
    [CompilerGeneratedAttribute]
private object <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlPseudoType <Null>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlPseudoType <Unknown>k__BackingField;
    public object Id { get; }
    public string Name { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public bool IsPublic { get; }
    public bool IsNestedPrivate { get; }
    [NullableAttribute("2")]
public IXamlAssembly Assembly { get; }
    public IReadOnlyList`1<IXamlProperty> Properties { get; }
    public IReadOnlyList`1<IXamlEventInfo> Events { get; }
    public IReadOnlyList`1<IXamlField> Fields { get; }
    public IReadOnlyList`1<IXamlMethod> Methods { get; }
    public IReadOnlyList`1<IXamlConstructor> Constructors { get; }
    public IReadOnlyList`1<IXamlCustomAttribute> CustomAttributes { get; }
    public IReadOnlyList`1<IXamlType> GenericArguments { get; }
    [NullableAttribute("2")]
public IXamlType BaseType { get; }
    [NullableAttribute("2")]
public IXamlType DeclaringType { get; }
    public bool IsValueType { get; }
    public bool IsEnum { get; }
    public IReadOnlyList`1<IXamlType> Interfaces { get; }
    public bool IsInterface { get; }
    public IReadOnlyList`1<IXamlType> GenericParameters { get; }
    public bool IsFunctionPointer { get; }
    [NullableAttribute("2")]
public IXamlType GenericTypeDefinition { get; }
    public bool IsArray { get; }
    [NullableAttribute("2")]
public IXamlType ArrayElementType { get; }
    public static XamlPseudoType Null { get; }
    public static XamlPseudoType Unknown { get; }
    public XamlPseudoType(string name);
    private static XamlPseudoType();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IXamlType other);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsNestedPrivate();
    [NullableContextAttribute("2")]
public sealed virtual IXamlAssembly get_Assembly();
    public sealed virtual IReadOnlyList`1<IXamlProperty> get_Properties();
    public sealed virtual IReadOnlyList`1<IXamlEventInfo> get_Events();
    public sealed virtual IReadOnlyList`1<IXamlField> get_Fields();
    public sealed virtual IReadOnlyList`1<IXamlMethod> get_Methods();
    public sealed virtual IReadOnlyList`1<IXamlConstructor> get_Constructors();
    public sealed virtual IReadOnlyList`1<IXamlCustomAttribute> get_CustomAttributes();
    public sealed virtual IReadOnlyList`1<IXamlType> get_GenericArguments();
    public sealed virtual IXamlType MakeArrayType(int dimensions);
    [NullableContextAttribute("2")]
public sealed virtual IXamlType get_BaseType();
    [NullableContextAttribute("2")]
public sealed virtual IXamlType get_DeclaringType();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual IReadOnlyList`1<IXamlType> get_Interfaces();
    public sealed virtual bool get_IsInterface();
    public sealed virtual IXamlType GetEnumUnderlyingType();
    public sealed virtual IReadOnlyList`1<IXamlType> get_GenericParameters();
    public sealed virtual bool get_IsFunctionPointer();
    [NullableContextAttribute("2")]
public sealed virtual bool IsAssignableFrom(IXamlType type);
    public sealed virtual IXamlType MakeGenericType(IReadOnlyList`1<IXamlType> typeArguments);
    [NullableContextAttribute("2")]
public sealed virtual IXamlType get_GenericTypeDefinition();
    public sealed virtual bool get_IsArray();
    [NullableContextAttribute("2")]
public sealed virtual IXamlType get_ArrayElementType();
    [CompilerGeneratedAttribute]
public static XamlPseudoType get_Null();
    [CompilerGeneratedAttribute]
public static XamlPseudoType get_Unknown();
    public static XamlPseudoType Unresolved(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class XamlX.TypeSystem.XamlTypeSystemExtensions : object {
    [ExtensionAttribute]
public static string GetFqn(IXamlType type);
    [ExtensionAttribute]
public static string GetFullName(IXamlType type);
    [ExtensionAttribute]
public static IXamlType GetType(IXamlTypeSystem sys, string type);
    [IteratorStateMachineAttribute("XamlX.TypeSystem.XamlTypeSystemExtensions/<FindMethods>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<IXamlMethod> FindMethods(IXamlType type, Func`2<IXamlMethod, bool> criteria);
    [ExtensionAttribute]
public static IXamlMethod GetMethod(IXamlType type, Func`2<IXamlMethod, bool> criteria);
    [ExtensionAttribute]
public static IXamlMethod FindMethod(IXamlType type, Func`2<IXamlMethod, bool> criteria);
    [ExtensionAttribute]
public static IXamlMethod GetMethod(IXamlType type, string name, IXamlType returnType, bool allowDowncast, IXamlType[] args);
    [ExtensionAttribute]
public static IXamlMethod FindMethod(IXamlType type, string name, IXamlType returnType, bool allowDowncast, IXamlType[] args);
    [ExtensionAttribute]
public static IXamlMethod GetMethod(IXamlType type, FindMethodMethodSignature signature);
    [ExtensionAttribute]
public static IXamlMethod FindMethod(IXamlType type, FindMethodMethodSignature signature);
    [ExtensionAttribute]
public static IXamlConstructor GetConstructor(IXamlType type, List`1<IXamlType> args);
    [ExtensionAttribute]
public static IXamlConstructor FindConstructor(IXamlType type, List`1<IXamlType> args);
    [ExtensionAttribute]
public static bool AcceptsNull(IXamlType type);
    [ExtensionAttribute]
public static bool IsNullable(IXamlType type);
    [ExtensionAttribute]
public static bool IsNullableOf(IXamlType type, IXamlType vtype);
    [ExtensionAttribute]
public static IXamlType MakeGenericType(IXamlType type, IXamlType[] typeArguments);
    [IteratorStateMachineAttribute("XamlX.TypeSystem.XamlTypeSystemExtensions/<GetAllInterfaces>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<IXamlType> GetAllInterfaces(IXamlType type);
    [IteratorStateMachineAttribute("XamlX.TypeSystem.XamlTypeSystemExtensions/<GetAllCustomAttributes>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<IXamlCustomAttribute> GetAllCustomAttributes(IXamlType type);
    [IteratorStateMachineAttribute("XamlX.TypeSystem.XamlTypeSystemExtensions/<GetAllProperties>d__18")]
[ExtensionAttribute]
public static IEnumerable`1<IXamlProperty> GetAllProperties(IXamlType t);
    [IteratorStateMachineAttribute("XamlX.TypeSystem.XamlTypeSystemExtensions/<GetAllFields>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<IXamlField> GetAllFields(IXamlType t);
    [IteratorStateMachineAttribute("XamlX.TypeSystem.XamlTypeSystemExtensions/<GetAllEvents>d__20")]
[ExtensionAttribute]
public static IEnumerable`1<IXamlEventInfo> GetAllEvents(IXamlType t);
    [ExtensionAttribute]
public static bool IsDirectlyAssignableFrom(IXamlType type, IXamlType other);
    [ExtensionAttribute]
public static IXamlType ThisOrFirstParameter(IXamlMethod method);
    [ExtensionAttribute]
public static IReadOnlyList`1<IXamlType> ParametersWithThis(IXamlMethod method);
}
internal enum XamlX.TypeSystem.XamlVisibility : Enum {
    public int value__;
    public static XamlVisibility Public;
    public static XamlVisibility Assembly;
    public static XamlVisibility Private;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.XamlDiagnostic : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlDiagnosticSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlDiagnosticSeverity <MinSeverity>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Document>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <InnerException>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Code { get; public set; }
    public XamlDiagnosticSeverity Severity { get; public set; }
    public string Title { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    public Nullable`1<int> LinePosition { get; public set; }
    public XamlDiagnosticSeverity MinSeverity { get; public set; }
    [NullableAttribute("2")]
public string Document { get; public set; }
    [NullableAttribute("2")]
internal Exception InnerException { get; internal set; }
    private int XamlX.Ast.IXamlLineInfo.Line { get; private set; }
    private int XamlX.Ast.IXamlLineInfo.Position { get; private set; }
    public XamlDiagnostic(string Code, XamlDiagnosticSeverity Severity, string Title, Nullable`1<int> LineNumber, Nullable`1<int> LinePosition);
    public XamlDiagnostic(string code, XamlDiagnosticSeverity severity, string title, IXamlLineInfo lineInfo);
    [CompilerGeneratedAttribute]
protected XamlDiagnostic(XamlDiagnostic original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Code(string value);
    [CompilerGeneratedAttribute]
public XamlDiagnosticSeverity get_Severity();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Severity(XamlDiagnosticSeverity value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LineNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LinePosition();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LinePosition(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public XamlDiagnosticSeverity get_MinSeverity();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MinSeverity(XamlDiagnosticSeverity value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Document();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Document(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Exception get_InnerException();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InnerException(Exception value);
    private sealed virtual override int XamlX.Ast.IXamlLineInfo.get_Line();
    private sealed virtual override void XamlX.Ast.IXamlLineInfo.set_Line(int value);
    private sealed virtual override int XamlX.Ast.IXamlLineInfo.get_Position();
    private sealed virtual override void XamlX.Ast.IXamlLineInfo.set_Position(int value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(XamlDiagnostic left, XamlDiagnostic right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(XamlDiagnostic left, XamlDiagnostic right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(XamlDiagnostic other);
    [CompilerGeneratedAttribute]
public virtual XamlDiagnostic <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Code, XamlDiagnosticSeverity& Severity, String& Title, Nullable`1& LineNumber, Nullable`1& LinePosition);
}
internal enum XamlX.XamlDiagnosticSeverity : Enum {
    public int value__;
    public static XamlDiagnosticSeverity None;
    public static XamlDiagnosticSeverity Warning;
    public static XamlDiagnosticSeverity Error;
    public static XamlDiagnosticSeverity Fatal;
}
internal class XamlX.XamlLoadException : XamlParseException {
    [NullableContextAttribute("2")]
public XamlLoadException(string message, IXamlLineInfo lineInfo, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class XamlX.XamlNamespaces : object {
    public static string Xaml2006;
    public static string Blend2008;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class XamlX.XamlParseException : XmlException {
    [CompilerGeneratedAttribute]
private string <Document>k__BackingField;
    public string Document { get; public set; }
    [NullableContextAttribute("1")]
public XamlParseException(string message, int line, int position, Exception innerException);
    public XamlParseException(string message, IXamlLineInfo lineInfo, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_Document();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Document(string value);
}
internal class XamlX.XamlTransformException : XamlParseException {
    [NullableContextAttribute("2")]
public XamlTransformException(string message, IXamlLineInfo lineInfo, Exception innerException);
}
internal class XamlX.XamlTypeSystemException : Exception {
    [NullableContextAttribute("1")]
public XamlTypeSystemException(string message, Exception innerException);
}
internal enum XamlX.XamlXWellKnownDiagnosticCodes : Enum {
    public int value__;
    public static XamlXWellKnownDiagnosticCodes Obsolete;
}
