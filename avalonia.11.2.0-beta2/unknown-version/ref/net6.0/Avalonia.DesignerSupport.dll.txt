public class Avalonia.DesignerSupport.DesignWindowLoader : object {
    public static Window LoadDesignerWindow(string xaml, string assemblyPath, string xamlFileProjectPath);
    public static Window LoadDesignerWindow(string xaml, string assemblyPath, string xamlFileProjectPath, double renderScaling);
}
internal class Avalonia.DesignerSupport.Remote.ClipboardStub : object {
    public sealed virtual Task`1<string> GetTextAsync();
    public sealed virtual Task SetTextAsync(string text);
    public sealed virtual Task ClearAsync();
    public sealed virtual Task SetDataObjectAsync(IDataObject data);
    public sealed virtual Task`1<String[]> GetFormatsAsync();
    public sealed virtual Task`1<object> GetDataAsync(string format);
}
internal class Avalonia.DesignerSupport.Remote.CursorFactoryStub : object {
    public sealed virtual ICursorImpl GetCursor(StandardCursorType cursorType);
    public sealed virtual ICursorImpl CreateCursor(IBitmapImpl cursor, PixelPoint hotSpot);
}
internal class Avalonia.DesignerSupport.Remote.DetachableTransportConnection : object {
    private IAvaloniaRemoteTransportConnection _inner;
    [CompilerGeneratedAttribute]
private Action`2<IAvaloniaRemoteTransportConnection, object> OnMessage;
    public DetachableTransportConnection(IAvaloniaRemoteTransportConnection inner);
    public sealed virtual void Dispose();
    public void FireOnMessage(IAvaloniaRemoteTransportConnection transport, object obj);
    public sealed virtual Task Send(object data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    public sealed virtual void add_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    public sealed virtual void remove_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    public sealed virtual void Start();
}
internal class Avalonia.DesignerSupport.Remote.FileWatcherTransport : object {
    private string _appPath;
    private string _path;
    private string _lastContents;
    private bool _disposed;
    private Action`2<IAvaloniaRemoteTransportConnection, object> _onMessage;
    public string PreviewerMethod { get; }
    public FileWatcherTransport(Uri file, string appPath);
    public sealed virtual void Dispose();
    private void Dump(object o, string pad);
    public sealed virtual Task Send(object data);
    public sealed virtual void add_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    public sealed virtual void remove_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    public sealed virtual void add_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    public sealed virtual void remove_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    public sealed virtual void Start();
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.FileWatcherTransport/<UpdaterThread>d__16")]
private void UpdaterThread();
    public sealed virtual string get_PreviewerMethod();
}
public class Avalonia.DesignerSupport.Remote.HtmlTransport.HtmlWebSocketTransport : object {
    private IAvaloniaRemoteTransportConnection _signalTransport;
    private SimpleWebSocketHttpServer _simpleServer;
    private Dictionary`2<string, Byte[]> _resources;
    private SimpleWebSocket _pendingSocket;
    private bool _disposed;
    private object _lock;
    private Uri _listenUri;
    private Guid _secretCookie;
    private AutoResetEvent _wakeup;
    private FrameMessage _lastFrameMessage;
    private FrameMessage _lastSentFrameMessage;
    private Action`2<IAvaloniaRemoteTransportConnection, object> _onMessage;
    private Action`2<IAvaloniaRemoteTransportConnection, Exception> _onException;
    private static Dictionary`2<string, string> Mime;
    private static Byte[] NotFound;
    public HtmlWebSocketTransport(IAvaloniaRemoteTransportConnection signalTransport, Uri listenUri);
    private static HtmlWebSocketTransport();
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.HtmlWebSocketTransport/<AcceptWorker>d__16")]
private void AcceptWorker();
    private bool IsValidOrigin(SimpleWebSocketHttpRequest request);
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.HtmlWebSocketTransport/<SocketReceiveWorker>d__18")]
private void SocketReceiveWorker(SimpleWebSocket socket);
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.HtmlWebSocketTransport/<SocketWorker>d__19")]
private void SocketWorker();
    public sealed virtual void Dispose();
    public sealed virtual Task Send(object data);
    public sealed virtual void Start();
    public sealed virtual void add_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    public sealed virtual void remove_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    private void OnSignalTransportMessage(IAvaloniaRemoteTransportConnection signal, object message);
    public sealed virtual void add_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    public sealed virtual void remove_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    private void OnSignalTransportException(IAvaloniaRemoteTransportConnection arg1, Exception ex);
    private static object ParseMessage(string message);
    private static InputModifiers[] ParseInputModifiers(string modifiersText);
    private static MouseButton ParseMouseButton(string buttonText);
    private static double ParseDouble(string text);
}
public class Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocket : object {
    private Stream _stream;
    private AsyncLock _sendLock;
    private AsyncLock _recvLock;
    private static int WebsocketInitialHeaderLength;
    private static int WebsocketLen16Length;
    private static int WebsocketLen64Length;
    private static int WebsocketLen16Code;
    private static int WebsocketLen64Code;
    private Byte[] _sendHeaderBuffer;
    private MemoryStream _receiveFrameStream;
    private MemoryStream _receiveMessageStream;
    private FrameType _currentMessageFrameType;
    private Byte[] _recvHeaderBuffer;
    private Byte[] _maskBuffer;
    private Byte[] _readExactBuffer;
    internal SimpleWebSocket(Stream stream);
    public sealed virtual void Dispose();
    public Task SendMessage(string text);
    public Task SendMessage(bool isText, Byte[] data);
    public Task SendMessage(bool isText, Byte[] data, int offset, int length);
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocket/<SendFrame>d__20")]
private Task SendFrame(FrameType type, Byte[] data, int offset, int length);
    private static void CopyHeaderToBuffer(WebSocketHeader source, Byte[] destination, int headerLength);
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocket/<ReadFrame>d__25")]
private Task`1<Frame> ReadFrame();
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocket/<ReceiveMessage>d__26")]
public Task`1<SimpleWebSocketMessage> ReceiveMessage();
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocket/<ReadExact>d__28")]
private Task ReadExact(Stream from, MemoryStream to, int length);
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocket/<ReadExact>d__29")]
private Task ReadExact(Stream from, Byte[] to, int offset, int length);
}
public class Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocketHttpRequest : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    private NetworkStream _stream;
    [CompilerGeneratedAttribute]
private bool <IsWebsocketRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <WebSocketProtocols>k__BackingField;
    private string _websocketKey;
    public Dictionary`2<string, string> Headers { get; }
    public string Path { get; }
    public bool IsWebsocketRequest { get; }
    public IReadOnlyList`1<string> WebSocketProtocols { get; }
    public SimpleWebSocketHttpRequest(NetworkStream stream, string path, Dictionary`2<string, string> headers);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public bool get_IsWebsocketRequest();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_WebSocketProtocols();
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocketHttpRequest/<RespondAsync>d__15")]
public Task RespondAsync(int code, Byte[] data, string contentType);
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocketHttpRequest/<AcceptWebSocket>d__16")]
public Task`1<SimpleWebSocket> AcceptWebSocket(string protocol);
    public sealed virtual void Dispose();
}
public class Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocketHttpServer : object {
    private IPAddress _address;
    private int _port;
    private TcpListener _listener;
    public SimpleWebSocketHttpServer(IPAddress address, int port);
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocketHttpServer/<AcceptAsync>d__3")]
public Task`1<SimpleWebSocketHttpRequest> AcceptAsync();
    [AsyncStateMachineAttribute("Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocketHttpServer/<AcceptAsyncImpl>d__4")]
private Task`1<SimpleWebSocketHttpRequest> AcceptAsyncImpl();
    public void Listen();
    public sealed virtual void Dispose();
}
public class Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocketMessage : object {
    [CompilerGeneratedAttribute]
private bool <IsText>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public bool IsText { get; public set; }
    public Byte[] Data { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsText();
    [CompilerGeneratedAttribute]
public void set_IsText(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    public string AsString();
}
internal class Avalonia.DesignerSupport.Remote.IconLoaderStub : object {
    public sealed virtual IWindowIconImpl LoadIcon(string fileName);
    public sealed virtual IWindowIconImpl LoadIcon(Stream stream);
    public sealed virtual IWindowIconImpl LoadIcon(IBitmapImpl bitmap);
}
internal interface Avalonia.DesignerSupport.Remote.ITransportWithEnforcedMethod {
    public string PreviewerMethod { get; }
    public abstract virtual string get_PreviewerMethod();
}
internal class Avalonia.DesignerSupport.Remote.NoopStorageProvider : BclStorageProvider {
    public bool CanOpen { get; }
    public bool CanSave { get; }
    public bool CanPickFolder { get; }
    public virtual bool get_CanOpen();
    public virtual Task`1<IReadOnlyList`1<IStorageFile>> OpenFilePickerAsync(FilePickerOpenOptions options);
    public virtual bool get_CanSave();
    public virtual Task`1<IStorageFile> SaveFilePickerAsync(FilePickerSaveOptions options);
    public virtual bool get_CanPickFolder();
    public virtual Task`1<IReadOnlyList`1<IStorageFolder>> OpenFolderPickerAsync(FolderPickerOpenOptions options);
}
internal class Avalonia.DesignerSupport.Remote.PreviewerWindowImpl : RemoteServerTopLevelImpl {
    private IAvaloniaRemoteTransportConnection _transport;
    [CompilerGeneratedAttribute]
private PixelPoint <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<PixelPoint> <PositionChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Deactivated>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Activated>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<WindowCloseReason, bool> <Closing>k__BackingField;
    [CompilerGeneratedAttribute]
private IPlatformHandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowState <WindowState>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<WindowState> <WindowStateChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <MaxAutoSizeHint>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <GotInputWhenDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<bool> <ExtendClientAreaToDecorationsChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <ExtendedMargins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClientAreaExtendedToDecorations>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <OffScreenMargin>k__BackingField;
    public double DesktopScaling { get; }
    public PixelPoint Position { get; public set; }
    public Action`1<PixelPoint> PositionChanged { get; public set; }
    public Action Deactivated { get; public set; }
    public Action Activated { get; public set; }
    public Func`2<WindowCloseReason, bool> Closing { get; public set; }
    public IPlatformHandle Handle { get; }
    public WindowState WindowState { get; public set; }
    public Action`1<WindowState> WindowStateChanged { get; public set; }
    public Size MaxAutoSizeHint { get; }
    public Action GotInputWhenDisabled { get; public set; }
    public Action`1<bool> ExtendClientAreaToDecorationsChanged { get; public set; }
    public Thickness ExtendedMargins { get; }
    public bool IsClientAreaExtendedToDecorations { get; }
    public Thickness OffScreenMargin { get; }
    public bool NeedsManagedDecorations { get; }
    public PreviewerWindowImpl(IAvaloniaRemoteTransportConnection transport);
    public sealed virtual void Show(bool activate, bool isDialog);
    public sealed virtual void Hide();
    public sealed virtual void BeginMoveDrag(PointerPressedEventArgs e);
    public sealed virtual void BeginResizeDrag(WindowEdge edge, PointerPressedEventArgs e);
    public sealed virtual double get_DesktopScaling();
    [CompilerGeneratedAttribute]
public sealed virtual PixelPoint get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(PixelPoint value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<PixelPoint> get_PositionChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PositionChanged(Action`1<PixelPoint> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_Deactivated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Deactivated(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_Activated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Activated(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<WindowCloseReason, bool> get_Closing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Closing(Func`2<WindowCloseReason, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IPlatformHandle get_Handle();
    [CompilerGeneratedAttribute]
public sealed virtual WindowState get_WindowState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WindowState(WindowState value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<WindowState> get_WindowStateChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WindowStateChanged(Action`1<WindowState> value);
    [CompilerGeneratedAttribute]
public sealed virtual Size get_MaxAutoSizeHint();
    protected virtual void OnMessage(IAvaloniaRemoteTransportConnection transport, object obj);
    public sealed virtual void Resize(Size clientSize, WindowResizeReason reason);
    public sealed virtual void Move(PixelPoint point);
    public sealed virtual void SetMinMaxSize(Size minSize, Size maxSize);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_GotInputWhenDisabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GotInputWhenDisabled(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<bool> get_ExtendClientAreaToDecorationsChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtendClientAreaToDecorationsChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Thickness get_ExtendedMargins();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClientAreaExtendedToDecorations();
    [CompilerGeneratedAttribute]
public sealed virtual Thickness get_OffScreenMargin();
    public sealed virtual bool get_NeedsManagedDecorations();
    public virtual object TryGetFeature(Type featureType);
    public sealed virtual void Activate();
    public sealed virtual void SetTitle(string title);
    public sealed virtual void SetSystemDecorations(SystemDecorations enabled);
    public sealed virtual void SetIcon(IWindowIconImpl icon);
    public sealed virtual void ShowTaskbarIcon(bool value);
    public sealed virtual void CanResize(bool value);
    public sealed virtual void SetTopmost(bool value);
    public sealed virtual void SetParent(IWindowImpl parent);
    public sealed virtual void SetEnabled(bool enable);
    public sealed virtual void SetExtendClientAreaToDecorationsHint(bool extendIntoClientAreaHint);
    public sealed virtual void SetExtendClientAreaChromeHints(ExtendClientAreaChromeHints hints);
    public sealed virtual void SetExtendClientAreaTitleBarHeightHint(double titleBarHeight);
    public sealed virtual void GetWindowsZOrder(Span`1<Window> windows, Span`1<long> zOrder);
    private sealed virtual override Nullable`1<Size> Avalonia.Platform.IWindowBaseImpl.get_FrameSize();
}
internal class Avalonia.DesignerSupport.Remote.PreviewerWindowingPlatform : object {
    private static IKeyboardDevice Keyboard;
    private static IAvaloniaRemoteTransportConnection s_transport;
    private static DetachableTransportConnection s_lastWindowTransport;
    private static PreviewerWindowImpl s_lastWindow;
    public static List`1<object> PreFlightMessages;
    private static PreviewerWindowingPlatform();
    public sealed virtual ITrayIconImpl CreateTrayIcon();
    public sealed virtual IWindowImpl CreateWindow();
    public sealed virtual ITopLevelImpl CreateEmbeddableTopLevel();
    public sealed virtual IWindowImpl CreateEmbeddableWindow();
    public static void Initialize(IAvaloniaRemoteTransportConnection transport);
}
public class Avalonia.DesignerSupport.Remote.RemoteDesignerEntryPoint : object {
    private static ClientSupportedPixelFormatsMessage s_supportedPixelFormats;
    private static ClientViewportAllocatedMessage s_viewportAllocatedMessage;
    private static ClientRenderInfoMessage s_renderInfoMessage;
    private static double s_lastRenderScaling;
    private static IAvaloniaRemoteTransportConnection s_transport;
    private static Window s_currentWindow;
    private static RemoteDesignerEntryPoint();
    private static Exception Die(string error);
    private static void Log(string message);
    private static Exception PrintUsage();
    private static CommandLineArgs ParseCommandLineArgs(String[] args);
    private static IAvaloniaRemoteTransportConnection CreateTransport(CommandLineArgs args);
    public static void Main(String[] cmdline);
    private static void RebuildPreFlight();
    private static void OnTransportMessage(IAvaloniaRemoteTransportConnection transport, object obj);
}
internal class Avalonia.DesignerSupport.Remote.ScreenStub : ScreensBase`2<int, PlatformScreen> {
    protected virtual IReadOnlyList`1<int> GetAllScreenKeys();
    protected virtual PlatformScreen CreateScreenFromKey(int key);
}
internal class Avalonia.DesignerSupport.Remote.WindowStub : object {
    [CompilerGeneratedAttribute]
private Action <Deactivated>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Activated>k__BackingField;
    [CompilerGeneratedAttribute]
private IPlatformHandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <MaxAutoSizeHint>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <ClientSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RenderScaling>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Surfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<RawInputEventArgs> <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Rect> <Paint>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<Size, WindowResizeReason> <Resized>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<double> <ScalingChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<WindowCloseReason, bool> <Closing>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <LostFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private IMouseDevice <MouseDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelPoint <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<PixelPoint> <PositionChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowState <WindowState>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<WindowState> <WindowStateChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<WindowTransparencyLevel> <TransparencyLevelChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<bool> <ExtendClientAreaToDecorationsChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <ExtendedMargins>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <OffScreenMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private Compositor <Compositor>k__BackingField;
    [CompilerGeneratedAttribute]
private IPopupPositioner <PopupPositioner>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <GotInputWhenDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClientAreaExtendedToDecorations>k__BackingField;
    [CompilerGeneratedAttribute]
private AcrylicPlatformCompensationLevels <AcrylicCompensationLevels>k__BackingField;
    public Action Deactivated { get; public set; }
    public Action Activated { get; public set; }
    public IPlatformHandle Handle { get; }
    public Size MaxAutoSizeHint { get; }
    public Size ClientSize { get; }
    public Nullable`1<Size> FrameSize { get; }
    public double RenderScaling { get; }
    public double DesktopScaling { get; }
    public IEnumerable`1<object> Surfaces { get; }
    public Action`1<RawInputEventArgs> Input { get; public set; }
    public Action`1<Rect> Paint { get; public set; }
    public Action`2<Size, WindowResizeReason> Resized { get; public set; }
    public Action`1<double> ScalingChanged { get; public set; }
    public Func`2<WindowCloseReason, bool> Closing { get; public set; }
    public Action Closed { get; public set; }
    public Action LostFocus { get; public set; }
    public IMouseDevice MouseDevice { get; }
    public PixelPoint Position { get; public set; }
    public Action`1<PixelPoint> PositionChanged { get; public set; }
    public WindowState WindowState { get; public set; }
    public Action`1<WindowState> WindowStateChanged { get; public set; }
    public Action`1<WindowTransparencyLevel> TransparencyLevelChanged { get; public set; }
    public Action`1<bool> ExtendClientAreaToDecorationsChanged { get; public set; }
    public Thickness ExtendedMargins { get; }
    public Thickness OffScreenMargin { get; }
    public Compositor Compositor { get; }
    public IPopupPositioner PopupPositioner { get; }
    public Action GotInputWhenDisabled { get; public set; }
    public WindowTransparencyLevel TransparencyLevel { get; }
    public bool IsClientAreaExtendedToDecorations { get; }
    public bool NeedsManagedDecorations { get; }
    public AcrylicPlatformCompensationLevels AcrylicCompensationLevels { get; }
    public WindowStub(IWindowImpl parent);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_Deactivated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Deactivated(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_Activated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Activated(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual IPlatformHandle get_Handle();
    [CompilerGeneratedAttribute]
public sealed virtual Size get_MaxAutoSizeHint();
    [CompilerGeneratedAttribute]
public sealed virtual Size get_ClientSize();
    public sealed virtual Nullable`1<Size> get_FrameSize();
    [CompilerGeneratedAttribute]
public sealed virtual double get_RenderScaling();
    public sealed virtual double get_DesktopScaling();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<object> get_Surfaces();
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<RawInputEventArgs> get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Input(Action`1<RawInputEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<Rect> get_Paint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Paint(Action`1<Rect> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<Size, WindowResizeReason> get_Resized();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Resized(Action`2<Size, WindowResizeReason> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<double> get_ScalingChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScalingChanged(Action`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<WindowCloseReason, bool> get_Closing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Closing(Func`2<WindowCloseReason, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_Closed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Closed(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_LostFocus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LostFocus(Action value);
    [CompilerGeneratedAttribute]
public IMouseDevice get_MouseDevice();
    public sealed virtual IPopupImpl CreatePopup();
    [CompilerGeneratedAttribute]
public sealed virtual PixelPoint get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(PixelPoint value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<PixelPoint> get_PositionChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PositionChanged(Action`1<PixelPoint> value);
    [CompilerGeneratedAttribute]
public sealed virtual WindowState get_WindowState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WindowState(WindowState value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<WindowState> get_WindowStateChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WindowStateChanged(Action`1<WindowState> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<WindowTransparencyLevel> get_TransparencyLevelChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransparencyLevelChanged(Action`1<WindowTransparencyLevel> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<bool> get_ExtendClientAreaToDecorationsChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtendClientAreaToDecorationsChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Thickness get_ExtendedMargins();
    [CompilerGeneratedAttribute]
public sealed virtual Thickness get_OffScreenMargin();
    [CompilerGeneratedAttribute]
public sealed virtual Compositor get_Compositor();
    public sealed virtual void Dispose();
    public void Invalidate(Rect rect);
    public sealed virtual void SetInputRoot(IInputRoot inputRoot);
    public sealed virtual Point PointToClient(PixelPoint p);
    public sealed virtual PixelPoint PointToScreen(Point p);
    public sealed virtual void SetCursor(ICursorImpl cursor);
    public sealed virtual void Show(bool activate, bool isDialog);
    public sealed virtual void Hide();
    public sealed virtual void BeginMoveDrag(PointerPressedEventArgs e);
    public sealed virtual void BeginResizeDrag(WindowEdge edge, PointerPressedEventArgs e);
    public sealed virtual void Activate();
    public sealed virtual void Resize(Size clientSize, WindowResizeReason reason);
    public sealed virtual void Move(PixelPoint point);
    public sealed virtual void SetMinMaxSize(Size minSize, Size maxSize);
    public sealed virtual void SetTitle(string title);
    public void ShowDialog(IWindowImpl parent);
    public sealed virtual void SetSystemDecorations(SystemDecorations enabled);
    public sealed virtual void SetIcon(IWindowIconImpl icon);
    public sealed virtual void ShowTaskbarIcon(bool value);
    public sealed virtual void CanResize(bool value);
    public sealed virtual void SetTopmost(bool value);
    public sealed virtual void SetParent(IWindowImpl parent);
    public sealed virtual void SetEnabled(bool enable);
    public sealed virtual void SetExtendClientAreaToDecorationsHint(bool extendIntoClientAreaHint);
    public sealed virtual void SetExtendClientAreaChromeHints(ExtendClientAreaChromeHints hints);
    public sealed virtual void SetExtendClientAreaTitleBarHeightHint(double titleBarHeight);
    public sealed virtual void GetWindowsZOrder(Span`1<Window> windows, Span`1<long> zOrder);
    [CompilerGeneratedAttribute]
public sealed virtual IPopupPositioner get_PopupPositioner();
    [CompilerGeneratedAttribute]
public sealed virtual Action get_GotInputWhenDisabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GotInputWhenDisabled(Action value);
    public sealed virtual void SetTransparencyLevelHint(IReadOnlyList`1<WindowTransparencyLevel> transparencyLevel);
    public sealed virtual void SetWindowManagerAddShadowHint(bool enabled);
    public sealed virtual WindowTransparencyLevel get_TransparencyLevel();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClientAreaExtendedToDecorations();
    public sealed virtual bool get_NeedsManagedDecorations();
    public sealed virtual void SetFrameThemeVariant(PlatformThemeVariant themeVariant);
    [CompilerGeneratedAttribute]
public sealed virtual AcrylicPlatformCompensationLevels get_AcrylicCompensationLevels();
    public sealed virtual object TryGetFeature(Type featureType);
    [CompilerGeneratedAttribute]
private void <.ctor>b__89_0(PixelPoint _, Size size, double __);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
