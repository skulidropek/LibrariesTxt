[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("BindingExpression and ReflectionBinding heavily use reflection. Consider using CompiledBindings instead.")]
public class Avalonia.Data.Binding : BindingBase {
    [CompilerGeneratedAttribute]
private string <ElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativeSource <RelativeSource>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<string, string, Type> <TypeResolver>k__BackingField;
    public string ElementName { get; public set; }
    public RelativeSource RelativeSource { get; public set; }
    public object Source { get; public set; }
    [NullableAttribute("1")]
public string Path { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<string, string, Type> TypeResolver { get; public set; }
    [NullableContextAttribute("1")]
public Binding(string path, BindingMode mode);
    [CompilerGeneratedAttribute]
public string get_ElementName();
    [CompilerGeneratedAttribute]
public void set_ElementName(string value);
    [CompilerGeneratedAttribute]
public RelativeSource get_RelativeSource();
    [CompilerGeneratedAttribute]
public void set_RelativeSource(RelativeSource value);
    [CompilerGeneratedAttribute]
public object get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Path();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Func`3<string, string, Type> get_TypeResolver();
    [CompilerGeneratedAttribute]
public void set_TypeResolver(Func`3<string, string, Type> value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public virtual InstancedBinding Initiate(AvaloniaObject target, AvaloniaProperty targetProperty, object anchor, bool enableDataValidation);
    [NullableContextAttribute("1")]
private protected virtual BindingExpressionBase Instance(AvaloniaObject target, AvaloniaProperty targetProperty, object anchor);
    [NullableContextAttribute("1")]
internal BindingExpression CreateObservableForTreeDataTemplate(object source);
    [NullableContextAttribute("1")]
private UntypedBindingExpressionBase InstanceCore(AvaloniaProperty targetProperty, AvaloniaObject target, object anchor, bool enableDataValidation);
    private INameScope GetNameScope();
    private ExpressionNode CreateSourceNode(AvaloniaProperty targetProperty);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Avalonia.Data.BindingBase : object {
    [CompilerGeneratedAttribute]
private IValueConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <ConverterCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FallbackValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateSourceTrigger <UpdateSourceTrigger>k__BackingField;
    [CompilerGeneratedAttribute]
private WeakReference <DefaultAnchor>k__BackingField;
    [CompilerGeneratedAttribute]
private WeakReference`1<INameScope> <NameScope>k__BackingField;
    public IValueConverter Converter { get; public set; }
    [TypeConverterAttribute("Avalonia.Data.CultureInfoIetfLanguageTagConverter")]
public CultureInfo ConverterCulture { get; public set; }
    public object ConverterParameter { get; public set; }
    public object FallbackValue { get; public set; }
    public object TargetNullValue { get; public set; }
    public BindingMode Mode { get; public set; }
    public BindingPriority Priority { get; public set; }
    public string StringFormat { get; public set; }
    public UpdateSourceTrigger UpdateSourceTrigger { get; public set; }
    public WeakReference DefaultAnchor { get; public set; }
    public WeakReference`1<INameScope> NameScope { get; public set; }
    public BindingBase(BindingMode mode);
    [CompilerGeneratedAttribute]
public IValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IValueConverter value);
    [CompilerGeneratedAttribute]
public CultureInfo get_ConverterCulture();
    [CompilerGeneratedAttribute]
public void set_ConverterCulture(CultureInfo value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    [CompilerGeneratedAttribute]
public object get_FallbackValue();
    [CompilerGeneratedAttribute]
public void set_FallbackValue(object value);
    [CompilerGeneratedAttribute]
public object get_TargetNullValue();
    [CompilerGeneratedAttribute]
public void set_TargetNullValue(object value);
    [CompilerGeneratedAttribute]
public BindingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(BindingMode value);
    [CompilerGeneratedAttribute]
public BindingPriority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(BindingPriority value);
    [CompilerGeneratedAttribute]
public string get_StringFormat();
    [CompilerGeneratedAttribute]
public void set_StringFormat(string value);
    [CompilerGeneratedAttribute]
public UpdateSourceTrigger get_UpdateSourceTrigger();
    [CompilerGeneratedAttribute]
public void set_UpdateSourceTrigger(UpdateSourceTrigger value);
    [CompilerGeneratedAttribute]
public WeakReference get_DefaultAnchor();
    [CompilerGeneratedAttribute]
public void set_DefaultAnchor(WeakReference value);
    [CompilerGeneratedAttribute]
public WeakReference`1<INameScope> get_NameScope();
    [CompilerGeneratedAttribute]
public void set_NameScope(WeakReference`1<INameScope> value);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual InstancedBinding Initiate(AvaloniaObject target, AvaloniaProperty targetProperty, object anchor, bool enableDataValidation);
    [NullableContextAttribute("1")]
private protected abstract virtual BindingExpressionBase Instance(AvaloniaObject target, AvaloniaProperty targetProperty, object anchor);
    [NullableContextAttribute("0")]
private protected ValueTuple`2<BindingMode, UpdateSourceTrigger> ResolveDefaultsFromMetadata(AvaloniaObject target, AvaloniaProperty targetProperty);
    [NullableContextAttribute("1")]
private sealed virtual override BindingExpressionBase Avalonia.Data.Core.IBinding2.Instance(AvaloniaObject target, AvaloniaProperty property, object anchor);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Data.MultiBinding : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<IBinding> <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private IMultiValueConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <ConverterCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private object <FallbackValue>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private object <TargetNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativeSource <RelativeSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringFormat>k__BackingField;
    [NullableAttribute("1")]
[ContentAttribute]
[AssignBindingAttribute]
public IList`1<IBinding> Bindings { get; public set; }
    public IMultiValueConverter Converter { get; public set; }
    [TypeConverterAttribute("Avalonia.Data.CultureInfoIetfLanguageTagConverter")]
public CultureInfo ConverterCulture { get; public set; }
    public object ConverterParameter { get; public set; }
    [NullableAttribute("1")]
public object FallbackValue { get; public set; }
    [NullableAttribute("1")]
public object TargetNullValue { get; public set; }
    public BindingMode Mode { get; public set; }
    public BindingPriority Priority { get; public set; }
    public RelativeSource RelativeSource { get; public set; }
    public string StringFormat { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IList`1<IBinding> get_Bindings();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Bindings(IList`1<IBinding> value);
    [CompilerGeneratedAttribute]
public IMultiValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IMultiValueConverter value);
    [CompilerGeneratedAttribute]
public CultureInfo get_ConverterCulture();
    [CompilerGeneratedAttribute]
public void set_ConverterCulture(CultureInfo value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public object get_FallbackValue();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_FallbackValue(object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public object get_TargetNullValue();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TargetNullValue(object value);
    [CompilerGeneratedAttribute]
public BindingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(BindingMode value);
    [CompilerGeneratedAttribute]
public BindingPriority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(BindingPriority value);
    [CompilerGeneratedAttribute]
public RelativeSource get_RelativeSource();
    [CompilerGeneratedAttribute]
public void set_RelativeSource(RelativeSource value);
    [CompilerGeneratedAttribute]
public string get_StringFormat();
    [CompilerGeneratedAttribute]
public void set_StringFormat(string value);
    public sealed virtual InstancedBinding Initiate(AvaloniaObject target, AvaloniaProperty targetProperty, object anchor, bool enableDataValidation);
    [NullableContextAttribute("1")]
private sealed virtual override BindingExpressionBase Avalonia.Data.Core.IBinding2.Instance(AvaloniaObject target, AvaloniaProperty targetProperty, object anchor);
    [NullableContextAttribute("1")]
private MultiBindingExpression InstanceCore(AvaloniaObject target, AvaloniaProperty targetProperty);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Data.RelativeSource : object {
    private int _ancestorLevel;
    [CompilerGeneratedAttribute]
private Type <AncestorType>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativeSourceMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeType <Tree>k__BackingField;
    public int AncestorLevel { get; public set; }
    public Type AncestorType { get; public set; }
    public RelativeSourceMode Mode { get; public set; }
    public TreeType Tree { get; public set; }
    public RelativeSource(RelativeSourceMode mode);
    public int get_AncestorLevel();
    public void set_AncestorLevel(int value);
    [CompilerGeneratedAttribute]
public Type get_AncestorType();
    [CompilerGeneratedAttribute]
public void set_AncestorType(Type value);
    [CompilerGeneratedAttribute]
public RelativeSourceMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(RelativeSourceMode value);
    [CompilerGeneratedAttribute]
public TreeType get_Tree();
    [CompilerGeneratedAttribute]
public void set_Tree(TreeType value);
}
public enum Avalonia.Data.RelativeSourceMode : Enum {
    public int value__;
    public static RelativeSourceMode DataContext;
    public static RelativeSourceMode TemplatedParent;
    public static RelativeSourceMode Self;
    public static RelativeSourceMode FindAncestor;
}
public enum Avalonia.Data.TreeType : Enum {
    public int value__;
    public static TreeType Visual;
    public static TreeType Logical;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Markup.Data.DelayedBinding : object {
    private static ConditionalWeakTable`2<StyledElement, List`1<Entry>> _entries;
    private static DelayedBinding();
    public static void Add(StyledElement target, AvaloniaProperty property, IBinding binding);
    public static void Add(StyledElement target, IPropertyInfo property, Func`2<StyledElement, object> value);
    public static void ApplyBindings(StyledElement control);
    private static void ApplyBindings(object sender, EventArgs e);
}
[ExtensionAttribute]
internal static class Avalonia.Markup.Parsers.ArgumentListParser : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IList`1<string> ParseArguments(CharacterReader& r, char open, char close, char delimiter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Markup.Parsers.BindingExpressionGrammar : object {
    private static List`1<INode> s_pool;
    private static BindingExpressionGrammar();
    public static ValueTuple`2<List`1<INode>, SourceMode> Parse(CharacterReader& r);
    public static ValueTuple`2<List`1<INode>, SourceMode> ParseToPooledList(CharacterReader& r);
    private static SourceMode Parse(CharacterReader& r, List`1<INode> nodes);
    private static State ParseStart(CharacterReader& r, IList`1<INode> nodes);
    private static State ParseAfterMember(CharacterReader& r, IList`1<INode> nodes);
    private static State ParseBeforeMember(CharacterReader& r, IList`1<INode> nodes);
    private static State ParseAttachedProperty(CharacterReader& r, List`1<INode> nodes);
    private static State ParseIndexer(CharacterReader& r, List`1<INode> nodes);
    private static State ParseTypeCast(CharacterReader& r, List`1<INode> nodes);
    private static State ParseElementName(CharacterReader& r, List`1<INode> nodes);
    private static State ParseRelativeSource(CharacterReader& r, List`1<INode> nodes);
    private static TypeName ParseTypeName(CharacterReader& r);
    private static bool ParseNot(CharacterReader& r);
    private static bool ParseMemberAccessor(CharacterReader& r);
    private static bool ParseOpenBrace(CharacterReader& r);
    private static bool ParseCloseBrace(CharacterReader& r);
    private static bool PeekOpenBracket(CharacterReader& r);
    private static bool PeekOpenBrace(CharacterReader& r);
    private static bool ParseStreamOperator(CharacterReader& r);
    private static bool ParseDollarSign(CharacterReader& r);
    private static bool ParseSharp(CharacterReader& r);
    private static bool ParseDot(CharacterReader& r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Markup.Parsers.ExpressionNodeFactory : object {
    [RequiresUnreferencedCodeAttribute("BindingExpression and ReflectionBinding heavily use reflection. Consider using CompiledBindings instead.")]
public static List`1<ExpressionNode> CreateFromAst(List`1<INode> astNodes, Func`3<string, string, Type> typeResolver, INameScope nameScope, Boolean& isRooted);
    public static ExpressionNode CreateRelativeSource(RelativeSource source);
    public static ExpressionNode CreateDataContext(AvaloniaProperty targetProperty);
    private static AvaloniaPropertyAccessorNode AttachedPropertyNode(Func`3<string, string, Type> typeResolver, AttachedPropertyNameNode attached);
    private static LogicalAncestorElementNode LogicalAncestorNode(Func`3<string, string, Type> typeResolver, AncestorNode ancestor);
    [NullableContextAttribute("2")]
private static Type LookupType(Func`3<string, string, Type> typeResolver, string namespace, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Markup.Parsers.PropertyPathGrammar : object {
    public static IEnumerable`1<ISyntax> Parse(string s);
    private static IEnumerable`1<ISyntax> Parse(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseNext(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseStart(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseTypeQualifiedProperty(CharacterReader& r);
    private static ValueTuple`2<string, string> ParseXamlIdentifier(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseProperty(CharacterReader& r);
    private static bool TryParseCasts(CharacterReader& r, ValueTuple`2& rv);
    private static ValueTuple`2<State, ISyntax> ParseAfterProperty(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseEnsureType(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseCastType(CharacterReader& r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Markup.Parsers.SelectorGrammar : object {
    public static IEnumerable`1<ISyntax> Parse(string s);
    private static IEnumerable`1<ISyntax> Parse(CharacterReader& r, Nullable`1<char> end);
    private static ValueTuple`2<State, ISyntax> ParseStart(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseMiddle(CharacterReader& r, Nullable`1<char> end);
    private static State ParseCanHaveType(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseColon(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseTraversal(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseClass(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseTemplate(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseName(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseTypeName(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseProperty(CharacterReader& r);
    private static ValueTuple`2<State, ISyntax> ParseAttachedProperty(CharacterReader& r);
    private static TSyntax ParseType(CharacterReader& r, TSyntax syntax);
    [NullableContextAttribute("0")]
private static ValueTuple`2<int, int> ParseNthChildArguments(CharacterReader& r);
    private static void Expect(CharacterReader& r, char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Markup.Parsers.SelectorParser : object {
    private Func`3<string, string, Type> _typeResolver;
    public SelectorParser(Func`3<string, string, Type> typeResolver);
    [RequiresUnreferencedCodeAttribute("Selectors runtime parser might require unreferenced code. Consider using stronly typed selectors factory with 'new Style(s => s.OfType<Button>())' syntax.")]
public Selector Parse(string s);
    [RequiresUnreferencedCodeAttribute("Selectors runtime parser might require unreferenced code. Consider using stronly typed selectors factory with 'new Style(s => s.OfType<Button>())' syntax.")]
private Selector Create(IEnumerable`1<ISyntax> syntax);
    private Type Resolve(string xmlns, string typeName);
}
internal enum Avalonia.Markup.Parsers.SourceMode : Enum {
    public int value__;
    public static SourceMode Data;
    public static SourceMode Control;
}
