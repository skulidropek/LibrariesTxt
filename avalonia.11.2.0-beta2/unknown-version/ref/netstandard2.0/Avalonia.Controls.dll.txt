[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.AppBuilder : object {
    private static bool s_setupWasAlreadyCalled;
    private Action _optionsInitializers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<Application> _appFactory;
    private IApplicationLifetime _lifetime;
    [CompilerGeneratedAttribute]
private Action <RuntimePlatformServicesInitializer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimePlatformServicesName>k__BackingField;
    [CompilerGeneratedAttribute]
private Application <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ApplicationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <WindowingSubsystemInitializer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowingSubsystemName>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <RenderingSubsystemInitializer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<Type, IApplicationLifetime> <LifetimeOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RenderingSubsystemName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Action`1<AppBuilder> <AfterSetupCallback>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Action`1<AppBuilder> <AfterApplicationSetupCallback>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Action`1<AppBuilder> <AfterPlatformServicesSetupCallback>k__BackingField;
    public Action RuntimePlatformServicesInitializer { get; private set; }
    public string RuntimePlatformServicesName { get; private set; }
    public Application Instance { get; private set; }
    public Type ApplicationType { get; private set; }
    public Action WindowingSubsystemInitializer { get; private set; }
    public string WindowingSubsystemName { get; private set; }
    public Action RenderingSubsystemInitializer { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("This property has no effect", "True")]
[DebuggerBrowsableAttribute("0")]
public Func`2<Type, IApplicationLifetime> LifetimeOverride { get; private set; }
    public string RenderingSubsystemName { get; private set; }
    [NullableAttribute("1")]
public Action`1<AppBuilder> AfterSetupCallback { get; private set; }
    [NullableAttribute("1")]
private Action`1<AppBuilder> AfterApplicationSetupCallback { get; private set; }
    [NullableAttribute("1")]
public Action`1<AppBuilder> AfterPlatformServicesSetupCallback { get; private set; }
    [NullableAttribute("1")]
private AppBuilder Self { get; }
    [CompilerGeneratedAttribute]
public Action get_RuntimePlatformServicesInitializer();
    [CompilerGeneratedAttribute]
private void set_RuntimePlatformServicesInitializer(Action value);
    [CompilerGeneratedAttribute]
public string get_RuntimePlatformServicesName();
    [CompilerGeneratedAttribute]
private void set_RuntimePlatformServicesName(string value);
    [CompilerGeneratedAttribute]
public Application get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(Application value);
    [CompilerGeneratedAttribute]
public Type get_ApplicationType();
    [CompilerGeneratedAttribute]
private void set_ApplicationType(Type value);
    [CompilerGeneratedAttribute]
public Action get_WindowingSubsystemInitializer();
    [CompilerGeneratedAttribute]
private void set_WindowingSubsystemInitializer(Action value);
    [CompilerGeneratedAttribute]
public string get_WindowingSubsystemName();
    [CompilerGeneratedAttribute]
private void set_WindowingSubsystemName(string value);
    [CompilerGeneratedAttribute]
public Action get_RenderingSubsystemInitializer();
    [CompilerGeneratedAttribute]
private void set_RenderingSubsystemInitializer(Action value);
    [CompilerGeneratedAttribute]
public Func`2<Type, IApplicationLifetime> get_LifetimeOverride();
    [CompilerGeneratedAttribute]
private void set_LifetimeOverride(Func`2<Type, IApplicationLifetime> value);
    [CompilerGeneratedAttribute]
public string get_RenderingSubsystemName();
    [CompilerGeneratedAttribute]
private void set_RenderingSubsystemName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Action`1<AppBuilder> get_AfterSetupCallback();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_AfterSetupCallback(Action`1<AppBuilder> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Action`1<AppBuilder> get_AfterApplicationSetupCallback();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_AfterApplicationSetupCallback(Action`1<AppBuilder> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Action`1<AppBuilder> get_AfterPlatformServicesSetupCallback();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_AfterPlatformServicesSetupCallback(Action`1<AppBuilder> value);
    [NullableContextAttribute("1")]
public static AppBuilder Configure();
    [NullableContextAttribute("1")]
public static AppBuilder Configure(Func`1<TApp> appFactory);
    [NullableContextAttribute("1")]
internal static AppBuilder Configure(Type entryPointType);
    [NullableContextAttribute("1")]
private AppBuilder get_Self();
    [NullableContextAttribute("1")]
public AppBuilder AfterSetup(Action`1<AppBuilder> callback);
    [NullableContextAttribute("1")]
[PrivateApiAttribute]
internal AppBuilder AfterApplicationSetup(Action`1<AppBuilder> callback);
    [NullableContextAttribute("1")]
public AppBuilder AfterPlatformServicesSetup(Action`1<AppBuilder> callback);
    [NullableContextAttribute("1")]
public void Start(AppMainDelegate main, String[] args);
    [NullableContextAttribute("1")]
public AppBuilder SetupWithoutStarting();
    [NullableContextAttribute("1")]
public AppBuilder SetupWithLifetime(IApplicationLifetime lifetime);
    [NullableContextAttribute("1")]
public AppBuilder UseWindowingSubsystem(Action initializer, string name);
    [NullableContextAttribute("1")]
public AppBuilder UseRenderingSubsystem(Action initializer, string name);
    [NullableContextAttribute("1")]
public AppBuilder UseRuntimePlatformSubsystem(Action initializer, string name);
    [NullableContextAttribute("1")]
public AppBuilder UseStandardRuntimePlatformSubsystem();
    [NullableContextAttribute("1")]
public AppBuilder With(T options);
    [NullableContextAttribute("1")]
public AppBuilder With(Func`1<T> options);
    [NullableContextAttribute("1")]
public AppBuilder ConfigureFonts(Action`1<FontManager> action);
    private void Setup();
    internal void SetupUnsafe();
    [CompilerGeneratedAttribute]
private void <UseStandardRuntimePlatformSubsystem>b__68_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Application : AvaloniaObject {
    private DataTemplates _dataTemplates;
    private Styles _styles;
    private IResourceDictionary _resources;
    private bool _notifyingResourcesChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IReadOnlyList`1<IStyle>> _stylesAdded;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IReadOnlyList`1<IStyle>> _stylesRemoved;
    private IApplicationLifetime _applicationLifetime;
    private bool _setupCompleted;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> DataContextProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<ThemeVariant> ActualThemeVariantProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ThemeVariant> RequestedThemeVariantProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ResourcesChangedEventArgs> ResourcesChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<UrlOpenedEventArgs> UrlsOpened;
    [CompilerGeneratedAttribute]
private EventHandler ActualThemeVariantChanged;
    [CompilerGeneratedAttribute]
private InputManager <InputManager>k__BackingField;
    private string _name;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<Application, string> NameProperty;
    public object DataContext { get; public set; }
    public ThemeVariant RequestedThemeVariant { get; public set; }
    [NullableAttribute("1")]
public ThemeVariant ActualThemeVariant { get; }
    public static Application Current { get; }
    [NullableAttribute("1")]
public DataTemplates DataTemplates { get; }
    internal InputManager InputManager { get; private set; }
    [NullableAttribute("1")]
public IResourceDictionary Resources { get; public set; }
    [NullableAttribute("1")]
public Styles Styles { get; }
    private bool Avalonia.Controls.Templates.IDataTemplateHost.IsDataTemplatesInitialized { get; }
    private bool Avalonia.Controls.IResourceNode.HasResources { get; }
    private IStyleHost Avalonia.Styling.IStyleHost.StylingParent { get; }
    private bool Avalonia.Styling.IStyleHost.IsStylesInitialized { get; }
    public IApplicationLifetime ApplicationLifetime { get; public set; }
    public IPlatformSettings PlatformSettings { get; }
    public string Name { get; public set; }
    private static Application();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResourcesChanged(EventHandler`1<ResourcesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResourcesChanged(EventHandler`1<ResourcesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UrlsOpened(EventHandler`1<UrlOpenedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UrlsOpened(EventHandler`1<UrlOpenedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ActualThemeVariantChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ActualThemeVariantChanged(EventHandler value);
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    public ThemeVariant get_RequestedThemeVariant();
    public void set_RequestedThemeVariant(ThemeVariant value);
    [NullableContextAttribute("1")]
public sealed virtual ThemeVariant get_ActualThemeVariant();
    public static Application get_Current();
    [NullableContextAttribute("1")]
public sealed virtual DataTemplates get_DataTemplates();
    [CompilerGeneratedAttribute]
internal InputManager get_InputManager();
    [CompilerGeneratedAttribute]
private void set_InputManager(InputManager value);
    [NullableContextAttribute("1")]
public IResourceDictionary get_Resources();
    [NullableContextAttribute("1")]
public void set_Resources(IResourceDictionary value);
    [NullableContextAttribute("1")]
public sealed virtual Styles get_Styles();
    private sealed virtual override bool Avalonia.Controls.Templates.IDataTemplateHost.get_IsDataTemplatesInitialized();
    private sealed virtual override bool Avalonia.Controls.IResourceNode.get_HasResources();
    private sealed virtual override IStyleHost Avalonia.Styling.IStyleHost.get_StylingParent();
    private sealed virtual override bool Avalonia.Styling.IStyleHost.get_IsStylesInitialized();
    public IApplicationLifetime get_ApplicationLifetime();
    public void set_ApplicationLifetime(IApplicationLifetime value);
    public IPlatformSettings get_PlatformSettings();
    private sealed virtual override void Avalonia.Styling.IGlobalStyles.add_GlobalStylesAdded(Action`1<IReadOnlyList`1<IStyle>> value);
    private sealed virtual override void Avalonia.Styling.IGlobalStyles.remove_GlobalStylesAdded(Action`1<IReadOnlyList`1<IStyle>> value);
    private sealed virtual override void Avalonia.Styling.IGlobalStyles.add_GlobalStylesRemoved(Action`1<IReadOnlyList`1<IStyle>> value);
    private sealed virtual override void Avalonia.Styling.IGlobalStyles.remove_GlobalStylesRemoved(Action`1<IReadOnlyList`1<IStyle>> value);
    public virtual void Initialize();
    public sealed virtual bool TryGetResource(object key, ThemeVariant theme, Object& value);
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Controls.IResourceHost.NotifyHostedResourcesChanged(ResourcesChangedEventArgs e);
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Styling.IStyleHost.StylesAdded(IReadOnlyList`1<IStyle> styles);
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Styling.IStyleHost.StylesRemoved(IReadOnlyList`1<IStyle> styles);
    public virtual void RegisterServices();
    public virtual void OnFrameworkInitializationCompleted();
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Platform.IApplicationPlatformEvents.RaiseUrlsOpened(String[] urls);
    [NullableContextAttribute("1")]
private void NotifyResourcesChanged(ResourcesChangedEventArgs e);
    [NullableContextAttribute("1")]
private void ThisResourcesChanged(object sender, ResourcesChangedEventArgs e);
    public string get_Name();
    public void set_Name(string value);
    [NullableContextAttribute("1")]
public sealed virtual object TryGetFeature(Type featureType);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    [NullableContextAttribute("1")]
private void OnColorValuesChanged(object sender, PlatformColorValues e);
}
public enum Avalonia.Automation.AccessibilityView : Enum {
    public int value__;
    public static AccessibilityView Default;
    public static AccessibilityView Raw;
    public static AccessibilityView Control;
    public static AccessibilityView Content;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Automation.AutomationElementIdentifiers : object {
    [CompilerGeneratedAttribute]
private static AutomationProperty <BoundingRectangleProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <ClassNameProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <NameProperty>k__BackingField;
    public static AutomationProperty BoundingRectangleProperty { get; }
    public static AutomationProperty ClassNameProperty { get; }
    public static AutomationProperty NameProperty { get; }
    private static AutomationElementIdentifiers();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_BoundingRectangleProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_ClassNameProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_NameProperty();
}
public enum Avalonia.Automation.AutomationLiveSetting : Enum {
    public int value__;
    public static AutomationLiveSetting Off;
    public static AutomationLiveSetting Polite;
    public static AutomationLiveSetting Assertive;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Automation.AutomationProperties : object {
    internal static int AutomationPositionInSetDefault;
    internal static int AutomationSizeOfSetDefault;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> AcceleratorKeyProperty;
    public static AttachedProperty`1<AccessibilityView> AccessibilityViewProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> AccessKeyProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> AutomationIdProperty;
    public static AttachedProperty`1<Nullable`1<AutomationControlType>> ControlTypeOverrideProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> HelpTextProperty;
    public static AttachedProperty`1<bool> IsColumnHeaderProperty;
    public static AttachedProperty`1<bool> IsRequiredForFormProperty;
    public static AttachedProperty`1<bool> IsRowHeaderProperty;
    public static AttachedProperty`1<IsOffscreenBehavior> IsOffscreenBehaviorProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> ItemStatusProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> ItemTypeProperty;
    public static AttachedProperty`1<Control> LabeledByProperty;
    public static AttachedProperty`1<AutomationLiveSetting> LiveSettingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> NameProperty;
    public static AttachedProperty`1<int> PositionInSetProperty;
    public static AttachedProperty`1<int> SizeOfSetProperty;
    private static AutomationProperties();
    public static void SetAcceleratorKey(StyledElement element, string value);
    public static string GetAcceleratorKey(StyledElement element);
    public static void SetAccessibilityView(StyledElement element, AccessibilityView value);
    public static AccessibilityView GetAccessibilityView(StyledElement element);
    public static void SetAccessKey(StyledElement element, string value);
    public static string GetAccessKey(StyledElement element);
    public static void SetAutomationId(StyledElement element, string value);
    public static string GetAutomationId(StyledElement element);
    public static void SetControlTypeOverride(StyledElement element, Nullable`1<AutomationControlType> value);
    public static Nullable`1<AutomationControlType> GetControlTypeOverride(StyledElement element);
    public static void SetHelpText(StyledElement element, string value);
    public static string GetHelpText(StyledElement element);
    public static void SetIsColumnHeader(StyledElement element, bool value);
    public static bool GetIsColumnHeader(StyledElement element);
    public static void SetIsRequiredForForm(StyledElement element, bool value);
    public static bool GetIsRequiredForForm(StyledElement element);
    public static bool GetIsRowHeader(StyledElement element);
    public static void SetIsRowHeader(StyledElement element, bool value);
    public static void SetIsOffscreenBehavior(StyledElement element, IsOffscreenBehavior value);
    public static IsOffscreenBehavior GetIsOffscreenBehavior(StyledElement element);
    public static void SetItemStatus(StyledElement element, string value);
    public static string GetItemStatus(StyledElement element);
    public static void SetItemType(StyledElement element, string value);
    public static string GetItemType(StyledElement element);
    public static void SetLabeledBy(StyledElement element, Control value);
    public static Control GetLabeledBy(StyledElement element);
    public static void SetLiveSetting(StyledElement element, AutomationLiveSetting value);
    public static AutomationLiveSetting GetLiveSetting(StyledElement element);
    public static void SetName(StyledElement element, string value);
    public static string GetName(StyledElement element);
    public static void SetPositionInSet(StyledElement element, int value);
    public static int GetPositionInSet(StyledElement element);
    public static void SetSizeOfSet(StyledElement element, int value);
    public static int GetSizeOfSet(StyledElement element);
}
public class Avalonia.Automation.AutomationProperty : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Automation.AutomationPropertyChangedEventArgs : EventArgs {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private AutomationProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    [NullableAttribute("1")]
public AutomationProperty Property { get; }
    public object OldValue { get; }
    public object NewValue { get; }
    public AutomationPropertyChangedEventArgs(AutomationProperty property, object oldValue, object newValue);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public AutomationProperty get_Property();
    [CompilerGeneratedAttribute]
public object get_OldValue();
    [CompilerGeneratedAttribute]
public object get_NewValue();
}
public class Avalonia.Automation.ElementNotEnabledException : Exception {
    [NullableContextAttribute("1")]
public ElementNotEnabledException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Automation.ExpandCollapsePatternIdentifiers : object {
    [CompilerGeneratedAttribute]
private static AutomationProperty <ExpandCollapseStateProperty>k__BackingField;
    public static AutomationProperty ExpandCollapseStateProperty { get; }
    private static ExpandCollapsePatternIdentifiers();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_ExpandCollapseStateProperty();
}
public enum Avalonia.Automation.ExpandCollapseState : Enum {
    public int value__;
    public static ExpandCollapseState Collapsed;
    public static ExpandCollapseState Expanded;
    public static ExpandCollapseState LeafNode;
    public static ExpandCollapseState PartiallyExpanded;
}
public enum Avalonia.Automation.IsOffscreenBehavior : Enum {
    public int value__;
    public static IsOffscreenBehavior Default;
    public static IsOffscreenBehavior Onscreen;
    public static IsOffscreenBehavior Offscreen;
    public static IsOffscreenBehavior FromClip;
}
public enum Avalonia.Automation.Peers.AutomationControlType : Enum {
    public int value__;
    public static AutomationControlType None;
    public static AutomationControlType Button;
    public static AutomationControlType Calendar;
    public static AutomationControlType CheckBox;
    public static AutomationControlType ComboBox;
    public static AutomationControlType ComboBoxItem;
    public static AutomationControlType Edit;
    public static AutomationControlType Hyperlink;
    public static AutomationControlType Image;
    public static AutomationControlType ListItem;
    public static AutomationControlType List;
    public static AutomationControlType Menu;
    public static AutomationControlType MenuBar;
    public static AutomationControlType MenuItem;
    public static AutomationControlType ProgressBar;
    public static AutomationControlType RadioButton;
    public static AutomationControlType ScrollBar;
    public static AutomationControlType Slider;
    public static AutomationControlType Spinner;
    public static AutomationControlType StatusBar;
    public static AutomationControlType Tab;
    public static AutomationControlType TabItem;
    public static AutomationControlType Text;
    public static AutomationControlType ToolBar;
    public static AutomationControlType ToolTip;
    public static AutomationControlType Tree;
    public static AutomationControlType TreeItem;
    public static AutomationControlType Custom;
    public static AutomationControlType Group;
    public static AutomationControlType Thumb;
    public static AutomationControlType DataGrid;
    public static AutomationControlType DataItem;
    public static AutomationControlType Document;
    public static AutomationControlType SplitButton;
    public static AutomationControlType Window;
    public static AutomationControlType Pane;
    public static AutomationControlType Header;
    public static AutomationControlType HeaderItem;
    public static AutomationControlType Table;
    public static AutomationControlType TitleBar;
    public static AutomationControlType Separator;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Avalonia.Automation.Peers.AutomationPeer : object {
    [CompilerGeneratedAttribute]
private EventHandler ChildrenChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<AutomationPropertyChangedEventArgs> PropertyChanged;
    public void BringIntoView();
    public string GetAcceleratorKey();
    public string GetAccessKey();
    public AutomationControlType GetAutomationControlType();
    public string GetAutomationId();
    public Rect GetBoundingRectangle();
    [NullableContextAttribute("1")]
public IReadOnlyList`1<AutomationPeer> GetChildren();
    [NullableContextAttribute("1")]
public string GetClassName();
    public AutomationPeer GetLabeledBy();
    [NullableContextAttribute("1")]
public string GetLocalizedControlType();
    [NullableContextAttribute("1")]
public string GetName();
    public AutomationPeer GetParent();
    public AutomationPeer GetVisualRoot();
    public bool HasKeyboardFocus();
    public bool IsContentElement();
    public bool IsControlElement();
    public bool IsEnabled();
    public bool IsKeyboardFocusable();
    public bool IsOffscreen();
    public void SetFocus();
    public bool ShowContextMenu();
    public T GetProvider();
    [CompilerGeneratedAttribute]
public void add_ChildrenChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ChildrenChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(EventHandler`1<AutomationPropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(EventHandler`1<AutomationPropertyChangedEventArgs> value);
    protected void RaiseChildrenChangedEvent();
    public void RaisePropertyChangedEvent(AutomationProperty property, object oldValue, object newValue);
    [NullableContextAttribute("1")]
protected virtual string GetLocalizedControlTypeCore();
    protected abstract virtual void BringIntoViewCore();
    protected abstract virtual string GetAcceleratorKeyCore();
    protected abstract virtual string GetAccessKeyCore();
    protected abstract virtual AutomationControlType GetAutomationControlTypeCore();
    protected abstract virtual string GetAutomationIdCore();
    protected abstract virtual Rect GetBoundingRectangleCore();
    [NullableContextAttribute("1")]
protected abstract virtual IReadOnlyList`1<AutomationPeer> GetOrCreateChildrenCore();
    [NullableContextAttribute("1")]
protected abstract virtual string GetClassNameCore();
    protected abstract virtual AutomationPeer GetLabeledByCore();
    protected abstract virtual string GetNameCore();
    protected abstract virtual AutomationPeer GetParentCore();
    protected abstract virtual bool HasKeyboardFocusCore();
    protected abstract virtual bool IsContentElementCore();
    protected abstract virtual bool IsControlElementCore();
    protected abstract virtual bool IsEnabledCore();
    protected abstract virtual bool IsKeyboardFocusableCore();
    protected virtual bool IsOffscreenCore();
    protected abstract virtual void SetFocusCore();
    protected abstract virtual bool ShowContextMenuCore();
    protected virtual AutomationControlType GetControlTypeOverrideCore();
    protected virtual AutomationPeer GetVisualRootCore();
    protected virtual bool IsContentElementOverrideCore();
    protected virtual bool IsControlElementOverrideCore();
    [NullableContextAttribute("1")]
protected virtual object GetProviderCore(Type providerType);
    protected internal abstract virtual bool TrySetParent(AutomationPeer parent);
    protected void EnsureEnabled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.ButtonAutomationPeer : ContentControlAutomationPeer {
    public Button Owner { get; }
    public ButtonAutomationPeer(Button owner);
    public Button get_Owner();
    public sealed virtual void Invoke();
    [NullableContextAttribute("2")]
protected virtual string GetAcceleratorKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.ComboBoxAutomationPeer : SelectingItemsControlAutomationPeer {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private UnrealizedSelectionPeer[] _selection;
    public ComboBox Owner { get; }
    public ExpandCollapseState ExpandCollapseState { get; }
    public bool ShowsMenu { get; }
    private bool Avalonia.Automation.Provider.IValueProvider.IsReadOnly { get; }
    [NullableAttribute("2")]
private string Avalonia.Automation.Provider.IValueProvider.Value { get; }
    public ComboBoxAutomationPeer(ComboBox owner);
    public ComboBox get_Owner();
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
    public sealed virtual bool get_ShowsMenu();
    public sealed virtual void Collapse();
    public sealed virtual void Expand();
    private sealed virtual override bool Avalonia.Automation.Provider.IValueProvider.get_IsReadOnly();
    [NullableContextAttribute("2")]
private sealed virtual override string Avalonia.Automation.Provider.IValueProvider.get_Value();
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Automation.Provider.IValueProvider.SetValue(string value);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual IReadOnlyList`1<AutomationPeer> GetSelectionCore();
    protected virtual void OwnerPropertyChanged(object sender, AvaloniaPropertyChangedEventArgs e);
    private static ExpandCollapseState ToState(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.ContentControlAutomationPeer : ControlAutomationPeer {
    public ContentControl Owner { get; }
    protected ContentControlAutomationPeer(ContentControl owner);
    public ContentControl get_Owner();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    [NullableContextAttribute("2")]
protected virtual string GetNameCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.ControlAutomationPeer : AutomationPeer {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<AutomationPeer> _children;
    private bool _childrenValid;
    [NullableAttribute("2")]
private AutomationPeer _parent;
    private bool _parentValid;
    [CompilerGeneratedAttribute]
private Control <Owner>k__BackingField;
    public Control Owner { get; }
    public ControlAutomationPeer(Control owner);
    [CompilerGeneratedAttribute]
public Control get_Owner();
    public AutomationPeer GetOrCreate(Control element);
    public static AutomationPeer CreatePeerForElement(Control element);
    public static AutomationPeer FromElement(Control element);
    protected virtual void BringIntoViewCore();
    protected virtual IReadOnlyList`1<AutomationPeer> GetOrCreateChildrenCore();
    protected virtual IReadOnlyList`1<AutomationPeer> GetChildrenCore();
    [NullableContextAttribute("2")]
protected virtual AutomationPeer GetLabeledByCore();
    [NullableContextAttribute("2")]
protected virtual string GetNameCore();
    [NullableContextAttribute("2")]
protected virtual AutomationPeer GetParentCore();
    [NullableContextAttribute("2")]
protected virtual AutomationPeer GetVisualRootCore();
    protected void InvalidateChildren();
    protected void InvalidateParent();
    protected virtual bool ShowContextMenuCore();
    [NullableContextAttribute("2")]
protected internal virtual bool TrySetParent(AutomationPeer parent);
    [NullableContextAttribute("2")]
protected virtual string GetAcceleratorKeyCore();
    [NullableContextAttribute("2")]
protected virtual string GetAccessKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    [NullableContextAttribute("2")]
protected virtual string GetAutomationIdCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual string GetClassNameCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual void SetFocusCore();
    protected virtual AutomationControlType GetControlTypeOverrideCore();
    protected virtual bool IsContentElementOverrideCore();
    protected virtual bool IsControlElementOverrideCore();
    protected virtual bool IsOffscreenCore();
    private static Rect GetBounds(Control control);
    private void Initialize();
    private void VisualChildrenChanged(object sender, EventArgs e);
    private void OwnerPropertyChanged(object sender, AvaloniaPropertyChangedEventArgs e);
    private void EnsureConnected();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.ItemsControlAutomationPeer : ControlAutomationPeer {
    private bool _searchedForScrollable;
    [NullableAttribute("2")]
private IScrollProvider _scroller;
    public ItemsControl Owner { get; }
    public bool HorizontallyScrollable { get; }
    public double HorizontalScrollPercent { get; }
    public double HorizontalViewSize { get; }
    public bool VerticallyScrollable { get; }
    public double VerticalScrollPercent { get; }
    public double VerticalViewSize { get; }
    [NullableAttribute("2")]
protected IScrollProvider Scroller { get; }
    public ItemsControlAutomationPeer(ItemsControl owner);
    public ItemsControl get_Owner();
    public sealed virtual bool get_HorizontallyScrollable();
    public sealed virtual double get_HorizontalScrollPercent();
    public sealed virtual double get_HorizontalViewSize();
    public sealed virtual bool get_VerticallyScrollable();
    public sealed virtual double get_VerticalScrollPercent();
    public sealed virtual double get_VerticalViewSize();
    [NullableContextAttribute("2")]
protected virtual IScrollProvider get_Scroller();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public sealed virtual void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public sealed virtual void SetScrollPercent(double horizontalPercent, double verticalPercent);
}
public class Avalonia.Automation.Peers.ListItemAutomationPeer : ContentControlAutomationPeer {
    public bool IsSelected { get; }
    [NullableAttribute("2")]
public ISelectionProvider SelectionContainer { get; }
    [NullableContextAttribute("1")]
public ListItemAutomationPeer(ContentControl owner);
    public sealed virtual bool get_IsSelected();
    [NullableContextAttribute("2")]
public sealed virtual ISelectionProvider get_SelectionContainer();
    public sealed virtual void Select();
    private sealed virtual override void Avalonia.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void Avalonia.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.MenuItemAutomationPeer : ControlAutomationPeer {
    public MenuItem Owner { get; }
    public MenuItemAutomationPeer(MenuItem owner);
    public MenuItem get_Owner();
    [NullableContextAttribute("2")]
protected virtual string GetAccessKeyCore();
    [NullableContextAttribute("2")]
protected virtual string GetAcceleratorKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    [NullableContextAttribute("2")]
protected virtual string GetNameCore();
}
public class Avalonia.Automation.Peers.NoneAutomationPeer : ControlAutomationPeer {
    [NullableContextAttribute("1")]
public NoneAutomationPeer(Control owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.PopupAutomationPeer : ControlAutomationPeer {
    public PopupAutomationPeer(Popup owner);
    protected virtual IReadOnlyList`1<AutomationPeer> GetChildrenCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    private void PopupOpenedClosed(object sender, EventArgs e);
    [NullableContextAttribute("2")]
private AutomationPeer GetPopupRoot();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.PopupRootAutomationPeer : WindowBaseAutomationPeer {
    public PopupRootAutomationPeer(PopupRoot owner);
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    [NullableContextAttribute("2")]
protected virtual AutomationPeer GetParentCore();
    private void OnOpened(object sender, EventArgs e);
    private void OnClosed(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Automation.Peers.RangeBaseAutomationPeer : ControlAutomationPeer {
    public RangeBase Owner { get; }
    public bool IsReadOnly { get; }
    public double Maximum { get; }
    public double Minimum { get; }
    public double Value { get; }
    public double SmallChange { get; }
    public double LargeChange { get; }
    public RangeBaseAutomationPeer(RangeBase owner);
    public RangeBase get_Owner();
    public virtual bool get_IsReadOnly();
    public sealed virtual double get_Maximum();
    public sealed virtual double get_Minimum();
    public sealed virtual double get_Value();
    public sealed virtual double get_SmallChange();
    public sealed virtual double get_LargeChange();
    public sealed virtual void SetValue(double value);
    protected virtual void OwnerPropertyChanged(object sender, AvaloniaPropertyChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.ScrollBarAutomationPeer : RangeBaseAutomationPeer {
    public ScrollBarAutomationPeer(ScrollBar owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.ScrollViewerAutomationPeer : ControlAutomationPeer {
    public ScrollViewer Owner { get; }
    public bool HorizontallyScrollable { get; }
    public double HorizontalScrollPercent { get; }
    public double HorizontalViewSize { get; }
    public bool VerticallyScrollable { get; }
    public double VerticalScrollPercent { get; }
    public double VerticalViewSize { get; }
    public ScrollViewerAutomationPeer(ScrollViewer owner);
    public ScrollViewer get_Owner();
    public sealed virtual bool get_HorizontallyScrollable();
    public sealed virtual double get_HorizontalScrollPercent();
    public sealed virtual double get_HorizontalViewSize();
    public sealed virtual bool get_VerticallyScrollable();
    public sealed virtual double get_VerticalScrollPercent();
    public sealed virtual double get_VerticalViewSize();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    public sealed virtual void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public sealed virtual void SetScrollPercent(double horizontalPercent, double verticalPercent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Automation.Peers.SelectingItemsControlAutomationPeer : ItemsControlAutomationPeer {
    private ISelectionModel _selection;
    public bool CanSelectMultiple { get; }
    public bool IsSelectionRequired { get; }
    protected SelectingItemsControlAutomationPeer(SelectingItemsControl owner);
    public sealed virtual bool get_CanSelectMultiple();
    public sealed virtual bool get_IsSelectionRequired();
    public sealed virtual IReadOnlyList`1<AutomationPeer> GetSelection();
    protected virtual IReadOnlyList`1<AutomationPeer> GetSelectionCore();
    protected virtual SelectionMode GetSelectionModeCore();
    protected virtual void OwnerPropertyChanged(object sender, AvaloniaPropertyChangedEventArgs e);
    protected virtual void OwnerSelectionChanged(object sender, SelectionModelSelectionChangedEventArgs e);
    private void RaiseSelectionChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.TextBlockAutomationPeer : ControlAutomationPeer {
    public TextBlock Owner { get; }
    public TextBlockAutomationPeer(TextBlock owner);
    public TextBlock get_Owner();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    [NullableContextAttribute("2")]
protected virtual string GetNameCore();
    protected virtual bool IsControlElementCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.TextBoxAutomationPeer : ControlAutomationPeer {
    public TextBox Owner { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
public string Value { get; }
    public TextBoxAutomationPeer(TextBox owner);
    public TextBox get_Owner();
    public sealed virtual bool get_IsReadOnly();
    [NullableContextAttribute("2")]
public sealed virtual string get_Value();
    [NullableContextAttribute("2")]
public sealed virtual void SetValue(string value);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.ToggleButtonAutomationPeer : ContentControlAutomationPeer {
    public ToggleButton Owner { get; }
    private ToggleState Avalonia.Automation.Provider.IToggleProvider.ToggleState { get; }
    public ToggleButtonAutomationPeer(ToggleButton owner);
    public ToggleButton get_Owner();
    private sealed virtual override ToggleState Avalonia.Automation.Provider.IToggleProvider.get_ToggleState();
    private sealed virtual override void Avalonia.Automation.Provider.IToggleProvider.Toggle();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
}
public class Avalonia.Automation.Peers.TreeViewAutomationPeer : ItemsControlAutomationPeer {
    [NullableContextAttribute("1")]
public TreeViewAutomationPeer(TreeView owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
}
public class Avalonia.Automation.Peers.TreeViewItemAutomationPeer : ItemsControlAutomationPeer {
    [NullableContextAttribute("1")]
public TreeViewItemAutomationPeer(TreeViewItem owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Avalonia.Automation.Peers.UnrealizedElementAutomationPeer : AutomationPeer {
    public void SetParent(AutomationPeer parent);
    protected virtual void BringIntoViewCore();
    protected virtual Rect GetBoundingRectangleCore();
    [NullableContextAttribute("1")]
protected virtual IReadOnlyList`1<AutomationPeer> GetOrCreateChildrenCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual void SetFocusCore();
    protected virtual bool ShowContextMenuCore();
    protected internal virtual bool TrySetParent(AutomationPeer parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.WindowAutomationPeer : WindowBaseAutomationPeer {
    public Window Owner { get; }
    public WindowAutomationPeer(Window owner);
    public Window get_Owner();
    [NullableContextAttribute("2")]
protected virtual string GetNameCore();
    private void OnOpened(object sender, EventArgs e);
    private void OnClosed(object sender, EventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Automation.Peers.WindowBaseAutomationPeer : ControlAutomationPeer {
    private Control _focus;
    [CompilerGeneratedAttribute]
private EventHandler FocusChanged;
    [NullableAttribute("1")]
public WindowBase Owner { get; }
    public ITopLevelImpl PlatformImpl { get; }
    [NullableContextAttribute("1")]
public WindowBaseAutomationPeer(WindowBase owner);
    [NullableContextAttribute("1")]
public WindowBase get_Owner();
    public sealed virtual ITopLevelImpl get_PlatformImpl();
    [CompilerGeneratedAttribute]
public sealed virtual void add_FocusChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FocusChanged(EventHandler value);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public sealed virtual AutomationPeer GetFocus();
    public sealed virtual AutomationPeer GetPeerFromPoint(Point p);
    protected void StartTrackingFocus();
    protected void StopTrackingFocus();
    private void OnFocusChanged(IInputElement focus);
    [NullableContextAttribute("1")]
private void KeyboardDevicePropertyChanged(object sender, PropertyChangedEventArgs e);
}
[NullableContextAttribute("2")]
public interface Avalonia.Automation.Provider.IEmbeddedRootProvider {
    public abstract virtual AutomationPeer GetFocus();
    public abstract virtual AutomationPeer GetPeerFromPoint(Point p);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FocusChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FocusChanged(EventHandler value);
}
public interface Avalonia.Automation.Provider.IExpandCollapseProvider {
    public ExpandCollapseState ExpandCollapseState { get; }
    public bool ShowsMenu { get; }
    public abstract virtual ExpandCollapseState get_ExpandCollapseState();
    public abstract virtual bool get_ShowsMenu();
    public abstract virtual void Expand();
    public abstract virtual void Collapse();
}
public interface Avalonia.Automation.Provider.IInvokeProvider {
    public abstract virtual void Invoke();
}
public interface Avalonia.Automation.Provider.IRangeValueProvider {
    public bool IsReadOnly { get; }
    public double Minimum { get; }
    public double Maximum { get; }
    public double Value { get; }
    public double LargeChange { get; }
    public double SmallChange { get; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual double get_Minimum();
    public abstract virtual double get_Maximum();
    public abstract virtual double get_Value();
    public abstract virtual double get_LargeChange();
    public abstract virtual double get_SmallChange();
    public abstract virtual void SetValue(double value);
}
[NullableContextAttribute("2")]
public interface Avalonia.Automation.Provider.IRootProvider {
    public ITopLevelImpl PlatformImpl { get; }
    public abstract virtual ITopLevelImpl get_PlatformImpl();
    public abstract virtual AutomationPeer GetFocus();
    public abstract virtual AutomationPeer GetPeerFromPoint(Point p);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FocusChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FocusChanged(EventHandler value);
}
public interface Avalonia.Automation.Provider.IScrollProvider {
    public bool HorizontallyScrollable { get; }
    public double HorizontalScrollPercent { get; }
    public double HorizontalViewSize { get; }
    public bool VerticallyScrollable { get; }
    public double VerticalScrollPercent { get; }
    public double VerticalViewSize { get; }
    public abstract virtual bool get_HorizontallyScrollable();
    public abstract virtual double get_HorizontalScrollPercent();
    public abstract virtual double get_HorizontalViewSize();
    public abstract virtual bool get_VerticallyScrollable();
    public abstract virtual double get_VerticalScrollPercent();
    public abstract virtual double get_VerticalViewSize();
    public abstract virtual void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public abstract virtual void SetScrollPercent(double horizontalPercent, double verticalPercent);
}
[NullableContextAttribute("2")]
public interface Avalonia.Automation.Provider.ISelectionItemProvider {
    public bool IsSelected { get; }
    public ISelectionProvider SelectionContainer { get; }
    public abstract virtual bool get_IsSelected();
    public abstract virtual ISelectionProvider get_SelectionContainer();
    public abstract virtual void AddToSelection();
    public abstract virtual void RemoveFromSelection();
    public abstract virtual void Select();
}
[NullableContextAttribute("1")]
public interface Avalonia.Automation.Provider.ISelectionProvider {
    public bool CanSelectMultiple { get; }
    public bool IsSelectionRequired { get; }
    public abstract virtual bool get_CanSelectMultiple();
    public abstract virtual bool get_IsSelectionRequired();
    public abstract virtual IReadOnlyList`1<AutomationPeer> GetSelection();
}
public interface Avalonia.Automation.Provider.IToggleProvider {
    public ToggleState ToggleState { get; }
    public abstract virtual ToggleState get_ToggleState();
    public abstract virtual void Toggle();
}
[NullableContextAttribute("2")]
public interface Avalonia.Automation.Provider.IValueProvider {
    public bool IsReadOnly { get; }
    public string Value { get; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual string get_Value();
    public abstract virtual void SetValue(string value);
}
public enum Avalonia.Automation.Provider.ScrollAmount : Enum {
    public int value__;
    public static ScrollAmount LargeDecrement;
    public static ScrollAmount SmallDecrement;
    public static ScrollAmount NoAmount;
    public static ScrollAmount LargeIncrement;
    public static ScrollAmount SmallIncrement;
}
public enum Avalonia.Automation.Provider.ToggleState : Enum {
    public int value__;
    public static ToggleState Off;
    public static ToggleState On;
    public static ToggleState Indeterminate;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Automation.RangeValuePatternIdentifiers : object {
    [CompilerGeneratedAttribute]
private static AutomationProperty <IsReadOnlyProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <MinimumProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <MaximumProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <ValueProperty>k__BackingField;
    public static AutomationProperty IsReadOnlyProperty { get; }
    public static AutomationProperty MinimumProperty { get; }
    public static AutomationProperty MaximumProperty { get; }
    public static AutomationProperty ValueProperty { get; }
    private static RangeValuePatternIdentifiers();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_IsReadOnlyProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_MinimumProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_MaximumProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_ValueProperty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Automation.ScrollPatternIdentifiers : object {
    public static double NoScroll;
    [CompilerGeneratedAttribute]
private static AutomationProperty <HorizontallyScrollableProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <HorizontalScrollPercentProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <HorizontalViewSizeProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <VerticallyScrollableProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <VerticalScrollPercentProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <VerticalViewSizeProperty>k__BackingField;
    public static AutomationProperty HorizontallyScrollableProperty { get; }
    public static AutomationProperty HorizontalScrollPercentProperty { get; }
    public static AutomationProperty HorizontalViewSizeProperty { get; }
    public static AutomationProperty VerticallyScrollableProperty { get; }
    public static AutomationProperty VerticalScrollPercentProperty { get; }
    public static AutomationProperty VerticalViewSizeProperty { get; }
    private static ScrollPatternIdentifiers();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_HorizontallyScrollableProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_HorizontalScrollPercentProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_HorizontalViewSizeProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_VerticallyScrollableProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_VerticalScrollPercentProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_VerticalViewSizeProperty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Automation.SelectionItemPatternIdentifiers : object {
    [CompilerGeneratedAttribute]
private static AutomationProperty <IsSelectedProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <SelectionContainerProperty>k__BackingField;
    public static AutomationProperty IsSelectedProperty { get; }
    public static AutomationProperty SelectionContainerProperty { get; }
    private static SelectionItemPatternIdentifiers();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_IsSelectedProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_SelectionContainerProperty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Automation.SelectionPatternIdentifiers : object {
    [CompilerGeneratedAttribute]
private static AutomationProperty <CanSelectMultipleProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <IsSelectionRequiredProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutomationProperty <SelectionProperty>k__BackingField;
    public static AutomationProperty CanSelectMultipleProperty { get; }
    public static AutomationProperty IsSelectionRequiredProperty { get; }
    public static AutomationProperty SelectionProperty { get; }
    private static SelectionPatternIdentifiers();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_CanSelectMultipleProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_IsSelectionRequiredProperty();
    [CompilerGeneratedAttribute]
public static AutomationProperty get_SelectionProperty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Avalonia.ClassicDesktopStyleApplicationLifetimeExtensions : object {
    private static ClassicDesktopStyleApplicationLifetime PrepareLifetime(AppBuilder builder, String[] args, Action`1<IClassicDesktopStyleApplicationLifetime> lifetimeBuilder);
    [ExtensionAttribute]
public static AppBuilder SetupWithClassicDesktopLifetime(AppBuilder builder, String[] args, Action`1<IClassicDesktopStyleApplicationLifetime> lifetimeBuilder);
    [ExtensionAttribute]
public static int StartWithClassicDesktopLifetime(AppBuilder builder, String[] args, Action`1<IClassicDesktopStyleApplicationLifetime> lifetimeBuilder);
    [ExtensionAttribute]
public static int StartWithClassicDesktopLifetime(AppBuilder builder, String[] args, ShutdownMode shutdownMode);
}
public class Avalonia.Controls.AcrylicPlatformCompensationLevels : ValueType {
    [CompilerGeneratedAttribute]
private double <TransparentLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BlurLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AcrylicBlurLevel>k__BackingField;
    public double TransparentLevel { get; }
    public double BlurLevel { get; }
    public double AcrylicBlurLevel { get; }
    public AcrylicPlatformCompensationLevels(double transparent, double blurred, double acrylic);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_TransparentLevel();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_BlurLevel();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_AcrylicBlurLevel();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(AcrylicPlatformCompensationLevels left, AcrylicPlatformCompensationLevels right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(AcrylicPlatformCompensationLevels left, AcrylicPlatformCompensationLevels right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AcrylicPlatformCompensationLevels other);
}
[PrivateApiAttribute]
public abstract class Avalonia.Controls.ApplicationLifetimes.ActivatableLifetimeBase : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ActivatedEventArgs> Activated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ActivatedEventArgs> Deactivated;
    [CompilerGeneratedAttribute]
internal sealed virtual void add_Activated(EventHandler`1<ActivatedEventArgs> value);
    [CompilerGeneratedAttribute]
internal sealed virtual void remove_Activated(EventHandler`1<ActivatedEventArgs> value);
    [CompilerGeneratedAttribute]
internal sealed virtual void add_Deactivated(EventHandler`1<ActivatedEventArgs> value);
    [CompilerGeneratedAttribute]
internal sealed virtual void remove_Deactivated(EventHandler`1<ActivatedEventArgs> value);
    internal virtual bool TryLeaveBackground();
    internal virtual bool TryEnterBackground();
    internal void OnActivated(ActivationKind kind);
    [NullableContextAttribute("1")]
internal void OnActivated(ActivatedEventArgs eventArgs);
    internal void OnDeactivated(ActivationKind kind);
    [NullableContextAttribute("1")]
internal void OnDeactivated(ActivatedEventArgs eventArgs);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
public class Avalonia.Controls.ApplicationLifetimes.ActivatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ActivationKind <Kind>k__BackingField;
    public ActivationKind Kind { get; }
    public ActivatedEventArgs(ActivationKind kind);
    [CompilerGeneratedAttribute]
public ActivationKind get_Kind();
}
public enum Avalonia.Controls.ApplicationLifetimes.ActivationKind : Enum {
    public int value__;
    public static ActivationKind File;
    public static ActivationKind OpenUri;
    public static ActivationKind Reopen;
    public static ActivationKind Background;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime : object {
    private int _exitCode;
    [NullableAttribute("2")]
private CancellationTokenSource _cts;
    private bool _isShuttingDown;
    private AvaloniaList`1<Window> _windows;
    [NullableAttribute("2")]
private CompositeDisposable _compositeDisposable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ControlledApplicationLifetimeStartupEventArgs> Startup;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ShutdownRequestedEventArgs> ShutdownRequested;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ControlledApplicationLifetimeExitEventArgs> Exit;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private ShutdownMode <ShutdownMode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Window <MainWindow>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Args { get; public set; }
    public ShutdownMode ShutdownMode { get; public set; }
    [NullableAttribute("2")]
public Window MainWindow { get; public set; }
    public IReadOnlyList`1<Window> Windows { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_Startup(EventHandler`1<ControlledApplicationLifetimeStartupEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Startup(EventHandler`1<ControlledApplicationLifetimeStartupEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ShutdownRequested(EventHandler`1<ShutdownRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ShutdownRequested(EventHandler`1<ShutdownRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Exit(EventHandler`1<ControlledApplicationLifetimeExitEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Exit(EventHandler`1<ControlledApplicationLifetimeExitEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual ShutdownMode get_ShutdownMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShutdownMode(ShutdownMode value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Window get_MainWindow();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_MainWindow(Window value);
    public sealed virtual IReadOnlyList`1<Window> get_Windows();
    [NullableContextAttribute("2")]
private void HandleWindowClosed(Window window);
    public sealed virtual void Shutdown(int exitCode);
    public sealed virtual bool TryShutdown(int exitCode);
    internal void SubscribeGlobalEvents();
    internal void SetupCore(String[] args);
    public int Start(String[] args);
    public int Start();
    internal int StartCore(String[] args);
    private void ShowMainWindow();
    public sealed virtual void Dispose();
    private bool DoShutdown(ShutdownRequestedEventArgs e, bool isProgrammatic, bool force, int exitCode);
    private void OnShutdownRequested(object sender, ShutdownRequestedEventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <SubscribeGlobalEvents>b__31_0(object sender, RoutedEventArgs _);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <SubscribeGlobalEvents>b__31_1(object sender, RoutedEventArgs _);
}
public class Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetimeOptions : object {
    [CompilerGeneratedAttribute]
private bool <ProcessUrlActivationCommandLine>k__BackingField;
    public bool ProcessUrlActivationCommandLine { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ProcessUrlActivationCommandLine();
    [CompilerGeneratedAttribute]
public void set_ProcessUrlActivationCommandLine(bool value);
}
public class Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <ApplicationExitCode>k__BackingField;
    public int ApplicationExitCode { get; public set; }
    public ControlledApplicationLifetimeExitEventArgs(int applicationExitCode);
    [CompilerGeneratedAttribute]
public int get_ApplicationExitCode();
    [CompilerGeneratedAttribute]
public void set_ApplicationExitCode(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private String[] <Args>k__BackingField;
    public String[] Args { get; }
    public ControlledApplicationLifetimeStartupEventArgs(IEnumerable`1<string> args);
    [CompilerGeneratedAttribute]
public String[] get_Args();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ApplicationLifetimes.FileActivatedEventArgs : ActivatedEventArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IStorageItem> <Files>k__BackingField;
    public IReadOnlyList`1<IStorageItem> Files { get; }
    public FileActivatedEventArgs(IReadOnlyList`1<IStorageItem> files);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IStorageItem> get_Files();
}
[NotClientImplementableAttribute]
[ObsoleteAttribute("This interface has no effect. Instead use Application.Current.TryGetFeature<IActivatableLifetime>().", "True")]
public interface Avalonia.Controls.ApplicationLifetimes.IActivatableApplicationLifetime {
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NotClientImplementableAttribute]
public interface Avalonia.Controls.ApplicationLifetimes.IActivatableLifetime {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Activated(EventHandler`1<ActivatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Activated(EventHandler`1<ActivatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Deactivated(EventHandler`1<ActivatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Deactivated(EventHandler`1<ActivatedEventArgs> value);
    public abstract virtual bool TryLeaveBackground();
    public abstract virtual bool TryEnterBackground();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NotClientImplementableAttribute]
public interface Avalonia.Controls.ApplicationLifetimes.IApplicationLifetime {
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[NotClientImplementableAttribute]
public interface Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Args { get; }
    public ShutdownMode ShutdownMode { get; public set; }
    public Window MainWindow { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<Window> Windows { get; }
    public abstract virtual bool TryShutdown(int exitCode);
    public abstract virtual String[] get_Args();
    public abstract virtual ShutdownMode get_ShutdownMode();
    public abstract virtual void set_ShutdownMode(ShutdownMode value);
    public abstract virtual Window get_MainWindow();
    public abstract virtual void set_MainWindow(Window value);
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<Window> get_Windows();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ShutdownRequested(EventHandler`1<ShutdownRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ShutdownRequested(EventHandler`1<ShutdownRequestedEventArgs> value);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[NotClientImplementableAttribute]
public interface Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Startup(EventHandler`1<ControlledApplicationLifetimeStartupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Startup(EventHandler`1<ControlledApplicationLifetimeStartupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Exit(EventHandler`1<ControlledApplicationLifetimeExitEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Exit(EventHandler`1<ControlledApplicationLifetimeExitEventArgs> value);
    public abstract virtual void Shutdown(int exitCode);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[NotClientImplementableAttribute]
[PrivateApiAttribute]
[EditorBrowsableAttribute("1")]
public interface Avalonia.Controls.ApplicationLifetimes.ISingleTopLevelApplicationLifetime {
    internal TopLevel TopLevel { get; }
    internal abstract virtual TopLevel get_TopLevel();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[NotClientImplementableAttribute]
public interface Avalonia.Controls.ApplicationLifetimes.ISingleViewApplicationLifetime {
    public Control MainView { get; public set; }
    public abstract virtual Control get_MainView();
    public abstract virtual void set_MainView(Control value);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ApplicationLifetimes.ProtocolActivatedEventArgs : ActivatedEventArgs {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public Uri Uri { get; }
    public ProtocolActivatedEventArgs(Uri uri);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
}
public class Avalonia.Controls.ApplicationLifetimes.ShutdownRequestedEventArgs : CancelEventArgs {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_Popup", "Avalonia.Controls.Primitives.Popup")]
[TemplatePartAttribute("PART_SelectingItemsControl", "Avalonia.Controls.Primitives.SelectingItemsControl")]
[TemplatePartAttribute("PART_SelectionAdapter", "Avalonia.Controls.Utils.ISelectionAdapter")]
[TemplatePartAttribute("PART_TextBox", "Avalonia.Controls.TextBox")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.AutoCompleteBox : TemplatedControl {
    [NullableAttribute("1")]
private static string ElementSelectionAdapter;
    [NullableAttribute("1")]
private static string ElementSelector;
    [NullableAttribute("1")]
private static string ElementPopup;
    [NullableAttribute("1")]
private static string ElementTextBox;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<object> _items;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AvaloniaList`1<object> _view;
    private int _ignoreTextPropertyChange;
    private bool _ignorePropertyChange;
    private bool _ignoreTextSelectionChange;
    private bool _skipSelectedItemTextUpdate;
    private int _textSelectionStart;
    private bool _userCalledPopulate;
    private bool _popupHasOpened;
    private DispatcherTimer _delayTimer;
    private bool _allowWrite;
    private bool _cancelRequested;
    private bool _filterInAction;
    private TextBox _textBox;
    private IDisposable _textBoxSubscriptions;
    private ISelectionAdapter _adapter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private BindingEvaluator`1<string> _valueBindingEvaluator;
    private IDisposable _collectionChangeSubscription;
    private CancellationTokenSource _populationCancellationTokenSource;
    private bool _itemTemplateIsFromValueMemberBinding;
    private bool _settingItemTemplateFromValueMemberBinding;
    private bool _isFocused;
    private string _searchText;
    [NullableAttribute("1")]
private EventHandler _populateDropDownHandler;
    [NullableAttribute("1")]
public static RoutedEvent`1<SelectionChangedEventArgs> SelectionChangedEvent;
    [NullableAttribute("1")]
public static RoutedEvent`1<TextChangedEventArgs> TextChangedEvent;
    [CompilerGeneratedAttribute]
private Popup <DropDownPopup>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PopulatingEventArgs> Populating;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PopulatedEventArgs> Populated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<CancelEventArgs> DropDownOpening;
    [CompilerGeneratedAttribute]
private EventHandler DropDownOpened;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<CancelEventArgs> DropDownClosing;
    [CompilerGeneratedAttribute]
private EventHandler DropDownClosed;
    [NullableAttribute("1")]
public static StyledProperty`1<int> CaretIndexProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> WatermarkProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<int> MinimumPrefixLengthProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<TimeSpan> MinimumPopulateDelayProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<double> MaxDropDownHeightProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> IsTextCompletionEnabledProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<IDataTemplate> ItemTemplateProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> IsDropDownOpenProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> SelectedItemProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> TextProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<AutoCompleteBox, string> SearchTextProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<AutoCompleteFilterMode> FilterModeProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<AutoCompleteFilterPredicate`1<object>> ItemFilterProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<AutoCompleteFilterPredicate`1<string>> TextFilterProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<AutoCompleteSelector`1<object>> ItemSelectorProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<AutoCompleteSelector`1<string>> TextSelectorProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IEnumerable> ItemsSourceProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Func`3<string, CancellationToken, Task`1<IEnumerable`1<object>>>> AsyncPopulatorProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<int> MaxLengthProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> InnerLeftContentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> InnerRightContentProperty;
    private Popup DropDownPopup { get; private set; }
    private TextBox TextBox { get; private set; }
    private int TextBoxSelectionStart { get; }
    private int TextBoxSelectionLength { get; }
    protected ISelectionAdapter SelectionAdapter { get; protected set; }
    public int CaretIndex { get; public set; }
    public int MinimumPrefixLength { get; public set; }
    public bool IsTextCompletionEnabled { get; public set; }
    [NullableAttribute("1")]
public IDataTemplate ItemTemplate { get; public set; }
    public TimeSpan MinimumPopulateDelay { get; public set; }
    public double MaxDropDownHeight { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    [AssignBindingAttribute]
[InheritDataTypeFromItemsAttribute("ItemsSource")]
public IBinding ValueMemberBinding { get; public set; }
    public object SelectedItem { get; public set; }
    public string Text { get; public set; }
    public string SearchText { get; private set; }
    public AutoCompleteFilterMode FilterMode { get; public set; }
    public string Watermark { get; public set; }
    public AutoCompleteFilterPredicate`1<object> ItemFilter { get; public set; }
    public AutoCompleteFilterPredicate`1<string> TextFilter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AutoCompleteSelector`1<object> ItemSelector { get; public set; }
    public AutoCompleteSelector`1<string> TextSelector { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<string, CancellationToken, Task`1<IEnumerable`1<object>>> AsyncPopulator { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public int MaxLength { get; public set; }
    public object InnerLeftContent { get; public set; }
    public object InnerRightContent { get; public set; }
    private static AutoCompleteBox();
    private static bool IsValidMinimumPrefixLength(int value);
    private static bool IsValidMinimumPopulateDelay(TimeSpan value);
    private static bool IsValidMaxDropDownHeight(double value);
    private static bool IsValidFilterMode(AutoCompleteFilterMode mode);
    [NullableContextAttribute("1")]
private void OnControlIsEnabledChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnMinimumPopulateDelayChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnIsDropDownOpenChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnSelectedItemPropertyChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnTextPropertyChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnSearchTextPropertyChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnFilterModePropertyChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnItemFilterPropertyChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnItemsSourcePropertyChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnItemTemplatePropertyChanged(AvaloniaPropertyChangedEventArgs e);
    private void OnValueMemberBindingChanged(IBinding value);
    [CompilerGeneratedAttribute]
private Popup get_DropDownPopup();
    [CompilerGeneratedAttribute]
private void set_DropDownPopup(Popup value);
    private TextBox get_TextBox();
    private void set_TextBox(TextBox value);
    private int get_TextBoxSelectionStart();
    private int get_TextBoxSelectionLength();
    protected ISelectionAdapter get_SelectionAdapter();
    protected void set_SelectionAdapter(ISelectionAdapter value);
    [NullableContextAttribute("1")]
protected virtual ISelectionAdapter GetSelectionAdapterPart(INameScope nameScope);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
    [NullableContextAttribute("1")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnGotFocus(GotFocusEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLostFocus(RoutedEventArgs e);
    protected bool HasFocus();
    private void FocusChanged(bool hasFocus);
    public void add_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    public void remove_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Populating(EventHandler`1<PopulatingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Populating(EventHandler`1<PopulatingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Populated(EventHandler`1<PopulatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Populated(EventHandler`1<PopulatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DropDownOpening(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DropDownOpening(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DropDownOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDownOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DropDownClosing(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DropDownClosing(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DropDownClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDownClosed(EventHandler value);
    [NullableContextAttribute("1")]
public void add_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [NullableContextAttribute("1")]
public void remove_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [NullableContextAttribute("1")]
protected virtual void OnPopulating(PopulatingEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPopulated(PopulatedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDropDownOpening(CancelEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDropDownOpened(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDropDownClosing(CancelEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDropDownClosed(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnTextChanged(TextChangedEventArgs e);
    private void ClosingDropDown(bool oldValue);
    private void OpeningDropDown(bool oldValue);
    [NullableContextAttribute("1")]
private void DropDownPopup_Closed(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void PopulateDropDown(object sender, EventArgs e);
    private bool TryPopulateAsync(string searchText);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Avalonia.Controls.AutoCompleteBox/<PopulateAsync>d__106")]
private Task PopulateAsync(string searchText, CancellationToken cancellationToken);
    private void OpenDropDown();
    private void CloseDropDown();
    private string FormatValue(object value, bool clearDataContext);
    protected virtual string FormatValue(object value);
    private void OnTextBoxTextChanged();
    private void UpdateTextValue(string value);
    private void UpdateTextValue(string value, Nullable`1<bool> userInitiated);
    private void TextUpdated(string newText, bool userInitiated);
    private void ClearView();
    private void RefreshView();
    private void OnItemsSourceChanged(IEnumerable newValue);
    [NullableContextAttribute("1")]
private void ItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public void PopulateComplete();
    private void UpdateTextCompletion(bool userInitiated);
    private object TryGetMatch(string searchText, AvaloniaList`1<object> view, AutoCompleteFilterPredicate`1<string> predicate);
    private void UpdatePseudoClasses();
    private void ClearTextBoxSelection();
    private void OnSelectedItemChanged(object newItem);
    [NullableContextAttribute("1")]
private void OnAdapterSelectionChanged(object sender, SelectionChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnAdapterSelectionComplete(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void OnAdapterSelectionCanceled(object sender, RoutedEventArgs e);
    public int get_CaretIndex();
    public void set_CaretIndex(int value);
    public int get_MinimumPrefixLength();
    public void set_MinimumPrefixLength(int value);
    public bool get_IsTextCompletionEnabled();
    public void set_IsTextCompletionEnabled(bool value);
    [NullableContextAttribute("1")]
public IDataTemplate get_ItemTemplate();
    [NullableContextAttribute("1")]
public void set_ItemTemplate(IDataTemplate value);
    public TimeSpan get_MinimumPopulateDelay();
    public void set_MinimumPopulateDelay(TimeSpan value);
    public double get_MaxDropDownHeight();
    public void set_MaxDropDownHeight(double value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public IBinding get_ValueMemberBinding();
    public void set_ValueMemberBinding(IBinding value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public string get_Text();
    public void set_Text(string value);
    public string get_SearchText();
    private void set_SearchText(string value);
    public AutoCompleteFilterMode get_FilterMode();
    public void set_FilterMode(AutoCompleteFilterMode value);
    public string get_Watermark();
    public void set_Watermark(string value);
    public AutoCompleteFilterPredicate`1<object> get_ItemFilter();
    public void set_ItemFilter(AutoCompleteFilterPredicate`1<object> value);
    public AutoCompleteFilterPredicate`1<string> get_TextFilter();
    public void set_TextFilter(AutoCompleteFilterPredicate`1<string> value);
    public AutoCompleteSelector`1<object> get_ItemSelector();
    public void set_ItemSelector(AutoCompleteSelector`1<object> value);
    public AutoCompleteSelector`1<string> get_TextSelector();
    public void set_TextSelector(AutoCompleteSelector`1<string> value);
    public Func`3<string, CancellationToken, Task`1<IEnumerable`1<object>>> get_AsyncPopulator();
    public void set_AsyncPopulator(Func`3<string, CancellationToken, Task`1<IEnumerable`1<object>>> value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public object get_InnerLeftContent();
    public void set_InnerLeftContent(object value);
    public object get_InnerRightContent();
    public void set_InnerRightContent(object value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <set_TextBox>b__53_0(string _);
    [CompilerGeneratedAttribute]
private IFocusScope <FocusChanged>g__GetFocusScope|68_0();
    [CompilerGeneratedAttribute]
private void <OnTextBoxTextChanged>b__111_0();
}
public enum Avalonia.Controls.AutoCompleteFilterMode : Enum {
    public int value__;
    public static AutoCompleteFilterMode None;
    public static AutoCompleteFilterMode StartsWith;
    public static AutoCompleteFilterMode StartsWithCaseSensitive;
    public static AutoCompleteFilterMode StartsWithOrdinal;
    public static AutoCompleteFilterMode StartsWithOrdinalCaseSensitive;
    public static AutoCompleteFilterMode Contains;
    public static AutoCompleteFilterMode ContainsCaseSensitive;
    public static AutoCompleteFilterMode ContainsOrdinal;
    public static AutoCompleteFilterMode ContainsOrdinalCaseSensitive;
    public static AutoCompleteFilterMode Equals;
    public static AutoCompleteFilterMode EqualsCaseSensitive;
    public static AutoCompleteFilterMode EqualsOrdinal;
    public static AutoCompleteFilterMode EqualsOrdinalCaseSensitive;
    public static AutoCompleteFilterMode Custom;
}
public class Avalonia.Controls.AutoCompleteFilterPredicate`1 : MulticastDelegate {
    public AutoCompleteFilterPredicate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(string search, T item);
    public virtual IAsyncResult BeginInvoke(string search, T item, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Avalonia.Controls.AutoCompleteSelector`1 : MulticastDelegate {
    public AutoCompleteSelector`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(string search, T item);
    public virtual IAsyncResult BeginInvoke(string search, T item, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Automation.Peers.ImageAutomationPeer : ControlAutomationPeer {
    public ImageAutomationPeer(Control owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Automation.Peers.InteropAutomationPeer : AutomationPeer {
    private AutomationPeer _parent;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IPlatformHandle <NativeControlHandle>k__BackingField;
    [NullableAttribute("1")]
public IPlatformHandle NativeControlHandle { get; }
    [NullableContextAttribute("1")]
public InteropAutomationPeer(IPlatformHandle nativeControlHandle);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IPlatformHandle get_NativeControlHandle();
    protected virtual void BringIntoViewCore();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetAutomationIdCore();
    protected virtual Rect GetBoundingRectangleCore();
    [NullableContextAttribute("1")]
protected virtual string GetClassNameCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual string GetNameCore();
    [NullableContextAttribute("1")]
protected virtual IReadOnlyList`1<AutomationPeer> GetOrCreateChildrenCore();
    protected virtual AutomationPeer GetParentCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual void SetFocusCore();
    protected virtual bool ShowContextMenuCore();
    protected internal virtual bool TrySetParent(AutomationPeer parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Automation.Peers.LabelAutomationPeer : ControlAutomationPeer {
    public LabelAutomationPeer(Label owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    [NullableContextAttribute("2")]
protected virtual string GetNameCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Automation.Peers.NativeControlHostPeer : ControlAutomationPeer {
    public NativeControlHostPeer(NativeControlHost owner);
    protected virtual IReadOnlyList`1<AutomationPeer> GetChildrenCore();
    private void OnNativeControlHandleChanged(object sender, EventArgs e);
}
public class Avalonia.Controls.Automation.Peers.ProgressBarAutomationPeer : RangeBaseAutomationPeer {
    private bool Avalonia.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double Avalonia.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    private double Avalonia.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    [NullableContextAttribute("1")]
public ProgressBarAutomationPeer(RangeBase owner);
    [NullableContextAttribute("1")]
protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    private sealed virtual override void Avalonia.Automation.Provider.IRangeValueProvider.SetValue(double val);
    private sealed virtual override bool Avalonia.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double Avalonia.Automation.Provider.IRangeValueProvider.get_LargeChange();
    private sealed virtual override double Avalonia.Automation.Provider.IRangeValueProvider.get_SmallChange();
}
public class Avalonia.Controls.Automation.Peers.RadioButtonAutomationPeer : ToggleButtonAutomationPeer {
    public bool IsSelected { get; }
    [NullableAttribute("2")]
public ISelectionProvider SelectionContainer { get; }
    [NullableContextAttribute("1")]
public RadioButtonAutomationPeer(RadioButton owner);
    [NullableContextAttribute("1")]
protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public sealed virtual bool get_IsSelected();
    [NullableContextAttribute("2")]
public sealed virtual ISelectionProvider get_SelectionContainer();
    public sealed virtual void AddToSelection();
    public sealed virtual void RemoveFromSelection();
    public sealed virtual void Select();
    internal virtual void RaiseToggleStatePropertyChangedEvent(Nullable`1<bool> oldValue, Nullable`1<bool> newValue);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object a, AvaloniaPropertyChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Automation.Peers.SliderAutomationPeer : RangeBaseAutomationPeer {
    public SliderAutomationPeer(Slider owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
}
public class Avalonia.Controls.Automation.Peers.ThumbAutomationPeer : ControlAutomationPeer {
    [NullableContextAttribute("1")]
public ThumbAutomationPeer(Thumb owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Automation.Peers.TitleBarAutomationPeer : ControlAutomationPeer {
    public TitleBarAutomationPeer(TitleBar owner);
    protected virtual bool IsContentElementCore();
    protected virtual string GetClassNameCore();
    [NullableContextAttribute("2")]
protected virtual string GetAutomationIdCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Border : Decorator {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BackgroundProperty;
    public static StyledProperty`1<BackgroundSizing> BackgroundSizingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BorderBrushProperty;
    public static StyledProperty`1<Thickness> BorderThicknessProperty;
    public static StyledProperty`1<CornerRadius> CornerRadiusProperty;
    public static StyledProperty`1<BoxShadows> BoxShadowProperty;
    private BorderRenderHelper _borderRenderHelper;
    private Nullable`1<Thickness> _layoutThickness;
    private double _scale;
    [NullableAttribute("2")]
private CompositionBorderVisual _borderVisual;
    [NullableAttribute("2")]
public IBrush Background { get; public set; }
    public BackgroundSizing BackgroundSizing { get; public set; }
    [NullableAttribute("2")]
public IBrush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public BoxShadows BoxShadow { get; public set; }
    private Thickness LayoutThickness { get; }
    public CornerRadius ClipToBoundsRadius { get; }
    private static Border();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    [NullableContextAttribute("2")]
public IBrush get_Background();
    [NullableContextAttribute("2")]
public void set_Background(IBrush value);
    public BackgroundSizing get_BackgroundSizing();
    public void set_BackgroundSizing(BackgroundSizing value);
    [NullableContextAttribute("2")]
public IBrush get_BorderBrush();
    [NullableContextAttribute("2")]
public void set_BorderBrush(IBrush value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public BoxShadows get_BoxShadow();
    public void set_BoxShadow(BoxShadows value);
    private Thickness get_LayoutThickness();
    private void VerifyScale();
    public sealed virtual void Render(DrawingContext context);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private protected virtual CompositionDrawListVisual CreateCompositionVisual(Compositor compositor);
    public sealed virtual CornerRadius get_ClipToBoundsRadius();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Button : ContentControl {
    private static string pcPressed;
    private static string pcFlyoutOpen;
    [NullableAttribute("2")]
private EventHandler _canExecuteChangeHandler;
    public static StyledProperty`1<ClickMode> ClickModeProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ICommand> CommandProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<KeyGesture> HotKeyProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> CommandParameterProperty;
    public static StyledProperty`1<bool> IsDefaultProperty;
    public static StyledProperty`1<bool> IsCancelProperty;
    public static RoutedEvent`1<RoutedEventArgs> ClickEvent;
    public static DirectProperty`2<Button, bool> IsPressedProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<FlyoutBase> FlyoutProperty;
    private bool _commandCanExecute;
    [NullableAttribute("2")]
private KeyGesture _hotkey;
    private bool _isFlyoutOpen;
    private bool _isPressed;
    private EventHandler CanExecuteChangedHandler { get; }
    public ClickMode ClickMode { get; public set; }
    [NullableAttribute("2")]
public ICommand Command { get; public set; }
    [NullableAttribute("2")]
public KeyGesture HotKey { get; public set; }
    [NullableAttribute("2")]
public object CommandParameter { get; public set; }
    public bool IsDefault { get; public set; }
    public bool IsCancel { get; public set; }
    public bool IsPressed { get; private set; }
    [NullableAttribute("2")]
public FlyoutBase Flyout { get; public set; }
    protected bool IsEnabledCore { get; }
    private static Button();
    private EventHandler get_CanExecuteChangedHandler();
    public sealed virtual void add_Click(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void remove_Click(EventHandler`1<RoutedEventArgs> value);
    public ClickMode get_ClickMode();
    public void set_ClickMode(ClickMode value);
    [NullableContextAttribute("2")]
public sealed virtual ICommand get_Command();
    [NullableContextAttribute("2")]
public void set_Command(ICommand value);
    [NullableContextAttribute("2")]
public KeyGesture get_HotKey();
    [NullableContextAttribute("2")]
public void set_HotKey(KeyGesture value);
    [NullableContextAttribute("2")]
public sealed virtual object get_CommandParameter();
    [NullableContextAttribute("2")]
public void set_CommandParameter(object value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public bool get_IsCancel();
    public void set_IsCancel(bool value);
    public bool get_IsPressed();
    private void set_IsPressed(bool value);
    [NullableContextAttribute("2")]
public FlyoutBase get_Flyout();
    [NullableContextAttribute("2")]
public void set_Flyout(FlyoutBase value);
    protected virtual bool get_IsEnabledCore();
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual void OnAccessKey(RoutedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnClick();
    protected virtual void OpenFlyout();
    protected virtual void CloseFlyout();
    protected virtual void OnFlyoutOpened();
    protected virtual void OnFlyoutClosed();
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    protected virtual void OnPointerCaptureLost(PointerCaptureLostEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
    internal void PerformClick();
    private void CanExecuteChanged(object sender, EventArgs e);
    [NullableContextAttribute("2")]
private void CanExecuteChanged(ICommand command, object parameter);
    [NullableContextAttribute("2")]
private void RegisterFlyoutEvents(FlyoutBase flyout);
    [NullableContextAttribute("2")]
private void UnregisterFlyoutEvents(FlyoutBase flyout);
    private void ListenForDefault(IInputElement root);
    private void ListenForCancel(IInputElement root);
    private void StopListeningForDefault(IInputElement root);
    private void StopListeningForCancel(IInputElement root);
    private void RootDefaultKeyDown(object sender, KeyEventArgs e);
    private void RootCancelKeyDown(object sender, KeyEventArgs e);
    private void UpdatePseudoClasses();
    private sealed virtual override void Avalonia.Input.ICommandSource.CanExecuteChanged(object sender, EventArgs e);
    private sealed virtual override void Avalonia.Input.IClickableControl.RaiseClick();
    private void Flyout_Opened(object sender, EventArgs e);
    private void Flyout_Closed(object sender, EventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <OnPointerReleased>b__62_0(Visual c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_DecreaseButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_IncreaseButton", "Avalonia.Controls.Button")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.ButtonSpinner : Spinner {
    public static StyledProperty`1<bool> AllowSpinProperty;
    public static StyledProperty`1<bool> ShowButtonSpinnerProperty;
    public static StyledProperty`1<Location> ButtonSpinnerLocationProperty;
    [NullableAttribute("2")]
private Button _decreaseButton;
    [NullableAttribute("2")]
private Button _increaseButton;
    [NullableAttribute("2")]
private Button DecreaseButton { get; private set; }
    [NullableAttribute("2")]
private Button IncreaseButton { get; private set; }
    public bool AllowSpin { get; public set; }
    public bool ShowButtonSpinner { get; public set; }
    public Location ButtonSpinnerLocation { get; public set; }
    private static ButtonSpinner();
    [NullableContextAttribute("2")]
private Button get_DecreaseButton();
    [NullableContextAttribute("2")]
private void set_DecreaseButton(Button value);
    [NullableContextAttribute("2")]
private Button get_IncreaseButton();
    [NullableContextAttribute("2")]
private void set_IncreaseButton(Button value);
    public bool get_AllowSpin();
    public void set_AllowSpin(bool value);
    public bool get_ShowButtonSpinner();
    public void set_ShowButtonSpinner(bool value);
    public Location get_ButtonSpinnerLocation();
    public void set_ButtonSpinnerLocation(Location value);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPointerWheelChanged(PointerWheelEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnValidSpinDirectionChanged(ValidSpinDirections oldValue, ValidSpinDirections newValue);
    protected virtual void OnAllowSpinChanged(bool oldValue, bool newValue);
    private static void AllowSpinChanged(AvaloniaPropertyChangedEventArgs e);
    private void SetButtonUsage();
    private void OnButtonClick(object sender, RoutedEventArgs e);
    private void UpdatePseudoClasses(Location location);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_CalendarItem", "Avalonia.Controls.Primitives.CalendarItem")]
[TemplatePartAttribute("PART_Root", "Avalonia.Controls.Panel")]
public class Avalonia.Controls.Calendar : TemplatedControl {
    internal static int RowsPerMonth;
    internal static int ColumnsPerMonth;
    internal static int RowsPerYear;
    internal static int ColumnsPerYear;
    private DateTime _selectedMonth;
    private DateTime _selectedYear;
    private bool _isShiftPressed;
    private bool _displayDateIsChanging;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CalendarDayButton <FocusButton>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CalendarButton <FocusCalendarButton>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Panel <Root>k__BackingField;
    public static StyledProperty`1<DayOfWeek> FirstDayOfWeekProperty;
    public static StyledProperty`1<bool> IsTodayHighlightedProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> HeaderBackgroundProperty;
    public static StyledProperty`1<CalendarMode> DisplayModeProperty;
    public static StyledProperty`1<CalendarSelectionMode> SelectionModeProperty;
    public static StyledProperty`1<Nullable`1<DateTime>> SelectedDateProperty;
    [CompilerGeneratedAttribute]
private SelectedDatesCollection <SelectedDates>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<DateTime> <RemovedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastSelectedDateInternal>k__BackingField;
    public static StyledProperty`1<DateTime> DisplayDateProperty;
    [CompilerGeneratedAttribute]
private DateTime <DisplayDateInternal>k__BackingField;
    public static StyledProperty`1<Nullable`1<DateTime>> DisplayDateStartProperty;
    [CompilerGeneratedAttribute]
private CalendarBlackoutDatesCollection <BlackoutDates>k__BackingField;
    public static StyledProperty`1<Nullable`1<DateTime>> DisplayDateEndProperty;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <HoverStart>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HoverStartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <HoverEndInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HoverEndIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFocusInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMouseSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CalendarDatePickerDisplayDateFlag>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SelectionChangedEventArgs> SelectedDatesChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<CalendarDateChangedEventArgs> DisplayDateChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<CalendarModeChangedEventArgs> DisplayModeChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PointerReleasedEventArgs> DayButtonMouseUp;
    private static string PART_ElementRoot;
    private static string PART_ElementMonth;
    [NullableAttribute("2")]
internal CalendarDayButton FocusButton { get; internal set; }
    [NullableAttribute("2")]
internal CalendarButton FocusCalendarButton { get; internal set; }
    [NullableAttribute("2")]
internal Panel Root { get; internal set; }
    [NullableAttribute("2")]
internal CalendarItem MonthControl { get; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public bool IsTodayHighlighted { get; public set; }
    [NullableAttribute("2")]
public IBrush HeaderBackground { get; public set; }
    public CalendarMode DisplayMode { get; public set; }
    public CalendarSelectionMode SelectionMode { get; public set; }
    public Nullable`1<DateTime> SelectedDate { get; public set; }
    public SelectedDatesCollection SelectedDates { get; private set; }
    internal Collection`1<DateTime> RemovedItems { get; internal set; }
    internal Nullable`1<DateTime> LastSelectedDateInternal { get; internal set; }
    internal Nullable`1<DateTime> LastSelectedDate { get; internal set; }
    internal DateTime SelectedMonth { get; internal set; }
    internal DateTime SelectedYear { get; internal set; }
    public DateTime DisplayDate { get; public set; }
    internal DateTime DisplayDateInternal { get; private set; }
    public Nullable`1<DateTime> DisplayDateStart { get; public set; }
    public CalendarBlackoutDatesCollection BlackoutDates { get; private set; }
    internal DateTime DisplayDateRangeStart { get; }
    public Nullable`1<DateTime> DisplayDateEnd { get; public set; }
    internal DateTime DisplayDateRangeEnd { get; }
    internal Nullable`1<DateTime> HoverStart { get; internal set; }
    internal Nullable`1<int> HoverStartIndex { get; internal set; }
    internal Nullable`1<DateTime> HoverEndInternal { get; internal set; }
    internal Nullable`1<DateTime> HoverEnd { get; internal set; }
    internal Nullable`1<int> HoverEndIndex { get; internal set; }
    internal bool HasFocusInternal { get; internal set; }
    internal bool IsMouseSelection { get; internal set; }
    internal bool CalendarDatePickerDisplayDateFlag { get; internal set; }
    private static Calendar();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal CalendarDayButton get_FocusButton();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_FocusButton(CalendarDayButton value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal CalendarButton get_FocusCalendarButton();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_FocusCalendarButton(CalendarButton value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Panel get_Root();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Root(Panel value);
    [NullableContextAttribute("2")]
internal CalendarItem get_MonthControl();
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    private void OnFirstDayOfWeekChanged(AvaloniaPropertyChangedEventArgs e);
    private static bool IsValidFirstDayOfWeek(object value);
    public bool get_IsTodayHighlighted();
    public void set_IsTodayHighlighted(bool value);
    private void OnIsTodayHighlightedChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("2")]
public IBrush get_HeaderBackground();
    [NullableContextAttribute("2")]
public void set_HeaderBackground(IBrush value);
    public CalendarMode get_DisplayMode();
    public void set_DisplayMode(CalendarMode value);
    private void OnDisplayModePropertyChanged(AvaloniaPropertyChangedEventArgs e);
    private static bool IsValidDisplayMode(CalendarMode mode);
    private void OnDisplayModeChanged(CalendarModeChangedEventArgs args);
    public CalendarSelectionMode get_SelectionMode();
    public void set_SelectionMode(CalendarSelectionMode value);
    private void OnSelectionModeChanged(AvaloniaPropertyChangedEventArgs e);
    private static bool IsValidSelectionMode(object value);
    public Nullable`1<DateTime> get_SelectedDate();
    public void set_SelectedDate(Nullable`1<DateTime> value);
    private void OnSelectedDateChanged(AvaloniaPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public SelectedDatesCollection get_SelectedDates();
    [CompilerGeneratedAttribute]
private void set_SelectedDates(SelectedDatesCollection value);
    private static bool IsSelectionChanged(SelectionChangedEventArgs e);
    internal void OnSelectedDatesCollectionChanged(SelectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
internal Collection`1<DateTime> get_RemovedItems();
    [CompilerGeneratedAttribute]
internal void set_RemovedItems(Collection`1<DateTime> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<DateTime> get_LastSelectedDateInternal();
    [CompilerGeneratedAttribute]
internal void set_LastSelectedDateInternal(Nullable`1<DateTime> value);
    internal Nullable`1<DateTime> get_LastSelectedDate();
    internal void set_LastSelectedDate(Nullable`1<DateTime> value);
    internal DateTime get_SelectedMonth();
    internal void set_SelectedMonth(DateTime value);
    internal DateTime get_SelectedYear();
    internal void set_SelectedYear(DateTime value);
    public DateTime get_DisplayDate();
    public void set_DisplayDate(DateTime value);
    [CompilerGeneratedAttribute]
internal DateTime get_DisplayDateInternal();
    [CompilerGeneratedAttribute]
private void set_DisplayDateInternal(DateTime value);
    private void OnDisplayDateChanged(AvaloniaPropertyChangedEventArgs e);
    private static void UpdateDisplayDate(Calendar c, DateTime addedDate, DateTime removedDate);
    private void OnDisplayDate(CalendarDateChangedEventArgs e);
    public Nullable`1<DateTime> get_DisplayDateStart();
    public void set_DisplayDateStart(Nullable`1<DateTime> value);
    private void OnDisplayDateStartChanged(AvaloniaPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public CalendarBlackoutDatesCollection get_BlackoutDates();
    [CompilerGeneratedAttribute]
private void set_BlackoutDates(CalendarBlackoutDatesCollection value);
    private static Nullable`1<DateTime> SelectedDateMin(Calendar cal);
    internal DateTime get_DisplayDateRangeStart();
    public Nullable`1<DateTime> get_DisplayDateEnd();
    public void set_DisplayDateEnd(Nullable`1<DateTime> value);
    private void OnDisplayDateEndChanged(AvaloniaPropertyChangedEventArgs e);
    private static Nullable`1<DateTime> SelectedDateMax(Calendar cal);
    internal DateTime get_DisplayDateRangeEnd();
    [CompilerGeneratedAttribute]
internal Nullable`1<DateTime> get_HoverStart();
    [CompilerGeneratedAttribute]
internal void set_HoverStart(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_HoverStartIndex();
    [CompilerGeneratedAttribute]
internal void set_HoverStartIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<DateTime> get_HoverEndInternal();
    [CompilerGeneratedAttribute]
internal void set_HoverEndInternal(Nullable`1<DateTime> value);
    internal Nullable`1<DateTime> get_HoverEnd();
    internal void set_HoverEnd(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_HoverEndIndex();
    [CompilerGeneratedAttribute]
internal void set_HoverEndIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal bool get_HasFocusInternal();
    [CompilerGeneratedAttribute]
internal void set_HasFocusInternal(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsMouseSelection();
    [CompilerGeneratedAttribute]
internal void set_IsMouseSelection(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CalendarDatePickerDisplayDateFlag();
    [CompilerGeneratedAttribute]
internal void set_CalendarDatePickerDisplayDateFlag(bool value);
    [NullableContextAttribute("2")]
internal CalendarDayButton FindDayButtonFromDay(DateTime day);
    private void OnSelectedMonthChanged(Nullable`1<DateTime> selectedMonth);
    private void OnSelectedYearChanged(Nullable`1<DateTime> selectedYear);
    internal void OnHeaderClick();
    internal void ResetStates();
    internal void UpdateMonths();
    internal static bool IsValidDateSelection(Calendar cal, Nullable`1<DateTime> value);
    private static bool IsValidKeyboardSelection(Calendar cal, Nullable`1<DateTime> value);
    internal void HighlightDays();
    internal void UnHighlightDays();
    internal void SortHoverIndexes(Int32& startIndex, Int32& endIndex);
    internal void OnPreviousClick();
    internal void OnNextClick();
    internal void OnDayClick(DateTime selectedDate);
    private void OnMonthClick();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public void add_SelectedDatesChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedDatesChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DisplayDateChanged(EventHandler`1<CalendarDateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DisplayDateChanged(EventHandler`1<CalendarDateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DisplayModeChanged(EventHandler`1<CalendarModeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DisplayModeChanged(EventHandler`1<CalendarModeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_DayButtonMouseUp(EventHandler`1<PointerReleasedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_DayButtonMouseUp(EventHandler`1<PointerReleasedEventArgs> value);
    private void AddSelection();
    private void ProcessSelection(bool shift, Nullable`1<DateTime> lastSelectedDate, Nullable`1<int> index);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    internal void OnDayButtonMouseUp(PointerReleasedEventArgs e);
    protected virtual void OnPointerWheelChanged(PointerWheelEventArgs e);
    internal void Calendar_KeyDown(KeyEventArgs e);
    internal bool ProcessCalendarKey(KeyEventArgs e);
    internal void ProcessUpKey(bool ctrl, bool shift);
    internal void ProcessDownKey(bool ctrl, bool shift);
    internal void ProcessLeftKey(bool shift);
    internal void ProcessRightKey(bool shift);
    private bool ProcessEnterKey();
    internal void ProcessHomeKey(bool shift);
    internal void ProcessEndKey(bool shift);
    internal void ProcessPageDownKey(bool shift);
    internal void ProcessPageUpKey(bool shift);
    private void Calendar_KeyUp(KeyEventArgs e);
    internal void ProcessShiftKeyUp();
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    private void OnIsEnabledChanged(AvaloniaPropertyChangedEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
}
public class Avalonia.Controls.CalendarDateChangedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RemovedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AddedDate>k__BackingField;
    public Nullable`1<DateTime> RemovedDate { get; private set; }
    public Nullable`1<DateTime> AddedDate { get; private set; }
    internal CalendarDateChangedEventArgs(Nullable`1<DateTime> removedDate, Nullable`1<DateTime> addedDate);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_RemovedDate();
    [CompilerGeneratedAttribute]
private void set_RemovedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_AddedDate();
    [CompilerGeneratedAttribute]
private void set_AddedDate(Nullable`1<DateTime> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_Button", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_Calendar", "Avalonia.Controls.Calendar")]
[TemplatePartAttribute("PART_Popup", "Avalonia.Controls.Primitives.Popup")]
[TemplatePartAttribute("PART_TextBox", "Avalonia.Controls.TextBox")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.CalendarDatePicker : TemplatedControl {
    private static string pcPressed;
    private static string pcFlyoutOpen;
    private static string ElementTextBox;
    private static string ElementButton;
    private static string ElementPopup;
    private static string ElementCalendar;
    [NullableAttribute("2")]
private Calendar _calendar;
    private string _defaultText;
    [NullableAttribute("2")]
private Button _dropDownButton;
    [NullableAttribute("2")]
private Popup _popUp;
    [NullableAttribute("2")]
private TextBox _textBox;
    [NullableAttribute("2")]
private IDisposable _textBoxTextChangedSubscription;
    [NullableAttribute("2")]
private IDisposable _buttonPointerPressedSubscription;
    private Nullable`1<DateTime> _onOpenSelectedDate;
    private bool _settingSelectedDate;
    private bool _suspendTextChangeHandler;
    private bool _isPopupClosing;
    private bool _ignoreButtonClick;
    private bool _isFlyoutOpen;
    private bool _isPressed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler CalendarClosed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler CalendarOpened;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<CalendarDatePickerDateValidationErrorEventArgs> DateValidationError;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SelectionChangedEventArgs> SelectedDateChanged;
    public static StyledProperty`1<DateTime> DisplayDateProperty;
    public static StyledProperty`1<Nullable`1<DateTime>> DisplayDateStartProperty;
    public static StyledProperty`1<Nullable`1<DateTime>> DisplayDateEndProperty;
    public static StyledProperty`1<DayOfWeek> FirstDayOfWeekProperty;
    public static StyledProperty`1<bool> IsDropDownOpenProperty;
    public static StyledProperty`1<bool> IsTodayHighlightedProperty;
    public static StyledProperty`1<Nullable`1<DateTime>> SelectedDateProperty;
    public static StyledProperty`1<CalendarDatePickerFormat> SelectedDateFormatProperty;
    public static StyledProperty`1<string> CustomDateFormatStringProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> TextProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> WatermarkProperty;
    public static StyledProperty`1<bool> UseFloatingWatermarkProperty;
    public static StyledProperty`1<HorizontalAlignment> HorizontalContentAlignmentProperty;
    public static StyledProperty`1<VerticalAlignment> VerticalContentAlignmentProperty;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CalendarBlackoutDatesCollection <BlackoutDates>k__BackingField;
    [NullableAttribute("2")]
public CalendarBlackoutDatesCollection BlackoutDates { get; private set; }
    public DateTime DisplayDate { get; public set; }
    public Nullable`1<DateTime> DisplayDateStart { get; public set; }
    public Nullable`1<DateTime> DisplayDateEnd { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    public bool IsTodayHighlighted { get; public set; }
    public Nullable`1<DateTime> SelectedDate { get; public set; }
    public CalendarDatePickerFormat SelectedDateFormat { get; public set; }
    public string CustomDateFormatString { get; public set; }
    [NullableAttribute("2")]
public string Text { get; public set; }
    [NullableAttribute("2")]
public string Watermark { get; public set; }
    public bool UseFloatingWatermark { get; public set; }
    public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    public VerticalAlignment VerticalContentAlignment { get; public set; }
    private static CalendarDatePicker();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_CalendarClosed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_CalendarClosed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_CalendarOpened(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_CalendarOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DateValidationError(EventHandler`1<CalendarDatePickerDateValidationErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DateValidationError(EventHandler`1<CalendarDatePickerDateValidationErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SelectedDateChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedDateChanged(EventHandler`1<SelectionChangedEventArgs> value);
    protected void UpdatePseudoClasses();
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    protected virtual void OnPointerCaptureLost(PointerCaptureLostEventArgs e);
    protected virtual void OnPointerWheelChanged(PointerWheelEventArgs e);
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    private void OnDateFormatChanged();
    protected virtual void OnDateValidationError(CalendarDatePickerDateValidationErrorEventArgs e);
    private void OnDateSelected(Nullable`1<DateTime> addedDate, Nullable`1<DateTime> removedDate);
    private void OnCalendarClosed(EventArgs e);
    private void OnCalendarOpened(EventArgs e);
    private void Calendar_DayButtonMouseUp(object sender, PointerReleasedEventArgs e);
    private void Calendar_DisplayDateChanged(object sender, CalendarDateChangedEventArgs e);
    private void Calendar_SelectedDatesChanged(object sender, SelectionChangedEventArgs e);
    private void Calendar_PointerReleased(object sender, PointerReleasedEventArgs e);
    private void Calendar_KeyDown(object sender, KeyEventArgs e);
    private void TextBox_GotFocus(object sender, RoutedEventArgs e);
    private void TextBox_KeyDown(object sender, KeyEventArgs e);
    private void TextBox_TextChanged();
    private void DropDownButton_PointerPressed(object sender, PointerPressedEventArgs e);
    private void DropDownButton_PointerReleased(object sender, PointerReleasedEventArgs e);
    private void DropDownButton_Click(object sender, RoutedEventArgs e);
    private void PopUp_Closed(object sender, EventArgs e);
    private void TogglePopUp();
    private void OpenDropDown();
    private Nullable`1<DateTime> ParseText(string text);
    [NullableContextAttribute("2")]
private string DateTimeToString(DateTime d);
    private bool ProcessDatePickerKey(KeyEventArgs e);
    private void SetSelectedDate();
    private Nullable`1<DateTime> SetTextBoxValue(string s);
    private void SetWaterMarkText();
    private static bool IsValidSelectedDateFormat(CalendarDatePickerFormat value);
    private static bool IsValidDateFormatString(string formatString);
    public void Clear();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CalendarBlackoutDatesCollection get_BlackoutDates();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_BlackoutDates(CalendarBlackoutDatesCollection value);
    public DateTime get_DisplayDate();
    public void set_DisplayDate(DateTime value);
    public Nullable`1<DateTime> get_DisplayDateStart();
    public void set_DisplayDateStart(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_DisplayDateEnd();
    public void set_DisplayDateEnd(Nullable`1<DateTime> value);
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public bool get_IsTodayHighlighted();
    public void set_IsTodayHighlighted(bool value);
    public Nullable`1<DateTime> get_SelectedDate();
    public void set_SelectedDate(Nullable`1<DateTime> value);
    public CalendarDatePickerFormat get_SelectedDateFormat();
    public void set_SelectedDateFormat(CalendarDatePickerFormat value);
    public string get_CustomDateFormatString();
    public void set_CustomDateFormatString(string value);
    [NullableContextAttribute("2")]
public string get_Text();
    [NullableContextAttribute("2")]
public void set_Text(string value);
    [NullableContextAttribute("2")]
public string get_Watermark();
    [NullableContextAttribute("2")]
public void set_Watermark(string value);
    public bool get_UseFloatingWatermark();
    public void set_UseFloatingWatermark(bool value);
    public HorizontalAlignment get_HorizontalContentAlignment();
    public void set_HorizontalContentAlignment(HorizontalAlignment value);
    public VerticalAlignment get_VerticalContentAlignment();
    public void set_VerticalContentAlignment(VerticalAlignment value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__35_0(string _);
    [CompilerGeneratedAttribute]
private bool <PopUp_Closed>b__61_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs : EventArgs {
    private bool _throwException;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public Exception Exception { get; private set; }
    public string Text { get; private set; }
    public bool ThrowException { get; public set; }
    public CalendarDatePickerDateValidationErrorEventArgs(Exception exception, string text);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    public bool get_ThrowException();
    public void set_ThrowException(bool value);
}
public enum Avalonia.Controls.CalendarDatePickerFormat : Enum {
    public int value__;
    public static CalendarDatePickerFormat Long;
    public static CalendarDatePickerFormat Short;
    public static CalendarDatePickerFormat Custom;
}
public class Avalonia.Controls.CalendarDateRange : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    public DateTime Start { get; private set; }
    public DateTime End { get; private set; }
    public CalendarDateRange(DateTime day);
    public CalendarDateRange(DateTime start, DateTime end);
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
private void set_End(DateTime value);
    [NullableContextAttribute("1")]
internal bool ContainsAny(CalendarDateRange range);
}
public enum Avalonia.Controls.CalendarMode : Enum {
    public int value__;
    public static CalendarMode Month;
    public static CalendarMode Year;
    public static CalendarMode Decade;
}
public class Avalonia.Controls.CalendarModeChangedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private CalendarMode <OldMode>k__BackingField;
    [CompilerGeneratedAttribute]
private CalendarMode <NewMode>k__BackingField;
    public CalendarMode OldMode { get; private set; }
    public CalendarMode NewMode { get; private set; }
    public CalendarModeChangedEventArgs(CalendarMode oldMode, CalendarMode newMode);
    [CompilerGeneratedAttribute]
public CalendarMode get_OldMode();
    [CompilerGeneratedAttribute]
private void set_OldMode(CalendarMode value);
    [CompilerGeneratedAttribute]
public CalendarMode get_NewMode();
    [CompilerGeneratedAttribute]
private void set_NewMode(CalendarMode value);
}
public enum Avalonia.Controls.CalendarSelectionMode : Enum {
    public int value__;
    public static CalendarSelectionMode SingleDate;
    public static CalendarSelectionMode SingleRange;
    public static CalendarSelectionMode MultipleRange;
    public static CalendarSelectionMode None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Canvas : Panel {
    public static AttachedProperty`1<double> LeftProperty;
    public static AttachedProperty`1<double> TopProperty;
    public static AttachedProperty`1<double> RightProperty;
    public static AttachedProperty`1<double> BottomProperty;
    private static Canvas();
    public static double GetLeft(AvaloniaObject element);
    public static void SetLeft(AvaloniaObject element, double value);
    public static double GetTop(AvaloniaObject element);
    public static void SetTop(AvaloniaObject element, double value);
    public static double GetRight(AvaloniaObject element);
    public static void SetRight(AvaloniaObject element, double value);
    public static double GetBottom(AvaloniaObject element);
    public static void SetBottom(AvaloniaObject element, double value);
    [NullableContextAttribute("2")]
private sealed virtual override IInputElement Avalonia.Input.INavigableContainer.GetControl(NavigationDirection direction, IInputElement from, bool wrap);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void ArrangeChild(Control child, Size finalSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Carousel : SelectingItemsControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IPageTransition> PageTransitionProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FuncTemplate`1<Panel> DefaultPanel;
    private IScrollable _scroller;
    public IPageTransition PageTransition { get; public set; }
    private static Carousel();
    public IPageTransition get_PageTransition();
    public void set_PageTransition(IPageTransition value);
    public void Next();
    public void Previous();
    protected virtual Size ArrangeOverride(Size finalSize);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
}
public class Avalonia.Controls.CheckBox : ToggleButton {
    private static CheckBox();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_CloseButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_RestoreButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_MinimizeButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_FullScreenButton", "Avalonia.Controls.Button")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Chrome.CaptionButtons : TemplatedControl {
    private static string PART_CloseButton;
    private static string PART_RestoreButton;
    private static string PART_MinimizeButton;
    private static string PART_FullScreenButton;
    [NullableAttribute("2")]
private Button _restoreButton;
    [NullableAttribute("2")]
private IDisposable _disposables;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Window <HostWindow>k__BackingField;
    [NullableAttribute("2")]
protected Window HostWindow { get; private set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected Window get_HostWindow();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_HostWindow(Window value);
    public virtual void Attach(Window hostWindow);
    public virtual void Detach();
    protected virtual void OnClose();
    protected virtual void OnRestore();
    protected virtual void OnMinimize();
    protected virtual void OnToggleFullScreen();
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Attach>b__10_0(bool x);
    [CompilerGeneratedAttribute]
private void <Attach>b__10_1(WindowState x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__16_0(object sender, RoutedEventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__16_1(object sender, RoutedEventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__16_2(object sender, RoutedEventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__16_3(object sender, RoutedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_CaptionButtons", "Avalonia.Controls.Chrome.CaptionButtons")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Chrome.TitleBar : TemplatedControl {
    [NullableAttribute("2")]
private CompositeDisposable _disposables;
    [NullableAttribute("2")]
private CaptionButtons _captionButtons;
    private void UpdateSize(Window window);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public enum Avalonia.Controls.ClickMode : Enum {
    public int value__;
    public static ClickMode Release;
    public static ClickMode Press;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ColumnDefinition : DefinitionBase {
    public static StyledProperty`1<double> MaxWidthProperty;
    public static StyledProperty`1<double> MinWidthProperty;
    public static StyledProperty`1<GridLength> WidthProperty;
    public double ActualWidth { get; }
    public double MaxWidth { get; public set; }
    public double MinWidth { get; public set; }
    public GridLength Width { get; public set; }
    internal GridLength UserSizeValueCache { get; }
    internal double UserMinSizeValueCache { get; }
    internal double UserMaxSizeValueCache { get; }
    private static ColumnDefinition();
    public ColumnDefinition(double value, GridUnitType type);
    public ColumnDefinition(GridLength width);
    public double get_ActualWidth();
    public double get_MaxWidth();
    public void set_MaxWidth(double value);
    public double get_MinWidth();
    public void set_MinWidth(double value);
    public GridLength get_Width();
    public void set_Width(GridLength value);
    internal virtual GridLength get_UserSizeValueCache();
    internal virtual double get_UserMinSizeValueCache();
    internal virtual double get_UserMaxSizeValueCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.ColumnDefinitions : DefinitionList`1<ColumnDefinition> {
    public ColumnDefinitions(string s);
    public virtual string ToString();
    public static ColumnDefinitions Parse(string s);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_Popup", "Avalonia.Controls.Primitives.Popup")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.ComboBox : SelectingItemsControl {
    [NullableAttribute("1")]
internal static string pcDropdownOpen;
    [NullableAttribute("1")]
internal static string pcPressed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FuncTemplate`1<Panel> DefaultPanel;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> IsDropDownOpenProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<double> MaxDropDownHeightProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<ComboBox, object> SelectionBoxItemProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> PlaceholderTextProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> PlaceholderForegroundProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<HorizontalAlignment> HorizontalContentAlignmentProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<VerticalAlignment> VerticalContentAlignmentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> SelectionBoxItemTemplateProperty;
    private Popup _popup;
    private object _selectionBoxItem;
    [NullableAttribute("1")]
private CompositeDisposable _subscriptionsOnOpen;
    [CompilerGeneratedAttribute]
private EventHandler DropDownClosed;
    [CompilerGeneratedAttribute]
private EventHandler DropDownOpened;
    public bool IsDropDownOpen { get; public set; }
    public double MaxDropDownHeight { get; public set; }
    public object SelectionBoxItem { get; protected set; }
    public string PlaceholderText { get; public set; }
    public IBrush PlaceholderForeground { get; public set; }
    public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    public VerticalAlignment VerticalContentAlignment { get; public set; }
    [InheritDataTypeFromItemsAttribute("ItemsSource")]
public IDataTemplate SelectionBoxItemTemplate { get; public set; }
    private static ComboBox();
    private static IDataTemplate CoerceSelectionBoxItemTemplate(AvaloniaObject obj, IDataTemplate template);
    [CompilerGeneratedAttribute]
public void add_DropDownClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDownClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DropDownOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDownOpened(EventHandler value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public double get_MaxDropDownHeight();
    public void set_MaxDropDownHeight(double value);
    public object get_SelectionBoxItem();
    protected void set_SelectionBoxItem(object value);
    public string get_PlaceholderText();
    public void set_PlaceholderText(string value);
    public IBrush get_PlaceholderForeground();
    public void set_PlaceholderForeground(IBrush value);
    public HorizontalAlignment get_HorizontalContentAlignment();
    public void set_HorizontalContentAlignment(HorizontalAlignment value);
    public VerticalAlignment get_VerticalContentAlignment();
    public void set_VerticalContentAlignment(VerticalAlignment value);
    public IDataTemplate get_SelectionBoxItemTemplate();
    public void set_SelectionBoxItemTemplate(IDataTemplate value);
    [NullableContextAttribute("1")]
protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected internal virtual void InvalidateMirrorTransform();
    protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    protected internal virtual bool NeedsContainerOverride(object item, int index, Object& recycleKey);
    [NullableContextAttribute("1")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPointerWheelChanged(PointerWheelEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    [NullableContextAttribute("1")]
protected virtual AutomationPeer OnCreateAutomationPeer();
    [NullableContextAttribute("1")]
internal void ItemFocused(ComboBoxItem dropDownItem);
    [NullableContextAttribute("1")]
private void PopupClosed(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void PopupOpened(object sender, EventArgs e);
    private void IsVisibleChanged(bool isVisible);
    private void TryFocusSelectedItem();
    [NullableContextAttribute("1")]
private bool CanFocus(Control control);
    private void UpdateSelectionBoxItem(object item);
    private void UpdateFlowDirection();
    private void SelectFocusedItem();
    private bool SelectNext();
    private bool SelectPrevious();
    private bool MoveSelection(int startIndex, int step, bool wrap);
    public void Clear();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <OnKeyDown>b__50_0(Control c);
    [CompilerGeneratedAttribute]
internal static bool <MoveSelection>g__IsSelectable|68_0(object o);
}
public class Avalonia.Controls.ComboBoxItem : ListBoxItem {
    private static ComboBoxItem();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(bool focused);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.CompositionBorderVisual : CompositionDrawListVisual {
    private CornerRadius _cornerRadius;
    private bool _cornerRadiusChanged;
    public CornerRadius CornerRadius { get; public set; }
    public CompositionBorderVisual(Compositor compositor, Visual visual);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    private protected virtual void SerializeChangesCore(BatchStreamWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ContainerClearingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Control <Container>k__BackingField;
    public Control Container { get; }
    public ContainerClearingEventArgs(Control container);
    [CompilerGeneratedAttribute]
public Control get_Container();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ContainerIndexChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Control <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldIndex>k__BackingField;
    public Control Container { get; }
    public int NewIndex { get; }
    public int OldIndex { get; }
    public ContainerIndexChangedEventArgs(Control container, int oldIndex, int newIndex);
    [CompilerGeneratedAttribute]
public Control get_Container();
    [CompilerGeneratedAttribute]
public int get_NewIndex();
    [CompilerGeneratedAttribute]
public int get_OldIndex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ContainerPreparedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Control <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public Control Container { get; }
    public int Index { get; }
    public ContainerPreparedEventArgs(Control container, int index);
    [CompilerGeneratedAttribute]
public Control get_Container();
    [CompilerGeneratedAttribute]
public int get_Index();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_ContentPresenter", "Avalonia.Controls.Presenters.ContentPresenter")]
public class Avalonia.Controls.ContentControl : TemplatedControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> ContentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> ContentTemplateProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<HorizontalAlignment> HorizontalContentAlignmentProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<VerticalAlignment> VerticalContentAlignmentProperty;
    [CompilerGeneratedAttribute]
private ContentPresenter <Presenter>k__BackingField;
    [ContentAttribute]
[DependsOnAttribute("ContentTemplate")]
public object Content { get; public set; }
    public IDataTemplate ContentTemplate { get; public set; }
    public ContentPresenter Presenter { get; private set; }
    public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    public VerticalAlignment VerticalContentAlignment { get; public set; }
    [NullableAttribute("1")]
private IAvaloniaList`1<ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.LogicalChildren { get; }
    private static ContentControl();
    public sealed virtual object get_Content();
    public sealed virtual void set_Content(object value);
    public sealed virtual IDataTemplate get_ContentTemplate();
    public sealed virtual void set_ContentTemplate(IDataTemplate value);
    [CompilerGeneratedAttribute]
public sealed virtual ContentPresenter get_Presenter();
    [CompilerGeneratedAttribute]
private void set_Presenter(ContentPresenter value);
    public sealed virtual HorizontalAlignment get_HorizontalContentAlignment();
    public sealed virtual void set_HorizontalContentAlignment(HorizontalAlignment value);
    public sealed virtual VerticalAlignment get_VerticalContentAlignment();
    public sealed virtual void set_VerticalContentAlignment(VerticalAlignment value);
    [NullableContextAttribute("1")]
private sealed virtual override IAvaloniaList`1<ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.get_LogicalChildren();
    [NullableContextAttribute("1")]
private sealed virtual override bool Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(ContentPresenter presenter);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    [NullableContextAttribute("1")]
protected virtual bool RegisterContentPresenter(ContentPresenter presenter);
    [NullableContextAttribute("1")]
private void ContentChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
internal virtual void BuildDebugDisplay(StringBuilder builder, bool includeContent);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.ContextMenu : MenuBase {
    [NullableAttribute("1")]
public static StyledProperty`1<double> HorizontalOffsetProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<double> VerticalOffsetProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<PopupAnchor> PlacementAnchorProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<PopupPositionerConstraintAdjustment> PlacementConstraintAdjustmentProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<PopupGravity> PlacementGravityProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<PlacementMode> PlacementProperty;
    [NullableAttribute("1")]
[ObsoleteAttribute("Use the Placement property instead.")]
[EditorBrowsableAttribute("1")]
public static StyledProperty`1<PlacementMode> PlacementModeProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<Nullable`1<Rect>> PlacementRectProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> WindowManagerAddShadowHintProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Control> PlacementTargetProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<CustomPopupPlacementCallback> CustomPopupPlacementCallbackProperty;
    private Popup _popup;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Control> _attachedControls;
    private IInputElement _previousFocus;
    private Action`1<IPopupHost> _popupHostChangedHandler;
    [CompilerGeneratedAttribute]
private CancelEventHandler Opening;
    [CompilerGeneratedAttribute]
private CancelEventHandler Closing;
    public double HorizontalOffset { get; public set; }
    public double VerticalOffset { get; public set; }
    public PopupAnchor PlacementAnchor { get; public set; }
    public PopupPositionerConstraintAdjustment PlacementConstraintAdjustment { get; public set; }
    public PopupGravity PlacementGravity { get; public set; }
    [ObsoleteAttribute("Use the Placement property instead.")]
[EditorBrowsableAttribute("1")]
public PlacementMode PlacementMode { get; public set; }
    public PlacementMode Placement { get; public set; }
    public bool WindowManagerAddShadowHint { get; public set; }
    public Nullable`1<Rect> PlacementRect { get; public set; }
    public Control PlacementTarget { get; public set; }
    public CustomPopupPlacementCallback CustomPopupPlacementCallback { get; public set; }
    private IPopupHost Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHost { get; }
    [NullableContextAttribute("1")]
public ContextMenu(IMenuInteractionHandler interactionHandler);
    private static ContextMenu();
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    public double get_VerticalOffset();
    public void set_VerticalOffset(double value);
    public PopupAnchor get_PlacementAnchor();
    public void set_PlacementAnchor(PopupAnchor value);
    public PopupPositionerConstraintAdjustment get_PlacementConstraintAdjustment();
    public void set_PlacementConstraintAdjustment(PopupPositionerConstraintAdjustment value);
    public PopupGravity get_PlacementGravity();
    public void set_PlacementGravity(PopupGravity value);
    public PlacementMode get_PlacementMode();
    public void set_PlacementMode(PlacementMode value);
    public PlacementMode get_Placement();
    public void set_Placement(PlacementMode value);
    public bool get_WindowManagerAddShadowHint();
    public void set_WindowManagerAddShadowHint(bool value);
    public Nullable`1<Rect> get_PlacementRect();
    public void set_PlacementRect(Nullable`1<Rect> value);
    public Control get_PlacementTarget();
    public void set_PlacementTarget(Control value);
    public CustomPopupPlacementCallback get_CustomPopupPlacementCallback();
    public void set_CustomPopupPlacementCallback(CustomPopupPlacementCallback value);
    [CompilerGeneratedAttribute]
public void add_Opening(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Opening(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Closing(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closing(CancelEventHandler value);
    [NullableContextAttribute("1")]
private static void ContextMenuChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    public virtual void Open();
    public void Open(Control control);
    public virtual void Close();
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Styling.ISetterValue.Initialize(SetterBase setter);
    private sealed virtual override IPopupHost Avalonia.Controls.Diagnostics.IPopupHostProvider.get_PopupHost();
    private sealed virtual override void Avalonia.Controls.Diagnostics.IPopupHostProvider.add_PopupHostChanged(Action`1<IPopupHost> value);
    private sealed virtual override void Avalonia.Controls.Diagnostics.IPopupHostProvider.remove_PopupHostChanged(Action`1<IPopupHost> value);
    [NullableContextAttribute("1")]
private void Open(Control control, Control placementTarget, PlacementMode placement);
    [NullableContextAttribute("1")]
private void PopupOpened(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void PopupClosing(object sender, CancelEventArgs e);
    [NullableContextAttribute("1")]
private void PopupClosed(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void PopupKeyUp(object sender, KeyEventArgs e);
    [NullableContextAttribute("1")]
private static void ControlContextRequested(object sender, ContextRequestedEventArgs e);
    [NullableContextAttribute("1")]
private static void ControlOnAttachedToVisualTree(object sender, VisualTreeAttachmentEventArgs e);
    private static void AttachControlToContextMenu(object sender);
    [NullableContextAttribute("1")]
private static void ControlDetachedFromVisualTree(object sender, VisualTreeAttachmentEventArgs e);
    private bool CancelClosing();
    private bool CancelOpening();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ContextRequestedEventArgs : RoutedEventArgs {
    [NullableAttribute("2")]
private PointerEventArgs _pointerEventArgs;
    public ContextRequestedEventArgs(PointerEventArgs pointerEventArgs);
    public ContextRequestedEventArgs(ContextRequestedEventArgs contextRequestedEventArgs);
    [NullableContextAttribute("2")]
public bool TryGetPosition(Control relativeTo, Point& point);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Control : InputElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ITemplate`1<Control>> FocusAdornerProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> TagProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ContextMenu> ContextMenuProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<FlyoutBase> ContextFlyoutProperty;
    public static RoutedEvent`1<RequestBringIntoViewEventArgs> RequestBringIntoViewEvent;
    public static RoutedEvent`1<ContextRequestedEventArgs> ContextRequestedEvent;
    public static RoutedEvent`1<RoutedEventArgs> LoadedEvent;
    public static RoutedEvent`1<RoutedEventArgs> UnloadedEvent;
    public static RoutedEvent`1<SizeChangedEventArgs> SizeChangedEvent;
    private static bool _isLoadedProcessing;
    private static HashSet`1<Control> _loadedQueue;
    private static HashSet`1<Control> _loadedProcessingQueue;
    private bool _isLoaded;
    [NullableAttribute("2")]
private DataTemplates _dataTemplates;
    [NullableAttribute("2")]
private Control _focusAdorner;
    [NullableAttribute("2")]
private AutomationPeer _automationPeer;
    private static Action loadedProcessingAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITemplate`1<Control> FocusAdorner { get; public set; }
    public DataTemplates DataTemplates { get; }
    [NullableAttribute("2")]
public ContextMenu ContextMenu { get; public set; }
    [NullableAttribute("2")]
public FlyoutBase ContextFlyout { get; public set; }
    public bool IsLoaded { get; }
    [NullableAttribute("2")]
public object Tag { get; public set; }
    private bool Avalonia.Controls.Templates.IDataTemplateHost.IsDataTemplatesInitialized { get; }
    private static Control();
    public ITemplate`1<Control> get_FocusAdorner();
    public void set_FocusAdorner(ITemplate`1<Control> value);
    public sealed virtual DataTemplates get_DataTemplates();
    [NullableContextAttribute("2")]
public ContextMenu get_ContextMenu();
    [NullableContextAttribute("2")]
public void set_ContextMenu(ContextMenu value);
    [NullableContextAttribute("2")]
public FlyoutBase get_ContextFlyout();
    [NullableContextAttribute("2")]
public void set_ContextFlyout(FlyoutBase value);
    public bool get_IsLoaded();
    [NullableContextAttribute("2")]
public object get_Tag();
    [NullableContextAttribute("2")]
public void set_Tag(object value);
    public void add_ContextRequested(EventHandler`1<ContextRequestedEventArgs> value);
    public void remove_ContextRequested(EventHandler`1<ContextRequestedEventArgs> value);
    public void add_Loaded(EventHandler`1<RoutedEventArgs> value);
    public void remove_Loaded(EventHandler`1<RoutedEventArgs> value);
    public void add_Unloaded(EventHandler`1<RoutedEventArgs> value);
    public void remove_Unloaded(EventHandler`1<RoutedEventArgs> value);
    public void add_SizeChanged(EventHandler`1<SizeChangedEventArgs> value);
    public void remove_SizeChanged(EventHandler`1<SizeChangedEventArgs> value);
    private sealed virtual override bool Avalonia.Controls.Templates.IDataTemplateHost.get_IsDataTemplatesInitialized();
    private sealed virtual override void Avalonia.Styling.ISetterValue.Initialize(SetterBase setter);
    private sealed virtual override void Avalonia.Rendering.IVisualBrushInitialize.EnsureInitialized();
    [NullableContextAttribute("2")]
protected virtual Control GetTemplateFocusTarget();
    internal void ScheduleOnLoadedCore();
    internal void OnLoadedCore();
    internal void OnUnloadedCore();
    protected virtual void OnLoaded(RoutedEventArgs e);
    protected virtual void OnUnloaded(RoutedEventArgs e);
    protected virtual void OnSizeChanged(SizeChangedEventArgs e);
    protected sealed virtual void OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs e);
    private void OnHoldEvent(object sender, HoldingRoutedEventArgs e);
    protected sealed virtual void OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs e);
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [NullableContextAttribute("2")]
internal AutomationPeer GetAutomationPeer();
    internal AutomationPeer GetOrCreateAutomationPeer();
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    internal static void ResetLoadedQueueForUnitTests();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Avalonia.Controls.ControlExtensions : object {
    [ExtensionAttribute]
public static void BringIntoView(Control control);
    [ExtensionAttribute]
public static void BringIntoView(Control control, Rect rect);
    [ExtensionAttribute]
public static T FindControl(Control control, string name);
    [ExtensionAttribute]
public static T GetControl(Control control, string name);
    [ExtensionAttribute]
public static IDisposable Set(IPseudoClasses classes, string name, IObservable`1<bool> trigger);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Controls : AvaloniaList`1<Control> {
    public Controls(IEnumerable`1<Control> items);
    private void Configure();
    private sealed virtual override void Avalonia.Collections.IAvaloniaListItemValidator<Avalonia.Controls.Control>.Validate(Control item);
}
public class Avalonia.Controls.Converters.CornerRadiusFilterConverter : object {
    [CompilerGeneratedAttribute]
private Corners <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Scale>k__BackingField;
    public Corners Filter { get; public set; }
    public double Scale { get; public set; }
    [CompilerGeneratedAttribute]
public Corners get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Corners value);
    [CompilerGeneratedAttribute]
public double get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(double value);
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Avalonia.Controls.Converters.CornerRadiusToDoubleConverter : object {
    [CompilerGeneratedAttribute]
private Corners <Corner>k__BackingField;
    public Corners Corner { get; public set; }
    [CompilerGeneratedAttribute]
public Corners get_Corner();
    [CompilerGeneratedAttribute]
public void set_Corner(Corners value);
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[FlagsAttribute]
public enum Avalonia.Controls.Converters.Corners : Enum {
    public int value__;
    public static Corners None;
    public static Corners TopLeft;
    public static Corners TopRight;
    public static Corners BottomLeft;
    public static Corners BottomRight;
}
public class Avalonia.Controls.Converters.EnumToBoolConverter : object {
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Avalonia.Controls.Converters.MarginMultiplierConverter : object {
    [CompilerGeneratedAttribute]
private double <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bottom>k__BackingField;
    public double Indent { get; public set; }
    public bool Left { get; public set; }
    public bool Top { get; public set; }
    public bool Right { get; public set; }
    public bool Bottom { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(double value);
    [CompilerGeneratedAttribute]
public bool get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(bool value);
    [CompilerGeneratedAttribute]
public bool get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(bool value);
    [CompilerGeneratedAttribute]
public bool get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(bool value);
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Avalonia.Controls.Converters.MenuScrollingVisibilityConverter : object {
    [NullableAttribute("1")]
public static MenuScrollingVisibilityConverter Instance;
    private static MenuScrollingVisibilityConverter();
    [NullableContextAttribute("1")]
public sealed virtual object Convert(IList`1<object> values, Type targetType, object parameter, CultureInfo culture);
}
public class Avalonia.Controls.Converters.PlatformKeyGestureConverter : object {
    [NullableContextAttribute("2")]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string ToPlatformString(KeyGesture gesture);
}
public class Avalonia.Controls.Converters.StringFormatConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual object Convert(IList`1<object> values, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.DataValidationErrors : ContentControl {
    private static bool s_overridingErrors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<IEnumerable`1<object>> ErrorsProperty;
    public static AttachedProperty`1<bool> HasErrorsProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<Func`2<object, object>> ErrorConverterProperty;
    public static StyledProperty`1<IDataTemplate> ErrorTemplateProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AttachedProperty`1<IEnumerable`1<object>> OriginalErrorsProperty;
    [NullableAttribute("2")]
private Control _owner;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<DataValidationErrors, Control> OwnerProperty;
    [NullableAttribute("2")]
public Control Owner { get; public set; }
    public IDataTemplate ErrorTemplate { get; public set; }
    private static DataValidationErrors();
    [NullableContextAttribute("2")]
public Control get_Owner();
    [NullableContextAttribute("2")]
public void set_Owner(Control value);
    private static void OnErrorConverterChanged(AvaloniaPropertyChangedEventArgs e);
    private void OnTemplatedParentChange(AvaloniaPropertyChangedEventArgs e);
    public IDataTemplate get_ErrorTemplate();
    public void set_ErrorTemplate(IDataTemplate value);
    private static void ErrorsChanged(AvaloniaPropertyChangedEventArgs e);
    private static void HasErrorsChanged(AvaloniaPropertyChangedEventArgs e);
    public static IEnumerable`1<object> GetErrors(Control control);
    public static void SetErrors(Control control, IEnumerable`1<object> errors);
    public static void SetError(Control control, Exception error);
    private static void OnErrorsOrConverterChanged(Control control);
    public static void ClearErrors(Control control);
    public static bool GetHasErrors(Control control);
    public static Func`2<object, object> GetErrorConverter(Control control);
    public static void SetErrorConverter(Control control, Func`2<object, object> converter);
    [NullableContextAttribute("2")]
private static IEnumerable`1<Exception> UnpackException(Exception exception);
    private static object UnpackDataValidationException(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_ButtonContentGrid", "Avalonia.Controls.Grid")]
[TemplatePartAttribute("PART_DayTextBlock", "Avalonia.Controls.TextBlock")]
[TemplatePartAttribute("PART_FirstSpacer", "Avalonia.Controls.Shapes.Rectangle")]
[TemplatePartAttribute("PART_FlyoutButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_MonthTextBlock", "Avalonia.Controls.TextBlock")]
[TemplatePartAttribute("PART_PickerPresenter", "Avalonia.Controls.DatePickerPresenter")]
[TemplatePartAttribute("PART_Popup", "Avalonia.Controls.Primitives.Popup")]
[TemplatePartAttribute("PART_SecondSpacer", "Avalonia.Controls.Shapes.Rectangle")]
[TemplatePartAttribute("PART_YearTextBlock", "Avalonia.Controls.TextBlock")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.DatePicker : TemplatedControl {
    public static StyledProperty`1<string> DayFormatProperty;
    public static StyledProperty`1<bool> DayVisibleProperty;
    public static StyledProperty`1<DateTimeOffset> MaxYearProperty;
    public static StyledProperty`1<DateTimeOffset> MinYearProperty;
    public static StyledProperty`1<string> MonthFormatProperty;
    public static StyledProperty`1<bool> MonthVisibleProperty;
    public static StyledProperty`1<string> YearFormatProperty;
    public static StyledProperty`1<bool> YearVisibleProperty;
    public static StyledProperty`1<Nullable`1<DateTimeOffset>> SelectedDateProperty;
    [NullableAttribute("2")]
private Button _flyoutButton;
    [NullableAttribute("2")]
private TextBlock _dayText;
    [NullableAttribute("2")]
private TextBlock _monthText;
    [NullableAttribute("2")]
private TextBlock _yearText;
    [NullableAttribute("2")]
private Grid _container;
    [NullableAttribute("2")]
private Rectangle _spacer1;
    [NullableAttribute("2")]
private Rectangle _spacer2;
    [NullableAttribute("2")]
private Popup _popup;
    [NullableAttribute("2")]
private DatePickerPresenter _presenter;
    private bool _areControlsAvailable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<DatePickerSelectedValueChangedEventArgs> SelectedDateChanged;
    public string DayFormat { get; public set; }
    public bool DayVisible { get; public set; }
    public DateTimeOffset MaxYear { get; public set; }
    public DateTimeOffset MinYear { get; public set; }
    public string MonthFormat { get; public set; }
    public bool MonthVisible { get; public set; }
    public string YearFormat { get; public set; }
    public bool YearVisible { get; public set; }
    public Nullable`1<DateTimeOffset> SelectedDate { get; public set; }
    private static DatePicker();
    private static void OnGridVisibilityChanged(DatePicker sender, AvaloniaPropertyChangedEventArgs e);
    public string get_DayFormat();
    public void set_DayFormat(string value);
    public bool get_DayVisible();
    public void set_DayVisible(bool value);
    public DateTimeOffset get_MaxYear();
    public void set_MaxYear(DateTimeOffset value);
    private static DateTimeOffset CoerceMaxYear(AvaloniaObject sender, DateTimeOffset value);
    private void OnMaxYearChanged(Nullable`1<DateTimeOffset> value);
    public DateTimeOffset get_MinYear();
    public void set_MinYear(DateTimeOffset value);
    private static DateTimeOffset CoerceMinYear(AvaloniaObject sender, DateTimeOffset value);
    private void OnMinYearChanged(Nullable`1<DateTimeOffset> value);
    public string get_MonthFormat();
    public void set_MonthFormat(string value);
    public bool get_MonthVisible();
    public void set_MonthVisible(bool value);
    public string get_YearFormat();
    public void set_YearFormat(string value);
    public bool get_YearVisible();
    public void set_YearVisible(bool value);
    public Nullable`1<DateTimeOffset> get_SelectedDate();
    public void set_SelectedDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public void add_SelectedDateChanged(EventHandler`1<DatePickerSelectedValueChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedDateChanged(EventHandler`1<DatePickerSelectedValueChangedEventArgs> value);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void OnDismissPicker(object sender, EventArgs e);
    private void OnConfirmed(object sender, EventArgs e);
    private void SetGrid();
    private void SetSelectedDateText();
    private void OnFlyoutButtonClicked(object sender, RoutedEventArgs e);
    protected virtual void OnSelectedDateChanged(object sender, DatePickerSelectedValueChangedEventArgs e);
    public void Clear();
    protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_AcceptButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_DayDownButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_DayHost", "Avalonia.Controls.Panel")]
[TemplatePartAttribute("PART_DaySelector", "Avalonia.Controls.Primitives.DateTimePickerPanel")]
[TemplatePartAttribute("PART_DayUpButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_DismissButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_FirstSpacer", "Avalonia.Controls.Shapes.Rectangle")]
[TemplatePartAttribute("PART_MonthDownButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_MonthHost", "Avalonia.Controls.Panel")]
[TemplatePartAttribute("PART_MonthSelector", "Avalonia.Controls.Primitives.DateTimePickerPanel")]
[TemplatePartAttribute("PART_MonthUpButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_PickerContainer", "Avalonia.Controls.Grid")]
[TemplatePartAttribute("PART_SecondSpacer", "Avalonia.Controls.Shapes.Rectangle")]
[TemplatePartAttribute("PART_YearDownButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_YearHost", "Avalonia.Controls.Panel")]
[TemplatePartAttribute("PART_YearSelector", "Avalonia.Controls.Primitives.DateTimePickerPanel")]
[TemplatePartAttribute("PART_YearUpButton", "Avalonia.Controls.RepeatButton")]
public class Avalonia.Controls.DatePickerPresenter : PickerPresenterBase {
    public static StyledProperty`1<DateTimeOffset> DateProperty;
    public static StyledProperty`1<string> DayFormatProperty;
    public static StyledProperty`1<bool> DayVisibleProperty;
    public static StyledProperty`1<DateTimeOffset> MaxYearProperty;
    public static StyledProperty`1<DateTimeOffset> MinYearProperty;
    public static StyledProperty`1<string> MonthFormatProperty;
    public static StyledProperty`1<bool> MonthVisibleProperty;
    public static StyledProperty`1<string> YearFormatProperty;
    public static StyledProperty`1<bool> YearVisibleProperty;
    [NullableAttribute("2")]
private Grid _pickerContainer;
    [NullableAttribute("2")]
private Button _acceptButton;
    [NullableAttribute("2")]
private Button _dismissButton;
    [NullableAttribute("2")]
private Rectangle _spacer1;
    [NullableAttribute("2")]
private Rectangle _spacer2;
    [NullableAttribute("2")]
private Panel _monthHost;
    [NullableAttribute("2")]
private Panel _yearHost;
    [NullableAttribute("2")]
private Panel _dayHost;
    [NullableAttribute("2")]
private DateTimePickerPanel _monthSelector;
    [NullableAttribute("2")]
private DateTimePickerPanel _yearSelector;
    [NullableAttribute("2")]
private DateTimePickerPanel _daySelector;
    [NullableAttribute("2")]
private Button _monthUpButton;
    [NullableAttribute("2")]
private Button _dayUpButton;
    [NullableAttribute("2")]
private Button _yearUpButton;
    [NullableAttribute("2")]
private Button _monthDownButton;
    [NullableAttribute("2")]
private Button _dayDownButton;
    [NullableAttribute("2")]
private Button _yearDownButton;
    private DateTimeOffset _syncDate;
    private GregorianCalendar _calendar;
    private bool _suppressUpdateSelection;
    public DateTimeOffset Date { get; public set; }
    public string DayFormat { get; public set; }
    public bool DayVisible { get; public set; }
    public DateTimeOffset MaxYear { get; public set; }
    public DateTimeOffset MinYear { get; public set; }
    public string MonthFormat { get; public set; }
    public bool MonthVisible { get; public set; }
    public string YearFormat { get; public set; }
    public bool YearVisible { get; public set; }
    private static DatePickerPresenter();
    private static DateTimeOffset CoerceDate(AvaloniaObject sender, DateTimeOffset value);
    private static void OnDateRangeChanged(DatePickerPresenter sender, AvaloniaPropertyChangedEventArgs e);
    public DateTimeOffset get_Date();
    public void set_Date(DateTimeOffset value);
    private void OnDateChanged(DateTimeOffset newValue);
    public string get_DayFormat();
    public void set_DayFormat(string value);
    public bool get_DayVisible();
    public void set_DayVisible(bool value);
    public DateTimeOffset get_MaxYear();
    public void set_MaxYear(DateTimeOffset value);
    public DateTimeOffset get_MinYear();
    public void set_MinYear(DateTimeOffset value);
    public string get_MonthFormat();
    public void set_MonthFormat(string value);
    public bool get_MonthVisible();
    public void set_MonthVisible(bool value);
    public string get_YearFormat();
    public void set_YearFormat(string value);
    public bool get_YearVisible();
    public void set_YearVisible(bool value);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void InitPicker();
    private void SetGrid();
    private void SetInitialFocus();
    private void OnDismissButtonClicked(object sender, RoutedEventArgs e);
    private void OnAcceptButtonClicked(object sender, RoutedEventArgs e);
    private void OnSelectorButtonClick(object sender, RoutedEventArgs e);
    private void OnYearChanged(object sender, EventArgs e);
    private void OnDayChanged(object sender, EventArgs e);
    private void OnMonthChanged(object sender, EventArgs e);
    internal double GetOffsetForPopup();
}
public class Avalonia.Controls.DatePickerSelectedValueChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <NewDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <OldDate>k__BackingField;
    public Nullable`1<DateTimeOffset> NewDate { get; }
    public Nullable`1<DateTimeOffset> OldDate { get; }
    public DatePickerSelectedValueChangedEventArgs(Nullable`1<DateTimeOffset> oldDate, Nullable`1<DateTimeOffset> newDate);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_NewDate();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_OldDate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Controls.DateTimeHelper : object {
    public static Nullable`1<DateTime> AddDays(DateTime time, int days);
    public static Nullable`1<DateTime> AddMonths(DateTime time, int months);
    public static Nullable`1<DateTime> AddYears(DateTime time, int years);
    public static int CompareDays(DateTime dt1, DateTime dt2);
    public static int CompareYearMonth(DateTime dt1, DateTime dt2);
    public static int DecadeOfDate(DateTime date);
    public static DateTime DiscardDayTime(DateTime d);
    public static DateTime DiscardTime(DateTime d);
    public static int EndOfDecade(DateTime date);
    public static DateTimeFormatInfo GetCurrentDateFormat();
    public static bool InRange(DateTime date, CalendarDateRange range);
    public static string ToYearMonthPatternString(DateTime date);
    public static string ToYearString(DateTime date);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Decorator : Control {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Control> ChildProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<Thickness> PaddingProperty;
    [ContentAttribute]
public Control Child { get; public set; }
    public Thickness Padding { get; public set; }
    private static Decorator();
    public Control get_Child();
    public void set_Child(Control value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    [NullableContextAttribute("1")]
private void ChildChanged(AvaloniaPropertyChangedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.DefinitionBase : AvaloniaObject {
    [CompilerGeneratedAttribute]
private Grid <Parent>k__BackingField;
    private Flags _flags;
    internal int _parentIndex;
    private LayoutTimeSizeType _sizeType;
    private double _minSize;
    private double _measureSize;
    private double _sizeCache;
    private double _offset;
    private SharedSizeState _sharedState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static AttachedProperty`1<SharedSizeScope> PrivateSharedSizeScopeProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> SharedSizeGroupProperty;
    public string SharedSizeGroup { get; public set; }
    internal bool IsShared { get; }
    internal GridLength UserSize { get; }
    internal double UserMinSize { get; }
    internal double UserMaxSize { get; }
    internal int Index { get; internal set; }
    internal LayoutTimeSizeType SizeType { get; internal set; }
    internal double MeasureSize { get; internal set; }
    internal double PreferredSize { get; }
    internal double SizeCache { get; internal set; }
    internal double MinSize { get; }
    internal double MinSizeForArrange { get; }
    internal double FinalOffset { get; internal set; }
    internal GridLength UserSizeValueCache { get; }
    internal double UserMinSizeValueCache { get; }
    internal double UserMaxSizeValueCache { get; }
    internal Grid Parent { get; internal set; }
    private bool UseSharedMinimum { get; private set; }
    private bool LayoutWasUpdated { get; private set; }
    private static DefinitionBase();
    public string get_SharedSizeGroup();
    public void set_SharedSizeGroup(string value);
    internal void OnEnterParentTree();
    internal void OnExitParentTree();
    [NullableContextAttribute("1")]
internal void OnBeforeLayout(Grid grid);
    internal void UpdateMinSize(double minSize);
    internal void SetMinSize(double minSize);
    [NullableContextAttribute("1")]
internal static void OnIsSharedSizeScopePropertyChanged(AvaloniaObject d, AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
internal static void OnUserSizePropertyChanged(DefinitionBase definition, AvaloniaPropertyChangedEventArgs e);
    internal bool get_IsShared();
    internal GridLength get_UserSize();
    internal double get_UserMinSize();
    internal double get_UserMaxSize();
    internal int get_Index();
    internal void set_Index(int value);
    internal LayoutTimeSizeType get_SizeType();
    internal void set_SizeType(LayoutTimeSizeType value);
    internal double get_MeasureSize();
    internal void set_MeasureSize(double value);
    internal double get_PreferredSize();
    internal double get_SizeCache();
    internal void set_SizeCache(double value);
    internal double get_MinSize();
    internal double get_MinSizeForArrange();
    internal double get_FinalOffset();
    internal void set_FinalOffset(double value);
    internal abstract virtual GridLength get_UserSizeValueCache();
    internal abstract virtual double get_UserMinSizeValueCache();
    internal abstract virtual double get_UserMaxSizeValueCache();
    [CompilerGeneratedAttribute]
internal Grid get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(Grid value);
    private void SetFlags(bool value, Flags flags);
    private bool CheckFlagsAnd(Flags flags);
    [NullableContextAttribute("1")]
private static void OnSharedSizeGroupPropertyChanged(DefinitionBase definition, AvaloniaPropertyChangedEventArgs`1<string> e);
    private static bool SharedSizeGroupPropertyValueValid(string id);
    [NullableContextAttribute("1")]
private static void OnPrivateSharedSizeScopePropertyChanged(DefinitionBase definition, AvaloniaPropertyChangedEventArgs`1<SharedSizeScope> e);
    private bool get_UseSharedMinimum();
    private void set_UseSharedMinimum(bool value);
    private bool get_LayoutWasUpdated();
    private void set_LayoutWasUpdated(bool value);
    [NullableContextAttribute("1")]
protected static void AffectsParentMeasure(AvaloniaProperty[] properties);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[AvaloniaListAttribute]
public abstract class Avalonia.Controls.DefinitionList`1 : AvaloniaList`1<T> {
    internal bool IsDirty;
    private Grid _parent;
    internal Grid Parent { get; internal set; }
    internal Grid get_Parent();
    internal void set_Parent(Grid value);
    private void SetParent(Grid value);
    [NullableContextAttribute("1")]
internal void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateDefinitionParent(IList items, bool wasRemoved);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Controls.Design : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<object, Control> _previewWith;
    [CompilerGeneratedAttribute]
private static bool <IsDesignMode>k__BackingField;
    public static AttachedProperty`1<double> HeightProperty;
    public static AttachedProperty`1<double> WidthProperty;
    public static AttachedProperty`1<object> DataContextProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<Control> PreviewWithProperty;
    public static AttachedProperty`1<IStyle> DesignStyleProperty;
    public static bool IsDesignMode { get; internal set; }
    private static Design();
    [CompilerGeneratedAttribute]
public static bool get_IsDesignMode();
    [CompilerGeneratedAttribute]
internal static void set_IsDesignMode(bool value);
    public static void SetHeight(Control control, double value);
    public static double GetHeight(Control control);
    public static void SetWidth(Control control, double value);
    public static double GetWidth(Control control);
    public static void SetDataContext(Control control, object value);
    public static object GetDataContext(Control control);
    public static void SetPreviewWith(AvaloniaObject target, Control control);
    public static void SetPreviewWith(ResourceDictionary target, Control control);
    public static Control GetPreviewWith(AvaloniaObject target);
    public static Control GetPreviewWith(ResourceDictionary target);
    public static void SetDesignStyle(Control control, IStyle value);
    public static IStyle GetDesignStyle(Control control);
    public static void ApplyDesignModeProperties(Control target, Control source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Avalonia.Controls.DesktopApplicationExtensions : object {
    [ExtensionAttribute]
public static void Run(Application app, ICloseable closable);
    [ExtensionAttribute]
public static void Run(Application app, Window mainWindow);
    [ExtensionAttribute]
public static void Run(Application app, CancellationToken token);
    [ExtensionAttribute]
public static void RunWithMainWindow(Application app);
}
[NullableContextAttribute("2")]
[NotClientImplementableAttribute]
public interface Avalonia.Controls.Diagnostics.IPopupHostProvider {
    public IPopupHost PopupHost { get; }
    public abstract virtual IPopupHost get_PopupHost();
    [CompilerGeneratedAttribute]
public abstract virtual void add_PopupHostChanged(Action`1<IPopupHost> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PopupHostChanged(Action`1<IPopupHost> value);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
public static class Avalonia.Controls.Diagnostics.ToolTipDiagnostics : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AvaloniaProperty`1<ToolTip> ToolTipProperty;
    private static ToolTipDiagnostics();
}
public enum Avalonia.Controls.Dock : Enum {
    public int value__;
    public static Dock Left;
    public static Dock Bottom;
    public static Dock Right;
    public static Dock Top;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.DockPanel : Panel {
    public static AttachedProperty`1<Dock> DockProperty;
    public static StyledProperty`1<bool> LastChildFillProperty;
    public bool LastChildFill { get; public set; }
    private static DockPanel();
    public static Dock GetDock(Control control);
    public static void SetDock(Control control, Dock value);
    public bool get_LastChildFill();
    public void set_LastChildFill(bool value);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeSize);
}
public class Avalonia.Controls.Documents.Bold : Span {
    private static Bold();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Documents.EmbeddedControlRun : DrawableTextRun {
    [CompilerGeneratedAttribute]
private Control <Control>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TextRunProperties <Properties>k__BackingField;
    public Control Control { get; }
    [NullableAttribute("2")]
public TextRunProperties Properties { get; }
    public Size Size { get; }
    public double Baseline { get; }
    public EmbeddedControlRun(Control control, TextRunProperties properties);
    [CompilerGeneratedAttribute]
public Control get_Control();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual TextRunProperties get_Properties();
    public virtual Size get_Size();
    public virtual double get_Baseline();
    public virtual void Draw(DrawingContext drawingContext, Point origin);
}
[NullableContextAttribute("1")]
internal interface Avalonia.Controls.Documents.IInlineHost {
    public IAvaloniaList`1<Visual> VisualChildren { get; }
    public abstract virtual void Invalidate();
    public abstract virtual IAvaloniaList`1<Visual> get_VisualChildren();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Documents.Inline : TextElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<TextDecorationCollection> TextDecorationsProperty;
    public static StyledProperty`1<BaselineAlignment> BaselineAlignmentProperty;
    [NullableAttribute("2")]
public TextDecorationCollection TextDecorations { get; public set; }
    public BaselineAlignment BaselineAlignment { get; public set; }
    private static Inline();
    [NullableContextAttribute("2")]
public TextDecorationCollection get_TextDecorations();
    [NullableContextAttribute("2")]
public void set_TextDecorations(TextDecorationCollection value);
    public BaselineAlignment get_BaselineAlignment();
    public void set_BaselineAlignment(BaselineAlignment value);
    public static TextDecorationCollection GetTextDecorations(Control control);
    public static void SetTextDecorations(Control control, TextDecorationCollection value);
    internal abstract virtual void BuildTextRun(IList`1<TextRun> textRuns);
    internal abstract virtual void AppendText(StringBuilder stringBuilder);
    protected TextRunProperties CreateTextRunProperties();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[WhitespaceSignificantCollectionAttribute]
public class Avalonia.Controls.Documents.InlineCollection : AvaloniaList`1<Inline> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAvaloniaList`1<ILogical> _logicalChildren;
    private IInlineHost _inlineHost;
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IAvaloniaList`1<ILogical> LogicalChildren { get; internal set; }
    internal IInlineHost InlineHost { get; internal set; }
    public string Text { get; }
    internal IAvaloniaList`1<ILogical> get_LogicalChildren();
    internal void set_LogicalChildren(IAvaloniaList`1<ILogical> value);
    internal IInlineHost get_InlineHost();
    internal void set_InlineHost(IInlineHost value);
    public string get_Text();
    [NullableContextAttribute("1")]
public virtual void Add(Inline inline);
    [NullableContextAttribute("1")]
public void Add(string text);
    [NullableContextAttribute("1")]
public void Add(Control control);
    [CompilerGeneratedAttribute]
public void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Invalidated(EventHandler value);
    protected void Invalidate();
    private void OnParentChanged(ICollection`1<ILogical> oldValue, ICollection`1<ILogical> newValue);
    private void OnInlineHostChanged(IInlineHost oldValue, IInlineHost newValue);
    [NullableContextAttribute("1")]
private void OnAdd(TextElement inline);
    [NullableContextAttribute("1")]
private void OnRemove(TextElement inline);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Documents.InlineUIContainer : Inline {
    public static StyledProperty`1<Control> ChildProperty;
    [ContentAttribute]
public Control Child { get; public set; }
    private static InlineUIContainer();
    public InlineUIContainer(Control child);
    public Control get_Child();
    public void set_Child(Control value);
    internal virtual void BuildTextRun(IList`1<TextRun> textRuns);
    internal virtual void AppendText(StringBuilder stringBuilder);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
}
public class Avalonia.Controls.Documents.Italic : Span {
    private static Italic();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TrimSurroundingWhitespaceAttribute]
public class Avalonia.Controls.Documents.LineBreak : Inline {
    internal virtual void BuildTextRun(IList`1<TextRun> textRuns);
    internal virtual void AppendText(StringBuilder stringBuilder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Documents.Run : Inline {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> TextProperty;
    [ContentAttribute]
public string Text { get; public set; }
    public Run(string text);
    private static Run();
    public string get_Text();
    public void set_Text(string value);
    [NullableContextAttribute("1")]
internal virtual void BuildTextRun(IList`1<TextRun> textRuns);
    [NullableContextAttribute("1")]
internal virtual void AppendText(StringBuilder stringBuilder);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Documents.Span : Inline {
    public static StyledProperty`1<InlineCollection> InlinesProperty;
    [ContentAttribute]
public InlineCollection Inlines { get; public set; }
    private static Span();
    public InlineCollection get_Inlines();
    public void set_Inlines(InlineCollection value);
    internal virtual void BuildTextRun(IList`1<TextRun> textRuns);
    internal virtual void AppendText(StringBuilder stringBuilder);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    [NullableContextAttribute("2")]
internal virtual void OnInlineHostChanged(IInlineHost oldValue, IInlineHost newValue);
    [NullableContextAttribute("2")]
private void OnInlinesChanged(InlineCollection oldValue, InlineCollection newValue);
    [CompilerGeneratedAttribute]
private void <OnInlinesChanged>g__OnInlinesInvalidated|9_0(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Documents.TextElement : StyledElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BackgroundProperty;
    public static AttachedProperty`1<FontFamily> FontFamilyProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<FontFeatureCollection> FontFeaturesProperty;
    public static AttachedProperty`1<double> FontSizeProperty;
    public static AttachedProperty`1<FontStyle> FontStyleProperty;
    public static AttachedProperty`1<FontWeight> FontWeightProperty;
    public static AttachedProperty`1<FontStretch> FontStretchProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<IBrush> ForegroundProperty;
    [NullableAttribute("2")]
private IInlineHost _inlineHost;
    [NullableAttribute("2")]
public IBrush Background { get; public set; }
    public FontFamily FontFamily { get; public set; }
    [NullableAttribute("2")]
public FontFeatureCollection FontFeatures { get; public set; }
    public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public FontStretch FontStretch { get; public set; }
    [NullableAttribute("2")]
public IBrush Foreground { get; public set; }
    [NullableAttribute("2")]
internal IInlineHost InlineHost { get; internal set; }
    private static TextElement();
    [NullableContextAttribute("2")]
public IBrush get_Background();
    [NullableContextAttribute("2")]
public void set_Background(IBrush value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    [NullableContextAttribute("2")]
public FontFeatureCollection get_FontFeatures();
    [NullableContextAttribute("2")]
public void set_FontFeatures(FontFeatureCollection value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    [NullableContextAttribute("2")]
public IBrush get_Foreground();
    [NullableContextAttribute("2")]
public void set_Foreground(IBrush value);
    public static FontFamily GetFontFamily(Control control);
    public static void SetFontFamily(Control control, FontFamily value);
    public static FontFeatureCollection GetFontFeatures(Control control);
    public static void SetFontFeatures(Control control, FontFeatureCollection value);
    public static double GetFontSize(Control control);
    public static void SetFontSize(Control control, double value);
    public static FontStyle GetFontStyle(Control control);
    public static void SetFontStyle(Control control, FontStyle value);
    public static FontWeight GetFontWeight(Control control);
    public static void SetFontWeight(Control control, FontWeight value);
    public static FontStretch GetFontStretch(Control control);
    public static void SetFontStretch(Control control, FontStretch value);
    public static IBrush GetForeground(Control control);
    public static void SetForeground(Control control, IBrush value);
    [NullableContextAttribute("2")]
internal IInlineHost get_InlineHost();
    [NullableContextAttribute("2")]
internal void set_InlineHost(IInlineHost value);
    [NullableContextAttribute("2")]
internal virtual void OnInlineHostChanged(IInlineHost oldValue, IInlineHost newValue);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
}
public class Avalonia.Controls.Documents.Underline : Span {
    private static Underline();
}
public class Avalonia.Controls.DropDownButton : Button {
}
public class Avalonia.Controls.Embedding.EmbeddableControlRoot : TopLevel {
    [CompilerGeneratedAttribute]
private bool <EnforceClientSize>k__BackingField;
    protected bool EnforceClientSize { get; protected set; }
    [NullableAttribute("1")]
protected Type StyleKeyOverride { get; }
    [NullableContextAttribute("1")]
public EmbeddableControlRoot(ITopLevelImpl impl);
    [CompilerGeneratedAttribute]
protected bool get_EnforceClientSize();
    [CompilerGeneratedAttribute]
protected void set_EnforceClientSize(bool value);
    public void Prepare();
    public void StartRendering();
    public void StopRendering();
    private void EnsureInitialized();
    protected virtual Size MeasureOverride(Size availableSize);
    [NullableContextAttribute("1")]
protected virtual Type get_StyleKeyOverride();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Embedding.Offscreen.OffscreenTopLevel : TopLevel {
    [CompilerGeneratedAttribute]
private OffscreenTopLevelImplBase <Impl>k__BackingField;
    public OffscreenTopLevelImplBase Impl { get; }
    protected Type StyleKeyOverride { get; }
    public OffscreenTopLevel(OffscreenTopLevelImplBase impl);
    [CompilerGeneratedAttribute]
public OffscreenTopLevelImplBase get_Impl();
    public void Prepare();
    private void EnsureInitialized();
    protected virtual Type get_StyleKeyOverride();
    public void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[UnstableAttribute]
public abstract class Avalonia.Controls.Embedding.Offscreen.OffscreenTopLevelImplBase : object {
    private double _scaling;
    private Size _clientSize;
    [CompilerGeneratedAttribute]
private IInputRoot <InputRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Compositor <Compositor>k__BackingField;
    [CompilerGeneratedAttribute]
private IPlatformHandle <Handle>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<RawInputEventArgs> <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Rect> <Paint>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<Size, WindowResizeReason> <Resized>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<double> <ScalingChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<WindowTransparencyLevel> <TransparencyLevelChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private AcrylicPlatformCompensationLevels <AcrylicCompensationLevels>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <LostFocus>k__BackingField;
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IInputRoot InputRoot { get; private set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public bool IsDisposed { get; private set; }
    [NullableAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Compositor Compositor { get; }
    [NullableAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IEnumerable`1<object> Surfaces { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public double DesktopScaling { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IPlatformHandle Handle { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Size ClientSize { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Nullable`1<Size> FrameSize { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public double RenderScaling { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Action`1<RawInputEventArgs> Input { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Action`1<Rect> Paint { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Action`2<Size, WindowResizeReason> Resized { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Action`1<double> ScalingChanged { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Action`1<WindowTransparencyLevel> TransparencyLevelChanged { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public AcrylicPlatformCompensationLevels AcrylicCompensationLevels { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Action Closed { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Action LostFocus { get; public set; }
    [NullableAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IMouseDevice MouseDevice { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public WindowTransparencyLevel TransparencyLevel { get; }
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IInputRoot get_InputRoot();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private void set_InputRoot(IInputRoot value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private void set_IsDisposed(bool value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public virtual void Dispose();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual Compositor get_Compositor();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual IEnumerable`1<object> get_Surfaces();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual double get_DesktopScaling();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual IPlatformHandle get_Handle();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual Size get_ClientSize();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public void set_ClientSize(Size value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Nullable`1<Size> get_FrameSize();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual double get_RenderScaling();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public void set_RenderScaling(double value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual Action`1<RawInputEventArgs> get_Input();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void set_Input(Action`1<RawInputEventArgs> value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual Action`1<Rect> get_Paint();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void set_Paint(Action`1<Rect> value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual Action`2<Size, WindowResizeReason> get_Resized();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void set_Resized(Action`2<Size, WindowResizeReason> value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual Action`1<double> get_ScalingChanged();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void set_ScalingChanged(Action`1<double> value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual Action`1<WindowTransparencyLevel> get_TransparencyLevelChanged();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void set_TransparencyLevelChanged(Action`1<WindowTransparencyLevel> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void SetFrameThemeVariant(PlatformThemeVariant themeVariant);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual AcrylicPlatformCompensationLevels get_AcrylicCompensationLevels();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void SetInputRoot(IInputRoot inputRoot);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public virtual Point PointToClient(PixelPoint point);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public virtual PixelPoint PointToScreen(Point point);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public virtual void SetCursor(ICursorImpl cursor);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual Action get_Closed();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void set_Closed(Action value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual Action get_LostFocus();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void set_LostFocus(Action value);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual IMouseDevice get_MouseDevice();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void SetTransparencyLevelHint(IReadOnlyList`1<WindowTransparencyLevel> transparencyLevel);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual WindowTransparencyLevel get_TransparencyLevel();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual IPopupImpl CreatePopup();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public virtual object TryGetFeature(Type featureType);
}
public enum Avalonia.Controls.ExpandDirection : Enum {
    public int value__;
    public static ExpandDirection Down;
    public static ExpandDirection Up;
    public static ExpandDirection Left;
    public static ExpandDirection Right;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Expander : HeaderedContentControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IPageTransition> ContentTransitionProperty;
    public static StyledProperty`1<ExpandDirection> ExpandDirectionProperty;
    public static StyledProperty`1<bool> IsExpandedProperty;
    public static RoutedEvent`1<RoutedEventArgs> CollapsedEvent;
    public static RoutedEvent`1<CancelRoutedEventArgs> CollapsingEvent;
    public static RoutedEvent`1<RoutedEventArgs> ExpandedEvent;
    public static RoutedEvent`1<CancelRoutedEventArgs> ExpandingEvent;
    private bool _ignorePropertyChanged;
    [NullableAttribute("2")]
private CancellationTokenSource _lastTransitionCts;
    [NullableAttribute("2")]
public IPageTransition ContentTransition { get; public set; }
    public ExpandDirection ExpandDirection { get; public set; }
    public bool IsExpanded { get; public set; }
    private static Expander();
    [NullableContextAttribute("2")]
public IPageTransition get_ContentTransition();
    [NullableContextAttribute("2")]
public void set_ContentTransition(IPageTransition value);
    public ExpandDirection get_ExpandDirection();
    public void set_ExpandDirection(ExpandDirection value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public void add_Collapsed(EventHandler`1<RoutedEventArgs> value);
    public void remove_Collapsed(EventHandler`1<RoutedEventArgs> value);
    public void add_Collapsing(EventHandler`1<CancelRoutedEventArgs> value);
    public void remove_Collapsing(EventHandler`1<CancelRoutedEventArgs> value);
    public void add_Expanded(EventHandler`1<RoutedEventArgs> value);
    public void remove_Expanded(EventHandler`1<RoutedEventArgs> value);
    public void add_Expanding(EventHandler`1<CancelRoutedEventArgs> value);
    public void remove_Expanding(EventHandler`1<CancelRoutedEventArgs> value);
    protected virtual void OnCollapsed(RoutedEventArgs eventArgs);
    protected virtual void OnCollapsing(CancelRoutedEventArgs eventArgs);
    protected virtual void OnExpanded(RoutedEventArgs eventArgs);
    protected virtual void OnExpanding(CancelRoutedEventArgs eventArgs);
    [AsyncStateMachineAttribute("Avalonia.Controls.Expander/<StartContentTransition>d__35")]
private void StartContentTransition();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void UpdatePseudoClasses();
    protected virtual bool OnCoerceIsExpanded(bool value);
    private static bool CoerceIsExpanded(AvaloniaObject instance, bool value);
    [CompilerGeneratedAttribute]
private void <StartContentTransition>b__35_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.ExperimentalAcrylicBorder : Decorator {
    public static StyledProperty`1<CornerRadius> CornerRadiusProperty;
    public static StyledProperty`1<ExperimentalAcrylicMaterial> MaterialProperty;
    [NullableAttribute("2")]
private IDisposable _subscription;
    [NullableAttribute("2")]
private IDisposable _materialSubscription;
    public CornerRadius CornerRadius { get; public set; }
    public ExperimentalAcrylicMaterial Material { get; public set; }
    private static ExperimentalAcrylicBorder();
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public ExperimentalAcrylicMaterial get_Material();
    public void set_Material(ExperimentalAcrylicMaterial value);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    private void UpdateMaterialSubscription();
    [NullableContextAttribute("2")]
private void SyncMaterial(CompositionVisual visual);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    private protected virtual CompositionDrawListVisual CreateCompositionVisual(Compositor compositor);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    [CompilerGeneratedAttribute]
private void <UpdateMaterialSubscription>b__12_0(EventHandler`1<AvaloniaPropertyChangedEventArgs> h);
    [CompilerGeneratedAttribute]
private void <UpdateMaterialSubscription>b__12_1(EventHandler`1<AvaloniaPropertyChangedEventArgs> h);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <UpdateMaterialSubscription>b__12_2(AvaloniaPropertyChangedEventArgs _);
}
[ExtensionAttribute]
internal static class Avalonia.Controls.Extensions : object {
    [ExtensionAttribute]
public static bool IsNaN(double d);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> Do(IEnumerable`1<TSource> source, Action`1<TSource> predicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
[EditorBrowsableAttribute("1")]
public abstract class Avalonia.Controls.FileDialog : FileSystemDialog {
    [CompilerGeneratedAttribute]
private List`1<FileDialogFilter> <Filters>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <InitialFileName>k__BackingField;
    public List`1<FileDialogFilter> Filters { get; public set; }
    [NullableAttribute("2")]
public string InitialFileName { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<FileDialogFilter> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(List`1<FileDialogFilter> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_InitialFileName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_InitialFileName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
[EditorBrowsableAttribute("1")]
public class Avalonia.Controls.FileDialogFilter : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Extensions>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; public set; }
    public List`1<string> Extensions { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(List`1<string> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
[EditorBrowsableAttribute("1")]
public abstract class Avalonia.Controls.FileSystemDialog : SystemDialog {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    public string Directory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Flyout : PopupFlyoutBase {
    public static StyledProperty`1<object> ContentProperty;
    [NullableAttribute("2")]
private Classes _classes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ControlTheme> FlyoutPresenterThemeProperty;
    public Classes FlyoutPresenterClasses { get; }
    [NullableAttribute("2")]
public ControlTheme FlyoutPresenterTheme { get; public set; }
    [ContentAttribute]
public object Content { get; public set; }
    private static Flyout();
    public Classes get_FlyoutPresenterClasses();
    [NullableContextAttribute("2")]
public ControlTheme get_FlyoutPresenterTheme();
    [NullableContextAttribute("2")]
public void set_FlyoutPresenterTheme(ControlTheme value);
    public object get_Content();
    public void set_Content(object value);
    protected virtual Control CreatePresenter();
    protected virtual void OnOpening(CancelEventArgs args);
}
public class Avalonia.Controls.FlyoutPresenter : ContentControl {
    [NullableContextAttribute("1")]
protected virtual void OnKeyDown(KeyEventArgs e);
}
public enum Avalonia.Controls.FlyoutShowMode : Enum {
    public int value__;
    public static FlyoutShowMode Standard;
    public static FlyoutShowMode Transient;
    public static FlyoutShowMode TransientWithDismissOnPointerMoveAway;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Generators.ItemContainerGenerator : object {
    private ItemsControl _owner;
    internal ItemContainerGenerator(ItemsControl owner);
    [NullableContextAttribute("2")]
public bool NeedsContainer(object item, int index, Object& recycleKey);
    [NullableContextAttribute("2")]
public Control CreateContainer(object item, int index, object recycleKey);
    public void PrepareItemContainer(Control container, object item, int index);
    public void ItemContainerPrepared(Control container, object item, int index);
    public void ItemContainerIndexChanged(Control container, int oldIndex, int newIndex);
    public void ClearItemContainer(Control container);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Use ItemsControl.ContainerFromIndex")]
[EditorBrowsableAttribute("1")]
public Control ContainerFromIndex(int index);
    [ObsoleteAttribute("Use ItemsControl.IndexFromContainer")]
[EditorBrowsableAttribute("1")]
public int IndexFromContainer(Control container);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Generators.TreeContainerIndex : object {
    private TreeView _owner;
    [ObsoleteAttribute("Use TreeView.GetRealizedTreeContainers")]
[EditorBrowsableAttribute("1")]
public IEnumerable`1<Control> Containers { get; }
    internal TreeContainerIndex(TreeView owner);
    public IEnumerable`1<Control> get_Containers();
    [ObsoleteAttribute("Use TreeView.TreeContainerFromItem")]
[EditorBrowsableAttribute("1")]
public Control ContainerFromItem(object item);
    [ObsoleteAttribute("Use TreeView.TreeItemFromContainer")]
[EditorBrowsableAttribute("1")]
public object ItemFromContainer(Control container);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Generators.TreeItemContainerGenerator : ItemContainerGenerator {
    [CompilerGeneratedAttribute]
private TreeContainerIndex <Index>k__BackingField;
    public TreeContainerIndex Index { get; }
    internal TreeItemContainerGenerator(TreeView owner);
    [CompilerGeneratedAttribute]
public TreeContainerIndex get_Index();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Grid : Panel {
    [NullableAttribute("2")]
private ExtendedData _extData;
    private Flags _flags;
    [NullableAttribute("2")]
private GridLinesRenderer _gridLinesRenderer;
    [NullableAttribute("2")]
private Int32[] _definitionIndices;
    [NullableAttribute("2")]
private Double[] _roundingErrors;
    private static int c_layoutLoopMaxCount;
    private static LocalDataStoreSlot s_tempDefinitionsDataSlot;
    private static IComparer s_spanPreferredDistributionOrderComparer;
    private static IComparer s_spanMaxDistributionOrderComparer;
    private static IComparer s_minRatioComparer;
    private static IComparer s_maxRatioComparer;
    private static IComparer s_starWeightComparer;
    public static StyledProperty`1<bool> ShowGridLinesProperty;
    public static AttachedProperty`1<int> ColumnProperty;
    public static AttachedProperty`1<int> RowProperty;
    public static AttachedProperty`1<int> ColumnSpanProperty;
    public static AttachedProperty`1<int> RowSpanProperty;
    public static AttachedProperty`1<bool> IsSharedSizeScopeProperty;
    public bool ShowGridLines { get; public set; }
    [MemberNotNullAttribute("_extData")]
public ColumnDefinitions ColumnDefinitions { get; public set; }
    [MemberNotNullAttribute("_extData")]
public RowDefinitions RowDefinitions { get; public set; }
    internal bool MeasureOverrideInProgress { get; internal set; }
    internal bool ArrangeOverrideInProgress { get; internal set; }
    [MemberNotNullAttribute("_extData")]
internal bool ColumnDefinitionsDirty { get; internal set; }
    [MemberNotNullAttribute("_extData")]
internal bool RowDefinitionsDirty { get; internal set; }
    private IReadOnlyList`1<DefinitionBase> DefinitionsU { get; }
    private IReadOnlyList`1<DefinitionBase> DefinitionsV { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private DefinitionBase[] TempDefinitions { get; }
    private Int32[] DefinitionIndices { get; }
    private Double[] RoundingErrors { get; }
    private CellCache[] PrivateCells { get; }
    private bool CellsStructureDirty { get; private set; }
    private bool ListenToNotifications { get; private set; }
    private bool SizeToContentU { get; private set; }
    private bool SizeToContentV { get; private set; }
    private bool HasStarCellsU { get; private set; }
    private bool HasStarCellsV { get; private set; }
    private bool HasGroup3CellsInAutoRows { get; private set; }
    private static Grid();
    public static void SetColumn(Control element, int value);
    public static int GetColumn(Control element);
    public static void SetRow(Control element, int value);
    public static int GetRow(Control element);
    public static void SetColumnSpan(Control element, int value);
    public static int GetColumnSpan(Control element);
    public static void SetRowSpan(Control element, int value);
    public static int GetRowSpan(Control element);
    public static void SetIsSharedSizeScope(Control element, bool value);
    public static bool GetIsSharedSizeScope(Control element);
    public bool get_ShowGridLines();
    public void set_ShowGridLines(bool value);
    [MemberNotNullAttribute("_extData")]
public ColumnDefinitions get_ColumnDefinitions();
    [MemberNotNullAttribute("_extData")]
public void set_ColumnDefinitions(ColumnDefinitions value);
    [MemberNotNullAttribute("_extData")]
public RowDefinitions get_RowDefinitions();
    [MemberNotNullAttribute("_extData")]
public void set_RowDefinitions(RowDefinitions value);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual void ChildrenChanged(object sender, NotifyCollectionChangedEventArgs e);
    internal void Invalidate();
    internal double GetFinalColumnDefinitionWidth(int columnIndex);
    internal double GetFinalRowDefinitionHeight(int rowIndex);
    internal bool get_MeasureOverrideInProgress();
    internal void set_MeasureOverrideInProgress(bool value);
    internal bool get_ArrangeOverrideInProgress();
    internal void set_ArrangeOverrideInProgress(bool value);
    [MemberNotNullAttribute("_extData")]
internal bool get_ColumnDefinitionsDirty();
    [MemberNotNullAttribute("_extData")]
internal void set_ColumnDefinitionsDirty(bool value);
    [MemberNotNullAttribute("_extData")]
internal bool get_RowDefinitionsDirty();
    [MemberNotNullAttribute("_extData")]
internal void set_RowDefinitionsDirty(bool value);
    private void ValidateCells();
    private void ValidateCellsCore();
    private void ValidateDefinitionsUStructure();
    private void ValidateDefinitionsVStructure();
    private void ValidateDefinitionsLayout(IReadOnlyList`1<DefinitionBase> definitions, bool treatStarAsAuto);
    private Double[] CacheMinSizes(int cellsHead, bool isRows);
    private void ApplyCachedMinSizes(Double[] minSizes, bool isRows);
    private void MeasureCellsGroup(int cellsHead, Size referenceSize, bool ignoreDesiredSizeU, bool forceInfinityV);
    private void MeasureCellsGroup(int cellsHead, Size referenceSize, bool ignoreDesiredSizeU, bool forceInfinityV, Boolean& hasDesiredSizeUChanged);
    [NullableContextAttribute("2")]
private static void RegisterSpan(Hashtable& store, int start, int count, bool u, double value);
    private void MeasureCell(int cell, bool forceInfinityV);
    private static double GetMeasureSizeForRange(IReadOnlyList`1<DefinitionBase> definitions, int start, int count);
    private static LayoutTimeSizeType GetLengthTypeForRange(IReadOnlyList`1<DefinitionBase> definitions, int start, int count);
    private void EnsureMinSizeInDefinitionRange(IReadOnlyList`1<DefinitionBase> definitions, int start, int count, double requestedSize, double percentReferenceSize);
    private void ResolveStar(IReadOnlyList`1<DefinitionBase> definitions, double availableSize);
    private void ResolveStarMaxDiscrepancy(IReadOnlyList`1<DefinitionBase> definitions, double availableSize);
    private static double CalculateDesiredSize(IReadOnlyList`1<DefinitionBase> definitions);
    private void SetFinalSize(IReadOnlyList`1<DefinitionBase> definitions, double finalSize, bool columns);
    private void SetFinalSizeMaxDiscrepancy(IReadOnlyList`1<DefinitionBase> definitions, double finalSize, bool columns);
    private static Nullable`1<bool> Choose(double minRatio, double maxRatio, double proportion);
    [NullableContextAttribute("0")]
private static int CompareRoundingErrors(KeyValuePair`2<int, double> x, KeyValuePair`2<int, double> y);
    private static double GetFinalSizeForRange(IReadOnlyList`1<DefinitionBase> definitions, int start, int count);
    private void SetValid();
    [NullableContextAttribute("2")]
private GridLinesRenderer EnsureGridLinesRenderer();
    private void SetFlags(bool value, Flags flags);
    private bool CheckFlags(Flags flags);
    private static void OnShowGridLinesPropertyChanged(AvaloniaObject d, AvaloniaPropertyChangedEventArgs e);
    private static void OnCellAttachedPropertyChanged(AvaloniaObject d, AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("2")]
private static bool CompareNullRefs(object x, object y, Int32& result);
    private IReadOnlyList`1<DefinitionBase> get_DefinitionsU();
    private IReadOnlyList`1<DefinitionBase> get_DefinitionsV();
    private DefinitionBase[] get_TempDefinitions();
    private Int32[] get_DefinitionIndices();
    private Double[] get_RoundingErrors();
    private CellCache[] get_PrivateCells();
    private bool get_CellsStructureDirty();
    private void set_CellsStructureDirty(bool value);
    private bool get_ListenToNotifications();
    private void set_ListenToNotifications(bool value);
    private bool get_SizeToContentU();
    private void set_SizeToContentU(bool value);
    private bool get_SizeToContentV();
    private void set_SizeToContentV(bool value);
    private bool get_HasStarCellsU();
    private void set_HasStarCellsU(bool value);
    private bool get_HasStarCellsV();
    private void set_HasStarCellsV(bool value);
    private bool get_HasGroup3CellsInAutoRows();
    private void set_HasGroup3CellsInAutoRows(bool value);
    private static double StarWeight(DefinitionBase def, double scale);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.GridLength : ValueType {
    private GridUnitType _type;
    private double _value;
    public static GridLength Auto { get; }
    public static GridLength Star { get; }
    public GridUnitType GridUnitType { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsStar { get; }
    public double Value { get; }
    public GridLength(double value);
    public GridLength(double value, GridUnitType type);
    public static GridLength get_Auto();
    public static GridLength get_Star();
    public GridUnitType get_GridUnitType();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsStar();
    public double get_Value();
    public static bool op_Equality(GridLength a, GridLength b);
    public static bool op_Inequality(GridLength gl1, GridLength gl2);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(GridLength gridLength);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static GridLength Parse(string s);
    [IteratorStateMachineAttribute("Avalonia.Controls.GridLength/<ParseLengths>d__25")]
public static IEnumerable`1<GridLength> ParseLengths(string s);
}
public enum Avalonia.Controls.GridResizeBehavior : Enum {
    public int value__;
    public static GridResizeBehavior BasedOnAlignment;
    public static GridResizeBehavior CurrentAndNext;
    public static GridResizeBehavior PreviousAndCurrent;
    public static GridResizeBehavior PreviousAndNext;
}
public enum Avalonia.Controls.GridResizeDirection : Enum {
    public int value__;
    public static GridResizeDirection Auto;
    public static GridResizeDirection Columns;
    public static GridResizeDirection Rows;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.GridSplitter : Thumb {
    public static StyledProperty`1<GridResizeDirection> ResizeDirectionProperty;
    public static StyledProperty`1<GridResizeBehavior> ResizeBehaviorProperty;
    public static StyledProperty`1<bool> ShowsPreviewProperty;
    public static StyledProperty`1<double> KeyboardIncrementProperty;
    public static StyledProperty`1<double> DragIncrementProperty;
    public static StyledProperty`1<ITemplate`1<Control>> PreviewContentProperty;
    private static Cursor s_columnSplitterCursor;
    private static Cursor s_rowSplitterCursor;
    [NullableAttribute("2")]
private ResizeData _resizeData;
    private bool _isFocusEngaged;
    public GridResizeDirection ResizeDirection { get; public set; }
    public GridResizeBehavior ResizeBehavior { get; public set; }
    public bool ShowsPreview { get; public set; }
    public double KeyboardIncrement { get; public set; }
    public double DragIncrement { get; public set; }
    public ITemplate`1<Control> PreviewContent { get; public set; }
    private static GridSplitter();
    public GridResizeDirection get_ResizeDirection();
    public void set_ResizeDirection(GridResizeDirection value);
    public GridResizeBehavior get_ResizeBehavior();
    public void set_ResizeBehavior(GridResizeBehavior value);
    public bool get_ShowsPreview();
    public void set_ShowsPreview(bool value);
    public double get_KeyboardIncrement();
    public void set_KeyboardIncrement(double value);
    public double get_DragIncrement();
    public void set_DragIncrement(double value);
    public ITemplate`1<Control> get_PreviewContent();
    public void set_PreviewContent(ITemplate`1<Control> value);
    internal GridResizeDirection GetEffectiveResizeDirection();
    private GridResizeBehavior GetEffectiveResizeBehavior(GridResizeDirection direction);
    private void RemovePreviewAdorner();
    private void InitializeData(bool showsPreview);
    private bool SetupDefinitionsToResize();
    private void SetupPreviewAdorner();
    protected virtual void OnPointerEntered(PointerEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnDragStarted(VectorEventArgs e);
    protected virtual void OnDragDelta(VectorEventArgs e);
    protected virtual void OnDragCompleted(VectorEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void CancelResize();
    private static bool IsStar(DefinitionBase definition);
    private static DefinitionBase GetGridDefinition(Grid grid, int index, GridResizeDirection direction);
    private static double GetActualLength(DefinitionBase definition);
    private static void SetDefinitionLength(DefinitionBase definition, GridLength length);
    private void GetDeltaConstraints(Double& minDelta, Double& maxDelta);
    private void SetLengths(double definition1Pixels, double definition2Pixels);
    private void MoveSplitter(double horizontalChange, double verticalChange);
    private bool KeyboardMoveSplitter(double horizontalChange, double verticalChange);
}
public enum Avalonia.Controls.GridUnitType : Enum {
    public int value__;
    public static GridUnitType Auto;
    public static GridUnitType Pixel;
    public static GridUnitType Star;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.HotKeyManager : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<KeyGesture> HotKeyProperty;
    private static HotKeyManager();
    public static void SetHotKey(AvaloniaObject target, KeyGesture value);
    public static KeyGesture GetHotKey(AvaloniaObject target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.HyperlinkButton : Button {
    private static string pcVisited;
    public static StyledProperty`1<bool> IsVisitedProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Uri> NavigateUriProperty;
    public bool IsVisited { get; public set; }
    [NullableAttribute("2")]
public Uri NavigateUri { get; public set; }
    private static HyperlinkButton();
    public bool get_IsVisited();
    public void set_IsVisited(bool value);
    [NullableContextAttribute("2")]
public Uri get_NavigateUri();
    [NullableContextAttribute("2")]
public void set_NavigateUri(Uri value);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnClick();
}
public abstract class Avalonia.Controls.IconElement : TemplatedControl {
}
[NullableContextAttribute("2")]
internal interface Avalonia.Controls.IContentControl {
    public object Content { get; public set; }
    public IDataTemplate ContentTemplate { get; public set; }
    public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    public VerticalAlignment VerticalContentAlignment { get; public set; }
    public abstract virtual object get_Content();
    public abstract virtual void set_Content(object value);
    public abstract virtual IDataTemplate get_ContentTemplate();
    public abstract virtual void set_ContentTemplate(IDataTemplate value);
    public abstract virtual HorizontalAlignment get_HorizontalContentAlignment();
    public abstract virtual void set_HorizontalContentAlignment(HorizontalAlignment value);
    public abstract virtual VerticalAlignment get_VerticalContentAlignment();
    public abstract virtual void set_VerticalContentAlignment(VerticalAlignment value);
}
[NotClientImplementableAttribute]
public interface Avalonia.Controls.IGlobalDataTemplates {
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
internal interface Avalonia.Controls.IHeadered {
    public object Header { get; public set; }
    public abstract virtual object get_Header();
    public abstract virtual void set_Header(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Image : Control {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IImage> SourceProperty;
    public static StyledProperty`1<Stretch> StretchProperty;
    public static StyledProperty`1<StretchDirection> StretchDirectionProperty;
    [NullableAttribute("2")]
[ContentAttribute]
public IImage Source { get; public set; }
    public Stretch Stretch { get; public set; }
    public StretchDirection StretchDirection { get; public set; }
    protected bool BypassFlowDirectionPolicies { get; }
    private static Image();
    [NullableContextAttribute("2")]
public IImage get_Source();
    [NullableContextAttribute("2")]
public void set_Source(IImage value);
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public StretchDirection get_StretchDirection();
    public void set_StretchDirection(StretchDirection value);
    protected virtual bool get_BypassFlowDirectionPolicies();
    public sealed virtual void Render(DrawingContext context);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal interface Avalonia.Controls.IMenu {
    [NullableAttribute("1")]
public IMenuInteractionHandler InteractionHandler { get; }
    public bool IsOpen { get; }
    [NullableAttribute("2")]
public IRenderRoot VisualRoot { get; }
    [NullableContextAttribute("1")]
public abstract virtual IMenuInteractionHandler get_InteractionHandler();
    public abstract virtual bool get_IsOpen();
    [NullableContextAttribute("2")]
public abstract virtual IRenderRoot get_VisualRoot();
}
[NullableContextAttribute("2")]
internal interface Avalonia.Controls.IMenuElement {
    public IMenuItem SelectedItem { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IMenuItem> SubItems { get; }
    public abstract virtual IMenuItem get_SelectedItem();
    public abstract virtual void set_SelectedItem(IMenuItem value);
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<IMenuItem> get_SubItems();
    public abstract virtual void Open();
    public abstract virtual void Close();
    public abstract virtual bool MoveSelection(NavigationDirection direction, bool wrap);
}
[NullableContextAttribute("2")]
internal interface Avalonia.Controls.IMenuItem {
    public bool HasSubMenu { get; }
    public bool IsPointerOverSubMenu { get; }
    public bool IsSubMenuOpen { get; public set; }
    public bool StaysOpenOnClick { get; public set; }
    public bool IsTopLevel { get; }
    public IMenuElement Parent { get; }
    public MenuItemToggleType ToggleType { get; }
    public string GroupName { get; }
    public bool IsChecked { get; public set; }
    public abstract virtual bool get_HasSubMenu();
    public abstract virtual bool get_IsPointerOverSubMenu();
    public abstract virtual bool get_IsSubMenuOpen();
    public abstract virtual void set_IsSubMenuOpen(bool value);
    public abstract virtual bool get_StaysOpenOnClick();
    public abstract virtual void set_StaysOpenOnClick(bool value);
    public abstract virtual bool get_IsTopLevel();
    public abstract virtual IMenuElement get_Parent();
    public abstract virtual MenuItemToggleType get_ToggleType();
    public abstract virtual string get_GroupName();
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
    public abstract virtual void RaiseClick();
}
[PrivateApiAttribute]
public interface Avalonia.Controls.INativeMenuExporterEventsImplBridge {
    internal abstract virtual void RaiseNeedsUpdate();
    internal abstract virtual void RaiseOpening();
    internal abstract virtual void RaiseClosed();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[UnstableAttribute]
public interface Avalonia.Controls.INativeMenuItemExporterEventsImplBridge {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void RaiseClicked();
}
[NullableContextAttribute("2")]
internal interface Avalonia.Controls.IRadioButton {
    public string GroupName { get; }
    public MenuItemToggleType ToggleType { get; }
    public bool IsChecked { get; public set; }
    public abstract virtual string get_GroupName();
    public abstract virtual MenuItemToggleType get_ToggleType();
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
}
[NullableContextAttribute("1")]
public interface Avalonia.Controls.IScrollAnchorProvider {
    [NullableAttribute("2")]
public Control CurrentAnchor { get; }
    [NullableContextAttribute("2")]
public abstract virtual Control get_CurrentAnchor();
    public abstract virtual void RegisterAnchorCandidate(Control element);
    public abstract virtual void UnregisterAnchorCandidate(Control element);
}
public interface Avalonia.Controls.ISelectable {
    public bool IsSelected { get; public set; }
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Avalonia.Controls.ItemCollection : ItemsSourceView {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Object[] s_uninitialized;
    private Mode _mode;
    [CompilerGeneratedAttribute]
private EventHandler SourceChanged;
    public object Item { get; public set; }
    public bool IsReadOnly { get; }
    [NullableAttribute("1")]
private IList WritableSource { get; }
    private static ItemCollection();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
internal void add_SourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_SourceChanged(EventHandler value);
    public int Add(object value);
    public void Clear();
    public void Insert(int index, object value);
    public void RemoveAt(int index);
    public bool Remove(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [NullableContextAttribute("1")]
private IList get_WritableSource();
    internal void SetItemsSource(IEnumerable value);
    [NullableContextAttribute("1")]
private void SetSource(IEnumerable source);
    private static AvaloniaList`1<object> CreateDefaultCollection();
    [DoesNotReturnAttribute]
private static void ThrowIsItemsSource();
}
public interface Avalonia.Controls.ITemplate`1 {
    [NullableContextAttribute("1")]
public abstract virtual TControl Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.ItemsControl : TemplatedControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FuncTemplate`1<Panel> DefaultPanel;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ControlTheme> ItemContainerThemeProperty;
    public static DirectProperty`2<ItemsControl, int> ItemCountProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ITemplate`1<Panel>> ItemsPanelProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IEnumerable> ItemsSourceProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> ItemTemplateProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBinding> DisplayMemberBindingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AttachedProperty`1<ControlTheme> AppliedItemContainerTheme;
    private ItemCollection _items;
    private int _itemCount;
    [NullableAttribute("2")]
private ItemContainerGenerator _itemContainerGenerator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<ChildIndexChangedEventArgs> _childIndexChanged;
    [NullableAttribute("2")]
private IDataTemplate _displayMemberItemTemplate;
    [NullableAttribute("2")]
private ItemsPresenter _itemsPresenter;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ItemsPresenter <Presenter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapFocus>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ContainerPreparedEventArgs> ContainerPrepared;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ContainerIndexChangedEventArgs> ContainerIndexChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ContainerClearingEventArgs> ContainerClearing;
    [CompilerGeneratedAttribute]
private static object <DefaultRecycleKey>k__BackingField;
    [NullableAttribute("2")]
[AssignBindingAttribute]
[InheritDataTypeFromItemsAttribute("ItemsSource")]
public IBinding DisplayMemberBinding { get; public set; }
    public ItemContainerGenerator ItemContainerGenerator { get; }
    [ContentAttribute]
public ItemCollection Items { get; }
    [NullableAttribute("2")]
public ControlTheme ItemContainerTheme { get; public set; }
    public int ItemCount { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITemplate`1<Panel> ItemsPanel { get; public set; }
    [NullableAttribute("2")]
public IEnumerable ItemsSource { get; public set; }
    [NullableAttribute("2")]
[InheritDataTypeFromItemsAttribute("ItemsSource")]
public IDataTemplate ItemTemplate { get; public set; }
    [NullableAttribute("2")]
public ItemsPresenter Presenter { get; private set; }
    [NullableAttribute("2")]
public Panel ItemsPanelRoot { get; }
    public ItemsSourceView ItemsView { get; }
    private protected bool WrapFocus { get; private protected set; }
    protected static object DefaultRecycleKey { get; }
    private static ItemsControl();
    [NullableContextAttribute("2")]
public IBinding get_DisplayMemberBinding();
    [NullableContextAttribute("2")]
public void set_DisplayMemberBinding(IBinding value);
    public ItemContainerGenerator get_ItemContainerGenerator();
    public ItemCollection get_Items();
    [NullableContextAttribute("2")]
public ControlTheme get_ItemContainerTheme();
    [NullableContextAttribute("2")]
public void set_ItemContainerTheme(ControlTheme value);
    public int get_ItemCount();
    private void set_ItemCount(int value);
    public ITemplate`1<Panel> get_ItemsPanel();
    public void set_ItemsPanel(ITemplate`1<Panel> value);
    [NullableContextAttribute("2")]
public IEnumerable get_ItemsSource();
    [NullableContextAttribute("2")]
public void set_ItemsSource(IEnumerable value);
    [NullableContextAttribute("2")]
public IDataTemplate get_ItemTemplate();
    [NullableContextAttribute("2")]
public void set_ItemTemplate(IDataTemplate value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ItemsPresenter get_Presenter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Presenter(ItemsPresenter value);
    [NullableContextAttribute("2")]
public Panel get_ItemsPanelRoot();
    public ItemsSourceView get_ItemsView();
    [CompilerGeneratedAttribute]
private protected bool get_WrapFocus();
    [CompilerGeneratedAttribute]
private protected void set_WrapFocus(bool value);
    private sealed virtual override void Avalonia.LogicalTree.IChildIndexProvider.add_ChildIndexChanged(EventHandler`1<ChildIndexChangedEventArgs> value);
    private sealed virtual override void Avalonia.LogicalTree.IChildIndexProvider.remove_ChildIndexChanged(EventHandler`1<ChildIndexChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ContainerPrepared(EventHandler`1<ContainerPreparedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ContainerPrepared(EventHandler`1<ContainerPreparedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ContainerIndexChanged(EventHandler`1<ContainerIndexChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ContainerIndexChanged(EventHandler`1<ContainerIndexChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ContainerClearing(EventHandler`1<ContainerClearingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ContainerClearing(EventHandler`1<ContainerClearingEventArgs> value);
    [CompilerGeneratedAttribute]
protected static object get_DefaultRecycleKey();
    [NullableContextAttribute("2")]
public Control ContainerFromIndex(int index);
    public Control ContainerFromItem(object item);
    public int IndexFromContainer(Control container);
    public object ItemFromContainer(Control container);
    public IEnumerable`1<Control> GetRealizedContainers();
    public void ScrollIntoView(int index);
    public void ScrollIntoView(object item);
    [ObsoleteAttribute("Typo, use ItemsControlFromItemContainer instead")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static ItemsControl ItemsControlFromItemContaner(Control container);
    public static ItemsControl ItemsControlFromItemContainer(Control container);
    [NullableContextAttribute("2")]
protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    protected internal virtual void PrepareContainerForItemOverride(Control container, object item, int index);
    protected internal virtual void ContainerForItemPreparedOverride(Control container, object item, int index);
    protected virtual void ContainerIndexChangedOverride(Control container, int oldIndex, int newIndex);
    protected internal virtual void ClearContainerForItemOverride(Control container);
    [NullableContextAttribute("2")]
protected internal virtual bool NeedsContainerOverride(object item, int index, Object& recycleKey);
    [NullableContextAttribute("2")]
protected bool NeedsContainer(object item, Object& recycleKey);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected void RefreshContainers();
    private protected virtual void OnItemsViewCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
private protected virtual ItemContainerGenerator CreateItemContainerGenerator();
    internal void AddLogicalChild(Control c);
    internal void RemoveLogicalChild(Control c);
    internal void RegisterItemsPresenter(ItemsPresenter presenter);
    internal void PrepareItemContainer(Control container, object item, int index);
    internal void ItemContainerPrepared(Control container, object item, int index);
    internal void ItemContainerIndexChanged(Control container, int oldIndex, int newIndex);
    internal void ClearItemContainer(Control container);
    [NullableContextAttribute("2")]
private void AddControlItemsToLogicalChildren(IEnumerable items);
    private void SetIfUnset(AvaloniaObject target, StyledProperty`1<T> property, T value);
    [NullableContextAttribute("2")]
private void RemoveControlItemsFromLogicalChildren(IEnumerable items);
    [NullableContextAttribute("2")]
private IDataTemplate GetEffectiveItemTemplate();
    private void UpdatePseudoClasses();
    [NullableContextAttribute("2")]
protected static IInputElement GetNextControl(INavigableContainer container, NavigationDirection direction, IInputElement from, bool wrap);
    private sealed virtual override int Avalonia.LogicalTree.IChildIndexProvider.GetChildIndex(ILogical child);
    private sealed virtual override bool Avalonia.LogicalTree.IChildIndexProvider.TryGetTotalCount(Int32& count);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Avalonia.Controls.ItemsSourceView : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static ItemsSourceView <Empty>k__BackingField;
    [NullableAttribute("1")]
private IList _source;
    private NotifyCollectionChangedEventHandler _collectionChanged;
    private NotifyCollectionChangedEventHandler _preCollectionChanged;
    private NotifyCollectionChangedEventHandler _postCollectionChanged;
    private bool _listening;
    [NullableAttribute("1")]
public static ItemsSourceView Empty { get; }
    public int Count { get; }
    [NullableAttribute("1")]
public IList Source { get; }
    public object Item { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    internal bool HasKeyIndexMapping { get; }
    [NullableContextAttribute("1")]
private protected ItemsSourceView(IEnumerable source);
    private static ItemsSourceView();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static ItemsSourceView get_Empty();
    public sealed virtual int get_Count();
    [NullableContextAttribute("1")]
public IList get_Source();
    public sealed virtual object get_Item(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [NullableContextAttribute("1")]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    internal bool get_HasKeyIndexMapping();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    internal void add_PreCollectionChanged(NotifyCollectionChangedEventHandler value);
    internal void remove_PreCollectionChanged(NotifyCollectionChangedEventHandler value);
    internal void add_PostCollectionChanged(NotifyCollectionChangedEventHandler value);
    internal void remove_PostCollectionChanged(NotifyCollectionChangedEventHandler value);
    public object GetAt(int index);
    public sealed virtual bool Contains(object item);
    public sealed virtual int IndexOf(object item);
    [NullableContextAttribute("1")]
public static ItemsSourceView GetOrCreate(IEnumerable items);
    public static ItemsSourceView`1<T> GetOrCreate(IEnumerable items);
    [NullableContextAttribute("1")]
public static ItemsSourceView`1<T> GetOrCreate(IEnumerable`1<T> items);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Controls.Utils.ICollectionChangedListener.PreChanged(INotifyCollectionChanged sender, NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Controls.Utils.ICollectionChangedListener.Changed(INotifyCollectionChanged sender, NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Controls.Utils.ICollectionChangedListener.PostChanged(INotifyCollectionChanged sender, NotifyCollectionChangedEventArgs e);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    [NullableContextAttribute("1")]
internal string KeyFromIndex(int index);
    [NullableContextAttribute("1")]
private protected void RaiseCollectionChanged(NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
[MemberNotNullAttribute("_source")]
private protected void SetSource(IEnumerable source);
    private void AddListenerIfNecessary();
    private void RemoveListenerIfNecessary();
    [DoesNotReturnAttribute]
private static int ThrowReadOnly();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Avalonia.Controls.ItemsSourceView/<<GetEnumerator>g__EnumerateItems|43_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerator`1<object> <GetEnumerator>g__EnumerateItems|43_0(IList list);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Avalonia.Controls.ItemsSourceView`1 : ItemsSourceView {
    [CompilerGeneratedAttribute]
private static ItemsSourceView`1<T> <Empty>k__BackingField;
    public static ItemsSourceView`1<T> Empty { get; }
    public T Item { get; }
    internal ItemsSourceView`1(IEnumerable`1<T> source);
    internal ItemsSourceView`1(IEnumerable source);
    private static ItemsSourceView`1();
    [CompilerGeneratedAttribute]
public static ItemsSourceView`1<T> get_Empty();
    public sealed virtual T get_Item(int index);
    public T GetAt(int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Avalonia.Controls.ItemsSourceView`1/<<GetEnumerator>g__EnumerateItems|8_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerator`1<T> <GetEnumerator>g__EnumerateItems|8_0(IList list);
}
[NullableContextAttribute("1")]
[UnstableAttribute]
[PrivateApiAttribute]
internal interface Avalonia.Controls.IToolTipService {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void Update(IInputRoot root, Visual candidateToolTipHost);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Label : ContentControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IInputElement> TargetProperty;
    [NullableAttribute("2")]
[ResolveByNameAttribute]
public IInputElement Target { get; public set; }
    private static Label();
    [NullableContextAttribute("2")]
public IInputElement get_Target();
    [NullableContextAttribute("2")]
public void set_Target(IInputElement value);
    private void LabelActivated(RoutedEventArgs args);
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.LayoutTransformControl : Decorator {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ITransform> LayoutTransformProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> UseRenderTransformProperty;
    private IDisposable _renderTransformChangedEvent;
    private static double AcceptableDelta;
    private static int DecimalsAfterRound;
    private Size _childActualSize;
    [NullableAttribute("1")]
private MatrixTransform _matrixTransform;
    private Matrix _transformation;
    private IDisposable _transformChangedEvent;
    public ITransform LayoutTransform { get; public set; }
    public bool UseRenderTransform { get; public set; }
    public Control TransformRoot { get; }
    private static LayoutTransformControl();
    public ITransform get_LayoutTransform();
    public void set_LayoutTransform(ITransform value);
    public bool get_UseRenderTransform();
    public void set_UseRenderTransform(bool value);
    public Control get_TransformRoot();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    [NullableContextAttribute("1")]
private void OnUseRenderTransformPropertyChanged(AvaloniaPropertyChangedEventArgs e);
    private void OnChildChanged();
    private static bool IsSizeSmaller(Size a, Size b);
    private static Matrix RoundMatrix(Matrix matrix, int decimals);
    private void ApplyLayoutTransform();
    private Size ComputeLargestTransformedSize(Size arrangeBounds);
    [NullableContextAttribute("1")]
private void OnLayoutTransformChanged(AvaloniaPropertyChangedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_ScrollViewer", "Avalonia.Controls.Primitives.IScrollable")]
public class Avalonia.Controls.ListBox : SelectingItemsControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FuncTemplate`1<Panel> DefaultPanel;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<ListBox, IScrollable> ScrollProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<SelectingItemsControl, IList> SelectedItemsProperty;
    [NullableAttribute("1")]
public static DirectProperty`2<SelectingItemsControl, ISelectionModel> SelectionProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<SelectionMode> SelectionModeProperty;
    private IScrollable _scroll;
    public IScrollable Scroll { get; private set; }
    public IList SelectedItems { get; public set; }
    [NullableAttribute("1")]
public ISelectionModel Selection { get; public set; }
    public SelectionMode SelectionMode { get; public set; }
    private static ListBox();
    public IScrollable get_Scroll();
    private void set_Scroll(IScrollable value);
    public IList get_SelectedItems();
    public void set_SelectedItems(IList value);
    [NullableContextAttribute("1")]
public ISelectionModel get_Selection();
    [NullableContextAttribute("1")]
public void set_Selection(ISelectionModel value);
    public SelectionMode get_SelectionMode();
    public void set_SelectionMode(SelectionMode value);
    public void SelectAll();
    public void UnselectAll();
    protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    protected internal virtual bool NeedsContainerOverride(object item, int index, Object& recycleKey);
    [NullableContextAttribute("1")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [NullableContextAttribute("1")]
internal bool UpdateSelectionFromPointerEvent(Control source, PointerEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.ListBoxItem : ContentControl {
    public static StyledProperty`1<bool> IsSelectedProperty;
    private static Point s_invalidPoint;
    private Point _pointerDownPoint;
    public bool IsSelected { get; public set; }
    private static ListBoxItem();
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
}
public enum Avalonia.Controls.Location : Enum {
    public int value__;
    public static Location Left;
    public static Location Right;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.MacOSProperties : object {
    public static AttachedProperty`1<bool> IsTemplateIconProperty;
    private static MacOSProperties();
    public static void SetIsTemplateIcon(TrayIcon obj, bool value);
    public static bool GetIsTemplateIcon(TrayIcon obj);
    private static void TrayIconIsTemplateIconChanged(TrayIcon trayIcon, AvaloniaPropertyChangedEventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.MaskedTextBox : TextBox {
    public static StyledProperty`1<bool> AsciiOnlyProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<CultureInfo> CultureProperty;
    public static StyledProperty`1<bool> HidePromptOnLeaveProperty;
    public static DirectProperty`2<MaskedTextBox, Nullable`1<bool>> MaskCompletedProperty;
    public static DirectProperty`2<MaskedTextBox, Nullable`1<bool>> MaskFullProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> MaskProperty;
    public static StyledProperty`1<char> PromptCharProperty;
    public static StyledProperty`1<bool> ResetOnPromptProperty;
    public static StyledProperty`1<bool> ResetOnSpaceProperty;
    private bool _ignoreTextChanges;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MaskedTextProvider <MaskProvider>k__BackingField;
    public bool AsciiOnly { get; public set; }
    [NullableAttribute("2")]
public CultureInfo Culture { get; public set; }
    public bool HidePromptOnLeave { get; public set; }
    [NullableAttribute("2")]
public string Mask { get; public set; }
    public Nullable`1<bool> MaskCompleted { get; }
    public Nullable`1<bool> MaskFull { get; }
    [NullableAttribute("2")]
public MaskedTextProvider MaskProvider { get; private set; }
    public char PromptChar { get; public set; }
    public bool ResetOnPrompt { get; public set; }
    public bool ResetOnSpace { get; public set; }
    protected Type StyleKeyOverride { get; }
    private static MaskedTextBox();
    public MaskedTextBox(MaskedTextProvider maskedTextProvider);
    private static char CoercePasswordChar(AvaloniaObject sender, char baseValue);
    private static char CoercePromptChar(AvaloniaObject sender, char baseValue);
    public bool get_AsciiOnly();
    public void set_AsciiOnly(bool value);
    [NullableContextAttribute("2")]
public CultureInfo get_Culture();
    [NullableContextAttribute("2")]
public void set_Culture(CultureInfo value);
    public bool get_HidePromptOnLeave();
    public void set_HidePromptOnLeave(bool value);
    [NullableContextAttribute("2")]
public string get_Mask();
    [NullableContextAttribute("2")]
public void set_Mask(string value);
    public Nullable`1<bool> get_MaskCompleted();
    public Nullable`1<bool> get_MaskFull();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MaskedTextProvider get_MaskProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_MaskProvider(MaskedTextProvider value);
    public char get_PromptChar();
    public void set_PromptChar(char value);
    public bool get_ResetOnPrompt();
    public void set_ResetOnPrompt(bool value);
    public bool get_ResetOnSpace();
    public void set_ResetOnSpace(bool value);
    protected virtual Type get_StyleKeyOverride();
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    [AsyncStateMachineAttribute("Avalonia.Controls.MaskedTextBox/<OnKeyDown>d__47")]
protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnTextInput(TextInputEventArgs e);
    private int GetNextCharacterPosition(int startPosition);
    [NullableContextAttribute("2")]
private void RefreshText(MaskedTextProvider provider, int position);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(KeyEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnPropertyChanged>g__UpdateMaskProvider|49_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Menu : MenuBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FuncTemplate`1<Panel> DefaultPanel;
    public Menu(IMenuInteractionHandler interactionHandler);
    private static Menu();
    public virtual void Close();
    public virtual void Open();
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected internal virtual void PrepareContainerForItemOverride(Control element, object item, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.MenuBase : SelectingItemsControl {
    public static DirectProperty`2<MenuBase, bool> IsOpenProperty;
    public static RoutedEvent`1<RoutedEventArgs> OpenedEvent;
    public static RoutedEvent`1<RoutedEventArgs> ClosedEvent;
    private bool _isOpen;
    [CompilerGeneratedAttribute]
private IMenuInteractionHandler <InteractionHandler>k__BackingField;
    public bool IsOpen { get; protected set; }
    private IMenuInteractionHandler Avalonia.Controls.IMenu.InteractionHandler { get; }
    [NullableAttribute("2")]
private IRenderRoot Avalonia.Controls.IMenu.VisualRoot { get; }
    [NullableAttribute("2")]
private IMenuItem Avalonia.Controls.IMenuElement.SelectedItem { get; private set; }
    private IEnumerable`1<IMenuItem> Avalonia.Controls.IMenuElement.SubItems { get; }
    protected internal IMenuInteractionHandler InteractionHandler { get; }
    protected MenuBase(IMenuInteractionHandler interactionHandler);
    private static MenuBase();
    public sealed virtual bool get_IsOpen();
    protected void set_IsOpen(bool value);
    private sealed virtual override IMenuInteractionHandler Avalonia.Controls.IMenu.get_InteractionHandler();
    [NullableContextAttribute("2")]
private sealed virtual override IRenderRoot Avalonia.Controls.IMenu.get_VisualRoot();
    [NullableContextAttribute("2")]
private sealed virtual override IMenuItem Avalonia.Controls.IMenuElement.get_SelectedItem();
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Controls.IMenuElement.set_SelectedItem(IMenuItem value);
    private sealed virtual override IEnumerable`1<IMenuItem> Avalonia.Controls.IMenuElement.get_SubItems();
    [CompilerGeneratedAttribute]
protected internal IMenuInteractionHandler get_InteractionHandler();
    public void add_Opened(EventHandler`1<RoutedEventArgs> value);
    public void remove_Opened(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void add_Closed(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void remove_Closed(EventHandler`1<RoutedEventArgs> value);
    public abstract virtual void Close();
    public abstract virtual void Open();
    private sealed virtual override bool Avalonia.Controls.IMenuElement.MoveSelection(NavigationDirection direction, bool wrap);
    [NullableContextAttribute("2")]
protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    [NullableContextAttribute("2")]
protected internal virtual bool NeedsContainerOverride(object item, int index, Object& recycleKey);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnSubmenuOpened(RoutedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.MenuFlyout : PopupFlyoutBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IEnumerable> ItemsSourceProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> ItemTemplateProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ControlTheme> ItemContainerThemeProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ControlTheme> FlyoutPresenterThemeProperty;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ItemCollection <Items>k__BackingField;
    private Classes _classes;
    [NullableAttribute("1")]
public Classes FlyoutPresenterClasses { get; }
    [NullableAttribute("1")]
[ContentAttribute]
public ItemCollection Items { get; }
    public IEnumerable ItemsSource { get; public set; }
    public IDataTemplate ItemTemplate { get; public set; }
    public ControlTheme ItemContainerTheme { get; public set; }
    public ControlTheme FlyoutPresenterTheme { get; public set; }
    private static MenuFlyout();
    [NullableContextAttribute("1")]
public Classes get_FlyoutPresenterClasses();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ItemCollection get_Items();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public IDataTemplate get_ItemTemplate();
    public void set_ItemTemplate(IDataTemplate value);
    public ControlTheme get_ItemContainerTheme();
    public void set_ItemContainerTheme(ControlTheme value);
    public ControlTheme get_FlyoutPresenterTheme();
    public void set_FlyoutPresenterTheme(ControlTheme value);
    [NullableContextAttribute("1")]
protected virtual Control CreatePresenter();
    [NullableContextAttribute("1")]
protected virtual void OnOpening(CancelEventArgs args);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.MenuFlyoutPresenter : MenuBase {
    public MenuFlyoutPresenter(IMenuInteractionHandler menuInteractionHandler);
    public virtual void Close();
    public virtual void Open();
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_Popup", "Avalonia.Controls.Primitives.Popup")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.MenuItem : HeaderedSelectingItemsControl {
    [NullableAttribute("2")]
private EventHandler _canExecuteChangeHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ICommand> CommandProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<KeyGesture> HotKeyProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> CommandParameterProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> IconProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<KeyGesture> InputGestureProperty;
    public static StyledProperty`1<bool> IsSubMenuOpenProperty;
    public static StyledProperty`1<bool> StaysOpenOnClickProperty;
    public static StyledProperty`1<MenuItemToggleType> ToggleTypeProperty;
    public static StyledProperty`1<bool> IsCheckedProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> GroupNameProperty;
    public static RoutedEvent`1<RoutedEventArgs> ClickEvent;
    public static RoutedEvent`1<RoutedEventArgs> PointerEnteredItemEvent;
    public static RoutedEvent`1<RoutedEventArgs> PointerExitedItemEvent;
    public static RoutedEvent`1<RoutedEventArgs> SubmenuOpenedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FuncTemplate`1<Panel> DefaultPanel;
    private bool _commandCanExecute;
    private bool _commandBindingError;
    [NullableAttribute("2")]
private Popup _popup;
    [NullableAttribute("2")]
private KeyGesture _hotkey;
    private bool _isEmbeddedInMenu;
    private EventHandler CanExecuteChangedHandler { get; }
    [NullableAttribute("2")]
public ICommand Command { get; public set; }
    [NullableAttribute("2")]
public KeyGesture HotKey { get; public set; }
    [NullableAttribute("2")]
public object CommandParameter { get; public set; }
    [NullableAttribute("2")]
public object Icon { get; public set; }
    [NullableAttribute("2")]
public KeyGesture InputGesture { get; public set; }
    public bool IsSelected { get; public set; }
    public bool IsSubMenuOpen { get; public set; }
    public bool StaysOpenOnClick { get; public set; }
    public MenuItemToggleType ToggleType { get; public set; }
    public bool IsChecked { get; public set; }
    private bool Avalonia.Controls.IRadioButton.IsChecked { get; private set; }
    [NullableAttribute("2")]
public string GroupName { get; public set; }
    public bool HasSubMenu { get; }
    public bool IsTopLevel { get; }
    private bool Avalonia.Controls.IMenuItem.IsPointerOverSubMenu { get; }
    [NullableAttribute("2")]
private IMenuElement Avalonia.Controls.IMenuItem.Parent { get; }
    protected bool IsEnabledCore { get; }
    [NullableAttribute("2")]
private IMenuItem Avalonia.Controls.IMenuElement.SelectedItem { get; private set; }
    private IEnumerable`1<IMenuItem> Avalonia.Controls.IMenuElement.SubItems { get; }
    [NullableAttribute("2")]
private IMenuInteractionHandler MenuInteractionHandler { get; }
    private static MenuItem();
    private EventHandler get_CanExecuteChangedHandler();
    public sealed virtual void add_Click(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void remove_Click(EventHandler`1<RoutedEventArgs> value);
    public void add_PointerEnteredItem(EventHandler`1<RoutedEventArgs> value);
    public void remove_PointerEnteredItem(EventHandler`1<RoutedEventArgs> value);
    public void add_PointerExitedItem(EventHandler`1<RoutedEventArgs> value);
    public void remove_PointerExitedItem(EventHandler`1<RoutedEventArgs> value);
    public void add_SubmenuOpened(EventHandler`1<RoutedEventArgs> value);
    public void remove_SubmenuOpened(EventHandler`1<RoutedEventArgs> value);
    [NullableContextAttribute("2")]
public sealed virtual ICommand get_Command();
    [NullableContextAttribute("2")]
public void set_Command(ICommand value);
    [NullableContextAttribute("2")]
public KeyGesture get_HotKey();
    [NullableContextAttribute("2")]
public void set_HotKey(KeyGesture value);
    [NullableContextAttribute("2")]
public sealed virtual object get_CommandParameter();
    [NullableContextAttribute("2")]
public void set_CommandParameter(object value);
    [NullableContextAttribute("2")]
public object get_Icon();
    [NullableContextAttribute("2")]
public void set_Icon(object value);
    [NullableContextAttribute("2")]
public KeyGesture get_InputGesture();
    [NullableContextAttribute("2")]
public void set_InputGesture(KeyGesture value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public sealed virtual bool get_IsSubMenuOpen();
    public sealed virtual void set_IsSubMenuOpen(bool value);
    public sealed virtual bool get_StaysOpenOnClick();
    public sealed virtual void set_StaysOpenOnClick(bool value);
    public sealed virtual MenuItemToggleType get_ToggleType();
    public void set_ToggleType(MenuItemToggleType value);
    public sealed virtual bool get_IsChecked();
    public sealed virtual void set_IsChecked(bool value);
    private sealed virtual override bool Avalonia.Controls.IRadioButton.get_IsChecked();
    private sealed virtual override void Avalonia.Controls.IRadioButton.set_IsChecked(bool value);
    [NullableContextAttribute("2")]
public sealed virtual string get_GroupName();
    [NullableContextAttribute("2")]
public void set_GroupName(string value);
    public sealed virtual bool get_HasSubMenu();
    public sealed virtual bool get_IsTopLevel();
    private sealed virtual override bool Avalonia.Controls.IMenuItem.get_IsPointerOverSubMenu();
    [NullableContextAttribute("2")]
private sealed virtual override IMenuElement Avalonia.Controls.IMenuItem.get_Parent();
    protected virtual bool get_IsEnabledCore();
    private sealed virtual override bool Avalonia.Controls.IMenuElement.MoveSelection(NavigationDirection direction, bool wrap);
    [NullableContextAttribute("2")]
private sealed virtual override IMenuItem Avalonia.Controls.IMenuElement.get_SelectedItem();
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Controls.IMenuElement.set_SelectedItem(IMenuItem value);
    private sealed virtual override IEnumerable`1<IMenuItem> Avalonia.Controls.IMenuElement.get_SubItems();
    [NullableContextAttribute("2")]
private IMenuInteractionHandler get_MenuInteractionHandler();
    public sealed virtual void Open();
    public sealed virtual void Close();
    private sealed virtual override void Avalonia.Controls.IMenuItem.RaiseClick();
    [NullableContextAttribute("2")]
protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    [NullableContextAttribute("2")]
protected internal virtual bool NeedsContainerOverride(object item, int index, Object& recycleKey);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    protected virtual void OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual void OnClick(RoutedEventArgs e);
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPointerEntered(PointerEventArgs e);
    protected virtual void OnPointerExited(PointerEventArgs e);
    protected virtual void OnSubmenuOpened(RoutedEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
    private void CloseSubmenus();
    private static void CommandChanged(AvaloniaPropertyChangedEventArgs e);
    private static void CommandParameterChanged(AvaloniaPropertyChangedEventArgs e);
    private void CanExecuteChanged(object sender, EventArgs e);
    private void TryUpdateCanExecute();
    [NullableContextAttribute("2")]
private void TryUpdateCanExecute(ICommand command, object parameter);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void GroupNameChanged(AvaloniaPropertyChangedEventArgs e);
    private void ToggleTypeChanged(AvaloniaPropertyChangedEventArgs e);
    private void IsCheckedChanged(AvaloniaPropertyChangedEventArgs e);
    private void HeaderChanged(AvaloniaPropertyChangedEventArgs e);
    private void IconChanged(AvaloniaPropertyChangedEventArgs e);
    private void IsSelectedChanged(AvaloniaPropertyChangedEventArgs e);
    private void SubMenuOpenChanged(AvaloniaPropertyChangedEventArgs e);
    private void PopupOpened(object sender, EventArgs e);
    private void PopupClosed(object sender, EventArgs e);
    private sealed virtual override void Avalonia.Input.ICommandSource.CanExecuteChanged(object sender, EventArgs e);
    private sealed virtual override void Avalonia.Input.IClickableControl.RaiseClick();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Controls.MenuItemAccessKeyHandler : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<string, IInputElement>> _registered;
    private IInputRoot _owner;
    [CompilerGeneratedAttribute]
private IMainMenu <MainMenu>k__BackingField;
    public IMainMenu MainMenu { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IMainMenu get_MainMenu();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MainMenu(IMainMenu value);
    [NullableContextAttribute("1")]
public sealed virtual void SetOwner(IInputRoot owner);
    [NullableContextAttribute("1")]
public sealed virtual void Register(char accessKey, IInputElement element);
    [NullableContextAttribute("1")]
public sealed virtual void Unregister(IInputElement element);
    [NullableContextAttribute("1")]
protected virtual void OnTextInput(object sender, TextInputEventArgs e);
}
public enum Avalonia.Controls.MenuItemToggleType : Enum {
    public int value__;
    public static MenuItemToggleType None;
    public static MenuItemToggleType CheckBox;
    public static MenuItemToggleType Radio;
}
public static class Avalonia.Controls.Mixins.PressedMixin : object {
    public static void Attach();
    [NullableContextAttribute("1")]
private static void HandlePointerPressed(TControl sender, PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
private static void HandlePointerReleased(TControl sender);
}
public static class Avalonia.Controls.Mixins.SelectableMixin : object {
    [NullableContextAttribute("1")]
public static void Attach(AvaloniaProperty`1<bool> isSelected);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.NativeControlHost : Control {
    private TopLevel _currentRoot;
    private INativeControlHostImpl _currentHost;
    private INativeControlHostControlTopLevelAttachment _attachment;
    private IPlatformHandle _nativeControlHandle;
    private bool _queuedForDestruction;
    private bool _queuedForMoveResize;
    [NullableAttribute("1")]
private List`1<Visual> _propertyChangedSubscriptions;
    [CompilerGeneratedAttribute]
private EventHandler NativeControlHandleChanged;
    internal IPlatformHandle NativeControlHandle { get; internal set; }
    private static NativeControlHost();
    internal IPlatformHandle get_NativeControlHandle();
    internal void set_NativeControlHandle(IPlatformHandle value);
    [CompilerGeneratedAttribute]
internal void add_NativeControlHandleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_NativeControlHandleChanged(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    [NullableContextAttribute("1")]
private static void OnFlowDirectionChanged(NativeControlHost nativeControlHost, AvaloniaPropertyChangedEventArgs propertyChangedEventArgs);
    [NullableContextAttribute("1")]
private void PropertyChangedHandler(object sender, AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    private void UpdateHost();
    private Nullable`1<Rect> GetAbsoluteBounds();
    private void EnqueueForMoveResize();
    public bool TryUpdateNativeControlPosition();
    private void CheckDestruction();
    [NullableContextAttribute("1")]
protected virtual IPlatformHandle CreateNativeControlCore(IPlatformHandle parent);
    private void DestroyNativeControl();
    [NullableContextAttribute("1")]
protected virtual void DestroyNativeControlCore(IPlatformHandle control);
    [NullableContextAttribute("1")]
protected virtual AutomationPeer OnCreateAutomationPeer();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IPlatformHandle <UpdateHost>b__18_0(IPlatformHandle parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.NativeMenu : AvaloniaObject {
    private AvaloniaList`1<NativeMenuItemBase> _items;
    [NullableAttribute("2")]
private NativeMenuItem _parent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> NeedsUpdate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Opening;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Closed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<NativeMenu, NativeMenuItem> ParentProperty;
    public static AttachedProperty`1<bool> IsNativeMenuExportedProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AttachedProperty`1<NativeMenuInfo> s_nativeMenuInfoProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<NativeMenu> MenuProperty;
    [ContentAttribute]
public IList`1<NativeMenuItemBase> Items { get; }
    [NullableAttribute("2")]
public NativeMenuItem Parent { get; internal set; }
    private static NativeMenu();
    public IList`1<NativeMenuItemBase> get_Items();
    [CompilerGeneratedAttribute]
public void add_NeedsUpdate(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_NeedsUpdate(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Opening(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Opening(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler`1<EventArgs> value);
    private sealed virtual override void Avalonia.Controls.INativeMenuExporterEventsImplBridge.RaiseNeedsUpdate();
    private sealed virtual override void Avalonia.Controls.INativeMenuExporterEventsImplBridge.RaiseOpening();
    private sealed virtual override void Avalonia.Controls.INativeMenuExporterEventsImplBridge.RaiseClosed();
    private sealed virtual override void Avalonia.Collections.IAvaloniaListItemValidator<Avalonia.Controls.NativeMenuItemBase>.Validate(NativeMenuItemBase item);
    private void ItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("2")]
public NativeMenuItem get_Parent();
    [NullableContextAttribute("2")]
internal void set_Parent(NativeMenuItem value);
    public void Add(NativeMenuItemBase item);
    public sealed virtual IEnumerator`1<NativeMenuItemBase> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static bool GetIsNativeMenuExported(TopLevel tl);
    private static NativeMenuInfo GetInfo(TopLevel target);
    private static void SetIsNativeMenuExported(TopLevel tl, bool value);
    public static void SetMenu(AvaloniaObject o, NativeMenu menu);
    public static NativeMenu GetMenu(AvaloniaObject o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_NativeMenuPresenter", "Avalonia.Controls.MenuBase")]
public class Avalonia.Controls.NativeMenuBar : TemplatedControl {
    [UnstableAttribute("To be removed in 12.0, NativeMenuBar now has a default template")]
public static AttachedProperty`1<bool> EnableMenuItemClickForwardingProperty;
    [NullableAttribute("2")]
private MenuBase _menu;
    [NullableAttribute("2")]
private IDisposable _subscriptions;
    private static NativeMenuBar();
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    [UnstableAttribute("To be removed in 12.0, NativeMenuBar now has a default template.")]
[ObsoleteAttribute("To be removed in 12.0, NativeMenuBar now has a default template.")]
public static void SetEnableMenuItemClickForwarding(MenuItem menuItem, bool enable);
    private static void OnMenuItemClick(object sender, RoutedEventArgs e);
    private void SubscribeToToplevel(TopLevel topLevel, MenuBase menu);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.NativeMenuBarPresenter : Menu {
    protected Type StyleKeyOverride { get; }
    protected virtual Type get_StyleKeyOverride();
    [NullableContextAttribute("2")]
internal static Control CreateContainerForNativeItem(object item, int index, object recycleKey);
    [NullableContextAttribute("2")]
protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    [CompilerGeneratedAttribute]
internal static void <CreateContainerForNativeItem>g__MenuItemOnClick|2_0(object sender, RoutedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.NativeMenuItem : NativeMenuItemBase {
    [NullableAttribute("1")]
private CanExecuteChangedSubscriber _canExecuteChangedSubscriber;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<NativeMenu> MenuProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Bitmap> IconProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> HeaderProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> ToolTipProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<KeyGesture> GestureProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> IsCheckedProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<NativeMenuItemToggleType> ToggleTypeProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ICommand> CommandProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> CommandParameterProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> IsEnabledProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> IsVisibleProperty;
    [CompilerGeneratedAttribute]
private EventHandler Click;
    [ContentAttribute]
public NativeMenu Menu { get; public set; }
    public Bitmap Icon { get; public set; }
    public string Header { get; public set; }
    public string ToolTip { get; public set; }
    public KeyGesture Gesture { get; public set; }
    public bool IsChecked { get; public set; }
    public NativeMenuItemToggleType ToggleType { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsVisible { get; public set; }
    public bool HasClickHandlers { get; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    [NullableContextAttribute("1")]
public NativeMenuItem(string header);
    private static NativeMenuItem();
    public NativeMenu get_Menu();
    public void set_Menu(NativeMenu value);
    private static NativeMenu CoerceMenu(AvaloniaObject sender, NativeMenu value);
    public Bitmap get_Icon();
    public void set_Icon(Bitmap value);
    public string get_Header();
    public void set_Header(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public KeyGesture get_Gesture();
    public void set_Gesture(KeyGesture value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public NativeMenuItemToggleType get_ToggleType();
    public void set_ToggleType(NativeMenuItemToggleType value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    private void CanExecuteChanged();
    public bool get_HasClickHandlers();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    [CompilerGeneratedAttribute]
public void add_Click(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Click(EventHandler value);
    private sealed virtual override void Avalonia.Controls.INativeMenuItemExporterEventsImplBridge.RaiseClicked();
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    [NullableContextAttribute("1")]
internal virtual void BuildDebugDisplay(StringBuilder builder, bool includeContent);
    [CompilerGeneratedAttribute]
private void <CanExecuteChanged>b__43_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.NativeMenuItemBase : AvaloniaObject {
    private NativeMenu _parent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<NativeMenuItemBase, NativeMenu> ParentProperty;
    public NativeMenu Parent { get; internal set; }
    private static NativeMenuItemBase();
    public NativeMenu get_Parent();
    internal void set_Parent(NativeMenu value);
}
public class Avalonia.Controls.NativeMenuItemSeparator : NativeMenuItem {
}
public enum Avalonia.Controls.NativeMenuItemToggleType : Enum {
    public int value__;
    public static NativeMenuItemToggleType None;
    public static NativeMenuItemToggleType CheckBox;
    public static NativeMenuItemToggleType Radio;
}
[NullableContextAttribute("1")]
[NotClientImplementableAttribute]
public interface Avalonia.Controls.Notifications.IManagedNotificationManager {
    public abstract virtual void Show(object content);
    public abstract virtual void Close(object content);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[NotClientImplementableAttribute]
public interface Avalonia.Controls.Notifications.INotification {
    public string Title { get; }
    public string Message { get; }
    public NotificationType Type { get; }
    public TimeSpan Expiration { get; }
    public Action OnClick { get; }
    public Action OnClose { get; }
    public abstract virtual string get_Title();
    public abstract virtual string get_Message();
    public abstract virtual NotificationType get_Type();
    public abstract virtual TimeSpan get_Expiration();
    public abstract virtual Action get_OnClick();
    public abstract virtual Action get_OnClose();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[NotClientImplementableAttribute]
public interface Avalonia.Controls.Notifications.INotificationManager {
    public abstract virtual void Show(INotification notification);
    public abstract virtual void Close(INotification notification);
    public abstract virtual void CloseAll();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Notifications.Notification : object {
    private string _title;
    private string _message;
    [CompilerGeneratedAttribute]
private NotificationType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnClick>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnClose>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Title { get; public set; }
    public string Message { get; public set; }
    public NotificationType Type { get; public set; }
    public TimeSpan Expiration { get; public set; }
    public Action OnClick { get; public set; }
    public Action OnClose { get; public set; }
    public Notification(string title, string message, NotificationType type, Nullable`1<TimeSpan> expiration, Action onClick, Action onClose);
    public sealed virtual string get_Title();
    public void set_Title(string value);
    public sealed virtual string get_Message();
    public void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual NotificationType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(NotificationType value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_OnClose();
    [CompilerGeneratedAttribute]
public void set_OnClose(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Notifications.NotificationCard : ContentControl {
    private bool _isClosing;
    public static DirectProperty`2<NotificationCard, bool> IsClosingProperty;
    public static StyledProperty`1<bool> IsClosedProperty;
    public static StyledProperty`1<NotificationType> NotificationTypeProperty;
    public static RoutedEvent`1<RoutedEventArgs> NotificationClosedEvent;
    public static AttachedProperty`1<bool> CloseOnClickProperty;
    public bool IsClosing { get; private set; }
    public bool IsClosed { get; public set; }
    public NotificationType NotificationType { get; public set; }
    private static NotificationCard();
    public bool get_IsClosing();
    private void set_IsClosing(bool value);
    public bool get_IsClosed();
    public void set_IsClosed(bool value);
    public NotificationType get_NotificationType();
    public void set_NotificationType(NotificationType value);
    public void add_NotificationClosed(EventHandler`1<RoutedEventArgs> value);
    public void remove_NotificationClosed(EventHandler`1<RoutedEventArgs> value);
    public static bool GetCloseOnClick(Button obj);
    public static void SetCloseOnClick(Button obj, bool value);
    private static void OnCloseOnClickPropertyChanged(AvaloniaObject d, AvaloniaPropertyChangedEventArgs e);
    private static void Button_Click(object sender, RoutedEventArgs e);
    public void Close();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs e);
    private void UpdateNotificationType();
}
public enum Avalonia.Controls.Notifications.NotificationPosition : Enum {
    public int value__;
    public static NotificationPosition TopLeft;
    public static NotificationPosition TopRight;
    public static NotificationPosition BottomLeft;
    public static NotificationPosition BottomRight;
    public static NotificationPosition TopCenter;
    public static NotificationPosition BottomCenter;
}
public enum Avalonia.Controls.Notifications.NotificationType : Enum {
    public int value__;
    public static NotificationType Information;
    public static NotificationType Success;
    public static NotificationType Warning;
    public static NotificationType Error;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_Items", "Avalonia.Controls.Panel")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Notifications.WindowNotificationManager : TemplatedControl {
    [NullableAttribute("2")]
private IList _items;
    private Dictionary`2<object, NotificationCard> _notificationCards;
    public static StyledProperty`1<NotificationPosition> PositionProperty;
    public static StyledProperty`1<int> MaxItemsProperty;
    public NotificationPosition Position { get; public set; }
    public int MaxItems { get; public set; }
    [NullableContextAttribute("2")]
public WindowNotificationManager(TopLevel host);
    private static WindowNotificationManager();
    public NotificationPosition get_Position();
    public void set_Position(NotificationPosition value);
    public int get_MaxItems();
    public void set_MaxItems(int value);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    public sealed virtual void Show(INotification content);
    public sealed virtual void Show(object content);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Avalonia.Controls.Notifications.WindowNotificationManager/<Show>d__16")]
public void Show(object content, NotificationType type, Nullable`1<TimeSpan> expiration, Action onClick, Action onClose, String[] classes);
    public sealed virtual void Close(INotification notification);
    public sealed virtual void Close(object content);
    public sealed virtual void CloseAll();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    private void InstallFromTopLevel(TopLevel topLevel);
    private void TopLevelOnTemplateApplied(object sender, TemplateAppliedEventArgs e);
    private void UpdatePseudoClasses(NotificationPosition position);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_Spinner", "Avalonia.Controls.Spinner")]
[TemplatePartAttribute("PART_TextBox", "Avalonia.Controls.TextBox")]
public class Avalonia.Controls.NumericUpDown : TemplatedControl {
    public static StyledProperty`1<bool> AllowSpinProperty;
    public static StyledProperty`1<Location> ButtonSpinnerLocationProperty;
    public static StyledProperty`1<bool> ShowButtonSpinnerProperty;
    public static StyledProperty`1<bool> ClipValueToMinMaxProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<NumberFormatInfo> NumberFormatProperty;
    public static StyledProperty`1<string> FormatStringProperty;
    public static StyledProperty`1<decimal> IncrementProperty;
    public static StyledProperty`1<bool> IsReadOnlyProperty;
    public static StyledProperty`1<decimal> MaximumProperty;
    public static StyledProperty`1<decimal> MinimumProperty;
    public static StyledProperty`1<NumberStyles> ParsingNumberStyleProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> TextProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IValueConverter> TextConverterProperty;
    public static StyledProperty`1<Nullable`1<decimal>> ValueProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> WatermarkProperty;
    public static StyledProperty`1<HorizontalAlignment> HorizontalContentAlignmentProperty;
    public static StyledProperty`1<VerticalAlignment> VerticalContentAlignmentProperty;
    public static StyledProperty`1<TextAlignment> TextAlignmentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> InnerLeftContentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> InnerRightContentProperty;
    [NullableAttribute("2")]
private IDisposable _textBoxTextChangedSubscription;
    private bool _internalValueSet;
    private bool _isSyncingTextAndValueProperties;
    private bool _isTextChangedFromUI;
    private bool _isFocused;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Spinner <Spinner>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TextBox <TextBox>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SpinEventArgs> Spinned;
    public static RoutedEvent`1<NumericUpDownValueChangedEventArgs> ValueChangedEvent;
    [NullableAttribute("2")]
private Spinner Spinner { get; private set; }
    [NullableAttribute("2")]
private TextBox TextBox { get; private set; }
    public bool AllowSpin { get; public set; }
    public Location ButtonSpinnerLocation { get; public set; }
    public bool ShowButtonSpinner { get; public set; }
    public bool ClipValueToMinMax { get; public set; }
    [NullableAttribute("2")]
public NumberFormatInfo NumberFormat { get; public set; }
    public string FormatString { get; public set; }
    public decimal Increment { get; public set; }
    public bool IsReadOnly { get; public set; }
    public decimal Maximum { get; public set; }
    public decimal Minimum { get; public set; }
    public NumberStyles ParsingNumberStyle { get; public set; }
    [NullableAttribute("2")]
public string Text { get; public set; }
    [NullableAttribute("2")]
public IValueConverter TextConverter { get; public set; }
    public Nullable`1<decimal> Value { get; public set; }
    [NullableAttribute("2")]
public string Watermark { get; public set; }
    public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    public VerticalAlignment VerticalContentAlignment { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    [NullableAttribute("2")]
public object InnerLeftContent { get; public set; }
    [NullableAttribute("2")]
public object InnerRightContent { get; public set; }
    private static NumericUpDown();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Spinner get_Spinner();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Spinner(Spinner value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private TextBox get_TextBox();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_TextBox(TextBox value);
    public bool get_AllowSpin();
    public void set_AllowSpin(bool value);
    public Location get_ButtonSpinnerLocation();
    public void set_ButtonSpinnerLocation(Location value);
    public bool get_ShowButtonSpinner();
    public void set_ShowButtonSpinner(bool value);
    public bool get_ClipValueToMinMax();
    public void set_ClipValueToMinMax(bool value);
    [NullableContextAttribute("2")]
public NumberFormatInfo get_NumberFormat();
    [NullableContextAttribute("2")]
public void set_NumberFormat(NumberFormatInfo value);
    public string get_FormatString();
    public void set_FormatString(string value);
    public decimal get_Increment();
    public void set_Increment(decimal value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public decimal get_Maximum();
    public void set_Maximum(decimal value);
    public decimal get_Minimum();
    public void set_Minimum(decimal value);
    public NumberStyles get_ParsingNumberStyle();
    public void set_ParsingNumberStyle(NumberStyles value);
    [NullableContextAttribute("2")]
public string get_Text();
    [NullableContextAttribute("2")]
public void set_Text(string value);
    [NullableContextAttribute("2")]
public IValueConverter get_TextConverter();
    [NullableContextAttribute("2")]
public void set_TextConverter(IValueConverter value);
    public Nullable`1<decimal> get_Value();
    public void set_Value(Nullable`1<decimal> value);
    [NullableContextAttribute("2")]
public string get_Watermark();
    [NullableContextAttribute("2")]
public void set_Watermark(string value);
    public HorizontalAlignment get_HorizontalContentAlignment();
    public void set_HorizontalContentAlignment(HorizontalAlignment value);
    public VerticalAlignment get_VerticalContentAlignment();
    public void set_VerticalContentAlignment(VerticalAlignment value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    [NullableContextAttribute("2")]
public object get_InnerLeftContent();
    [NullableContextAttribute("2")]
public void set_InnerLeftContent(object value);
    [NullableContextAttribute("2")]
public object get_InnerRightContent();
    [NullableContextAttribute("2")]
public void set_InnerRightContent(object value);
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
    [NullableContextAttribute("2")]
protected virtual void OnNumberFormatChanged(NumberFormatInfo oldValue, NumberFormatInfo newValue);
    [NullableContextAttribute("2")]
protected virtual void OnFormatStringChanged(string oldValue, string newValue);
    protected virtual void OnIncrementChanged(decimal oldValue, decimal newValue);
    protected virtual void OnIsReadOnlyChanged(bool oldValue, bool newValue);
    protected virtual void OnMaximumChanged(decimal oldValue, decimal newValue);
    protected virtual void OnMinimumChanged(decimal oldValue, decimal newValue);
    [NullableContextAttribute("2")]
protected virtual void OnTextChanged(string oldValue, string newValue);
    [NullableContextAttribute("2")]
protected virtual void OnTextConverterChanged(IValueConverter oldValue, IValueConverter newValue);
    protected virtual void OnValueChanged(Nullable`1<decimal> oldValue, Nullable`1<decimal> newValue);
    protected virtual decimal OnCoerceIncrement(decimal baseValue);
    protected virtual decimal OnCoerceMaximum(decimal baseValue);
    protected virtual decimal OnCoerceMinimum(decimal baseValue);
    protected virtual Nullable`1<decimal> OnCoerceValue(Nullable`1<decimal> baseValue);
    protected virtual void OnSpin(SpinEventArgs e);
    protected virtual void RaiseValueChangedEvent(Nullable`1<decimal> oldValue, Nullable`1<decimal> newValue);
    [NullableContextAttribute("2")]
private Nullable`1<decimal> ConvertTextToValue(string text);
    [NullableContextAttribute("2")]
private string ConvertValueToText();
    private void OnIncrement();
    private void OnDecrement();
    private void SetValidSpinDirection();
    private static void OnNumberFormatChanged(AvaloniaPropertyChangedEventArgs e);
    private static void IncrementChanged(AvaloniaPropertyChangedEventArgs e);
    private static void FormatStringChanged(AvaloniaPropertyChangedEventArgs e);
    private static void OnIsReadOnlyChanged(AvaloniaPropertyChangedEventArgs e);
    private static void OnMaximumChanged(AvaloniaPropertyChangedEventArgs e);
    private static void OnMinimumChanged(AvaloniaPropertyChangedEventArgs e);
    private static void OnTextChanged(AvaloniaPropertyChangedEventArgs e);
    private static void OnTextConverterChanged(AvaloniaPropertyChangedEventArgs e);
    private static void OnValueChanged(AvaloniaPropertyChangedEventArgs e);
    private void SetValueInternal(Nullable`1<decimal> value);
    private static decimal OnCoerceMaximum(AvaloniaObject instance, decimal value);
    private static decimal OnCoerceMinimum(AvaloniaObject instance, decimal value);
    private static decimal OnCoerceIncrement(AvaloniaObject instance, decimal value);
    private void TextBoxOnTextChanged();
    private void OnSpinnerSpin(object sender, SpinEventArgs e);
    private void DoDecrement();
    private void DoIncrement();
    [CompilerGeneratedAttribute]
public void add_Spinned(EventHandler`1<SpinEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Spinned(EventHandler`1<SpinEventArgs> value);
    private void TextBoxOnPointerPressed(object sender, PointerPressedEventArgs e);
    public void add_ValueChanged(EventHandler`1<NumericUpDownValueChangedEventArgs> value);
    public void remove_ValueChanged(EventHandler`1<NumericUpDownValueChangedEventArgs> value);
    private bool CommitInput(bool forceTextUpdate);
    [NullableContextAttribute("2")]
private bool SyncTextAndValueProperties(bool updateValueFromText, string text);
    [NullableContextAttribute("2")]
private bool SyncTextAndValueProperties(bool updateValueFromText, string text, bool forceTextUpdate);
    [NullableContextAttribute("2")]
private Nullable`1<decimal> ConvertTextToValueCore(string currentValueText, string text);
    private void ValidateMinMax(Nullable`1<decimal> value);
    private static decimal ParsePercent(string text, IFormatProvider cultureInfo);
    private bool IsPercent(string stringToTest);
    private void FocusChanged(bool hasFocus);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__87_0(object sender, EventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__97_0(string txt);
}
public class Avalonia.Controls.NumericUpDownValueChangedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <NewValue>k__BackingField;
    public Nullable`1<decimal> OldValue { get; }
    public Nullable`1<decimal> NewValue { get; }
    [NullableContextAttribute("1")]
public NumericUpDownValueChangedEventArgs(RoutedEvent routedEvent, Nullable`1<decimal> oldValue, Nullable`1<decimal> newValue);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_OldValue();
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_NewValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
[EditorBrowsableAttribute("1")]
public class Avalonia.Controls.OpenFileDialog : FileDialog {
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    public bool AllowMultiple { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public void set_AllowMultiple(bool value);
    public Task`1<String[]> ShowAsync(Window parent);
    public FilePickerOpenOptions ToFilePickerOpenOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
[EditorBrowsableAttribute("1")]
public class Avalonia.Controls.OpenFolderDialog : FileSystemDialog {
    public Task`1<string> ShowAsync(Window parent);
    public FolderPickerOpenOptions ToFolderPickerOpenOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Panel : Control {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BackgroundProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<ChildIndexChangedEventArgs> _childIndexChanged;
    [CompilerGeneratedAttribute]
private Controls <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsItemsHost>k__BackingField;
    [ContentAttribute]
public Controls Children { get; }
    [NullableAttribute("2")]
public IBrush Background { get; public set; }
    public bool IsItemsHost { get; internal set; }
    private static Panel();
    [CompilerGeneratedAttribute]
public Controls get_Children();
    [NullableContextAttribute("2")]
public IBrush get_Background();
    [NullableContextAttribute("2")]
public void set_Background(IBrush value);
    [CompilerGeneratedAttribute]
public bool get_IsItemsHost();
    [CompilerGeneratedAttribute]
internal void set_IsItemsHost(bool value);
    private sealed virtual override void Avalonia.LogicalTree.IChildIndexProvider.add_ChildIndexChanged(EventHandler`1<ChildIndexChangedEventArgs> value);
    private sealed virtual override void Avalonia.LogicalTree.IChildIndexProvider.remove_ChildIndexChanged(EventHandler`1<ChildIndexChangedEventArgs> value);
    public sealed virtual void Render(DrawingContext context);
    protected static void AffectsParentArrange(AvaloniaProperty[] properties);
    protected static void AffectsParentMeasure(AvaloniaProperty[] properties);
    protected virtual void ChildrenChanged(object sender, NotifyCollectionChangedEventArgs e);
    private protected virtual void InvalidateMeasureOnChildrenChanged();
    private void ChildrenPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void AffectsParentArrangeInvalidate(AvaloniaPropertyChangedEventArgs e);
    private static void AffectsParentMeasureInvalidate(AvaloniaPropertyChangedEventArgs e);
    private sealed virtual override int Avalonia.LogicalTree.IChildIndexProvider.GetChildIndex(ILogical child);
    private sealed virtual override bool Avalonia.LogicalTree.IChildIndexProvider.TryGetTotalCount(Int32& count);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.PathIcon : IconElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Geometry> DataProperty;
    public Geometry Data { get; public set; }
    private static PathIcon();
    public Geometry get_Data();
    public void set_Data(Geometry value);
}
public class Avalonia.Controls.PixelPointEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PixelPoint <Point>k__BackingField;
    public PixelPoint Point { get; }
    public PixelPointEventArgs(PixelPoint point);
    [CompilerGeneratedAttribute]
public PixelPoint get_Point();
}
public enum Avalonia.Controls.PlacementMode : Enum {
    public int value__;
    public static PlacementMode Pointer;
    public static PlacementMode Bottom;
    public static PlacementMode Right;
    public static PlacementMode Left;
    public static PlacementMode Top;
    public static PlacementMode Center;
    public static PlacementMode AnchorAndGravity;
    public static PlacementMode TopEdgeAlignedLeft;
    public static PlacementMode TopEdgeAlignedRight;
    public static PlacementMode BottomEdgeAlignedLeft;
    public static PlacementMode BottomEdgeAlignedRight;
    public static PlacementMode LeftEdgeAlignedTop;
    public static PlacementMode LeftEdgeAlignedBottom;
    public static PlacementMode RightEdgeAlignedTop;
    public static PlacementMode RightEdgeAlignedBottom;
    public static PlacementMode Custom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnstableAttribute]
public class Avalonia.Controls.Platform.DefaultMenuInteractionHandler : object {
    private bool _isContextMenu;
    [NullableAttribute("2")]
private IDisposable _inputManagerSubscription;
    [NullableAttribute("2")]
private IRenderRoot _root;
    [NullableAttribute("2")]
private RadioButtonGroupManager _groupManager;
    [CompilerGeneratedAttribute]
private Action`2<Action, TimeSpan> <DelayRun>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IInputManager <InputManager>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IMenu <Menu>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <MenuShowDelay>k__BackingField;
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected Action`2<Action, TimeSpan> DelayRun { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected IInputManager InputManager { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal IMenu Menu { get; private set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public static TimeSpan MenuShowDelay { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public DefaultMenuInteractionHandler(bool isContextMenu);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public DefaultMenuInteractionHandler(bool isContextMenu, IInputManager inputManager, Action`2<Action, TimeSpan> delayRun);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private static DefaultMenuInteractionHandler();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void Attach(MenuBase menu);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void Detach(MenuBase menu);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected Action`2<Action, TimeSpan> get_DelayRun();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected IInputManager get_InputManager();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal IMenu get_Menu();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private void set_Menu(IMenu value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public static TimeSpan get_MenuShowDelay();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public static void set_MenuShowDelay(TimeSpan value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void GotFocus(object sender, GotFocusEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void LostFocus(object sender, RoutedEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void KeyDown(object sender, KeyEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void AccessKeyPressed(object sender, RoutedEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void PointerEntered(object sender, RoutedEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void PointerMoved(object sender, PointerEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void PointerExited(object sender, RoutedEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void PointerPressed(object sender, PointerPressedEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void PointerReleased(object sender, PointerReleasedEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void MenuOpened(object sender, RoutedEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void RawInput(RawInputEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void RootPointerPressed(object sender, PointerPressedEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected internal virtual void WindowDeactivated(object sender, EventArgs e);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal static MenuItem GetMenuItem(StyledElement item);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void AttachCore(IMenu menu);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void DetachCore(IMenu menu);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void Click(IMenuItem item);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void CloseMenu(IMenuItem item);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void CloseWithDelay(IMenuItem item);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void KeyDown(IMenuItem item, KeyEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void Open(IMenuItem item, bool selectFirst);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void OpenWithDelay(IMenuItem item);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void SelectItemAndAncestors(IMenuItem item);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void OnCheckedChanged(IMenuItem item);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal void OnGroupOrTypeChanged(IRadioButton button, string oldGroupName);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal static IMenuItem GetMenuItemCore(StyledElement item);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private void TopLevelLostPlatformFocus();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private static void DefaultDelayRun(Action action, TimeSpan timeSpan);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private static void AddMenuItemToRadioGroup(RadioButtonGroupManager manager, IMenuElement element);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private static void RemoveMenuItemFromRadioGroup(RadioButtonGroupManager manager, IMenuElement element);
}
[NotClientImplementableAttribute]
public interface Avalonia.Controls.Platform.IInputPane {
    public InputPaneState State { get; }
    public Rect OccludedRect { get; }
    public abstract virtual InputPaneState get_State();
    public abstract virtual Rect get_OccludedRect();
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(EventHandler`1<InputPaneStateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(EventHandler`1<InputPaneStateEventArgs> value);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NotClientImplementableAttribute]
public interface Avalonia.Controls.Platform.IInsetsManager {
    public Nullable`1<bool> IsSystemBarVisible { get; public set; }
    public bool DisplayEdgeToEdge { get; public set; }
    public Thickness SafeAreaPadding { get; }
    public Nullable`1<Color> SystemBarColor { get; public set; }
    public abstract virtual Nullable`1<bool> get_IsSystemBarVisible();
    public abstract virtual void set_IsSystemBarVisible(Nullable`1<bool> value);
    public abstract virtual bool get_DisplayEdgeToEdge();
    public abstract virtual void set_DisplayEdgeToEdge(bool value);
    public abstract virtual Thickness get_SafeAreaPadding();
    public abstract virtual Nullable`1<Color> get_SystemBarColor();
    public abstract virtual void set_SystemBarColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SafeAreaChanged(EventHandler`1<SafeAreaChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SafeAreaChanged(EventHandler`1<SafeAreaChangedArgs> value);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.IMenuInteractionHandler {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void Attach(MenuBase menu);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void Detach(MenuBase menu);
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.IMountedVolumeInfoProvider {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual IDisposable Listen(ObservableCollection`1<MountedVolumeInfo> mountedDrives);
}
internal interface Avalonia.Controls.Platform.INativeApplicationCommands {
    public abstract virtual void ShowApp();
    public abstract virtual void HideApp();
    public abstract virtual void ShowAll();
    public abstract virtual void HideOthers();
}
[NullableContextAttribute("2")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.INativeControlHostControlTopLevelAttachment {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public INativeControlHostImpl AttachedTo { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual INativeControlHostImpl get_AttachedTo();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void set_AttachedTo(INativeControlHostImpl value);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual bool IsCompatibleWith(INativeControlHostImpl host);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void HideWithSize(Size size);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void ShowInBounds(Rect rect);
}
[UnstableAttribute]
public interface Avalonia.Controls.Platform.INativeControlHostDestroyableControlHandle {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void Destroy();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.INativeControlHostImpl {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual INativeControlHostDestroyableControlHandle CreateDefaultChild(IPlatformHandle parent);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual INativeControlHostControlTopLevelAttachment CreateNewAttachment(Func`2<IPlatformHandle, IPlatformHandle> create);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual INativeControlHostControlTopLevelAttachment CreateNewAttachment(IPlatformHandle handle);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual bool IsCompatibleWith(IPlatformHandle handle);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.INativeMenuExporter {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void SetNativeMenu(NativeMenu menu);
}
[NullableContextAttribute("2")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.INativeMenuExporterProvider {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public INativeMenuExporter NativeMenuExporter { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual INativeMenuExporter get_NativeMenuExporter();
}
[PrivateApiAttribute]
public abstract class Avalonia.Controls.Platform.InputPaneBase : object {
    [CompilerGeneratedAttribute]
private InputPaneState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <OccludedRect>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<InputPaneStateEventArgs> StateChanged;
    internal InputPaneState State { get; internal set; }
    internal Rect OccludedRect { get; internal set; }
    [CompilerGeneratedAttribute]
internal virtual InputPaneState get_State();
    [CompilerGeneratedAttribute]
internal virtual void set_State(InputPaneState value);
    [CompilerGeneratedAttribute]
internal virtual Rect get_OccludedRect();
    [CompilerGeneratedAttribute]
internal virtual void set_OccludedRect(Rect value);
    [CompilerGeneratedAttribute]
internal sealed virtual void add_StateChanged(EventHandler`1<InputPaneStateEventArgs> value);
    [CompilerGeneratedAttribute]
internal sealed virtual void remove_StateChanged(EventHandler`1<InputPaneStateEventArgs> value);
    [NullableContextAttribute("1")]
internal void OnStateChanged(InputPaneStateEventArgs eventArgs);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
public enum Avalonia.Controls.Platform.InputPaneState : Enum {
    public int value__;
    public static InputPaneState Closed;
    public static InputPaneState Open;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Platform.InputPaneStateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private InputPaneState <NewState>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Rect> <StartRect>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <EndRect>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <AnimationDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IEasing <Easing>k__BackingField;
    public InputPaneState NewState { get; }
    public Nullable`1<Rect> StartRect { get; }
    public Rect EndRect { get; }
    public TimeSpan AnimationDuration { get; }
    public IEasing Easing { get; }
    public InputPaneStateEventArgs(InputPaneState newState, Nullable`1<Rect> startRect, Rect endRect, TimeSpan animationDuration, IEasing easing);
    public InputPaneStateEventArgs(InputPaneState newState, Nullable`1<Rect> startRect, Rect endRect);
    [CompilerGeneratedAttribute]
public InputPaneState get_NewState();
    [CompilerGeneratedAttribute]
public Nullable`1<Rect> get_StartRect();
    [CompilerGeneratedAttribute]
public Rect get_EndRect();
    [CompilerGeneratedAttribute]
public TimeSpan get_AnimationDuration();
    [CompilerGeneratedAttribute]
public IEasing get_Easing();
}
[PrivateApiAttribute]
public abstract class Avalonia.Controls.Platform.InsetsManagerBase : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSystemBarVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayEdgeToEdge>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <SafeAreaPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <SystemBarColor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SafeAreaChangedArgs> SafeAreaChanged;
    internal Nullable`1<bool> IsSystemBarVisible { get; internal set; }
    internal bool DisplayEdgeToEdge { get; internal set; }
    internal Thickness SafeAreaPadding { get; internal set; }
    internal Nullable`1<Color> SystemBarColor { get; internal set; }
    [CompilerGeneratedAttribute]
internal virtual Nullable`1<bool> get_IsSystemBarVisible();
    [CompilerGeneratedAttribute]
internal virtual void set_IsSystemBarVisible(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal virtual bool get_DisplayEdgeToEdge();
    [CompilerGeneratedAttribute]
internal virtual void set_DisplayEdgeToEdge(bool value);
    [CompilerGeneratedAttribute]
internal virtual Thickness get_SafeAreaPadding();
    [CompilerGeneratedAttribute]
internal virtual void set_SafeAreaPadding(Thickness value);
    [CompilerGeneratedAttribute]
internal virtual Nullable`1<Color> get_SystemBarColor();
    [CompilerGeneratedAttribute]
internal virtual void set_SystemBarColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
internal sealed virtual void add_SafeAreaChanged(EventHandler`1<SafeAreaChangedArgs> value);
    [CompilerGeneratedAttribute]
internal sealed virtual void remove_SafeAreaChanged(EventHandler`1<SafeAreaChangedArgs> value);
    [NullableContextAttribute("1")]
internal void OnSafeAreaChanged(SafeAreaChangedArgs eventArgs);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.IStorageProviderFactory {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual IStorageProvider CreateProvider(TopLevel topLevel);
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
[EditorBrowsableAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.ISystemDialogImpl {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Task`1<String[]> ShowFileDialogAsync(FileDialog dialog, Window parent);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Task`1<string> ShowFolderDialogAsync(OpenFolderDialog dialog, Window parent);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.ITopLevelNativeMenuExporter {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public bool IsNativeMenuExported { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual bool get_IsNativeMenuExported();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void add_OnIsNativeMenuExportedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void remove_OnIsNativeMenuExportedChanged(EventHandler value);
}
[NullableContextAttribute("2")]
[PrivateApiAttribute]
public interface Avalonia.Controls.Platform.IWin32OptionsTopLevelImpl {
    internal CustomWindowStylesCallback WindowStylesCallback { get; internal set; }
    internal CustomWndProcHookCallback WndProcHookCallback { get; internal set; }
    internal abstract virtual CustomWindowStylesCallback get_WindowStylesCallback();
    internal abstract virtual void set_WindowStylesCallback(CustomWindowStylesCallback value);
    internal abstract virtual CustomWndProcHookCallback get_WndProcHookCallback();
    internal abstract virtual void set_WndProcHookCallback(CustomWndProcHookCallback value);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[PrivateApiAttribute]
public interface Avalonia.Controls.Platform.IX11OptionsToplevelImplFeature {
    internal abstract virtual void SetNetWmWindowType(X11NetWmWindowType type);
    internal abstract virtual void SetWmClass(string className);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[UnstableAttribute]
public class Avalonia.Controls.Platform.ManagedDispatcherImpl : object {
    private IManagedDispatcherInputProvider _inputProvider;
    [NullableAttribute("1")]
private AutoResetEvent _wakeup;
    private bool _signaled;
    [NullableAttribute("1")]
private object _lock;
    [NullableAttribute("1")]
private Stopwatch _clock;
    private Nullable`1<TimeSpan> _nextTimer;
    [NullableAttribute("1")]
private Thread _loopThread;
    [CompilerGeneratedAttribute]
private Action Signaled;
    [CompilerGeneratedAttribute]
private Action Timer;
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public bool CurrentThreadIsLoopThread { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public long Now { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public bool CanQueryPendingInput { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public bool HasPendingInput { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public ManagedDispatcherImpl(IManagedDispatcherInputProvider inputProvider);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual bool get_CurrentThreadIsLoopThread();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void Signal();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void add_Signaled(Action value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void remove_Signaled(Action value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void add_Timer(Action value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void remove_Timer(Action value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual long get_Now();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void UpdateTimer(Nullable`1<long> dueTimeInMs);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual bool get_CanQueryPendingInput();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual bool get_HasPendingInput();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void RunLoop(CancellationToken token);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private void <RunLoop>b__25_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[UnstableAttribute]
public class Avalonia.Controls.Platform.MountedVolumeInfo : object {
    [CompilerGeneratedAttribute]
private string <VolumeLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VolumePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <VolumeSizeBytes>k__BackingField;
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public string VolumeLabel { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public string VolumePath { get; public set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public ulong VolumeSizeBytes { get; public set; }
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public string get_VolumeLabel();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public void set_VolumeLabel(string value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public string get_VolumePath();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public void set_VolumePath(string value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public ulong get_VolumeSizeBytes();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public void set_VolumeSizeBytes(ulong value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual bool Equals(MountedVolumeInfo other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnstableAttribute]
public static class Avalonia.Controls.Platform.PlatformManager : object {
    private static bool s_designerMode;
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public static IDisposable DesignerMode();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public static void SetDesignerScalingFactor(double factor);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public static ITrayIconImpl CreateTrayIcon();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public static IWindowImpl CreateWindow();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public static IWindowImpl CreateEmbeddableWindow();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public static ITopLevelImpl CreateEmbeddableTopLevel();
}
public class Avalonia.Controls.Platform.SafeAreaChangedArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Thickness <SafeAreaPadding>k__BackingField;
    public Thickness SafeAreaPadding { get; }
    public SafeAreaChangedArgs(Thickness safeArePadding);
    [CompilerGeneratedAttribute]
public Thickness get_SafeAreaPadding();
}
[PrivateApiAttribute]
public class Avalonia.Controls.Platform.Surfaces.FramebufferLockProperties : ValueType {
    [CompilerGeneratedAttribute]
private bool <PreviousFrameIsRetained>k__BackingField;
    internal bool PreviousFrameIsRetained { get; internal set; }
    internal FramebufferLockProperties(bool PreviousFrameIsRetained);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal bool get_PreviousFrameIsRetained();
    [CompilerGeneratedAttribute]
internal void set_PreviousFrameIsRetained(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
internal static bool op_Inequality(FramebufferLockProperties left, FramebufferLockProperties right);
    [CompilerGeneratedAttribute]
internal static bool op_Equality(FramebufferLockProperties left, FramebufferLockProperties right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal sealed virtual bool Equals(FramebufferLockProperties other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal void Deconstruct(Boolean& PreviousFrameIsRetained);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
public class Avalonia.Controls.Platform.Surfaces.FuncFramebufferRenderTarget : object {
    [NullableAttribute("1")]
private Func`1<ILockedFramebuffer> _lockFramebuffer;
    [NullableContextAttribute("1")]
public FuncFramebufferRenderTarget(Func`1<ILockedFramebuffer> lockFramebuffer);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual ILockedFramebuffer Lock();
}
internal class Avalonia.Controls.Platform.Surfaces.FuncRetainedFramebufferRenderTarget : object {
    [NullableAttribute("1")]
private LockDelegate _lockFramebuffer;
    public bool RetainsFrameContents { get; }
    [NullableContextAttribute("1")]
public FuncRetainedFramebufferRenderTarget(LockDelegate lockFramebuffer);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual ILockedFramebuffer Lock();
    [NullableContextAttribute("1")]
public sealed virtual ILockedFramebuffer Lock(FramebufferLockProperties& properties);
    public sealed virtual bool get_RetainsFrameContents();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Controls.Platform.Surfaces.IFramebufferPlatformSurface {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual IFramebufferRenderTarget CreateFramebufferRenderTarget();
}
[UnstableAttribute]
public interface Avalonia.Controls.Platform.Surfaces.IFramebufferRenderTarget {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual ILockedFramebuffer Lock();
}
[PrivateApiAttribute]
public interface Avalonia.Controls.Platform.Surfaces.IFramebufferRenderTargetWithProperties {
    internal bool RetainsFrameContents { get; }
    [NullableContextAttribute("1")]
internal abstract virtual ILockedFramebuffer Lock(FramebufferLockProperties& properties);
    internal abstract virtual bool get_RetainsFrameContents();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
public enum Avalonia.Controls.Platform.SystemBarTheme : Enum {
    public int value__;
    public static SystemBarTheme Light;
    public static SystemBarTheme Dark;
}
[ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
internal class Avalonia.Controls.Platform.SystemDialogImpl : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Avalonia.Controls.Platform.SystemDialogImpl/<ShowFileDialogAsync>d__0")]
public sealed virtual Task`1<String[]> ShowFileDialogAsync(FileDialog dialog, Window parent);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Avalonia.Controls.Platform.SystemDialogImpl/<ShowFolderDialogAsync>d__1")]
public sealed virtual Task`1<string> ShowFolderDialogAsync(OpenFolderDialog dialog, Window parent);
}
public enum Avalonia.Controls.Platform.X11NetWmWindowType : Enum {
    public int value__;
    public static X11NetWmWindowType Normal;
    public static X11NetWmWindowType Dialog;
    public static X11NetWmWindowType Utility;
    public static X11NetWmWindowType Menu;
    public static X11NetWmWindowType Toolbar;
    public static X11NetWmWindowType Splash;
    public static X11NetWmWindowType Dock;
    public static X11NetWmWindowType Desktop;
}
public enum Avalonia.Controls.PlatformInhibitionType : Enum {
    public int value__;
    public static PlatformInhibitionType AppSleep;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.PopulatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IEnumerable <Data>k__BackingField;
    public IEnumerable Data { get; private set; }
    public PopulatedEventArgs(IEnumerable data);
    [CompilerGeneratedAttribute]
public IEnumerable get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(IEnumerable value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.PopulatingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private string <Parameter>k__BackingField;
    public string Parameter { get; private set; }
    public PopulatingEventArgs(string parameter);
    [CompilerGeneratedAttribute]
public string get_Parameter();
    [CompilerGeneratedAttribute]
private void set_Parameter(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Presenters.ContentPresenter : Control {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BackgroundProperty;
    public static StyledProperty`1<BackgroundSizing> BackgroundSizingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BorderBrushProperty;
    public static StyledProperty`1<Thickness> BorderThicknessProperty;
    public static StyledProperty`1<CornerRadius> CornerRadiusProperty;
    public static StyledProperty`1<BoxShadows> BoxShadowProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> ForegroundProperty;
    public static StyledProperty`1<FontFamily> FontFamilyProperty;
    public static StyledProperty`1<double> FontSizeProperty;
    public static StyledProperty`1<FontStyle> FontStyleProperty;
    public static StyledProperty`1<FontWeight> FontWeightProperty;
    public static StyledProperty`1<FontStretch> FontStretchProperty;
    public static StyledProperty`1<TextAlignment> TextAlignmentProperty;
    public static StyledProperty`1<TextWrapping> TextWrappingProperty;
    public static StyledProperty`1<TextTrimming> TextTrimmingProperty;
    public static StyledProperty`1<double> LineHeightProperty;
    public static StyledProperty`1<int> MaxLinesProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<ContentPresenter, Control> ChildProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> ContentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> ContentTemplateProperty;
    public static StyledProperty`1<HorizontalAlignment> HorizontalContentAlignmentProperty;
    public static StyledProperty`1<VerticalAlignment> VerticalContentAlignmentProperty;
    public static StyledProperty`1<Thickness> PaddingProperty;
    public static StyledProperty`1<bool> RecognizesAccessKeyProperty;
    [NullableAttribute("2")]
private Control _child;
    private bool _createdChild;
    [NullableAttribute("2")]
private IRecyclingDataTemplate _recyclingDataTemplate;
    private BorderRenderHelper _borderRenderer;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IContentPresenterHost <Host>k__BackingField;
    private Nullable`1<Thickness> _layoutThickness;
    private double _scale;
    [NullableAttribute("2")]
public IBrush Background { get; public set; }
    public BackgroundSizing BackgroundSizing { get; public set; }
    [NullableAttribute("2")]
public IBrush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public BoxShadows BoxShadow { get; public set; }
    [NullableAttribute("2")]
public IBrush Foreground { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    public TextTrimming TextTrimming { get; public set; }
    public double LineHeight { get; public set; }
    public int MaxLines { get; public set; }
    [NullableAttribute("2")]
public Control Child { get; private set; }
    [NullableAttribute("2")]
[DependsOnAttribute("ContentTemplate")]
public object Content { get; public set; }
    [NullableAttribute("2")]
public IDataTemplate ContentTemplate { get; public set; }
    public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    public VerticalAlignment VerticalContentAlignment { get; public set; }
    public Thickness Padding { get; public set; }
    public bool RecognizesAccessKey { get; public set; }
    [NullableAttribute("2")]
internal IContentPresenterHost Host { get; private set; }
    private Thickness LayoutThickness { get; }
    private static ContentPresenter();
    [NullableContextAttribute("2")]
public IBrush get_Background();
    [NullableContextAttribute("2")]
public void set_Background(IBrush value);
    public BackgroundSizing get_BackgroundSizing();
    public void set_BackgroundSizing(BackgroundSizing value);
    [NullableContextAttribute("2")]
public IBrush get_BorderBrush();
    [NullableContextAttribute("2")]
public void set_BorderBrush(IBrush value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public BoxShadows get_BoxShadow();
    public void set_BoxShadow(BoxShadows value);
    [NullableContextAttribute("2")]
public IBrush get_Foreground();
    [NullableContextAttribute("2")]
public void set_Foreground(IBrush value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public TextWrapping get_TextWrapping();
    public void set_TextWrapping(TextWrapping value);
    public TextTrimming get_TextTrimming();
    public void set_TextTrimming(TextTrimming value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public int get_MaxLines();
    public void set_MaxLines(int value);
    [NullableContextAttribute("2")]
public Control get_Child();
    [NullableContextAttribute("2")]
private void set_Child(Control value);
    [NullableContextAttribute("2")]
public object get_Content();
    [NullableContextAttribute("2")]
public void set_Content(object value);
    [NullableContextAttribute("2")]
public IDataTemplate get_ContentTemplate();
    [NullableContextAttribute("2")]
public void set_ContentTemplate(IDataTemplate value);
    public HorizontalAlignment get_HorizontalContentAlignment();
    public void set_HorizontalContentAlignment(HorizontalAlignment value);
    public VerticalAlignment get_VerticalContentAlignment();
    public void set_VerticalContentAlignment(VerticalAlignment value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public bool get_RecognizesAccessKey();
    public void set_RecognizesAccessKey(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IContentPresenterHost get_Host();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Host(IContentPresenterHost value);
    public sealed virtual void ApplyTemplate();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    public void UpdateChild();
    [NullableContextAttribute("2")]
private void UpdateChild(object content);
    private IAvaloniaList`1<ILogical> GetEffectiveLogicalChildren();
    protected virtual void OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs e);
    private Thickness get_LayoutThickness();
    private void VerifyScale();
    public sealed virtual void Render(DrawingContext context);
    [NullableContextAttribute("2")]
private Control CreateChild(object content, Control oldChild, IDataTemplate template);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    internal Size ArrangeOverrideImpl(Size finalSize, Vector offset);
    private void ContentChanged(AvaloniaPropertyChangedEventArgs e);
    private void UpdatePseudoClasses();
    private void TemplatedParentChanged(AvaloniaPropertyChangedEventArgs e);
    internal virtual void BuildDebugDisplay(StringBuilder builder, bool includeContent);
}
[NullableContextAttribute("1")]
internal interface Avalonia.Controls.Presenters.IContentPresenterHost {
    public IAvaloniaList`1<ILogical> LogicalChildren { get; }
    public abstract virtual IAvaloniaList`1<ILogical> get_LogicalChildren();
    public abstract virtual bool RegisterContentPresenter(ContentPresenter presenter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Presenters.ItemsPresenter : Control {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ITemplate`1<Panel>> ItemsPanelProperty;
    private PanelContainerGenerator _generator;
    private ILogicalScrollable _logicalScrollable;
    private EventHandler _scrollInvalidated;
    [CompilerGeneratedAttribute]
private Panel <Panel>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemsControl <ItemsControl>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITemplate`1<Panel> ItemsPanel { get; public set; }
    public Panel Panel { get; private set; }
    internal ItemsControl ItemsControl { get; private set; }
    private bool Avalonia.Controls.Primitives.ILogicalScrollable.CanHorizontallyScroll { get; private set; }
    private bool Avalonia.Controls.Primitives.ILogicalScrollable.CanVerticallyScroll { get; private set; }
    private Vector Avalonia.Controls.Primitives.IScrollable.Offset { get; private set; }
    private bool Avalonia.Controls.Primitives.ILogicalScrollable.IsLogicalScrollEnabled { get; }
    private Size Avalonia.Controls.Primitives.ILogicalScrollable.ScrollSize { get; }
    private Size Avalonia.Controls.Primitives.ILogicalScrollable.PageScrollSize { get; }
    private Size Avalonia.Controls.Primitives.IScrollable.Extent { get; }
    private Size Avalonia.Controls.Primitives.IScrollable.Viewport { get; }
    private static ItemsPresenter();
    private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.add_ScrollInvalidated(EventHandler value);
    private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.remove_ScrollInvalidated(EventHandler value);
    public ITemplate`1<Panel> get_ItemsPanel();
    public void set_ItemsPanel(ITemplate`1<Panel> value);
    [CompilerGeneratedAttribute]
public Panel get_Panel();
    [CompilerGeneratedAttribute]
private void set_Panel(Panel value);
    [CompilerGeneratedAttribute]
internal ItemsControl get_ItemsControl();
    [CompilerGeneratedAttribute]
private void set_ItemsControl(ItemsControl value);
    private sealed virtual override bool Avalonia.Controls.Primitives.ILogicalScrollable.get_CanHorizontallyScroll();
    private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.set_CanHorizontallyScroll(bool value);
    private sealed virtual override bool Avalonia.Controls.Primitives.ILogicalScrollable.get_CanVerticallyScroll();
    private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.set_CanVerticallyScroll(bool value);
    private sealed virtual override Vector Avalonia.Controls.Primitives.IScrollable.get_Offset();
    private sealed virtual override void Avalonia.Controls.Primitives.IScrollable.set_Offset(Vector value);
    private sealed virtual override bool Avalonia.Controls.Primitives.ILogicalScrollable.get_IsLogicalScrollEnabled();
    private sealed virtual override Size Avalonia.Controls.Primitives.ILogicalScrollable.get_ScrollSize();
    private sealed virtual override Size Avalonia.Controls.Primitives.ILogicalScrollable.get_PageScrollSize();
    private sealed virtual override Size Avalonia.Controls.Primitives.IScrollable.get_Extent();
    private sealed virtual override Size Avalonia.Controls.Primitives.IScrollable.get_Viewport();
    public sealed virtual void ApplyTemplate();
    [NullableContextAttribute("1")]
private sealed virtual override bool Avalonia.Controls.Primitives.ILogicalScrollable.BringIntoView(Control target, Rect targetRect);
    private sealed virtual override Control Avalonia.Controls.Primitives.ILogicalScrollable.GetControlInDirection(NavigationDirection direction, Control from);
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.RaiseScrollInvalidated(EventArgs e);
    internal void ScrollIntoView(int index);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    internal void Refresh();
    private void ResetState();
    private void CreateSimplePanelGenerator();
    internal Control ContainerFromIndex(int index);
    internal IEnumerable`1<Control> GetRealizedContainers();
    [NullableContextAttribute("1")]
internal int IndexFromContainer(Control container);
    [NullableContextAttribute("1")]
private void OnLogicalScrollInvalidated(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Presenters.PanelContainerGenerator : object {
    private static AttachedProperty`1<bool> ItemIsOwnContainerProperty;
    private ItemsPresenter _presenter;
    public PanelContainerGenerator(ItemsPresenter presenter);
    private static PanelContainerGenerator();
    public sealed virtual void Dispose();
    internal void Refresh();
    private void OnItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private static void InsertContainer(ItemsControl itemsControl, Controls children, object item, int index);
    private void ClearItemsControlLogicalChildren();
    [CompilerGeneratedAttribute]
internal static void <OnItemsChanged>g__Add|5_0(int index, IEnumerable items, <>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static void <OnItemsChanged>g__Remove|5_1(int index, int count, <>c__DisplayClass5_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Presenters.ScrollContentPresenter : ContentPresenter {
    private static double EdgeDetectionTolerance;
    public static StyledProperty`1<bool> CanHorizontallyScrollProperty;
    public static StyledProperty`1<bool> CanVerticallyScrollProperty;
    public static DirectProperty`2<ScrollContentPresenter, Size> ExtentProperty;
    public static StyledProperty`1<Vector> OffsetProperty;
    public static DirectProperty`2<ScrollContentPresenter, Size> ViewportProperty;
    public static StyledProperty`1<SnapPointsType> HorizontalSnapPointsTypeProperty;
    public static StyledProperty`1<SnapPointsType> VerticalSnapPointsTypeProperty;
    public static StyledProperty`1<SnapPointsAlignment> HorizontalSnapPointsAlignmentProperty;
    public static StyledProperty`1<SnapPointsAlignment> VerticalSnapPointsAlignmentProperty;
    public static StyledProperty`1<bool> IsScrollChainingEnabledProperty;
    private bool _arranging;
    private Size _extent;
    [NullableAttribute("2")]
private IDisposable _logicalScrollSubscription;
    private Size _viewport;
    [NullableAttribute("2")]
private Dictionary`2<int, Vector> _activeLogicalGestureScrolls;
    [NullableAttribute("2")]
private Dictionary`2<int, Vector> _scrollGestureSnapPoints;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<Control> _anchorCandidates;
    [NullableAttribute("2")]
private Control _anchorElement;
    private Rect _anchorElementBounds;
    private bool _isAnchorElementDirty;
    private bool _areVerticalSnapPointsRegular;
    private bool _areHorizontalSnapPointsRegular;
    [NullableAttribute("2")]
private IReadOnlyList`1<double> _horizontalSnapPoints;
    private double _horizontalSnapPoint;
    [NullableAttribute("2")]
private IReadOnlyList`1<double> _verticalSnapPoints;
    private double _verticalSnapPoint;
    private double _verticalSnapPointOffset;
    private double _horizontalSnapPointOffset;
    [NullableAttribute("2")]
private CompositeDisposable _ownerSubscriptions;
    [NullableAttribute("2")]
private ScrollViewer _owner;
    [NullableAttribute("2")]
private IScrollSnapPointsInfo _scrollSnapPointsInfo;
    private bool _isSnapPointsUpdated;
    public bool CanHorizontallyScroll { get; public set; }
    public bool CanVerticallyScroll { get; public set; }
    public Size Extent { get; private set; }
    public Vector Offset { get; public set; }
    public Size Viewport { get; private set; }
    public SnapPointsType HorizontalSnapPointsType { get; public set; }
    public SnapPointsType VerticalSnapPointsType { get; public set; }
    public SnapPointsAlignment HorizontalSnapPointsAlignment { get; public set; }
    public SnapPointsAlignment VerticalSnapPointsAlignment { get; public set; }
    public bool IsScrollChainingEnabled { get; public set; }
    [NullableAttribute("2")]
private Control Avalonia.Controls.IScrollAnchorProvider.CurrentAnchor { get; }
    private static ScrollContentPresenter();
    public bool get_CanHorizontallyScroll();
    public void set_CanHorizontallyScroll(bool value);
    public bool get_CanVerticallyScroll();
    public void set_CanVerticallyScroll(bool value);
    public sealed virtual Size get_Extent();
    private void set_Extent(Size value);
    public sealed virtual Vector get_Offset();
    public sealed virtual void set_Offset(Vector value);
    public sealed virtual Size get_Viewport();
    private void set_Viewport(Size value);
    public SnapPointsType get_HorizontalSnapPointsType();
    public void set_HorizontalSnapPointsType(SnapPointsType value);
    public SnapPointsType get_VerticalSnapPointsType();
    public void set_VerticalSnapPointsType(SnapPointsType value);
    public SnapPointsAlignment get_HorizontalSnapPointsAlignment();
    public void set_HorizontalSnapPointsAlignment(SnapPointsAlignment value);
    public SnapPointsAlignment get_VerticalSnapPointsAlignment();
    public void set_VerticalSnapPointsAlignment(SnapPointsAlignment value);
    public bool get_IsScrollChainingEnabled();
    public void set_IsScrollChainingEnabled(bool value);
    [NullableContextAttribute("2")]
private sealed virtual override Control Avalonia.Controls.IScrollAnchorProvider.get_CurrentAnchor();
    public bool BringDescendantIntoView(Visual target, Rect targetRect);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    internal void AttachToScrollViewer();
    private sealed virtual override void Avalonia.Controls.IScrollAnchorProvider.RegisterAnchorCandidate(Control element);
    private sealed virtual override void Avalonia.Controls.IScrollAnchorProvider.UnregisterAnchorCandidate(Control element);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private Size ArrangeWithAnchoring(Size finalSize);
    private Size ComputeExtent(Size viewportSize);
    private void OnScrollGesture(object sender, ScrollGestureEventArgs e);
    private void OnScrollGestureEnded(object sender, ScrollGestureEndedEventArgs e);
    private void OnScrollGestureInertiaStartingEnded(object sender, ScrollGestureInertiaStartingEventArgs e);
    protected virtual void OnPointerWheelChanged(PointerWheelEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void ScrollSnapPointsInfoSnapPointsChanged(object sender, RoutedEventArgs e);
    private void BringIntoViewRequested(object sender, RequestBringIntoViewEventArgs e);
    private void ChildChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("2")]
private void UpdateScrollableSubscription(Control child);
    private void ScrollInvalidated(object sender, EventArgs e);
    private void UpdateFromScrollable(ILogicalScrollable scrollable);
    private void EnsureAnchorElementSelection();
    private bool GetViewportBounds(Control element, Rect& bounds);
    private Rect TranslateBounds(Control control, Control to);
    private bool TranslateBounds(Control control, Control to, Rect& bounds);
    private void UpdateSnapPoints();
    private Vector SnapOffset(Vector offset, Vector direction, bool snapToNext);
    [NullableContextAttribute("0")]
private static ValueTuple`2<double, double> FindNearestSnapPoint(IReadOnlyList`1<double> snapPoints, double value);
    [NullableContextAttribute("2")]
private IScrollSnapPointsInfo GetScrollSnapPointsInfo(object content);
    [CompilerGeneratedAttribute]
internal static bool <AttachToScrollViewer>g__NotDisabled|69_6(ScrollBarVisibility v);
    [CompilerGeneratedAttribute]
private Vector <ArrangeWithAnchoring>g__TrackAnchor|74_0();
    [CompilerGeneratedAttribute]
internal static double <OnScrollGestureInertiaStartingEnded>g__GetDistance|78_0(double speed);
    [CompilerGeneratedAttribute]
private Vector <SnapOffset>g__GetAlignmentDiff|92_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Presenters.TextPresenter : Control {
    [NullableAttribute("1")]
public static StyledProperty`1<int> CaretIndexProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> RevealPasswordProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<char> PasswordCharProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> SelectionBrushProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> SelectionForegroundBrushProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> CaretBrushProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<TimeSpan> CaretBlinkIntervalProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<int> SelectionStartProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<int> SelectionEndProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> TextProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> PreeditTextProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<Nullable`1<int>> PreeditTextCursorPositionProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<TextAlignment> TextAlignmentProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<TextWrapping> TextWrappingProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<double> LineHeightProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<double> LetterSpacingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BackgroundProperty;
    private DispatcherTimer _caretTimer;
    private bool _caretBlink;
    private TextLayout _textLayout;
    private Size _constraint;
    private CharacterHit _lastCharacterHit;
    private Rect _caretBounds;
    private Point _navigationPosition;
    private Nullable`1<Point> _previousOffset;
    private TextSelectorLayer _layer;
    [CompilerGeneratedAttribute]
private EventHandler CaretBoundsChanged;
    [CompilerGeneratedAttribute]
private TextSelectionHandleCanvas <TextSelectionHandleCanvas>k__BackingField;
    public IBrush Background { get; public set; }
    [ContentAttribute]
public string Text { get; public set; }
    public string PreeditText { get; public set; }
    public Nullable`1<int> PreeditTextCursorPosition { get; public set; }
    [NullableAttribute("1")]
public FontFamily FontFamily { get; public set; }
    public FontFeatureCollection FontFeatures { get; public set; }
    public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public IBrush Foreground { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    public double LineHeight { get; public set; }
    public double LetterSpacing { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    [NullableAttribute("1")]
public TextLayout TextLayout { get; }
    public int CaretIndex { get; public set; }
    public char PasswordChar { get; public set; }
    public bool RevealPassword { get; public set; }
    public IBrush SelectionBrush { get; public set; }
    public IBrush SelectionForegroundBrush { get; public set; }
    public IBrush CaretBrush { get; public set; }
    public TimeSpan CaretBlinkInterval { get; public set; }
    public int SelectionStart { get; public set; }
    public int SelectionEnd { get; public set; }
    protected bool BypassFlowDirectionPolicies { get; }
    internal TextSelectionHandleCanvas TextSelectionHandleCanvas { get; internal set; }
    private static TextPresenter();
    [CompilerGeneratedAttribute]
public void add_CaretBoundsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CaretBoundsChanged(EventHandler value);
    public IBrush get_Background();
    public void set_Background(IBrush value);
    public string get_Text();
    public void set_Text(string value);
    public string get_PreeditText();
    public void set_PreeditText(string value);
    public Nullable`1<int> get_PreeditTextCursorPosition();
    public void set_PreeditTextCursorPosition(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public FontFamily get_FontFamily();
    [NullableContextAttribute("1")]
public void set_FontFamily(FontFamily value);
    public FontFeatureCollection get_FontFeatures();
    public void set_FontFeatures(FontFeatureCollection value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    public IBrush get_Foreground();
    public void set_Foreground(IBrush value);
    public TextWrapping get_TextWrapping();
    public void set_TextWrapping(TextWrapping value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public double get_LetterSpacing();
    public void set_LetterSpacing(double value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    [NullableContextAttribute("1")]
public TextLayout get_TextLayout();
    public int get_CaretIndex();
    public void set_CaretIndex(int value);
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    public bool get_RevealPassword();
    public void set_RevealPassword(bool value);
    public IBrush get_SelectionBrush();
    public void set_SelectionBrush(IBrush value);
    public IBrush get_SelectionForegroundBrush();
    public void set_SelectionForegroundBrush(IBrush value);
    public IBrush get_CaretBrush();
    public void set_CaretBrush(IBrush value);
    public TimeSpan get_CaretBlinkInterval();
    public void set_CaretBlinkInterval(TimeSpan value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public int get_SelectionEnd();
    public void set_SelectionEnd(int value);
    protected virtual bool get_BypassFlowDirectionPolicies();
    [CompilerGeneratedAttribute]
internal TextSelectionHandleCanvas get_TextSelectionHandleCanvas();
    [CompilerGeneratedAttribute]
internal void set_TextSelectionHandleCanvas(TextSelectionHandleCanvas value);
    [NullableContextAttribute("1")]
private TextLayout CreateTextLayoutInternal(Size constraint, string text, Typeface typeface, IReadOnlyList`1<ValueSpan`1<TextRunProperties>> textStyleOverrides);
    [NullableContextAttribute("1")]
private void RenderInternal(DrawingContext context);
    [NullableContextAttribute("1")]
public sealed virtual void Render(DrawingContext context);
    [NullableContextAttribute("0")]
internal ValueTuple`2<Point, Point> GetCaretPoints();
    public void ShowCaret();
    public void HideCaret();
    internal void CaretChanged();
    [NullableContextAttribute("1")]
protected virtual TextLayout CreateTextLayout();
    private static string GetCombinedText(string text, int caretIndex, string preeditText);
    protected virtual void InvalidateTextLayout();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    [NullableContextAttribute("1")]
private void CaretTimerTick(object sender, EventArgs e);
    public void MoveCaretToTextPosition(int textPosition, bool trailingEdge);
    public void MoveCaretToPoint(Point point);
    public void MoveCaretVertical(LogicalDirection direction);
    private void EnsureCaretTimer();
    private void ResetCaretTimer();
    public CharacterHit GetNextCharacterHit(LogicalDirection direction);
    public void MoveCaretHorizontal(LogicalDirection direction);
    internal void UpdateCaret(CharacterHit characterHit, bool notify);
    internal Rect GetCursorRectangle();
    [NullableContextAttribute("1")]
protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    private void EnsureTextSelectionLayer();
    private void RemoveTextSelectionCanvas();
    [NullableContextAttribute("1")]
protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    private void OnPreeditChanged(string preeditText, Nullable`1<int> cursorPosition);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    [CompilerGeneratedAttribute]
private void <CaretChanged>b__117_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.AccessText : TextBlock {
    public static AttachedProperty`1<bool> ShowAccessKeyProperty;
    [NullableAttribute("2")]
private IAccessKeyHandler _accessKeys;
    [CompilerGeneratedAttribute]
private char <AccessKey>k__BackingField;
    public char AccessKey { get; private set; }
    public bool ShowAccessKey { get; public set; }
    private static AccessText();
    [CompilerGeneratedAttribute]
public char get_AccessKey();
    [CompilerGeneratedAttribute]
private void set_AccessKey(char value);
    public bool get_ShowAccessKey();
    public void set_ShowAccessKey(bool value);
    private protected virtual void RenderCore(DrawingContext context);
    protected virtual TextLayout CreateTextLayout(string text);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [NullableContextAttribute("2")]
internal static string RemoveAccessKeyMarker(string text);
    private static int FindAccessKeyMarker(string text);
    [NullableContextAttribute("2")]
private void TextChanged(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.AdornerLayer : Canvas {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<Visual> AdornedElementProperty;
    public static AttachedProperty`1<bool> IsClipEnabledProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<Control> AdornerProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ITemplate`1<Control>> DefaultFocusAdornerProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AttachedProperty`1<AdornedElementInfo> s_adornedElementInfoProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AttachedProperty`1<AdornerLayer> s_savedAdornerLayerProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITemplate`1<Control> DefaultFocusAdorner { get; public set; }
    private static AdornerLayer();
    public static Visual GetAdornedElement(Visual adorner);
    public static void SetAdornedElement(Visual adorner, Visual adorned);
    public static AdornerLayer GetAdornerLayer(Visual visual);
    public static bool GetIsClipEnabled(Visual adorner);
    public static void SetIsClipEnabled(Visual adorner, bool isClipEnabled);
    public static Control GetAdorner(Visual visual);
    public static void SetAdorner(Visual visual, Control adorner);
    public ITemplate`1<Control> get_DefaultFocusAdorner();
    public void set_DefaultFocusAdorner(ITemplate`1<Control> value);
    private static void AdornerChanged(AvaloniaPropertyChangedEventArgs`1<Control> e);
    private static void VisualOnAttachedToVisualTree(object sender, VisualTreeAttachmentEventArgs e);
    private static void VisualOnDetachedFromVisualTree(object sender, VisualTreeAttachmentEventArgs e);
    private static void Attach(Visual visual, Control adorner);
    private static void Detach(Visual visual, Control adorner);
    [NullableContextAttribute("2")]
private static void AddVisualAdorner(Visual visual, Control adorner, AdornerLayer layer);
    [NullableContextAttribute("2")]
private static void RemoveVisualAdorner(Visual visual, Control adorner, AdornerLayer layer);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private static void AdornedElementChanged(AvaloniaPropertyChangedEventArgs`1<Visual> e);
    private void UpdateClip(Control control, TransformedBounds bounds, bool isEnabled);
    private void ChildrenCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateAdornedElement(Visual adorner, Visual adorned);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection : ObservableCollection`1<CalendarDateRange> {
    private Calendar _owner;
    public CalendarBlackoutDatesCollection(Calendar owner);
    public void AddDatesInPast();
    public bool Contains(DateTime date);
    public bool Contains(DateTime start, DateTime end);
    public bool ContainsAny(CalendarDateRange range);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, CalendarDateRange item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, CalendarDateRange item);
    private bool IsValid(CalendarDateRange item);
    private static void EnsureValidThread();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Primitives.CalendarButton : Button {
    private bool _isCalendarButtonFocused;
    private bool _isInactive;
    private bool _isSelected;
    [CompilerGeneratedAttribute]
private Calendar <Owner>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PointerPressedEventArgs> CalendarLeftMouseButtonDown;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PointerReleasedEventArgs> CalendarLeftMouseButtonUp;
    internal Calendar Owner { get; internal set; }
    internal bool IsCalendarButtonFocused { get; internal set; }
    internal bool IsInactive { get; internal set; }
    internal bool IsSelected { get; internal set; }
    [CompilerGeneratedAttribute]
internal Calendar get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(Calendar value);
    internal bool get_IsCalendarButtonFocused();
    internal void set_IsCalendarButtonFocused(bool value);
    internal bool get_IsInactive();
    internal void set_IsInactive(bool value);
    internal bool get_IsSelected();
    internal void set_IsSelected(bool value);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    private void SetPseudoClasses();
    [CompilerGeneratedAttribute]
public void add_CalendarLeftMouseButtonDown(EventHandler`1<PointerPressedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CalendarLeftMouseButtonDown(EventHandler`1<PointerPressedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CalendarLeftMouseButtonUp(EventHandler`1<PointerReleasedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CalendarLeftMouseButtonUp(EventHandler`1<PointerReleasedEventArgs> value);
    [NullableContextAttribute("1")]
protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Primitives.CalendarDayButton : Button {
    private static int DefaultContent;
    private bool _isCurrent;
    private bool _ignoringMouseOverState;
    private bool _isBlackout;
    private bool _isToday;
    private bool _isInactive;
    private bool _isSelected;
    [CompilerGeneratedAttribute]
private Calendar <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PointerPressedEventArgs> CalendarDayButtonMouseDown;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PointerReleasedEventArgs> CalendarDayButtonMouseUp;
    internal Calendar Owner { get; internal set; }
    internal int Index { get; internal set; }
    internal bool IsCurrent { get; internal set; }
    internal bool IsBlackout { get; internal set; }
    internal bool IsToday { get; internal set; }
    internal bool IsInactive { get; internal set; }
    internal bool IsSelected { get; internal set; }
    [CompilerGeneratedAttribute]
internal Calendar get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(Calendar value);
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    internal bool get_IsCurrent();
    internal void set_IsCurrent(bool value);
    internal void IgnoreMouseOverState();
    internal bool get_IsBlackout();
    internal void set_IsBlackout(bool value);
    internal bool get_IsToday();
    internal void set_IsToday(bool value);
    internal bool get_IsInactive();
    internal void set_IsInactive(bool value);
    internal bool get_IsSelected();
    internal void set_IsSelected(bool value);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    private void SetPseudoClasses();
    [CompilerGeneratedAttribute]
public void add_CalendarDayButtonMouseDown(EventHandler`1<PointerPressedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CalendarDayButtonMouseDown(EventHandler`1<PointerPressedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CalendarDayButtonMouseUp(EventHandler`1<PointerReleasedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CalendarDayButtonMouseUp(EventHandler`1<PointerReleasedEventArgs> value);
    [NullableContextAttribute("1")]
protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
}
internal static class Avalonia.Controls.Primitives.CalendarExtensions : object {
    public static void GetMetaKeyState(KeyModifiers modifiers, Boolean& ctrl, Boolean& shift);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_HeaderButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_MonthView", "Avalonia.Controls.Grid")]
[TemplatePartAttribute("PART_NextButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_PreviousButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_YearView", "Avalonia.Controls.Grid")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Primitives.CalendarItem : TemplatedControl {
    private static int NumberOfDaysPerWeek;
    [NullableAttribute("1")]
private static string PART_ElementHeaderButton;
    [NullableAttribute("1")]
private static string PART_ElementPreviousButton;
    [NullableAttribute("1")]
private static string PART_ElementNextButton;
    [NullableAttribute("1")]
private static string PART_ElementMonthView;
    [NullableAttribute("1")]
private static string PART_ElementYearView;
    private Button _headerButton;
    private Button _nextButton;
    private Button _previousButton;
    private DateTime _currentMonth;
    private bool _isMouseLeftButtonDown;
    private bool _isMouseLeftButtonDownYearView;
    private bool _isControlPressed;
    [NullableAttribute("1")]
private Calendar _calendar;
    [CompilerGeneratedAttribute]
private Calendar <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private CalendarDayButton <CurrentButton>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> HeaderBackgroundProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ITemplate`1<Control>> DayTitleTemplateProperty;
    [CompilerGeneratedAttribute]
private Grid <MonthView>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <YearView>k__BackingField;
    internal Calendar Owner { get; internal set; }
    internal CalendarDayButton CurrentButton { get; internal set; }
    public IBrush HeaderBackground { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITemplate`1<Control> DayTitleTemplate { get; public set; }
    internal Button HeaderButton { get; private set; }
    internal Button NextButton { get; private set; }
    internal Button PreviousButton { get; private set; }
    internal Grid MonthView { get; internal set; }
    internal Grid YearView { get; internal set; }
    private static CalendarItem();
    [CompilerGeneratedAttribute]
internal Calendar get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(Calendar value);
    [CompilerGeneratedAttribute]
internal CalendarDayButton get_CurrentButton();
    [CompilerGeneratedAttribute]
internal void set_CurrentButton(CalendarDayButton value);
    public IBrush get_HeaderBackground();
    public void set_HeaderBackground(IBrush value);
    public ITemplate`1<Control> get_DayTitleTemplate();
    public void set_DayTitleTemplate(ITemplate`1<Control> value);
    internal Button get_HeaderButton();
    private void set_HeaderButton(Button value);
    internal Button get_NextButton();
    private void set_NextButton(Button value);
    internal Button get_PreviousButton();
    private void set_PreviousButton(Button value);
    [CompilerGeneratedAttribute]
internal Grid get_MonthView();
    [CompilerGeneratedAttribute]
internal void set_MonthView(Grid value);
    [CompilerGeneratedAttribute]
internal Grid get_YearView();
    [CompilerGeneratedAttribute]
internal void set_YearView(Grid value);
    private void PopulateGrids();
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    private void SetDayTitles();
    private int PreviousMonthDays(DateTime firstOfMonth);
    internal void UpdateMonthMode();
    private void SetMonthModeHeaderButton();
    private void SetMonthModeNextButton(DateTime firstDayOfMonth);
    private void SetMonthModePreviousButton(DateTime firstDayOfMonth);
    [NullableContextAttribute("1")]
private void SetButtonState(CalendarDayButton childButton, DateTime dateToAdd);
    private void SetCalendarDayButtons(DateTime firstDayOfMonth);
    internal void UpdateYearMode();
    private void SetYearModeHeaderButton();
    private void SetYearModePreviousButton();
    private void SetYearModeNextButton();
    private void SetMonthButtonsForYearMode();
    internal void UpdateDecadeMode();
    internal void UpdateYearViewSelection(CalendarButton calendarButton);
    private void SetYearButtons(int decade, int decadeEnd);
    private void SetDecadeModeHeaderButton(int decade, int decadeEnd);
    private void SetDecadeModeNextButton(int decadeEnd);
    private void SetDecadeModePreviousButton(int decade);
    [NullableContextAttribute("1")]
internal void HeaderButton_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
internal void PreviousButton_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
internal void NextButton_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
internal void Cell_MouseEntered(object sender, PointerEventArgs e);
    [NullableContextAttribute("1")]
internal void Cell_MouseLeftButtonDown(object sender, PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
private void AddSelection(CalendarDayButton b, DateTime selectedDate);
    [NullableContextAttribute("1")]
internal void Cell_MouseLeftButtonUp(object sender, PointerReleasedEventArgs e);
    [NullableContextAttribute("1")]
private void Cell_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void Month_CalendarButtonMouseDown(object sender, PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
internal void Month_CalendarButtonMouseUp(object sender, PointerReleasedEventArgs e);
    [NullableContextAttribute("1")]
private void Month_MouseEntered(object sender, PointerEventArgs e);
    internal void UpdateDisabled(bool isEnabled);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.ChromeOverlayLayer : Panel {
    public static Panel GetOverlayLayer(Visual visual);
    public void Add(Control c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.DateTimePickerPanel : Panel {
    public static StyledProperty`1<double> ItemHeightProperty;
    public static StyledProperty`1<DateTimePickerPanelType> PanelTypeProperty;
    public static StyledProperty`1<string> ItemFormatProperty;
    public static StyledProperty`1<bool> ShouldLoopProperty;
    private int _minimumValue;
    private int _maximumValue;
    private int _selectedValue;
    private int _increment;
    private int _selectedIndex;
    private int _totalItems;
    private int _numItemsAboveBelowSelected;
    private int _range;
    private double _extentOne;
    private Size _extent;
    private Vector _offset;
    private bool _hasInit;
    private bool _suppressUpdateOffset;
    [NullableAttribute("2")]
private ScrollContentPresenter _parentScroller;
    [CompilerGeneratedAttribute]
private DateTime <FormatDate>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler ScrollInvalidated;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    public DateTimePickerPanelType PanelType { get; public set; }
    public double ItemHeight { get; public set; }
    public string ItemFormat { get; public set; }
    public bool ShouldLoop { get; public set; }
    public int MinimumValue { get; public set; }
    public int MaximumValue { get; public set; }
    public int SelectedValue { get; public set; }
    public int Increment { get; public set; }
    internal DateTime FormatDate { get; internal set; }
    public Vector Offset { get; public set; }
    public bool CanHorizontallyScroll { get; public set; }
    public bool CanVerticallyScroll { get; public set; }
    public bool IsLogicalScrollEnabled { get; }
    public Size ScrollSize { get; }
    public Size PageScrollSize { get; }
    public Size Extent { get; }
    public Size Viewport { get; }
    private static DateTimePickerPanel();
    public DateTimePickerPanelType get_PanelType();
    public void set_PanelType(DateTimePickerPanelType value);
    public double get_ItemHeight();
    public void set_ItemHeight(double value);
    public string get_ItemFormat();
    public void set_ItemFormat(string value);
    public bool get_ShouldLoop();
    public void set_ShouldLoop(bool value);
    public int get_MinimumValue();
    public void set_MinimumValue(int value);
    public int get_MaximumValue();
    public void set_MaximumValue(int value);
    public int get_SelectedValue();
    public void set_SelectedValue(int value);
    public int get_Increment();
    public void set_Increment(int value);
    [CompilerGeneratedAttribute]
internal DateTime get_FormatDate();
    [CompilerGeneratedAttribute]
internal void set_FormatDate(DateTime value);
    public sealed virtual Vector get_Offset();
    public sealed virtual void set_Offset(Vector value);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual bool get_IsLogicalScrollEnabled();
    public sealed virtual Size get_ScrollSize();
    public sealed virtual Size get_PageScrollSize();
    public sealed virtual Size get_Extent();
    public sealed virtual Size get_Viewport();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_ScrollInvalidated(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_ScrollInvalidated(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    public void RefreshItems();
    public void ScrollUp(int numItems);
    public void ScrollDown(int numItems);
    private void UpdateHelperInfo();
    private void CreateOrDestroyItems(Controls children);
    private void UpdateItems();
    private string FormatContent(int value, DateTimePickerPanelType panelType);
    private int CoerceSelected(int newValue);
    private void OnItemTapped(object sender, TappedEventArgs e);
    private ListBoxItem GetItemFromSource(Visual src);
    public sealed virtual bool BringIntoView(Control target, Rect targetRect);
    [NullableContextAttribute("2")]
public sealed virtual Control GetControlInDirection(NavigationDirection direction, Control from);
    public sealed virtual void RaiseScrollInvalidated(EventArgs e);
    private void OnScrollGestureEnded(object sender, ScrollGestureEndedEventArgs e);
}
public enum Avalonia.Controls.Primitives.DateTimePickerPanelType : Enum {
    public int value__;
    public static DateTimePickerPanelType Year;
    public static DateTimePickerPanelType Month;
    public static DateTimePickerPanelType Day;
    public static DateTimePickerPanelType Hour;
    public static DateTimePickerPanelType Minute;
    public static DateTimePickerPanelType Second;
    public static DateTimePickerPanelType TimePeriod;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Primitives.FlyoutBase : AvaloniaObject {
    [NullableAttribute("1")]
public static DirectProperty`2<FlyoutBase, bool> IsOpenProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<FlyoutBase, Control> TargetProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<FlyoutBase> AttachedFlyoutProperty;
    private bool _isOpen;
    private Control _target;
    [CompilerGeneratedAttribute]
private EventHandler Opened;
    [CompilerGeneratedAttribute]
private EventHandler Closed;
    public bool IsOpen { get; protected set; }
    public Control Target { get; protected set; }
    private static FlyoutBase();
    [CompilerGeneratedAttribute]
public void add_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler value);
    public bool get_IsOpen();
    protected void set_IsOpen(bool value);
    public Control get_Target();
    protected void set_Target(Control value);
    [NullableContextAttribute("1")]
public static FlyoutBase GetAttachedFlyout(Control element);
    [NullableContextAttribute("1")]
public static void SetAttachedFlyout(Control element, FlyoutBase value);
    [NullableContextAttribute("1")]
public static void ShowAttachedFlyout(Control flyoutOwner);
    [NullableContextAttribute("1")]
public abstract virtual void ShowAt(Control placementTarget);
    public abstract virtual void Hide();
    protected virtual void OnOpened();
    protected virtual void OnClosed();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_HeaderPresenter", "Avalonia.Controls.Presenters.ContentPresenter")]
public class Avalonia.Controls.Primitives.HeaderedContentControl : ContentControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> HeaderProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> HeaderTemplateProperty;
    [CompilerGeneratedAttribute]
private ContentPresenter <HeaderPresenter>k__BackingField;
    public object Header { get; public set; }
    public ContentPresenter HeaderPresenter { get; private set; }
    public IDataTemplate HeaderTemplate { get; public set; }
    private static HeaderedContentControl();
    public sealed virtual object get_Header();
    public sealed virtual void set_Header(object value);
    [CompilerGeneratedAttribute]
public ContentPresenter get_HeaderPresenter();
    [CompilerGeneratedAttribute]
private void set_HeaderPresenter(ContentPresenter value);
    public IDataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(IDataTemplate value);
    [NullableContextAttribute("1")]
protected virtual bool RegisterContentPresenter(ContentPresenter presenter);
    [NullableContextAttribute("1")]
private void HeaderChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
internal virtual void BuildDebugDisplay(StringBuilder builder, bool includeContent);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_HeaderPresenter", "Avalonia.Controls.Presenters.ContentPresenter")]
public class Avalonia.Controls.Primitives.HeaderedItemsControl : ItemsControl {
    private IDisposable _itemsBinding;
    private ItemsControl _prepareItemContainerOnAttach;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> HeaderProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> HeaderTemplateProperty;
    [CompilerGeneratedAttribute]
private ContentPresenter <HeaderPresenter>k__BackingField;
    public object Header { get; public set; }
    public IDataTemplate HeaderTemplate { get; public set; }
    public ContentPresenter HeaderPresenter { get; private set; }
    [NullableAttribute("1")]
private IAvaloniaList`1<ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.LogicalChildren { get; }
    private static HeaderedItemsControl();
    public object get_Header();
    public void set_Header(object value);
    public IDataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(IDataTemplate value);
    [CompilerGeneratedAttribute]
public ContentPresenter get_HeaderPresenter();
    [CompilerGeneratedAttribute]
private void set_HeaderPresenter(ContentPresenter value);
    [NullableContextAttribute("1")]
private sealed virtual override IAvaloniaList`1<ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.get_LogicalChildren();
    [NullableContextAttribute("1")]
protected virtual void OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs e);
    [NullableContextAttribute("1")]
private sealed virtual override bool Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(ContentPresenter presenter);
    [NullableContextAttribute("1")]
protected virtual bool RegisterContentPresenter(ContentPresenter presenter);
    [NullableContextAttribute("1")]
internal void PrepareItemContainer(ItemsControl parent);
    [NullableContextAttribute("1")]
private void HeaderChanged(AvaloniaPropertyChangedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.HeaderedSelectingItemsControl : SelectingItemsControl {
    private IDisposable _itemsBinding;
    private ItemsControl _prepareItemContainerOnAttach;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> HeaderProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> HeaderTemplateProperty;
    [CompilerGeneratedAttribute]
private ContentPresenter <HeaderPresenter>k__BackingField;
    public object Header { get; public set; }
    public IDataTemplate HeaderTemplate { get; public set; }
    public ContentPresenter HeaderPresenter { get; private set; }
    [NullableAttribute("1")]
private IAvaloniaList`1<ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.LogicalChildren { get; }
    private static HeaderedSelectingItemsControl();
    public object get_Header();
    public void set_Header(object value);
    public IDataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(IDataTemplate value);
    [CompilerGeneratedAttribute]
public ContentPresenter get_HeaderPresenter();
    [CompilerGeneratedAttribute]
private void set_HeaderPresenter(ContentPresenter value);
    [NullableContextAttribute("1")]
private sealed virtual override IAvaloniaList`1<ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.get_LogicalChildren();
    [NullableContextAttribute("1")]
private sealed virtual override bool Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(ContentPresenter presenter);
    [NullableContextAttribute("1")]
protected virtual void OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs e);
    [NullableContextAttribute("1")]
protected virtual bool RegisterContentPresenter(ContentPresenter presenter);
    [NullableContextAttribute("1")]
internal void PrepareItemContainer(ItemsControl parent);
    [NullableContextAttribute("1")]
private void HeaderChanged(AvaloniaPropertyChangedEventArgs e);
}
[NullableContextAttribute("2")]
public interface Avalonia.Controls.Primitives.ILogicalScrollable {
    public bool CanHorizontallyScroll { get; public set; }
    public bool CanVerticallyScroll { get; public set; }
    public bool IsLogicalScrollEnabled { get; }
    public Size ScrollSize { get; }
    public Size PageScrollSize { get; }
    public abstract virtual bool get_CanHorizontallyScroll();
    public abstract virtual void set_CanHorizontallyScroll(bool value);
    public abstract virtual bool get_CanVerticallyScroll();
    public abstract virtual void set_CanVerticallyScroll(bool value);
    public abstract virtual bool get_IsLogicalScrollEnabled();
    public abstract virtual Size get_ScrollSize();
    public abstract virtual Size get_PageScrollSize();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ScrollInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ScrollInvalidated(EventHandler value);
    [NullableContextAttribute("1")]
public abstract virtual bool BringIntoView(Control target, Rect targetRect);
    public abstract virtual Control GetControlInDirection(NavigationDirection direction, Control from);
    [NullableContextAttribute("1")]
public abstract virtual void RaiseScrollInvalidated(EventArgs e);
}
[NullableContextAttribute("2")]
[NotClientImplementableAttribute]
[UnstableAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public interface Avalonia.Controls.Primitives.IPopupHost {
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public double Width { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public double MinWidth { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public double MaxWidth { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public double Height { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public double MinHeight { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public double MaxHeight { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public ContentPresenter Presenter { get; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public bool Topmost { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public Transform Transform { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public Visual HostedVisualTreeRoot { get; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual double get_Width();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void set_Width(double value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual double get_MinWidth();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void set_MinWidth(double value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual double get_MaxWidth();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void set_MaxWidth(double value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual double get_Height();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void set_Height(double value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual double get_MinHeight();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void set_MinHeight(double value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual double get_MaxHeight();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void set_MaxHeight(double value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual ContentPresenter get_Presenter();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual bool get_Topmost();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void set_Topmost(bool value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual Transform get_Transform();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void set_Transform(Transform value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual Visual get_HostedVisualTreeRoot();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void add_TemplateApplied(EventHandler`1<TemplateAppliedEventArgs> value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void remove_TemplateApplied(EventHandler`1<TemplateAppliedEventArgs> value);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void ConfigurePosition(PopupPositionRequest positionRequest);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void SetChild(Control control);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void Show();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public abstract virtual void Hide();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
public interface Avalonia.Controls.Primitives.IScrollable {
    public Size Extent { get; }
    public Vector Offset { get; public set; }
    public Size Viewport { get; }
    public abstract virtual Size get_Extent();
    public abstract virtual Vector get_Offset();
    public abstract virtual void set_Offset(Vector value);
    public abstract virtual Size get_Viewport();
}
[NullableContextAttribute("1")]
public interface Avalonia.Controls.Primitives.IScrollSnapPointsInfo {
    public bool AreHorizontalSnapPointsRegular { get; public set; }
    public bool AreVerticalSnapPointsRegular { get; public set; }
    public abstract virtual bool get_AreHorizontalSnapPointsRegular();
    public abstract virtual void set_AreHorizontalSnapPointsRegular(bool value);
    public abstract virtual bool get_AreVerticalSnapPointsRegular();
    public abstract virtual void set_AreVerticalSnapPointsRegular(bool value);
    public abstract virtual IReadOnlyList`1<double> GetIrregularSnapPoints(Orientation orientation, SnapPointsAlignment snapPointsAlignment);
    public abstract virtual double GetRegularSnapPoints(Orientation orientation, SnapPointsAlignment snapPointsAlignment, Double& offset);
    [CompilerGeneratedAttribute]
public abstract virtual void add_HorizontalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HorizontalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_VerticalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_VerticalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.LightDismissOverlayLayer : Border {
    [CompilerGeneratedAttribute]
private IInputElement <InputPassThroughElement>k__BackingField;
    public IInputElement InputPassThroughElement { get; public set; }
    private static LightDismissOverlayLayer();
    [CompilerGeneratedAttribute]
public IInputElement get_InputPassThroughElement();
    [CompilerGeneratedAttribute]
public void set_InputPassThroughElement(IInputElement value);
    [NullableContextAttribute("1")]
public static LightDismissOverlayLayer GetLightDismissOverlayLayer(Visual visual);
    public sealed virtual bool HitTest(Point point);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool <HitTest>b__6_0(Visual x);
}
public class Avalonia.Controls.Primitives.OverlayLayer : Canvas {
    [CompilerGeneratedAttribute]
private Size <AvailableSize>k__BackingField;
    protected bool BypassFlowDirectionPolicies { get; }
    public Size AvailableSize { get; private set; }
    protected virtual bool get_BypassFlowDirectionPolicies();
    [CompilerGeneratedAttribute]
public Size get_AvailableSize();
    [CompilerGeneratedAttribute]
private void set_AvailableSize(Size value);
    [NullableContextAttribute("1")]
public static OverlayLayer GetOverlayLayer(Visual visual);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.OverlayPopupHost : ContentControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Transform> TransformProperty;
    [NullableAttribute("1")]
private OverlayLayer _overlayLayer;
    [NullableAttribute("1")]
private ManagedPopupPositioner _positioner;
    private Point _lastRequestedPosition;
    private PopupPositionRequest _popupPositionRequest;
    private Size _popupSize;
    private bool _shown;
    private bool _needsUpdate;
    public Visual HostedVisualTreeRoot { get; }
    public Transform Transform { get; public set; }
    private bool Avalonia.Controls.Primitives.IPopupHost.Topmost { get; private set; }
    internal Interactive InteractiveParent { get; }
    [NullableAttribute("1")]
private IReadOnlyList`1<ManagedPopupPositionerScreenInfo> Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.Screens { get; }
    private Rect Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.ParentClientAreaScreenGeometry { get; }
    private double Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.Scaling { get; }
    [NullableContextAttribute("1")]
public OverlayPopupHost(OverlayLayer overlayLayer);
    private static OverlayPopupHost();
    public sealed virtual void SetChild(Control control);
    public sealed virtual Visual get_HostedVisualTreeRoot();
    public sealed virtual Transform get_Transform();
    public sealed virtual void set_Transform(Transform value);
    private sealed virtual override bool Avalonia.Controls.Primitives.IPopupHost.get_Topmost();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_Topmost(bool value);
    internal virtual Interactive get_InteractiveParent();
    public sealed virtual void Dispose();
    public sealed virtual void Show();
    public sealed virtual void Hide();
    [NullableContextAttribute("1")]
[UnstableAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public void ConfigurePosition(Visual target, PlacementMode placement, Point offset, PopupAnchor anchor, PopupGravity gravity, PopupPositionerConstraintAdjustment constraintAdjustment, Nullable`1<Rect> rect);
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.ConfigurePosition(PopupPositionRequest positionRequest);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void UpdatePosition();
    [NullableContextAttribute("1")]
private sealed virtual override IReadOnlyList`1<ManagedPopupPositionerScreenInfo> Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.get_Screens();
    private sealed virtual override Rect Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.get_ParentClientAreaScreenGeometry();
    private sealed virtual override void Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.MoveAndResize(Point devicePoint, Size virtualSize);
    private sealed virtual override double Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.get_Scaling();
    [NullableContextAttribute("1")]
[UnstableAttribute("PopupHost is consireded an internal API. Use Popup or any Popup-based controls (Flyout, Tooltip) instead.")]
[ObsoleteAttribute("PopupHost is consireded an internal API. Use Popup or any Popup-based controls (Flyout, Tooltip) instead.")]
public static IPopupHost CreatePopupHost(Visual target, IAvaloniaDependencyResolver dependencyResolver);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_Width();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_Width(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_MinWidth();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_MinWidth(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_MaxWidth();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_MaxWidth(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_Height();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_Height(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_MinHeight();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_MinHeight(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_MaxHeight();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_MaxHeight(double value);
    [CompilerGeneratedAttribute]
private void <Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.MoveAndResize>b__31_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Primitives.PickerPresenterBase : TemplatedControl {
    [CompilerGeneratedAttribute]
private EventHandler Confirmed;
    [CompilerGeneratedAttribute]
private EventHandler Dismissed;
    protected virtual void OnConfirmed();
    protected virtual void OnDismiss();
    [CompilerGeneratedAttribute]
public void add_Confirmed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Confirmed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Dismissed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Dismissed(EventHandler value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.Popup : Control {
    public static StyledProperty`1<bool> WindowManagerAddShadowHintProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Control> ChildProperty;
    public static StyledProperty`1<bool> InheritsTransformProperty;
    public static StyledProperty`1<bool> IsOpenProperty;
    public static StyledProperty`1<PopupAnchor> PlacementAnchorProperty;
    public static StyledProperty`1<PopupPositionerConstraintAdjustment> PlacementConstraintAdjustmentProperty;
    public static StyledProperty`1<PopupGravity> PlacementGravityProperty;
    public static StyledProperty`1<PlacementMode> PlacementProperty;
    [ObsoleteAttribute("Use the Placement property instead.")]
[EditorBrowsableAttribute("1")]
public static StyledProperty`1<PlacementMode> PlacementModeProperty;
    public static StyledProperty`1<Nullable`1<Rect>> PlacementRectProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Control> PlacementTargetProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<CustomPopupPlacementCallback> CustomPopupPlacementCallbackProperty;
    public static StyledProperty`1<bool> OverlayDismissEventPassThroughProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IInputElement> OverlayInputPassThroughElementProperty;
    public static StyledProperty`1<double> HorizontalOffsetProperty;
    public static StyledProperty`1<bool> IsLightDismissEnabledProperty;
    public static StyledProperty`1<double> VerticalOffsetProperty;
    public static StyledProperty`1<bool> TopmostProperty;
    private bool _isOpenRequested;
    private bool _ignoreIsOpenChanged;
    [NullableAttribute("2")]
private PopupOpenState _openState;
    [NullableAttribute("2")]
private Action`1<IPopupHost> _popupHostChangedHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Closed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Opened;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<CancelEventArgs> Closing;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IAvaloniaDependencyResolver <DependencyResolver>k__BackingField;
    [NullableAttribute("2")]
public IPopupHost Host { get; }
    public bool WindowManagerAddShadowHint { get; public set; }
    [NullableAttribute("2")]
[ContentAttribute]
public Control Child { get; public set; }
    [NullableAttribute("2")]
public IAvaloniaDependencyResolver DependencyResolver { get; public set; }
    public bool InheritsTransform { get; public set; }
    public bool IsLightDismissEnabled { get; public set; }
    public bool IsOpen { get; public set; }
    public PopupAnchor PlacementAnchor { get; public set; }
    public PopupPositionerConstraintAdjustment PlacementConstraintAdjustment { get; public set; }
    public PopupGravity PlacementGravity { get; public set; }
    [ObsoleteAttribute("Use the Placement property instead.")]
[EditorBrowsableAttribute("1")]
public PlacementMode PlacementMode { get; public set; }
    public PlacementMode Placement { get; public set; }
    public Nullable`1<Rect> PlacementRect { get; public set; }
    [NullableAttribute("2")]
[ResolveByNameAttribute]
public Control PlacementTarget { get; public set; }
    [NullableAttribute("2")]
public CustomPopupPlacementCallback CustomPopupPlacementCallback { get; public set; }
    public bool OverlayDismissEventPassThrough { get; public set; }
    [NullableAttribute("2")]
public IInputElement OverlayInputPassThroughElement { get; public set; }
    public double HorizontalOffset { get; public set; }
    public double VerticalOffset { get; public set; }
    public bool Topmost { get; public set; }
    [NullableAttribute("2")]
private IPopupHost Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHost { get; }
    public bool IsPointerOverPopup { get; }
    private static Popup();
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler`1<EventArgs> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Opened(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_Closing(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Closing(EventHandler`1<CancelEventArgs> value);
    [NullableContextAttribute("2")]
public IPopupHost get_Host();
    public bool get_WindowManagerAddShadowHint();
    public void set_WindowManagerAddShadowHint(bool value);
    [NullableContextAttribute("2")]
public Control get_Child();
    [NullableContextAttribute("2")]
public void set_Child(Control value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IAvaloniaDependencyResolver get_DependencyResolver();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DependencyResolver(IAvaloniaDependencyResolver value);
    public bool get_InheritsTransform();
    public void set_InheritsTransform(bool value);
    public bool get_IsLightDismissEnabled();
    public void set_IsLightDismissEnabled(bool value);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public PopupAnchor get_PlacementAnchor();
    public void set_PlacementAnchor(PopupAnchor value);
    public PopupPositionerConstraintAdjustment get_PlacementConstraintAdjustment();
    public void set_PlacementConstraintAdjustment(PopupPositionerConstraintAdjustment value);
    public PopupGravity get_PlacementGravity();
    public void set_PlacementGravity(PopupGravity value);
    public PlacementMode get_PlacementMode();
    public void set_PlacementMode(PlacementMode value);
    public PlacementMode get_Placement();
    public void set_Placement(PlacementMode value);
    public Nullable`1<Rect> get_PlacementRect();
    public void set_PlacementRect(Nullable`1<Rect> value);
    [NullableContextAttribute("2")]
public Control get_PlacementTarget();
    [NullableContextAttribute("2")]
public void set_PlacementTarget(Control value);
    [NullableContextAttribute("2")]
public CustomPopupPlacementCallback get_CustomPopupPlacementCallback();
    [NullableContextAttribute("2")]
public void set_CustomPopupPlacementCallback(CustomPopupPlacementCallback value);
    public bool get_OverlayDismissEventPassThrough();
    public void set_OverlayDismissEventPassThrough(bool value);
    [NullableContextAttribute("2")]
public IInputElement get_OverlayInputPassThroughElement();
    [NullableContextAttribute("2")]
public void set_OverlayInputPassThroughElement(IInputElement value);
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    public double get_VerticalOffset();
    public void set_VerticalOffset(double value);
    public bool get_Topmost();
    public void set_Topmost(bool value);
    [NullableContextAttribute("2")]
private sealed virtual override IPopupHost Avalonia.Controls.Diagnostics.IPopupHostProvider.get_PopupHost();
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Controls.Diagnostics.IPopupHostProvider.add_PopupHostChanged(Action`1<IPopupHost> value);
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Controls.Diagnostics.IPopupHostProvider.remove_PopupHostChanged(Action`1<IPopupHost> value);
    public void Open();
    public void Close();
    protected virtual Size MeasureCore(Size availableSize);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    [NullableContextAttribute("2")]
internal void SetPopupParent(Control newParent);
    private void UpdateHostPosition(IPopupHost popupHost, Control placementTarget);
    private void UpdateHostSizing(IPopupHost popupHost, TopLevel topLevel, Control placementTarget);
    private void HandlePositionChange();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private static IDisposable SubscribeToEventHandler(T target, TEventHandler handler, Action`2<T, TEventHandler> subscribe, Action`2<T, TEventHandler> unsubscribe);
    private static void WindowManagerAddShadowHintChanged(IPopupHost host, bool hint);
    private void IsOpenChanged(AvaloniaPropertyChangedEventArgs`1<bool> e);
    private void ChildChanged(AvaloniaPropertyChangedEventArgs e);
    private void CloseCore();
    private void ListenForNonClientClick(RawInputEventArgs e);
    private void PointerPressedDismissOverlay(object sender, PointerPressedEventArgs e);
    private void TargetDetached(object sender, VisualTreeAttachmentEventArgs e);
    private static void PassThroughEvent(PointerPressedEventArgs e);
    private void RootTemplateApplied(object sender, TemplateAppliedEventArgs e);
    [NullableContextAttribute("2")]
private void SetTemplatedParentAndApplyChildTemplates(Control control);
    private bool IsChildOrThis(Visual child);
    public bool IsInsidePopup(Visual visual);
    public bool get_IsPointerOverPopup();
    private void WindowDeactivated(object sender, EventArgs e);
    private void ParentClosed(object sender, EventArgs e);
    private void PlacementTargetTransformChanged(Visual v, Nullable`1<Matrix> matrix);
    private void WindowLostFocus();
    private void WindowPositionChanged(PixelPoint pp);
    private void PlacementTargetLayoutUpdated(object src, EventArgs e);
    private void ParentPopupPositionChanged(object src, PixelPointEventArgs e);
    private IgnoreIsOpenScope BeginIgnoringIsOpen();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Primitives.PopupFlyoutBase : FlyoutBase {
    public static StyledProperty`1<PlacementMode> PlacementProperty;
    public static StyledProperty`1<double> HorizontalOffsetProperty;
    public static StyledProperty`1<double> VerticalOffsetProperty;
    public static StyledProperty`1<PopupAnchor> PlacementAnchorProperty;
    public static StyledProperty`1<PopupGravity> PlacementGravityProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<CustomPopupPlacementCallback> CustomPopupPlacementCallbackProperty;
    public static StyledProperty`1<FlyoutShowMode> ShowModeProperty;
    public static StyledProperty`1<bool> OverlayDismissEventPassThroughProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IInputElement> OverlayInputPassThroughElementProperty;
    public static StyledProperty`1<PopupPositionerConstraintAdjustment> PlacementConstraintAdjustmentProperty;
    private Lazy`1<Popup> _popupLazy;
    private Nullable`1<Rect> _enlargedPopupRect;
    private Nullable`1<PixelRect> _enlargePopupRectScreenPixelRect;
    [NullableAttribute("2")]
private IDisposable _transientDisposable;
    [NullableAttribute("2")]
private Action`1<IPopupHost> _popupHostChangedHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<CancelEventArgs> Closing;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Opening;
    protected Popup Popup { get; }
    public PlacementMode Placement { get; public set; }
    public PopupGravity PlacementGravity { get; public set; }
    public PopupAnchor PlacementAnchor { get; public set; }
    public double HorizontalOffset { get; public set; }
    public double VerticalOffset { get; public set; }
    [NullableAttribute("2")]
public CustomPopupPlacementCallback CustomPopupPlacementCallback { get; public set; }
    public FlyoutShowMode ShowMode { get; public set; }
    public bool OverlayDismissEventPassThrough { get; public set; }
    [NullableAttribute("2")]
public IInputElement OverlayInputPassThroughElement { get; public set; }
    public PopupPositionerConstraintAdjustment PlacementConstraintAdjustment { get; public set; }
    [NullableAttribute("2")]
private IPopupHost Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHost { get; }
    private static PopupFlyoutBase();
    protected Popup get_Popup();
    public PlacementMode get_Placement();
    public void set_Placement(PlacementMode value);
    public PopupGravity get_PlacementGravity();
    public void set_PlacementGravity(PopupGravity value);
    public PopupAnchor get_PlacementAnchor();
    public void set_PlacementAnchor(PopupAnchor value);
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    public double get_VerticalOffset();
    public void set_VerticalOffset(double value);
    [NullableContextAttribute("2")]
public CustomPopupPlacementCallback get_CustomPopupPlacementCallback();
    [NullableContextAttribute("2")]
public void set_CustomPopupPlacementCallback(CustomPopupPlacementCallback value);
    public FlyoutShowMode get_ShowMode();
    public void set_ShowMode(FlyoutShowMode value);
    public bool get_OverlayDismissEventPassThrough();
    public void set_OverlayDismissEventPassThrough(bool value);
    [NullableContextAttribute("2")]
public IInputElement get_OverlayInputPassThroughElement();
    [NullableContextAttribute("2")]
public void set_OverlayInputPassThroughElement(IInputElement value);
    public PopupPositionerConstraintAdjustment get_PlacementConstraintAdjustment();
    public void set_PlacementConstraintAdjustment(PopupPositionerConstraintAdjustment value);
    [NullableContextAttribute("2")]
private sealed virtual override IPopupHost Avalonia.Controls.Diagnostics.IPopupHostProvider.get_PopupHost();
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Controls.Diagnostics.IPopupHostProvider.add_PopupHostChanged(Action`1<IPopupHost> value);
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Controls.Diagnostics.IPopupHostProvider.remove_PopupHostChanged(Action`1<IPopupHost> value);
    [CompilerGeneratedAttribute]
public void add_Closing(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Closing(EventHandler`1<CancelEventArgs> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Opening(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Opening(EventHandler value);
    public sealed virtual void ShowAt(Control placementTarget);
    public void ShowAt(Control placementTarget, bool showAtPointer);
    public sealed virtual void Hide();
    protected virtual bool HideCore(bool canCancel);
    protected virtual bool ShowAtCore(Control placementTarget, bool showAtPointer);
    private void PlacementTarget_DetachedFromVisualTree(object sender, VisualTreeAttachmentEventArgs e);
    private void HandleTransientDismiss(RawInputEventArgs args);
    protected virtual void OnOpening(CancelEventArgs args);
    protected virtual void OnClosing(CancelEventArgs args);
    protected abstract virtual Control CreatePresenter();
    private Popup CreatePopup();
    private void OnPopupOpened(object sender, EventArgs e);
    private void OnPopupClosing(object sender, CancelEventArgs e);
    private void OnPopupClosed(object sender, EventArgs e);
    private void OnPlacementTargetOrPopupKeyUp(object sender, KeyEventArgs e);
    private void PositionPopup(bool showAtPointer);
    private static void OnContextFlyoutPropertyChanged(AvaloniaPropertyChangedEventArgs args);
    private static void OnControlContextRequested(object sender, ContextRequestedEventArgs e);
    private bool CancelClosing();
    private bool CancelOpening();
    internal static void SetPresenterClasses(Control presenter, Classes classes);
    [CompilerGeneratedAttribute]
private Popup <.ctor>b__16_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.PopupPositioning.CustomPopupPlacement : object {
    private PopupGravity _gravity;
    private PopupAnchor _anchor;
    [CompilerGeneratedAttribute]
private Size <PopupSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Visual <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <AnchorRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupPositionerConstraintAdjustment <ConstraintAdjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Size PopupSize { get; }
    public Visual Target { get; }
    public Rect AnchorRectangle { get; public set; }
    public PopupAnchor Anchor { get; public set; }
    public PopupGravity Gravity { get; public set; }
    public PopupPositionerConstraintAdjustment ConstraintAdjustment { get; public set; }
    public Point Offset { get; public set; }
    internal CustomPopupPlacement(Size popupSize, Visual target);
    [CompilerGeneratedAttribute]
protected CustomPopupPlacement(CustomPopupPlacement original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Size get_PopupSize();
    [CompilerGeneratedAttribute]
public Visual get_Target();
    [CompilerGeneratedAttribute]
public Rect get_AnchorRectangle();
    [CompilerGeneratedAttribute]
public void set_AnchorRectangle(Rect value);
    public PopupAnchor get_Anchor();
    public void set_Anchor(PopupAnchor value);
    public PopupGravity get_Gravity();
    public void set_Gravity(PopupGravity value);
    [CompilerGeneratedAttribute]
public PopupPositionerConstraintAdjustment get_ConstraintAdjustment();
    [CompilerGeneratedAttribute]
public void set_ConstraintAdjustment(PopupPositionerConstraintAdjustment value);
    [CompilerGeneratedAttribute]
public Point get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Point value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CustomPopupPlacement left, CustomPopupPlacement right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CustomPopupPlacement left, CustomPopupPlacement right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CustomPopupPlacement other);
    [CompilerGeneratedAttribute]
public virtual CustomPopupPlacement <Clone>$();
}
public class Avalonia.Controls.Primitives.PopupPositioning.CustomPopupPlacementCallback : MulticastDelegate {
    public CustomPopupPlacementCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(CustomPopupPlacement parameters);
    public virtual IAsyncResult BeginInvoke(CustomPopupPlacement parameters, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[PrivateApiAttribute]
public interface Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup {
    internal IReadOnlyList`1<ManagedPopupPositionerScreenInfo> Screens { get; }
    internal Rect ParentClientAreaScreenGeometry { get; }
    internal double Scaling { get; }
    internal abstract virtual IReadOnlyList`1<ManagedPopupPositionerScreenInfo> get_Screens();
    internal abstract virtual Rect get_ParentClientAreaScreenGeometry();
    internal abstract virtual double get_Scaling();
    internal abstract virtual void MoveAndResize(Point devicePoint, Size virtualSize);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NotClientImplementableAttribute]
public interface Avalonia.Controls.Primitives.PopupPositioning.IPopupPositioner {
    public abstract virtual void Update(PopupPositionerParameters parameters);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[PrivateApiAttribute]
public class Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositioner : object {
    [NullableAttribute("1")]
private IManagedPopupPositionerPopup _popup;
    [NullableContextAttribute("1")]
internal ManagedPopupPositioner(IManagedPopupPositionerPopup popup);
    private static Point GetAnchorPoint(Rect anchorRect, PopupAnchor edge);
    private static Point Gravitate(Point anchorPoint, Size size, PopupGravity gravity);
    internal sealed virtual void Update(PopupPositionerParameters parameters);
    private Rect Calculate(Size translatedSize, Rect anchorRect, PopupAnchor anchor, PopupGravity gravity, PopupPositionerConstraintAdjustment constraintAdjustment, Point offset);
    [CompilerGeneratedAttribute]
internal static bool <Calculate>g__IsValid|5_2(Rect& rc);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PrivateApiAttribute]
public class Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositionerPopupImplHelper : object {
    private ITopLevelImpl _parent;
    private MoveResizeDelegate _moveResize;
    internal IReadOnlyList`1<ManagedPopupPositionerScreenInfo> Screens { get; }
    internal Rect ParentClientAreaScreenGeometry { get; }
    internal double Scaling { get; }
    internal ManagedPopupPositionerPopupImplHelper(ITopLevelImpl parent, MoveResizeDelegate moveResize);
    internal sealed virtual IReadOnlyList`1<ManagedPopupPositionerScreenInfo> get_Screens();
    internal sealed virtual Rect get_ParentClientAreaScreenGeometry();
    internal sealed virtual void MoveAndResize(Point devicePoint, Size virtualSize);
    internal virtual double get_Scaling();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[PrivateApiAttribute]
public class Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositionerScreenInfo : object {
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <WorkingArea>k__BackingField;
    internal Rect Bounds { get; }
    internal Rect WorkingArea { get; }
    internal ManagedPopupPositionerScreenInfo(Rect bounds, Rect workingArea);
    [CompilerGeneratedAttribute]
internal Rect get_Bounds();
    [CompilerGeneratedAttribute]
internal Rect get_WorkingArea();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[FlagsAttribute]
public enum Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor : Enum {
    public int value__;
    public static PopupAnchor None;
    public static PopupAnchor Top;
    public static PopupAnchor Bottom;
    public static PopupAnchor Left;
    public static PopupAnchor Right;
    public static PopupAnchor TopLeft;
    public static PopupAnchor TopRight;
    public static PopupAnchor BottomLeft;
    public static PopupAnchor BottomRight;
    public static PopupAnchor VerticalMask;
    public static PopupAnchor HorizontalMask;
    public static PopupAnchor AllMask;
}
[FlagsAttribute]
public enum Avalonia.Controls.Primitives.PopupPositioning.PopupGravity : Enum {
    public int value__;
    public static PopupGravity None;
    public static PopupGravity Top;
    public static PopupGravity Bottom;
    public static PopupGravity Left;
    public static PopupGravity Right;
    public static PopupGravity TopLeft;
    public static PopupGravity TopRight;
    public static PopupGravity BottomLeft;
    public static PopupGravity BottomRight;
}
[FlagsAttribute]
public enum Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment : Enum {
    public int value__;
    public static PopupPositionerConstraintAdjustment None;
    public static PopupPositionerConstraintAdjustment SlideX;
    public static PopupPositionerConstraintAdjustment SlideY;
    public static PopupPositionerConstraintAdjustment FlipX;
    public static PopupPositionerConstraintAdjustment FlipY;
    public static PopupPositionerConstraintAdjustment ResizeX;
    public static PopupPositionerConstraintAdjustment ResizeY;
    public static PopupPositionerConstraintAdjustment All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerExtensions : object {
    [ExtensionAttribute]
public static void Update(IPopupPositioner positioner, TopLevel topLevel, PopupPositionRequest positionRequest, Size popupSize, FlowDirection flowDirection);
    private static PopupPositionerParameters BuildParameters(TopLevel topLevel, PopupPositionRequest positionRequest, Size popupSize, FlowDirection flowDirection);
    private static Rect CalculateAnchorRect(TopLevel topLevel, PopupPositionRequest positionRequest);
    [NullableContextAttribute("2")]
private static bool TryGetAdorner(Visual target, Visual& adorned, Visual& adornerLayer);
}
[UnstableAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public class Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters : ValueType {
    private PopupGravity _gravity;
    private PopupAnchor _anchor;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <AnchorRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupPositionerConstraintAdjustment <ConstraintAdjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Offset>k__BackingField;
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public Size Size { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public Rect AnchorRectangle { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public PopupAnchor Anchor { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public PopupGravity Gravity { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public PopupPositionerConstraintAdjustment ConstraintAdjustment { get; public set; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public Point Offset { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public Size get_Size();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public void set_Size(Size value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public Rect get_AnchorRectangle();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public void set_AnchorRectangle(Rect value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public PopupAnchor get_Anchor();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public void set_Anchor(PopupAnchor value);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public PopupGravity get_Gravity();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public void set_Gravity(PopupGravity value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public PopupPositionerConstraintAdjustment get_ConstraintAdjustment();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public void set_ConstraintAdjustment(PopupPositionerConstraintAdjustment value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public Point get_Offset();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public void set_Offset(Point value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public static bool op_Inequality(PopupPositionerParameters left, PopupPositionerParameters right);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public static bool op_Equality(PopupPositionerParameters left, PopupPositionerParameters right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public sealed virtual bool Equals(PopupPositionerParameters other);
}
[ExtensionAttribute]
internal static class Avalonia.Controls.Primitives.PopupPositioning.PopupPositioningEdgeHelper : object {
    [ExtensionAttribute]
public static void ValidateEdge(PopupAnchor edge);
    [ExtensionAttribute]
public static void ValidateGravity(PopupGravity gravity);
    [ExtensionAttribute]
public static PopupAnchor Flip(PopupAnchor edge);
    [ExtensionAttribute]
public static PopupAnchor FlipX(PopupAnchor edge);
    [ExtensionAttribute]
public static PopupAnchor FlipY(PopupAnchor edge);
    [ExtensionAttribute]
public static PopupGravity FlipX(PopupGravity gravity);
    [ExtensionAttribute]
public static PopupGravity FlipY(PopupGravity gravity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PrivateApiAttribute]
[UnstableAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public class Avalonia.Controls.Primitives.PopupPositioning.PopupPositionRequest : object {
    [CompilerGeneratedAttribute]
private Visual <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private PlacementMode <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupAnchor <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupGravity <Gravity>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupPositionerConstraintAdjustment <ConstraintAdjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Rect> <AnchorRect>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CustomPopupPlacementCallback <PlacementCallback>k__BackingField;
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal Visual Target { get; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PlacementMode Placement { get; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal Point Offset { get; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PopupAnchor Anchor { get; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PopupGravity Gravity { get; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PopupPositionerConstraintAdjustment ConstraintAdjustment { get; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal Nullable`1<Rect> AnchorRect { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal CustomPopupPlacementCallback PlacementCallback { get; }
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PopupPositionRequest(Visual target, PlacementMode placement);
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PopupPositionRequest(Visual target, PlacementMode placement, Point offset, PopupAnchor anchor, PopupGravity gravity, PopupPositionerConstraintAdjustment constraintAdjustment, Nullable`1<Rect> anchorRect, CustomPopupPlacementCallback placementCallback);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal Visual get_Target();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PlacementMode get_Placement();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal Point get_Offset();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PopupAnchor get_Anchor();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PopupGravity get_Gravity();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal PopupPositionerConstraintAdjustment get_ConstraintAdjustment();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal Nullable`1<Rect> get_AnchorRect();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal CustomPopupPlacementCallback get_PlacementCallback();
    [ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.PopupRoot : WindowBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Transform> TransformProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> WindowManagerAddShadowHintProperty;
    private PopupPositionRequest _popupPositionRequest;
    private Size _popupSize;
    private bool _needsUpdate;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TopLevel <ParentTopLevel>k__BackingField;
    public IPopupImpl PlatformImpl { get; }
    public Transform Transform { get; public set; }
    public bool WindowManagerAddShadowHint { get; public set; }
    internal Interactive InteractiveParent { get; }
    private Visual Avalonia.VisualTree.IHostedVisualTreeRoot.Host { get; }
    private IStyleHost Avalonia.Styling.IStyleHost.StylingParent { get; }
    [NullableAttribute("1")]
public TopLevel ParentTopLevel { get; }
    [NullableAttribute("1")]
private Visual Avalonia.Controls.Primitives.IPopupHost.HostedVisualTreeRoot { get; }
    private static PopupRoot();
    [NullableContextAttribute("1")]
public PopupRoot(TopLevel parent, IPopupImpl impl);
    [NullableContextAttribute("1")]
public PopupRoot(TopLevel parent, IPopupImpl impl, IAvaloniaDependencyResolver dependencyResolver);
    public IPopupImpl get_PlatformImpl();
    public sealed virtual Transform get_Transform();
    public sealed virtual void set_Transform(Transform value);
    public bool get_WindowManagerAddShadowHint();
    public void set_WindowManagerAddShadowHint(bool value);
    internal virtual Interactive get_InteractiveParent();
    private sealed virtual override Visual Avalonia.VisualTree.IHostedVisualTreeRoot.get_Host();
    private sealed virtual override IStyleHost Avalonia.Styling.IStyleHost.get_StylingParent();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public TopLevel get_ParentTopLevel();
    public sealed virtual void Dispose();
    private void UpdatePosition();
    [NullableContextAttribute("1")]
[UnstableAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public void ConfigurePosition(Visual target, PlacementMode placement, Point offset, PopupAnchor anchor, PopupGravity gravity, PopupPositionerConstraintAdjustment constraintAdjustment, Nullable`1<Rect> rect);
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.ConfigurePosition(PopupPositionRequest request);
    public sealed virtual void SetChild(Control control);
    [NullableContextAttribute("1")]
private sealed virtual override Visual Avalonia.Controls.Primitives.IPopupHost.get_HostedVisualTreeRoot();
    protected virtual Size MeasureOverride(Size availableSize);
    protected sealed virtual Size ArrangeSetBounds(Size size);
    [NullableContextAttribute("1")]
protected virtual AutomationPeer OnCreateAutomationPeer();
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_Width();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_Width(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_MinWidth();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_MinWidth(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_MaxWidth();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_MaxWidth(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_Height();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_Height(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_MinHeight();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_MinHeight(double value);
    private sealed virtual override double Avalonia.Controls.Primitives.IPopupHost.get_MaxHeight();
    private sealed virtual override void Avalonia.Controls.Primitives.IPopupHost.set_MaxHeight(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Primitives.RangeBase : TemplatedControl {
    private bool _isDataContextChanging;
    public static StyledProperty`1<double> MinimumProperty;
    public static StyledProperty`1<double> MaximumProperty;
    public static StyledProperty`1<double> ValueProperty;
    public static StyledProperty`1<double> SmallChangeProperty;
    public static StyledProperty`1<double> LargeChangeProperty;
    public static RoutedEvent`1<RangeBaseValueChangedEventArgs> ValueChangedEvent;
    public double Minimum { get; public set; }
    public double Maximum { get; public set; }
    public double Value { get; public set; }
    public double SmallChange { get; public set; }
    public double LargeChange { get; public set; }
    private static RangeBase();
    public void add_ValueChanged(EventHandler`1<RangeBaseValueChangedEventArgs> value);
    public void remove_ValueChanged(EventHandler`1<RangeBaseValueChangedEventArgs> value);
    public double get_Minimum();
    public void set_Minimum(double value);
    private static double CoerceMinimum(AvaloniaObject sender, double value);
    private void OnMinimumChanged();
    public double get_Maximum();
    public void set_Maximum(double value);
    private static double CoerceMaximum(AvaloniaObject sender, double value);
    private void OnMaximumChanged();
    public double get_Value();
    public void set_Value(double value);
    private static double CoerceValue(AvaloniaObject sender, double value);
    public double get_SmallChange();
    public void set_SmallChange(double value);
    public double get_LargeChange();
    public void set_LargeChange(double value);
    protected virtual void OnInitialized();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnDataContextBeginUpdate();
    protected virtual void OnDataContextEndUpdate();
    private static bool ValidateDouble(double value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.RangeBaseValueChangedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private double <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NewValue>k__BackingField;
    public double OldValue { get; public set; }
    public double NewValue { get; public set; }
    public RangeBaseValueChangedEventArgs(double oldValue, double newValue, RoutedEvent routedEvent);
    public RangeBaseValueChangedEventArgs(double oldValue, double newValue, RoutedEvent routedEvent, object source);
    [CompilerGeneratedAttribute]
public double get_OldValue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OldValue(double value);
    [CompilerGeneratedAttribute]
public double get_NewValue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NewValue(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_LineDownButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_LineUpButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_PageDownButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_PageUpButton", "Avalonia.Controls.Button")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Primitives.ScrollBar : RangeBase {
    public static StyledProperty`1<double> ViewportSizeProperty;
    public static StyledProperty`1<ScrollBarVisibility> VisibilityProperty;
    public static StyledProperty`1<Orientation> OrientationProperty;
    public static DirectProperty`2<ScrollBar, bool> IsExpandedProperty;
    public static StyledProperty`1<bool> AllowAutoHideProperty;
    public static StyledProperty`1<TimeSpan> HideDelayProperty;
    public static StyledProperty`1<TimeSpan> ShowDelayProperty;
    [NullableAttribute("2")]
private Button _lineUpButton;
    [NullableAttribute("2")]
private Button _lineDownButton;
    [NullableAttribute("2")]
private Button _pageUpButton;
    [NullableAttribute("2")]
private Button _pageDownButton;
    [NullableAttribute("2")]
private DispatcherTimer _timer;
    private bool _isExpanded;
    [NullableAttribute("2")]
private CompositeDisposable _ownerSubscriptions;
    [NullableAttribute("2")]
private ScrollViewer _owner;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ScrollEventArgs> Scroll;
    public double ViewportSize { get; public set; }
    public ScrollBarVisibility Visibility { get; public set; }
    public Orientation Orientation { get; public set; }
    public bool IsExpanded { get; private set; }
    public bool AllowAutoHide { get; public set; }
    public TimeSpan HideDelay { get; public set; }
    public TimeSpan ShowDelay { get; public set; }
    private static ScrollBar();
    public double get_ViewportSize();
    public void set_ViewportSize(double value);
    public ScrollBarVisibility get_Visibility();
    public void set_Visibility(ScrollBarVisibility value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public bool get_IsExpanded();
    private void set_IsExpanded(bool value);
    public bool get_AllowAutoHide();
    public void set_AllowAutoHide(bool value);
    public TimeSpan get_HideDelay();
    public void set_HideDelay(TimeSpan value);
    public TimeSpan get_ShowDelay();
    public void set_ShowDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public void add_Scroll(EventHandler`1<ScrollEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Scroll(EventHandler`1<ScrollEventArgs> value);
    private void UpdateIsVisible();
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    internal void AttachToScrollViewer();
    private double ExtractOrdinate(Vector v);
    private double ExtractOrdinate(Size v);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPointerWheelChanged(PointerWheelEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnPointerEntered(PointerEventArgs e);
    protected virtual void OnPointerExited(PointerEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void InvokeAfterDelay(Action handler, TimeSpan delay);
    private void UpdateIsExpandedState();
    private void CollapseAfterDelay();
    private void ExpandAfterDelay();
    private void Collapse();
    private void Expand();
    private void LineUpClick(object sender, RoutedEventArgs e);
    private void LineDownClick(object sender, RoutedEventArgs e);
    private void PageUpClick(object sender, RoutedEventArgs e);
    private void PageDownClick(object sender, RoutedEventArgs e);
    private void SmallDecrement();
    private void SmallIncrement();
    private void LargeDecrement();
    private void LargeIncrement();
    private void OnThumbDragDelta(VectorEventArgs e);
    private void OnThumbDragComplete(VectorEventArgs e);
    protected void OnScroll(ScrollEventType scrollEventType);
    private void UpdatePseudoClasses(Orientation o);
}
public enum Avalonia.Controls.Primitives.ScrollBarVisibility : Enum {
    public int value__;
    public static ScrollBarVisibility Disabled;
    public static ScrollBarVisibility Auto;
    public static ScrollBarVisibility Hidden;
    public static ScrollBarVisibility Visible;
}
public class Avalonia.Controls.Primitives.ScrollEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ScrollEventType <ScrollEventType>k__BackingField;
    public double NewValue { get; private set; }
    public ScrollEventType ScrollEventType { get; private set; }
    public ScrollEventArgs(ScrollEventType eventType, double newValue);
    [CompilerGeneratedAttribute]
public double get_NewValue();
    [CompilerGeneratedAttribute]
private void set_NewValue(double value);
    [CompilerGeneratedAttribute]
public ScrollEventType get_ScrollEventType();
    [CompilerGeneratedAttribute]
private void set_ScrollEventType(ScrollEventType value);
}
public enum Avalonia.Controls.Primitives.ScrollEventType : Enum {
    public int value__;
    public static ScrollEventType SmallDecrement;
    public static ScrollEventType SmallIncrement;
    public static ScrollEventType LargeDecrement;
    public static ScrollEventType LargeIncrement;
    public static ScrollEventType ThumbTrack;
    public static ScrollEventType EndScroll;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.SelectedDatesCollection : ObservableCollection`1<DateTime> {
    private Collection`1<DateTime> _addedItems;
    private bool _isCleared;
    private bool _isRangeAdded;
    private Calendar _owner;
    public SelectedDatesCollection(Calendar owner);
    private void InvokeCollectionChanged(IList removedItems, IList addedItems);
    public void AddRange(DateTime start, DateTime end);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, DateTime item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, DateTime item);
    internal void ClearInternal();
    private bool CheckSelectionMode();
    private static void EnsureValidThread();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.SelectingItemsControl : ItemsControl {
    public static StyledProperty`1<bool> AutoScrollToSelectedItemProperty;
    public static DirectProperty`2<SelectingItemsControl, int> SelectedIndexProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<SelectingItemsControl, object> SelectedItemProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> SelectedValueProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBinding> SelectedValueBindingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected static DirectProperty`2<SelectingItemsControl, IList> SelectedItemsProperty;
    protected static DirectProperty`2<SelectingItemsControl, ISelectionModel> SelectionProperty;
    protected static StyledProperty`1<SelectionMode> SelectionModeProperty;
    public static StyledProperty`1<bool> IsSelectedProperty;
    public static StyledProperty`1<bool> IsTextSearchEnabledProperty;
    public static RoutedEvent`1<RoutedEventArgs> IsSelectedChangedEvent;
    public static RoutedEvent`1<SelectionChangedEventArgs> SelectionChangedEvent;
    public static StyledProperty`1<bool> WrapSelectionProperty;
    private string _textSearchTerm;
    [NullableAttribute("2")]
private DispatcherTimer _textSearchTimer;
    [NullableAttribute("2")]
private ISelectionModel _selection;
    private int _oldSelectedIndex;
    private WeakReference _oldSelectedItem;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private WeakReference`1<IList> _oldSelectedItems;
    private bool _ignoreContainerSelectionChanged;
    [NullableAttribute("2")]
private UpdateState _updateState;
    private bool _hasScrolledToSelectedItem;
    [NullableAttribute("2")]
private BindingHelper _bindingHelper;
    private bool _isSelectionChangeActive;
    public bool AutoScrollToSelectedItem { get; public set; }
    public int SelectedIndex { get; public set; }
    [NullableAttribute("2")]
public object SelectedItem { get; public set; }
    [NullableAttribute("2")]
[AssignBindingAttribute]
[InheritDataTypeFromItemsAttribute("ItemsSource")]
public IBinding SelectedValueBinding { get; public set; }
    [NullableAttribute("2")]
public object SelectedValue { get; public set; }
    [NullableAttribute("2")]
protected IList SelectedItems { get; protected set; }
    protected ISelectionModel Selection { get; protected set; }
    public bool IsTextSearchEnabled { get; public set; }
    public bool WrapSelection { get; public set; }
    protected SelectionMode SelectionMode { get; protected set; }
    protected bool AlwaysSelected { get; }
    private static SelectingItemsControl();
    public void add_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public void remove_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public bool get_AutoScrollToSelectedItem();
    public void set_AutoScrollToSelectedItem(bool value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    [NullableContextAttribute("2")]
public object get_SelectedItem();
    [NullableContextAttribute("2")]
public void set_SelectedItem(object value);
    [NullableContextAttribute("2")]
public IBinding get_SelectedValueBinding();
    [NullableContextAttribute("2")]
public void set_SelectedValueBinding(IBinding value);
    [NullableContextAttribute("2")]
public object get_SelectedValue();
    [NullableContextAttribute("2")]
public void set_SelectedValue(object value);
    [NullableContextAttribute("2")]
protected IList get_SelectedItems();
    [NullableContextAttribute("2")]
protected void set_SelectedItems(IList value);
    protected ISelectionModel get_Selection();
    protected void set_Selection(ISelectionModel value);
    public bool get_IsTextSearchEnabled();
    public void set_IsTextSearchEnabled(bool value);
    public bool get_WrapSelection();
    public void set_WrapSelection(bool value);
    protected SelectionMode get_SelectionMode();
    protected void set_SelectionMode(SelectionMode value);
    protected bool get_AlwaysSelected();
    public virtual void BeginInit();
    public virtual void EndInit();
    public static bool GetIsSelected(Control control);
    public static void SetIsSelected(Control control, bool value);
    [NullableContextAttribute("2")]
protected Control GetContainerFromEventSource(object eventSource);
    private protected virtual void OnItemsViewCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    internal int GetAnchorIndex();
    [NullableContextAttribute("2")]
private ISelectionModel TryGetExistingSelection();
    protected internal virtual void PrepareContainerForItemOverride(Control container, object item, int index);
    protected internal virtual void ContainerForItemPreparedOverride(Control container, object item, int index);
    protected virtual void ContainerIndexChangedOverride(Control container, int oldIndex, int newIndex);
    protected internal virtual void ClearContainerForItemOverride(Control element);
    protected virtual void OnDataContextBeginUpdate();
    protected virtual void OnDataContextEndUpdate();
    protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
    protected virtual void OnInitialized();
    protected virtual void OnTextInput(TextInputEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected bool MoveSelection(NavigationDirection direction, bool wrap, bool rangeModifier);
    [NullableContextAttribute("2")]
protected bool MoveSelection(Control from, NavigationDirection direction, bool wrap, bool rangeModifier);
    protected void UpdateSelection(int index, bool select, bool rangeModifier, bool toggleModifier, bool rightButton, bool fromFocus);
    protected void UpdateSelection(Control container, bool select, bool rangeModifier, bool toggleModifier, bool rightButton, bool fromFocus);
    [NullableContextAttribute("2")]
protected bool UpdateSelectionFromEventSource(object eventSource, bool select, bool rangeModifier, bool toggleModifier, bool rightButton, bool fromFocus);
    private ISelectionModel GetOrCreateSelectionModel();
    private void OnItemsViewSourceChanged(object sender, EventArgs e);
    private void OnSelectionModelPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnSelectionModelSelectionChanged(object sender, SelectionModelSelectionChangedEventArgs e);
    private void OnSelectionModelLostSelection(object sender, EventArgs e);
    [NullableContextAttribute("2")]
private void SelectItemWithValue(object value);
    [NullableContextAttribute("2")]
private object FindItemWithValue(object value);
    private void UpdateSelectedValueFromItem();
    private void AutoScrollToSelectedItemIfNecessary(int anchorIndex);
    private void ContainerSelectionChanged(RoutedEventArgs e);
    private void MarkContainerSelected(Control container, bool selected);
    private void UpdateContainerSelection();
    private ISelectionModel CreateDefaultSelectionModel();
    private void InitializeSelectionModel(ISelectionModel model);
    [NullableContextAttribute("2")]
private void DeinitializeSelectionModel(ISelectionModel model);
    private void BeginUpdating();
    private void EndUpdating();
    private void StartTextSearchTimer();
    private void StopTextSearchTimer();
    private void TextSearchTimer_Tick(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>g__ExecuteScrollWhenLayoutUpdated|68_0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private bool <OnTextInput>g__Match|79_0(Control container);
    [CompilerGeneratedAttribute]
private void <OnSelectionModelSelectionChanged>g__Mark|89_0(int index, bool selected);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <AutoScrollToSelectedItemIfNecessary>b__94_0(object state);
}
public enum Avalonia.Controls.Primitives.SelectionHandleType : Enum {
    public int value__;
    public static SelectionHandleType Caret;
    public static SelectionHandleType Start;
    public static SelectionHandleType End;
}
public enum Avalonia.Controls.Primitives.SnapPointsAlignment : Enum {
    public int value__;
    public static SnapPointsAlignment Near;
    public static SnapPointsAlignment Center;
    public static SnapPointsAlignment Far;
}
public enum Avalonia.Controls.Primitives.SnapPointsType : Enum {
    public int value__;
    public static SnapPointsType None;
    public static SnapPointsType Mandatory;
    public static SnapPointsType MandatorySingle;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.SplitViewTemplateSettings : AvaloniaObject {
    public static StyledProperty`1<double> ClosedPaneWidthProperty;
    public static StyledProperty`1<GridLength> PaneColumnGridLengthProperty;
    public double ClosedPaneWidth { get; internal set; }
    public GridLength PaneColumnGridLength { get; internal set; }
    private static SplitViewTemplateSettings();
    public double get_ClosedPaneWidth();
    internal void set_ClosedPaneWidth(double value);
    public GridLength get_PaneColumnGridLength();
    internal void set_PaneColumnGridLength(GridLength value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.TabStrip : SelectingItemsControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FuncTemplate`1<Panel> DefaultPanel;
    private static TabStrip();
    [NullableContextAttribute("2")]
protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    [NullableContextAttribute("2")]
protected internal virtual bool NeedsContainerOverride(object item, int index, Object& recycleKey);
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
}
public class Avalonia.Controls.Primitives.TabStripItem : ListBoxItem {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.TemplateAppliedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private INameScope <NameScope>k__BackingField;
    public INameScope NameScope { get; }
    public TemplateAppliedEventArgs(INameScope nameScope);
    [CompilerGeneratedAttribute]
public INameScope get_NameScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.TemplatedControl : Control {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BackgroundProperty;
    public static StyledProperty`1<BackgroundSizing> BackgroundSizingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BorderBrushProperty;
    public static StyledProperty`1<Thickness> BorderThicknessProperty;
    public static StyledProperty`1<CornerRadius> CornerRadiusProperty;
    public static StyledProperty`1<FontFamily> FontFamilyProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<FontFeatureCollection> FontFeaturesProperty;
    public static StyledProperty`1<double> FontSizeProperty;
    public static StyledProperty`1<FontStyle> FontStyleProperty;
    public static StyledProperty`1<FontWeight> FontWeightProperty;
    public static StyledProperty`1<FontStretch> FontStretchProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> ForegroundProperty;
    public static StyledProperty`1<Thickness> PaddingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IControlTemplate> TemplateProperty;
    public static AttachedProperty`1<bool> IsTemplateFocusTargetProperty;
    public static RoutedEvent`1<TemplateAppliedEventArgs> TemplateAppliedEvent;
    [NullableAttribute("2")]
private IControlTemplate _appliedTemplate;
    [NullableAttribute("2")]
public IBrush Background { get; public set; }
    public BackgroundSizing BackgroundSizing { get; public set; }
    [NullableAttribute("2")]
public IBrush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public FontFamily FontFamily { get; public set; }
    [NullableAttribute("2")]
public FontFeatureCollection FontFeatures { get; public set; }
    public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public FontStretch FontStretch { get; public set; }
    [NullableAttribute("2")]
public IBrush Foreground { get; public set; }
    public Thickness Padding { get; public set; }
    [NullableAttribute("2")]
public IControlTemplate Template { get; public set; }
    private static TemplatedControl();
    public sealed virtual void add_TemplateApplied(EventHandler`1<TemplateAppliedEventArgs> value);
    public sealed virtual void remove_TemplateApplied(EventHandler`1<TemplateAppliedEventArgs> value);
    [NullableContextAttribute("2")]
public IBrush get_Background();
    [NullableContextAttribute("2")]
public void set_Background(IBrush value);
    public BackgroundSizing get_BackgroundSizing();
    public void set_BackgroundSizing(BackgroundSizing value);
    [NullableContextAttribute("2")]
public IBrush get_BorderBrush();
    [NullableContextAttribute("2")]
public void set_BorderBrush(IBrush value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    [NullableContextAttribute("2")]
public FontFeatureCollection get_FontFeatures();
    [NullableContextAttribute("2")]
public void set_FontFeatures(FontFeatureCollection value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    [NullableContextAttribute("2")]
public IBrush get_Foreground();
    [NullableContextAttribute("2")]
public void set_Foreground(IBrush value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    [NullableContextAttribute("2")]
public IControlTemplate get_Template();
    [NullableContextAttribute("2")]
public void set_Template(IControlTemplate value);
    public static bool GetIsTemplateFocusTarget(Control control);
    public static void SetIsTemplateFocusTarget(Control control, bool value);
    public sealed virtual void ApplyTemplate();
    protected virtual Control GetTemplateFocusTarget();
    internal sealed virtual void NotifyChildResourcesChanged(ResourcesChangedEventArgs e);
    protected virtual void OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnTemplateChanged(AvaloniaPropertyChangedEventArgs e);
    internal static void ApplyTemplatedParent(StyledElement control, AvaloniaObject templatedParent);
    private protected virtual void OnControlThemeChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Controls.Primitives.TextSearch : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> TextProperty;
    private static TextSearch();
    public static void SetText(Control control, string text);
    public static string GetText(Control control);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.TextSelectionHandle : Thumb {
    [CompilerGeneratedAttribute]
private SelectionHandleType <SelectionHandleType>k__BackingField;
    private Point _startPosition;
    [CompilerGeneratedAttribute]
private bool <IsDragging>k__BackingField;
    private Vector _delta;
    private Nullable`1<Point> _lastPoint;
    [NullableAttribute("2")]
private TranslateTransform _transform;
    internal SelectionHandleType SelectionHandleType { get; internal set; }
    internal Point IndicatorPosition { get; }
    internal bool IsDragging { get; private set; }
    private static TextSelectionHandle();
    [CompilerGeneratedAttribute]
internal SelectionHandleType get_SelectionHandleType();
    [CompilerGeneratedAttribute]
internal void set_SelectionHandleType(SelectionHandleType value);
    internal Point get_IndicatorPosition();
    [CompilerGeneratedAttribute]
internal bool get_IsDragging();
    [CompilerGeneratedAttribute]
private void set_IsDragging(bool value);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnLoaded(RoutedEventArgs args);
    protected virtual void OnDragStarted(VectorEventArgs e);
    protected virtual void OnDragDelta(VectorEventArgs e);
    protected virtual void OnDragCompleted(VectorEventArgs e);
    private void UpdateTextSelectionHandlePosition();
    protected virtual void ArrangeCore(Rect finalRect);
    internal void SetTopLeft(Point point);
    internal Point GetTopLeft();
    protected virtual void OnPointerCaptureLost(PointerCaptureLostEventArgs e);
    protected virtual void OnPointerMoved(PointerEventArgs e);
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Primitives.TextSelectionHandleCanvas : Canvas {
    private static int ContextMenuPadding;
    private TextSelectionHandle _caretHandle;
    private TextSelectionHandle _startHandle;
    private TextSelectionHandle _endHandle;
    [NullableAttribute("2")]
private TextPresenter _presenter;
    [NullableAttribute("2")]
private TextBox _textBox;
    private bool _showHandle;
    private bool _canShowContextMenu;
    internal bool ShowHandles { get; internal set; }
    internal bool get_ShowHandles();
    internal void set_ShowHandles(bool value);
    private void Handle_PointerReleased(object sender, PointerReleasedEventArgs e);
    private void Handle_DragStarted(object sender, VectorEventArgs e);
    private void EndHandle_DragDelta(object sender, VectorEventArgs e);
    private void StartHandle_DragDelta(object sender, VectorEventArgs e);
    private void CaretHandle_DragDelta(object sender, VectorEventArgs e);
    private void Handle_DragCompleted(object sender, VectorEventArgs e);
    private void EnsureVisible();
    private void DragSelectionHandle(TextSelectionHandle handle);
    private Point ToLayer(Point point);
    private Point ToPresenter(Point point);
    private Point ToTextBox(Point point);
    public void MoveHandlesToSelection();
    [NullableContextAttribute("2")]
internal void SetPresenter(TextPresenter textPresenter);
    private void TextBox_SizeChanged(object sender, SizeChangedEventArgs e);
    private void TextBoxEffectiveViewportChanged(object sender, EffectiveViewportChangedEventArgs e);
    private void TextBoxHolding(object sender, HoldingRoutedEventArgs e);
    internal bool ShowContextMenu();
    private void TextBoxPointerReleased(object sender, PointerReleasedEventArgs e);
    private void TextBoxPropertyChanged(object sender, AvaloniaPropertyChangedEventArgs e);
    private void TextBoxKeyDown(object sender, KeyEventArgs e);
    private void TextChanged(object sender, TextChangingEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.TextSelectorLayer : Canvas {
    [CompilerGeneratedAttribute]
private Size <AvailableSize>k__BackingField;
    protected bool BypassFlowDirectionPolicies { get; }
    public Size AvailableSize { get; private set; }
    protected virtual bool get_BypassFlowDirectionPolicies();
    [CompilerGeneratedAttribute]
public Size get_AvailableSize();
    [CompilerGeneratedAttribute]
private void set_AvailableSize(Size value);
    public static TextSelectorLayer GetTextSelectorLayer(Visual visual);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    public void Add(Control control);
    public void Remove(Control control);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Primitives.Thumb : TemplatedControl {
    public static RoutedEvent`1<VectorEventArgs> DragStartedEvent;
    public static RoutedEvent`1<VectorEventArgs> DragDeltaEvent;
    public static RoutedEvent`1<VectorEventArgs> DragCompletedEvent;
    private Nullable`1<Point> _lastPoint;
    private static Thumb();
    public void add_DragStarted(EventHandler`1<VectorEventArgs> value);
    public void remove_DragStarted(EventHandler`1<VectorEventArgs> value);
    public void add_DragDelta(EventHandler`1<VectorEventArgs> value);
    public void remove_DragDelta(EventHandler`1<VectorEventArgs> value);
    public void add_DragCompleted(EventHandler`1<VectorEventArgs> value);
    public void remove_DragCompleted(EventHandler`1<VectorEventArgs> value);
    internal void AdjustDrag(Vector v);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDragStarted(VectorEventArgs e);
    protected virtual void OnDragDelta(VectorEventArgs e);
    protected virtual void OnDragCompleted(VectorEventArgs e);
    protected virtual void OnPointerCaptureLost(PointerCaptureLostEventArgs e);
    protected virtual void OnPointerMoved(PointerEventArgs e);
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Primitives.ToggleButton : Button {
    public static StyledProperty`1<Nullable`1<bool>> IsCheckedProperty;
    public static StyledProperty`1<bool> IsThreeStateProperty;
    [ObsoleteAttribute("Use IsCheckedChangedEvent instead.")]
[EditorBrowsableAttribute("1")]
public static RoutedEvent`1<RoutedEventArgs> CheckedEvent;
    [ObsoleteAttribute("Use IsCheckedChangedEvent instead.")]
[EditorBrowsableAttribute("1")]
public static RoutedEvent`1<RoutedEventArgs> UncheckedEvent;
    [ObsoleteAttribute("Use IsCheckedChangedEvent instead.")]
[EditorBrowsableAttribute("1")]
public static RoutedEvent`1<RoutedEventArgs> IndeterminateEvent;
    public static RoutedEvent`1<RoutedEventArgs> IsCheckedChangedEvent;
    public Nullable`1<bool> IsChecked { get; public set; }
    public bool IsThreeState { get; public set; }
    private static ToggleButton();
    public void add_Checked(EventHandler`1<RoutedEventArgs> value);
    public void remove_Checked(EventHandler`1<RoutedEventArgs> value);
    public void add_Unchecked(EventHandler`1<RoutedEventArgs> value);
    public void remove_Unchecked(EventHandler`1<RoutedEventArgs> value);
    public void add_Indeterminate(EventHandler`1<RoutedEventArgs> value);
    public void remove_Indeterminate(EventHandler`1<RoutedEventArgs> value);
    public void add_IsCheckedChanged(EventHandler`1<RoutedEventArgs> value);
    public void remove_IsCheckedChanged(EventHandler`1<RoutedEventArgs> value);
    public Nullable`1<bool> get_IsChecked();
    public void set_IsChecked(Nullable`1<bool> value);
    public bool get_IsThreeState();
    public void set_IsThreeState(bool value);
    protected virtual void OnClick();
    protected virtual void Toggle();
    [ObsoleteAttribute("Use OnIsCheckedChanged instead.")]
[EditorBrowsableAttribute("1")]
protected virtual void OnChecked(RoutedEventArgs e);
    [ObsoleteAttribute("Use OnIsCheckedChanged instead.")]
[EditorBrowsableAttribute("1")]
protected virtual void OnUnchecked(RoutedEventArgs e);
    [ObsoleteAttribute("Use OnIsCheckedChanged instead.")]
[EditorBrowsableAttribute("1")]
protected virtual void OnIndeterminate(RoutedEventArgs e);
    protected virtual void OnIsCheckedChanged(RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void UpdatePseudoClasses(Nullable`1<bool> isChecked);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Primitives.Track : Control {
    public static StyledProperty`1<double> MinimumProperty;
    public static StyledProperty`1<double> MaximumProperty;
    public static StyledProperty`1<double> ValueProperty;
    public static StyledProperty`1<double> ViewportSizeProperty;
    public static StyledProperty`1<Orientation> OrientationProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Thumb> ThumbProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Button> IncreaseButtonProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Button> DecreaseButtonProperty;
    public static StyledProperty`1<bool> IsDirectionReversedProperty;
    public static StyledProperty`1<bool> IgnoreThumbDragProperty;
    public static StyledProperty`1<bool> DeferThumbDragProperty;
    [NullableAttribute("2")]
private VectorEventArgs _deferredThumbDrag;
    private Vector _lastDrag;
    [CompilerGeneratedAttribute]
private double <ThumbCenterOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Density>k__BackingField;
    public double Minimum { get; public set; }
    public double Maximum { get; public set; }
    public double Value { get; public set; }
    private double ThumbValue { get; }
    public double ViewportSize { get; public set; }
    public Orientation Orientation { get; public set; }
    [NullableAttribute("2")]
[ContentAttribute]
public Thumb Thumb { get; public set; }
    [NullableAttribute("2")]
public Button IncreaseButton { get; public set; }
    [NullableAttribute("2")]
public Button DecreaseButton { get; public set; }
    public bool IsDirectionReversed { get; public set; }
    public bool IgnoreThumbDrag { get; public set; }
    public bool DeferThumbDrag { get; public set; }
    private double ThumbCenterOffset { get; private set; }
    private double Density { get; private set; }
    private static Track();
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Value();
    public void set_Value(double value);
    private double get_ThumbValue();
    public double get_ViewportSize();
    public void set_ViewportSize(double value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    [NullableContextAttribute("2")]
public Thumb get_Thumb();
    [NullableContextAttribute("2")]
public void set_Thumb(Thumb value);
    [NullableContextAttribute("2")]
public Button get_IncreaseButton();
    [NullableContextAttribute("2")]
public void set_IncreaseButton(Button value);
    [NullableContextAttribute("2")]
public Button get_DecreaseButton();
    [NullableContextAttribute("2")]
public void set_DecreaseButton(Button value);
    public bool get_IsDirectionReversed();
    public void set_IsDirectionReversed(bool value);
    public bool get_IgnoreThumbDrag();
    public void set_IgnoreThumbDrag(bool value);
    public bool get_DeferThumbDrag();
    public void set_DeferThumbDrag(bool value);
    [CompilerGeneratedAttribute]
private double get_ThumbCenterOffset();
    [CompilerGeneratedAttribute]
private void set_ThumbCenterOffset(double value);
    [CompilerGeneratedAttribute]
private double get_Density();
    [CompilerGeneratedAttribute]
private void set_Density(double value);
    public virtual double ValueFromPoint(Point point);
    public virtual double ValueFromDistance(double horizontal, double vertical);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private Vector CalculateThumbAdjustment(Thumb thumb, Rect newThumbBounds);
    private static void CoerceLength(Double& componentLength, double trackLength);
    private void ComputeSliderLengths(Size arrangeSize, bool isVertical, Double& decreaseButtonLength, Double& thumbLength, Double& increaseButtonLength);
    private bool ComputeScrollBarLengths(Size arrangeSize, double viewportSize, bool isVertical, Double& decreaseButtonLength, Double& thumbLength, Double& increaseButtonLength);
    private void ThumbChanged(AvaloniaPropertyChangedEventArgs e);
    private void ButtonChanged(AvaloniaPropertyChangedEventArgs e);
    private void ThumbDragged(object sender, VectorEventArgs e);
    private void ApplyThumbDrag(VectorEventArgs e);
    private void ThumbDragCompleted(object sender, EventArgs e);
    private void ApplyDeferredThumbDrag();
    private void ShowChildren(bool visible);
    private void UpdatePseudoClasses(Orientation o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.UniformGrid : Panel {
    public static StyledProperty`1<int> RowsProperty;
    public static StyledProperty`1<int> ColumnsProperty;
    public static StyledProperty`1<int> FirstColumnProperty;
    private int _rows;
    private int _columns;
    public int Rows { get; public set; }
    public int Columns { get; public set; }
    public int FirstColumn { get; public set; }
    private static UniformGrid();
    public int get_Rows();
    public void set_Rows(int value);
    public int get_Columns();
    public void set_Columns(int value);
    public int get_FirstColumn();
    public void set_FirstColumn(int value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void UpdateRowsAndColumns();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Primitives.VisualLayerManager : Decorator {
    private static int AdornerZIndex;
    private static int ChromeZIndex;
    private static int LightDismissOverlayZIndex;
    private static int OverlayZIndex;
    private static int TextSelectorLayerZIndex;
    [NullableAttribute("2")]
private ILogicalRoot _logicalRoot;
    private List`1<Control> _layers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ChromeOverlayLayer> ChromeOverlayLayerProperty;
    [CompilerGeneratedAttribute]
private bool <IsPopup>k__BackingField;
    public bool IsPopup { get; public set; }
    public AdornerLayer AdornerLayer { get; }
    public ChromeOverlayLayer ChromeOverlayLayer { get; }
    [NullableAttribute("2")]
public OverlayLayer OverlayLayer { get; }
    [NullableAttribute("2")]
public TextSelectorLayer TextSelectorLayer { get; }
    public LightDismissOverlayLayer LightDismissOverlayLayer { get; }
    private static VisualLayerManager();
    [CompilerGeneratedAttribute]
public bool get_IsPopup();
    [CompilerGeneratedAttribute]
public void set_IsPopup(bool value);
    public AdornerLayer get_AdornerLayer();
    public ChromeOverlayLayer get_ChromeOverlayLayer();
    [NullableContextAttribute("2")]
public OverlayLayer get_OverlayLayer();
    [NullableContextAttribute("2")]
public TextSelectorLayer get_TextSelectorLayer();
    public LightDismissOverlayLayer get_LightDismissOverlayLayer();
    private T FindLayer();
    private void AddLayer(Control layer, int zindex);
    internal virtual void NotifyChildResourcesChanged(ResourcesChangedEventArgs e);
    protected virtual void OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_Indicator", "Avalonia.Controls.Border")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.ProgressBar : RangeBase {
    private double _percentage;
    [NullableAttribute("2")]
private Border _indicator;
    [NullableAttribute("2")]
private IDisposable _trackSizeChangedListener;
    public static StyledProperty`1<bool> IsIndeterminateProperty;
    public static StyledProperty`1<bool> ShowProgressTextProperty;
    public static StyledProperty`1<string> ProgressTextFormatProperty;
    public static StyledProperty`1<Orientation> OrientationProperty;
    public static DirectProperty`2<ProgressBar, double> PercentageProperty;
    [CompilerGeneratedAttribute]
private ProgressBarTemplateSettings <TemplateSettings>k__BackingField;
    public double Percentage { get; private set; }
    public ProgressBarTemplateSettings TemplateSettings { get; }
    public bool IsIndeterminate { get; public set; }
    public bool ShowProgressText { get; public set; }
    public string ProgressTextFormat { get; public set; }
    public Orientation Orientation { get; public set; }
    private static ProgressBar();
    public double get_Percentage();
    private void set_Percentage(double value);
    [CompilerGeneratedAttribute]
public ProgressBarTemplateSettings get_TemplateSettings();
    public bool get_IsIndeterminate();
    public void set_IsIndeterminate(bool value);
    public bool get_ShowProgressText();
    public void set_ShowProgressText(bool value);
    public string get_ProgressTextFormat();
    public void set_ProgressTextFormat(string value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void UpdateIndicator();
    private void UpdatePseudoClasses(Nullable`1<bool> isIndeterminate, Nullable`1<Orientation> o);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__31_0(AvaloniaPropertyChangedEventArgs _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.PullToRefresh.RefreshInfoProvider : Interactive {
    internal static double DefaultExecutionRatio;
    private PullDirection _refreshPullDirection;
    private Size _refreshVisualizerSize;
    [NullableAttribute("2")]
private CompositionVisual _visual;
    private bool _isInteractingForRefresh;
    private double _interactionRatio;
    private bool _entered;
    public static DirectProperty`2<RefreshInfoProvider, bool> IsInteractingForRefreshProperty;
    public static DirectProperty`2<RefreshInfoProvider, double> ExecutionRatioProperty;
    public static DirectProperty`2<RefreshInfoProvider, double> InteractionRatioProperty;
    public static RoutedEvent`1<RoutedEventArgs> RefreshStartedEvent;
    public static RoutedEvent`1<RoutedEventArgs> RefreshCompletedEvent;
    [CompilerGeneratedAttribute]
private bool <PeekingMode>k__BackingField;
    public bool PeekingMode { get; internal set; }
    public bool IsInteractingForRefresh { get; internal set; }
    public double InteractionRatio { get; public set; }
    public double ExecutionRatio { get; }
    [NullableAttribute("2")]
internal CompositionVisual Visual { get; }
    [NullableContextAttribute("2")]
public RefreshInfoProvider(PullDirection refreshPullDirection, Nullable`1<Size> refreshVIsualizerSize, CompositionVisual visual);
    private static RefreshInfoProvider();
    [CompilerGeneratedAttribute]
public bool get_PeekingMode();
    [CompilerGeneratedAttribute]
internal void set_PeekingMode(bool value);
    public bool get_IsInteractingForRefresh();
    internal void set_IsInteractingForRefresh(bool value);
    public double get_InteractionRatio();
    public void set_InteractionRatio(double value);
    public double get_ExecutionRatio();
    [NullableContextAttribute("2")]
internal CompositionVisual get_Visual();
    public void add_RefreshStarted(EventHandler`1<RoutedEventArgs> value);
    public void remove_RefreshStarted(EventHandler`1<RoutedEventArgs> value);
    public void add_RefreshCompleted(EventHandler`1<RoutedEventArgs> value);
    public void remove_RefreshCompleted(EventHandler`1<RoutedEventArgs> value);
    internal void InteractingStateEntered(object sender, PullGestureEventArgs e);
    internal void InteractingStateExited(object sender, PullGestureEndedEventArgs e);
    public void OnRefreshStarted();
    public void OnRefreshCompleted();
    internal void ValuesChanged(Vector value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.PullToRefresh.ScrollViewerIRefreshInfoProviderAdapter : object {
    private static int MaxSearchDepth;
    private static int InitialOffsetThreshold;
    private PullDirection _refreshPullDirection;
    [NullableAttribute("2")]
private ScrollViewer _scrollViewer;
    [NullableAttribute("2")]
private RefreshInfoProvider _refreshInfoProvider;
    [NullableAttribute("2")]
private PullGestureRecognizer _pullGestureRecognizer;
    [NullableAttribute("2")]
private InputElement _interactionSource;
    private bool _isVisualizerInteractionSourceAttached;
    public ScrollViewerIRefreshInfoProviderAdapter(PullDirection pullDirection);
    public RefreshInfoProvider AdaptFromTree(Visual root, Nullable`1<Size> refreshVIsualizerSize);
    public RefreshInfoProvider Adapt(ScrollViewer adaptee, Nullable`1<Size> refreshVIsualizerSize);
    private void ScrollViewer_ScrollChanged(object sender, ScrollChangedEventArgs e);
    public void SetAnimations(RefreshVisualizer refreshVisualizer);
    [NullableContextAttribute("2")]
private void ScrollViewer_Loaded(object sender, RoutedEventArgs e);
    [NullableContextAttribute("2")]
private void MakeInteractionSource(InputElement element);
    private void ScrollViewer_PointerReleased(object sender, PointerReleasedEventArgs e);
    private void ScrollViewer_PointerPressed(object sender, PointerPressedEventArgs e);
    private bool IsWithinOffsetThreashold();
    private void CleanUpScrollViewer();
    [CompilerGeneratedAttribute]
internal static ScrollViewer <AdaptFromTree>g__AdaptFromTreeRecursiveHelper|9_0(Visual root, int depth);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.RadioButton : ToggleButton {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> GroupNameProperty;
    private RadioButtonGroupManager _groupManager;
    public string GroupName { get; public set; }
    private bool Avalonia.Controls.IRadioButton.IsChecked { get; private set; }
    private MenuItemToggleType Avalonia.Controls.IRadioButton.ToggleType { get; }
    private static RadioButton();
    public sealed virtual string get_GroupName();
    public void set_GroupName(string value);
    private sealed virtual override bool Avalonia.Controls.IRadioButton.get_IsChecked();
    private sealed virtual override void Avalonia.Controls.IRadioButton.set_IsChecked(bool value);
    private sealed virtual override MenuItemToggleType Avalonia.Controls.IRadioButton.get_ToggleType();
    protected virtual void Toggle();
    [NullableContextAttribute("1")]
protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    [NullableContextAttribute("1")]
protected virtual AutomationPeer OnCreateAutomationPeer();
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void OnGroupNameChanged(string oldGroupName, string newGroupName);
    private void IsCheckedChanged(Nullable`1<bool> value);
    [MemberNotNullAttribute("_groupManager")]
private void EnsureRadioGroupManager(IRenderRoot root);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.RadioButtonGroupManager : object {
    private static RadioButtonGroupManager s_default;
    private static ConditionalWeakTable`2<IRenderRoot, RadioButtonGroupManager> s_registeredVisualRoots;
    private Dictionary`2<string, List`1<WeakReference`1<IRadioButton>>> _registeredGroups;
    private bool _ignoreCheckedChanges;
    private static RadioButtonGroupManager();
    public static RadioButtonGroupManager GetOrCreateForRoot(IRenderRoot root);
    public void Add(IRadioButton radioButton);
    public void Remove(IRadioButton radioButton, string oldGroupName);
    public void OnCheckedChanged(IRadioButton radioButton);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.RefreshCompletionDeferral : object {
    private Action _deferredAction;
    private int _deferCount;
    public RefreshCompletionDeferral(Action deferredAction);
    public void Complete();
    public RefreshCompletionDeferral Get();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.RefreshContainer : ContentControl {
    internal static int DefaultPullDimensionSize;
    private bool _hasDefaultRefreshInfoProviderAdapter;
    private ScrollViewerIRefreshInfoProviderAdapter _refreshInfoProviderAdapter;
    private RefreshInfoProvider _refreshInfoProvider;
    private IDisposable _visualizerSizeSubscription;
    private Grid _visualizerPresenter;
    private RefreshVisualizer _refreshVisualizer;
    private bool _hasDefaultRefreshVisualizer;
    [NullableAttribute("1")]
public static RoutedEvent`1<RefreshRequestedEventArgs> RefreshRequestedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static DirectProperty`2<RefreshContainer, ScrollViewerIRefreshInfoProviderAdapter> RefreshInfoProviderAdapterProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<RefreshContainer, RefreshVisualizer> VisualizerProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<PullDirection> PullDirectionProperty;
    internal ScrollViewerIRefreshInfoProviderAdapter RefreshInfoProviderAdapter { get; internal set; }
    public RefreshVisualizer Visualizer { get; public set; }
    public PullDirection PullDirection { get; public set; }
    private static RefreshContainer();
    internal ScrollViewerIRefreshInfoProviderAdapter get_RefreshInfoProviderAdapter();
    internal void set_RefreshInfoProviderAdapter(ScrollViewerIRefreshInfoProviderAdapter value);
    public RefreshVisualizer get_Visualizer();
    public void set_Visualizer(RefreshVisualizer value);
    public PullDirection get_PullDirection();
    public void set_PullDirection(PullDirection value);
    public void add_RefreshRequested(EventHandler`1<RefreshRequestedEventArgs> value);
    public void remove_RefreshRequested(EventHandler`1<RefreshRequestedEventArgs> value);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    private void OnVisualizerSizeChanged(Rect obj);
    [NullableContextAttribute("1")]
private void Visualizer_RefreshRequested(object sender, RefreshRequestedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void OnPullDirectionChanged();
    public void RequestRefresh();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.RefreshRequestedEventArgs : RoutedEventArgs {
    private RefreshCompletionDeferral _refreshCompletionDeferral;
    public RefreshRequestedEventArgs(Action deferredAction, RoutedEvent routedEvent);
    public RefreshRequestedEventArgs(RefreshCompletionDeferral completionDeferral, RoutedEvent routedEvent);
    public RefreshCompletionDeferral GetDeferral();
    internal void IncrementCount();
    internal void DecrementCount();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.RefreshVisualizer : ContentControl {
    private static float MinimumIndicatorOpacity;
    private static float ParallaxPositionRatio;
    private double _executingRatio;
    private RefreshVisualizerState _refreshVisualizerState;
    private RefreshInfoProvider _refreshInfoProvider;
    private IDisposable _isInteractingSubscription;
    private IDisposable _interactionRatioSubscription;
    private bool _isInteractingForRefresh;
    private Grid _root;
    private Control _content;
    private RefreshVisualizerOrientation _orientation;
    private float _startingRotationAngle;
    private double _interactionRatio;
    private bool _played;
    private ScalarKeyFrameAnimation _rotateAnimation;
    [NullableAttribute("1")]
internal static StyledProperty`1<PullDirection> PullDirectionProperty;
    [NullableAttribute("1")]
public static RoutedEvent`1<RefreshRequestedEventArgs> RefreshRequestedEvent;
    [NullableAttribute("1")]
public static DirectProperty`2<RefreshVisualizer, RefreshVisualizerState> RefreshVisualizerStateProperty;
    [NullableAttribute("1")]
public static DirectProperty`2<RefreshVisualizer, RefreshVisualizerOrientation> OrientationProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static DirectProperty`2<RefreshVisualizer, RefreshInfoProvider> RefreshInfoProviderProperty;
    private bool IsPullDirectionVertical { get; }
    private bool IsPullDirectionFar { get; }
    protected RefreshVisualizerState RefreshVisualizerState { get; private set; }
    public RefreshVisualizerOrientation Orientation { get; public set; }
    internal PullDirection PullDirection { get; internal set; }
    internal RefreshInfoProvider RefreshInfoProvider { get; internal set; }
    private static RefreshVisualizer();
    private bool get_IsPullDirectionVertical();
    private bool get_IsPullDirectionFar();
    protected RefreshVisualizerState get_RefreshVisualizerState();
    private void set_RefreshVisualizerState(RefreshVisualizerState value);
    public RefreshVisualizerOrientation get_Orientation();
    public void set_Orientation(RefreshVisualizerOrientation value);
    internal PullDirection get_PullDirection();
    internal void set_PullDirection(PullDirection value);
    internal RefreshInfoProvider get_RefreshInfoProvider();
    internal void set_RefreshInfoProvider(RefreshInfoProvider value);
    public void add_RefreshRequested(EventHandler`1<RefreshRequestedEventArgs> value);
    public void remove_RefreshRequested(EventHandler`1<RefreshRequestedEventArgs> value);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [NullableContextAttribute("1")]
private void OnContentLoaded(object s, RoutedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    private void UpdateContent();
    public void RequestRefresh();
    private void RefreshCompleted();
    private void RaiseRefreshRequested();
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void OnOrientationChanged();
    private void OnRefreshInfoProviderChanged();
    private void InteractionRatioObserver(double obj);
    private void InteractingForRefreshObserver(bool obj);
}
public enum Avalonia.Controls.RefreshVisualizerOrientation : Enum {
    public int value__;
    public static RefreshVisualizerOrientation Auto;
    public static RefreshVisualizerOrientation Normal;
    public static RefreshVisualizerOrientation Rotate90DegreesCounterclockwise;
    public static RefreshVisualizerOrientation Rotate270DegreesCounterclockwise;
}
public enum Avalonia.Controls.RefreshVisualizerState : Enum {
    public int value__;
    public static RefreshVisualizerState Idle;
    public static RefreshVisualizerState Peeking;
    public static RefreshVisualizerState Interacting;
    public static RefreshVisualizerState Pending;
    public static RefreshVisualizerState Refreshing;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.RelativePanel : Panel {
    public static AttachedProperty`1<object> AboveProperty;
    public static AttachedProperty`1<bool> AlignBottomWithPanelProperty;
    public static AttachedProperty`1<object> AlignBottomWithProperty;
    public static AttachedProperty`1<bool> AlignHorizontalCenterWithPanelProperty;
    public static AttachedProperty`1<object> AlignHorizontalCenterWithProperty;
    public static AttachedProperty`1<bool> AlignLeftWithPanelProperty;
    public static AttachedProperty`1<object> AlignLeftWithProperty;
    public static AttachedProperty`1<bool> AlignRightWithPanelProperty;
    public static AttachedProperty`1<object> AlignRightWithProperty;
    public static AttachedProperty`1<bool> AlignTopWithPanelProperty;
    public static AttachedProperty`1<object> AlignTopWithProperty;
    public static AttachedProperty`1<bool> AlignVerticalCenterWithPanelProperty;
    public static AttachedProperty`1<object> AlignVerticalCenterWithProperty;
    public static AttachedProperty`1<object> BelowProperty;
    public static AttachedProperty`1<object> LeftOfProperty;
    public static AttachedProperty`1<object> RightOfProperty;
    private Graph _childGraph;
    private static RelativePanel();
    [ResolveByNameAttribute]
public static object GetAbove(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetAbove(AvaloniaObject obj, object value);
    public static bool GetAlignBottomWithPanel(AvaloniaObject obj);
    public static void SetAlignBottomWithPanel(AvaloniaObject obj, bool value);
    [ResolveByNameAttribute]
public static object GetAlignBottomWith(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetAlignBottomWith(AvaloniaObject obj, object value);
    public static bool GetAlignHorizontalCenterWithPanel(AvaloniaObject obj);
    public static void SetAlignHorizontalCenterWithPanel(AvaloniaObject obj, bool value);
    [ResolveByNameAttribute]
public static object GetAlignHorizontalCenterWith(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetAlignHorizontalCenterWith(AvaloniaObject obj, object value);
    public static bool GetAlignLeftWithPanel(AvaloniaObject obj);
    public static void SetAlignLeftWithPanel(AvaloniaObject obj, bool value);
    [ResolveByNameAttribute]
public static object GetAlignLeftWith(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetAlignLeftWith(AvaloniaObject obj, object value);
    public static bool GetAlignRightWithPanel(AvaloniaObject obj);
    public static void SetAlignRightWithPanel(AvaloniaObject obj, bool value);
    [ResolveByNameAttribute]
public static object GetAlignRightWith(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetAlignRightWith(AvaloniaObject obj, object value);
    public static bool GetAlignTopWithPanel(AvaloniaObject obj);
    public static void SetAlignTopWithPanel(AvaloniaObject obj, bool value);
    [ResolveByNameAttribute]
public static object GetAlignTopWith(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetAlignTopWith(AvaloniaObject obj, object value);
    public static bool GetAlignVerticalCenterWithPanel(AvaloniaObject obj);
    public static void SetAlignVerticalCenterWithPanel(AvaloniaObject obj, bool value);
    [ResolveByNameAttribute]
public static object GetAlignVerticalCenterWith(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetAlignVerticalCenterWith(AvaloniaObject obj, object value);
    [ResolveByNameAttribute]
public static object GetBelow(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetBelow(AvaloniaObject obj, object value);
    [ResolveByNameAttribute]
public static object GetLeftOf(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetLeftOf(AvaloniaObject obj, object value);
    [ResolveByNameAttribute]
public static object GetRightOf(AvaloniaObject obj);
    [ResolveByNameAttribute]
public static void SetRightOf(AvaloniaObject obj, object value);
    private Layoutable GetDependencyElement(AvaloniaProperty property, AvaloniaObject child);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size arrangeSize);
}
[UnstableAttribute]
public class Avalonia.Controls.Remote.RemoteServer : object {
    [NullableAttribute("1")]
private EmbeddableControlRoot _topLevel;
    [NullableAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public object Content { get; public set; }
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public RemoteServer(IAvaloniaRemoteTransportConnection transport);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public object get_Content();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public void set_Content(object value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Remote.RemoteWidget : Control {
    private IAvaloniaRemoteTransportConnection _connection;
    [NullableAttribute("2")]
private FrameMessage _lastFrame;
    [NullableAttribute("2")]
private WriteableBitmap _bitmap;
    [CompilerGeneratedAttribute]
private SizingMode <Mode>k__BackingField;
    public SizingMode Mode { get; public set; }
    public RemoteWidget(IAvaloniaRemoteTransportConnection connection);
    [CompilerGeneratedAttribute]
public SizingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(SizingMode value);
    [NullableContextAttribute("2")]
private void OnMessage(object msg);
    protected virtual void ArrangeCore(Rect finalRect);
    public sealed virtual void Render(DrawingContext context);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__4_0(IAvaloniaRemoteTransportConnection t, object msg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnstableAttribute]
internal class Avalonia.Controls.Remote.Server.RemoteServerTopLevelImpl : OffscreenTopLevelImplBase {
    private IAvaloniaRemoteTransportConnection _transport;
    private object _lock;
    private Action _sendLastFrameIfNeeded;
    private Action _renderAndSendFrameIfNeeded;
    private Framebuffer _framebuffer;
    private long _lastSentFrame;
    private long _lastReceivedFrame;
    private long _nextFrameNumber;
    [NullableAttribute("2")]
private ClientViewportAllocatedMessage _pendingAllocation;
    private Nullable`1<PixelFormat> _format;
    [CompilerGeneratedAttribute]
private IMouseDevice <MouseDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private IKeyboardDevice <KeyboardDevice>k__BackingField;
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IEnumerable`1<object> Surfaces { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IMouseDevice MouseDevice { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IKeyboardDevice KeyboardDevice { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public RemoteServerTopLevelImpl(IAvaloniaRemoteTransportConnection transport);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private static RawPointerEventType GetAvaloniaEventType(MouseButton button, bool pressed);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private static RawInputModifiers GetAvaloniaRawInputModifiers(InputModifiers[] modifiers);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected virtual void OnMessage(IAvaloniaRemoteTransportConnection transport, object obj);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private static Nullable`1<PixelFormat> TryGetValidPixelFormat(PixelFormat[] formats);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected virtual Size Measure(Size constraint);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public virtual IEnumerable`1<object> get_Surfaces();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private Framebuffer GetOrCreateFramebuffer();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private void SendLastFrameIfNeeded();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
protected void RenderAndSendFrameIfNeeded();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public virtual IMouseDevice get_MouseDevice();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IKeyboardDevice get_KeyboardDevice();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public sealed virtual IFramebufferRenderTarget CreateFramebufferRenderTarget();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private void <OnMessage>b__13_2();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
private ILockedFramebuffer <CreateFramebufferRenderTarget>b__27_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.RepeatButton : Button {
    public static StyledProperty`1<int> IntervalProperty;
    public static StyledProperty`1<int> DelayProperty;
    [NullableAttribute("2")]
private DispatcherTimer _repeatTimer;
    public int Interval { get; public set; }
    public int Delay { get; public set; }
    private static RepeatButton();
    public int get_Interval();
    public void set_Interval(int value);
    public int get_Delay();
    public void set_Delay(int value);
    private void StartTimer();
    private void RepeatTimerOnTick(object sender, EventArgs e);
    private void StopTimer();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.RequestBringIntoViewEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private Visual <TargetObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <TargetRect>k__BackingField;
    public Visual TargetObject { get; public set; }
    public Rect TargetRect { get; public set; }
    [CompilerGeneratedAttribute]
public Visual get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(Visual value);
    [CompilerGeneratedAttribute]
public Rect get_TargetRect();
    [CompilerGeneratedAttribute]
public void set_TargetRect(Rect value);
}
[AttributeUsageAttribute("192")]
public class Avalonia.Controls.ResolveByNameAttribute : Attribute {
}
public class Avalonia.Controls.ReversibleStackPanel : StackPanel {
    [NullableAttribute("1")]
public static StyledProperty`1<bool> ReverseOrderProperty;
    public bool ReverseOrder { get; public set; }
    private static ReversibleStackPanel();
    public bool get_ReverseOrder();
    public void set_ReverseOrder(bool value);
    protected virtual Size ArrangeOverride(Size finalSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.RowDefinition : DefinitionBase {
    public static StyledProperty`1<double> MaxHeightProperty;
    public static StyledProperty`1<double> MinHeightProperty;
    public static StyledProperty`1<GridLength> HeightProperty;
    public double ActualHeight { get; }
    public double MaxHeight { get; public set; }
    public double MinHeight { get; public set; }
    public GridLength Height { get; public set; }
    internal GridLength UserSizeValueCache { get; }
    internal double UserMinSizeValueCache { get; }
    internal double UserMaxSizeValueCache { get; }
    private static RowDefinition();
    public RowDefinition(double value, GridUnitType type);
    public RowDefinition(GridLength height);
    public double get_ActualHeight();
    public double get_MaxHeight();
    public void set_MaxHeight(double value);
    public double get_MinHeight();
    public void set_MinHeight(double value);
    public GridLength get_Height();
    public void set_Height(GridLength value);
    internal virtual GridLength get_UserSizeValueCache();
    internal virtual double get_UserMinSizeValueCache();
    internal virtual double get_UserMaxSizeValueCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.RowDefinitions : DefinitionList`1<RowDefinition> {
    public RowDefinitions(string s);
    public virtual string ToString();
    public static RowDefinitions Parse(string s);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
[EditorBrowsableAttribute("1")]
public class Avalonia.Controls.SaveFileDialog : FileDialog {
    [CompilerGeneratedAttribute]
private string <DefaultExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowOverwritePrompt>k__BackingField;
    public string DefaultExtension { get; public set; }
    public Nullable`1<bool> ShowOverwritePrompt { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultExtension();
    [CompilerGeneratedAttribute]
public void set_DefaultExtension(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowOverwritePrompt();
    [CompilerGeneratedAttribute]
public void set_ShowOverwritePrompt(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Avalonia.Controls.SaveFileDialog/<ShowAsync>d__8")]
public Task`1<string> ShowAsync(Window parent);
    [NullableContextAttribute("1")]
public FilePickerSaveOptions ToFilePickerSaveOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Screens : object {
    private IScreenImpl _iScreenImpl;
    [NullableAttribute("2")]
private EventHandler _changedHandlers;
    public int ScreenCount { get; }
    public IReadOnlyList`1<Screen> All { get; }
    [NullableAttribute("2")]
public Screen Primary { get; }
    [PrivateApiAttribute]
internal Screens(IScreenImpl iScreenImpl);
    public int get_ScreenCount();
    public IReadOnlyList`1<Screen> get_All();
    [NullableContextAttribute("2")]
public Screen get_Primary();
    [NullableContextAttribute("2")]
public void add_Changed(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Changed(EventHandler value);
    [NullableContextAttribute("2")]
public Screen ScreenFromBounds(PixelRect bounds);
    public Screen ScreenFromWindow(WindowBase window);
    public Screen ScreenFromTopLevel(TopLevel topLevel);
    [ObsoleteAttribute("Use ScreenFromWindow(WindowBase) overload.", "True")]
[EditorBrowsableAttribute("1")]
public Screen ScreenFromWindow(IWindowBaseImpl window);
    [NullableContextAttribute("2")]
public Screen ScreenFromPoint(PixelPoint point);
    public Screen ScreenFromVisual(Visual visual);
    public Task`1<bool> RequestScreenDetails();
    private void ImplChanged();
}
public class Avalonia.Controls.ScrollChangedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private Vector <ExtentDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector <OffsetDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector <ViewportDelta>k__BackingField;
    public Vector ExtentDelta { get; }
    public Vector OffsetDelta { get; }
    public Vector ViewportDelta { get; }
    public ScrollChangedEventArgs(Vector extentDelta, Vector offsetDelta, Vector viewportDelta);
    [NullableContextAttribute("1")]
public ScrollChangedEventArgs(RoutedEvent routedEvent, Vector extentDelta, Vector offsetDelta, Vector viewportDelta);
    [CompilerGeneratedAttribute]
public Vector get_ExtentDelta();
    [CompilerGeneratedAttribute]
public Vector get_OffsetDelta();
    [CompilerGeneratedAttribute]
public Vector get_ViewportDelta();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_HorizontalScrollBar", "Avalonia.Controls.Primitives.ScrollBar")]
[TemplatePartAttribute("PART_VerticalScrollBar", "Avalonia.Controls.Primitives.ScrollBar")]
public class Avalonia.Controls.ScrollViewer : ContentControl {
    public static AttachedProperty`1<bool> BringIntoViewOnFocusChangeProperty;
    public static DirectProperty`2<ScrollViewer, Size> ExtentProperty;
    public static StyledProperty`1<Vector> OffsetProperty;
    public static DirectProperty`2<ScrollViewer, Size> ViewportProperty;
    public static DirectProperty`2<ScrollViewer, Size> LargeChangeProperty;
    public static DirectProperty`2<ScrollViewer, Size> SmallChangeProperty;
    public static DirectProperty`2<ScrollViewer, Vector> ScrollBarMaximumProperty;
    public static AttachedProperty`1<ScrollBarVisibility> HorizontalScrollBarVisibilityProperty;
    public static AttachedProperty`1<SnapPointsType> HorizontalSnapPointsTypeProperty;
    public static AttachedProperty`1<SnapPointsType> VerticalSnapPointsTypeProperty;
    public static AttachedProperty`1<SnapPointsAlignment> HorizontalSnapPointsAlignmentProperty;
    public static AttachedProperty`1<SnapPointsAlignment> VerticalSnapPointsAlignmentProperty;
    public static AttachedProperty`1<ScrollBarVisibility> VerticalScrollBarVisibilityProperty;
    public static DirectProperty`2<ScrollViewer, bool> IsExpandedProperty;
    public static AttachedProperty`1<bool> AllowAutoHideProperty;
    public static AttachedProperty`1<bool> IsScrollChainingEnabledProperty;
    public static AttachedProperty`1<bool> IsScrollInertiaEnabledProperty;
    public static AttachedProperty`1<bool> IsDeferredScrollingEnabledProperty;
    public static RoutedEvent`1<ScrollChangedEventArgs> ScrollChangedEvent;
    internal static double DefaultSmallChange;
    [NullableAttribute("2")]
private IDisposable _childSubscription;
    [NullableAttribute("2")]
private ILogicalScrollable _logicalScrollable;
    private Size _extent;
    private Size _viewport;
    private Size _oldExtent;
    private Vector _oldOffset;
    private Vector _oldMaximum;
    private Size _oldViewport;
    private Size _largeChange;
    private Size _smallChange;
    private bool _isExpanded;
    [NullableAttribute("2")]
private IDisposable _scrollBarExpandSubscription;
    public bool BringIntoViewOnFocusChange { get; public set; }
    public Size Extent { get; internal set; }
    public Vector Offset { get; public set; }
    public Size Viewport { get; internal set; }
    public Size LargeChange { get; }
    public Size SmallChange { get; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    protected bool CanHorizontallyScroll { get; }
    private bool Avalonia.Controls.Primitives.IInternalScroller.CanHorizontallyScroll { get; }
    protected bool CanVerticallyScroll { get; }
    private bool Avalonia.Controls.Primitives.IInternalScroller.CanVerticallyScroll { get; }
    [NullableAttribute("2")]
public Control CurrentAnchor { get; }
    public Vector ScrollBarMaximum { get; }
    public bool IsExpanded { get; private set; }
    public SnapPointsType HorizontalSnapPointsType { get; public set; }
    public SnapPointsType VerticalSnapPointsType { get; public set; }
    public SnapPointsAlignment HorizontalSnapPointsAlignment { get; public set; }
    public SnapPointsAlignment VerticalSnapPointsAlignment { get; public set; }
    public bool AllowAutoHide { get; public set; }
    public bool IsScrollChainingEnabled { get; public set; }
    public bool IsScrollInertiaEnabled { get; public set; }
    public bool IsDeferredScrollingEnabled { get; public set; }
    private static ScrollViewer();
    public void add_ScrollChanged(EventHandler`1<ScrollChangedEventArgs> value);
    public void remove_ScrollChanged(EventHandler`1<ScrollChangedEventArgs> value);
    public bool get_BringIntoViewOnFocusChange();
    public void set_BringIntoViewOnFocusChange(bool value);
    public sealed virtual Size get_Extent();
    internal void set_Extent(Size value);
    public sealed virtual Vector get_Offset();
    public sealed virtual void set_Offset(Vector value);
    public sealed virtual Size get_Viewport();
    internal void set_Viewport(Size value);
    public Size get_LargeChange();
    public Size get_SmallChange();
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    protected bool get_CanHorizontallyScroll();
    private sealed virtual override bool Avalonia.Controls.Primitives.IInternalScroller.get_CanHorizontallyScroll();
    protected bool get_CanVerticallyScroll();
    private sealed virtual override bool Avalonia.Controls.Primitives.IInternalScroller.get_CanVerticallyScroll();
    [NullableContextAttribute("2")]
public sealed virtual Control get_CurrentAnchor();
    public Vector get_ScrollBarMaximum();
    public bool get_IsExpanded();
    private void set_IsExpanded(bool value);
    public SnapPointsType get_HorizontalSnapPointsType();
    public void set_HorizontalSnapPointsType(SnapPointsType value);
    public SnapPointsType get_VerticalSnapPointsType();
    public void set_VerticalSnapPointsType(SnapPointsType value);
    public SnapPointsAlignment get_HorizontalSnapPointsAlignment();
    public void set_HorizontalSnapPointsAlignment(SnapPointsAlignment value);
    public SnapPointsAlignment get_VerticalSnapPointsAlignment();
    public void set_VerticalSnapPointsAlignment(SnapPointsAlignment value);
    public bool get_AllowAutoHide();
    public void set_AllowAutoHide(bool value);
    public bool get_IsScrollChainingEnabled();
    public void set_IsScrollChainingEnabled(bool value);
    public bool get_IsScrollInertiaEnabled();
    public void set_IsScrollInertiaEnabled(bool value);
    public bool get_IsDeferredScrollingEnabled();
    public void set_IsDeferredScrollingEnabled(bool value);
    public void LineUp();
    public void LineDown();
    public void LineLeft();
    public void LineRight();
    public void PageUp();
    public void PageDown();
    public void PageLeft();
    public void PageRight();
    public void ScrollToHome();
    public void ScrollToEnd();
    public static bool GetBringIntoViewOnFocusChange(Control control);
    public static void SetBringIntoViewOnFocusChange(Control control, bool value);
    public static ScrollBarVisibility GetHorizontalScrollBarVisibility(Control control);
    public static void SetHorizontalScrollBarVisibility(Control control, ScrollBarVisibility value);
    public static SnapPointsType GetHorizontalSnapPointsType(Control control);
    public static void SetHorizontalSnapPointsType(Control control, SnapPointsType value);
    public static SnapPointsType GetVerticalSnapPointsType(Control control);
    public static void SetVerticalSnapPointsType(Control control, SnapPointsType value);
    public static SnapPointsAlignment GetHorizontalSnapPointsAlignment(Control control);
    public static void SetHorizontalSnapPointsAlignment(Control control, SnapPointsAlignment value);
    public static SnapPointsAlignment GetVerticalSnapPointsAlignment(Control control);
    public static void SetVerticalSnapPointsAlignment(Control control, SnapPointsAlignment value);
    public static ScrollBarVisibility GetVerticalScrollBarVisibility(Control control);
    public static void SetAllowAutoHide(Control control, bool value);
    public static bool GetAllowAutoHide(Control control);
    public static void SetIsScrollChainingEnabled(Control control, bool value);
    public static bool GetIsScrollChainingEnabled(Control control);
    public static void SetVerticalScrollBarVisibility(Control control, ScrollBarVisibility value);
    public static bool GetIsScrollInertiaEnabled(Control control);
    public static void SetIsScrollInertiaEnabled(Control control, bool value);
    public static bool GetIsDeferredScrollingEnabled(Control control);
    public static void SetIsDeferredScrollingEnabled(Control control, bool value);
    public sealed virtual void RegisterAnchorCandidate(Control element);
    public sealed virtual void UnregisterAnchorCandidate(Control element);
    protected virtual bool RegisterContentPresenter(ContentPresenter presenter);
    internal static Vector CoerceOffset(AvaloniaObject sender, Vector value);
    private static double Clamp(double value, double min, double max);
    private static double Max(double x, double y);
    [NullableContextAttribute("2")]
private void ChildChanged(Control child);
    private void LogicalScrollInvalidated(object sender, EventArgs e);
    private void CalculatedPropertiesChanged();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnScrollChanged(ScrollChangedEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private IDisposable SubscribeToScrollBars(TemplateAppliedEventArgs e);
    private void OnScrollBarExpandedChanged(bool isExpanded);
    private void OnLayoutUpdated(object sender, EventArgs e);
    private void RaiseScrollChanged();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static IObservable`1<bool> <SubscribeToScrollBars>g__GetExpandedObservable|144_0(ScrollBar scrollBar);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.SelectableTextBlock : TextBlock {
    public static StyledProperty`1<int> SelectionStartProperty;
    public static StyledProperty`1<int> SelectionEndProperty;
    public static DirectProperty`2<SelectableTextBlock, string> SelectedTextProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> SelectionBrushProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> SelectionForegroundBrushProperty;
    public static DirectProperty`2<SelectableTextBlock, bool> CanCopyProperty;
    public static RoutedEvent`1<RoutedEventArgs> CopyingToClipboardEvent;
    private bool _canCopy;
    private int _wordSelectionStart;
    [NullableAttribute("2")]
public IBrush SelectionBrush { get; public set; }
    [NullableAttribute("2")]
public IBrush SelectionForegroundBrush { get; public set; }
    public int SelectionStart { get; public set; }
    public int SelectionEnd { get; public set; }
    public string SelectedText { get; }
    public bool CanCopy { get; private set; }
    private static SelectableTextBlock();
    public void add_CopyingToClipboard(EventHandler`1<RoutedEventArgs> value);
    public void remove_CopyingToClipboard(EventHandler`1<RoutedEventArgs> value);
    [NullableContextAttribute("2")]
public IBrush get_SelectionBrush();
    [NullableContextAttribute("2")]
public void set_SelectionBrush(IBrush value);
    [NullableContextAttribute("2")]
public IBrush get_SelectionForegroundBrush();
    [NullableContextAttribute("2")]
public void set_SelectionForegroundBrush(IBrush value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public int get_SelectionEnd();
    public void set_SelectionEnd(int value);
    public string get_SelectedText();
    public bool get_CanCopy();
    private void set_CanCopy(bool value);
    [AsyncStateMachineAttribute("Avalonia.Controls.SelectableTextBlock/<Copy>d__30")]
public void Copy();
    public void SelectAll();
    public void ClearSelection();
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual TextLayout CreateTextLayout(string text);
    protected virtual void RenderTextLayout(DrawingContext context, Point origin);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected virtual void OnPointerMoved(PointerEventArgs e);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    private void UpdateCommandStates();
    private string GetSelection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Avalonia.Controls.Selection.IndexRange : ValueType {
    private static IndexRange s_invalid;
    [CompilerGeneratedAttribute]
private int <Begin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public int Begin { get; }
    public int End { get; }
    public int Count { get; }
    public IndexRange(int index);
    public IndexRange(int begin, int end);
    private static IndexRange();
    [CompilerGeneratedAttribute]
public int get_Begin();
    [CompilerGeneratedAttribute]
public int get_End();
    public int get_Count();
    public bool Contains(int index);
    public bool Split(int splitIndex, IndexRange& before, IndexRange& after);
    public bool Intersects(IndexRange other);
    public bool Adjacent(IndexRange other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IndexRange other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(IndexRange left, IndexRange right);
    public static bool op_Inequality(IndexRange left, IndexRange right);
    [NullableContextAttribute("2")]
public static bool Contains(IReadOnlyList`1<IndexRange> ranges, int index);
    public static int GetAt(IReadOnlyList`1<IndexRange> ranges, int index);
    public static int Add(IList`1<IndexRange> ranges, IndexRange range, IList`1<IndexRange> added);
    public static int Add(IList`1<IndexRange> destination, IReadOnlyList`1<IndexRange> source, IList`1<IndexRange> added);
    public static int Intersect(IList`1<IndexRange> ranges, IndexRange range, IList`1<IndexRange> removed);
    [NullableContextAttribute("2")]
public static int Remove(IList`1<IndexRange> ranges, IndexRange range, IList`1<IndexRange> removed);
    public static int Remove(IList`1<IndexRange> destination, IReadOnlyList`1<IndexRange> source, IList`1<IndexRange> added);
    [IteratorStateMachineAttribute("Avalonia.Controls.Selection.IndexRange/<EnumerateIndices>d__28")]
public static IEnumerable`1<int> EnumerateIndices(IEnumerable`1<IndexRange> ranges);
    public static int GetCount(IEnumerable`1<IndexRange> ranges);
    private static void MergeRanges(IList`1<IndexRange> ranges);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Avalonia.Controls.Selection.InternalSelectionModel : SelectionModel`1<object> {
    [NullableAttribute("2")]
private IList _writableSelectedItems;
    private int _ignoreModelChanges;
    private bool _ignoreSelectedItemsChanges;
    private bool _skipSyncFromSelectedItems;
    private bool _isResetting;
    public IList WritableSelectedItems { get; public set; }
    public IList get_WritableSelectedItems();
    public void set_WritableSelectedItems(IList value);
    [NullableContextAttribute("2")]
internal void Update(IEnumerable source, Optional`1<IList> selectedItems);
    [NullableContextAttribute("2")]
private protected virtual void SetSource(IEnumerable value);
    private void SyncToSelectedItems();
    private void SyncFromSelectedItems();
    private void SubscribeToSelectedItems();
    private void UnsubscribeFromSelectedItems();
    private void OnSelectionChanged(object sender, SelectionModelSelectionChangedEventArgs e);
    protected virtual void OnSourceCollectionChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnSourceCollectionChangeFinished();
    private void OnSourceReset(object sender, EventArgs e);
    private void OnSelectedItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Add(IList newItems);
    [NullableContextAttribute("2")]
private static int IndexOf(object source, object item);
    private static bool SequenceEqual(IList first, IReadOnlyList`1<object> second);
    [CompilerGeneratedAttribute]
private void <OnSelectedItemsCollectionChanged>g__Remove|19_0(<>c__DisplayClass19_0& );
}
[NullableContextAttribute("2")]
public interface Avalonia.Controls.Selection.ISelectionModel {
    public IEnumerable Source { get; public set; }
    public bool SingleSelect { get; public set; }
    public int SelectedIndex { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<int> SelectedIndexes { get; }
    public object SelectedItem { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> SelectedItems { get; }
    public int AnchorIndex { get; public set; }
    public int Count { get; }
    public abstract virtual IEnumerable get_Source();
    public abstract virtual void set_Source(IEnumerable value);
    public abstract virtual bool get_SingleSelect();
    public abstract virtual void set_SingleSelect(bool value);
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<int> get_SelectedIndexes();
    public abstract virtual object get_SelectedItem();
    public abstract virtual void set_SelectedItem(object value);
    public abstract virtual IReadOnlyList`1<object> get_SelectedItems();
    public abstract virtual int get_AnchorIndex();
    public abstract virtual void set_AnchorIndex(int value);
    public abstract virtual int get_Count();
    [CompilerGeneratedAttribute]
public abstract virtual void add_IndexesChanged(EventHandler`1<SelectionModelIndexesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_IndexesChanged(EventHandler`1<SelectionModelIndexesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChanged(EventHandler`1<SelectionModelSelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChanged(EventHandler`1<SelectionModelSelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LostSelection(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LostSelection(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SourceReset(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SourceReset(EventHandler value);
    public abstract virtual void BeginBatchUpdate();
    public abstract virtual void EndBatchUpdate();
    public abstract virtual bool IsSelected(int index);
    public abstract virtual void Select(int index);
    public abstract virtual void Deselect(int index);
    public abstract virtual void SelectRange(int start, int end);
    public abstract virtual void DeselectRange(int start, int end);
    public abstract virtual void SelectAll();
    public abstract virtual void Clear();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class Avalonia.Controls.Selection.ReadOnlySelectionListBase`1 : object {
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public T Item { get; }
    public int Count { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    public abstract virtual T get_Item(int index);
    public abstract virtual int get_Count();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [NullableContextAttribute("1")]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    public void RaiseCollectionReset();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [DoesNotReturnAttribute]
private static void ThrowReadOnlyException();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Avalonia.Controls.Selection.SelectedIndexes`1 : ReadOnlySelectionListBase`1<int> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SelectionModel`1<T> _owner;
    [NullableAttribute("2")]
private IReadOnlyList`1<IndexRange> _ranges;
    public int Item { get; }
    public int Count { get; }
    private IReadOnlyList`1<IndexRange> Ranges { get; }
    public SelectedIndexes`1(SelectionModel`1<T> owner);
    public SelectedIndexes`1(IReadOnlyList`1<IndexRange> ranges);
    public virtual int get_Item(int index);
    public virtual int get_Count();
    private IReadOnlyList`1<IndexRange> get_Ranges();
    public virtual IEnumerator`1<int> GetEnumerator();
    [NullableContextAttribute("2")]
public static SelectedIndexes`1<T> Create(IReadOnlyList`1<IndexRange> ranges);
    [IteratorStateMachineAttribute("Avalonia.Controls.Selection.SelectedIndexes`1/<<GetEnumerator>g__SingleSelect|10_0>d")]
[CompilerGeneratedAttribute]
private IEnumerator`1<int> <GetEnumerator>g__SingleSelect|10_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultMemberAttribute("Item")]
internal class Avalonia.Controls.Selection.SelectedItems`1 : ReadOnlySelectionListBase`1<T> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SelectionModel`1<T> _owner;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ItemsSourceView`1<T> _items;
    private IReadOnlyList`1<IndexRange> _ranges;
    public T Item { get; }
    public int Count { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ItemsSourceView`1<T> Items { get; }
    private IReadOnlyList`1<IndexRange> Ranges { get; }
    [NullableContextAttribute("1")]
public SelectedItems`1(SelectionModel`1<T> owner);
    [NullableContextAttribute("1")]
public SelectedItems`1(IReadOnlyList`1<IndexRange> ranges, ItemsSourceView`1<T> items);
    public virtual T get_Item(int index);
    public virtual int get_Count();
    private ItemsSourceView`1<T> get_Items();
    private IReadOnlyList`1<IndexRange> get_Ranges();
    [IteratorStateMachineAttribute("Avalonia.Controls.Selection.SelectedItems`1/<GetEnumerator>d__13")]
public virtual IEnumerator`1<T> GetEnumerator();
    public static SelectedItems`1<T> Create(IReadOnlyList`1<IndexRange> ranges, ItemsSourceView`1<T> items);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Selection.SelectionModel`1 : SelectionNodeBase`1<T> {
    private bool _singleSelect;
    private int _anchorIndex;
    private int _selectedIndex;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Operation<T> _operation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SelectedIndexes`1<T> _selectedIndexes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SelectedItems`1<T> _selectedItems;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Untyped<T> _selectedItemsUntyped;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<SelectionModelSelectionChangedEventArgs> _untypedSelectionChanged;
    private IList _initSelectedItems;
    private bool _isSourceCollectionChanging;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SelectionModelIndexesChangedEventArgs> IndexesChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SelectionModelSelectionChangedEventArgs`1<T>> SelectionChanged;
    [CompilerGeneratedAttribute]
private EventHandler LostSelection;
    [CompilerGeneratedAttribute]
private EventHandler SourceReset;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IEnumerable Source { get; public set; }
    public bool SingleSelect { get; public set; }
    public int SelectedIndex { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<int> SelectedIndexes { get; }
    public T SelectedItem { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<T> SelectedItems { get; }
    public int AnchorIndex { get; public set; }
    public int Count { get; }
    private IEnumerable Avalonia.Controls.Selection.ISelectionModel.Source { get; private set; }
    private object Avalonia.Controls.Selection.ISelectionModel.SelectedItem { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<object> Avalonia.Controls.Selection.ISelectionModel.SelectedItems { get; }
    public SelectionModel`1(IEnumerable`1<T> source);
    public IEnumerable get_Source();
    public void set_Source(IEnumerable value);
    public sealed virtual bool get_SingleSelect();
    public sealed virtual void set_SingleSelect(bool value);
    public sealed virtual int get_SelectedIndex();
    public sealed virtual void set_SelectedIndex(int value);
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyList`1<int> get_SelectedIndexes();
    public T get_SelectedItem();
    public void set_SelectedItem(T value);
    public IReadOnlyList`1<T> get_SelectedItems();
    public sealed virtual int get_AnchorIndex();
    public sealed virtual void set_AnchorIndex(int value);
    public sealed virtual int get_Count();
    private sealed virtual override IEnumerable Avalonia.Controls.Selection.ISelectionModel.get_Source();
    private sealed virtual override void Avalonia.Controls.Selection.ISelectionModel.set_Source(IEnumerable value);
    private sealed virtual override object Avalonia.Controls.Selection.ISelectionModel.get_SelectedItem();
    private sealed virtual override void Avalonia.Controls.Selection.ISelectionModel.set_SelectedItem(object value);
    private sealed virtual override IReadOnlyList`1<object> Avalonia.Controls.Selection.ISelectionModel.get_SelectedItems();
    [CompilerGeneratedAttribute]
public sealed virtual void add_IndexesChanged(EventHandler`1<SelectionModelIndexesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_IndexesChanged(EventHandler`1<SelectionModelIndexesChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler`1<SelectionModelSelectionChangedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler`1<SelectionModelSelectionChangedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LostSelection(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LostSelection(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SourceReset(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SourceReset(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void Avalonia.Controls.Selection.ISelectionModel.add_SelectionChanged(EventHandler`1<SelectionModelSelectionChangedEventArgs> value);
    private sealed virtual override void Avalonia.Controls.Selection.ISelectionModel.remove_SelectionChanged(EventHandler`1<SelectionModelSelectionChangedEventArgs> value);
    [NullableContextAttribute("0")]
public BatchUpdateOperation<T> BatchUpdate();
    public sealed virtual void BeginBatchUpdate();
    public sealed virtual void EndBatchUpdate();
    public sealed virtual bool IsSelected(int index);
    public sealed virtual void Select(int index);
    public sealed virtual void Deselect(int index);
    public sealed virtual void SelectRange(int start, int end);
    public sealed virtual void DeselectRange(int start, int end);
    public sealed virtual void SelectAll();
    public sealed virtual void Clear();
    [NullableContextAttribute("1")]
protected void RaisePropertyChanged(string propertyName);
    private protected virtual void SetSource(IEnumerable value);
    protected virtual void OnIndexesChanged(int shiftIndex, int shiftDelta);
    protected virtual void OnSourceCollectionChangeStarted();
    protected virtual void OnSourceReset();
    [NullableContextAttribute("1")]
protected virtual void OnSelectionRemoved(int index, int count, IReadOnlyList`1<T> deselectedItems);
    [NullableContextAttribute("1")]
protected virtual CollectionChangeState<T> OnItemsAdded(int index, IList items);
    [NullableContextAttribute("1")]
private protected virtual CollectionChangeState<T> OnItemsRemoved(int index, IList items);
    [NullableContextAttribute("1")]
protected virtual void OnSourceCollectionChanged(NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
private protected void SetInitSelectedItems(IList items);
    [NullableContextAttribute("1")]
private protected virtual bool IsValidCollectionChange(NotifyCollectionChangedEventArgs e);
    protected virtual void OnSourceCollectionChangeFinished();
    private int GetFirstSelectedIndexFromRanges(List`1<IndexRange> except);
    private void SelectRange(int start, int end, bool forceSelectedIndex, bool forceAnchorIndex);
    [NullableContextAttribute("1")]
private T GetItemAt(int index);
    private int CoerceIndex(int index);
    private IndexRange CoerceRange(int start, int end);
    private void TrimInvalidSelections(Operation<T> operation);
    private void CommitOperation(Operation<T> operation, bool raisePropertyChanged);
}
[ExtensionAttribute]
public static class Avalonia.Controls.Selection.SelectionModelExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable BatchUpdate(ISelectionModel model);
}
public class Avalonia.Controls.Selection.SelectionModelIndexesChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Delta>k__BackingField;
    public int StartIndex { get; }
    public int Delta { get; }
    public SelectionModelIndexesChangedEventArgs(int startIndex, int delta);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public int get_Delta();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs : EventArgs {
    public IReadOnlyList`1<int> DeselectedIndexes { get; }
    public IReadOnlyList`1<int> SelectedIndexes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> DeselectedItems { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> SelectedItems { get; }
    public abstract virtual IReadOnlyList`1<int> get_DeselectedIndexes();
    public abstract virtual IReadOnlyList`1<int> get_SelectedIndexes();
    public IReadOnlyList`1<object> get_DeselectedItems();
    public IReadOnlyList`1<object> get_SelectedItems();
    protected abstract virtual IReadOnlyList`1<object> GetUntypedDeselectedItems();
    protected abstract virtual IReadOnlyList`1<object> GetUntypedSelectedItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs`1 : SelectionModelSelectionChangedEventArgs {
    [NullableAttribute("2")]
private IReadOnlyList`1<object> _deselectedItems;
    [NullableAttribute("2")]
private IReadOnlyList`1<object> _selectedItems;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <DeselectedIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <SelectedIndexes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<T> <DeselectedItems>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<T> <SelectedItems>k__BackingField;
    public IReadOnlyList`1<int> DeselectedIndexes { get; }
    public IReadOnlyList`1<int> SelectedIndexes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<T> DeselectedItems { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<T> SelectedItems { get; }
    [NullableContextAttribute("2")]
public SelectionModelSelectionChangedEventArgs`1(IReadOnlyList`1<int> deselectedIndices, IReadOnlyList`1<int> selectedIndices, IReadOnlyList`1<T> deselectedItems, IReadOnlyList`1<T> selectedItems);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<int> get_DeselectedIndexes();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<int> get_SelectedIndexes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<T> get_DeselectedItems();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<T> get_SelectedItems();
    protected virtual IReadOnlyList`1<object> GetUntypedDeselectedItems();
    protected virtual IReadOnlyList`1<object> GetUntypedSelectedItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Selection.SelectionNodeBase`1 : object {
    [NullableAttribute("2")]
private IEnumerable _source;
    private bool _rangesEnabled;
    [NullableAttribute("2")]
private List`1<IndexRange> _ranges;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ItemsSourceView`1<T> <ItemsView>k__BackingField;
    [NullableAttribute("2")]
protected IEnumerable Source { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected internal ItemsSourceView`1<T> ItemsView { get; protected internal set; }
    protected bool RangesEnabled { get; protected set; }
    internal IReadOnlyList`1<IndexRange> Ranges { get; }
    [NullableContextAttribute("2")]
protected IEnumerable get_Source();
    [NullableContextAttribute("2")]
protected void set_Source(IEnumerable value);
    [CompilerGeneratedAttribute]
protected internal ItemsSourceView`1<T> get_ItemsView();
    [CompilerGeneratedAttribute]
protected internal void set_ItemsView(ItemsSourceView`1<T> value);
    protected bool get_RangesEnabled();
    protected void set_RangesEnabled(bool value);
    internal IReadOnlyList`1<IndexRange> get_Ranges();
    protected virtual void OnSourceCollectionChangeStarted();
    protected virtual void OnSourceCollectionChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnSourceCollectionChangeFinished();
    protected virtual void OnIndexesChanged(int shiftIndex, int shiftDelta);
    protected abstract virtual void OnSourceReset();
    protected virtual void OnSelectionRemoved(int index, int count, IReadOnlyList`1<T> deselectedItems);
    protected int CommitSelect(int begin, int end);
    protected int CommitDeselect(int begin, int end);
    protected virtual CollectionChangeState<T> OnItemsAdded(int index, IList items);
    private protected virtual CollectionChangeState<T> OnItemsRemoved(int index, IList items);
    private protected virtual bool IsValidCollectionChange(NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <set_Source>g__OnPreChanged|5_0(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <set_Source>g__OnChanged|5_1(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <set_Source>g__OnPostChanged|5_2(object sender, NotifyCollectionChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.SelectionChangedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private IList <AddedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList <RemovedItems>k__BackingField;
    public IList AddedItems { get; }
    public IList RemovedItems { get; }
    public SelectionChangedEventArgs(RoutedEvent routedEvent, IList removedItems, IList addedItems);
    [CompilerGeneratedAttribute]
public IList get_AddedItems();
    [CompilerGeneratedAttribute]
public IList get_RemovedItems();
}
[FlagsAttribute]
public enum Avalonia.Controls.SelectionMode : Enum {
    public int value__;
    public static SelectionMode Single;
    public static SelectionMode Multiple;
    public static SelectionMode Toggle;
    public static SelectionMode AlwaysSelected;
}
public class Avalonia.Controls.Separator : TemplatedControl {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Shapes.Arc : Shape {
    public static StyledProperty`1<double> StartAngleProperty;
    public static StyledProperty`1<double> SweepAngleProperty;
    public double StartAngle { get; public set; }
    public double SweepAngle { get; public set; }
    private static Arc();
    public double get_StartAngle();
    public void set_StartAngle(double value);
    public double get_SweepAngle();
    public void set_SweepAngle(double value);
    protected virtual Geometry CreateDefiningGeometry();
    private static double RadToNormRad(double inAngle);
    private static Point GetRingPoint(double radiusX, double radiusY, double centerX, double centerY, double angle);
}
public class Avalonia.Controls.Shapes.Ellipse : Shape {
    private static Ellipse();
    [NullableContextAttribute("1")]
protected virtual Geometry CreateDefiningGeometry();
    protected virtual Size MeasureOverride(Size availableSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Shapes.Line : Shape {
    public static StyledProperty`1<Point> StartPointProperty;
    public static StyledProperty`1<Point> EndPointProperty;
    public Point StartPoint { get; public set; }
    public Point EndPoint { get; public set; }
    private static Line();
    public Point get_StartPoint();
    public void set_StartPoint(Point value);
    public Point get_EndPoint();
    public void set_EndPoint(Point value);
    protected virtual Geometry CreateDefiningGeometry();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Shapes.Path : Shape {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Geometry> DataProperty;
    public Geometry Data { get; public set; }
    private static Path();
    public Geometry get_Data();
    public void set_Data(Geometry value);
    protected virtual Geometry CreateDefiningGeometry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Shapes.Polygon : Shape {
    public static StyledProperty`1<IList`1<Point>> PointsProperty;
    public IList`1<Point> Points { get; public set; }
    private static Polygon();
    public IList`1<Point> get_Points();
    public void set_Points(IList`1<Point> value);
    protected virtual Geometry CreateDefiningGeometry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Shapes.Polyline : Shape {
    public static StyledProperty`1<IList`1<Point>> PointsProperty;
    public IList`1<Point> Points { get; public set; }
    private static Polyline();
    public IList`1<Point> get_Points();
    public void set_Points(IList`1<Point> value);
    protected virtual Geometry CreateDefiningGeometry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Shapes.Rectangle : Shape {
    public static StyledProperty`1<double> RadiusXProperty;
    public static StyledProperty`1<double> RadiusYProperty;
    public double RadiusX { get; public set; }
    public double RadiusY { get; public set; }
    private static Rectangle();
    public double get_RadiusX();
    public void set_RadiusX(double value);
    public double get_RadiusY();
    public void set_RadiusY(double value);
    protected virtual Geometry CreateDefiningGeometry();
    protected virtual Size MeasureOverride(Size availableSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Shapes.Sector : Shape {
    public static StyledProperty`1<double> StartAngleProperty;
    public static StyledProperty`1<double> SweepAngleProperty;
    public double StartAngle { get; public set; }
    public double SweepAngle { get; public set; }
    private static Sector();
    public double get_StartAngle();
    public void set_StartAngle(double value);
    public double get_SweepAngle();
    public void set_SweepAngle(double value);
    [NullableContextAttribute("2")]
protected virtual Geometry CreateDefiningGeometry();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Shapes.Shape : Control {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> FillProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<Stretch> StretchProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> StrokeProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<AvaloniaList`1<double>> StrokeDashArrayProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<double> StrokeDashOffsetProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<double> StrokeThicknessProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<PenLineCap> StrokeLineCapProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<PenLineJoin> StrokeJoinProperty;
    private Matrix _transform;
    private Geometry _definingGeometry;
    private Geometry _renderedGeometry;
    private IPen _strokePen;
    private EventHandler _geometryChangedHandler;
    public Geometry DefiningGeometry { get; }
    public Geometry RenderedGeometry { get; }
    public IBrush Fill { get; public set; }
    public Stretch Stretch { get; public set; }
    public IBrush Stroke { get; public set; }
    public AvaloniaList`1<double> StrokeDashArray { get; public set; }
    public double StrokeDashOffset { get; public set; }
    public double StrokeThickness { get; public set; }
    public PenLineCap StrokeLineCap { get; public set; }
    public PenLineJoin StrokeJoin { get; public set; }
    [NullableAttribute("1")]
private EventHandler GeometryChangedHandler { get; }
    private static Shape();
    public Geometry get_DefiningGeometry();
    public Geometry get_RenderedGeometry();
    public IBrush get_Fill();
    public void set_Fill(IBrush value);
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public IBrush get_Stroke();
    public void set_Stroke(IBrush value);
    public AvaloniaList`1<double> get_StrokeDashArray();
    public void set_StrokeDashArray(AvaloniaList`1<double> value);
    public double get_StrokeDashOffset();
    public void set_StrokeDashOffset(double value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    public PenLineCap get_StrokeLineCap();
    public void set_StrokeLineCap(PenLineCap value);
    public PenLineJoin get_StrokeJoin();
    public void set_StrokeJoin(PenLineJoin value);
    [NullableContextAttribute("1")]
private EventHandler get_GeometryChangedHandler();
    [NullableContextAttribute("1")]
public sealed virtual void Render(DrawingContext context);
    [NullableContextAttribute("1")]
protected static void AffectsGeometry(AvaloniaProperty[] properties);
    protected abstract virtual Geometry CreateDefiningGeometry();
    [NullableContextAttribute("1")]
protected virtual void OnGeometryChanged(object sender, EventArgs e);
    protected void InvalidateGeometry();
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    [NullableContextAttribute("1")]
protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    [NullableContextAttribute("0")]
internal static ValueTuple`2<Size, Matrix> CalculateSizeAndTransform(Size availableSize, Rect shapeBounds, Stretch Stretch);
    [NullableContextAttribute("1")]
private static void AffectsGeometryInvalidate(Shape control, AvaloniaPropertyChangedEventArgs e);
}
public enum Avalonia.Controls.ShutdownMode : Enum {
    public int value__;
    public static ShutdownMode OnLastWindowClose;
    public static ShutdownMode OnMainWindowClose;
    public static ShutdownMode OnExplicitShutdown;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.SizeChangedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private Size <NewSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <PreviousSize>k__BackingField;
    public bool HeightChanged { get; }
    public Size NewSize { get; public set; }
    public Size PreviousSize { get; public set; }
    public bool WidthChanged { get; }
    public SizeChangedEventArgs(RoutedEvent routedEvent);
    public SizeChangedEventArgs(RoutedEvent routedEvent, object source);
    public SizeChangedEventArgs(RoutedEvent routedEvent, object source, Size previousSize, Size newSize);
    public bool get_HeightChanged();
    [CompilerGeneratedAttribute]
public Size get_NewSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NewSize(Size value);
    [CompilerGeneratedAttribute]
public Size get_PreviousSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PreviousSize(Size value);
    public bool get_WidthChanged();
}
[FlagsAttribute]
public enum Avalonia.Controls.SizeToContent : Enum {
    public int value__;
    public static SizeToContent Manual;
    public static SizeToContent Width;
    public static SizeToContent Height;
    public static SizeToContent WidthAndHeight;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_DecreaseButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_IncreaseButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_Track", "Avalonia.Controls.Primitives.Track")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Slider : RangeBase {
    public static StyledProperty`1<Orientation> OrientationProperty;
    public static StyledProperty`1<bool> IsDirectionReversedProperty;
    public static StyledProperty`1<bool> IsSnapToTickEnabledProperty;
    public static StyledProperty`1<double> TickFrequencyProperty;
    public static StyledProperty`1<TickPlacement> TickPlacementProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<AvaloniaList`1<double>> TicksProperty;
    private bool _isDragging;
    private bool _isFocusEngaged;
    [NullableAttribute("2")]
private Track _track;
    [NullableAttribute("2")]
private Button _decreaseButton;
    [NullableAttribute("2")]
private Button _increaseButton;
    [NullableAttribute("2")]
private IDisposable _decreaseButtonPressDispose;
    [NullableAttribute("2")]
private IDisposable _decreaseButtonReleaseDispose;
    [NullableAttribute("2")]
private IDisposable _increaseButtonSubscription;
    [NullableAttribute("2")]
private IDisposable _increaseButtonReleaseDispose;
    [NullableAttribute("2")]
private IDisposable _pointerMovedDispose;
    private static double Tolerance;
    [NullableAttribute("2")]
public AvaloniaList`1<double> Ticks { get; public set; }
    public Orientation Orientation { get; public set; }
    public bool IsDirectionReversed { get; public set; }
    public bool IsSnapToTickEnabled { get; public set; }
    public double TickFrequency { get; public set; }
    public TickPlacement TickPlacement { get; public set; }
    protected bool IsDragging { get; }
    [NullableAttribute("2")]
protected Track Track { get; }
    private static Slider();
    [NullableContextAttribute("2")]
public AvaloniaList`1<double> get_Ticks();
    [NullableContextAttribute("2")]
public void set_Ticks(AvaloniaList`1<double> value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public bool get_IsDirectionReversed();
    public void set_IsDirectionReversed(bool value);
    public bool get_IsSnapToTickEnabled();
    public void set_IsSnapToTickEnabled(bool value);
    public double get_TickFrequency();
    public void set_TickFrequency(double value);
    public TickPlacement get_TickPlacement();
    public void set_TickPlacement(TickPlacement value);
    protected bool get_IsDragging();
    [NullableContextAttribute("2")]
protected Track get_Track();
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void MoveToNextTick(double direction);
    private void TrackMoved(object sender, PointerEventArgs e);
    private void TrackReleased(object sender, PointerReleasedEventArgs e);
    private void TrackPressed(object sender, PointerPressedEventArgs e);
    private void MoveToPoint(PointerPoint posOnTrack);
    protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnThumbDragStarted(VectorEventArgs e);
    protected virtual void OnThumbDragCompleted(VectorEventArgs e);
    private double SnapToTick(double value);
    private void UpdatePseudoClasses(Orientation o);
}
public enum Avalonia.Controls.SpinDirection : Enum {
    public int value__;
    public static SpinDirection Increase;
    public static SpinDirection Decrease;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.SpinEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private SpinDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingMouseWheel>k__BackingField;
    public SpinDirection Direction { get; }
    public bool UsingMouseWheel { get; }
    public SpinEventArgs(SpinDirection direction);
    public SpinEventArgs(RoutedEvent routedEvent, SpinDirection direction);
    public SpinEventArgs(SpinDirection direction, bool usingMouseWheel);
    public SpinEventArgs(RoutedEvent routedEvent, SpinDirection direction, bool usingMouseWheel);
    [CompilerGeneratedAttribute]
public SpinDirection get_Direction();
    [CompilerGeneratedAttribute]
public bool get_UsingMouseWheel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.Spinner : ContentControl {
    public static StyledProperty`1<ValidSpinDirections> ValidSpinDirectionProperty;
    public static RoutedEvent`1<SpinEventArgs> SpinEvent;
    public ValidSpinDirections ValidSpinDirection { get; public set; }
    private static Spinner();
    public void add_Spin(EventHandler`1<SpinEventArgs> value);
    public void remove_Spin(EventHandler`1<SpinEventArgs> value);
    public ValidSpinDirections get_ValidSpinDirection();
    public void set_ValidSpinDirection(ValidSpinDirections value);
    protected virtual void OnValidSpinDirectionChanged(ValidSpinDirections oldValue, ValidSpinDirections newValue);
    protected virtual void OnSpin(SpinEventArgs e);
    private static void OnValidSpinDirectionPropertyChanged(AvaloniaPropertyChangedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_PrimaryButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_SecondaryButton", "Avalonia.Controls.Button")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.SplitButton : ContentControl {
    [NullableAttribute("1")]
internal static string pcChecked;
    [NullableAttribute("1")]
internal static string pcPressed;
    [NullableAttribute("1")]
internal static string pcFlyoutOpen;
    [NullableAttribute("1")]
public static RoutedEvent`1<RoutedEventArgs> ClickEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ICommand> CommandProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> CommandParameterProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<FlyoutBase> FlyoutProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<KeyGesture> HotKeyProperty;
    private Button _primaryButton;
    private Button _secondaryButton;
    private KeyGesture _hotkey;
    private bool _commandCanExecute;
    private bool _isAttachedToLogicalTree;
    private bool _isFlyoutOpen;
    private bool _isKeyboardPressed;
    private IDisposable _flyoutPropertyChangedDisposable;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public FlyoutBase Flyout { get; public set; }
    public KeyGesture HotKey { get; public set; }
    internal bool InternalIsChecked { get; }
    protected bool IsEnabledCore { get; }
    private static SplitButton();
    public sealed virtual void add_Click(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void remove_Click(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public FlyoutBase get_Flyout();
    public void set_Flyout(FlyoutBase value);
    public KeyGesture get_HotKey();
    public void set_HotKey(KeyGesture value);
    internal virtual bool get_InternalIsChecked();
    protected virtual bool get_IsEnabledCore();
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Input.ICommandSource.CanExecuteChanged(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void CanExecuteChanged(object sender, EventArgs e);
    private void CanExecuteChanged(ICommand command, object parameter);
    protected void UpdatePseudoClasses();
    protected void OpenFlyout();
    protected void CloseFlyout();
    private void RegisterFlyoutEvents(FlyoutBase flyout);
    private void UnregisterFlyoutEvents(FlyoutBase flyout);
    private void UnregisterEvents();
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnClickPrimary(RoutedEventArgs e);
    protected virtual void OnClickSecondary(RoutedEventArgs e);
    protected virtual void OnFlyoutOpened();
    protected virtual void OnFlyoutClosed();
    [NullableContextAttribute("1")]
private void PrimaryButton_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void SecondaryButton_Click(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void SecondaryButton_PreviewPointerPressed(object sender, PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
private void Flyout_PlacementPropertyChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void Flyout_Opened(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void Flyout_Closed(object sender, EventArgs e);
    private sealed virtual override void Avalonia.Input.IClickableControl.RaiseClick();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_PaneRoot", "Avalonia.Controls.Panel")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.SplitView : ContentControl {
    private static string pcOpen;
    private static string pcClosed;
    private static string pcCompactOverlay;
    private static string pcCompactInline;
    private static string pcOverlay;
    private static string pcInline;
    private static string pcLeft;
    private static string pcRight;
    private static string pcLightDismiss;
    public static StyledProperty`1<double> CompactPaneLengthProperty;
    public static StyledProperty`1<SplitViewDisplayMode> DisplayModeProperty;
    public static StyledProperty`1<bool> IsPaneOpenProperty;
    public static StyledProperty`1<double> OpenPaneLengthProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> PaneBackgroundProperty;
    public static StyledProperty`1<SplitViewPanePlacement> PanePlacementProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> PaneProperty;
    public static StyledProperty`1<IDataTemplate> PaneTemplateProperty;
    public static StyledProperty`1<bool> UseLightDismissOverlayModeProperty;
    public static DirectProperty`2<SplitView, SplitViewTemplateSettings> TemplateSettingsProperty;
    public static RoutedEvent`1<RoutedEventArgs> PaneClosedEvent;
    public static RoutedEvent`1<CancelRoutedEventArgs> PaneClosingEvent;
    public static RoutedEvent`1<RoutedEventArgs> PaneOpenedEvent;
    public static RoutedEvent`1<CancelRoutedEventArgs> PaneOpeningEvent;
    [NullableAttribute("2")]
private Panel _pane;
    [NullableAttribute("2")]
private IDisposable _pointerDisposable;
    private SplitViewTemplateSettings _templateSettings;
    [NullableAttribute("2")]
private string _lastDisplayModePseudoclass;
    [NullableAttribute("2")]
private string _lastPlacementPseudoclass;
    public double CompactPaneLength { get; public set; }
    public SplitViewDisplayMode DisplayMode { get; public set; }
    public bool IsPaneOpen { get; public set; }
    public double OpenPaneLength { get; public set; }
    [NullableAttribute("2")]
public IBrush PaneBackground { get; public set; }
    public SplitViewPanePlacement PanePlacement { get; public set; }
    [NullableAttribute("2")]
[DependsOnAttribute("PaneTemplate")]
public object Pane { get; public set; }
    public IDataTemplate PaneTemplate { get; public set; }
    public bool UseLightDismissOverlayMode { get; public set; }
    public SplitViewTemplateSettings TemplateSettings { get; private set; }
    private static SplitView();
    public double get_CompactPaneLength();
    public void set_CompactPaneLength(double value);
    public SplitViewDisplayMode get_DisplayMode();
    public void set_DisplayMode(SplitViewDisplayMode value);
    public bool get_IsPaneOpen();
    public void set_IsPaneOpen(bool value);
    public double get_OpenPaneLength();
    public void set_OpenPaneLength(double value);
    [NullableContextAttribute("2")]
public IBrush get_PaneBackground();
    [NullableContextAttribute("2")]
public void set_PaneBackground(IBrush value);
    public SplitViewPanePlacement get_PanePlacement();
    public void set_PanePlacement(SplitViewPanePlacement value);
    [NullableContextAttribute("2")]
public object get_Pane();
    [NullableContextAttribute("2")]
public void set_Pane(object value);
    public IDataTemplate get_PaneTemplate();
    public void set_PaneTemplate(IDataTemplate value);
    public bool get_UseLightDismissOverlayMode();
    public void set_UseLightDismissOverlayMode(bool value);
    public SplitViewTemplateSettings get_TemplateSettings();
    private void set_TemplateSettings(SplitViewTemplateSettings value);
    public void add_PaneClosed(EventHandler`1<RoutedEventArgs> value);
    public void remove_PaneClosed(EventHandler`1<RoutedEventArgs> value);
    public void add_PaneClosing(EventHandler`1<CancelRoutedEventArgs> value);
    public void remove_PaneClosing(EventHandler`1<CancelRoutedEventArgs> value);
    public void add_PaneOpened(EventHandler`1<RoutedEventArgs> value);
    public void remove_PaneOpened(EventHandler`1<RoutedEventArgs> value);
    public void add_PaneOpening(EventHandler`1<CancelRoutedEventArgs> value);
    public void remove_PaneOpening(EventHandler`1<CancelRoutedEventArgs> value);
    protected virtual bool RegisterContentPresenter(ContentPresenter presenter);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void PointerReleasedOutside(object sender, PointerReleasedEventArgs e);
    private bool IsInOverlayMode();
    protected virtual void OnPaneOpening(CancelRoutedEventArgs args);
    protected virtual void OnPaneOpened(RoutedEventArgs args);
    protected virtual void OnPaneClosing(CancelRoutedEventArgs args);
    protected virtual void OnPaneClosed(RoutedEventArgs args);
    private static string GetPseudoClass(SplitViewDisplayMode mode);
    private static string GetPseudoClass(SplitViewPanePlacement placement);
    protected virtual bool OnCoerceIsPaneOpen(bool value);
    private void UpdateVisualStateForCompactPaneLength(double newLen);
    private void UpdateVisualStateForDisplayMode(SplitViewDisplayMode newValue);
    private void UpdateVisualStateForPanePlacementProperty(SplitViewPanePlacement newValue);
    private void EnableLightDismiss();
    private void TopLevelBackRequested(object sender, RoutedEventArgs e);
    private static bool CoerceIsPaneOpen(AvaloniaObject instance, bool value);
}
public enum Avalonia.Controls.SplitViewDisplayMode : Enum {
    public int value__;
    public static SplitViewDisplayMode Inline;
    public static SplitViewDisplayMode CompactInline;
    public static SplitViewDisplayMode Overlay;
    public static SplitViewDisplayMode CompactOverlay;
}
public enum Avalonia.Controls.SplitViewPanePlacement : Enum {
    public int value__;
    public static SplitViewPanePlacement Left;
    public static SplitViewPanePlacement Right;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.StackPanel : Panel {
    public static StyledProperty`1<double> SpacingProperty;
    public static StyledProperty`1<Orientation> OrientationProperty;
    public static StyledProperty`1<bool> AreHorizontalSnapPointsRegularProperty;
    public static StyledProperty`1<bool> AreVerticalSnapPointsRegularProperty;
    public static RoutedEvent`1<RoutedEventArgs> HorizontalSnapPointsChangedEvent;
    public static RoutedEvent`1<RoutedEventArgs> VerticalSnapPointsChangedEvent;
    public double Spacing { get; public set; }
    public Orientation Orientation { get; public set; }
    public bool AreHorizontalSnapPointsRegular { get; public set; }
    public bool AreVerticalSnapPointsRegular { get; public set; }
    private static StackPanel();
    public double get_Spacing();
    public void set_Spacing(double value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public sealed virtual void add_HorizontalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void remove_HorizontalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void add_VerticalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void remove_VerticalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual bool get_AreHorizontalSnapPointsRegular();
    public sealed virtual void set_AreHorizontalSnapPointsRegular(bool value);
    public sealed virtual bool get_AreVerticalSnapPointsRegular();
    public sealed virtual void set_AreVerticalSnapPointsRegular(bool value);
    [NullableContextAttribute("2")]
private sealed virtual override IInputElement Avalonia.Input.INavigableContainer.GetControl(NavigationDirection direction, IInputElement from, bool wrap);
    [NullableContextAttribute("2")]
protected virtual IInputElement GetControlInDirection(NavigationDirection direction, Control from);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    internal virtual void ArrangeChild(Control child, Rect rect, Size panelSize, Orientation orientation);
    public sealed virtual IReadOnlyList`1<double> GetIrregularSnapPoints(Orientation orientation, SnapPointsAlignment snapPointsAlignment);
    public sealed virtual double GetRegularSnapPoints(Orientation orientation, SnapPointsAlignment snapPointsAlignment, Double& offset);
}
public enum Avalonia.Controls.SystemDecorations : Enum {
    public int value__;
    public static SystemDecorations None;
    public static SystemDecorations BorderOnly;
    public static SystemDecorations Full;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
[EditorBrowsableAttribute("1")]
public abstract class Avalonia.Controls.SystemDialog : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; public set; }
    private static SystemDialog();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_ItemsPresenter", "Avalonia.Controls.Presenters.ItemsPresenter")]
[TemplatePartAttribute("PART_SelectedContentHost", "Avalonia.Controls.Presenters.ContentPresenter")]
public class Avalonia.Controls.TabControl : SelectingItemsControl {
    private object _selectedContent;
    private IDataTemplate _selectedContentTemplate;
    private CompositeDisposable _selectedItemSubscriptions;
    [NullableAttribute("1")]
public static StyledProperty`1<Dock> TabStripPlacementProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<HorizontalAlignment> HorizontalContentAlignmentProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<VerticalAlignment> VerticalContentAlignmentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> ContentTemplateProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<TabControl, object> SelectedContentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<TabControl, IDataTemplate> SelectedContentTemplateProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FuncTemplate`1<Panel> DefaultPanel;
    [CompilerGeneratedAttribute]
private ItemsPresenter <ItemsPresenterPart>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentPresenter <ContentPart>k__BackingField;
    public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    public VerticalAlignment VerticalContentAlignment { get; public set; }
    public Dock TabStripPlacement { get; public set; }
    public IDataTemplate ContentTemplate { get; public set; }
    public object SelectedContent { get; internal set; }
    public IDataTemplate SelectedContentTemplate { get; internal set; }
    internal ItemsPresenter ItemsPresenterPart { get; private set; }
    internal ContentPresenter ContentPart { get; private set; }
    [NullableAttribute("1")]
private IAvaloniaList`1<ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.LogicalChildren { get; }
    private static TabControl();
    public HorizontalAlignment get_HorizontalContentAlignment();
    public void set_HorizontalContentAlignment(HorizontalAlignment value);
    public VerticalAlignment get_VerticalContentAlignment();
    public void set_VerticalContentAlignment(VerticalAlignment value);
    public Dock get_TabStripPlacement();
    public void set_TabStripPlacement(Dock value);
    public IDataTemplate get_ContentTemplate();
    public void set_ContentTemplate(IDataTemplate value);
    public object get_SelectedContent();
    internal void set_SelectedContent(object value);
    public IDataTemplate get_SelectedContentTemplate();
    internal void set_SelectedContentTemplate(IDataTemplate value);
    [CompilerGeneratedAttribute]
internal ItemsPresenter get_ItemsPresenterPart();
    [CompilerGeneratedAttribute]
private void set_ItemsPresenterPart(ItemsPresenter value);
    [CompilerGeneratedAttribute]
internal ContentPresenter get_ContentPart();
    [CompilerGeneratedAttribute]
private void set_ContentPart(ContentPresenter value);
    [NullableContextAttribute("1")]
private sealed virtual override IAvaloniaList`1<ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.get_LogicalChildren();
    [NullableContextAttribute("1")]
private sealed virtual override bool Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(ContentPresenter presenter);
    protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    protected internal virtual bool NeedsContainerOverride(object item, int index, Object& recycleKey);
    [NullableContextAttribute("1")]
protected internal virtual void PrepareContainerForItemOverride(Control element, object item, int index);
    [NullableContextAttribute("1")]
protected virtual void ContainerIndexChangedOverride(Control container, int oldIndex, int newIndex);
    [NullableContextAttribute("1")]
protected internal virtual void ClearContainerForItemOverride(Control element);
    private void UpdateSelectedContent(Control container);
    [NullableContextAttribute("1")]
protected virtual bool RegisterContentPresenter(ContentPresenter presenter);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnGotFocus(GotFocusEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void UpdateTabStripPlacement();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <UpdateSelectedContent>b__45_0(object v);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <UpdateSelectedContent>b__45_1(IDataTemplate v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.TabItem : HeaderedContentControl {
    private Nullable`1<Dock> _tabStripPlacement;
    public static DirectProperty`2<TabItem, Nullable`1<Dock>> TabStripPlacementProperty;
    public static StyledProperty`1<bool> IsSelectedProperty;
    public Nullable`1<Dock> TabStripPlacement { get; internal set; }
    public bool IsSelected { get; public set; }
    private static TabItem();
    public Nullable`1<Dock> get_TabStripPlacement();
    internal void set_TabStripPlacement(Nullable`1<Dock> value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [ObsoleteAttribute("Owner manages its children properties by itself")]
protected void SubscribeToOwnerProperties(AvaloniaObject owner);
    private void UpdateHeader(AvaloniaPropertyChangedEventArgs obj);
    private void TabItemActivated(RoutedEventArgs args);
}
[ExtensionAttribute]
public static class Avalonia.Controls.Templates.DataTemplateExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IDataTemplate FindDataTemplate(Control control, object data, IDataTemplate primary);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Templates.DataTemplates : AvaloniaList`1<IDataTemplate> {
    private sealed virtual override void Avalonia.Collections.IAvaloniaListItemValidator<Avalonia.Controls.Templates.IDataTemplate>.Validate(IDataTemplate item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Templates.FuncControlTemplate : FuncTemplate`2<TemplatedControl, Control> {
    public FuncControlTemplate(Func`3<TemplatedControl, INameScope, Control> build);
    public sealed virtual TemplateResult`1<Control> Build(TemplatedControl param);
}
public class Avalonia.Controls.Templates.FuncControlTemplate`1 : FuncControlTemplate {
    [NullableContextAttribute("1")]
public FuncControlTemplate`1(Func`3<T, INameScope, Control> build);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.Templates.FuncDataTemplate : FuncTemplate`2<object, Control> {
    public static FuncDataTemplate Default;
    public static FuncDataTemplate Access;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, bool> _match;
    private bool _supportsRecycling;
    public FuncDataTemplate(Type type, Func`3<object, INameScope, Control> build, bool supportsRecycling);
    public FuncDataTemplate(Func`2<object, bool> match, Func`3<object, INameScope, Control> build, bool supportsRecycling);
    private static FuncDataTemplate();
    [NullableContextAttribute("2")]
public sealed virtual bool Match(object data);
    [NullableContextAttribute("2")]
public sealed virtual Control Build(object data, Control existing);
    private static bool IsInstance(object o, Type t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Templates.FuncDataTemplate`1 : FuncDataTemplate {
    public FuncDataTemplate`1(Func`3<T, INameScope, Control> build, bool supportsRecycling);
    public FuncDataTemplate`1(Func`2<T, bool> match, Func`3<T, INameScope, Control> build, bool supportsRecycling);
    public FuncDataTemplate`1(Func`2<T, bool> match, Func`2<T, Control> build, bool supportsRecycling);
    private static Func`2<object, bool> CastMatch(Func`2<T, bool> f);
    private static Func`3<object, INameScope, TResult> CastBuild(Func`3<T, INameScope, TResult> f);
}
public class Avalonia.Controls.Templates.FuncTemplate`1 : object {
    [NullableAttribute("1")]
private Func`1<TControl> _func;
    [NullableContextAttribute("1")]
public FuncTemplate`1(Func`1<TControl> func);
    [NullableContextAttribute("1")]
public sealed virtual TControl Build();
    [NullableContextAttribute("2")]
private sealed virtual override object Avalonia.Styling.ITemplate.Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Templates.FuncTemplate`2 : object {
    private Func`3<TParam, INameScope, TControl> _func;
    public FuncTemplate`2(Func`3<TParam, INameScope, TControl> func);
    public sealed virtual TControl Build(TParam param);
    protected ValueTuple`2<TControl, INameScope> BuildWithNameScope(TParam param);
}
[ExtensionAttribute]
public static class Avalonia.Controls.Templates.FuncTemplateNameScopeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T RegisterInNameScope(T control, INameScope scope);
}
public class Avalonia.Controls.Templates.FuncTreeDataTemplate : FuncDataTemplate {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, IEnumerable> _itemsSelector;
    [NullableContextAttribute("1")]
public FuncTreeDataTemplate(Type type, Func`3<object, INameScope, Control> build, Func`2<object, IEnumerable> itemsSelector);
    public FuncTreeDataTemplate(Func`2<object, bool> match, Func`3<object, INameScope, Control> build, Func`2<object, IEnumerable> itemsSelector);
    [NullableContextAttribute("1")]
public sealed virtual InstancedBinding ItemsSelector(object item);
    [NullableContextAttribute("1")]
private static bool IsInstance(object o, Type t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Templates.FuncTreeDataTemplate`1 : FuncTreeDataTemplate {
    public FuncTreeDataTemplate`1(Func`3<T, INameScope, Control> build, Func`2<T, IEnumerable> itemsSelector);
    public FuncTreeDataTemplate`1(Func`2<T, bool> match, Func`3<T, INameScope, Control> build, Func`2<T, IEnumerable> itemsSelector);
    private static Func`2<object, bool> CastMatch(Func`2<T, bool> f);
    private static Func`3<object, INameScope, TResult> Cast(Func`3<T, INameScope, TResult> f);
    private static Func`2<object, TResult> Cast(Func`2<T, TResult> f);
}
public interface Avalonia.Controls.Templates.IControlTemplate {
}
[NullableContextAttribute("2")]
public interface Avalonia.Controls.Templates.IDataTemplate {
    public abstract virtual bool Match(object data);
}
[NullableContextAttribute("1")]
[NotClientImplementableAttribute]
public interface Avalonia.Controls.Templates.IDataTemplateHost {
    public DataTemplates DataTemplates { get; }
    public bool IsDataTemplatesInitialized { get; }
    public abstract virtual DataTemplates get_DataTemplates();
    public abstract virtual bool get_IsDataTemplatesInitialized();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
public interface Avalonia.Controls.Templates.IRecyclingDataTemplate {
    [NullableContextAttribute("2")]
public abstract virtual Control Build(object data, Control existing);
}
[NullableContextAttribute("2")]
public interface Avalonia.Controls.Templates.ITemplate`2 {
    [NullableContextAttribute("1")]
public abstract virtual TControl Build(TParam param);
}
public interface Avalonia.Controls.Templates.ITreeDataTemplate {
    [NullableContextAttribute("1")]
public abstract virtual InstancedBinding ItemsSelector(object item);
}
[NullableContextAttribute("2")]
public interface Avalonia.Controls.Templates.ITypedDataTemplate {
    [DataTypeAttribute]
public Type DataType { get; }
    public abstract virtual Type get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Avalonia.Controls.Templates.TemplateExtensions : object {
    [IteratorStateMachineAttribute("Avalonia.Controls.Templates.TemplateExtensions/<GetTemplateChildren>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<Control> GetTemplateChildren(TemplatedControl control);
    [IteratorStateMachineAttribute("Avalonia.Controls.Templates.TemplateExtensions/<GetTemplateChildren>d__1")]
private static IEnumerable`1<Control> GetTemplateChildren(Control control, TemplatedControl templatedParent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.TextBlock : Control {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> BackgroundProperty;
    public static StyledProperty`1<Thickness> PaddingProperty;
    public static StyledProperty`1<FontFamily> FontFamilyProperty;
    public static StyledProperty`1<double> FontSizeProperty;
    public static StyledProperty`1<FontStyle> FontStyleProperty;
    public static StyledProperty`1<FontWeight> FontWeightProperty;
    public static StyledProperty`1<FontStretch> FontStretchProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> ForegroundProperty;
    public static AttachedProperty`1<double> BaselineOffsetProperty;
    public static AttachedProperty`1<double> LineHeightProperty;
    public static AttachedProperty`1<double> LineSpacingProperty;
    public static AttachedProperty`1<double> LetterSpacingProperty;
    public static AttachedProperty`1<int> MaxLinesProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> TextProperty;
    public static AttachedProperty`1<TextAlignment> TextAlignmentProperty;
    public static AttachedProperty`1<TextWrapping> TextWrappingProperty;
    public static AttachedProperty`1<TextTrimming> TextTrimmingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<TextDecorationCollection> TextDecorationsProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<FontFeatureCollection> FontFeaturesProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<TextBlock, InlineCollection> InlinesProperty;
    [NullableAttribute("2")]
private TextLayout _textLayout;
    protected Size _constraint;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected IReadOnlyList`1<TextRun> _textRuns;
    [NullableAttribute("2")]
private InlineCollection _inlines;
    private bool _clearTextInternal;
    public TextLayout TextLayout { get; }
    public Thickness Padding { get; public set; }
    [NullableAttribute("2")]
public IBrush Background { get; public set; }
    [NullableAttribute("2")]
public string Text { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public FontStretch FontStretch { get; public set; }
    [NullableAttribute("2")]
public IBrush Foreground { get; public set; }
    public double LineHeight { get; public set; }
    public double LineSpacing { get; public set; }
    public double LetterSpacing { get; public set; }
    public int MaxLines { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    public TextTrimming TextTrimming { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    [NullableAttribute("2")]
public TextDecorationCollection TextDecorations { get; public set; }
    [NullableAttribute("2")]
public FontFeatureCollection FontFeatures { get; public set; }
    [NullableAttribute("2")]
[ContentAttribute]
public InlineCollection Inlines { get; public set; }
    protected bool BypassFlowDirectionPolicies { get; }
    internal bool HasComplexContent { get; }
    public double BaselineOffset { get; public set; }
    private IAvaloniaList`1<Visual> Avalonia.Controls.Documents.IInlineHost.VisualChildren { get; }
    private static TextBlock();
    public TextLayout get_TextLayout();
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    [NullableContextAttribute("2")]
public IBrush get_Background();
    [NullableContextAttribute("2")]
public void set_Background(IBrush value);
    [NullableContextAttribute("2")]
public string get_Text();
    [NullableContextAttribute("2")]
public void set_Text(string value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    [NullableContextAttribute("2")]
public IBrush get_Foreground();
    [NullableContextAttribute("2")]
public void set_Foreground(IBrush value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public double get_LineSpacing();
    public void set_LineSpacing(double value);
    public double get_LetterSpacing();
    public void set_LetterSpacing(double value);
    public int get_MaxLines();
    public void set_MaxLines(int value);
    public TextWrapping get_TextWrapping();
    public void set_TextWrapping(TextWrapping value);
    public TextTrimming get_TextTrimming();
    public void set_TextTrimming(TextTrimming value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    [NullableContextAttribute("2")]
public TextDecorationCollection get_TextDecorations();
    [NullableContextAttribute("2")]
public void set_TextDecorations(TextDecorationCollection value);
    [NullableContextAttribute("2")]
public FontFeatureCollection get_FontFeatures();
    [NullableContextAttribute("2")]
public void set_FontFeatures(FontFeatureCollection value);
    [NullableContextAttribute("2")]
public InlineCollection get_Inlines();
    [NullableContextAttribute("2")]
public void set_Inlines(InlineCollection value);
    protected virtual bool get_BypassFlowDirectionPolicies();
    internal bool get_HasComplexContent();
    public double get_BaselineOffset();
    public void set_BaselineOffset(double value);
    public static double GetBaselineOffset(Control control);
    public static void SetBaselineOffset(Control control, double value);
    public static TextAlignment GetTextAlignment(Control control);
    public static void SetTextAlignment(Control control, TextAlignment alignment);
    public static TextWrapping GetTextWrapping(Control control);
    public static void SetTextWrapping(Control control, TextWrapping wrapping);
    public static TextTrimming GetTextTrimming(Control control);
    public static void SetTextTrimming(Control control, TextTrimming trimming);
    public static double GetLineHeight(Control control);
    public static void SetLineHeight(Control control, double height);
    public static double GetLetterSpacing(Control control);
    public static void SetLetterSpacing(Control control, double letterSpacing);
    public static int GetMaxLines(Control control);
    public static void SetMaxLines(Control control, int maxLines);
    public sealed virtual void Render(DrawingContext context);
    private protected virtual void RenderCore(DrawingContext context);
    protected virtual void RenderTextLayout(DrawingContext context, Point origin);
    internal void ClearTextInternal();
    protected virtual TextLayout CreateTextLayout(string text);
    protected void InvalidateTextLayout();
    protected virtual void OnMeasureInvalidated();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private static bool IsValidMaxLines(int maxLines);
    private static bool IsValidLineHeight(double lineHeight);
    private static bool IsValidLineSpacing(double lineSpacing);
    [NullableContextAttribute("2")]
private void OnInlinesChanged(InlineCollection oldValue, InlineCollection newValue);
    private sealed virtual override void Avalonia.Controls.Documents.IInlineHost.Invalidate();
    private sealed virtual override IAvaloniaList`1<Visual> Avalonia.Controls.Documents.IInlineHost.get_VisualChildren();
    internal virtual void BuildDebugDisplay(StringBuilder builder, bool includeContent);
    [CompilerGeneratedAttribute]
private void <OnInlinesChanged>g__Invalidated|121_0(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_TextPresenter", "Avalonia.Controls.Presenters.TextPresenter")]
[TemplatePartAttribute("PART_ScrollViewer", "Avalonia.Controls.ScrollViewer")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.TextBox : TemplatedControl {
    public static StyledProperty`1<bool> AcceptsReturnProperty;
    public static StyledProperty`1<bool> AcceptsTabProperty;
    public static StyledProperty`1<int> CaretIndexProperty;
    public static StyledProperty`1<bool> IsReadOnlyProperty;
    public static StyledProperty`1<char> PasswordCharProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> SelectionBrushProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> SelectionForegroundBrushProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> CaretBrushProperty;
    public static StyledProperty`1<TimeSpan> CaretBlinkIntervalProperty;
    public static StyledProperty`1<int> SelectionStartProperty;
    public static StyledProperty`1<int> SelectionEndProperty;
    public static StyledProperty`1<int> MaxLengthProperty;
    public static StyledProperty`1<int> MaxLinesProperty;
    public static StyledProperty`1<int> MinLinesProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> TextProperty;
    public static StyledProperty`1<TextAlignment> TextAlignmentProperty;
    public static StyledProperty`1<HorizontalAlignment> HorizontalContentAlignmentProperty;
    public static StyledProperty`1<VerticalAlignment> VerticalContentAlignmentProperty;
    public static StyledProperty`1<TextWrapping> TextWrappingProperty;
    public static StyledProperty`1<double> LineHeightProperty;
    public static StyledProperty`1<double> LetterSpacingProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> WatermarkProperty;
    public static StyledProperty`1<bool> UseFloatingWatermarkProperty;
    public static StyledProperty`1<string> NewLineProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> InnerLeftContentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> InnerRightContentProperty;
    public static StyledProperty`1<bool> RevealPasswordProperty;
    public static DirectProperty`2<TextBox, bool> CanCutProperty;
    public static DirectProperty`2<TextBox, bool> CanCopyProperty;
    public static DirectProperty`2<TextBox, bool> CanPasteProperty;
    public static StyledProperty`1<bool> IsUndoEnabledProperty;
    public static StyledProperty`1<int> UndoLimitProperty;
    public static DirectProperty`2<TextBox, bool> CanUndoProperty;
    public static DirectProperty`2<TextBox, bool> CanRedoProperty;
    public static RoutedEvent`1<RoutedEventArgs> CopyingToClipboardEvent;
    public static RoutedEvent`1<RoutedEventArgs> CuttingToClipboardEvent;
    public static RoutedEvent`1<RoutedEventArgs> PastingFromClipboardEvent;
    public static RoutedEvent`1<TextChangedEventArgs> TextChangedEvent;
    public static RoutedEvent`1<TextChangingEventArgs> TextChangingEvent;
    [NullableAttribute("2")]
private TextPresenter _presenter;
    [NullableAttribute("2")]
private ScrollViewer _scrollViewer;
    private TextBoxTextInputMethodClient _imClient;
    private UndoRedoHelper`1<UndoRedoState> _undoRedoHelper;
    private bool _isUndoingRedoing;
    private bool _canCut;
    private bool _canCopy;
    private bool _canPaste;
    private static String[] invalidCharacters;
    private bool _canUndo;
    private bool _canRedo;
    private int _wordSelectionStart;
    private int _selectedTextChangesMadeSinceLastUndoSnapshot;
    private bool _hasDoneSnapshotOnce;
    private static bool _isHolding;
    private int _currentClickCount;
    private bool _isDoubleTapped;
    private static int _maxCharsBeforeUndoSnapshot;
    [NullableAttribute("2")]
public static KeyGesture CutGesture { get; }
    [NullableAttribute("2")]
public static KeyGesture CopyGesture { get; }
    [NullableAttribute("2")]
public static KeyGesture PasteGesture { get; }
    public bool AcceptsReturn { get; public set; }
    public bool AcceptsTab { get; public set; }
    public int CaretIndex { get; public set; }
    public bool IsReadOnly { get; public set; }
    public char PasswordChar { get; public set; }
    [NullableAttribute("2")]
public IBrush SelectionBrush { get; public set; }
    [NullableAttribute("2")]
public IBrush SelectionForegroundBrush { get; public set; }
    [NullableAttribute("2")]
public IBrush CaretBrush { get; public set; }
    public TimeSpan CaretBlinkInterval { get; public set; }
    public int SelectionStart { get; public set; }
    public int SelectionEnd { get; public set; }
    public int MaxLength { get; public set; }
    public int MaxLines { get; public set; }
    public int MinLines { get; public set; }
    public double LetterSpacing { get; public set; }
    public double LineHeight { get; public set; }
    [NullableAttribute("2")]
[ContentAttribute]
public string Text { get; public set; }
    public string SelectedText { get; public set; }
    public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    public VerticalAlignment VerticalContentAlignment { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    [NullableAttribute("2")]
public string Watermark { get; public set; }
    public bool UseFloatingWatermark { get; public set; }
    [NullableAttribute("2")]
public object InnerLeftContent { get; public set; }
    [NullableAttribute("2")]
public object InnerRightContent { get; public set; }
    public bool RevealPassword { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    public string NewLine { get; public set; }
    public bool CanCut { get; private set; }
    public bool CanCopy { get; private set; }
    public bool CanPaste { get; private set; }
    public bool IsUndoEnabled { get; public set; }
    public int UndoLimit { get; public set; }
    public bool CanUndo { get; private set; }
    public bool CanRedo { get; private set; }
    private bool IsPasswordBox { get; }
    private UndoRedoState Avalonia.Controls.Utils.UndoRedoHelper<Avalonia.Controls.TextBox.UndoRedoState>.IUndoRedoHost.UndoRedoState { get; private set; }
    private static TextBox();
    [NullableContextAttribute("2")]
public static KeyGesture get_CutGesture();
    [NullableContextAttribute("2")]
public static KeyGesture get_CopyGesture();
    [NullableContextAttribute("2")]
public static KeyGesture get_PasteGesture();
    public bool get_AcceptsReturn();
    public void set_AcceptsReturn(bool value);
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public int get_CaretIndex();
    public void set_CaretIndex(int value);
    private void OnCaretIndexChanged(AvaloniaPropertyChangedEventArgs e);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    [NullableContextAttribute("2")]
public IBrush get_SelectionBrush();
    [NullableContextAttribute("2")]
public void set_SelectionBrush(IBrush value);
    [NullableContextAttribute("2")]
public IBrush get_SelectionForegroundBrush();
    [NullableContextAttribute("2")]
public void set_SelectionForegroundBrush(IBrush value);
    [NullableContextAttribute("2")]
public IBrush get_CaretBrush();
    [NullableContextAttribute("2")]
public void set_CaretBrush(IBrush value);
    public TimeSpan get_CaretBlinkInterval();
    public void set_CaretBlinkInterval(TimeSpan value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    private void OnSelectionStartChanged(AvaloniaPropertyChangedEventArgs e);
    public int get_SelectionEnd();
    public void set_SelectionEnd(int value);
    private void OnSelectionEndChanged(AvaloniaPropertyChangedEventArgs e);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public int get_MaxLines();
    public void set_MaxLines(int value);
    public int get_MinLines();
    public void set_MinLines(int value);
    public double get_LetterSpacing();
    public void set_LetterSpacing(double value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    [NullableContextAttribute("2")]
public string get_Text();
    [NullableContextAttribute("2")]
public void set_Text(string value);
    [NullableContextAttribute("2")]
private static string CoerceText(AvaloniaObject sender, string value);
    public string get_SelectedText();
    public void set_SelectedText(string value);
    public HorizontalAlignment get_HorizontalContentAlignment();
    public void set_HorizontalContentAlignment(HorizontalAlignment value);
    public VerticalAlignment get_VerticalContentAlignment();
    public void set_VerticalContentAlignment(VerticalAlignment value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    [NullableContextAttribute("2")]
public string get_Watermark();
    [NullableContextAttribute("2")]
public void set_Watermark(string value);
    public bool get_UseFloatingWatermark();
    public void set_UseFloatingWatermark(bool value);
    [NullableContextAttribute("2")]
public object get_InnerLeftContent();
    [NullableContextAttribute("2")]
public void set_InnerLeftContent(object value);
    [NullableContextAttribute("2")]
public object get_InnerRightContent();
    [NullableContextAttribute("2")]
public void set_InnerRightContent(object value);
    public bool get_RevealPassword();
    public void set_RevealPassword(bool value);
    public TextWrapping get_TextWrapping();
    public void set_TextWrapping(TextWrapping value);
    public string get_NewLine();
    public void set_NewLine(string value);
    public void ClearSelection();
    public bool get_CanCut();
    private void set_CanCut(bool value);
    public bool get_CanCopy();
    private void set_CanCopy(bool value);
    public bool get_CanPaste();
    private void set_CanPaste(bool value);
    public bool get_IsUndoEnabled();
    public void set_IsUndoEnabled(bool value);
    public int get_UndoLimit();
    public void set_UndoLimit(int value);
    private void OnUndoLimitChanged(int newValue);
    public bool get_CanUndo();
    private void set_CanUndo(bool value);
    public bool get_CanRedo();
    private void set_CanRedo(bool value);
    public void add_CopyingToClipboard(EventHandler`1<RoutedEventArgs> value);
    public void remove_CopyingToClipboard(EventHandler`1<RoutedEventArgs> value);
    public void add_CuttingToClipboard(EventHandler`1<RoutedEventArgs> value);
    public void remove_CuttingToClipboard(EventHandler`1<RoutedEventArgs> value);
    public void add_PastingFromClipboard(EventHandler`1<RoutedEventArgs> value);
    public void remove_PastingFromClipboard(EventHandler`1<RoutedEventArgs> value);
    public void add_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    public void remove_TextChanged(EventHandler`1<TextChangedEventArgs> value);
    public void add_TextChanging(EventHandler`1<TextChangingEventArgs> value);
    public void remove_TextChanging(EventHandler`1<TextChangingEventArgs> value);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    private void ScrollViewer_ScrollChanged(object sender, ScrollChangedEventArgs e);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    private void PresenterPropertyChanged(object sender, AvaloniaPropertyChangedEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void UpdateCommandStates();
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnTextInput(TextInputEventArgs e);
    [NullableContextAttribute("2")]
private void HandleTextInput(string input);
    [NullableContextAttribute("2")]
private string SanitizeInputText(string text);
    [AsyncStateMachineAttribute("Avalonia.Controls.TextBox/<Cut>d__204")]
public void Cut();
    [AsyncStateMachineAttribute("Avalonia.Controls.TextBox/<Copy>d__205")]
public void Copy();
    [AsyncStateMachineAttribute("Avalonia.Controls.TextBox/<Paste>d__206")]
public void Paste();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected virtual void OnPointerMoved(PointerEventArgs e);
    private void UpdateWordSelectionRange(int caretIndex, Int32& selectionStart, Int32& selectionEnd);
    protected virtual void OnPointerReleased(PointerReleasedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
    internal static int CoerceCaretIndex(AvaloniaObject sender, int value);
    public void Clear();
    private void MoveHorizontal(int direction, bool wholeWord, bool isSelecting, bool moveCaretPosition);
    private void MoveHome(bool document);
    private void MoveEnd(bool document);
    private void MovePageRight();
    private void MovePageLeft();
    private void MovePageUp();
    private void MovePageDown();
    public void ScrollToLine(int lineIndex);
    public void SelectAll();
    [NullableContextAttribute("0")]
private ValueTuple`2<int, int> GetSelectionRange();
    internal bool DeleteSelection();
    private string GetSelection();
    private double GetVerticalSpaceBetweenScrollViewerAndPresenter();
    private void RaiseTextChangeEvents();
    private void SetSelectionForControlBackspace();
    private void SetSelectionForControlDelete();
    private void UpdatePseudoclasses();
    private bool get_IsPasswordBox();
    private sealed virtual override UndoRedoState Avalonia.Controls.Utils.UndoRedoHelper<Avalonia.Controls.TextBox.UndoRedoState>.IUndoRedoHost.get_UndoRedoState();
    private sealed virtual override void Avalonia.Controls.Utils.UndoRedoHelper<Avalonia.Controls.TextBox.UndoRedoState>.IUndoRedoHost.set_UndoRedoState(UndoRedoState value);
    private void SnapshotUndoRedo(bool ignoreChangeCount);
    public void Undo();
    public void Redo();
    private sealed virtual override void Avalonia.Controls.Utils.UndoRedoHelper<Avalonia.Controls.TextBox.UndoRedoState>.IUndoRedoHost.OnUndoStackChanged();
    private sealed virtual override void Avalonia.Controls.Utils.UndoRedoHelper<Avalonia.Controls.TextBox.UndoRedoState>.IUndoRedoHost.OnRedoStackChanged();
    protected virtual Size MeasureOverride(Size availableSize);
    [CompilerGeneratedAttribute]
private void <RaiseTextChangeEvents>b__229_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.TextBoxTextInputMethodClient : TextInputMethodClient {
    [NullableAttribute("2")]
private TextBox _parent;
    [NullableAttribute("2")]
private TextPresenter _presenter;
    private bool _selectionChanged;
    private bool _isInChange;
    [NullableAttribute("2")]
private ITextInputMethodImpl _im;
    public Visual TextViewVisual { get; }
    public string SurroundingText { get; }
    public Rect CursorRectangle { get; }
    public TextSelection Selection { get; public set; }
    public bool SupportsPreedit { get; }
    public bool SupportsSurroundingText { get; }
    public virtual Visual get_TextViewVisual();
    public virtual string get_SurroundingText();
    public virtual Rect get_CursorRectangle();
    public virtual TextSelection get_Selection();
    public virtual void set_Selection(TextSelection value);
    public virtual bool get_SupportsPreedit();
    public virtual bool get_SupportsSurroundingText();
    [NullableContextAttribute("2")]
public void SetPresenter(TextPresenter presenter, TextBox parent);
    [NullableContextAttribute("2")]
public virtual void SetPreeditText(string preeditText);
    [NullableContextAttribute("2")]
public virtual void SetPreeditText(string preeditText, Nullable`1<int> cursorPos);
    public virtual void ShowInputPanel();
    private static string GetTextLineText(TextLine textLine);
    public virtual void ExecuteContextMenuAction(ContextMenuAction action);
    private void OnParentPropertyChanged(object sender, AvaloniaPropertyChangedEventArgs e);
    internal IDisposable BeginChange();
    private void RaiseEvents();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <SetPresenter>b__18_0(object s, EventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <SetPresenter>b__18_1(object s, EventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.TextChangedEventArgs : RoutedEventArgs {
    public TextChangedEventArgs(RoutedEvent routedEvent);
    public TextChangedEventArgs(RoutedEvent routedEvent, Interactive source);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.TextChangingEventArgs : RoutedEventArgs {
    public TextChangingEventArgs(RoutedEvent routedEvent);
    public TextChangingEventArgs(RoutedEvent routedEvent, Interactive source);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.ThemeVariantScope : Decorator {
    [NullableAttribute("1")]
public static StyledProperty`1<ThemeVariant> ActualThemeVariantProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ThemeVariant> RequestedThemeVariantProperty;
    public ThemeVariant RequestedThemeVariant { get; public set; }
    private static ThemeVariantScope();
    public ThemeVariant get_RequestedThemeVariant();
    public void set_RequestedThemeVariant(ThemeVariant value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.TickBar : Control {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IBrush> FillProperty;
    public static StyledProperty`1<double> MinimumProperty;
    public static StyledProperty`1<double> MaximumProperty;
    public static StyledProperty`1<double> TickFrequencyProperty;
    public static StyledProperty`1<Orientation> OrientationProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<AvaloniaList`1<double>> TicksProperty;
    public static StyledProperty`1<bool> IsDirectionReversedProperty;
    public static StyledProperty`1<TickBarPlacement> PlacementProperty;
    public static StyledProperty`1<Rect> ReservedSpaceProperty;
    [NullableAttribute("2")]
public IBrush Fill { get; public set; }
    public double Minimum { get; public set; }
    public double Maximum { get; public set; }
    public double TickFrequency { get; public set; }
    public Orientation Orientation { get; public set; }
    [NullableAttribute("2")]
public AvaloniaList`1<double> Ticks { get; public set; }
    public bool IsDirectionReversed { get; public set; }
    public TickBarPlacement Placement { get; public set; }
    public Rect ReservedSpace { get; public set; }
    private static TickBar();
    [NullableContextAttribute("2")]
public IBrush get_Fill();
    [NullableContextAttribute("2")]
public void set_Fill(IBrush value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_TickFrequency();
    public void set_TickFrequency(double value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    [NullableContextAttribute("2")]
public AvaloniaList`1<double> get_Ticks();
    [NullableContextAttribute("2")]
public void set_Ticks(AvaloniaList`1<double> value);
    public bool get_IsDirectionReversed();
    public void set_IsDirectionReversed(bool value);
    public TickBarPlacement get_Placement();
    public void set_Placement(TickBarPlacement value);
    public Rect get_ReservedSpace();
    public void set_ReservedSpace(Rect value);
    public sealed virtual void Render(DrawingContext dc);
}
public enum Avalonia.Controls.TickBarPlacement : Enum {
    public int value__;
    public static TickBarPlacement Left;
    public static TickBarPlacement Top;
    public static TickBarPlacement Right;
    public static TickBarPlacement Bottom;
}
public enum Avalonia.Controls.TickPlacement : Enum {
    public int value__;
    public static TickPlacement None;
    public static TickPlacement TopLeft;
    public static TickPlacement BottomRight;
    public static TickPlacement Outside;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_FirstColumnDivider", "Avalonia.Controls.Shapes.Rectangle")]
[TemplatePartAttribute("PART_FirstPickerHost", "Avalonia.Controls.Border")]
[TemplatePartAttribute("PART_FlyoutButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_FlyoutButtonContentGrid", "Avalonia.Controls.Grid")]
[TemplatePartAttribute("PART_HourTextBlock", "Avalonia.Controls.TextBlock")]
[TemplatePartAttribute("PART_MinuteTextBlock", "Avalonia.Controls.TextBlock")]
[TemplatePartAttribute("PART_SecondTextBlock", "Avalonia.Controls.TextBlock")]
[TemplatePartAttribute("PART_PeriodTextBlock", "Avalonia.Controls.TextBlock")]
[TemplatePartAttribute("PART_PickerPresenter", "Avalonia.Controls.TimePickerPresenter")]
[TemplatePartAttribute("PART_Popup", "Avalonia.Controls.Primitives.Popup")]
[TemplatePartAttribute("PART_SecondColumnDivider", "Avalonia.Controls.Shapes.Rectangle")]
[TemplatePartAttribute("PART_SecondPickerHost", "Avalonia.Controls.Border")]
[TemplatePartAttribute("PART_ThirdColumnDivider", "Avalonia.Controls.Shapes.Rectangle")]
[TemplatePartAttribute("PART_ThirdPickerHost", "Avalonia.Controls.Border")]
[TemplatePartAttribute("PART_FourthPickerHost", "Avalonia.Controls.Border")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.TimePicker : TemplatedControl {
    public static StyledProperty`1<int> MinuteIncrementProperty;
    public static StyledProperty`1<int> SecondIncrementProperty;
    public static StyledProperty`1<string> ClockIdentifierProperty;
    public static StyledProperty`1<bool> UseSecondsProperty;
    public static StyledProperty`1<Nullable`1<TimeSpan>> SelectedTimeProperty;
    [NullableAttribute("2")]
private TimePickerPresenter _presenter;
    [NullableAttribute("2")]
private Button _flyoutButton;
    [NullableAttribute("2")]
private Border _firstPickerHost;
    [NullableAttribute("2")]
private Border _secondPickerHost;
    [NullableAttribute("2")]
private Border _thirdPickerHost;
    [NullableAttribute("2")]
private Border _fourthPickerHost;
    [NullableAttribute("2")]
private TextBlock _hourText;
    [NullableAttribute("2")]
private TextBlock _minuteText;
    [NullableAttribute("2")]
private TextBlock _secondText;
    [NullableAttribute("2")]
private TextBlock _periodText;
    [NullableAttribute("2")]
private Rectangle _firstSplitter;
    [NullableAttribute("2")]
private Rectangle _secondSplitter;
    [NullableAttribute("2")]
private Rectangle _thirdSplitter;
    [NullableAttribute("2")]
private Grid _contentGrid;
    [NullableAttribute("2")]
private Popup _popup;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<TimePickerSelectedValueChangedEventArgs> SelectedTimeChanged;
    public int MinuteIncrement { get; public set; }
    public int SecondIncrement { get; public set; }
    public string ClockIdentifier { get; public set; }
    public bool UseSeconds { get; public set; }
    public Nullable`1<TimeSpan> SelectedTime { get; public set; }
    private static TimePicker();
    public int get_MinuteIncrement();
    public void set_MinuteIncrement(int value);
    private static int CoerceMinuteIncrement(AvaloniaObject sender, int value);
    public int get_SecondIncrement();
    public void set_SecondIncrement(int value);
    private static int CoerceSecondIncrement(AvaloniaObject sender, int value);
    public string get_ClockIdentifier();
    public void set_ClockIdentifier(string value);
    private static string CoerceClockIdentifier(AvaloniaObject sender, string value);
    public bool get_UseSeconds();
    public void set_UseSeconds(bool value);
    private static bool CoerceUseSeconds(AvaloniaObject sender, bool value);
    public Nullable`1<TimeSpan> get_SelectedTime();
    public void set_SelectedTime(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public void add_SelectedTimeChanged(EventHandler`1<TimePickerSelectedValueChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectedTimeChanged(EventHandler`1<TimePickerSelectedValueChangedEventArgs> value);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void SetGrid();
    private void SetSelectedTimeText();
    protected virtual void OnSelectedTimeChanged(Nullable`1<TimeSpan> oldTime, Nullable`1<TimeSpan> newTime);
    private void OnFlyoutButtonClicked(object sender, RoutedEventArgs e);
    private void OnDismissPicker(object sender, EventArgs e);
    private void OnConfirmed(object sender, EventArgs e);
    public void Clear();
    protected virtual void UpdateDataValidation(AvaloniaProperty property, BindingValueType state, Exception error);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_AcceptButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_DismissButton", "Avalonia.Controls.Button")]
[TemplatePartAttribute("PART_HourDownButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_HourSelector", "Avalonia.Controls.Primitives.DateTimePickerPanel")]
[TemplatePartAttribute("PART_HourUpButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_MinuteDownButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_MinuteSelector", "Avalonia.Controls.Primitives.DateTimePickerPanel")]
[TemplatePartAttribute("PART_MinuteUpButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_SecondDownButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_SecondHost", "Avalonia.Controls.Panel")]
[TemplatePartAttribute("PART_SecondSelector", "Avalonia.Controls.Primitives.DateTimePickerPanel")]
[TemplatePartAttribute("PART_SecondUpButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_PeriodDownButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_PeriodHost", "Avalonia.Controls.Panel")]
[TemplatePartAttribute("PART_PeriodSelector", "Avalonia.Controls.Primitives.DateTimePickerPanel")]
[TemplatePartAttribute("PART_PeriodUpButton", "Avalonia.Controls.RepeatButton")]
[TemplatePartAttribute("PART_PickerContainer", "Avalonia.Controls.Grid")]
[TemplatePartAttribute("PART_ThirdSpacer", "Avalonia.Controls.Shapes.Rectangle")]
public class Avalonia.Controls.TimePickerPresenter : PickerPresenterBase {
    [NullableAttribute("1")]
public static StyledProperty`1<int> MinuteIncrementProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<int> SecondIncrementProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<string> ClockIdentifierProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> UseSecondsProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<TimeSpan> TimeProperty;
    private Grid _pickerContainer;
    private Button _acceptButton;
    private Button _dismissButton;
    private Rectangle _spacer2;
    private Rectangle _spacer3;
    private Panel _secondHost;
    private Panel _periodHost;
    private DateTimePickerPanel _hourSelector;
    private DateTimePickerPanel _minuteSelector;
    private DateTimePickerPanel _secondSelector;
    private DateTimePickerPanel _periodSelector;
    private Button _hourUpButton;
    private Button _minuteUpButton;
    private Button _secondUpButton;
    private Button _periodUpButton;
    private Button _hourDownButton;
    private Button _minuteDownButton;
    private Button _secondDownButton;
    private Button _periodDownButton;
    public int MinuteIncrement { get; public set; }
    public int SecondIncrement { get; public set; }
    [NullableAttribute("1")]
public string ClockIdentifier { get; public set; }
    public bool UseSeconds { get; public set; }
    public TimeSpan Time { get; public set; }
    private static TimePickerPresenter();
    public int get_MinuteIncrement();
    public void set_MinuteIncrement(int value);
    public int get_SecondIncrement();
    public void set_SecondIncrement(int value);
    [NullableContextAttribute("1")]
public string get_ClockIdentifier();
    [NullableContextAttribute("1")]
public void set_ClockIdentifier(string value);
    public bool get_UseSeconds();
    public void set_UseSeconds(bool value);
    public TimeSpan get_Time();
    public void set_Time(TimeSpan value);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    [NullableContextAttribute("1")]
protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnConfirmed();
    private void InitPicker();
    private void SetGrid();
    [NullableContextAttribute("1")]
private void OnDismissButtonClicked(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void OnAcceptButtonClicked(object sender, RoutedEventArgs e);
    [NullableContextAttribute("1")]
private void OnSelectorButtonClick(object sender, RoutedEventArgs e);
    internal double GetOffsetForPopup();
}
public class Avalonia.Controls.TimePickerSelectedValueChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <OldTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <NewTime>k__BackingField;
    public Nullable`1<TimeSpan> OldTime { get; }
    public Nullable`1<TimeSpan> NewTime { get; }
    public TimePickerSelectedValueChangedEventArgs(Nullable`1<TimeSpan> old, Nullable`1<TimeSpan> newT);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_OldTime();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_NewTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.ToggleSplitButton : SplitButton {
    public static RoutedEvent`1<RoutedEventArgs> IsCheckedChangedEvent;
    public static StyledProperty`1<bool> IsCheckedProperty;
    public bool IsChecked { get; public set; }
    internal bool InternalIsChecked { get; }
    protected Type StyleKeyOverride { get; }
    private static ToggleSplitButton();
    public void add_IsCheckedChanged(EventHandler`1<RoutedEventArgs> value);
    public void remove_IsCheckedChanged(EventHandler`1<RoutedEventArgs> value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    internal virtual bool get_InternalIsChecked();
    protected virtual Type get_StyleKeyOverride();
    protected void Toggle();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs e);
    protected virtual void OnIsCheckedChanged();
    [NullableContextAttribute("2")]
protected virtual void OnClickPrimary(RoutedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_MovingKnobs", "Avalonia.Controls.Panel")]
[TemplatePartAttribute("PART_OffContentPresenter", "Avalonia.Controls.Presenters.ContentPresenter")]
[TemplatePartAttribute("PART_OnContentPresenter", "Avalonia.Controls.Presenters.ContentPresenter")]
[TemplatePartAttribute("PART_SwitchKnob", "Avalonia.Controls.Panel")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.ToggleSwitch : ToggleButton {
    private Panel _knobsPanel;
    private Panel _switchKnob;
    private bool _knobsPanelPressed;
    private Point _switchStartPoint;
    private double _initLeft;
    private bool _isDragging;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> OffContentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> OffContentTemplateProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> OnContentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IDataTemplate> OnContentTemplateProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<Transitions> KnobTransitionsProperty;
    [CompilerGeneratedAttribute]
private ContentPresenter <OffContentPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentPresenter <OnContentPresenter>k__BackingField;
    public object OnContent { get; public set; }
    public object OffContent { get; public set; }
    public ContentPresenter OffContentPresenter { get; private set; }
    public ContentPresenter OnContentPresenter { get; private set; }
    public IDataTemplate OffContentTemplate { get; public set; }
    public IDataTemplate OnContentTemplate { get; public set; }
    [NullableAttribute("1")]
public Transitions KnobTransitions { get; public set; }
    private static ToggleSwitch();
    public object get_OnContent();
    public void set_OnContent(object value);
    public object get_OffContent();
    public void set_OffContent(object value);
    [CompilerGeneratedAttribute]
public ContentPresenter get_OffContentPresenter();
    [CompilerGeneratedAttribute]
private void set_OffContentPresenter(ContentPresenter value);
    [CompilerGeneratedAttribute]
public ContentPresenter get_OnContentPresenter();
    [CompilerGeneratedAttribute]
private void set_OnContentPresenter(ContentPresenter value);
    public IDataTemplate get_OffContentTemplate();
    public void set_OffContentTemplate(IDataTemplate value);
    public IDataTemplate get_OnContentTemplate();
    public void set_OnContentTemplate(IDataTemplate value);
    [NullableContextAttribute("1")]
public Transitions get_KnobTransitions();
    [NullableContextAttribute("1")]
public void set_KnobTransitions(Transitions value);
    [NullableContextAttribute("1")]
private void OffContentChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
private void OnContentChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual bool RegisterContentPresenter(ContentPresenter presenter);
    [NullableContextAttribute("1")]
protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLoaded(RoutedEventArgs e);
    private void UpdateKnobTransitions();
    [NullableContextAttribute("1")]
private void KnobsPanel_PointerPressed(object sender, PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
private void KnobsPanel_PointerReleased(object sender, PointerReleasedEventArgs e);
    [NullableContextAttribute("1")]
private void KnobsPanel_PointerMoved(object sender, PointerEventArgs e);
    private void UpdateKnobPos(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.ToolTip : ContentControl {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<object> TipProperty;
    public static AttachedProperty`1<bool> IsOpenProperty;
    public static AttachedProperty`1<PlacementMode> PlacementProperty;
    public static AttachedProperty`1<double> HorizontalOffsetProperty;
    public static AttachedProperty`1<double> VerticalOffsetProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<CustomPopupPlacementCallback> CustomPopupPlacementCallbackProperty;
    public static AttachedProperty`1<int> ShowDelayProperty;
    public static AttachedProperty`1<int> BetweenShowDelayProperty;
    public static AttachedProperty`1<bool> ShowOnDisabledProperty;
    public static AttachedProperty`1<bool> ServiceEnabledProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static AttachedProperty`1<ToolTip> ToolTipProperty;
    public static RoutedEvent`1<CancelRoutedEventArgs> ToolTipOpeningEvent;
    public static RoutedEvent ToolTipClosingEvent;
    [NullableAttribute("2")]
private Popup _popup;
    [NullableAttribute("2")]
private Action`1<IPopupHost> _popupHostChangedHandler;
    [NullableAttribute("2")]
private CompositeDisposable _subscriptions;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Control <AdornedControl>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Closed;
    [NullableAttribute("2")]
internal Control AdornedControl { get; private set; }
    [NullableAttribute("2")]
internal IPopupHost PopupHost { get; }
    [NullableAttribute("2")]
private IPopupHost Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHost { get; }
    private static ToolTip();
    public static object GetTip(Control element);
    public static void SetTip(Control element, object value);
    public static bool GetIsOpen(Control element);
    public static void SetIsOpen(Control element, bool value);
    public static PlacementMode GetPlacement(Control element);
    public static void SetPlacement(Control element, PlacementMode value);
    public static double GetHorizontalOffset(Control element);
    public static void SetHorizontalOffset(Control element, double value);
    public static double GetVerticalOffset(Control element);
    public static void SetVerticalOffset(Control element, double value);
    public static int GetShowDelay(Control element);
    public static void SetShowDelay(Control element, int value);
    public static int GetBetweenShowDelay(Control element);
    public static void SetBetweenShowDelay(Control element, int value);
    public static bool GetShowOnDisabled(Control element);
    public static void SetShowOnDisabled(Control element, bool value);
    public static bool GetServiceEnabled(Control element);
    public static void SetServiceEnabled(Control element, bool value);
    public static void AddToolTipOpeningHandler(Control element, EventHandler`1<CancelRoutedEventArgs> handler);
    public static void RemoveToolTipOpeningHandler(Control element, EventHandler`1<CancelRoutedEventArgs> handler);
    public static void AddToolTipClosingHandler(Control element, EventHandler`1<RoutedEventArgs> handler);
    public static void RemoveToolTipClosingHandler(Control element, EventHandler`1<RoutedEventArgs> handler);
    public static CustomPopupPlacementCallback GetCustomPopupPlacementCallback(Control element);
    public static void SetCustomPopupPlacementCallback(Control element, CustomPopupPlacementCallback value);
    private static void IsOpenChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Control get_AdornedControl();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_AdornedControl(Control value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void add_Closed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void remove_Closed(EventHandler value);
    [NullableContextAttribute("2")]
internal IPopupHost get_PopupHost();
    [NullableContextAttribute("2")]
private sealed virtual override IPopupHost Avalonia.Controls.Diagnostics.IPopupHostProvider.get_PopupHost();
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Controls.Diagnostics.IPopupHostProvider.add_PopupHostChanged(Action`1<IPopupHost> value);
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Controls.Diagnostics.IPopupHostProvider.remove_PopupHostChanged(Action`1<IPopupHost> value);
    private void Open(Control control);
    private void Close();
    private void OnPopupClosed(object sender, EventArgs e);
    private void OnPopupOpened(object sender, EventArgs e);
    private void UpdatePseudoClasses(bool newValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.ToolTipService : object {
    private IDisposable _subscriptions;
    [NullableAttribute("2")]
private Control _tipControl;
    private long _lastTipCloseTime;
    [NullableAttribute("2")]
private DispatcherTimer _timer;
    private ulong _lastTipEventTime;
    private ulong _lastWindowEventTime;
    public ToolTipService(IInputManager inputManager);
    public sealed virtual void Dispose();
    private void InputManager_OnProcess(RawInputEventArgs e);
    public sealed virtual void Update(IInputRoot root, Visual candidateToolTipHost);
    private void ServiceEnabledChanged(AvaloniaPropertyChangedEventArgs`1<bool> args);
    private void TipChanged(AvaloniaPropertyChangedEventArgs e);
    [NullableContextAttribute("2")]
private void OnTipControlChanged(Control oldValue, Control newValue);
    private void ToolTipClosed(object sender, EventArgs e);
    private void ToolTipPointerExited(object sender, PointerEventArgs e);
    private void StartShowTimer(int showDelay, Control control);
    private void Open(Control control);
    private void Close(Control control);
    private void StopTimer();
    [CompilerGeneratedAttribute]
private void <InputManager_OnProcess>g__ClearTip|8_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_TransparencyFallback", "Avalonia.Controls.Border")]
public abstract class Avalonia.Controls.TopLevel : ContentControl {
    public static DirectProperty`2<TopLevel, Size> ClientSizeProperty;
    public static DirectProperty`2<TopLevel, Nullable`1<Size>> FrameSizeProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IInputElement> PointerOverElementProperty;
    public static StyledProperty`1<IReadOnlyList`1<WindowTransparencyLevel>> TransparencyLevelHintProperty;
    public static DirectProperty`2<TopLevel, WindowTransparencyLevel> ActualTransparencyLevelProperty;
    public static StyledProperty`1<IBrush> TransparencyBackgroundFallbackProperty;
    public static StyledProperty`1<ThemeVariant> ActualThemeVariantProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ThemeVariant> RequestedThemeVariantProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<SolidColorBrush> SystemBarColorProperty;
    public static AttachedProperty`1<bool> AutoSafeAreaPaddingProperty;
    public static RoutedEvent`1<RoutedEventArgs> BackRequestedEvent;
    private static WeakEvent`2<IResourceHost, ResourcesChangedEventArgs> ResourcesChangedWeakEvent;
    [NullableAttribute("2")]
private IInputManager _inputManager;
    [NullableAttribute("2")]
private IToolTipService _tooltipService;
    [NullableAttribute("2")]
private IAccessKeyHandler _accessKeyHandler;
    [NullableAttribute("2")]
private IKeyboardNavigationHandler _keyboardNavigationHandler;
    [NullableAttribute("2")]
private IGlobalStyles _globalStyles;
    [NullableAttribute("2")]
private IThemeVariantHost _applicationThemeHost;
    [NullableAttribute("2")]
private PointerOverPreProcessor _pointerOverPreProcessor;
    [NullableAttribute("2")]
private IDisposable _pointerOverPreProcessorSubscription;
    [NullableAttribute("2")]
private IDisposable _backGestureSubscription;
    private Dictionary`2<AvaloniaProperty, Action> _platformImplBindings;
    private Size _clientSize;
    private Nullable`1<Size> _frameSize;
    private WindowTransparencyLevel _actualTransparencyLevel;
    [NullableAttribute("2")]
private ILayoutManager _layoutManager;
    [NullableAttribute("2")]
private Border _transparencyFallbackBorder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TargetWeakEventSubscriber`2<TopLevel, ResourcesChangedEventArgs> _resourcesChangesSubscriber;
    [NullableAttribute("2")]
private IStorageProvider _storageProvider;
    [NullableAttribute("2")]
private Screens _screens;
    [NullableAttribute("2")]
private LayoutDiagnosticBridge _layoutDiagnosticBridge;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Opened;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Closed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler ScalingChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITopLevelImpl <PlatformImpl>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositingRenderer <Renderer>k__BackingField;
    [NullableAttribute("2")]
internal IHitTester HitTesterOverride;
    [NullableAttribute("2")]
private IDisposable _insetsPaddings;
    public Size ClientSize { get; protected set; }
    public Nullable`1<Size> FrameSize { get; protected set; }
    public IReadOnlyList`1<WindowTransparencyLevel> TransparencyLevelHint { get; public set; }
    public WindowTransparencyLevel ActualTransparencyLevel { get; private set; }
    public IBrush TransparencyBackgroundFallback { get; public set; }
    [NullableAttribute("2")]
public ThemeVariant RequestedThemeVariant { get; public set; }
    internal ILayoutManager LayoutManager { get; }
    private ILayoutManager Avalonia.Layout.ILayoutRoot.LayoutManager { get; }
    [NullableAttribute("2")]
public ITopLevelImpl PlatformImpl { get; private set; }
    internal CompositingRenderer Renderer { get; }
    internal IHitTester HitTester { get; }
    private IRenderer Avalonia.Rendering.IRenderRoot.Renderer { get; }
    private IHitTester Avalonia.Rendering.IRenderRoot.HitTester { get; }
    public RendererDiagnostics RendererDiagnostics { get; }
    internal Nullable`1<PixelPoint> LastPointerPosition { get; }
    internal IAccessKeyHandler AccessKeyHandler { get; }
    private IKeyboardNavigationHandler Avalonia.Input.IInputRoot.KeyboardNavigationHandler { get; }
    [NullableAttribute("2")]
private IInputElement Avalonia.Input.IInputRoot.PointerOverElement { get; private set; }
    private bool Avalonia.Input.IInputRoot.ShowAccessKeys { get; private set; }
    private double Avalonia.Layout.ILayoutRoot.LayoutScaling { get; }
    public double RenderScaling { get; }
    private IStyleHost Avalonia.Styling.IStyleHost.StylingParent { get; }
    public IStorageProvider StorageProvider { get; }
    [NullableAttribute("2")]
public IInsetsManager InsetsManager { get; }
    [NullableAttribute("2")]
public IInputPane InputPane { get; }
    public ILauncher Launcher { get; }
    [NullableAttribute("2")]
public Screens Screens { get; }
    [NullableAttribute("2")]
public IClipboard Clipboard { get; }
    [NullableAttribute("2")]
public IFocusManager FocusManager { get; }
    [NullableAttribute("2")]
public IPlatformSettings PlatformSettings { get; }
    protected bool BypassFlowDirectionPolicies { get; }
    [NullableAttribute("2")]
private ITextInputMethodImpl Avalonia.Input.TextInput.ITextInputMethodRoot.InputMethod { get; }
    private static TopLevel();
    public TopLevel(ITopLevelImpl impl);
    public TopLevel(ITopLevelImpl impl, IAvaloniaDependencyResolver dependencyResolver);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Opened(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Opened(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_Closed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_Closed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_ScalingChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_ScalingChanged(EventHandler value);
    public sealed virtual Size get_ClientSize();
    protected void set_ClientSize(Size value);
    public Nullable`1<Size> get_FrameSize();
    protected void set_FrameSize(Nullable`1<Size> value);
    public IReadOnlyList`1<WindowTransparencyLevel> get_TransparencyLevelHint();
    public void set_TransparencyLevelHint(IReadOnlyList`1<WindowTransparencyLevel> value);
    public WindowTransparencyLevel get_ActualTransparencyLevel();
    private void set_ActualTransparencyLevel(WindowTransparencyLevel value);
    public IBrush get_TransparencyBackgroundFallback();
    public void set_TransparencyBackgroundFallback(IBrush value);
    [NullableContextAttribute("2")]
public ThemeVariant get_RequestedThemeVariant();
    [NullableContextAttribute("2")]
public void set_RequestedThemeVariant(ThemeVariant value);
    public void add_BackRequested(EventHandler`1<RoutedEventArgs> value);
    public void remove_BackRequested(EventHandler`1<RoutedEventArgs> value);
    internal ILayoutManager get_LayoutManager();
    private sealed virtual override ILayoutManager Avalonia.Layout.ILayoutRoot.get_LayoutManager();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ITopLevelImpl get_PlatformImpl();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_PlatformImpl(ITopLevelImpl value);
    [NullableContextAttribute("2")]
public IPlatformHandle TryGetPlatformHandle();
    private protected void CreatePlatformImplBinding(StyledProperty`1<TValue> property, Action`1<TValue> onValue);
    [CompilerGeneratedAttribute]
internal CompositingRenderer get_Renderer();
    internal IHitTester get_HitTester();
    private sealed virtual override IRenderer Avalonia.Rendering.IRenderRoot.get_Renderer();
    private sealed virtual override IHitTester Avalonia.Rendering.IRenderRoot.get_HitTester();
    public RendererDiagnostics get_RendererDiagnostics();
    internal Nullable`1<PixelPoint> get_LastPointerPosition();
    internal IAccessKeyHandler get_AccessKeyHandler();
    private sealed virtual override IKeyboardNavigationHandler Avalonia.Input.IInputRoot.get_KeyboardNavigationHandler();
    [NullableContextAttribute("2")]
private sealed virtual override IInputElement Avalonia.Input.IInputRoot.get_PointerOverElement();
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Input.IInputRoot.set_PointerOverElement(IInputElement value);
    private sealed virtual override bool Avalonia.Input.IInputRoot.get_ShowAccessKeys();
    private sealed virtual override void Avalonia.Input.IInputRoot.set_ShowAccessKeys(bool value);
    public static void SetSystemBarColor(Control control, SolidColorBrush color);
    public static SolidColorBrush GetSystemBarColor(Control control);
    public static void SetAutoSafeAreaPadding(Control control, bool value);
    public static bool GetAutoSafeAreaPadding(Control control);
    private sealed virtual override double Avalonia.Layout.ILayoutRoot.get_LayoutScaling();
    public sealed virtual double get_RenderScaling();
    private sealed virtual override IStyleHost Avalonia.Styling.IStyleHost.get_StylingParent();
    public IStorageProvider get_StorageProvider();
    [NullableContextAttribute("2")]
public IInsetsManager get_InsetsManager();
    [NullableContextAttribute("2")]
public IInputPane get_InputPane();
    public ILauncher get_Launcher();
    [NullableContextAttribute("2")]
public Screens get_Screens();
    [NullableContextAttribute("2")]
public IClipboard get_Clipboard();
    [NullableContextAttribute("2")]
public sealed virtual IFocusManager get_FocusManager();
    [NullableContextAttribute("2")]
public sealed virtual IPlatformSettings get_PlatformSettings();
    private sealed virtual override Point Avalonia.Rendering.IRenderRoot.PointToClient(PixelPoint p);
    private sealed virtual override PixelPoint Avalonia.Rendering.IRenderRoot.PointToScreen(Point p);
    [NullableContextAttribute("2")]
public static TopLevel GetTopLevel(Visual visual);
    [AsyncStateMachineAttribute("Avalonia.Controls.TopLevel/<RequestPlatformInhibition>d__127")]
public Task`1<IDisposable> RequestPlatformInhibition(PlatformInhibitionType type, string reason);
    public void RequestAnimationFrame(Action`1<TimeSpan> action);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void InvalidateChildInsetsPadding();
    private protected virtual ILayoutManager CreateLayoutManager();
    private void HandlePaint(Rect rect);
    protected void StartRendering();
    protected void StopRendering();
    private protected virtual void HandleClosed();
    internal virtual void HandleResized(Size clientSize, WindowResizeReason reason);
    private void HandleScalingChanged(double scaling);
    private void HandleTransparencyLevelChanged(WindowTransparencyLevel transparencyLevel);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnOpened(EventArgs e);
    protected virtual void OnClosed(EventArgs e);
    private T TryGetService(IAvaloniaDependencyResolver resolver);
    private void HandleInput(RawInputEventArgs e);
    [NullableContextAttribute("2")]
private static IInputElement FirstEnabledAncestor(IInputElement hitTestElement);
    private void PointerOverElementOnPropertyChanged(object sender, AvaloniaPropertyChangedEventArgs e);
    private void GlobalActualThemeVariantChanged(object sender, EventArgs e);
    private void SceneInvalidated(object sender, SceneInvalidatedEventArgs e);
    private static void OnToolTipServiceEnabledChanged(AvaloniaPropertyChangedEventArgs`1<bool> args);
    private void UpdateToolTip(Rect dirtyRect);
    private void PlatformImpl_LostFocus();
    protected virtual bool get_BypassFlowDirectionPolicies();
    protected internal virtual void InvalidateMirrorTransform();
    [NullableContextAttribute("2")]
private sealed virtual override ITextInputMethodImpl Avalonia.Input.TextInput.ITextInputMethodRoot.get_InputMethod();
    [CompilerGeneratedAttribute]
private void <InvalidateChildInsetsPadding>g__InsetsManagerOnSafeAreaChanged|131_0(object sender, SafeAreaChangedArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <HandleScalingChanged>b__138_0(object _);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.TransitionCompletedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private object <From>k__BackingField;
    [CompilerGeneratedAttribute]
private object <To>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasRunToCompletion>k__BackingField;
    public object From { get; }
    public object To { get; }
    public bool HasRunToCompletion { get; }
    public TransitionCompletedEventArgs(object from, object to, bool hasRunToCompletion);
    [CompilerGeneratedAttribute]
public object get_From();
    [CompilerGeneratedAttribute]
public object get_To();
    [CompilerGeneratedAttribute]
public bool get_HasRunToCompletion();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.TransitioningContentControl : ContentControl {
    [NullableAttribute("2")]
private CancellationTokenSource _currentTransition;
    [NullableAttribute("2")]
private ContentPresenter _lastPresenter;
    [NullableAttribute("2")]
private ContentPresenter _presenter2;
    private bool _isFirstFull;
    private bool _shouldAnimate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<IPageTransition> PageTransitionProperty;
    public static StyledProperty`1<bool> IsTransitionReversedProperty;
    public static RoutedEvent`1<TransitionCompletedEventArgs> TransitionCompletedEvent;
    [NullableAttribute("2")]
public IPageTransition PageTransition { get; public set; }
    public bool IsTransitionReversed { get; public set; }
    private static TransitioningContentControl();
    [NullableContextAttribute("2")]
public IPageTransition get_PageTransition();
    [NullableContextAttribute("2")]
public void set_PageTransition(IPageTransition value);
    public bool get_IsTransitionReversed();
    public void set_IsTransitionReversed(bool value);
    public void add_TransitionCompleted(EventHandler`1<TransitionCompletedEventArgs> value);
    public void remove_TransitionCompleted(EventHandler`1<TransitionCompletedEventArgs> value);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual bool RegisterContentPresenter(ContentPresenter presenter);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    private void UpdateContent(bool withTransition);
    private void HideOldPresenter();
    private void OnTransitionCompleted(TransitionCompletedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.TrayIcon : AvaloniaObject {
    private ITrayIconImpl _impl;
    [CompilerGeneratedAttribute]
private EventHandler Clicked;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<ICommand> CommandProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<object> CommandParameterProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<TrayIcons> IconsProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<NativeMenu> MenuProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<WindowIcon> IconProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> ToolTipTextProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<bool> IsVisibleProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public NativeMenu Menu { get; public set; }
    public WindowIcon Icon { get; public set; }
    public string ToolTipText { get; public set; }
    public bool IsVisible { get; public set; }
    public INativeMenuExporter NativeMenuExporter { get; }
    internal ITrayIconImpl Impl { get; }
    private TrayIcon(ITrayIconImpl impl);
    private static TrayIcon();
    [CompilerGeneratedAttribute]
public void add_Clicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Clicked(EventHandler value);
    [NullableContextAttribute("1")]
public static void SetIcons(Application o, TrayIcons trayIcons);
    [NullableContextAttribute("1")]
public static TrayIcons GetIcons(Application o);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public NativeMenu get_Menu();
    public void set_Menu(NativeMenu value);
    public WindowIcon get_Icon();
    public void set_Icon(WindowIcon value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public sealed virtual INativeMenuExporter get_NativeMenuExporter();
    internal ITrayIconImpl get_Impl();
    private static void ShutdownStarted(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private static void Icons_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
private static void RemoveIcons(IEnumerable`1<TrayIcon> icons);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.TrayIcons : AvaloniaList`1<TrayIcon> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.TreeView : ItemsControl {
    public static StyledProperty`1<bool> AutoScrollToSelectedItemProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<TreeView, object> SelectedItemProperty;
    public static DirectProperty`2<TreeView, IList> SelectedItemsProperty;
    public static StyledProperty`1<SelectionMode> SelectionModeProperty;
    private static IList Empty;
    [NullableAttribute("2")]
private object _selectedItem;
    [NullableAttribute("2")]
private IList _selectedItems;
    private bool _syncingSelectedItems;
    public TreeItemContainerGenerator ItemContainerGenerator { get; }
    public bool AutoScrollToSelectedItem { get; public set; }
    public SelectionMode SelectionMode { get; public set; }
    [NullableAttribute("2")]
public object SelectedItem { get; public set; }
    public IList SelectedItems { get; public set; }
    private static TreeView();
    public void add_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public void remove_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public TreeItemContainerGenerator get_ItemContainerGenerator();
    public bool get_AutoScrollToSelectedItem();
    public void set_AutoScrollToSelectedItem(bool value);
    public SelectionMode get_SelectionMode();
    public void set_SelectionMode(SelectionMode value);
    [NullableContextAttribute("2")]
public object get_SelectedItem();
    [NullableContextAttribute("2")]
public void set_SelectedItem(object value);
    public IList get_SelectedItems();
    public void set_SelectedItems(IList value);
    public void ExpandSubTree(TreeViewItem item);
    public void CollapseSubTree(TreeViewItem item);
    public void SelectAll();
    public void UnselectAll();
    public IEnumerable`1<Control> GetRealizedTreeContainers();
    public Control TreeContainerFromItem(object item);
    public object TreeItemFromContainer(Control container);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private protected virtual void OnItemsViewCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void SubscribeToSelectedItems();
    private void SelectSingleItem(object item);
    private void SelectedItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void MarkItemSelected(object item, bool selected);
    private void SelectedItemsAdded(IList items);
    private void UnsubscribeFromSelectedItems();
    private sealed virtual override ValueTuple`2<bool, IInputElement> Avalonia.Input.ICustomKeyboardNavigation.GetNext(IInputElement element, NavigationDirection direction);
    [NullableContextAttribute("2")]
protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    [NullableContextAttribute("2")]
protected internal virtual bool NeedsContainerOverride(object item, int index, Object& recycleKey);
    protected internal virtual void ContainerForItemPreparedOverride(Control container, object item, int index);
    protected virtual void OnGotFocus(GotFocusEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    [NullableContextAttribute("2")]
private TreeViewItem GetContainerInDirection(TreeViewItem from, NavigationDirection direction, bool intoChildren);
    protected virtual void OnPointerPressed(PointerPressedEventArgs e);
    protected void UpdateSelectionFromContainer(Control container, bool select, bool rangeModifier, bool toggleModifier, bool rightButton);
    [ObsoleteAttribute]
[EditorBrowsableAttribute("1")]
private protected virtual ItemContainerGenerator CreateItemContainerGenerator();
    private static TreeViewItem FindFirstNode(TreeView treeView, TreeViewItem nodeA, TreeViewItem nodeB);
    private static TreeViewItem FindInContainers(ItemsControl itemsControl, TreeViewItem nodeA, TreeViewItem nodeB);
    private static TreeViewItem FindFirstNode(TreeViewItem node, TreeViewItem nodeA, TreeViewItem nodeB);
    [NullableContextAttribute("2")]
private List`1<object> GetItemsInRange(TreeViewItem from, TreeViewItem to);
    protected bool UpdateSelectionFromEventSource(object eventSource, bool select, bool rangeModifier, bool toggleModifier, bool rightButton);
    protected TreeViewItem GetContainerFromEventSource(object eventSource);
    private void ContainerSelectionChanged(RoutedEventArgs e);
    private void MarkContainerSelected(Control container, bool selected);
    private static void SynchronizeItems(IList items, IEnumerable`1<object> desired);
    [CompilerGeneratedAttribute]
internal static void <SelectAll>g__AddItems|28_0(ItemsControl itemsControl, <>c__DisplayClass28_0& );
    [IteratorStateMachineAttribute("Avalonia.Controls.TreeView/<<GetRealizedTreeContainers>g__GetRealizedContainers|30_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<Control> <GetRealizedTreeContainers>g__GetRealizedContainers|30_0(ItemsControl itemsControl);
    [CompilerGeneratedAttribute]
internal static Control <TreeContainerFromItem>g__TreeContainerFromItem|31_0(ItemsControl itemsControl, object item);
    [CompilerGeneratedAttribute]
internal static object <TreeItemFromContainer>g__TreeItemFromContainer|32_0(ItemsControl itemsControl, Control container);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute("PART_Header", "Avalonia.Controls.Control")]
[PseudoClassesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Avalonia.Controls.TreeViewItem : HeaderedItemsControl {
    public static StyledProperty`1<bool> IsExpandedProperty;
    public static StyledProperty`1<bool> IsSelectedProperty;
    public static DirectProperty`2<TreeViewItem, int> LevelProperty;
    public static RoutedEvent`1<RoutedEventArgs> ExpandedEvent;
    public static RoutedEvent`1<RoutedEventArgs> CollapsedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FuncTemplate`1<Panel> DefaultPanel;
    [NullableAttribute("2")]
private TreeView _treeView;
    [NullableAttribute("2")]
private Control _header;
    [NullableAttribute("2")]
private Control _headerPresenter;
    private int _level;
    private bool _templateApplied;
    private bool _deferredBringIntoViewFlag;
    public bool IsExpanded { get; public set; }
    public bool IsSelected { get; public set; }
    public int Level { get; private set; }
    [NullableAttribute("2")]
internal TreeView TreeViewOwner { get; }
    private static TreeViewItem();
    private void OnIsExpandedChanged(AvaloniaPropertyChangedEventArgs`1<bool> args);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public int get_Level();
    private void set_Level(int value);
    public void add_Expanded(EventHandler`1<RoutedEventArgs> value);
    public void remove_Expanded(EventHandler`1<RoutedEventArgs> value);
    public void add_Collapsed(EventHandler`1<RoutedEventArgs> value);
    public void remove_Collapsed(EventHandler`1<RoutedEventArgs> value);
    [NullableContextAttribute("2")]
internal TreeView get_TreeViewOwner();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [NullableContextAttribute("2")]
protected internal virtual Control CreateContainerForItemOverride(object item, int index, object recycleKey);
    [NullableContextAttribute("2")]
protected internal virtual bool NeedsContainerOverride(object item, int index, Object& recycleKey);
    protected internal virtual void PrepareContainerForItemOverride(Control container, object item, int index);
    protected internal virtual void ContainerForItemPreparedOverride(Control container, object item, int index);
    protected virtual void OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs e);
    protected virtual void OnRequestBringIntoView(RequestBringIntoViewEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnApplyTemplate(TemplateAppliedEventArgs e);
    protected virtual void OnHeaderDoubleTapped(TappedEventArgs e);
    private protected virtual void OnItemsViewCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private static int CalculateDistanceFromLogicalParent(ILogical logical, int default);
    private TreeView EnsureTreeView();
    private void HeaderDoubleTapped(object sender, TappedEventArgs e);
    [CompilerGeneratedAttribute]
internal static Func`2<TreeViewItem, bool> <OnKeyDown>g__ApplyToSubtree|38_0(Func`2<TreeViewItem, bool> f);
    [CompilerGeneratedAttribute]
internal static Func`2<TreeViewItem, bool> <OnKeyDown>g__ApplyToItemOrRecursivelyIfCtrl|38_1(Func`2<TreeViewItem, bool> f, KeyModifiers keyModifiers);
    [CompilerGeneratedAttribute]
internal static bool <OnKeyDown>g__ExpandItem|38_2(TreeViewItem treeViewItem);
    [CompilerGeneratedAttribute]
internal static bool <OnKeyDown>g__CollapseItem|38_3(TreeViewItem treeViewItem);
    [CompilerGeneratedAttribute]
internal static bool <OnKeyDown>g__FocusAwareCollapseItem|38_4(TreeViewItem treeViewItem);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<TreeViewItem> <OnKeyDown>g__SubTree|38_5(TreeViewItem treeViewItem);
}
public class Avalonia.Controls.UserControl : ContentControl {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Controls.Utils.AncestorFinder : object {
    public static IObservable`1<T> Create(StyledElement control);
    public static IObservable`1<StyledElement> Create(StyledElement control, Type ancestorType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Utils.BorderRenderHelper : object {
    private bool _useComplexRendering;
    private Nullable`1<bool> _backendSupportsIndividualCorners;
    private Geometry _backgroundGeometryCache;
    private Geometry _borderGeometryCache;
    private Size _size;
    private Thickness _borderThickness;
    private CornerRadius _cornerRadius;
    private BackgroundSizing _backgroundSizing;
    private bool _initialized;
    private IPen _cachedPen;
    private void Update(Size finalSize, Thickness borderThickness, CornerRadius cornerRadius, BackgroundSizing backgroundSizing);
    public void Render(DrawingContext context, Size finalSize, Thickness borderThickness, CornerRadius cornerRadius, BackgroundSizing backgroundSizing, IBrush background, IBrush borderBrush, BoxShadows boxShadows);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Utils.CollectionChangedEventManager : object {
    [CompilerGeneratedAttribute]
private static CollectionChangedEventManager <Instance>k__BackingField;
    private ConditionalWeakTable`2<INotifyCollectionChanged, Entry> _entries;
    public static CollectionChangedEventManager Instance { get; }
    private static CollectionChangedEventManager();
    [CompilerGeneratedAttribute]
public static CollectionChangedEventManager get_Instance();
    public void AddListener(INotifyCollectionChanged collection, ICollectionChangedListener listener);
    public void RemoveListener(INotifyCollectionChanged collection, ICollectionChangedListener listener);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Avalonia.Controls.Utils.CollectionUtils : object {
    [CompilerGeneratedAttribute]
private static NotifyCollectionChangedEventArgs <ResetEventArgs>k__BackingField;
    public static NotifyCollectionChangedEventArgs ResetEventArgs { get; }
    private static CollectionUtils();
    [CompilerGeneratedAttribute]
public static NotifyCollectionChangedEventArgs get_ResetEventArgs();
    [ExtensionAttribute]
public static void InsertMany(List`1<T> list, int index, T item, int count);
}
[NullableContextAttribute("1")]
internal interface Avalonia.Controls.Utils.ICollectionChangedListener {
    public abstract virtual void PreChanged(INotifyCollectionChanged sender, NotifyCollectionChangedEventArgs e);
    public abstract virtual void Changed(INotifyCollectionChanged sender, NotifyCollectionChangedEventArgs e);
    public abstract virtual void PostChanged(INotifyCollectionChanged sender, NotifyCollectionChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Avalonia.Controls.Utils.IEnumerableUtils : object {
    [ExtensionAttribute]
public static bool Contains(IEnumerable items, object item);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryGetCountFast(IEnumerable items, Int32& count);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int Count(IEnumerable items);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable items, object item);
    [ExtensionAttribute]
public static object ElementAt(IEnumerable items, int index);
}
[NullableContextAttribute("2")]
public interface Avalonia.Controls.Utils.ISelectionAdapter {
    public object SelectedItem { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public abstract virtual object get_SelectedItem();
    public abstract virtual void set_SelectedItem(object value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public abstract virtual IEnumerable get_ItemsSource();
    public abstract virtual void set_ItemsSource(IEnumerable value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Commit(EventHandler`1<RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Commit(EventHandler`1<RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Cancel(EventHandler`1<RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Cancel(EventHandler`1<RoutedEventArgs> value);
    [NullableContextAttribute("1")]
public abstract virtual void HandleKeyDown(KeyEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Utils.RealizedStackElements : object {
    private int _firstIndex;
    [NullableAttribute("2")]
private List`1<Control> _elements;
    [NullableAttribute("2")]
private List`1<double> _sizes;
    private double _startU;
    private bool _startUUnstable;
    public int Count { get; }
    public int FirstIndex { get; }
    public int LastIndex { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<Control> Elements { get; }
    public IReadOnlyList`1<double> SizeU { get; }
    public double StartU { get; }
    public int get_Count();
    public int get_FirstIndex();
    public int get_LastIndex();
    public IReadOnlyList`1<Control> get_Elements();
    public IReadOnlyList`1<double> get_SizeU();
    public double get_StartU();
    public void Add(int index, Control element, double u, double sizeU);
    [NullableContextAttribute("2")]
public Control GetElement(int index);
    public double GetElementU(int index);
    public int GetIndex(Control element);
    public void ItemsInserted(int index, int count, Action`3<Control, int, int> updateElementIndex);
    public void ItemsRemoved(int index, int count, Action`3<Control, int, int> updateElementIndex, Action`1<Control> recycleElement);
    public void ItemsReplaced(int index, int count, Action`1<Control> recycleElement);
    public void ItemsReset(Action`1<Control> recycleElement);
    public void RecycleElementsBefore(int index, Action`2<Control, int> recycleElement);
    public void RecycleElementsAfter(int index, Action`2<Control, int> recycleElement);
    public void RecycleAllElements(Action`2<Control, int> recycleElement);
    public void ResetForReuse();
    public void ValidateStartU(Orientation orientation);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Utils.SelectingItemsControlSelectionAdapter : object {
    private SelectingItemsControl _selector;
    [CompilerGeneratedAttribute]
private bool <IgnoringSelectionChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SelectionChangedEventArgs> SelectionChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<RoutedEventArgs> Commit;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<RoutedEventArgs> Cancel;
    private bool IgnoringSelectionChanged { get; private set; }
    public SelectingItemsControl SelectorControl { get; public set; }
    public object SelectedItem { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    [NullableContextAttribute("1")]
public SelectingItemsControlSelectionAdapter(SelectingItemsControl selector);
    [CompilerGeneratedAttribute]
private bool get_IgnoringSelectionChanged();
    [CompilerGeneratedAttribute]
private void set_IgnoringSelectionChanged(bool value);
    public SelectingItemsControl get_SelectorControl();
    public void set_SelectorControl(SelectingItemsControl value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Commit(EventHandler`1<RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Commit(EventHandler`1<RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Cancel(EventHandler`1<RoutedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Cancel(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual object get_SelectedItem();
    public sealed virtual void set_SelectedItem(object value);
    public sealed virtual IEnumerable get_ItemsSource();
    public sealed virtual void set_ItemsSource(IEnumerable value);
    private void ResetScrollViewer();
    [NullableContextAttribute("1")]
private void OnSelectorPointerReleased(object sender, PointerReleasedEventArgs e);
    [NullableContextAttribute("1")]
private void OnSelectionChanged(object sender, SelectionChangedEventArgs e);
    protected void SelectedIndexIncrement();
    protected void SelectedIndexDecrement();
    [NullableContextAttribute("1")]
public sealed virtual void HandleKeyDown(KeyEventArgs e);
    protected virtual void OnCommit();
    [NullableContextAttribute("1")]
private void OnCommit(object sender, RoutedEventArgs e);
    protected virtual void OnCancel();
    [NullableContextAttribute("1")]
private void OnCancel(object sender, RoutedEventArgs e);
    private void AfterAdapterAction();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Controls.Utils.StringUtils : object {
    public static bool IsEol(char c);
    public static bool IsStartOfWord(string text, int index);
    public static bool IsEndOfWord(string text, int index);
    public static int PreviousWord(string text, int cursor);
    public static int NextWord(string text, int cursor);
    private static CharClass GetCharClass(char c);
    private static int LineBegin(string text, int pos);
    private static int LineEnd(string text, int cursor, bool include);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Controls.Utils.TimeUtils : object {
    public static string GetPMDesignator();
    public static string GetAMDesignator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Controls.Utils.UndoRedoHelper`1 : object {
    public static int DefaultUndoLimit;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IUndoRedoHost<TState> _host;
    private LinkedList`1<TState> _states;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private LinkedListNode`1<TState> _currentNode;
    [CompilerGeneratedAttribute]
private int <Limit>k__BackingField;
    public int Limit { get; public set; }
    public bool CanUndo { get; }
    public bool CanRedo { get; }
    public bool IsLastState { get; }
    public bool HasState { get; }
    public UndoRedoHelper`1(IUndoRedoHost<TState> host);
    [CompilerGeneratedAttribute]
public int get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(int value);
    public bool get_CanUndo();
    public bool get_CanRedo();
    public void Undo();
    public bool get_IsLastState();
    [NullableContextAttribute("2")]
public bool TryGetLastState(TState& _state);
    public bool get_HasState();
    public void UpdateLastState(TState state);
    public void UpdateLastState();
    public void DiscardRedo();
    public void Redo();
    public void Snapshot();
    public void Clear();
}
[DefaultMemberAttribute("Item")]
internal class Avalonia.Controls.Utils.VirtualizingSnapPointsList : object {
    private static int ExtraCount;
    [NullableAttribute("1")]
private RealizedStackElements _realizedElements;
    private Orientation _orientation;
    private Orientation _parentOrientation;
    private SnapPointsAlignment _snapPointsAlignment;
    private double _size;
    private int _start;
    private int _end;
    public double Item { get; }
    public int Count { get; }
    [NullableContextAttribute("1")]
public VirtualizingSnapPointsList(RealizedStackElements realizedElements, int count, Orientation orientation, Orientation parentOrientation, SnapPointsAlignment snapPointsAlignment, double size);
    public sealed virtual double get_Item(int index);
    public sealed virtual int get_Count();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Avalonia.Controls.Utils.VirtualizingSnapPointsList/<GetEnumerator>d__13")]
public sealed virtual IEnumerator`1<double> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[FlagsAttribute]
public enum Avalonia.Controls.ValidSpinDirections : Enum {
    public int value__;
    public static ValidSpinDirections None;
    public static ValidSpinDirections Increase;
    public static ValidSpinDirections Decrease;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.Viewbox : Control {
    [NullableAttribute("1")]
private ViewboxContainer _containerVisual;
    [NullableAttribute("1")]
public static StyledProperty`1<Stretch> StretchProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<StretchDirection> StretchDirectionProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<Control> ChildProperty;
    public Stretch Stretch { get; public set; }
    public StretchDirection StretchDirection { get; public set; }
    [ContentAttribute]
public Control Child { get; public set; }
    internal ITransform InternalTransform { get; internal set; }
    private static Viewbox();
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public StretchDirection get_StretchDirection();
    public void set_StretchDirection(StretchDirection value);
    public Control get_Child();
    public void set_Child(Control value);
    internal ITransform get_InternalTransform();
    internal void set_InternalTransform(ITransform value);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Controls.VirtualizingCarouselPanel : VirtualizingPanel {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AttachedProperty`1<object> RecycleKeyProperty;
    [NullableAttribute("1")]
private static object s_itemIsItsOwnContainer;
    private Size _extent;
    private Vector _offset;
    private Size _viewport;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<object, Stack`1<Control>> _recyclePool;
    private Control _realized;
    private int _realizedIndex;
    private Control _transitionFrom;
    private int _transitionFromIndex;
    private CancellationTokenSource _transition;
    private EventHandler _scrollInvalidated;
    [CompilerGeneratedAttribute]
private bool <Avalonia.Controls.Primitives.ILogicalScrollable.CanHorizontallyScroll>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Avalonia.Controls.Primitives.ILogicalScrollable.CanVerticallyScroll>k__BackingField;
    private bool Avalonia.Controls.Primitives.ILogicalScrollable.CanHorizontallyScroll { get; private set; }
    private bool Avalonia.Controls.Primitives.ILogicalScrollable.CanVerticallyScroll { get; private set; }
    private bool Avalonia.Controls.Primitives.ILogicalScrollable.IsLogicalScrollEnabled { get; }
    private Size Avalonia.Controls.Primitives.ILogicalScrollable.ScrollSize { get; }
    private Size Avalonia.Controls.Primitives.ILogicalScrollable.PageScrollSize { get; }
    private Size Avalonia.Controls.Primitives.IScrollable.Extent { get; }
    private Size Avalonia.Controls.Primitives.IScrollable.Viewport { get; }
    private Vector Avalonia.Controls.Primitives.IScrollable.Offset { get; private set; }
    private Size Extent { get; private set; }
    private Size Viewport { get; private set; }
    private static VirtualizingCarouselPanel();
    [CompilerGeneratedAttribute]
private sealed virtual override bool Avalonia.Controls.Primitives.ILogicalScrollable.get_CanHorizontallyScroll();
    [CompilerGeneratedAttribute]
private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.set_CanHorizontallyScroll(bool value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool Avalonia.Controls.Primitives.ILogicalScrollable.get_CanVerticallyScroll();
    [CompilerGeneratedAttribute]
private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.set_CanVerticallyScroll(bool value);
    private sealed virtual override bool Avalonia.Controls.Primitives.ILogicalScrollable.get_IsLogicalScrollEnabled();
    private sealed virtual override Size Avalonia.Controls.Primitives.ILogicalScrollable.get_ScrollSize();
    private sealed virtual override Size Avalonia.Controls.Primitives.ILogicalScrollable.get_PageScrollSize();
    private sealed virtual override Size Avalonia.Controls.Primitives.IScrollable.get_Extent();
    private sealed virtual override Size Avalonia.Controls.Primitives.IScrollable.get_Viewport();
    private sealed virtual override Vector Avalonia.Controls.Primitives.IScrollable.get_Offset();
    private sealed virtual override void Avalonia.Controls.Primitives.IScrollable.set_Offset(Vector value);
    private Size get_Extent();
    private void set_Extent(Size value);
    private Size get_Viewport();
    private void set_Viewport(Size value);
    private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.add_ScrollInvalidated(EventHandler value);
    private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.remove_ScrollInvalidated(EventHandler value);
    [NullableContextAttribute("1")]
private sealed virtual override bool Avalonia.Controls.Primitives.ILogicalScrollable.BringIntoView(Control target, Rect targetRect);
    private sealed virtual override Control Avalonia.Controls.Primitives.ILogicalScrollable.GetControlInDirection(NavigationDirection direction, Control from);
    [NullableContextAttribute("1")]
private sealed virtual override void Avalonia.Controls.Primitives.ILogicalScrollable.RaiseScrollInvalidated(EventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual IInputElement GetControl(NavigationDirection direction, IInputElement from, bool wrap);
    protected internal virtual Control ContainerFromIndex(int index);
    protected internal virtual IEnumerable`1<Control> GetRealizedContainers();
    [NullableContextAttribute("1")]
protected internal virtual int IndexFromContainer(Control container);
    protected internal virtual Control ScrollIntoView(int index);
    [NullableContextAttribute("1")]
protected virtual void OnItemsChanged(IReadOnlyList`1<object> items, NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
private Control GetOrCreateElement(IReadOnlyList`1<object> items, int index);
    private Control GetRealizedElement(int index);
    [NullableContextAttribute("1")]
private Control GetItemAsOwnContainer(object item, int index);
    private Control GetRecycledElement(object item, int index, object recycleKey);
    private Control CreateElement(object item, int index, object recycleKey);
    [NullableContextAttribute("1")]
private void RecycleElement(Control element);
    private IPageTransition GetTransition();
    [NullableContextAttribute("1")]
private void TransitionFinished(Task task);
    [CompilerGeneratedAttribute]
private void <OnItemsChanged>g__Add|52_0(int index, int count);
    [CompilerGeneratedAttribute]
private void <OnItemsChanged>g__Remove|52_1(int index, int count);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Avalonia.Controls.VirtualizingPanel : Panel {
    private ItemsControl _itemsControl;
    public ItemContainerGenerator ItemContainerGenerator { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected IReadOnlyList`1<object> Items { get; }
    protected ItemsControl ItemsControl { get; private set; }
    public ItemContainerGenerator get_ItemContainerGenerator();
    protected IReadOnlyList`1<object> get_Items();
    protected ItemsControl get_ItemsControl();
    private void set_ItemsControl(ItemsControl value);
    private sealed virtual override IInputElement Avalonia.Input.INavigableContainer.GetControl(NavigationDirection direction, IInputElement from, bool wrap);
    protected internal abstract virtual Control ScrollIntoView(int index);
    protected internal abstract virtual Control ContainerFromIndex(int index);
    [NullableContextAttribute("1")]
protected internal abstract virtual int IndexFromContainer(Control container);
    protected internal abstract virtual IEnumerable`1<Control> GetRealizedContainers();
    protected abstract virtual IInputElement GetControl(NavigationDirection direction, IInputElement from, bool wrap);
    protected virtual void OnItemsControlChanged(ItemsControl oldValue);
    [NullableContextAttribute("1")]
protected virtual void OnItemsChanged(IReadOnlyList`1<object> items, NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
protected void AddInternalChild(Control control);
    [NullableContextAttribute("1")]
protected void InsertInternalChild(int index, Control control);
    [NullableContextAttribute("1")]
protected void RemoveInternalChild(Control child);
    protected void RemoveInternalChildRange(int index, int count);
    private protected virtual void InvalidateMeasureOnChildrenChanged();
    [NullableContextAttribute("1")]
internal void Attach(ItemsControl itemsControl);
    internal void Detach();
    internal void Refresh();
    [NullableContextAttribute("1")]
private ItemsControl EnsureItemsControl();
    [NullableContextAttribute("1")]
private void OnItemsControlItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    [DoesNotReturnAttribute]
private static void ThrowNotAttached();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.VirtualizingStackPanel : VirtualizingPanel {
    public static StyledProperty`1<Orientation> OrientationProperty;
    public static StyledProperty`1<bool> AreHorizontalSnapPointsRegularProperty;
    public static StyledProperty`1<bool> AreVerticalSnapPointsRegularProperty;
    public static RoutedEvent`1<RoutedEventArgs> HorizontalSnapPointsChangedEvent;
    public static RoutedEvent`1<RoutedEventArgs> VerticalSnapPointsChangedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AttachedProperty`1<object> RecycleKeyProperty;
    private static object s_itemIsItsOwnContainer;
    private Action`2<Control, int> _recycleElement;
    private Action`1<Control> _recycleElementOnItemRemoved;
    private Action`3<Control, int, int> _updateElementIndex;
    private int _scrollToIndex;
    [NullableAttribute("2")]
private Control _scrollToElement;
    private bool _isInLayout;
    private bool _isWaitingForViewportUpdate;
    private double _lastEstimatedElementSizeU;
    [NullableAttribute("2")]
private RealizedStackElements _measureElements;
    [NullableAttribute("2")]
private RealizedStackElements _realizedElements;
    [NullableAttribute("2")]
private IScrollAnchorProvider _scrollAnchorProvider;
    private Rect _viewport;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<object, Stack`1<Control>> _recyclePool;
    [NullableAttribute("2")]
private Control _focusedElement;
    private int _focusedIndex;
    [NullableAttribute("2")]
private Control _realizingElement;
    private int _realizingIndex;
    public Orientation Orientation { get; public set; }
    public bool AreHorizontalSnapPointsRegular { get; public set; }
    public bool AreVerticalSnapPointsRegular { get; public set; }
    public int FirstRealizedIndex { get; }
    public int LastRealizedIndex { get; }
    private static VirtualizingStackPanel();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public sealed virtual void add_HorizontalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void remove_HorizontalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void add_VerticalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual void remove_VerticalSnapPointsChanged(EventHandler`1<RoutedEventArgs> value);
    public sealed virtual bool get_AreHorizontalSnapPointsRegular();
    public sealed virtual void set_AreHorizontalSnapPointsRegular(bool value);
    public sealed virtual bool get_AreVerticalSnapPointsRegular();
    public sealed virtual void set_AreVerticalSnapPointsRegular(bool value);
    public int get_FirstRealizedIndex();
    public int get_LastRealizedIndex();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e);
    protected virtual void OnItemsChanged(IReadOnlyList`1<object> items, NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("2")]
protected virtual void OnItemsControlChanged(ItemsControl oldValue);
    [NullableContextAttribute("2")]
protected virtual IInputElement GetControl(NavigationDirection direction, IInputElement from, bool wrap);
    protected internal virtual IEnumerable`1<Control> GetRealizedContainers();
    [NullableContextAttribute("2")]
protected internal virtual Control ContainerFromIndex(int index);
    protected internal virtual int IndexFromContainer(Control container);
    [NullableContextAttribute("2")]
protected internal virtual Control ScrollIntoView(int index);
    internal IReadOnlyList`1<Control> GetRealizedElements();
    private MeasureViewport CalculateMeasureViewport(IReadOnlyList`1<object> items);
    private Size CalculateDesiredSize(Orientation orientation, int itemCount, MeasureViewport& viewport);
    private Size EstimateDesiredSize(Orientation orientation, int itemCount);
    private double EstimateElementSizeU();
    private void GetOrEstimateAnchorElementForViewport(double viewportStartU, double viewportEndU, int itemCount, Int32& index, Double& position);
    private double GetOrEstimateElementU(int index);
    private void RealizeElements(IReadOnlyList`1<object> items, Size availableSize, MeasureViewport& viewport);
    private Control GetOrCreateElement(IReadOnlyList`1<object> items, int index);
    [NullableContextAttribute("2")]
private Control GetRealizedElement(int index);
    [NullableContextAttribute("2")]
private static Control GetRealizedElement(int index, Int32& specialIndex, Control& specialElement);
    private Control GetItemAsOwnContainer(object item, int index);
    [NullableContextAttribute("2")]
private Control GetRecycledElement(object item, int index, object recycleKey);
    [NullableContextAttribute("2")]
private Control CreateElement(object item, int index, object recycleKey);
    private void RecycleElement(Control element, int index);
    private void RecycleElementOnItemRemoved(Control element);
    private void PushToRecyclePool(object recycleKey, Control element);
    private void UpdateElementIndex(Control element, int oldIndex, int newIndex);
    private void OnEffectiveViewportChanged(object sender, EffectiveViewportChangedEventArgs e);
    private void OnItemsControlPropertyChanged(object sender, AvaloniaPropertyChangedEventArgs e);
    public sealed virtual IReadOnlyList`1<double> GetIrregularSnapPoints(Orientation orientation, SnapPointsAlignment snapPointsAlignment);
    public sealed virtual double GetRegularSnapPoints(Orientation orientation, SnapPointsAlignment snapPointsAlignment, Double& offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Controls.Win32Properties : object {
    public static void AddWindowStylesCallback(TopLevel topLevel, CustomWindowStylesCallback callback);
    public static void RemoveWindowStylesCallback(TopLevel topLevel, CustomWindowStylesCallback callback);
    public static void AddWndProcHookCallback(TopLevel topLevel, CustomWndProcHookCallback callback);
    public static void RemoveWndProcHookCallback(TopLevel topLevel, CustomWndProcHookCallback callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.Window : WindowBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<WindowIcon> s_defaultIcon;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<Window, bool>> _children;
    private bool _isExtendedIntoWindowDecorations;
    private Thickness _windowDecorationMargin;
    private Thickness _offScreenMargin;
    private bool _canHandleResized;
    public static StyledProperty`1<SizeToContent> SizeToContentProperty;
    public static StyledProperty`1<bool> ExtendClientAreaToDecorationsHintProperty;
    public static StyledProperty`1<ExtendClientAreaChromeHints> ExtendClientAreaChromeHintsProperty;
    public static StyledProperty`1<double> ExtendClientAreaTitleBarHeightHintProperty;
    public static DirectProperty`2<Window, bool> IsExtendedIntoWindowDecorationsProperty;
    public static DirectProperty`2<Window, Thickness> WindowDecorationMarginProperty;
    public static DirectProperty`2<Window, Thickness> OffScreenMarginProperty;
    public static StyledProperty`1<SystemDecorations> SystemDecorationsProperty;
    public static StyledProperty`1<bool> ShowActivatedProperty;
    public static StyledProperty`1<bool> ShowInTaskbarProperty;
    public static StyledProperty`1<WindowClosingBehavior> ClosingBehaviorProperty;
    public static StyledProperty`1<WindowState> WindowStateProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<string> TitleProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StyledProperty`1<WindowIcon> IconProperty;
    public static StyledProperty`1<WindowStartupLocation> WindowStartupLocationProperty;
    public static StyledProperty`1<bool> CanResizeProperty;
    public static RoutedEvent`1<RoutedEventArgs> WindowClosedEvent;
    public static RoutedEvent`1<RoutedEventArgs> WindowOpenedEvent;
    [NullableAttribute("2")]
private object _dialogResult;
    private Size _maxPlatformClientSize;
    private bool _shown;
    private bool _showingAsDialog;
    private bool _wasShownBefore;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<WindowClosingEventArgs> Closing;
    [NullableAttribute("2")]
public IWindowImpl PlatformImpl { get; }
    public IReadOnlyList`1<Window> OwnedWindows { get; }
    public SizeToContent SizeToContent { get; public set; }
    [NullableAttribute("2")]
public string Title { get; public set; }
    public bool ExtendClientAreaToDecorationsHint { get; public set; }
    public ExtendClientAreaChromeHints ExtendClientAreaChromeHints { get; public set; }
    public double ExtendClientAreaTitleBarHeightHint { get; public set; }
    public bool IsExtendedIntoWindowDecorations { get; private set; }
    public Thickness WindowDecorationMargin { get; private set; }
    public Thickness OffScreenMargin { get; private set; }
    public SystemDecorations SystemDecorations { get; public set; }
    public bool ShowActivated { get; public set; }
    public bool ShowInTaskbar { get; public set; }
    public WindowClosingBehavior ClosingBehavior { get; public set; }
    public WindowState WindowState { get; public set; }
    public bool CanResize { get; public set; }
    [NullableAttribute("2")]
public WindowIcon Icon { get; public set; }
    public WindowStartupLocation WindowStartupLocation { get; public set; }
    public PixelPoint Position { get; public set; }
    protected Type StyleKeyOverride { get; }
    private static Window();
    public Window(IWindowImpl impl);
    [NullableContextAttribute("2")]
public IWindowImpl get_PlatformImpl();
    public IReadOnlyList`1<Window> get_OwnedWindows();
    public SizeToContent get_SizeToContent();
    public void set_SizeToContent(SizeToContent value);
    [NullableContextAttribute("2")]
public string get_Title();
    [NullableContextAttribute("2")]
public void set_Title(string value);
    public bool get_ExtendClientAreaToDecorationsHint();
    public void set_ExtendClientAreaToDecorationsHint(bool value);
    public ExtendClientAreaChromeHints get_ExtendClientAreaChromeHints();
    public void set_ExtendClientAreaChromeHints(ExtendClientAreaChromeHints value);
    public double get_ExtendClientAreaTitleBarHeightHint();
    public void set_ExtendClientAreaTitleBarHeightHint(double value);
    public bool get_IsExtendedIntoWindowDecorations();
    private void set_IsExtendedIntoWindowDecorations(bool value);
    public Thickness get_WindowDecorationMargin();
    private void set_WindowDecorationMargin(Thickness value);
    public Thickness get_OffScreenMargin();
    private void set_OffScreenMargin(Thickness value);
    public SystemDecorations get_SystemDecorations();
    public void set_SystemDecorations(SystemDecorations value);
    public bool get_ShowActivated();
    public void set_ShowActivated(bool value);
    public bool get_ShowInTaskbar();
    public void set_ShowInTaskbar(bool value);
    public WindowClosingBehavior get_ClosingBehavior();
    public void set_ClosingBehavior(WindowClosingBehavior value);
    public WindowState get_WindowState();
    public void set_WindowState(WindowState value);
    public bool get_CanResize();
    public void set_CanResize(bool value);
    [NullableContextAttribute("2")]
public WindowIcon get_Icon();
    [NullableContextAttribute("2")]
public void set_Icon(WindowIcon value);
    public WindowStartupLocation get_WindowStartupLocation();
    public void set_WindowStartupLocation(WindowStartupLocation value);
    public PixelPoint get_Position();
    public void set_Position(PixelPoint value);
    public void BeginMoveDrag(PointerPressedEventArgs e);
    public void BeginResizeDrag(WindowEdge edge, PointerPressedEventArgs e);
    protected virtual Type get_StyleKeyOverride();
    [CompilerGeneratedAttribute]
public void add_Closing(EventHandler`1<WindowClosingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Closing(EventHandler`1<WindowClosingEventArgs> value);
    public void Close();
    [NullableContextAttribute("2")]
public void Close(object dialogResult);
    internal void CloseCore(WindowCloseReason reason, bool isProgrammatic);
    private protected virtual bool HandleClosing(WindowCloseReason reason);
    private void CloseInternal();
    private bool ShouldCancelClose(WindowClosingEventArgs args);
    private void HandleWindowStateChanged(WindowState state);
    protected virtual void ExtendClientAreaToDecorationsChanged(bool isExtended);
    public virtual void Hide();
    public virtual void Show();
    protected virtual void IsVisibleChanged(AvaloniaPropertyChangedEventArgs e);
    public void Show(Window owner);
    private void EnsureStateBeforeShow();
    private void EnsureParentStateBeforeShow(Window owner);
    [NullableContextAttribute("2")]
private void ShowCore(Window owner);
    public Task ShowDialog(Window owner);
    public Task`1<TResult> ShowDialog(Window owner);
    public static void SortWindowsByZOrder(Window[] windows);
    private void UpdateEnabled();
    private void AddChild(Window window, bool isDialog);
    private void RemoveChild(Window window);
    private void OnGotInputWhenDisabled();
    [NullableContextAttribute("2")]
private void SetWindowStartupLocation(Window owner);
    protected virtual Size MeasureOverride(Size availableSize);
    protected sealed virtual Size ArrangeSetBounds(Size size);
    private protected sealed virtual void HandleClosed();
    internal virtual void HandleResized(Size clientSize, WindowResizeReason reason);
    protected virtual void OnClosing(WindowClosingEventArgs e);
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [NullableContextAttribute("2")]
private static WindowIcon LoadDefaultIcon();
    [CompilerGeneratedAttribute]
private void <.ctor>b__31_0(Size x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__31_1(string title);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__31_2(WindowIcon icon);
    [CompilerGeneratedAttribute]
private void <.ctor>b__31_3(bool canResize);
    [CompilerGeneratedAttribute]
private void <.ctor>b__31_4(bool show);
    [CompilerGeneratedAttribute]
private void <.ctor>b__31_5(WindowState state);
    [CompilerGeneratedAttribute]
private void <.ctor>b__31_6(bool hint);
    [CompilerGeneratedAttribute]
private void <.ctor>b__31_7(ExtendClientAreaChromeHints hint);
    [CompilerGeneratedAttribute]
private void <.ctor>b__31_8(double height);
    [CompilerGeneratedAttribute]
private void <.ctor>g__UpdateMinMaxSize|31_9(double _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.WindowBase : TopLevel {
    public static DirectProperty`2<WindowBase, bool> IsActiveProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DirectProperty`2<WindowBase, WindowBase> OwnerProperty;
    public static StyledProperty`1<bool> TopmostProperty;
    private bool _hasExecutedInitialLayoutPass;
    private bool _isActive;
    private int _ignoreVisibilityChanges;
    [NullableAttribute("2")]
private WindowBase _owner;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Activated;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Deactivated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<PixelPointEventArgs> PositionChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<WindowResizedEventArgs> Resized;
    protected bool IgnoreVisibilityChanges { get; }
    [NullableAttribute("2")]
public IWindowBaseImpl PlatformImpl { get; }
    public bool IsActive { get; private set; }
    public Screens Screens { get; }
    [NullableAttribute("2")]
public WindowBase Owner { get; protected set; }
    public bool Topmost { get; public set; }
    public double DesktopScaling { get; }
    private static WindowBase();
    public WindowBase(IWindowBaseImpl impl);
    public WindowBase(IWindowBaseImpl impl, IAvaloniaDependencyResolver dependencyResolver);
    protected bool get_IgnoreVisibilityChanges();
    private protected IDisposable FreezeVisibilityChangeHandling();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Activated(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Activated(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Deactivated(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PositionChanged(EventHandler`1<PixelPointEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PositionChanged(EventHandler`1<PixelPointEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Resized(EventHandler`1<WindowResizedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Resized(EventHandler`1<WindowResizedEventArgs> value);
    [NullableContextAttribute("2")]
public IWindowBaseImpl get_PlatformImpl();
    public bool get_IsActive();
    private void set_IsActive(bool value);
    public Screens get_Screens();
    [NullableContextAttribute("2")]
public WindowBase get_Owner();
    [NullableContextAttribute("2")]
protected void set_Owner(WindowBase value);
    public sealed virtual bool get_Topmost();
    public sealed virtual void set_Topmost(bool value);
    public double get_DesktopScaling();
    public void Activate();
    public virtual void Hide();
    public virtual void Show();
    protected void EnsureInitialized();
    protected virtual void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change);
    protected virtual void OnClosed(EventArgs e);
    protected virtual void OnOpened(EventArgs e);
    protected virtual void OnResized(WindowResizedEventArgs e);
    private protected virtual void HandleClosed();
    internal virtual void HandleResized(Size clientSize, WindowResizeReason reason);
    protected virtual Size MeasureCore(Size availableSize);
    protected virtual void ArrangeCore(Rect finalRect);
    protected virtual Size ArrangeSetBounds(Size size);
    private void HandlePositionChanged(PixelPoint pos);
    private void HandleActivated();
    private void HandleDeactivated();
    protected virtual void IsVisibleChanged(AvaloniaPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(bool topmost);
}
public enum Avalonia.Controls.WindowCloseReason : Enum {
    public int value__;
    public static WindowCloseReason Undefined;
    public static WindowCloseReason WindowClosing;
    public static WindowCloseReason OwnerWindowClosing;
    public static WindowCloseReason ApplicationShutdown;
    public static WindowCloseReason OSShutdown;
}
public enum Avalonia.Controls.WindowClosingBehavior : Enum {
    public int value__;
    public static WindowClosingBehavior OwnerAndChildWindows;
    public static WindowClosingBehavior OwnerWindowOnly;
}
public class Avalonia.Controls.WindowClosingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private WindowCloseReason <CloseReason>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProgrammatic>k__BackingField;
    public WindowCloseReason CloseReason { get; }
    public bool IsProgrammatic { get; }
    internal WindowClosingEventArgs(WindowCloseReason reason, bool isProgrammatic);
    [CompilerGeneratedAttribute]
public WindowCloseReason get_CloseReason();
    [CompilerGeneratedAttribute]
public bool get_IsProgrammatic();
}
public enum Avalonia.Controls.WindowEdge : Enum {
    public int value__;
    public static WindowEdge NorthWest;
    public static WindowEdge North;
    public static WindowEdge NorthEast;
    public static WindowEdge West;
    public static WindowEdge East;
    public static WindowEdge SouthWest;
    public static WindowEdge South;
    public static WindowEdge SouthEast;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.WindowIcon : object {
    [CompilerGeneratedAttribute]
private IWindowIconImpl <PlatformImpl>k__BackingField;
    internal IWindowIconImpl PlatformImpl { get; }
    public WindowIcon(Bitmap bitmap);
    public WindowIcon(string fileName);
    public WindowIcon(Stream stream);
    [CompilerGeneratedAttribute]
internal IWindowIconImpl get_PlatformImpl();
    public void Save(Stream stream);
}
public class Avalonia.Controls.WindowResizedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Size <ClientSize>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowResizeReason <Reason>k__BackingField;
    public Size ClientSize { get; }
    public WindowResizeReason Reason { get; }
    internal WindowResizedEventArgs(Size clientSize, WindowResizeReason reason);
    [CompilerGeneratedAttribute]
public Size get_ClientSize();
    [CompilerGeneratedAttribute]
public WindowResizeReason get_Reason();
}
public enum Avalonia.Controls.WindowResizeReason : Enum {
    public int value__;
    public static WindowResizeReason Unspecified;
    public static WindowResizeReason User;
    public static WindowResizeReason Application;
    public static WindowResizeReason Layout;
    public static WindowResizeReason DpiChange;
}
public enum Avalonia.Controls.WindowStartupLocation : Enum {
    public int value__;
    public static WindowStartupLocation Manual;
    public static WindowStartupLocation CenterScreen;
    public static WindowStartupLocation CenterOwner;
}
public enum Avalonia.Controls.WindowState : Enum {
    public int value__;
    public static WindowState Normal;
    public static WindowState Minimized;
    public static WindowState Maximized;
    public static WindowState FullScreen;
}
[IsReadOnlyAttribute]
public class Avalonia.Controls.WindowTransparencyLevel : ValueType {
    [NullableAttribute("1")]
private string _value;
    [CompilerGeneratedAttribute]
private static WindowTransparencyLevel <None>k__BackingField;
    [CompilerGeneratedAttribute]
private static WindowTransparencyLevel <Transparent>k__BackingField;
    [CompilerGeneratedAttribute]
private static WindowTransparencyLevel <Blur>k__BackingField;
    [CompilerGeneratedAttribute]
private static WindowTransparencyLevel <AcrylicBlur>k__BackingField;
    [CompilerGeneratedAttribute]
private static WindowTransparencyLevel <Mica>k__BackingField;
    public static WindowTransparencyLevel None { get; }
    public static WindowTransparencyLevel Transparent { get; }
    public static WindowTransparencyLevel Blur { get; }
    public static WindowTransparencyLevel AcrylicBlur { get; }
    public static WindowTransparencyLevel Mica { get; }
    [NullableContextAttribute("1")]
private WindowTransparencyLevel(string value);
    private static WindowTransparencyLevel();
    [CompilerGeneratedAttribute]
public static WindowTransparencyLevel get_None();
    [CompilerGeneratedAttribute]
public static WindowTransparencyLevel get_Transparent();
    [CompilerGeneratedAttribute]
public static WindowTransparencyLevel get_Blur();
    [CompilerGeneratedAttribute]
public static WindowTransparencyLevel get_AcrylicBlur();
    [CompilerGeneratedAttribute]
public static WindowTransparencyLevel get_Mica();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(WindowTransparencyLevel left, WindowTransparencyLevel right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(WindowTransparencyLevel left, WindowTransparencyLevel right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(WindowTransparencyLevel other);
}
public class Avalonia.Controls.WindowTransparencyLevelCollection : ReadOnlyCollection`1<WindowTransparencyLevel> {
    [NullableContextAttribute("1")]
public WindowTransparencyLevelCollection(IList`1<WindowTransparencyLevel> list);
}
public class Avalonia.Controls.WrapPanel : Panel {
    [NullableAttribute("1")]
public static StyledProperty`1<Orientation> OrientationProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<double> ItemWidthProperty;
    [NullableAttribute("1")]
public static StyledProperty`1<double> ItemHeightProperty;
    public Orientation Orientation { get; public set; }
    public double ItemWidth { get; public set; }
    public double ItemHeight { get; public set; }
    private static WrapPanel();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public double get_ItemWidth();
    public void set_ItemWidth(double value);
    public double get_ItemHeight();
    public void set_ItemHeight(double value);
    [NullableContextAttribute("2")]
private sealed virtual override IInputElement Avalonia.Input.INavigableContainer.GetControl(NavigationDirection direction, IInputElement from, bool wrap);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void ArrangeLine(double v, double lineV, int start, int end, bool useItemU, double itemU);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Controls.X11Properties : object {
    public static AttachedProperty`1<X11NetWmWindowType> NetWmWindowTypeProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static AttachedProperty`1<string> WmClassProperty;
    private static X11Properties();
    public static void SetNetWmWindowType(Window obj, X11NetWmWindowType value);
    public static X11NetWmWindowType GetNetWmWindowType(Window obj);
    public static void SetWmClass(Window obj, string value);
    public static string GetWmClass(Window obj);
    private static IX11OptionsToplevelImplFeature TryGetFeature(AvaloniaPropertyChangedEventArgs e);
    private static void OnWmClassChanged(AvaloniaPropertyChangedEventArgs`1<string> e);
    private static void OnNetWmWindowTypeChanged(AvaloniaPropertyChangedEventArgs`1<X11NetWmWindowType> e);
}
[ExtensionAttribute]
public static class Avalonia.LoggingExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AppBuilder LogToTrace(AppBuilder builder, LogEventLevel level, String[] areas);
}
[FlagsAttribute]
public enum Avalonia.Platform.ExtendClientAreaChromeHints : Enum {
    public int value__;
    public static ExtendClientAreaChromeHints NoChrome;
    public static ExtendClientAreaChromeHints Default;
    public static ExtendClientAreaChromeHints SystemChrome;
    public static ExtendClientAreaChromeHints PreferSystemChrome;
    public static ExtendClientAreaChromeHints OSXThickTitleBar;
}
[NullableContextAttribute("1")]
[UnstableAttribute("This interface will be removed in 12.0.")]
public interface Avalonia.Platform.IApplicationPlatformEvents {
    [ObsoleteAttribute("This interface will be removed in 12.0.")]
public abstract virtual void RaiseUrlsOpened(String[] urls);
}
[UnstableAttribute]
public interface Avalonia.Platform.INativePlatformHandleSurface {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public PixelSize Size { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public double Scaling { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual PixelSize get_Size();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual double get_Scaling();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Platform.InProcessDragSource : object {
    private static RawInputModifiers MOUSE_INPUTMODIFIERS;
    private IDragDropDevice _dragDrop;
    private IInputManager _inputManager;
    private LightweightSubject`1<DragDropEffects> _result;
    private DragDropEffects _allowedEffects;
    [NullableAttribute("2")]
private IDataObject _draggedData;
    [NullableAttribute("2")]
private IInputRoot _lastRoot;
    private Point _lastPosition;
    private StandardCursorType _lastCursorType;
    [NullableAttribute("2")]
private object _originalCursor;
    private Nullable`1<RawInputModifiers> _initialInputModifiers;
    [AsyncStateMachineAttribute("Avalonia.Platform.InProcessDragSource/<DoDragDrop>d__12")]
public sealed virtual Task`1<DragDropEffects> DoDragDrop(PointerEventArgs triggerEvent, IDataObject data, DragDropEffects allowedEffects);
    private DragDropEffects RaiseEventAndUpdateCursor(RawDragEventType type, IInputRoot root, Point pt, RawInputModifiers modifiers);
    private static DragDropEffects GetPreferredEffect(DragDropEffects effect, RawInputModifiers modifiers);
    private static StandardCursorType GetCursorForDropEffect(DragDropEffects effects);
    [NullableContextAttribute("2")]
private void UpdateCursor(IInputRoot root, DragDropEffects effect);
    private void CancelDragging();
    private void ProcessKeyEvents(RawKeyEventArgs e);
    private void ProcessMouseEvents(RawPointerEventArgs e);
    [CompilerGeneratedAttribute]
private void <DoDragDrop>b__12_0(RawInputEventArgs arg);
    [CompilerGeneratedAttribute]
private void <ProcessMouseEvents>g__CheckDraggingAccepted|19_0(RawInputModifiers changedMouseButton, <>c__DisplayClass19_0& );
}
[NullableContextAttribute("1")]
[UnstableAttribute]
[PrivateApiAttribute]
public interface Avalonia.Platform.IPlatformIconLoader {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IWindowIconImpl LoadIcon(string fileName);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IWindowIconImpl LoadIcon(Stream stream);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IWindowIconImpl LoadIcon(IBitmapImpl bitmap);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[UnstableAttribute]
public interface Avalonia.Platform.IPlatformLifetimeEventsImpl {
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void add_ShutdownRequested(EventHandler`1<ShutdownRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void remove_ShutdownRequested(EventHandler`1<ShutdownRequestedEventArgs> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[UnstableAttribute]
public interface Avalonia.Platform.IPopupImpl {
    [NullableAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal IPopupPositioner PopupPositioner { get; }
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IPopupPositioner get_PopupPositioner();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetWindowManagerAddShadowHint(bool enabled);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Platform.IScreenImpl {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal int ScreenCount { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal IReadOnlyList`1<Screen> AllScreens { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action Changed { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual int get_ScreenCount();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IReadOnlyList`1<Screen> get_AllScreens();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action get_Changed();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_Changed(Action value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Screen ScreenFromWindow(IWindowBaseImpl window);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Screen ScreenFromTopLevel(ITopLevelImpl topLevel);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Screen ScreenFromPoint(PixelPoint point);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Screen ScreenFromRect(PixelRect rect);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Task`1<bool> RequestScreenDetails();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[UnstableAttribute]
public interface Avalonia.Platform.ITopLevelImpl {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal double DesktopScaling { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal IPlatformHandle Handle { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Size ClientSize { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal double RenderScaling { get; }
    [NullableAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal IEnumerable`1<object> Surfaces { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action`1<RawInputEventArgs> Input { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action`1<Rect> Paint { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action`2<Size, WindowResizeReason> Resized { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action`1<double> ScalingChanged { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action`1<WindowTransparencyLevel> TransparencyLevelChanged { get; internal set; }
    [NullableAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Compositor Compositor { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action Closed { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action LostFocus { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal WindowTransparencyLevel TransparencyLevel { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal AcrylicPlatformCompensationLevels AcrylicCompensationLevels { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual double get_DesktopScaling();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IPlatformHandle get_Handle();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Size get_ClientSize();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual double get_RenderScaling();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IEnumerable`1<object> get_Surfaces();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action`1<RawInputEventArgs> get_Input();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_Input(Action`1<RawInputEventArgs> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action`1<Rect> get_Paint();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_Paint(Action`1<Rect> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action`2<Size, WindowResizeReason> get_Resized();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_Resized(Action`2<Size, WindowResizeReason> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action`1<double> get_ScalingChanged();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_ScalingChanged(Action`1<double> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action`1<WindowTransparencyLevel> get_TransparencyLevelChanged();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_TransparencyLevelChanged(Action`1<WindowTransparencyLevel> value);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Compositor get_Compositor();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetInputRoot(IInputRoot inputRoot);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Point PointToClient(PixelPoint point);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual PixelPoint PointToScreen(Point point);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetCursor(ICursorImpl cursor);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action get_Closed();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_Closed(Action value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action get_LostFocus();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_LostFocus(Action value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IPopupImpl CreatePopup();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetTransparencyLevelHint(IReadOnlyList`1<WindowTransparencyLevel> transparencyLevels);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual WindowTransparencyLevel get_TransparencyLevel();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual AcrylicPlatformCompensationLevels get_AcrylicCompensationLevels();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetFrameThemeVariant(PlatformThemeVariant themeVariant);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[UnstableAttribute]
public interface Avalonia.Platform.ITrayIconImpl {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal INativeMenuExporter MenuExporter { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action OnClicked { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetIcon(IWindowIconImpl icon);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetToolTipText(string text);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetIsVisible(bool visible);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual INativeMenuExporter get_MenuExporter();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action get_OnClicked();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_OnClicked(Action value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[UnstableAttribute]
public interface Avalonia.Platform.ITrayIconWithIsTemplateImpl {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetIsTemplateIcon(bool isTemplateIcon);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[UnstableAttribute]
public interface Avalonia.Platform.IWindowBaseImpl {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Nullable`1<Size> FrameSize { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal PixelPoint Position { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action`1<PixelPoint> PositionChanged { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action Deactivated { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action Activated { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Size MaxAutoSizeHint { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Nullable`1<Size> get_FrameSize();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void Show(bool activate, bool isDialog);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void Hide();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual PixelPoint get_Position();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action`1<PixelPoint> get_PositionChanged();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_PositionChanged(Action`1<PixelPoint> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void Activate();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action get_Deactivated();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_Deactivated(Action value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action get_Activated();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_Activated(Action value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Size get_MaxAutoSizeHint();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetTopmost(bool value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Platform.IWindowIconImpl {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void Save(Stream outputStream);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[UnstableAttribute]
public interface Avalonia.Platform.IWindowImpl {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal WindowState WindowState { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action`1<WindowState> WindowStateChanged { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action GotInputWhenDisabled { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Func`2<WindowCloseReason, bool> Closing { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal bool IsClientAreaExtendedToDecorations { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Action`1<bool> ExtendClientAreaToDecorationsChanged { get; internal set; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal bool NeedsManagedDecorations { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Thickness ExtendedMargins { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal Thickness OffScreenMargin { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual WindowState get_WindowState();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_WindowState(WindowState value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action`1<WindowState> get_WindowStateChanged();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_WindowStateChanged(Action`1<WindowState> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetTitle(string title);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetParent(IWindowImpl parent);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetEnabled(bool enable);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action get_GotInputWhenDisabled();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_GotInputWhenDisabled(Action value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetSystemDecorations(SystemDecorations enabled);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetIcon(IWindowIconImpl icon);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void ShowTaskbarIcon(bool value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void CanResize(bool value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Func`2<WindowCloseReason, bool> get_Closing();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_Closing(Func`2<WindowCloseReason, bool> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual bool get_IsClientAreaExtendedToDecorations();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Action`1<bool> get_ExtendClientAreaToDecorationsChanged();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void set_ExtendClientAreaToDecorationsChanged(Action`1<bool> value);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual bool get_NeedsManagedDecorations();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Thickness get_ExtendedMargins();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual Thickness get_OffScreenMargin();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void BeginMoveDrag(PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void BeginResizeDrag(WindowEdge edge, PointerPressedEventArgs e);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void Resize(Size clientSize, WindowResizeReason reason);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void Move(PixelPoint point);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetMinMaxSize(Size minSize, Size maxSize);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetExtendClientAreaToDecorationsHint(bool extendIntoClientAreaHint);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetExtendClientAreaChromeHints(ExtendClientAreaChromeHints hints);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void SetExtendClientAreaTitleBarHeightHint(double titleBarHeight);
    [NullableContextAttribute("0")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void GetWindowsZOrder(Span`1<Window> windows, Span`1<long> zOrder);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
[PrivateApiAttribute]
public interface Avalonia.Platform.IWindowingPlatform {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IWindowImpl CreateWindow();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual ITopLevelImpl CreateEmbeddableTopLevel();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual IWindowImpl CreateEmbeddableWindow();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual ITrayIconImpl CreateTrayIcon();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PrivateApiAttribute]
public class Avalonia.Platform.PlatformScreen : Screen {
    [CompilerGeneratedAttribute]
private IPlatformHandle <platformHandle>P;
    internal PlatformScreen(IPlatformHandle platformHandle);
    [NullableContextAttribute("2")]
internal virtual IPlatformHandle TryGetPlatformHandle();
    internal virtual int GetHashCode();
    [NullableContextAttribute("2")]
internal virtual bool Equals(object obj);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Avalonia.Platform.Screen : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenOrientation <CurrentOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Scaling>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelRect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelRect <WorkingArea>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimary>k__BackingField;
    public string DisplayName { get; protected set; }
    public ScreenOrientation CurrentOrientation { get; protected set; }
    public double Scaling { get; protected set; }
    [ObsoleteAttribute("Use the Scaling property instead.", "True")]
[EditorBrowsableAttribute("1")]
public double PixelDensity { get; }
    public PixelRect Bounds { get; protected set; }
    public PixelRect WorkingArea { get; protected set; }
    public bool IsPrimary { get; protected set; }
    [ObsoleteAttribute("Use the IsPrimary property instead.", "True")]
[EditorBrowsableAttribute("1")]
public bool Primary { get; }
    [UnstableAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
[ObsoleteAttribute("This API may be removed in Avalonia 12. If you depend on this API, please open an issue with details of your use-case.")]
public Screen(double scaling, PixelRect bounds, PixelRect workingArea, bool isPrimary);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public ScreenOrientation get_CurrentOrientation();
    [CompilerGeneratedAttribute]
protected void set_CurrentOrientation(ScreenOrientation value);
    [CompilerGeneratedAttribute]
public double get_Scaling();
    [CompilerGeneratedAttribute]
protected void set_Scaling(double value);
    public double get_PixelDensity();
    [CompilerGeneratedAttribute]
public PixelRect get_Bounds();
    [CompilerGeneratedAttribute]
protected void set_Bounds(PixelRect value);
    [CompilerGeneratedAttribute]
public PixelRect get_WorkingArea();
    [CompilerGeneratedAttribute]
protected void set_WorkingArea(PixelRect value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimary();
    [CompilerGeneratedAttribute]
protected void set_IsPrimary(bool value);
    public bool get_Primary();
    public virtual IPlatformHandle TryGetPlatformHandle();
    public sealed virtual bool Equals(Screen other);
    public static bool op_Equality(Screen left, Screen right);
    public static bool op_Inequality(Screen left, Screen right);
    [NullableContextAttribute("1")]
public virtual string ToString();
    internal void OnRemoved();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Platform.ScreenHelper : object {
    public static Screen ScreenFromPoint(PixelPoint point, IReadOnlyList`1<Screen> screens);
    public static Screen ScreenFromRect(PixelRect bounds, IReadOnlyList`1<Screen> screens);
    public static Screen ScreenFromWindow(IWindowBaseImpl window, IReadOnlyList`1<Screen> screens);
}
public enum Avalonia.Platform.ScreenOrientation : Enum {
    public int value__;
    public static ScreenOrientation None;
    public static ScreenOrientation Landscape;
    public static ScreenOrientation Portrait;
    public static ScreenOrientation LandscapeFlipped;
    public static ScreenOrientation PortraitFlipped;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PrivateApiAttribute]
public abstract class Avalonia.Platform.ScreensBase`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <screenKeyComparer>P;
    private Dictionary`2<TKey, TScreen> _allScreensByKey;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TScreen[] _allScreens;
    private Nullable`1<int> _screenCount;
    private Nullable`1<bool> _screenDetailsRequestGranted;
    [NullableAttribute("2")]
private DispatcherOperation _onChangeOperation;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action <Changed>k__BackingField;
    internal int ScreenCount { get; }
    internal IReadOnlyList`1<Screen> AllScreens { get; }
    [NullableAttribute("2")]
internal Action Changed { get; internal set; }
    internal ScreensBase`2(IEqualityComparer`1<TKey> screenKeyComparer);
    internal sealed virtual int get_ScreenCount();
    internal sealed virtual IReadOnlyList`1<Screen> get_AllScreens();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal sealed virtual Action get_Changed();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal sealed virtual void set_Changed(Action value);
    internal sealed virtual Screen ScreenFromWindow(IWindowBaseImpl window);
    internal sealed virtual Screen ScreenFromTopLevel(ITopLevelImpl topLevel);
    [NullableContextAttribute("2")]
internal sealed virtual Screen ScreenFromPoint(PixelPoint point);
    [NullableContextAttribute("2")]
internal sealed virtual Screen ScreenFromRect(PixelRect rect);
    internal void OnChanged();
    [AsyncStateMachineAttribute("Avalonia.Platform.ScreensBase`2/<RequestScreenDetails>d__21")]
internal sealed virtual Task`1<bool> RequestScreenDetails();
    internal bool TryGetScreen(TKey key, TScreen& screen);
    internal virtual void ScreenAdded(TScreen screen);
    internal virtual void ScreenChanged(TScreen screen);
    internal virtual void ScreenRemoved(TScreen screen);
    internal virtual int GetScreenCount();
    internal abstract virtual IReadOnlyList`1<TKey> GetAllScreenKeys();
    internal abstract virtual TScreen CreateScreenFromKey(TKey key);
    internal virtual Task`1<bool> RequestScreenDetailsCore();
    internal virtual Screen ScreenFromTopLevelCore(ITopLevelImpl topLevel);
    [NullableContextAttribute("2")]
internal virtual Screen ScreenFromPointCore(PixelPoint point);
    [NullableContextAttribute("2")]
internal virtual Screen ScreenFromRectCore(PixelRect rect);
    [MemberNotNullAttribute("_allScreens")]
private void EnsureScreens();
    [CompilerGeneratedAttribute]
private void <OnChanged>b__20_0();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[ExtensionAttribute]
public static class Avalonia.SystemFontAppBuilderExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AppBuilder WithSystemFontSource(AppBuilder appBuilder, Uri fontSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.UrlOpenedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private String[] <Urls>k__BackingField;
    public String[] Urls { get; }
    public UrlOpenedEventArgs(String[] urls);
    [CompilerGeneratedAttribute]
public String[] get_Urls();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
