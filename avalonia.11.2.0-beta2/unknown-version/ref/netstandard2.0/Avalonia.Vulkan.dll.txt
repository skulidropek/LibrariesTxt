internal class Avalonia.Vulkan.Interop.Utf8BufferArray : object {
    [NullableAttribute("1")]
private List`1<Utf8Buffer> _buffers;
    private Byte** _bufferArray;
    public int Count { get; }
    public UInt32 UCount { get; }
    [NullableContextAttribute("1")]
public Utf8BufferArray(IEnumerable`1<string> strings);
    public static Byte** op_Implicit(Utf8BufferArray a);
    public int get_Count();
    public UInt32 get_UCount();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Avalonia.Vulkan.Interop.VulkanCommandBuffer : object {
    [NullableAttribute("1")]
private VulkanCommandBufferPool _pool;
    private VkCommandBuffer _handle;
    [NullableAttribute("1")]
private IVulkanPlatformGraphicsContext _context;
    private VulkanFence _fence;
    private bool _hasEnded;
    private bool _hasStarted;
    public VkCommandBuffer Handle { get; }
    public bool IsFinished { get; }
    [NullableContextAttribute("1")]
public VulkanCommandBuffer(VulkanCommandBufferPool pool, VkCommandBuffer handle, IVulkanPlatformGraphicsContext context);
    public VkCommandBuffer get_Handle();
    public sealed virtual void Dispose();
    public bool get_IsFinished();
    public void BeginRecording();
    public void EndRecording();
    public void Submit();
    public void Submit(ReadOnlySpan`1<VulkanSemaphore> waitSemaphores, ReadOnlySpan`1<VkPipelineStageFlags> waitDstStageMask, ReadOnlySpan`1<VulkanSemaphore> signalSemaphores, Nullable`1<VulkanFence> fence);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.Interop.VulkanCommandBufferPool : object {
    private IVulkanPlatformGraphicsContext _context;
    private Queue`1<VulkanCommandBuffer> _commandBuffers;
    private VkCommandPool _handle;
    public VkCommandPool Handle { get; }
    public VulkanCommandBufferPool(IVulkanPlatformGraphicsContext context);
    public VkCommandPool get_Handle();
    public void FreeUsedCommandBuffers();
    public void FreeFinishedCommandBuffers();
    public sealed virtual void Dispose();
    public VulkanCommandBuffer CreateCommandBuffer();
    public void AddSubmittedCommandBuffer(VulkanCommandBuffer buffer);
}
internal static class Avalonia.Vulkan.Interop.VulkanDebugLogger : object {
    [NullableAttribute("1")]
private static VkDebugUtilsMessengerCallbackEXTDelegate s_Delegate;
    [CompilerGeneratedAttribute]
private static IntPtr <CallbackPtr>k__BackingField;
    public static IntPtr CallbackPtr { get; }
    private static VulkanDebugLogger();
    [CompilerGeneratedAttribute]
public static IntPtr get_CallbackPtr();
    private static UInt32 WriteLogEvent(VkDebugUtilsMessageSeverityFlagsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messagetypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, Void* puserdata);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.Interop.VulkanDevice : object {
    private static string VK_KHR_swapchain;
    private VulkanInstanceApi _instanceApi;
    private VkDevice _handle;
    private VkPhysicalDevice _physicalDeviceHandle;
    private VkQueue _mainQueue;
    private UInt32 _graphicsQueueIndex;
    private object _lock;
    [NullableAttribute("2")]
private Thread _lockedByThread;
    private int _lockCount;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <EnabledExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IVulkanInstance <Instance>k__BackingField;
    public IEnumerable`1<string> EnabledExtensions { get; }
    public bool IsLost { get; }
    public IntPtr Handle { get; }
    public IntPtr PhysicalDeviceHandle { get; }
    public IntPtr MainQueueHandle { get; }
    public UInt32 GraphicsQueueFamilyIndex { get; }
    public IVulkanInstance Instance { get; }
    private VulkanDevice(VulkanInstanceApi instanceApi, VkDevice handle, VkPhysicalDevice physicalDeviceHandle, VkQueue mainQueue, UInt32 graphicsQueueIndex, String[] enabledExtensions);
    public static IVulkanDevice Create(IVulkanInstance instance, VulkanDeviceCreationOptions options, VulkanPlatformSpecificOptions platformOptions);
    private static List`1<string> GetDeviceExtensions(VulkanInstanceApi instance, VkPhysicalDevice physicalDevice);
    private static Nullable`1<DeviceInfo> CheckDevice(VulkanInstanceApi instance, VkPhysicalDevice physicalDevice, VulkanDeviceCreationOptions options, Nullable`1<VkSurfaceKHR> surface);
    private T CheckAccess(T f);
    public sealed virtual IDisposable Lock();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_EnabledExtensions();
    public sealed virtual bool get_IsLost();
    public sealed virtual IntPtr get_Handle();
    public sealed virtual IntPtr get_PhysicalDeviceHandle();
    public sealed virtual IntPtr get_MainQueueHandle();
    public sealed virtual UInt32 get_GraphicsQueueFamilyIndex();
    [CompilerGeneratedAttribute]
public sealed virtual IVulkanInstance get_Instance();
    public sealed virtual void Dispose();
    public sealed virtual object TryGetFeature(Type featureType);
    [CompilerGeneratedAttribute]
private void <Lock>b__15_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.Interop.VulkanDisplay : object {
    private IVulkanPlatformGraphicsContext _context;
    private VulkanSemaphorePair _semaphorePair;
    private UInt32 _nextImage;
    private VulkanKhrSurface _surface;
    private VkSurfaceFormatKHR _surfaceFormat;
    private VkSwapchainKHR _swapchain;
    private VkExtent2D _swapchainExtent;
    private IVulkanKhrSurfacePlatformSurface _platformSurface;
    private VkImage[] _swapchainImages;
    private VkImageView[] _swapchainImageViews;
    [CompilerGeneratedAttribute]
private VulkanCommandBufferPool <CommandBufferPool>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelSize <Size>k__BackingField;
    public VulkanCommandBufferPool CommandBufferPool { get; private set; }
    public PixelSize Size { get; private set; }
    internal VkSurfaceFormatKHR SurfaceFormat { get; }
    private VulkanDisplay(IVulkanPlatformGraphicsContext context, VulkanKhrSurface surface, VkSwapchainKHR swapchain, VkExtent2D swapchainExtent, IVulkanKhrSurfacePlatformSurface platformSurface);
    [CompilerGeneratedAttribute]
public VulkanCommandBufferPool get_CommandBufferPool();
    [CompilerGeneratedAttribute]
private void set_CommandBufferPool(VulkanCommandBufferPool value);
    [CompilerGeneratedAttribute]
public PixelSize get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(PixelSize value);
    internal VkSurfaceFormatKHR get_SurfaceFormat();
    private static VkSwapchainKHR CreateSwapchain(IVulkanPlatformGraphicsContext context, VulkanKhrSurface surface, VkExtent2D& swapchainExtent, VulkanDisplay oldDisplay);
    private void DestroySwapchain();
    internal static VulkanDisplay CreateDisplay(IVulkanPlatformGraphicsContext context, IVulkanKhrSurfacePlatformSurface surface);
    private void DestroyCurrentImageViews();
    private void CreateSwapchainImages();
    private VkImageView CreateSwapchainImageView(VkImage swapchainImage, VkFormat format);
    private void RecreateSwapchain();
    private void RecreateSurface();
    public bool EnsureSwapchainAvailable();
    public VulkanCommandBuffer StartPresentation();
    internal void BlitImageToCurrentImage(VulkanCommandBuffer commandBuffer, VulkanImage image);
    internal void EndPresentation(VulkanCommandBuffer commandBuffer);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.Interop.VulkanKhrSurface : object {
    private IVulkanPlatformGraphicsContext _context;
    private IVulkanKhrSurfacePlatformSurface _surfaceInfo;
    private VkSurfaceKHR _handle;
    public VkSurfaceKHR Handle { get; }
    public PixelSize Size { get; }
    public VulkanKhrSurface(IVulkanPlatformGraphicsContext context, IVulkanKhrSurfacePlatformSurface surfaceInfo);
    public VkSurfaceKHR get_Handle();
    internal bool CanSurfacePresent();
    internal VkSurfaceFormatKHR GetSurfaceFormat();
    public PixelSize get_Size();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Vulkan.Interop.VulkanMemoryHelper : object {
    internal static int FindSuitableMemoryTypeIndex(IVulkanPlatformGraphicsContext context, UInt32 memoryTypeBits, VkMemoryPropertyFlags flags);
    internal static void TransitionLayout(IVulkanPlatformGraphicsContext context, VulkanCommandBuffer commandBuffer, VkImage image, VkImageLayout sourceLayout, VkAccessFlags sourceAccessMask, VkImageLayout destinationLayout, VkAccessFlags destinationAccessMask, UInt32 mipLevels);
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Vulkan.IVulkanContextExternalObjectsFeature {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IReadOnlyList`1<string> SupportedImageHandleTypes { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public IReadOnlyList`1<string> SupportedSemaphoreTypes { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Byte[] DeviceUuid { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public Byte[] DeviceLuid { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual IReadOnlyList`1<string> get_SupportedImageHandleTypes();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual IReadOnlyList`1<string> get_SupportedSemaphoreTypes();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual Byte[] get_DeviceUuid();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual Byte[] get_DeviceLuid();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual CompositionGpuImportedImageSynchronizationCapabilities GetSynchronizationCapabilities(string imageHandleType);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual IVulkanExternalImage ImportImage(IPlatformHandle handle, PlatformGraphicsExternalImageProperties properties);
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual IVulkanExternalSemaphore ImportSemaphore(IPlatformHandle handle);
}
[NullableContextAttribute("1")]
public interface Avalonia.Vulkan.IVulkanDevice {
    public IntPtr Handle { get; }
    public IntPtr PhysicalDeviceHandle { get; }
    public IntPtr MainQueueHandle { get; }
    public UInt32 GraphicsQueueFamilyIndex { get; }
    public IVulkanInstance Instance { get; }
    public bool IsLost { get; }
    public IEnumerable`1<string> EnabledExtensions { get; }
    public abstract virtual IntPtr get_Handle();
    public abstract virtual IntPtr get_PhysicalDeviceHandle();
    public abstract virtual IntPtr get_MainQueueHandle();
    public abstract virtual UInt32 get_GraphicsQueueFamilyIndex();
    public abstract virtual IVulkanInstance get_Instance();
    public abstract virtual bool get_IsLost();
    public abstract virtual IDisposable Lock();
    public abstract virtual IEnumerable`1<string> get_EnabledExtensions();
}
[UnstableAttribute]
public interface Avalonia.Vulkan.IVulkanExternalImage {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public VulkanImageInfo Info { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual VulkanImageInfo get_Info();
}
[UnstableAttribute]
public interface Avalonia.Vulkan.IVulkanExternalSemaphore {
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public ulong Handle { get; }
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual ulong get_Handle();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void SubmitWaitSemaphore();
    [ObsoleteAttribute("This is a part of unstable API and can be changed in minor releases. Consider replacing it with alternatives or reach out developers on GitHub.")]
public abstract virtual void SubmitSignalSemaphore();
}
[NullableContextAttribute("1")]
public interface Avalonia.Vulkan.IVulkanInstance {
    public IntPtr Handle { get; }
    public IEnumerable`1<string> EnabledExtensions { get; }
    public abstract virtual IntPtr get_Handle();
    public abstract virtual IntPtr GetInstanceProcAddress(IntPtr instance, string name);
    public abstract virtual IntPtr GetDeviceProcAddress(IntPtr device, string name);
    public abstract virtual IEnumerable`1<string> get_EnabledExtensions();
}
public interface Avalonia.Vulkan.IVulkanKhrSurfacePlatformSurface {
    public double Scaling { get; }
    public PixelSize Size { get; }
    public abstract virtual double get_Scaling();
    public abstract virtual PixelSize get_Size();
    [NullableContextAttribute("1")]
public abstract virtual ulong CreateSurface(IVulkanPlatformGraphicsContext context);
}
[NullableContextAttribute("1")]
public interface Avalonia.Vulkan.IVulkanKhrSurfacePlatformSurfaceFactory {
    public abstract virtual bool CanRenderToSurface(IVulkanPlatformGraphicsContext context, object surface);
    public abstract virtual IVulkanKhrSurfacePlatformSurface CreateSurface(IVulkanPlatformGraphicsContext context, object surface);
}
[NullableContextAttribute("1")]
[NotClientImplementableAttribute]
public interface Avalonia.Vulkan.IVulkanPlatformGraphicsContext {
    public IVulkanDevice Device { get; }
    public IVulkanInstance Instance { get; }
    internal VulkanInstanceApi InstanceApi { get; }
    internal VulkanDeviceApi DeviceApi { get; }
    internal VkDevice DeviceHandle { get; }
    internal VkPhysicalDevice PhysicalDeviceHandle { get; }
    internal VkInstance InstanceHandle { get; }
    internal VkQueue MainQueueHandle { get; }
    internal UInt32 GraphicsQueueFamilyIndex { get; }
    public abstract virtual IVulkanDevice get_Device();
    public abstract virtual IVulkanInstance get_Instance();
    internal abstract virtual VulkanInstanceApi get_InstanceApi();
    internal abstract virtual VulkanDeviceApi get_DeviceApi();
    internal abstract virtual VkDevice get_DeviceHandle();
    internal abstract virtual VkPhysicalDevice get_PhysicalDeviceHandle();
    internal abstract virtual VkInstance get_InstanceHandle();
    internal abstract virtual VkQueue get_MainQueueHandle();
    internal abstract virtual UInt32 get_GraphicsQueueFamilyIndex();
    public abstract virtual IVulkanRenderTarget CreateRenderTarget(IEnumerable`1<object> surfaces);
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NotClientImplementableAttribute]
public interface Avalonia.Vulkan.IVulkanRenderSession {
    public double Scaling { get; }
    public PixelSize Size { get; }
    public bool IsYFlipped { get; }
    public VulkanImageInfo ImageInfo { get; }
    public bool IsRgba { get; }
    public abstract virtual double get_Scaling();
    public abstract virtual PixelSize get_Size();
    public abstract virtual bool get_IsYFlipped();
    public abstract virtual VulkanImageInfo get_ImageInfo();
    public abstract virtual bool get_IsRgba();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[NotClientImplementableAttribute]
public interface Avalonia.Vulkan.IVulkanRenderTarget {
    [NullableContextAttribute("1")]
public abstract virtual IVulkanRenderSession BeginDraw();
    internal abstract virtual void (This interface or abstract class is -not- implementable by user code !)();
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkAccessFlags : Enum {
    public int value__;
    public static VkAccessFlags VK_ACCESS_INDIRECT_COMMAND_READ_BIT;
    public static VkAccessFlags VK_ACCESS_INDEX_READ_BIT;
    public static VkAccessFlags VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT;
    public static VkAccessFlags VK_ACCESS_UNIFORM_READ_BIT;
    public static VkAccessFlags VK_ACCESS_INPUT_ATTACHMENT_READ_BIT;
    public static VkAccessFlags VK_ACCESS_SHADER_READ_BIT;
    public static VkAccessFlags VK_ACCESS_SHADER_WRITE_BIT;
    public static VkAccessFlags VK_ACCESS_COLOR_ATTACHMENT_READ_BIT;
    public static VkAccessFlags VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
    public static VkAccessFlags VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT;
    public static VkAccessFlags VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
    public static VkAccessFlags VK_ACCESS_TRANSFER_READ_BIT;
    public static VkAccessFlags VK_ACCESS_TRANSFER_WRITE_BIT;
    public static VkAccessFlags VK_ACCESS_HOST_READ_BIT;
    public static VkAccessFlags VK_ACCESS_HOST_WRITE_BIT;
    public static VkAccessFlags VK_ACCESS_MEMORY_READ_BIT;
    public static VkAccessFlags VK_ACCESS_MEMORY_WRITE_BIT;
    public static VkAccessFlags VK_ACCESS_NONE;
    public static VkAccessFlags VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT;
    public static VkAccessFlags VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT;
    public static VkAccessFlags VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT;
    public static VkAccessFlags VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT;
    public static VkAccessFlags VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT;
    public static VkAccessFlags VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR;
    public static VkAccessFlags VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR;
    public static VkAccessFlags VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT;
    public static VkAccessFlags VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR;
    public static VkAccessFlags VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV;
    public static VkAccessFlags VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV;
    public static VkAccessFlags VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV;
    public static VkAccessFlags VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV;
    public static VkAccessFlags VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV;
    public static VkAccessFlags VK_ACCESS_NONE_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkApplicationInfo : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    public Byte* pApplicationName;
    public UInt32 applicationVersion;
    public Byte* pEngineName;
    public UInt32 engineVersion;
    public UInt32 apiVersion;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkColorSpaceKHR : Enum {
    public int value__;
    public static VkColorSpaceKHR VK_COLOR_SPACE_SRGB_NONLINEAR_KHR;
    public static VkColorSpaceKHR VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_BT709_LINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_BT709_NONLINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_BT2020_LINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_HDR10_ST2084_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_DOLBYVISION_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_HDR10_HLG_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_PASS_THROUGH_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT;
    public static VkColorSpaceKHR VK_COLOR_SPACE_DISPLAY_NATIVE_AMD;
    public static VkColorSpaceKHR VK_COLORSPACE_SRGB_NONLINEAR_KHR;
    public static VkColorSpaceKHR VK_COLOR_SPACE_DCI_P3_LINEAR_EXT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkCommandBuffer : ValueType {
    public IntPtr Handle;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkCommandBufferAllocateInfo : ValueType {
    public VkStructureType sType;
    private IntPtr pNext;
    public VkCommandPool commandPool;
    public VkCommandBufferLevel level;
    public UInt32 commandBufferCount;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkCommandBufferBeginInfo : ValueType {
    public VkStructureType sType;
    private IntPtr pNext;
    public VkCommandBufferUsageFlags flags;
    private IntPtr pInheritanceInfo;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkCommandBufferLevel : Enum {
    public int value__;
    public static VkCommandBufferLevel VK_COMMAND_BUFFER_LEVEL_PRIMARY;
    public static VkCommandBufferLevel VK_COMMAND_BUFFER_LEVEL_SECONDARY;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkCommandBufferUsageFlags : Enum {
    public int value__;
    public static VkCommandBufferUsageFlags VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;
    public static VkCommandBufferUsageFlags VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT;
    public static VkCommandBufferUsageFlags VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkCommandPool : ValueType {
    public ulong Handle;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkCommandPoolCreateFlags : Enum {
    public int value__;
    public static VkCommandPoolCreateFlags VK_COMMAND_POOL_CREATE_TRANSIENT_BIT;
    public static VkCommandPoolCreateFlags VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
    public static VkCommandPoolCreateFlags VK_COMMAND_POOL_CREATE_PROTECTED_BIT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkCommandPoolCreateInfo : ValueType {
    public VkStructureType sType;
    private IntPtr pNext;
    public VkCommandPoolCreateFlags flags;
    public UInt32 queueFamilyIndex;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkComponentMapping : ValueType {
    public VkComponentSwizzle r;
    public VkComponentSwizzle g;
    public VkComponentSwizzle b;
    public VkComponentSwizzle a;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkComponentSwizzle : Enum {
    public int value__;
    public static VkComponentSwizzle VK_COMPONENT_SWIZZLE_IDENTITY;
    public static VkComponentSwizzle VK_COMPONENT_SWIZZLE_ZERO;
    public static VkComponentSwizzle VK_COMPONENT_SWIZZLE_ONE;
    public static VkComponentSwizzle VK_COMPONENT_SWIZZLE_R;
    public static VkComponentSwizzle VK_COMPONENT_SWIZZLE_G;
    public static VkComponentSwizzle VK_COMPONENT_SWIZZLE_B;
    public static VkComponentSwizzle VK_COMPONENT_SWIZZLE_A;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkCompositeAlphaFlagsKHR : Enum {
    public int value__;
    public static VkCompositeAlphaFlagsKHR VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
    public static VkCompositeAlphaFlagsKHR VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR;
    public static VkCompositeAlphaFlagsKHR VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR;
    public static VkCompositeAlphaFlagsKHR VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDebugUtilsLabelEXT : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public IntPtr pLabelName;
    [FixedBufferAttribute("System.Single", "4")]
public <color>e__FixedBuffer color;
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkDebugUtilsMessageSeverityFlagsEXT : Enum {
    public int value__;
    public static VkDebugUtilsMessageSeverityFlagsEXT VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT;
    public static VkDebugUtilsMessageSeverityFlagsEXT VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT;
    public static VkDebugUtilsMessageSeverityFlagsEXT VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT;
    public static VkDebugUtilsMessageSeverityFlagsEXT VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkDebugUtilsMessageTypeFlagsEXT : Enum {
    public int value__;
    public static VkDebugUtilsMessageTypeFlagsEXT VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT;
    public static VkDebugUtilsMessageTypeFlagsEXT VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT;
    public static VkDebugUtilsMessageTypeFlagsEXT VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
    public static VkDebugUtilsMessageTypeFlagsEXT VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDebugUtilsMessengerCallbackDataEXT : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public UInt32 flags;
    public IntPtr pMessageIdName;
    public int messageIdNumber;
    public IntPtr pMessage;
    public UInt32 queueLabelCount;
    public VkDebugUtilsLabelEXT* pQueueLabels;
    public UInt32 cmdBufLabelCount;
    public VkDebugUtilsLabelEXT* pCmdBufLabels;
    public UInt32 objectCount;
    public VkDebugUtilsObjectNameInfoEXT* pObjects;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDebugUtilsMessengerCallbackEXTDelegate : MulticastDelegate {
    public VkDebugUtilsMessengerCallbackEXTDelegate(object object, IntPtr method);
    public virtual UInt32 Invoke(VkDebugUtilsMessageSeverityFlagsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, Void* pUserData);
    public virtual IAsyncResult BeginInvoke(VkDebugUtilsMessageSeverityFlagsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, Void* pUserData, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDebugUtilsMessengerCreateInfoEXT : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public UInt32 flags;
    public VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
    public VkDebugUtilsMessageTypeFlagsEXT messageType;
    public IntPtr pfnUserCallback;
    public IntPtr pUserData;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDebugUtilsMessengerEXT : ValueType {
    public IntPtr Handle;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDebugUtilsObjectNameInfoEXT : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public VkObjectType objectType;
    public ulong objectHandle;
    public IntPtr pObjectName;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkDependencyFlags : Enum {
    public int value__;
    public static VkDependencyFlags VK_DEPENDENCY_BY_REGION_BIT;
    public static VkDependencyFlags VK_DEPENDENCY_DEVICE_GROUP_BIT;
    public static VkDependencyFlags VK_DEPENDENCY_VIEW_LOCAL_BIT;
    public static VkDependencyFlags VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT;
    public static VkDependencyFlags VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR;
    public static VkDependencyFlags VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDevice : ValueType {
    public IntPtr Handle;
    public VkDevice(IntPtr handle);
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDeviceCreateInfo : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public UInt32 flags;
    public UInt32 queueCreateInfoCount;
    public VkDeviceQueueCreateInfo* pQueueCreateInfos;
    public UInt32 enabledLayerCount;
    public Byte** ppEnabledLayerNames;
    public UInt32 enabledExtensionCount;
    public Byte** ppEnabledExtensionNames;
    public IntPtr pEnabledFeatures;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDeviceMemory : ValueType {
    public ulong Handle;
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkDeviceQueueCreateFlags : Enum {
    public int value__;
    public static VkDeviceQueueCreateFlags VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkDeviceQueueCreateInfo : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public VkDeviceQueueCreateFlags flags;
    public UInt32 queueFamilyIndex;
    public UInt32 queueCount;
    public Single* pQueuePriorities;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkExtensionProperties : ValueType {
    [FixedBufferAttribute("System.Byte", "256")]
public <extensionName>e__FixedBuffer extensionName;
    public UInt32 specVersion;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkExtent2D : ValueType {
    public UInt32 width;
    public UInt32 height;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkExtent3D : ValueType {
    public UInt32 width;
    public UInt32 height;
    public UInt32 depth;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkExternalMemoryHandleTypeFlagBits : Enum {
    public int value__;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR;
    public static VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkExternalMemoryImageCreateInfo : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    public VkExternalMemoryHandleTypeFlagBits handleTypes;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkExternalSemaphoreHandleTypeFlags : Enum {
    public int value__;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR;
    public static VkExternalSemaphoreHandleTypeFlags VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkFence : ValueType {
    public ulong Handle;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkFenceCreateFlags : Enum {
    public int value__;
    public static VkFenceCreateFlags VK_FENCE_CREATE_SIGNALED_BIT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkFenceCreateInfo : ValueType {
    public VkStructureType sType;
    private IntPtr pNext;
    public VkFenceCreateFlags flags;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkFilter : Enum {
    public int value__;
    public static VkFilter VK_FILTER_NEAREST;
    public static VkFilter VK_FILTER_LINEAR;
    public static VkFilter VK_FILTER_CUBIC_EXT;
    public static VkFilter VK_FILTER_CUBIC_IMG;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkFormat : Enum {
    public int value__;
    public static VkFormat VK_FORMAT_UNDEFINED;
    public static VkFormat VK_FORMAT_R4G4_UNORM_PACK8;
    public static VkFormat VK_FORMAT_R4G4B4A4_UNORM_PACK16;
    public static VkFormat VK_FORMAT_B4G4R4A4_UNORM_PACK16;
    public static VkFormat VK_FORMAT_R5G6B5_UNORM_PACK16;
    public static VkFormat VK_FORMAT_B5G6R5_UNORM_PACK16;
    public static VkFormat VK_FORMAT_R5G5B5A1_UNORM_PACK16;
    public static VkFormat VK_FORMAT_B5G5R5A1_UNORM_PACK16;
    public static VkFormat VK_FORMAT_A1R5G5B5_UNORM_PACK16;
    public static VkFormat VK_FORMAT_R8_UNORM;
    public static VkFormat VK_FORMAT_R8_SNORM;
    public static VkFormat VK_FORMAT_R8_USCALED;
    public static VkFormat VK_FORMAT_R8_SSCALED;
    public static VkFormat VK_FORMAT_R8_UINT;
    public static VkFormat VK_FORMAT_R8_SINT;
    public static VkFormat VK_FORMAT_R8_SRGB;
    public static VkFormat VK_FORMAT_R8G8_UNORM;
    public static VkFormat VK_FORMAT_R8G8_SNORM;
    public static VkFormat VK_FORMAT_R8G8_USCALED;
    public static VkFormat VK_FORMAT_R8G8_SSCALED;
    public static VkFormat VK_FORMAT_R8G8_UINT;
    public static VkFormat VK_FORMAT_R8G8_SINT;
    public static VkFormat VK_FORMAT_R8G8_SRGB;
    public static VkFormat VK_FORMAT_R8G8B8_UNORM;
    public static VkFormat VK_FORMAT_R8G8B8_SNORM;
    public static VkFormat VK_FORMAT_R8G8B8_USCALED;
    public static VkFormat VK_FORMAT_R8G8B8_SSCALED;
    public static VkFormat VK_FORMAT_R8G8B8_UINT;
    public static VkFormat VK_FORMAT_R8G8B8_SINT;
    public static VkFormat VK_FORMAT_R8G8B8_SRGB;
    public static VkFormat VK_FORMAT_B8G8R8_UNORM;
    public static VkFormat VK_FORMAT_B8G8R8_SNORM;
    public static VkFormat VK_FORMAT_B8G8R8_USCALED;
    public static VkFormat VK_FORMAT_B8G8R8_SSCALED;
    public static VkFormat VK_FORMAT_B8G8R8_UINT;
    public static VkFormat VK_FORMAT_B8G8R8_SINT;
    public static VkFormat VK_FORMAT_B8G8R8_SRGB;
    public static VkFormat VK_FORMAT_R8G8B8A8_UNORM;
    public static VkFormat VK_FORMAT_R8G8B8A8_SNORM;
    public static VkFormat VK_FORMAT_R8G8B8A8_USCALED;
    public static VkFormat VK_FORMAT_R8G8B8A8_SSCALED;
    public static VkFormat VK_FORMAT_R8G8B8A8_UINT;
    public static VkFormat VK_FORMAT_R8G8B8A8_SINT;
    public static VkFormat VK_FORMAT_R8G8B8A8_SRGB;
    public static VkFormat VK_FORMAT_B8G8R8A8_UNORM;
    public static VkFormat VK_FORMAT_B8G8R8A8_SNORM;
    public static VkFormat VK_FORMAT_B8G8R8A8_USCALED;
    public static VkFormat VK_FORMAT_B8G8R8A8_SSCALED;
    public static VkFormat VK_FORMAT_B8G8R8A8_UINT;
    public static VkFormat VK_FORMAT_B8G8R8A8_SINT;
    public static VkFormat VK_FORMAT_B8G8R8A8_SRGB;
    public static VkFormat VK_FORMAT_A8B8G8R8_UNORM_PACK32;
    public static VkFormat VK_FORMAT_A8B8G8R8_SNORM_PACK32;
    public static VkFormat VK_FORMAT_A8B8G8R8_USCALED_PACK32;
    public static VkFormat VK_FORMAT_A8B8G8R8_SSCALED_PACK32;
    public static VkFormat VK_FORMAT_A8B8G8R8_UINT_PACK32;
    public static VkFormat VK_FORMAT_A8B8G8R8_SINT_PACK32;
    public static VkFormat VK_FORMAT_A8B8G8R8_SRGB_PACK32;
    public static VkFormat VK_FORMAT_A2R10G10B10_UNORM_PACK32;
    public static VkFormat VK_FORMAT_A2R10G10B10_SNORM_PACK32;
    public static VkFormat VK_FORMAT_A2R10G10B10_USCALED_PACK32;
    public static VkFormat VK_FORMAT_A2R10G10B10_SSCALED_PACK32;
    public static VkFormat VK_FORMAT_A2R10G10B10_UINT_PACK32;
    public static VkFormat VK_FORMAT_A2R10G10B10_SINT_PACK32;
    public static VkFormat VK_FORMAT_A2B10G10R10_UNORM_PACK32;
    public static VkFormat VK_FORMAT_A2B10G10R10_SNORM_PACK32;
    public static VkFormat VK_FORMAT_A2B10G10R10_USCALED_PACK32;
    public static VkFormat VK_FORMAT_A2B10G10R10_SSCALED_PACK32;
    public static VkFormat VK_FORMAT_A2B10G10R10_UINT_PACK32;
    public static VkFormat VK_FORMAT_A2B10G10R10_SINT_PACK32;
    public static VkFormat VK_FORMAT_R16_UNORM;
    public static VkFormat VK_FORMAT_R16_SNORM;
    public static VkFormat VK_FORMAT_R16_USCALED;
    public static VkFormat VK_FORMAT_R16_SSCALED;
    public static VkFormat VK_FORMAT_R16_UINT;
    public static VkFormat VK_FORMAT_R16_SINT;
    public static VkFormat VK_FORMAT_R16_SFLOAT;
    public static VkFormat VK_FORMAT_R16G16_UNORM;
    public static VkFormat VK_FORMAT_R16G16_SNORM;
    public static VkFormat VK_FORMAT_R16G16_USCALED;
    public static VkFormat VK_FORMAT_R16G16_SSCALED;
    public static VkFormat VK_FORMAT_R16G16_UINT;
    public static VkFormat VK_FORMAT_R16G16_SINT;
    public static VkFormat VK_FORMAT_R16G16_SFLOAT;
    public static VkFormat VK_FORMAT_R16G16B16_UNORM;
    public static VkFormat VK_FORMAT_R16G16B16_SNORM;
    public static VkFormat VK_FORMAT_R16G16B16_USCALED;
    public static VkFormat VK_FORMAT_R16G16B16_SSCALED;
    public static VkFormat VK_FORMAT_R16G16B16_UINT;
    public static VkFormat VK_FORMAT_R16G16B16_SINT;
    public static VkFormat VK_FORMAT_R16G16B16_SFLOAT;
    public static VkFormat VK_FORMAT_R16G16B16A16_UNORM;
    public static VkFormat VK_FORMAT_R16G16B16A16_SNORM;
    public static VkFormat VK_FORMAT_R16G16B16A16_USCALED;
    public static VkFormat VK_FORMAT_R16G16B16A16_SSCALED;
    public static VkFormat VK_FORMAT_R16G16B16A16_UINT;
    public static VkFormat VK_FORMAT_R16G16B16A16_SINT;
    public static VkFormat VK_FORMAT_R16G16B16A16_SFLOAT;
    public static VkFormat VK_FORMAT_R32_UINT;
    public static VkFormat VK_FORMAT_R32_SINT;
    public static VkFormat VK_FORMAT_R32_SFLOAT;
    public static VkFormat VK_FORMAT_R32G32_UINT;
    public static VkFormat VK_FORMAT_R32G32_SINT;
    public static VkFormat VK_FORMAT_R32G32_SFLOAT;
    public static VkFormat VK_FORMAT_R32G32B32_UINT;
    public static VkFormat VK_FORMAT_R32G32B32_SINT;
    public static VkFormat VK_FORMAT_R32G32B32_SFLOAT;
    public static VkFormat VK_FORMAT_R32G32B32A32_UINT;
    public static VkFormat VK_FORMAT_R32G32B32A32_SINT;
    public static VkFormat VK_FORMAT_R32G32B32A32_SFLOAT;
    public static VkFormat VK_FORMAT_R64_UINT;
    public static VkFormat VK_FORMAT_R64_SINT;
    public static VkFormat VK_FORMAT_R64_SFLOAT;
    public static VkFormat VK_FORMAT_R64G64_UINT;
    public static VkFormat VK_FORMAT_R64G64_SINT;
    public static VkFormat VK_FORMAT_R64G64_SFLOAT;
    public static VkFormat VK_FORMAT_R64G64B64_UINT;
    public static VkFormat VK_FORMAT_R64G64B64_SINT;
    public static VkFormat VK_FORMAT_R64G64B64_SFLOAT;
    public static VkFormat VK_FORMAT_R64G64B64A64_UINT;
    public static VkFormat VK_FORMAT_R64G64B64A64_SINT;
    public static VkFormat VK_FORMAT_R64G64B64A64_SFLOAT;
    public static VkFormat VK_FORMAT_B10G11R11_UFLOAT_PACK32;
    public static VkFormat VK_FORMAT_E5B9G9R9_UFLOAT_PACK32;
    public static VkFormat VK_FORMAT_D16_UNORM;
    public static VkFormat VK_FORMAT_X8_D24_UNORM_PACK32;
    public static VkFormat VK_FORMAT_D32_SFLOAT;
    public static VkFormat VK_FORMAT_S8_UINT;
    public static VkFormat VK_FORMAT_D16_UNORM_S8_UINT;
    public static VkFormat VK_FORMAT_D24_UNORM_S8_UINT;
    public static VkFormat VK_FORMAT_D32_SFLOAT_S8_UINT;
    public static VkFormat VK_FORMAT_BC1_RGB_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_BC1_RGB_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_BC1_RGBA_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_BC1_RGBA_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_BC2_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_BC2_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_BC3_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_BC3_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_BC4_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_BC4_SNORM_BLOCK;
    public static VkFormat VK_FORMAT_BC5_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_BC5_SNORM_BLOCK;
    public static VkFormat VK_FORMAT_BC6H_UFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_BC6H_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_BC7_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_BC7_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_EAC_R11_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_EAC_R11_SNORM_BLOCK;
    public static VkFormat VK_FORMAT_EAC_R11G11_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_EAC_R11G11_SNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_4x4_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_4x4_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_5x4_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_5x4_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_5x5_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_5x5_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_6x5_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_6x5_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_6x6_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_6x6_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_8x5_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_8x5_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_8x6_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_8x6_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_8x8_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_8x8_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x5_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x5_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x6_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x6_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x8_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x8_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x10_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x10_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_12x10_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_12x10_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_12x12_UNORM_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_12x12_SRGB_BLOCK;
    public static VkFormat VK_FORMAT_G8B8G8R8_422_UNORM;
    public static VkFormat VK_FORMAT_B8G8R8G8_422_UNORM;
    public static VkFormat VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM;
    public static VkFormat VK_FORMAT_G8_B8R8_2PLANE_420_UNORM;
    public static VkFormat VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM;
    public static VkFormat VK_FORMAT_G8_B8R8_2PLANE_422_UNORM;
    public static VkFormat VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM;
    public static VkFormat VK_FORMAT_R10X6_UNORM_PACK16;
    public static VkFormat VK_FORMAT_R10X6G10X6_UNORM_2PACK16;
    public static VkFormat VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
    public static VkFormat VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
    public static VkFormat VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
    public static VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_R12X4_UNORM_PACK16;
    public static VkFormat VK_FORMAT_R12X4G12X4_UNORM_2PACK16;
    public static VkFormat VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
    public static VkFormat VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
    public static VkFormat VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
    public static VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G16B16G16R16_422_UNORM;
    public static VkFormat VK_FORMAT_B16G16R16G16_422_UNORM;
    public static VkFormat VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM;
    public static VkFormat VK_FORMAT_G16_B16R16_2PLANE_420_UNORM;
    public static VkFormat VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM;
    public static VkFormat VK_FORMAT_G16_B16R16_2PLANE_422_UNORM;
    public static VkFormat VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM;
    public static VkFormat VK_FORMAT_G8_B8R8_2PLANE_444_UNORM;
    public static VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16;
    public static VkFormat VK_FORMAT_G16_B16R16_2PLANE_444_UNORM;
    public static VkFormat VK_FORMAT_A4R4G4B4_UNORM_PACK16;
    public static VkFormat VK_FORMAT_A4B4G4R4_UNORM_PACK16;
    public static VkFormat VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK;
    public static VkFormat VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG;
    public static VkFormat VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG;
    public static VkFormat VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG;
    public static VkFormat VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG;
    public static VkFormat VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG;
    public static VkFormat VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG;
    public static VkFormat VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG;
    public static VkFormat VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG;
    public static VkFormat VK_FORMAT_R16G16_S10_5_NV;
    public static VkFormat VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT;
    public static VkFormat VK_FORMAT_G8B8G8R8_422_UNORM_KHR;
    public static VkFormat VK_FORMAT_B8G8R8G8_422_UNORM_KHR;
    public static VkFormat VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR;
    public static VkFormat VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR;
    public static VkFormat VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR;
    public static VkFormat VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR;
    public static VkFormat VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR;
    public static VkFormat VK_FORMAT_R10X6_UNORM_PACK16_KHR;
    public static VkFormat VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR;
    public static VkFormat VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR;
    public static VkFormat VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR;
    public static VkFormat VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR;
    public static VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_R12X4_UNORM_PACK16_KHR;
    public static VkFormat VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR;
    public static VkFormat VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR;
    public static VkFormat VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR;
    public static VkFormat VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR;
    public static VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR;
    public static VkFormat VK_FORMAT_G16B16G16R16_422_UNORM_KHR;
    public static VkFormat VK_FORMAT_B16G16R16G16_422_UNORM_KHR;
    public static VkFormat VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR;
    public static VkFormat VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR;
    public static VkFormat VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR;
    public static VkFormat VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR;
    public static VkFormat VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR;
    public static VkFormat VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT;
    public static VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT;
    public static VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT;
    public static VkFormat VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT;
    public static VkFormat VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT;
    public static VkFormat VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImage : ValueType {
    public ulong Handle;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkImageAspectFlags : Enum {
    public int value__;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_COLOR_BIT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_DEPTH_BIT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_STENCIL_BIT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_METADATA_BIT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_PLANE_0_BIT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_PLANE_1_BIT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_PLANE_2_BIT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_NONE;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_PLANE_0_BIT_KHR;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_PLANE_1_BIT_KHR;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_PLANE_2_BIT_KHR;
    public static VkImageAspectFlags VK_IMAGE_ASPECT_NONE_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImageBlit : ValueType {
    public VkImageSubresourceLayers srcSubresource;
    public VkOffset3D srcOffsets1;
    public VkOffset3D srcOffsets2;
    public VkImageSubresourceLayers dstSubresource;
    public VkOffset3D dstOffsets1;
    public VkOffset3D dstOffsets2;
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkImageCreateFlags : Enum {
    public int value__;
    public static VkImageCreateFlags VK_IMAGE_CREATE_SPARSE_BINDING_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_SPARSE_ALIASED_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_ALIAS_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_EXTENDED_USAGE_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_PROTECTED_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_DISJOINT_BIT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV;
    public static VkImageCreateFlags VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT;
    public static VkImageCreateFlags VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM;
    public static VkImageCreateFlags VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR;
    public static VkImageCreateFlags VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR;
    public static VkImageCreateFlags VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR;
    public static VkImageCreateFlags VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR;
    public static VkImageCreateFlags VK_IMAGE_CREATE_DISJOINT_BIT_KHR;
    public static VkImageCreateFlags VK_IMAGE_CREATE_ALIAS_BIT_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImageCreateInfo : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    public VkImageCreateFlags flags;
    public VkImageType imageType;
    public VkFormat format;
    public VkExtent3D extent;
    public UInt32 mipLevels;
    public UInt32 arrayLayers;
    public VkSampleCountFlags samples;
    public VkImageTiling tiling;
    public VkImageUsageFlags usage;
    public VkSharingMode sharingMode;
    public UInt32 queueFamilyIndexCount;
    public UInt32* pQueueFamilyIndices;
    public VkImageLayout initialLayout;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkImageLayout : Enum {
    public int value__;
    public static VkImageLayout VK_IMAGE_LAYOUT_UNDEFINED;
    public static VkImageLayout VK_IMAGE_LAYOUT_GENERAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_PREINITIALIZED;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL;
    public static VkImageLayout VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT;
    public static VkImageLayout VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR;
    public static VkImageLayout VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImageMemoryBarrier : ValueType {
    public VkStructureType sType;
    private IntPtr pNext;
    public VkAccessFlags srcAccessMask;
    public VkAccessFlags dstAccessMask;
    public VkImageLayout oldLayout;
    public VkImageLayout newLayout;
    public UInt32 srcQueueFamilyIndex;
    public UInt32 dstQueueFamilyIndex;
    public VkImage image;
    public VkImageSubresourceRange subresourceRange;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImageSubresourceLayers : ValueType {
    public VkImageAspectFlags aspectMask;
    public UInt32 mipLevel;
    public UInt32 baseArrayLayer;
    public UInt32 layerCount;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImageSubresourceRange : ValueType {
    public VkImageAspectFlags aspectMask;
    public UInt32 baseMipLevel;
    public UInt32 levelCount;
    public UInt32 baseArrayLayer;
    public UInt32 layerCount;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkImageTiling : Enum {
    public int value__;
    public static VkImageTiling VK_IMAGE_TILING_OPTIMAL;
    public static VkImageTiling VK_IMAGE_TILING_LINEAR;
    public static VkImageTiling VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkImageType : Enum {
    public int value__;
    public static VkImageType VK_IMAGE_TYPE_1D;
    public static VkImageType VK_IMAGE_TYPE_2D;
    public static VkImageType VK_IMAGE_TYPE_3D;
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkImageUsageFlags : Enum {
    public int value__;
    public static VkImageUsageFlags VK_IMAGE_USAGE_TRANSFER_SRC_BIT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_TRANSFER_DST_BIT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_SAMPLED_BIT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_STORAGE_BIT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
    public static VkImageUsageFlags VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT;
    public static VkImageUsageFlags VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI;
    public static VkImageUsageFlags VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM;
    public static VkImageUsageFlags VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM;
    public static VkImageUsageFlags VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImageView : ValueType {
    public ulong Handle;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkImageViewCreateFlags : Enum {
    public int value__;
    public static VkImageViewCreateFlags VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT;
    public static VkImageViewCreateFlags VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT;
    public static VkImageViewCreateFlags VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImageViewCreateInfo : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public VkImageViewCreateFlags flags;
    public VkImage image;
    public VkImageViewType viewType;
    public VkFormat format;
    public VkComponentMapping components;
    public VkImageSubresourceRange subresourceRange;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkImageViewType : Enum {
    public int value__;
    public static VkImageViewType VK_IMAGE_VIEW_TYPE_1D;
    public static VkImageViewType VK_IMAGE_VIEW_TYPE_2D;
    public static VkImageViewType VK_IMAGE_VIEW_TYPE_3D;
    public static VkImageViewType VK_IMAGE_VIEW_TYPE_CUBE;
    public static VkImageViewType VK_IMAGE_VIEW_TYPE_1D_ARRAY;
    public static VkImageViewType VK_IMAGE_VIEW_TYPE_2D_ARRAY;
    public static VkImageViewType VK_IMAGE_VIEW_TYPE_CUBE_ARRAY;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImportMemoryFdInfoKHR : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    public VkExternalMemoryHandleTypeFlagBits handleType;
    public int fd;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImportMemoryWin32HandleInfoKHR : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    public VkExternalMemoryHandleTypeFlagBits handleType;
    public IntPtr handle;
    public IntPtr name;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImportSemaphoreFdInfoKHR : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    public VkSemaphore semaphore;
    public VkSemaphoreImportFlags flags;
    public VkExternalSemaphoreHandleTypeFlags handleType;
    public int fd;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkImportSemaphoreWin32HandleInfoKHR : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    public VkSemaphore semaphore;
    public VkSemaphoreImportFlags flags;
    public VkExternalSemaphoreHandleTypeFlags handleType;
    public IntPtr handle;
    public IntPtr name;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkInstance : ValueType {
    public IntPtr Handle;
    public VkInstance(IntPtr handle);
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkInstanceCreateInfo : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public int flags;
    public VkApplicationInfo* pApplicationInfo;
    public UInt32 enabledLayerCount;
    public Byte** ppEnabledLayerNames;
    public UInt32 enabledExtensionCount;
    public Byte** ppEnabledExtensionNames;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkLayerProperties : ValueType {
    [FixedBufferAttribute("System.Byte", "256")]
public <layerName>e__FixedBuffer layerName;
    public UInt32 specVersion;
    public UInt32 implementationVersion;
    [FixedBufferAttribute("System.Byte", "256")]
public <description>e__FixedBuffer description;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkMemoryAllocateInfo : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public ulong allocationSize;
    public UInt32 memoryTypeIndex;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkMemoryDedicatedAllocateInfo : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    public VkImage image;
    public IntPtr buffer;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkMemoryHeap : ValueType {
    public ulong size;
    public VkMemoryHeapFlags flags;
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkMemoryHeapFlags : Enum {
    public int value__;
    public static VkMemoryHeapFlags VK_MEMORY_HEAP_DEVICE_LOCAL_BIT;
    public static VkMemoryHeapFlags VK_MEMORY_HEAP_MULTI_INSTANCE_BIT;
    public static VkMemoryHeapFlags VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR;
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkMemoryPropertyFlags : Enum {
    public int value__;
    public static VkMemoryPropertyFlags VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;
    public static VkMemoryPropertyFlags VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;
    public static VkMemoryPropertyFlags VK_MEMORY_PROPERTY_HOST_COHERENT_BIT;
    public static VkMemoryPropertyFlags VK_MEMORY_PROPERTY_HOST_CACHED_BIT;
    public static VkMemoryPropertyFlags VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT;
    public static VkMemoryPropertyFlags VK_MEMORY_PROPERTY_PROTECTED_BIT;
    public static VkMemoryPropertyFlags VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD;
    public static VkMemoryPropertyFlags VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD;
    public static VkMemoryPropertyFlags VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkMemoryRequirements : ValueType {
    public ulong size;
    public ulong alignment;
    public UInt32 memoryTypeBits;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkMemoryType : ValueType {
    public VkMemoryPropertyFlags propertyFlags;
    public UInt32 heapIndex;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkObjectType : Enum {
    public int value__;
    public static VkObjectType VK_OBJECT_TYPE_UNKNOWN;
    public static VkObjectType VK_OBJECT_TYPE_INSTANCE;
    public static VkObjectType VK_OBJECT_TYPE_PHYSICAL_DEVICE;
    public static VkObjectType VK_OBJECT_TYPE_DEVICE;
    public static VkObjectType VK_OBJECT_TYPE_QUEUE;
    public static VkObjectType VK_OBJECT_TYPE_SEMAPHORE;
    public static VkObjectType VK_OBJECT_TYPE_COMMAND_BUFFER;
    public static VkObjectType VK_OBJECT_TYPE_FENCE;
    public static VkObjectType VK_OBJECT_TYPE_DEVICE_MEMORY;
    public static VkObjectType VK_OBJECT_TYPE_BUFFER;
    public static VkObjectType VK_OBJECT_TYPE_IMAGE;
    public static VkObjectType VK_OBJECT_TYPE_EVENT;
    public static VkObjectType VK_OBJECT_TYPE_QUERY_POOL;
    public static VkObjectType VK_OBJECT_TYPE_BUFFER_VIEW;
    public static VkObjectType VK_OBJECT_TYPE_IMAGE_VIEW;
    public static VkObjectType VK_OBJECT_TYPE_SHADER_MODULE;
    public static VkObjectType VK_OBJECT_TYPE_PIPELINE_CACHE;
    public static VkObjectType VK_OBJECT_TYPE_PIPELINE_LAYOUT;
    public static VkObjectType VK_OBJECT_TYPE_RENDER_PASS;
    public static VkObjectType VK_OBJECT_TYPE_PIPELINE;
    public static VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT;
    public static VkObjectType VK_OBJECT_TYPE_SAMPLER;
    public static VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_POOL;
    public static VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_SET;
    public static VkObjectType VK_OBJECT_TYPE_FRAMEBUFFER;
    public static VkObjectType VK_OBJECT_TYPE_COMMAND_POOL;
    public static VkObjectType VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION;
    public static VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE;
    public static VkObjectType VK_OBJECT_TYPE_PRIVATE_DATA_SLOT;
    public static VkObjectType VK_OBJECT_TYPE_SURFACE_KHR;
    public static VkObjectType VK_OBJECT_TYPE_SWAPCHAIN_KHR;
    public static VkObjectType VK_OBJECT_TYPE_DISPLAY_KHR;
    public static VkObjectType VK_OBJECT_TYPE_DISPLAY_MODE_KHR;
    public static VkObjectType VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT;
    public static VkObjectType VK_OBJECT_TYPE_CU_MODULE_NVX;
    public static VkObjectType VK_OBJECT_TYPE_CU_FUNCTION_NVX;
    public static VkObjectType VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT;
    public static VkObjectType VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR;
    public static VkObjectType VK_OBJECT_TYPE_VALIDATION_CACHE_EXT;
    public static VkObjectType VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV;
    public static VkObjectType VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL;
    public static VkObjectType VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR;
    public static VkObjectType VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV;
    public static VkObjectType VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA;
    public static VkObjectType VK_OBJECT_TYPE_MICROMAP_EXT;
    public static VkObjectType VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV;
    public static VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR;
    public static VkObjectType VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR;
    public static VkObjectType VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkOffset3D : ValueType {
    public int x;
    public int y;
    public int z;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkPhysicalDevice : ValueType {
    public IntPtr Handle;
    public VkPhysicalDevice(IntPtr handle);
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkPhysicalDeviceIDProperties : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    [FixedBufferAttribute("System.Byte", "16")]
public <deviceUUID>e__FixedBuffer deviceUUID;
    [FixedBufferAttribute("System.Byte", "16")]
public <driverUUID>e__FixedBuffer driverUUID;
    [FixedBufferAttribute("System.Byte", "8")]
public <deviceLUID>e__FixedBuffer deviceLUID;
    public UInt32 deviceNodeMask;
    public UInt32 deviceLUIDValid;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkPhysicalDeviceLimits : ValueType {
    public UInt32 maxImageDimension1D;
    public UInt32 maxImageDimension2D;
    public UInt32 maxImageDimension3D;
    public UInt32 maxImageDimensionCube;
    public UInt32 maxImageArrayLayers;
    public UInt32 maxTexelBufferElements;
    public UInt32 maxUniformBufferRange;
    public UInt32 maxStorageBufferRange;
    public UInt32 maxPushConstantsSize;
    public UInt32 maxMemoryAllocationCount;
    public UInt32 maxSamplerAllocationCount;
    public ulong bufferImageGranularity;
    public ulong sparseAddressSpaceSize;
    public UInt32 maxBoundDescriptorSets;
    public UInt32 maxPerStageDescriptorSamplers;
    public UInt32 maxPerStageDescriptorUniformBuffers;
    public UInt32 maxPerStageDescriptorStorageBuffers;
    public UInt32 maxPerStageDescriptorSampledImages;
    public UInt32 maxPerStageDescriptorStorageImages;
    public UInt32 maxPerStageDescriptorInputAttachments;
    public UInt32 maxPerStageResources;
    public UInt32 maxDescriptorSetSamplers;
    public UInt32 maxDescriptorSetUniformBuffers;
    public UInt32 maxDescriptorSetUniformBuffersDynamic;
    public UInt32 maxDescriptorSetStorageBuffers;
    public UInt32 maxDescriptorSetStorageBuffersDynamic;
    public UInt32 maxDescriptorSetSampledImages;
    public UInt32 maxDescriptorSetStorageImages;
    public UInt32 maxDescriptorSetInputAttachments;
    public UInt32 maxVertexInputAttributes;
    public UInt32 maxVertexInputBindings;
    public UInt32 maxVertexInputAttributeOffset;
    public UInt32 maxVertexInputBindingStride;
    public UInt32 maxVertexOutputComponents;
    public UInt32 maxTessellationGenerationLevel;
    public UInt32 maxTessellationPatchSize;
    public UInt32 maxTessellationControlPerVertexInputComponents;
    public UInt32 maxTessellationControlPerVertexOutputComponents;
    public UInt32 maxTessellationControlPerPatchOutputComponents;
    public UInt32 maxTessellationControlTotalOutputComponents;
    public UInt32 maxTessellationEvaluationInputComponents;
    public UInt32 maxTessellationEvaluationOutputComponents;
    public UInt32 maxGeometryShaderInvocations;
    public UInt32 maxGeometryInputComponents;
    public UInt32 maxGeometryOutputComponents;
    public UInt32 maxGeometryOutputVertices;
    public UInt32 maxGeometryTotalOutputComponents;
    public UInt32 maxFragmentInputComponents;
    public UInt32 maxFragmentOutputAttachments;
    public UInt32 maxFragmentDualSrcAttachments;
    public UInt32 maxFragmentCombinedOutputResources;
    public UInt32 maxComputeSharedMemorySize;
    [FixedBufferAttribute("System.UInt32", "3")]
public <maxComputeWorkGroupCount>e__FixedBuffer maxComputeWorkGroupCount;
    public UInt32 maxComputeWorkGroupInvocations;
    [FixedBufferAttribute("System.UInt32", "3")]
public <maxComputeWorkGroupSize>e__FixedBuffer maxComputeWorkGroupSize;
    public UInt32 subPixelPrecisionBits;
    public UInt32 subTexelPrecisionBits;
    public UInt32 mipmapPrecisionBits;
    public UInt32 maxDrawIndexedIndexValue;
    public UInt32 maxDrawIndirectCount;
    public float maxSamplerLodBias;
    public float maxSamplerAnisotropy;
    public UInt32 maxViewports;
    [FixedBufferAttribute("System.UInt32", "2")]
public <maxViewportDimensions>e__FixedBuffer maxViewportDimensions;
    [FixedBufferAttribute("System.Single", "2")]
public <viewportBoundsRange>e__FixedBuffer viewportBoundsRange;
    public UInt32 viewportSubPixelBits;
    public IntPtr minMemoryMapAlignment;
    public ulong minTexelBufferOffsetAlignment;
    public ulong minUniformBufferOffsetAlignment;
    public ulong minStorageBufferOffsetAlignment;
    public int minTexelOffset;
    public UInt32 maxTexelOffset;
    public int minTexelGatherOffset;
    public UInt32 maxTexelGatherOffset;
    public float minInterpolationOffset;
    public float maxInterpolationOffset;
    public UInt32 subPixelInterpolationOffsetBits;
    public UInt32 maxFramebufferWidth;
    public UInt32 maxFramebufferHeight;
    public UInt32 maxFramebufferLayers;
    public VkSampleCountFlags framebufferColorSampleCounts;
    public VkSampleCountFlags framebufferDepthSampleCounts;
    public VkSampleCountFlags framebufferStencilSampleCounts;
    public VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
    public UInt32 maxColorAttachments;
    public VkSampleCountFlags sampledImageColorSampleCounts;
    public VkSampleCountFlags sampledImageIntegerSampleCounts;
    public VkSampleCountFlags sampledImageDepthSampleCounts;
    public VkSampleCountFlags sampledImageStencilSampleCounts;
    public VkSampleCountFlags storageImageSampleCounts;
    public UInt32 maxSampleMaskWords;
    public UInt32 timestampComputeAndGraphics;
    public float timestampPeriod;
    public UInt32 maxClipDistances;
    public UInt32 maxCullDistances;
    public UInt32 maxCombinedClipAndCullDistances;
    public UInt32 discreteQueuePriorities;
    [FixedBufferAttribute("System.Single", "2")]
public <pointSizeRange>e__FixedBuffer pointSizeRange;
    [FixedBufferAttribute("System.Single", "2")]
public <lineWidthRange>e__FixedBuffer lineWidthRange;
    public float pointSizeGranularity;
    public float lineWidthGranularity;
    public UInt32 strictLines;
    public UInt32 standardSampleLocations;
    public ulong optimalBufferCopyOffsetAlignment;
    public ulong optimalBufferCopyRowPitchAlignment;
    public ulong nonCoherentAtomSize;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkPhysicalDeviceMemoryProperties : ValueType {
    public UInt32 memoryTypeCount;
    public VkMemoryTypesBuffer memoryTypes;
    public UInt32 memoryHeapCount;
    public VkMemoryHeapsBuffer memoryHeaps;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkPhysicalDeviceProperties : ValueType {
    public UInt32 apiVersion;
    public UInt32 driverVersion;
    public UInt32 vendorID;
    public UInt32 deviceID;
    public VkPhysicalDeviceType deviceType;
    [FixedBufferAttribute("System.Byte", "256")]
public <deviceName>e__FixedBuffer deviceName;
    [FixedBufferAttribute("System.Byte", "16")]
public <pipelineCacheUUID>e__FixedBuffer pipelineCacheUUID;
    public VkPhysicalDeviceLimits limits;
    public VkPhysicalDeviceSparseProperties sparseProperties;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkPhysicalDeviceProperties2 : ValueType {
    public VkStructureType sType;
    public Void* pNext;
    public VkPhysicalDeviceProperties properties;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkPhysicalDeviceSparseProperties : ValueType {
    public UInt32 residencyStandard2DBlockShape;
    public UInt32 residencyStandard2DMultisampleBlockShape;
    public UInt32 residencyStandard3DBlockShape;
    public UInt32 residencyAlignedMipSize;
    public UInt32 residencyNonResidentStrict;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkPhysicalDeviceType : Enum {
    public int value__;
    public static VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_OTHER;
    public static VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU;
    public static VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU;
    public static VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU;
    public static VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_CPU;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkPipelineStageFlags : Enum {
    public int value__;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_VERTEX_SHADER_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_TRANSFER_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_HOST_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_ALL_COMMANDS_BIT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_NONE;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV;
    public static VkPipelineStageFlags VK_PIPELINE_STAGE_NONE_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkPresentInfoKHR : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public UInt32 waitSemaphoreCount;
    public VkSemaphore* pWaitSemaphores;
    public UInt32 swapchainCount;
    public VkSwapchainKHR* pSwapchains;
    public UInt32* pImageIndices;
    public VkResult* pResults;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkPresentModeKHR : Enum {
    public int value__;
    public static VkPresentModeKHR VK_PRESENT_MODE_IMMEDIATE_KHR;
    public static VkPresentModeKHR VK_PRESENT_MODE_MAILBOX_KHR;
    public static VkPresentModeKHR VK_PRESENT_MODE_FIFO_KHR;
    public static VkPresentModeKHR VK_PRESENT_MODE_FIFO_RELAXED_KHR;
    public static VkPresentModeKHR VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR;
    public static VkPresentModeKHR VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkQueue : ValueType {
    public IntPtr Handle;
    public VkQueue(IntPtr handle);
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkQueueFamilyProperties : ValueType {
    public VkQueueFlags queueFlags;
    public UInt32 queueCount;
    public UInt32 timestampValidBits;
    public VkExtent3D minImageTransferGranularity;
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkQueueFlags : Enum {
    public int value__;
    public static VkQueueFlags VK_QUEUE_GRAPHICS_BIT;
    public static VkQueueFlags VK_QUEUE_COMPUTE_BIT;
    public static VkQueueFlags VK_QUEUE_TRANSFER_BIT;
    public static VkQueueFlags VK_QUEUE_SPARSE_BINDING_BIT;
    public static VkQueueFlags VK_QUEUE_PROTECTED_BIT;
    public static VkQueueFlags VK_QUEUE_VIDEO_DECODE_BIT_KHR;
    public static VkQueueFlags VK_QUEUE_VIDEO_ENCODE_BIT_KHR;
    public static VkQueueFlags VK_QUEUE_OPTICAL_FLOW_BIT_NV;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkResult : Enum {
    public int value__;
    public static VkResult VK_SUCCESS;
    public static VkResult VK_NOT_READY;
    public static VkResult VK_TIMEOUT;
    public static VkResult VK_EVENT_SET;
    public static VkResult VK_EVENT_RESET;
    public static VkResult VK_INCOMPLETE;
    public static VkResult VK_ERROR_OUT_OF_HOST_MEMORY;
    public static VkResult VK_ERROR_OUT_OF_DEVICE_MEMORY;
    public static VkResult VK_ERROR_INITIALIZATION_FAILED;
    public static VkResult VK_ERROR_DEVICE_LOST;
    public static VkResult VK_ERROR_MEMORY_MAP_FAILED;
    public static VkResult VK_ERROR_LAYER_NOT_PRESENT;
    public static VkResult VK_ERROR_EXTENSION_NOT_PRESENT;
    public static VkResult VK_ERROR_FEATURE_NOT_PRESENT;
    public static VkResult VK_ERROR_INCOMPATIBLE_DRIVER;
    public static VkResult VK_ERROR_TOO_MANY_OBJECTS;
    public static VkResult VK_ERROR_FORMAT_NOT_SUPPORTED;
    public static VkResult VK_ERROR_FRAGMENTED_POOL;
    public static VkResult VK_ERROR_UNKNOWN;
    public static VkResult VK_ERROR_OUT_OF_POOL_MEMORY;
    public static VkResult VK_ERROR_INVALID_EXTERNAL_HANDLE;
    public static VkResult VK_ERROR_FRAGMENTATION;
    public static VkResult VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
    public static VkResult VK_ERROR_SURFACE_LOST_KHR;
    public static VkResult VK_ERROR_NATIVE_WINDOW_IN_USE_KHR;
    public static VkResult VK_SUBOPTIMAL_KHR;
    public static VkResult VK_ERROR_OUT_OF_DATE_KHR;
    public static VkResult VK_ERROR_INCOMPATIBLE_DISPLAY_KHR;
    public static VkResult VK_ERROR_VALIDATION_FAILED_EXT;
    public static VkResult VK_ERROR_INVALID_SHADER_NV;
    public static VkResult VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT;
    public static VkResult VK_ERROR_NOT_PERMITTED_EXT;
    public static VkResult VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT;
    public static VkResult VK_THREAD_IDLE_KHR;
    public static VkResult VK_THREAD_DONE_KHR;
    public static VkResult VK_OPERATION_DEFERRED_KHR;
    public static VkResult VK_OPERATION_NOT_DEFERRED_KHR;
    public static VkResult VK_PIPELINE_COMPILE_REQUIRED_EXT;
    public static VkResult VK_ERROR_OUT_OF_POOL_MEMORY_KHR;
    public static VkResult VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR;
    public static VkResult VK_ERROR_FRAGMENTATION_EXT;
    public static VkResult VK_ERROR_INVALID_DEVICE_ADDRESS_EXT;
    public static VkResult VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR;
    public static VkResult VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT;
    public static VkResult VK_RESULT_MAX_ENUM;
}
[FlagsAttribute]
internal enum Avalonia.Vulkan.UnmanagedInterop.VkSampleCountFlags : Enum {
    public int value__;
    public static VkSampleCountFlags VK_SAMPLE_COUNT_1_BIT;
    public static VkSampleCountFlags VK_SAMPLE_COUNT_2_BIT;
    public static VkSampleCountFlags VK_SAMPLE_COUNT_4_BIT;
    public static VkSampleCountFlags VK_SAMPLE_COUNT_8_BIT;
    public static VkSampleCountFlags VK_SAMPLE_COUNT_16_BIT;
    public static VkSampleCountFlags VK_SAMPLE_COUNT_32_BIT;
    public static VkSampleCountFlags VK_SAMPLE_COUNT_64_BIT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkSemaphore : ValueType {
    public ulong Handle;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkSemaphoreCreateInfo : ValueType {
    public VkStructureType sType;
    private IntPtr pNext;
    private UInt32 flags;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkSemaphoreImportFlags : Enum {
    public int value__;
    public static VkSemaphoreImportFlags VK_SEMAPHORE_IMPORT_TEMPORARY_BIT;
    public static VkSemaphoreImportFlags VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkSharingMode : Enum {
    public int value__;
    public static VkSharingMode VK_SHARING_MODE_EXCLUSIVE;
    public static VkSharingMode VK_SHARING_MODE_CONCURRENT;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkStructureType : Enum {
    public int value__;
    public static VkStructureType VK_STRUCTURE_TYPE_APPLICATION_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBMIT_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
    public static VkStructureType VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
    public static VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_BARRIER;
    public static VkStructureType VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
    public static VkStructureType VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    public static VkStructureType VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    public static VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    public static VkStructureType VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
    public static VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
    public static VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
    public static VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
    public static VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;
    public static VkStructureType VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
    public static VkStructureType VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK;
    public static VkStructureType VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID;
    public static VkStructureType VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID;
    public static VkStructureType VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID;
    public static VkStructureType VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_GEOMETRY_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
    public static VkStructureType VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
    public static VkStructureType VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
    public static VkStructureType VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL;
    public static VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL;
    public static VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL;
    public static VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL;
    public static VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;
    public static VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES;
    public static VkStructureType VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR;
    public static VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT;
    public static VkStructureType VK_STRUCTURE_TYPE_MAX_ENUM;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkSubmitInfo : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public UInt32 waitSemaphoreCount;
    public VkSemaphore* pWaitSemaphores;
    public VkPipelineStageFlags* pWaitDstStageMask;
    public UInt32 commandBufferCount;
    public VkCommandBuffer* pCommandBuffers;
    public UInt32 signalSemaphoreCount;
    public VkSemaphore* pSignalSemaphores;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkSurfaceCapabilitiesKHR : ValueType {
    public UInt32 minImageCount;
    public UInt32 maxImageCount;
    public VkExtent2D currentExtent;
    public VkExtent2D minImageExtent;
    public VkExtent2D maxImageExtent;
    public UInt32 maxImageArrayLayers;
    public VkSurfaceTransformFlagsKHR supportedTransforms;
    public VkSurfaceTransformFlagsKHR currentTransform;
    public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
    public VkImageUsageFlags supportedUsageFlags;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkSurfaceFormatKHR : ValueType {
    public VkFormat format;
    public VkColorSpaceKHR colorSpace;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkSurfaceKHR : ValueType {
    public ulong Handle;
    public VkSurfaceKHR(ulong handle);
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkSurfaceTransformFlagsKHR : Enum {
    public int value__;
    public static VkSurfaceTransformFlagsKHR VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;
    public static VkSurfaceTransformFlagsKHR VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR;
    public static VkSurfaceTransformFlagsKHR VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR;
    public static VkSurfaceTransformFlagsKHR VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR;
    public static VkSurfaceTransformFlagsKHR VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR;
    public static VkSurfaceTransformFlagsKHR VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR;
    public static VkSurfaceTransformFlagsKHR VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR;
    public static VkSurfaceTransformFlagsKHR VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR;
    public static VkSurfaceTransformFlagsKHR VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR;
}
internal enum Avalonia.Vulkan.UnmanagedInterop.VkSwapchainCreateFlagsKHR : Enum {
    public int value__;
    public static VkSwapchainCreateFlagsKHR VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR;
    public static VkSwapchainCreateFlagsKHR VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR;
    public static VkSwapchainCreateFlagsKHR VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR;
    public static VkSwapchainCreateFlagsKHR VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkSwapchainCreateInfoKHR : ValueType {
    public VkStructureType sType;
    public IntPtr pNext;
    public VkSwapchainCreateFlagsKHR flags;
    public VkSurfaceKHR surface;
    public UInt32 minImageCount;
    public VkFormat imageFormat;
    public VkColorSpaceKHR imageColorSpace;
    public VkExtent2D imageExtent;
    public UInt32 imageArrayLayers;
    public VkImageUsageFlags imageUsage;
    public VkSharingMode imageSharingMode;
    public UInt32 queueFamilyIndexCount;
    public UInt32* pQueueFamilyIndices;
    public VkSurfaceTransformFlagsKHR preTransform;
    public VkCompositeAlphaFlagsKHR compositeAlpha;
    public VkPresentModeKHR presentMode;
    public UInt32 clipped;
    public VkSwapchainKHR oldSwapchain;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VkSwapchainKHR : ValueType {
    public ulong Handle;
}
internal class Avalonia.Vulkan.UnmanagedInterop.VulkanDeviceApi : object {
    private method _addr_CreateFence;
    private method _addr_DestroyFence;
    private method _addr_CreateCommandPool;
    private method _addr_DestroyCommandPool;
    private method _addr_AllocateCommandBuffers;
    private method _addr_FreeCommandBuffers;
    private method _addr_WaitForFences;
    private method _addr_GetFenceStatus;
    private method _addr_BeginCommandBuffer;
    private method _addr_EndCommandBuffer;
    private method _addr_CreateSemaphore;
    private method _addr_DestroySemaphore;
    private method _addr_ResetFences;
    private method _addr_QueueSubmit;
    private method _addr_CreateImage;
    private method _addr_DestroyImage;
    private method _addr_GetImageMemoryRequirements;
    private method _addr_AllocateMemory;
    private method _addr_FreeMemory;
    private method _addr_BindImageMemory;
    private method _addr_CreateImageView;
    private method _addr_DestroyImageView;
    private method _addr_CmdPipelineBarrier;
    private method _addr_CreateSwapchainKHR;
    private method _addr_DestroySwapchainKHR;
    private method _addr_GetSwapchainImagesKHR;
    private method _addr_DeviceWaitIdle;
    private method _addr_QueueWaitIdle;
    private method _addr_AcquireNextImageKHR;
    private method _addr_CmdBlitImage;
    private method _addr_vkQueuePresentKHR;
    private method _addr_ImportSemaphoreFdKHR;
    private method _addr_ImportSemaphoreWin32HandleKHR;
    public bool IsImportSemaphoreFdKHRAvailable { get; }
    public bool IsImportSemaphoreWin32HandleKHRAvailable { get; }
    [NullableContextAttribute("1")]
public VulkanDeviceApi(IVulkanDevice device);
    [GetProcAddressAttribute("vkCreateFence")]
public VkResult CreateFence(VkDevice device, VkFenceCreateInfo& pCreateInfo, IntPtr pAllocator, VkFence& pFence);
    [GetProcAddressAttribute("vkDestroyFence")]
public void DestroyFence(VkDevice device, VkFence fence, IntPtr pAllocator);
    [GetProcAddressAttribute("vkCreateCommandPool")]
public VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo& pCreateInfo, IntPtr pAllocator, VkCommandPool& pCommandPool);
    [GetProcAddressAttribute("vkDestroyCommandPool")]
public void DestroyCommandPool(VkDevice device, VkCommandPool pool, IntPtr pAllocator);
    [GetProcAddressAttribute("vkAllocateCommandBuffers")]
public VkResult AllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo& pAllocateInfo, VkCommandBuffer* pCommandBuffers);
    [GetProcAddressAttribute("vkFreeCommandBuffers")]
public void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, UInt32 commandBufferCount, VkCommandBuffer* pCommandBuffers);
    [GetProcAddressAttribute("vkWaitForFences")]
public VkResult WaitForFences(VkDevice device, UInt32 fenceCount, VkFence* pFences, UInt32 waitAll, ulong timeout);
    [GetProcAddressAttribute("vkGetFenceStatus")]
public VkResult GetFenceStatus(VkDevice device, VkFence fence);
    [GetProcAddressAttribute("vkBeginCommandBuffer")]
public VkResult BeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo& pBeginInfo);
    [GetProcAddressAttribute("vkEndCommandBuffer")]
public VkResult EndCommandBuffer(VkCommandBuffer commandBuffer);
    [GetProcAddressAttribute("vkCreateSemaphore")]
public VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo& pCreateInfo, IntPtr pAllocator, VkSemaphore& pSemaphore);
    [GetProcAddressAttribute("vkDestroySemaphore")]
public void DestroySemaphore(VkDevice device, VkSemaphore semaphore, IntPtr pAllocator);
    [GetProcAddressAttribute("vkResetFences")]
public VkResult ResetFences(VkDevice device, UInt32 fenceCount, VkFence* pFences);
    [GetProcAddressAttribute("vkQueueSubmit")]
public VkResult QueueSubmit(VkQueue queue, UInt32 submitCount, VkSubmitInfo* pSubmits, VkFence fence);
    [GetProcAddressAttribute("vkCreateImage")]
public VkResult CreateImage(VkDevice device, VkImageCreateInfo& pCreateInfo, IntPtr pAllocator, VkImage& pImage);
    [GetProcAddressAttribute("vkDestroyImage")]
public void DestroyImage(VkDevice device, VkImage image, IntPtr pAllocator);
    [GetProcAddressAttribute("vkGetImageMemoryRequirements")]
public void GetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements& pMemoryRequirements);
    [GetProcAddressAttribute("vkAllocateMemory")]
public VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo& pAllocateInfo, IntPtr pAllocator, VkDeviceMemory& pMemory);
    [GetProcAddressAttribute("vkFreeMemory")]
public void FreeMemory(VkDevice device, VkDeviceMemory memory, IntPtr pAllocator);
    [GetProcAddressAttribute("vkBindImageMemory")]
public VkResult BindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, ulong memoryOffset);
    [GetProcAddressAttribute("vkCreateImageView")]
public VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo& pCreateInfo, IntPtr pAllocator, VkImageView& pView);
    [GetProcAddressAttribute("vkDestroyImageView")]
public void DestroyImageView(VkDevice device, VkImageView imageView, IntPtr pAllocator);
    [GetProcAddressAttribute("vkCmdPipelineBarrier")]
public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, UInt32 memoryBarrierCount, IntPtr pMemoryBarriers, UInt32 bufferMemoryBarrierCount, IntPtr pBufferMemoryBarriers, UInt32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers);
    [GetProcAddressAttribute("vkCreateSwapchainKHR")]
public VkResult CreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR& pCreateInfo, IntPtr pAllocator, VkSwapchainKHR& pSwapchain);
    [GetProcAddressAttribute("vkDestroySwapchainKHR")]
public void DestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, IntPtr pAllocator);
    [GetProcAddressAttribute("vkGetSwapchainImagesKHR")]
public VkResult GetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, UInt32& pSwapchainImageCount, VkImage* pSwapchainImages);
    [GetProcAddressAttribute("vkDeviceWaitIdle")]
public VkResult DeviceWaitIdle(VkDevice device);
    [GetProcAddressAttribute("vkQueueWaitIdle")]
public VkResult QueueWaitIdle(VkQueue queue);
    [GetProcAddressAttribute("vkAcquireNextImageKHR")]
public VkResult AcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, UInt32& pImageIndex);
    [GetProcAddressAttribute("vkCmdBlitImage")]
public void CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, UInt32 regionCount, VkImageBlit* pRegions, VkFilter filter);
    [GetProcAddressAttribute("vkQueuePresentKHR")]
public VkResult vkQueuePresentKHR(VkQueue queue, VkPresentInfoKHR& pPresentInfo);
    [GetProcAddressAttribute("vkImportSemaphoreFdKHR", "True")]
public VkResult ImportSemaphoreFdKHR(VkDevice device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);
    [GetProcAddressAttribute("vkImportSemaphoreWin32HandleKHR", "True")]
public VkResult ImportSemaphoreWin32HandleKHR(VkDevice device, VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo);
    public bool get_IsImportSemaphoreFdKHRAvailable();
    public bool get_IsImportSemaphoreWin32HandleKHRAvailable();
    [NullableContextAttribute("1")]
private void Initialize(Func`2<string, IntPtr> getProcAddress);
}
internal class Avalonia.Vulkan.UnmanagedInterop.VulkanGlobalApi : object {
    [NullableAttribute("1")]
private VkGetInstanceProcAddressDelegate _vkGetProcAddress;
    private method _addr_EnumerateInstanceLayerProperties;
    private method _addr_vkCreateInstance;
    private method _addr_vkEnumerateInstanceExtensionProperties;
    [NullableContextAttribute("1")]
public VulkanGlobalApi(VkGetInstanceProcAddressDelegate vkGetProcAddress);
    [NullableContextAttribute("1")]
public IntPtr GetProcAddress(VkInstance instance, string name);
    [GetProcAddressAttribute("vkEnumerateInstanceLayerProperties")]
public VkResult EnumerateInstanceLayerProperties(UInt32& pPropertyCount, VkLayerProperties* pProperties);
    [GetProcAddressAttribute("vkCreateInstance")]
public VkResult vkCreateInstance(VkInstanceCreateInfo& pCreateInfo, IntPtr pAllocator, VkInstance& pInstance);
    [GetProcAddressAttribute("vkEnumerateInstanceExtensionProperties")]
public VkResult vkEnumerateInstanceExtensionProperties(IntPtr pLayerName, UInt32* pPropertyCount, VkExtensionProperties* pProperties);
    [NullableContextAttribute("1")]
private void Initialize(Func`2<string, IntPtr> getProcAddress);
}
public class Avalonia.Vulkan.VkGetInstanceProcAddressDelegate : MulticastDelegate {
    public VkGetInstanceProcAddressDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IntPtr Invoke(IntPtr instance, string name);
    public virtual IAsyncResult BeginInvoke(IntPtr instance, string name, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.VulkanContext : object {
    [NullableAttribute("2")]
private IVulkanKhrSurfacePlatformSurfaceFactory _surfaceFactory;
    [NullableAttribute("2")]
private VulkanExternalObjectsFeature _externalObjectsFeature;
    [CompilerGeneratedAttribute]
private IVulkanDevice <Device>k__BackingField;
    [CompilerGeneratedAttribute]
private VulkanInstanceApi <InstanceApi>k__BackingField;
    [CompilerGeneratedAttribute]
private VulkanDeviceApi <DeviceApi>k__BackingField;
    public IVulkanDevice Device { get; }
    public IVulkanInstance Instance { get; }
    public bool IsLost { get; }
    public VkDevice DeviceHandle { get; }
    public VkPhysicalDevice PhysicalDeviceHandle { get; }
    public VkInstance InstanceHandle { get; }
    public VkQueue MainQueueHandle { get; }
    public UInt32 GraphicsQueueFamilyIndex { get; }
    public VulkanInstanceApi InstanceApi { get; }
    public VulkanDeviceApi DeviceApi { get; }
    public VulkanContext(IVulkanDevice device, Dictionary`2<Type, object> platformFeatures);
    [CompilerGeneratedAttribute]
public sealed virtual IVulkanDevice get_Device();
    public sealed virtual IVulkanInstance get_Instance();
    public sealed virtual void Dispose();
    public sealed virtual object TryGetFeature(Type featureType);
    public sealed virtual bool get_IsLost();
    public sealed virtual IDisposable EnsureCurrent();
    public sealed virtual VkDevice get_DeviceHandle();
    public sealed virtual VkPhysicalDevice get_PhysicalDeviceHandle();
    public sealed virtual VkInstance get_InstanceHandle();
    public sealed virtual VkQueue get_MainQueueHandle();
    public sealed virtual UInt32 get_GraphicsQueueFamilyIndex();
    [CompilerGeneratedAttribute]
public sealed virtual VulkanInstanceApi get_InstanceApi();
    [CompilerGeneratedAttribute]
public sealed virtual VulkanDeviceApi get_DeviceApi();
    public sealed virtual IVulkanRenderTarget CreateRenderTarget(IEnumerable`1<object> surfaces);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <.ctor>b__7_0(string ext);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <.ctor>b__7_1(string ext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Vulkan.VulkanDeviceCreationOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <DeviceExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferDiscreteGpu>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireComputeBit>k__BackingField;
    public IList`1<string> DeviceExtensions { get; public set; }
    public bool PreferDiscreteGpu { get; public set; }
    public bool RequireComputeBit { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_DeviceExtensions();
    [CompilerGeneratedAttribute]
public void set_DeviceExtensions(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_PreferDiscreteGpu();
    [CompilerGeneratedAttribute]
public void set_PreferDiscreteGpu(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireComputeBit();
    [CompilerGeneratedAttribute]
public void set_RequireComputeBit(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Vulkan.VulkanException : Exception {
    public VulkanException(string message);
    public VulkanException(string funcName, int res);
    internal VulkanException(string funcName, VkResult res);
    public static void ThrowOnError(string funcName, int res);
}
[ExtensionAttribute]
internal static class Avalonia.Vulkan.VulkanExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ThrowOnError(VkResult res, string funcName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.VulkanExternalObjectsFeature : object {
    public static String[] RequiredInstanceExtensions;
    private static String[] s_requiredCommonDeviceExtensions;
    private static String[] s_requiredLinuxDeviceExtensions;
    private static String[] s_requiredWin32DeviceExtensions;
    public static String[] RequiredDeviceExtensions;
    private VulkanContext _context;
    private VulkanCommandBufferPool _pool;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SupportedImageHandleTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SupportedSemaphoreTypes>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Byte[] <DeviceUuid>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Byte[] <DeviceLuid>k__BackingField;
    public IReadOnlyList`1<string> SupportedImageHandleTypes { get; }
    public IReadOnlyList`1<string> SupportedSemaphoreTypes { get; }
    [NullableAttribute("2")]
public Byte[] DeviceUuid { get; }
    [NullableAttribute("2")]
public Byte[] DeviceLuid { get; }
    public VulkanExternalObjectsFeature(VulkanContext context);
    private static VulkanExternalObjectsFeature();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_SupportedImageHandleTypes();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_SupportedSemaphoreTypes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Byte[] get_DeviceUuid();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Byte[] get_DeviceLuid();
    public sealed virtual CompositionGpuImportedImageSynchronizationCapabilities GetSynchronizationCapabilities(string imageHandleType);
    public sealed virtual IVulkanExternalImage ImportImage(IPlatformHandle handle, PlatformGraphicsExternalImageProperties properties);
    public sealed virtual IVulkanExternalSemaphore ImportSemaphore(IPlatformHandle handle);
}
internal class Avalonia.Vulkan.VulkanFence : ValueType {
    [NullableAttribute("1")]
private IVulkanPlatformGraphicsContext _context;
    private VkFence _handle;
    public VkFence Handle { get; }
    public bool IsSignaled { get; }
    [NullableContextAttribute("1")]
public VulkanFence(IVulkanPlatformGraphicsContext context, VkFenceCreateFlags flags);
    public VkFence get_Handle();
    public sealed virtual void Dispose();
    public bool get_IsSignaled();
    public void Wait(ulong timeout);
}
internal static class Avalonia.Vulkan.VulkanHelpers : object {
    public static UInt32 QueueFamilyIgnored;
    [NullableContextAttribute("1")]
public static UInt32 MakeVersion(Version v);
    public static UInt32 MakeVersion(int major, int minor, int patch);
}
internal class Avalonia.Vulkan.VulkanImage : VulkanImageBase {
    [NullableContextAttribute("1")]
public VulkanImage(IVulkanPlatformGraphicsContext context, VulkanCommandBufferPool commandBufferPool, VkFormat format, PixelSize size, UInt32 mipLevels);
}
internal class Avalonia.Vulkan.VulkanImageBase : object {
    [NullableAttribute("1")]
private IVulkanPlatformGraphicsContext _context;
    private VkAccessFlags _currentAccessFlags;
    [CompilerGeneratedAttribute]
private VkImageUsageFlags <UsageFlags>k__BackingField;
    private VkImageView _imageView;
    private VkDeviceMemory _imageMemory;
    private VkImage _handle;
    [NullableAttribute("1")]
private VulkanCommandBufferPool _commandBufferPool;
    [CompilerGeneratedAttribute]
private VkFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private VkImageAspectFlags <AspectFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MipLevels>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private VkImageLayout <CurrentLayout>k__BackingField;
    public VkImageUsageFlags UsageFlags { get; }
    internal VkImage Handle { get; }
    internal VkFormat Format { get; }
    internal VkImageAspectFlags AspectFlags { get; private set; }
    public UInt32 MipLevels { get; private set; }
    public PixelSize Size { get; }
    public ulong MemorySize { get; private set; }
    public VkImageLayout CurrentLayout { get; protected set; }
    public VkDeviceMemory MemoryHandle { get; }
    public VkImageTiling Tiling { get; }
    public VulkanImageInfo ImageInfo { get; }
    [NullableContextAttribute("1")]
public VulkanImageBase(IVulkanPlatformGraphicsContext context, VulkanCommandBufferPool commandBufferPool, VkFormat format, PixelSize size, UInt32 mipLevels);
    [CompilerGeneratedAttribute]
public VkImageUsageFlags get_UsageFlags();
    internal VkImage get_Handle();
    [CompilerGeneratedAttribute]
internal VkFormat get_Format();
    [CompilerGeneratedAttribute]
internal VkImageAspectFlags get_AspectFlags();
    [CompilerGeneratedAttribute]
private void set_AspectFlags(VkImageAspectFlags value);
    [CompilerGeneratedAttribute]
public UInt32 get_MipLevels();
    [CompilerGeneratedAttribute]
private void set_MipLevels(UInt32 value);
    [CompilerGeneratedAttribute]
public PixelSize get_Size();
    [CompilerGeneratedAttribute]
public ulong get_MemorySize();
    [CompilerGeneratedAttribute]
private void set_MemorySize(ulong value);
    [CompilerGeneratedAttribute]
public VkImageLayout get_CurrentLayout();
    [CompilerGeneratedAttribute]
protected void set_CurrentLayout(VkImageLayout value);
    public VkDeviceMemory get_MemoryHandle();
    public VkImageTiling get_Tiling();
    public VulkanImageInfo get_ImageInfo();
    protected virtual VkDeviceMemory CreateMemory(VkImage image, ulong size, UInt32 memoryTypeBits);
    public void Initialize(Void* pNext);
    internal void TransitionLayout(VkImageLayout destinationLayout, VkAccessFlags destinationAccessFlags);
    public void TransitionLayout(UInt32 destinationLayout, UInt32 destinationAccessFlags);
    public sealed virtual void Dispose();
}
public class Avalonia.Vulkan.VulkanImageInfo : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelSize <PixelSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Layout>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Tiling>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <UsageFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LevelCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SampleCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MemoryHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ViewHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProtected>k__BackingField;
    public UInt32 Format { get; public set; }
    public PixelSize PixelSize { get; public set; }
    public ulong Handle { get; public set; }
    public UInt32 Layout { get; public set; }
    public UInt32 Tiling { get; public set; }
    public UInt32 UsageFlags { get; public set; }
    public UInt32 LevelCount { get; public set; }
    public UInt32 SampleCount { get; public set; }
    public ulong MemoryHandle { get; public set; }
    public ulong ViewHandle { get; public set; }
    public ulong MemorySize { get; public set; }
    public bool IsProtected { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public PixelSize get_PixelSize();
    [CompilerGeneratedAttribute]
public void set_PixelSize(PixelSize value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Tiling();
    [CompilerGeneratedAttribute]
public void set_Tiling(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_UsageFlags();
    [CompilerGeneratedAttribute]
public void set_UsageFlags(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_LevelCount();
    [CompilerGeneratedAttribute]
public void set_LevelCount(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_SampleCount();
    [CompilerGeneratedAttribute]
public void set_SampleCount(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_MemoryHandle();
    [CompilerGeneratedAttribute]
public void set_MemoryHandle(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_ViewHandle();
    [CompilerGeneratedAttribute]
public void set_ViewHandle(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_MemorySize();
    [CompilerGeneratedAttribute]
public void set_MemorySize(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsProtected();
    [CompilerGeneratedAttribute]
public void set_IsProtected(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(VulkanImageInfo left, VulkanImageInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(VulkanImageInfo left, VulkanImageInfo right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(VulkanImageInfo other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.VulkanInstance : object {
    private VkGetInstanceProcAddressDelegate _getProcAddress;
    private VulkanInstanceApi _api;
    [CompilerGeneratedAttribute]
private VkInstance <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <EnabledExtensions>k__BackingField;
    public VkInstance Handle { get; }
    private IntPtr Avalonia.Vulkan.IVulkanInstance.Handle { get; }
    public IEnumerable`1<string> EnabledExtensions { get; }
    public VulkanInstance(VkInstance handle, VkGetInstanceProcAddressDelegate getProcAddress, String[] enabledExtensions);
    internal static IVulkanInstance Create(VulkanInstanceCreationOptions options, VulkanPlatformSpecificOptions platformOptions);
    private static bool IsLayerAvailable(VulkanGlobalApi api, string layerName);
    private static HashSet`1<string> GetSupportedExtensions(VulkanGlobalApi api);
    [CompilerGeneratedAttribute]
public VkInstance get_Handle();
    private sealed virtual override IntPtr Avalonia.Vulkan.IVulkanInstance.get_Handle();
    public sealed virtual IntPtr GetInstanceProcAddress(IntPtr instance, string name);
    public sealed virtual IntPtr GetDeviceProcAddress(IntPtr device, string name);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_EnabledExtensions();
}
internal class Avalonia.Vulkan.VulkanInstanceApi : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IVulkanInstance <Instance>k__BackingField;
    private method _addr_CreateDebugUtilsMessengerEXT;
    private method _addr_EnumeratePhysicalDevices;
    private method _addr_GetPhysicalDeviceProperties;
    private method _addr_EnumerateDeviceExtensionProperties;
    private method _addr_GetPhysicalDeviceSurfaceSupportKHR;
    private method _addr_GetPhysicalDeviceQueueFamilyProperties;
    private method _addr_CreateDevice;
    private method _addr_DestroyDevice;
    private method _addr_GetDeviceQueue;
    private method _addr_GetDeviceProcAddr;
    private method _addr_DestroySurfaceKHR;
    private method _addr_GetPhysicalDeviceSurfaceFormatsKHR;
    private method _addr_GetPhysicalDeviceMemoryProperties;
    private method _addr_GetPhysicalDeviceSurfaceCapabilitiesKHR;
    private method _addr_GetPhysicalDeviceSurfacePresentModesKHR;
    private method _addr_GetPhysicalDeviceProperties2;
    [NullableAttribute("1")]
public IVulkanInstance Instance { get; }
    public bool IsCreateDebugUtilsMessengerEXTAvailable { get; }
    public bool IsGetPhysicalDeviceProperties2Available { get; }
    [NullableContextAttribute("1")]
public VulkanInstanceApi(IVulkanInstance instance);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IVulkanInstance get_Instance();
    [GetProcAddressAttribute("vkCreateDebugUtilsMessengerEXT", "True")]
public VkResult CreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT& pCreateInfo, IntPtr pAllocator, VkDebugUtilsMessengerEXT& pMessenger);
    [GetProcAddressAttribute("vkEnumeratePhysicalDevices")]
public VkResult EnumeratePhysicalDevices(VkInstance instance, UInt32& pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);
    [GetProcAddressAttribute("vkGetPhysicalDeviceProperties")]
public void GetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties& pProperties);
    [GetProcAddressAttribute("vkEnumerateDeviceExtensionProperties")]
public VkResult EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, Byte* pLayerName, UInt32& pPropertyCount, VkExtensionProperties* pProperties);
    [GetProcAddressAttribute("vkGetPhysicalDeviceSurfaceSupportKHR")]
public VkResult GetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, UInt32 queueFamilyIndex, VkSurfaceKHR surface, UInt32& pSupported);
    [GetProcAddressAttribute("vkGetPhysicalDeviceQueueFamilyProperties")]
public void GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, UInt32& pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);
    [GetProcAddressAttribute("vkCreateDevice")]
public VkResult CreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo& pCreateInfo, IntPtr pAllocator, VkDevice& pDevice);
    [GetProcAddressAttribute("vkDestroyDevice")]
public VkResult DestroyDevice(VkDevice device, IntPtr pAllocator);
    [GetProcAddressAttribute("vkGetDeviceQueue")]
public void GetDeviceQueue(VkDevice device, UInt32 queueFamilyIndex, UInt32 queueIndex, VkQueue& pQueue);
    [GetProcAddressAttribute("vkGetDeviceProcAddr")]
public IntPtr GetDeviceProcAddr(VkDevice device, IntPtr pName);
    [GetProcAddressAttribute("vkDestroySurfaceKHR")]
public void DestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, IntPtr pAllocator);
    [GetProcAddressAttribute("vkGetPhysicalDeviceSurfaceFormatsKHR")]
public VkResult GetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, UInt32& pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);
    [GetProcAddressAttribute("vkGetPhysicalDeviceMemoryProperties")]
public void GetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties& pMemoryProperties);
    [GetProcAddressAttribute("vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
public VkResult GetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR& pSurfaceCapabilities);
    [GetProcAddressAttribute("vkGetPhysicalDeviceSurfacePresentModesKHR")]
public VkResult GetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, UInt32& pPresentModeCount, VkPresentModeKHR* pPresentModes);
    [GetProcAddressAttribute("vkGetPhysicalDeviceProperties2", "True")]
public void GetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties);
    public bool get_IsCreateDebugUtilsMessengerEXTAvailable();
    public bool get_IsGetPhysicalDeviceProperties2Available();
    [NullableContextAttribute("1")]
private void Initialize(Func`2<string, IntPtr> getProcAddress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Vulkan.VulkanInstanceCreationOptions : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private VkGetInstanceProcAddressDelegate <CustomGetProcAddressDelegate>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <VulkanVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <InstanceExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <EnabledLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDebug>k__BackingField;
    [NullableAttribute("2")]
public VkGetInstanceProcAddressDelegate CustomGetProcAddressDelegate { get; public set; }
    [NullableAttribute("2")]
public string ApplicationName { get; public set; }
    public Version VulkanVersion { get; public set; }
    public IList`1<string> InstanceExtensions { get; public set; }
    public IList`1<string> EnabledLayers { get; public set; }
    public bool UseDebug { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public VkGetInstanceProcAddressDelegate get_CustomGetProcAddressDelegate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CustomGetProcAddressDelegate(VkGetInstanceProcAddressDelegate value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ApplicationName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public Version get_VulkanVersion();
    [CompilerGeneratedAttribute]
public void set_VulkanVersion(Version value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_InstanceExtensions();
    [CompilerGeneratedAttribute]
public void set_InstanceExtensions(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_EnabledLayers();
    [CompilerGeneratedAttribute]
public void set_EnabledLayers(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_UseDebug();
    [CompilerGeneratedAttribute]
public void set_UseDebug(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.VulkanKhrRenderTarget : object {
    private IVulkanPlatformGraphicsContext _context;
    private VulkanDisplay _display;
    [NullableAttribute("2")]
private VulkanImage _image;
    private IVulkanKhrSurfacePlatformSurface _platformSurface;
    [CompilerGeneratedAttribute]
private VkFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRgba>k__BackingField;
    public VkFormat Format { get; }
    public bool IsRgba { get; }
    public VulkanKhrRenderTarget(IVulkanKhrSurfacePlatformSurface surface, IVulkanPlatformGraphicsContext context);
    [CompilerGeneratedAttribute]
public VkFormat get_Format();
    [CompilerGeneratedAttribute]
public bool get_IsRgba();
    private void CreateImage();
    private void DestroyImage();
    public sealed virtual void Dispose();
    public sealed virtual IVulkanRenderSession BeginDraw();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Vulkan.VulkanOptions : object {
    [CompilerGeneratedAttribute]
private VulkanInstanceCreationOptions <VulkanInstanceCreationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private VulkanDeviceCreationOptions <VulkanDeviceCreationOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IVulkanDevice <CustomSharedDevice>k__BackingField;
    public VulkanInstanceCreationOptions VulkanInstanceCreationOptions { get; public set; }
    public VulkanDeviceCreationOptions VulkanDeviceCreationOptions { get; public set; }
    [NullableAttribute("2")]
public IVulkanDevice CustomSharedDevice { get; public set; }
    [CompilerGeneratedAttribute]
public VulkanInstanceCreationOptions get_VulkanInstanceCreationOptions();
    [CompilerGeneratedAttribute]
public void set_VulkanInstanceCreationOptions(VulkanInstanceCreationOptions value);
    [CompilerGeneratedAttribute]
public VulkanDeviceCreationOptions get_VulkanDeviceCreationOptions();
    [CompilerGeneratedAttribute]
public void set_VulkanDeviceCreationOptions(VulkanDeviceCreationOptions value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IVulkanDevice get_CustomSharedDevice();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CustomSharedDevice(IVulkanDevice value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Vulkan.VulkanPlatformGraphics : object {
    private IVulkanDeviceFactory _factory;
    [NullableAttribute("2")]
private IVulkanPlatformGraphicsContext _currentSharedContext;
    private VulkanPlatformSpecificOptions _platformOptions;
    public bool UsesSharedContext { get; }
    public VulkanPlatformGraphics(IVulkanDeviceFactory factory, VulkanPlatformSpecificOptions platformOptions);
    public sealed virtual IPlatformGraphicsContext CreateContext();
    public sealed virtual IPlatformGraphicsContext GetSharedContext();
    public sealed virtual bool get_UsesSharedContext();
    public static VulkanPlatformGraphics TryCreate(VulkanOptions options, VulkanPlatformSpecificOptions platformOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Vulkan.VulkanPlatformSpecificOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <RequiredInstanceExtensions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private VkGetInstanceProcAddressDelegate <GetProcAddressDelegate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IVulkanInstance, ulong> <DeviceCheckSurfaceFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, object> <PlatformFeatures>k__BackingField;
    public IList`1<string> RequiredInstanceExtensions { get; public set; }
    [NullableAttribute("2")]
public VkGetInstanceProcAddressDelegate GetProcAddressDelegate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IVulkanInstance, ulong> DeviceCheckSurfaceFactory { get; public set; }
    public Dictionary`2<Type, object> PlatformFeatures { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_RequiredInstanceExtensions();
    [CompilerGeneratedAttribute]
public void set_RequiredInstanceExtensions(IList`1<string> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public VkGetInstanceProcAddressDelegate get_GetProcAddressDelegate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_GetProcAddressDelegate(VkGetInstanceProcAddressDelegate value);
    [CompilerGeneratedAttribute]
public Func`2<IVulkanInstance, ulong> get_DeviceCheckSurfaceFactory();
    [CompilerGeneratedAttribute]
public void set_DeviceCheckSurfaceFactory(Func`2<IVulkanInstance, ulong> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, object> get_PlatformFeatures();
    [CompilerGeneratedAttribute]
public void set_PlatformFeatures(Dictionary`2<Type, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.VulkanSemaphore : object {
    private IVulkanPlatformGraphicsContext _context;
    private VkSemaphore _handle;
    public VkSemaphore Handle { get; }
    public VulkanSemaphore(IVulkanPlatformGraphicsContext context);
    public VulkanSemaphore(IVulkanPlatformGraphicsContext context, VkSemaphore handle);
    public VkSemaphore get_Handle();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Vulkan.VulkanSemaphorePair : object {
    [CompilerGeneratedAttribute]
private VulkanSemaphore <ImageAvailableSemaphore>k__BackingField;
    [CompilerGeneratedAttribute]
private VulkanSemaphore <RenderFinishedSemaphore>k__BackingField;
    internal VulkanSemaphore ImageAvailableSemaphore { get; }
    internal VulkanSemaphore RenderFinishedSemaphore { get; }
    public VulkanSemaphorePair(IVulkanPlatformGraphicsContext context);
    [CompilerGeneratedAttribute]
internal VulkanSemaphore get_ImageAvailableSemaphore();
    [CompilerGeneratedAttribute]
internal VulkanSemaphore get_RenderFinishedSemaphore();
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
