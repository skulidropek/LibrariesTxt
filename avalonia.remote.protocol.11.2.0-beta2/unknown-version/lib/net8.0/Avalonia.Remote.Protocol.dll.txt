[AttributeUsageAttribute("4")]
public class Avalonia.Remote.Protocol.AvaloniaRemoteMessageGuidAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    public Guid Guid { get; }
    public AvaloniaRemoteMessageGuidAttribute(string guid);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
internal class Avalonia.Remote.Protocol.BsonStreamTransportConnection : object {
    private IMessageTypeResolver _resolver;
    private Stream _inputStream;
    private Stream _outputStream;
    private Action _disposeCallback;
    private CancellationToken _cancel;
    private CancellationTokenSource _cancelSource;
    private MemoryStream _outputBlock;
    private object _lock;
    private bool _writeOperationPending;
    private bool _readingAlreadyStarted;
    private bool _writerIsBroken;
    private static Byte[] ZeroLength;
    [CompilerGeneratedAttribute]
private Action`2<IAvaloniaRemoteTransportConnection, object> OnMessage;
    [CompilerGeneratedAttribute]
private Action`2<IAvaloniaRemoteTransportConnection, Exception> OnException;
    public BsonStreamTransportConnection(IMessageTypeResolver resolver, Stream inputStream, Stream outputStream, Action disposeCallback);
    private static BsonStreamTransportConnection();
    public sealed virtual void Dispose();
    public void StartReading();
    [AsyncStateMachineAttribute("Avalonia.Remote.Protocol.BsonStreamTransportConnection/<ReadExact>d__15")]
private Task ReadExact(Byte[] buffer);
    [AsyncStateMachineAttribute("Avalonia.Remote.Protocol.BsonStreamTransportConnection/<Reader>d__16")]
private Task Reader();
    [AsyncStateMachineAttribute("Avalonia.Remote.Protocol.BsonStreamTransportConnection/<Send>d__17")]
public sealed virtual Task Send(object data);
    private void FireException(Exception e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    public sealed virtual void Start();
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
public class Avalonia.Remote.Protocol.BsonTcpTransport : TcpTransportBase {
    public BsonTcpTransport(IMessageTypeResolver resolver);
    protected virtual IAvaloniaRemoteTransportConnection CreateTransport(IMessageTypeResolver resolver, Stream stream, Action dispose);
}
public class Avalonia.Remote.Protocol.DefaultMessageTypeResolver : object {
    private Dictionary`2<Guid, Type> _guidsToTypes;
    private Dictionary`2<Type, Guid> _typesToGuids;
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
public DefaultMessageTypeResolver(Assembly[] assemblies);
    public sealed virtual Type GetByGuid(Guid id);
    public sealed virtual Guid GetGuid(Type type);
}
public class Avalonia.Remote.Protocol.Designer.ExceptionDetails : object {
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LinePosition>k__BackingField;
    public string ExceptionType { get; public set; }
    public string Message { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    public Nullable`1<int> LinePosition { get; public set; }
    public ExceptionDetails(Exception e);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
public void set_ExceptionType(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LinePosition();
    [CompilerGeneratedAttribute]
public void set_LinePosition(Nullable`1<int> value);
}
[AvaloniaRemoteMessageGuidAttribute("854887CF-2694-4EB6-B499-7461B6FB96C7")]
public class Avalonia.Remote.Protocol.Designer.StartDesignerSessionMessage : object {
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    public string SessionId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
}
[AvaloniaRemoteMessageGuidAttribute("9AEC9A2E-6315-4066-B4BA-E9A9EFD0F8CC")]
public class Avalonia.Remote.Protocol.Designer.UpdateXamlMessage : object {
    [CompilerGeneratedAttribute]
private string <Xaml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XamlFileProjectPath>k__BackingField;
    public string Xaml { get; public set; }
    public string AssemblyPath { get; public set; }
    public string XamlFileProjectPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Xaml();
    [CompilerGeneratedAttribute]
public void set_Xaml(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyPath();
    [CompilerGeneratedAttribute]
public void set_AssemblyPath(string value);
    [CompilerGeneratedAttribute]
public string get_XamlFileProjectPath();
    [CompilerGeneratedAttribute]
public void set_XamlFileProjectPath(string value);
}
[AvaloniaRemoteMessageGuidAttribute("B7A70093-0C5D-47FD-9261-22086D43A2E2")]
public class Avalonia.Remote.Protocol.Designer.UpdateXamlResultMessage : object {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionDetails <Exception>k__BackingField;
    public string Error { get; public set; }
    public string Handle { get; public set; }
    public ExceptionDetails Exception { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(string value);
    [CompilerGeneratedAttribute]
public ExceptionDetails get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(ExceptionDetails value);
}
internal class Avalonia.Remote.Protocol.EventStash`1 : object {
    private IAvaloniaRemoteTransportConnection _transport;
    private Action`1<Exception> _exceptionHandler;
    private List`1<T> _stash;
    private Action`2<IAvaloniaRemoteTransportConnection, T> _delegate;
    public EventStash`1(IAvaloniaRemoteTransportConnection transport, Action`1<Exception> exceptionHandler);
    public void Add(Action`2<IAvaloniaRemoteTransportConnection, T> handler);
    public void Remove(Action`2<IAvaloniaRemoteTransportConnection, T> handler);
    public void Fire(IAvaloniaRemoteTransportConnection transport, T ev);
}
[AvaloniaRemoteMessageGuidAttribute("53778004-78fa-4381-8ec3-176a6f2328b6")]
public class Avalonia.Remote.Protocol.HtmlTransportStartedMessage : object {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Uri { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
}
public interface Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection {
    public abstract virtual Task Send(object data);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    public abstract virtual void Start();
}
public interface Avalonia.Remote.Protocol.IMessageTypeResolver {
    public abstract virtual Type GetByGuid(Guid id);
    public abstract virtual Guid GetGuid(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Avalonia.Remote.Protocol.Input.InputEventMessageBase : object {
    [CompilerGeneratedAttribute]
private InputModifiers[] <Modifiers>k__BackingField;
    public InputModifiers[] Modifiers { get; public set; }
    [CompilerGeneratedAttribute]
public InputModifiers[] get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(InputModifiers[] value);
}
[FlagsAttribute]
public enum Avalonia.Remote.Protocol.Input.InputModifiers : Enum {
    public int value__;
    public static InputModifiers Alt;
    public static InputModifiers Control;
    public static InputModifiers Shift;
    public static InputModifiers Windows;
    public static InputModifiers LeftMouseButton;
    public static InputModifiers RightMouseButton;
    public static InputModifiers MiddleMouseButton;
}
public enum Avalonia.Remote.Protocol.Input.Key : Enum {
    public int value__;
    public static Key None;
    public static Key Cancel;
    public static Key Back;
    public static Key Tab;
    public static Key LineFeed;
    public static Key Clear;
    public static Key Return;
    public static Key Enter;
    public static Key Pause;
    public static Key CapsLock;
    public static Key Capital;
    public static Key HangulMode;
    public static Key KanaMode;
    public static Key JunjaMode;
    public static Key FinalMode;
    public static Key KanjiMode;
    public static Key HanjaMode;
    public static Key Escape;
    public static Key ImeConvert;
    public static Key ImeNonConvert;
    public static Key ImeAccept;
    public static Key ImeModeChange;
    public static Key Space;
    public static Key PageUp;
    public static Key Prior;
    public static Key PageDown;
    public static Key Next;
    public static Key End;
    public static Key Home;
    public static Key Left;
    public static Key Up;
    public static Key Right;
    public static Key Down;
    public static Key Select;
    public static Key Print;
    public static Key Execute;
    public static Key Snapshot;
    public static Key PrintScreen;
    public static Key Insert;
    public static Key Delete;
    public static Key Help;
    public static Key D0;
    public static Key D1;
    public static Key D2;
    public static Key D3;
    public static Key D4;
    public static Key D5;
    public static Key D6;
    public static Key D7;
    public static Key D8;
    public static Key D9;
    public static Key A;
    public static Key B;
    public static Key C;
    public static Key D;
    public static Key E;
    public static Key F;
    public static Key G;
    public static Key H;
    public static Key I;
    public static Key J;
    public static Key K;
    public static Key L;
    public static Key M;
    public static Key N;
    public static Key O;
    public static Key P;
    public static Key Q;
    public static Key R;
    public static Key S;
    public static Key T;
    public static Key U;
    public static Key V;
    public static Key W;
    public static Key X;
    public static Key Y;
    public static Key Z;
    public static Key LWin;
    public static Key RWin;
    public static Key Apps;
    public static Key Sleep;
    public static Key NumPad0;
    public static Key NumPad1;
    public static Key NumPad2;
    public static Key NumPad3;
    public static Key NumPad4;
    public static Key NumPad5;
    public static Key NumPad6;
    public static Key NumPad7;
    public static Key NumPad8;
    public static Key NumPad9;
    public static Key Multiply;
    public static Key Add;
    public static Key Separator;
    public static Key Subtract;
    public static Key Decimal;
    public static Key Divide;
    public static Key F1;
    public static Key F2;
    public static Key F3;
    public static Key F4;
    public static Key F5;
    public static Key F6;
    public static Key F7;
    public static Key F8;
    public static Key F9;
    public static Key F10;
    public static Key F11;
    public static Key F12;
    public static Key F13;
    public static Key F14;
    public static Key F15;
    public static Key F16;
    public static Key F17;
    public static Key F18;
    public static Key F19;
    public static Key F20;
    public static Key F21;
    public static Key F22;
    public static Key F23;
    public static Key F24;
    public static Key NumLock;
    public static Key Scroll;
    public static Key LeftShift;
    public static Key RightShift;
    public static Key LeftCtrl;
    public static Key RightCtrl;
    public static Key LeftAlt;
    public static Key RightAlt;
    public static Key BrowserBack;
    public static Key BrowserForward;
    public static Key BrowserRefresh;
    public static Key BrowserStop;
    public static Key BrowserSearch;
    public static Key BrowserFavorites;
    public static Key BrowserHome;
    public static Key VolumeMute;
    public static Key VolumeDown;
    public static Key VolumeUp;
    public static Key MediaNextTrack;
    public static Key MediaPreviousTrack;
    public static Key MediaStop;
    public static Key MediaPlayPause;
    public static Key LaunchMail;
    public static Key SelectMedia;
    public static Key LaunchApplication1;
    public static Key LaunchApplication2;
    public static Key OemSemicolon;
    public static Key Oem1;
    public static Key OemPlus;
    public static Key OemComma;
    public static Key OemMinus;
    public static Key OemPeriod;
    public static Key OemQuestion;
    public static Key Oem2;
    public static Key OemTilde;
    public static Key Oem3;
    public static Key AbntC1;
    public static Key AbntC2;
    public static Key OemOpenBrackets;
    public static Key Oem4;
    public static Key OemPipe;
    public static Key Oem5;
    public static Key OemCloseBrackets;
    public static Key Oem6;
    public static Key OemQuotes;
    public static Key Oem7;
    public static Key Oem8;
    public static Key OemBackslash;
    public static Key Oem102;
    public static Key ImeProcessed;
    public static Key System;
    public static Key OemAttn;
    public static Key DbeAlphanumeric;
    public static Key OemFinish;
    public static Key DbeKatakana;
    public static Key DbeHiragana;
    public static Key OemCopy;
    public static Key DbeSbcsChar;
    public static Key OemAuto;
    public static Key DbeDbcsChar;
    public static Key OemEnlw;
    public static Key OemBackTab;
    public static Key DbeRoman;
    public static Key DbeNoRoman;
    public static Key Attn;
    public static Key CrSel;
    public static Key DbeEnterWordRegisterMode;
    public static Key ExSel;
    public static Key DbeEnterImeConfigureMode;
    public static Key EraseEof;
    public static Key DbeFlushString;
    public static Key Play;
    public static Key DbeCodeInput;
    public static Key DbeNoCodeInput;
    public static Key Zoom;
    public static Key NoName;
    public static Key DbeDetermineString;
    public static Key DbeEnterDialogConversionMode;
    public static Key Pa1;
    public static Key OemClear;
    public static Key DeadCharProcessed;
    public static Key FnLeftArrow;
    public static Key FnRightArrow;
    public static Key FnUpArrow;
    public static Key FnDownArrow;
    public static Key MediaHome;
    public static Key MediaChannelList;
    public static Key MediaChannelRaise;
    public static Key MediaChannelLower;
    public static Key MediaRecord;
    public static Key MediaRed;
    public static Key MediaGreen;
    public static Key MediaYellow;
    public static Key MediaBlue;
    public static Key MediaMenu;
    public static Key MediaMore;
    public static Key MediaOption;
    public static Key MediaInfo;
    public static Key MediaSearch;
    public static Key MediaSubtitle;
    public static Key MediaTvGuide;
    public static Key MediaPreviousChannel;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AvaloniaRemoteMessageGuidAttribute("1C3B691E-3D54-4237-BFB0-9FEA83BC1DB8")]
public class Avalonia.Remote.Protocol.Input.KeyEventMessage : InputEventMessageBase {
    [CompilerGeneratedAttribute]
private bool <IsDown>k__BackingField;
    [CompilerGeneratedAttribute]
private Key <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private PhysicalKey <PhysicalKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeySymbol>k__BackingField;
    public bool IsDown { get; public set; }
    public Key Key { get; public set; }
    public PhysicalKey PhysicalKey { get; public set; }
    public string KeySymbol { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDown();
    [CompilerGeneratedAttribute]
public void set_IsDown(bool value);
    [CompilerGeneratedAttribute]
public Key get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Key value);
    [CompilerGeneratedAttribute]
public PhysicalKey get_PhysicalKey();
    [CompilerGeneratedAttribute]
public void set_PhysicalKey(PhysicalKey value);
    [CompilerGeneratedAttribute]
public string get_KeySymbol();
    [CompilerGeneratedAttribute]
public void set_KeySymbol(string value);
}
public enum Avalonia.Remote.Protocol.Input.MouseButton : Enum {
    public int value__;
    public static MouseButton None;
    public static MouseButton Left;
    public static MouseButton Right;
    public static MouseButton Middle;
}
public enum Avalonia.Remote.Protocol.Input.PhysicalKey : Enum {
    public int value__;
    public static PhysicalKey None;
    public static PhysicalKey Backquote;
    public static PhysicalKey Backslash;
    public static PhysicalKey BracketLeft;
    public static PhysicalKey BracketRight;
    public static PhysicalKey Comma;
    public static PhysicalKey Digit0;
    public static PhysicalKey Digit1;
    public static PhysicalKey Digit2;
    public static PhysicalKey Digit3;
    public static PhysicalKey Digit4;
    public static PhysicalKey Digit5;
    public static PhysicalKey Digit6;
    public static PhysicalKey Digit7;
    public static PhysicalKey Digit8;
    public static PhysicalKey Digit9;
    public static PhysicalKey Equal;
    public static PhysicalKey IntlBackslash;
    public static PhysicalKey IntlRo;
    public static PhysicalKey IntlYen;
    public static PhysicalKey A;
    public static PhysicalKey B;
    public static PhysicalKey C;
    public static PhysicalKey D;
    public static PhysicalKey E;
    public static PhysicalKey F;
    public static PhysicalKey G;
    public static PhysicalKey H;
    public static PhysicalKey I;
    public static PhysicalKey J;
    public static PhysicalKey K;
    public static PhysicalKey L;
    public static PhysicalKey M;
    public static PhysicalKey N;
    public static PhysicalKey O;
    public static PhysicalKey P;
    public static PhysicalKey Q;
    public static PhysicalKey R;
    public static PhysicalKey S;
    public static PhysicalKey T;
    public static PhysicalKey U;
    public static PhysicalKey V;
    public static PhysicalKey W;
    public static PhysicalKey X;
    public static PhysicalKey Y;
    public static PhysicalKey Z;
    public static PhysicalKey Minus;
    public static PhysicalKey Period;
    public static PhysicalKey Quote;
    public static PhysicalKey Semicolon;
    public static PhysicalKey Slash;
    public static PhysicalKey AltLeft;
    public static PhysicalKey AltRight;
    public static PhysicalKey Backspace;
    public static PhysicalKey CapsLock;
    public static PhysicalKey ContextMenu;
    public static PhysicalKey ControlLeft;
    public static PhysicalKey ControlRight;
    public static PhysicalKey Enter;
    public static PhysicalKey MetaLeft;
    public static PhysicalKey MetaRight;
    public static PhysicalKey ShiftLeft;
    public static PhysicalKey ShiftRight;
    public static PhysicalKey Space;
    public static PhysicalKey Tab;
    public static PhysicalKey Convert;
    public static PhysicalKey KanaMode;
    public static PhysicalKey Lang1;
    public static PhysicalKey Lang2;
    public static PhysicalKey Lang3;
    public static PhysicalKey Lang4;
    public static PhysicalKey Lang5;
    public static PhysicalKey NonConvert;
    public static PhysicalKey Delete;
    public static PhysicalKey End;
    public static PhysicalKey Help;
    public static PhysicalKey Home;
    public static PhysicalKey Insert;
    public static PhysicalKey PageDown;
    public static PhysicalKey PageUp;
    public static PhysicalKey ArrowDown;
    public static PhysicalKey ArrowLeft;
    public static PhysicalKey ArrowRight;
    public static PhysicalKey ArrowUp;
    public static PhysicalKey NumLock;
    public static PhysicalKey NumPad0;
    public static PhysicalKey NumPad1;
    public static PhysicalKey NumPad2;
    public static PhysicalKey NumPad3;
    public static PhysicalKey NumPad4;
    public static PhysicalKey NumPad5;
    public static PhysicalKey NumPad6;
    public static PhysicalKey NumPad7;
    public static PhysicalKey NumPad8;
    public static PhysicalKey NumPad9;
    public static PhysicalKey NumPadAdd;
    public static PhysicalKey NumPadClear;
    public static PhysicalKey NumPadComma;
    public static PhysicalKey NumPadDecimal;
    public static PhysicalKey NumPadDivide;
    public static PhysicalKey NumPadEnter;
    public static PhysicalKey NumPadEqual;
    public static PhysicalKey NumPadMultiply;
    public static PhysicalKey NumPadParenLeft;
    public static PhysicalKey NumPadParenRight;
    public static PhysicalKey NumPadSubtract;
    public static PhysicalKey Escape;
    public static PhysicalKey F1;
    public static PhysicalKey F2;
    public static PhysicalKey F3;
    public static PhysicalKey F4;
    public static PhysicalKey F5;
    public static PhysicalKey F6;
    public static PhysicalKey F7;
    public static PhysicalKey F8;
    public static PhysicalKey F9;
    public static PhysicalKey F10;
    public static PhysicalKey F11;
    public static PhysicalKey F12;
    public static PhysicalKey F13;
    public static PhysicalKey F14;
    public static PhysicalKey F15;
    public static PhysicalKey F16;
    public static PhysicalKey F17;
    public static PhysicalKey F18;
    public static PhysicalKey F19;
    public static PhysicalKey F20;
    public static PhysicalKey F21;
    public static PhysicalKey F22;
    public static PhysicalKey F23;
    public static PhysicalKey F24;
    public static PhysicalKey PrintScreen;
    public static PhysicalKey ScrollLock;
    public static PhysicalKey Pause;
    public static PhysicalKey BrowserBack;
    public static PhysicalKey BrowserFavorites;
    public static PhysicalKey BrowserForward;
    public static PhysicalKey BrowserHome;
    public static PhysicalKey BrowserRefresh;
    public static PhysicalKey BrowserSearch;
    public static PhysicalKey BrowserStop;
    public static PhysicalKey Eject;
    public static PhysicalKey LaunchApp1;
    public static PhysicalKey LaunchApp2;
    public static PhysicalKey LaunchMail;
    public static PhysicalKey MediaPlayPause;
    public static PhysicalKey MediaSelect;
    public static PhysicalKey MediaStop;
    public static PhysicalKey MediaTrackNext;
    public static PhysicalKey MediaTrackPrevious;
    public static PhysicalKey Power;
    public static PhysicalKey Sleep;
    public static PhysicalKey AudioVolumeDown;
    public static PhysicalKey AudioVolumeMute;
    public static PhysicalKey AudioVolumeUp;
    public static PhysicalKey WakeUp;
    public static PhysicalKey Again;
    public static PhysicalKey Copy;
    public static PhysicalKey Cut;
    public static PhysicalKey Find;
    public static PhysicalKey Open;
    public static PhysicalKey Paste;
    public static PhysicalKey Props;
    public static PhysicalKey Select;
    public static PhysicalKey Undo;
}
public abstract class Avalonia.Remote.Protocol.Input.PointerEventMessageBase : InputEventMessageBase {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
}
[AvaloniaRemoteMessageGuidAttribute("6228F0B9-99F2-4F62-A621-414DA2881648")]
public class Avalonia.Remote.Protocol.Input.PointerMovedEventMessage : PointerEventMessageBase {
}
[AvaloniaRemoteMessageGuidAttribute("7E9E2818-F93F-411A-800E-6B1AEB11DA46")]
public class Avalonia.Remote.Protocol.Input.PointerPressedEventMessage : PointerEventMessageBase {
    [CompilerGeneratedAttribute]
private MouseButton <Button>k__BackingField;
    public MouseButton Button { get; public set; }
    [CompilerGeneratedAttribute]
public MouseButton get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(MouseButton value);
}
[AvaloniaRemoteMessageGuidAttribute("4ADC84EE-E7C8-4BCF-986C-DE3A2F78EDE4")]
public class Avalonia.Remote.Protocol.Input.PointerReleasedEventMessage : PointerEventMessageBase {
    [CompilerGeneratedAttribute]
private MouseButton <Button>k__BackingField;
    public MouseButton Button { get; public set; }
    [CompilerGeneratedAttribute]
public MouseButton get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(MouseButton value);
}
[AvaloniaRemoteMessageGuidAttribute("79301A05-F02D-4B90-BB39-472563B504AE")]
public class Avalonia.Remote.Protocol.Input.ScrollEventMessage : PointerEventMessageBase {
    [CompilerGeneratedAttribute]
private double <DeltaX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeltaY>k__BackingField;
    public double DeltaX { get; public set; }
    public double DeltaY { get; public set; }
    [CompilerGeneratedAttribute]
public double get_DeltaX();
    [CompilerGeneratedAttribute]
public void set_DeltaX(double value);
    [CompilerGeneratedAttribute]
public double get_DeltaY();
    [CompilerGeneratedAttribute]
public void set_DeltaY(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AvaloniaRemoteMessageGuidAttribute("C174102E-7405-4594-916F-B10B8248A17D")]
public class Avalonia.Remote.Protocol.Input.TextInputEventMessage : InputEventMessageBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public abstract class Avalonia.Remote.Protocol.TcpTransportBase : object {
    private IMessageTypeResolver _resolver;
    public TcpTransportBase(IMessageTypeResolver resolver);
    protected abstract virtual IAvaloniaRemoteTransportConnection CreateTransport(IMessageTypeResolver resolver, Stream stream, Action disposeCallback);
    public IDisposable Listen(IPAddress address, int port, Action`1<IAvaloniaRemoteTransportConnection> cb);
    [AsyncStateMachineAttribute("Avalonia.Remote.Protocol.TcpTransportBase/<Connect>d__5")]
public Task`1<IAvaloniaRemoteTransportConnection> Connect(IPAddress address, int port);
}
public class Avalonia.Remote.Protocol.TransportConnectionWrapper : object {
    private IAvaloniaRemoteTransportConnection _conn;
    private EventStash`1<object> _onMessage;
    private EventStash`1<Exception> _onException;
    private Queue`1<SendOperation> _sendQueue;
    private object _lock;
    private TaskCompletionSource`1<int> _signal;
    private bool _workerIsAlive;
    public TransportConnectionWrapper(IAvaloniaRemoteTransportConnection conn);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Avalonia.Remote.Protocol.TransportConnectionWrapper/<Worker>d__10")]
private void Worker();
    public sealed virtual Task Send(object data);
    public sealed virtual void add_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    public sealed virtual void remove_OnMessage(Action`2<IAvaloniaRemoteTransportConnection, object> value);
    public sealed virtual void add_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    public sealed virtual void remove_OnException(Action`2<IAvaloniaRemoteTransportConnection, Exception> value);
    public sealed virtual void Start();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(Exception e);
}
[AvaloniaRemoteMessageGuidAttribute("7A3c25d3-3652-438D-8EF1-86E942CC96C0")]
public class Avalonia.Remote.Protocol.Viewport.ClientRenderInfoMessage : object {
    [CompilerGeneratedAttribute]
private double <DpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiY>k__BackingField;
    public double DpiX { get; public set; }
    public double DpiY { get; public set; }
    [CompilerGeneratedAttribute]
public double get_DpiX();
    [CompilerGeneratedAttribute]
public void set_DpiX(double value);
    [CompilerGeneratedAttribute]
public double get_DpiY();
    [CompilerGeneratedAttribute]
public void set_DpiY(double value);
}
[AvaloniaRemoteMessageGuidAttribute("63481025-7016-43FE-BADC-F2FD0F88609E")]
public class Avalonia.Remote.Protocol.Viewport.ClientSupportedPixelFormatsMessage : object {
    [CompilerGeneratedAttribute]
private PixelFormat[] <Formats>k__BackingField;
    public PixelFormat[] Formats { get; public set; }
    [CompilerGeneratedAttribute]
public PixelFormat[] get_Formats();
    [CompilerGeneratedAttribute]
public void set_Formats(PixelFormat[] value);
}
[AvaloniaRemoteMessageGuidAttribute("BD7A8DE6-3DB8-4A13-8583-D6D4AB189A31")]
public class Avalonia.Remote.Protocol.Viewport.ClientViewportAllocatedMessage : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiY>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double DpiX { get; public set; }
    public double DpiY { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public double get_DpiX();
    [CompilerGeneratedAttribute]
public void set_DpiX(double value);
    [CompilerGeneratedAttribute]
public double get_DpiY();
    [CompilerGeneratedAttribute]
public void set_DpiY(double value);
}
[AvaloniaRemoteMessageGuidAttribute("F58313EE-FE69-4536-819D-F52EDF201A0E")]
public class Avalonia.Remote.Protocol.Viewport.FrameMessage : object {
    [CompilerGeneratedAttribute]
private long <SequenceId>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Stride>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiY>k__BackingField;
    public long SequenceId { get; public set; }
    public PixelFormat Format { get; public set; }
    public Byte[] Data { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public int Stride { get; public set; }
    public double DpiX { get; public set; }
    public double DpiY { get; public set; }
    [CompilerGeneratedAttribute]
public long get_SequenceId();
    [CompilerGeneratedAttribute]
public void set_SequenceId(long value);
    [CompilerGeneratedAttribute]
public PixelFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(PixelFormat value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_Stride();
    [CompilerGeneratedAttribute]
public void set_Stride(int value);
    [CompilerGeneratedAttribute]
public double get_DpiX();
    [CompilerGeneratedAttribute]
public void set_DpiX(double value);
    [CompilerGeneratedAttribute]
public double get_DpiY();
    [CompilerGeneratedAttribute]
public void set_DpiY(double value);
}
[AvaloniaRemoteMessageGuidAttribute("68014F8A-289D-4851-8D34-5367EDA7F827")]
public class Avalonia.Remote.Protocol.Viewport.FrameReceivedMessage : object {
    [CompilerGeneratedAttribute]
private long <SequenceId>k__BackingField;
    public long SequenceId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_SequenceId();
    [CompilerGeneratedAttribute]
public void set_SequenceId(long value);
}
[AvaloniaRemoteMessageGuidAttribute("6E3C5310-E2B1-4C3D-8688-01183AA48C5B")]
public class Avalonia.Remote.Protocol.Viewport.MeasureViewportMessage : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
}
public enum Avalonia.Remote.Protocol.Viewport.PixelFormat : Enum {
    public int value__;
    public static PixelFormat Rgb565;
    public static PixelFormat Rgba8888;
    public static PixelFormat Bgra8888;
    public static PixelFormat MaxValue;
}
[AvaloniaRemoteMessageGuidAttribute("9B47B3D8-61DF-4C38-ACD4-8C1BB72554AC")]
public class Avalonia.Remote.Protocol.Viewport.RequestViewportResizeMessage : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
internal class Metsys.Bson.ArrayWrapper`1 : BaseWrapper {
    private List`1<T> _list;
    public object Collection { get; }
    public virtual void Add(object value);
    protected virtual object CreateContainer(Type type, Type itemType);
    protected virtual void SetContainer(object container);
    public virtual object get_Collection();
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
internal abstract class Metsys.Bson.BaseWrapper : object {
    public object Collection { get; }
    public static BaseWrapper Create(Type type, Type itemType, object existingContainer);
    private static BaseWrapper CreateWrapperFromType(Type type, Type itemType);
    public abstract virtual void Add(object value);
    public abstract virtual object get_Collection();
    protected abstract virtual object CreateContainer(Type type, Type itemType);
    protected abstract virtual void SetContainer(object container);
}
internal class Metsys.Bson.BsonException : Exception {
    public BsonException(string message);
    public BsonException(string message, Exception innerException);
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
internal class Metsys.Bson.CollectionWrapper`1 : BaseWrapper {
    private ICollection`1<T> _list;
    public object Collection { get; }
    public virtual object get_Collection();
    public virtual void Add(object value);
    protected virtual object CreateContainer(Type type, Type itemType);
    protected virtual void SetContainer(object container);
}
internal class Metsys.Bson.Configuration.BsonConfiguration : object {
    private IDictionary`2<Type, IDictionary`2<string, string>> _aliasMap;
    private IDictionary`2<Type, HashSet`1<string>> _ignored;
    private IDictionary`2<Type, HashSet`1<string>> _ignoredIfNull;
    private static BsonConfiguration _instance;
    internal static BsonConfiguration Instance { get; }
    internal static BsonConfiguration get_Instance();
    public static void ForType(Action`1<ITypeConfiguration`1<T>> action);
    internal void AddMap(string property, string alias);
    internal string AliasFor(Type type, string property);
    public void AddIgnore(string name);
    public bool IsIgnored(Type type, string name);
    public void AddIgnoreIfNull(string name);
    public bool IsIgnoredIfNull(Type type, string name);
}
[ExtensionAttribute]
public static class Metsys.Bson.Configuration.ExpressionHelper : object {
    [ExtensionAttribute]
public static string GetName(MemberExpression expression);
    [ExtensionAttribute]
public static MemberExpression GetMemberExpression(Expression`1<Func`2<T, TValue>> expression);
}
public interface Metsys.Bson.Configuration.ITypeConfiguration`1 {
    public abstract virtual ITypeConfiguration`1<T> UseAlias(Expression`1<Func`2<T, object>> expression, string alias);
    public abstract virtual ITypeConfiguration`1<T> Ignore(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ITypeConfiguration`1<T> Ignore(string name);
    public abstract virtual ITypeConfiguration`1<T> IgnoreIfNull(Expression`1<Func`2<T, object>> expression);
}
internal class Metsys.Bson.Configuration.TypeConfiguration`1 : object {
    private BsonConfiguration _configuration;
    internal TypeConfiguration`1(BsonConfiguration configuration);
    public sealed virtual ITypeConfiguration`1<T> UseAlias(Expression`1<Func`2<T, object>> expression, string alias);
    public sealed virtual ITypeConfiguration`1<T> Ignore(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ITypeConfiguration`1<T> Ignore(string name);
    public sealed virtual ITypeConfiguration`1<T> IgnoreIfNull(Expression`1<Func`2<T, object>> expression);
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
internal class Metsys.Bson.Deserializer : object {
    private static IDictionary`2<Types, Type> _typeMap;
    private BinaryReader _reader;
    private Document _current;
    private Deserializer(BinaryReader reader);
    private static Deserializer();
    public static T Deserialize(Byte[] objectData, Options options);
    private static T Deserialize(BinaryReader stream, Options options);
    private T Read(Options options);
    public static object Deserialize(BinaryReader stream, Type t, Options options);
    private object Read(Type t, Options options);
    private void Read(int read);
    private bool IsDone();
    private void NewDocument(int length);
    private object DeserializeValue(Type type, Types storedType, Options options);
    private object DeserializeValue(Type type, Types storedType, object container, Options options);
    private object ReadObject(Type type, Options options);
    private object ReadList(Type listType, object existingContainer, Options options);
    private static bool IsDictionary(Type type);
    private object ReadDictionary(Type listType, object existingContainer, Options options);
    private object ReadBinary();
    private string ReadName();
    private string ReadString();
    private int ReadInt(Types storedType);
    private long ReadLong(Types storedType);
    private object ReadEnum(Type type, Types storedType);
    private object ReadRegularExpression();
    private Types ReadType();
    private ScopedCode ReadScopedCode(Options options);
}
internal class Metsys.Bson.Document : object {
    public int Length;
    public Document Parent;
    public int Digested;
}
public static class Metsys.Bson.Helper : object {
    public static DateTime Epoch;
    private static Helper();
}
public interface Metsys.Bson.IExpando {
    public IDictionary`2<string, object> Expando { get; }
    public abstract virtual IDictionary`2<string, object> get_Expando();
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
internal static class Metsys.Bson.ListHelper : object {
    public static Type GetListItemType(Type enumerableType);
    public static Type GetDictionaryKeyType(Type enumerableType);
    public static Type GetDictionaryValueType(Type enumerableType);
    public static IDictionary CreateDictionary(Type dictionaryType, Type keyType, Type valueType);
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
internal class Metsys.Bson.ListWrapper : BaseWrapper {
    private IList _list;
    public object Collection { get; }
    public virtual object get_Collection();
    public virtual void Add(object value);
    protected virtual object CreateContainer(Type type, Type itemType);
    protected virtual void SetContainer(object container);
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
internal class Metsys.Bson.MagicProperty : object {
    private PropertyInfo _property;
    private string _name;
    private bool _ignored;
    public bool _ignoredIfNull;
    [CompilerGeneratedAttribute]
private Action`2<object, object> <Setter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <Getter>k__BackingField;
    public Type Type { get; }
    public string Name { get; }
    public bool Ignored { get; }
    public bool IgnoredIfNull { get; }
    public Action`2<object, object> Setter { get; private set; }
    public Func`2<object, object> Getter { get; private set; }
    public MagicProperty(PropertyInfo property, string name, bool ignored, bool ignoredIfNull);
    public Type get_Type();
    public string get_Name();
    public bool get_Ignored();
    public bool get_IgnoredIfNull();
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_Setter();
    [CompilerGeneratedAttribute]
private void set_Setter(Action`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Getter();
    [CompilerGeneratedAttribute]
private void set_Getter(Func`2<object, object> value);
    private static Action`2<object, object> CreateSetterMethod(PropertyInfo property);
    private static Func`2<object, object> CreateGetterMethod(PropertyInfo property);
    private static Action`2<object, object> SetterMethod(PropertyInfo method);
    private static Func`2<object, object> GetterMethod(PropertyInfo method);
}
internal class Metsys.Bson.ObjectId : object {
    private string _string;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public static ObjectId Empty { get; }
    public Byte[] Value { get; private set; }
    public ObjectId(string value);
    internal ObjectId(Byte[] value);
    public static ObjectId get_Empty();
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Byte[] value);
    public static ObjectId NewObjectId();
    public static bool TryParse(string value, ObjectId& id);
    public static bool op_Equality(ObjectId a, ObjectId b);
    public static bool op_Inequality(ObjectId a, ObjectId b);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object o);
    public bool Equals(ObjectId other);
    protected static Byte[] DecodeHex(string val);
    public static string op_Implicit(ObjectId oid);
    public static ObjectId op_Implicit(string oidString);
}
internal static class Metsys.Bson.ObjectIdGenerator : object {
    private static object _inclock;
    private static int _counter;
    private static Byte[] _machineHash;
    private static Byte[] _processId;
    private static ObjectIdGenerator();
    public static Byte[] Generate();
    private static int GenerateTime();
    private static int GenerateInc();
    private static Byte[] GenerateHostHash();
    private static int GenerateProcId();
}
internal class Metsys.Bson.ScopedCode : object {
    [CompilerGeneratedAttribute]
private string <CodeString>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Scope>k__BackingField;
    public string CodeString { get; public set; }
    public object Scope { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CodeString();
    [CompilerGeneratedAttribute]
public void set_CodeString(string value);
    [CompilerGeneratedAttribute]
public object get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(object value);
}
internal class Metsys.Bson.ScopedCode`1 : ScopedCode {
    [CompilerGeneratedAttribute]
private T <Scope>k__BackingField;
    public T Scope { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(T value);
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
internal class Metsys.Bson.Serializer : object {
    private static IDictionary`2<Type, Types> _typeMap;
    private BinaryWriter _writer;
    private Document _current;
    private Serializer(BinaryWriter writer);
    private static Serializer();
    public static Byte[] Serialize(T document);
    public static Byte[] Serialize(object document);
    private void NewDocument();
    private void EndDocument(bool includeEeo);
    private void Written(int length);
    private void WriteDocument(object document);
    private void WriteObject(object document);
    private void SerializeMember(string name, object value);
    private void Write(string name, object value);
    private void Write(IEnumerable enumerable);
    private void Write(IDictionary dictionary);
    private void WriteBinary(object value);
    private void Write(Types type);
    private void WriteName(string name);
    private void Write(string name);
    private void Write(Regex regex);
    private void Write(ScopedCode value);
}
[RequiresUnreferencedCodeAttribute("Bson uses reflection")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
internal class Metsys.Bson.TypeHelper : object {
    private static IDictionary`2<Type, TypeHelper> _cachedTypeLookup;
    private static BsonConfiguration _configuration;
    private IDictionary`2<string, MagicProperty> _properties;
    [CompilerGeneratedAttribute]
private MagicProperty <Expando>k__BackingField;
    public MagicProperty Expando { get; private set; }
    private TypeHelper(Type type);
    private static TypeHelper();
    [CompilerGeneratedAttribute]
public MagicProperty get_Expando();
    [CompilerGeneratedAttribute]
private void set_Expando(MagicProperty value);
    public ICollection`1<MagicProperty> GetProperties();
    public MagicProperty FindProperty(string name);
    public static TypeHelper GetHelperForType(Type type);
    public static string FindProperty(LambdaExpression lambdaExpression);
    public static PropertyInfo FindProperty(Type type, string name);
    private static IDictionary`2<string, MagicProperty> LoadMagicProperties(Type type, IEnumerable`1<PropertyInfo> properties);
}
internal enum Metsys.Bson.Types : Enum {
    public int value__;
    public static Types Double;
    public static Types String;
    public static Types Object;
    public static Types Array;
    public static Types Binary;
    public static Types Undefined;
    public static Types ObjectId;
    public static Types Boolean;
    public static Types DateTime;
    public static Types Null;
    public static Types Regex;
    public static Types Reference;
    public static Types Code;
    public static Types Symbol;
    public static Types ScopedCode;
    public static Types Int32;
    public static Types Timestamp;
    public static Types Int64;
}
