[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Skia.CombinedGeometryImpl : GeometryImpl {
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPath <StrokePath>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPath <FillPath>k__BackingField;
    public Rect Bounds { get; }
    public SKPath StrokePath { get; }
    public SKPath FillPath { get; }
    public CombinedGeometryImpl(SKPath stroke, SKPath fill);
    [NullableContextAttribute("1")]
public static CombinedGeometryImpl ForceCreate(GeometryCombineMode combineMode, IGeometryImpl g1, IGeometryImpl g2);
    [NullableContextAttribute("1")]
public static CombinedGeometryImpl TryCreate(GeometryCombineMode combineMode, GeometryImpl g1, GeometryImpl g2);
    [CompilerGeneratedAttribute]
public virtual Rect get_Bounds();
    [CompilerGeneratedAttribute]
public virtual SKPath get_StrokePath();
    [CompilerGeneratedAttribute]
public virtual SKPath get_FillPath();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.DrawingContextImpl : object {
    [NullableAttribute("2")]
private IDisposable[] _disposables;
    private Vector _intermediateSurfaceDpi;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<ValueTuple`2<SKMatrix, PaintWrapper>> _maskStack;
    private Stack`1<double> _opacityStack;
    private Stack`1<RenderOptions> _renderOptionsStack;
    private Nullable`1<Matrix> _postTransform;
    private double _currentOpacity;
    private bool _disableSubpixelTextRendering;
    private Nullable`1<Matrix> _currentTransform;
    private bool _disposed;
    [NullableAttribute("2")]
private GRContext _grContext;
    [NullableAttribute("2")]
private ISkiaGpu _gpu;
    private SKPaint _strokePaint;
    private SKPaint _fillPaint;
    private SKPaint _boxShadowPaint;
    [NullableAttribute("2")]
private static SKShader s_acrylicNoiseShader;
    [NullableAttribute("2")]
private ISkiaGpuRenderSession _session;
    private bool _leased;
    private bool _useOpacitySaveLayer;
    [CompilerGeneratedAttribute]
private SKCanvas <Canvas>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderOptions <RenderOptions>k__BackingField;
    [NullableAttribute("2")]
public GRContext GrContext { get; }
    public SKCanvas Canvas { get; }
    [NullableAttribute("2")]
public SKSurface Surface { get; }
    public RenderOptions RenderOptions { get; public set; }
    public Matrix Transform { get; public set; }
    [NullableContextAttribute("2")]
public DrawingContextImpl(CreateInfo createInfo, IDisposable[] disposables);
    [NullableContextAttribute("2")]
public GRContext get_GrContext();
    [CompilerGeneratedAttribute]
public SKCanvas get_Canvas();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
public RenderOptions get_RenderOptions();
    [CompilerGeneratedAttribute]
public void set_RenderOptions(RenderOptions value);
    private void CheckLease();
    public sealed virtual void Clear(Color color);
    public sealed virtual void DrawBitmap(IBitmapImpl source, double opacity, Rect sourceRect, Rect destRect);
    public sealed virtual void DrawBitmap(IBitmapImpl source, IBrush opacityMask, Rect opacityMaskRect, Rect destRect);
    [NullableContextAttribute("2")]
public sealed virtual void DrawLine(IPen pen, Point p1, Point p2);
    [NullableContextAttribute("2")]
public sealed virtual void DrawGeometry(IBrush brush, IPen pen, IGeometryImpl geometry);
    private static float SkBlurRadiusToSigma(double radius);
    private static SKRect AreaCastingShadowInHole(SKRect hole_rect, float shadow_blur, float shadow_spread, float offsetX, float offsetY);
    [NullableContextAttribute("2")]
public sealed virtual void DrawRectangle(IExperimentalAcrylicMaterial material, RoundedRect rect);
    [NullableContextAttribute("2")]
public sealed virtual void DrawRectangle(IBrush brush, IPen pen, RoundedRect rect, BoxShadows boxShadows);
    [NullableContextAttribute("2")]
public sealed virtual void DrawRegion(IBrush brush, IPen pen, IPlatformRenderInterfaceRegion region);
    [NullableContextAttribute("2")]
public sealed virtual void DrawEllipse(IBrush brush, IPen pen, Rect rect);
    public sealed virtual void DrawGlyphRun(IBrush foreground, IGlyphRunImpl glyphRun);
    public sealed virtual IDrawingContextLayerImpl CreateLayer(PixelSize size);
    public sealed virtual void PushClip(Rect clip);
    public sealed virtual void PushClip(RoundedRect clip);
    public sealed virtual void PushClip(IPlatformRenderInterfaceRegion region);
    private void RestoreCanvas();
    public sealed virtual void PopClip();
    public sealed virtual void PushLayer(Rect bounds);
    public sealed virtual void PopLayer();
    public sealed virtual void PushOpacity(double opacity, Nullable`1<Rect> bounds);
    public sealed virtual void PopOpacity();
    public sealed virtual void PushRenderOptions(RenderOptions renderOptions);
    public sealed virtual void PopRenderOptions();
    public virtual void Dispose();
    public sealed virtual void PushGeometryClip(IGeometryImpl clip);
    public sealed virtual void PopGeometryClip();
    public sealed virtual void PushOpacityMask(IBrush mask, Rect bounds);
    public sealed virtual void PopOpacityMask();
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual object GetFeature(Type t);
    private static void ConfigureGradientBrush(PaintWrapper& paintWrapper, Rect targetRect, IGradientBrush gradientBrush);
    private void ConfigureTileBrush(PaintWrapper& paintWrapper, Rect targetBox, ITileBrush tileBrush, IDrawableBitmapImpl tileBrushImage);
    private void ConfigureSceneBrushContent(PaintWrapper& paintWrapper, ISceneBrushContent content, Rect targetRect);
    private void ConfigureSceneBrushContentWithSurface(PaintWrapper& paintWrapper, ISceneBrushContent content, Rect targetRect);
    private void ConfigureSceneBrushContentWithPicture(PaintWrapper& paintWrapper, ISceneBrushContent content, Rect targetRect);
    private static SKColorFilter CreateAlphaColorFilter(double opacity);
    private static byte Blend(byte leftColor, byte leftAlpha, byte rightColor, byte rightAlpha);
    private static Color Blend(Color left, Color right);
    internal PaintWrapper CreateAcrylicPaint(SKPaint paint, IExperimentalAcrylicMaterial material);
    internal PaintWrapper CreatePaint(SKPaint paint, IBrush brush, Rect targetRect);
    private Nullable`1<PaintWrapper> TryCreatePaint(SKPaint paint, IPen pen, Rect targetRect);
    private SurfaceRenderTarget CreateRenderTarget(PixelSize pixelSize, bool isLayer, Nullable`1<PixelFormat> format);
    public sealed virtual void PushEffect(IEffect effect);
    public sealed virtual void PopEffect();
    private SKImageFilter CreateEffect(IEffect effect);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.EllipseGeometryImpl : GeometryImpl {
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPath <StrokePath>k__BackingField;
    public Rect Bounds { get; }
    public SKPath StrokePath { get; }
    public SKPath FillPath { get; }
    public EllipseGeometryImpl(Rect rect);
    [CompilerGeneratedAttribute]
public virtual Rect get_Bounds();
    [CompilerGeneratedAttribute]
public virtual SKPath get_StrokePath();
    public virtual SKPath get_FillPath();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.FboSkiaSurface : object {
    private GlSkiaGpu _gpu;
    private GRContext _grContext;
    private IGlContext _glContext;
    private PixelSize _pixelSize;
    private int _fbo;
    private int _depthStencil;
    private int _texture;
    [NullableAttribute("2")]
private SKSurface _surface;
    private static Boolean[] TrueFalse;
    [CompilerGeneratedAttribute]
private bool <CanBlit>k__BackingField;
    public SKSurface Surface { get; }
    public bool CanBlit { get; }
    public FboSkiaSurface(GlSkiaGpu gpu, GRContext grContext, IGlContext glContext, PixelSize pixelSize, GRSurfaceOrigin surfaceOrigin);
    private static FboSkiaSurface();
    public sealed virtual void Dispose();
    public sealed virtual SKSurface get_Surface();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanBlit();
    public sealed virtual void Blit(SKCanvas canvas);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.FontManagerImpl : object {
    private SKFontManager _skFontManager;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ThreadStaticAttribute]
private static String[] t_languageTagBuffer;
    public sealed virtual string GetDefaultFontFamilyName();
    public sealed virtual String[] GetInstalledFontFamilyNames(bool checkForUpdates);
    [NullableContextAttribute("2")]
public sealed virtual bool TryMatchCharacter(int codepoint, FontStyle fontStyle, FontWeight fontWeight, FontStretch fontStretch, CultureInfo culture, Typeface& fontKey);
    public sealed virtual bool TryCreateGlyphTypeface(string familyName, FontStyle style, FontWeight weight, FontStretch stretch, IGlyphTypeface& glyphTypeface);
    public sealed virtual bool TryCreateGlyphTypeface(Stream stream, FontSimulations fontSimulations, IGlyphTypeface& glyphTypeface);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.FramebufferRenderTarget : object {
    private SKImageInfo _currentImageInfo;
    private IntPtr _currentFramebufferAddress;
    [NullableAttribute("2")]
private SKSurface _framebufferSurface;
    [NullableAttribute("2")]
private PixelFormatConversionShim _conversionShim;
    [NullableAttribute("2")]
private IDisposable _preFramebufferCopyHandler;
    [NullableAttribute("2")]
private IFramebufferRenderTarget _renderTarget;
    [NullableAttribute("2")]
private IFramebufferRenderTargetWithProperties _renderTargetWithProperties;
    private bool _hadConversionShim;
    public RenderTargetProperties Properties { get; }
    public bool IsCorrupted { get; }
    public FramebufferRenderTarget(IFramebufferPlatformSurface platformSurface);
    public sealed virtual void Dispose();
    public sealed virtual RenderTargetProperties get_Properties();
    public sealed virtual IDrawingContextImpl CreateDrawingContext(bool scaleDrawingToDpi);
    public sealed virtual IDrawingContextImpl CreateDrawingContext(bool useScaledDrawing, RenderTargetDrawingContextProperties& properties);
    public sealed virtual bool get_IsCorrupted();
    private static bool AreImageInfosCompatible(SKImageInfo currentImageInfo, SKImageInfo desiredImageInfo);
    [MemberNotNullAttribute("_framebufferSurface")]
private void CreateSurface(SKImageInfo desiredImageInfo, ILockedFramebuffer framebuffer);
    private void FreeSurface();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.GeometryGroupImpl : GeometryImpl {
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPath <StrokePath>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPath <FillPath>k__BackingField;
    public Rect Bounds { get; }
    public SKPath StrokePath { get; }
    public SKPath FillPath { get; }
    public GeometryGroupImpl(FillRule fillRule, IReadOnlyList`1<IGeometryImpl> children);
    [CompilerGeneratedAttribute]
public virtual Rect get_Bounds();
    [CompilerGeneratedAttribute]
public virtual SKPath get_StrokePath();
    [CompilerGeneratedAttribute]
public virtual SKPath get_FillPath();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Avalonia.Skia.GeometryImpl : object {
    [NullableAttribute("1")]
private object _lock;
    private PathCache _pathCache;
    private SKPathMeasure _cachedPathMeasure;
    [NullableAttribute("1")]
private SKPathMeasure CachedPathMeasure { get; }
    public Rect Bounds { get; }
    public double ContourLength { get; }
    public SKPath StrokePath { get; }
    public SKPath FillPath { get; }
    [NullableContextAttribute("1")]
private SKPathMeasure get_CachedPathMeasure();
    public abstract virtual Rect get_Bounds();
    public sealed virtual double get_ContourLength();
    public abstract virtual SKPath get_StrokePath();
    public abstract virtual SKPath get_FillPath();
    public sealed virtual bool FillContains(Point point);
    public sealed virtual bool StrokeContains(IPen pen, Point point);
    private static bool PathContainsCore(SKPath path, Point point);
    [NullableContextAttribute("1")]
public sealed virtual IGeometryImpl Intersect(IGeometryImpl geometry);
    public sealed virtual Rect GetRenderBounds(IPen pen);
    [NullableContextAttribute("1")]
public sealed virtual IGeometryImpl GetWidenedGeometry(IPen pen);
    [NullableContextAttribute("1")]
public sealed virtual ITransformedGeometryImpl WithTransform(Matrix transform);
    public sealed virtual bool TryGetPointAtDistance(double distance, Point& point);
    public sealed virtual bool TryGetPointAndTangentAtDistance(double distance, Point& point, Point& tangent);
    public sealed virtual bool TryGetSegment(double startDistance, double stopDistance, bool startOnBeginFigure, IGeometryImpl& segmentGeometry);
    protected void InvalidateCaches();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.GlRenderTarget : object {
    private GRContext _grContext;
    private IGlPlatformSurfaceRenderTarget _surface;
    private static SKSurfaceProperties _surfaceProperties;
    public bool IsCorrupted { get; }
    public GlRenderTarget(GRContext grContext, IGlContext glContext, IGlPlatformSurface glSurface);
    private static GlRenderTarget();
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsCorrupted();
    public sealed virtual ISkiaGpuRenderSession BeginRenderingSession();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.GlSkiaExternalObjectsFeature : object {
    private GlSkiaGpu _gpu;
    [NullableAttribute("2")]
private IGlContextExternalObjectsFeature _feature;
    public IReadOnlyList`1<string> SupportedImageHandleTypes { get; }
    public IReadOnlyList`1<string> SupportedSemaphoreTypes { get; }
    [NullableAttribute("2")]
public Byte[] DeviceUuid { get; }
    [NullableAttribute("2")]
public Byte[] DeviceLuid { get; }
    public GlSkiaExternalObjectsFeature(GlSkiaGpu gpu, IGlContextExternalObjectsFeature feature);
    public sealed virtual IReadOnlyList`1<string> get_SupportedImageHandleTypes();
    public sealed virtual IReadOnlyList`1<string> get_SupportedSemaphoreTypes();
    public sealed virtual IPlatformRenderInterfaceImportedImage ImportImage(IPlatformHandle handle, PlatformGraphicsExternalImageProperties properties);
    public sealed virtual IPlatformRenderInterfaceImportedImage ImportImage(ICompositionImportableSharedGpuContextImage image);
    public sealed virtual IPlatformRenderInterfaceImportedSemaphore ImportSemaphore(IPlatformHandle handle);
    public sealed virtual CompositionGpuImportedImageSynchronizationCapabilities GetSynchronizationCapabilities(string imageHandleType);
    [NullableContextAttribute("2")]
public sealed virtual Byte[] get_DeviceUuid();
    [NullableContextAttribute("2")]
public sealed virtual Byte[] get_DeviceLuid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.GlSkiaGpu : object {
    private GRContext _grContext;
    private IGlContext _glContext;
    private List`1<Action> _postDisposeCallbacks;
    private Nullable`1<bool> _canCreateSurfaces;
    [NullableAttribute("2")]
private IExternalObjectsRenderInterfaceContextFeature _externalObjectsFeature;
    public GRContext GrContext { get; }
    public IGlContext GlContext { get; }
    public bool CanCreateSharedContext { get; }
    public bool IsLost { get; }
    [NullableAttribute("2")]
public IPlatformGraphicsContext PlatformGraphicsContext { get; }
    public GlSkiaGpu(IGlContext context, Nullable`1<long> maxResourceBytes);
    public GRContext get_GrContext();
    public IGlContext get_GlContext();
    public sealed virtual ISkiaGpuRenderTarget TryCreateRenderTarget(IEnumerable`1<object> surfaces);
    [NullableContextAttribute("2")]
public sealed virtual ISkiaSurface TryCreateSurface(PixelSize size, ISkiaGpuRenderSession session);
    public sealed virtual bool get_CanCreateSharedContext();
    [NullableContextAttribute("2")]
public sealed virtual IGlContext CreateSharedContext(IEnumerable`1<GlVersion> preferredVersions);
    public sealed virtual ICompositionImportableOpenGlSharedTexture CreateSharedTextureForComposition(IGlContext context, PixelSize size);
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsLost();
    public sealed virtual IDisposable EnsureCurrent();
    [NullableContextAttribute("2")]
public sealed virtual IPlatformGraphicsContext get_PlatformGraphicsContext();
    public sealed virtual IScopedResource`1<GRContext> TryGetGrContext();
    public sealed virtual object TryGetFeature(Type featureType);
    public void AddPostDispose(Action dispose);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.GlSkiaImportedImage : object {
    [NullableAttribute("2")]
private GlSkiaSharedTextureForComposition _sharedTexture;
    private GlSkiaGpu _gpu;
    [NullableAttribute("2")]
private IGlExternalImageTexture _image;
    public GlSkiaImportedImage(GlSkiaGpu gpu, IGlExternalImageTexture image);
    public GlSkiaImportedImage(GlSkiaGpu gpu, GlSkiaSharedTextureForComposition sharedTexture);
    public sealed virtual void Dispose();
    private SKColorType ConvertColorType(PlatformGraphicsExternalImageFormat format);
    [NullableContextAttribute("2")]
private SKSurface TryCreateSurface(int textureId, int format, int width, int height, bool topLeft);
    private IBitmapImpl TakeSnapshot();
    public sealed virtual IBitmapImpl SnapshotWithKeyedMutex(UInt32 acquireIndex, UInt32 releaseIndex);
    public sealed virtual IBitmapImpl SnapshotWithSemaphores(IPlatformRenderInterfaceImportedSemaphore waitForSemaphore, IPlatformRenderInterfaceImportedSemaphore signalSemaphore);
    public sealed virtual IBitmapImpl SnapshotWithAutomaticSync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.GlSkiaImportedSemaphore : object {
    private GlSkiaGpu _gpu;
    [CompilerGeneratedAttribute]
private IGlExternalSemaphore <Semaphore>k__BackingField;
    public IGlExternalSemaphore Semaphore { get; }
    public GlSkiaImportedSemaphore(GlSkiaGpu gpu, IGlExternalSemaphore semaphore);
    [CompilerGeneratedAttribute]
public IGlExternalSemaphore get_Semaphore();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.GlSkiaSharedTextureForComposition : object {
    [CompilerGeneratedAttribute]
private IGlContext <Context>k__BackingField;
    private object _lock;
    [CompilerGeneratedAttribute]
private int <TextureId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelSize <Size>k__BackingField;
    public IGlContext Context { get; }
    public int TextureId { get; private set; }
    public int InternalFormat { get; }
    public PixelSize Size { get; }
    public GlSkiaSharedTextureForComposition(IGlContext context, int textureId, int internalFormat, PixelSize size);
    [CompilerGeneratedAttribute]
public IGlContext get_Context();
    public void Dispose(IGlContext context);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TextureId();
    [CompilerGeneratedAttribute]
private void set_TextureId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_InternalFormat();
    [CompilerGeneratedAttribute]
public sealed virtual PixelSize get_Size();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.GlyphRunImpl : object {
    private GlyphTypefaceImpl _glyphTypefaceImpl;
    private UInt16[] _glyphIndices;
    private SKPoint[] _glyphPositions;
    private ConcurrentDictionary`2<SKFontEdging, SKTextBlob> _textBlobCache;
    [CompilerGeneratedAttribute]
private double <FontRenderingEmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <BaselineOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    public IGlyphTypeface GlyphTypeface { get; }
    public double FontRenderingEmSize { get; }
    public Point BaselineOrigin { get; }
    public Rect Bounds { get; }
    public GlyphRunImpl(IGlyphTypeface glyphTypeface, double fontRenderingEmSize, IReadOnlyList`1<GlyphInfo> glyphInfos, Point baselineOrigin);
    public sealed virtual IGlyphTypeface get_GlyphTypeface();
    [CompilerGeneratedAttribute]
public sealed virtual double get_FontRenderingEmSize();
    [CompilerGeneratedAttribute]
public sealed virtual Point get_BaselineOrigin();
    [CompilerGeneratedAttribute]
public sealed virtual Rect get_Bounds();
    public SKTextBlob GetTextBlob(RenderOptions renderOptions);
    private SKFont CreateFont(SKFontEdging edging);
    public sealed virtual void Dispose();
    public sealed virtual IReadOnlyList`1<float> GetIntersections(float lowerLimit, float upperLimit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.GlyphTypefaceImpl : object {
    private bool _isDisposed;
    private SKTypeface _typeface;
    private NameTable _nameTable;
    [NullableAttribute("2")]
private OS2Table _os2Table;
    [NullableAttribute("2")]
private HorizontalHeadTable _hhTable;
    [NullableAttribute("2")]
private IReadOnlyList`1<OpenTypeTag> _supportedFeatures;
    [CompilerGeneratedAttribute]
private string <TypographicFamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<ushort, string> <FamilyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Face <Face>k__BackingField;
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private FontSimulations <FontSimulations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReplacementCodepoint>k__BackingField;
    [CompilerGeneratedAttribute]
private FontMetrics <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GlyphCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeight <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStretch <Stretch>k__BackingField;
    public string TypographicFamilyName { get; }
    public IReadOnlyDictionary`2<ushort, string> FamilyNames { get; }
    public IReadOnlyList`1<OpenTypeTag> SupportedFeatures { get; }
    public Face Face { get; }
    public Font Font { get; }
    public FontSimulations FontSimulations { get; }
    public int ReplacementCodepoint { get; }
    public FontMetrics Metrics { get; }
    public int GlyphCount { get; }
    public string FamilyName { get; }
    public FontWeight Weight { get; }
    public FontStyle Style { get; }
    public FontStretch Stretch { get; }
    public GlyphTypefaceImpl(SKTypeface typeface, FontSimulations fontSimulations);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TypographicFamilyName();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<ushort, string> get_FamilyNames();
    public sealed virtual IReadOnlyList`1<OpenTypeTag> get_SupportedFeatures();
    [CompilerGeneratedAttribute]
public Face get_Face();
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public sealed virtual FontSimulations get_FontSimulations();
    [CompilerGeneratedAttribute]
public int get_ReplacementCodepoint();
    [CompilerGeneratedAttribute]
public sealed virtual FontMetrics get_Metrics();
    [CompilerGeneratedAttribute]
public sealed virtual int get_GlyphCount();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FamilyName();
    [CompilerGeneratedAttribute]
public sealed virtual FontWeight get_Weight();
    [CompilerGeneratedAttribute]
public sealed virtual FontStyle get_Style();
    [CompilerGeneratedAttribute]
public sealed virtual FontStretch get_Stretch();
    public sealed virtual bool TryGetGlyphMetrics(ushort glyph, GlyphMetrics& metrics);
    public sealed virtual ushort GetGlyph(UInt32 codepoint);
    public sealed virtual bool TryGetGlyph(UInt32 codepoint, UInt16& glyph);
    [NullableContextAttribute("0")]
public sealed virtual UInt16[] GetGlyphs(ReadOnlySpan`1<UInt32> codepoints);
    public sealed virtual int GetGlyphAdvance(ushort glyph);
    [NullableContextAttribute("0")]
public sealed virtual Int32[] GetGlyphAdvances(ReadOnlySpan`1<ushort> glyphs);
    private Blob GetTable(Face face, Tag tag);
    public SKFont CreateSKFont(float size);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public sealed virtual bool TryGetTable(UInt32 tag, Byte[]& table);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetStream(Stream& stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Skia.Helpers.DrawingContextHelper : object {
    public static Task RenderAsync(SKCanvas canvas, Visual visual);
    public static Task RenderAsync(SKCanvas canvas, Visual visual, Rect clipRect, Vector dpi);
    [UnstableAttribute("IDrawingContextImpl usage is not supported in Avalonia 11.0.")]
public static IDrawingContextImpl WrapSkiaCanvas(SKCanvas canvas, Vector dpi);
    [NullableContextAttribute("2")]
public static bool TryCreateDashEffect(IPen pen, SKPathEffect& effect);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Skia.Helpers.ImageSavingHelper : object {
    public static void SaveImage(SKImage image, string fileName, Nullable`1<int> quality);
    public static void SaveImage(SKImage image, Stream stream, Nullable`1<int> quality);
    internal static void SavePicture(SKPicture picture, float scale, string path);
}
internal static class Avalonia.Skia.Helpers.PenHelper : object {
    [NullableContextAttribute("2")]
public static int GetHashCode(IPen pen, bool includeBrush);
}
public static class Avalonia.Skia.Helpers.PixelFormatHelper : object {
    public static SKColorType ResolveColorType(Nullable`1<PixelFormat> format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Skia.Helpers.SKPathHelper : object {
    public static SKPath CreateClosedPath(SKPath path);
    public static SKPath CreateStrokedPath(SKPath path, IPen pen);
}
internal interface Avalonia.Skia.IDrawableBitmapImpl {
    [NullableContextAttribute("1")]
public abstract virtual void Draw(DrawingContextImpl context, SKRect sourceRect, SKRect destRect, SKPaint paint);
}
[PrivateApiAttribute]
public interface Avalonia.Skia.IGlSkiaSpecificOptionsFeature {
    public bool UseNativeSkiaGrGlInterface { get; }
    public abstract virtual bool get_UseNativeSkiaGrGlInterface();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.ImmutableBitmap : object {
    private SKImage _image;
    [NullableAttribute("2")]
private SKBitmap _bitmap;
    [CompilerGeneratedAttribute]
private Vector <Dpi>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelSize <PixelSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public Vector Dpi { get; }
    public PixelSize PixelSize { get; }
    public int Version { get; }
    public Nullable`1<PixelFormat> Format { get; }
    public Nullable`1<AlphaFormat> AlphaFormat { get; }
    public ImmutableBitmap(Stream stream);
    public ImmutableBitmap(SKImage image);
    public ImmutableBitmap(ImmutableBitmap src, PixelSize destinationSize, BitmapInterpolationMode interpolationMode);
    public ImmutableBitmap(Stream stream, int decodeSize, bool horizontal, BitmapInterpolationMode interpolationMode);
    public ImmutableBitmap(PixelSize size, Vector dpi, int stride, PixelFormat format, AlphaFormat alphaFormat, IntPtr data);
    [CompilerGeneratedAttribute]
public sealed virtual Vector get_Dpi();
    [CompilerGeneratedAttribute]
public sealed virtual PixelSize get_PixelSize();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Version();
    public sealed virtual void Dispose();
    public sealed virtual void Save(string fileName, Nullable`1<int> quality);
    public sealed virtual void Save(Stream stream, Nullable`1<int> quality);
    public sealed virtual void Draw(DrawingContextImpl context, SKRect sourceRect, SKRect destRect, SKPaint paint);
    public sealed virtual Nullable`1<PixelFormat> get_Format();
    public sealed virtual Nullable`1<AlphaFormat> get_AlphaFormat();
    public sealed virtual ILockedFramebuffer Lock();
}
public interface Avalonia.Skia.ISkiaGpu {
    [NullableContextAttribute("1")]
public abstract virtual ISkiaGpuRenderTarget TryCreateRenderTarget(IEnumerable`1<object> surfaces);
    [NullableContextAttribute("2")]
public abstract virtual ISkiaSurface TryCreateSurface(PixelSize size, ISkiaGpuRenderSession session);
}
[NullableContextAttribute("1")]
public interface Avalonia.Skia.ISkiaGpuRenderSession {
    public GRContext GrContext { get; }
    public SKSurface SkSurface { get; }
    public double ScaleFactor { get; }
    public GRSurfaceOrigin SurfaceOrigin { get; }
    public abstract virtual GRContext get_GrContext();
    public abstract virtual SKSurface get_SkSurface();
    public abstract virtual double get_ScaleFactor();
    public abstract virtual GRSurfaceOrigin get_SurfaceOrigin();
}
public interface Avalonia.Skia.ISkiaGpuRenderTarget {
    public bool IsCorrupted { get; }
    [NullableContextAttribute("1")]
public abstract virtual ISkiaGpuRenderSession BeginRenderingSession();
    public abstract virtual bool get_IsCorrupted();
}
[UnstableAttribute]
public interface Avalonia.Skia.ISkiaGpuWithPlatformGraphicsContext {
    [NullableAttribute("2")]
public IPlatformGraphicsContext PlatformGraphicsContext { get; }
    [NullableContextAttribute("2")]
public abstract virtual IPlatformGraphicsContext get_PlatformGraphicsContext();
    public abstract virtual IScopedResource`1<GRContext> TryGetGrContext();
}
[NullableContextAttribute("2")]
[UnstableAttribute]
public interface Avalonia.Skia.ISkiaSharpApiLease {
    [NullableAttribute("1")]
public SKCanvas SkCanvas { get; }
    public GRContext GrContext { get; }
    public SKSurface SkSurface { get; }
    public double CurrentOpacity { get; }
    [NullableContextAttribute("1")]
public abstract virtual SKCanvas get_SkCanvas();
    public abstract virtual GRContext get_GrContext();
    public abstract virtual SKSurface get_SkSurface();
    public abstract virtual double get_CurrentOpacity();
    public abstract virtual ISkiaSharpPlatformGraphicsApiLease TryLeasePlatformGraphicsApi();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Skia.ISkiaSharpApiLeaseFeature {
    public abstract virtual ISkiaSharpApiLease Lease();
}
[NullableContextAttribute("1")]
[UnstableAttribute]
public interface Avalonia.Skia.ISkiaSharpPlatformGraphicsApiLease {
    public IPlatformGraphicsContext Context { get; }
    public abstract virtual IPlatformGraphicsContext get_Context();
}
[NullableContextAttribute("1")]
public interface Avalonia.Skia.ISkiaSurface {
    public SKSurface Surface { get; }
    public bool CanBlit { get; }
    public abstract virtual SKSurface get_Surface();
    public abstract virtual bool get_CanBlit();
    public abstract virtual void Blit(SKCanvas canvas);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.LineGeometryImpl : GeometryImpl {
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPath <StrokePath>k__BackingField;
    public Rect Bounds { get; }
    public SKPath StrokePath { get; }
    [NullableAttribute("2")]
public SKPath FillPath { get; }
    public LineGeometryImpl(Point p1, Point p2);
    [CompilerGeneratedAttribute]
public virtual Rect get_Bounds();
    [CompilerGeneratedAttribute]
public virtual SKPath get_StrokePath();
    [NullableContextAttribute("2")]
public virtual SKPath get_FillPath();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.Metal.SkiaMetalApi : object {
    [NullableAttribute("0")]
private method _gr_direct_context_make_metal_with_options;
    [NullableAttribute("0")]
private method _gr_backendrendertarget_new_metal;
    private ConstructorInfo _contextCtor;
    private MethodInfo _contextOptionsToNative;
    private ConstructorInfo _renderTargetCtor;
    [UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
public GRContext CreateContext(IntPtr device, IntPtr queue, GRContextOptions options);
    public GRBackendRenderTarget CreateBackendRenderTarget(int width, int height, int samples, IntPtr texture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.Metal.SkiaMetalGpu : object {
    private SkiaMetalApi _api;
    [NullableAttribute("2")]
private GRContext _context;
    private IMetalDevice _device;
    public bool IsLost { get; }
    [NullableAttribute("2")]
public IPlatformGraphicsContext PlatformGraphicsContext { get; }
    public SkiaMetalGpu(IMetalDevice device, Nullable`1<long> maxResourceBytes);
    public sealed virtual void Dispose();
    public sealed virtual object TryGetFeature(Type featureType);
    public sealed virtual bool get_IsLost();
    public sealed virtual IDisposable EnsureCurrent();
    [NullableContextAttribute("2")]
public sealed virtual IPlatformGraphicsContext get_PlatformGraphicsContext();
    public sealed virtual IScopedResource`1<GRContext> TryGetGrContext();
    public sealed virtual ISkiaGpuRenderTarget TryCreateRenderTarget(IEnumerable`1<object> surfaces);
    [NullableContextAttribute("2")]
public sealed virtual ISkiaSurface TryCreateSurface(PixelSize size, ISkiaGpuRenderSession session);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Skia.PictureRenderTarget : object {
    private ISkiaGpu _gpu;
    private GRContext _grContext;
    private Vector _dpi;
    private SKPicture _picture;
    public PictureRenderTarget(ISkiaGpu gpu, GRContext grContext, Vector dpi);
    [NullableContextAttribute("1")]
public SKPicture GetPicture();
    [NullableContextAttribute("1")]
public IDrawingContextImpl CreateDrawingContext(Size size);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.PlatformRenderInterface : object {
    private Nullable`1<long> _maxResourceBytes;
    [CompilerGeneratedAttribute]
private PixelFormat <DefaultPixelFormat>k__BackingField;
    public bool SupportsIndividualRoundRects { get; }
    public AlphaFormat DefaultAlphaFormat { get; }
    public PixelFormat DefaultPixelFormat { get; }
    public bool SupportsRegions { get; }
    public PlatformRenderInterface(Nullable`1<long> maxResourceBytes);
    public sealed virtual IPlatformRenderInterfaceContext CreateBackendContext(IPlatformGraphicsContext graphicsContext);
    public sealed virtual bool get_SupportsIndividualRoundRects();
    public sealed virtual AlphaFormat get_DefaultAlphaFormat();
    [CompilerGeneratedAttribute]
public sealed virtual PixelFormat get_DefaultPixelFormat();
    public sealed virtual bool IsSupportedBitmapPixelFormat(PixelFormat format);
    public sealed virtual bool get_SupportsRegions();
    public sealed virtual IPlatformRenderInterfaceRegion CreateRegion();
    public sealed virtual IGeometryImpl CreateEllipseGeometry(Rect rect);
    public sealed virtual IGeometryImpl CreateLineGeometry(Point p1, Point p2);
    public sealed virtual IGeometryImpl CreateRectangleGeometry(Rect rect);
    public sealed virtual IStreamGeometryImpl CreateStreamGeometry();
    public sealed virtual IGeometryImpl CreateGeometryGroup(FillRule fillRule, IReadOnlyList`1<IGeometryImpl> children);
    public sealed virtual IGeometryImpl CreateCombinedGeometry(GeometryCombineMode combineMode, IGeometryImpl g1, IGeometryImpl g2);
    public sealed virtual IGeometryImpl BuildGlyphRunGeometry(GlyphRun glyphRun);
    public sealed virtual IBitmapImpl LoadBitmap(string fileName);
    public sealed virtual IBitmapImpl LoadBitmap(Stream stream);
    public sealed virtual IWriteableBitmapImpl LoadWriteableBitmapToWidth(Stream stream, int width, BitmapInterpolationMode interpolationMode);
    public sealed virtual IWriteableBitmapImpl LoadWriteableBitmapToHeight(Stream stream, int height, BitmapInterpolationMode interpolationMode);
    public sealed virtual IWriteableBitmapImpl LoadWriteableBitmap(string fileName);
    public sealed virtual IWriteableBitmapImpl LoadWriteableBitmap(Stream stream);
    public sealed virtual IBitmapImpl LoadBitmap(PixelFormat format, AlphaFormat alphaFormat, IntPtr data, PixelSize size, Vector dpi, int stride);
    public sealed virtual IBitmapImpl LoadBitmapToWidth(Stream stream, int width, BitmapInterpolationMode interpolationMode);
    public sealed virtual IBitmapImpl LoadBitmapToHeight(Stream stream, int height, BitmapInterpolationMode interpolationMode);
    public sealed virtual IBitmapImpl ResizeBitmap(IBitmapImpl bitmapImpl, PixelSize destinationSize, BitmapInterpolationMode interpolationMode);
    public sealed virtual IRenderTargetBitmapImpl CreateRenderTargetBitmap(PixelSize size, Vector dpi);
    public sealed virtual IWriteableBitmapImpl CreateWriteableBitmap(PixelSize size, Vector dpi, PixelFormat format, AlphaFormat alphaFormat);
    public sealed virtual IGlyphRunImpl CreateGlyphRun(IGlyphTypeface glyphTypeface, double fontRenderingEmSize, IReadOnlyList`1<GlyphInfo> glyphInfos, Point baselineOrigin);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.RectangleGeometryImpl : GeometryImpl {
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPath <StrokePath>k__BackingField;
    public Rect Bounds { get; }
    public SKPath StrokePath { get; }
    [NullableAttribute("2")]
public SKPath FillPath { get; }
    public RectangleGeometryImpl(Rect rect);
    [CompilerGeneratedAttribute]
public virtual Rect get_Bounds();
    [CompilerGeneratedAttribute]
public virtual SKPath get_StrokePath();
    [NullableContextAttribute("2")]
public virtual SKPath get_FillPath();
}
internal class Avalonia.Skia.RenderTargetBitmapImpl : WriteableBitmapImpl {
    [NullableAttribute("1")]
private FramebufferRenderTarget _renderTarget;
    public bool IsCorrupted { get; }
    public RenderTargetBitmapImpl(PixelSize size, Vector dpi);
    [NullableContextAttribute("1")]
private sealed virtual override IDrawingContextImpl Avalonia.Platform.IRenderTarget.CreateDrawingContext(bool useScaledDrawing);
    public sealed virtual bool get_IsCorrupted();
    public virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual IFramebufferRenderTarget CreateFramebufferRenderTarget();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Avalonia.Skia.SKCacheBase`2 : object {
    protected ConcurrentBag`1<TCachedItem> Cache;
    public static TCache Shared;
    private static SKCacheBase`2();
    public TCachedItem Get();
    public void Return(TCachedItem item);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.SkiaContext : object {
    [NullableAttribute("2")]
private ISkiaGpu _gpu;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<Type, object> <PublicFeatures>k__BackingField;
    public bool IsLost { get; }
    public IReadOnlyDictionary`2<Type, object> PublicFeatures { get; }
    [NullableContextAttribute("2")]
public SkiaContext(ISkiaGpu gpu);
    public sealed virtual void Dispose();
    public sealed virtual IRenderTarget CreateRenderTarget(IEnumerable`1<object> surfaces);
    public sealed virtual IDrawingContextLayerImpl CreateOffscreenRenderTarget(PixelSize pixelSize, double scaling);
    public sealed virtual bool get_IsLost();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<Type, object> get_PublicFeatures();
    public sealed virtual object TryGetFeature(Type featureType);
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__TryFeature|1_0(<>c__DisplayClass1_0& , <>c__DisplayClass1_1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.SkiaGpuRenderTarget : object {
    private ISkiaGpu _skiaGpu;
    private ISkiaGpuRenderTarget _renderTarget;
    public bool IsCorrupted { get; }
    public SkiaGpuRenderTarget(ISkiaGpu skiaGpu, ISkiaGpuRenderTarget renderTarget);
    public sealed virtual void Dispose();
    public sealed virtual IDrawingContextImpl CreateDrawingContext(bool useScaledDrawing);
    public sealed virtual bool get_IsCorrupted();
}
public static class Avalonia.Skia.SkiaPlatform : object {
    public static Vector DefaultDpi { get; }
    public static void Initialize();
    [NullableContextAttribute("1")]
public static void Initialize(SkiaOptions options);
    public static Vector get_DefaultDpi();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.SkiaRegionImpl : object {
    [NullableAttribute("2")]
private SKRegion _region;
    private bool _rectsValid;
    [NullableAttribute("2")]
private List`1<LtrbPixelRect> _rects;
    public SKRegion Region { get; }
    public bool IsEmpty { get; }
    public LtrbPixelRect Bounds { get; }
    public IList`1<LtrbPixelRect> Rects { get; }
    public SKRegion get_Region();
    public sealed virtual void Dispose();
    public sealed virtual void AddRect(LtrbPixelRect rect);
    public sealed virtual void Reset();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual LtrbPixelRect get_Bounds();
    public sealed virtual IList`1<LtrbPixelRect> get_Rects();
    public sealed virtual bool Intersects(LtrbRect rect);
    public sealed virtual bool Contains(Point pt);
}
[ExtensionAttribute]
public static class Avalonia.Skia.SkiaSharpExtensions : object {
    [ExtensionAttribute]
public static SKFilterQuality ToSKFilterQuality(BitmapInterpolationMode interpolationMode);
    [ExtensionAttribute]
public static SKBlendMode ToSKBlendMode(BitmapBlendingMode blendingMode);
    [ExtensionAttribute]
public static SKPoint ToSKPoint(Point p);
    [ExtensionAttribute]
public static SKPoint ToSKPoint(Vector p);
    [ExtensionAttribute]
public static SKRect ToSKRect(Rect r);
    [ExtensionAttribute]
internal static SKRect ToSKRect(LtrbRect r);
    [ExtensionAttribute]
public static SKRectI ToSKRectI(PixelRect r);
    [ExtensionAttribute]
internal static SKRectI ToSKRectI(LtrbPixelRect r);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static SKRoundRect ToSKRoundRect(RoundedRect r);
    [ExtensionAttribute]
public static Rect ToAvaloniaRect(SKRect r);
    [ExtensionAttribute]
internal static LtrbRect ToAvaloniaLtrbRect(SKRect r);
    [ExtensionAttribute]
public static PixelRect ToAvaloniaPixelRect(SKRectI r);
    [ExtensionAttribute]
internal static LtrbPixelRect ToAvaloniaLtrbPixelRect(SKRectI r);
    [ExtensionAttribute]
public static SKMatrix ToSKMatrix(Matrix m);
    [ExtensionAttribute]
internal static Matrix ToAvaloniaMatrix(SKMatrix m);
    [ExtensionAttribute]
public static SKColor ToSKColor(Color c);
    [ExtensionAttribute]
public static SKColorType ToSkColorType(PixelFormat fmt);
    [ExtensionAttribute]
public static Nullable`1<PixelFormat> ToAvalonia(SKColorType colorType);
    [ExtensionAttribute]
public static PixelFormat ToPixelFormat(SKColorType fmt);
    [ExtensionAttribute]
public static SKAlphaType ToSkAlphaType(AlphaFormat fmt);
    [ExtensionAttribute]
public static AlphaFormat ToAlphaFormat(SKAlphaType fmt);
    [ExtensionAttribute]
public static SKShaderTileMode ToSKShaderTileMode(GradientSpreadMethod m);
    [ExtensionAttribute]
public static SKTextAlign ToSKTextAlign(TextAlignment a);
    [ExtensionAttribute]
public static SKStrokeCap ToSKStrokeCap(PenLineCap cap);
    [ExtensionAttribute]
public static SKStrokeJoin ToSKStrokeJoin(PenLineJoin join);
    [ExtensionAttribute]
public static TextAlignment ToAvalonia(SKTextAlign a);
    [ExtensionAttribute]
public static FontStyle ToAvalonia(SKFontStyleSlant slant);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static SKPath Clone(SKPath src);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Avalonia.Skia.SKPaintCache : SKCacheBase`2<SKPaint, SKPaintCache> {
    public void ReturnReset(SKPaint paint);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Avalonia.Skia.SKRoundRectCache : SKCacheBase`2<SKRoundRect, SKRoundRectCache> {
    private ConcurrentBag`1<SKPoint[]> _radiiCache;
    public SKRoundRect GetAndSetRadii(SKRect& rectangle, RoundedRect& roundedRect);
    public SKRoundRect GetAndSetRadii(SKRect& rectangle, SKPoint[]& radii);
    public void ReturnReset(SKRoundRect rect);
    public void Clear();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Avalonia.Skia.SKTextBlobBuilderCache : SKCacheBase`2<SKTextBlobBuilder, SKTextBlobBuilderCache> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.StreamGeometryImpl : GeometryImpl {
    private Rect _bounds;
    private SKPath _strokePath;
    [NullableAttribute("2")]
private SKPath _fillPath;
    [NullableAttribute("2")]
public SKPath StrokePath { get; }
    [NullableAttribute("2")]
public SKPath FillPath { get; }
    public Rect Bounds { get; }
    public StreamGeometryImpl(SKPath stroke, SKPath fill, Nullable`1<Rect> bounds);
    private StreamGeometryImpl(SKPath path);
    [NullableContextAttribute("2")]
public virtual SKPath get_StrokePath();
    [NullableContextAttribute("2")]
public virtual SKPath get_FillPath();
    public virtual Rect get_Bounds();
    public sealed virtual IStreamGeometryImpl Clone();
    public sealed virtual IStreamGeometryContextImpl Open();
    private static SKPath CreateEmptyPath();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.SurfaceRenderTarget : object {
    private ISkiaSurface _surface;
    private SKCanvas _canvas;
    private bool _disableLcdRendering;
    [NullableAttribute("2")]
private GRContext _grContext;
    [NullableAttribute("2")]
private ISkiaGpu _gpu;
    [CompilerGeneratedAttribute]
private Vector <Dpi>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelSize <PixelSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public bool IsCorrupted { get; }
    public Vector Dpi { get; }
    public PixelSize PixelSize { get; }
    public int Version { get; private set; }
    public bool CanBlit { get; }
    public bool HasRenderContextAffinity { get; }
    public SurfaceRenderTarget(CreateInfo createInfo);
    [NullableContextAttribute("2")]
private static SKSurface CreateSurface(GRContext gpu, int width, int height, Nullable`1<PixelFormat> format);
    public sealed virtual void Dispose();
    public sealed virtual IDrawingContextImpl CreateDrawingContext(bool useScaledDrawing);
    public sealed virtual bool get_IsCorrupted();
    [CompilerGeneratedAttribute]
public sealed virtual Vector get_Dpi();
    [CompilerGeneratedAttribute]
public sealed virtual PixelSize get_PixelSize();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    public sealed virtual void Save(string fileName, Nullable`1<int> quality);
    public sealed virtual void Save(Stream stream, Nullable`1<int> quality);
    public sealed virtual void Blit(IDrawingContextImpl contextImpl);
    public sealed virtual bool get_CanBlit();
    public sealed virtual void Draw(DrawingContextImpl context, SKRect sourceRect, SKRect destRect, SKPaint paint);
    public SKImage SnapshotImage();
    private static SKImageInfo MakeImageInfo(int width, int height, Nullable`1<PixelFormat> format);
    public sealed virtual bool get_HasRenderContextAffinity();
    public sealed virtual IBitmapImpl CreateNonAffinedSnapshot();
    [CompilerGeneratedAttribute]
private void <CreateDrawingContext>b__9_0();
}
internal class Avalonia.Skia.TextShaperImpl : object {
    private static UInt32 ZeroWidthSpace;
    [NullableAttribute("1")]
private static ConcurrentDictionary`2<int, Language> s_cachedLanguage;
    private static TextShaperImpl();
    public sealed virtual ShapedBuffer ShapeText(ReadOnlyMemory`1<char> text, TextShaperOptions options);
    [NullableContextAttribute("1")]
private static void MergeBreakPair(Buffer buffer);
    private static Vector GetGlyphOffset(ReadOnlySpan`1<GlyphPosition> glyphPositions, int index, double textScale);
    private static double GetGlyphAdvance(ReadOnlySpan`1<GlyphPosition> glyphPositions, int index, double textScale);
    private static ReadOnlyMemory`1<char> GetContainingMemory(ReadOnlyMemory`1<char> memory, Int32& start, Int32& length);
    [NullableContextAttribute("1")]
private static Feature[] GetFeatures(TextShaperOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Skia.TransformedGeometryImpl : GeometryImpl {
    [CompilerGeneratedAttribute]
private SKPath <StrokePath>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPath <FillPath>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IGeometryImpl <SourceGeometry>k__BackingField;
    [CompilerGeneratedAttribute]
private Matrix <Transform>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    public SKPath StrokePath { get; }
    public SKPath FillPath { get; }
    [NullableAttribute("1")]
public IGeometryImpl SourceGeometry { get; }
    public Matrix Transform { get; }
    public Rect Bounds { get; }
    [NullableContextAttribute("1")]
public TransformedGeometryImpl(GeometryImpl source, Matrix transform);
    [CompilerGeneratedAttribute]
public virtual SKPath get_StrokePath();
    [CompilerGeneratedAttribute]
public virtual SKPath get_FillPath();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IGeometryImpl get_SourceGeometry();
    [CompilerGeneratedAttribute]
public sealed virtual Matrix get_Transform();
    [CompilerGeneratedAttribute]
public virtual Rect get_Bounds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.Vulkan.VulkanSkiaExternalObjectsFeature : object {
    private VulkanSkiaGpu _gpu;
    private IVulkanPlatformGraphicsContext _context;
    private IVulkanContextExternalObjectsFeature _feature;
    [NullableAttribute("2")]
public Byte[] DeviceUuid { get; }
    [NullableAttribute("2")]
public Byte[] DeviceLuid { get; }
    public IReadOnlyList`1<string> SupportedImageHandleTypes { get; }
    public IReadOnlyList`1<string> SupportedSemaphoreTypes { get; }
    public VulkanSkiaExternalObjectsFeature(VulkanSkiaGpu gpu, IVulkanPlatformGraphicsContext context, IVulkanContextExternalObjectsFeature feature);
    public sealed virtual IPlatformRenderInterfaceImportedImage ImportImage(IPlatformHandle handle, PlatformGraphicsExternalImageProperties properties);
    public sealed virtual IPlatformRenderInterfaceImportedSemaphore ImportSemaphore(IPlatformHandle handle);
    public sealed virtual IPlatformRenderInterfaceImportedImage ImportImage(ICompositionImportableSharedGpuContextImage image);
    public sealed virtual CompositionGpuImportedImageSynchronizationCapabilities GetSynchronizationCapabilities(string imageHandleType);
    [NullableContextAttribute("2")]
public sealed virtual Byte[] get_DeviceUuid();
    [NullableContextAttribute("2")]
public sealed virtual Byte[] get_DeviceLuid();
    public sealed virtual IReadOnlyList`1<string> get_SupportedImageHandleTypes();
    public sealed virtual IReadOnlyList`1<string> get_SupportedSemaphoreTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.Vulkan.VulkanSkiaGpu : object {
    [NullableAttribute("2")]
private VulkanSkiaExternalObjectsFeature _externalObjects;
    [CompilerGeneratedAttribute]
private IVulkanPlatformGraphicsContext <Vulkan>k__BackingField;
    [CompilerGeneratedAttribute]
private GRContext <GrContext>k__BackingField;
    public IVulkanPlatformGraphicsContext Vulkan { get; private set; }
    public GRContext GrContext { get; private set; }
    public bool IsLost { get; }
    public VulkanSkiaGpu(IVulkanPlatformGraphicsContext vulkan, Nullable`1<long> maxResourceBytes);
    [CompilerGeneratedAttribute]
public IVulkanPlatformGraphicsContext get_Vulkan();
    [CompilerGeneratedAttribute]
private void set_Vulkan(IVulkanPlatformGraphicsContext value);
    [CompilerGeneratedAttribute]
public GRContext get_GrContext();
    [CompilerGeneratedAttribute]
private void set_GrContext(GRContext value);
    public sealed virtual void Dispose();
    public sealed virtual object TryGetFeature(Type featureType);
    public sealed virtual bool get_IsLost();
    public sealed virtual IDisposable EnsureCurrent();
    public sealed virtual ISkiaGpuRenderTarget TryCreateRenderTarget(IEnumerable`1<object> surfaces);
    [NullableContextAttribute("2")]
public sealed virtual ISkiaSurface TryCreateSurface(PixelSize size, ISkiaGpuRenderSession session);
    [CompilerGeneratedAttribute]
private IntPtr <.ctor>g__GetProcAddressWrapper|9_0(string name, IntPtr instance, IntPtr device);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.Vulkan.VulkanSkiaRenderTarget : object {
    private VulkanSkiaGpu _gpu;
    private IVulkanRenderTarget _target;
    public bool IsCorrupted { get; }
    public VulkanSkiaRenderTarget(VulkanSkiaGpu gpu, IVulkanRenderTarget target);
    public sealed virtual void Dispose();
    public sealed virtual ISkiaGpuRenderSession BeginRenderingSession();
    public sealed virtual bool get_IsCorrupted();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Skia.WriteableBitmapImpl : object {
    private static SKBitmapReleaseDelegate s_releaseDelegate;
    private SKBitmap _bitmap;
    private object _lock;
    [CompilerGeneratedAttribute]
private Vector <Dpi>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelSize <PixelSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public Vector Dpi { get; }
    public PixelSize PixelSize { get; }
    public int Version { get; private set; }
    public Nullable`1<PixelFormat> Format { get; }
    public Nullable`1<AlphaFormat> AlphaFormat { get; }
    public WriteableBitmapImpl(Stream stream);
    public WriteableBitmapImpl(Stream stream, int decodeSize, bool horizontal, BitmapInterpolationMode interpolationMode);
    public WriteableBitmapImpl(PixelSize size, Vector dpi, PixelFormat format, AlphaFormat alphaFormat);
    private static WriteableBitmapImpl();
    [CompilerGeneratedAttribute]
public sealed virtual Vector get_Dpi();
    [CompilerGeneratedAttribute]
public sealed virtual PixelSize get_PixelSize();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    public sealed virtual void Draw(DrawingContextImpl context, SKRect sourceRect, SKRect destRect, SKPaint paint);
    public virtual void Dispose();
    public sealed virtual void Save(Stream stream, Nullable`1<int> quality);
    public sealed virtual void Save(string fileName, Nullable`1<int> quality);
    public sealed virtual Nullable`1<PixelFormat> get_Format();
    public sealed virtual Nullable`1<AlphaFormat> get_AlphaFormat();
    public sealed virtual ILockedFramebuffer Lock();
    public SKImage GetSnapshot();
    private static void ReleaseProc(IntPtr address, object ctx);
}
[ExtensionAttribute]
public static class Avalonia.SkiaApplicationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AppBuilder UseSkia(AppBuilder builder);
}
public class Avalonia.SkiaOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxGpuResourceSizeBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOpacitySaveLayer>k__BackingField;
    public Nullable`1<long> MaxGpuResourceSizeBytes { get; public set; }
    public bool UseOpacitySaveLayer { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxGpuResourceSizeBytes();
    [CompilerGeneratedAttribute]
public void set_MaxGpuResourceSizeBytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_UseOpacitySaveLayer();
    [CompilerGeneratedAttribute]
public void set_UseOpacitySaveLayer(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
