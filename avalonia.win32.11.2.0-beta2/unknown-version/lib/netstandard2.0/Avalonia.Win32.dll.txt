internal class Avalonia.OpenGL.Angle.Win32AngleEglInterface : EglInterface {
    private method _addr_CreateDeviceANGLE;
    private method _addr_ReleaseDeviceANGLE;
    public bool IsCreateDeviceANGLEAvailable { get; }
    public bool IsReleaseDeviceANGLEAvailable { get; }
    [NullableContextAttribute("1")]
private Win32AngleEglInterface(Func`2<string, IntPtr> getProcAddress);
    [NullableContextAttribute("1")]
private static IntPtr EGL_GetProcAddress(string proc);
    [NullableContextAttribute("2")]
[GetProcAddressAttribute("eglCreateDeviceANGLE", "True")]
public IntPtr CreateDeviceANGLE(int deviceType, IntPtr nativeDevice, Int32[] attribs);
    [GetProcAddressAttribute("eglReleaseDeviceANGLE", "True")]
public void ReleaseDeviceANGLE(IntPtr device);
    [NullableContextAttribute("1")]
private static Func`2<string, IntPtr> LoadAngle();
    public bool get_IsCreateDeviceANGLEAvailable();
    public bool get_IsReleaseDeviceANGLEAvailable();
    [NullableContextAttribute("1")]
private void Initialize(Func`2<string, IntPtr> getProcAddress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Win32.AngleOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<GlVersion> <GlProfiles>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IList`1<PlatformApi> <AllowedPlatformApis>k__BackingField;
    public IList`1<GlVersion> GlProfiles { get; public set; }
    [NullableAttribute("2")]
public IList`1<PlatformApi> AllowedPlatformApis { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<GlVersion> get_GlProfiles();
    [CompilerGeneratedAttribute]
public void set_GlProfiles(IList`1<GlVersion> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IList`1<PlatformApi> get_AllowedPlatformApis();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_AllowedPlatformApis(IList`1<PlatformApi> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ComVisibleAttribute("True")]
[RequiresUnreferencedCodeAttribute("Requires .NET COM interop")]
internal class Avalonia.Win32.Automation.AutomationNode : MarshalByRefObject {
    private static Dictionary`2<AutomationProperty, UiaPropertyId> s_propertyMap;
    private static ConditionalWeakTable`2<AutomationPeer, AutomationNode> s_nodes;
    private Int32[] _runtimeId;
    [CompilerGeneratedAttribute]
private AutomationPeer <Peer>k__BackingField;
    public AutomationPeer Peer { get; protected set; }
    public Rect BoundingRectangle { get; }
    [NullableAttribute("2")]
public IRawElementProviderFragmentRoot FragmentRoot { get; }
    [NullableAttribute("2")]
public IRawElementProviderSimple HostRawElementProvider { get; }
    public ProviderOptions ProviderOptions { get; }
    private ExpandCollapseState Avalonia.Win32.Interop.Automation.IExpandCollapseProvider.ExpandCollapseState { get; }
    private double Avalonia.Win32.Interop.Automation.IRangeValueProvider.Value { get; }
    private bool Avalonia.Win32.Interop.Automation.IRangeValueProvider.IsReadOnly { get; }
    private double Avalonia.Win32.Interop.Automation.IRangeValueProvider.Maximum { get; }
    private double Avalonia.Win32.Interop.Automation.IRangeValueProvider.Minimum { get; }
    private double Avalonia.Win32.Interop.Automation.IRangeValueProvider.LargeChange { get; }
    private double Avalonia.Win32.Interop.Automation.IRangeValueProvider.SmallChange { get; }
    private bool Avalonia.Win32.Interop.Automation.IScrollProvider.HorizontallyScrollable { get; }
    private double Avalonia.Win32.Interop.Automation.IScrollProvider.HorizontalScrollPercent { get; }
    private double Avalonia.Win32.Interop.Automation.IScrollProvider.HorizontalViewSize { get; }
    private bool Avalonia.Win32.Interop.Automation.IScrollProvider.VerticallyScrollable { get; }
    private double Avalonia.Win32.Interop.Automation.IScrollProvider.VerticalScrollPercent { get; }
    private double Avalonia.Win32.Interop.Automation.IScrollProvider.VerticalViewSize { get; }
    private bool Avalonia.Win32.Interop.Automation.ISelectionProvider.CanSelectMultiple { get; }
    private bool Avalonia.Win32.Interop.Automation.ISelectionProvider.IsSelectionRequired { get; }
    private bool Avalonia.Win32.Interop.Automation.ISelectionItemProvider.IsSelected { get; }
    [NullableAttribute("2")]
private IRawElementProviderSimple Avalonia.Win32.Interop.Automation.ISelectionItemProvider.SelectionContainer { get; }
    private ToggleState Avalonia.Win32.Interop.Automation.IToggleProvider.ToggleState { get; }
    private bool Avalonia.Win32.Interop.Automation.IValueProvider.IsReadOnly { get; }
    [NullableAttribute("2")]
private string Avalonia.Win32.Interop.Automation.IValueProvider.Value { get; }
    public AutomationNode(AutomationPeer peer);
    private static AutomationNode();
    [CompilerGeneratedAttribute]
public AutomationPeer get_Peer();
    [CompilerGeneratedAttribute]
protected void set_Peer(AutomationPeer value);
    public virtual Rect get_BoundingRectangle();
    [NullableContextAttribute("2")]
public virtual IRawElementProviderFragmentRoot get_FragmentRoot();
    [NullableContextAttribute("2")]
public virtual IRawElementProviderSimple get_HostRawElementProvider();
    public virtual ProviderOptions get_ProviderOptions();
    [NullableContextAttribute("2")]
public virtual object GetPatternProvider(int patternId);
    [NullableContextAttribute("2")]
public virtual object GetPropertyValue(int propertyId);
    [NullableContextAttribute("2")]
public sealed virtual Int32[] GetRuntimeId();
    [NullableContextAttribute("2")]
public virtual IRawElementProviderFragment Navigate(NavigateDirection direction);
    public sealed virtual void SetFocus();
    [NullableContextAttribute("2")]
public static AutomationNode GetOrCreate(AutomationPeer peer);
    public static void Release(AutomationPeer peer);
    private sealed virtual override IRawElementProviderSimple[] Avalonia.Win32.Interop.Automation.IRawElementProviderFragment.GetEmbeddedFragmentRoots();
    private sealed virtual override void Avalonia.Win32.Interop.Automation.IRawElementProviderSimple2.ShowContextMenu();
    private sealed virtual override void Avalonia.Win32.Interop.Automation.IInvokeProvider.Invoke();
    protected void InvokeSync(Action action);
    protected T InvokeSync(Func`1<T> func);
    protected void InvokeSync(Action`1<TInterface> action);
    protected TResult InvokeSync(Func`2<TInterface, TResult> func);
    protected void RaiseChildrenChanged();
    [NullableContextAttribute("2")]
protected void RaiseFocusChanged(AutomationNode focused);
    [NullableContextAttribute("2")]
private RootAutomationNode GetRoot();
    private void OnPeerChildrenChanged(object sender, EventArgs e);
    private void OnPeerPropertyChanged(object sender, AutomationPropertyChangedEventArgs e);
    private void OnEmbeddedRootFocusChanged(object sender, EventArgs e);
    private static AutomationNode Create(AutomationPeer peer);
    private static UiaControlTypeId ToUiaControlType(AutomationControlType role);
    private sealed virtual override ExpandCollapseState Avalonia.Win32.Interop.Automation.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override void Avalonia.Win32.Interop.Automation.IExpandCollapseProvider.Expand();
    private sealed virtual override void Avalonia.Win32.Interop.Automation.IExpandCollapseProvider.Collapse();
    private sealed virtual override double Avalonia.Win32.Interop.Automation.IRangeValueProvider.get_Value();
    private sealed virtual override bool Avalonia.Win32.Interop.Automation.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double Avalonia.Win32.Interop.Automation.IRangeValueProvider.get_Maximum();
    private sealed virtual override double Avalonia.Win32.Interop.Automation.IRangeValueProvider.get_Minimum();
    private sealed virtual override double Avalonia.Win32.Interop.Automation.IRangeValueProvider.get_LargeChange();
    private sealed virtual override double Avalonia.Win32.Interop.Automation.IRangeValueProvider.get_SmallChange();
    public sealed virtual void SetValue(double value);
    private sealed virtual override bool Avalonia.Win32.Interop.Automation.IScrollProvider.get_HorizontallyScrollable();
    private sealed virtual override double Avalonia.Win32.Interop.Automation.IScrollProvider.get_HorizontalScrollPercent();
    private sealed virtual override double Avalonia.Win32.Interop.Automation.IScrollProvider.get_HorizontalViewSize();
    private sealed virtual override bool Avalonia.Win32.Interop.Automation.IScrollProvider.get_VerticallyScrollable();
    private sealed virtual override double Avalonia.Win32.Interop.Automation.IScrollProvider.get_VerticalScrollPercent();
    private sealed virtual override double Avalonia.Win32.Interop.Automation.IScrollProvider.get_VerticalViewSize();
    private sealed virtual override void Avalonia.Win32.Interop.Automation.IScrollProvider.Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    private sealed virtual override void Avalonia.Win32.Interop.Automation.IScrollProvider.SetScrollPercent(double horizontalPercent, double verticalPercent);
    private sealed virtual override void Avalonia.Win32.Interop.Automation.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override bool Avalonia.Win32.Interop.Automation.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool Avalonia.Win32.Interop.Automation.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override bool Avalonia.Win32.Interop.Automation.ISelectionItemProvider.get_IsSelected();
    [NullableContextAttribute("2")]
private sealed virtual override IRawElementProviderSimple Avalonia.Win32.Interop.Automation.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override IRawElementProviderSimple[] Avalonia.Win32.Interop.Automation.ISelectionProvider.GetSelection();
    private sealed virtual override void Avalonia.Win32.Interop.Automation.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void Avalonia.Win32.Interop.Automation.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void Avalonia.Win32.Interop.Automation.ISelectionItemProvider.Select();
    private sealed virtual override ToggleState Avalonia.Win32.Interop.Automation.IToggleProvider.get_ToggleState();
    private sealed virtual override void Avalonia.Win32.Interop.Automation.IToggleProvider.Toggle();
    private sealed virtual override bool Avalonia.Win32.Interop.Automation.IValueProvider.get_IsReadOnly();
    [NullableContextAttribute("2")]
private sealed virtual override string Avalonia.Win32.Interop.Automation.IValueProvider.get_Value();
    [NullableContextAttribute("2")]
private sealed virtual override void Avalonia.Win32.Interop.Automation.IValueProvider.SetValue(string value);
    [CompilerGeneratedAttribute]
private Rect <get_BoundingRectangle>b__9_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RootAutomationNode <get_FragmentRoot>b__11_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private AutomationNode <GetPatternProvider>g__ThisIfPeerImplementsProvider|16_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetPropertyValue>b__17_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetPropertyValue>b__17_1();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetPropertyValue>b__17_2();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetPropertyValue>b__17_3();
    [CompilerGeneratedAttribute]
private UiaControlTypeId <GetPropertyValue>b__17_4();
    [CompilerGeneratedAttribute]
private bool <GetPropertyValue>b__17_5();
    [CompilerGeneratedAttribute]
private bool <GetPropertyValue>b__17_6();
    [CompilerGeneratedAttribute]
private bool <GetPropertyValue>b__17_7();
    [CompilerGeneratedAttribute]
private bool <GetPropertyValue>b__17_8();
    [CompilerGeneratedAttribute]
private bool <GetPropertyValue>b__17_9();
    [CompilerGeneratedAttribute]
private bool <GetPropertyValue>b__17_10();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetPropertyValue>b__17_11();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetPropertyValue>b__17_12();
    [CompilerGeneratedAttribute]
private void <SetFocus>b__20_0();
    [CompilerGeneratedAttribute]
private bool <Avalonia.Win32.Interop.Automation.IRawElementProviderSimple2.ShowContextMenu>b__24_0();
    [CompilerGeneratedAttribute]
private void <Avalonia.Win32.Interop.Automation.IScrollItemProvider.ScrollIntoView>b__69_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("Requires .NET COM interop")]
internal class Avalonia.Win32.Automation.InteropAutomationNode : AutomationNode {
    private IntPtr _handle;
    public Rect BoundingRectangle { get; }
    public IRawElementProviderFragmentRoot FragmentRoot { get; }
    public ProviderOptions ProviderOptions { get; }
    public IRawElementProviderSimple HostRawElementProvider { get; }
    [NullableContextAttribute("1")]
public InteropAutomationNode(InteropAutomationPeer peer);
    public virtual Rect get_BoundingRectangle();
    public virtual IRawElementProviderFragmentRoot get_FragmentRoot();
    public virtual ProviderOptions get_ProviderOptions();
    public virtual object GetPatternProvider(int patternId);
    public virtual object GetPropertyValue(int propertyId);
    public virtual IRawElementProviderSimple get_HostRawElementProvider();
    public virtual IRawElementProviderFragment Navigate(NavigateDirection direction);
    public sealed virtual IRawElementProviderFragment ElementProviderFromPoint(double x, double y);
    public sealed virtual IRawElementProviderFragment GetFocus();
    public sealed virtual IRawElementProviderSimple[] GetEmbeddedFragmentRoots();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("Requires .NET COM interop")]
internal class Avalonia.Win32.Automation.RootAutomationNode : AutomationNode {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IRootProvider <Peer>k__BackingField;
    public IRawElementProviderFragmentRoot FragmentRoot { get; }
    [NullableAttribute("1")]
public IRootProvider Peer { get; }
    public IWindowBaseImpl WindowImpl { get; }
    public IRawElementProviderSimple HostRawElementProvider { get; }
    [NullableContextAttribute("1")]
public RootAutomationNode(AutomationPeer peer);
    public virtual IRawElementProviderFragmentRoot get_FragmentRoot();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IRootProvider get_Peer();
    public IWindowBaseImpl get_WindowImpl();
    public sealed virtual IRawElementProviderFragment ElementProviderFromPoint(double x, double y);
    public sealed virtual IRawElementProviderFragment GetFocus();
    public Rect ToScreen(Rect rect);
    public virtual IRawElementProviderSimple get_HostRawElementProvider();
    [NullableContextAttribute("1")]
private void OnRootFocusChanged(object sender, EventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private AutomationPeer <GetFocus>b__9_0();
}
internal enum Avalonia.Win32.BlurEffect : Enum {
    public int value__;
    public static BlurEffect None;
    public static BlurEffect GaussianBlur;
    public static BlurEffect Acrylic;
    public static BlurEffect MicaLight;
    public static BlurEffect MicaDark;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Win32.ClipboardFormats : object {
    private static int MAX_FORMAT_NAME_LENGTH;
    private static List`1<ClipboardFormat> s_formatList;
    private static ClipboardFormats();
    [NullableContextAttribute("2")]
private static string QueryFormatName(ushort format);
    public static string GetFormat(ushort format);
    public static ushort GetFormat(string format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.ClipboardImpl : object {
    private static int OleRetryCount;
    private static int OleRetryDelay;
    [AsyncStateMachineAttribute("Avalonia.Win32.ClipboardImpl/<OpenClipboard>d__2")]
private static Task`1<IDisposable> OpenClipboard();
    [AsyncStateMachineAttribute("Avalonia.Win32.ClipboardImpl/<GetTextAsync>d__3")]
public sealed virtual Task`1<string> GetTextAsync();
    [AsyncStateMachineAttribute("Avalonia.Win32.ClipboardImpl/<SetTextAsync>d__4")]
public sealed virtual Task SetTextAsync(string text);
    [AsyncStateMachineAttribute("Avalonia.Win32.ClipboardImpl/<ClearAsync>d__5")]
public sealed virtual Task ClearAsync();
    [AsyncStateMachineAttribute("Avalonia.Win32.ClipboardImpl/<SetDataObjectAsync>d__6")]
public sealed virtual Task SetDataObjectAsync(IDataObject data);
    [AsyncStateMachineAttribute("Avalonia.Win32.ClipboardImpl/<GetFormatsAsync>d__7")]
public sealed virtual Task`1<String[]> GetFormatsAsync();
    [AsyncStateMachineAttribute("Avalonia.Win32.ClipboardImpl/<GetDataAsync>d__8")]
public sealed virtual Task`1<object> GetDataAsync(string format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.CursorFactory : object {
    [CompilerGeneratedAttribute]
private static CursorFactory <Instance>k__BackingField;
    private static Dictionary`2<StandardCursorType, int> CursorTypeMapping;
    private static Dictionary`2<StandardCursorType, CursorImpl> Cache;
    public static CursorFactory Instance { get; }
    private static CursorFactory();
    [CompilerGeneratedAttribute]
public static CursorFactory get_Instance();
    private static void LoadModuleCursor(StandardCursorType cursorType, string module, int id);
    public sealed virtual ICursorImpl GetCursor(StandardCursorType cursorType);
    public sealed virtual ICursorImpl CreateCursor(IBitmapImpl cursor, PixelPoint hotSpot);
}
internal class Avalonia.Win32.CursorImpl : object {
    [NullableAttribute("2")]
private Win32Icon _icon;
    [CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    public IntPtr Handle { get; private set; }
    [NullableAttribute("1")]
public string HandleDescriptor { get; }
    [NullableContextAttribute("1")]
public CursorImpl(Win32Icon icon);
    public CursorImpl(IntPtr handle);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(IntPtr value);
    [NullableContextAttribute("1")]
public sealed virtual string get_HandleDescriptor();
    public sealed virtual void Dispose();
}
internal class Avalonia.Win32.DataObject : CallbackBase {
    [NullableAttribute("1")]
internal static Byte[] SerializedObjectGUID;
    private static UInt32 DV_E_TYMED;
    private static UInt32 DV_E_DVASPECT;
    private static UInt32 DV_E_FORMATETC;
    private static UInt32 OLE_E_ADVISENOTSUPPORTED;
    private static UInt32 STG_E_MEDIUMFULL;
    private static int GMEM_ZEROINIT;
    private static int GMEM_MOVEABLE;
    [NullableAttribute("1")]
private IDataObject _wrapped;
    [NullableAttribute("1")]
public IDataObject Wrapped { get; }
    [NullableContextAttribute("1")]
public DataObject(IDataObject wrapped);
    private static DataObject();
    [NullableContextAttribute("1")]
public IDataObject get_Wrapped();
    [NullableContextAttribute("1")]
private sealed virtual override bool Avalonia.Input.IDataObject.Contains(string dataFormat);
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerable`1<string> Avalonia.Input.IDataObject.GetDataFormats();
    [NullableContextAttribute("1")]
private sealed virtual override object Avalonia.Input.IDataObject.Get(string dataFormat);
    private sealed virtual override int Avalonia.Win32.Win32Com.IDataObject.DAdvise(FORMATETC* pFormatetc, int advf, Void* adviseSink);
    private sealed virtual override void Avalonia.Win32.Win32Com.IDataObject.DUnadvise(int connection);
    private sealed virtual override Void* Avalonia.Win32.Win32Com.IDataObject.EnumDAdvise();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumFORMATETC Avalonia.Win32.Win32Com.IDataObject.EnumFormatEtc(int direction);
    private sealed virtual override FORMATETC Avalonia.Win32.Win32Com.IDataObject.GetCanonicalFormatEtc(FORMATETC* formatIn);
    private sealed virtual override UInt32 Avalonia.Win32.Win32Com.IDataObject.GetData(FORMATETC* format, STGMEDIUM* medium);
    private sealed virtual override UInt32 Avalonia.Win32.Win32Com.IDataObject.GetDataHere(FORMATETC* format, STGMEDIUM* medium);
    private sealed virtual override UInt32 Avalonia.Win32.Win32Com.IDataObject.QueryGetData(FORMATETC* format);
    private sealed virtual override UInt32 Avalonia.Win32.Win32Com.IDataObject.SetData(FORMATETC* pformatetc, STGMEDIUM* pmedium, int fRelease);
    [NullableContextAttribute("1")]
private UInt32 WriteDataToHGlobal(string dataFormat, IntPtr& hGlobal);
    [NullableContextAttribute("1")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
private static Byte[] SerializeObject(object data);
    private static UInt32 WriteBytesToHGlobal(IntPtr& hGlobal, ReadOnlySpan`1<byte> data);
    [NullableContextAttribute("1")]
private static UInt32 WriteFileListToHGlobal(IntPtr& hGlobal, IEnumerable`1<string> files);
    [NullableContextAttribute("1")]
private static UInt32 WriteStringToHGlobal(IntPtr& hGlobal, string data);
    protected virtual void Destroyed();
    public void ReleaseWrapped();
}
internal class Avalonia.Win32.DComposition.DCOMPOSITION_FRAME_STATISTICS : ValueType {
    public long lastFrameTime;
    public DXGI_RATIONAL currentCompositionRate;
    public long currentTime;
    public long timeFrequency;
    public long nextEstimatedFrameTime;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.DComposition.DirectCompositedWindow : object {
    private DirectCompositionShared _shared;
    [CompilerGeneratedAttribute]
private IEglWindowGlPlatformSurfaceInfo <WindowInfo>k__BackingField;
    private IDCompositionVisual _container;
    private IDCompositionTarget _target;
    private IDCompositionDevice2 _device;
    public IEglWindowGlPlatformSurfaceInfo WindowInfo { get; }
    public DirectCompositedWindow(IEglWindowGlPlatformSurfaceInfo info, DirectCompositionShared shared);
    [CompilerGeneratedAttribute]
public IEglWindowGlPlatformSurfaceInfo get_WindowInfo();
    public sealed virtual void Dispose();
    public void SetSurface(IDCompositionSurface surface);
    public IDisposable BeginTransaction();
    [CompilerGeneratedAttribute]
private void <BeginTransaction>b__10_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.DComposition.DirectCompositedWindowRenderTarget : object {
    private static Guid IID_ID3D11Texture2D;
    private IPlatformGraphicsContext _context;
    private DirectCompositedWindow _window;
    private IDCompositionVirtualSurface _surface;
    private bool _lost;
    private PixelSize _size;
    private IUnknown _d3dDevice;
    public bool IsCorrupted { get; }
    public DirectCompositedWindowRenderTarget(IPlatformGraphicsContext context, IntPtr d3dDevice, DirectCompositionShared shared, DirectCompositedWindow window);
    private static DirectCompositedWindowRenderTarget();
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsCorrupted();
    public sealed virtual IDirect3D11TextureRenderTargetRenderSession BeginDraw();
}
internal class Avalonia.Win32.DComposition.DirectCompositedWindowSurface : object {
    [NullableAttribute("1")]
private IEglWindowGlPlatformSurfaceInfo _info;
    [NullableAttribute("1")]
private DirectCompositionShared _shared;
    [NullableAttribute("2")]
private DirectCompositedWindow _window;
    private BlurEffect _blurEffect;
    [NullableContextAttribute("1")]
public DirectCompositedWindowSurface(DirectCompositionShared shared, IEglWindowGlPlatformSurfaceInfo info);
    [NullableContextAttribute("1")]
public sealed virtual IDirect3D11TextureRenderTarget CreateRenderTarget(IPlatformGraphicsContext context, IntPtr d3dDevice);
    public sealed virtual void Dispose();
    public sealed virtual bool IsBlurSupported(BlurEffect effect);
    public sealed virtual void SetBlur(BlurEffect enable);
}
internal class Avalonia.Win32.DComposition.DirectCompositionConnection : object {
    private static Guid IID_IDCompositionDesktopDevice;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action`1<TimeSpan> Tick;
    [NullableAttribute("1")]
private DirectCompositionShared _shared;
    public bool RunsInBackground { get; }
    public bool RequiresNoRedirectionBitmap { get; }
    [NullableContextAttribute("1")]
public DirectCompositionConnection(DirectCompositionShared shared);
    private static DirectCompositionConnection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_Tick(Action`1<TimeSpan> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_Tick(Action`1<TimeSpan> value);
    public sealed virtual bool get_RunsInBackground();
    private static bool TryCreateAndRegisterCore();
    private void RunLoop();
    public static bool IsSupported();
    public static bool TryCreateAndRegister();
    public sealed virtual bool get_RequiresNoRedirectionBitmap();
    [NullableContextAttribute("1")]
public sealed virtual object CreateSurface(IEglWindowGlPlatformSurfaceInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.DComposition.DirectCompositionShared : object {
    [CompilerGeneratedAttribute]
private object <SyncRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private IDCompositionDesktopDevice <Device>k__BackingField;
    public object SyncRoot { get; }
    public IDCompositionDesktopDevice Device { get; }
    public DirectCompositionShared(IDCompositionDesktopDevice device);
    [CompilerGeneratedAttribute]
public object get_SyncRoot();
    [CompilerGeneratedAttribute]
public IDCompositionDesktopDevice get_Device();
    public sealed virtual void Dispose();
}
internal class Avalonia.Win32.DComposition.DXGI_RATIONAL : ValueType {
    public UInt32 Numerator;
    public UInt32 Denominator;
}
internal interface Avalonia.Win32.DComposition.IDCompositionDesktopDevice {
    public abstract virtual IDCompositionVisual CreateTargetForHwnd(IntPtr hwnd, bool topmost);
    public abstract virtual IUnknown CreateSurfaceFromHandle(IntPtr handle);
    public abstract virtual IUnknown CreateSurfaceFromHwnd(IntPtr hwnd);
}
internal interface Avalonia.Win32.DComposition.IDCompositionDevice {
    public abstract virtual void Commit();
    public abstract virtual void WaitForCommitCompletion();
    public abstract virtual void GetFrameStatistics(DCOMPOSITION_FRAME_STATISTICS* statistics);
    public abstract virtual IDCompositionVisual CreateTargetForHwnd(IntPtr hwnd, bool topmost);
    public abstract virtual IDCompositionVisual CreateVisual();
    public abstract virtual IDCompositionSurface CreateSurface(ushort width, ushort height, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public abstract virtual IDCompositionVirtualSurface CreateVirtualSurface(ushort initialWidth, ushort initialHeight, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public abstract virtual IUnknown CreateSurfaceFromHandle(IntPtr handle);
    public abstract virtual IUnknown CreateSurfaceFromHwnd(IntPtr hwnd);
    public abstract virtual Void* CreateTranslateTransform();
    public abstract virtual Void* CreateScaleTransform();
    public abstract virtual Void* CreateRotateTransform();
    public abstract virtual Void* CreateSkewTransform();
    public abstract virtual Void* CreateMatrixTransform();
    public abstract virtual Void* CreateTransformGroup(Void* transforms, int elements);
    public abstract virtual Void* CreateTranslateTransform3D();
    public abstract virtual Void* CreateScaleTransform3D();
    public abstract virtual Void* CreateRotateTransform3D();
    public abstract virtual Void* CreateMatrixTransform3D();
    public abstract virtual Void* CreateTransform3DGroup(Void* transforms3D, int elements);
    public abstract virtual Void* CreateEffectGroup();
    public abstract virtual Void* CreateRectangleClip();
    public abstract virtual Void* CreateAnimation();
    public abstract virtual int CheckDeviceState();
}
internal interface Avalonia.Win32.DComposition.IDCompositionDevice2 {
    public abstract virtual void Commit();
    public abstract virtual void WaitForCommitCompletion();
    public abstract virtual void GetFrameStatistics(DCOMPOSITION_FRAME_STATISTICS* statistics);
    public abstract virtual IDCompositionVisual CreateVisual();
    public abstract virtual IDCompositionSurfaceFactory CreateSurfaceFactory(IUnknown renderingDevice);
    public abstract virtual IDCompositionSurface CreateSurface(ushort width, ushort height, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public abstract virtual IDCompositionVirtualSurface CreateVirtualSurface(ushort initialWidth, ushort initialHeight, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public abstract virtual Void* CreateTranslateTransform();
    public abstract virtual Void* CreateScaleTransform();
    public abstract virtual Void* CreateRotateTransform();
    public abstract virtual Void* CreateSkewTransform();
    public abstract virtual Void* CreateMatrixTransform();
    public abstract virtual Void* CreateTransformGroup(Void* transforms, int elements);
    public abstract virtual Void* CreateTranslateTransform3D();
    public abstract virtual Void* CreateScaleTransform3D();
    public abstract virtual Void* CreateRotateTransform3D();
    public abstract virtual Void* CreateMatrixTransform3D();
    public abstract virtual Void* CreateTransform3DGroup(Void* transforms3D, int elements);
    public abstract virtual Void* CreateEffectGroup();
    public abstract virtual Void* CreateRectangleClip();
    public abstract virtual Void* CreateAnimation();
}
internal interface Avalonia.Win32.DComposition.IDCompositionDevice3 {
    public abstract virtual Void* CreateGaussianBlurEffect();
}
internal interface Avalonia.Win32.DComposition.IDCompositionSurface {
    public abstract virtual POINT BeginDraw(RECT* updateRect, Guid* iid, Void** updateObject);
    public abstract virtual void EndDraw();
    public abstract virtual void SuspendDraw();
    public abstract virtual void ResumeDraw();
    public abstract virtual void Scroll(RECT* scrollRect, RECT* clipRect, int offsetX, int offsetY);
}
internal interface Avalonia.Win32.DComposition.IDCompositionSurfaceFactory {
    public abstract virtual IDCompositionSurface CreateSurface(ushort width, ushort height, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public abstract virtual IDCompositionVirtualSurface CreateVirtualSurface(ushort initialWidth, ushort initialHeight, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
}
internal interface Avalonia.Win32.DComposition.IDCompositionTarget {
    public abstract virtual void SetRoot(IDCompositionVisual visual);
}
internal interface Avalonia.Win32.DComposition.IDCompositionVirtualSurface {
    public abstract virtual void Resize(ushort width, ushort height);
    public abstract virtual void Trim(Void* rectangles, int count);
}
internal interface Avalonia.Win32.DComposition.IDCompositionVisual {
    public abstract virtual void SetOffsetX_IDCompositionAnimation(Void* animation);
    public abstract virtual void SetOffsetX(float offsetX);
    public abstract virtual void SetOffsetY_IDCompositionAnimation(Void* animation);
    public abstract virtual void SetOffsetY(float offsetY);
    public abstract virtual void SetTransform_IDCompositionTransform(Void* transform);
    public abstract virtual void SetTransform(Void* matrix);
    public abstract virtual void SetTransformParent(IDCompositionVisual visual);
    public abstract virtual void SetEffect(Void* effect);
    public abstract virtual void SetBitmapInterpolationMode(int interpolationMode);
    public abstract virtual void SetBorderMode(int borderMode);
    public abstract virtual void SetClip_IDCompositionClip(Void* clip);
    public abstract virtual void SetClip(Void* rect);
    public abstract virtual void SetContent(IUnknown content);
    public abstract virtual void AddVisual(IDCompositionVisual visual, int insertAbove, IDCompositionVisual referenceVisual);
    public abstract virtual void RemoveVisual(IDCompositionVisual visual);
    public abstract virtual void RemoveAllVisuals();
    public abstract virtual void SetCompositeMode(int compositeMode);
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionDesktopDeviceProxy : __MicroComIDCompositionDevice2Proxy {
    protected int VTableSize { get; }
    protected __MicroComIDCompositionDesktopDeviceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IDCompositionVisual CreateTargetForHwnd(IntPtr hwnd, bool topmost);
    public sealed virtual IUnknown CreateSurfaceFromHandle(IntPtr handle);
    public sealed virtual IUnknown CreateSurfaceFromHwnd(IntPtr hwnd);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionDesktopDeviceVTable : __MicroComIDCompositionDevice2VTable {
    private static int CreateTargetForHwnd(Void* this, IntPtr hwnd, bool topmost, Void** target);
    private static int CreateSurfaceFromHandle(Void* this, IntPtr handle, Void** surface);
    private static int CreateSurfaceFromHwnd(Void* this, IntPtr hwnd, Void** surface);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionDevice2Proxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDCompositionDevice2Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void Commit();
    public sealed virtual void WaitForCommitCompletion();
    public sealed virtual void GetFrameStatistics(DCOMPOSITION_FRAME_STATISTICS* statistics);
    public sealed virtual IDCompositionVisual CreateVisual();
    public sealed virtual IDCompositionSurfaceFactory CreateSurfaceFactory(IUnknown renderingDevice);
    public sealed virtual IDCompositionSurface CreateSurface(ushort width, ushort height, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public sealed virtual IDCompositionVirtualSurface CreateVirtualSurface(ushort initialWidth, ushort initialHeight, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public sealed virtual Void* CreateTranslateTransform();
    public sealed virtual Void* CreateScaleTransform();
    public sealed virtual Void* CreateRotateTransform();
    public sealed virtual Void* CreateSkewTransform();
    public sealed virtual Void* CreateMatrixTransform();
    public sealed virtual Void* CreateTransformGroup(Void* transforms, int elements);
    public sealed virtual Void* CreateTranslateTransform3D();
    public sealed virtual Void* CreateScaleTransform3D();
    public sealed virtual Void* CreateRotateTransform3D();
    public sealed virtual Void* CreateMatrixTransform3D();
    public sealed virtual Void* CreateTransform3DGroup(Void* transforms3D, int elements);
    public sealed virtual Void* CreateEffectGroup();
    public sealed virtual Void* CreateRectangleClip();
    public sealed virtual Void* CreateAnimation();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionDevice2VTable : MicroComVtblBase {
    private static int Commit(Void* this);
    private static int WaitForCommitCompletion(Void* this);
    private static int GetFrameStatistics(Void* this, DCOMPOSITION_FRAME_STATISTICS* statistics);
    private static int CreateVisual(Void* this, Void** visual);
    private static int CreateSurfaceFactory(Void* this, Void* renderingDevice, Void** surfaceFactory);
    private static int CreateSurface(Void* this, ushort width, ushort height, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode, Void** surface);
    private static int CreateVirtualSurface(Void* this, ushort initialWidth, ushort initialHeight, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode, Void** virtualSurface);
    private static int CreateTranslateTransform(Void* this, Void** translateTransform);
    private static int CreateScaleTransform(Void* this, Void** scaleTransform);
    private static int CreateRotateTransform(Void* this, Void** rotateTransform);
    private static int CreateSkewTransform(Void* this, Void** skewTransform);
    private static int CreateMatrixTransform(Void* this, Void** matrixTransform);
    private static int CreateTransformGroup(Void* this, Void* transforms, int elements, Void** transformGroup);
    private static int CreateTranslateTransform3D(Void* this, Void** translateTransform3D);
    private static int CreateScaleTransform3D(Void* this, Void** scaleTransform3D);
    private static int CreateRotateTransform3D(Void* this, Void** rotateTransform3D);
    private static int CreateMatrixTransform3D(Void* this, Void** matrixTransform3D);
    private static int CreateTransform3DGroup(Void* this, Void* transforms3D, int elements, Void** transform3DGroup);
    private static int CreateEffectGroup(Void* this, Void** effectGroup);
    private static int CreateRectangleClip(Void* this, Void** clip);
    private static int CreateAnimation(Void* this, Void** animation);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionDevice3Proxy : __MicroComIDCompositionDevice2Proxy {
    protected int VTableSize { get; }
    protected __MicroComIDCompositionDevice3Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Void* CreateGaussianBlurEffect();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionDevice3VTable : __MicroComIDCompositionDevice2VTable {
    private static int CreateGaussianBlurEffect(Void* this, Void** gaussianBlurEffect);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionDeviceProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDCompositionDeviceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void Commit();
    public sealed virtual void WaitForCommitCompletion();
    public sealed virtual void GetFrameStatistics(DCOMPOSITION_FRAME_STATISTICS* statistics);
    public sealed virtual IDCompositionVisual CreateTargetForHwnd(IntPtr hwnd, bool topmost);
    public sealed virtual IDCompositionVisual CreateVisual();
    public sealed virtual IDCompositionSurface CreateSurface(ushort width, ushort height, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public sealed virtual IDCompositionVirtualSurface CreateVirtualSurface(ushort initialWidth, ushort initialHeight, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public sealed virtual IUnknown CreateSurfaceFromHandle(IntPtr handle);
    public sealed virtual IUnknown CreateSurfaceFromHwnd(IntPtr hwnd);
    public sealed virtual Void* CreateTranslateTransform();
    public sealed virtual Void* CreateScaleTransform();
    public sealed virtual Void* CreateRotateTransform();
    public sealed virtual Void* CreateSkewTransform();
    public sealed virtual Void* CreateMatrixTransform();
    public sealed virtual Void* CreateTransformGroup(Void* transforms, int elements);
    public sealed virtual Void* CreateTranslateTransform3D();
    public sealed virtual Void* CreateScaleTransform3D();
    public sealed virtual Void* CreateRotateTransform3D();
    public sealed virtual Void* CreateMatrixTransform3D();
    public sealed virtual Void* CreateTransform3DGroup(Void* transforms3D, int elements);
    public sealed virtual Void* CreateEffectGroup();
    public sealed virtual Void* CreateRectangleClip();
    public sealed virtual Void* CreateAnimation();
    public sealed virtual int CheckDeviceState();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionDeviceVTable : MicroComVtblBase {
    private static int Commit(Void* this);
    private static int WaitForCommitCompletion(Void* this);
    private static int GetFrameStatistics(Void* this, DCOMPOSITION_FRAME_STATISTICS* statistics);
    private static int CreateTargetForHwnd(Void* this, IntPtr hwnd, bool topmost, Void** target);
    private static int CreateVisual(Void* this, Void** visual);
    private static int CreateSurface(Void* this, ushort width, ushort height, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode, Void** surface);
    private static int CreateVirtualSurface(Void* this, ushort initialWidth, ushort initialHeight, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode, Void** virtualSurface);
    private static int CreateSurfaceFromHandle(Void* this, IntPtr handle, Void** surface);
    private static int CreateSurfaceFromHwnd(Void* this, IntPtr hwnd, Void** surface);
    private static int CreateTranslateTransform(Void* this, Void** translateTransform);
    private static int CreateScaleTransform(Void* this, Void** scaleTransform);
    private static int CreateRotateTransform(Void* this, Void** rotateTransform);
    private static int CreateSkewTransform(Void* this, Void** skewTransform);
    private static int CreateMatrixTransform(Void* this, Void** matrixTransform);
    private static int CreateTransformGroup(Void* this, Void* transforms, int elements, Void** transformGroup);
    private static int CreateTranslateTransform3D(Void* this, Void** translateTransform3D);
    private static int CreateScaleTransform3D(Void* this, Void** scaleTransform3D);
    private static int CreateRotateTransform3D(Void* this, Void** rotateTransform3D);
    private static int CreateMatrixTransform3D(Void* this, Void** matrixTransform3D);
    private static int CreateTransform3DGroup(Void* this, Void* transforms3D, int elements, Void** transform3DGroup);
    private static int CreateEffectGroup(Void* this, Void** effectGroup);
    private static int CreateRectangleClip(Void* this, Void** clip);
    private static int CreateAnimation(Void* this, Void** animation);
    private static int CheckDeviceState(Void* this, Int32* pfValid);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionSurfaceFactoryProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDCompositionSurfaceFactoryProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IDCompositionSurface CreateSurface(ushort width, ushort height, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    public sealed virtual IDCompositionVirtualSurface CreateVirtualSurface(ushort initialWidth, ushort initialHeight, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionSurfaceFactoryVTable : MicroComVtblBase {
    private static int CreateSurface(Void* this, ushort width, ushort height, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode, Void** surface);
    private static int CreateVirtualSurface(Void* this, ushort initialWidth, ushort initialHeight, DXGI_FORMAT pixelFormat, DXGI_ALPHA_MODE alphaMode, Void** virtualSurface);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionSurfaceProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDCompositionSurfaceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual POINT BeginDraw(RECT* updateRect, Guid* iid, Void** updateObject);
    public sealed virtual void EndDraw();
    public sealed virtual void SuspendDraw();
    public sealed virtual void ResumeDraw();
    public sealed virtual void Scroll(RECT* scrollRect, RECT* clipRect, int offsetX, int offsetY);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionSurfaceVTable : MicroComVtblBase {
    private static int BeginDraw(Void* this, RECT* updateRect, Guid* iid, Void** updateObject, POINT* updateOffset);
    private static int EndDraw(Void* this);
    private static int SuspendDraw(Void* this);
    private static int ResumeDraw(Void* this);
    private static int Scroll(Void* this, RECT* scrollRect, RECT* clipRect, int offsetX, int offsetY);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionTargetProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDCompositionTargetProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void SetRoot(IDCompositionVisual visual);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionTargetVTable : MicroComVtblBase {
    private static int SetRoot(Void* this, Void* visual);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionVirtualSurfaceProxy : __MicroComIDCompositionSurfaceProxy {
    protected int VTableSize { get; }
    protected __MicroComIDCompositionVirtualSurfaceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void Resize(ushort width, ushort height);
    public sealed virtual void Trim(Void* rectangles, int count);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionVirtualSurfaceVTable : __MicroComIDCompositionSurfaceVTable {
    private static int Resize(Void* this, ushort width, ushort height);
    private static int Trim(Void* this, Void* rectangles, int count);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionVisualProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDCompositionVisualProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void SetOffsetX_IDCompositionAnimation(Void* animation);
    public sealed virtual void SetOffsetX(float offsetX);
    public sealed virtual void SetOffsetY_IDCompositionAnimation(Void* animation);
    public sealed virtual void SetOffsetY(float offsetY);
    public sealed virtual void SetTransform_IDCompositionTransform(Void* transform);
    public sealed virtual void SetTransform(Void* matrix);
    public sealed virtual void SetTransformParent(IDCompositionVisual visual);
    public sealed virtual void SetEffect(Void* effect);
    public sealed virtual void SetBitmapInterpolationMode(int interpolationMode);
    public sealed virtual void SetBorderMode(int borderMode);
    public sealed virtual void SetClip_IDCompositionClip(Void* clip);
    public sealed virtual void SetClip(Void* rect);
    public sealed virtual void SetContent(IUnknown content);
    public sealed virtual void AddVisual(IDCompositionVisual visual, int insertAbove, IDCompositionVisual referenceVisual);
    public sealed virtual void RemoveVisual(IDCompositionVisual visual);
    public sealed virtual void RemoveAllVisuals();
    public sealed virtual void SetCompositeMode(int compositeMode);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DComposition.Impl.__MicroComIDCompositionVisualVTable : MicroComVtblBase {
    private static int SetOffsetX_IDCompositionAnimation(Void* this, Void* animation);
    private static int SetOffsetX(Void* this, float offsetX);
    private static int SetOffsetY_IDCompositionAnimation(Void* this, Void* animation);
    private static int SetOffsetY(Void* this, float offsetY);
    private static int SetTransform_IDCompositionTransform(Void* this, Void* transform);
    private static int SetTransform(Void* this, Void* matrix);
    private static int SetTransformParent(Void* this, Void* visual);
    private static int SetEffect(Void* this, Void* effect);
    private static int SetBitmapInterpolationMode(Void* this, int interpolationMode);
    private static int SetBorderMode(Void* this, int borderMode);
    private static int SetClip_IDCompositionClip(Void* this, Void* clip);
    private static int SetClip(Void* this, Void* rect);
    private static int SetContent(Void* this, Void* content);
    private static int AddVisual(Void* this, Void* visual, int insertAbove, Void* referenceVisual);
    private static int RemoveVisual(Void* this, Void* visual);
    private static int RemoveAllVisuals(Void* this);
    private static int SetCompositeMode(Void* this, int compositeMode);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DComposition.NativeMethods : object {
    public static HRESULT DCompositionCreateDevice2(IntPtr renderingDevice, Guid iid, IntPtr& dcompositionDevice);
}
internal enum Avalonia.Win32.DirectX.D3D_DRIVER_TYPE : Enum {
    public int value__;
    public static D3D_DRIVER_TYPE D3D_DRIVER_TYPE_UNKNOWN;
    public static D3D_DRIVER_TYPE D3D_DRIVER_TYPE_HARDWARE;
    public static D3D_DRIVER_TYPE D3D_DRIVER_TYPE_REFERENCE;
    public static D3D_DRIVER_TYPE D3D_DRIVER_TYPE_NULL;
    public static D3D_DRIVER_TYPE D3D_DRIVER_TYPE_SOFTWARE;
    public static D3D_DRIVER_TYPE D3D_DRIVER_TYPE_WARP;
}
internal enum Avalonia.Win32.DirectX.D3D_FEATURE_LEVEL : Enum {
    public int value__;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_1_0_CORE;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_9_1;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_9_2;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_9_3;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_10_0;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_10_1;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_11_0;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_11_1;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_12_0;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_12_1;
    public static D3D_FEATURE_LEVEL D3D_FEATURE_LEVEL_12_2;
}
[FlagsAttribute]
internal enum Avalonia.Win32.DirectX.D3D11_BIND_FLAG : Enum {
    public int value__;
    public static D3D11_BIND_FLAG D3D11_BIND_VERTEX_BUFFER;
    public static D3D11_BIND_FLAG D3D11_BIND_INDEX_BUFFER;
    public static D3D11_BIND_FLAG D3D11_BIND_CONSTANT_BUFFER;
    public static D3D11_BIND_FLAG D3D11_BIND_SHADER_RESOURCE;
    public static D3D11_BIND_FLAG D3D11_BIND_STREAM_OUTPUT;
    public static D3D11_BIND_FLAG D3D11_BIND_RENDER_TARGET;
    public static D3D11_BIND_FLAG D3D11_BIND_DEPTH_STENCIL;
    public static D3D11_BIND_FLAG D3D11_BIND_UNORDERED_ACCESS;
    public static D3D11_BIND_FLAG D3D11_BIND_DECODER;
    public static D3D11_BIND_FLAG D3D11_BIND_VIDEO_ENCODER;
}
internal enum Avalonia.Win32.DirectX.D3D11_FEATURE : Enum {
    public int value__;
    public static D3D11_FEATURE D3D11_FEATURE_THREADING;
    public static D3D11_FEATURE D3D11_FEATURE_DOUBLES;
    public static D3D11_FEATURE D3D11_FEATURE_FORMAT_SUPPORT;
    public static D3D11_FEATURE D3D11_FEATURE_FORMAT_SUPPORT2;
    public static D3D11_FEATURE D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS;
    public static D3D11_FEATURE D3D11_FEATURE_D3D11_OPTIONS;
    public static D3D11_FEATURE D3D11_FEATURE_ARCHITECTURE_INFO;
    public static D3D11_FEATURE D3D11_FEATURE_D3D9_OPTIONS;
    public static D3D11_FEATURE D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT;
    public static D3D11_FEATURE D3D11_FEATURE_D3D9_SHADOW_SUPPORT;
    public static D3D11_FEATURE D3D11_FEATURE_D3D11_OPTIONS1;
    public static D3D11_FEATURE D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT;
    public static D3D11_FEATURE D3D11_FEATURE_MARKER_SUPPORT;
    public static D3D11_FEATURE D3D11_FEATURE_D3D9_OPTIONS1;
    public static D3D11_FEATURE D3D11_FEATURE_D3D11_OPTIONS2;
    public static D3D11_FEATURE D3D11_FEATURE_D3D11_OPTIONS3;
    public static D3D11_FEATURE D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT;
    public static D3D11_FEATURE D3D11_FEATURE_D3D11_OPTIONSS;
    public static D3D11_FEATURE D3D11_FEATURE_SHADER_CACHE;
}
internal enum Avalonia.Win32.DirectX.D3D11_RESOURCE_DIMENSION : Enum {
    public int value__;
    public static D3D11_RESOURCE_DIMENSION D3D11_USAGE_DEFAULT;
    public static D3D11_RESOURCE_DIMENSION D3D11_USAGE_IMMUTABLE;
    public static D3D11_RESOURCE_DIMENSION D3D11_USAGE_DYNAMIC;
    public static D3D11_RESOURCE_DIMENSION D3D11_USAGE_STAGING;
}
[FlagsAttribute]
internal enum Avalonia.Win32.DirectX.D3D11_RESOURCE_MISC_FLAG : Enum {
    public int value__;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_GENERATE_MIPS;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_SHARED;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_TEXTURECUBE;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_BUFFER_STRUCTURED;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_RESOURCE_CLAMP;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_GDI_COMPATIBLE;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_SHARED_NTHANDLE;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_RESTRICTED_CONTENT;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_GUARDED;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_TILE_POOL;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_TILED;
    public static D3D11_RESOURCE_MISC_FLAG D3D11_RESOURCE_MISC_HW_PROTECTED;
}
internal class Avalonia.Win32.DirectX.D3D11_TEXTURE2D_DESC : ValueType {
    public UInt32 Width;
    public UInt32 Height;
    public UInt32 MipLevels;
    public UInt32 ArraySize;
    public DXGI_FORMAT Format;
    public DXGI_SAMPLE_DESC SampleDesc;
    public D3D11_USAGE Usage;
    public D3D11_BIND_FLAG BindFlags;
    public UInt32 CPUAccessFlags;
    public D3D11_RESOURCE_MISC_FLAG MiscFlags;
}
internal enum Avalonia.Win32.DirectX.D3D11_USAGE : Enum {
    public int value__;
    public static D3D11_USAGE D3D11_USAGE_DEFAULT;
    public static D3D11_USAGE D3D11_USAGE_IMMUTABLE;
    public static D3D11_USAGE D3D11_USAGE_DYNAMIC;
    public static D3D11_USAGE D3D11_USAGE_STAGING;
}
internal class Avalonia.Win32.DirectX.DirectXUnmanagedMethods : object {
    internal static void CreateDXGIFactory(Guid& riid, Void*& ppFactory);
    internal static void CreateDXGIFactory1(Guid& riid, Void*& ppFactory);
    public static void D3D11CreateDevice(IntPtr adapter, D3D_DRIVER_TYPE DriverType, IntPtr Software, UInt32 Flags, D3D_FEATURE_LEVEL[] pFeatureLevels, UInt32 FeatureLevels, UInt32 SDKVersion, IntPtr& ppDevice, D3D_FEATURE_LEVEL& pFeatureLevel, IntPtr* ppImmediateContext);
}
internal class Avalonia.Win32.DirectX.DXGI_ADAPTER_DESC : ValueType {
    [FixedBufferAttribute("System.UInt16", "128")]
public <Description>e__FixedBuffer Description;
    public UInt32 VendorId;
    public UInt32 DeviceId;
    public UInt32 SubSysId;
    public UInt32 Revision;
    [NativeIntegerAttribute]
public UIntPtr DedicatedVideoMemory;
    [NativeIntegerAttribute]
public UIntPtr DedicatedSystemMemory;
    [NativeIntegerAttribute]
public UIntPtr SharedSystemMemory;
    public ulong AdapterLuid;
}
internal class Avalonia.Win32.DirectX.DXGI_ADAPTER_DESC1 : ValueType {
    [FixedBufferAttribute("System.UInt16", "128")]
public <Description>e__FixedBuffer Description;
    public UInt32 VendorId;
    public UInt32 DeviceId;
    public UInt32 SubSysId;
    public UInt32 Revision;
    [NativeIntegerAttribute]
public UIntPtr DedicatedVideoMemory;
    [NativeIntegerAttribute]
public UIntPtr DedicatedSystemMemory;
    [NativeIntegerAttribute]
public UIntPtr SharedSystemMemory;
    public ulong AdapterLuid;
    public UInt32 Flags;
}
internal enum Avalonia.Win32.DirectX.DXGI_ALPHA_MODE : Enum {
    public int value__;
    public static DXGI_ALPHA_MODE DXGI_ALPHA_MODE_UNSPECIFIED;
    public static DXGI_ALPHA_MODE DXGI_ALPHA_MODE_PREMULTIPLIED;
    public static DXGI_ALPHA_MODE DXGI_ALPHA_MODE_STRAIGHT;
    public static DXGI_ALPHA_MODE DXGI_ALPHA_MODE_IGNORE;
    public static DXGI_ALPHA_MODE DXGI_ALPHA_MODE_FORCE_DWORD;
}
internal enum Avalonia.Win32.DirectX.DXGI_ERROR : Enum {
    public UInt32 value__;
    public static DXGI_ERROR DXGI_ERROR_ACCESS_DENIED;
    public static DXGI_ERROR DXGI_ERROR_ACCESS_LOST;
    public static DXGI_ERROR DXGI_ERROR_ALREADY_EXISTS;
    public static DXGI_ERROR DXGI_ERROR_CANNOT_PROTECT_CONTENT;
    public static DXGI_ERROR DXGI_ERROR_DEVICE_HUNG;
    public static DXGI_ERROR DXGI_ERROR_DEVICE_REMOVED;
    public static DXGI_ERROR DXGI_ERROR_DEVICE_RESET;
    public static DXGI_ERROR DXGI_ERROR_DRIVER_INTERNAL_ERROR;
    public static DXGI_ERROR DXGI_ERROR_FRAME_STATISTICS_DISJOINT;
    public static DXGI_ERROR DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE;
    public static DXGI_ERROR DXGI_ERROR_INVALID_CALL;
    public static DXGI_ERROR DXGI_ERROR_MORE_DATA;
    public static DXGI_ERROR DXGI_ERROR_NAME_ALREADY_EXISTS;
    public static DXGI_ERROR DXGI_ERROR_NONEXCLUSIVE;
    public static DXGI_ERROR DXGI_ERROR_NOT_CURRENTLY_AVAILABLE;
    public static DXGI_ERROR DXGI_ERROR_NOT_FOUND;
    public static DXGI_ERROR DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED;
    public static DXGI_ERROR DXGI_ERROR_REMOTE_OUTOFMEMORY;
    public static DXGI_ERROR DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE;
    public static DXGI_ERROR DXGI_ERROR_SDK_COMPONENT_MISSING;
    public static DXGI_ERROR DXGI_ERROR_SESSION_DISCONNECTED;
    public static DXGI_ERROR DXGI_ERROR_UNSUPPORTED;
    public static DXGI_ERROR DXGI_ERROR_WAIT_TIMEOUT;
    public static DXGI_ERROR DXGI_ERROR_WAS_STILL_DRAWING;
}
internal enum Avalonia.Win32.DirectX.DXGI_FORMAT : Enum {
    public int value__;
    public static DXGI_FORMAT DXGI_FORMAT_UNKNOWN;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32B32A32_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32B32A32_FLOAT;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32B32A32_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32B32A32_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32B32_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32B32_FLOAT;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32B32_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32B32_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16B16A16_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16B16A16_FLOAT;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16B16A16_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16B16A16_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16B16A16_SNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16B16A16_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32_FLOAT;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R32G32_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_R32G8X24_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_D32_FLOAT_S8X24_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_X32_TYPELESS_G8X24_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R10G10B10A2_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R10G10B10A2_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R10G10B10A2_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R11G11B10_FLOAT;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8B8A8_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8B8A8_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8B8A8_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8B8A8_SNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8B8A8_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16_FLOAT;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16_SNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R16G16_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_R32_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_D32_FLOAT;
    public static DXGI_FORMAT DXGI_FORMAT_R32_FLOAT;
    public static DXGI_FORMAT DXGI_FORMAT_R32_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R32_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_R24G8_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_D24_UNORM_S8_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R24_UNORM_X8_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_X24_TYPELESS_G8_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8_SNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_R16_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R16_FLOAT;
    public static DXGI_FORMAT DXGI_FORMAT_D16_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R16_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R16_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R16_SNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R16_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_R8_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_R8_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R8_UINT;
    public static DXGI_FORMAT DXGI_FORMAT_R8_SNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R8_SINT;
    public static DXGI_FORMAT DXGI_FORMAT_A8_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R1_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R9G9B9E5_SHAREDEXP;
    public static DXGI_FORMAT DXGI_FORMAT_R8G8_B8G8_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_G8R8_G8B8_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_BC1_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_BC1_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_BC1_UNORM_SRGB;
    public static DXGI_FORMAT DXGI_FORMAT_BC2_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_BC2_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_BC2_UNORM_SRGB;
    public static DXGI_FORMAT DXGI_FORMAT_BC3_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_BC3_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_BC3_UNORM_SRGB;
    public static DXGI_FORMAT DXGI_FORMAT_BC4_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_BC4_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_BC4_SNORM;
    public static DXGI_FORMAT DXGI_FORMAT_BC5_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_BC5_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_BC5_SNORM;
    public static DXGI_FORMAT DXGI_FORMAT_B5G6R5_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_B5G5R5A1_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_B8G8R8A8_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_B8G8R8X8_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_B8G8R8A8_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_B8G8R8A8_UNORM_SRGB;
    public static DXGI_FORMAT DXGI_FORMAT_B8G8R8X8_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_B8G8R8X8_UNORM_SRGB;
    public static DXGI_FORMAT DXGI_FORMAT_BC6H_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_BC6H_UF16;
    public static DXGI_FORMAT DXGI_FORMAT_BC6H_SF16;
    public static DXGI_FORMAT DXGI_FORMAT_BC7_TYPELESS;
    public static DXGI_FORMAT DXGI_FORMAT_BC7_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_BC7_UNORM_SRGB;
    public static DXGI_FORMAT DXGI_FORMAT_AYUV;
    public static DXGI_FORMAT DXGI_FORMAT_Y410;
    public static DXGI_FORMAT DXGI_FORMAT_Y416;
    public static DXGI_FORMAT DXGI_FORMAT_NV12;
    public static DXGI_FORMAT DXGI_FORMAT_P010;
    public static DXGI_FORMAT DXGI_FORMAT_P016;
    public static DXGI_FORMAT DXGI_FORMAT_420_OPAQUE;
    public static DXGI_FORMAT DXGI_FORMAT_YUY2;
    public static DXGI_FORMAT DXGI_FORMAT_Y210;
    public static DXGI_FORMAT DXGI_FORMAT_Y216;
    public static DXGI_FORMAT DXGI_FORMAT_NV11;
    public static DXGI_FORMAT DXGI_FORMAT_AI44;
    public static DXGI_FORMAT DXGI_FORMAT_IA44;
    public static DXGI_FORMAT DXGI_FORMAT_P8;
    public static DXGI_FORMAT DXGI_FORMAT_A8P8;
    public static DXGI_FORMAT DXGI_FORMAT_B4G4R4A4_UNORM;
    public static DXGI_FORMAT DXGI_FORMAT_P208;
    public static DXGI_FORMAT DXGI_FORMAT_V208;
    public static DXGI_FORMAT DXGI_FORMAT_V408;
    public static DXGI_FORMAT DXGI_FORMAT_FORCE_UINT;
}
internal class Avalonia.Win32.DirectX.DXGI_FRAME_STATISTICS : ValueType {
    public UInt32 PresentCount;
    public UInt32 PresentRefreshCount;
    public UInt32 SyncRefreshCount;
    public ulong SyncQPCTime;
    public ulong SyncGPUTime;
}
internal class Avalonia.Win32.DirectX.DXGI_GAMMA_CONTROL_CAPABILITIES : ValueType {
    public int ScaleAndOffsetSupported;
    public float MaxConvertedValue;
    public float MinConvertedValue;
    public UInt32 NumGammaControlPoints;
    [FixedBufferAttribute("System.Single", "1025")]
public <ControlPointPositions>e__FixedBuffer ControlPointPositions;
}
internal class Avalonia.Win32.DirectX.DXGI_MAPPED_RECT : ValueType {
    public int Pitch;
    public Byte* pBits;
}
internal class Avalonia.Win32.DirectX.DXGI_MODE_DESC : ValueType {
    public ushort Width;
    public ushort Height;
    public DXGI_RATIONAL RefreshRate;
    public DXGI_FORMAT Format;
    public DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    public DXGI_MODE_SCALING Scaling;
}
internal enum Avalonia.Win32.DirectX.DXGI_MODE_ROTATION : Enum {
    public int value__;
    public static DXGI_MODE_ROTATION DXGI_MODE_ROTATION_UNSPECIFIED;
    public static DXGI_MODE_ROTATION DXGI_MODE_ROTATION_IDENTITY;
    public static DXGI_MODE_ROTATION DXGI_MODE_ROTATION_ROTATE90;
    public static DXGI_MODE_ROTATION DXGI_MODE_ROTATION_ROTATE180;
    public static DXGI_MODE_ROTATION DXGI_MODE_ROTATION_ROTATE270;
}
internal enum Avalonia.Win32.DirectX.DXGI_MODE_SCALING : Enum {
    public int value__;
    public static DXGI_MODE_SCALING DXGI_MODE_SCALING_UNSPECIFIED;
    public static DXGI_MODE_SCALING DXGI_MODE_SCALING_CENTERED;
    public static DXGI_MODE_SCALING DXGI_MODE_SCALING_STRETCHED;
}
internal enum Avalonia.Win32.DirectX.DXGI_MODE_SCANLINE_ORDER : Enum {
    public int value__;
    public static DXGI_MODE_SCANLINE_ORDER DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED;
    public static DXGI_MODE_SCANLINE_ORDER DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE;
    public static DXGI_MODE_SCANLINE_ORDER DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST;
    public static DXGI_MODE_SCANLINE_ORDER DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST;
}
internal class Avalonia.Win32.DirectX.DXGI_OUTPUT_DESC : ValueType {
    [FixedBufferAttribute("System.UInt16", "32")]
internal <DeviceName>e__FixedBuffer DeviceName;
    internal RECT DesktopCoordinates;
    internal int AttachedToDesktop;
    internal DXGI_MODE_ROTATION Rotation;
    internal HANDLE Monitor;
}
internal class Avalonia.Win32.DirectX.DXGI_PRESENT_PARAMETERS : ValueType {
    public UInt32 DirtyRectsCount;
    public RECT* pDirtyRects;
    public RECT* pScrollRect;
    public POINT* pScrollOffset;
}
internal class Avalonia.Win32.DirectX.DXGI_RATIONAL : ValueType {
    public ushort Numerator;
    public ushort Denominator;
}
internal enum Avalonia.Win32.DirectX.DXGI_RESIDENCY : Enum {
    public int value__;
    public static DXGI_RESIDENCY DXGI_RESIDENCY_FULLY_RESIDENT;
    public static DXGI_RESIDENCY DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY;
    public static DXGI_RESIDENCY DXGI_RESIDENCY_EVICTED_TO_DISK;
}
internal class Avalonia.Win32.DirectX.DXGI_RGB : ValueType {
    public float Red;
    public float Green;
    public float Blue;
}
internal class Avalonia.Win32.DirectX.DXGI_RGBA : ValueType {
    public float r;
    public float g;
    public float b;
    public float a;
}
internal class Avalonia.Win32.DirectX.DXGI_SAMPLE_DESC : ValueType {
    public UInt32 Count;
    public UInt32 Quality;
}
internal enum Avalonia.Win32.DirectX.DXGI_SCALING : Enum {
    public int value__;
    public static DXGI_SCALING DXGI_SCALING_STRETCH;
    public static DXGI_SCALING DXGI_SCALING_NONE;
    public static DXGI_SCALING DXGI_SCALING_ASPECT_RATIO_STRETCH;
}
internal class Avalonia.Win32.DirectX.DXGI_SURFACE_DESC : ValueType {
    public UInt32 Width;
    public UInt32 Height;
    public DXGI_FORMAT Format;
    public DXGI_SAMPLE_DESC SampleDesc;
}
internal class Avalonia.Win32.DirectX.DXGI_SWAP_CHAIN_DESC : ValueType {
    public DXGI_MODE_DESC BufferDesc;
    public DXGI_SAMPLE_DESC SampleDesc;
    public UInt32 BufferUsage;
    public ushort BufferCount;
    public IntPtr OutputWindow;
    public int Windowed;
    public DXGI_SWAP_EFFECT SwapEffect;
    public ushort Flags;
}
internal class Avalonia.Win32.DirectX.DXGI_SWAP_CHAIN_DESC1 : ValueType {
    public UInt32 Width;
    public UInt32 Height;
    public DXGI_FORMAT Format;
    public int Stereo;
    public DXGI_SAMPLE_DESC SampleDesc;
    public UInt32 BufferUsage;
    public UInt32 BufferCount;
    public DXGI_SCALING Scaling;
    public DXGI_SWAP_EFFECT SwapEffect;
    public DXGI_ALPHA_MODE AlphaMode;
    public UInt32 Flags;
}
[FlagsAttribute]
internal enum Avalonia.Win32.DirectX.DXGI_SWAP_CHAIN_FLAG : Enum {
    public int value__;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_NONPREROTATED;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING;
    public static DXGI_SWAP_CHAIN_FLAG DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS;
}
internal class Avalonia.Win32.DirectX.DXGI_SWAP_CHAIN_FULLSCREEN_DESC : ValueType {
    public DXGI_RATIONAL RefreshRate;
    public DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    public DXGI_MODE_SCALING Scaling;
    public int Windowed;
}
internal enum Avalonia.Win32.DirectX.DXGI_SWAP_EFFECT : Enum {
    public int value__;
    public static DXGI_SWAP_EFFECT DXGI_SWAP_EFFECT_DISCARD;
    public static DXGI_SWAP_EFFECT DXGI_SWAP_EFFECT_SEQUENTIAL;
    public static DXGI_SWAP_EFFECT DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL;
    public static DXGI_SWAP_EFFECT DXGI_SWAP_EFFECT_FLIP_DISCARD;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.DirectX.DxgiConnection : object {
    public static UInt32 ENUM_CURRENT_SETTINGS;
    [CompilerGeneratedAttribute]
private Action`1<TimeSpan> Tick;
    [NullableAttribute("1")]
private object _syncLock;
    private IDXGIOutput _output;
    private Stopwatch _stopwatch;
    [NullableAttribute("1")]
private static string LogArea;
    public bool RunsInBackground { get; }
    public bool RequiresNoRedirectionBitmap { get; }
    [NullableContextAttribute("1")]
public DxgiConnection(object syncLock);
    public sealed virtual bool get_RunsInBackground();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Tick(Action`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Tick(Action`1<TimeSpan> value);
    public static bool TryCreateAndRegister();
    private void RunLoop();
    private void GetBestOutputToVWaitOn();
    private static bool TryCreateAndRegisterCore();
    public sealed virtual bool get_RequiresNoRedirectionBitmap();
    [NullableContextAttribute("1")]
public sealed virtual object CreateSurface(IEglWindowGlPlatformSurfaceInfo info);
}
[ExtensionAttribute]
internal static class Avalonia.Win32.DirectX.DxgiErrorExtensions : object {
    [ExtensionAttribute]
public static bool IsDeviceLostError(DXGI_ERROR error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.DirectX.DxgiRenderTarget : EglPlatformSurfaceRenderTargetBase {
    public static UInt32 DXGI_USAGE_RENDER_TARGET_OUTPUT;
    private Guid ID3D11Texture2DGuid;
    private IEglWindowGlPlatformSurfaceInfo _window;
    private DxgiConnection _connection;
    [NullableAttribute("2")]
private IDXGIDevice _dxgiDevice;
    [NullableAttribute("2")]
private IDXGIFactory2 _dxgiFactory;
    [NullableAttribute("2")]
private IDXGISwapChain1 _swapChain;
    private UInt32 _flagsUsed;
    [NullableAttribute("2")]
private IUnknown _renderTexture;
    private RECT _clientRect;
    public DxgiRenderTarget(IEglWindowGlPlatformSurfaceInfo window, EglContext context, DxgiConnection connection);
    public virtual IGlPlatformSurfaceRenderingSession BeginDrawCore();
    public virtual void Dispose();
    internal static bool RectsEqual(RECT& l, RECT& r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.DirectX.DxgiSwapchainWindow : EglGlPlatformSurfaceBase {
    private DxgiConnection _connection;
    private IEglWindowGlPlatformSurfaceInfo _window;
    public DxgiSwapchainWindow(DxgiConnection connection, IEglWindowGlPlatformSurfaceInfo window);
    public virtual IGlPlatformSurfaceRenderTarget CreateGlRenderTarget(IGlContext context);
}
internal class Avalonia.Win32.DirectX.HANDLE : ValueType {
    public Void* Value;
    public static HANDLE INVALID_VALUE { get; }
    public static HANDLE NULL { get; }
    public HANDLE(Void* value);
    public static HANDLE get_INVALID_VALUE();
    public static HANDLE get_NULL();
    public static bool op_Equality(HANDLE left, HANDLE right);
    public static bool op_Inequality(HANDLE left, HANDLE right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public bool Equals(HANDLE other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
internal interface Avalonia.Win32.DirectX.ID3D11Device {
    public D3D_FEATURE_LEVEL FeatureLevel { get; }
    public ushort CreationFlags { get; }
    public int DeviceRemovedReason { get; }
    public ushort ExceptionMode { get; }
    public abstract virtual IUnknown CreateBuffer(IntPtr pDesc, IntPtr pInitialData);
    public abstract virtual IUnknown CreateTexture1D(IntPtr pDesc, IntPtr pInitialData);
    public abstract virtual ID3D11Texture2D CreateTexture2D(D3D11_TEXTURE2D_DESC* pDesc, IntPtr pInitialData);
    public abstract virtual IUnknown CreateTexture3D(IntPtr pDesc, IntPtr pInitialData);
    public abstract virtual IUnknown CreateShaderResourceView(IntPtr pResource, IntPtr pDesc);
    public abstract virtual IUnknown CreateUnorderedAccessView(IntPtr pResource, IntPtr pDesc);
    public abstract virtual IUnknown CreateRenderTargetView(IntPtr pResource, IntPtr pDesc);
    public abstract virtual IUnknown CreateDepthStencilView(IntPtr pResource, IntPtr pDesc);
    public abstract virtual IUnknown CreateInputLayout(IntPtr pInputElementDescs, ushort NumElements, Void* pShaderBytecodeWithInputSignature, IntPtr BytecodeLength);
    public abstract virtual IUnknown CreateVertexShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public abstract virtual IUnknown CreateGeometryShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public abstract virtual IUnknown CreateGeometryShaderWithStreamOutput(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pSODeclaration, ushort NumEntries, UInt16* pBufferStrides, ushort NumStrides, ushort RasterizedStream, IntPtr pClassLinkage);
    public abstract virtual IUnknown CreatePixelShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public abstract virtual IUnknown CreateHullShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public abstract virtual IUnknown CreateDomainShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public abstract virtual IUnknown CreateComputeShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public abstract virtual IUnknown CreateClassLinkage();
    public abstract virtual IUnknown CreateBlendState(IntPtr pBlendStateDesc);
    public abstract virtual IUnknown CreateDepthStencilState(IntPtr pDepthStencilDesc);
    public abstract virtual IUnknown CreateRasterizerState(IntPtr pRasterizerDesc);
    public abstract virtual IUnknown CreateSamplerState(IntPtr pSamplerDesc);
    public abstract virtual IUnknown CreateQuery(IntPtr pQueryDesc);
    public abstract virtual IUnknown CreatePredicate(IntPtr pPredicateDesc);
    public abstract virtual IUnknown CreateCounter(IntPtr pCounterDesc);
    public abstract virtual IUnknown CreateDeferredContext(ushort ContextFlags);
    public abstract virtual IUnknown OpenSharedResource(IntPtr hResource, Guid* ReturnedInterface);
    public abstract virtual void CheckFormatSupport(DXGI_FORMAT Format, UInt16* pFormatSupport);
    public abstract virtual void CheckMultisampleQualityLevels(DXGI_FORMAT Format, ushort SampleCount, UInt16* pNumQualityLevels);
    public abstract virtual void CheckCounterInfo(IntPtr pCounterInfo);
    public abstract virtual void CheckCounter(IntPtr pDesc, IntPtr pType, IntPtr pActiveCounters, IntPtr szName, UInt16* pNameLength, IntPtr szUnits, UInt16* pUnitsLength, IntPtr szDescription, UInt16* pDescriptionLength);
    public abstract virtual void CheckFeatureSupport(D3D11_FEATURE Feature, Void* pFeatureSupportData, ushort FeatureSupportDataSize);
    public abstract virtual void GetPrivateData(Guid* guid, UInt16* pDataSize, Void* pData);
    public abstract virtual void SetPrivateData(Guid* guid, ushort DataSize, IntPtr* pData);
    public abstract virtual void SetPrivateDataInterface(Guid* guid, IUnknown pData);
    public abstract virtual D3D_FEATURE_LEVEL get_FeatureLevel();
    public abstract virtual ushort get_CreationFlags();
    public abstract virtual int get_DeviceRemovedReason();
    public abstract virtual void GetImmediateContext(IntPtr* ppImmediateContext);
    public abstract virtual void SetExceptionMode(ushort RaiseFlags);
    public abstract virtual ushort get_ExceptionMode();
}
internal interface Avalonia.Win32.DirectX.ID3D11Device1 {
    public abstract virtual void GetImmediateContext1(Void** ppImmediateContext);
    public abstract virtual IUnknown CreateDeferredContext1(ushort ContextFlags);
    public abstract virtual IUnknown CreateBlendState1(Void* pBlendStateDesc);
    public abstract virtual IUnknown CreateRasterizerState1(Void* pRasterizerDesc);
    public abstract virtual IUnknown CreateDeviceContextState(ushort Flags, Void* pFeatureLevels, ushort FeatureLevels, ushort SDKVersion, Guid* EmulatedInterface, Void* pChosenFeatureLevel);
    public abstract virtual IUnknown OpenSharedResource1(IntPtr hResource, Guid* ReturnedInterface);
    public abstract virtual void OpenSharedResourceByName(UInt16* lpName, int dwDesiredAccess, Guid* returnedInterface, Void** ppResource);
}
internal interface Avalonia.Win32.DirectX.ID3D11Texture2D {
}
[NullableContextAttribute("1")]
public interface Avalonia.Win32.DirectX.IDirect3D11TexturePlatformSurface {
    public abstract virtual IDirect3D11TextureRenderTarget CreateRenderTarget(IPlatformGraphicsContext graphicsContext, IntPtr d3dDevice);
}
public interface Avalonia.Win32.DirectX.IDirect3D11TextureRenderTarget {
    public bool IsCorrupted { get; }
    public abstract virtual bool get_IsCorrupted();
    [NullableContextAttribute("1")]
public abstract virtual IDirect3D11TextureRenderTargetRenderSession BeginDraw();
}
public interface Avalonia.Win32.DirectX.IDirect3D11TextureRenderTargetRenderSession {
    public IntPtr D3D11Texture2D { get; }
    public PixelSize Size { get; }
    public PixelPoint Offset { get; }
    public double Scaling { get; }
    public abstract virtual IntPtr get_D3D11Texture2D();
    public abstract virtual PixelSize get_Size();
    public abstract virtual PixelPoint get_Offset();
    public abstract virtual double get_Scaling();
}
internal interface Avalonia.Win32.DirectX.IDXGIAdapter {
    public DXGI_ADAPTER_DESC Desc { get; }
    public abstract virtual int EnumOutputs(ushort Output, Void* ppOutput);
    public abstract virtual DXGI_ADAPTER_DESC get_Desc();
    public abstract virtual ulong CheckInterfaceSupport(Guid* InterfaceName);
}
internal interface Avalonia.Win32.DirectX.IDXGIAdapter1 {
    public DXGI_ADAPTER_DESC1 Desc1 { get; }
    public abstract virtual DXGI_ADAPTER_DESC1 get_Desc1();
}
internal interface Avalonia.Win32.DirectX.IDXGIDevice {
    public IDXGIAdapter Adapter { get; }
    public int GPUThreadPriority { get; }
    public abstract virtual IDXGIAdapter get_Adapter();
    public abstract virtual IDXGISurface CreateSurface(DXGI_SURFACE_DESC* pDesc, ushort NumSurfaces, UInt32 Usage, Void** pSharedResource);
    public abstract virtual void QueryResourceResidency(IUnknown ppResources, DXGI_RESIDENCY* pResidencyStatus, ushort NumResources);
    public abstract virtual void SetGPUThreadPriority(int Priority);
    public abstract virtual int get_GPUThreadPriority();
}
internal interface Avalonia.Win32.DirectX.IDXGIDeviceSubObject {
    public abstract virtual Void* GetDevice(Guid* riid);
}
internal interface Avalonia.Win32.DirectX.IDXGIFactory {
    public IntPtr WindowAssociation { get; }
    public abstract virtual int EnumAdapters(ushort Adapter, Void* ppAdapter);
    public abstract virtual void MakeWindowAssociation(IntPtr WindowHandle, ushort Flags);
    public abstract virtual IntPtr get_WindowAssociation();
    public abstract virtual IDXGISwapChain CreateSwapChain(IUnknown pDevice, DXGI_SWAP_CHAIN_DESC* pDesc);
    public abstract virtual IDXGIAdapter CreateSoftwareAdapter(Void* Module);
}
internal interface Avalonia.Win32.DirectX.IDXGIFactory1 {
    public abstract virtual int EnumAdapters1(ushort Adapter, Void** ppAdapter);
    public abstract virtual int IsCurrent();
}
internal interface Avalonia.Win32.DirectX.IDXGIFactory2 {
    public abstract virtual int IsWindowedStereoEnabled();
    public abstract virtual IDXGISwapChain1 CreateSwapChainForHwnd(IUnknown pDevice, IntPtr hWnd, DXGI_SWAP_CHAIN_DESC1* pDesc, DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc, IDXGIOutput pRestrictToOutput);
    public abstract virtual IDXGISwapChain1 CreateSwapChainForCoreWindow(IUnknown pDevice, IUnknown pWindow, DXGI_SWAP_CHAIN_DESC1* pDesc, IDXGIOutput pRestrictToOutput);
    public abstract virtual void GetSharedResourceAdapterLuid(IntPtr hResource, UInt64* pLuid);
    public abstract virtual int RegisterStereoStatusWindow(IntPtr WindowHandle, ushort wMsg);
    public abstract virtual int RegisterStereoStatusEvent(IntPtr hEvent);
    public abstract virtual void UnregisterStereoStatus(int dwCookie);
    public abstract virtual int RegisterOcclusionStatusWindow(IntPtr WindowHandle, ushort wMsg);
    public abstract virtual int RegisterOcclusionStatusEvent(IntPtr hEvent);
    public abstract virtual void UnregisterOcclusionStatus(int dwCookie);
    public abstract virtual IDXGISwapChain1 CreateSwapChainForComposition(IUnknown pDevice, DXGI_SWAP_CHAIN_DESC1* pDesc, IDXGIOutput pRestrictToOutput);
}
internal interface Avalonia.Win32.DirectX.IDXGIKeyedMutex {
    public abstract virtual void AcquireSync(ulong Key, UInt32 dwMilliseconds);
    public abstract virtual void ReleaseSync(ulong Key);
}
internal interface Avalonia.Win32.DirectX.IDXGIObject {
    public abstract virtual void SetPrivateData(Guid* Name, ushort DataSize, Void** pData);
    public abstract virtual void SetPrivateDataInterface(Guid* Name, IUnknown pUnknown);
    public abstract virtual Void* GetPrivateData(Guid* Name, UInt16* pDataSize);
    public abstract virtual Void* GetParent(Guid* riid);
}
internal interface Avalonia.Win32.DirectX.IDXGIOutput {
    public DXGI_OUTPUT_DESC Desc { get; }
    public DXGI_FRAME_STATISTICS FrameStatistics { get; }
    public abstract virtual DXGI_OUTPUT_DESC get_Desc();
    public abstract virtual DXGI_MODE_DESC GetDisplayModeList(DXGI_FORMAT EnumFormat, ushort Flags, UInt16* pNumModes);
    public abstract virtual void FindClosestMatchingMode(DXGI_MODE_DESC* pModeToMatch, DXGI_MODE_DESC* pClosestMatch, IUnknown pConcernedDevice);
    public abstract virtual void WaitForVBlank();
    public abstract virtual void TakeOwnership(IUnknown pDevice, int Exclusive);
    public abstract virtual void ReleaseOwnership();
    public abstract virtual void GetGammaControlCapabilities(IntPtr pGammaCaps);
    public abstract virtual void SetGammaControl(Void* pArray);
    public abstract virtual void GetGammaControl(IntPtr pArray);
    public abstract virtual void SetDisplaySurface(IDXGISurface pScanoutSurface);
    public abstract virtual void GetDisplaySurfaceData(IDXGISurface pDestination);
    public abstract virtual DXGI_FRAME_STATISTICS get_FrameStatistics();
}
internal interface Avalonia.Win32.DirectX.IDXGIResource {
    public IntPtr SharedHandle { get; }
    public UInt32 Usage { get; }
    public ushort EvictionPriority { get; }
    public abstract virtual IntPtr get_SharedHandle();
    public abstract virtual UInt32 get_Usage();
    public abstract virtual void SetEvictionPriority(ushort EvictionPriority);
    public abstract virtual ushort get_EvictionPriority();
}
internal interface Avalonia.Win32.DirectX.IDXGISurface {
    public DXGI_SURFACE_DESC Desc { get; }
    public abstract virtual DXGI_SURFACE_DESC get_Desc();
    public abstract virtual void Map(DXGI_MAPPED_RECT* pLockedRect, ushort MapFlags);
    public abstract virtual void Unmap();
}
internal interface Avalonia.Win32.DirectX.IDXGISwapChain {
    public DXGI_SWAP_CHAIN_DESC Desc { get; }
    public IDXGIOutput ContainingOutput { get; }
    public DXGI_FRAME_STATISTICS FrameStatistics { get; }
    public ushort LastPresentCount { get; }
    public abstract virtual int Present(ushort SyncInterval, ushort Flags);
    public abstract virtual Void* GetBuffer(ushort Buffer, Guid* riid);
    public abstract virtual void SetFullscreenState(int Fullscreen, IDXGIOutput pTarget);
    public abstract virtual IDXGIOutput GetFullscreenState(Int32* pFullscreen);
    public abstract virtual DXGI_SWAP_CHAIN_DESC get_Desc();
    public abstract virtual void ResizeBuffers(ushort BufferCount, ushort Width, ushort Height, DXGI_FORMAT NewFormat, ushort SwapChainFlags);
    public abstract virtual void ResizeTarget(DXGI_MODE_DESC* pNewTargetParameters);
    public abstract virtual IDXGIOutput get_ContainingOutput();
    public abstract virtual DXGI_FRAME_STATISTICS get_FrameStatistics();
    public abstract virtual ushort get_LastPresentCount();
}
internal interface Avalonia.Win32.DirectX.IDXGISwapChain1 {
    public DXGI_SWAP_CHAIN_DESC1 Desc1 { get; }
    public DXGI_SWAP_CHAIN_FULLSCREEN_DESC FullscreenDesc { get; }
    public IntPtr Hwnd { get; }
    public IDXGIOutput RestrictToOutput { get; }
    public DXGI_RGBA BackgroundColor { get; }
    public DXGI_MODE_ROTATION Rotation { get; }
    public abstract virtual DXGI_SWAP_CHAIN_DESC1 get_Desc1();
    public abstract virtual DXGI_SWAP_CHAIN_FULLSCREEN_DESC get_FullscreenDesc();
    public abstract virtual IntPtr get_Hwnd();
    public abstract virtual Void* GetCoreWindow(Guid* refiid);
    public abstract virtual void Present1(ushort SyncInterval, ushort PresentFlags, DXGI_PRESENT_PARAMETERS* pPresentParameters);
    public abstract virtual int IsTemporaryMonoSupported();
    public abstract virtual IDXGIOutput get_RestrictToOutput();
    public abstract virtual void SetBackgroundColor(DXGI_RGBA* pColor);
    public abstract virtual DXGI_RGBA get_BackgroundColor();
    public abstract virtual void SetRotation(DXGI_MODE_ROTATION Rotation);
    public abstract virtual DXGI_MODE_ROTATION get_Rotation();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComID3D11Device1Proxy : __MicroComID3D11DeviceProxy {
    protected int VTableSize { get; }
    protected __MicroComID3D11Device1Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void GetImmediateContext1(Void** ppImmediateContext);
    public sealed virtual IUnknown CreateDeferredContext1(ushort ContextFlags);
    public sealed virtual IUnknown CreateBlendState1(Void* pBlendStateDesc);
    public sealed virtual IUnknown CreateRasterizerState1(Void* pRasterizerDesc);
    public sealed virtual IUnknown CreateDeviceContextState(ushort Flags, Void* pFeatureLevels, ushort FeatureLevels, ushort SDKVersion, Guid* EmulatedInterface, Void* pChosenFeatureLevel);
    public sealed virtual IUnknown OpenSharedResource1(IntPtr hResource, Guid* ReturnedInterface);
    public sealed virtual void OpenSharedResourceByName(UInt16* lpName, int dwDesiredAccess, Guid* returnedInterface, Void** ppResource);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComID3D11Device1VTable : __MicroComID3D11DeviceVTable {
    private static void GetImmediateContext1(Void* this, Void** ppImmediateContext);
    private static int CreateDeferredContext1(Void* this, ushort ContextFlags, Void** ppDeferredContext);
    private static int CreateBlendState1(Void* this, Void* pBlendStateDesc, Void** ppBlendState);
    private static int CreateRasterizerState1(Void* this, Void* pRasterizerDesc, Void** ppRasterizerState);
    private static int CreateDeviceContextState(Void* this, ushort Flags, Void* pFeatureLevels, ushort FeatureLevels, ushort SDKVersion, Guid* EmulatedInterface, Void* pChosenFeatureLevel, Void** ppContextState);
    private static int OpenSharedResource1(Void* this, IntPtr hResource, Guid* ReturnedInterface, Void** ppResource);
    private static int OpenSharedResourceByName(Void* this, UInt16* lpName, int dwDesiredAccess, Guid* returnedInterface, Void** ppResource);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComID3D11DeviceProxy : MicroComProxyBase {
    public D3D_FEATURE_LEVEL FeatureLevel { get; }
    public ushort CreationFlags { get; }
    public int DeviceRemovedReason { get; }
    public ushort ExceptionMode { get; }
    protected int VTableSize { get; }
    protected __MicroComID3D11DeviceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IUnknown CreateBuffer(IntPtr pDesc, IntPtr pInitialData);
    public sealed virtual IUnknown CreateTexture1D(IntPtr pDesc, IntPtr pInitialData);
    public sealed virtual ID3D11Texture2D CreateTexture2D(D3D11_TEXTURE2D_DESC* pDesc, IntPtr pInitialData);
    public sealed virtual IUnknown CreateTexture3D(IntPtr pDesc, IntPtr pInitialData);
    public sealed virtual IUnknown CreateShaderResourceView(IntPtr pResource, IntPtr pDesc);
    public sealed virtual IUnknown CreateUnorderedAccessView(IntPtr pResource, IntPtr pDesc);
    public sealed virtual IUnknown CreateRenderTargetView(IntPtr pResource, IntPtr pDesc);
    public sealed virtual IUnknown CreateDepthStencilView(IntPtr pResource, IntPtr pDesc);
    public sealed virtual IUnknown CreateInputLayout(IntPtr pInputElementDescs, ushort NumElements, Void* pShaderBytecodeWithInputSignature, IntPtr BytecodeLength);
    public sealed virtual IUnknown CreateVertexShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public sealed virtual IUnknown CreateGeometryShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public sealed virtual IUnknown CreateGeometryShaderWithStreamOutput(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pSODeclaration, ushort NumEntries, UInt16* pBufferStrides, ushort NumStrides, ushort RasterizedStream, IntPtr pClassLinkage);
    public sealed virtual IUnknown CreatePixelShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public sealed virtual IUnknown CreateHullShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public sealed virtual IUnknown CreateDomainShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public sealed virtual IUnknown CreateComputeShader(IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage);
    public sealed virtual IUnknown CreateClassLinkage();
    public sealed virtual IUnknown CreateBlendState(IntPtr pBlendStateDesc);
    public sealed virtual IUnknown CreateDepthStencilState(IntPtr pDepthStencilDesc);
    public sealed virtual IUnknown CreateRasterizerState(IntPtr pRasterizerDesc);
    public sealed virtual IUnknown CreateSamplerState(IntPtr pSamplerDesc);
    public sealed virtual IUnknown CreateQuery(IntPtr pQueryDesc);
    public sealed virtual IUnknown CreatePredicate(IntPtr pPredicateDesc);
    public sealed virtual IUnknown CreateCounter(IntPtr pCounterDesc);
    public sealed virtual IUnknown CreateDeferredContext(ushort ContextFlags);
    public sealed virtual IUnknown OpenSharedResource(IntPtr hResource, Guid* ReturnedInterface);
    public sealed virtual void CheckFormatSupport(DXGI_FORMAT Format, UInt16* pFormatSupport);
    public sealed virtual void CheckMultisampleQualityLevels(DXGI_FORMAT Format, ushort SampleCount, UInt16* pNumQualityLevels);
    public sealed virtual void CheckCounterInfo(IntPtr pCounterInfo);
    public sealed virtual void CheckCounter(IntPtr pDesc, IntPtr pType, IntPtr pActiveCounters, IntPtr szName, UInt16* pNameLength, IntPtr szUnits, UInt16* pUnitsLength, IntPtr szDescription, UInt16* pDescriptionLength);
    public sealed virtual void CheckFeatureSupport(D3D11_FEATURE Feature, Void* pFeatureSupportData, ushort FeatureSupportDataSize);
    public sealed virtual void GetPrivateData(Guid* guid, UInt16* pDataSize, Void* pData);
    public sealed virtual void SetPrivateData(Guid* guid, ushort DataSize, IntPtr* pData);
    public sealed virtual void SetPrivateDataInterface(Guid* guid, IUnknown pData);
    public sealed virtual D3D_FEATURE_LEVEL get_FeatureLevel();
    public sealed virtual ushort get_CreationFlags();
    public sealed virtual int get_DeviceRemovedReason();
    public sealed virtual void GetImmediateContext(IntPtr* ppImmediateContext);
    public sealed virtual void SetExceptionMode(ushort RaiseFlags);
    public sealed virtual ushort get_ExceptionMode();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComID3D11DeviceVTable : MicroComVtblBase {
    private static int CreateBuffer(Void* this, IntPtr pDesc, IntPtr pInitialData, Void** ppBuffer);
    private static int CreateTexture1D(Void* this, IntPtr pDesc, IntPtr pInitialData, Void** ppTexture1D);
    private static int CreateTexture2D(Void* this, D3D11_TEXTURE2D_DESC* pDesc, IntPtr pInitialData, Void** ppTexture2D);
    private static int CreateTexture3D(Void* this, IntPtr pDesc, IntPtr pInitialData, Void** ppTexture3D);
    private static int CreateShaderResourceView(Void* this, IntPtr pResource, IntPtr pDesc, Void** ppSRView);
    private static int CreateUnorderedAccessView(Void* this, IntPtr pResource, IntPtr pDesc, Void** ppUAView);
    private static int CreateRenderTargetView(Void* this, IntPtr pResource, IntPtr pDesc, Void** ppRTView);
    private static int CreateDepthStencilView(Void* this, IntPtr pResource, IntPtr pDesc, Void** ppDepthStencilView);
    private static int CreateInputLayout(Void* this, IntPtr pInputElementDescs, ushort NumElements, Void* pShaderBytecodeWithInputSignature, IntPtr BytecodeLength, Void** ppInputLayout);
    private static int CreateVertexShader(Void* this, IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage, Void** ppVertexShader);
    private static int CreateGeometryShader(Void* this, IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage, Void** ppGeometryShader);
    private static int CreateGeometryShaderWithStreamOutput(Void* this, IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pSODeclaration, ushort NumEntries, UInt16* pBufferStrides, ushort NumStrides, ushort RasterizedStream, IntPtr pClassLinkage, Void** ppGeometryShader);
    private static int CreatePixelShader(Void* this, IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage, Void** ppPixelShader);
    private static int CreateHullShader(Void* this, IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage, Void** ppHullShader);
    private static int CreateDomainShader(Void* this, IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage, Void** ppDomainShader);
    private static int CreateComputeShader(Void* this, IntPtr pShaderBytecode, IntPtr BytecodeLength, IntPtr pClassLinkage, Void** ppComputeShader);
    private static int CreateClassLinkage(Void* this, Void** ppLinkage);
    private static int CreateBlendState(Void* this, IntPtr pBlendStateDesc, Void** ppBlendState);
    private static int CreateDepthStencilState(Void* this, IntPtr pDepthStencilDesc, Void** ppDepthStencilState);
    private static int CreateRasterizerState(Void* this, IntPtr pRasterizerDesc, Void** ppRasterizerState);
    private static int CreateSamplerState(Void* this, IntPtr pSamplerDesc, Void** ppSamplerState);
    private static int CreateQuery(Void* this, IntPtr pQueryDesc, Void** ppQuery);
    private static int CreatePredicate(Void* this, IntPtr pPredicateDesc, Void** ppPredicate);
    private static int CreateCounter(Void* this, IntPtr pCounterDesc, Void** ppCounter);
    private static int CreateDeferredContext(Void* this, ushort ContextFlags, Void** ppDeferredContext);
    private static int OpenSharedResource(Void* this, IntPtr hResource, Guid* ReturnedInterface, Void** ppResource);
    private static int CheckFormatSupport(Void* this, DXGI_FORMAT Format, UInt16* pFormatSupport);
    private static int CheckMultisampleQualityLevels(Void* this, DXGI_FORMAT Format, ushort SampleCount, UInt16* pNumQualityLevels);
    private static void CheckCounterInfo(Void* this, IntPtr pCounterInfo);
    private static int CheckCounter(Void* this, IntPtr pDesc, IntPtr pType, IntPtr pActiveCounters, IntPtr szName, UInt16* pNameLength, IntPtr szUnits, UInt16* pUnitsLength, IntPtr szDescription, UInt16* pDescriptionLength);
    private static int CheckFeatureSupport(Void* this, D3D11_FEATURE Feature, Void* pFeatureSupportData, ushort FeatureSupportDataSize);
    private static int GetPrivateData(Void* this, Guid* guid, UInt16* pDataSize, Void* pData);
    private static int SetPrivateData(Void* this, Guid* guid, ushort DataSize, IntPtr* pData);
    private static int SetPrivateDataInterface(Void* this, Guid* guid, Void* pData);
    private static D3D_FEATURE_LEVEL GetFeatureLevel(Void* this);
    private static ushort GetCreationFlags(Void* this);
    private static int GetDeviceRemovedReason(Void* this);
    private static void GetImmediateContext(Void* this, IntPtr* ppImmediateContext);
    private static int SetExceptionMode(Void* this, ushort RaiseFlags);
    private static ushort GetExceptionMode(Void* this);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComID3D11Texture2DProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComID3D11Texture2DProxy(IntPtr nativePointer, bool ownsHandle);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComID3D11Texture2DVTable : MicroComVtblBase {
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIAdapter1Proxy : __MicroComIDXGIAdapterProxy {
    public DXGI_ADAPTER_DESC1 Desc1 { get; }
    protected int VTableSize { get; }
    protected __MicroComIDXGIAdapter1Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual DXGI_ADAPTER_DESC1 get_Desc1();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIAdapter1VTable : __MicroComIDXGIAdapterVTable {
    private static int GetDesc1(Void* this, DXGI_ADAPTER_DESC1* pDesc);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIAdapterProxy : __MicroComIDXGIObjectProxy {
    public DXGI_ADAPTER_DESC Desc { get; }
    protected int VTableSize { get; }
    protected __MicroComIDXGIAdapterProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int EnumOutputs(ushort Output, Void* ppOutput);
    public sealed virtual DXGI_ADAPTER_DESC get_Desc();
    public sealed virtual ulong CheckInterfaceSupport(Guid* InterfaceName);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIAdapterVTable : __MicroComIDXGIObjectVTable {
    private static int EnumOutputs(Void* this, ushort Output, Void* ppOutput);
    private static int GetDesc(Void* this, DXGI_ADAPTER_DESC* pDesc);
    private static int CheckInterfaceSupport(Void* this, Guid* InterfaceName, UInt64* pUMDVersion);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIDeviceProxy : __MicroComIDXGIObjectProxy {
    public IDXGIAdapter Adapter { get; }
    public int GPUThreadPriority { get; }
    protected int VTableSize { get; }
    protected __MicroComIDXGIDeviceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IDXGIAdapter get_Adapter();
    public sealed virtual IDXGISurface CreateSurface(DXGI_SURFACE_DESC* pDesc, ushort NumSurfaces, UInt32 Usage, Void** pSharedResource);
    public sealed virtual void QueryResourceResidency(IUnknown ppResources, DXGI_RESIDENCY* pResidencyStatus, ushort NumResources);
    public sealed virtual void SetGPUThreadPriority(int Priority);
    public sealed virtual int get_GPUThreadPriority();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIDeviceSubObjectProxy : __MicroComIDXGIObjectProxy {
    protected int VTableSize { get; }
    protected __MicroComIDXGIDeviceSubObjectProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Void* GetDevice(Guid* riid);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIDeviceSubObjectVTable : __MicroComIDXGIObjectVTable {
    private static int GetDevice(Void* this, Guid* riid, Void** ppDevice);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIDeviceVTable : __MicroComIDXGIObjectVTable {
    private static int GetAdapter(Void* this, Void** pAdapter);
    private static int CreateSurface(Void* this, DXGI_SURFACE_DESC* pDesc, ushort NumSurfaces, UInt32 Usage, Void** pSharedResource, Void** ppSurface);
    private static int QueryResourceResidency(Void* this, Void* ppResources, DXGI_RESIDENCY* pResidencyStatus, ushort NumResources);
    private static int SetGPUThreadPriority(Void* this, int Priority);
    private static int GetGPUThreadPriority(Void* this, Int32* pPriority);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIFactory1Proxy : __MicroComIDXGIFactoryProxy {
    protected int VTableSize { get; }
    protected __MicroComIDXGIFactory1Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int EnumAdapters1(ushort Adapter, Void** ppAdapter);
    public sealed virtual int IsCurrent();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIFactory1VTable : __MicroComIDXGIFactoryVTable {
    private static int EnumAdapters1(Void* this, ushort Adapter, Void** ppAdapter);
    private static int IsCurrent(Void* this);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIFactory2Proxy : __MicroComIDXGIFactory1Proxy {
    protected int VTableSize { get; }
    protected __MicroComIDXGIFactory2Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int IsWindowedStereoEnabled();
    public sealed virtual IDXGISwapChain1 CreateSwapChainForHwnd(IUnknown pDevice, IntPtr hWnd, DXGI_SWAP_CHAIN_DESC1* pDesc, DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc, IDXGIOutput pRestrictToOutput);
    public sealed virtual IDXGISwapChain1 CreateSwapChainForCoreWindow(IUnknown pDevice, IUnknown pWindow, DXGI_SWAP_CHAIN_DESC1* pDesc, IDXGIOutput pRestrictToOutput);
    public sealed virtual void GetSharedResourceAdapterLuid(IntPtr hResource, UInt64* pLuid);
    public sealed virtual int RegisterStereoStatusWindow(IntPtr WindowHandle, ushort wMsg);
    public sealed virtual int RegisterStereoStatusEvent(IntPtr hEvent);
    public sealed virtual void UnregisterStereoStatus(int dwCookie);
    public sealed virtual int RegisterOcclusionStatusWindow(IntPtr WindowHandle, ushort wMsg);
    public sealed virtual int RegisterOcclusionStatusEvent(IntPtr hEvent);
    public sealed virtual void UnregisterOcclusionStatus(int dwCookie);
    public sealed virtual IDXGISwapChain1 CreateSwapChainForComposition(IUnknown pDevice, DXGI_SWAP_CHAIN_DESC1* pDesc, IDXGIOutput pRestrictToOutput);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIFactory2VTable : __MicroComIDXGIFactory1VTable {
    private static int IsWindowedStereoEnabled(Void* this);
    private static int CreateSwapChainForHwnd(Void* this, Void* pDevice, IntPtr hWnd, DXGI_SWAP_CHAIN_DESC1* pDesc, DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc, Void* pRestrictToOutput, Void** ppSwapChain);
    private static int CreateSwapChainForCoreWindow(Void* this, Void* pDevice, Void* pWindow, DXGI_SWAP_CHAIN_DESC1* pDesc, Void* pRestrictToOutput, Void** ppSwapChain);
    private static int GetSharedResourceAdapterLuid(Void* this, IntPtr hResource, UInt64* pLuid);
    private static int RegisterStereoStatusWindow(Void* this, IntPtr WindowHandle, ushort wMsg, Int32* pdwCookie);
    private static int RegisterStereoStatusEvent(Void* this, IntPtr hEvent, Int32* pdwCookie);
    private static void UnregisterStereoStatus(Void* this, int dwCookie);
    private static int RegisterOcclusionStatusWindow(Void* this, IntPtr WindowHandle, ushort wMsg, Int32* pdwCookie);
    private static int RegisterOcclusionStatusEvent(Void* this, IntPtr hEvent, Int32* pdwCookie);
    private static void UnregisterOcclusionStatus(Void* this, int dwCookie);
    private static int CreateSwapChainForComposition(Void* this, Void* pDevice, DXGI_SWAP_CHAIN_DESC1* pDesc, Void* pRestrictToOutput, Void** ppSwapChain);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIFactoryProxy : __MicroComIDXGIObjectProxy {
    public IntPtr WindowAssociation { get; }
    protected int VTableSize { get; }
    protected __MicroComIDXGIFactoryProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int EnumAdapters(ushort Adapter, Void* ppAdapter);
    public sealed virtual void MakeWindowAssociation(IntPtr WindowHandle, ushort Flags);
    public sealed virtual IntPtr get_WindowAssociation();
    public sealed virtual IDXGISwapChain CreateSwapChain(IUnknown pDevice, DXGI_SWAP_CHAIN_DESC* pDesc);
    public sealed virtual IDXGIAdapter CreateSoftwareAdapter(Void* Module);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIFactoryVTable : __MicroComIDXGIObjectVTable {
    private static int EnumAdapters(Void* this, ushort Adapter, Void* ppAdapter);
    private static int MakeWindowAssociation(Void* this, IntPtr WindowHandle, ushort Flags);
    private static int GetWindowAssociation(Void* this, IntPtr* pWindowHandle);
    private static int CreateSwapChain(Void* this, Void* pDevice, DXGI_SWAP_CHAIN_DESC* pDesc, Void** ppSwapChain);
    private static int CreateSoftwareAdapter(Void* this, Void* Module, Void** ppAdapter);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIKeyedMutexProxy : __MicroComIDXGIDeviceSubObjectProxy {
    protected int VTableSize { get; }
    protected __MicroComIDXGIKeyedMutexProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void AcquireSync(ulong Key, UInt32 dwMilliseconds);
    public sealed virtual void ReleaseSync(ulong Key);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIKeyedMutexVTable : __MicroComIDXGIDeviceSubObjectVTable {
    private static int AcquireSync(Void* this, ulong Key, UInt32 dwMilliseconds);
    private static int ReleaseSync(Void* this, ulong Key);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIObjectProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDXGIObjectProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void SetPrivateData(Guid* Name, ushort DataSize, Void** pData);
    public sealed virtual void SetPrivateDataInterface(Guid* Name, IUnknown pUnknown);
    public sealed virtual Void* GetPrivateData(Guid* Name, UInt16* pDataSize);
    public sealed virtual Void* GetParent(Guid* riid);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIObjectVTable : MicroComVtblBase {
    private static int SetPrivateData(Void* this, Guid* Name, ushort DataSize, Void** pData);
    private static int SetPrivateDataInterface(Void* this, Guid* Name, Void* pUnknown);
    private static int GetPrivateData(Void* this, Guid* Name, UInt16* pDataSize, Void** pData);
    private static int GetParent(Void* this, Guid* riid, Void** ppParent);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIOutputProxy : __MicroComIDXGIObjectProxy {
    public DXGI_OUTPUT_DESC Desc { get; }
    public DXGI_FRAME_STATISTICS FrameStatistics { get; }
    protected int VTableSize { get; }
    protected __MicroComIDXGIOutputProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual DXGI_OUTPUT_DESC get_Desc();
    public sealed virtual DXGI_MODE_DESC GetDisplayModeList(DXGI_FORMAT EnumFormat, ushort Flags, UInt16* pNumModes);
    public sealed virtual void FindClosestMatchingMode(DXGI_MODE_DESC* pModeToMatch, DXGI_MODE_DESC* pClosestMatch, IUnknown pConcernedDevice);
    public sealed virtual void WaitForVBlank();
    public sealed virtual void TakeOwnership(IUnknown pDevice, int Exclusive);
    public sealed virtual void ReleaseOwnership();
    public sealed virtual void GetGammaControlCapabilities(IntPtr pGammaCaps);
    public sealed virtual void SetGammaControl(Void* pArray);
    public sealed virtual void GetGammaControl(IntPtr pArray);
    public sealed virtual void SetDisplaySurface(IDXGISurface pScanoutSurface);
    public sealed virtual void GetDisplaySurfaceData(IDXGISurface pDestination);
    public sealed virtual DXGI_FRAME_STATISTICS get_FrameStatistics();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIOutputVTable : __MicroComIDXGIObjectVTable {
    private static int GetDesc(Void* this, DXGI_OUTPUT_DESC* pDesc);
    private static int GetDisplayModeList(Void* this, DXGI_FORMAT EnumFormat, ushort Flags, UInt16* pNumModes, DXGI_MODE_DESC* pDesc);
    private static int FindClosestMatchingMode(Void* this, DXGI_MODE_DESC* pModeToMatch, DXGI_MODE_DESC* pClosestMatch, Void* pConcernedDevice);
    private static int WaitForVBlank(Void* this);
    private static int TakeOwnership(Void* this, Void* pDevice, int Exclusive);
    private static void ReleaseOwnership(Void* this);
    private static int GetGammaControlCapabilities(Void* this, IntPtr pGammaCaps);
    private static int SetGammaControl(Void* this, Void* pArray);
    private static int GetGammaControl(Void* this, IntPtr pArray);
    private static int SetDisplaySurface(Void* this, Void* pScanoutSurface);
    private static int GetDisplaySurfaceData(Void* this, Void* pDestination);
    private static int GetFrameStatistics(Void* this, DXGI_FRAME_STATISTICS* pStats);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIResourceProxy : __MicroComIDXGIDeviceSubObjectProxy {
    public IntPtr SharedHandle { get; }
    public UInt32 Usage { get; }
    public ushort EvictionPriority { get; }
    protected int VTableSize { get; }
    protected __MicroComIDXGIResourceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IntPtr get_SharedHandle();
    public sealed virtual UInt32 get_Usage();
    public sealed virtual void SetEvictionPriority(ushort EvictionPriority);
    public sealed virtual ushort get_EvictionPriority();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGIResourceVTable : __MicroComIDXGIDeviceSubObjectVTable {
    private static int GetSharedHandle(Void* this, IntPtr* pSharedHandle);
    private static int GetUsage(Void* this, UInt32* pUsage);
    private static int SetEvictionPriority(Void* this, ushort EvictionPriority);
    private static int GetEvictionPriority(Void* this, UInt16* pEvictionPriority);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGISurfaceProxy : __MicroComIDXGIDeviceSubObjectProxy {
    public DXGI_SURFACE_DESC Desc { get; }
    protected int VTableSize { get; }
    protected __MicroComIDXGISurfaceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual DXGI_SURFACE_DESC get_Desc();
    public sealed virtual void Map(DXGI_MAPPED_RECT* pLockedRect, ushort MapFlags);
    public sealed virtual void Unmap();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGISurfaceVTable : __MicroComIDXGIDeviceSubObjectVTable {
    private static int GetDesc(Void* this, DXGI_SURFACE_DESC* pDesc);
    private static int Map(Void* this, DXGI_MAPPED_RECT* pLockedRect, ushort MapFlags);
    private static int Unmap(Void* this);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGISwapChain1Proxy : __MicroComIDXGISwapChainProxy {
    public DXGI_SWAP_CHAIN_DESC1 Desc1 { get; }
    public DXGI_SWAP_CHAIN_FULLSCREEN_DESC FullscreenDesc { get; }
    public IntPtr Hwnd { get; }
    public IDXGIOutput RestrictToOutput { get; }
    public DXGI_RGBA BackgroundColor { get; }
    public DXGI_MODE_ROTATION Rotation { get; }
    protected int VTableSize { get; }
    protected __MicroComIDXGISwapChain1Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual DXGI_SWAP_CHAIN_DESC1 get_Desc1();
    public sealed virtual DXGI_SWAP_CHAIN_FULLSCREEN_DESC get_FullscreenDesc();
    public sealed virtual IntPtr get_Hwnd();
    public sealed virtual Void* GetCoreWindow(Guid* refiid);
    public sealed virtual void Present1(ushort SyncInterval, ushort PresentFlags, DXGI_PRESENT_PARAMETERS* pPresentParameters);
    public sealed virtual int IsTemporaryMonoSupported();
    public sealed virtual IDXGIOutput get_RestrictToOutput();
    public sealed virtual void SetBackgroundColor(DXGI_RGBA* pColor);
    public sealed virtual DXGI_RGBA get_BackgroundColor();
    public sealed virtual void SetRotation(DXGI_MODE_ROTATION Rotation);
    public sealed virtual DXGI_MODE_ROTATION get_Rotation();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGISwapChain1VTable : __MicroComIDXGISwapChainVTable {
    private static int GetDesc1(Void* this, DXGI_SWAP_CHAIN_DESC1* pDesc);
    private static int GetFullscreenDesc(Void* this, DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc);
    private static int GetHwnd(Void* this, IntPtr* pHwnd);
    private static int GetCoreWindow(Void* this, Guid* refiid, Void** ppUnk);
    private static int Present1(Void* this, ushort SyncInterval, ushort PresentFlags, DXGI_PRESENT_PARAMETERS* pPresentParameters);
    private static int IsTemporaryMonoSupported(Void* this);
    private static int GetRestrictToOutput(Void* this, Void** ppRestrictToOutput);
    private static int SetBackgroundColor(Void* this, DXGI_RGBA* pColor);
    private static int GetBackgroundColor(Void* this, DXGI_RGBA* pColor);
    private static int SetRotation(Void* this, DXGI_MODE_ROTATION Rotation);
    private static int GetRotation(Void* this, DXGI_MODE_ROTATION* pRotation);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGISwapChainProxy : __MicroComIDXGIDeviceSubObjectProxy {
    public DXGI_SWAP_CHAIN_DESC Desc { get; }
    public IDXGIOutput ContainingOutput { get; }
    public DXGI_FRAME_STATISTICS FrameStatistics { get; }
    public ushort LastPresentCount { get; }
    protected int VTableSize { get; }
    protected __MicroComIDXGISwapChainProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int Present(ushort SyncInterval, ushort Flags);
    public sealed virtual Void* GetBuffer(ushort Buffer, Guid* riid);
    public sealed virtual void SetFullscreenState(int Fullscreen, IDXGIOutput pTarget);
    public sealed virtual IDXGIOutput GetFullscreenState(Int32* pFullscreen);
    public sealed virtual DXGI_SWAP_CHAIN_DESC get_Desc();
    public sealed virtual void ResizeBuffers(ushort BufferCount, ushort Width, ushort Height, DXGI_FORMAT NewFormat, ushort SwapChainFlags);
    public sealed virtual void ResizeTarget(DXGI_MODE_DESC* pNewTargetParameters);
    public sealed virtual IDXGIOutput get_ContainingOutput();
    public sealed virtual DXGI_FRAME_STATISTICS get_FrameStatistics();
    public sealed virtual ushort get_LastPresentCount();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.DirectX.Impl.__MicroComIDXGISwapChainVTable : __MicroComIDXGIDeviceSubObjectVTable {
    private static int Present(Void* this, ushort SyncInterval, ushort Flags);
    private static int GetBuffer(Void* this, ushort Buffer, Guid* riid, Void** ppSurface);
    private static int SetFullscreenState(Void* this, int Fullscreen, Void* pTarget);
    private static int GetFullscreenState(Void* this, Int32* pFullscreen, Void** ppTarget);
    private static int GetDesc(Void* this, DXGI_SWAP_CHAIN_DESC* pDesc);
    private static int ResizeBuffers(Void* this, ushort BufferCount, ushort Width, ushort Height, DXGI_FORMAT NewFormat, ushort SwapChainFlags);
    private static int ResizeTarget(Void* this, DXGI_MODE_DESC* pNewTargetParameters);
    private static int GetContainingOutput(Void* this, Void** ppOutput);
    private static int GetFrameStatistics(Void* this, DXGI_FRAME_STATISTICS* pStats);
    private static int GetLastPresentCount(Void* this, UInt16* pLastPresentCount);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.DragSource : object {
    [NullableContextAttribute("1")]
public sealed virtual Task`1<DragDropEffects> DoDragDrop(PointerEventArgs triggerEvent, IDataObject data, DragDropEffects allowedEffects);
}
internal class Avalonia.Win32.EmbeddedWindowImpl : WindowImpl {
    protected virtual IntPtr CreateWindowOverride(ushort atom);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.FramebufferManager : object {
    private static int _bytesPerPixel;
    private static PixelFormat s_format;
    private IntPtr _hwnd;
    private object _lock;
    private Action _onDisposeAction;
    private Nullable`1<FramebufferData> _framebufferData;
    public FramebufferManager(IntPtr hwnd);
    private static FramebufferManager();
    public ILockedFramebuffer Lock();
    public sealed virtual IFramebufferRenderTarget CreateFramebufferRenderTarget();
    public sealed virtual void Dispose();
    private void DrawAndUnlock();
    private Vector GetCurrentDpi();
    private static FramebufferData AllocateFramebufferData(int width, int height);
    private static void DrawToDevice(FramebufferData framebufferData, IntPtr hDC, int destX, int destY, int srcX, int srcY, int width, int height);
    private static bool DrawToWindow(IntPtr hWnd, FramebufferData framebufferData, int destX, int destY, int srcX, int srcY, int width, int height);
}
internal interface Avalonia.Win32.ICompositionEffectsSurface {
    public abstract virtual bool IsBlurSupported(BlurEffect effect);
    public abstract virtual void SetBlur(BlurEffect enable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.IconImpl : object {
    private Win32Icon _smallIcon;
    private Win32Icon _bigIcon;
    private static int s_taskbarIconSize;
    public IconImpl(Stream smallIcon, Stream bigIcon);
    public IconImpl(Stream icon);
    private static IconImpl();
    private static Win32Icon CreateIconImpl(Stream stream);
    public Win32Icon LoadSmallIcon(double scaleFactor);
    public Win32Icon LoadBigIcon(double scaleFactor);
    private static PixelSize GetScaledSize(int baseSize, double factor);
    public sealed virtual void Save(Stream outputStream);
    public sealed virtual void Dispose();
}
internal class Avalonia.Win32.Input.Imm32CaretManager : ValueType {
    private bool _isCaretCreated;
    public void TryCreate(IntPtr hwnd);
    public void TryMove(int x, int y);
    public void TryDestroy();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Input.Imm32InputMethod : object {
    [CompilerGeneratedAttribute]
private IntPtr <Hwnd>k__BackingField;
    private IntPtr _currentHimc;
    private WindowImpl _parent;
    private Imm32CaretManager _caretManager;
    private ushort _langId;
    private static int CaretMargin;
    private bool _ignoreComposition;
    [CompilerGeneratedAttribute]
private TextInputMethodClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComposing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Composition>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static Imm32InputMethod <Current>k__BackingField;
    public IntPtr Hwnd { get; private set; }
    public TextInputMethodClient Client { get; private set; }
    [MemberNotNullWhenAttribute("True", "Client")]
public bool IsActive { get; }
    public bool IsComposing { get; public set; }
    public bool ShowCompositionWindow { get; }
    public string Composition { get; internal set; }
    [NullableAttribute("1")]
public static Imm32InputMethod Current { get; }
    private static Imm32InputMethod();
    [CompilerGeneratedAttribute]
public IntPtr get_Hwnd();
    [CompilerGeneratedAttribute]
private void set_Hwnd(IntPtr value);
    [CompilerGeneratedAttribute]
public TextInputMethodClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(TextInputMethodClient value);
    [MemberNotNullWhenAttribute("True", "Client")]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public bool get_IsComposing();
    [CompilerGeneratedAttribute]
public void set_IsComposing(bool value);
    public bool get_ShowCompositionWindow();
    [CompilerGeneratedAttribute]
public string get_Composition();
    [CompilerGeneratedAttribute]
internal void set_Composition(string value);
    public void CreateCaret();
    public void EnableImm();
    public void DisableImm();
    [NullableContextAttribute("1")]
public void SetLanguageAndWindow(WindowImpl parent, IntPtr hwnd, IntPtr HKL);
    public void ClearLanguageAndWindow();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static Imm32InputMethod get_Current();
    public sealed virtual void Reset();
    public sealed virtual void SetClient(TextInputMethodClient client);
    public sealed virtual void SetCursorRect(Rect rect);
    private void MoveImeWindow(Rect rect, IntPtr himc);
    private static void ConfigureCompositionWindow(int x1, int y1, IntPtr himc, int height);
    [NullableContextAttribute("1")]
public sealed virtual void SetOptions(TextInputOptions options);
    public void CompositionChanged(string composition);
    public string GetCompositionString(GCS flag);
    public void HandleCompositionStart();
    public void HandleCompositionEnd(UInt32 timestamp);
    public void HandleComposition(IntPtr wParam, IntPtr lParam, UInt32 timestamp);
    private static int ToInt32(IntPtr ptr);
    private void KeyPress(Key key, PhysicalKey physicalKey);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private void <Reset>b__34_0();
    [CompilerGeneratedAttribute]
private void <SetClient>b__35_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Avalonia.Win32.Input.KeyInterop : object {
    private static Dictionary`2<Key, int> s_virtualKeyFromKey;
    private static Dictionary`2<int, Key> s_keyFromVirtualKey;
    private static Dictionary`2<ushort, PhysicalKey> s_physicalKeyFromExtendedScanCode;
    private static KeyInterop();
    private static bool IsExtended(int keyData);
    private static byte GetScanCode(int keyData);
    private static int GetVirtualKey(int virtualKey, int keyData);
    public static Key KeyFromVirtualKey(int virtualKey, int keyData);
    public static int VirtualKeyFromKey(Key key);
    public static PhysicalKey PhysicalKeyFromVirtualKey(int virtualKey, int keyData);
    [NullableContextAttribute("2")]
public static string GetKeySymbol(int virtualKey, int keyData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Input.WindowsInputPane : InputPaneBase {
    private static Lazy`1<bool> s_inputPaneSupported;
    private static Guid CLSID_FrameworkInputPane;
    private static Guid SID_IFrameworkInputPane;
    private WindowImpl _windowImpl;
    [NullableAttribute("2")]
private IFrameworkInputPane _inputPane;
    private UInt32 _cookie;
    private WindowsInputPane(WindowImpl windowImpl);
    private static WindowsInputPane();
    public static WindowsInputPane TryCreate(WindowImpl windowImpl);
    private void OnStateChanged(bool showing, Nullable`1<RECT> prcInputPaneScreenLocation);
    private Rect ScreenRectToClient(RECT screenRect);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Input.WindowsKeyboardDevice : KeyboardDevice {
    [CompilerGeneratedAttribute]
private static WindowsKeyboardDevice <Instance>k__BackingField;
    public static WindowsKeyboardDevice Instance { get; }
    public RawInputModifiers Modifiers { get; }
    private static WindowsKeyboardDevice();
    [CompilerGeneratedAttribute]
public static WindowsKeyboardDevice get_Instance();
    public RawInputModifiers get_Modifiers();
}
internal class Avalonia.Win32.Input.WindowsMouseDevice : MouseDevice {
    [NullableAttribute("1")]
private IPointer _pointer;
    [NullableContextAttribute("2")]
internal void Capture(IInputElement control);
}
internal class Avalonia.Win32.Interop._DROPFILES : ValueType {
    public int pFiles;
    public int X;
    public int Y;
    public bool fNC;
    public bool fWide;
}
internal enum Avalonia.Win32.Interop.AppBarMessage : Enum {
    public UInt32 value__;
    public static AppBarMessage ABM_GETSTATE;
    public static AppBarMessage ABM_GETTASKBARPOS;
}
[ComVisibleAttribute("True")]
[GuidAttribute("d8e55844-7043-4edc-979d-593cc6b4775e")]
internal enum Avalonia.Win32.Interop.Automation.AsyncContentLoadedState : Enum {
    public int value__;
    public static AsyncContentLoadedState Beginning;
    public static AsyncContentLoadedState Progress;
    public static AsyncContentLoadedState Completed;
}
[ComVisibleAttribute("True")]
[GuidAttribute("70d46e77-e3a8-449d-913c-e30eb2afecdb")]
public enum Avalonia.Win32.Interop.Automation.DockPosition : Enum {
    public int value__;
    public static DockPosition Top;
    public static DockPosition Left;
    public static DockPosition Bottom;
    public static DockPosition Right;
    public static DockPosition Fill;
    public static DockPosition None;
}
[ComVisibleAttribute("True")]
[GuidAttribute("159bc72c-4ad3-485e-9637-d7052edf0146")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IDockProvider {
    public DockPosition DockPosition { get; }
    public abstract virtual void SetDockPosition(DockPosition dockPosition);
    public abstract virtual DockPosition get_DockPosition();
}
[ComVisibleAttribute("True")]
[GuidAttribute("d847d3a5-cab0-4a98-8c32-ecb45c59ad24")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IExpandCollapseProvider {
    public ExpandCollapseState ExpandCollapseState { get; }
    public abstract virtual void Expand();
    public abstract virtual void Collapse();
    public abstract virtual ExpandCollapseState get_ExpandCollapseState();
}
[NullableContextAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("d02541f1-fb81-4d64-ae32-f520f8a6dbd1")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IGridItemProvider {
    public int Row { get; }
    public int Column { get; }
    public int RowSpan { get; }
    public int ColumnSpan { get; }
    public IRawElementProviderSimple ContainingGrid { get; }
    public abstract virtual int get_Row();
    public abstract virtual int get_Column();
    public abstract virtual int get_RowSpan();
    public abstract virtual int get_ColumnSpan();
    public abstract virtual IRawElementProviderSimple get_ContainingGrid();
}
[NullableContextAttribute("2")]
[ComVisibleAttribute("True")]
[GuidAttribute("b17d6187-0907-464b-a168-0ef17a1572b1")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IGridProvider {
    public int RowCount { get; }
    public int ColumnCount { get; }
    public abstract virtual IRawElementProviderSimple GetItem(int row, int column);
    public abstract virtual int get_RowCount();
    public abstract virtual int get_ColumnCount();
}
[ComVisibleAttribute("True")]
[GuidAttribute("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IInvokeProvider {
    public abstract virtual void Invoke();
}
[NullableContextAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("6278cab1-b556-4a1a-b4e0-418acc523201")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IMultipleViewProvider {
    public int CurrentView { get; }
    public abstract virtual string GetViewName(int viewId);
    public abstract virtual void SetCurrentView(int viewId);
    public abstract virtual int get_CurrentView();
    public abstract virtual Int32[] GetSupportedViews();
}
[ComVisibleAttribute("True")]
[GuidAttribute("36dc7aef-33e6-4691-afe1-2be7274b3d33")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IRangeValueProvider {
    public double Value { get; }
    public bool IsReadOnly { get; }
    public double Maximum { get; }
    public double Minimum { get; }
    public double LargeChange { get; }
    public double SmallChange { get; }
    public abstract virtual void SetValue(double value);
    public abstract virtual double get_Value();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual double get_Maximum();
    public abstract virtual double get_Minimum();
    public abstract virtual double get_LargeChange();
    public abstract virtual double get_SmallChange();
}
[NullableContextAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("a407b27b-0f6d-4427-9292-473c7bf93258")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IRawElementProviderAdviseEvents {
    public abstract virtual void AdviseEventAdded(int eventId, Int32[] properties);
    public abstract virtual void AdviseEventRemoved(int eventId, Int32[] properties);
}
[NullableContextAttribute("2")]
[ComVisibleAttribute("True")]
[GuidAttribute("f7063da8-8359-439c-9297-bbc5299a7d87")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IRawElementProviderFragment {
    public Rect BoundingRectangle { get; }
    public IRawElementProviderFragmentRoot FragmentRoot { get; }
    public abstract virtual IRawElementProviderFragment Navigate(NavigateDirection direction);
    public abstract virtual Int32[] GetRuntimeId();
    public abstract virtual Rect get_BoundingRectangle();
    public abstract virtual IRawElementProviderSimple[] GetEmbeddedFragmentRoots();
    public abstract virtual void SetFocus();
    public abstract virtual IRawElementProviderFragmentRoot get_FragmentRoot();
}
[ComVisibleAttribute("True")]
[GuidAttribute("620ce2a5-ab8f-40a9-86cb-de3c75599b58")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IRawElementProviderFragmentRoot {
    [NullableContextAttribute("2")]
public abstract virtual IRawElementProviderFragment ElementProviderFromPoint(double x, double y);
    [NullableContextAttribute("2")]
public abstract virtual IRawElementProviderFragment GetFocus();
}
[NullableContextAttribute("2")]
[ComVisibleAttribute("True")]
[GuidAttribute("d6dd68d1-86fd-4332-8666-9abedea2d24c")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IRawElementProviderSimple {
    public ProviderOptions ProviderOptions { get; }
    public IRawElementProviderSimple HostRawElementProvider { get; }
    public abstract virtual ProviderOptions get_ProviderOptions();
    public abstract virtual object GetPatternProvider(int patternId);
    public abstract virtual object GetPropertyValue(int propertyId);
    public abstract virtual IRawElementProviderSimple get_HostRawElementProvider();
}
[ComVisibleAttribute("True")]
[GuidAttribute("a0a839a9-8da1-4a82-806a-8e0d44e79f56")]
public interface Avalonia.Win32.Interop.Automation.IRawElementProviderSimple2 {
    public abstract virtual void ShowContextMenu();
}
[ComVisibleAttribute("True")]
[GuidAttribute("2360c714-4bf1-4b26-ba65-9b21316127eb")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IScrollItemProvider {
    public abstract virtual void ScrollIntoView();
}
[ComVisibleAttribute("True")]
[GuidAttribute("b38b8077-1fc3-42a5-8cae-d40c2215055a")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IScrollProvider {
    public double HorizontalScrollPercent { get; }
    public double VerticalScrollPercent { get; }
    public double HorizontalViewSize { get; }
    public double VerticalViewSize { get; }
    public bool HorizontallyScrollable { get; }
    public bool VerticallyScrollable { get; }
    public abstract virtual void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public abstract virtual void SetScrollPercent(double horizontalPercent, double verticalPercent);
    public abstract virtual double get_HorizontalScrollPercent();
    public abstract virtual double get_VerticalScrollPercent();
    public abstract virtual double get_HorizontalViewSize();
    public abstract virtual double get_VerticalViewSize();
    public abstract virtual bool get_HorizontallyScrollable();
    public abstract virtual bool get_VerticallyScrollable();
}
[NullableContextAttribute("2")]
[ComVisibleAttribute("True")]
[GuidAttribute("2acad808-b2d4-452d-a407-91ff1ad167b2")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.ISelectionItemProvider {
    public bool IsSelected { get; }
    public IRawElementProviderSimple SelectionContainer { get; }
    public abstract virtual void Select();
    public abstract virtual void AddToSelection();
    public abstract virtual void RemoveFromSelection();
    public abstract virtual bool get_IsSelected();
    public abstract virtual IRawElementProviderSimple get_SelectionContainer();
}
[NullableContextAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("fb8b03af-3bdf-48d4-bd36-1a65793be168")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.ISelectionProvider {
    public bool CanSelectMultiple { get; }
    public bool IsSelectionRequired { get; }
    public abstract virtual IRawElementProviderSimple[] GetSelection();
    public abstract virtual bool get_CanSelectMultiple();
    public abstract virtual bool get_IsSelectionRequired();
}
[ComVisibleAttribute("True")]
[GuidAttribute("29db1a06-02ce-4cf7-9b42-565d4fab20ee")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.ISynchronizedInputProvider {
    public abstract virtual void StartListening(SynchronizedInputType inputType);
    public abstract virtual void Cancel();
}
[NullableContextAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("b9734fa6-771f-4d78-9c90-2517999349cd")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.ITableItemProvider {
    public abstract virtual IRawElementProviderSimple[] GetRowHeaderItems();
    public abstract virtual IRawElementProviderSimple[] GetColumnHeaderItems();
}
[NullableContextAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("9c860395-97b3-490a-b52a-858cc22af166")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.ITableProvider {
    public RowOrColumnMajor RowOrColumnMajor { get; }
    public abstract virtual IRawElementProviderSimple[] GetRowHeaders();
    public abstract virtual IRawElementProviderSimple[] GetColumnHeaders();
    public abstract virtual RowOrColumnMajor get_RowOrColumnMajor();
}
[NullableContextAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("3589c92c-63f3-4367-99bb-ada653b77cf2")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.ITextProvider {
    public ITextRangeProvider DocumentRange { get; }
    public SupportedTextSelection SupportedTextSelection { get; }
    public abstract virtual ITextRangeProvider[] GetSelection();
    public abstract virtual ITextRangeProvider[] GetVisibleRanges();
    public abstract virtual ITextRangeProvider RangeFromChild(IRawElementProviderSimple childElement);
    public abstract virtual ITextRangeProvider RangeFromPoint(Point screenLocation);
    public abstract virtual ITextRangeProvider get_DocumentRange();
    public abstract virtual SupportedTextSelection get_SupportedTextSelection();
}
[NullableContextAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("5347ad7b-c355-46f8-aff5-909033582f63")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.ITextRangeProvider {
    public abstract virtual ITextRangeProvider Clone();
    public abstract virtual bool Compare(ITextRangeProvider range);
    public abstract virtual int CompareEndpoints(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    public abstract virtual void ExpandToEnclosingUnit(TextUnit unit);
    public abstract virtual ITextRangeProvider FindAttribute(int attribute, object value, bool backward);
    public abstract virtual ITextRangeProvider FindText(string text, bool backward, bool ignoreCase);
    public abstract virtual object GetAttributeValue(int attribute);
    public abstract virtual Double[] GetBoundingRectangles();
    public abstract virtual IRawElementProviderSimple GetEnclosingElement();
    public abstract virtual string GetText(int maxLength);
    public abstract virtual int Move(TextUnit unit, int count);
    public abstract virtual int MoveEndpointByUnit(TextPatternRangeEndpoint endpoint, TextUnit unit, int count);
    public abstract virtual void MoveEndpointByRange(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    public abstract virtual void Select();
    public abstract virtual void AddToSelection();
    public abstract virtual void RemoveFromSelection();
    public abstract virtual void ScrollIntoView(bool alignToTop);
    public abstract virtual IRawElementProviderSimple[] GetChildren();
}
[ComVisibleAttribute("True")]
[GuidAttribute("56d00bd0-c4f4-433c-a836-1a52a57e0892")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IToggleProvider {
    public ToggleState ToggleState { get; }
    public abstract virtual void Toggle();
    public abstract virtual ToggleState get_ToggleState();
}
[ComVisibleAttribute("True")]
[GuidAttribute("6829ddc4-4f91-4ffa-b86f-bd3e2987cb4c")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.ITransformProvider {
    public bool CanMove { get; }
    public bool CanResize { get; }
    public bool CanRotate { get; }
    public abstract virtual void Move(double x, double y);
    public abstract virtual void Resize(double width, double height);
    public abstract virtual void Rotate(double degrees);
    public abstract virtual bool get_CanMove();
    public abstract virtual bool get_CanResize();
    public abstract virtual bool get_CanRotate();
}
[NullableContextAttribute("2")]
[ComVisibleAttribute("True")]
[GuidAttribute("c7935180-6fb3-4201-b174-7df73adbf64a")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IValueProvider {
    public string Value { get; }
    public bool IsReadOnly { get; }
    public abstract virtual void SetValue(string value);
    public abstract virtual string get_Value();
    public abstract virtual bool get_IsReadOnly();
}
[ComVisibleAttribute("True")]
[GuidAttribute("987df77b-db06-4d77-8f8a-86a9c3bb90b9")]
[InterfaceTypeAttribute("1")]
public interface Avalonia.Win32.Interop.Automation.IWindowProvider {
    public bool Maximizable { get; }
    public bool Minimizable { get; }
    public bool IsModal { get; }
    public WindowVisualState VisualState { get; }
    public WindowInteractionState InteractionState { get; }
    public bool IsTopmost { get; }
    public abstract virtual void SetVisualState(WindowVisualState state);
    public abstract virtual void Close();
    public abstract virtual bool WaitForInputIdle(int milliseconds);
    public abstract virtual bool get_Maximizable();
    public abstract virtual bool get_Minimizable();
    public abstract virtual bool get_IsModal();
    public abstract virtual WindowVisualState get_VisualState();
    public abstract virtual WindowInteractionState get_InteractionState();
    public abstract virtual bool get_IsTopmost();
}
[ComVisibleAttribute("True")]
[GuidAttribute("670c3006-bf4c-428b-8534-e1848f645122")]
public enum Avalonia.Win32.Interop.Automation.NavigateDirection : Enum {
    public int value__;
    public static NavigateDirection Parent;
    public static NavigateDirection NextSibling;
    public static NavigateDirection PreviousSibling;
    public static NavigateDirection FirstChild;
    public static NavigateDirection LastChild;
}
[FlagsAttribute]
public enum Avalonia.Win32.Interop.Automation.ProviderOptions : Enum {
    public int value__;
    public static ProviderOptions ClientSideProvider;
    public static ProviderOptions ServerSideProvider;
    public static ProviderOptions NonClientAreaProvider;
    public static ProviderOptions OverrideProvider;
    public static ProviderOptions ProviderOwnsSetFocus;
    public static ProviderOptions UseComThreading;
}
[ComVisibleAttribute("True")]
[GuidAttribute("15fdf2e2-9847-41cd-95dd-510612a025ea")]
public enum Avalonia.Win32.Interop.Automation.RowOrColumnMajor : Enum {
    public int value__;
    public static RowOrColumnMajor RowMajor;
    public static RowOrColumnMajor ColumnMajor;
    public static RowOrColumnMajor Indeterminate;
}
[ComVisibleAttribute("True")]
[GuidAttribute("e4cfef41-071d-472c-a65c-c14f59ea81eb")]
internal enum Avalonia.Win32.Interop.Automation.StructureChangeType : Enum {
    public int value__;
    public static StructureChangeType ChildAdded;
    public static StructureChangeType ChildRemoved;
    public static StructureChangeType ChildrenInvalidated;
    public static StructureChangeType ChildrenBulkAdded;
    public static StructureChangeType ChildrenBulkRemoved;
    public static StructureChangeType ChildrenReordered;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[GuidAttribute("3d9e3d8f-bfb0-484f-84ab-93ff4280cbc4")]
public enum Avalonia.Win32.Interop.Automation.SupportedTextSelection : Enum {
    public int value__;
    public static SupportedTextSelection None;
    public static SupportedTextSelection Single;
    public static SupportedTextSelection Multiple;
}
[ComVisibleAttribute("True")]
[GuidAttribute("fdc8f176-aed2-477a-8c89-5604c66f278d")]
public enum Avalonia.Win32.Interop.Automation.SynchronizedInputType : Enum {
    public int value__;
    public static SynchronizedInputType KeyUp;
    public static SynchronizedInputType KeyDown;
    public static SynchronizedInputType MouseLeftButtonUp;
    public static SynchronizedInputType MouseLeftButtonDown;
    public static SynchronizedInputType MouseRightButtonUp;
    public static SynchronizedInputType MouseRightButtonDown;
}
public enum Avalonia.Win32.Interop.Automation.TextPatternRangeEndpoint : Enum {
    public int value__;
    public static TextPatternRangeEndpoint Start;
    public static TextPatternRangeEndpoint End;
}
public enum Avalonia.Win32.Interop.Automation.TextUnit : Enum {
    public int value__;
    public static TextUnit Character;
    public static TextUnit Format;
    public static TextUnit Word;
    public static TextUnit Line;
    public static TextUnit Paragraph;
    public static TextUnit Page;
    public static TextUnit Document;
}
internal enum Avalonia.Win32.Interop.Automation.UiaControlTypeId : Enum {
    public int value__;
    public static UiaControlTypeId Button;
    public static UiaControlTypeId Calendar;
    public static UiaControlTypeId CheckBox;
    public static UiaControlTypeId ComboBox;
    public static UiaControlTypeId Edit;
    public static UiaControlTypeId Hyperlink;
    public static UiaControlTypeId Image;
    public static UiaControlTypeId ListItem;
    public static UiaControlTypeId List;
    public static UiaControlTypeId Menu;
    public static UiaControlTypeId MenuBar;
    public static UiaControlTypeId MenuItem;
    public static UiaControlTypeId ProgressBar;
    public static UiaControlTypeId RadioButton;
    public static UiaControlTypeId ScrollBar;
    public static UiaControlTypeId Slider;
    public static UiaControlTypeId Spinner;
    public static UiaControlTypeId StatusBar;
    public static UiaControlTypeId Tab;
    public static UiaControlTypeId TabItem;
    public static UiaControlTypeId Text;
    public static UiaControlTypeId ToolBar;
    public static UiaControlTypeId ToolTip;
    public static UiaControlTypeId Tree;
    public static UiaControlTypeId TreeItem;
    public static UiaControlTypeId Custom;
    public static UiaControlTypeId Group;
    public static UiaControlTypeId Thumb;
    public static UiaControlTypeId DataGrid;
    public static UiaControlTypeId DataItem;
    public static UiaControlTypeId Document;
    public static UiaControlTypeId SplitButton;
    public static UiaControlTypeId Window;
    public static UiaControlTypeId Pane;
    public static UiaControlTypeId Header;
    public static UiaControlTypeId HeaderItem;
    public static UiaControlTypeId Table;
    public static UiaControlTypeId TitleBar;
    public static UiaControlTypeId Separator;
    public static UiaControlTypeId SemanticZoom;
    public static UiaControlTypeId AppBar;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Avalonia.Win32.Interop.Automation.UiaCoreProviderApi : object {
    public static int UIA_E_ELEMENTNOTENABLED;
    public static bool UiaClientsAreListening();
    public static IntPtr UiaReturnRawElementProvider(IntPtr hwnd, IntPtr wParam, IntPtr lParam, IRawElementProviderSimple el);
    [NullableContextAttribute("1")]
public static int UiaHostProviderFromHwnd(IntPtr hwnd, IRawElementProviderSimple& provider);
    public static int UiaRaiseAutomationEvent(IRawElementProviderSimple provider, int id);
    public static int UiaRaiseAutomationPropertyChangedEvent(IRawElementProviderSimple provider, int id, object oldValue, object newValue);
    public static int UiaRaiseStructureChangedEvent(IRawElementProviderSimple provider, StructureChangeType structureChangeType, Int32[] runtimeId, int runtimeIdLen);
    public static int UiaDisconnectProvider(IRawElementProviderSimple provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Win32.Interop.Automation.UiaCoreTypesApi : object {
    internal static int UIA_E_ELEMENTNOTENABLED;
    internal static int UIA_E_ELEMENTNOTAVAILABLE;
    internal static int UIA_E_NOCLICKABLEPOINT;
    internal static int UIA_E_PROXYASSEMBLYNOTLOADED;
    private static Nullable`1<bool> s_isNetComInteropAvailable;
    internal static bool IsNetComInteropAvailable { get; }
    internal static bool get_IsNetComInteropAvailable();
    internal static int UiaLookupId(AutomationIdType type, Guid& guid);
    [RequiresUnreferencedCodeAttribute("Requires .NET COM interop")]
internal static object UiaGetReservedNotSupportedValue();
    [RequiresUnreferencedCodeAttribute("Requires .NET COM interop")]
internal static object UiaGetReservedMixedAttributeValue();
    private static void CheckError(int hr);
    private static bool GetIsNetComInteropAvailable();
    private static int RawUiaLookupId(AutomationIdType type, Guid& guid);
    private static int RawUiaGetReservedNotSupportedValue(Object& notSupportedValue);
    private static int RawUiaGetReservedMixedAttributeValue(Object& mixedAttributeValue);
}
internal enum Avalonia.Win32.Interop.Automation.UiaEventId : Enum {
    public int value__;
    public static UiaEventId ToolTipOpened;
    public static UiaEventId ToolTipClosed;
    public static UiaEventId StructureChanged;
    public static UiaEventId MenuOpened;
    public static UiaEventId AutomationPropertyChanged;
    public static UiaEventId AutomationFocusChanged;
    public static UiaEventId AsyncContentLoaded;
    public static UiaEventId MenuClosed;
    public static UiaEventId LayoutInvalidated;
    public static UiaEventId Invoke_Invoked;
    public static UiaEventId SelectionItem_ElementAddedToSelection;
    public static UiaEventId SelectionItem_ElementRemovedFromSelection;
    public static UiaEventId SelectionItem_ElementSelected;
    public static UiaEventId Selection_Invalidated;
    public static UiaEventId Text_TextSelectionChanged;
    public static UiaEventId Text_TextChanged;
    public static UiaEventId Window_WindowOpened;
    public static UiaEventId Window_WindowClosed;
    public static UiaEventId MenuModeStart;
    public static UiaEventId MenuModeEnd;
    public static UiaEventId InputReachedTarget;
    public static UiaEventId InputReachedOtherElement;
    public static UiaEventId InputDiscarded;
    public static UiaEventId SystemAlert;
    public static UiaEventId LiveRegionChanged;
    public static UiaEventId HostedFragmentRootsInvalidated;
    public static UiaEventId Drag_DragStart;
    public static UiaEventId Drag_DragCancel;
    public static UiaEventId Drag_DragComplete;
    public static UiaEventId DropTarget_DragEnter;
    public static UiaEventId DropTarget_DragLeave;
    public static UiaEventId DropTarget_Dropped;
    public static UiaEventId TextEdit_TextChanged;
    public static UiaEventId TextEdit_ConversionTargetChanged;
    public static UiaEventId Changes;
}
internal enum Avalonia.Win32.Interop.Automation.UiaPatternId : Enum {
    public int value__;
    public static UiaPatternId Invoke;
    public static UiaPatternId Selection;
    public static UiaPatternId Value;
    public static UiaPatternId RangeValue;
    public static UiaPatternId Scroll;
    public static UiaPatternId ExpandCollapse;
    public static UiaPatternId Grid;
    public static UiaPatternId GridItem;
    public static UiaPatternId MultipleView;
    public static UiaPatternId Window;
    public static UiaPatternId SelectionItem;
    public static UiaPatternId Dock;
    public static UiaPatternId Table;
    public static UiaPatternId TableItem;
    public static UiaPatternId Text;
    public static UiaPatternId Toggle;
    public static UiaPatternId Transform;
    public static UiaPatternId ScrollItem;
    public static UiaPatternId LegacyIAccessible;
    public static UiaPatternId ItemContainer;
    public static UiaPatternId VirtualizedItem;
    public static UiaPatternId SynchronizedInput;
    public static UiaPatternId ObjectModel;
    public static UiaPatternId Annotation;
    public static UiaPatternId Text2;
    public static UiaPatternId Styles;
    public static UiaPatternId Spreadsheet;
    public static UiaPatternId SpreadsheetItem;
    public static UiaPatternId Transform2;
    public static UiaPatternId TextChild;
    public static UiaPatternId Drag;
    public static UiaPatternId DropTarget;
    public static UiaPatternId TextEdit;
    public static UiaPatternId CustomNavigation;
}
internal enum Avalonia.Win32.Interop.Automation.UiaPropertyId : Enum {
    public int value__;
    public static UiaPropertyId RuntimeId;
    public static UiaPropertyId BoundingRectangle;
    public static UiaPropertyId ProcessId;
    public static UiaPropertyId ControlType;
    public static UiaPropertyId LocalizedControlType;
    public static UiaPropertyId Name;
    public static UiaPropertyId AcceleratorKey;
    public static UiaPropertyId AccessKey;
    public static UiaPropertyId HasKeyboardFocus;
    public static UiaPropertyId IsKeyboardFocusable;
    public static UiaPropertyId IsEnabled;
    public static UiaPropertyId AutomationId;
    public static UiaPropertyId ClassName;
    public static UiaPropertyId HelpText;
    public static UiaPropertyId ClickablePoint;
    public static UiaPropertyId Culture;
    public static UiaPropertyId IsControlElement;
    public static UiaPropertyId IsContentElement;
    public static UiaPropertyId LabeledBy;
    public static UiaPropertyId IsPassword;
    public static UiaPropertyId NativeWindowHandle;
    public static UiaPropertyId ItemType;
    public static UiaPropertyId IsOffscreen;
    public static UiaPropertyId Orientation;
    public static UiaPropertyId FrameworkId;
    public static UiaPropertyId IsRequiredForForm;
    public static UiaPropertyId ItemStatus;
    public static UiaPropertyId IsDockPatternAvailable;
    public static UiaPropertyId IsExpandCollapsePatternAvailable;
    public static UiaPropertyId IsGridItemPatternAvailable;
    public static UiaPropertyId IsGridPatternAvailable;
    public static UiaPropertyId IsInvokePatternAvailable;
    public static UiaPropertyId IsMultipleViewPatternAvailable;
    public static UiaPropertyId IsRangeValuePatternAvailable;
    public static UiaPropertyId IsScrollPatternAvailable;
    public static UiaPropertyId IsScrollItemPatternAvailable;
    public static UiaPropertyId IsSelectionItemPatternAvailable;
    public static UiaPropertyId IsSelectionPatternAvailable;
    public static UiaPropertyId IsTablePatternAvailable;
    public static UiaPropertyId IsTableItemPatternAvailable;
    public static UiaPropertyId IsTextPatternAvailable;
    public static UiaPropertyId IsTogglePatternAvailable;
    public static UiaPropertyId IsTransformPatternAvailable;
    public static UiaPropertyId IsValuePatternAvailable;
    public static UiaPropertyId IsWindowPatternAvailable;
    public static UiaPropertyId ValueValue;
    public static UiaPropertyId ValueIsReadOnly;
    public static UiaPropertyId RangeValueValue;
    public static UiaPropertyId RangeValueIsReadOnly;
    public static UiaPropertyId RangeValueMinimum;
    public static UiaPropertyId RangeValueMaximum;
    public static UiaPropertyId RangeValueLargeChange;
    public static UiaPropertyId RangeValueSmallChange;
    public static UiaPropertyId ScrollHorizontalScrollPercent;
    public static UiaPropertyId ScrollHorizontalViewSize;
    public static UiaPropertyId ScrollVerticalScrollPercent;
    public static UiaPropertyId ScrollVerticalViewSize;
    public static UiaPropertyId ScrollHorizontallyScrollable;
    public static UiaPropertyId ScrollVerticallyScrollable;
    public static UiaPropertyId SelectionSelection;
    public static UiaPropertyId SelectionCanSelectMultiple;
    public static UiaPropertyId SelectionIsSelectionRequired;
    public static UiaPropertyId GridRowCount;
    public static UiaPropertyId GridColumnCount;
    public static UiaPropertyId GridItemRow;
    public static UiaPropertyId GridItemColumn;
    public static UiaPropertyId GridItemRowSpan;
    public static UiaPropertyId GridItemColumnSpan;
    public static UiaPropertyId GridItemContainingGrid;
    public static UiaPropertyId DockDockPosition;
    public static UiaPropertyId ExpandCollapseExpandCollapseState;
    public static UiaPropertyId MultipleViewCurrentView;
    public static UiaPropertyId MultipleViewSupportedViews;
    public static UiaPropertyId WindowCanMaximize;
    public static UiaPropertyId WindowCanMinimize;
    public static UiaPropertyId WindowWindowVisualState;
    public static UiaPropertyId WindowWindowInteractionState;
    public static UiaPropertyId WindowIsModal;
    public static UiaPropertyId WindowIsTopmost;
    public static UiaPropertyId SelectionItemIsSelected;
    public static UiaPropertyId SelectionItemSelectionContainer;
    public static UiaPropertyId TableRowHeaders;
    public static UiaPropertyId TableColumnHeaders;
    public static UiaPropertyId TableRowOrColumnMajor;
    public static UiaPropertyId TableItemRowHeaderItems;
    public static UiaPropertyId TableItemColumnHeaderItems;
    public static UiaPropertyId ToggleToggleState;
    public static UiaPropertyId TransformCanMove;
    public static UiaPropertyId TransformCanResize;
    public static UiaPropertyId TransformCanRotate;
    public static UiaPropertyId IsLegacyIAccessiblePatternAvailable;
    public static UiaPropertyId LegacyIAccessibleChildId;
    public static UiaPropertyId LegacyIAccessibleName;
    public static UiaPropertyId LegacyIAccessibleValue;
    public static UiaPropertyId LegacyIAccessibleDescription;
    public static UiaPropertyId LegacyIAccessibleRole;
    public static UiaPropertyId LegacyIAccessibleState;
    public static UiaPropertyId LegacyIAccessibleHelp;
    public static UiaPropertyId LegacyIAccessibleKeyboardShortcut;
    public static UiaPropertyId LegacyIAccessibleSelection;
    public static UiaPropertyId LegacyIAccessibleDefaultAction;
    public static UiaPropertyId AriaRole;
    public static UiaPropertyId AriaProperties;
    public static UiaPropertyId IsDataValidForForm;
    public static UiaPropertyId ControllerFor;
    public static UiaPropertyId DescribedBy;
    public static UiaPropertyId FlowsTo;
    public static UiaPropertyId ProviderDescription;
    public static UiaPropertyId IsItemContainerPatternAvailable;
    public static UiaPropertyId IsVirtualizedItemPatternAvailable;
    public static UiaPropertyId IsSynchronizedInputPatternAvailable;
    public static UiaPropertyId OptimizeForVisualContent;
    public static UiaPropertyId IsObjectModelPatternAvailable;
    public static UiaPropertyId AnnotationAnnotationTypeId;
    public static UiaPropertyId AnnotationAnnotationTypeName;
    public static UiaPropertyId AnnotationAuthor;
    public static UiaPropertyId AnnotationDateTime;
    public static UiaPropertyId AnnotationTarget;
    public static UiaPropertyId IsAnnotationPatternAvailable;
    public static UiaPropertyId IsTextPattern2Available;
    public static UiaPropertyId StylesStyleId;
    public static UiaPropertyId StylesStyleName;
    public static UiaPropertyId StylesFillColor;
    public static UiaPropertyId StylesFillPatternStyle;
    public static UiaPropertyId StylesShape;
    public static UiaPropertyId StylesFillPatternColor;
    public static UiaPropertyId StylesExtendedProperties;
    public static UiaPropertyId IsStylesPatternAvailable;
    public static UiaPropertyId IsSpreadsheetPatternAvailable;
    public static UiaPropertyId SpreadsheetItemFormula;
    public static UiaPropertyId SpreadsheetItemAnnotationObjects;
    public static UiaPropertyId SpreadsheetItemAnnotationTypes;
    public static UiaPropertyId IsSpreadsheetItemPatternAvailable;
    public static UiaPropertyId Transform2CanZoom;
    public static UiaPropertyId IsTransformPattern2Available;
    public static UiaPropertyId LiveSetting;
    public static UiaPropertyId IsTextChildPatternAvailable;
    public static UiaPropertyId IsDragPatternAvailable;
    public static UiaPropertyId DragIsGrabbed;
    public static UiaPropertyId DragDropEffect;
    public static UiaPropertyId DragDropEffects;
    public static UiaPropertyId IsDropTargetPatternAvailable;
    public static UiaPropertyId DropTargetDropTargetEffect;
    public static UiaPropertyId DropTargetDropTargetEffects;
    public static UiaPropertyId DragGrabbedItems;
    public static UiaPropertyId Transform2ZoomLevel;
    public static UiaPropertyId Transform2ZoomMinimum;
    public static UiaPropertyId Transform2ZoomMaximum;
    public static UiaPropertyId FlowsFrom;
    public static UiaPropertyId IsTextEditPatternAvailable;
    public static UiaPropertyId IsPeripheral;
    public static UiaPropertyId IsCustomNavigationPatternAvailable;
    public static UiaPropertyId PositionInSet;
    public static UiaPropertyId SizeOfSet;
    public static UiaPropertyId Level;
    public static UiaPropertyId AnnotationTypes;
    public static UiaPropertyId AnnotationObjects;
    public static UiaPropertyId LandmarkType;
    public static UiaPropertyId LocalizedLandmarkType;
    public static UiaPropertyId FullDescription;
    public static UiaPropertyId FillColor;
    public static UiaPropertyId OutlineColor;
    public static UiaPropertyId FillType;
    public static UiaPropertyId VisualEffects;
    public static UiaPropertyId OutlineThickness;
    public static UiaPropertyId CenterPoint;
    public static UiaPropertyId Rotatation;
    public static UiaPropertyId Size;
}
[ComVisibleAttribute("True")]
[GuidAttribute("65101cc7-7904-408e-87a7-8c6dbd83a18b")]
public enum Avalonia.Win32.Interop.Automation.WindowInteractionState : Enum {
    public int value__;
    public static WindowInteractionState Running;
    public static WindowInteractionState Closing;
    public static WindowInteractionState ReadyForUserInteraction;
    public static WindowInteractionState BlockedByModalWindow;
    public static WindowInteractionState NotResponding;
}
[ComVisibleAttribute("True")]
[GuidAttribute("fdc8f176-aed2-477a-8c89-ea04cc5f278d")]
public enum Avalonia.Win32.Interop.Automation.WindowVisualState : Enum {
    public int value__;
    public static WindowVisualState Normal;
    public static WindowVisualState Maximized;
    public static WindowVisualState Minimized;
}
internal class Avalonia.Win32.Interop.FORMATETC : ValueType {
    public ushort cfFormat;
    public IntPtr ptd;
    public DVASPECT dwAspect;
    public int lindex;
    public TYMED tymed;
}
[FlagsAttribute]
internal enum Avalonia.Win32.Interop.NIF : Enum {
    public UInt32 value__;
    public static NIF MESSAGE;
    public static NIF ICON;
    public static NIF TIP;
    public static NIF STATE;
    public static NIF INFO;
    public static NIF GUID;
    public static NIF REALTIME;
    public static NIF SHOWTIP;
}
[FlagsAttribute]
internal enum Avalonia.Win32.Interop.NIIF : Enum {
    public UInt32 value__;
    public static NIIF NONE;
    public static NIIF INFO;
    public static NIIF WARNING;
    public static NIIF ERROR;
    public static NIIF USER;
    public static NIIF ICON_MASK;
    public static NIIF NOSOUND;
    public static NIIF LARGE_ICON;
    public static NIIF RESPECT_QUIET_TIME;
}
internal enum Avalonia.Win32.Interop.NIM : Enum {
    public UInt32 value__;
    public static NIM ADD;
    public static NIM MODIFY;
    public static NIM DELETE;
    public static NIM SETFOCUS;
    public static NIM SETVERSION;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Interop.NOTIFYICONDATA : object {
    public int cbSize;
    public IntPtr hWnd;
    public int uID;
    public NIF uFlags;
    public int uCallbackMessage;
    public IntPtr hIcon;
    public string szTip;
    public int dwState;
    public int dwStateMask;
    public string szInfo;
    public int uTimeoutOrVersion;
    public string szInfoTitle;
    public NIIF dwInfoFlags;
}
internal class Avalonia.Win32.Interop.PixelFormatDescriptor : ValueType {
    public ushort Size;
    public ushort Version;
    public PixelFormatDescriptorFlags Flags;
    public byte PixelType;
    public byte ColorBits;
    public byte RedBits;
    public byte RedShift;
    public byte GreenBits;
    public byte GreenShift;
    public byte BlueBits;
    public byte BlueShift;
    public byte AlphaBits;
    public byte AlphaShift;
    public byte AccumBits;
    public byte AccumRedBits;
    public byte AccumGreenBits;
    public byte AccumBlueBits;
    public byte AccumAlphaBits;
    public byte DepthBits;
    public byte StencilBits;
    public byte AuxBuffers;
    public byte LayerType;
    private byte Reserved;
    public UInt32 LayerMask;
    public UInt32 VisibleMask;
    public UInt32 DamageMask;
}
[FlagsAttribute]
internal enum Avalonia.Win32.Interop.PixelFormatDescriptorFlags : Enum {
    public UInt32 value__;
    public static PixelFormatDescriptorFlags PFD_DOUBLEBUFFER;
    public static PixelFormatDescriptorFlags PFD_STEREO;
    public static PixelFormatDescriptorFlags PFD_DRAW_TO_WINDOW;
    public static PixelFormatDescriptorFlags PFD_DRAW_TO_BITMAP;
    public static PixelFormatDescriptorFlags PFD_SUPPORT_GDI;
    public static PixelFormatDescriptorFlags PFD_SUPPORT_OPENGL;
    public static PixelFormatDescriptorFlags PFD_GENERIC_FORMAT;
    public static PixelFormatDescriptorFlags PFD_NEED_PALETTE;
    public static PixelFormatDescriptorFlags PFD_NEED_SYSTEM_PALETTE;
    public static PixelFormatDescriptorFlags PFD_SWAP_EXCHANGE;
    public static PixelFormatDescriptorFlags PFD_SWAP_COPY;
    public static PixelFormatDescriptorFlags PFD_SWAP_LAYER_BUFFERS;
    public static PixelFormatDescriptorFlags PFD_GENERIC_ACCELERATED;
    public static PixelFormatDescriptorFlags PFD_SUPPORT_DIRECTDRAW;
    public static PixelFormatDescriptorFlags PFD_DEPTH_DONTCARE;
    public static PixelFormatDescriptorFlags PFD_DOUBLEBUFFER_DONTCARE;
    public static PixelFormatDescriptorFlags PFD_STEREO_DONTCARE;
}
internal class Avalonia.Win32.Interop.STGMEDIUM : ValueType {
    public TYMED tymed;
    public IntPtr unionmember;
    public IntPtr pUnkForRelease;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Interop.TaskBarList : object {
    private static IntPtr s_taskBarList;
    private static bool s_initialized;
    [NullableAttribute("1")]
private static object s_lock;
    private static HrInit s_hrInitDelegate;
    private static MarkFullscreenWindow s_markFullscreenWindowDelegate;
    private static SetOverlayIcon s_setOverlayIconDelegate;
    private static TaskBarList();
    private static IntPtr Init();
    private static IntPtr LazyInit();
    public static void MarkFullscreen(IntPtr hwnd, bool fullscreen);
    public static void SetOverlayIcon(IntPtr hwnd, IntPtr hIcon, string description);
}
internal static class Avalonia.Win32.Interop.UnmanagedMethods : object {
    public static int CW_USEDEFAULT;
    public static IntPtr DPI_AWARENESS_CONTEXT_UNAWARE;
    public static IntPtr DPI_AWARENESS_CONTEXT_SYSTEM_AWARE;
    public static IntPtr DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE;
    public static IntPtr DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2;
    public static int SizeOf_BITMAPINFOHEADER;
    public static int SC_MOUSEMOVE;
    public static int WAIT_FAILED;
    public static int SORT_DEFAULT;
    public static int LANG_ZH;
    public static int LANG_JA;
    public static int LANG_KO;
    public static int CFS_FORCE_POSITION;
    public static int CFS_CANDIDATEPOS;
    public static int CFS_EXCLUDE;
    public static int CFS_POINT;
    public static int CFS_RECT;
    public static long ISC_SHOWUICANDIDATEWINDOW;
    public static long ISC_SHOWUICOMPOSITIONWINDOW;
    public static long ISC_SHOWUIGUIDELINE;
    public static long ISC_SHOWUIALLCANDIDATEWINDOW;
    public static long ISC_SHOWUIALL;
    public static int NI_COMPOSITIONSTR;
    public static int CPS_COMPLETE;
    public static int CPS_CONVERT;
    public static int CPS_REVERT;
    public static int CPS_CANCEL;
    public static bool ShCoreAvailable { get; }
    private static UnmanagedMethods();
    internal static int GetMouseMovePointsEx(UInt32 cbSize, MOUSEMOVEPOINT* pointsIn, MOUSEMOVEPOINT* pointsBufferOut, int nBufPoints, UInt32 resolution);
    public static bool IsMouseInPointerEnabled();
    public static int EnableMouseInPointer(bool enable);
    public static bool GetPointerCursorId(UInt32 pointerId, UInt32& cursorId);
    public static bool GetPointerType(UInt32 pointerId, PointerInputType& pointerType);
    public static bool GetPointerInfo(UInt32 pointerId, POINTER_INFO& pointerInfo);
    [NullableContextAttribute("1")]
public static bool GetPointerInfoHistory(UInt32 pointerId, Int32& entriesCount, POINTER_INFO[] pointerInfos);
    public static bool GetPointerPenInfo(UInt32 pointerId, POINTER_PEN_INFO& penInfo);
    [NullableContextAttribute("1")]
public static bool GetPointerPenInfoHistory(UInt32 pointerId, Int32& entriesCount, POINTER_PEN_INFO[] penInfos);
    public static bool GetPointerTouchInfo(UInt32 pointerId, POINTER_TOUCH_INFO& touchInfo);
    [NullableContextAttribute("1")]
public static bool GetPointerTouchInfoHistory(UInt32 pointerId, Int32& entriesCount, POINTER_TOUCH_INFO[] touchInfos);
    public static IntPtr GetDC(IntPtr hWnd);
    public static int SetDIBitsToDevice(IntPtr hdc, int XDest, int YDest, UInt32 dwWidth, UInt32 dwHeight, int XSrc, int YSrc, UInt32 uStartScan, UInt32 cScanLines, IntPtr lpvBits, BITMAPINFO& lpbmi, UInt32 fuColorUse);
    public static IntPtr CreateRectRgn(int x1, int y1, int x2, int y2);
    public static bool ReleaseDC(IntPtr hWnd, IntPtr hDC);
    public static bool AdjustWindowRectEx(RECT& lpRect, UInt32 dwStyle, bool bMenu, UInt32 dwExStyle);
    public static bool AdjustWindowRectExForDpi(RECT& lpRect, WindowStyles dwStyle, bool bMenu, WindowStyles dwExStyle, UInt32 dpi);
    public static IntPtr BeginPaint(IntPtr hwnd, PAINTSTRUCT& lpPaint);
    public static bool ClientToScreen(IntPtr hWnd, POINT& lpPoint);
    [NullableContextAttribute("2")]
public static IntPtr CreateWindowEx(int dwExStyle, UInt32 lpClassName, string lpWindowName, UInt32 dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);
    public static IntPtr DefWindowProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr DispatchMessage(MSG& lpmsg);
    public static bool DestroyWindow(IntPtr hwnd);
    public static bool EnableWindow(IntPtr hWnd, bool bEnable);
    public static bool EndPaint(IntPtr hWnd, PAINTSTRUCT& lpPaint);
    public static UInt32 GetCaretBlinkTime();
    public static bool GetClientRect(IntPtr hwnd, RECT& lpRect);
    public static bool GetCursorPos(POINT& lpPoint);
    public static UInt32 GetDoubleClickTime();
    internal static bool GetKeyboardState(Byte* lpKeyState);
    public static UInt32 MapVirtualKey(UInt32 uCode, UInt32 uMapType);
    public static int GetMessage(MSG& lpMsg, IntPtr hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax);
    public static int GetMessageTime();
    [NullableContextAttribute("2")]
public static IntPtr GetModuleHandle(string lpModuleName);
    public static int GetSystemMetrics(SystemMetric smIndex);
    [NullableContextAttribute("1")]
public static bool EnumChildWindows(IntPtr parentHwnd, EnumWindowsProc enumFunc, IntPtr lParam);
    public static UInt32 GetWindowLongPtr(IntPtr hWnd, int nIndex);
    public static UInt32 GetWindowLong32b(IntPtr hWnd, int nIndex);
    public static UInt32 GetWindowLong(IntPtr hWnd, int nIndex);
    private static UInt32 SetWindowLong32b(IntPtr hWnd, int nIndex, UInt32 value);
    private static IntPtr SetWindowLong64b(IntPtr hWnd, int nIndex, IntPtr value);
    public static UInt32 SetWindowLong(IntPtr hWnd, int nIndex, UInt32 value);
    public static IntPtr SetWindowLongPtr(IntPtr hWnd, int nIndex, IntPtr handle);
    public static IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
    public static bool EnableMenuItem(IntPtr hMenu, UInt32 uIDEnableItem, UInt32 uEnable);
    public static bool GetWindowPlacement(IntPtr hWnd, WINDOWPLACEMENT& lpwndpl);
    public static bool GetWindowRect(IntPtr hwnd, RECT& lpRect);
    public static bool GetUpdateRect(IntPtr hwnd, RECT& lpRect, bool bErase);
    public static bool InvalidateRect(IntPtr hWnd, RECT& lpRect, bool bErase);
    public static bool InvalidateRect(IntPtr hWnd, RECT* lpRect, bool bErase);
    public static bool ValidateRect(IntPtr hWnd, IntPtr lpRect);
    public static bool IsWindow(IntPtr hWnd);
    public static bool IsWindowEnabled(IntPtr hWnd);
    public static bool IsWindowUnicode(IntPtr hWnd);
    public static bool IsWindowVisible(IntPtr hWnd);
    public static bool KillTimer(IntPtr hWnd, IntPtr uIDEvent);
    public static IntPtr LoadCursor(IntPtr hInstance, IntPtr lpCursorName);
    public static IntPtr CreateIconIndirect(ICONINFO& iconInfo);
    public static IntPtr CreateIconFromResourceEx(Byte* pbIconBits, UInt32 cbIconBits, int fIcon, int dwVersion, int csDesired, int cyDesired, int flags);
    public static bool DestroyIcon(IntPtr hIcon);
    public static bool PeekMessage(MSG& lpMsg, IntPtr hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax, UInt32 wRemoveMsg);
    public static IntPtr GetMessageExtraInfo();
    public static ushort RegisterClassEx(WNDCLASSEX& lpwcx);
    public static void RegisterTouchWindow(IntPtr hWnd, int flags);
    public static bool ReleaseCapture();
    [NullableContextAttribute("1")]
public static UInt32 RegisterWindowMessage(string lpString);
    public static bool ScreenToClient(IntPtr hWnd, POINT& lpPoint);
    public static IntPtr GetActiveWindow();
    public static IntPtr SetActiveWindow(IntPtr hWnd);
    public static bool SetForegroundWindow(IntPtr hWnd);
    public static IntPtr SetCapture(IntPtr hWnd);
    [NullableContextAttribute("2")]
public static IntPtr SetTimer(IntPtr hWnd, IntPtr nIDEvent, UInt32 uElapse, TimerProc lpTimerFunc);
    public static bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);
    public static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, SetWindowPosFlags uFlags);
    public static bool SetWindowPlacement(IntPtr hWnd, WINDOWPLACEMENT& windowPlacement);
    public static bool SetFocus(IntPtr hWnd);
    public static IntPtr GetFocus();
    public static bool SetParent(IntPtr hWnd, IntPtr hWndNewParent);
    public static IntPtr GetParent(IntPtr hWnd);
    public static IntPtr GetAncestor(IntPtr hwnd, GetAncestorFlags gaFlags);
    public static bool ShowWindow(IntPtr hWnd, ShowWindowCommand nCmdShow);
    public static IntPtr CreateTimerQueue();
    public static bool DeleteTimerQueueEx(IntPtr TimerQueue, IntPtr CompletionEvent);
    [NullableContextAttribute("1")]
public static bool CreateTimerQueueTimer(IntPtr& phNewTimer, IntPtr TimerQueue, WaitOrTimerCallback Callback, IntPtr Parameter, UInt32 DueTime, UInt32 Period, UInt32 Flags);
    public static bool DeleteTimerQueueTimer(IntPtr TimerQueue, IntPtr Timer, IntPtr CompletionEvent);
    public static int ToUnicodeEx(UInt32 wVirtKey, UInt32 wScanCode, Byte* lpKeyState, Char* pwszBuff, int cchBuff, UInt32 wFlags, IntPtr dwhkl);
    public static bool TrackMouseEvent(TRACKMOUSEEVENT& lpEventTrack);
    public static bool TranslateMessage(MSG& lpMsg);
    [NullableContextAttribute("1")]
public static bool UnregisterClass(string lpClassName, IntPtr hInstance);
    [NullableContextAttribute("2")]
public static bool SetWindowText(IntPtr hwnd, string lpString);
    [NullableContextAttribute("1")]
public static int Shell_NotifyIcon(NIM dwMessage, NOTIFYICONDATA lpData);
    public static IntPtr SHAppBarMessage(AppBarMessage dwMessage, APPBARDATA& lpData);
    private static IntPtr SetClassLong64(IntPtr hWnd, ClassLongIndex nIndex, IntPtr dwNewLong);
    private static IntPtr SetClassLong32(IntPtr hWnd, ClassLongIndex nIndex, IntPtr dwNewLong);
    public static IntPtr SetClassLong(IntPtr hWnd, ClassLongIndex nIndex, IntPtr dwNewLong);
    public static IntPtr GetClassLongPtr(IntPtr hWnd, int nIndex);
    public static UInt32 GetClassLongPtr32(IntPtr hWnd, int nIndex);
    public static IntPtr GetClassLongPtr64(IntPtr hWnd, int nIndex);
    internal static IntPtr SetCursor(IntPtr hCursor);
    internal static int CoCreateInstance(Guid& clsid, IntPtr ignore1, int ignore2, Guid& iid, IntPtr& pUnkOuter);
    [NullableContextAttribute("1")]
internal static T CreateInstance(Guid& clsid, Guid& iid);
    [NullableContextAttribute("1")]
internal static int SHCreateItemFromParsingName(string pszPath, IntPtr pbc, Guid& riid, IntPtr& ppv);
    public static bool OpenClipboard(IntPtr hWndOwner);
    public static bool CloseClipboard();
    public static bool EmptyClipboard();
    public static IntPtr GetClipboardData(ClipboardFormat uFormat);
    public static IntPtr SetClipboardData(ClipboardFormat uFormat, IntPtr hMem);
    public static int OleGetClipboard(IntPtr& dataObject);
    public static int OleSetClipboard(IntPtr dataObject);
    public static IntPtr GlobalLock(IntPtr handle);
    public static bool GlobalUnlock(IntPtr handle);
    public static IntPtr GlobalAlloc(int uFlags, int dwBytes);
    public static IntPtr GlobalFree(IntPtr hMem);
    [NullableContextAttribute("1")]
public static IntPtr LoadLibrary(string fileName);
    [NullableContextAttribute("1")]
public static IntPtr LoadLibraryEx(string fileName, IntPtr hFile, int flags);
    [NullableContextAttribute("1")]
public static IntPtr GetProcAddress(IntPtr hModule, string lpProcName);
    public static bool GetSaveFileName(IntPtr lpofn);
    public static bool GetOpenFileName(IntPtr lpofn);
    public static int CommDlgExtendedError();
    public static bool get_ShCoreAvailable();
    public static void SetProcessDpiAwareness(PROCESS_DPI_AWARENESS value);
    public static bool SetProcessDpiAwarenessContext(IntPtr dpiAWarenessContext);
    public static long GetDpiForMonitor(IntPtr hmonitor, MONITOR_DPI_TYPE dpiType, UInt32& dpiX, UInt32& dpiY);
    public static int GetDeviceCaps(IntPtr hdc, DEVICECAP nIndex);
    public static void GetScaleFactorForMonitor(IntPtr hMon, UInt32& pScale);
    public static bool SetProcessDPIAware();
    public static IntPtr MonitorFromPoint(POINT pt, MONITOR dwFlags);
    public static IntPtr MonitorFromRect(RECT rect, MONITOR dwFlags);
    public static IntPtr MonitorFromWindow(IntPtr hwnd, MONITOR dwFlags);
    public static bool GetTouchInputInfo(IntPtr hTouchInput, UInt32 cInputs, TOUCHINPUT* pInputs, int cbSize);
    public static bool CloseTouchInputHandle(IntPtr hTouchInput);
    public static bool PostMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public static bool SendMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);
    public static int SetDIBitsToDevice(IntPtr hdc, int XDest, int YDest, UInt32 dwWidth, UInt32 dwHeight, int XSrc, int YSrc, UInt32 uStartScan, UInt32 cScanLines, IntPtr lpvBits, BITMAPINFOHEADER& lpbmi, UInt32 fuColorUse);
    public static bool CloseHandle(IntPtr hObject);
    public static IntPtr CreateDIBSection(IntPtr hDC, BITMAPINFOHEADER& pBitmapInfo, int un, IntPtr& lplpVoid, IntPtr handle, int dw);
    public static IntPtr CreateBitmap(int width, int height, int planes, int bitCount, IntPtr data);
    public static int DeleteObject(IntPtr hObject);
    public static IntPtr CreateCompatibleDC(IntPtr hdc);
    public static IntPtr SelectObject(IntPtr hdc, IntPtr hObject);
    public static int ChoosePixelFormat(IntPtr hdc, PixelFormatDescriptor& pfd);
    public static int DescribePixelFormat(IntPtr hdc, PixelFormatDescriptor& pfd);
    public static int SetPixelFormat(IntPtr hdc, int iPixelFormat, PixelFormatDescriptor& pfd);
    public static int DescribePixelFormat(IntPtr hdc, int iPixelFormat, int bytes, PixelFormatDescriptor& pfd);
    public static bool SwapBuffers(IntPtr hdc);
    public static IntPtr wglCreateContext(IntPtr hdc);
    public static bool wglDeleteContext(IntPtr context);
    public static bool wglMakeCurrent(IntPtr hdc, IntPtr context);
    public static IntPtr wglGetCurrentContext();
    public static IntPtr wglGetCurrentDC();
    [NullableContextAttribute("1")]
public static IntPtr wglGetProcAddress(string name);
    [NullableContextAttribute("1")]
public static IntPtr CreateFileMapping(IntPtr hFile, IntPtr lpFileMappingAttributes, UInt32 flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, string lpName);
    public static IntPtr CopyMemory(IntPtr dest, IntPtr src, UIntPtr count);
    public static HRESULT RegisterDragDrop(IntPtr hwnd, IntPtr target);
    public static HRESULT RevokeDragDrop(IntPtr hwnd);
    public static HRESULT OleInitialize(IntPtr val);
    internal static void ReleaseStgMedium(STGMEDIUM& medium);
    [NullableContextAttribute("1")]
public static int GetClipboardFormatName(int format, StringBuilder lpString, int cchMax);
    [NullableContextAttribute("1")]
public static int RegisterClipboardFormat(string format);
    public static IntPtr GlobalSize(IntPtr hGlobal);
    [NullableContextAttribute("2")]
public static int DragQueryFile(IntPtr hDrop, int iFile, StringBuilder lpszFile, int cch);
    internal static void DoDragDrop(IntPtr dataObject, IntPtr dropSource, int allowedEffects, Int32& finalEffect);
    public static int DwmExtendFrameIntoClientArea(IntPtr hwnd, MARGINS& margins);
    public static int DwmGetWindowAttribute(IntPtr hwnd, int dwAttribute, RECT& pvAttribute, int cbAttribute);
    public static int DwmSetWindowAttribute(IntPtr hwnd, int dwAttribute, Void* pvAttribute, int cbAttribute);
    public static int DwmIsCompositionEnabled(Boolean& enabled);
    public static void DwmFlush();
    public static bool DwmDefWindowProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam, IntPtr& plResult);
    public static int DwmEnableBlurBehindWindow(IntPtr hwnd, DWM_BLURBEHIND& blurBehind);
    public static bool SetLayeredWindowAttributes(IntPtr hwnd, UInt32 crKey, byte bAlpha, LayeredWindowFlags dwFlags);
    private static int RtlGetVersion(RTL_OSVERSIONINFOEX& lpVersionInformation);
    [NullableContextAttribute("1")]
internal static Version RtlGetVersion();
    [NullableContextAttribute("1")]
private static int IntWaitForMultipleObjectsEx(int nCount, IntPtr[] pHandles, bool bWaitAll, int dwMilliseconds, bool bAlertable);
    [NullableContextAttribute("1")]
internal static int WaitForMultipleObjectsEx(int nCount, IntPtr[] pHandles, bool bWaitAll, int dwMilliseconds, bool bAlertable);
    [NullableContextAttribute("2")]
private static int IntMsgWaitForMultipleObjectsEx(int nCount, IntPtr[] pHandles, int dwMilliseconds, QueueStatusFlags dwWakeMask, MsgWaitForMultipleObjectsFlags dwFlags);
    [NullableContextAttribute("2")]
internal static int MsgWaitForMultipleObjectsEx(int nCount, IntPtr[] pHandles, int dwMilliseconds, QueueStatusFlags dwWakeMask, MsgWaitForMultipleObjectsFlags dwFlags);
    public static IntPtr ImmGetContext(IntPtr hWnd);
    public static IntPtr ImmAssociateContext(IntPtr hWnd, IntPtr hIMC);
    public static IntPtr ImmCreateContext();
    public static bool ImmReleaseContext(IntPtr hWnd, IntPtr hIMC);
    public static bool ImmSetOpenStatus(IntPtr hIMC, bool flag);
    public static bool ImmSetActiveContext(IntPtr hIMC, bool flag);
    public static bool ImmSetStatusWindowPos(IntPtr hIMC, POINT& lpptPos);
    public static bool ImmIsIME(IntPtr HKL);
    public static bool ImmSetCandidateWindow(IntPtr hIMC, CANDIDATEFORM& lpCandidate);
    public static bool ImmSetCompositionWindow(IntPtr hIMC, COMPOSITIONFORM& lpComp);
    public static bool ImmSetCompositionFont(IntPtr hIMC, LOGFONT& lf);
    public static int ImmGetCompositionString(IntPtr hIMC, GCS dwIndex, IntPtr lpBuf, UInt32 dwBufLen);
    [NullableContextAttribute("2")]
public static string ImmGetCompositionString(IntPtr hIMC, GCS dwIndex);
    public static bool ImmNotifyIME(IntPtr hIMC, int dwAction, int dwIndex, int dwValue);
    public static bool CreateCaret(IntPtr hwnd, IntPtr hBitmap, int nWidth, int nHeight);
    public static bool SetCaretPos(int X, int Y);
    public static bool DestroyCaret();
    public static IntPtr GetKeyboardLayout(int idThread);
    [NullableContextAttribute("1")]
public static int LCIDToLocaleName(UInt32 Locale, StringBuilder lpName, int cchName, int dwFlags);
    public static UInt32 MAKELCID(UInt32 lgid, UInt32 srtid);
    public static ushort PRIMARYLANGID(UInt32 lgid);
    public static UInt32 LGID(IntPtr HKL);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Interop.Win32Icon : object {
    [CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelSize <Size>k__BackingField;
    [NullableAttribute("2")]
private Byte[] _bytes;
    private static int s_bitDepth;
    public IntPtr Handle { get; private set; }
    public PixelSize Size { get; }
    public Win32Icon(Bitmap bitmap, PixelPoint hotSpot);
    public Win32Icon(IBitmapImpl bitmap, PixelPoint hotSpot);
    public Win32Icon(Byte[] iconData, PixelSize size);
    public Win32Icon(Win32Icon original, PixelSize size);
    [CompilerGeneratedAttribute]
public IntPtr get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(IntPtr value);
    [CompilerGeneratedAttribute]
public PixelSize get_Size();
    private IntPtr CreateIcon(Bitmap bitmap, PixelPoint hotSpot);
    private static IntPtr CreateHBitmap(Bitmap source);
    private static IntPtr AlphaToMask(Bitmap source);
    private static LockedFramebuffer AllocFramebuffer(PixelSize size, PixelFormat format);
    private static PixelSize ReplaceZeroesWithSystemMetrics(PixelSize pixelSize);
    [NullableContextAttribute("0")]
private static ValueTuple`2<IntPtr, PixelSize> LoadIconFromData(Byte[] iconData, PixelSize size);
    public void CopyTo(Stream stream);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
internal interface Avalonia.Win32.IWindowsSurfaceFactory {
    public bool RequiresNoRedirectionBitmap { get; }
    public abstract virtual bool get_RequiresNoRedirectionBitmap();
    public abstract virtual object CreateSurface(IEglWindowGlPlatformSurfaceInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.NonPumpingWaitHelperImpl : object {
    [CompilerGeneratedAttribute]
private static NonPumpingWaitHelperImpl <Instance>k__BackingField;
    public static NonPumpingWaitHelperImpl Instance { get; }
    private static NonPumpingWaitHelperImpl();
    [CompilerGeneratedAttribute]
public static NonPumpingWaitHelperImpl get_Instance();
    public sealed virtual int Wait(IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);
}
internal class Avalonia.Win32.OffscreenParentWindow : object {
    [NullableAttribute("1")]
private static SimpleWindow s_simpleWindow;
    [CompilerGeneratedAttribute]
private static IntPtr <Handle>k__BackingField;
    public static IntPtr Handle { get; }
    private static OffscreenParentWindow();
    [CompilerGeneratedAttribute]
public static IntPtr get_Handle();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OleContext : object {
    private static OleContext s_current;
    internal static OleContext Current { get; }
    internal static OleContext get_Current();
    private static bool IsValidOleThread();
    internal bool RegisterDragDrop(IPlatformHandle hwnd, IDropTarget target);
    internal bool UnregisterDragDrop(IPlatformHandle hwnd);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OleDataObject : object {
    private IDataObject _wrapped;
    public OleDataObject(IDataObject wrapped);
    public sealed virtual bool Contains(string dataFormat);
    public sealed virtual IEnumerable`1<string> GetDataFormats();
    public sealed virtual object Get(string dataFormat);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL3050")]
private object GetDataFromOleHGLOBAL(string format, DVASPECT aspect);
    [NullableContextAttribute("0")]
private static bool IsSerializedObject(ReadOnlySpan`1<byte> data);
    private static IEnumerable`1<string> ReadFileNamesFromHGlobal(IntPtr hGlobal);
    [NullableContextAttribute("2")]
private static string ReadStringFromHGlobal(IntPtr hGlobal);
    private static Byte[] ReadBytesFromHGlobal(IntPtr hGlobal);
    private IEnumerable`1<string> GetDataFormatsCore();
    public sealed virtual void Dispose();
}
internal class Avalonia.Win32.OleDragSource : CallbackBase {
    private static int DRAGDROP_S_USEDEFAULTCURSORS;
    private static int DRAGDROP_S_DROP;
    private static int DRAGDROP_S_CANCEL;
    [NullableAttribute("1")]
private static Int32[] MOUSE_BUTTONS;
    private static OleDragSource();
    public sealed virtual int QueryContinueDrag(int fEscapePressed, int grfKeyState);
    public sealed virtual int GiveFeedback(DropEffect dwEffect);
}
internal class Avalonia.Win32.OleDropTarget : CallbackBase {
    [NullableAttribute("1")]
private IInputRoot _target;
    [NullableAttribute("1")]
private ITopLevelImpl _topLevel;
    [NullableAttribute("1")]
private IDragDropDevice _dragDevice;
    [NullableAttribute("2")]
private IDataObject _currentDrag;
    [NullableContextAttribute("1")]
public OleDropTarget(ITopLevelImpl topLevel, IInputRoot target, IDragDropDevice dragDevice);
    public static DropEffect ConvertDropEffect(DragDropEffects operation);
    public static DragDropEffects ConvertDropEffect(DropEffect effect);
    private static RawInputModifiers ConvertKeyState(int grfKeyState);
    private sealed virtual override void Avalonia.Win32.Win32Com.IDropTarget.DragEnter(IDataObject pDataObj, int grfKeyState, POINT pt, DropEffect* pdwEffect);
    private sealed virtual override void Avalonia.Win32.Win32Com.IDropTarget.DragOver(int grfKeyState, POINT pt, DropEffect* pdwEffect);
    private sealed virtual override void Avalonia.Win32.Win32Com.IDropTarget.DragLeave();
    private sealed virtual override void Avalonia.Win32.Win32Com.IDropTarget.Drop(IDataObject pDataObj, int grfKeyState, POINT pt, DropEffect* pdwEffect);
    [NullableContextAttribute("1")]
[MemberNotNullAttribute("_currentDrag")]
private void SetDataObject(IDataObject pDataObj);
    private void ReleaseDataObject();
    private Point GetDragLocation(POINT dragPoint);
    protected virtual void Destroyed();
    [NullableContextAttribute("1")]
public static IDataObject GetAvaloniaObjectFromCOM(IDataObject pDataObj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.Angle.AngleD3DTextureFeature : object {
    public sealed virtual bool CanRenderToSurface(IGlContext context, object surface);
    public sealed virtual IGlPlatformSurfaceRenderTarget CreateRenderTarget(IGlContext context, object surface);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.Angle.AngleExternalMemoryD3D11ExportedTexture2D : AngleExternalMemoryD3D11Texture2D {
    [CompilerGeneratedAttribute]
private IPlatformHandle <Handle>k__BackingField;
    public IPlatformHandle Handle { get; }
    public AngleExternalMemoryD3D11ExportedTexture2D(EglContext context, ID3D11Texture2D texture2D, D3D11_TEXTURE2D_DESC desc, PlatformGraphicsExternalImageFormat format);
    private AngleExternalMemoryD3D11ExportedTexture2D(EglContext context, ID3D11Texture2D texture2D, IPlatformHandle handle, PlatformGraphicsExternalImageProperties properties);
    private static IPlatformHandle GetHandle(ID3D11Texture2D texture2D);
    [CompilerGeneratedAttribute]
public IPlatformHandle get_Handle();
    public sealed virtual IPlatformHandle GetHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.Angle.AngleExternalMemoryD3D11Texture2D : object {
    private EglContext _context;
    [NullableAttribute("2")]
private ID3D11Texture2D _texture2D;
    [NullableAttribute("2")]
private EglSurface _eglSurface;
    [NullableAttribute("2")]
private IDXGIKeyedMutex _mutex;
    [CompilerGeneratedAttribute]
private int <TextureId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private PlatformGraphicsExternalImageProperties <Properties>k__BackingField;
    private IDXGIKeyedMutex Mutex { get; }
    public int TextureId { get; private set; }
    public int InternalFormat { get; }
    public PlatformGraphicsExternalImageProperties Properties { get; }
    public AngleExternalMemoryD3D11Texture2D(EglContext context, ID3D11Texture2D texture2D, PlatformGraphicsExternalImageProperties props);
    private IDXGIKeyedMutex get_Mutex();
    public sealed virtual void Dispose();
    public sealed virtual void AcquireKeyedMutex(UInt32 key);
    public sealed virtual void ReleaseKeyedMutex(UInt32 key);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TextureId();
    [CompilerGeneratedAttribute]
private void set_TextureId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_InternalFormat();
    [CompilerGeneratedAttribute]
public sealed virtual PlatformGraphicsExternalImageProperties get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.Angle.AngleExternalObjectsFeature : object {
    private EglContext _context;
    private ID3D11Device _device;
    private ID3D11Device1 _device1;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SupportedImportableExternalImageTypes>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Byte[] <DeviceLuid>k__BackingField;
    public IReadOnlyList`1<string> SupportedImportableExternalImageTypes { get; }
    public IReadOnlyList`1<string> SupportedExportableExternalImageTypes { get; }
    public IReadOnlyList`1<string> SupportedImportableExternalSemaphoreTypes { get; }
    public IReadOnlyList`1<string> SupportedExportableExternalSemaphoreTypes { get; }
    [NullableAttribute("2")]
public Byte[] DeviceLuid { get; }
    [NullableAttribute("2")]
public Byte[] DeviceUuid { get; }
    public AngleExternalObjectsFeature(EglContext context);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_SupportedImportableExternalImageTypes();
    public sealed virtual IReadOnlyList`1<string> get_SupportedExportableExternalImageTypes();
    public sealed virtual IReadOnlyList`1<string> get_SupportedImportableExternalSemaphoreTypes();
    public sealed virtual IReadOnlyList`1<string> get_SupportedExportableExternalSemaphoreTypes();
    public sealed virtual IReadOnlyList`1<PlatformGraphicsExternalImageFormat> GetSupportedFormatsForExternalMemoryType(string type);
    public sealed virtual IGlExportableExternalImageTexture CreateImage(string type, PixelSize size, PlatformGraphicsExternalImageFormat format);
    public sealed virtual IGlExportableExternalImageTexture CreateSemaphore(string type);
    public sealed virtual IGlExternalImageTexture ImportImage(IPlatformHandle handle, PlatformGraphicsExternalImageProperties properties);
    public sealed virtual IGlExternalSemaphore ImportSemaphore(IPlatformHandle handle);
    public sealed virtual CompositionGpuImportedImageSynchronizationCapabilities GetSynchronizationCapabilities(string imageHandleType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Byte[] get_DeviceLuid();
    [NullableContextAttribute("2")]
public sealed virtual Byte[] get_DeviceUuid();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.Angle.AngleWin32EglDisplay : EglDisplay {
    private bool _flexibleSurfaceSupported;
    [CompilerGeneratedAttribute]
private PlatformApi <PlatformApi>k__BackingField;
    protected bool DisplayLockIsSharedWithContexts { get; }
    public PlatformApi PlatformApi { get; }
    private AngleWin32EglDisplay(IntPtr display, EglInterface egl, EglDisplayOptions options, PlatformApi platformApi);
    protected virtual bool get_DisplayLockIsSharedWithContexts();
    public static AngleWin32EglDisplay CreateD3D9Display(EglInterface egl);
    public static AngleWin32EglDisplay CreateSharedD3D11Display(EglInterface egl);
    public static AngleWin32EglDisplay CreateD3D11Display(Win32AngleEglInterface egl);
    [CompilerGeneratedAttribute]
public PlatformApi get_PlatformApi();
    public IntPtr GetDirect3DDevice();
    public EglSurface WrapDirect3D11Texture(IntPtr handle);
    public EglSurface WrapDirect3D11Texture(IntPtr handle, int offsetX, int offsetY, int width, int height);
    private void ThrowInvalidPlatformApi();
}
internal static class Avalonia.Win32.OpenGl.Angle.AngleWin32PlatformGraphicsFactory : object {
    [NullableContextAttribute("2")]
public static IPlatformGraphics TryCreate(AngleOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.Angle.D3D11AngleWin32PlatformGraphics : object {
    private Win32AngleEglInterface _egl;
    [NullableAttribute("2")]
private AngleWin32EglDisplay _initialDisplay;
    public bool UsesSharedContext { get; }
    public D3D11AngleWin32PlatformGraphics(Win32AngleEglInterface egl, AngleWin32EglDisplay initialDisplay);
    public sealed virtual bool get_UsesSharedContext();
    public sealed virtual IPlatformGraphicsContext CreateContext();
    private static EglContext CreateContextForDisplay(AngleWin32EglDisplay display);
    public sealed virtual IGlContext CreateContext(IEnumerable`1<GlVersion> versions);
    private sealed virtual override IPlatformGraphicsContext Avalonia.Platform.IPlatformGraphics.GetSharedContext();
    public static D3D11AngleWin32PlatformGraphics TryCreate(Win32AngleEglInterface egl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.Angle.D3D9AngleWin32PlatformGraphics : object {
    private AngleWin32EglDisplay _sharedDisplay;
    [NullableAttribute("2")]
private EglContext _sharedContext;
    public bool UsesSharedContext { get; }
    public D3D9AngleWin32PlatformGraphics(AngleWin32EglDisplay sharedDisplay);
    public sealed virtual bool get_UsesSharedContext();
    public sealed virtual IPlatformGraphicsContext GetSharedContext();
    private sealed virtual override IPlatformGraphicsContext Avalonia.Platform.IPlatformGraphics.CreateContext();
    public static D3D9AngleWin32PlatformGraphics TryCreate(Win32AngleEglInterface egl);
}
internal class Avalonia.Win32.OpenGl.WglConsts : object {
    public static int WGL_CONTEXT_MAJOR_VERSION_ARB;
    public static int WGL_CONTEXT_MINOR_VERSION_ARB;
    public static int WGL_CONTEXT_LAYER_PLANE_ARB;
    public static int WGL_CONTEXT_FLAGS_ARB;
    public static int WGL_CONTEXT_PROFILE_MASK_ARB;
    public static int WGL_CONTEXT_CORE_PROFILE_BIT_ARB;
    public static int WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB;
    public static int WGL_NUMBER_PIXEL_FORMATS_ARB;
    public static int WGL_DRAW_TO_WINDOW_ARB;
    public static int WGL_DRAW_TO_BITMAP_ARB;
    public static int WGL_ACCELERATION_ARB;
    public static int WGL_NEED_PALETTE_ARB;
    public static int WGL_NEED_SYSTEM_PALETTE_ARB;
    public static int WGL_SWAP_LAYER_BUFFERS_ARB;
    public static int WGL_SWAP_METHOD_ARB;
    public static int WGL_NUMBER_OVERLAYS_ARB;
    public static int WGL_NUMBER_UNDERLAYS_ARB;
    public static int WGL_TRANSPARENT_ARB;
    public static int WGL_TRANSPARENT_RED_VALUE_ARB;
    public static int WGL_TRANSPARENT_GREEN_VALUE_ARB;
    public static int WGL_TRANSPARENT_BLUE_VALUE_ARB;
    public static int WGL_TRANSPARENT_ALPHA_VALUE_ARB;
    public static int WGL_TRANSPARENT_INDEX_VALUE_ARB;
    public static int WGL_SHARE_DEPTH_ARB;
    public static int WGL_SHARE_STENCIL_ARB;
    public static int WGL_SHARE_ACCUM_ARB;
    public static int WGL_SUPPORT_GDI_ARB;
    public static int WGL_SUPPORT_OPENGL_ARB;
    public static int WGL_DOUBLE_BUFFER_ARB;
    public static int WGL_STEREO_ARB;
    public static int WGL_PIXEL_TYPE_ARB;
    public static int WGL_COLOR_BITS_ARB;
    public static int WGL_RED_BITS_ARB;
    public static int WGL_RED_SHIFT_ARB;
    public static int WGL_GREEN_BITS_ARB;
    public static int WGL_GREEN_SHIFT_ARB;
    public static int WGL_BLUE_BITS_ARB;
    public static int WGL_BLUE_SHIFT_ARB;
    public static int WGL_ALPHA_BITS_ARB;
    public static int WGL_ALPHA_SHIFT_ARB;
    public static int WGL_ACCUM_BITS_ARB;
    public static int WGL_ACCUM_RED_BITS_ARB;
    public static int WGL_ACCUM_GREEN_BITS_ARB;
    public static int WGL_ACCUM_BLUE_BITS_ARB;
    public static int WGL_ACCUM_ALPHA_BITS_ARB;
    public static int WGL_DEPTH_BITS_ARB;
    public static int WGL_STENCIL_BITS_ARB;
    public static int WGL_AUX_BUFFERS_ARB;
    public static int WGL_NO_ACCELERATION_ARB;
    public static int WGL_GENERIC_ACCELERATION_ARB;
    public static int WGL_FULL_ACCELERATION_ARB;
    public static int WGL_SWAP_EXCHANGE_ARB;
    public static int WGL_SWAP_COPY_ARB;
    public static int WGL_SWAP_UNDEFINED_ARB;
    public static int WGL_TYPE_RGBA_ARB;
    public static int WGL_TYPE_COLORINDEX_ARB;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.WglContext : object {
    private object _lock;
    [NullableAttribute("2")]
private WglContext _sharedWith;
    private IntPtr _context;
    private IntPtr _hWnd;
    private IntPtr _dc;
    private int _pixelFormat;
    private PixelFormatDescriptor _formatDescriptor;
    [CompilerGeneratedAttribute]
private GlVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private GlInterface <GlInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StencilSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLost>k__BackingField;
    public IntPtr Handle { get; }
    public GlVersion Version { get; }
    public GlInterface GlInterface { get; }
    public int SampleCount { get; }
    public int StencilSize { get; }
    private bool IsCurrent { get; }
    public bool IsLost { get; private set; }
    public bool CanCreateSharedContext { get; }
    [NullableContextAttribute("2")]
public WglContext(WglContext sharedWith, GlVersion version, IntPtr context, IntPtr hWnd, IntPtr dc, int pixelFormat, PixelFormatDescriptor formatDescriptor);
    public IntPtr get_Handle();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual GlVersion get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual GlInterface get_GlInterface();
    public sealed virtual int get_SampleCount();
    [CompilerGeneratedAttribute]
public sealed virtual int get_StencilSize();
    private bool get_IsCurrent();
    public sealed virtual IDisposable MakeCurrent();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLost();
    [CompilerGeneratedAttribute]
private void set_IsLost(bool value);
    public sealed virtual IDisposable EnsureCurrent();
    internal IDisposable Lock();
    public IntPtr CreateConfiguredDeviceContext(IntPtr hWnd);
    public IDisposable MakeCurrent(IntPtr hdc);
    public sealed virtual bool IsSharedWith(IGlContext context);
    public sealed virtual bool get_CanCreateSharedContext();
    [NullableContextAttribute("2")]
public sealed virtual IGlContext CreateSharedContext(IEnumerable`1<GlVersion> preferredVersions);
    public sealed virtual object TryGetFeature(Type featureType);
}
internal class Avalonia.Win32.OpenGl.WglDisplay : object {
    private static Nullable`1<bool> _initialized;
    [NullableAttribute("1")]
private static DebugCallbackDelegate _debugCallback;
    private static IntPtr _bootstrapContext;
    private static IntPtr _bootstrapWindow;
    private static IntPtr _bootstrapDc;
    private static PixelFormatDescriptor _defaultPfd;
    private static int _defaultPixelFormat;
    public static IntPtr OpenGl32Handle;
    [NullableAttribute("2")]
private static WglChoosePixelFormatARBDelegate s_wglChoosePixelFormatArb;
    [NullableAttribute("2")]
private static WglCreateContextAttribsARBDelegate s_wglCreateContextAttribsArb;
    [NullableAttribute("2")]
private static GlDebugMessageCallbackDelegate s_glDebugMessageCallback;
    private static WglDisplay();
    [MemberNotNullWhenAttribute("True", "s_wglChoosePixelFormatArb")]
[MemberNotNullWhenAttribute("True", "s_wglCreateContextAttribsArb")]
private static bool Initialize();
    [MemberNotNullWhenAttribute("True", "s_wglChoosePixelFormatArb")]
[MemberNotNullWhenAttribute("True", "s_wglCreateContextAttribsArb")]
private static bool InitializeCore();
    private static void DebugCallback(int source, int type, int id, int severity, int len, IntPtr message, IntPtr userparam);
    [NullableContextAttribute("2")]
public static WglContext CreateContext(GlVersion[] versions, IGlContext share);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.WglGdiResourceManager : object {
    private static Queue`1<object> s_queue;
    private static AutoResetEvent s_event;
    private static ushort s_windowClass;
    private static WndProc s_wndProcDelegate;
    private static WglGdiResourceManager();
    private static void Worker();
    private static IntPtr WndProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr CreateOffscreenWindow();
    public static IntPtr GetDC(IntPtr hWnd);
    public static void ReleaseDC(IntPtr hWnd, IntPtr hDC);
    public static void DestroyWindow(IntPtr hWnd);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.WglGlPlatformSurface : object {
    private IEglWindowGlPlatformSurfaceInfo _info;
    public WglGlPlatformSurface(IEglWindowGlPlatformSurfaceInfo info);
    public sealed virtual IGlPlatformSurfaceRenderTarget CreateGlRenderTarget(IGlContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.OpenGl.WglPlatformOpenGlInterface : object {
    [CompilerGeneratedAttribute]
private WglContext <PrimaryContext>k__BackingField;
    public WglContext PrimaryContext { get; }
    public bool UsesSharedContext { get; }
    private WglPlatformOpenGlInterface(WglContext primary);
    [CompilerGeneratedAttribute]
public WglContext get_PrimaryContext();
    public sealed virtual bool get_UsesSharedContext();
    private sealed virtual override IPlatformGraphicsContext Avalonia.Platform.IPlatformGraphics.CreateContext();
    public sealed virtual IPlatformGraphicsContext GetSharedContext();
    public IGlContext CreateContext();
    [NullableContextAttribute("2")]
public static WglPlatformOpenGlInterface TryCreate();
}
internal class Avalonia.Win32.OpenGl.WglRestoreContext : object {
    [NullableAttribute("2")]
private object _monitor;
    private IntPtr _oldDc;
    private IntPtr _oldContext;
    [NullableContextAttribute("2")]
public WglRestoreContext(IntPtr gc, IntPtr context, object monitor, bool takeMonitor);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Win32.PlatformConstants : object {
    public static string WindowHandleType;
    public static string CursorHandleType;
    public static Version Windows10;
    public static Version Windows10_1607;
    public static Version Windows8;
    public static Version Windows8_1;
    public static Version Windows7;
    private static PlatformConstants();
}
internal class Avalonia.Win32.PopupImpl : WindowImpl {
    [NullableAttribute("2")]
private IWindowBaseImpl _parent;
    private bool _dropShadowHint;
    private Nullable`1<Size> _maxAutoSize;
    [ThreadStaticAttribute]
private static IntPtr s_parentHandle;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IPopupPositioner <PopupPositioner>k__BackingField;
    protected bool ShouldTakeFocusOnClick { get; }
    public Size MaxAutoSizeHint { get; }
    [NullableAttribute("1")]
public IPopupPositioner PopupPositioner { get; }
    [NullableContextAttribute("1")]
public PopupImpl(IWindowBaseImpl parent);
    [NullableContextAttribute("1")]
private PopupImpl(IWindowBaseImpl parent, bool dummy);
    public virtual void Show(bool activate, bool isDialog);
    protected virtual bool get_ShouldTakeFocusOnClick();
    public virtual Size get_MaxAutoSizeHint();
    protected virtual IntPtr CreateWindowOverride(ushort atom);
    protected virtual IntPtr WndProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    [NullableContextAttribute("1")]
private static IWindowBaseImpl SaveParentHandle(IWindowBaseImpl parent);
    private void MoveResize(PixelPoint position, Size size, double scaling);
    private static void EnableBoxShadow(IntPtr hwnd, bool enabled);
    public sealed virtual void SetWindowManagerAddShadowHint(bool enabled);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IPopupPositioner get_PopupPositioner();
}
[NativeIntegerAttribute]
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Avalonia.Win32.ScreenImpl : ScreensBase`2<IntPtr, WinScreen> {
    protected virtual int GetScreenCount();
    protected virtual IReadOnlyList`1<IntPtr> GetAllScreenKeys();
    protected virtual WinScreen CreateScreenFromKey(IntPtr key);
    protected virtual void ScreenChanged(WinScreen screen);
    protected virtual Screen ScreenFromTopLevelCore(ITopLevelImpl topLevel);
    [NullableContextAttribute("2")]
protected virtual Screen ScreenFromPointCore(PixelPoint point);
    [NullableContextAttribute("2")]
protected virtual Screen ScreenFromRectCore(PixelRect rect);
    [NullableContextAttribute("2")]
public WinScreen ScreenFromHMonitor(IntPtr hmonitor);
    [NullableContextAttribute("2")]
public WinScreen ScreenFromHwnd(IntPtr hwnd, MONITOR flags);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static BOOL <GetAllScreenKeys>g__EnumDisplayMonitorsCallback|1_0(HMONITOR monitor, HDC hdcMonitor, RECT* lprcMonitor, LPARAM dwData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.SimpleWindow : object {
    [NullableAttribute("2")]
private WndProc _wndProc;
    private static WndProc s_wndProcDelegate;
    [CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    private static string s_className;
    private static UInt32 s_classAtom;
    private static ConcurrentDictionary`2<IntPtr, SimpleWindow> s_Instances;
    public IntPtr Handle { get; private set; }
    private static SimpleWindow();
    [NullableContextAttribute("2")]
public SimpleWindow(WndProc wndProc);
    [CompilerGeneratedAttribute]
public IntPtr get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(IntPtr value);
    private static IntPtr WndProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.TrayIconImpl : object {
    [NullableAttribute("1")]
private static Win32Icon s_emptyIcon;
    private int _uniqueId;
    private static int s_nextUniqueId;
    [NativeIntegerAttribute]
private static IntPtr s_taskBarMonitor;
    private bool _iconAdded;
    private IconImpl _iconImpl;
    private bool _iconStale;
    private Win32Icon _icon;
    private string _tooltipText;
    [NullableAttribute("1")]
private Win32NativeToManagedMenuExporter _exporter;
    [NullableAttribute("1")]
private static Dictionary`2<int, TrayIconImpl> s_trayIcons;
    private bool _disposedValue;
    private static UInt32 WM_TASKBARCREATED;
    [CompilerGeneratedAttribute]
private Action <OnClicked>k__BackingField;
    public Action OnClicked { get; public set; }
    [NullableAttribute("1")]
public INativeMenuExporter MenuExporter { get; }
    private static TrayIconImpl();
    [CompilerGeneratedAttribute]
public sealed virtual Action get_OnClicked();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnClicked(Action value);
    [NullableContextAttribute("1")]
public sealed virtual INativeMenuExporter get_MenuExporter();
    internal static void ProcWnd(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public sealed virtual void SetIcon(IWindowIconImpl icon);
    public sealed virtual void SetIsVisible(bool visible);
    public sealed virtual void SetToolTipText(string text);
    private static void FindTaskBarMonitor();
    private void UpdateIcon(bool remove);
    private double GetTaskBarMonScalingOrDefault();
    private IntPtr WndProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    private void OnRightClicked();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
internal class Avalonia.Win32.Vulkan.VkWin32SurfaceCreateInfoKHR : ValueType {
    public static UInt32 VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;
    public UInt32 sType;
    public IntPtr pNext;
    public UInt32 flags;
    public IntPtr hinstance;
    public IntPtr hwnd;
}
internal class Avalonia.Win32.Vulkan.VulkanSupport : object {
    [NullableContextAttribute("1")]
private static IntPtr vkGetInstanceProcAddr(IntPtr instance, string name);
    [NullableContextAttribute("1")]
public static VulkanPlatformGraphics TryInitialize(VulkanOptions options);
    [NullableContextAttribute("1")]
private static ulong CreateHwndSurface(IntPtr window, IVulkanInstance instance);
}
internal class Avalonia.Win32.Vulkan.Win32VulkanInterface : object {
    private method _addr_vkCreateWin32SurfaceKHR;
    [NullableContextAttribute("1")]
public Win32VulkanInterface(IVulkanInstance instance);
    [GetProcAddressAttribute("vkCreateWin32SurfaceKHR")]
public int vkCreateWin32SurfaceKHR(IntPtr instance, VkWin32SurfaceCreateInfoKHR& pCreateInfo, IntPtr pAllocator, UInt64& pSurface);
    [NullableContextAttribute("1")]
private void Initialize(Func`2<string, IntPtr> getProcAddress);
}
[FlagsAttribute]
internal enum Avalonia.Win32.Win32Com.DropEffect : Enum {
    public int value__;
    public static DropEffect None;
    public static DropEffect Copy;
    public static DropEffect Move;
    public static DropEffect Link;
    public static DropEffect Scroll;
}
[FlagsAttribute]
internal enum Avalonia.Win32.Win32Com.FILEOPENDIALOGOPTIONS : Enum {
    public int value__;
    public static FILEOPENDIALOGOPTIONS FOS_OVERWRITEPROMPT;
    public static FILEOPENDIALOGOPTIONS FOS_STRICTFILETYPES;
    public static FILEOPENDIALOGOPTIONS FOS_NOCHANGEDIR;
    public static FILEOPENDIALOGOPTIONS FOS_PICKFOLDERS;
    public static FILEOPENDIALOGOPTIONS FOS_FORCEFILESYSTEM;
    public static FILEOPENDIALOGOPTIONS FOS_ALLNONSTORAGEITEMS;
    public static FILEOPENDIALOGOPTIONS FOS_NOVALIDATE;
    public static FILEOPENDIALOGOPTIONS FOS_ALLOWMULTISELECT;
    public static FILEOPENDIALOGOPTIONS FOS_PATHMUSTEXIST;
    public static FILEOPENDIALOGOPTIONS FOS_FILEMUSTEXIST;
    public static FILEOPENDIALOGOPTIONS FOS_CREATEPROMPT;
    public static FILEOPENDIALOGOPTIONS FOS_SHAREAWARE;
    public static FILEOPENDIALOGOPTIONS FOS_NOREADONLYRETURN;
    public static FILEOPENDIALOGOPTIONS FOS_NOTESTFILECREATE;
    public static FILEOPENDIALOGOPTIONS FOS_HIDEMRUPLACES;
    public static FILEOPENDIALOGOPTIONS FOS_HIDEPINNEDPLACES;
    public static FILEOPENDIALOGOPTIONS FOS_NODEREFERENCELINKS;
    public static FILEOPENDIALOGOPTIONS FOS_DONTADDTORECENT;
    public static FILEOPENDIALOGOPTIONS FOS_FORCESHOWHIDDEN;
    public static FILEOPENDIALOGOPTIONS FOS_DEFAULTNOMINIMODE;
}
internal interface Avalonia.Win32.Win32Com.IDataObject {
    public abstract virtual UInt32 GetData(FORMATETC* pformatetcIn, STGMEDIUM* pmedium);
    public abstract virtual UInt32 GetDataHere(FORMATETC* pformatetc, STGMEDIUM* pmedium);
    public abstract virtual UInt32 QueryGetData(FORMATETC* pformatetc);
    public abstract virtual FORMATETC GetCanonicalFormatEtc(FORMATETC* pformatectIn);
    public abstract virtual UInt32 SetData(FORMATETC* pformatetc, STGMEDIUM* pmedium, int fRelease);
    public abstract virtual IEnumFORMATETC EnumFormatEtc(int dwDirection);
    public abstract virtual int DAdvise(FORMATETC* pformatetc, int advf, Void* pAdvSink);
    public abstract virtual void DUnadvise(int dwConnection);
    public abstract virtual Void* EnumDAdvise();
}
internal interface Avalonia.Win32.Win32Com.IDropSource {
    public abstract virtual int QueryContinueDrag(int fEscapePressed, int grfKeyState);
    public abstract virtual int GiveFeedback(DropEffect dwEffect);
}
internal interface Avalonia.Win32.Win32Com.IDropTarget {
    public abstract virtual void DragEnter(IDataObject pDataObj, int grfKeyState, POINT pt, DropEffect* pdwEffect);
    public abstract virtual void DragOver(int grfKeyState, POINT pt, DropEffect* pdwEffect);
    public abstract virtual void DragLeave();
    public abstract virtual void Drop(IDataObject pDataObj, int grfKeyState, POINT pt, DropEffect* pdwEffect);
}
internal interface Avalonia.Win32.Win32Com.IEnumFORMATETC {
    public abstract virtual UInt32 Next(UInt32 celt, FORMATETC* rgelt, UInt32* pceltFetched);
    public abstract virtual UInt32 Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual IEnumFORMATETC Clone();
}
internal interface Avalonia.Win32.Win32Com.IFileDialog {
    public ushort FileTypeIndex { get; }
    public FILEOPENDIALOGOPTIONS Options { get; }
    public IShellItem Folder { get; }
    public IShellItem CurrentSelection { get; }
    public Char* FileName { get; }
    public IShellItem Result { get; }
    public abstract virtual void SetFileTypes(ushort cFileTypes, Void* rgFilterSpec);
    public abstract virtual void SetFileTypeIndex(ushort iFileType);
    public abstract virtual ushort get_FileTypeIndex();
    public abstract virtual int Advise(Void* pfde);
    public abstract virtual void Unadvise(int dwCookie);
    public abstract virtual void SetOptions(FILEOPENDIALOGOPTIONS fos);
    public abstract virtual FILEOPENDIALOGOPTIONS get_Options();
    public abstract virtual void SetDefaultFolder(IShellItem psi);
    public abstract virtual void SetFolder(IShellItem psi);
    public abstract virtual IShellItem get_Folder();
    public abstract virtual IShellItem get_CurrentSelection();
    public abstract virtual void SetFileName(Char* pszName);
    public abstract virtual Char* get_FileName();
    public abstract virtual void SetTitle(Char* pszTitle);
    public abstract virtual void SetOkButtonLabel(Char* pszText);
    public abstract virtual void SetFileNameLabel(Char* pszLabel);
    public abstract virtual IShellItem get_Result();
    public abstract virtual void AddPlace(IShellItem psi, int fdap);
    public abstract virtual void SetDefaultExtension(Char* pszDefaultExtension);
    public abstract virtual void Close(int hr);
    public abstract virtual void SetClientGuid(Guid* guid);
    public abstract virtual void ClearClientData();
    public abstract virtual void SetFilter(Void* pFilter);
}
internal interface Avalonia.Win32.Win32Com.IFileOpenDialog {
    public IShellItemArray Results { get; }
    public IShellItemArray SelectedItems { get; }
    public abstract virtual IShellItemArray get_Results();
    public abstract virtual IShellItemArray get_SelectedItems();
}
internal interface Avalonia.Win32.Win32Com.IFrameworkInputPane {
    public abstract virtual int Advise(IUnknown pWindow, IFrameworkInputPaneHandler pHandler, UInt32* pdwCookie);
    public abstract virtual int AdviseWithHWND(IntPtr hwnd, IFrameworkInputPaneHandler pHandler, UInt32* pdwCookie);
    public abstract virtual int Unadvise(UInt32 dwCookie);
    public abstract virtual int Location(RECT* prcInputPaneScreenLocation);
}
internal interface Avalonia.Win32.Win32Com.IFrameworkInputPaneHandler {
    public abstract virtual void Showing(RECT* prcInputPaneScreenLocation, int fEnsureFocusedElementInView);
    public abstract virtual void Hiding(int fEnsureFocusedElementInView);
}
internal interface Avalonia.Win32.Win32Com.IModalWindow {
    public abstract virtual int Show(IntPtr hwndOwner);
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIDataObjectProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDataObjectProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual UInt32 GetData(FORMATETC* pformatetcIn, STGMEDIUM* pmedium);
    public sealed virtual UInt32 GetDataHere(FORMATETC* pformatetc, STGMEDIUM* pmedium);
    public sealed virtual UInt32 QueryGetData(FORMATETC* pformatetc);
    public sealed virtual FORMATETC GetCanonicalFormatEtc(FORMATETC* pformatectIn);
    public sealed virtual UInt32 SetData(FORMATETC* pformatetc, STGMEDIUM* pmedium, int fRelease);
    public sealed virtual IEnumFORMATETC EnumFormatEtc(int dwDirection);
    public sealed virtual int DAdvise(FORMATETC* pformatetc, int advf, Void* pAdvSink);
    public sealed virtual void DUnadvise(int dwConnection);
    public sealed virtual Void* EnumDAdvise();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIDataObjectVTable : MicroComVtblBase {
    private static UInt32 GetData(Void* this, FORMATETC* pformatetcIn, STGMEDIUM* pmedium);
    private static UInt32 GetDataHere(Void* this, FORMATETC* pformatetc, STGMEDIUM* pmedium);
    private static UInt32 QueryGetData(Void* this, FORMATETC* pformatetc);
    private static int GetCanonicalFormatEtc(Void* this, FORMATETC* pformatectIn, FORMATETC* pformatetcOut);
    private static UInt32 SetData(Void* this, FORMATETC* pformatetc, STGMEDIUM* pmedium, int fRelease);
    private static int EnumFormatEtc(Void* this, int dwDirection, Void** ppenumFormatEtc);
    private static int DAdvise(Void* this, FORMATETC* pformatetc, int advf, Void* pAdvSink, Int32* pdwConnection);
    private static int DUnadvise(Void* this, int dwConnection);
    private static int EnumDAdvise(Void* this, Void** ppenumAdvise);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIDropSourceProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDropSourceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int QueryContinueDrag(int fEscapePressed, int grfKeyState);
    public sealed virtual int GiveFeedback(DropEffect dwEffect);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIDropSourceVTable : MicroComVtblBase {
    private static int QueryContinueDrag(Void* this, int fEscapePressed, int grfKeyState);
    private static int GiveFeedback(Void* this, DropEffect dwEffect);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIDropTargetProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIDropTargetProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void DragEnter(IDataObject pDataObj, int grfKeyState, POINT pt, DropEffect* pdwEffect);
    public sealed virtual void DragOver(int grfKeyState, POINT pt, DropEffect* pdwEffect);
    public sealed virtual void DragLeave();
    public sealed virtual void Drop(IDataObject pDataObj, int grfKeyState, POINT pt, DropEffect* pdwEffect);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIDropTargetVTable : MicroComVtblBase {
    private static int DragEnter(Void* this, Void* pDataObj, int grfKeyState, POINT pt, DropEffect* pdwEffect);
    private static int DragOver(Void* this, int grfKeyState, POINT pt, DropEffect* pdwEffect);
    private static int DragLeave(Void* this);
    private static int Drop(Void* this, Void* pDataObj, int grfKeyState, POINT pt, DropEffect* pdwEffect);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIEnumFORMATETCProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIEnumFORMATETCProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual UInt32 Next(UInt32 celt, FORMATETC* rgelt, UInt32* pceltFetched);
    public sealed virtual UInt32 Skip(UInt32 celt);
    public sealed virtual void Reset();
    public sealed virtual IEnumFORMATETC Clone();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIEnumFORMATETCVTable : MicroComVtblBase {
    private static UInt32 Next(Void* this, UInt32 celt, FORMATETC* rgelt, UInt32* pceltFetched);
    private static UInt32 Skip(Void* this, UInt32 celt);
    private static int Reset(Void* this);
    private static int Clone(Void* this, Void** ppenum);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIFileDialogProxy : __MicroComIModalWindowProxy {
    public ushort FileTypeIndex { get; }
    public FILEOPENDIALOGOPTIONS Options { get; }
    public IShellItem Folder { get; }
    public IShellItem CurrentSelection { get; }
    public Char* FileName { get; }
    public IShellItem Result { get; }
    protected int VTableSize { get; }
    protected __MicroComIFileDialogProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void SetFileTypes(ushort cFileTypes, Void* rgFilterSpec);
    public sealed virtual void SetFileTypeIndex(ushort iFileType);
    public sealed virtual ushort get_FileTypeIndex();
    public sealed virtual int Advise(Void* pfde);
    public sealed virtual void Unadvise(int dwCookie);
    public sealed virtual void SetOptions(FILEOPENDIALOGOPTIONS fos);
    public sealed virtual FILEOPENDIALOGOPTIONS get_Options();
    public sealed virtual void SetDefaultFolder(IShellItem psi);
    public sealed virtual void SetFolder(IShellItem psi);
    public sealed virtual IShellItem get_Folder();
    public sealed virtual IShellItem get_CurrentSelection();
    public sealed virtual void SetFileName(Char* pszName);
    public sealed virtual Char* get_FileName();
    public sealed virtual void SetTitle(Char* pszTitle);
    public sealed virtual void SetOkButtonLabel(Char* pszText);
    public sealed virtual void SetFileNameLabel(Char* pszLabel);
    public sealed virtual IShellItem get_Result();
    public sealed virtual void AddPlace(IShellItem psi, int fdap);
    public sealed virtual void SetDefaultExtension(Char* pszDefaultExtension);
    public sealed virtual void Close(int hr);
    public sealed virtual void SetClientGuid(Guid* guid);
    public sealed virtual void ClearClientData();
    public sealed virtual void SetFilter(Void* pFilter);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIFileDialogVTable : __MicroComIModalWindowVTable {
    private static int SetFileTypes(Void* this, ushort cFileTypes, Void* rgFilterSpec);
    private static int SetFileTypeIndex(Void* this, ushort iFileType);
    private static int GetFileTypeIndex(Void* this, UInt16* piFileType);
    private static int Advise(Void* this, Void* pfde, Int32* pdwCookie);
    private static int Unadvise(Void* this, int dwCookie);
    private static int SetOptions(Void* this, FILEOPENDIALOGOPTIONS fos);
    private static int GetOptions(Void* this, FILEOPENDIALOGOPTIONS* pfos);
    private static int SetDefaultFolder(Void* this, Void* psi);
    private static int SetFolder(Void* this, Void* psi);
    private static int GetFolder(Void* this, Void** ppsi);
    private static int GetCurrentSelection(Void* this, Void** ppsi);
    private static int SetFileName(Void* this, Char* pszName);
    private static int GetFileName(Void* this, Char** pszName);
    private static int SetTitle(Void* this, Char* pszTitle);
    private static int SetOkButtonLabel(Void* this, Char* pszText);
    private static int SetFileNameLabel(Void* this, Char* pszLabel);
    private static int GetResult(Void* this, Void** ppsi);
    private static int AddPlace(Void* this, Void* psi, int fdap);
    private static int SetDefaultExtension(Void* this, Char* pszDefaultExtension);
    private static int Close(Void* this, int hr);
    private static int SetClientGuid(Void* this, Guid* guid);
    private static int ClearClientData(Void* this);
    private static int SetFilter(Void* this, Void* pFilter);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIFileOpenDialogProxy : __MicroComIFileDialogProxy {
    public IShellItemArray Results { get; }
    public IShellItemArray SelectedItems { get; }
    protected int VTableSize { get; }
    protected __MicroComIFileOpenDialogProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IShellItemArray get_Results();
    public sealed virtual IShellItemArray get_SelectedItems();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIFileOpenDialogVTable : __MicroComIFileDialogVTable {
    private static int GetResults(Void* this, Void** ppenum);
    private static int GetSelectedItems(Void* this, Void** ppsai);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIFrameworkInputPaneHandlerProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIFrameworkInputPaneHandlerProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void Showing(RECT* prcInputPaneScreenLocation, int fEnsureFocusedElementInView);
    public sealed virtual void Hiding(int fEnsureFocusedElementInView);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIFrameworkInputPaneHandlerVTable : MicroComVtblBase {
    private static int Showing(Void* this, RECT* prcInputPaneScreenLocation, int fEnsureFocusedElementInView);
    private static int Hiding(Void* this, int fEnsureFocusedElementInView);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIFrameworkInputPaneProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIFrameworkInputPaneProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int Advise(IUnknown pWindow, IFrameworkInputPaneHandler pHandler, UInt32* pdwCookie);
    public sealed virtual int AdviseWithHWND(IntPtr hwnd, IFrameworkInputPaneHandler pHandler, UInt32* pdwCookie);
    public sealed virtual int Unadvise(UInt32 dwCookie);
    public sealed virtual int Location(RECT* prcInputPaneScreenLocation);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIFrameworkInputPaneVTable : MicroComVtblBase {
    private static int Advise(Void* this, Void* pWindow, Void* pHandler, UInt32* pdwCookie);
    private static int AdviseWithHWND(Void* this, IntPtr hwnd, Void* pHandler, UInt32* pdwCookie);
    private static int Unadvise(Void* this, UInt32 dwCookie);
    private static int Location(Void* this, RECT* prcInputPaneScreenLocation);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIModalWindowProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIModalWindowProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int Show(IntPtr hwndOwner);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIModalWindowVTable : MicroComVtblBase {
    private static int Show(Void* this, IntPtr hwndOwner);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIShellItemArrayProxy : MicroComProxyBase {
    public int Count { get; }
    protected int VTableSize { get; }
    protected __MicroComIShellItemArrayProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Void* BindToHandler(Void* pbc, Guid* bhid, Guid* riid);
    public sealed virtual Void* GetPropertyStore(ushort flags, Guid* riid);
    public sealed virtual Void* GetPropertyDescriptionList(Void* keyType, Guid* riid);
    public sealed virtual ushort GetAttributes(int AttribFlags, ushort sfgaoMask);
    public sealed virtual int get_Count();
    public sealed virtual IShellItem GetItemAt(int dwIndex);
    public sealed virtual Void* EnumItems();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIShellItemArrayVTable : MicroComVtblBase {
    private static int BindToHandler(Void* this, Void* pbc, Guid* bhid, Guid* riid, Void** ppvOut);
    private static int GetPropertyStore(Void* this, ushort flags, Guid* riid, Void** ppv);
    private static int GetPropertyDescriptionList(Void* this, Void* keyType, Guid* riid, Void** ppv);
    private static int GetAttributes(Void* this, int AttribFlags, ushort sfgaoMask, UInt16* psfgaoAttribs);
    private static int GetCount(Void* this, Int32* pdwNumItems);
    private static int GetItemAt(Void* this, int dwIndex, Void** ppsi);
    private static int EnumItems(Void* this, Void** ppenumShellItems);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIShellItemProxy : MicroComProxyBase {
    public IShellItem Parent { get; }
    protected int VTableSize { get; }
    protected __MicroComIShellItemProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Void* BindToHandler(Void* pbc, Guid* bhid, Guid* riid);
    public sealed virtual IShellItem get_Parent();
    public sealed virtual int GetDisplayName(UInt32 sigdnName, Char** ppszName);
    public sealed virtual UInt32 GetAttributes(UInt32 sfgaoMask);
    public sealed virtual int Compare(IShellItem psi, UInt32 hint);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.Win32Com.Impl.__MicroComIShellItemVTable : MicroComVtblBase {
    private static int BindToHandler(Void* this, Void* pbc, Guid* bhid, Guid* riid, Void** ppv);
    private static int GetParent(Void* this, Void** ppsi);
    private static int GetDisplayName(Void* this, UInt32 sigdnName, Char** ppszName);
    private static int GetAttributes(Void* this, UInt32 sfgaoMask, UInt32* psfgaoAttribs);
    private static int Compare(Void* this, Void* psi, UInt32 hint, Int32* piOrder);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal interface Avalonia.Win32.Win32Com.IShellItem {
    public IShellItem Parent { get; }
    public abstract virtual Void* BindToHandler(Void* pbc, Guid* bhid, Guid* riid);
    public abstract virtual IShellItem get_Parent();
    public abstract virtual int GetDisplayName(UInt32 sigdnName, Char** ppszName);
    public abstract virtual UInt32 GetAttributes(UInt32 sfgaoMask);
    public abstract virtual int Compare(IShellItem psi, UInt32 hint);
}
internal interface Avalonia.Win32.Win32Com.IShellItemArray {
    public int Count { get; }
    public abstract virtual Void* BindToHandler(Void* pbc, Guid* bhid, Guid* riid);
    public abstract virtual Void* GetPropertyStore(ushort flags, Guid* riid);
    public abstract virtual Void* GetPropertyDescriptionList(Void* keyType, Guid* riid);
    public abstract virtual ushort GetAttributes(int AttribFlags, ushort sfgaoMask);
    public abstract virtual int get_Count();
    public abstract virtual IShellItem GetItemAt(int dwIndex);
    public abstract virtual Void* EnumItems();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Win32DispatcherImpl : object {
    private IntPtr _messageWindow;
    private static Thread s_uiThread;
    [NullableAttribute("1")]
private Stopwatch _clock;
    internal static int SignalW;
    internal static int SignalL;
    [CompilerGeneratedAttribute]
private Action Signaled;
    [CompilerGeneratedAttribute]
private Action Timer;
    public bool CurrentThreadIsLoopThread { get; }
    public bool CanQueryPendingInput { get; }
    public bool HasPendingInput { get; }
    public long Now { get; }
    public Win32DispatcherImpl(IntPtr messageWindow);
    public sealed virtual bool get_CurrentThreadIsLoopThread();
    public sealed virtual void Signal();
    public void DispatchWorkItem();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Signaled(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Signaled(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Timer(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Timer(Action value);
    public void FireTimer();
    public sealed virtual void UpdateTimer(Nullable`1<long> dueTimeInMs);
    public sealed virtual bool get_CanQueryPendingInput();
    public sealed virtual bool get_HasPendingInput();
    public sealed virtual void RunLoop(CancellationToken cancellationToken);
    public sealed virtual long get_Now();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Avalonia.Win32.Win32GlManager : object {
    public static IPlatformGraphics Initialize();
    private static IPlatformGraphics InitializeCore();
    [NullableContextAttribute("1")]
private static void TryRegisterComposition(Win32PlatformOptions opts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Win32NativeControlHost : object {
    private bool _useLayeredWindow;
    [CompilerGeneratedAttribute]
private WindowImpl <Window>k__BackingField;
    public WindowImpl Window { get; }
    public Win32NativeControlHost(WindowImpl window, bool useLayeredWindow);
    [CompilerGeneratedAttribute]
public WindowImpl get_Window();
    private void AssertCompatible(IPlatformHandle handle);
    public sealed virtual INativeControlHostDestroyableControlHandle CreateDefaultChild(IPlatformHandle parent);
    public sealed virtual INativeControlHostControlTopLevelAttachment CreateNewAttachment(Func`2<IPlatformHandle, IPlatformHandle> create);
    public sealed virtual INativeControlHostControlTopLevelAttachment CreateNewAttachment(IPlatformHandle handle);
    public sealed virtual bool IsCompatibleWith(IPlatformHandle handle);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Win32NativeToManagedMenuExporter : object {
    private NativeMenu _nativeMenu;
    public sealed virtual void SetNativeMenu(NativeMenu nativeMenu);
    internal NativeMenu GetNativeMenu();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Win32Platform : object {
    private static Win32Platform s_instance;
    [NullableAttribute("2")]
private static Win32PlatformOptions s_options;
    [NullableAttribute("2")]
private static Compositor s_compositor;
    internal static int TIMERID_DISPATCHER;
    [NullableAttribute("2")]
private WndProc _wndProcDelegate;
    private IntPtr _hwnd;
    private Win32DispatcherImpl _dispatcher;
    [CompilerGeneratedAttribute]
private static Version <WindowsVersion>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ShutdownRequestedEventArgs> ShutdownRequested;
    internal static Win32Platform Instance { get; }
    internal IPlatformSettings PlatformSettings { get; }
    internal ScreenImpl Screen { get; }
    internal IntPtr Handle { get; }
    public static Version WindowsVersion { get; }
    internal static bool UseOverlayPopups { get; }
    public static Win32PlatformOptions Options { get; }
    internal static Compositor Compositor { get; }
    private static Win32Platform();
    internal static Win32Platform get_Instance();
    internal IPlatformSettings get_PlatformSettings();
    internal ScreenImpl get_Screen();
    internal IntPtr get_Handle();
    [CompilerGeneratedAttribute]
public static Version get_WindowsVersion();
    internal static bool get_UseOverlayPopups();
    public static Win32PlatformOptions get_Options();
    internal static Compositor get_Compositor();
    public static void Initialize();
    public static void Initialize(Win32PlatformOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ShutdownRequested(EventHandler`1<ShutdownRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ShutdownRequested(EventHandler`1<ShutdownRequestedEventArgs> value);
    private IntPtr WndProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    private void CreateMessageWindow();
    public sealed virtual ITrayIconImpl CreateTrayIcon();
    public sealed virtual IWindowImpl CreateWindow();
    public sealed virtual ITopLevelImpl CreateEmbeddableTopLevel();
    public sealed virtual IWindowImpl CreateEmbeddableWindow();
    public sealed virtual IWindowIconImpl LoadIcon(string fileName);
    public sealed virtual IWindowIconImpl LoadIcon(Stream stream);
    public sealed virtual IWindowIconImpl LoadIcon(IBitmapImpl bitmap);
    private static void SetDpiAwareness();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Win32PlatformSettings : DefaultPlatformSettings {
    private static Lazy`1<bool> s_uiSettingsSupported;
    [NullableAttribute("2")]
private PlatformColorValues _lastColorValues;
    private static Win32PlatformSettings();
    public virtual Size GetTapSize(PointerType type);
    public virtual Size GetDoubleTapSize(PointerType type);
    public virtual TimeSpan GetDoubleTapTime(PointerType type);
    public virtual PlatformColorValues GetColorValues();
    internal void OnColorValuesChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.Win32StorageProvider : BclStorageProvider {
    private static UInt32 SIGDN_DESKTOPABSOLUTEPARSING;
    private static FILEOPENDIALOGOPTIONS DefaultDialogOptions;
    private WindowImpl _windowImpl;
    public bool CanOpen { get; }
    public bool CanSave { get; }
    public bool CanPickFolder { get; }
    public Win32StorageProvider(WindowImpl windowImpl);
    public virtual bool get_CanOpen();
    public virtual bool get_CanSave();
    public virtual bool get_CanPickFolder();
    [AsyncStateMachineAttribute("Avalonia.Win32.Win32StorageProvider/<OpenFolderPickerAsync>d__10")]
public virtual Task`1<IReadOnlyList`1<IStorageFolder>> OpenFolderPickerAsync(FolderPickerOpenOptions options);
    [AsyncStateMachineAttribute("Avalonia.Win32.Win32StorageProvider/<OpenFilePickerAsync>d__11")]
public virtual Task`1<IReadOnlyList`1<IStorageFile>> OpenFilePickerAsync(FilePickerOpenOptions options);
    [AsyncStateMachineAttribute("Avalonia.Win32.Win32StorageProvider/<SaveFilePickerAsync>d__12")]
public virtual Task`1<IStorageFile> SaveFilePickerAsync(FilePickerSaveOptions options);
    [NullableContextAttribute("2")]
private Task`1<IReadOnlyList`1<TStorageItem>> ShowFilePicker(bool isOpenFile, bool openFolder, bool allowMultiple, Nullable`1<bool> showOverwritePrompt, string title, string suggestedFileName, IStorageFolder folder, string defaultExtension, IReadOnlyList`1<FilePickerFileType> filters, Func`2<string, TStorageItem> convert);
    private static string GetParsingName(IShellItem shellItem);
    private static string GetDisplayName(IShellItem shellItem, UInt32 sigdnName);
    private static Byte[] FiltersToPointer(IReadOnlyList`1<FilePickerFileType> filters, Int32& length);
}
[ExtensionAttribute]
internal static class Avalonia.Win32.Win32TypeExtensions : object {
    [ExtensionAttribute]
public static PixelRect ToPixelRect(RECT rect);
    [ExtensionAttribute]
public static PixelRect ToPixelRect(RECT rect);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.WindowImpl : object {
    private bool _killFocusRequested;
    [NullableAttribute("1")]
private static List`1<WindowImpl> s_instances;
    private static IntPtr s_defaultCursor;
    [NullableAttribute("1")]
private static Dictionary`2<WindowEdge, HitTestValues> s_edgeLookup;
    public static double StandardDpi;
    private SavedWindowInfo _savedWindowInfo;
    private bool _isFullScreenActive;
    private bool _isClientAreaExtended;
    private Thickness _extendedMargins;
    private Thickness _offScreenMargin;
    private double _extendTitleBarHint;
    private WindowResizeReason _resizeReason;
    private MOUSEMOVEPOINT _lastWmMousePoint;
    private static WindowStyles WindowStateMask;
    [NullableAttribute("1")]
private TouchDevice _touchDevice;
    [NullableAttribute("1")]
private WindowsMouseDevice _mouseDevice;
    [NullableAttribute("1")]
private PenDevice _penDevice;
    [NullableAttribute("1")]
private FramebufferManager _framebuffer;
    private object _glSurface;
    private bool _wmPointerEnabled;
    [NullableAttribute("1")]
private Win32NativeControlHost _nativeControlHost;
    [NullableAttribute("1")]
private IStorageProvider _storageProvider;
    private WindowsInputPane _inputPane;
    [NullableAttribute("1")]
private WndProc _wndProcDelegate;
    private string _className;
    private IntPtr _hwnd;
    private IInputRoot _owner;
    protected WindowProperties _windowProperties;
    private IconImpl _iconImpl;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<Icons, UInt32>, Win32Icon> _iconCache;
    private bool _trackingMouse;
    private bool _topmost;
    private double _scaling;
    private UInt32 _dpi;
    private WindowState _showWindowState;
    private WindowState _lastWindowState;
    private OleDropTarget _dropTarget;
    private Size _minSize;
    private Size _maxSize;
    private POINT _maxTrackSize;
    private WindowImpl _parent;
    private ExtendClientAreaChromeHints _extendChromeHints;
    private bool _isCloseRequested;
    private bool _shown;
    private bool _hiddenWindowIsParent;
    private UInt32 _langid;
    private bool _ignoreDpiChanges;
    internal bool _ignoreWmChar;
    private WindowTransparencyLevel _transparencyLevel;
    private WindowTransparencyLevel _defaultTransparencyLevel;
    private static int MaxPointerHistorySize;
    [NullableAttribute("1")]
private static PooledList`1<RawPointerPoint> s_intermediatePointsPooledList;
    private static POINTER_TOUCH_INFO[] s_historyTouchInfos;
    private static POINTER_PEN_INFO[] s_historyPenInfos;
    private static POINTER_INFO[] s_historyInfos;
    private static MOUSEMOVEPOINT[] s_mouseHistoryInfos;
    private PlatformThemeVariant _currentThemeVariant;
    [CompilerGeneratedAttribute]
private Action <Activated>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<WindowCloseReason, bool> <Closing>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Deactivated>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<RawInputEventArgs> <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Rect> <Paint>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<Size, WindowResizeReason> <Resized>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<double> <ScalingChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<PixelPoint> <PositionChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<WindowState> <WindowStateChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <LostFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<WindowTransparencyLevel> <TransparencyLevelChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRedirectionBitmap>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ScreenImpl <Screen>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IPlatformHandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <GotInputWhenDisabled>k__BackingField;
    private static int MF_BYCOMMAND;
    private static int MF_ENABLED;
    private static int MF_GRAYED;
    private static int MF_DISABLED;
    private static int SC_CLOSE;
    [CompilerGeneratedAttribute]
private Action`1<bool> <ExtendClientAreaToDecorationsChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private AcrylicPlatformCompensationLevels <AcrylicCompensationLevels>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomWindowStylesCallback <WindowStylesCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomWndProcHookCallback <WndProcHookCallback>k__BackingField;
    [NullableAttribute("1")]
internal IInputRoot Owner { get; }
    internal WindowImpl ParentImpl { get; }
    public Action Activated { get; public set; }
    public Func`2<WindowCloseReason, bool> Closing { get; public set; }
    public Action Closed { get; public set; }
    public Action Deactivated { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<RawInputEventArgs> Input { get; public set; }
    public Action`1<Rect> Paint { get; public set; }
    public Action`2<Size, WindowResizeReason> Resized { get; public set; }
    public Action`1<double> ScalingChanged { get; public set; }
    public Action`1<PixelPoint> PositionChanged { get; public set; }
    public Action`1<WindowState> WindowStateChanged { get; public set; }
    public Action LostFocus { get; public set; }
    public Action`1<WindowTransparencyLevel> TransparencyLevelChanged { get; public set; }
    public Thickness BorderThickness { get; }
    private double PrimaryScreenRenderScaling { get; }
    private ICompositionEffectsSurface CompositionEffectsSurface { get; }
    private bool UseRedirectionBitmap { get; }
    public double RenderScaling { get; }
    public double DesktopScaling { get; }
    public Size ClientSize { get; }
    private Nullable`1<Size> Avalonia.Platform.IWindowBaseImpl.FrameSize { get; }
    public Size FrameSize { get; }
    [NullableAttribute("1")]
public ScreenImpl Screen { get; }
    [NullableAttribute("1")]
public IPlatformHandle Handle { get; private set; }
    public Size MaxAutoSizeHint { get; }
    [NullableAttribute("1")]
public IMouseDevice MouseDevice { get; }
    public WindowState WindowState { get; public set; }
    public WindowTransparencyLevel TransparencyLevel { get; private set; }
    protected IntPtr Hwnd { get; }
    private bool IsMouseInPointerEnabled { get; }
    [NullableAttribute("1")]
public IEnumerable`1<object> Surfaces { get; }
    public PixelPoint Position { get; public set; }
    private bool HasFullDecorations { get; }
    [NullableAttribute("1")]
public Compositor Compositor { get; }
    public Action GotInputWhenDisabled { get; public set; }
    private PixelSize Avalonia.OpenGL.Egl.EglGlPlatformSurface.IEglWindowGlPlatformSurfaceInfo.Size { get; }
    private double Avalonia.OpenGL.Egl.EglGlPlatformSurface.IEglWindowGlPlatformSurfaceInfo.Scaling { get; }
    private IntPtr Avalonia.OpenGL.Egl.EglGlPlatformSurface.IEglWindowGlPlatformSurfaceInfo.Handle { get; }
    public bool IsClientAreaExtendedToDecorations { get; }
    public Action`1<bool> ExtendClientAreaToDecorationsChanged { get; public set; }
    public bool NeedsManagedDecorations { get; }
    public Thickness ExtendedMargins { get; }
    public Thickness OffScreenMargin { get; }
    public AcrylicPlatformCompensationLevels AcrylicCompensationLevels { get; }
    public CustomWindowStylesCallback WindowStylesCallback { get; public set; }
    public CustomWndProcHookCallback WndProcHookCallback { get; public set; }
    [NullableAttribute("1")]
public INativeControlHostImpl NativeControlHost { get; }
    protected bool ShouldTakeFocusOnClick { get; }
    private static WindowImpl();
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2050")]
protected virtual IntPtr AppWndProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    private void OnShowHideMessage(bool shown);
    private Lazy`1<IReadOnlyList`1<RawPointerPoint>> CreateLazyIntermediatePoints(POINTER_INFO info);
    [NullableContextAttribute("1")]
private IReadOnlyList`1<RawPointerPoint> CreateIntermediatePoints(MOUSEMOVEPOINT movePoint, MOUSEMOVEPOINT prevMovePoint);
    [NullableContextAttribute("1")]
private RawPointerEventArgs CreatePointerArgs(IInputDevice device, ulong timestamp, RawPointerEventType eventType, RawPointerPoint point, RawInputModifiers modifiers, UInt32 rawPointerId);
    [NullableContextAttribute("1")]
private void GetDevicePointerInfo(IntPtr wParam, IPointerDevice& device, POINTER_INFO& info, RawPointerPoint& point, RawInputModifiers& modifiers, UInt32& timestamp);
    private RawPointerPoint CreateRawPointerPoint(POINTER_INFO pointerInfo);
    private RawPointerPoint CreateRawPointerPoint(POINTER_TOUCH_INFO info);
    private RawPointerPoint CreateRawPointerPoint(POINTER_PEN_INFO info);
    private static RawPointerEventType GetEventType(WindowsMessage message, POINTER_INFO info);
    private static RawPointerEventType ToEventType(PointerButtonChangeType type, bool isTouch);
    private void UpdateInputMethod(IntPtr hkl);
    private static int ToInt32(IntPtr ptr);
    private static int HighWord(int param);
    private Point DipFromLParam(IntPtr lParam);
    private static PixelPoint PointFromLParam(IntPtr lParam);
    private bool ShouldIgnoreTouchEmulatedMessage();
    private static RawInputModifiers GetMouseModifiers(IntPtr wParam);
    private static RawInputModifiers GetInputModifiers(ModifierKeys keys);
    private static RawInputModifiers GetInputModifiers(PointerFlags flags);
    private RawKeyEventArgs TryCreateRawKeyEventArgs(RawKeyEventType eventType, ulong timestamp, IntPtr wParam, IntPtr lParam);
    [NullableContextAttribute("1")]
internal IInputRoot get_Owner();
    internal WindowImpl get_ParentImpl();
    [CompilerGeneratedAttribute]
public sealed virtual Action get_Activated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Activated(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<WindowCloseReason, bool> get_Closing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Closing(Func`2<WindowCloseReason, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_Closed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Closed(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_Deactivated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Deactivated(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<RawInputEventArgs> get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Input(Action`1<RawInputEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<Rect> get_Paint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Paint(Action`1<Rect> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<Size, WindowResizeReason> get_Resized();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Resized(Action`2<Size, WindowResizeReason> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<double> get_ScalingChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScalingChanged(Action`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<PixelPoint> get_PositionChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PositionChanged(Action`1<PixelPoint> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<WindowState> get_WindowStateChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WindowStateChanged(Action`1<WindowState> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_LostFocus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LostFocus(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<WindowTransparencyLevel> get_TransparencyLevelChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransparencyLevelChanged(Action`1<WindowTransparencyLevel> value);
    public Thickness get_BorderThickness();
    private double get_PrimaryScreenRenderScaling();
    private ICompositionEffectsSurface get_CompositionEffectsSurface();
    [CompilerGeneratedAttribute]
private bool get_UseRedirectionBitmap();
    public sealed virtual double get_RenderScaling();
    public sealed virtual double get_DesktopScaling();
    public sealed virtual Size get_ClientSize();
    private sealed virtual override Nullable`1<Size> Avalonia.Platform.IWindowBaseImpl.get_FrameSize();
    public Size get_FrameSize();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ScreenImpl get_Screen();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IPlatformHandle get_Handle();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Handle(IPlatformHandle value);
    public virtual Size get_MaxAutoSizeHint();
    [NullableContextAttribute("1")]
public IMouseDevice get_MouseDevice();
    public sealed virtual WindowState get_WindowState();
    public sealed virtual void set_WindowState(WindowState value);
    public sealed virtual WindowTransparencyLevel get_TransparencyLevel();
    private void set_TransparencyLevel(WindowTransparencyLevel value);
    protected IntPtr get_Hwnd();
    private bool get_IsMouseInPointerEnabled();
    [NullableContextAttribute("1")]
public sealed virtual object TryGetFeature(Type featureType);
    [NullableContextAttribute("1")]
public sealed virtual void SetTransparencyLevelHint(IReadOnlyList`1<WindowTransparencyLevel> transparencyLevels);
    private bool IsSupported(WindowTransparencyLevel level);
    private bool SetTransparencyTransparent();
    private bool SetTransparencyAcrylicBlur();
    private bool SetTransparencyMica();
    private bool SetLegacyTransparency(bool enabled);
    private bool SetUseHostBackdropBrush(bool useHostBackdropBrush);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<object> get_Surfaces();
    public sealed virtual PixelPoint get_Position();
    public void set_Position(PixelPoint value);
    private bool get_HasFullDecorations();
    public sealed virtual void Move(PixelPoint point);
    public sealed virtual void SetMinMaxSize(Size minSize, Size maxSize);
    [NullableContextAttribute("1")]
public sealed virtual Compositor get_Compositor();
    public sealed virtual void Resize(Size value, WindowResizeReason reason);
    public sealed virtual void Activate();
    public sealed virtual IPopupImpl CreatePopup();
    public sealed virtual void Dispose();
    public void Invalidate(Rect rect);
    public sealed virtual Point PointToClient(PixelPoint point);
    public sealed virtual PixelPoint PointToScreen(Point point);
    [NullableContextAttribute("1")]
public sealed virtual void SetInputRoot(IInputRoot inputRoot);
    public sealed virtual void Hide();
    public virtual void Show(bool activate, bool isDialog);
    [CompilerGeneratedAttribute]
public sealed virtual Action get_GotInputWhenDisabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GotInputWhenDisabled(Action value);
    public sealed virtual void SetParent(IWindowImpl parent);
    public sealed virtual void SetEnabled(bool enable);
    [NullableContextAttribute("1")]
public sealed virtual void BeginMoveDrag(PointerPressedEventArgs e);
    [NullableContextAttribute("1")]
public sealed virtual void BeginResizeDrag(WindowEdge edge, PointerPressedEventArgs e);
    public sealed virtual void SetTitle(string title);
    public sealed virtual void SetCursor(ICursorImpl cursor);
    public sealed virtual void SetIcon(IWindowIconImpl icon);
    private void ClearIconCache();
    private Win32Icon LoadIcon(Icons type, UInt32 dpi);
    private void RefreshIcon();
    public sealed virtual void ShowTaskbarIcon(bool value);
    public sealed virtual void CanResize(bool value);
    public sealed virtual void SetSystemDecorations(SystemDecorations value);
    public sealed virtual void SetTopmost(bool value);
    private void EnsureTopmost();
    public sealed virtual void SetFrameThemeVariant(PlatformThemeVariant themeVariant);
    protected virtual IntPtr CreateWindowOverride(ushort atom);
    [MemberNotNullAttribute("_wndProcDelegate")]
[MemberNotNullAttribute("_className")]
[MemberNotNullAttribute("Handle")]
private void CreateWindow();
    private IntPtr WndProcMessageHandler(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    [NullableContextAttribute("1")]
private void CreateDropTarget(IInputRoot inputRoot);
    private void SetFullScreen(bool fullscreen);
    private MARGINS UpdateExtendMargins();
    private void ExtendClientArea();
    private void ShowWindow(WindowState state, bool activate);
    private void BeforeCloseCleanup(bool isDisposing);
    private void AfterCloseCleanup();
    private void MaximizeWithoutCoveringTaskbar();
    private WindowStyles GetWindowStateStyles();
    private WindowStyles GetStyle();
    private WindowStyles GetExtendedStyle();
    private void SetStyle(WindowStyles style, bool save);
    private void SetExtendedStyle(WindowStyles style, bool save);
    private void UpdateWindowProperties(WindowProperties newProperties, bool forceChanges);
    private static void DisableCloseButton(IntPtr hwnd);
    private static void EnableCloseButton(IntPtr hwnd);
    private RECT ClientRectToWindowRect(RECT clientRect, Nullable`1<WindowStyles> styleOverride, Nullable`1<WindowStyles> extendedStyleOverride);
    private sealed virtual override PixelSize Avalonia.OpenGL.Egl.EglGlPlatformSurface.IEglWindowGlPlatformSurfaceInfo.get_Size();
    private sealed virtual override double Avalonia.OpenGL.Egl.EglGlPlatformSurface.IEglWindowGlPlatformSurfaceInfo.get_Scaling();
    private sealed virtual override IntPtr Avalonia.OpenGL.Egl.EglGlPlatformSurface.IEglWindowGlPlatformSurfaceInfo.get_Handle();
    public sealed virtual void SetExtendClientAreaToDecorationsHint(bool hint);
    public sealed virtual void SetExtendClientAreaChromeHints(ExtendClientAreaChromeHints hints);
    public sealed virtual void SetExtendClientAreaTitleBarHeightHint(double titleBarHeight);
    [NullableContextAttribute("0")]
public sealed virtual void GetWindowsZOrder(Span`1<Window> windows, Span`1<long> zOrder);
    public sealed virtual bool get_IsClientAreaExtendedToDecorations();
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<bool> get_ExtendClientAreaToDecorationsChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtendClientAreaToDecorationsChanged(Action`1<bool> value);
    public sealed virtual bool get_NeedsManagedDecorations();
    public sealed virtual Thickness get_ExtendedMargins();
    public sealed virtual Thickness get_OffScreenMargin();
    [CompilerGeneratedAttribute]
public sealed virtual AcrylicPlatformCompensationLevels get_AcrylicCompensationLevels();
    [CompilerGeneratedAttribute]
public sealed virtual CustomWindowStylesCallback get_WindowStylesCallback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WindowStylesCallback(CustomWindowStylesCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual CustomWndProcHookCallback get_WndProcHookCallback();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WndProcHookCallback(CustomWndProcHookCallback value);
    private ResizeReasonScope SetResizeReason(WindowResizeReason reason);
    private HitTestValues HitTestNCA(IntPtr hWnd, IntPtr wParam, IntPtr lParam);
    protected virtual IntPtr CustomCaptionProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam, Boolean& callDwp);
    protected virtual IntPtr WndProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);
    [NullableContextAttribute("1")]
public INativeControlHostImpl get_NativeControlHost();
    protected virtual bool get_ShouldTakeFocusOnClick();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.WindowsMountedVolumeInfoListener : object {
    private IDisposable _disposable;
    private bool _beenDisposed;
    private ObservableCollection`1<MountedVolumeInfo> _mountedDrives;
    public WindowsMountedVolumeInfoListener(ObservableCollection`1<MountedVolumeInfo> mountedDrives);
    private bool Poll();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <Poll>b__4_0(DriveInfo p);
}
internal class Avalonia.Win32.WindowsMountedVolumeInfoProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual IDisposable Listen(ObservableCollection`1<MountedVolumeInfo> mountedDrives);
}
internal enum Avalonia.Win32.WinRT.AsyncStatus : Enum {
    public int value__;
    public static AsyncStatus Started;
    public static AsyncStatus Completed;
    public static AsyncStatus Canceled;
    public static AsyncStatus Error;
}
internal class Avalonia.Win32.WinRT.Composition.BlendEffect : WinUIEffectBase {
    private int _mode;
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    [NullableContextAttribute("1")]
public BlendEffect(int mode, IGraphicsEffectSource[] _sources);
    public virtual Guid get_EffectId();
    public virtual UInt32 get_PropertyCount();
    [NullableContextAttribute("2")]
public virtual IPropertyValue GetProperty(UInt32 index);
}
internal class Avalonia.Win32.WinRT.Composition.BorderEffect : WinUIEffectBase {
    private int _x;
    private int _y;
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    [NullableContextAttribute("1")]
public BorderEffect(int x, int y, IGraphicsEffectSource[] _sources);
    public virtual Guid get_EffectId();
    public virtual UInt32 get_PropertyCount();
    [NullableContextAttribute("2")]
public virtual IPropertyValue GetProperty(UInt32 index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.WinRT.Composition.ColorSourceEffect : WinUIEffectBase {
    private Single[] _color;
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    public ColorSourceEffect(Single[] color);
    public virtual Guid get_EffectId();
    public virtual UInt32 get_PropertyCount();
    [NullableContextAttribute("2")]
public virtual IPropertyValue GetProperty(UInt32 index);
}
internal class Avalonia.Win32.WinRT.Composition.CompositeStepEffect : WinUIEffectBase {
    private float _mode;
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    [NullableContextAttribute("1")]
public CompositeStepEffect(int mode, IGraphicsEffectSource[] _sources);
    public virtual Guid get_EffectId();
    public virtual UInt32 get_PropertyCount();
    [NullableContextAttribute("2")]
public virtual IPropertyValue GetProperty(UInt32 index);
}
internal class Avalonia.Win32.WinRT.Composition.D2DEffects : object {
    public static Guid CLSID_D2D12DAffineTransform;
    public static Guid CLSID_D2D13DPerspectiveTransform;
    public static Guid CLSID_D2D13DTransform;
    public static Guid CLSID_D2D1ArithmeticComposite;
    public static Guid CLSID_D2D1Atlas;
    public static Guid CLSID_D2D1BitmapSource;
    public static Guid CLSID_D2D1Blend;
    public static Guid CLSID_D2D1Border;
    public static Guid CLSID_D2D1Opacity;
    public static Guid CLSID_D2D1Brightness;
    public static Guid CLSID_D2D1ColorManagement;
    public static Guid CLSID_D2D1ColorMatrix;
    public static Guid CLSID_D2D1Composite;
    public static Guid CLSID_D2D1ConvolveMatrix;
    public static Guid CLSID_D2D1Crop;
    public static Guid CLSID_D2D1DirectionalBlur;
    public static Guid CLSID_D2D1DiscreteTransfer;
    public static Guid CLSID_D2D1DisplacementMap;
    public static Guid CLSID_D2D1DistantDiffuse;
    public static Guid CLSID_D2D1DistantSpecular;
    public static Guid CLSID_D2D1DpiCompensation;
    public static Guid CLSID_D2D1Flood;
    public static Guid CLSID_D2D1GammaTransfer;
    public static Guid CLSID_D2D1GaussianBlur;
    public static Guid CLSID_D2D1Scale;
    public static Guid CLSID_D2D1Histogram;
    public static Guid CLSID_D2D1HueRotation;
    public static Guid CLSID_D2D1LinearTransfer;
    public static Guid CLSID_D2D1LuminanceToAlpha;
    public static Guid CLSID_D2D1Morphology;
    public static Guid CLSID_D2D1OpacityMetadata;
    public static Guid CLSID_D2D1PointDiffuse;
    public static Guid CLSID_D2D1PointSpecular;
    public static Guid CLSID_D2D1Premultiply;
    public static Guid CLSID_D2D1Saturation;
    public static Guid CLSID_D2D1Shadow;
    public static Guid CLSID_D2D1SpotDiffuse;
    public static Guid CLSID_D2D1SpotSpecular;
    public static Guid CLSID_D2D1TableTransfer;
    public static Guid CLSID_D2D1Tile;
    public static Guid CLSID_D2D1Turbulence;
    public static Guid CLSID_D2D1UnPremultiply;
    private static D2DEffects();
}
internal class Avalonia.Win32.WinRT.Composition.OpacityEffect : WinUIEffectBase {
    private float _opacity;
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    [NullableContextAttribute("1")]
public OpacityEffect(float opacity, IGraphicsEffectSource[] _sources);
    public virtual Guid get_EffectId();
    public virtual UInt32 get_PropertyCount();
    [NullableContextAttribute("2")]
public virtual IPropertyValue GetProperty(UInt32 index);
}
internal class Avalonia.Win32.WinRT.Composition.SaturationEffect : WinUIEffectBase {
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    [NullableContextAttribute("1")]
public SaturationEffect(IGraphicsEffectSource source);
    public virtual Guid get_EffectId();
    public virtual UInt32 get_PropertyCount();
    [NullableContextAttribute("2")]
public virtual IPropertyValue GetProperty(UInt32 index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.WinRT.Composition.WinUiCompositedWindow : object {
    [CompilerGeneratedAttribute]
private IEglWindowGlPlatformSurfaceInfo <WindowInfo>k__BackingField;
    private WinUiCompositionShared _shared;
    [NullableAttribute("2")]
private ICompositionRoundedRectangleGeometry _compositionRoundedRectangleGeometry;
    [NullableAttribute("2")]
private IVisual _micaLight;
    [NullableAttribute("2")]
private IVisual _micaDark;
    private IVisual _blur;
    private IVisual _visual;
    private PixelSize _size;
    private ICompositionSurfaceBrush _surfaceBrush;
    private ICompositionTarget _target;
    public IEglWindowGlPlatformSurfaceInfo WindowInfo { get; }
    public WinUiCompositedWindow(IEglWindowGlPlatformSurfaceInfo info, WinUiCompositionShared shared, Nullable`1<float> backdropCornerRadius);
    [CompilerGeneratedAttribute]
public IEglWindowGlPlatformSurfaceInfo get_WindowInfo();
    public sealed virtual void Dispose();
    public void SetSurface(ICompositionSurface surface);
    public void SetBlur(BlurEffect blurEffect);
    public IDisposable BeginTransaction();
    public void ResizeIfNeeded(PixelSize size);
    [CompilerGeneratedAttribute]
private void <BeginTransaction>b__16_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.WinRT.Composition.WinUiCompositedWindowRenderTarget : object {
    private static Guid IID_ID3D11Texture2D;
    private IPlatformGraphicsContext _context;
    private WinUiCompositedWindow _window;
    private IUnknown _d3dDevice;
    private ICompositor _compositor;
    private ICompositorInterop _interop;
    private ICompositionGraphicsDevice _compositionDevice;
    private ICompositionGraphicsDevice2 _compositionDevice2;
    private ICompositionSurface _surface;
    private PixelSize _size;
    private bool _lost;
    private ICompositionDrawingSurfaceInterop _surfaceInterop;
    private ICompositionDrawingSurface _drawingSurface;
    public bool IsCorrupted { get; }
    public WinUiCompositedWindowRenderTarget(IPlatformGraphicsContext context, WinUiCompositedWindow window, IntPtr device, ICompositor compositor);
    private static WinUiCompositedWindowRenderTarget();
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsCorrupted();
    public sealed virtual IDirect3D11TextureRenderTargetRenderSession BeginDraw();
}
internal class Avalonia.Win32.WinRT.Composition.WinUiCompositedWindowSurface : object {
    [NullableAttribute("1")]
private WinUiCompositionShared _shared;
    [NullableAttribute("1")]
private IEglWindowGlPlatformSurfaceInfo _info;
    [NullableAttribute("2")]
private WinUiCompositedWindow _window;
    private BlurEffect _blurEffect;
    [NullableContextAttribute("1")]
public WinUiCompositedWindowSurface(WinUiCompositionShared shared, IEglWindowGlPlatformSurfaceInfo info);
    [NullableContextAttribute("1")]
public sealed virtual IDirect3D11TextureRenderTarget CreateRenderTarget(IPlatformGraphicsContext context, IntPtr d3dDevice);
    public sealed virtual void Dispose();
    public sealed virtual bool IsBlurSupported(BlurEffect effect);
    public sealed virtual void SetBlur(BlurEffect enable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Avalonia.Win32.WinRT.Composition.WinUiCompositionShared : object {
    [CompilerGeneratedAttribute]
private ICompositor <Compositor>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompositor5 <Compositor5>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompositorDesktopInterop <DesktopInterop>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompositionBrush <BlurBrush>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICompositionBrush <MicaBrushLight>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICompositionBrush <MicaBrushDark>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SyncRoot>k__BackingField;
    public static Version MinWinCompositionVersion;
    public static Version MinAcrylicVersion;
    public static Version MinHostBackdropVersion;
    public ICompositor Compositor { get; }
    public ICompositor5 Compositor5 { get; }
    public ICompositorDesktopInterop DesktopInterop { get; }
    public ICompositionBrush BlurBrush { get; }
    [NullableAttribute("2")]
public ICompositionBrush MicaBrushLight { get; }
    [NullableAttribute("2")]
public ICompositionBrush MicaBrushDark { get; }
    public object SyncRoot { get; }
    public WinUiCompositionShared(ICompositor compositor);
    private static WinUiCompositionShared();
    [CompilerGeneratedAttribute]
public ICompositor get_Compositor();
    [CompilerGeneratedAttribute]
public ICompositor5 get_Compositor5();
    [CompilerGeneratedAttribute]
public ICompositorDesktopInterop get_DesktopInterop();
    [CompilerGeneratedAttribute]
public ICompositionBrush get_BlurBrush();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ICompositionBrush get_MicaBrushLight();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ICompositionBrush get_MicaBrushDark();
    [CompilerGeneratedAttribute]
public object get_SyncRoot();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Win32.WinRT.Composition.WinUiCompositionUtils : object {
    public static ICompositionBrush CreateMicaBackdropBrush(ICompositor compositor, float color, float opacity);
    public static ICompositionBrush CreateAcrylicBlurBackdropBrush(ICompositor compositor);
    public static ICompositionRoundedRectangleGeometry ClipVisual(ICompositor compositor, Nullable`1<float> _backdropCornerRadius, IVisual[] containerVisuals);
    public static IVisual CreateBlurVisual(ICompositor compositor, ICompositionBrush compositionBrush);
    public static ICompositionBrush CreateBackdropBrush(ICompositor compositor);
    private static IGraphicsEffectSource GetParameterSource(string name, ICompositionEffectSourceParameterFactory backDropParameterFactory, IntPtr& handle);
}
internal class Avalonia.Win32.WinRT.Composition.WinUiCompositorConnection : object {
    [NullableAttribute("1")]
private WinUiCompositionShared _shared;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action`1<TimeSpan> Tick;
    public bool RunsInBackground { get; }
    public bool RequiresNoRedirectionBitmap { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_Tick(Action`1<TimeSpan> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_Tick(Action`1<TimeSpan> value);
    public sealed virtual bool get_RunsInBackground();
    private static bool TryCreateAndRegisterCore();
    private void RunLoop();
    public static bool IsSupported();
    public static bool TryCreateAndRegister();
    public sealed virtual bool get_RequiresNoRedirectionBitmap();
    [NullableContextAttribute("1")]
public sealed virtual object CreateSurface(IEglWindowGlPlatformSurfaceInfo info);
}
internal abstract class Avalonia.Win32.WinRT.Composition.WinUIEffectBase : WinRTInspectable {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IGraphicsEffectSource[] _sources;
    public IntPtr Name { get; }
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    public UInt32 SourceCount { get; }
    [NullableContextAttribute("1")]
public WinUIEffectBase(IGraphicsEffectSource[] _sources);
    public sealed virtual IntPtr get_Name();
    public sealed virtual void SetName(IntPtr name);
    public abstract virtual Guid get_EffectId();
    public sealed virtual void GetNamedPropertyMapping(IntPtr name, UInt32* index, GRAPHICS_EFFECT_PROPERTY_MAPPING* mapping);
    public abstract virtual UInt32 get_PropertyCount();
    [NullableContextAttribute("2")]
public abstract virtual IPropertyValue GetProperty(UInt32 index);
    [NullableContextAttribute("1")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 get_SourceCount();
    public virtual void OnUnreferencedFromNative();
}
internal class Avalonia.Win32.WinRT.Composition.WinUIGaussianBlurEffect : WinUIEffectBase {
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    [NullableContextAttribute("1")]
public WinUIGaussianBlurEffect(IGraphicsEffectSource source);
    public virtual Guid get_EffectId();
    public virtual UInt32 get_PropertyCount();
    [NullableContextAttribute("2")]
public virtual IPropertyValue GetProperty(UInt32 index);
}
internal enum Avalonia.Win32.WinRT.CompositionBackfaceVisibility : Enum {
    public int value__;
    public static CompositionBackfaceVisibility Inherit;
    public static CompositionBackfaceVisibility Visible;
    public static CompositionBackfaceVisibility Hidden;
}
[FlagsAttribute]
internal enum Avalonia.Win32.WinRT.CompositionBatchTypes : Enum {
    public int value__;
    public static CompositionBatchTypes None;
    public static CompositionBatchTypes Animation;
    public static CompositionBatchTypes Effect;
    public static CompositionBatchTypes InfiniteAnimation;
    public static CompositionBatchTypes AllAnimations;
}
internal enum Avalonia.Win32.WinRT.CompositionBitmapInterpolationMode : Enum {
    public int value__;
    public static CompositionBitmapInterpolationMode NearestNeighbor;
    public static CompositionBitmapInterpolationMode Linear;
    public static CompositionBitmapInterpolationMode MagLinearMinLinearMipLinear;
    public static CompositionBitmapInterpolationMode MagLinearMinLinearMipNearest;
    public static CompositionBitmapInterpolationMode MagLinearMinNearestMipLinear;
    public static CompositionBitmapInterpolationMode MagLinearMinNearestMipNearest;
    public static CompositionBitmapInterpolationMode MagNearestMinLinearMipLinear;
    public static CompositionBitmapInterpolationMode MagNearestMinLinearMipNearest;
    public static CompositionBitmapInterpolationMode MagNearestMinNearestMipLinear;
    public static CompositionBitmapInterpolationMode MagNearestMinNearestMipNearest;
}
internal enum Avalonia.Win32.WinRT.CompositionBorderMode : Enum {
    public int value__;
    public static CompositionBorderMode Inherit;
    public static CompositionBorderMode Soft;
    public static CompositionBorderMode Hard;
}
internal enum Avalonia.Win32.WinRT.CompositionCompositeMode : Enum {
    public int value__;
    public static CompositionCompositeMode Inherit;
    public static CompositionCompositeMode SourceOver;
    public static CompositionCompositeMode DestinationInvert;
    public static CompositionCompositeMode MinBlend;
}
internal enum Avalonia.Win32.WinRT.CompositionEffectFactoryLoadStatus : Enum {
    public int value__;
    public static CompositionEffectFactoryLoadStatus Success;
    public static CompositionEffectFactoryLoadStatus EffectTooComplex;
    public static CompositionEffectFactoryLoadStatus Pending;
    public static CompositionEffectFactoryLoadStatus Other;
}
internal enum Avalonia.Win32.WinRT.CompositionStretch : Enum {
    public int value__;
    public static CompositionStretch None;
    public static CompositionStretch Fill;
    public static CompositionStretch Uniform;
    public static CompositionStretch UniformToFill;
}
internal enum Avalonia.Win32.WinRT.DirectXAlphaMode : Enum {
    public int value__;
    public static DirectXAlphaMode Unspecified;
    public static DirectXAlphaMode Premultiplied;
    public static DirectXAlphaMode Straight;
    public static DirectXAlphaMode Ignore;
}
internal enum Avalonia.Win32.WinRT.DirectXPixelFormat : Enum {
    public int value__;
    public static DirectXPixelFormat Unknown;
    public static DirectXPixelFormat R32G32B32A32Typeless;
    public static DirectXPixelFormat R32G32B32A32Float;
    public static DirectXPixelFormat R32G32B32A32UInt;
    public static DirectXPixelFormat R32G32B32A32Int;
    public static DirectXPixelFormat R32G32B32Typeless;
    public static DirectXPixelFormat R32G32B32Float;
    public static DirectXPixelFormat R32G32B32UInt;
    public static DirectXPixelFormat R32G32B32Int;
    public static DirectXPixelFormat R16G16B16A16Typeless;
    public static DirectXPixelFormat R16G16B16A16Float;
    public static DirectXPixelFormat R16G16B16A16UIntNormalized;
    public static DirectXPixelFormat R16G16B16A16UInt;
    public static DirectXPixelFormat R16G16B16A16IntNormalized;
    public static DirectXPixelFormat R16G16B16A16Int;
    public static DirectXPixelFormat R32G32Typeless;
    public static DirectXPixelFormat R32G32Float;
    public static DirectXPixelFormat R32G32UInt;
    public static DirectXPixelFormat R32G32Int;
    public static DirectXPixelFormat R32G8X24Typeless;
    public static DirectXPixelFormat D32FloatS8X24UInt;
    public static DirectXPixelFormat R32FloatX8X24Typeless;
    public static DirectXPixelFormat X32TypelessG8X24UInt;
    public static DirectXPixelFormat R10G10B10A2Typeless;
    public static DirectXPixelFormat R10G10B10A2UIntNormalized;
    public static DirectXPixelFormat R10G10B10A2UInt;
    public static DirectXPixelFormat R11G11B10Float;
    public static DirectXPixelFormat R8G8B8A8Typeless;
    public static DirectXPixelFormat R8G8B8A8UIntNormalized;
    public static DirectXPixelFormat R8G8B8A8UIntNormalizedSrgb;
    public static DirectXPixelFormat R8G8B8A8UInt;
    public static DirectXPixelFormat R8G8B8A8IntNormalized;
    public static DirectXPixelFormat R8G8B8A8Int;
    public static DirectXPixelFormat R16G16Typeless;
    public static DirectXPixelFormat R16G16Float;
    public static DirectXPixelFormat R16G16UIntNormalized;
    public static DirectXPixelFormat R16G16UInt;
    public static DirectXPixelFormat R16G16IntNormalized;
    public static DirectXPixelFormat R16G16Int;
    public static DirectXPixelFormat R32Typeless;
    public static DirectXPixelFormat D32Float;
    public static DirectXPixelFormat R32Float;
    public static DirectXPixelFormat R32UInt;
    public static DirectXPixelFormat R32Int;
    public static DirectXPixelFormat R24G8Typeless;
    public static DirectXPixelFormat D24UIntNormalizedS8UInt;
    public static DirectXPixelFormat R24UIntNormalizedX8Typeless;
    public static DirectXPixelFormat X24TypelessG8UInt;
    public static DirectXPixelFormat R8G8Typeless;
    public static DirectXPixelFormat R8G8UIntNormalized;
    public static DirectXPixelFormat R8G8UInt;
    public static DirectXPixelFormat R8G8IntNormalized;
    public static DirectXPixelFormat R8G8Int;
    public static DirectXPixelFormat R16Typeless;
    public static DirectXPixelFormat R16Float;
    public static DirectXPixelFormat D16UIntNormalized;
    public static DirectXPixelFormat R16UIntNormalized;
    public static DirectXPixelFormat R16UInt;
    public static DirectXPixelFormat R16IntNormalized;
    public static DirectXPixelFormat R16Int;
    public static DirectXPixelFormat R8Typeless;
    public static DirectXPixelFormat R8UIntNormalized;
    public static DirectXPixelFormat R8UInt;
    public static DirectXPixelFormat R8IntNormalized;
    public static DirectXPixelFormat R8Int;
    public static DirectXPixelFormat A8UIntNormalized;
    public static DirectXPixelFormat R1UIntNormalized;
    public static DirectXPixelFormat R9G9B9E5SharedExponent;
    public static DirectXPixelFormat R8G8B8G8UIntNormalized;
    public static DirectXPixelFormat G8R8G8B8UIntNormalized;
    public static DirectXPixelFormat BC1Typeless;
    public static DirectXPixelFormat BC1UIntNormalized;
    public static DirectXPixelFormat BC1UIntNormalizedSrgb;
    public static DirectXPixelFormat BC2Typeless;
    public static DirectXPixelFormat BC2UIntNormalized;
    public static DirectXPixelFormat BC2UIntNormalizedSrgb;
    public static DirectXPixelFormat BC3Typeless;
    public static DirectXPixelFormat BC3UIntNormalized;
    public static DirectXPixelFormat BC3UIntNormalizedSrgb;
    public static DirectXPixelFormat BC4Typeless;
    public static DirectXPixelFormat BC4UIntNormalized;
    public static DirectXPixelFormat BC4IntNormalized;
    public static DirectXPixelFormat BC5Typeless;
    public static DirectXPixelFormat BC5UIntNormalized;
    public static DirectXPixelFormat BC5IntNormalized;
    public static DirectXPixelFormat B5G6R5UIntNormalized;
    public static DirectXPixelFormat B5G5R5A1UIntNormalized;
    public static DirectXPixelFormat B8G8R8A8UIntNormalized;
    public static DirectXPixelFormat B8G8R8X8UIntNormalized;
    public static DirectXPixelFormat R10G10B10XRBiasA2UIntNormalized;
    public static DirectXPixelFormat B8G8R8A8Typeless;
    public static DirectXPixelFormat B8G8R8A8UIntNormalizedSrgb;
    public static DirectXPixelFormat B8G8R8X8Typeless;
    public static DirectXPixelFormat B8G8R8X8UIntNormalizedSrgb;
    public static DirectXPixelFormat BC6HTypeless;
    public static DirectXPixelFormat BC6H16UnsignedFloat;
    public static DirectXPixelFormat BC6H16Float;
    public static DirectXPixelFormat BC7Typeless;
    public static DirectXPixelFormat BC7UIntNormalized;
    public static DirectXPixelFormat BC7UIntNormalizedSrgb;
    public static DirectXPixelFormat Ayuv;
    public static DirectXPixelFormat Y410;
    public static DirectXPixelFormat Y416;
    public static DirectXPixelFormat NV12;
    public static DirectXPixelFormat P010;
    public static DirectXPixelFormat P016;
    public static DirectXPixelFormat Opaque420;
    public static DirectXPixelFormat Yuy2;
    public static DirectXPixelFormat Y210;
    public static DirectXPixelFormat Y216;
    public static DirectXPixelFormat NV11;
    public static DirectXPixelFormat AI44;
    public static DirectXPixelFormat IA44;
    public static DirectXPixelFormat P8;
    public static DirectXPixelFormat A8P8;
    public static DirectXPixelFormat B4G4R4A4UIntNormalized;
    public static DirectXPixelFormat P208;
    public static DirectXPixelFormat V208;
    public static DirectXPixelFormat V408;
}
internal enum Avalonia.Win32.WinRT.GRAPHICS_EFFECT_PROPERTY_MAPPING : Enum {
    public int value__;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_UNKNOWN;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_DIRECT;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORX;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORY;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORZ;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORW;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_RECT_TO_VECTOR4;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_RADIANS_TO_DEGREES;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_COLORMATRIX_ALPHA_MODE;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_COLOR_TO_VECTOR3;
    public static GRAPHICS_EFFECT_PROPERTY_MAPPING GRAPHICS_EFFECT_PROPERTY_MAPPING_COLOR_TO_VECTOR4;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Avalonia.Win32.WinRT.HStringInterop : object {
    private IntPtr _s;
    private bool _owns;
    public IntPtr Handle { get; }
    public string Value { get; }
    public HStringInterop(string s);
    public HStringInterop(IntPtr str, bool owns);
    public IntPtr get_Handle();
    public string get_Value();
    public sealed virtual void Dispose();
}
internal interface Avalonia.Win32.WinRT.IAccessibilitySettings {
    public int HighContrast { get; }
    public IntPtr HighContrastScheme { get; }
    public abstract virtual int get_HighContrast();
    public abstract virtual IntPtr get_HighContrastScheme();
}
internal interface Avalonia.Win32.WinRT.IActivationFactory {
    public abstract virtual IntPtr ActivateInstance();
}
internal interface Avalonia.Win32.WinRT.IApiInformationStatics {
    public abstract virtual int IsTypePresent(IntPtr typeName, Int32* result);
    public abstract virtual int IsMethodPresent(IntPtr typeName, IntPtr methodName, Int32* result);
    public abstract virtual int IsMethodPresentWithArity(IntPtr typeName, IntPtr methodName, UInt32 inputParameterCount, Int32* result);
    public abstract virtual int IsEventPresent(IntPtr typeName, IntPtr eventName, Int32* result);
    public abstract virtual int IsPropertyPresent(IntPtr typeName, IntPtr propertyName, Int32* result);
    public abstract virtual int IsReadOnlyPropertyPresent(IntPtr typeName, IntPtr propertyName, Int32* result);
    public abstract virtual int IsWriteablePropertyPresent(IntPtr typeName, IntPtr propertyName, Int32* result);
    public abstract virtual int IsEnumNamedValuePresent(IntPtr enumTypeName, IntPtr valueName, Int32* result);
    public abstract virtual int IsApiContractPresentByMajor(IntPtr contractName, ushort majorVersion, Int32* result);
    public abstract virtual int IsApiContractPresentByMajorAndMinor(IntPtr contractName, ushort majorVersion, ushort minorVersion, Int32* result);
}
internal interface Avalonia.Win32.WinRT.IAsyncAction {
    public IAsyncActionCompletedHandler Completed { get; }
    public abstract virtual void SetCompleted(IAsyncActionCompletedHandler handler);
    public abstract virtual IAsyncActionCompletedHandler get_Completed();
    public abstract virtual void GetResults();
}
internal interface Avalonia.Win32.WinRT.IAsyncActionCompletedHandler {
    public abstract virtual void Invoke(IAsyncAction asyncInfo, AsyncStatus asyncStatus);
}
internal interface Avalonia.Win32.WinRT.ICompositionBackdropBrush {
}
internal interface Avalonia.Win32.WinRT.ICompositionBrush {
}
internal interface Avalonia.Win32.WinRT.ICompositionClip {
}
internal interface Avalonia.Win32.WinRT.ICompositionColorBrush {
    public WinRTColor Color { get; }
    public abstract virtual WinRTColor get_Color();
    public abstract virtual void SetColor(WinRTColor value);
}
internal interface Avalonia.Win32.WinRT.ICompositionDrawingSurface {
    public DirectXAlphaMode AlphaMode { get; }
    public DirectXPixelFormat PixelFormat { get; }
    public SIZE_F Size { get; }
    public abstract virtual DirectXAlphaMode get_AlphaMode();
    public abstract virtual DirectXPixelFormat get_PixelFormat();
    public abstract virtual SIZE_F get_Size();
}
internal interface Avalonia.Win32.WinRT.ICompositionDrawingSurfaceInterop {
    public abstract virtual POINT BeginDraw(RECT* updateRect, Guid* iid, Void** updateObject);
    public abstract virtual void EndDraw();
    public abstract virtual void Resize(POINT sizePixels);
    public abstract virtual void Scroll(RECT* scrollRect, RECT* clipRect, int offsetX, int offsetY);
    public abstract virtual void ResumeDraw();
    public abstract virtual void SuspendDraw();
}
internal interface Avalonia.Win32.WinRT.ICompositionEffectBrush {
    public abstract virtual ICompositionBrush GetSourceParameter(IntPtr name);
    public abstract virtual void SetSourceParameter(IntPtr name, ICompositionBrush source);
}
internal interface Avalonia.Win32.WinRT.ICompositionEffectFactory {
    public int ExtendedError { get; }
    public CompositionEffectFactoryLoadStatus LoadStatus { get; }
    public abstract virtual ICompositionEffectBrush CreateBrush();
    public abstract virtual int get_ExtendedError();
    public abstract virtual CompositionEffectFactoryLoadStatus get_LoadStatus();
}
internal interface Avalonia.Win32.WinRT.ICompositionEffectSourceParameter {
    public IntPtr Name { get; }
    public abstract virtual IntPtr get_Name();
}
internal interface Avalonia.Win32.WinRT.ICompositionEffectSourceParameterFactory {
    public abstract virtual ICompositionEffectSourceParameter Create(IntPtr name);
}
internal interface Avalonia.Win32.WinRT.ICompositionGeometricClip {
    public ICompositionGeometry Geometry { get; }
    public abstract virtual ICompositionGeometry get_Geometry();
    public abstract virtual void SetGeometry(ICompositionGeometry value);
}
internal interface Avalonia.Win32.WinRT.ICompositionGeometry {
    public float TrimEnd { get; }
    public float TrimOffset { get; }
    public float TrimStart { get; }
    public abstract virtual float get_TrimEnd();
    public abstract virtual void SetTrimEnd(float value);
    public abstract virtual float get_TrimOffset();
    public abstract virtual void SetTrimOffset(float value);
    public abstract virtual float get_TrimStart();
    public abstract virtual void SetTrimStart(float value);
}
internal interface Avalonia.Win32.WinRT.ICompositionGraphicsDevice {
    public abstract virtual ICompositionDrawingSurface CreateDrawingSurface(SIZE_F sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    public abstract virtual void AddRenderingDeviceReplaced(Void* handler, Void* token);
    public abstract virtual void RemoveRenderingDeviceReplaced(int token);
}
internal interface Avalonia.Win32.WinRT.ICompositionGraphicsDevice2 {
    public abstract virtual ICompositionDrawingSurface CreateDrawingSurface2(SIZE sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
}
internal interface Avalonia.Win32.WinRT.ICompositionGraphicsDeviceInterop {
    public IUnknown RenderingDevice { get; }
    public abstract virtual IUnknown get_RenderingDevice();
    public abstract virtual void SetRenderingDevice(IUnknown value);
}
internal interface Avalonia.Win32.WinRT.ICompositionRoundedRectangleGeometry {
    public Vector2 CornerRadius { get; }
    public Vector2 Offset { get; }
    public Vector2 Size { get; }
    public abstract virtual Vector2 get_CornerRadius();
    public abstract virtual void SetCornerRadius(Vector2 value);
    public abstract virtual Vector2 get_Offset();
    public abstract virtual void SetOffset(Vector2 value);
    public abstract virtual Vector2 get_Size();
    public abstract virtual void SetSize(Vector2 value);
}
internal interface Avalonia.Win32.WinRT.ICompositionScopedBatch {
    public int IsActive { get; }
    public int IsEnded { get; }
    public abstract virtual int get_IsActive();
    public abstract virtual int get_IsEnded();
    public abstract virtual void End();
    public abstract virtual void Resume();
    public abstract virtual void Suspend();
    public abstract virtual int AddCompleted(Void* handler);
    public abstract virtual void RemoveCompleted(int token);
}
internal interface Avalonia.Win32.WinRT.ICompositionShape {
    public Vector2 CenterPoint { get; }
    public abstract virtual Vector2 get_CenterPoint();
    public abstract virtual void SetCenterPoint(Vector2 value);
}
internal interface Avalonia.Win32.WinRT.ICompositionSpriteShape {
    public ICompositionBrush FillBrush { get; }
    public ICompositionGeometry Geometry { get; }
    public int IsStrokeNonScaling { get; }
    public ICompositionBrush StrokeBrush { get; }
    public abstract virtual ICompositionBrush get_FillBrush();
    public abstract virtual void SetFillBrush(ICompositionBrush value);
    public abstract virtual ICompositionGeometry get_Geometry();
    public abstract virtual void SetGeometry(ICompositionGeometry value);
    public abstract virtual int get_IsStrokeNonScaling();
    public abstract virtual void SetIsStrokeNonScaling(int value);
    public abstract virtual ICompositionBrush get_StrokeBrush();
    public abstract virtual void SetStrokeBrush(ICompositionBrush value);
    public abstract virtual void GetStrokeDashArray();
    public abstract virtual void GetStrokeDashCap();
    public abstract virtual void SetStrokeDashCap();
    public abstract virtual void GetStrokeDashOffset();
    public abstract virtual void SetStrokeDashOffset();
    public abstract virtual void GetStrokeEndCap();
    public abstract virtual void SetStrokeEndCap();
    public abstract virtual void GetStrokeLineJoin();
    public abstract virtual void SetStrokeLineJoin();
    public abstract virtual void GetStrokeMiterLimit();
    public abstract virtual void SetStrokeMiterLimit();
    public abstract virtual void GetStrokeStartCap();
    public abstract virtual void SetStrokeStartCap();
    public abstract virtual void GetStrokeThickness();
    public abstract virtual void SetStrokeThickness();
}
internal interface Avalonia.Win32.WinRT.ICompositionSurface {
}
internal interface Avalonia.Win32.WinRT.ICompositionSurfaceBrush {
    public CompositionBitmapInterpolationMode BitmapInterpolationMode { get; }
    public float HorizontalAlignmentRatio { get; }
    public CompositionStretch Stretch { get; }
    public ICompositionSurface Surface { get; }
    public float VerticalAlignmentRatio { get; }
    public abstract virtual CompositionBitmapInterpolationMode get_BitmapInterpolationMode();
    public abstract virtual void SetBitmapInterpolationMode(CompositionBitmapInterpolationMode value);
    public abstract virtual float get_HorizontalAlignmentRatio();
    public abstract virtual void SetHorizontalAlignmentRatio(float value);
    public abstract virtual CompositionStretch get_Stretch();
    public abstract virtual void SetStretch(CompositionStretch value);
    public abstract virtual ICompositionSurface get_Surface();
    public abstract virtual void SetSurface(ICompositionSurface value);
    public abstract virtual float get_VerticalAlignmentRatio();
    public abstract virtual void SetVerticalAlignmentRatio(float value);
}
internal interface Avalonia.Win32.WinRT.ICompositionTarget {
    public IVisual Root { get; }
    public abstract virtual IVisual get_Root();
    public abstract virtual void SetRoot(IVisual value);
}
internal interface Avalonia.Win32.WinRT.ICompositor {
    public abstract virtual Void* CreateColorKeyFrameAnimation();
    public abstract virtual Void* CreateColorBrush();
    public abstract virtual ICompositionColorBrush CreateColorBrushWithColor(WinRTColor* color);
    public abstract virtual IContainerVisual CreateContainerVisual();
    public abstract virtual Void* CreateCubicBezierEasingFunction(Vector2 controlPoint1, Vector2 controlPoint2);
    public abstract virtual ICompositionEffectFactory CreateEffectFactory(IGraphicsEffect graphicsEffect);
    public abstract virtual Void* CreateEffectFactoryWithProperties(Void* graphicsEffect, Void* animatableProperties);
    public abstract virtual Void* CreateExpressionAnimation();
    public abstract virtual Void* CreateExpressionAnimationWithExpression(IntPtr expression);
    public abstract virtual Void* CreateInsetClip();
    public abstract virtual Void* CreateInsetClipWithInsets(float leftInset, float topInset, float rightInset, float bottomInset);
    public abstract virtual Void* CreateLinearEasingFunction();
    public abstract virtual Void* CreatePropertySet();
    public abstract virtual Void* CreateQuaternionKeyFrameAnimation();
    public abstract virtual Void* CreateScalarKeyFrameAnimation();
    public abstract virtual ICompositionScopedBatch CreateScopedBatch(CompositionBatchTypes batchType);
    public abstract virtual ISpriteVisual CreateSpriteVisual();
    public abstract virtual ICompositionSurfaceBrush CreateSurfaceBrush();
    public abstract virtual ICompositionSurfaceBrush CreateSurfaceBrushWithSurface(ICompositionSurface surface);
    public abstract virtual Void* CreateTargetForCurrentView();
    public abstract virtual Void* CreateVector2KeyFrameAnimation();
    public abstract virtual Void* CreateVector3KeyFrameAnimation();
    public abstract virtual Void* CreateVector4KeyFrameAnimation();
    public abstract virtual Void* GetCommitBatch(CompositionBatchTypes batchType);
}
internal interface Avalonia.Win32.WinRT.ICompositor2 {
    public abstract virtual Void* CreateAmbientLight();
    public abstract virtual Void* CreateAnimationGroup();
    public abstract virtual ICompositionBackdropBrush CreateBackdropBrush();
    public abstract virtual Void* CreateDistantLight();
    public abstract virtual Void* CreateDropShadow();
    public abstract virtual Void* CreateImplicitAnimationCollection();
    public abstract virtual Void* CreateLayerVisual();
    public abstract virtual Void* CreateMaskBrush();
    public abstract virtual Void* CreateNineGridBrush();
    public abstract virtual Void* CreatePointLight();
    public abstract virtual Void* CreateSpotLight();
    public abstract virtual Void* CreateStepEasingFunction();
    public abstract virtual Void* CreateStepEasingFunctionWithStepCount(int stepCount);
}
internal interface Avalonia.Win32.WinRT.ICompositor3 {
    public abstract virtual ICompositionBackdropBrush CreateHostBackdropBrush();
}
internal interface Avalonia.Win32.WinRT.ICompositor5 {
    public IntPtr Comment { get; }
    public float GlobalPlaybackRate { get; }
    public abstract virtual IntPtr get_Comment();
    public abstract virtual void SetComment(IntPtr value);
    public abstract virtual float get_GlobalPlaybackRate();
    public abstract virtual void SetGlobalPlaybackRate(float value);
    public abstract virtual Void* CreateBounceScalarAnimation();
    public abstract virtual Void* CreateBounceVector2Animation();
    public abstract virtual Void* CreateBounceVector3Animation();
    public abstract virtual Void* CreateContainerShape();
    public abstract virtual Void* CreateEllipseGeometry();
    public abstract virtual Void* CreateLineGeometry();
    public abstract virtual Void* CreatePathGeometry();
    public abstract virtual Void* CreatePathGeometryWithPath(Void* path);
    public abstract virtual Void* CreatePathKeyFrameAnimation();
    public abstract virtual Void* CreateRectangleGeometry();
    public abstract virtual ICompositionRoundedRectangleGeometry CreateRoundedRectangleGeometry();
    public abstract virtual IShapeVisual CreateShapeVisual();
    public abstract virtual Void* CreateSpriteShape();
    public abstract virtual Void* CreateSpriteShapeWithGeometry(Void* geometry);
    public abstract virtual Void* CreateViewBox();
    public abstract virtual IAsyncAction RequestCommitAsync();
}
internal interface Avalonia.Win32.WinRT.ICompositor6 {
    public abstract virtual ICompositionGeometricClip CreateGeometricClip();
    public abstract virtual ICompositionGeometricClip CreateGeometricClipWithGeometry(ICompositionGeometry geometry);
}
internal interface Avalonia.Win32.WinRT.ICompositorDesktopInterop {
    public abstract virtual IDesktopWindowTarget CreateDesktopWindowTarget(IntPtr hwndTarget, int isTopmost);
    public abstract virtual void EnsureOnThread(int threadId);
}
internal interface Avalonia.Win32.WinRT.ICompositorInterop {
    public abstract virtual ICompositionSurface CreateCompositionSurfaceForHandle(IntPtr swapChain);
    public abstract virtual ICompositionSurface CreateCompositionSurfaceForSwapChain(IUnknown swapChain);
    public abstract virtual ICompositionGraphicsDevice CreateGraphicsDevice(IUnknown renderingDevice);
}
internal interface Avalonia.Win32.WinRT.ICompositorWithBlurredWallpaperBackdropBrush {
    public abstract virtual ICompositionBackdropBrush TryCreateBlurredWallpaperBackdropBrush();
}
internal interface Avalonia.Win32.WinRT.IContainerVisual {
    public IVisualCollection Children { get; }
    public abstract virtual IVisualCollection get_Children();
}
internal interface Avalonia.Win32.WinRT.IDesktopWindowContentBridgeInterop {
    public IntPtr HWnd { get; }
    public float AppliedScaleFactor { get; }
    public abstract virtual void Initialize(ICompositor compositor, IntPtr parentHwnd);
    public abstract virtual IntPtr get_HWnd();
    public abstract virtual float get_AppliedScaleFactor();
}
internal interface Avalonia.Win32.WinRT.IDesktopWindowTarget {
    public int IsTopmost { get; }
    public abstract virtual int get_IsTopmost();
}
internal interface Avalonia.Win32.WinRT.IDesktopWindowTargetInterop {
    public IntPtr HWnd { get; }
    public abstract virtual IntPtr get_HWnd();
}
internal interface Avalonia.Win32.WinRT.IDispatcherQueue {
}
internal interface Avalonia.Win32.WinRT.IDispatcherQueueController {
    public IDispatcherQueue DispatcherQueue { get; }
    public abstract virtual IDispatcherQueue get_DispatcherQueue();
    public abstract virtual IAsyncAction ShutdownQueueAsync();
}
internal interface Avalonia.Win32.WinRT.IGraphicsEffect {
    public IntPtr Name { get; }
    public abstract virtual IntPtr get_Name();
    public abstract virtual void SetName(IntPtr name);
}
internal interface Avalonia.Win32.WinRT.IGraphicsEffectD2D1Interop {
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    public UInt32 SourceCount { get; }
    public abstract virtual Guid get_EffectId();
    public abstract virtual void GetNamedPropertyMapping(IntPtr name, UInt32* index, GRAPHICS_EFFECT_PROPERTY_MAPPING* mapping);
    public abstract virtual UInt32 get_PropertyCount();
    public abstract virtual IPropertyValue GetProperty(UInt32 index);
    public abstract virtual IGraphicsEffectSource GetSource(UInt32 index);
    public abstract virtual UInt32 get_SourceCount();
}
internal interface Avalonia.Win32.WinRT.IGraphicsEffectSource {
}
internal interface Avalonia.Win32.WinRT.IInspectable {
    public IntPtr RuntimeClassName { get; }
    public TrustLevel TrustLevel { get; }
    public abstract virtual void GetIids(UInt64* iidCount, Guid** iids);
    public abstract virtual IntPtr get_RuntimeClassName();
    public abstract virtual TrustLevel get_TrustLevel();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIAccessibilitySettingsProxy : __MicroComIInspectableProxy {
    public int HighContrast { get; }
    public IntPtr HighContrastScheme { get; }
    protected int VTableSize { get; }
    protected __MicroComIAccessibilitySettingsProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int get_HighContrast();
    public sealed virtual IntPtr get_HighContrastScheme();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIAccessibilitySettingsVTable : __MicroComIInspectableVTable {
    private static int GetHighContrast(Void* this, Int32* value);
    private static int GetHighContrastScheme(Void* this, IntPtr* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIActivationFactoryProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComIActivationFactoryProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IntPtr ActivateInstance();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIActivationFactoryVTable : __MicroComIInspectableVTable {
    private static int ActivateInstance(Void* this, IntPtr* instance);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIApiInformationStaticsProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComIApiInformationStaticsProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int IsTypePresent(IntPtr typeName, Int32* result);
    public sealed virtual int IsMethodPresent(IntPtr typeName, IntPtr methodName, Int32* result);
    public sealed virtual int IsMethodPresentWithArity(IntPtr typeName, IntPtr methodName, UInt32 inputParameterCount, Int32* result);
    public sealed virtual int IsEventPresent(IntPtr typeName, IntPtr eventName, Int32* result);
    public sealed virtual int IsPropertyPresent(IntPtr typeName, IntPtr propertyName, Int32* result);
    public sealed virtual int IsReadOnlyPropertyPresent(IntPtr typeName, IntPtr propertyName, Int32* result);
    public sealed virtual int IsWriteablePropertyPresent(IntPtr typeName, IntPtr propertyName, Int32* result);
    public sealed virtual int IsEnumNamedValuePresent(IntPtr enumTypeName, IntPtr valueName, Int32* result);
    public sealed virtual int IsApiContractPresentByMajor(IntPtr contractName, ushort majorVersion, Int32* result);
    public sealed virtual int IsApiContractPresentByMajorAndMinor(IntPtr contractName, ushort majorVersion, ushort minorVersion, Int32* result);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIApiInformationStaticsVTable : __MicroComIInspectableVTable {
    private static int IsTypePresent(Void* this, IntPtr typeName, Int32* result);
    private static int IsMethodPresent(Void* this, IntPtr typeName, IntPtr methodName, Int32* result);
    private static int IsMethodPresentWithArity(Void* this, IntPtr typeName, IntPtr methodName, UInt32 inputParameterCount, Int32* result);
    private static int IsEventPresent(Void* this, IntPtr typeName, IntPtr eventName, Int32* result);
    private static int IsPropertyPresent(Void* this, IntPtr typeName, IntPtr propertyName, Int32* result);
    private static int IsReadOnlyPropertyPresent(Void* this, IntPtr typeName, IntPtr propertyName, Int32* result);
    private static int IsWriteablePropertyPresent(Void* this, IntPtr typeName, IntPtr propertyName, Int32* result);
    private static int IsEnumNamedValuePresent(Void* this, IntPtr enumTypeName, IntPtr valueName, Int32* result);
    private static int IsApiContractPresentByMajor(Void* this, IntPtr contractName, ushort majorVersion, Int32* result);
    private static int IsApiContractPresentByMajorAndMinor(Void* this, IntPtr contractName, ushort majorVersion, ushort minorVersion, Int32* result);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIAsyncActionCompletedHandlerProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComIAsyncActionCompletedHandlerProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void Invoke(IAsyncAction asyncInfo, AsyncStatus asyncStatus);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIAsyncActionCompletedHandlerVTable : MicroComVtblBase {
    private static int Invoke(Void* this, Void* asyncInfo, AsyncStatus asyncStatus);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIAsyncActionProxy : __MicroComIInspectableProxy {
    public IAsyncActionCompletedHandler Completed { get; }
    protected int VTableSize { get; }
    protected __MicroComIAsyncActionProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void SetCompleted(IAsyncActionCompletedHandler handler);
    public sealed virtual IAsyncActionCompletedHandler get_Completed();
    public sealed virtual void GetResults();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIAsyncActionVTable : __MicroComIInspectableVTable {
    private static int SetCompleted(Void* this, Void* handler);
    private static int GetCompleted(Void* this, Void** ppv);
    private static int GetResults(Void* this);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionBackdropBrushProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositionBackdropBrushProxy(IntPtr nativePointer, bool ownsHandle);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionBackdropBrushVTable : __MicroComIInspectableVTable {
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionBrushProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositionBrushProxy(IntPtr nativePointer, bool ownsHandle);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionBrushVTable : __MicroComIInspectableVTable {
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionClipProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositionClipProxy(IntPtr nativePointer, bool ownsHandle);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionClipVTable : __MicroComIInspectableVTable {
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionColorBrushProxy : __MicroComIInspectableProxy {
    public WinRTColor Color { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionColorBrushProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual WinRTColor get_Color();
    public sealed virtual void SetColor(WinRTColor value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionColorBrushVTable : __MicroComIInspectableVTable {
    private static int GetColor(Void* this, WinRTColor* value);
    private static int SetColor(Void* this, WinRTColor value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionDrawingSurfaceInteropProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComICompositionDrawingSurfaceInteropProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual POINT BeginDraw(RECT* updateRect, Guid* iid, Void** updateObject);
    public sealed virtual void EndDraw();
    public sealed virtual void Resize(POINT sizePixels);
    public sealed virtual void Scroll(RECT* scrollRect, RECT* clipRect, int offsetX, int offsetY);
    public sealed virtual void ResumeDraw();
    public sealed virtual void SuspendDraw();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionDrawingSurfaceInteropVTable : MicroComVtblBase {
    private static int BeginDraw(Void* this, RECT* updateRect, Guid* iid, Void** updateObject, POINT* updateOffset);
    private static int EndDraw(Void* this);
    private static int Resize(Void* this, POINT sizePixels);
    private static int Scroll(Void* this, RECT* scrollRect, RECT* clipRect, int offsetX, int offsetY);
    private static int ResumeDraw(Void* this);
    private static int SuspendDraw(Void* this);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionDrawingSurfaceProxy : __MicroComIInspectableProxy {
    public DirectXAlphaMode AlphaMode { get; }
    public DirectXPixelFormat PixelFormat { get; }
    public SIZE_F Size { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionDrawingSurfaceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual DirectXAlphaMode get_AlphaMode();
    public sealed virtual DirectXPixelFormat get_PixelFormat();
    public sealed virtual SIZE_F get_Size();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionDrawingSurfaceVTable : __MicroComIInspectableVTable {
    private static int GetAlphaMode(Void* this, DirectXAlphaMode* value);
    private static int GetPixelFormat(Void* this, DirectXPixelFormat* value);
    private static int GetSize(Void* this, SIZE_F* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionEffectBrushProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositionEffectBrushProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionBrush GetSourceParameter(IntPtr name);
    public sealed virtual void SetSourceParameter(IntPtr name, ICompositionBrush source);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionEffectBrushVTable : __MicroComIInspectableVTable {
    private static int GetSourceParameter(Void* this, IntPtr name, Void** result);
    private static int SetSourceParameter(Void* this, IntPtr name, Void* source);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionEffectFactoryProxy : __MicroComIInspectableProxy {
    public int ExtendedError { get; }
    public CompositionEffectFactoryLoadStatus LoadStatus { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionEffectFactoryProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionEffectBrush CreateBrush();
    public sealed virtual int get_ExtendedError();
    public sealed virtual CompositionEffectFactoryLoadStatus get_LoadStatus();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionEffectFactoryVTable : __MicroComIInspectableVTable {
    private static int CreateBrush(Void* this, Void** result);
    private static int GetExtendedError(Void* this, Int32* value);
    private static int GetLoadStatus(Void* this, CompositionEffectFactoryLoadStatus* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionEffectSourceParameterFactoryProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositionEffectSourceParameterFactoryProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionEffectSourceParameter Create(IntPtr name);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionEffectSourceParameterFactoryVTable : __MicroComIInspectableVTable {
    private static int Create(Void* this, IntPtr name, Void** instance);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionEffectSourceParameterProxy : __MicroComIInspectableProxy {
    public IntPtr Name { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionEffectSourceParameterProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IntPtr get_Name();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionEffectSourceParameterVTable : __MicroComIInspectableVTable {
    private static int GetName(Void* this, IntPtr* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGeometricClipProxy : __MicroComIInspectableProxy {
    public ICompositionGeometry Geometry { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionGeometricClipProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionGeometry get_Geometry();
    public sealed virtual void SetGeometry(ICompositionGeometry value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGeometricClipVTable : __MicroComIInspectableVTable {
    private static int GetGeometry(Void* this, Void** value);
    private static int SetGeometry(Void* this, Void* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGeometryProxy : __MicroComIInspectableProxy {
    public float TrimEnd { get; }
    public float TrimOffset { get; }
    public float TrimStart { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionGeometryProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual float get_TrimEnd();
    public sealed virtual void SetTrimEnd(float value);
    public sealed virtual float get_TrimOffset();
    public sealed virtual void SetTrimOffset(float value);
    public sealed virtual float get_TrimStart();
    public sealed virtual void SetTrimStart(float value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGeometryVTable : __MicroComIInspectableVTable {
    private static int GetTrimEnd(Void* this, Single* value);
    private static int SetTrimEnd(Void* this, float value);
    private static int GetTrimOffset(Void* this, Single* value);
    private static int SetTrimOffset(Void* this, float value);
    private static int GetTrimStart(Void* this, Single* value);
    private static int SetTrimStart(Void* this, float value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGraphicsDevice2Proxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositionGraphicsDevice2Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionDrawingSurface CreateDrawingSurface2(SIZE sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGraphicsDevice2VTable : __MicroComIInspectableVTable {
    private static int CreateDrawingSurface2(Void* this, SIZE sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode, Void** result);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGraphicsDeviceInteropProxy : MicroComProxyBase {
    public IUnknown RenderingDevice { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionGraphicsDeviceInteropProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IUnknown get_RenderingDevice();
    public sealed virtual void SetRenderingDevice(IUnknown value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGraphicsDeviceInteropVTable : MicroComVtblBase {
    private static int GetRenderingDevice(Void* this, Void** value);
    private static int SetRenderingDevice(Void* this, Void* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGraphicsDeviceProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositionGraphicsDeviceProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionDrawingSurface CreateDrawingSurface(SIZE_F sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    public sealed virtual void AddRenderingDeviceReplaced(Void* handler, Void* token);
    public sealed virtual void RemoveRenderingDeviceReplaced(int token);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionGraphicsDeviceVTable : __MicroComIInspectableVTable {
    private static int CreateDrawingSurface(Void* this, SIZE_F sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode, Void** result);
    private static int AddRenderingDeviceReplaced(Void* this, Void* handler, Void* token);
    private static int RemoveRenderingDeviceReplaced(Void* this, int token);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionRoundedRectangleGeometryProxy : __MicroComIInspectableProxy {
    public Vector2 CornerRadius { get; }
    public Vector2 Offset { get; }
    public Vector2 Size { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionRoundedRectangleGeometryProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Vector2 get_CornerRadius();
    public sealed virtual void SetCornerRadius(Vector2 value);
    public sealed virtual Vector2 get_Offset();
    public sealed virtual void SetOffset(Vector2 value);
    public sealed virtual Vector2 get_Size();
    public sealed virtual void SetSize(Vector2 value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionRoundedRectangleGeometryVTable : __MicroComIInspectableVTable {
    private static int GetCornerRadius(Void* this, Vector2* value);
    private static int SetCornerRadius(Void* this, Vector2 value);
    private static int GetOffset(Void* this, Vector2* value);
    private static int SetOffset(Void* this, Vector2 value);
    private static int GetSize(Void* this, Vector2* value);
    private static int SetSize(Void* this, Vector2 value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionScopedBatchProxy : __MicroComIInspectableProxy {
    public int IsActive { get; }
    public int IsEnded { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionScopedBatchProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int get_IsActive();
    public sealed virtual int get_IsEnded();
    public sealed virtual void End();
    public sealed virtual void Resume();
    public sealed virtual void Suspend();
    public sealed virtual int AddCompleted(Void* handler);
    public sealed virtual void RemoveCompleted(int token);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionScopedBatchVTable : __MicroComIInspectableVTable {
    private static int GetIsActive(Void* this, Int32* value);
    private static int GetIsEnded(Void* this, Int32* value);
    private static int End(Void* this);
    private static int Resume(Void* this);
    private static int Suspend(Void* this);
    private static int AddCompleted(Void* this, Void* handler, Int32* token);
    private static int RemoveCompleted(Void* this, int token);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionShapeProxy : __MicroComIInspectableProxy {
    public Vector2 CenterPoint { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionShapeProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Vector2 get_CenterPoint();
    public sealed virtual void SetCenterPoint(Vector2 value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionShapeVTable : __MicroComIInspectableVTable {
    private static int GetCenterPoint(Void* this, Vector2* value);
    private static int SetCenterPoint(Void* this, Vector2 value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionSpriteShapeProxy : __MicroComIInspectableProxy {
    public ICompositionBrush FillBrush { get; }
    public ICompositionGeometry Geometry { get; }
    public int IsStrokeNonScaling { get; }
    public ICompositionBrush StrokeBrush { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionSpriteShapeProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionBrush get_FillBrush();
    public sealed virtual void SetFillBrush(ICompositionBrush value);
    public sealed virtual ICompositionGeometry get_Geometry();
    public sealed virtual void SetGeometry(ICompositionGeometry value);
    public sealed virtual int get_IsStrokeNonScaling();
    public sealed virtual void SetIsStrokeNonScaling(int value);
    public sealed virtual ICompositionBrush get_StrokeBrush();
    public sealed virtual void SetStrokeBrush(ICompositionBrush value);
    public sealed virtual void GetStrokeDashArray();
    public sealed virtual void GetStrokeDashCap();
    public sealed virtual void SetStrokeDashCap();
    public sealed virtual void GetStrokeDashOffset();
    public sealed virtual void SetStrokeDashOffset();
    public sealed virtual void GetStrokeEndCap();
    public sealed virtual void SetStrokeEndCap();
    public sealed virtual void GetStrokeLineJoin();
    public sealed virtual void SetStrokeLineJoin();
    public sealed virtual void GetStrokeMiterLimit();
    public sealed virtual void SetStrokeMiterLimit();
    public sealed virtual void GetStrokeStartCap();
    public sealed virtual void SetStrokeStartCap();
    public sealed virtual void GetStrokeThickness();
    public sealed virtual void SetStrokeThickness();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionSpriteShapeVTable : __MicroComIInspectableVTable {
    private static int GetFillBrush(Void* this, Void** value);
    private static int SetFillBrush(Void* this, Void* value);
    private static int GetGeometry(Void* this, Void** value);
    private static int SetGeometry(Void* this, Void* value);
    private static int GetIsStrokeNonScaling(Void* this, Int32* value);
    private static int SetIsStrokeNonScaling(Void* this, int value);
    private static int GetStrokeBrush(Void* this, Void** value);
    private static int SetStrokeBrush(Void* this, Void* value);
    private static int GetStrokeDashArray(Void* this);
    private static int GetStrokeDashCap(Void* this);
    private static int SetStrokeDashCap(Void* this);
    private static int GetStrokeDashOffset(Void* this);
    private static int SetStrokeDashOffset(Void* this);
    private static int GetStrokeEndCap(Void* this);
    private static int SetStrokeEndCap(Void* this);
    private static int GetStrokeLineJoin(Void* this);
    private static int SetStrokeLineJoin(Void* this);
    private static int GetStrokeMiterLimit(Void* this);
    private static int SetStrokeMiterLimit(Void* this);
    private static int GetStrokeStartCap(Void* this);
    private static int SetStrokeStartCap(Void* this);
    private static int GetStrokeThickness(Void* this);
    private static int SetStrokeThickness(Void* this);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionSurfaceBrushProxy : __MicroComIInspectableProxy {
    public CompositionBitmapInterpolationMode BitmapInterpolationMode { get; }
    public float HorizontalAlignmentRatio { get; }
    public CompositionStretch Stretch { get; }
    public ICompositionSurface Surface { get; }
    public float VerticalAlignmentRatio { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionSurfaceBrushProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual CompositionBitmapInterpolationMode get_BitmapInterpolationMode();
    public sealed virtual void SetBitmapInterpolationMode(CompositionBitmapInterpolationMode value);
    public sealed virtual float get_HorizontalAlignmentRatio();
    public sealed virtual void SetHorizontalAlignmentRatio(float value);
    public sealed virtual CompositionStretch get_Stretch();
    public sealed virtual void SetStretch(CompositionStretch value);
    public sealed virtual ICompositionSurface get_Surface();
    public sealed virtual void SetSurface(ICompositionSurface value);
    public sealed virtual float get_VerticalAlignmentRatio();
    public sealed virtual void SetVerticalAlignmentRatio(float value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionSurfaceBrushVTable : __MicroComIInspectableVTable {
    private static int GetBitmapInterpolationMode(Void* this, CompositionBitmapInterpolationMode* value);
    private static int SetBitmapInterpolationMode(Void* this, CompositionBitmapInterpolationMode value);
    private static int GetHorizontalAlignmentRatio(Void* this, Single* value);
    private static int SetHorizontalAlignmentRatio(Void* this, float value);
    private static int GetStretch(Void* this, CompositionStretch* value);
    private static int SetStretch(Void* this, CompositionStretch value);
    private static int GetSurface(Void* this, Void** value);
    private static int SetSurface(Void* this, Void* value);
    private static int GetVerticalAlignmentRatio(Void* this, Single* value);
    private static int SetVerticalAlignmentRatio(Void* this, float value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionSurfaceProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositionSurfaceProxy(IntPtr nativePointer, bool ownsHandle);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionSurfaceVTable : __MicroComIInspectableVTable {
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionTargetProxy : __MicroComIInspectableProxy {
    public IVisual Root { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositionTargetProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IVisual get_Root();
    public sealed virtual void SetRoot(IVisual value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositionTargetVTable : __MicroComIInspectableVTable {
    private static int GetRoot(Void* this, Void** value);
    private static int SetRoot(Void* this, Void* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositor2Proxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositor2Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Void* CreateAmbientLight();
    public sealed virtual Void* CreateAnimationGroup();
    public sealed virtual ICompositionBackdropBrush CreateBackdropBrush();
    public sealed virtual Void* CreateDistantLight();
    public sealed virtual Void* CreateDropShadow();
    public sealed virtual Void* CreateImplicitAnimationCollection();
    public sealed virtual Void* CreateLayerVisual();
    public sealed virtual Void* CreateMaskBrush();
    public sealed virtual Void* CreateNineGridBrush();
    public sealed virtual Void* CreatePointLight();
    public sealed virtual Void* CreateSpotLight();
    public sealed virtual Void* CreateStepEasingFunction();
    public sealed virtual Void* CreateStepEasingFunctionWithStepCount(int stepCount);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositor2VTable : __MicroComIInspectableVTable {
    private static int CreateAmbientLight(Void* this, Void** result);
    private static int CreateAnimationGroup(Void* this, Void** result);
    private static int CreateBackdropBrush(Void* this, Void** result);
    private static int CreateDistantLight(Void* this, Void** result);
    private static int CreateDropShadow(Void* this, Void** result);
    private static int CreateImplicitAnimationCollection(Void* this, Void** result);
    private static int CreateLayerVisual(Void* this, Void** result);
    private static int CreateMaskBrush(Void* this, Void** result);
    private static int CreateNineGridBrush(Void* this, Void** result);
    private static int CreatePointLight(Void* this, Void** result);
    private static int CreateSpotLight(Void* this, Void** result);
    private static int CreateStepEasingFunction(Void* this, Void** result);
    private static int CreateStepEasingFunctionWithStepCount(Void* this, int stepCount, Void** result);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositor3Proxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositor3Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionBackdropBrush CreateHostBackdropBrush();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositor3VTable : __MicroComIInspectableVTable {
    private static int CreateHostBackdropBrush(Void* this, Void** result);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositor5Proxy : __MicroComIInspectableProxy {
    public IntPtr Comment { get; }
    public float GlobalPlaybackRate { get; }
    protected int VTableSize { get; }
    protected __MicroComICompositor5Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IntPtr get_Comment();
    public sealed virtual void SetComment(IntPtr value);
    public sealed virtual float get_GlobalPlaybackRate();
    public sealed virtual void SetGlobalPlaybackRate(float value);
    public sealed virtual Void* CreateBounceScalarAnimation();
    public sealed virtual Void* CreateBounceVector2Animation();
    public sealed virtual Void* CreateBounceVector3Animation();
    public sealed virtual Void* CreateContainerShape();
    public sealed virtual Void* CreateEllipseGeometry();
    public sealed virtual Void* CreateLineGeometry();
    public sealed virtual Void* CreatePathGeometry();
    public sealed virtual Void* CreatePathGeometryWithPath(Void* path);
    public sealed virtual Void* CreatePathKeyFrameAnimation();
    public sealed virtual Void* CreateRectangleGeometry();
    public sealed virtual ICompositionRoundedRectangleGeometry CreateRoundedRectangleGeometry();
    public sealed virtual IShapeVisual CreateShapeVisual();
    public sealed virtual Void* CreateSpriteShape();
    public sealed virtual Void* CreateSpriteShapeWithGeometry(Void* geometry);
    public sealed virtual Void* CreateViewBox();
    public sealed virtual IAsyncAction RequestCommitAsync();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositor5VTable : __MicroComIInspectableVTable {
    private static int GetComment(Void* this, IntPtr* value);
    private static int SetComment(Void* this, IntPtr value);
    private static int GetGlobalPlaybackRate(Void* this, Single* value);
    private static int SetGlobalPlaybackRate(Void* this, float value);
    private static int CreateBounceScalarAnimation(Void* this, Void** result);
    private static int CreateBounceVector2Animation(Void* this, Void** result);
    private static int CreateBounceVector3Animation(Void* this, Void** result);
    private static int CreateContainerShape(Void* this, Void** result);
    private static int CreateEllipseGeometry(Void* this, Void** result);
    private static int CreateLineGeometry(Void* this, Void** result);
    private static int CreatePathGeometry(Void* this, Void** result);
    private static int CreatePathGeometryWithPath(Void* this, Void* path, Void** result);
    private static int CreatePathKeyFrameAnimation(Void* this, Void** result);
    private static int CreateRectangleGeometry(Void* this, Void** result);
    private static int CreateRoundedRectangleGeometry(Void* this, Void** result);
    private static int CreateShapeVisual(Void* this, Void** result);
    private static int CreateSpriteShape(Void* this, Void** result);
    private static int CreateSpriteShapeWithGeometry(Void* this, Void* geometry, Void** result);
    private static int CreateViewBox(Void* this, Void** result);
    private static int RequestCommitAsync(Void* this, Void** operation);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositor6Proxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositor6Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionGeometricClip CreateGeometricClip();
    public sealed virtual ICompositionGeometricClip CreateGeometricClipWithGeometry(ICompositionGeometry geometry);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositor6VTable : __MicroComIInspectableVTable {
    private static int CreateGeometricClip(Void* this, Void** result);
    private static int CreateGeometricClipWithGeometry(Void* this, Void* geometry, Void** result);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositorDesktopInteropProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComICompositorDesktopInteropProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IDesktopWindowTarget CreateDesktopWindowTarget(IntPtr hwndTarget, int isTopmost);
    public sealed virtual void EnsureOnThread(int threadId);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositorDesktopInteropVTable : MicroComVtblBase {
    private static int CreateDesktopWindowTarget(Void* this, IntPtr hwndTarget, int isTopmost, Void** result);
    private static int EnsureOnThread(Void* this, int threadId);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositorInteropProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComICompositorInteropProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionSurface CreateCompositionSurfaceForHandle(IntPtr swapChain);
    public sealed virtual ICompositionSurface CreateCompositionSurfaceForSwapChain(IUnknown swapChain);
    public sealed virtual ICompositionGraphicsDevice CreateGraphicsDevice(IUnknown renderingDevice);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositorInteropVTable : MicroComVtblBase {
    private static int CreateCompositionSurfaceForHandle(Void* this, IntPtr swapChain, Void** res);
    private static int CreateCompositionSurfaceForSwapChain(Void* this, Void* swapChain, Void** result);
    private static int CreateGraphicsDevice(Void* this, Void* renderingDevice, Void** result);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositorProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositorProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Void* CreateColorKeyFrameAnimation();
    public sealed virtual Void* CreateColorBrush();
    public sealed virtual ICompositionColorBrush CreateColorBrushWithColor(WinRTColor* color);
    public sealed virtual IContainerVisual CreateContainerVisual();
    public sealed virtual Void* CreateCubicBezierEasingFunction(Vector2 controlPoint1, Vector2 controlPoint2);
    public sealed virtual ICompositionEffectFactory CreateEffectFactory(IGraphicsEffect graphicsEffect);
    public sealed virtual Void* CreateEffectFactoryWithProperties(Void* graphicsEffect, Void* animatableProperties);
    public sealed virtual Void* CreateExpressionAnimation();
    public sealed virtual Void* CreateExpressionAnimationWithExpression(IntPtr expression);
    public sealed virtual Void* CreateInsetClip();
    public sealed virtual Void* CreateInsetClipWithInsets(float leftInset, float topInset, float rightInset, float bottomInset);
    public sealed virtual Void* CreateLinearEasingFunction();
    public sealed virtual Void* CreatePropertySet();
    public sealed virtual Void* CreateQuaternionKeyFrameAnimation();
    public sealed virtual Void* CreateScalarKeyFrameAnimation();
    public sealed virtual ICompositionScopedBatch CreateScopedBatch(CompositionBatchTypes batchType);
    public sealed virtual ISpriteVisual CreateSpriteVisual();
    public sealed virtual ICompositionSurfaceBrush CreateSurfaceBrush();
    public sealed virtual ICompositionSurfaceBrush CreateSurfaceBrushWithSurface(ICompositionSurface surface);
    public sealed virtual Void* CreateTargetForCurrentView();
    public sealed virtual Void* CreateVector2KeyFrameAnimation();
    public sealed virtual Void* CreateVector3KeyFrameAnimation();
    public sealed virtual Void* CreateVector4KeyFrameAnimation();
    public sealed virtual Void* GetCommitBatch(CompositionBatchTypes batchType);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositorVTable : __MicroComIInspectableVTable {
    private static int CreateColorKeyFrameAnimation(Void* this, Void** result);
    private static int CreateColorBrush(Void* this, Void** result);
    private static int CreateColorBrushWithColor(Void* this, WinRTColor* color, Void** result);
    private static int CreateContainerVisual(Void* this, Void** result);
    private static int CreateCubicBezierEasingFunction(Void* this, Vector2 controlPoint1, Vector2 controlPoint2, Void** result);
    private static int CreateEffectFactory(Void* this, Void* graphicsEffect, Void** result);
    private static int CreateEffectFactoryWithProperties(Void* this, Void* graphicsEffect, Void* animatableProperties, Void** result);
    private static int CreateExpressionAnimation(Void* this, Void** result);
    private static int CreateExpressionAnimationWithExpression(Void* this, IntPtr expression, Void** result);
    private static int CreateInsetClip(Void* this, Void** result);
    private static int CreateInsetClipWithInsets(Void* this, float leftInset, float topInset, float rightInset, float bottomInset, Void** result);
    private static int CreateLinearEasingFunction(Void* this, Void** result);
    private static int CreatePropertySet(Void* this, Void** result);
    private static int CreateQuaternionKeyFrameAnimation(Void* this, Void** result);
    private static int CreateScalarKeyFrameAnimation(Void* this, Void** result);
    private static int CreateScopedBatch(Void* this, CompositionBatchTypes batchType, Void** result);
    private static int CreateSpriteVisual(Void* this, Void** result);
    private static int CreateSurfaceBrush(Void* this, Void** result);
    private static int CreateSurfaceBrushWithSurface(Void* this, Void* surface, Void** result);
    private static int CreateTargetForCurrentView(Void* this, Void** result);
    private static int CreateVector2KeyFrameAnimation(Void* this, Void** result);
    private static int CreateVector3KeyFrameAnimation(Void* this, Void** result);
    private static int CreateVector4KeyFrameAnimation(Void* this, Void** result);
    private static int GetCommitBatch(Void* this, CompositionBatchTypes batchType, Void** result);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositorWithBlurredWallpaperBackdropBrushProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComICompositorWithBlurredWallpaperBackdropBrushProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionBackdropBrush TryCreateBlurredWallpaperBackdropBrush();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComICompositorWithBlurredWallpaperBackdropBrushVTable : __MicroComIInspectableVTable {
    private static int TryCreateBlurredWallpaperBackdropBrush(Void* this, Void** result);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIContainerVisualProxy : __MicroComIInspectableProxy {
    public IVisualCollection Children { get; }
    protected int VTableSize { get; }
    protected __MicroComIContainerVisualProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IVisualCollection get_Children();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIContainerVisualVTable : __MicroComIInspectableVTable {
    private static int GetChildren(Void* this, Void** value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDesktopWindowContentBridgeInteropProxy : MicroComProxyBase {
    public IntPtr HWnd { get; }
    public float AppliedScaleFactor { get; }
    protected int VTableSize { get; }
    protected __MicroComIDesktopWindowContentBridgeInteropProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void Initialize(ICompositor compositor, IntPtr parentHwnd);
    public sealed virtual IntPtr get_HWnd();
    public sealed virtual float get_AppliedScaleFactor();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDesktopWindowContentBridgeInteropVTable : MicroComVtblBase {
    private static int Initialize(Void* this, Void* compositor, IntPtr parentHwnd);
    private static int GetHWnd(Void* this, IntPtr* value);
    private static int GetAppliedScaleFactor(Void* this, Single* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDesktopWindowTargetInteropProxy : MicroComProxyBase {
    public IntPtr HWnd { get; }
    protected int VTableSize { get; }
    protected __MicroComIDesktopWindowTargetInteropProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IntPtr get_HWnd();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDesktopWindowTargetInteropVTable : MicroComVtblBase {
    private static int GetHWnd(Void* this, IntPtr* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDesktopWindowTargetProxy : __MicroComIInspectableProxy {
    public int IsTopmost { get; }
    protected int VTableSize { get; }
    protected __MicroComIDesktopWindowTargetProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int get_IsTopmost();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDesktopWindowTargetVTable : __MicroComIInspectableVTable {
    private static int GetIsTopmost(Void* this, Int32* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDispatcherQueueControllerProxy : __MicroComIInspectableProxy {
    public IDispatcherQueue DispatcherQueue { get; }
    protected int VTableSize { get; }
    protected __MicroComIDispatcherQueueControllerProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IDispatcherQueue get_DispatcherQueue();
    public sealed virtual IAsyncAction ShutdownQueueAsync();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDispatcherQueueControllerVTable : __MicroComIInspectableVTable {
    private static int GetDispatcherQueue(Void* this, Void** value);
    private static int ShutdownQueueAsync(Void* this, Void** operation);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDispatcherQueueProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComIDispatcherQueueProxy(IntPtr nativePointer, bool ownsHandle);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIDispatcherQueueVTable : __MicroComIInspectableVTable {
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIGraphicsEffectD2D1InteropProxy : MicroComProxyBase {
    public Guid EffectId { get; }
    public UInt32 PropertyCount { get; }
    public UInt32 SourceCount { get; }
    protected int VTableSize { get; }
    protected __MicroComIGraphicsEffectD2D1InteropProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Guid get_EffectId();
    public sealed virtual void GetNamedPropertyMapping(IntPtr name, UInt32* index, GRAPHICS_EFFECT_PROPERTY_MAPPING* mapping);
    public sealed virtual UInt32 get_PropertyCount();
    public sealed virtual IPropertyValue GetProperty(UInt32 index);
    public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 get_SourceCount();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIGraphicsEffectD2D1InteropVTable : MicroComVtblBase {
    private static int GetEffectId(Void* this, Guid* id);
    private static int GetNamedPropertyMapping(Void* this, IntPtr name, UInt32* index, GRAPHICS_EFFECT_PROPERTY_MAPPING* mapping);
    private static int GetPropertyCount(Void* this, UInt32* count);
    private static int GetProperty(Void* this, UInt32 index, Void** value);
    private static int GetSource(Void* this, UInt32 index, Void** source);
    private static int GetSourceCount(Void* this, UInt32* count);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIGraphicsEffectProxy : __MicroComIInspectableProxy {
    public IntPtr Name { get; }
    protected int VTableSize { get; }
    protected __MicroComIGraphicsEffectProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IntPtr get_Name();
    public sealed virtual void SetName(IntPtr name);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIGraphicsEffectSourceProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComIGraphicsEffectSourceProxy(IntPtr nativePointer, bool ownsHandle);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIGraphicsEffectSourceVTable : __MicroComIInspectableVTable {
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIGraphicsEffectVTable : __MicroComIInspectableVTable {
    private static int GetName(Void* this, IntPtr* name);
    private static int SetName(Void* this, IntPtr name);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIInspectableProxy : MicroComProxyBase {
    public IntPtr RuntimeClassName { get; }
    public TrustLevel TrustLevel { get; }
    protected int VTableSize { get; }
    protected __MicroComIInspectableProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void GetIids(UInt64* iidCount, Guid** iids);
    public sealed virtual IntPtr get_RuntimeClassName();
    public sealed virtual TrustLevel get_TrustLevel();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIInspectableVTable : MicroComVtblBase {
    private static int GetIids(Void* this, UInt64* iidCount, Guid** iids);
    private static int GetRuntimeClassName(Void* this, IntPtr* className);
    private static int GetTrustLevel(Void* this, TrustLevel* trustLevel);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIPropertyValueProxy : __MicroComIInspectableProxy {
    public PropertyType Type { get; }
    public int IsNumericScalar { get; }
    public byte UInt8 { get; }
    public short Int16 { get; }
    public ushort UInt16 { get; }
    public int Int32 { get; }
    public UInt32 UInt32 { get; }
    public long Int64 { get; }
    public ulong UInt64 { get; }
    public float Single { get; }
    public double Double { get; }
    public char Char16 { get; }
    public int Boolean { get; }
    public IntPtr String { get; }
    public Guid Guid { get; }
    protected int VTableSize { get; }
    protected __MicroComIPropertyValueProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual PropertyType get_Type();
    public sealed virtual int get_IsNumericScalar();
    public sealed virtual byte get_UInt8();
    public sealed virtual short get_Int16();
    public sealed virtual ushort get_UInt16();
    public sealed virtual int get_Int32();
    public sealed virtual UInt32 get_UInt32();
    public sealed virtual long get_Int64();
    public sealed virtual ulong get_UInt64();
    public sealed virtual float get_Single();
    public sealed virtual double get_Double();
    public sealed virtual char get_Char16();
    public sealed virtual int get_Boolean();
    public sealed virtual IntPtr get_String();
    public sealed virtual Guid get_Guid();
    public sealed virtual void GetDateTime(Void* value);
    public sealed virtual void GetTimeSpan(Void* value);
    public sealed virtual void GetPoint(Void* value);
    public sealed virtual void GetSize(Void* value);
    public sealed virtual void GetRect(Void* value);
    public sealed virtual Byte* GetUInt8Array(UInt32* __valueSize);
    public sealed virtual Int16* GetInt16Array(UInt32* __valueSize);
    public sealed virtual UInt16* GetUInt16Array(UInt32* __valueSize);
    public sealed virtual Int32* GetInt32Array(UInt32* __valueSize);
    public sealed virtual UInt32* GetUInt32Array(UInt32* __valueSize);
    public sealed virtual Int64* GetInt64Array(UInt32* __valueSize);
    public sealed virtual UInt64* GetUInt64Array(UInt32* __valueSize);
    public sealed virtual Single* GetSingleArray(UInt32* __valueSize);
    public sealed virtual Double* GetDoubleArray(UInt32* __valueSize);
    public sealed virtual Char* GetChar16Array(UInt32* __valueSize);
    public sealed virtual Int32* GetBooleanArray(UInt32* __valueSize);
    public sealed virtual IntPtr* GetStringArray(UInt32* __valueSize);
    public sealed virtual Void** GetInspectableArray(UInt32* __valueSize);
    public sealed virtual Guid* GetGuidArray(UInt32* __valueSize);
    public sealed virtual Void* GetDateTimeArray(UInt32* __valueSize);
    public sealed virtual Void* GetTimeSpanArray(UInt32* __valueSize);
    public sealed virtual Void* GetPointArray(UInt32* __valueSize);
    public sealed virtual Void* GetSizeArray(UInt32* __valueSize);
    public sealed virtual Void* GetRectArray(UInt32* __valueSize);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIPropertyValueVTable : __MicroComIInspectableVTable {
    private static int GetType(Void* this, PropertyType* value);
    private static int GetIsNumericScalar(Void* this, Int32* value);
    private static int GetUInt8(Void* this, Byte* value);
    private static int GetInt16(Void* this, Int16* value);
    private static int GetUInt16(Void* this, UInt16* value);
    private static int GetInt32(Void* this, Int32* value);
    private static int GetUInt32(Void* this, UInt32* value);
    private static int GetInt64(Void* this, Int64* value);
    private static int GetUInt64(Void* this, UInt64* value);
    private static int GetSingle(Void* this, Single* value);
    private static int GetDouble(Void* this, Double* value);
    private static int GetChar16(Void* this, Char* value);
    private static int GetBoolean(Void* this, Int32* value);
    private static int GetString(Void* this, IntPtr* value);
    private static int GetGuid(Void* this, Guid* value);
    private static int GetDateTime(Void* this, Void* value);
    private static int GetTimeSpan(Void* this, Void* value);
    private static int GetPoint(Void* this, Void* value);
    private static int GetSize(Void* this, Void* value);
    private static int GetRect(Void* this, Void* value);
    private static int GetUInt8Array(Void* this, UInt32* __valueSize, Byte** value);
    private static int GetInt16Array(Void* this, UInt32* __valueSize, Int16** value);
    private static int GetUInt16Array(Void* this, UInt32* __valueSize, UInt16** value);
    private static int GetInt32Array(Void* this, UInt32* __valueSize, Int32** value);
    private static int GetUInt32Array(Void* this, UInt32* __valueSize, UInt32** value);
    private static int GetInt64Array(Void* this, UInt32* __valueSize, Int64** value);
    private static int GetUInt64Array(Void* this, UInt32* __valueSize, UInt64** value);
    private static int GetSingleArray(Void* this, UInt32* __valueSize, Single** value);
    private static int GetDoubleArray(Void* this, UInt32* __valueSize, Double** value);
    private static int GetChar16Array(Void* this, UInt32* __valueSize, Char** value);
    private static int GetBooleanArray(Void* this, UInt32* __valueSize, Int32** value);
    private static int GetStringArray(Void* this, UInt32* __valueSize, IntPtr** value);
    private static int GetInspectableArray(Void* this, UInt32* __valueSize, Void*** value);
    private static int GetGuidArray(Void* this, UInt32* __valueSize, Guid** value);
    private static int GetDateTimeArray(Void* this, UInt32* __valueSize, Void** value);
    private static int GetTimeSpanArray(Void* this, UInt32* __valueSize, Void** value);
    private static int GetPointArray(Void* this, UInt32* __valueSize, Void** value);
    private static int GetSizeArray(Void* this, UInt32* __valueSize, Void** value);
    private static int GetRectArray(Void* this, UInt32* __valueSize, Void** value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIShapeVisualProxy : __MicroComIInspectableProxy {
    public IUnknown Shapes { get; }
    protected int VTableSize { get; }
    protected __MicroComIShapeVisualProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IUnknown get_Shapes();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIShapeVisualVTable : __MicroComIInspectableVTable {
    private static int GetShapes(Void* this, Void** value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComISpriteVisualProxy : __MicroComIInspectableProxy {
    public ICompositionBrush Brush { get; }
    protected int VTableSize { get; }
    protected __MicroComISpriteVisualProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual ICompositionBrush get_Brush();
    public sealed virtual void SetBrush(ICompositionBrush value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComISpriteVisualVTable : __MicroComIInspectableVTable {
    private static int GetBrush(Void* this, Void** value);
    private static int SetBrush(Void* this, Void* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComISwapChainInteropProxy : MicroComProxyBase {
    protected int VTableSize { get; }
    protected __MicroComISwapChainInteropProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void SetSwapChain(IUnknown swapChain);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComISwapChainInteropVTable : MicroComVtblBase {
    private static int SetSwapChain(Void* this, Void* swapChain);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIUISettings3Proxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComIUISettings3Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual WinRTColor GetColorValue(UIColorType desiredColor);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIUISettings3VTable : __MicroComIInspectableVTable {
    private static int GetColorValue(Void* this, UIColorType desiredColor, WinRTColor* value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIVectorOfCompositionShapeProxy : __MicroComIInspectableProxy {
    protected int VTableSize { get; }
    protected __MicroComIVectorOfCompositionShapeProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual void GetAt();
    public sealed virtual void GetSize();
    public sealed virtual void GetView();
    public sealed virtual void IndexOf();
    public sealed virtual void SetAt();
    public sealed virtual void InsertAt();
    public sealed virtual void RemoveAt();
    public sealed virtual void Append(ICompositionShape value);
    public sealed virtual void RemoveAtEnd();
    public sealed virtual void Clear();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIVectorOfCompositionShapeVTable : __MicroComIInspectableVTable {
    private static int GetAt(Void* this);
    private static int GetSize(Void* this);
    private static int GetView(Void* this);
    private static int IndexOf(Void* this);
    private static int SetAt(Void* this);
    private static int InsertAt(Void* this);
    private static int RemoveAt(Void* this);
    private static int Append(Void* this, Void* value);
    private static int RemoveAtEnd(Void* this);
    private static int Clear(Void* this);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIVisual2Proxy : __MicroComIInspectableProxy {
    public IVisual ParentForTransform { get; }
    public Vector3 RelativeOffsetAdjustment { get; }
    public Vector2 RelativeSizeAdjustment { get; }
    protected int VTableSize { get; }
    protected __MicroComIVisual2Proxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual IVisual get_ParentForTransform();
    public sealed virtual void SetParentForTransform(IVisual value);
    public sealed virtual Vector3 get_RelativeOffsetAdjustment();
    public sealed virtual void SetRelativeOffsetAdjustment(Vector3 value);
    public sealed virtual Vector2 get_RelativeSizeAdjustment();
    public sealed virtual void SetRelativeSizeAdjustment(Vector2 value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIVisual2VTable : __MicroComIInspectableVTable {
    private static int GetParentForTransform(Void* this, Void** value);
    private static int SetParentForTransform(Void* this, Void* value);
    private static int GetRelativeOffsetAdjustment(Void* this, Vector3* value);
    private static int SetRelativeOffsetAdjustment(Void* this, Vector3 value);
    private static int GetRelativeSizeAdjustment(Void* this, Vector2* value);
    private static int SetRelativeSizeAdjustment(Void* this, Vector2 value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIVisualCollectionProxy : __MicroComIInspectableProxy {
    public int Count { get; }
    protected int VTableSize { get; }
    protected __MicroComIVisualCollectionProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual int get_Count();
    public sealed virtual void InsertAbove(IVisual newChild, IVisual sibling);
    public sealed virtual void InsertAtBottom(IVisual newChild);
    public sealed virtual void InsertAtTop(IVisual newChild);
    public sealed virtual void InsertBelow(IVisual newChild, IVisual sibling);
    public sealed virtual void Remove(IVisual child);
    public sealed virtual void RemoveAll();
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIVisualCollectionVTable : __MicroComIInspectableVTable {
    private static int GetCount(Void* this, Int32* value);
    private static int InsertAbove(Void* this, Void* newChild, Void* sibling);
    private static int InsertAtBottom(Void* this, Void* newChild);
    private static int InsertAtTop(Void* this, Void* newChild);
    private static int InsertBelow(Void* this, Void* newChild, Void* sibling);
    private static int Remove(Void* this, Void* child);
    private static int RemoveAll(Void* this);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIVisualProxy : __MicroComIInspectableProxy {
    public Vector2 AnchorPoint { get; }
    public CompositionBackfaceVisibility BackfaceVisibility { get; }
    public CompositionBorderMode BorderMode { get; }
    public Vector3 CenterPoint { get; }
    public ICompositionClip Clip { get; }
    public CompositionCompositeMode CompositeMode { get; }
    public int IsVisible { get; }
    public Vector3 Offset { get; }
    public float Opacity { get; }
    public Quaternion Orientation { get; }
    public IContainerVisual Parent { get; }
    public float RotationAngle { get; }
    public float RotationAngleInDegrees { get; }
    public Vector3 RotationAxis { get; }
    public Vector3 Scale { get; }
    public Vector2 Size { get; }
    public Matrix4x4 TransformMatrix { get; }
    protected int VTableSize { get; }
    protected __MicroComIVisualProxy(IntPtr nativePointer, bool ownsHandle);
    public sealed virtual Vector2 get_AnchorPoint();
    public sealed virtual void SetAnchorPoint(Vector2 value);
    public sealed virtual CompositionBackfaceVisibility get_BackfaceVisibility();
    public sealed virtual void SetBackfaceVisibility(CompositionBackfaceVisibility value);
    public sealed virtual CompositionBorderMode get_BorderMode();
    public sealed virtual void SetBorderMode(CompositionBorderMode value);
    public sealed virtual Vector3 get_CenterPoint();
    public sealed virtual void SetCenterPoint(Vector3 value);
    public sealed virtual ICompositionClip get_Clip();
    public sealed virtual void SetClip(ICompositionClip value);
    public sealed virtual CompositionCompositeMode get_CompositeMode();
    public sealed virtual void SetCompositeMode(CompositionCompositeMode value);
    public sealed virtual int get_IsVisible();
    public sealed virtual void SetIsVisible(int value);
    public sealed virtual Vector3 get_Offset();
    public sealed virtual void SetOffset(Vector3 value);
    public sealed virtual float get_Opacity();
    public sealed virtual void SetOpacity(float value);
    public sealed virtual Quaternion get_Orientation();
    public sealed virtual void SetOrientation(Quaternion value);
    public sealed virtual IContainerVisual get_Parent();
    public sealed virtual float get_RotationAngle();
    public sealed virtual void SetRotationAngle(float value);
    public sealed virtual float get_RotationAngleInDegrees();
    public sealed virtual void SetRotationAngleInDegrees(float value);
    public sealed virtual Vector3 get_RotationAxis();
    public sealed virtual void SetRotationAxis(Vector3 value);
    public sealed virtual Vector3 get_Scale();
    public sealed virtual void SetScale(Vector3 value);
    public sealed virtual Vector2 get_Size();
    public sealed virtual void SetSize(Vector2 value);
    public sealed virtual Matrix4x4 get_TransformMatrix();
    public sealed virtual void SetTransformMatrix(Matrix4x4 value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
    protected virtual int get_VTableSize();
}
internal class Avalonia.Win32.WinRT.Impl.__MicroComIVisualVTable : __MicroComIInspectableVTable {
    private static int GetAnchorPoint(Void* this, Vector2* value);
    private static int SetAnchorPoint(Void* this, Vector2 value);
    private static int GetBackfaceVisibility(Void* this, CompositionBackfaceVisibility* value);
    private static int SetBackfaceVisibility(Void* this, CompositionBackfaceVisibility value);
    private static int GetBorderMode(Void* this, CompositionBorderMode* value);
    private static int SetBorderMode(Void* this, CompositionBorderMode value);
    private static int GetCenterPoint(Void* this, Vector3* value);
    private static int SetCenterPoint(Void* this, Vector3 value);
    private static int GetClip(Void* this, Void** value);
    private static int SetClip(Void* this, Void* value);
    private static int GetCompositeMode(Void* this, CompositionCompositeMode* value);
    private static int SetCompositeMode(Void* this, CompositionCompositeMode value);
    private static int GetIsVisible(Void* this, Int32* value);
    private static int SetIsVisible(Void* this, int value);
    private static int GetOffset(Void* this, Vector3* value);
    private static int SetOffset(Void* this, Vector3 value);
    private static int GetOpacity(Void* this, Single* value);
    private static int SetOpacity(Void* this, float value);
    private static int GetOrientation(Void* this, Quaternion* value);
    private static int SetOrientation(Void* this, Quaternion value);
    private static int GetParent(Void* this, Void** value);
    private static int GetRotationAngle(Void* this, Single* value);
    private static int SetRotationAngle(Void* this, float value);
    private static int GetRotationAngleInDegrees(Void* this, Single* value);
    private static int SetRotationAngleInDegrees(Void* this, float value);
    private static int GetRotationAxis(Void* this, Vector3* value);
    private static int SetRotationAxis(Void* this, Vector3 value);
    private static int GetScale(Void* this, Vector3* value);
    private static int SetScale(Void* this, Vector3 value);
    private static int GetSize(Void* this, Vector2* value);
    private static int SetSize(Void* this, Vector2 value);
    private static int GetTransformMatrix(Void* this, Matrix4x4* value);
    private static int SetTransformMatrix(Void* this, Matrix4x4 value);
    [ModuleInitializerAttribute]
internal static void __MicroComModuleInit();
}
internal interface Avalonia.Win32.WinRT.IPropertyValue {
    public PropertyType Type { get; }
    public int IsNumericScalar { get; }
    public byte UInt8 { get; }
    public short Int16 { get; }
    public ushort UInt16 { get; }
    public int Int32 { get; }
    public UInt32 UInt32 { get; }
    public long Int64 { get; }
    public ulong UInt64 { get; }
    public float Single { get; }
    public double Double { get; }
    public char Char16 { get; }
    public int Boolean { get; }
    public IntPtr String { get; }
    public Guid Guid { get; }
    public abstract virtual PropertyType get_Type();
    public abstract virtual int get_IsNumericScalar();
    public abstract virtual byte get_UInt8();
    public abstract virtual short get_Int16();
    public abstract virtual ushort get_UInt16();
    public abstract virtual int get_Int32();
    public abstract virtual UInt32 get_UInt32();
    public abstract virtual long get_Int64();
    public abstract virtual ulong get_UInt64();
    public abstract virtual float get_Single();
    public abstract virtual double get_Double();
    public abstract virtual char get_Char16();
    public abstract virtual int get_Boolean();
    public abstract virtual IntPtr get_String();
    public abstract virtual Guid get_Guid();
    public abstract virtual void GetDateTime(Void* value);
    public abstract virtual void GetTimeSpan(Void* value);
    public abstract virtual void GetPoint(Void* value);
    public abstract virtual void GetSize(Void* value);
    public abstract virtual void GetRect(Void* value);
    public abstract virtual Byte* GetUInt8Array(UInt32* __valueSize);
    public abstract virtual Int16* GetInt16Array(UInt32* __valueSize);
    public abstract virtual UInt16* GetUInt16Array(UInt32* __valueSize);
    public abstract virtual Int32* GetInt32Array(UInt32* __valueSize);
    public abstract virtual UInt32* GetUInt32Array(UInt32* __valueSize);
    public abstract virtual Int64* GetInt64Array(UInt32* __valueSize);
    public abstract virtual UInt64* GetUInt64Array(UInt32* __valueSize);
    public abstract virtual Single* GetSingleArray(UInt32* __valueSize);
    public abstract virtual Double* GetDoubleArray(UInt32* __valueSize);
    public abstract virtual Char* GetChar16Array(UInt32* __valueSize);
    public abstract virtual Int32* GetBooleanArray(UInt32* __valueSize);
    public abstract virtual IntPtr* GetStringArray(UInt32* __valueSize);
    public abstract virtual Void** GetInspectableArray(UInt32* __valueSize);
    public abstract virtual Guid* GetGuidArray(UInt32* __valueSize);
    public abstract virtual Void* GetDateTimeArray(UInt32* __valueSize);
    public abstract virtual Void* GetTimeSpanArray(UInt32* __valueSize);
    public abstract virtual Void* GetPointArray(UInt32* __valueSize);
    public abstract virtual Void* GetSizeArray(UInt32* __valueSize);
    public abstract virtual Void* GetRectArray(UInt32* __valueSize);
}
internal interface Avalonia.Win32.WinRT.IShapeVisual {
    public IUnknown Shapes { get; }
    public abstract virtual IUnknown get_Shapes();
}
internal interface Avalonia.Win32.WinRT.ISpriteVisual {
    public ICompositionBrush Brush { get; }
    public abstract virtual ICompositionBrush get_Brush();
    public abstract virtual void SetBrush(ICompositionBrush value);
}
internal interface Avalonia.Win32.WinRT.ISwapChainInterop {
    public abstract virtual void SetSwapChain(IUnknown swapChain);
}
internal interface Avalonia.Win32.WinRT.IUISettings3 {
    public abstract virtual WinRTColor GetColorValue(UIColorType desiredColor);
}
internal interface Avalonia.Win32.WinRT.IVectorOfCompositionShape {
    public abstract virtual void GetAt();
    public abstract virtual void GetSize();
    public abstract virtual void GetView();
    public abstract virtual void IndexOf();
    public abstract virtual void SetAt();
    public abstract virtual void InsertAt();
    public abstract virtual void RemoveAt();
    public abstract virtual void Append(ICompositionShape value);
    public abstract virtual void RemoveAtEnd();
    public abstract virtual void Clear();
}
internal interface Avalonia.Win32.WinRT.IVisual {
    public Vector2 AnchorPoint { get; }
    public CompositionBackfaceVisibility BackfaceVisibility { get; }
    public CompositionBorderMode BorderMode { get; }
    public Vector3 CenterPoint { get; }
    public ICompositionClip Clip { get; }
    public CompositionCompositeMode CompositeMode { get; }
    public int IsVisible { get; }
    public Vector3 Offset { get; }
    public float Opacity { get; }
    public Quaternion Orientation { get; }
    public IContainerVisual Parent { get; }
    public float RotationAngle { get; }
    public float RotationAngleInDegrees { get; }
    public Vector3 RotationAxis { get; }
    public Vector3 Scale { get; }
    public Vector2 Size { get; }
    public Matrix4x4 TransformMatrix { get; }
    public abstract virtual Vector2 get_AnchorPoint();
    public abstract virtual void SetAnchorPoint(Vector2 value);
    public abstract virtual CompositionBackfaceVisibility get_BackfaceVisibility();
    public abstract virtual void SetBackfaceVisibility(CompositionBackfaceVisibility value);
    public abstract virtual CompositionBorderMode get_BorderMode();
    public abstract virtual void SetBorderMode(CompositionBorderMode value);
    public abstract virtual Vector3 get_CenterPoint();
    public abstract virtual void SetCenterPoint(Vector3 value);
    public abstract virtual ICompositionClip get_Clip();
    public abstract virtual void SetClip(ICompositionClip value);
    public abstract virtual CompositionCompositeMode get_CompositeMode();
    public abstract virtual void SetCompositeMode(CompositionCompositeMode value);
    public abstract virtual int get_IsVisible();
    public abstract virtual void SetIsVisible(int value);
    public abstract virtual Vector3 get_Offset();
    public abstract virtual void SetOffset(Vector3 value);
    public abstract virtual float get_Opacity();
    public abstract virtual void SetOpacity(float value);
    public abstract virtual Quaternion get_Orientation();
    public abstract virtual void SetOrientation(Quaternion value);
    public abstract virtual IContainerVisual get_Parent();
    public abstract virtual float get_RotationAngle();
    public abstract virtual void SetRotationAngle(float value);
    public abstract virtual float get_RotationAngleInDegrees();
    public abstract virtual void SetRotationAngleInDegrees(float value);
    public abstract virtual Vector3 get_RotationAxis();
    public abstract virtual void SetRotationAxis(Vector3 value);
    public abstract virtual Vector3 get_Scale();
    public abstract virtual void SetScale(Vector3 value);
    public abstract virtual Vector2 get_Size();
    public abstract virtual void SetSize(Vector2 value);
    public abstract virtual Matrix4x4 get_TransformMatrix();
    public abstract virtual void SetTransformMatrix(Matrix4x4 value);
}
internal interface Avalonia.Win32.WinRT.IVisual2 {
    public IVisual ParentForTransform { get; }
    public Vector3 RelativeOffsetAdjustment { get; }
    public Vector2 RelativeSizeAdjustment { get; }
    public abstract virtual IVisual get_ParentForTransform();
    public abstract virtual void SetParentForTransform(IVisual value);
    public abstract virtual Vector3 get_RelativeOffsetAdjustment();
    public abstract virtual void SetRelativeOffsetAdjustment(Vector3 value);
    public abstract virtual Vector2 get_RelativeSizeAdjustment();
    public abstract virtual void SetRelativeSizeAdjustment(Vector2 value);
}
internal interface Avalonia.Win32.WinRT.IVisualCollection {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void InsertAbove(IVisual newChild, IVisual sibling);
    public abstract virtual void InsertAtBottom(IVisual newChild);
    public abstract virtual void InsertAtTop(IVisual newChild);
    public abstract virtual void InsertBelow(IVisual newChild, IVisual sibling);
    public abstract virtual void Remove(IVisual child);
    public abstract virtual void RemoveAll();
}
internal static class Avalonia.Win32.WinRT.NativeWinRTMethods : object {
    private static bool s_initialized;
    [NullableContextAttribute("1")]
internal static IntPtr WindowsCreateString(string sourceString, int length);
    [NullableContextAttribute("1")]
internal static IntPtr WindowsCreateString(string sourceString);
    internal static Char* WindowsGetStringRawBuffer(IntPtr hstring, UInt32* length);
    internal static void WindowsDeleteString(IntPtr hString);
    private static IntPtr GetWindowsUICompositionActivationFactory(IntPtr activatableClassId);
    [NullableContextAttribute("1")]
internal static IActivationFactory GetWindowsUICompositionActivationFactory(string className);
    [NullableContextAttribute("1")]
internal static T CreateInstance(string fullName);
    [NullableContextAttribute("1")]
internal static TFactory CreateActivationFactory(string fullName);
    internal static IntPtr CreateDispatcherQueueController(DispatcherQueueOptions options);
    private static void RoInitialize(RO_INIT_TYPE initType);
    private static IntPtr RoActivateInstance(IntPtr activatableClassId);
    private static IntPtr RoGetActivationFactory(IntPtr activatableClassId, Guid& iid);
    private static void EnsureRoInitialized();
}
internal enum Avalonia.Win32.WinRT.PropertyType : Enum {
    public int value__;
    public static PropertyType Empty;
    public static PropertyType UInt8;
    public static PropertyType Int16;
    public static PropertyType UInt16;
    public static PropertyType Int32;
    public static PropertyType UInt32;
    public static PropertyType Int64;
    public static PropertyType UInt64;
    public static PropertyType Single;
    public static PropertyType Double;
    public static PropertyType Char16;
    public static PropertyType Boolean;
    public static PropertyType String;
    public static PropertyType Inspectable;
    public static PropertyType DateTime;
    public static PropertyType TimeSpan;
    public static PropertyType Guid;
    public static PropertyType Point;
    public static PropertyType Size;
    public static PropertyType Rect;
    public static PropertyType OtherType;
    public static PropertyType UInt8Array;
    public static PropertyType Int16Array;
    public static PropertyType UInt16Array;
    public static PropertyType Int32Array;
    public static PropertyType UInt32Array;
    public static PropertyType Int64Array;
    public static PropertyType UInt64Array;
    public static PropertyType SingleArray;
    public static PropertyType DoubleArray;
    public static PropertyType Char16Array;
    public static PropertyType BooleanArray;
    public static PropertyType StringArray;
    public static PropertyType InspectableArray;
    public static PropertyType DateTimeArray;
    public static PropertyType TimeSpanArray;
    public static PropertyType GuidArray;
    public static PropertyType PointArray;
    public static PropertyType SizeArray;
    public static PropertyType RectArray;
    public static PropertyType OtherTypeArray;
}
internal enum Avalonia.Win32.WinRT.TrustLevel : Enum {
    public int value__;
    public static TrustLevel BaseTrust;
    public static TrustLevel PartialTrust;
    public static TrustLevel FullTrust;
}
internal enum Avalonia.Win32.WinRT.UIColorType : Enum {
    public int value__;
    public static UIColorType Background;
    public static UIColorType Foreground;
    public static UIColorType AccentDark3;
    public static UIColorType AccentDark2;
    public static UIColorType AccentDark1;
    public static UIColorType Accent;
    public static UIColorType AccentLight1;
    public static UIColorType AccentLight2;
    public static UIColorType AccentLight3;
    public static UIColorType Complement;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Avalonia.Win32.WinRT.WinRTApiInformation : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<IApiInformationStatics> s_statics;
    private static WinRTApiInformation();
    public static bool IsTypePresent(string typeName);
    public static bool IsMethodPresent(string typeName, string methodName);
    public static bool IsMethodPresentWithArity(string typeName, string methodName, UInt32 inputParameterCount);
    public static bool IsEventPresent(string typeName, string eventName);
    public static bool IsPropertyPresent(string typeName, string propertyName);
    public static bool IsReadOnlyPropertyPresent(string typeName, string propertyName);
    public static bool IsWriteablePropertyPresent(string typeName, string propertyName);
    public static bool IsEnumNamedValuePresent(string enumTypeName, string valueName);
    public static bool IsApiContractPresentByMajor(string contractName, ushort majorVersion);
    public static bool IsApiContractPresentByMajorAndMinor(string contractName, ushort majorVersion, ushort minorVersion);
}
internal class Avalonia.Win32.WinRT.WinRTColor : ValueType {
    public byte A;
    public byte R;
    public byte G;
    public byte B;
    public static WinRTColor FromArgb(byte a, byte r, byte g, byte b);
    public Color ToAvalonia();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(WinRTColor left, WinRTColor right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(WinRTColor left, WinRTColor right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(WinRTColor other);
}
[DynamicallyAccessedMembersAttribute]
internal class Avalonia.Win32.WinRT.WinRTInspectable : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MicroComShadow <Shadow>k__BackingField;
    public IntPtr RuntimeClassName { get; }
    public TrustLevel TrustLevel { get; }
    [NullableAttribute("2")]
public MicroComShadow Shadow { get; public set; }
    public virtual void Dispose();
    public sealed virtual void GetIids(UInt64* iidCount, Guid** iids);
    public sealed virtual IntPtr get_RuntimeClassName();
    public sealed virtual TrustLevel get_TrustLevel();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual MicroComShadow get_Shadow();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Shadow(MicroComShadow value);
    public virtual void OnReferencedFromNative();
    public virtual void OnUnreferencedFromNative();
}
internal class Avalonia.Win32.WinRT.WinRTPropertyValue : WinRTInspectable {
    [NullableAttribute("2")]
private Single[] _singleArray;
    [CompilerGeneratedAttribute]
private PropertyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IsNumericScalar>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <UInt8>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Int16>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <UInt16>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Int32>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <UInt32>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Int64>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <UInt64>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Single>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Double>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Char16>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Boolean>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <String>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    public PropertyType Type { get; }
    public int IsNumericScalar { get; }
    public byte UInt8 { get; }
    public short Int16 { get; }
    public ushort UInt16 { get; }
    public int Int32 { get; }
    public UInt32 UInt32 { get; }
    public long Int64 { get; }
    public ulong UInt64 { get; }
    public float Single { get; }
    public double Double { get; }
    public char Char16 { get; }
    public int Boolean { get; }
    public IntPtr String { get; }
    public Guid Guid { get; }
    [NullableAttribute("1")]
private static COMException NotImplemented { get; }
    public WinRTPropertyValue(float f);
    public WinRTPropertyValue(UInt32 u);
    [NullableContextAttribute("1")]
public WinRTPropertyValue(Single[] uiColor);
    [CompilerGeneratedAttribute]
public sealed virtual PropertyType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual int get_IsNumericScalar();
    [CompilerGeneratedAttribute]
public sealed virtual byte get_UInt8();
    [CompilerGeneratedAttribute]
public sealed virtual short get_Int16();
    [CompilerGeneratedAttribute]
public sealed virtual ushort get_UInt16();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Int32();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_UInt32();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Int64();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_UInt64();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Single();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Double();
    [CompilerGeneratedAttribute]
public sealed virtual char get_Char16();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Boolean();
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_String();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Guid();
    [NullableContextAttribute("1")]
private static COMException get_NotImplemented();
    public sealed virtual void GetDateTime(Void* value);
    public sealed virtual void GetTimeSpan(Void* value);
    public sealed virtual void GetPoint(Void* value);
    public sealed virtual void GetSize(Void* value);
    public sealed virtual void GetRect(Void* value);
    public sealed virtual Byte* GetUInt8Array(UInt32* __valueSize);
    public sealed virtual Int16* GetInt16Array(UInt32* __valueSize);
    public sealed virtual UInt16* GetUInt16Array(UInt32* __valueSize);
    public sealed virtual Int32* GetInt32Array(UInt32* __valueSize);
    public sealed virtual UInt32* GetUInt32Array(UInt32* __valueSize);
    public sealed virtual Int64* GetInt64Array(UInt32* __valueSize);
    public sealed virtual UInt64* GetUInt64Array(UInt32* __valueSize);
    public sealed virtual Single* GetSingleArray(UInt32* __valueSize);
    public sealed virtual Double* GetDoubleArray(UInt32* __valueSize);
    public sealed virtual Char* GetChar16Array(UInt32* __valueSize);
    public sealed virtual Int32* GetBooleanArray(UInt32* __valueSize);
    public sealed virtual IntPtr* GetStringArray(UInt32* __valueSize);
    public sealed virtual Void** GetInspectableArray(UInt32* __valueSize);
    public sealed virtual Guid* GetGuidArray(UInt32* __valueSize);
    public sealed virtual Void* GetDateTimeArray(UInt32* __valueSize);
    public sealed virtual Void* GetTimeSpanArray(UInt32* __valueSize);
    public sealed virtual Void* GetPointArray(UInt32* __valueSize);
    public sealed virtual Void* GetSizeArray(UInt32* __valueSize);
    public sealed virtual Void* GetRectArray(UInt32* __valueSize);
}
internal class Avalonia.Win32.WinScreen : PlatformScreen {
    [CompilerGeneratedAttribute]
private IntPtr <hMonitor>P;
    [NullableAttribute("1")]
private static Lazy`1<bool> s_hasGetDpiForMonitor;
    [CompilerGeneratedAttribute]
private int <Frequency>k__BackingField;
    internal int Frequency { get; private set; }
    public WinScreen(IntPtr hMonitor);
    private static WinScreen();
    [CompilerGeneratedAttribute]
internal int get_Frequency();
    [CompilerGeneratedAttribute]
private void set_Frequency(int value);
    public void Refresh();
    [NullableContextAttribute("2")]
private string GetDisplayName(MONITORINFOEX& monitorinfo);
    private double GetScaling();
}
[ExtensionAttribute]
public static class Avalonia.Win32ApplicationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AppBuilder UseWin32(AppBuilder builder);
}
public enum Avalonia.Win32CompositionMode : Enum {
    public int value__;
    public static Win32CompositionMode WinUIComposition;
    public static Win32CompositionMode DirectComposition;
    public static Win32CompositionMode LowLatencyDxgiSwapChain;
    public static Win32CompositionMode RedirectionSurface;
}
public enum Avalonia.Win32DpiAwareness : Enum {
    public int value__;
    public static Win32DpiAwareness Unaware;
    public static Win32DpiAwareness SystemDpiAware;
    public static Win32DpiAwareness PerMonitorDpiAware;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Avalonia.Win32PlatformOptions : object {
    [CompilerGeneratedAttribute]
private bool <OverlayPopups>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Win32RenderingMode> <RenderingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Win32CompositionMode> <CompositionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <WinUICompositionBackdropCornerRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRenderOnUIThread>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GlVersion> <WglProfiles>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IPlatformGraphics <CustomPlatformGraphics>k__BackingField;
    [CompilerGeneratedAttribute]
private Win32DpiAwareness <DpiAwareness>k__BackingField;
    public bool OverlayPopups { get; public set; }
    public IReadOnlyList`1<Win32RenderingMode> RenderingMode { get; public set; }
    public IReadOnlyList`1<Win32CompositionMode> CompositionMode { get; public set; }
    public Nullable`1<float> WinUICompositionBackdropCornerRadius { get; public set; }
    public bool ShouldRenderOnUIThread { get; public set; }
    public IList`1<GlVersion> WglProfiles { get; public set; }
    [NullableAttribute("2")]
public IPlatformGraphics CustomPlatformGraphics { get; public set; }
    public Win32DpiAwareness DpiAwareness { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_OverlayPopups();
    [CompilerGeneratedAttribute]
public void set_OverlayPopups(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Win32RenderingMode> get_RenderingMode();
    [CompilerGeneratedAttribute]
public void set_RenderingMode(IReadOnlyList`1<Win32RenderingMode> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Win32CompositionMode> get_CompositionMode();
    [CompilerGeneratedAttribute]
public void set_CompositionMode(IReadOnlyList`1<Win32CompositionMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_WinUICompositionBackdropCornerRadius();
    [CompilerGeneratedAttribute]
public void set_WinUICompositionBackdropCornerRadius(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public bool get_ShouldRenderOnUIThread();
    [CompilerGeneratedAttribute]
public void set_ShouldRenderOnUIThread(bool value);
    [CompilerGeneratedAttribute]
public IList`1<GlVersion> get_WglProfiles();
    [CompilerGeneratedAttribute]
public void set_WglProfiles(IList`1<GlVersion> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IPlatformGraphics get_CustomPlatformGraphics();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CustomPlatformGraphics(IPlatformGraphics value);
    [CompilerGeneratedAttribute]
public Win32DpiAwareness get_DpiAwareness();
    [CompilerGeneratedAttribute]
public void set_DpiAwareness(Win32DpiAwareness value);
}
public enum Avalonia.Win32RenderingMode : Enum {
    public int value__;
    public static Win32RenderingMode Software;
    public static Win32RenderingMode AngleEgl;
    public static Win32RenderingMode Wgl;
    public static Win32RenderingMode Vulkan;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__char_128 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Char", "128")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Char& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Char& get_Item(int index);
    [IsReadOnlyAttribute]
internal void CopyTo(Span`1<char> target, int length);
    [IsReadOnlyAttribute]
internal Char[] ToArray(int length);
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<char> value);
    [IsReadOnlyAttribute]
internal bool Equals(string value);
    [IsReadOnlyAttribute]
internal string ToString(int length);
    [IsReadOnlyAttribute]
public virtual string ToString();
    public static __char_128 op_Implicit(string value);
    public static __char_128 op_Implicit(ReadOnlySpan`1<char> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__char_32 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Char", "32")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Char& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Char& get_Item(int index);
    [IsReadOnlyAttribute]
internal void CopyTo(Span`1<char> target, int length);
    [IsReadOnlyAttribute]
internal Char[] ToArray(int length);
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<char> value);
    [IsReadOnlyAttribute]
internal bool Equals(string value);
    [IsReadOnlyAttribute]
internal string ToString(int length);
    [IsReadOnlyAttribute]
public virtual string ToString();
    public static __char_32 op_Implicit(string value);
    public static __char_32 op_Implicit(ReadOnlySpan`1<char> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__char_64 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Char", "64")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Char& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Char& get_Item(int index);
    [IsReadOnlyAttribute]
internal void CopyTo(Span`1<char> target, int length);
    [IsReadOnlyAttribute]
internal Char[] ToArray(int length);
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<char> value);
    [IsReadOnlyAttribute]
internal bool Equals(string value);
    [IsReadOnlyAttribute]
internal string ToString(int length);
    [IsReadOnlyAttribute]
public virtual string ToString();
    public static __char_64 op_Implicit(string value);
    public static __char_64 op_Implicit(ReadOnlySpan`1<char> value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_2DREGION : ValueType {
    internal UInt32 cx;
    internal UInt32 cy;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_DESKTOP_IMAGE_INFO : ValueType {
    internal POINTL PathSourceSize;
    internal RECTL DesktopImageRegion;
    internal RECTL DesktopImageClip;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER : ValueType {
    internal DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    internal UInt32 size;
    internal LUID adapterId;
    internal UInt32 id;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE : Enum {
    public int value__;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION;
    public static DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO : ValueType {
    internal DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    internal UInt32 id;
    internal LUID adapterId;
    internal _Anonymous_e__Union Anonymous;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO_TYPE : Enum {
    public int value__;
    public static DISPLAYCONFIG_MODE_INFO_TYPE DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE;
    public static DISPLAYCONFIG_MODE_INFO_TYPE DISPLAYCONFIG_MODE_INFO_TYPE_TARGET;
    public static DISPLAYCONFIG_MODE_INFO_TYPE DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_INFO : ValueType {
    internal DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    internal DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    internal UInt32 flags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO : ValueType {
    internal LUID adapterId;
    internal UInt32 id;
    internal _Anonymous_e__Union Anonymous;
    internal UInt32 statusFlags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO : ValueType {
    internal LUID adapterId;
    internal UInt32 id;
    internal _Anonymous_e__Union Anonymous;
    internal DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    internal DISPLAYCONFIG_ROTATION rotation;
    internal DISPLAYCONFIG_SCALING scaling;
    internal DISPLAYCONFIG_RATIONAL refreshRate;
    internal DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    internal BOOL targetAvailable;
    internal UInt32 statusFlags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Devices.Display.DISPLAYCONFIG_PIXELFORMAT : Enum {
    public int value__;
    public static DISPLAYCONFIG_PIXELFORMAT DISPLAYCONFIG_PIXELFORMAT_8BPP;
    public static DISPLAYCONFIG_PIXELFORMAT DISPLAYCONFIG_PIXELFORMAT_16BPP;
    public static DISPLAYCONFIG_PIXELFORMAT DISPLAYCONFIG_PIXELFORMAT_24BPP;
    public static DISPLAYCONFIG_PIXELFORMAT DISPLAYCONFIG_PIXELFORMAT_32BPP;
    public static DISPLAYCONFIG_PIXELFORMAT DISPLAYCONFIG_PIXELFORMAT_NONGDI;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_RATIONAL : ValueType {
    internal UInt32 Numerator;
    internal UInt32 Denominator;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Devices.Display.DISPLAYCONFIG_ROTATION : Enum {
    public int value__;
    public static DISPLAYCONFIG_ROTATION DISPLAYCONFIG_ROTATION_IDENTITY;
    public static DISPLAYCONFIG_ROTATION DISPLAYCONFIG_ROTATION_ROTATE90;
    public static DISPLAYCONFIG_ROTATION DISPLAYCONFIG_ROTATION_ROTATE180;
    public static DISPLAYCONFIG_ROTATION DISPLAYCONFIG_ROTATION_ROTATE270;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Devices.Display.DISPLAYCONFIG_SCALING : Enum {
    public int value__;
    public static DISPLAYCONFIG_SCALING DISPLAYCONFIG_SCALING_IDENTITY;
    public static DISPLAYCONFIG_SCALING DISPLAYCONFIG_SCALING_CENTERED;
    public static DISPLAYCONFIG_SCALING DISPLAYCONFIG_SCALING_STRETCHED;
    public static DISPLAYCONFIG_SCALING DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX;
    public static DISPLAYCONFIG_SCALING DISPLAYCONFIG_SCALING_CUSTOM;
    public static DISPLAYCONFIG_SCALING DISPLAYCONFIG_SCALING_PREFERRED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Devices.Display.DISPLAYCONFIG_SCANLINE_ORDERING : Enum {
    public int value__;
    public static DISPLAYCONFIG_SCANLINE_ORDERING DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED;
    public static DISPLAYCONFIG_SCANLINE_ORDERING DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE;
    public static DISPLAYCONFIG_SCANLINE_ORDERING DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED;
    public static DISPLAYCONFIG_SCANLINE_ORDERING DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST;
    public static DISPLAYCONFIG_SCANLINE_ORDERING DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_DEVICE_NAME : ValueType {
    internal DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    internal __char_32 viewGdiDeviceName;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_MODE : ValueType {
    internal UInt32 width;
    internal UInt32 height;
    internal DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    internal POINTL position;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME : ValueType {
    internal DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    internal DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    internal DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    internal ushort edidManufactureId;
    internal ushort edidProductCodeId;
    internal UInt32 connectorInstance;
    internal __char_64 monitorFriendlyDeviceName;
    internal __char_128 monitorDevicePath;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS : ValueType {
    internal _Anonymous_e__Union Anonymous;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_MODE : ValueType {
    internal DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Devices.Display.DISPLAYCONFIG_TOPOLOGY_ID : Enum {
    public int value__;
    public static DISPLAYCONFIG_TOPOLOGY_ID DISPLAYCONFIG_TOPOLOGY_INTERNAL;
    public static DISPLAYCONFIG_TOPOLOGY_ID DISPLAYCONFIG_TOPOLOGY_CLONE;
    public static DISPLAYCONFIG_TOPOLOGY_ID DISPLAYCONFIG_TOPOLOGY_EXTEND;
    public static DISPLAYCONFIG_TOPOLOGY_ID DISPLAYCONFIG_TOPOLOGY_EXTERNAL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY : Enum {
    public int value__;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL;
    public static DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO : ValueType {
    internal ulong pixelRate;
    internal DISPLAYCONFIG_RATIONAL hSyncFreq;
    internal DISPLAYCONFIG_RATIONAL vSyncFreq;
    internal DISPLAYCONFIG_2DREGION activeSize;
    internal DISPLAYCONFIG_2DREGION totalSize;
    internal _Anonymous_e__Union Anonymous;
    internal DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Devices.Display.QUERY_DISPLAY_CONFIG_FLAGS : Enum {
    public UInt32 value__;
    public static QUERY_DISPLAY_CONFIG_FLAGS QDC_ALL_PATHS;
    public static QUERY_DISPLAY_CONFIG_FLAGS QDC_ONLY_ACTIVE_PATHS;
    public static QUERY_DISPLAY_CONFIG_FLAGS QDC_DATABASE_CURRENT;
    public static QUERY_DISPLAY_CONFIG_FLAGS QDC_VIRTUAL_MODE_AWARE;
    public static QUERY_DISPLAY_CONFIG_FLAGS QDC_INCLUDE_HMD;
    public static QUERY_DISPLAY_CONFIG_FLAGS QDC_VIRTUAL_REFRESH_RATE_AWARE;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Foundation.BOOL : ValueType {
    internal int Value;
    internal BOOL(int value);
    internal BOOL(bool value);
    public static int op_Implicit(BOOL value);
    public static BOOL op_Explicit(int value);
    public static bool op_Equality(BOOL left, BOOL right);
    public static bool op_Inequality(BOOL left, BOOL right);
    public sealed virtual bool Equals(BOOL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Implicit(BOOL value);
    public static BOOL op_Implicit(bool value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Foundation.LPARAM : ValueType {
    [NativeIntegerAttribute]
internal IntPtr Value;
    internal LPARAM(IntPtr value);
    public static IntPtr op_Implicit(LPARAM value);
    public static LPARAM op_Implicit(IntPtr value);
    public static bool op_Equality(LPARAM left, LPARAM right);
    public static bool op_Inequality(LPARAM left, LPARAM right);
    public sealed virtual bool Equals(LPARAM other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Foundation.LUID : ValueType {
    internal UInt32 LowPart;
    internal int HighPart;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
internal class Windows.Win32.Foundation.PCWSTR : ValueType {
    internal Char* Value;
    internal int Length { get; }
    private string DebuggerDisplay { get; }
    internal PCWSTR(Char* value);
    public static Char* op_Explicit(PCWSTR value);
    public static PCWSTR op_Implicit(Char* value);
    public sealed virtual bool Equals(PCWSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal int get_Length();
    public virtual string ToString();
    internal ReadOnlySpan`1<char> AsSpan();
    private string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Foundation.POINTL : ValueType {
    internal int x;
    internal int y;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Foundation.RECT : ValueType {
    internal int left;
    internal int top;
    internal int right;
    internal int bottom;
    internal int Width { get; }
    internal int Height { get; }
    internal bool IsEmpty { get; }
    internal int X { get; }
    internal int Y { get; }
    internal Size Size { get; }
    internal RECT(Rectangle value);
    internal RECT(Point location, Size size);
    internal RECT(int left, int top, int right, int bottom);
    internal static RECT FromXYWH(int x, int y, int width, int height);
    [IsReadOnlyAttribute]
internal int get_Width();
    [IsReadOnlyAttribute]
internal int get_Height();
    [IsReadOnlyAttribute]
internal bool get_IsEmpty();
    [IsReadOnlyAttribute]
internal int get_X();
    [IsReadOnlyAttribute]
internal int get_Y();
    [IsReadOnlyAttribute]
internal Size get_Size();
    public static Rectangle op_Implicit(RECT value);
    public static RectangleF op_Implicit(RECT value);
    public static RECT op_Implicit(Rectangle value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Foundation.RECTL : ValueType {
    internal int left;
    internal int top;
    internal int right;
    internal int bottom;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Foundation.WIN32_ERROR : Enum {
    public UInt32 value__;
    public static WIN32_ERROR NO_ERROR;
    public static WIN32_ERROR ERROR_EXPECTED_SECTION_NAME;
    public static WIN32_ERROR ERROR_BAD_SECTION_NAME_LINE;
    public static WIN32_ERROR ERROR_SECTION_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_GENERAL_SYNTAX;
    public static WIN32_ERROR ERROR_WRONG_INF_STYLE;
    public static WIN32_ERROR ERROR_SECTION_NOT_FOUND;
    public static WIN32_ERROR ERROR_LINE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_BACKUP;
    public static WIN32_ERROR ERROR_NO_ASSOCIATED_CLASS;
    public static WIN32_ERROR ERROR_CLASS_MISMATCH;
    public static WIN32_ERROR ERROR_DUPLICATE_FOUND;
    public static WIN32_ERROR ERROR_NO_DRIVER_SELECTED;
    public static WIN32_ERROR ERROR_KEY_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_INVALID_DEVINST_NAME;
    public static WIN32_ERROR ERROR_INVALID_CLASS;
    public static WIN32_ERROR ERROR_DEVINST_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DEVINFO_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_INVALID_REG_PROPERTY;
    public static WIN32_ERROR ERROR_NO_INF;
    public static WIN32_ERROR ERROR_NO_SUCH_DEVINST;
    public static WIN32_ERROR ERROR_CANT_LOAD_CLASS_ICON;
    public static WIN32_ERROR ERROR_INVALID_CLASS_INSTALLER;
    public static WIN32_ERROR ERROR_DI_DO_DEFAULT;
    public static WIN32_ERROR ERROR_DI_NOFILECOPY;
    public static WIN32_ERROR ERROR_INVALID_HWPROFILE;
    public static WIN32_ERROR ERROR_NO_DEVICE_SELECTED;
    public static WIN32_ERROR ERROR_DEVINFO_LIST_LOCKED;
    public static WIN32_ERROR ERROR_DEVINFO_DATA_LOCKED;
    public static WIN32_ERROR ERROR_DI_BAD_PATH;
    public static WIN32_ERROR ERROR_NO_CLASSINSTALL_PARAMS;
    public static WIN32_ERROR ERROR_FILEQUEUE_LOCKED;
    public static WIN32_ERROR ERROR_BAD_SERVICE_INSTALLSECT;
    public static WIN32_ERROR ERROR_NO_CLASS_DRIVER_LIST;
    public static WIN32_ERROR ERROR_NO_ASSOCIATED_SERVICE;
    public static WIN32_ERROR ERROR_NO_DEFAULT_DEVICE_INTERFACE;
    public static WIN32_ERROR ERROR_DEVICE_INTERFACE_ACTIVE;
    public static WIN32_ERROR ERROR_DEVICE_INTERFACE_REMOVED;
    public static WIN32_ERROR ERROR_BAD_INTERFACE_INSTALLSECT;
    public static WIN32_ERROR ERROR_NO_SUCH_INTERFACE_CLASS;
    public static WIN32_ERROR ERROR_INVALID_REFERENCE_STRING;
    public static WIN32_ERROR ERROR_INVALID_MACHINENAME;
    public static WIN32_ERROR ERROR_REMOTE_COMM_FAILURE;
    public static WIN32_ERROR ERROR_MACHINE_UNAVAILABLE;
    public static WIN32_ERROR ERROR_NO_CONFIGMGR_SERVICES;
    public static WIN32_ERROR ERROR_INVALID_PROPPAGE_PROVIDER;
    public static WIN32_ERROR ERROR_NO_SUCH_DEVICE_INTERFACE;
    public static WIN32_ERROR ERROR_DI_POSTPROCESSING_REQUIRED;
    public static WIN32_ERROR ERROR_INVALID_COINSTALLER;
    public static WIN32_ERROR ERROR_NO_COMPAT_DRIVERS;
    public static WIN32_ERROR ERROR_NO_DEVICE_ICON;
    public static WIN32_ERROR ERROR_INVALID_INF_LOGCONFIG;
    public static WIN32_ERROR ERROR_DI_DONT_INSTALL;
    public static WIN32_ERROR ERROR_INVALID_FILTER_DRIVER;
    public static WIN32_ERROR ERROR_NON_WINDOWS_NT_DRIVER;
    public static WIN32_ERROR ERROR_NON_WINDOWS_DRIVER;
    public static WIN32_ERROR ERROR_NO_CATALOG_FOR_OEM_INF;
    public static WIN32_ERROR ERROR_DEVINSTALL_QUEUE_NONNATIVE;
    public static WIN32_ERROR ERROR_NOT_DISABLEABLE;
    public static WIN32_ERROR ERROR_CANT_REMOVE_DEVINST;
    public static WIN32_ERROR ERROR_INVALID_TARGET;
    public static WIN32_ERROR ERROR_DRIVER_NONNATIVE;
    public static WIN32_ERROR ERROR_IN_WOW64;
    public static WIN32_ERROR ERROR_SET_SYSTEM_RESTORE_POINT;
    public static WIN32_ERROR ERROR_SCE_DISABLED;
    public static WIN32_ERROR ERROR_UNKNOWN_EXCEPTION;
    public static WIN32_ERROR ERROR_PNP_REGISTRY_ERROR;
    public static WIN32_ERROR ERROR_REMOTE_REQUEST_UNSUPPORTED;
    public static WIN32_ERROR ERROR_NOT_AN_INSTALLED_OEM_INF;
    public static WIN32_ERROR ERROR_INF_IN_USE_BY_DEVICES;
    public static WIN32_ERROR ERROR_DI_FUNCTION_OBSOLETE;
    public static WIN32_ERROR ERROR_NO_AUTHENTICODE_CATALOG;
    public static WIN32_ERROR ERROR_AUTHENTICODE_DISALLOWED;
    public static WIN32_ERROR ERROR_AUTHENTICODE_TRUSTED_PUBLISHER;
    public static WIN32_ERROR ERROR_AUTHENTICODE_TRUST_NOT_ESTABLISHED;
    public static WIN32_ERROR ERROR_AUTHENTICODE_PUBLISHER_NOT_TRUSTED;
    public static WIN32_ERROR ERROR_SIGNATURE_OSATTRIBUTE_MISMATCH;
    public static WIN32_ERROR ERROR_ONLY_VALIDATE_VIA_AUTHENTICODE;
    public static WIN32_ERROR ERROR_DEVICE_INSTALLER_NOT_READY;
    public static WIN32_ERROR ERROR_DRIVER_STORE_ADD_FAILED;
    public static WIN32_ERROR ERROR_DEVICE_INSTALL_BLOCKED;
    public static WIN32_ERROR ERROR_DRIVER_INSTALL_BLOCKED;
    public static WIN32_ERROR ERROR_WRONG_INF_TYPE;
    public static WIN32_ERROR ERROR_FILE_HASH_NOT_IN_CATALOG;
    public static WIN32_ERROR ERROR_DRIVER_STORE_DELETE_FAILED;
    public static WIN32_ERROR ERROR_UNRECOVERABLE_STACK_OVERFLOW;
    public static WIN32_ERROR ERROR_NO_DEFAULT_INTERFACE_DEVICE;
    public static WIN32_ERROR ERROR_INTERFACE_DEVICE_ACTIVE;
    public static WIN32_ERROR ERROR_INTERFACE_DEVICE_REMOVED;
    public static WIN32_ERROR ERROR_NO_SUCH_INTERFACE_DEVICE;
    public static WIN32_ERROR ERROR_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_SUCCESS;
    public static WIN32_ERROR ERROR_INVALID_FUNCTION;
    public static WIN32_ERROR ERROR_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_PATH_NOT_FOUND;
    public static WIN32_ERROR ERROR_TOO_MANY_OPEN_FILES;
    public static WIN32_ERROR ERROR_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_INVALID_HANDLE;
    public static WIN32_ERROR ERROR_ARENA_TRASHED;
    public static WIN32_ERROR ERROR_NOT_ENOUGH_MEMORY;
    public static WIN32_ERROR ERROR_INVALID_BLOCK;
    public static WIN32_ERROR ERROR_BAD_ENVIRONMENT;
    public static WIN32_ERROR ERROR_BAD_FORMAT;
    public static WIN32_ERROR ERROR_INVALID_ACCESS;
    public static WIN32_ERROR ERROR_INVALID_DATA;
    public static WIN32_ERROR ERROR_OUTOFMEMORY;
    public static WIN32_ERROR ERROR_INVALID_DRIVE;
    public static WIN32_ERROR ERROR_CURRENT_DIRECTORY;
    public static WIN32_ERROR ERROR_NOT_SAME_DEVICE;
    public static WIN32_ERROR ERROR_NO_MORE_FILES;
    public static WIN32_ERROR ERROR_WRITE_PROTECT;
    public static WIN32_ERROR ERROR_BAD_UNIT;
    public static WIN32_ERROR ERROR_NOT_READY;
    public static WIN32_ERROR ERROR_BAD_COMMAND;
    public static WIN32_ERROR ERROR_CRC;
    public static WIN32_ERROR ERROR_BAD_LENGTH;
    public static WIN32_ERROR ERROR_SEEK;
    public static WIN32_ERROR ERROR_NOT_DOS_DISK;
    public static WIN32_ERROR ERROR_SECTOR_NOT_FOUND;
    public static WIN32_ERROR ERROR_OUT_OF_PAPER;
    public static WIN32_ERROR ERROR_WRITE_FAULT;
    public static WIN32_ERROR ERROR_READ_FAULT;
    public static WIN32_ERROR ERROR_GEN_FAILURE;
    public static WIN32_ERROR ERROR_SHARING_VIOLATION;
    public static WIN32_ERROR ERROR_LOCK_VIOLATION;
    public static WIN32_ERROR ERROR_WRONG_DISK;
    public static WIN32_ERROR ERROR_SHARING_BUFFER_EXCEEDED;
    public static WIN32_ERROR ERROR_HANDLE_EOF;
    public static WIN32_ERROR ERROR_HANDLE_DISK_FULL;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_REM_NOT_LIST;
    public static WIN32_ERROR ERROR_DUP_NAME;
    public static WIN32_ERROR ERROR_BAD_NETPATH;
    public static WIN32_ERROR ERROR_NETWORK_BUSY;
    public static WIN32_ERROR ERROR_DEV_NOT_EXIST;
    public static WIN32_ERROR ERROR_TOO_MANY_CMDS;
    public static WIN32_ERROR ERROR_ADAP_HDW_ERR;
    public static WIN32_ERROR ERROR_BAD_NET_RESP;
    public static WIN32_ERROR ERROR_UNEXP_NET_ERR;
    public static WIN32_ERROR ERROR_BAD_REM_ADAP;
    public static WIN32_ERROR ERROR_PRINTQ_FULL;
    public static WIN32_ERROR ERROR_NO_SPOOL_SPACE;
    public static WIN32_ERROR ERROR_PRINT_CANCELLED;
    public static WIN32_ERROR ERROR_NETNAME_DELETED;
    public static WIN32_ERROR ERROR_NETWORK_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_BAD_DEV_TYPE;
    public static WIN32_ERROR ERROR_BAD_NET_NAME;
    public static WIN32_ERROR ERROR_TOO_MANY_NAMES;
    public static WIN32_ERROR ERROR_TOO_MANY_SESS;
    public static WIN32_ERROR ERROR_SHARING_PAUSED;
    public static WIN32_ERROR ERROR_REQ_NOT_ACCEP;
    public static WIN32_ERROR ERROR_REDIR_PAUSED;
    public static WIN32_ERROR ERROR_FILE_EXISTS;
    public static WIN32_ERROR ERROR_CANNOT_MAKE;
    public static WIN32_ERROR ERROR_FAIL_I24;
    public static WIN32_ERROR ERROR_OUT_OF_STRUCTURES;
    public static WIN32_ERROR ERROR_ALREADY_ASSIGNED;
    public static WIN32_ERROR ERROR_INVALID_PASSWORD;
    public static WIN32_ERROR ERROR_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_NET_WRITE_FAULT;
    public static WIN32_ERROR ERROR_NO_PROC_SLOTS;
    public static WIN32_ERROR ERROR_TOO_MANY_SEMAPHORES;
    public static WIN32_ERROR ERROR_EXCL_SEM_ALREADY_OWNED;
    public static WIN32_ERROR ERROR_SEM_IS_SET;
    public static WIN32_ERROR ERROR_TOO_MANY_SEM_REQUESTS;
    public static WIN32_ERROR ERROR_INVALID_AT_INTERRUPT_TIME;
    public static WIN32_ERROR ERROR_SEM_OWNER_DIED;
    public static WIN32_ERROR ERROR_SEM_USER_LIMIT;
    public static WIN32_ERROR ERROR_DISK_CHANGE;
    public static WIN32_ERROR ERROR_DRIVE_LOCKED;
    public static WIN32_ERROR ERROR_BROKEN_PIPE;
    public static WIN32_ERROR ERROR_OPEN_FAILED;
    public static WIN32_ERROR ERROR_BUFFER_OVERFLOW;
    public static WIN32_ERROR ERROR_DISK_FULL;
    public static WIN32_ERROR ERROR_NO_MORE_SEARCH_HANDLES;
    public static WIN32_ERROR ERROR_INVALID_TARGET_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_CATEGORY;
    public static WIN32_ERROR ERROR_INVALID_VERIFY_SWITCH;
    public static WIN32_ERROR ERROR_BAD_DRIVER_LEVEL;
    public static WIN32_ERROR ERROR_CALL_NOT_IMPLEMENTED;
    public static WIN32_ERROR ERROR_SEM_TIMEOUT;
    public static WIN32_ERROR ERROR_INSUFFICIENT_BUFFER;
    public static WIN32_ERROR ERROR_INVALID_NAME;
    public static WIN32_ERROR ERROR_INVALID_LEVEL;
    public static WIN32_ERROR ERROR_NO_VOLUME_LABEL;
    public static WIN32_ERROR ERROR_MOD_NOT_FOUND;
    public static WIN32_ERROR ERROR_PROC_NOT_FOUND;
    public static WIN32_ERROR ERROR_WAIT_NO_CHILDREN;
    public static WIN32_ERROR ERROR_CHILD_NOT_COMPLETE;
    public static WIN32_ERROR ERROR_DIRECT_ACCESS_HANDLE;
    public static WIN32_ERROR ERROR_NEGATIVE_SEEK;
    public static WIN32_ERROR ERROR_SEEK_ON_DEVICE;
    public static WIN32_ERROR ERROR_IS_JOIN_TARGET;
    public static WIN32_ERROR ERROR_IS_JOINED;
    public static WIN32_ERROR ERROR_IS_SUBSTED;
    public static WIN32_ERROR ERROR_NOT_JOINED;
    public static WIN32_ERROR ERROR_NOT_SUBSTED;
    public static WIN32_ERROR ERROR_JOIN_TO_JOIN;
    public static WIN32_ERROR ERROR_SUBST_TO_SUBST;
    public static WIN32_ERROR ERROR_JOIN_TO_SUBST;
    public static WIN32_ERROR ERROR_SUBST_TO_JOIN;
    public static WIN32_ERROR ERROR_BUSY_DRIVE;
    public static WIN32_ERROR ERROR_SAME_DRIVE;
    public static WIN32_ERROR ERROR_DIR_NOT_ROOT;
    public static WIN32_ERROR ERROR_DIR_NOT_EMPTY;
    public static WIN32_ERROR ERROR_IS_SUBST_PATH;
    public static WIN32_ERROR ERROR_IS_JOIN_PATH;
    public static WIN32_ERROR ERROR_PATH_BUSY;
    public static WIN32_ERROR ERROR_IS_SUBST_TARGET;
    public static WIN32_ERROR ERROR_SYSTEM_TRACE;
    public static WIN32_ERROR ERROR_INVALID_EVENT_COUNT;
    public static WIN32_ERROR ERROR_TOO_MANY_MUXWAITERS;
    public static WIN32_ERROR ERROR_INVALID_LIST_FORMAT;
    public static WIN32_ERROR ERROR_LABEL_TOO_LONG;
    public static WIN32_ERROR ERROR_TOO_MANY_TCBS;
    public static WIN32_ERROR ERROR_SIGNAL_REFUSED;
    public static WIN32_ERROR ERROR_DISCARDED;
    public static WIN32_ERROR ERROR_NOT_LOCKED;
    public static WIN32_ERROR ERROR_BAD_THREADID_ADDR;
    public static WIN32_ERROR ERROR_BAD_ARGUMENTS;
    public static WIN32_ERROR ERROR_BAD_PATHNAME;
    public static WIN32_ERROR ERROR_SIGNAL_PENDING;
    public static WIN32_ERROR ERROR_MAX_THRDS_REACHED;
    public static WIN32_ERROR ERROR_LOCK_FAILED;
    public static WIN32_ERROR ERROR_BUSY;
    public static WIN32_ERROR ERROR_DEVICE_SUPPORT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CANCEL_VIOLATION;
    public static WIN32_ERROR ERROR_ATOMIC_LOCKS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_INVALID_SEGMENT_NUMBER;
    public static WIN32_ERROR ERROR_INVALID_ORDINAL;
    public static WIN32_ERROR ERROR_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_INVALID_FLAG_NUMBER;
    public static WIN32_ERROR ERROR_SEM_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_STARTING_CODESEG;
    public static WIN32_ERROR ERROR_INVALID_STACKSEG;
    public static WIN32_ERROR ERROR_INVALID_MODULETYPE;
    public static WIN32_ERROR ERROR_INVALID_EXE_SIGNATURE;
    public static WIN32_ERROR ERROR_EXE_MARKED_INVALID;
    public static WIN32_ERROR ERROR_BAD_EXE_FORMAT;
    public static WIN32_ERROR ERROR_ITERATED_DATA_EXCEEDS_64k;
    public static WIN32_ERROR ERROR_INVALID_MINALLOCSIZE;
    public static WIN32_ERROR ERROR_DYNLINK_FROM_INVALID_RING;
    public static WIN32_ERROR ERROR_IOPL_NOT_ENABLED;
    public static WIN32_ERROR ERROR_INVALID_SEGDPL;
    public static WIN32_ERROR ERROR_AUTODATASEG_EXCEEDS_64k;
    public static WIN32_ERROR ERROR_RING2SEG_MUST_BE_MOVABLE;
    public static WIN32_ERROR ERROR_RELOC_CHAIN_XEEDS_SEGLIM;
    public static WIN32_ERROR ERROR_INFLOOP_IN_RELOC_CHAIN;
    public static WIN32_ERROR ERROR_ENVVAR_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_SIGNAL_SENT;
    public static WIN32_ERROR ERROR_FILENAME_EXCED_RANGE;
    public static WIN32_ERROR ERROR_RING2_STACK_IN_USE;
    public static WIN32_ERROR ERROR_META_EXPANSION_TOO_LONG;
    public static WIN32_ERROR ERROR_INVALID_SIGNAL_NUMBER;
    public static WIN32_ERROR ERROR_THREAD_1_INACTIVE;
    public static WIN32_ERROR ERROR_LOCKED;
    public static WIN32_ERROR ERROR_TOO_MANY_MODULES;
    public static WIN32_ERROR ERROR_NESTING_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_EXE_MACHINE_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY;
    public static WIN32_ERROR ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY;
    public static WIN32_ERROR ERROR_FILE_CHECKED_OUT;
    public static WIN32_ERROR ERROR_CHECKOUT_REQUIRED;
    public static WIN32_ERROR ERROR_BAD_FILE_TYPE;
    public static WIN32_ERROR ERROR_FILE_TOO_LARGE;
    public static WIN32_ERROR ERROR_FORMS_AUTH_REQUIRED;
    public static WIN32_ERROR ERROR_VIRUS_INFECTED;
    public static WIN32_ERROR ERROR_VIRUS_DELETED;
    public static WIN32_ERROR ERROR_PIPE_LOCAL;
    public static WIN32_ERROR ERROR_BAD_PIPE;
    public static WIN32_ERROR ERROR_PIPE_BUSY;
    public static WIN32_ERROR ERROR_NO_DATA;
    public static WIN32_ERROR ERROR_PIPE_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_MORE_DATA;
    public static WIN32_ERROR ERROR_NO_WORK_DONE;
    public static WIN32_ERROR ERROR_VC_DISCONNECTED;
    public static WIN32_ERROR ERROR_INVALID_EA_NAME;
    public static WIN32_ERROR ERROR_EA_LIST_INCONSISTENT;
    public static WIN32_ERROR ERROR_NO_MORE_ITEMS;
    public static WIN32_ERROR ERROR_CANNOT_COPY;
    public static WIN32_ERROR ERROR_DIRECTORY;
    public static WIN32_ERROR ERROR_EAS_DIDNT_FIT;
    public static WIN32_ERROR ERROR_EA_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_EA_TABLE_FULL;
    public static WIN32_ERROR ERROR_INVALID_EA_HANDLE;
    public static WIN32_ERROR ERROR_EAS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_OWNER;
    public static WIN32_ERROR ERROR_TOO_MANY_POSTS;
    public static WIN32_ERROR ERROR_PARTIAL_COPY;
    public static WIN32_ERROR ERROR_OPLOCK_NOT_GRANTED;
    public static WIN32_ERROR ERROR_INVALID_OPLOCK_PROTOCOL;
    public static WIN32_ERROR ERROR_DISK_TOO_FRAGMENTED;
    public static WIN32_ERROR ERROR_DELETE_PENDING;
    public static WIN32_ERROR ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING;
    public static WIN32_ERROR ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME;
    public static WIN32_ERROR ERROR_SECURITY_STREAM_IS_INCONSISTENT;
    public static WIN32_ERROR ERROR_INVALID_LOCK_RANGE;
    public static WIN32_ERROR ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT;
    public static WIN32_ERROR ERROR_NOTIFICATION_GUID_ALREADY_DEFINED;
    public static WIN32_ERROR ERROR_INVALID_EXCEPTION_HANDLER;
    public static WIN32_ERROR ERROR_DUPLICATE_PRIVILEGES;
    public static WIN32_ERROR ERROR_NO_RANGES_PROCESSED;
    public static WIN32_ERROR ERROR_NOT_ALLOWED_ON_SYSTEM_FILE;
    public static WIN32_ERROR ERROR_DISK_RESOURCES_EXHAUSTED;
    public static WIN32_ERROR ERROR_INVALID_TOKEN;
    public static WIN32_ERROR ERROR_DEVICE_FEATURE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_MR_MID_NOT_FOUND;
    public static WIN32_ERROR ERROR_SCOPE_NOT_FOUND;
    public static WIN32_ERROR ERROR_UNDEFINED_SCOPE;
    public static WIN32_ERROR ERROR_INVALID_CAP;
    public static WIN32_ERROR ERROR_DEVICE_UNREACHABLE;
    public static WIN32_ERROR ERROR_DEVICE_NO_RESOURCES;
    public static WIN32_ERROR ERROR_DATA_CHECKSUM_ERROR;
    public static WIN32_ERROR ERROR_INTERMIXED_KERNEL_EA_OPERATION;
    public static WIN32_ERROR ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFSET_ALIGNMENT_VIOLATION;
    public static WIN32_ERROR ERROR_INVALID_FIELD_IN_PARAMETER_LIST;
    public static WIN32_ERROR ERROR_OPERATION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_BAD_DEVICE_PATH;
    public static WIN32_ERROR ERROR_TOO_MANY_DESCRIPTORS;
    public static WIN32_ERROR ERROR_SCRUB_DATA_DISABLED;
    public static WIN32_ERROR ERROR_NOT_REDUNDANT_STORAGE;
    public static WIN32_ERROR ERROR_RESIDENT_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_COMPRESSED_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DIRECTORY_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_READ_FROM_COPY;
    public static WIN32_ERROR ERROR_FT_WRITE_FAILURE;
    public static WIN32_ERROR ERROR_FT_DI_SCAN_REQUIRED;
    public static WIN32_ERROR ERROR_INVALID_KERNEL_INFO_VERSION;
    public static WIN32_ERROR ERROR_INVALID_PEP_INFO_VERSION;
    public static WIN32_ERROR ERROR_OBJECT_NOT_EXTERNALLY_BACKED;
    public static WIN32_ERROR ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN;
    public static WIN32_ERROR ERROR_COMPRESSION_NOT_BENEFICIAL;
    public static WIN32_ERROR ERROR_STORAGE_TOPOLOGY_ID_MISMATCH;
    public static WIN32_ERROR ERROR_BLOCKED_BY_PARENTAL_CONTROLS;
    public static WIN32_ERROR ERROR_BLOCK_TOO_MANY_REFERENCES;
    public static WIN32_ERROR ERROR_MARKED_TO_DISALLOW_WRITES;
    public static WIN32_ERROR ERROR_ENCLAVE_FAILURE;
    public static WIN32_ERROR ERROR_FAIL_NOACTION_REBOOT;
    public static WIN32_ERROR ERROR_FAIL_SHUTDOWN;
    public static WIN32_ERROR ERROR_FAIL_RESTART;
    public static WIN32_ERROR ERROR_MAX_SESSIONS_REACHED;
    public static WIN32_ERROR ERROR_NETWORK_ACCESS_DENIED_EDP;
    public static WIN32_ERROR ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL;
    public static WIN32_ERROR ERROR_EDP_POLICY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_DEVICE_IN_MAINTENANCE;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_ON_DAX;
    public static WIN32_ERROR ERROR_DAX_MAPPING_EXISTS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING;
    public static WIN32_ERROR ERROR_CLOUD_FILE_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_METADATA_TOO_LARGE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH;
    public static WIN32_ERROR ERROR_CHILD_PROCESS_BLOCKED;
    public static WIN32_ERROR ERROR_STORAGE_LOST_DATA_PERSISTENCE;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN;
    public static WIN32_ERROR ERROR_GDI_HANDLE_LEAK;
    public static WIN32_ERROR ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_A_CLOUD_FILE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NOT_IN_SYNC;
    public static WIN32_ERROR ERROR_CLOUD_FILE_ALREADY_CONNECTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_INVALID_REQUEST;
    public static WIN32_ERROR ERROR_CLOUD_FILE_READ_ONLY_VOLUME;
    public static WIN32_ERROR ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY;
    public static WIN32_ERROR ERROR_CLOUD_FILE_VALIDATION_FAILED;
    public static WIN32_ERROR ERROR_SMB1_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION;
    public static WIN32_ERROR ERROR_CLOUD_FILE_AUTHENTICATION_FAILED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_UNSUCCESSFUL;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_IN_USE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PINNED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_REQUEST_ABORTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_CORRUPT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_REQUEST_CANCELED;
    public static WIN32_ERROR ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_THREAD_MODE_ALREADY_BACKGROUND;
    public static WIN32_ERROR ERROR_THREAD_MODE_NOT_BACKGROUND;
    public static WIN32_ERROR ERROR_PROCESS_MODE_ALREADY_BACKGROUND;
    public static WIN32_ERROR ERROR_PROCESS_MODE_NOT_BACKGROUND;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROVIDER_TERMINATED;
    public static WIN32_ERROR ERROR_NOT_A_CLOUD_SYNC_ROOT;
    public static WIN32_ERROR ERROR_FILE_PROTECTED_UNDER_DPL;
    public static WIN32_ERROR ERROR_VOLUME_NOT_CLUSTER_ALIGNED;
    public static WIN32_ERROR ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND;
    public static WIN32_ERROR ERROR_APPX_FILE_NOT_ENCRYPTED;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER;
    public static WIN32_ERROR ERROR_LINUX_SUBSYSTEM_NOT_PRESENT;
    public static WIN32_ERROR ERROR_FT_READ_FAILURE;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_ID_INVALID;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_NOT_EMPTY;
    public static WIN32_ERROR ERROR_NOT_A_DAX_VOLUME;
    public static WIN32_ERROR ERROR_NOT_DAX_MAPPABLE;
    public static WIN32_ERROR ERROR_TIME_SENSITIVE_THREAD;
    public static WIN32_ERROR ERROR_DPL_NOT_SUPPORTED_FOR_USER;
    public static WIN32_ERROR ERROR_CASE_DIFFERING_NAMES_IN_DIR;
    public static WIN32_ERROR ERROR_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_REQUEST_TIMEOUT;
    public static WIN32_ERROR ERROR_NO_TASK_QUEUE;
    public static WIN32_ERROR ERROR_SRC_SRV_DLL_LOAD_FAILED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_BTT;
    public static WIN32_ERROR ERROR_ENCRYPTION_DISABLED;
    public static WIN32_ERROR ERROR_ENCRYPTING_METADATA_DISALLOWED;
    public static WIN32_ERROR ERROR_CANT_CLEAR_ENCRYPTION_FLAG;
    public static WIN32_ERROR ERROR_NO_SUCH_DEVICE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED;
    public static WIN32_ERROR ERROR_FILE_SNAP_IN_PROGRESS;
    public static WIN32_ERROR ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_FILE_SNAP_IO_NOT_COORDINATED;
    public static WIN32_ERROR ERROR_FILE_SNAP_UNEXPECTED_ERROR;
    public static WIN32_ERROR ERROR_FILE_SNAP_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_UNSATISFIED_DEPENDENCIES;
    public static WIN32_ERROR ERROR_CASE_SENSITIVE_PATH;
    public static WIN32_ERROR ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR;
    public static WIN32_ERROR ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED;
    public static WIN32_ERROR ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION;
    public static WIN32_ERROR ERROR_DLP_POLICY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_SECURITY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_UNTRUSTED_MOUNT_POINT;
    public static WIN32_ERROR ERROR_DLP_POLICY_SILENTLY_FAIL;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NOT_DEVUNLOCKED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_CHANGE_TYPE;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NOT_PROVISIONED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NO_POLICY;
    public static WIN32_ERROR ERROR_CAPAUTHZ_DB_CORRUPTED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_PARSE_ERROR;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH;
    public static WIN32_ERROR ERROR_CIMFS_IMAGE_CORRUPT;
    public static WIN32_ERROR ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_STORAGE_STACK_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES;
    public static WIN32_ERROR ERROR_INDEX_OUT_OF_BOUNDS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_US_MESSAGE_TIMEOUT;
    public static WIN32_ERROR ERROR_NOT_A_DEV_VOLUME;
    public static WIN32_ERROR ERROR_FS_GUID_MISMATCH;
    public static WIN32_ERROR ERROR_CANT_ATTACH_TO_DEV_VOLUME;
    public static WIN32_ERROR ERROR_INVALID_CONFIG_VALUE;
    public static WIN32_ERROR ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT;
    public static WIN32_ERROR ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT;
    public static WIN32_ERROR ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT;
    public static WIN32_ERROR ERROR_DEVICE_HARDWARE_ERROR;
    public static WIN32_ERROR ERROR_INVALID_ADDRESS;
    public static WIN32_ERROR ERROR_HAS_SYSTEM_CRITICAL_FILES;
    public static WIN32_ERROR ERROR_ENCRYPTED_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_SPARSE_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_PAGEFILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLUME_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_BYPASSIO;
    public static WIN32_ERROR ERROR_NO_BYPASSIO_DRIVER_SUPPORT;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_ENCRYPTION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_COMPRESSION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_REPLICATION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_AUDITING;
    public static WIN32_ERROR ERROR_USER_PROFILE_LOAD;
    public static WIN32_ERROR ERROR_SESSION_KEY_TOO_SHORT;
    public static WIN32_ERROR ERROR_ACCESS_DENIED_APPDATA;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_MONITORING;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_SNAPSHOT;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION;
    public static WIN32_ERROR ERROR_BYPASSIO_FLT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DEVICE_RESET_REQUIRED;
    public static WIN32_ERROR ERROR_VOLUME_WRITE_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_CACHED_HANDLE;
    public static WIN32_ERROR ERROR_FS_METADATA_INCONSISTENT;
    public static WIN32_ERROR ERROR_BLOCK_WEAK_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_BLOCK_SOURCE_WEAK_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_BLOCK_TARGET_WEAK_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_BLOCK_SHARED;
    public static WIN32_ERROR ERROR_VOLUME_UPGRADE_NOT_NEEDED;
    public static WIN32_ERROR ERROR_VOLUME_UPGRADE_PENDING;
    public static WIN32_ERROR ERROR_VOLUME_UPGRADE_DISABLED;
    public static WIN32_ERROR ERROR_VOLUME_UPGRADE_DISABLED_TILL_OS_DOWNGRADE_EXPIRED;
    public static WIN32_ERROR ERROR_ARITHMETIC_OVERFLOW;
    public static WIN32_ERROR ERROR_PIPE_CONNECTED;
    public static WIN32_ERROR ERROR_PIPE_LISTENING;
    public static WIN32_ERROR ERROR_VERIFIER_STOP;
    public static WIN32_ERROR ERROR_ABIOS_ERROR;
    public static WIN32_ERROR ERROR_WX86_WARNING;
    public static WIN32_ERROR ERROR_WX86_ERROR;
    public static WIN32_ERROR ERROR_TIMER_NOT_CANCELED;
    public static WIN32_ERROR ERROR_UNWIND;
    public static WIN32_ERROR ERROR_BAD_STACK;
    public static WIN32_ERROR ERROR_INVALID_UNWIND_TARGET;
    public static WIN32_ERROR ERROR_INVALID_PORT_ATTRIBUTES;
    public static WIN32_ERROR ERROR_PORT_MESSAGE_TOO_LONG;
    public static WIN32_ERROR ERROR_INVALID_QUOTA_LOWER;
    public static WIN32_ERROR ERROR_DEVICE_ALREADY_ATTACHED;
    public static WIN32_ERROR ERROR_INSTRUCTION_MISALIGNMENT;
    public static WIN32_ERROR ERROR_PROFILING_NOT_STARTED;
    public static WIN32_ERROR ERROR_PROFILING_NOT_STOPPED;
    public static WIN32_ERROR ERROR_COULD_NOT_INTERPRET;
    public static WIN32_ERROR ERROR_PROFILING_AT_LIMIT;
    public static WIN32_ERROR ERROR_CANT_WAIT;
    public static WIN32_ERROR ERROR_CANT_TERMINATE_SELF;
    public static WIN32_ERROR ERROR_UNEXPECTED_MM_CREATE_ERR;
    public static WIN32_ERROR ERROR_UNEXPECTED_MM_MAP_ERROR;
    public static WIN32_ERROR ERROR_UNEXPECTED_MM_EXTEND_ERR;
    public static WIN32_ERROR ERROR_BAD_FUNCTION_TABLE;
    public static WIN32_ERROR ERROR_NO_GUID_TRANSLATION;
    public static WIN32_ERROR ERROR_INVALID_LDT_SIZE;
    public static WIN32_ERROR ERROR_INVALID_LDT_OFFSET;
    public static WIN32_ERROR ERROR_INVALID_LDT_DESCRIPTOR;
    public static WIN32_ERROR ERROR_TOO_MANY_THREADS;
    public static WIN32_ERROR ERROR_THREAD_NOT_IN_PROCESS;
    public static WIN32_ERROR ERROR_PAGEFILE_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_LOGON_SERVER_CONFLICT;
    public static WIN32_ERROR ERROR_SYNCHRONIZATION_REQUIRED;
    public static WIN32_ERROR ERROR_NET_OPEN_FAILED;
    public static WIN32_ERROR ERROR_IO_PRIVILEGE_FAILED;
    public static WIN32_ERROR ERROR_CONTROL_C_EXIT;
    public static WIN32_ERROR ERROR_MISSING_SYSTEMFILE;
    public static WIN32_ERROR ERROR_UNHANDLED_EXCEPTION;
    public static WIN32_ERROR ERROR_APP_INIT_FAILURE;
    public static WIN32_ERROR ERROR_PAGEFILE_CREATE_FAILED;
    public static WIN32_ERROR ERROR_INVALID_IMAGE_HASH;
    public static WIN32_ERROR ERROR_NO_PAGEFILE;
    public static WIN32_ERROR ERROR_ILLEGAL_FLOAT_CONTEXT;
    public static WIN32_ERROR ERROR_NO_EVENT_PAIR;
    public static WIN32_ERROR ERROR_DOMAIN_CTRLR_CONFIG_ERROR;
    public static WIN32_ERROR ERROR_ILLEGAL_CHARACTER;
    public static WIN32_ERROR ERROR_UNDEFINED_CHARACTER;
    public static WIN32_ERROR ERROR_FLOPPY_VOLUME;
    public static WIN32_ERROR ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT;
    public static WIN32_ERROR ERROR_BACKUP_CONTROLLER;
    public static WIN32_ERROR ERROR_MUTANT_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_FS_DRIVER_REQUIRED;
    public static WIN32_ERROR ERROR_CANNOT_LOAD_REGISTRY_FILE;
    public static WIN32_ERROR ERROR_DEBUG_ATTACH_FAILED;
    public static WIN32_ERROR ERROR_SYSTEM_PROCESS_TERMINATED;
    public static WIN32_ERROR ERROR_DATA_NOT_ACCEPTED;
    public static WIN32_ERROR ERROR_VDM_HARD_ERROR;
    public static WIN32_ERROR ERROR_DRIVER_CANCEL_TIMEOUT;
    public static WIN32_ERROR ERROR_REPLY_MESSAGE_MISMATCH;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA;
    public static WIN32_ERROR ERROR_CLIENT_SERVER_PARAMETERS_INVALID;
    public static WIN32_ERROR ERROR_NOT_TINY_STREAM;
    public static WIN32_ERROR ERROR_STACK_OVERFLOW_READ;
    public static WIN32_ERROR ERROR_CONVERT_TO_LARGE;
    public static WIN32_ERROR ERROR_FOUND_OUT_OF_SCOPE;
    public static WIN32_ERROR ERROR_ALLOCATE_BUCKET;
    public static WIN32_ERROR ERROR_MARSHALL_OVERFLOW;
    public static WIN32_ERROR ERROR_INVALID_VARIANT;
    public static WIN32_ERROR ERROR_BAD_COMPRESSION_BUFFER;
    public static WIN32_ERROR ERROR_AUDIT_FAILED;
    public static WIN32_ERROR ERROR_TIMER_RESOLUTION_NOT_SET;
    public static WIN32_ERROR ERROR_INSUFFICIENT_LOGON_INFO;
    public static WIN32_ERROR ERROR_BAD_DLL_ENTRYPOINT;
    public static WIN32_ERROR ERROR_BAD_SERVICE_ENTRYPOINT;
    public static WIN32_ERROR ERROR_IP_ADDRESS_CONFLICT1;
    public static WIN32_ERROR ERROR_IP_ADDRESS_CONFLICT2;
    public static WIN32_ERROR ERROR_REGISTRY_QUOTA_LIMIT;
    public static WIN32_ERROR ERROR_NO_CALLBACK_ACTIVE;
    public static WIN32_ERROR ERROR_PWD_TOO_SHORT;
    public static WIN32_ERROR ERROR_PWD_TOO_RECENT;
    public static WIN32_ERROR ERROR_PWD_HISTORY_CONFLICT;
    public static WIN32_ERROR ERROR_UNSUPPORTED_COMPRESSION;
    public static WIN32_ERROR ERROR_INVALID_HW_PROFILE;
    public static WIN32_ERROR ERROR_INVALID_PLUGPLAY_DEVICE_PATH;
    public static WIN32_ERROR ERROR_QUOTA_LIST_INCONSISTENT;
    public static WIN32_ERROR ERROR_EVALUATION_EXPIRATION;
    public static WIN32_ERROR ERROR_ILLEGAL_DLL_RELOCATION;
    public static WIN32_ERROR ERROR_DLL_INIT_FAILED_LOGOFF;
    public static WIN32_ERROR ERROR_VALIDATE_CONTINUE;
    public static WIN32_ERROR ERROR_NO_MORE_MATCHES;
    public static WIN32_ERROR ERROR_RANGE_LIST_CONFLICT;
    public static WIN32_ERROR ERROR_SERVER_SID_MISMATCH;
    public static WIN32_ERROR ERROR_CANT_ENABLE_DENY_ONLY;
    public static WIN32_ERROR ERROR_FLOAT_MULTIPLE_FAULTS;
    public static WIN32_ERROR ERROR_FLOAT_MULTIPLE_TRAPS;
    public static WIN32_ERROR ERROR_NOINTERFACE;
    public static WIN32_ERROR ERROR_DRIVER_FAILED_SLEEP;
    public static WIN32_ERROR ERROR_CORRUPT_SYSTEM_FILE;
    public static WIN32_ERROR ERROR_COMMITMENT_MINIMUM;
    public static WIN32_ERROR ERROR_PNP_RESTART_ENUMERATION;
    public static WIN32_ERROR ERROR_SYSTEM_IMAGE_BAD_SIGNATURE;
    public static WIN32_ERROR ERROR_PNP_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_INSUFFICIENT_POWER;
    public static WIN32_ERROR ERROR_MULTIPLE_FAULT_VIOLATION;
    public static WIN32_ERROR ERROR_SYSTEM_SHUTDOWN;
    public static WIN32_ERROR ERROR_PORT_NOT_SET;
    public static WIN32_ERROR ERROR_DS_VERSION_CHECK_FAILURE;
    public static WIN32_ERROR ERROR_RANGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NOT_SAFE_MODE_DRIVER;
    public static WIN32_ERROR ERROR_FAILED_DRIVER_ENTRY;
    public static WIN32_ERROR ERROR_DEVICE_ENUMERATION_ERROR;
    public static WIN32_ERROR ERROR_MOUNT_POINT_NOT_RESOLVED;
    public static WIN32_ERROR ERROR_INVALID_DEVICE_OBJECT_PARAMETER;
    public static WIN32_ERROR ERROR_MCA_OCCURED;
    public static WIN32_ERROR ERROR_DRIVER_DATABASE_ERROR;
    public static WIN32_ERROR ERROR_SYSTEM_HIVE_TOO_LARGE;
    public static WIN32_ERROR ERROR_DRIVER_FAILED_PRIOR_UNLOAD;
    public static WIN32_ERROR ERROR_VOLSNAP_PREPARE_HIBERNATE;
    public static WIN32_ERROR ERROR_HIBERNATION_FAILURE;
    public static WIN32_ERROR ERROR_PWD_TOO_LONG;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_LIMITATION;
    public static WIN32_ERROR ERROR_ASSERTION_FAILURE;
    public static WIN32_ERROR ERROR_ACPI_ERROR;
    public static WIN32_ERROR ERROR_WOW_ASSERTION;
    public static WIN32_ERROR ERROR_PNP_BAD_MPS_TABLE;
    public static WIN32_ERROR ERROR_PNP_TRANSLATION_FAILED;
    public static WIN32_ERROR ERROR_PNP_IRQ_TRANSLATION_FAILED;
    public static WIN32_ERROR ERROR_PNP_INVALID_ID;
    public static WIN32_ERROR ERROR_WAKE_SYSTEM_DEBUGGER;
    public static WIN32_ERROR ERROR_HANDLES_CLOSED;
    public static WIN32_ERROR ERROR_EXTRANEOUS_INFORMATION;
    public static WIN32_ERROR ERROR_RXACT_COMMIT_NECESSARY;
    public static WIN32_ERROR ERROR_MEDIA_CHECK;
    public static WIN32_ERROR ERROR_GUID_SUBSTITUTION_MADE;
    public static WIN32_ERROR ERROR_STOPPED_ON_SYMLINK;
    public static WIN32_ERROR ERROR_LONGJUMP;
    public static WIN32_ERROR ERROR_PLUGPLAY_QUERY_VETOED;
    public static WIN32_ERROR ERROR_UNWIND_CONSOLIDATE;
    public static WIN32_ERROR ERROR_REGISTRY_HIVE_RECOVERED;
    public static WIN32_ERROR ERROR_DLL_MIGHT_BE_INSECURE;
    public static WIN32_ERROR ERROR_DLL_MIGHT_BE_INCOMPATIBLE;
    public static WIN32_ERROR ERROR_DBG_EXCEPTION_NOT_HANDLED;
    public static WIN32_ERROR ERROR_DBG_REPLY_LATER;
    public static WIN32_ERROR ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE;
    public static WIN32_ERROR ERROR_DBG_TERMINATE_THREAD;
    public static WIN32_ERROR ERROR_DBG_TERMINATE_PROCESS;
    public static WIN32_ERROR ERROR_DBG_CONTROL_C;
    public static WIN32_ERROR ERROR_DBG_PRINTEXCEPTION_C;
    public static WIN32_ERROR ERROR_DBG_RIPEXCEPTION;
    public static WIN32_ERROR ERROR_DBG_CONTROL_BREAK;
    public static WIN32_ERROR ERROR_DBG_COMMAND_EXCEPTION;
    public static WIN32_ERROR ERROR_OBJECT_NAME_EXISTS;
    public static WIN32_ERROR ERROR_THREAD_WAS_SUSPENDED;
    public static WIN32_ERROR ERROR_IMAGE_NOT_AT_BASE;
    public static WIN32_ERROR ERROR_RXACT_STATE_CREATED;
    public static WIN32_ERROR ERROR_SEGMENT_NOTIFICATION;
    public static WIN32_ERROR ERROR_BAD_CURRENT_DIRECTORY;
    public static WIN32_ERROR ERROR_FT_READ_RECOVERY_FROM_BACKUP;
    public static WIN32_ERROR ERROR_FT_WRITE_RECOVERY;
    public static WIN32_ERROR ERROR_IMAGE_MACHINE_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_RECEIVE_PARTIAL;
    public static WIN32_ERROR ERROR_RECEIVE_EXPEDITED;
    public static WIN32_ERROR ERROR_RECEIVE_PARTIAL_EXPEDITED;
    public static WIN32_ERROR ERROR_EVENT_DONE;
    public static WIN32_ERROR ERROR_EVENT_PENDING;
    public static WIN32_ERROR ERROR_CHECKING_FILE_SYSTEM;
    public static WIN32_ERROR ERROR_FATAL_APP_EXIT;
    public static WIN32_ERROR ERROR_PREDEFINED_HANDLE;
    public static WIN32_ERROR ERROR_WAS_UNLOCKED;
    public static WIN32_ERROR ERROR_SERVICE_NOTIFICATION;
    public static WIN32_ERROR ERROR_WAS_LOCKED;
    public static WIN32_ERROR ERROR_LOG_HARD_ERROR;
    public static WIN32_ERROR ERROR_ALREADY_WIN32;
    public static WIN32_ERROR ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE;
    public static WIN32_ERROR ERROR_NO_YIELD_PERFORMED;
    public static WIN32_ERROR ERROR_TIMER_RESUME_IGNORED;
    public static WIN32_ERROR ERROR_ARBITRATION_UNHANDLED;
    public static WIN32_ERROR ERROR_CARDBUS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_MP_PROCESSOR_MISMATCH;
    public static WIN32_ERROR ERROR_HIBERNATED;
    public static WIN32_ERROR ERROR_RESUME_HIBERNATION;
    public static WIN32_ERROR ERROR_FIRMWARE_UPDATED;
    public static WIN32_ERROR ERROR_DRIVERS_LEAKING_LOCKED_PAGES;
    public static WIN32_ERROR ERROR_WAKE_SYSTEM;
    public static WIN32_ERROR ERROR_WAIT_1;
    public static WIN32_ERROR ERROR_WAIT_2;
    public static WIN32_ERROR ERROR_WAIT_3;
    public static WIN32_ERROR ERROR_WAIT_63;
    public static WIN32_ERROR ERROR_ABANDONED_WAIT_0;
    public static WIN32_ERROR ERROR_ABANDONED_WAIT_63;
    public static WIN32_ERROR ERROR_USER_APC;
    public static WIN32_ERROR ERROR_KERNEL_APC;
    public static WIN32_ERROR ERROR_ALERTED;
    public static WIN32_ERROR ERROR_ELEVATION_REQUIRED;
    public static WIN32_ERROR ERROR_REPARSE;
    public static WIN32_ERROR ERROR_OPLOCK_BREAK_IN_PROGRESS;
    public static WIN32_ERROR ERROR_VOLUME_MOUNTED;
    public static WIN32_ERROR ERROR_RXACT_COMMITTED;
    public static WIN32_ERROR ERROR_NOTIFY_CLEANUP;
    public static WIN32_ERROR ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED;
    public static WIN32_ERROR ERROR_PAGE_FAULT_TRANSITION;
    public static WIN32_ERROR ERROR_PAGE_FAULT_DEMAND_ZERO;
    public static WIN32_ERROR ERROR_PAGE_FAULT_COPY_ON_WRITE;
    public static WIN32_ERROR ERROR_PAGE_FAULT_GUARD_PAGE;
    public static WIN32_ERROR ERROR_PAGE_FAULT_PAGING_FILE;
    public static WIN32_ERROR ERROR_CACHE_PAGE_LOCKED;
    public static WIN32_ERROR ERROR_CRASH_DUMP;
    public static WIN32_ERROR ERROR_BUFFER_ALL_ZEROS;
    public static WIN32_ERROR ERROR_REPARSE_OBJECT;
    public static WIN32_ERROR ERROR_RESOURCE_REQUIREMENTS_CHANGED;
    public static WIN32_ERROR ERROR_TRANSLATION_COMPLETE;
    public static WIN32_ERROR ERROR_NOTHING_TO_TERMINATE;
    public static WIN32_ERROR ERROR_PROCESS_NOT_IN_JOB;
    public static WIN32_ERROR ERROR_PROCESS_IN_JOB;
    public static WIN32_ERROR ERROR_VOLSNAP_HIBERNATE_READY;
    public static WIN32_ERROR ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY;
    public static WIN32_ERROR ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED;
    public static WIN32_ERROR ERROR_INTERRUPT_STILL_CONNECTED;
    public static WIN32_ERROR ERROR_WAIT_FOR_OPLOCK;
    public static WIN32_ERROR ERROR_DBG_EXCEPTION_HANDLED;
    public static WIN32_ERROR ERROR_DBG_CONTINUE;
    public static WIN32_ERROR ERROR_CALLBACK_POP_STACK;
    public static WIN32_ERROR ERROR_COMPRESSION_DISABLED;
    public static WIN32_ERROR ERROR_CANTFETCHBACKWARDS;
    public static WIN32_ERROR ERROR_CANTSCROLLBACKWARDS;
    public static WIN32_ERROR ERROR_ROWSNOTRELEASED;
    public static WIN32_ERROR ERROR_BAD_ACCESSOR_FLAGS;
    public static WIN32_ERROR ERROR_ERRORS_ENCOUNTERED;
    public static WIN32_ERROR ERROR_NOT_CAPABLE;
    public static WIN32_ERROR ERROR_REQUEST_OUT_OF_SEQUENCE;
    public static WIN32_ERROR ERROR_VERSION_PARSE_ERROR;
    public static WIN32_ERROR ERROR_BADSTARTPOSITION;
    public static WIN32_ERROR ERROR_MEMORY_HARDWARE;
    public static WIN32_ERROR ERROR_DISK_REPAIR_DISABLED;
    public static WIN32_ERROR ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE;
    public static WIN32_ERROR ERROR_SYSTEM_POWERSTATE_TRANSITION;
    public static WIN32_ERROR ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION;
    public static WIN32_ERROR ERROR_MCA_EXCEPTION;
    public static WIN32_ERROR ERROR_ACCESS_AUDIT_BY_POLICY;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY;
    public static WIN32_ERROR ERROR_ABANDON_HIBERFILE;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR;
    public static WIN32_ERROR ERROR_BAD_MCFG_TABLE;
    public static WIN32_ERROR ERROR_DISK_REPAIR_REDIRECTED;
    public static WIN32_ERROR ERROR_DISK_REPAIR_UNSUCCESSFUL;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_OVERFULL;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_CORRUPTED;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_UNAVAILABLE;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_DELETED_FULL;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_CLEARED;
    public static WIN32_ERROR ERROR_ORPHAN_NAME_EXHAUSTED;
    public static WIN32_ERROR ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE;
    public static WIN32_ERROR ERROR_CANNOT_GRANT_REQUESTED_OPLOCK;
    public static WIN32_ERROR ERROR_CANNOT_BREAK_OPLOCK;
    public static WIN32_ERROR ERROR_OPLOCK_HANDLE_CLOSED;
    public static WIN32_ERROR ERROR_NO_ACE_CONDITION;
    public static WIN32_ERROR ERROR_INVALID_ACE_CONDITION;
    public static WIN32_ERROR ERROR_FILE_HANDLE_REVOKED;
    public static WIN32_ERROR ERROR_IMAGE_AT_DIFFERENT_BASE;
    public static WIN32_ERROR ERROR_ENCRYPTED_IO_NOT_POSSIBLE;
    public static WIN32_ERROR ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_QUOTA_ACTIVITY;
    public static WIN32_ERROR ERROR_HANDLE_REVOKED;
    public static WIN32_ERROR ERROR_CALLBACK_INVOKE_INLINE;
    public static WIN32_ERROR ERROR_CPU_SET_INVALID;
    public static WIN32_ERROR ERROR_ENCLAVE_NOT_TERMINATED;
    public static WIN32_ERROR ERROR_ENCLAVE_VIOLATION;
    public static WIN32_ERROR ERROR_SERVER_TRANSPORT_CONFLICT;
    public static WIN32_ERROR ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT;
    public static WIN32_ERROR ERROR_FT_READ_FROM_COPY_FAILURE;
    public static WIN32_ERROR ERROR_SECTION_DIRECT_MAP_ONLY;
    public static WIN32_ERROR ERROR_EA_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_OPERATION_ABORTED;
    public static WIN32_ERROR ERROR_IO_INCOMPLETE;
    public static WIN32_ERROR ERROR_IO_PENDING;
    public static WIN32_ERROR ERROR_NOACCESS;
    public static WIN32_ERROR ERROR_SWAPERROR;
    public static WIN32_ERROR ERROR_STACK_OVERFLOW;
    public static WIN32_ERROR ERROR_INVALID_MESSAGE;
    public static WIN32_ERROR ERROR_CAN_NOT_COMPLETE;
    public static WIN32_ERROR ERROR_INVALID_FLAGS;
    public static WIN32_ERROR ERROR_UNRECOGNIZED_VOLUME;
    public static WIN32_ERROR ERROR_FILE_INVALID;
    public static WIN32_ERROR ERROR_FULLSCREEN_MODE;
    public static WIN32_ERROR ERROR_NO_TOKEN;
    public static WIN32_ERROR ERROR_BADDB;
    public static WIN32_ERROR ERROR_BADKEY;
    public static WIN32_ERROR ERROR_CANTOPEN;
    public static WIN32_ERROR ERROR_CANTREAD;
    public static WIN32_ERROR ERROR_CANTWRITE;
    public static WIN32_ERROR ERROR_REGISTRY_RECOVERED;
    public static WIN32_ERROR ERROR_REGISTRY_CORRUPT;
    public static WIN32_ERROR ERROR_REGISTRY_IO_FAILED;
    public static WIN32_ERROR ERROR_NOT_REGISTRY_FILE;
    public static WIN32_ERROR ERROR_KEY_DELETED;
    public static WIN32_ERROR ERROR_NO_LOG_SPACE;
    public static WIN32_ERROR ERROR_KEY_HAS_CHILDREN;
    public static WIN32_ERROR ERROR_CHILD_MUST_BE_VOLATILE;
    public static WIN32_ERROR ERROR_NOTIFY_ENUM_DIR;
    public static WIN32_ERROR ERROR_DEPENDENT_SERVICES_RUNNING;
    public static WIN32_ERROR ERROR_INVALID_SERVICE_CONTROL;
    public static WIN32_ERROR ERROR_SERVICE_REQUEST_TIMEOUT;
    public static WIN32_ERROR ERROR_SERVICE_NO_THREAD;
    public static WIN32_ERROR ERROR_SERVICE_DATABASE_LOCKED;
    public static WIN32_ERROR ERROR_SERVICE_ALREADY_RUNNING;
    public static WIN32_ERROR ERROR_INVALID_SERVICE_ACCOUNT;
    public static WIN32_ERROR ERROR_SERVICE_DISABLED;
    public static WIN32_ERROR ERROR_CIRCULAR_DEPENDENCY;
    public static WIN32_ERROR ERROR_SERVICE_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_SERVICE_CANNOT_ACCEPT_CTRL;
    public static WIN32_ERROR ERROR_SERVICE_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_FAILED_SERVICE_CONTROLLER_CONNECT;
    public static WIN32_ERROR ERROR_EXCEPTION_IN_SERVICE;
    public static WIN32_ERROR ERROR_DATABASE_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_SERVICE_SPECIFIC_ERROR;
    public static WIN32_ERROR ERROR_PROCESS_ABORTED;
    public static WIN32_ERROR ERROR_SERVICE_DEPENDENCY_FAIL;
    public static WIN32_ERROR ERROR_SERVICE_LOGON_FAILED;
    public static WIN32_ERROR ERROR_SERVICE_START_HANG;
    public static WIN32_ERROR ERROR_INVALID_SERVICE_LOCK;
    public static WIN32_ERROR ERROR_SERVICE_MARKED_FOR_DELETE;
    public static WIN32_ERROR ERROR_SERVICE_EXISTS;
    public static WIN32_ERROR ERROR_ALREADY_RUNNING_LKG;
    public static WIN32_ERROR ERROR_SERVICE_DEPENDENCY_DELETED;
    public static WIN32_ERROR ERROR_BOOT_ALREADY_ACCEPTED;
    public static WIN32_ERROR ERROR_SERVICE_NEVER_STARTED;
    public static WIN32_ERROR ERROR_DUPLICATE_SERVICE_NAME;
    public static WIN32_ERROR ERROR_DIFFERENT_SERVICE_ACCOUNT;
    public static WIN32_ERROR ERROR_CANNOT_DETECT_DRIVER_FAILURE;
    public static WIN32_ERROR ERROR_CANNOT_DETECT_PROCESS_ABORT;
    public static WIN32_ERROR ERROR_NO_RECOVERY_PROGRAM;
    public static WIN32_ERROR ERROR_SERVICE_NOT_IN_EXE;
    public static WIN32_ERROR ERROR_NOT_SAFEBOOT_SERVICE;
    public static WIN32_ERROR ERROR_END_OF_MEDIA;
    public static WIN32_ERROR ERROR_FILEMARK_DETECTED;
    public static WIN32_ERROR ERROR_BEGINNING_OF_MEDIA;
    public static WIN32_ERROR ERROR_SETMARK_DETECTED;
    public static WIN32_ERROR ERROR_NO_DATA_DETECTED;
    public static WIN32_ERROR ERROR_PARTITION_FAILURE;
    public static WIN32_ERROR ERROR_INVALID_BLOCK_LENGTH;
    public static WIN32_ERROR ERROR_DEVICE_NOT_PARTITIONED;
    public static WIN32_ERROR ERROR_UNABLE_TO_LOCK_MEDIA;
    public static WIN32_ERROR ERROR_UNABLE_TO_UNLOAD_MEDIA;
    public static WIN32_ERROR ERROR_MEDIA_CHANGED;
    public static WIN32_ERROR ERROR_BUS_RESET;
    public static WIN32_ERROR ERROR_NO_MEDIA_IN_DRIVE;
    public static WIN32_ERROR ERROR_NO_UNICODE_TRANSLATION;
    public static WIN32_ERROR ERROR_DLL_INIT_FAILED;
    public static WIN32_ERROR ERROR_SHUTDOWN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NO_SHUTDOWN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_IO_DEVICE;
    public static WIN32_ERROR ERROR_SERIAL_NO_DEVICE;
    public static WIN32_ERROR ERROR_IRQ_BUSY;
    public static WIN32_ERROR ERROR_MORE_WRITES;
    public static WIN32_ERROR ERROR_COUNTER_TIMEOUT;
    public static WIN32_ERROR ERROR_FLOPPY_ID_MARK_NOT_FOUND;
    public static WIN32_ERROR ERROR_FLOPPY_WRONG_CYLINDER;
    public static WIN32_ERROR ERROR_FLOPPY_UNKNOWN_ERROR;
    public static WIN32_ERROR ERROR_FLOPPY_BAD_REGISTERS;
    public static WIN32_ERROR ERROR_DISK_RECALIBRATE_FAILED;
    public static WIN32_ERROR ERROR_DISK_OPERATION_FAILED;
    public static WIN32_ERROR ERROR_DISK_RESET_FAILED;
    public static WIN32_ERROR ERROR_EOM_OVERFLOW;
    public static WIN32_ERROR ERROR_NOT_ENOUGH_SERVER_MEMORY;
    public static WIN32_ERROR ERROR_POSSIBLE_DEADLOCK;
    public static WIN32_ERROR ERROR_MAPPED_ALIGNMENT;
    public static WIN32_ERROR ERROR_SET_POWER_STATE_VETOED;
    public static WIN32_ERROR ERROR_SET_POWER_STATE_FAILED;
    public static WIN32_ERROR ERROR_TOO_MANY_LINKS;
    public static WIN32_ERROR ERROR_OLD_WIN_VERSION;
    public static WIN32_ERROR ERROR_APP_WRONG_OS;
    public static WIN32_ERROR ERROR_SINGLE_INSTANCE_APP;
    public static WIN32_ERROR ERROR_RMODE_APP;
    public static WIN32_ERROR ERROR_INVALID_DLL;
    public static WIN32_ERROR ERROR_NO_ASSOCIATION;
    public static WIN32_ERROR ERROR_DDE_FAIL;
    public static WIN32_ERROR ERROR_DLL_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_MORE_USER_HANDLES;
    public static WIN32_ERROR ERROR_MESSAGE_SYNC_ONLY;
    public static WIN32_ERROR ERROR_SOURCE_ELEMENT_EMPTY;
    public static WIN32_ERROR ERROR_DESTINATION_ELEMENT_FULL;
    public static WIN32_ERROR ERROR_ILLEGAL_ELEMENT_ADDRESS;
    public static WIN32_ERROR ERROR_MAGAZINE_NOT_PRESENT;
    public static WIN32_ERROR ERROR_DEVICE_REINITIALIZATION_NEEDED;
    public static WIN32_ERROR ERROR_DEVICE_REQUIRES_CLEANING;
    public static WIN32_ERROR ERROR_DEVICE_DOOR_OPEN;
    public static WIN32_ERROR ERROR_DEVICE_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_MATCH;
    public static WIN32_ERROR ERROR_SET_NOT_FOUND;
    public static WIN32_ERROR ERROR_POINT_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_TRACKING_SERVICE;
    public static WIN32_ERROR ERROR_NO_VOLUME_ID;
    public static WIN32_ERROR ERROR_UNABLE_TO_REMOVE_REPLACED;
    public static WIN32_ERROR ERROR_UNABLE_TO_MOVE_REPLACEMENT;
    public static WIN32_ERROR ERROR_UNABLE_TO_MOVE_REPLACEMENT_2;
    public static WIN32_ERROR ERROR_JOURNAL_DELETE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_JOURNAL_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_POTENTIAL_FILE_FOUND;
    public static WIN32_ERROR ERROR_JOURNAL_ENTRY_DELETED;
    public static WIN32_ERROR ERROR_PARTITION_TERMINATING;
    public static WIN32_ERROR ERROR_SHUTDOWN_IS_SCHEDULED;
    public static WIN32_ERROR ERROR_SHUTDOWN_USERS_LOGGED_ON;
    public static WIN32_ERROR ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE;
    public static WIN32_ERROR ERROR_BAD_DEVICE;
    public static WIN32_ERROR ERROR_CONNECTION_UNAVAIL;
    public static WIN32_ERROR ERROR_DEVICE_ALREADY_REMEMBERED;
    public static WIN32_ERROR ERROR_NO_NET_OR_BAD_PATH;
    public static WIN32_ERROR ERROR_BAD_PROVIDER;
    public static WIN32_ERROR ERROR_CANNOT_OPEN_PROFILE;
    public static WIN32_ERROR ERROR_BAD_PROFILE;
    public static WIN32_ERROR ERROR_NOT_CONTAINER;
    public static WIN32_ERROR ERROR_EXTENDED_ERROR;
    public static WIN32_ERROR ERROR_INVALID_GROUPNAME;
    public static WIN32_ERROR ERROR_INVALID_COMPUTERNAME;
    public static WIN32_ERROR ERROR_INVALID_EVENTNAME;
    public static WIN32_ERROR ERROR_INVALID_DOMAINNAME;
    public static WIN32_ERROR ERROR_INVALID_SERVICENAME;
    public static WIN32_ERROR ERROR_INVALID_NETNAME;
    public static WIN32_ERROR ERROR_INVALID_SHARENAME;
    public static WIN32_ERROR ERROR_INVALID_PASSWORDNAME;
    public static WIN32_ERROR ERROR_INVALID_MESSAGENAME;
    public static WIN32_ERROR ERROR_INVALID_MESSAGEDEST;
    public static WIN32_ERROR ERROR_SESSION_CREDENTIAL_CONFLICT;
    public static WIN32_ERROR ERROR_REMOTE_SESSION_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DUP_DOMAINNAME;
    public static WIN32_ERROR ERROR_NO_NETWORK;
    public static WIN32_ERROR ERROR_CANCELLED;
    public static WIN32_ERROR ERROR_USER_MAPPED_FILE;
    public static WIN32_ERROR ERROR_CONNECTION_REFUSED;
    public static WIN32_ERROR ERROR_GRACEFUL_DISCONNECT;
    public static WIN32_ERROR ERROR_ADDRESS_ALREADY_ASSOCIATED;
    public static WIN32_ERROR ERROR_ADDRESS_NOT_ASSOCIATED;
    public static WIN32_ERROR ERROR_CONNECTION_INVALID;
    public static WIN32_ERROR ERROR_CONNECTION_ACTIVE;
    public static WIN32_ERROR ERROR_NETWORK_UNREACHABLE;
    public static WIN32_ERROR ERROR_HOST_UNREACHABLE;
    public static WIN32_ERROR ERROR_PROTOCOL_UNREACHABLE;
    public static WIN32_ERROR ERROR_PORT_UNREACHABLE;
    public static WIN32_ERROR ERROR_REQUEST_ABORTED;
    public static WIN32_ERROR ERROR_CONNECTION_ABORTED;
    public static WIN32_ERROR ERROR_RETRY;
    public static WIN32_ERROR ERROR_CONNECTION_COUNT_LIMIT;
    public static WIN32_ERROR ERROR_LOGIN_TIME_RESTRICTION;
    public static WIN32_ERROR ERROR_LOGIN_WKSTA_RESTRICTION;
    public static WIN32_ERROR ERROR_INCORRECT_ADDRESS;
    public static WIN32_ERROR ERROR_ALREADY_REGISTERED;
    public static WIN32_ERROR ERROR_SERVICE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NOT_AUTHENTICATED;
    public static WIN32_ERROR ERROR_NOT_LOGGED_ON;
    public static WIN32_ERROR ERROR_CONTINUE;
    public static WIN32_ERROR ERROR_ALREADY_INITIALIZED;
    public static WIN32_ERROR ERROR_NO_MORE_DEVICES;
    public static WIN32_ERROR ERROR_NO_SUCH_SITE;
    public static WIN32_ERROR ERROR_DOMAIN_CONTROLLER_EXISTS;
    public static WIN32_ERROR ERROR_ONLY_IF_CONNECTED;
    public static WIN32_ERROR ERROR_OVERRIDE_NOCHANGES;
    public static WIN32_ERROR ERROR_BAD_USER_PROFILE;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_ON_SBS;
    public static WIN32_ERROR ERROR_SERVER_SHUTDOWN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_HOST_DOWN;
    public static WIN32_ERROR ERROR_NON_ACCOUNT_SID;
    public static WIN32_ERROR ERROR_NON_DOMAIN_SID;
    public static WIN32_ERROR ERROR_APPHELP_BLOCK;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_BY_POLICY;
    public static WIN32_ERROR ERROR_REG_NAT_CONSUMPTION;
    public static WIN32_ERROR ERROR_CSCSHARE_OFFLINE;
    public static WIN32_ERROR ERROR_PKINIT_FAILURE;
    public static WIN32_ERROR ERROR_SMARTCARD_SUBSYSTEM_FAILURE;
    public static WIN32_ERROR ERROR_DOWNGRADE_DETECTED;
    public static WIN32_ERROR ERROR_MACHINE_LOCKED;
    public static WIN32_ERROR ERROR_SMB_GUEST_LOGON_BLOCKED;
    public static WIN32_ERROR ERROR_CALLBACK_SUPPLIED_INVALID_DATA;
    public static WIN32_ERROR ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED;
    public static WIN32_ERROR ERROR_DRIVER_BLOCKED;
    public static WIN32_ERROR ERROR_INVALID_IMPORT_OF_NON_DLL;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_WEBBLADE;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER;
    public static WIN32_ERROR ERROR_RECOVERY_FAILURE;
    public static WIN32_ERROR ERROR_ALREADY_FIBER;
    public static WIN32_ERROR ERROR_ALREADY_THREAD;
    public static WIN32_ERROR ERROR_STACK_BUFFER_OVERRUN;
    public static WIN32_ERROR ERROR_PARAMETER_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_DEBUGGER_INACTIVE;
    public static WIN32_ERROR ERROR_DELAY_LOAD_FAILED;
    public static WIN32_ERROR ERROR_VDM_DISALLOWED;
    public static WIN32_ERROR ERROR_UNIDENTIFIED_ERROR;
    public static WIN32_ERROR ERROR_INVALID_CRUNTIME_PARAMETER;
    public static WIN32_ERROR ERROR_BEYOND_VDL;
    public static WIN32_ERROR ERROR_INCOMPATIBLE_SERVICE_SID_TYPE;
    public static WIN32_ERROR ERROR_DRIVER_PROCESS_TERMINATED;
    public static WIN32_ERROR ERROR_IMPLEMENTATION_LIMIT;
    public static WIN32_ERROR ERROR_PROCESS_IS_PROTECTED;
    public static WIN32_ERROR ERROR_SERVICE_NOTIFY_CLIENT_LAGGING;
    public static WIN32_ERROR ERROR_DISK_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_CONTENT_BLOCKED;
    public static WIN32_ERROR ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE;
    public static WIN32_ERROR ERROR_APP_HANG;
    public static WIN32_ERROR ERROR_INVALID_LABEL;
    public static WIN32_ERROR ERROR_NOT_ALL_ASSIGNED;
    public static WIN32_ERROR ERROR_SOME_NOT_MAPPED;
    public static WIN32_ERROR ERROR_NO_QUOTAS_FOR_ACCOUNT;
    public static WIN32_ERROR ERROR_LOCAL_USER_SESSION_KEY;
    public static WIN32_ERROR ERROR_NULL_LM_PASSWORD;
    public static WIN32_ERROR ERROR_UNKNOWN_REVISION;
    public static WIN32_ERROR ERROR_REVISION_MISMATCH;
    public static WIN32_ERROR ERROR_INVALID_OWNER;
    public static WIN32_ERROR ERROR_INVALID_PRIMARY_GROUP;
    public static WIN32_ERROR ERROR_NO_IMPERSONATION_TOKEN;
    public static WIN32_ERROR ERROR_CANT_DISABLE_MANDATORY;
    public static WIN32_ERROR ERROR_NO_LOGON_SERVERS;
    public static WIN32_ERROR ERROR_NO_SUCH_LOGON_SESSION;
    public static WIN32_ERROR ERROR_NO_SUCH_PRIVILEGE;
    public static WIN32_ERROR ERROR_PRIVILEGE_NOT_HELD;
    public static WIN32_ERROR ERROR_INVALID_ACCOUNT_NAME;
    public static WIN32_ERROR ERROR_USER_EXISTS;
    public static WIN32_ERROR ERROR_NO_SUCH_USER;
    public static WIN32_ERROR ERROR_GROUP_EXISTS;
    public static WIN32_ERROR ERROR_NO_SUCH_GROUP;
    public static WIN32_ERROR ERROR_MEMBER_IN_GROUP;
    public static WIN32_ERROR ERROR_MEMBER_NOT_IN_GROUP;
    public static WIN32_ERROR ERROR_LAST_ADMIN;
    public static WIN32_ERROR ERROR_WRONG_PASSWORD;
    public static WIN32_ERROR ERROR_ILL_FORMED_PASSWORD;
    public static WIN32_ERROR ERROR_PASSWORD_RESTRICTION;
    public static WIN32_ERROR ERROR_LOGON_FAILURE;
    public static WIN32_ERROR ERROR_ACCOUNT_RESTRICTION;
    public static WIN32_ERROR ERROR_INVALID_LOGON_HOURS;
    public static WIN32_ERROR ERROR_INVALID_WORKSTATION;
    public static WIN32_ERROR ERROR_PASSWORD_EXPIRED;
    public static WIN32_ERROR ERROR_ACCOUNT_DISABLED;
    public static WIN32_ERROR ERROR_NONE_MAPPED;
    public static WIN32_ERROR ERROR_TOO_MANY_LUIDS_REQUESTED;
    public static WIN32_ERROR ERROR_LUIDS_EXHAUSTED;
    public static WIN32_ERROR ERROR_INVALID_SUB_AUTHORITY;
    public static WIN32_ERROR ERROR_INVALID_ACL;
    public static WIN32_ERROR ERROR_INVALID_SID;
    public static WIN32_ERROR ERROR_INVALID_SECURITY_DESCR;
    public static WIN32_ERROR ERROR_BAD_INHERITANCE_ACL;
    public static WIN32_ERROR ERROR_SERVER_DISABLED;
    public static WIN32_ERROR ERROR_SERVER_NOT_DISABLED;
    public static WIN32_ERROR ERROR_INVALID_ID_AUTHORITY;
    public static WIN32_ERROR ERROR_ALLOTTED_SPACE_EXCEEDED;
    public static WIN32_ERROR ERROR_INVALID_GROUP_ATTRIBUTES;
    public static WIN32_ERROR ERROR_BAD_IMPERSONATION_LEVEL;
    public static WIN32_ERROR ERROR_CANT_OPEN_ANONYMOUS;
    public static WIN32_ERROR ERROR_BAD_VALIDATION_CLASS;
    public static WIN32_ERROR ERROR_BAD_TOKEN_TYPE;
    public static WIN32_ERROR ERROR_NO_SECURITY_ON_OBJECT;
    public static WIN32_ERROR ERROR_CANT_ACCESS_DOMAIN_INFO;
    public static WIN32_ERROR ERROR_INVALID_SERVER_STATE;
    public static WIN32_ERROR ERROR_INVALID_DOMAIN_STATE;
    public static WIN32_ERROR ERROR_INVALID_DOMAIN_ROLE;
    public static WIN32_ERROR ERROR_NO_SUCH_DOMAIN;
    public static WIN32_ERROR ERROR_DOMAIN_EXISTS;
    public static WIN32_ERROR ERROR_DOMAIN_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_INTERNAL_DB_CORRUPTION;
    public static WIN32_ERROR ERROR_INTERNAL_ERROR;
    public static WIN32_ERROR ERROR_GENERIC_NOT_MAPPED;
    public static WIN32_ERROR ERROR_BAD_DESCRIPTOR_FORMAT;
    public static WIN32_ERROR ERROR_NOT_LOGON_PROCESS;
    public static WIN32_ERROR ERROR_LOGON_SESSION_EXISTS;
    public static WIN32_ERROR ERROR_NO_SUCH_PACKAGE;
    public static WIN32_ERROR ERROR_BAD_LOGON_SESSION_STATE;
    public static WIN32_ERROR ERROR_LOGON_SESSION_COLLISION;
    public static WIN32_ERROR ERROR_INVALID_LOGON_TYPE;
    public static WIN32_ERROR ERROR_CANNOT_IMPERSONATE;
    public static WIN32_ERROR ERROR_RXACT_INVALID_STATE;
    public static WIN32_ERROR ERROR_RXACT_COMMIT_FAILURE;
    public static WIN32_ERROR ERROR_SPECIAL_ACCOUNT;
    public static WIN32_ERROR ERROR_SPECIAL_GROUP;
    public static WIN32_ERROR ERROR_SPECIAL_USER;
    public static WIN32_ERROR ERROR_MEMBERS_PRIMARY_GROUP;
    public static WIN32_ERROR ERROR_TOKEN_ALREADY_IN_USE;
    public static WIN32_ERROR ERROR_NO_SUCH_ALIAS;
    public static WIN32_ERROR ERROR_MEMBER_NOT_IN_ALIAS;
    public static WIN32_ERROR ERROR_MEMBER_IN_ALIAS;
    public static WIN32_ERROR ERROR_ALIAS_EXISTS;
    public static WIN32_ERROR ERROR_LOGON_NOT_GRANTED;
    public static WIN32_ERROR ERROR_TOO_MANY_SECRETS;
    public static WIN32_ERROR ERROR_SECRET_TOO_LONG;
    public static WIN32_ERROR ERROR_INTERNAL_DB_ERROR;
    public static WIN32_ERROR ERROR_TOO_MANY_CONTEXT_IDS;
    public static WIN32_ERROR ERROR_LOGON_TYPE_NOT_GRANTED;
    public static WIN32_ERROR ERROR_NT_CROSS_ENCRYPTION_REQUIRED;
    public static WIN32_ERROR ERROR_NO_SUCH_MEMBER;
    public static WIN32_ERROR ERROR_INVALID_MEMBER;
    public static WIN32_ERROR ERROR_TOO_MANY_SIDS;
    public static WIN32_ERROR ERROR_LM_CROSS_ENCRYPTION_REQUIRED;
    public static WIN32_ERROR ERROR_NO_INHERITANCE;
    public static WIN32_ERROR ERROR_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_DISK_CORRUPT;
    public static WIN32_ERROR ERROR_NO_USER_SESSION_KEY;
    public static WIN32_ERROR ERROR_LICENSE_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_WRONG_TARGET_NAME;
    public static WIN32_ERROR ERROR_MUTUAL_AUTH_FAILED;
    public static WIN32_ERROR ERROR_TIME_SKEW;
    public static WIN32_ERROR ERROR_CURRENT_DOMAIN_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_INVALID_WINDOW_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_MENU_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_CURSOR_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_ACCEL_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_HOOK_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_DWP_HANDLE;
    public static WIN32_ERROR ERROR_TLW_WITH_WSCHILD;
    public static WIN32_ERROR ERROR_CANNOT_FIND_WND_CLASS;
    public static WIN32_ERROR ERROR_WINDOW_OF_OTHER_THREAD;
    public static WIN32_ERROR ERROR_HOTKEY_ALREADY_REGISTERED;
    public static WIN32_ERROR ERROR_CLASS_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_CLASS_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_CLASS_HAS_WINDOWS;
    public static WIN32_ERROR ERROR_INVALID_INDEX;
    public static WIN32_ERROR ERROR_INVALID_ICON_HANDLE;
    public static WIN32_ERROR ERROR_PRIVATE_DIALOG_INDEX;
    public static WIN32_ERROR ERROR_LISTBOX_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_WILDCARD_CHARACTERS;
    public static WIN32_ERROR ERROR_CLIPBOARD_NOT_OPEN;
    public static WIN32_ERROR ERROR_HOTKEY_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_WINDOW_NOT_DIALOG;
    public static WIN32_ERROR ERROR_CONTROL_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_COMBOBOX_MESSAGE;
    public static WIN32_ERROR ERROR_WINDOW_NOT_COMBOBOX;
    public static WIN32_ERROR ERROR_INVALID_EDIT_HEIGHT;
    public static WIN32_ERROR ERROR_DC_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_HOOK_FILTER;
    public static WIN32_ERROR ERROR_INVALID_FILTER_PROC;
    public static WIN32_ERROR ERROR_HOOK_NEEDS_HMOD;
    public static WIN32_ERROR ERROR_GLOBAL_ONLY_HOOK;
    public static WIN32_ERROR ERROR_JOURNAL_HOOK_SET;
    public static WIN32_ERROR ERROR_HOOK_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_INVALID_LB_MESSAGE;
    public static WIN32_ERROR ERROR_SETCOUNT_ON_BAD_LB;
    public static WIN32_ERROR ERROR_LB_WITHOUT_TABSTOPS;
    public static WIN32_ERROR ERROR_DESTROY_OBJECT_OF_OTHER_THREAD;
    public static WIN32_ERROR ERROR_CHILD_WINDOW_MENU;
    public static WIN32_ERROR ERROR_NO_SYSTEM_MENU;
    public static WIN32_ERROR ERROR_INVALID_MSGBOX_STYLE;
    public static WIN32_ERROR ERROR_INVALID_SPI_VALUE;
    public static WIN32_ERROR ERROR_SCREEN_ALREADY_LOCKED;
    public static WIN32_ERROR ERROR_HWNDS_HAVE_DIFF_PARENT;
    public static WIN32_ERROR ERROR_NOT_CHILD_WINDOW;
    public static WIN32_ERROR ERROR_INVALID_GW_COMMAND;
    public static WIN32_ERROR ERROR_INVALID_THREAD_ID;
    public static WIN32_ERROR ERROR_NON_MDICHILD_WINDOW;
    public static WIN32_ERROR ERROR_POPUP_ALREADY_ACTIVE;
    public static WIN32_ERROR ERROR_NO_SCROLLBARS;
    public static WIN32_ERROR ERROR_INVALID_SCROLLBAR_RANGE;
    public static WIN32_ERROR ERROR_INVALID_SHOWWIN_COMMAND;
    public static WIN32_ERROR ERROR_NO_SYSTEM_RESOURCES;
    public static WIN32_ERROR ERROR_NONPAGED_SYSTEM_RESOURCES;
    public static WIN32_ERROR ERROR_PAGED_SYSTEM_RESOURCES;
    public static WIN32_ERROR ERROR_WORKING_SET_QUOTA;
    public static WIN32_ERROR ERROR_PAGEFILE_QUOTA;
    public static WIN32_ERROR ERROR_COMMITMENT_LIMIT;
    public static WIN32_ERROR ERROR_MENU_ITEM_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_KEYBOARD_HANDLE;
    public static WIN32_ERROR ERROR_HOOK_TYPE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION;
    public static WIN32_ERROR ERROR_TIMEOUT;
    public static WIN32_ERROR ERROR_INVALID_MONITOR_HANDLE;
    public static WIN32_ERROR ERROR_INCORRECT_SIZE;
    public static WIN32_ERROR ERROR_SYMLINK_CLASS_DISABLED;
    public static WIN32_ERROR ERROR_SYMLINK_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_XML_PARSE_ERROR;
    public static WIN32_ERROR ERROR_XMLDSIG_ERROR;
    public static WIN32_ERROR ERROR_RESTART_APPLICATION;
    public static WIN32_ERROR ERROR_WRONG_COMPARTMENT;
    public static WIN32_ERROR ERROR_AUTHIP_FAILURE;
    public static WIN32_ERROR ERROR_NO_NVRAM_RESOURCES;
    public static WIN32_ERROR ERROR_NOT_GUI_PROCESS;
    public static WIN32_ERROR ERROR_EVENTLOG_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_EVENTLOG_CANT_START;
    public static WIN32_ERROR ERROR_LOG_FILE_FULL;
    public static WIN32_ERROR ERROR_EVENTLOG_FILE_CHANGED;
    public static WIN32_ERROR ERROR_CONTAINER_ASSIGNED;
    public static WIN32_ERROR ERROR_JOB_NO_CONTAINER;
    public static WIN32_ERROR ERROR_INVALID_TASK_NAME;
    public static WIN32_ERROR ERROR_INVALID_TASK_INDEX;
    public static WIN32_ERROR ERROR_THREAD_ALREADY_IN_TASK;
    public static WIN32_ERROR ERROR_INSTALL_SERVICE_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_USEREXIT;
    public static WIN32_ERROR ERROR_INSTALL_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_SUSPEND;
    public static WIN32_ERROR ERROR_UNKNOWN_PRODUCT;
    public static WIN32_ERROR ERROR_UNKNOWN_FEATURE;
    public static WIN32_ERROR ERROR_UNKNOWN_COMPONENT;
    public static WIN32_ERROR ERROR_UNKNOWN_PROPERTY;
    public static WIN32_ERROR ERROR_INVALID_HANDLE_STATE;
    public static WIN32_ERROR ERROR_BAD_CONFIGURATION;
    public static WIN32_ERROR ERROR_INDEX_ABSENT;
    public static WIN32_ERROR ERROR_INSTALL_SOURCE_ABSENT;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_VERSION;
    public static WIN32_ERROR ERROR_PRODUCT_UNINSTALLED;
    public static WIN32_ERROR ERROR_BAD_QUERY_SYNTAX;
    public static WIN32_ERROR ERROR_INVALID_FIELD;
    public static WIN32_ERROR ERROR_DEVICE_REMOVED;
    public static WIN32_ERROR ERROR_INSTALL_ALREADY_RUNNING;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_OPEN_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_INVALID;
    public static WIN32_ERROR ERROR_INSTALL_UI_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_LOG_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_LANGUAGE_UNSUPPORTED;
    public static WIN32_ERROR ERROR_INSTALL_TRANSFORM_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_REJECTED;
    public static WIN32_ERROR ERROR_FUNCTION_NOT_CALLED;
    public static WIN32_ERROR ERROR_FUNCTION_FAILED;
    public static WIN32_ERROR ERROR_INVALID_TABLE;
    public static WIN32_ERROR ERROR_DATATYPE_MISMATCH;
    public static WIN32_ERROR ERROR_UNSUPPORTED_TYPE;
    public static WIN32_ERROR ERROR_CREATE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_TEMP_UNWRITABLE;
    public static WIN32_ERROR ERROR_INSTALL_PLATFORM_UNSUPPORTED;
    public static WIN32_ERROR ERROR_INSTALL_NOTUSED;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_OPEN_FAILED;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_INVALID;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_UNSUPPORTED;
    public static WIN32_ERROR ERROR_PRODUCT_VERSION;
    public static WIN32_ERROR ERROR_INVALID_COMMAND_LINE;
    public static WIN32_ERROR ERROR_INSTALL_REMOTE_DISALLOWED;
    public static WIN32_ERROR ERROR_SUCCESS_REBOOT_INITIATED;
    public static WIN32_ERROR ERROR_PATCH_TARGET_NOT_FOUND;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_REJECTED;
    public static WIN32_ERROR ERROR_INSTALL_TRANSFORM_REJECTED;
    public static WIN32_ERROR ERROR_INSTALL_REMOTE_PROHIBITED;
    public static WIN32_ERROR ERROR_PATCH_REMOVAL_UNSUPPORTED;
    public static WIN32_ERROR ERROR_UNKNOWN_PATCH;
    public static WIN32_ERROR ERROR_PATCH_NO_SEQUENCE;
    public static WIN32_ERROR ERROR_PATCH_REMOVAL_DISALLOWED;
    public static WIN32_ERROR ERROR_INVALID_PATCH_XML;
    public static WIN32_ERROR ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT;
    public static WIN32_ERROR ERROR_INSTALL_SERVICE_SAFEBOOT;
    public static WIN32_ERROR ERROR_FAIL_FAST_EXCEPTION;
    public static WIN32_ERROR ERROR_INSTALL_REJECTED;
    public static WIN32_ERROR ERROR_DYNAMIC_CODE_BLOCKED;
    public static WIN32_ERROR ERROR_NOT_SAME_OBJECT;
    public static WIN32_ERROR ERROR_STRICT_CFG_VIOLATION;
    public static WIN32_ERROR ERROR_SET_CONTEXT_DENIED;
    public static WIN32_ERROR ERROR_CROSS_PARTITION_VIOLATION;
    public static WIN32_ERROR ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT;
    public static WIN32_ERROR ERROR_INVALID_USER_BUFFER;
    public static WIN32_ERROR ERROR_UNRECOGNIZED_MEDIA;
    public static WIN32_ERROR ERROR_NO_TRUST_LSA_SECRET;
    public static WIN32_ERROR ERROR_NO_TRUST_SAM_ACCOUNT;
    public static WIN32_ERROR ERROR_TRUSTED_DOMAIN_FAILURE;
    public static WIN32_ERROR ERROR_TRUSTED_RELATIONSHIP_FAILURE;
    public static WIN32_ERROR ERROR_TRUST_FAILURE;
    public static WIN32_ERROR ERROR_NETLOGON_NOT_STARTED;
    public static WIN32_ERROR ERROR_ACCOUNT_EXPIRED;
    public static WIN32_ERROR ERROR_REDIRECTOR_HAS_OPEN_HANDLES;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_UNKNOWN_PORT;
    public static WIN32_ERROR ERROR_UNKNOWN_PRINTER_DRIVER;
    public static WIN32_ERROR ERROR_UNKNOWN_PRINTPROCESSOR;
    public static WIN32_ERROR ERROR_INVALID_SEPARATOR_FILE;
    public static WIN32_ERROR ERROR_INVALID_PRIORITY;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_NAME;
    public static WIN32_ERROR ERROR_PRINTER_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_COMMAND;
    public static WIN32_ERROR ERROR_INVALID_DATATYPE;
    public static WIN32_ERROR ERROR_INVALID_ENVIRONMENT;
    public static WIN32_ERROR ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT;
    public static WIN32_ERROR ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT;
    public static WIN32_ERROR ERROR_NOLOGON_SERVER_TRUST_ACCOUNT;
    public static WIN32_ERROR ERROR_DOMAIN_TRUST_INCONSISTENT;
    public static WIN32_ERROR ERROR_SERVER_HAS_OPEN_HANDLES;
    public static WIN32_ERROR ERROR_RESOURCE_DATA_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCE_TYPE_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCE_NAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCE_LANG_NOT_FOUND;
    public static WIN32_ERROR ERROR_NOT_ENOUGH_QUOTA;
    public static WIN32_ERROR ERROR_INVALID_TIME;
    public static WIN32_ERROR ERROR_INVALID_FORM_NAME;
    public static WIN32_ERROR ERROR_INVALID_FORM_SIZE;
    public static WIN32_ERROR ERROR_ALREADY_WAITING;
    public static WIN32_ERROR ERROR_PRINTER_DELETED;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_STATE;
    public static WIN32_ERROR ERROR_PASSWORD_MUST_CHANGE;
    public static WIN32_ERROR ERROR_DOMAIN_CONTROLLER_NOT_FOUND;
    public static WIN32_ERROR ERROR_ACCOUNT_LOCKED_OUT;
    public static WIN32_ERROR ERROR_NO_SITENAME;
    public static WIN32_ERROR ERROR_CANT_ACCESS_FILE;
    public static WIN32_ERROR ERROR_CANT_RESOLVE_FILENAME;
    public static WIN32_ERROR ERROR_KM_DRIVER_BLOCKED;
    public static WIN32_ERROR ERROR_CONTEXT_EXPIRED;
    public static WIN32_ERROR ERROR_PER_USER_TRUST_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_AUTHENTICATION_FIREWALL_FAILED;
    public static WIN32_ERROR ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED;
    public static WIN32_ERROR ERROR_NTLM_BLOCKED;
    public static WIN32_ERROR ERROR_PASSWORD_CHANGE_REQUIRED;
    public static WIN32_ERROR ERROR_LOST_MODE_LOGON_RESTRICTION;
    public static WIN32_ERROR ERROR_INVALID_PIXEL_FORMAT;
    public static WIN32_ERROR ERROR_BAD_DRIVER;
    public static WIN32_ERROR ERROR_INVALID_WINDOW_STYLE;
    public static WIN32_ERROR ERROR_METAFILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_TRANSFORM_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLIPPING_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_INVALID_CMM;
    public static WIN32_ERROR ERROR_INVALID_PROFILE;
    public static WIN32_ERROR ERROR_TAG_NOT_FOUND;
    public static WIN32_ERROR ERROR_TAG_NOT_PRESENT;
    public static WIN32_ERROR ERROR_DUPLICATE_TAG;
    public static WIN32_ERROR ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE;
    public static WIN32_ERROR ERROR_PROFILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_COLORSPACE;
    public static WIN32_ERROR ERROR_ICM_NOT_ENABLED;
    public static WIN32_ERROR ERROR_DELETING_ICM_XFORM;
    public static WIN32_ERROR ERROR_INVALID_TRANSFORM;
    public static WIN32_ERROR ERROR_COLORSPACE_MISMATCH;
    public static WIN32_ERROR ERROR_INVALID_COLORINDEX;
    public static WIN32_ERROR ERROR_PROFILE_DOES_NOT_MATCH_DEVICE;
    public static WIN32_ERROR ERROR_CONNECTED_OTHER_PASSWORD;
    public static WIN32_ERROR ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT;
    public static WIN32_ERROR ERROR_BAD_USERNAME;
    public static WIN32_ERROR ERROR_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_OPEN_FILES;
    public static WIN32_ERROR ERROR_ACTIVE_CONNECTIONS;
    public static WIN32_ERROR ERROR_DEVICE_IN_USE;
    public static WIN32_ERROR ERROR_UNKNOWN_PRINT_MONITOR;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_IN_USE;
    public static WIN32_ERROR ERROR_SPOOL_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_SPL_NO_STARTDOC;
    public static WIN32_ERROR ERROR_SPL_NO_ADDJOB;
    public static WIN32_ERROR ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_PRINT_MONITOR_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_INVALID_PRINT_MONITOR;
    public static WIN32_ERROR ERROR_PRINT_MONITOR_IN_USE;
    public static WIN32_ERROR ERROR_PRINTER_HAS_JOBS_QUEUED;
    public static WIN32_ERROR ERROR_SUCCESS_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_SUCCESS_RESTART_REQUIRED;
    public static WIN32_ERROR ERROR_PRINTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_WARNED;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_BLOCKED;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_PACKAGE_IN_USE;
    public static WIN32_ERROR ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_FAIL_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_FAIL_REBOOT_INITIATED;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED;
    public static WIN32_ERROR ERROR_PRINT_JOB_RESTART_REQUIRED;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_DRIVER_MANIFEST;
    public static WIN32_ERROR ERROR_PRINTER_NOT_SHAREABLE;
    public static WIN32_ERROR ERROR_SERVER_SERVICE_CALL_REQUIRES_SMB1;
    public static WIN32_ERROR ERROR_NETWORK_AUTHENTICATION_PROMPT_CANCELED;
    public static WIN32_ERROR ERROR_REQUEST_PAUSED;
    public static WIN32_ERROR ERROR_APPEXEC_CONDITION_NOT_SATISFIED;
    public static WIN32_ERROR ERROR_APPEXEC_HANDLE_INVALIDATED;
    public static WIN32_ERROR ERROR_APPEXEC_INVALID_HOST_GENERATION;
    public static WIN32_ERROR ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION;
    public static WIN32_ERROR ERROR_APPEXEC_INVALID_HOST_STATE;
    public static WIN32_ERROR ERROR_APPEXEC_NO_DONOR;
    public static WIN32_ERROR ERROR_APPEXEC_HOST_ID_MISMATCH;
    public static WIN32_ERROR ERROR_APPEXEC_UNKNOWN_USER;
    public static WIN32_ERROR ERROR_APPEXEC_APP_COMPAT_BLOCK;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NOT_STOPPABLE;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_SAFE_MODE;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_PROTECTED_DRIVER;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NMI_REGISTERED;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_SETTINGS_CONFLICT;
    public static WIN32_ERROR ERROR_DIF_IOCALLBACK_NOT_REPLACED;
    public static WIN32_ERROR ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_INVALID_INFO;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_DIF_BINDING_API_NOT_FOUND;
    public static WIN32_ERROR ERROR_IO_REISSUE_AS_CACHED;
    public static WIN32_ERROR ERROR_WINS_INTERNAL;
    public static WIN32_ERROR ERROR_CAN_NOT_DEL_LOCAL_WINS;
    public static WIN32_ERROR ERROR_STATIC_INIT;
    public static WIN32_ERROR ERROR_INC_BACKUP;
    public static WIN32_ERROR ERROR_FULL_BACKUP;
    public static WIN32_ERROR ERROR_REC_NON_EXISTENT;
    public static WIN32_ERROR ERROR_RPL_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_DHCP_ADDRESS_CONFLICT;
    public static WIN32_ERROR ERROR_WMI_GUID_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_INSTANCE_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_ITEMID_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_TRY_AGAIN;
    public static WIN32_ERROR ERROR_WMI_DP_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_UNRESOLVED_INSTANCE_REF;
    public static WIN32_ERROR ERROR_WMI_ALREADY_ENABLED;
    public static WIN32_ERROR ERROR_WMI_GUID_DISCONNECTED;
    public static WIN32_ERROR ERROR_WMI_SERVER_UNAVAILABLE;
    public static WIN32_ERROR ERROR_WMI_DP_FAILED;
    public static WIN32_ERROR ERROR_WMI_INVALID_MOF;
    public static WIN32_ERROR ERROR_WMI_INVALID_REGINFO;
    public static WIN32_ERROR ERROR_WMI_ALREADY_DISABLED;
    public static WIN32_ERROR ERROR_WMI_READ_ONLY;
    public static WIN32_ERROR ERROR_WMI_SET_FAILURE;
    public static WIN32_ERROR ERROR_NOT_APPCONTAINER;
    public static WIN32_ERROR ERROR_APPCONTAINER_REQUIRED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_IN_APPCONTAINER;
    public static WIN32_ERROR ERROR_INVALID_PACKAGE_SID_LENGTH;
    public static WIN32_ERROR ERROR_INVALID_MEDIA;
    public static WIN32_ERROR ERROR_INVALID_LIBRARY;
    public static WIN32_ERROR ERROR_INVALID_MEDIA_POOL;
    public static WIN32_ERROR ERROR_DRIVE_MEDIA_MISMATCH;
    public static WIN32_ERROR ERROR_MEDIA_OFFLINE;
    public static WIN32_ERROR ERROR_LIBRARY_OFFLINE;
    public static WIN32_ERROR ERROR_EMPTY;
    public static WIN32_ERROR ERROR_NOT_EMPTY;
    public static WIN32_ERROR ERROR_MEDIA_UNAVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_DISABLED;
    public static WIN32_ERROR ERROR_INVALID_CLEANER;
    public static WIN32_ERROR ERROR_UNABLE_TO_CLEAN;
    public static WIN32_ERROR ERROR_OBJECT_NOT_FOUND;
    public static WIN32_ERROR ERROR_DATABASE_FAILURE;
    public static WIN32_ERROR ERROR_DATABASE_FULL;
    public static WIN32_ERROR ERROR_MEDIA_INCOMPATIBLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_PRESENT;
    public static WIN32_ERROR ERROR_INVALID_OPERATION;
    public static WIN32_ERROR ERROR_MEDIA_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_DEVICE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_REQUEST_REFUSED;
    public static WIN32_ERROR ERROR_INVALID_DRIVE_OBJECT;
    public static WIN32_ERROR ERROR_LIBRARY_FULL;
    public static WIN32_ERROR ERROR_MEDIUM_NOT_ACCESSIBLE;
    public static WIN32_ERROR ERROR_UNABLE_TO_LOAD_MEDIUM;
    public static WIN32_ERROR ERROR_UNABLE_TO_INVENTORY_DRIVE;
    public static WIN32_ERROR ERROR_UNABLE_TO_INVENTORY_SLOT;
    public static WIN32_ERROR ERROR_UNABLE_TO_INVENTORY_TRANSPORT;
    public static WIN32_ERROR ERROR_TRANSPORT_FULL;
    public static WIN32_ERROR ERROR_CONTROLLING_IEPORT;
    public static WIN32_ERROR ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA;
    public static WIN32_ERROR ERROR_CLEANER_SLOT_SET;
    public static WIN32_ERROR ERROR_CLEANER_SLOT_NOT_SET;
    public static WIN32_ERROR ERROR_CLEANER_CARTRIDGE_SPENT;
    public static WIN32_ERROR ERROR_UNEXPECTED_OMID;
    public static WIN32_ERROR ERROR_CANT_DELETE_LAST_ITEM;
    public static WIN32_ERROR ERROR_MESSAGE_EXCEEDS_MAX_SIZE;
    public static WIN32_ERROR ERROR_VOLUME_CONTAINS_SYS_FILES;
    public static WIN32_ERROR ERROR_INDIGENOUS_TYPE;
    public static WIN32_ERROR ERROR_NO_SUPPORTING_DRIVES;
    public static WIN32_ERROR ERROR_CLEANER_CARTRIDGE_INSTALLED;
    public static WIN32_ERROR ERROR_IEPORT_FULL;
    public static WIN32_ERROR ERROR_FILE_OFFLINE;
    public static WIN32_ERROR ERROR_REMOTE_STORAGE_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_REMOTE_STORAGE_MEDIA_ERROR;
    public static WIN32_ERROR ERROR_NOT_A_REPARSE_POINT;
    public static WIN32_ERROR ERROR_REPARSE_ATTRIBUTE_CONFLICT;
    public static WIN32_ERROR ERROR_INVALID_REPARSE_DATA;
    public static WIN32_ERROR ERROR_REPARSE_TAG_INVALID;
    public static WIN32_ERROR ERROR_REPARSE_TAG_MISMATCH;
    public static WIN32_ERROR ERROR_REPARSE_POINT_ENCOUNTERED;
    public static WIN32_ERROR ERROR_APP_DATA_NOT_FOUND;
    public static WIN32_ERROR ERROR_APP_DATA_EXPIRED;
    public static WIN32_ERROR ERROR_APP_DATA_CORRUPT;
    public static WIN32_ERROR ERROR_APP_DATA_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_APP_DATA_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_SECUREBOOT_ROLLBACK_DETECTED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_VIOLATION;
    public static WIN32_ERROR ERROR_SECUREBOOT_INVALID_POLICY;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_NOT_SIGNED;
    public static WIN32_ERROR ERROR_SECUREBOOT_NOT_ENABLED;
    public static WIN32_ERROR ERROR_SECUREBOOT_FILE_REPLACED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_UNKNOWN;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION;
    public static WIN32_ERROR ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH;
    public static WIN32_ERROR ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING;
    public static WIN32_ERROR ERROR_SECUREBOOT_NOT_BASE_POLICY;
    public static WIN32_ERROR ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY;
    public static WIN32_ERROR ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_ALREADY_HAS_STREAM_ID;
    public static WIN32_ERROR ERROR_SMR_GARBAGE_COLLECTION_REQUIRED;
    public static WIN32_ERROR ERROR_WOF_WIM_HEADER_CORRUPT;
    public static WIN32_ERROR ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT;
    public static WIN32_ERROR ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT;
    public static WIN32_ERROR ERROR_OBJECT_IS_IMMUTABLE;
    public static WIN32_ERROR ERROR_VOLUME_NOT_SIS_ENABLED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_INVALID_POLICY;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE;
    public static WIN32_ERROR ERROR_VSM_NOT_INITIALIZED;
    public static WIN32_ERROR ERROR_VSM_DMA_PROTECTION_NOT_IN_USE;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_INVALID;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_NOT_SIGNED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_UNFRIENDLY_FILE;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_UNATTAINABLE;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_EXPLICIT_DENY_FILE;
    public static WIN32_ERROR ERROR_DEPENDENT_RESOURCE_EXISTS;
    public static WIN32_ERROR ERROR_DEPENDENCY_NOT_FOUND;
    public static WIN32_ERROR ERROR_DEPENDENCY_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_ONLINE;
    public static WIN32_ERROR ERROR_HOST_NODE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_FOUND;
    public static WIN32_ERROR ERROR_SHUTDOWN_CLUSTER;
    public static WIN32_ERROR ERROR_CANT_EVICT_ACTIVE_NODE;
    public static WIN32_ERROR ERROR_OBJECT_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_OBJECT_IN_LIST;
    public static WIN32_ERROR ERROR_GROUP_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_GROUP_NOT_FOUND;
    public static WIN32_ERROR ERROR_GROUP_NOT_ONLINE;
    public static WIN32_ERROR ERROR_HOST_NODE_NOT_RESOURCE_OWNER;
    public static WIN32_ERROR ERROR_HOST_NODE_NOT_GROUP_OWNER;
    public static WIN32_ERROR ERROR_RESMON_CREATE_FAILED;
    public static WIN32_ERROR ERROR_RESMON_ONLINE_FAILED;
    public static WIN32_ERROR ERROR_RESOURCE_ONLINE;
    public static WIN32_ERROR ERROR_QUORUM_RESOURCE;
    public static WIN32_ERROR ERROR_NOT_QUORUM_CAPABLE;
    public static WIN32_ERROR ERROR_CLUSTER_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_INVALID_STATE;
    public static WIN32_ERROR ERROR_RESOURCE_PROPERTIES_STORED;
    public static WIN32_ERROR ERROR_NOT_QUORUM_CLASS;
    public static WIN32_ERROR ERROR_CORE_RESOURCE;
    public static WIN32_ERROR ERROR_QUORUM_RESOURCE_ONLINE_FAILED;
    public static WIN32_ERROR ERROR_QUORUMLOG_OPEN_FAILED;
    public static WIN32_ERROR ERROR_CLUSTERLOG_CORRUPT;
    public static WIN32_ERROR ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE;
    public static WIN32_ERROR ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE;
    public static WIN32_ERROR ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE;
    public static WIN32_ERROR ERROR_QUORUM_OWNER_ALIVE;
    public static WIN32_ERROR ERROR_NETWORK_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_NODE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_ALL_NODES_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_FAILED;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NODE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_EXISTS;
    public static WIN32_ERROR ERROR_CLUSTER_JOIN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_EXISTS;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_NETINTERFACE_EXISTS;
    public static WIN32_ERROR ERROR_CLUSTER_NETINTERFACE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_REQUEST;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NETWORK_PROVIDER;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_DOWN;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_UNREACHABLE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_MEMBER;
    public static WIN32_ERROR ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NETWORK;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_UP;
    public static WIN32_ERROR ERROR_CLUSTER_IPADDR_IN_USE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_PAUSED;
    public static WIN32_ERROR ERROR_CLUSTER_NO_SECURITY_CONTEXT;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_NOT_INTERNAL;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_UP;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_DOWN;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_ALREADY_ONLINE;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_MEMBER;
    public static WIN32_ERROR ERROR_CLUSTER_LAST_INTERNAL_NETWORK;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS;
    public static WIN32_ERROR ERROR_INVALID_OPERATION_ON_QUORUM;
    public static WIN32_ERROR ERROR_DEPENDENCY_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_PAUSED;
    public static WIN32_ERROR ERROR_NODE_CANT_HOST_RESOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_READY;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_CLUSTER_JOIN_ABORTED;
    public static WIN32_ERROR ERROR_CLUSTER_INCOMPATIBLE_VERSIONS;
    public static WIN32_ERROR ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED;
    public static WIN32_ERROR ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLUSTER_RESNAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED;
    public static WIN32_ERROR ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_SEQMISMATCH;
    public static WIN32_ERROR ERROR_RESMON_INVALID_STATE;
    public static WIN32_ERROR ERROR_CLUSTER_GUM_NOT_LOCKER;
    public static WIN32_ERROR ERROR_QUORUM_DISK_NOT_FOUND;
    public static WIN32_ERROR ERROR_DATABASE_BACKUP_CORRUPT;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT;
    public static WIN32_ERROR ERROR_RESOURCE_PROPERTY_UNCHANGEABLE;
    public static WIN32_ERROR ERROR_NO_ADMIN_ACCESS_POINT;
    public static WIN32_ERROR ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE;
    public static WIN32_ERROR ERROR_CLUSTER_QUORUMLOG_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_MEMBERSHIP_HALT;
    public static WIN32_ERROR ERROR_CLUSTER_INSTANCE_ID_MISMATCH;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP;
    public static WIN32_ERROR ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP;
    public static WIN32_ERROR ERROR_CLUSTER_PARAMETER_MISMATCH;
    public static WIN32_ERROR ERROR_NODE_CANNOT_BE_CLUSTERED;
    public static WIN32_ERROR ERROR_CLUSTER_WRONG_OS_VERSION;
    public static WIN32_ERROR ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME;
    public static WIN32_ERROR ERROR_CLUSCFG_ALREADY_COMMITTED;
    public static WIN32_ERROR ERROR_CLUSCFG_ROLLBACK_FAILED;
    public static WIN32_ERROR ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_OLD_VERSION;
    public static WIN32_ERROR ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME;
    public static WIN32_ERROR ERROR_CLUSTER_NO_NET_ADAPTERS;
    public static WIN32_ERROR ERROR_CLUSTER_POISONED;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_MOVING;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_TYPE_BUSY;
    public static WIN32_ERROR ERROR_RESOURCE_CALL_TIMED_OUT;
    public static WIN32_ERROR ERROR_INVALID_CLUSTER_IPV6_ADDRESS;
    public static WIN32_ERROR ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION;
    public static WIN32_ERROR ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS;
    public static WIN32_ERROR ERROR_CLUSTER_PARTIAL_SEND;
    public static WIN32_ERROR ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_STRING_TERMINATION;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_STRING_FORMAT;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_NULL_DATA;
    public static WIN32_ERROR ERROR_CLUSTER_PARTIAL_READ;
    public static WIN32_ERROR ERROR_CLUSTER_PARTIAL_WRITE;
    public static WIN32_ERROR ERROR_CLUSTER_CANT_DESERIALIZE_DATA;
    public static WIN32_ERROR ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_NO_QUORUM;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_IPV6_NETWORK;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK;
    public static WIN32_ERROR ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP;
    public static WIN32_ERROR ERROR_DEPENDENCY_TREE_TOO_COMPLEX;
    public static WIN32_ERROR ERROR_EXCEPTION_IN_RESOURCE_CALL;
    public static WIN32_ERROR ERROR_CLUSTER_RHS_FAILED_INITIALIZATION;
    public static WIN32_ERROR ERROR_CLUSTER_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE;
    public static WIN32_ERROR ERROR_CLUSTER_MAX_NODES_IN_CLUSTER;
    public static WIN32_ERROR ERROR_CLUSTER_TOO_MANY_NODES;
    public static WIN32_ERROR ERROR_CLUSTER_OBJECT_ALREADY_USED;
    public static WIN32_ERROR ERROR_NONCORE_GROUPS_FOUND;
    public static WIN32_ERROR ERROR_FILE_SHARE_RESOURCE_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_EVICT_INVALID_REQUEST;
    public static WIN32_ERROR ERROR_CLUSTER_SINGLETON_RESOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_BUSY;
    public static WIN32_ERROR ERROR_CLUSTER_NOT_SHARED_VOLUME;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUMES_IN_USE;
    public static WIN32_ERROR ERROR_CLUSTER_USE_SHARED_VOLUMES_API;
    public static WIN32_ERROR ERROR_CLUSTER_BACKUP_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NON_CSV_PATH;
    public static WIN32_ERROR ERROR_CSV_VOLUME_NOT_LOCAL;
    public static WIN32_ERROR ERROR_CLUSTER_WATCHDOG_TERMINATING;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NODE_WEIGHT;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_CALL;
    public static WIN32_ERROR ERROR_RESMON_SYSTEM_RESOURCES_LACKING;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_QUEUED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_LOCKED_STATUS;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_DISK_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_DISK_NOT_CSV_CAPABLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED;
    public static WIN32_ERROR ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE;
    public static WIN32_ERROR ERROR_CLUSTER_AFFINITY_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_INCOMPLETE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_IN_GRACE_PERIOD;
    public static WIN32_ERROR ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT;
    public static WIN32_ERROR ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_NOT_MONITORED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_IS_REPLICATED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ISOLATED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_QUARANTINED;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED;
    public static WIN32_ERROR ERROR_CLUSTER_SPACE_DEGRADED;
    public static WIN32_ERROR ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLUSTER_CSV_INVALID_HANDLE;
    public static WIN32_ERROR ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR;
    public static WIN32_ERROR ERROR_GROUPSET_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_GROUPSET_NOT_FOUND;
    public static WIN32_ERROR ERROR_GROUPSET_CANT_PROVIDE;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME;
    public static WIN32_ERROR ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE;
    public static WIN32_ERROR ERROR_ENCRYPTION_FAILED;
    public static WIN32_ERROR ERROR_DECRYPTION_FAILED;
    public static WIN32_ERROR ERROR_FILE_ENCRYPTED;
    public static WIN32_ERROR ERROR_NO_RECOVERY_POLICY;
    public static WIN32_ERROR ERROR_NO_EFS;
    public static WIN32_ERROR ERROR_WRONG_EFS;
    public static WIN32_ERROR ERROR_NO_USER_KEYS;
    public static WIN32_ERROR ERROR_FILE_NOT_ENCRYPTED;
    public static WIN32_ERROR ERROR_NOT_EXPORT_FORMAT;
    public static WIN32_ERROR ERROR_FILE_READ_ONLY;
    public static WIN32_ERROR ERROR_DIR_EFS_DISALLOWED;
    public static WIN32_ERROR ERROR_EFS_SERVER_NOT_TRUSTED;
    public static WIN32_ERROR ERROR_BAD_RECOVERY_POLICY;
    public static WIN32_ERROR ERROR_EFS_ALG_BLOB_TOO_BIG;
    public static WIN32_ERROR ERROR_VOLUME_NOT_SUPPORT_EFS;
    public static WIN32_ERROR ERROR_EFS_DISABLED;
    public static WIN32_ERROR ERROR_EFS_VERSION_NOT_SUPPORT;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_FILE_NOT_CSE;
    public static WIN32_ERROR ERROR_ENCRYPTION_POLICY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_WIP_ENCRYPTION_FAILED;
    public static WIN32_ERROR ERROR_NO_BROWSER_SERVERS_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM;
    public static WIN32_ERROR ERROR_LOG_SECTOR_INVALID;
    public static WIN32_ERROR ERROR_LOG_SECTOR_PARITY_INVALID;
    public static WIN32_ERROR ERROR_LOG_SECTOR_REMAPPED;
    public static WIN32_ERROR ERROR_LOG_BLOCK_INCOMPLETE;
    public static WIN32_ERROR ERROR_LOG_INVALID_RANGE;
    public static WIN32_ERROR ERROR_LOG_BLOCKS_EXHAUSTED;
    public static WIN32_ERROR ERROR_LOG_READ_CONTEXT_INVALID;
    public static WIN32_ERROR ERROR_LOG_RESTART_INVALID;
    public static WIN32_ERROR ERROR_LOG_BLOCK_VERSION;
    public static WIN32_ERROR ERROR_LOG_BLOCK_INVALID;
    public static WIN32_ERROR ERROR_LOG_READ_MODE_INVALID;
    public static WIN32_ERROR ERROR_LOG_NO_RESTART;
    public static WIN32_ERROR ERROR_LOG_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_LOG_METADATA_INVALID;
    public static WIN32_ERROR ERROR_LOG_METADATA_INCONSISTENT;
    public static WIN32_ERROR ERROR_LOG_RESERVATION_INVALID;
    public static WIN32_ERROR ERROR_LOG_CANT_DELETE;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_LOG_START_OF_LOG;
    public static WIN32_ERROR ERROR_LOG_POLICY_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_LOG_POLICY_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_LOG_POLICY_INVALID;
    public static WIN32_ERROR ERROR_LOG_POLICY_CONFLICT;
    public static WIN32_ERROR ERROR_LOG_PINNED_ARCHIVE_TAIL;
    public static WIN32_ERROR ERROR_LOG_RECORD_NONEXISTENT;
    public static WIN32_ERROR ERROR_LOG_RECORDS_RESERVED_INVALID;
    public static WIN32_ERROR ERROR_LOG_SPACE_RESERVED_INVALID;
    public static WIN32_ERROR ERROR_LOG_TAIL_INVALID;
    public static WIN32_ERROR ERROR_LOG_FULL;
    public static WIN32_ERROR ERROR_COULD_NOT_RESIZE_LOG;
    public static WIN32_ERROR ERROR_LOG_MULTIPLEXED;
    public static WIN32_ERROR ERROR_LOG_DEDICATED;
    public static WIN32_ERROR ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_LOG_ARCHIVE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_LOG_EPHEMERAL;
    public static WIN32_ERROR ERROR_LOG_NOT_ENOUGH_CONTAINERS;
    public static WIN32_ERROR ERROR_LOG_CLIENT_ALREADY_REGISTERED;
    public static WIN32_ERROR ERROR_LOG_CLIENT_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_LOG_FULL_HANDLER_IN_PROGRESS;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_READ_FAILED;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_WRITE_FAILED;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_OPEN_FAILED;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_STATE_INVALID;
    public static WIN32_ERROR ERROR_LOG_STATE_INVALID;
    public static WIN32_ERROR ERROR_LOG_PINNED;
    public static WIN32_ERROR ERROR_LOG_METADATA_FLUSH_FAILED;
    public static WIN32_ERROR ERROR_LOG_INCONSISTENT_SECURITY;
    public static WIN32_ERROR ERROR_LOG_APPENDED_FLUSH_FAILED;
    public static WIN32_ERROR ERROR_LOG_PINNED_RESERVATION;
    public static WIN32_ERROR ERROR_INVALID_TRANSACTION;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_TRANSACTION_REQUEST_NOT_VALID;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_REQUESTED;
    public static WIN32_ERROR ERROR_TRANSACTION_ALREADY_ABORTED;
    public static WIN32_ERROR ERROR_TRANSACTION_ALREADY_COMMITTED;
    public static WIN32_ERROR ERROR_TM_INITIALIZATION_FAILED;
    public static WIN32_ERROR ERROR_RESOURCEMANAGER_READ_ONLY;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_JOINED;
    public static WIN32_ERROR ERROR_TRANSACTION_SUPERIOR_EXISTS;
    public static WIN32_ERROR ERROR_CRM_PROTOCOL_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_TRANSACTION_PROPAGATION_FAILED;
    public static WIN32_ERROR ERROR_CRM_PROTOCOL_NOT_FOUND;
    public static WIN32_ERROR ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER;
    public static WIN32_ERROR ERROR_CURRENT_TRANSACTION_NOT_VALID;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCEMANAGER_NOT_FOUND;
    public static WIN32_ERROR ERROR_ENLISTMENT_NOT_FOUND;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_NOT_FOUND;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_NOT_ONLINE;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_ROOT;
    public static WIN32_ERROR ERROR_TRANSACTION_OBJECT_EXPIRED;
    public static WIN32_ERROR ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED;
    public static WIN32_ERROR ERROR_TRANSACTION_RECORD_TOO_LONG;
    public static WIN32_ERROR ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_TRANSACTION_INTEGRITY_VIOLATED;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH;
    public static WIN32_ERROR ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT;
    public static WIN32_ERROR ERROR_TRANSACTION_MUST_WRITETHROUGH;
    public static WIN32_ERROR ERROR_TRANSACTION_NO_SUPERIOR;
    public static WIN32_ERROR ERROR_HEURISTIC_DAMAGE_POSSIBLE;
    public static WIN32_ERROR ERROR_TRANSACTIONAL_CONFLICT;
    public static WIN32_ERROR ERROR_RM_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_RM_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_DIRECTORY_NOT_RM;
    public static WIN32_ERROR ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE;
    public static WIN32_ERROR ERROR_LOG_RESIZE_INVALID_SIZE;
    public static WIN32_ERROR ERROR_OBJECT_NO_LONGER_EXISTS;
    public static WIN32_ERROR ERROR_STREAM_MINIVERSION_NOT_FOUND;
    public static WIN32_ERROR ERROR_STREAM_MINIVERSION_NOT_VALID;
    public static WIN32_ERROR ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION;
    public static WIN32_ERROR ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT;
    public static WIN32_ERROR ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS;
    public static WIN32_ERROR ERROR_REMOTE_FILE_VERSION_MISMATCH;
    public static WIN32_ERROR ERROR_HANDLE_NO_LONGER_VALID;
    public static WIN32_ERROR ERROR_NO_TXF_METADATA;
    public static WIN32_ERROR ERROR_LOG_CORRUPTION_DETECTED;
    public static WIN32_ERROR ERROR_CANT_RECOVER_WITH_HANDLE_OPEN;
    public static WIN32_ERROR ERROR_RM_DISCONNECTED;
    public static WIN32_ERROR ERROR_ENLISTMENT_NOT_SUPERIOR;
    public static WIN32_ERROR ERROR_RECOVERY_NOT_NEEDED;
    public static WIN32_ERROR ERROR_RM_ALREADY_STARTED;
    public static WIN32_ERROR ERROR_FILE_IDENTITY_NOT_PERSISTENT;
    public static WIN32_ERROR ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY;
    public static WIN32_ERROR ERROR_CANT_CROSS_RM_BOUNDARY;
    public static WIN32_ERROR ERROR_TXF_DIR_NOT_EMPTY;
    public static WIN32_ERROR ERROR_INDOUBT_TRANSACTIONS_EXIST;
    public static WIN32_ERROR ERROR_TM_VOLATILE;
    public static WIN32_ERROR ERROR_ROLLBACK_TIMER_EXPIRED;
    public static WIN32_ERROR ERROR_TXF_ATTRIBUTE_CORRUPT;
    public static WIN32_ERROR ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_LOG_GROWTH_FAILED;
    public static WIN32_ERROR ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE;
    public static WIN32_ERROR ERROR_TXF_METADATA_ALREADY_PRESENT;
    public static WIN32_ERROR ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET;
    public static WIN32_ERROR ERROR_TRANSACTION_REQUIRED_PROMOTION;
    public static WIN32_ERROR ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_TRANSACTIONS_NOT_FROZEN;
    public static WIN32_ERROR ERROR_TRANSACTION_FREEZE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NOT_SNAPSHOT_VOLUME;
    public static WIN32_ERROR ERROR_NO_SAVEPOINT_WITH_OPEN_FILES;
    public static WIN32_ERROR ERROR_DATA_LOST_REPAIR;
    public static WIN32_ERROR ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_TM_IDENTITY_MISMATCH;
    public static WIN32_ERROR ERROR_FLOATED_SECTION;
    public static WIN32_ERROR ERROR_CANNOT_ACCEPT_TRANSACTED_WORK;
    public static WIN32_ERROR ERROR_CANNOT_ABORT_TRANSACTIONS;
    public static WIN32_ERROR ERROR_BAD_CLUSTERS;
    public static WIN32_ERROR ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_VOLUME_DIRTY;
    public static WIN32_ERROR ERROR_NO_LINK_TRACKING_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_EXPIRED_HANDLE;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_ENLISTED;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_NAME_INVALID;
    public static WIN32_ERROR ERROR_CTX_INVALID_PD;
    public static WIN32_ERROR ERROR_CTX_PD_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_WD_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY;
    public static WIN32_ERROR ERROR_CTX_SERVICE_NAME_COLLISION;
    public static WIN32_ERROR ERROR_CTX_CLOSE_PENDING;
    public static WIN32_ERROR ERROR_CTX_NO_OUTBUF;
    public static WIN32_ERROR ERROR_CTX_MODEM_INF_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_INVALID_MODEMNAME;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_ERROR;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_TIMEOUT;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_NO_CARRIER;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_BUSY;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_VOICE;
    public static WIN32_ERROR ERROR_CTX_TD_ERROR;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_BUSY;
    public static WIN32_ERROR ERROR_CTX_BAD_VIDEO_MODE;
    public static WIN32_ERROR ERROR_CTX_GRAPHICS_INVALID;
    public static WIN32_ERROR ERROR_CTX_LOGON_DISABLED;
    public static WIN32_ERROR ERROR_CTX_NOT_CONSOLE;
    public static WIN32_ERROR ERROR_CTX_CLIENT_QUERY_TIMEOUT;
    public static WIN32_ERROR ERROR_CTX_CONSOLE_DISCONNECT;
    public static WIN32_ERROR ERROR_CTX_CONSOLE_CONNECT;
    public static WIN32_ERROR ERROR_CTX_SHADOW_DENIED;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_CTX_INVALID_WD;
    public static WIN32_ERROR ERROR_CTX_SHADOW_INVALID;
    public static WIN32_ERROR ERROR_CTX_SHADOW_DISABLED;
    public static WIN32_ERROR ERROR_CTX_CLIENT_LICENSE_IN_USE;
    public static WIN32_ERROR ERROR_CTX_CLIENT_LICENSE_NOT_SET;
    public static WIN32_ERROR ERROR_CTX_LICENSE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_CTX_LICENSE_CLIENT_INVALID;
    public static WIN32_ERROR ERROR_CTX_LICENSE_EXPIRED;
    public static WIN32_ERROR ERROR_CTX_SHADOW_NOT_RUNNING;
    public static WIN32_ERROR ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE;
    public static WIN32_ERROR ERROR_ACTIVATION_COUNT_EXCEEDED;
    public static WIN32_ERROR ERROR_CTX_WINSTATIONS_DISABLED;
    public static WIN32_ERROR ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED;
    public static WIN32_ERROR ERROR_CTX_SESSION_IN_USE;
    public static WIN32_ERROR ERROR_CTX_NO_FORCE_LOGOFF;
    public static WIN32_ERROR ERROR_CTX_ACCOUNT_RESTRICTION;
    public static WIN32_ERROR ERROR_RDP_PROTOCOL_ERROR;
    public static WIN32_ERROR ERROR_CTX_CDM_CONNECT;
    public static WIN32_ERROR ERROR_CTX_CDM_DISCONNECT;
    public static WIN32_ERROR ERROR_CTX_SECURITY_LAYER_ERROR;
    public static WIN32_ERROR ERROR_TS_INCOMPATIBLE_SESSIONS;
    public static WIN32_ERROR ERROR_TS_VIDEO_SUBSYSTEM_ERROR;
    public static WIN32_ERROR ERROR_DS_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY;
    public static WIN32_ERROR ERROR_DS_NO_ATTRIBUTE_OR_VALUE;
    public static WIN32_ERROR ERROR_DS_INVALID_ATTRIBUTE_SYNTAX;
    public static WIN32_ERROR ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED;
    public static WIN32_ERROR ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS;
    public static WIN32_ERROR ERROR_DS_BUSY;
    public static WIN32_ERROR ERROR_DS_UNAVAILABLE;
    public static WIN32_ERROR ERROR_DS_NO_RIDS_ALLOCATED;
    public static WIN32_ERROR ERROR_DS_NO_MORE_RIDS;
    public static WIN32_ERROR ERROR_DS_INCORRECT_ROLE_OWNER;
    public static WIN32_ERROR ERROR_DS_RIDMGR_INIT_ERROR;
    public static WIN32_ERROR ERROR_DS_OBJ_CLASS_VIOLATION;
    public static WIN32_ERROR ERROR_DS_CANT_ON_NON_LEAF;
    public static WIN32_ERROR ERROR_DS_CANT_ON_RDN;
    public static WIN32_ERROR ERROR_DS_CANT_MOD_OBJ_CLASS;
    public static WIN32_ERROR ERROR_DS_CROSS_DOM_MOVE_ERROR;
    public static WIN32_ERROR ERROR_DS_GC_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_SHARED_POLICY;
    public static WIN32_ERROR ERROR_POLICY_OBJECT_NOT_FOUND;
    public static WIN32_ERROR ERROR_POLICY_ONLY_IN_DS;
    public static WIN32_ERROR ERROR_PROMOTION_ACTIVE;
    public static WIN32_ERROR ERROR_NO_PROMOTION_ACTIVE;
    public static WIN32_ERROR ERROR_DS_OPERATIONS_ERROR;
    public static WIN32_ERROR ERROR_DS_PROTOCOL_ERROR;
    public static WIN32_ERROR ERROR_DS_TIMELIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_SIZELIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_ADMIN_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_COMPARE_FALSE;
    public static WIN32_ERROR ERROR_DS_COMPARE_TRUE;
    public static WIN32_ERROR ERROR_DS_AUTH_METHOD_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DS_STRONG_AUTH_REQUIRED;
    public static WIN32_ERROR ERROR_DS_INAPPROPRIATE_AUTH;
    public static WIN32_ERROR ERROR_DS_AUTH_UNKNOWN;
    public static WIN32_ERROR ERROR_DS_REFERRAL;
    public static WIN32_ERROR ERROR_DS_UNAVAILABLE_CRIT_EXTENSION;
    public static WIN32_ERROR ERROR_DS_CONFIDENTIALITY_REQUIRED;
    public static WIN32_ERROR ERROR_DS_INAPPROPRIATE_MATCHING;
    public static WIN32_ERROR ERROR_DS_CONSTRAINT_VIOLATION;
    public static WIN32_ERROR ERROR_DS_NO_SUCH_OBJECT;
    public static WIN32_ERROR ERROR_DS_ALIAS_PROBLEM;
    public static WIN32_ERROR ERROR_DS_INVALID_DN_SYNTAX;
    public static WIN32_ERROR ERROR_DS_IS_LEAF;
    public static WIN32_ERROR ERROR_DS_ALIAS_DEREF_PROBLEM;
    public static WIN32_ERROR ERROR_DS_UNWILLING_TO_PERFORM;
    public static WIN32_ERROR ERROR_DS_LOOP_DETECT;
    public static WIN32_ERROR ERROR_DS_NAMING_VIOLATION;
    public static WIN32_ERROR ERROR_DS_OBJECT_RESULTS_TOO_LARGE;
    public static WIN32_ERROR ERROR_DS_AFFECTS_MULTIPLE_DSAS;
    public static WIN32_ERROR ERROR_DS_SERVER_DOWN;
    public static WIN32_ERROR ERROR_DS_LOCAL_ERROR;
    public static WIN32_ERROR ERROR_DS_ENCODING_ERROR;
    public static WIN32_ERROR ERROR_DS_DECODING_ERROR;
    public static WIN32_ERROR ERROR_DS_FILTER_UNKNOWN;
    public static WIN32_ERROR ERROR_DS_PARAM_ERROR;
    public static WIN32_ERROR ERROR_DS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DS_NO_RESULTS_RETURNED;
    public static WIN32_ERROR ERROR_DS_CONTROL_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_CLIENT_LOOP;
    public static WIN32_ERROR ERROR_DS_REFERRAL_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_SORT_CONTROL_MISSING;
    public static WIN32_ERROR ERROR_DS_OFFSET_RANGE_ERROR;
    public static WIN32_ERROR ERROR_DS_RIDMGR_DISABLED;
    public static WIN32_ERROR ERROR_DS_ROOT_MUST_BE_NC;
    public static WIN32_ERROR ERROR_DS_ADD_REPLICA_INHIBITED;
    public static WIN32_ERROR ERROR_DS_ATT_NOT_DEF_IN_SCHEMA;
    public static WIN32_ERROR ERROR_DS_MAX_OBJ_SIZE_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_OBJ_STRING_NAME_EXISTS;
    public static WIN32_ERROR ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA;
    public static WIN32_ERROR ERROR_DS_RDN_DOESNT_MATCH_SCHEMA;
    public static WIN32_ERROR ERROR_DS_NO_REQUESTED_ATTS_FOUND;
    public static WIN32_ERROR ERROR_DS_USER_BUFFER_TO_SMALL;
    public static WIN32_ERROR ERROR_DS_ATT_IS_NOT_ON_OBJ;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_MOD_OPERATION;
    public static WIN32_ERROR ERROR_DS_OBJ_TOO_LARGE;
    public static WIN32_ERROR ERROR_DS_BAD_INSTANCE_TYPE;
    public static WIN32_ERROR ERROR_DS_MASTERDSA_REQUIRED;
    public static WIN32_ERROR ERROR_DS_OBJECT_CLASS_REQUIRED;
    public static WIN32_ERROR ERROR_DS_MISSING_REQUIRED_ATT;
    public static WIN32_ERROR ERROR_DS_ATT_NOT_DEF_FOR_CLASS;
    public static WIN32_ERROR ERROR_DS_ATT_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DS_CANT_ADD_ATT_VALUES;
    public static WIN32_ERROR ERROR_DS_SINGLE_VALUE_CONSTRAINT;
    public static WIN32_ERROR ERROR_DS_RANGE_CONSTRAINT;
    public static WIN32_ERROR ERROR_DS_ATT_VAL_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DS_CANT_REM_MISSING_ATT;
    public static WIN32_ERROR ERROR_DS_CANT_REM_MISSING_ATT_VAL;
    public static WIN32_ERROR ERROR_DS_ROOT_CANT_BE_SUBREF;
    public static WIN32_ERROR ERROR_DS_NO_CHAINING;
    public static WIN32_ERROR ERROR_DS_NO_CHAINED_EVAL;
    public static WIN32_ERROR ERROR_DS_NO_PARENT_OBJECT;
    public static WIN32_ERROR ERROR_DS_PARENT_IS_AN_ALIAS;
    public static WIN32_ERROR ERROR_DS_CANT_MIX_MASTER_AND_REPS;
    public static WIN32_ERROR ERROR_DS_CHILDREN_EXIST;
    public static WIN32_ERROR ERROR_DS_OBJ_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_ALIASED_OBJ_MISSING;
    public static WIN32_ERROR ERROR_DS_BAD_NAME_SYNTAX;
    public static WIN32_ERROR ERROR_DS_ALIAS_POINTS_TO_ALIAS;
    public static WIN32_ERROR ERROR_DS_CANT_DEREF_ALIAS;
    public static WIN32_ERROR ERROR_DS_OUT_OF_SCOPE;
    public static WIN32_ERROR ERROR_DS_OBJECT_BEING_REMOVED;
    public static WIN32_ERROR ERROR_DS_CANT_DELETE_DSA_OBJ;
    public static WIN32_ERROR ERROR_DS_GENERIC_ERROR;
    public static WIN32_ERROR ERROR_DS_DSA_MUST_BE_INT_MASTER;
    public static WIN32_ERROR ERROR_DS_CLASS_NOT_DSA;
    public static WIN32_ERROR ERROR_DS_INSUFF_ACCESS_RIGHTS;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_SUPERIOR;
    public static WIN32_ERROR ERROR_DS_ATTRIBUTE_OWNED_BY_SAM;
    public static WIN32_ERROR ERROR_DS_NAME_TOO_MANY_PARTS;
    public static WIN32_ERROR ERROR_DS_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_DS_NAME_VALUE_TOO_LONG;
    public static WIN32_ERROR ERROR_DS_NAME_UNPARSEABLE;
    public static WIN32_ERROR ERROR_DS_NAME_TYPE_UNKNOWN;
    public static WIN32_ERROR ERROR_DS_NOT_AN_OBJECT;
    public static WIN32_ERROR ERROR_DS_SEC_DESC_TOO_SHORT;
    public static WIN32_ERROR ERROR_DS_SEC_DESC_INVALID;
    public static WIN32_ERROR ERROR_DS_NO_DELETED_NAME;
    public static WIN32_ERROR ERROR_DS_SUBREF_MUST_HAVE_PARENT;
    public static WIN32_ERROR ERROR_DS_NCNAME_MUST_BE_NC;
    public static WIN32_ERROR ERROR_DS_CANT_ADD_SYSTEM_ONLY;
    public static WIN32_ERROR ERROR_DS_CLASS_MUST_BE_CONCRETE;
    public static WIN32_ERROR ERROR_DS_INVALID_DMD;
    public static WIN32_ERROR ERROR_DS_OBJ_GUID_EXISTS;
    public static WIN32_ERROR ERROR_DS_NOT_ON_BACKLINK;
    public static WIN32_ERROR ERROR_DS_NO_CROSSREF_FOR_NC;
    public static WIN32_ERROR ERROR_DS_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_DS_UNKNOWN_OPERATION;
    public static WIN32_ERROR ERROR_DS_INVALID_ROLE_OWNER;
    public static WIN32_ERROR ERROR_DS_COULDNT_CONTACT_FSMO;
    public static WIN32_ERROR ERROR_DS_CROSS_NC_DN_RENAME;
    public static WIN32_ERROR ERROR_DS_CANT_MOD_SYSTEM_ONLY;
    public static WIN32_ERROR ERROR_DS_REPLICATOR_ONLY;
    public static WIN32_ERROR ERROR_DS_OBJ_CLASS_NOT_DEFINED;
    public static WIN32_ERROR ERROR_DS_OBJ_CLASS_NOT_SUBCLASS;
    public static WIN32_ERROR ERROR_DS_NAME_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_DS_CROSS_REF_EXISTS;
    public static WIN32_ERROR ERROR_DS_CANT_DEL_MASTER_CROSSREF;
    public static WIN32_ERROR ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD;
    public static WIN32_ERROR ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX;
    public static WIN32_ERROR ERROR_DS_DUP_RDN;
    public static WIN32_ERROR ERROR_DS_DUP_OID;
    public static WIN32_ERROR ERROR_DS_DUP_MAPI_ID;
    public static WIN32_ERROR ERROR_DS_DUP_SCHEMA_ID_GUID;
    public static WIN32_ERROR ERROR_DS_DUP_LDAP_DISPLAY_NAME;
    public static WIN32_ERROR ERROR_DS_SEMANTIC_ATT_TEST;
    public static WIN32_ERROR ERROR_DS_SYNTAX_MISMATCH;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_MUST_HAVE;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_MAY_HAVE;
    public static WIN32_ERROR ERROR_DS_NONEXISTENT_MAY_HAVE;
    public static WIN32_ERROR ERROR_DS_NONEXISTENT_MUST_HAVE;
    public static WIN32_ERROR ERROR_DS_AUX_CLS_TEST_FAIL;
    public static WIN32_ERROR ERROR_DS_NONEXISTENT_POSS_SUP;
    public static WIN32_ERROR ERROR_DS_SUB_CLS_TEST_FAIL;
    public static WIN32_ERROR ERROR_DS_BAD_RDN_ATT_ID_SYNTAX;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_AUX_CLS;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_SUB_CLS;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_POSS_SUP;
    public static WIN32_ERROR ERROR_DS_RECALCSCHEMA_FAILED;
    public static WIN32_ERROR ERROR_DS_TREE_DELETE_NOT_FINISHED;
    public static WIN32_ERROR ERROR_DS_CANT_DELETE;
    public static WIN32_ERROR ERROR_DS_ATT_SCHEMA_REQ_ID;
    public static WIN32_ERROR ERROR_DS_BAD_ATT_SCHEMA_SYNTAX;
    public static WIN32_ERROR ERROR_DS_CANT_CACHE_ATT;
    public static WIN32_ERROR ERROR_DS_CANT_CACHE_CLASS;
    public static WIN32_ERROR ERROR_DS_CANT_REMOVE_ATT_CACHE;
    public static WIN32_ERROR ERROR_DS_CANT_REMOVE_CLASS_CACHE;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_DN;
    public static WIN32_ERROR ERROR_DS_MISSING_SUPREF;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_INSTANCE;
    public static WIN32_ERROR ERROR_DS_CODE_INCONSISTENCY;
    public static WIN32_ERROR ERROR_DS_DATABASE_ERROR;
    public static WIN32_ERROR ERROR_DS_GOVERNSID_MISSING;
    public static WIN32_ERROR ERROR_DS_MISSING_EXPECTED_ATT;
    public static WIN32_ERROR ERROR_DS_NCNAME_MISSING_CR_REF;
    public static WIN32_ERROR ERROR_DS_SECURITY_CHECKING_ERROR;
    public static WIN32_ERROR ERROR_DS_SCHEMA_NOT_LOADED;
    public static WIN32_ERROR ERROR_DS_SCHEMA_ALLOC_FAILED;
    public static WIN32_ERROR ERROR_DS_ATT_SCHEMA_REQ_SYNTAX;
    public static WIN32_ERROR ERROR_DS_GCVERIFY_ERROR;
    public static WIN32_ERROR ERROR_DS_DRA_SCHEMA_MISMATCH;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_DSA_OBJ;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_EXPECTED_NC;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_NC_IN_CACHE;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_CHILD;
    public static WIN32_ERROR ERROR_DS_SECURITY_ILLEGAL_MODIFY;
    public static WIN32_ERROR ERROR_DS_CANT_REPLACE_HIDDEN_REC;
    public static WIN32_ERROR ERROR_DS_BAD_HIERARCHY_FILE;
    public static WIN32_ERROR ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED;
    public static WIN32_ERROR ERROR_DS_CONFIG_PARAM_MISSING;
    public static WIN32_ERROR ERROR_DS_COUNTING_AB_INDICES_FAILED;
    public static WIN32_ERROR ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED;
    public static WIN32_ERROR ERROR_DS_INTERNAL_FAILURE;
    public static WIN32_ERROR ERROR_DS_UNKNOWN_ERROR;
    public static WIN32_ERROR ERROR_DS_ROOT_REQUIRES_CLASS_TOP;
    public static WIN32_ERROR ERROR_DS_REFUSING_FSMO_ROLES;
    public static WIN32_ERROR ERROR_DS_MISSING_FSMO_SETTINGS;
    public static WIN32_ERROR ERROR_DS_UNABLE_TO_SURRENDER_ROLES;
    public static WIN32_ERROR ERROR_DS_DRA_GENERIC;
    public static WIN32_ERROR ERROR_DS_DRA_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_DS_DRA_BUSY;
    public static WIN32_ERROR ERROR_DS_DRA_BAD_DN;
    public static WIN32_ERROR ERROR_DS_DRA_BAD_NC;
    public static WIN32_ERROR ERROR_DS_DRA_DN_EXISTS;
    public static WIN32_ERROR ERROR_DS_DRA_INTERNAL_ERROR;
    public static WIN32_ERROR ERROR_DS_DRA_INCONSISTENT_DIT;
    public static WIN32_ERROR ERROR_DS_DRA_CONNECTION_FAILED;
    public static WIN32_ERROR ERROR_DS_DRA_BAD_INSTANCE_TYPE;
    public static WIN32_ERROR ERROR_DS_DRA_OUT_OF_MEM;
    public static WIN32_ERROR ERROR_DS_DRA_MAIL_PROBLEM;
    public static WIN32_ERROR ERROR_DS_DRA_REF_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DS_DRA_REF_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_DRA_OBJ_IS_REP_SOURCE;
    public static WIN32_ERROR ERROR_DS_DRA_DB_ERROR;
    public static WIN32_ERROR ERROR_DS_DRA_NO_REPLICA;
    public static WIN32_ERROR ERROR_DS_DRA_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_DS_DRA_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DS_DRA_RPC_CANCELLED;
    public static WIN32_ERROR ERROR_DS_DRA_SOURCE_DISABLED;
    public static WIN32_ERROR ERROR_DS_DRA_SINK_DISABLED;
    public static WIN32_ERROR ERROR_DS_DRA_NAME_COLLISION;
    public static WIN32_ERROR ERROR_DS_DRA_SOURCE_REINSTALLED;
    public static WIN32_ERROR ERROR_DS_DRA_MISSING_PARENT;
    public static WIN32_ERROR ERROR_DS_DRA_PREEMPTED;
    public static WIN32_ERROR ERROR_DS_DRA_ABANDON_SYNC;
    public static WIN32_ERROR ERROR_DS_DRA_SHUTDOWN;
    public static WIN32_ERROR ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET;
    public static WIN32_ERROR ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA;
    public static WIN32_ERROR ERROR_DS_DRA_EXTN_CONNECTION_FAILED;
    public static WIN32_ERROR ERROR_DS_INSTALL_SCHEMA_MISMATCH;
    public static WIN32_ERROR ERROR_DS_DUP_LINK_ID;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_RESOLVING;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NO_MAPPING;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_DOMAIN_ONLY;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING;
    public static WIN32_ERROR ERROR_DS_CONSTRUCTED_ATT_MOD;
    public static WIN32_ERROR ERROR_DS_WRONG_OM_OBJ_CLASS;
    public static WIN32_ERROR ERROR_DS_DRA_REPL_PENDING;
    public static WIN32_ERROR ERROR_DS_DS_REQUIRED;
    public static WIN32_ERROR ERROR_DS_INVALID_LDAP_DISPLAY_NAME;
    public static WIN32_ERROR ERROR_DS_NON_BASE_SEARCH;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_ATTS;
    public static WIN32_ERROR ERROR_DS_BACKLINK_WITHOUT_LINK;
    public static WIN32_ERROR ERROR_DS_EPOCH_MISMATCH;
    public static WIN32_ERROR ERROR_DS_SRC_NAME_MISMATCH;
    public static WIN32_ERROR ERROR_DS_SRC_AND_DST_NC_IDENTICAL;
    public static WIN32_ERROR ERROR_DS_DST_NC_MISMATCH;
    public static WIN32_ERROR ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC;
    public static WIN32_ERROR ERROR_DS_SRC_GUID_MISMATCH;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_DELETED_OBJECT;
    public static WIN32_ERROR ERROR_DS_PDC_OPERATION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION;
    public static WIN32_ERROR ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS;
    public static WIN32_ERROR ERROR_DS_NC_MUST_HAVE_NC_PARENT;
    public static WIN32_ERROR ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE;
    public static WIN32_ERROR ERROR_DS_DST_DOMAIN_NOT_NATIVE;
    public static WIN32_ERROR ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_ACCOUNT_GROUP;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_RESOURCE_GROUP;
    public static WIN32_ERROR ERROR_DS_INVALID_SEARCH_FLAG;
    public static WIN32_ERROR ERROR_DS_NO_TREE_DELETE_ABOVE_NC;
    public static WIN32_ERROR ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE;
    public static WIN32_ERROR ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE;
    public static WIN32_ERROR ERROR_DS_SAM_INIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_SENSITIVE_GROUP_VIOLATION;
    public static WIN32_ERROR ERROR_DS_CANT_MOD_PRIMARYGROUPID;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD;
    public static WIN32_ERROR ERROR_DS_NONSAFE_SCHEMA_CHANGE;
    public static WIN32_ERROR ERROR_DS_SCHEMA_UPDATE_DISALLOWED;
    public static WIN32_ERROR ERROR_DS_CANT_CREATE_UNDER_SCHEMA;
    public static WIN32_ERROR ERROR_DS_INSTALL_NO_SRC_SCH_VERSION;
    public static WIN32_ERROR ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE;
    public static WIN32_ERROR ERROR_DS_INVALID_GROUP_TYPE;
    public static WIN32_ERROR ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN;
    public static WIN32_ERROR ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN;
    public static WIN32_ERROR ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER;
    public static WIN32_ERROR ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_HAVE_PRIMARY_MEMBERS;
    public static WIN32_ERROR ERROR_DS_STRING_SD_CONVERSION_FAILED;
    public static WIN32_ERROR ERROR_DS_NAMING_MASTER_GC;
    public static WIN32_ERROR ERROR_DS_DNS_LOOKUP_FAILURE;
    public static WIN32_ERROR ERROR_DS_COULDNT_UPDATE_SPNS;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_SD;
    public static WIN32_ERROR ERROR_DS_KEY_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_DS_WRONG_LINKED_ATT_SYNTAX;
    public static WIN32_ERROR ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD;
    public static WIN32_ERROR ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY;
    public static WIN32_ERROR ERROR_DS_CANT_START;
    public static WIN32_ERROR ERROR_DS_INIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION;
    public static WIN32_ERROR ERROR_DS_SOURCE_DOMAIN_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN;
    public static WIN32_ERROR ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER;
    public static WIN32_ERROR ERROR_DS_SRC_SID_EXISTS_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH;
    public static WIN32_ERROR ERROR_SAM_INIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_DRA_SCHEMA_INFO_SHIP;
    public static WIN32_ERROR ERROR_DS_DRA_SCHEMA_CONFLICT;
    public static WIN32_ERROR ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT;
    public static WIN32_ERROR ERROR_DS_DRA_OBJ_NC_MISMATCH;
    public static WIN32_ERROR ERROR_DS_NC_STILL_HAS_DSAS;
    public static WIN32_ERROR ERROR_DS_GC_REQUIRED;
    public static WIN32_ERROR ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY;
    public static WIN32_ERROR ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS;
    public static WIN32_ERROR ERROR_DS_CANT_ADD_TO_GC;
    public static WIN32_ERROR ERROR_DS_NO_CHECKPOINT_WITH_PDC;
    public static WIN32_ERROR ERROR_DS_SOURCE_AUDITING_NOT_ENABLED;
    public static WIN32_ERROR ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC;
    public static WIN32_ERROR ERROR_DS_INVALID_NAME_FOR_SPN;
    public static WIN32_ERROR ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS;
    public static WIN32_ERROR ERROR_DS_UNICODEPWD_NOT_IN_QUOTES;
    public static WIN32_ERROR ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_MUST_BE_RUN_ON_DST_DC;
    public static WIN32_ERROR ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER;
    public static WIN32_ERROR ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ;
    public static WIN32_ERROR ERROR_DS_INIT_FAILURE_CONSOLE;
    public static WIN32_ERROR ERROR_DS_SAM_INIT_FAILURE_CONSOLE;
    public static WIN32_ERROR ERROR_DS_FOREST_VERSION_TOO_HIGH;
    public static WIN32_ERROR ERROR_DS_DOMAIN_VERSION_TOO_HIGH;
    public static WIN32_ERROR ERROR_DS_FOREST_VERSION_TOO_LOW;
    public static WIN32_ERROR ERROR_DS_DOMAIN_VERSION_TOO_LOW;
    public static WIN32_ERROR ERROR_DS_INCOMPATIBLE_VERSION;
    public static WIN32_ERROR ERROR_DS_LOW_DSA_VERSION;
    public static WIN32_ERROR ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN;
    public static WIN32_ERROR ERROR_DS_NOT_SUPPORTED_SORT_ORDER;
    public static WIN32_ERROR ERROR_DS_NAME_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4;
    public static WIN32_ERROR ERROR_DS_OUT_OF_VERSION_STORE;
    public static WIN32_ERROR ERROR_DS_INCOMPATIBLE_CONTROLS_USED;
    public static WIN32_ERROR ERROR_DS_NO_REF_DOMAIN;
    public static WIN32_ERROR ERROR_DS_RESERVED_LINK_ID;
    public static WIN32_ERROR ERROR_DS_LINK_ID_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE;
    public static WIN32_ERROR ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC;
    public static WIN32_ERROR ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG;
    public static WIN32_ERROR ERROR_DS_MODIFYDN_WRONG_GRANDPARENT;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_TRUST_REFERRAL;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER;
    public static WIN32_ERROR ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD;
    public static WIN32_ERROR ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2;
    public static WIN32_ERROR ERROR_DS_THREAD_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_NOT_CLOSEST;
    public static WIN32_ERROR ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF;
    public static WIN32_ERROR ERROR_DS_SINGLE_USER_MODE_FAILED;
    public static WIN32_ERROR ERROR_DS_NTDSCRIPT_SYNTAX_ERROR;
    public static WIN32_ERROR ERROR_DS_NTDSCRIPT_PROCESS_ERROR;
    public static WIN32_ERROR ERROR_DS_DIFFERENT_REPL_EPOCHS;
    public static WIN32_ERROR ERROR_DS_DRS_EXTENSIONS_CHANGED;
    public static WIN32_ERROR ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR;
    public static WIN32_ERROR ERROR_DS_NO_MSDS_INTID;
    public static WIN32_ERROR ERROR_DS_DUP_MSDS_INTID;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_RDNATTID;
    public static WIN32_ERROR ERROR_DS_AUTHORIZATION_FAILED;
    public static WIN32_ERROR ERROR_DS_INVALID_SCRIPT;
    public static WIN32_ERROR ERROR_DS_REMOTE_CROSSREF_OP_FAILED;
    public static WIN32_ERROR ERROR_DS_CROSS_REF_BUSY;
    public static WIN32_ERROR ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN;
    public static WIN32_ERROR ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC;
    public static WIN32_ERROR ERROR_DS_DUPLICATE_ID_FOUND;
    public static WIN32_ERROR ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT;
    public static WIN32_ERROR ERROR_DS_GROUP_CONVERSION_ERROR;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_APP_BASIC_GROUP;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_APP_QUERY_GROUP;
    public static WIN32_ERROR ERROR_DS_ROLE_NOT_VERIFIED;
    public static WIN32_ERROR ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL;
    public static WIN32_ERROR ERROR_DS_DOMAIN_RENAME_IN_PROGRESS;
    public static WIN32_ERROR ERROR_DS_EXISTING_AD_CHILD_NC;
    public static WIN32_ERROR ERROR_DS_REPL_LIFETIME_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER;
    public static WIN32_ERROR ERROR_DS_LDAP_SEND_QUEUE_FULL;
    public static WIN32_ERROR ERROR_DS_DRA_OUT_SCHEDULE_WINDOW;
    public static WIN32_ERROR ERROR_DS_POLICY_NOT_KNOWN;
    public static WIN32_ERROR ERROR_NO_SITE_SETTINGS_OBJECT;
    public static WIN32_ERROR ERROR_NO_SECRETS;
    public static WIN32_ERROR ERROR_NO_WRITABLE_DC_FOUND;
    public static WIN32_ERROR ERROR_DS_NO_SERVER_OBJECT;
    public static WIN32_ERROR ERROR_DS_NO_NTDSA_OBJECT;
    public static WIN32_ERROR ERROR_DS_NON_ASQ_SEARCH;
    public static WIN32_ERROR ERROR_DS_AUDIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE;
    public static WIN32_ERROR ERROR_DS_INVALID_SEARCH_FLAG_TUPLE;
    public static WIN32_ERROR ERROR_DS_HIERARCHY_TABLE_TOO_DEEP;
    public static WIN32_ERROR ERROR_DS_DRA_CORRUPT_UTD_VECTOR;
    public static WIN32_ERROR ERROR_DS_DRA_SECRETS_DENIED;
    public static WIN32_ERROR ERROR_DS_RESERVED_MAPI_ID;
    public static WIN32_ERROR ERROR_DS_MAPI_ID_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_DS_DRA_MISSING_KRBTGT_SECRET;
    public static WIN32_ERROR ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST;
    public static WIN32_ERROR ERROR_INVALID_USER_PRINCIPAL_NAME;
    public static WIN32_ERROR ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS;
    public static WIN32_ERROR ERROR_DS_OID_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_DRA_RECYCLED_TARGET;
    public static WIN32_ERROR ERROR_DS_DISALLOWED_NC_REDIRECT;
    public static WIN32_ERROR ERROR_DS_HIGH_ADLDS_FFL;
    public static WIN32_ERROR ERROR_DS_HIGH_DSA_VERSION;
    public static WIN32_ERROR ERROR_DS_LOW_ADLDS_FFL;
    public static WIN32_ERROR ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION;
    public static WIN32_ERROR ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED;
    public static WIN32_ERROR ERROR_INCORRECT_ACCOUNT_TYPE;
    public static WIN32_ERROR ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_MISSING_FOREST_TRUST;
    public static WIN32_ERROR ERROR_DS_VALUE_KEY_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_WEAK_WHFBKEY_BLOCKED;
    public static WIN32_ERROR ERROR_DS_PER_ATTRIBUTE_AUTHZ_FAILED_DURING_ADD;
    public static WIN32_ERROR ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_POLICY_CONTROLLED_ACCOUNT;
    public static WIN32_ERROR ERROR_LAPS_LEGACY_SCHEMA_MISSING;
    public static WIN32_ERROR ERROR_LAPS_SCHEMA_MISSING;
    public static WIN32_ERROR ERROR_LAPS_ENCRYPTION_REQUIRES_2016_DFL;
    public static WIN32_ERROR DNS_ERROR_RESPONSE_CODES_BASE;
    public static WIN32_ERROR DNS_ERROR_RCODE_NO_ERROR;
    public static WIN32_ERROR DNS_ERROR_MASK;
    public static WIN32_ERROR DNS_ERROR_RCODE_FORMAT_ERROR;
    public static WIN32_ERROR DNS_ERROR_RCODE_SERVER_FAILURE;
    public static WIN32_ERROR DNS_ERROR_RCODE_NAME_ERROR;
    public static WIN32_ERROR DNS_ERROR_RCODE_NOT_IMPLEMENTED;
    public static WIN32_ERROR DNS_ERROR_RCODE_REFUSED;
    public static WIN32_ERROR DNS_ERROR_RCODE_YXDOMAIN;
    public static WIN32_ERROR DNS_ERROR_RCODE_YXRRSET;
    public static WIN32_ERROR DNS_ERROR_RCODE_NXRRSET;
    public static WIN32_ERROR DNS_ERROR_RCODE_NOTAUTH;
    public static WIN32_ERROR DNS_ERROR_RCODE_NOTZONE;
    public static WIN32_ERROR DNS_ERROR_RCODE_BADSIG;
    public static WIN32_ERROR DNS_ERROR_RCODE_BADKEY;
    public static WIN32_ERROR DNS_ERROR_RCODE_BADTIME;
    public static WIN32_ERROR DNS_ERROR_RCODE_LAST;
    public static WIN32_ERROR DNS_ERROR_DNSSEC_BASE;
    public static WIN32_ERROR DNS_ERROR_KEYMASTER_REQUIRED;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE;
    public static WIN32_ERROR DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1;
    public static WIN32_ERROR DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS;
    public static WIN32_ERROR DNS_ERROR_UNSUPPORTED_ALGORITHM;
    public static WIN32_ERROR DNS_ERROR_INVALID_KEY_SIZE;
    public static WIN32_ERROR DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE;
    public static WIN32_ERROR DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION;
    public static WIN32_ERROR DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR;
    public static WIN32_ERROR DNS_ERROR_UNEXPECTED_CNG_ERROR;
    public static WIN32_ERROR DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION;
    public static WIN32_ERROR DNS_ERROR_KSP_NOT_ACCESSIBLE;
    public static WIN32_ERROR DNS_ERROR_TOO_MANY_SKDS;
    public static WIN32_ERROR DNS_ERROR_INVALID_ROLLOVER_PERIOD;
    public static WIN32_ERROR DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET;
    public static WIN32_ERROR DNS_ERROR_ROLLOVER_IN_PROGRESS;
    public static WIN32_ERROR DNS_ERROR_STANDBY_KEY_NOT_PRESENT;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_ZSK;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD;
    public static WIN32_ERROR DNS_ERROR_ROLLOVER_ALREADY_QUEUED;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE;
    public static WIN32_ERROR DNS_ERROR_BAD_KEYMASTER;
    public static WIN32_ERROR DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD;
    public static WIN32_ERROR DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT;
    public static WIN32_ERROR DNS_ERROR_DNSSEC_IS_DISABLED;
    public static WIN32_ERROR DNS_ERROR_INVALID_XML;
    public static WIN32_ERROR DNS_ERROR_NO_VALID_TRUST_ANCHORS;
    public static WIN32_ERROR DNS_ERROR_ROLLOVER_NOT_POKEABLE;
    public static WIN32_ERROR DNS_ERROR_NSEC3_NAME_COLLISION;
    public static WIN32_ERROR DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1;
    public static WIN32_ERROR DNS_ERROR_PACKET_FMT_BASE;
    public static WIN32_ERROR DNS_ERROR_BAD_PACKET;
    public static WIN32_ERROR DNS_ERROR_NO_PACKET;
    public static WIN32_ERROR DNS_ERROR_RCODE;
    public static WIN32_ERROR DNS_ERROR_UNSECURE_PACKET;
    public static WIN32_ERROR DNS_ERROR_NO_MEMORY;
    public static WIN32_ERROR DNS_ERROR_INVALID_NAME;
    public static WIN32_ERROR DNS_ERROR_INVALID_DATA;
    public static WIN32_ERROR DNS_ERROR_GENERAL_API_BASE;
    public static WIN32_ERROR DNS_ERROR_INVALID_TYPE;
    public static WIN32_ERROR DNS_ERROR_INVALID_IP_ADDRESS;
    public static WIN32_ERROR DNS_ERROR_INVALID_PROPERTY;
    public static WIN32_ERROR DNS_ERROR_TRY_AGAIN_LATER;
    public static WIN32_ERROR DNS_ERROR_NOT_UNIQUE;
    public static WIN32_ERROR DNS_ERROR_NON_RFC_NAME;
    public static WIN32_ERROR DNS_ERROR_INVALID_NAME_CHAR;
    public static WIN32_ERROR DNS_ERROR_NUMERIC_NAME;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION;
    public static WIN32_ERROR DNS_ERROR_CANNOT_FIND_ROOT_HINTS;
    public static WIN32_ERROR DNS_ERROR_INCONSISTENT_ROOT_HINTS;
    public static WIN32_ERROR DNS_ERROR_DWORD_VALUE_TOO_SMALL;
    public static WIN32_ERROR DNS_ERROR_DWORD_VALUE_TOO_LARGE;
    public static WIN32_ERROR DNS_ERROR_BACKGROUND_LOADING;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_RODC;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_UNDER_DNAME;
    public static WIN32_ERROR DNS_ERROR_DELEGATION_REQUIRED;
    public static WIN32_ERROR DNS_ERROR_INVALID_POLICY_TABLE;
    public static WIN32_ERROR DNS_ERROR_ADDRESS_REQUIRED;
    public static WIN32_ERROR DNS_ERROR_ZONE_BASE;
    public static WIN32_ERROR DNS_ERROR_ZONE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_NO_ZONE_INFO;
    public static WIN32_ERROR DNS_ERROR_INVALID_ZONE_OPERATION;
    public static WIN32_ERROR DNS_ERROR_ZONE_CONFIGURATION_ERROR;
    public static WIN32_ERROR DNS_ERROR_ZONE_HAS_NO_SOA_RECORD;
    public static WIN32_ERROR DNS_ERROR_ZONE_HAS_NO_NS_RECORDS;
    public static WIN32_ERROR DNS_ERROR_ZONE_LOCKED;
    public static WIN32_ERROR DNS_ERROR_ZONE_CREATION_FAILED;
    public static WIN32_ERROR DNS_ERROR_ZONE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_AUTOZONE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_INVALID_ZONE_TYPE;
    public static WIN32_ERROR DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP;
    public static WIN32_ERROR DNS_ERROR_ZONE_NOT_SECONDARY;
    public static WIN32_ERROR DNS_ERROR_NEED_SECONDARY_ADDRESSES;
    public static WIN32_ERROR DNS_ERROR_WINS_INIT_FAILED;
    public static WIN32_ERROR DNS_ERROR_NEED_WINS_SERVERS;
    public static WIN32_ERROR DNS_ERROR_NBSTAT_INIT_FAILED;
    public static WIN32_ERROR DNS_ERROR_SOA_DELETE_INVALID;
    public static WIN32_ERROR DNS_ERROR_FORWARDER_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_ZONE_REQUIRES_MASTER_IP;
    public static WIN32_ERROR DNS_ERROR_ZONE_IS_SHUTDOWN;
    public static WIN32_ERROR DNS_ERROR_ZONE_LOCKED_FOR_SIGNING;
    public static WIN32_ERROR DNS_ERROR_DATAFILE_BASE;
    public static WIN32_ERROR DNS_ERROR_PRIMARY_REQUIRES_DATAFILE;
    public static WIN32_ERROR DNS_ERROR_INVALID_DATAFILE_NAME;
    public static WIN32_ERROR DNS_ERROR_DATAFILE_OPEN_FAILURE;
    public static WIN32_ERROR DNS_ERROR_FILE_WRITEBACK_FAILED;
    public static WIN32_ERROR DNS_ERROR_DATAFILE_PARSING;
    public static WIN32_ERROR DNS_ERROR_DATABASE_BASE;
    public static WIN32_ERROR DNS_ERROR_RECORD_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_RECORD_FORMAT;
    public static WIN32_ERROR DNS_ERROR_NODE_CREATION_FAILED;
    public static WIN32_ERROR DNS_ERROR_UNKNOWN_RECORD_TYPE;
    public static WIN32_ERROR DNS_ERROR_RECORD_TIMED_OUT;
    public static WIN32_ERROR DNS_ERROR_NAME_NOT_IN_ZONE;
    public static WIN32_ERROR DNS_ERROR_CNAME_LOOP;
    public static WIN32_ERROR DNS_ERROR_NODE_IS_CNAME;
    public static WIN32_ERROR DNS_ERROR_CNAME_COLLISION;
    public static WIN32_ERROR DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT;
    public static WIN32_ERROR DNS_ERROR_RECORD_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_SECONDARY_DATA;
    public static WIN32_ERROR DNS_ERROR_NO_CREATE_CACHE_DATA;
    public static WIN32_ERROR DNS_ERROR_NAME_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DS_UNAVAILABLE;
    public static WIN32_ERROR DNS_ERROR_DS_ZONE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE;
    public static WIN32_ERROR DNS_ERROR_NODE_IS_DNAME;
    public static WIN32_ERROR DNS_ERROR_DNAME_COLLISION;
    public static WIN32_ERROR DNS_ERROR_ALIAS_LOOP;
    public static WIN32_ERROR DNS_ERROR_OPERATION_BASE;
    public static WIN32_ERROR DNS_ERROR_AXFR;
    public static WIN32_ERROR DNS_ERROR_SECURE_BASE;
    public static WIN32_ERROR DNS_ERROR_SETUP_BASE;
    public static WIN32_ERROR DNS_ERROR_NO_TCPIP;
    public static WIN32_ERROR DNS_ERROR_NO_DNS_SERVERS;
    public static WIN32_ERROR DNS_ERROR_DP_BASE;
    public static WIN32_ERROR DNS_ERROR_DP_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DP_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_DP_NOT_ENLISTED;
    public static WIN32_ERROR DNS_ERROR_DP_ALREADY_ENLISTED;
    public static WIN32_ERROR DNS_ERROR_DP_NOT_AVAILABLE;
    public static WIN32_ERROR DNS_ERROR_DP_FSMO_ERROR;
    public static WIN32_ERROR DNS_ERROR_RRL_NOT_ENABLED;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_WINDOW_SIZE;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_IPV4_PREFIX;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_IPV6_PREFIX;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_TC_RATE;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_LEAK_RATE;
    public static WIN32_ERROR DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE;
    public static WIN32_ERROR DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_VIRTUALIZATION_TREE_LOCKED;
    public static WIN32_ERROR DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME;
    public static WIN32_ERROR DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DEFAULT_ZONESCOPE;
    public static WIN32_ERROR DNS_ERROR_INVALID_ZONESCOPE_NAME;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES;
    public static WIN32_ERROR DNS_ERROR_LOAD_ZONESCOPE_FAILED;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED;
    public static WIN32_ERROR DNS_ERROR_INVALID_SCOPE_NAME;
    public static WIN32_ERROR DNS_ERROR_SCOPE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DEFAULT_SCOPE;
    public static WIN32_ERROR DNS_ERROR_INVALID_SCOPE_OPERATION;
    public static WIN32_ERROR DNS_ERROR_SCOPE_LOCKED;
    public static WIN32_ERROR DNS_ERROR_SCOPE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_POLICY_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_POLICY_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_SETTINGS;
    public static WIN32_ERROR DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED;
    public static WIN32_ERROR DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_SUBNET_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_SUBNET_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_POLICY_LOCKED;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_WEIGHT;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_NAME;
    public static WIN32_ERROR DNS_ERROR_POLICY_MISSING_CRITERIA;
    public static WIN32_ERROR DNS_ERROR_INVALID_CLIENT_SUBNET_NAME;
    public static WIN32_ERROR DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID;
    public static WIN32_ERROR DNS_ERROR_POLICY_SCOPE_MISSING;
    public static WIN32_ERROR DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED;
    public static WIN32_ERROR DNS_ERROR_SERVERSCOPE_IS_REFERENCED;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_IS_REFERENCED;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_IN_USE;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_IN_USE;
    public static WIN32_ERROR ERROR_IPSEC_MM_FILTER_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_MM_FILTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_TRANSPORT_FILTER_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_IN_USE;
    public static WIN32_ERROR ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_TUNNEL_FILTER_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_FILTER_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEG_STATUS_BEGIN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_AUTH_FAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ATTRIB_FAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEGOTIATION_PENDING;
    public static WIN32_ERROR ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_TIMED_OUT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_CERT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SA_DELETED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SA_REAPED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_ACQUIRE_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_ACQUIRE_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QUEUE_DROP_MM;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DROP_NO_RESPONSE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_DELAY_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_DELAY_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ERROR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CRL_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_KEY_USAGE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_CERT_TYPE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_PRIVATE_KEY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DH_FAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HEADER;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_POLICY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_SIGNATURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_KERBEROS_ERROR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_PUBLIC_KEY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_SA;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_PROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_TRANS;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_KE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_ID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_CERT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_HASH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_SIG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_NONCE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_DELETE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_PAYLOAD;
    public static WIN32_ERROR ERROR_IPSEC_IKE_LOAD_SOFT_SA;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_COOKIE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_PEER_CERT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PEER_CRL_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_POLICY_CHANGE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_MM_POLICY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NOTCBPRIV;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SECLOADFAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_FAILSSPINIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_FAILQUERYSSP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SRVACQFAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SRVQUERYCRED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_GETSPIFAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_FILTER;
    public static WIN32_ERROR ERROR_IPSEC_IKE_OUT_OF_MEMORY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_POLICY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_UNKNOWN_DOI;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_SITUATION;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DH_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_GROUP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ENCRYPT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DECRYPT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_POLICY_MATCH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_UNSUPPORTED_ID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HASH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HASH_ALG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HASH_SIZE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_AUTH_ALG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_SIG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_LOAD_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_RPC_DELETE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_BENIGN_REINIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_LIMIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEGOTIATION_DISABLED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_LIMIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_EXPIRED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DOS_COOKIE_SENT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CGA_AUTH_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_NATOA;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_MM_FOR_QM;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_EXPIRED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_TOO_MANY_FILTERS;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEG_STATUS_END;
    public static WIN32_ERROR ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING;
    public static WIN32_ERROR ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING;
    public static WIN32_ERROR ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS;
    public static WIN32_ERROR ERROR_IPSEC_IKE_RATELIMIT_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END;
    public static WIN32_ERROR ERROR_IPSEC_BAD_SPI;
    public static WIN32_ERROR ERROR_IPSEC_SA_LIFETIME_EXPIRED;
    public static WIN32_ERROR ERROR_IPSEC_WRONG_SA;
    public static WIN32_ERROR ERROR_IPSEC_REPLAY_CHECK_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_INVALID_PACKET;
    public static WIN32_ERROR ERROR_IPSEC_INTEGRITY_CHECK_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_CLEAR_TEXT_DROP;
    public static WIN32_ERROR ERROR_IPSEC_AUTH_FIREWALL_DROP;
    public static WIN32_ERROR ERROR_IPSEC_THROTTLE_DROP;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_BLOCK;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_RECEIVED_MULTICAST;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_INVALID_PACKET;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_MAX_ENTRIES;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES;
    public static WIN32_ERROR ERROR_SXS_SECTION_NOT_FOUND;
    public static WIN32_ERROR ERROR_SXS_CANT_GEN_ACTCTX;
    public static WIN32_ERROR ERROR_SXS_INVALID_ACTCTXDATA_FORMAT;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_NOT_FOUND;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_FORMAT_ERROR;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_PARSE_ERROR;
    public static WIN32_ERROR ERROR_SXS_ACTIVATION_CONTEXT_DISABLED;
    public static WIN32_ERROR ERROR_SXS_KEY_NOT_FOUND;
    public static WIN32_ERROR ERROR_SXS_VERSION_CONFLICT;
    public static WIN32_ERROR ERROR_SXS_WRONG_SECTION_TYPE;
    public static WIN32_ERROR ERROR_SXS_THREAD_QUERIES_DISABLED;
    public static WIN32_ERROR ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET;
    public static WIN32_ERROR ERROR_SXS_UNKNOWN_ENCODING_GROUP;
    public static WIN32_ERROR ERROR_SXS_UNKNOWN_ENCODING;
    public static WIN32_ERROR ERROR_SXS_INVALID_XML_NAMESPACE_URI;
    public static WIN32_ERROR ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE;
    public static WIN32_ERROR ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_DLL_NAME;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_CLSID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_IID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_TLBID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_PROGID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_ASSEMBLY_NAME;
    public static WIN32_ERROR ERROR_SXS_FILE_HASH_MISMATCH;
    public static WIN32_ERROR ERROR_SXS_POLICY_PARSE_ERROR;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGQUOTE;
    public static WIN32_ERROR ERROR_SXS_XML_E_COMMENTSYNTAX;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADSTARTNAMECHAR;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADNAMECHAR;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADCHARINSTRING;
    public static WIN32_ERROR ERROR_SXS_XML_E_XMLDECLSYNTAX;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADCHARDATA;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGWHITESPACE;
    public static WIN32_ERROR ERROR_SXS_XML_E_EXPECTINGTAGEND;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGSEMICOLON;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNBALANCEDPAREN;
    public static WIN32_ERROR ERROR_SXS_XML_E_INTERNALERROR;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INCOMPLETE_ENCODING;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSING_PAREN;
    public static WIN32_ERROR ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE;
    public static WIN32_ERROR ERROR_SXS_XML_E_MULTIPLE_COLONS;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_DECIMAL;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_HEXIDECIMAL;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_UNICODE;
    public static WIN32_ERROR ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTEDENDTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_DUPLICATEATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_XML_E_MULTIPLEROOTS;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALIDATROOTLEVEL;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADXMLDECL;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGROOT;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTEDEOF;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADPEREFINSUBSET;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDSTARTTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDENDTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDSTRING;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDCOMMENT;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDDECL;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDCDATA;
    public static WIN32_ERROR ERROR_SXS_XML_E_RESERVEDNAMESPACE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALIDENCODING;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALIDSWITCH;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADXMLCASE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_STANDALONE;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTED_STANDALONE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_VERSION;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGEQUALS;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_RECOVERY_FAILED;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_CATALOG_NOT_VALID;
    public static WIN32_ERROR ERROR_SXS_UNTRANSLATABLE_HRESULT;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING;
    public static WIN32_ERROR ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_MISSING;
    public static WIN32_ERROR ERROR_SXS_CORRUPT_ACTIVATION_STACK;
    public static WIN32_ERROR ERROR_SXS_CORRUPTION;
    public static WIN32_ERROR ERROR_SXS_EARLY_DEACTIVATION;
    public static WIN32_ERROR ERROR_SXS_INVALID_DEACTIVATION;
    public static WIN32_ERROR ERROR_SXS_MULTIPLE_DEACTIVATION;
    public static WIN32_ERROR ERROR_SXS_PROCESS_TERMINATION_REQUESTED;
    public static WIN32_ERROR ERROR_SXS_RELEASE_ACTIVATION_CONTEXT;
    public static WIN32_ERROR ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY;
    public static WIN32_ERROR ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE;
    public static WIN32_ERROR ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME;
    public static WIN32_ERROR ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_IDENTITY_PARSE_ERROR;
    public static WIN32_ERROR ERROR_MALFORMED_SUBSTITUTION_STRING;
    public static WIN32_ERROR ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN;
    public static WIN32_ERROR ERROR_UNMAPPED_SUBSTITUTION_STRING;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_NOT_LOCKED;
    public static WIN32_ERROR ERROR_SXS_COMPONENT_STORE_CORRUPT;
    public static WIN32_ERROR ERROR_ADVANCED_INSTALLER_FAILED;
    public static WIN32_ERROR ERROR_XML_ENCODING_MISMATCH;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT;
    public static WIN32_ERROR ERROR_SXS_IDENTITIES_DIFFERENT;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT;
    public static WIN32_ERROR ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_TOO_BIG;
    public static WIN32_ERROR ERROR_SXS_SETTING_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE;
    public static WIN32_ERROR ERROR_SMI_PRIMITIVE_INSTALLER_FAILED;
    public static WIN32_ERROR ERROR_GENERIC_COMMAND_FAILED;
    public static WIN32_ERROR ERROR_SXS_FILE_HASH_MISSING;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS;
    public static WIN32_ERROR ERROR_EVT_INVALID_CHANNEL_PATH;
    public static WIN32_ERROR ERROR_EVT_INVALID_QUERY;
    public static WIN32_ERROR ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_INVALID_PUBLISHER_NAME;
    public static WIN32_ERROR ERROR_EVT_INVALID_EVENT_DATA;
    public static WIN32_ERROR ERROR_EVT_CHANNEL_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_MALFORMED_XML_TEXT;
    public static WIN32_ERROR ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL;
    public static WIN32_ERROR ERROR_EVT_CONFIGURATION_ERROR;
    public static WIN32_ERROR ERROR_EVT_QUERY_RESULT_STALE;
    public static WIN32_ERROR ERROR_EVT_QUERY_RESULT_INVALID_POSITION;
    public static WIN32_ERROR ERROR_EVT_NON_VALIDATING_MSXML;
    public static WIN32_ERROR ERROR_EVT_FILTER_ALREADYSCOPED;
    public static WIN32_ERROR ERROR_EVT_FILTER_NOTELTSET;
    public static WIN32_ERROR ERROR_EVT_FILTER_INVARG;
    public static WIN32_ERROR ERROR_EVT_FILTER_INVTEST;
    public static WIN32_ERROR ERROR_EVT_FILTER_INVTYPE;
    public static WIN32_ERROR ERROR_EVT_FILTER_PARSEERR;
    public static WIN32_ERROR ERROR_EVT_FILTER_UNSUPPORTEDOP;
    public static WIN32_ERROR ERROR_EVT_FILTER_UNEXPECTEDTOKEN;
    public static WIN32_ERROR ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL;
    public static WIN32_ERROR ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE;
    public static WIN32_ERROR ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE;
    public static WIN32_ERROR ERROR_EVT_CHANNEL_CANNOT_ACTIVATE;
    public static WIN32_ERROR ERROR_EVT_FILTER_TOO_COMPLEX;
    public static WIN32_ERROR ERROR_EVT_MESSAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_MESSAGE_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_UNRESOLVED_VALUE_INSERT;
    public static WIN32_ERROR ERROR_EVT_UNRESOLVED_PARAMETER_INSERT;
    public static WIN32_ERROR ERROR_EVT_MAX_INSERTS_REACHED;
    public static WIN32_ERROR ERROR_EVT_EVENT_DEFINITION_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_VERSION_TOO_OLD;
    public static WIN32_ERROR ERROR_EVT_VERSION_TOO_NEW;
    public static WIN32_ERROR ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY;
    public static WIN32_ERROR ERROR_EVT_PUBLISHER_DISABLED;
    public static WIN32_ERROR ERROR_EVT_FILTER_OUT_OF_RANGE;
    public static WIN32_ERROR ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE;
    public static WIN32_ERROR ERROR_EC_LOG_DISABLED;
    public static WIN32_ERROR ERROR_EC_CIRCULAR_FORWARDING;
    public static WIN32_ERROR ERROR_EC_CREDSTORE_FULL;
    public static WIN32_ERROR ERROR_EC_CRED_NOT_FOUND;
    public static WIN32_ERROR ERROR_EC_NO_ACTIVE_CHANNEL;
    public static WIN32_ERROR ERROR_MUI_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_MUI_INVALID_FILE;
    public static WIN32_ERROR ERROR_MUI_INVALID_RC_CONFIG;
    public static WIN32_ERROR ERROR_MUI_INVALID_LOCALE_NAME;
    public static WIN32_ERROR ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME;
    public static WIN32_ERROR ERROR_MUI_FILE_NOT_LOADED;
    public static WIN32_ERROR ERROR_RESOURCE_ENUM_USER_STOP;
    public static WIN32_ERROR ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME;
    public static WIN32_ERROR ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE;
    public static WIN32_ERROR ERROR_MRM_INVALID_PRICONFIG;
    public static WIN32_ERROR ERROR_MRM_INVALID_FILE_TYPE;
    public static WIN32_ERROR ERROR_MRM_UNKNOWN_QUALIFIER;
    public static WIN32_ERROR ERROR_MRM_INVALID_QUALIFIER_VALUE;
    public static WIN32_ERROR ERROR_MRM_NO_CANDIDATE;
    public static WIN32_ERROR ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE;
    public static WIN32_ERROR ERROR_MRM_RESOURCE_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_MRM_DUPLICATE_MAP_NAME;
    public static WIN32_ERROR ERROR_MRM_DUPLICATE_ENTRY;
    public static WIN32_ERROR ERROR_MRM_INVALID_RESOURCE_IDENTIFIER;
    public static WIN32_ERROR ERROR_MRM_FILEPATH_TOO_LONG;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE;
    public static WIN32_ERROR ERROR_MRM_INVALID_PRI_FILE;
    public static WIN32_ERROR ERROR_MRM_NAMED_RESOURCE_NOT_FOUND;
    public static WIN32_ERROR ERROR_MRM_MAP_NOT_FOUND;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_PROFILE_TYPE;
    public static WIN32_ERROR ERROR_MRM_INVALID_QUALIFIER_OPERATOR;
    public static WIN32_ERROR ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE;
    public static WIN32_ERROR ERROR_MRM_AUTOMERGE_ENABLED;
    public static WIN32_ERROR ERROR_MRM_TOO_MANY_RESOURCES;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE;
    public static WIN32_ERROR ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD;
    public static WIN32_ERROR ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST;
    public static WIN32_ERROR ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT;
    public static WIN32_ERROR ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE;
    public static WIN32_ERROR ERROR_MRM_GENERATION_COUNT_MISMATCH;
    public static WIN32_ERROR ERROR_PRI_MERGE_VERSION_MISMATCH;
    public static WIN32_ERROR ERROR_PRI_MERGE_MISSING_SCHEMA;
    public static WIN32_ERROR ERROR_PRI_MERGE_LOAD_FILE_FAILED;
    public static WIN32_ERROR ERROR_PRI_MERGE_ADD_FILE_FAILED;
    public static WIN32_ERROR ERROR_PRI_MERGE_WRITE_FILE_FAILED;
    public static WIN32_ERROR ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED;
    public static WIN32_ERROR ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED;
    public static WIN32_ERROR ERROR_PRI_MERGE_INVALID_FILE_NAME;
    public static WIN32_ERROR ERROR_MRM_PACKAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_MRM_MISSING_DEFAULT_LANGUAGE;
    public static WIN32_ERROR ERROR_MRM_SCOPE_ITEM_CONFLICT;
    public static WIN32_ERROR ERROR_MCA_INVALID_CAPABILITIES_STRING;
    public static WIN32_ERROR ERROR_MCA_INVALID_VCP_VERSION;
    public static WIN32_ERROR ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION;
    public static WIN32_ERROR ERROR_MCA_MCCS_VERSION_MISMATCH;
    public static WIN32_ERROR ERROR_MCA_UNSUPPORTED_MCCS_VERSION;
    public static WIN32_ERROR ERROR_MCA_INTERNAL_ERROR;
    public static WIN32_ERROR ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED;
    public static WIN32_ERROR ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE;
    public static WIN32_ERROR ERROR_AMBIGUOUS_SYSTEM_DEVICE;
    public static WIN32_ERROR ERROR_SYSTEM_DEVICE_NOT_FOUND;
    public static WIN32_ERROR ERROR_HASH_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_HASH_NOT_PRESENT;
    public static WIN32_ERROR ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_GPIO_CLIENT_INFORMATION_INVALID;
    public static WIN32_ERROR ERROR_GPIO_VERSION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_GPIO_INVALID_REGISTRATION_PACKET;
    public static WIN32_ERROR ERROR_GPIO_OPERATION_DENIED;
    public static WIN32_ERROR ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE;
    public static WIN32_ERROR ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED;
    public static WIN32_ERROR ERROR_CANNOT_SWITCH_RUNLEVEL;
    public static WIN32_ERROR ERROR_INVALID_RUNLEVEL_SETTING;
    public static WIN32_ERROR ERROR_RUNLEVEL_SWITCH_TIMEOUT;
    public static WIN32_ERROR ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT;
    public static WIN32_ERROR ERROR_RUNLEVEL_SWITCH_IN_PROGRESS;
    public static WIN32_ERROR ERROR_SERVICES_FAILED_AUTOSTART;
    public static WIN32_ERROR ERROR_COM_TASK_STOP_PENDING;
    public static WIN32_ERROR ERROR_INSTALL_OPEN_PACKAGE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_INSTALL_INVALID_PACKAGE;
    public static WIN32_ERROR ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_OUT_OF_DISK_SPACE;
    public static WIN32_ERROR ERROR_INSTALL_NETWORK_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_REGISTRATION_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_DEREGISTRATION_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_CANCEL;
    public static WIN32_ERROR ERROR_INSTALL_FAILED;
    public static WIN32_ERROR ERROR_REMOVE_FAILED;
    public static WIN32_ERROR ERROR_PACKAGE_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_NEEDS_REMEDIATION;
    public static WIN32_ERROR ERROR_INSTALL_PREREQUISITE_FAILED;
    public static WIN32_ERROR ERROR_PACKAGE_REPOSITORY_CORRUPTED;
    public static WIN32_ERROR ERROR_INSTALL_POLICY_FAILURE;
    public static WIN32_ERROR ERROR_PACKAGE_UPDATING;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_POLICY;
    public static WIN32_ERROR ERROR_PACKAGES_IN_USE;
    public static WIN32_ERROR ERROR_RECOVERY_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_INVALID_STAGED_SIGNATURE;
    public static WIN32_ERROR ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_DOWNGRADE;
    public static WIN32_ERROR ERROR_SYSTEM_NEEDS_REMEDIATION;
    public static WIN32_ERROR ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN;
    public static WIN32_ERROR ERROR_RESILIENCY_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING;
    public static WIN32_ERROR ERROR_PACKAGE_MOVE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_VOLUME_NOT_EMPTY;
    public static WIN32_ERROR ERROR_INSTALL_VOLUME_OFFLINE;
    public static WIN32_ERROR ERROR_INSTALL_VOLUME_CORRUPT;
    public static WIN32_ERROR ERROR_NEEDS_REGISTRATION;
    public static WIN32_ERROR ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE;
    public static WIN32_ERROR ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE;
    public static WIN32_ERROR ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM;
    public static WIN32_ERROR ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING;
    public static WIN32_ERROR ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_PACKAGE_STAGING_ONHOLD;
    public static WIN32_ERROR ERROR_INSTALL_INVALID_RELATED_SET_UPDATE;
    public static WIN32_ERROR ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF;
    public static WIN32_ERROR ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED;
    public static WIN32_ERROR ERROR_PACKAGES_REPUTATION_CHECK_FAILED;
    public static WIN32_ERROR ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT;
    public static WIN32_ERROR ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_APPINSTALLER_ACTIVATION_BLOCKED;
    public static WIN32_ERROR ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_APPX_RAW_DATA_WRITE_FAILED;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY;
    public static WIN32_ERROR ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY;
    public static WIN32_ERROR ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER;
    public static WIN32_ERROR ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED;
    public static WIN32_ERROR ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE;
    public static WIN32_ERROR ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES;
    public static WIN32_ERROR ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST;
    public static WIN32_ERROR ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT;
    public static WIN32_ERROR ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
    public static WIN32_ERROR ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
    public static WIN32_ERROR ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
    public static WIN32_ERROR ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS;
    public static WIN32_ERROR ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED;
    public static WIN32_ERROR ERROR_MACHINE_SCOPE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE;
    public static WIN32_ERROR ERROR_PACKAGE_NOT_REGISTERED_FOR_USER;
    public static WIN32_ERROR ERROR_PACKAGE_NAME_MISMATCH;
    public static WIN32_ERROR ERROR_APPINSTALLER_URI_IN_USE;
    public static WIN32_ERROR ERROR_APPINSTALLER_IS_MANAGED_BY_SYSTEM;
    public static WIN32_ERROR APPMODEL_ERROR_NO_PACKAGE;
    public static WIN32_ERROR APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT;
    public static WIN32_ERROR APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT;
    public static WIN32_ERROR APPMODEL_ERROR_NO_APPLICATION;
    public static WIN32_ERROR APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED;
    public static WIN32_ERROR APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID;
    public static WIN32_ERROR APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE;
    public static WIN32_ERROR APPMODEL_ERROR_NO_MUTABLE_DIRECTORY;
    public static WIN32_ERROR ERROR_STATE_LOAD_STORE_FAILED;
    public static WIN32_ERROR ERROR_STATE_GET_VERSION_FAILED;
    public static WIN32_ERROR ERROR_STATE_SET_VERSION_FAILED;
    public static WIN32_ERROR ERROR_STATE_STRUCTURED_RESET_FAILED;
    public static WIN32_ERROR ERROR_STATE_OPEN_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_CREATE_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_DELETE_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_READ_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_WRITE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_DELETE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_QUERY_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_READ_COMPOSITE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_ENUMERATE_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_ENUMERATE_SETTINGS_FAILED;
    public static WIN32_ERROR ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_API_UNAVAILABLE;
    public static WIN32_ERROR ERROR_NDIS_INTERFACE_CLOSING;
    public static WIN32_ERROR ERROR_NDIS_BAD_VERSION;
    public static WIN32_ERROR ERROR_NDIS_BAD_CHARACTERISTICS;
    public static WIN32_ERROR ERROR_NDIS_ADAPTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_OPEN_FAILED;
    public static WIN32_ERROR ERROR_NDIS_DEVICE_FAILED;
    public static WIN32_ERROR ERROR_NDIS_MULTICAST_FULL;
    public static WIN32_ERROR ERROR_NDIS_MULTICAST_EXISTS;
    public static WIN32_ERROR ERROR_NDIS_MULTICAST_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_REQUEST_ABORTED;
    public static WIN32_ERROR ERROR_NDIS_RESET_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NDIS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NDIS_INVALID_PACKET;
    public static WIN32_ERROR ERROR_NDIS_ADAPTER_NOT_READY;
    public static WIN32_ERROR ERROR_NDIS_INVALID_LENGTH;
    public static WIN32_ERROR ERROR_NDIS_INVALID_DATA;
    public static WIN32_ERROR ERROR_NDIS_BUFFER_TOO_SHORT;
    public static WIN32_ERROR ERROR_NDIS_INVALID_OID;
    public static WIN32_ERROR ERROR_NDIS_ADAPTER_REMOVED;
    public static WIN32_ERROR ERROR_NDIS_UNSUPPORTED_MEDIA;
    public static WIN32_ERROR ERROR_NDIS_GROUP_ADDRESS_IN_USE;
    public static WIN32_ERROR ERROR_NDIS_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_ERROR_READING_FILE;
    public static WIN32_ERROR ERROR_NDIS_ALREADY_MAPPED;
    public static WIN32_ERROR ERROR_NDIS_RESOURCE_CONFLICT;
    public static WIN32_ERROR ERROR_NDIS_MEDIA_DISCONNECTED;
    public static WIN32_ERROR ERROR_NDIS_INVALID_ADDRESS;
    public static WIN32_ERROR ERROR_NDIS_INVALID_DEVICE_REQUEST;
    public static WIN32_ERROR ERROR_NDIS_PAUSED;
    public static WIN32_ERROR ERROR_NDIS_INTERFACE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_UNSUPPORTED_REVISION;
    public static WIN32_ERROR ERROR_NDIS_INVALID_PORT;
    public static WIN32_ERROR ERROR_NDIS_INVALID_PORT_STATE;
    public static WIN32_ERROR ERROR_NDIS_LOW_POWER_STATE;
    public static WIN32_ERROR ERROR_NDIS_REINIT_REQUIRED;
    public static WIN32_ERROR ERROR_NDIS_NO_QUEUES;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED;
    public static WIN32_ERROR ERROR_NDIS_DOT11_MEDIA_IN_USE;
    public static WIN32_ERROR ERROR_NDIS_DOT11_POWER_STATE_INVALID;
    public static WIN32_ERROR ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL;
    public static WIN32_ERROR ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_NDIS_INDICATION_REQUIRED;
    public static WIN32_ERROR ERROR_NDIS_OFFLOAD_POLICY;
    public static WIN32_ERROR ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED;
    public static WIN32_ERROR ERROR_NDIS_OFFLOAD_PATH_REJECTED;
    public static WIN32_ERROR ERROR_HV_INVALID_HYPERCALL_CODE;
    public static WIN32_ERROR ERROR_HV_INVALID_HYPERCALL_INPUT;
    public static WIN32_ERROR ERROR_HV_INVALID_ALIGNMENT;
    public static WIN32_ERROR ERROR_HV_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_HV_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_HV_INVALID_PARTITION_STATE;
    public static WIN32_ERROR ERROR_HV_OPERATION_DENIED;
    public static WIN32_ERROR ERROR_HV_UNKNOWN_PROPERTY;
    public static WIN32_ERROR ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_MEMORY;
    public static WIN32_ERROR ERROR_HV_PARTITION_TOO_DEEP;
    public static WIN32_ERROR ERROR_HV_INVALID_PARTITION_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_VP_INDEX;
    public static WIN32_ERROR ERROR_HV_INVALID_PORT_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_CONNECTION_ID;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_BUFFERS;
    public static WIN32_ERROR ERROR_HV_NOT_ACKNOWLEDGED;
    public static WIN32_ERROR ERROR_HV_INVALID_VP_STATE;
    public static WIN32_ERROR ERROR_HV_ACKNOWLEDGED;
    public static WIN32_ERROR ERROR_HV_INVALID_SAVE_RESTORE_STATE;
    public static WIN32_ERROR ERROR_HV_INVALID_SYNIC_STATE;
    public static WIN32_ERROR ERROR_HV_OBJECT_IN_USE;
    public static WIN32_ERROR ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO;
    public static WIN32_ERROR ERROR_HV_NO_DATA;
    public static WIN32_ERROR ERROR_HV_INACTIVE;
    public static WIN32_ERROR ERROR_HV_NO_RESOURCES;
    public static WIN32_ERROR ERROR_HV_FEATURE_UNAVAILABLE;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_BUFFER;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS;
    public static WIN32_ERROR ERROR_HV_CPUID_FEATURE_VALIDATION;
    public static WIN32_ERROR ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION;
    public static WIN32_ERROR ERROR_HV_PROCESSOR_STARTUP_TIMEOUT;
    public static WIN32_ERROR ERROR_HV_SMX_ENABLED;
    public static WIN32_ERROR ERROR_HV_INVALID_LP_INDEX;
    public static WIN32_ERROR ERROR_HV_INVALID_REGISTER_VALUE;
    public static WIN32_ERROR ERROR_HV_INVALID_VTL_STATE;
    public static WIN32_ERROR ERROR_HV_NX_NOT_DETECTED;
    public static WIN32_ERROR ERROR_HV_INVALID_DEVICE_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_DEVICE_STATE;
    public static WIN32_ERROR ERROR_HV_PENDING_PAGE_REQUESTS;
    public static WIN32_ERROR ERROR_HV_PAGE_REQUEST_INVALID;
    public static WIN32_ERROR ERROR_HV_INVALID_CPU_GROUP_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_CPU_GROUP_STATE;
    public static WIN32_ERROR ERROR_HV_OPERATION_FAILED;
    public static WIN32_ERROR ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_ROOT_MEMORY;
    public static WIN32_ERROR ERROR_HV_EVENT_BUFFER_ALREADY_FREED;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY;
    public static WIN32_ERROR ERROR_HV_DEVICE_NOT_IN_DOMAIN;
    public static WIN32_ERROR ERROR_HV_NESTED_VM_EXIT;
    public static WIN32_ERROR ERROR_HV_MSR_ACCESS_FAILED;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_ROOT_MEMORY;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_ROOT_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_ROOT_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_NOT_PRESENT;
    public static WIN32_ERROR ERROR_VID_DUPLICATE_HANDLER;
    public static WIN32_ERROR ERROR_VID_TOO_MANY_HANDLERS;
    public static WIN32_ERROR ERROR_VID_QUEUE_FULL;
    public static WIN32_ERROR ERROR_VID_HANDLER_NOT_PRESENT;
    public static WIN32_ERROR ERROR_VID_INVALID_OBJECT_NAME;
    public static WIN32_ERROR ERROR_VID_PARTITION_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_VID_PARTITION_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_VID_PARTITION_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_VID_PARTITION_NAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT;
    public static WIN32_ERROR ERROR_VID_MB_STILL_REFERENCED;
    public static WIN32_ERROR ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED;
    public static WIN32_ERROR ERROR_VID_INVALID_NUMA_SETTINGS;
    public static WIN32_ERROR ERROR_VID_INVALID_NUMA_NODE_INDEX;
    public static WIN32_ERROR ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED;
    public static WIN32_ERROR ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE;
    public static WIN32_ERROR ERROR_VID_PAGE_RANGE_OVERFLOW;
    public static WIN32_ERROR ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE;
    public static WIN32_ERROR ERROR_VID_INVALID_GPA_RANGE_HANDLE;
    public static WIN32_ERROR ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE;
    public static WIN32_ERROR ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED;
    public static WIN32_ERROR ERROR_VID_INVALID_PPM_HANDLE;
    public static WIN32_ERROR ERROR_VID_MBPS_ARE_LOCKED;
    public static WIN32_ERROR ERROR_VID_MESSAGE_QUEUE_CLOSED;
    public static WIN32_ERROR ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_VID_STOP_PENDING;
    public static WIN32_ERROR ERROR_VID_INVALID_PROCESSOR_STATE;
    public static WIN32_ERROR ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT;
    public static WIN32_ERROR ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED;
    public static WIN32_ERROR ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET;
    public static WIN32_ERROR ERROR_VID_MMIO_RANGE_DESTROYED;
    public static WIN32_ERROR ERROR_VID_INVALID_CHILD_GPA_PAGE_SET;
    public static WIN32_ERROR ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED;
    public static WIN32_ERROR ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL;
    public static WIN32_ERROR ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE;
    public static WIN32_ERROR ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT;
    public static WIN32_ERROR ERROR_VID_SAVED_STATE_CORRUPT;
    public static WIN32_ERROR ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM;
    public static WIN32_ERROR ERROR_VID_SAVED_STATE_INCOMPATIBLE;
    public static WIN32_ERROR ERROR_VID_VTL_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_RESERVE;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_PHYSICAL_BUFFER;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_HV_DEPOSIT;
    public static WIN32_ERROR ERROR_VID_MEMORY_TYPE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_WITHDRAW;
    public static WIN32_ERROR ERROR_VID_PROCESS_ALREADY_SET;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TERMINATED_DURING_START;
    public static WIN32_ERROR ERROR_VMCOMPUTE_IMAGE_MISMATCH;
    public static WIN32_ERROR ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_OPERATION_PENDING;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS;
    public static WIN32_ERROR ERROR_VMCOMPUTE_INVALID_STATE;
    public static WIN32_ERROR ERROR_VMCOMPUTE_UNEXPECTED_EXIT;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TERMINATED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_CONNECT_FAILED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TIMEOUT;
    public static WIN32_ERROR ERROR_VMCOMPUTE_CONNECTION_CLOSED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_UNKNOWN_MESSAGE;
    public static WIN32_ERROR ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION;
    public static WIN32_ERROR ERROR_VMCOMPUTE_INVALID_JSON;
    public static WIN32_ERROR ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND;
    public static WIN32_ERROR ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_PROTOCOL_ERROR;
    public static WIN32_ERROR ERROR_VMCOMPUTE_INVALID_LAYER;
    public static WIN32_ERROR ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED;
    public static WIN32_ERROR ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED;
    public static WIN32_ERROR ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_VSMB_SAVED_STATE_CORRUPT;
    public static WIN32_ERROR ERROR_VOLMGR_INCOMPLETE_REGENERATION;
    public static WIN32_ERROR ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION;
    public static WIN32_ERROR ERROR_VOLMGR_DATABASE_FULL;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_DYNAMIC;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_ID_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAST_VOTER;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_MISSING;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_NOT_EMPTY;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_REVECTORING_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_SET_NOT_CONTAINED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES;
    public static WIN32_ERROR ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_ALREADY_USED;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH;
    public static WIN32_ERROR ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_IN_SYNC;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_INDEX_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_MISSING;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_NOT_DETACHED;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_REGENERATING;
    public static WIN32_ERROR ERROR_VOLMGR_ALL_DISKS_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_NO_REGISTERED_USERS;
    public static WIN32_ERROR ERROR_VOLMGR_NO_SUCH_USER;
    public static WIN32_ERROR ERROR_VOLMGR_NOTIFICATION_RESET;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_ID_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_NAME_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_OFFLINE;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_HAS_QUORUM;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_WITHOUT_QUORUM;
    public static WIN32_ERROR ERROR_VOLMGR_PARTITION_STYLE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PARTITION_UPDATE_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_IN_SYNC;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_INDEX_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_INDEX_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_LAST_ACTIVE;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_MISSING;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_REGENERATING;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_TYPE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_NOT_RAID5;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_NOT_SIMPLE;
    public static WIN32_ERROR ERROR_VOLMGR_STRUCTURE_SIZE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS;
    public static WIN32_ERROR ERROR_VOLMGR_TRANSACTION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_ID_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_LENGTH_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_NOT_MIRRORED;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_NOT_RETAINED;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_OFFLINE;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_RETAINED;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE;
    public static WIN32_ERROR ERROR_VOLMGR_BAD_BOOT_DISK;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_CONFIG_OFFLINE;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_CONFIG_ONLINE;
    public static WIN32_ERROR ERROR_VOLMGR_NOT_PRIMARY_PACK;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_MIRRORED;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED;
    public static WIN32_ERROR ERROR_VOLMGR_NO_VALID_LOG_COPIES;
    public static WIN32_ERROR ERROR_VOLMGR_PRIMARY_PACK_PRESENT;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_MIRROR_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLMGR_RAID5_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED;
    public static WIN32_ERROR ERROR_BCD_TOO_MANY_ELEMENTS;
    public static WIN32_ERROR ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED;
    public static WIN32_ERROR ERROR_VHD_DRIVE_FOOTER_MISSING;
    public static WIN32_ERROR ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_DRIVE_FOOTER_CORRUPT;
    public static WIN32_ERROR ERROR_VHD_FORMAT_UNKNOWN;
    public static WIN32_ERROR ERROR_VHD_FORMAT_UNSUPPORTED_VERSION;
    public static WIN32_ERROR ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION;
    public static WIN32_ERROR ERROR_VHD_SPARSE_HEADER_CORRUPT;
    public static WIN32_ERROR ERROR_VHD_BLOCK_ALLOCATION_FAILURE;
    public static WIN32_ERROR ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT;
    public static WIN32_ERROR ERROR_VHD_INVALID_BLOCK_SIZE;
    public static WIN32_ERROR ERROR_VHD_BITMAP_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_PARENT_VHD_NOT_FOUND;
    public static WIN32_ERROR ERROR_VHD_CHILD_PARENT_ID_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_METADATA_READ_FAILURE;
    public static WIN32_ERROR ERROR_VHD_METADATA_WRITE_FAILURE;
    public static WIN32_ERROR ERROR_VHD_INVALID_SIZE;
    public static WIN32_ERROR ERROR_VHD_INVALID_FILE_SIZE;
    public static WIN32_ERROR ERROR_VIRTDISK_PROVIDER_NOT_FOUND;
    public static WIN32_ERROR ERROR_VIRTDISK_NOT_VIRTUAL_DISK;
    public static WIN32_ERROR ERROR_VHD_PARENT_VHD_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED;
    public static WIN32_ERROR ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT;
    public static WIN32_ERROR ERROR_VIRTUAL_DISK_LIMITATION;
    public static WIN32_ERROR ERROR_VHD_INVALID_TYPE;
    public static WIN32_ERROR ERROR_VHD_INVALID_STATE;
    public static WIN32_ERROR ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE;
    public static WIN32_ERROR ERROR_VIRTDISK_DISK_ALREADY_OWNED;
    public static WIN32_ERROR ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE;
    public static WIN32_ERROR ERROR_CTLOG_TRACKING_NOT_INITIALIZED;
    public static WIN32_ERROR ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE;
    public static WIN32_ERROR ERROR_CTLOG_VHD_CHANGED_OFFLINE;
    public static WIN32_ERROR ERROR_CTLOG_INVALID_TRACKING_STATE;
    public static WIN32_ERROR ERROR_CTLOG_INCONSISTENT_TRACKING_FILE;
    public static WIN32_ERROR ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA;
    public static WIN32_ERROR ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE;
    public static WIN32_ERROR ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE;
    public static WIN32_ERROR ERROR_VHD_METADATA_FULL;
    public static WIN32_ERROR ERROR_VHD_INVALID_CHANGE_TRACKING_ID;
    public static WIN32_ERROR ERROR_VHD_CHANGE_TRACKING_DISABLED;
    public static WIN32_ERROR ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION;
    public static WIN32_ERROR ERROR_VHD_UNEXPECTED_ID;
    public static WIN32_ERROR ERROR_QUERY_STORAGE_ERROR;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_COLLATE : Enum {
    public short value__;
    public static DEVMODE_COLLATE DMCOLLATE_FALSE;
    public static DEVMODE_COLLATE DMCOLLATE_TRUE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_COLOR : Enum {
    public short value__;
    public static DEVMODE_COLOR DMCOLOR_MONOCHROME;
    public static DEVMODE_COLOR DMCOLOR_COLOR;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_DISPLAY_FIXED_OUTPUT : Enum {
    public UInt32 value__;
    public static DEVMODE_DISPLAY_FIXED_OUTPUT DMDFO_DEFAULT;
    public static DEVMODE_DISPLAY_FIXED_OUTPUT DMDFO_STRETCH;
    public static DEVMODE_DISPLAY_FIXED_OUTPUT DMDFO_CENTER;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_DISPLAY_ORIENTATION : Enum {
    public UInt32 value__;
    public static DEVMODE_DISPLAY_ORIENTATION DMDO_DEFAULT;
    public static DEVMODE_DISPLAY_ORIENTATION DMDO_90;
    public static DEVMODE_DISPLAY_ORIENTATION DMDO_180;
    public static DEVMODE_DISPLAY_ORIENTATION DMDO_270;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_DUPLEX : Enum {
    public short value__;
    public static DEVMODE_DUPLEX DMDUP_SIMPLEX;
    public static DEVMODE_DUPLEX DMDUP_VERTICAL;
    public static DEVMODE_DUPLEX DMDUP_HORIZONTAL;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_FIELD_FLAGS : Enum {
    public UInt32 value__;
    public static DEVMODE_FIELD_FLAGS DM_SPECVERSION;
    public static DEVMODE_FIELD_FLAGS DM_ORIENTATION;
    public static DEVMODE_FIELD_FLAGS DM_PAPERSIZE;
    public static DEVMODE_FIELD_FLAGS DM_PAPERLENGTH;
    public static DEVMODE_FIELD_FLAGS DM_PAPERWIDTH;
    public static DEVMODE_FIELD_FLAGS DM_SCALE;
    public static DEVMODE_FIELD_FLAGS DM_POSITION;
    public static DEVMODE_FIELD_FLAGS DM_NUP;
    public static DEVMODE_FIELD_FLAGS DM_DISPLAYORIENTATION;
    public static DEVMODE_FIELD_FLAGS DM_COPIES;
    public static DEVMODE_FIELD_FLAGS DM_DEFAULTSOURCE;
    public static DEVMODE_FIELD_FLAGS DM_PRINTQUALITY;
    public static DEVMODE_FIELD_FLAGS DM_COLOR;
    public static DEVMODE_FIELD_FLAGS DM_DUPLEX;
    public static DEVMODE_FIELD_FLAGS DM_YRESOLUTION;
    public static DEVMODE_FIELD_FLAGS DM_TTOPTION;
    public static DEVMODE_FIELD_FLAGS DM_COLLATE;
    public static DEVMODE_FIELD_FLAGS DM_FORMNAME;
    public static DEVMODE_FIELD_FLAGS DM_LOGPIXELS;
    public static DEVMODE_FIELD_FLAGS DM_BITSPERPEL;
    public static DEVMODE_FIELD_FLAGS DM_PELSWIDTH;
    public static DEVMODE_FIELD_FLAGS DM_PELSHEIGHT;
    public static DEVMODE_FIELD_FLAGS DM_DISPLAYFLAGS;
    public static DEVMODE_FIELD_FLAGS DM_DISPLAYFREQUENCY;
    public static DEVMODE_FIELD_FLAGS DM_ICMMETHOD;
    public static DEVMODE_FIELD_FLAGS DM_ICMINTENT;
    public static DEVMODE_FIELD_FLAGS DM_MEDIATYPE;
    public static DEVMODE_FIELD_FLAGS DM_DITHERTYPE;
    public static DEVMODE_FIELD_FLAGS DM_PANNINGWIDTH;
    public static DEVMODE_FIELD_FLAGS DM_PANNINGHEIGHT;
    public static DEVMODE_FIELD_FLAGS DM_DISPLAYFIXEDOUTPUT;
    public static DEVMODE_FIELD_FLAGS DM_INTERLACED;
    public static DEVMODE_FIELD_FLAGS DM_UPDATE;
    public static DEVMODE_FIELD_FLAGS DM_COPY;
    public static DEVMODE_FIELD_FLAGS DM_PROMPT;
    public static DEVMODE_FIELD_FLAGS DM_MODIFY;
    public static DEVMODE_FIELD_FLAGS DM_IN_BUFFER;
    public static DEVMODE_FIELD_FLAGS DM_IN_PROMPT;
    public static DEVMODE_FIELD_FLAGS DM_OUT_BUFFER;
    public static DEVMODE_FIELD_FLAGS DM_OUT_DEFAULT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_TRUETYPE_OPTION : Enum {
    public short value__;
    public static DEVMODE_TRUETYPE_OPTION DMTT_BITMAP;
    public static DEVMODE_TRUETYPE_OPTION DMTT_DOWNLOAD;
    public static DEVMODE_TRUETYPE_OPTION DMTT_SUBDEV;
    public static DEVMODE_TRUETYPE_OPTION DMTT_DOWNLOAD_OUTLINE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Graphics.Gdi.DEVMODEW : ValueType {
    internal __char_32 dmDeviceName;
    internal ushort dmSpecVersion;
    internal ushort dmDriverVersion;
    internal ushort dmSize;
    internal ushort dmDriverExtra;
    internal DEVMODE_FIELD_FLAGS dmFields;
    internal _Anonymous1_e__Union Anonymous1;
    internal DEVMODE_COLOR dmColor;
    internal DEVMODE_DUPLEX dmDuplex;
    internal short dmYResolution;
    internal DEVMODE_TRUETYPE_OPTION dmTTOption;
    internal DEVMODE_COLLATE dmCollate;
    internal __char_32 dmFormName;
    internal ushort dmLogPixels;
    internal UInt32 dmBitsPerPel;
    internal UInt32 dmPelsWidth;
    internal UInt32 dmPelsHeight;
    internal _Anonymous2_e__Union Anonymous2;
    internal UInt32 dmDisplayFrequency;
    internal UInt32 dmICMMethod;
    internal UInt32 dmICMIntent;
    internal UInt32 dmMediaType;
    internal UInt32 dmDitherType;
    internal UInt32 dmReserved1;
    internal UInt32 dmReserved2;
    internal UInt32 dmPanningWidth;
    internal UInt32 dmPanningHeight;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal enum Windows.Win32.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE : Enum {
    public UInt32 value__;
    public static ENUM_DISPLAY_SETTINGS_MODE ENUM_CURRENT_SETTINGS;
    public static ENUM_DISPLAY_SETTINGS_MODE ENUM_REGISTRY_SETTINGS;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Graphics.Gdi.HDC : ValueType {
    [NativeIntegerAttribute]
internal IntPtr Value;
    internal HDC(IntPtr value);
    public static IntPtr op_Implicit(HDC value);
    public static HDC op_Explicit(IntPtr value);
    public static bool op_Equality(HDC left, HDC right);
    public static bool op_Inequality(HDC left, HDC right);
    public sealed virtual bool Equals(HDC other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Graphics.Gdi.HMONITOR : ValueType {
    [NativeIntegerAttribute]
internal IntPtr Value;
    internal HMONITOR(IntPtr value);
    public static IntPtr op_Implicit(HMONITOR value);
    public static HMONITOR op_Explicit(IntPtr value);
    public static bool op_Equality(HMONITOR left, HMONITOR right);
    public static bool op_Inequality(HMONITOR left, HMONITOR right);
    public sealed virtual bool Equals(HMONITOR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[UnmanagedFunctionPointerAttribute("1")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Graphics.Gdi.MONITORENUMPROC : MulticastDelegate {
    public MONITORENUMPROC(object object, IntPtr method);
    public virtual BOOL Invoke(HMONITOR param0, HDC param1, RECT* param2, LPARAM param3);
    public virtual IAsyncResult BeginInvoke(HMONITOR param0, HDC param1, RECT* param2, LPARAM param3, AsyncCallback callback, object object);
    public virtual BOOL EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Graphics.Gdi.MONITORINFO : ValueType {
    internal UInt32 cbSize;
    internal RECT rcMonitor;
    internal RECT rcWork;
    internal UInt32 dwFlags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal class Windows.Win32.Graphics.Gdi.MONITORINFOEXW : ValueType {
    internal MONITORINFO monitorInfo;
    internal __char_32 szDevice;
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal static class Windows.Win32.InlineArrayIndexerExtensions : object {
    [ExtensionAttribute]
internal static ReadOnlySpan`1<char> SliceAtNull(ReadOnlySpan`1<char> value);
    [ExtensionAttribute]
internal static Char& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__char_32& this, int index);
    [ExtensionAttribute]
internal static Char& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__char_64& this, int index);
    [ExtensionAttribute]
internal static Char& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__char_128& this, int index);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.106+a37a0b4b70")]
internal static class Windows.Win32.PInvoke : object {
    internal static BOOL EnumDisplayMonitors(HDC hdc, Nullable`1<RECT> lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL EnumDisplayMonitors(HDC hdc, RECT* lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);
    internal static BOOL GetMonitorInfo(HMONITOR hMonitor, MONITORINFO& lpmi);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL GetMonitorInfo(HMONITOR hMonitor, MONITORINFO* lpmi);
    internal static BOOL EnumDisplaySettings(string lpszDeviceName, ENUM_DISPLAY_SETTINGS_MODE iModeNum, DEVMODEW& lpDevMode);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL EnumDisplaySettings(PCWSTR lpszDeviceName, ENUM_DISPLAY_SETTINGS_MODE iModeNum, DEVMODEW* lpDevMode);
    internal static WIN32_ERROR GetDisplayConfigBufferSizes(QUERY_DISPLAY_CONFIG_FLAGS flags, UInt32& numPathArrayElements, UInt32& numModeInfoArrayElements);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static WIN32_ERROR GetDisplayConfigBufferSizes(QUERY_DISPLAY_CONFIG_FLAGS flags, UInt32* numPathArrayElements, UInt32* numModeInfoArrayElements);
    internal static WIN32_ERROR QueryDisplayConfig(QUERY_DISPLAY_CONFIG_FLAGS flags, UInt32& numPathArrayElements, DISPLAYCONFIG_PATH_INFO* pathArray, UInt32& numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO* modeInfoArray, DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static WIN32_ERROR QueryDisplayConfig(QUERY_DISPLAY_CONFIG_FLAGS flags, UInt32* numPathArrayElements, DISPLAYCONFIG_PATH_INFO* pathArray, UInt32* numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO* modeInfoArray, DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);
    internal static int DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER& requestPacket);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static int DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);
}
