public class AWS.Logger.AspNetCore.AWSLogger : object {
    private string _categoryName;
    private IAWSLoggerCore _core;
    private Func`3<string, LogLevel, bool> _filter;
    private Func`4<LogLevel, object, Exception, string> _customFormatter;
    private bool _includeScopes;
    [CompilerGeneratedAttribute]
private bool <IncludeLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeNewline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeException>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalScopeProvider <ScopeProvider>k__BackingField;
    public bool IncludeScopes { get; public set; }
    public bool IncludeLogLevel { get; public set; }
    public bool IncludeCategory { get; public set; }
    public bool IncludeEventId { get; public set; }
    public bool IncludeNewline { get; public set; }
    public bool IncludeException { get; public set; }
    internal IExternalScopeProvider ScopeProvider { get; internal set; }
    public AWSLogger(string categoryName, IAWSLoggerCore core, Func`3<string, LogLevel, bool> filter, Func`4<LogLevel, object, Exception, string> customFormatter);
    public bool get_IncludeScopes();
    public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLogLevel();
    [CompilerGeneratedAttribute]
public void set_IncludeLogLevel(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeCategory();
    [CompilerGeneratedAttribute]
public void set_IncludeCategory(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeEventId();
    [CompilerGeneratedAttribute]
public void set_IncludeEventId(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeNewline();
    [CompilerGeneratedAttribute]
public void set_IncludeNewline(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeException();
    [CompilerGeneratedAttribute]
public void set_IncludeException(bool value);
    [CompilerGeneratedAttribute]
internal IExternalScopeProvider get_ScopeProvider();
    [CompilerGeneratedAttribute]
internal void set_ScopeProvider(IExternalScopeProvider value);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private void GetScopeInformation(StringBuilder messageBuilder);
}
public class AWS.Logger.AspNetCore.AWSLoggerProvider : object {
    private ConcurrentDictionary`2<string, AWSLogger> _loggers;
    private IExternalScopeProvider _scopeProvider;
    private IAWSLoggerCore _core;
    private AWSLoggerConfigSection _configSection;
    private Func`4<LogLevel, object, Exception, string> _customFormatter;
    private Func`3<string, LogLevel, bool> _customFilter;
    private static string _assemblyVersion;
    private static string _userAgentString;
    private static string DEFAULT_CATEGORY_NAME;
    public AWSLoggerProvider(AWSLoggerConfig config, Func`4<LogLevel, object, Exception, string> formatter);
    public AWSLoggerProvider(AWSLoggerConfig config, LogLevel minLevel, Func`4<LogLevel, object, Exception, string> formatter);
    public AWSLoggerProvider(AWSLoggerConfig config, Func`3<string, LogLevel, bool> filter, Func`4<LogLevel, object, Exception, string> formatter);
    public AWSLoggerProvider(AWSLoggerConfigSection configSection, Func`4<LogLevel, object, Exception, string> formatter);
    public AWSLoggerProvider(AWSLoggerConfigSection configSection);
    private static AWSLoggerProvider();
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
    public static Func`3<string, LogLevel, bool> CreateLogLevelFilter(LogLevel minLevel);
    public static Func`3<string, LogLevel, bool> CreateConfigSectionFilter(IConfiguration logLevels, string categoryName);
    [IteratorStateMachineAttribute("AWS.Logger.AspNetCore.AWSLoggerProvider/<GetKeyPrefixes>d__18")]
private static IEnumerable`1<string> GetKeyPrefixes(string name);
    public static bool TryGetSwitch(string name, IConfiguration logLevels, LogLevel& level);
    public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
internal class AWS.Logger.AspNetCore.Constants : object {
    internal static bool IncludeScopesDefault;
    internal static bool IncludeLogLevelDefault;
    internal static bool IncludeCategoryDefault;
    internal static bool IncludeEventIdDefault;
    internal static bool IncludeNewlineDefault;
    internal static bool IncludeExceptionDefault;
}
internal class AWS.Logger.AspNetCore.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class AWS.Logger.AspNetCore.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    public static NullScope Instance { get; }
    private static NullScope();
    [CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Configuration.AWSLoggerConfigSection : object {
    [CompilerGeneratedAttribute]
private AWSLoggerConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <LogLevels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeNewline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeException>k__BackingField;
    internal static string LOG_GROUP;
    internal static string DISABLE_LOG_GROUP_CREATION;
    internal static string NEW_LOG_GROUP_RETENTION_IN_DAYS;
    internal static string REGION;
    internal static string SERVICEURL;
    internal static string PROFILE;
    internal static string PROFILE_LOCATION;
    internal static string BATCH_PUSH_INTERVAL;
    internal static string BATCH_PUSH_SIZE_IN_BYTES;
    internal static string LOG_LEVEL;
    internal static string MAX_QUEUED_MESSAGES;
    internal static string LOG_STREAM_NAME_SUFFIX;
    internal static string LOG_STREAM_NAME_PREFIX;
    internal static string LIBRARY_LOG_FILE_NAME;
    internal static string LIBRARY_LOG_ERRORS;
    internal static string FLUSH_TIMEOUT;
    internal static string AUTHENTICATION_REGION;
    private static string INCLUDE_LOG_LEVEL_KEY;
    private static string INCLUDE_CATEGORY_KEY;
    private static string INCLUDE_NEWLINE_KEY;
    private static string INCLUDE_EXCEPTION_KEY;
    private static string INCLUDE_EVENT_ID_KEY;
    private static string INCLUDE_SCOPES_KEY;
    public AWSLoggerConfig Config { get; public set; }
    public IConfiguration LogLevels { get; public set; }
    public bool IncludeScopes { get; public set; }
    public bool IncludeLogLevel { get; public set; }
    public bool IncludeCategory { get; public set; }
    public bool IncludeEventId { get; public set; }
    public bool IncludeNewline { get; public set; }
    public bool IncludeException { get; public set; }
    public AWSLoggerConfigSection(IConfiguration loggerConfigSection);
    [CompilerGeneratedAttribute]
public AWSLoggerConfig get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(AWSLoggerConfig value);
    [CompilerGeneratedAttribute]
public IConfiguration get_LogLevels();
    [CompilerGeneratedAttribute]
public void set_LogLevels(IConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLogLevel();
    [CompilerGeneratedAttribute]
public void set_IncludeLogLevel(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeCategory();
    [CompilerGeneratedAttribute]
public void set_IncludeCategory(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeEventId();
    [CompilerGeneratedAttribute]
public void set_IncludeEventId(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeNewline();
    [CompilerGeneratedAttribute]
public void set_IncludeNewline(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeException();
    [CompilerGeneratedAttribute]
public void set_IncludeException(bool value);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.ConfigurationSectionExtensions : object {
    private static string DEFAULT_BLOCK;
    private static string LEGACY_DEFAULT_BLOCK;
    [ExtensionAttribute]
public static AWSLoggerConfigSection GetAWSLoggingConfigSection(IConfiguration configSection, string configSectionInfoBlockName);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.AWSLoggerBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddAWSProvider(ILoggingBuilder builder, AWSLoggerConfig config, Func`4<LogLevel, object, Exception, string> formatter);
    [ExtensionAttribute]
public static ILoggingBuilder AddAWSProvider(ILoggingBuilder builder, AWSLoggerConfigSection configSection, Func`4<LogLevel, object, Exception, string> formatter);
    [ExtensionAttribute]
public static ILoggingBuilder AddAWSProvider(ILoggingBuilder builder, Func`4<LogLevel, object, Exception, string> formatter);
    private static IConfiguration GetConfiguration(IServiceCollection services);
    [ExtensionAttribute]
public static ILoggingBuilder AddAWSProvider(ILoggingBuilder builder, AWSLoggerConfig config, LogLevel minLevel);
    [ExtensionAttribute]
public static ILoggingBuilder AddAWSProvider(ILoggingBuilder builder, AWSLoggerConfig config, Func`3<string, LogLevel, bool> filter);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.AWSLoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILoggerFactory AddAWSProvider(ILoggerFactory factory, AWSLoggerConfig config, Func`4<LogLevel, object, Exception, string> formatter);
    [ExtensionAttribute]
public static ILoggerFactory AddAWSProvider(ILoggerFactory factory, AWSLoggerConfigSection configSection, Func`4<LogLevel, object, Exception, string> formatter);
    [ExtensionAttribute]
public static ILoggerFactory AddAWSProvider(ILoggerFactory factory, AWSLoggerConfig config, LogLevel minLevel);
    [ExtensionAttribute]
public static ILoggerFactory AddAWSProvider(ILoggerFactory factory, AWSLoggerConfig config, Func`3<string, LogLevel, bool> filter);
}
