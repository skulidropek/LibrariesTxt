public interface Amazon.SecretsManager.Extensions.Caching.ISecretCacheHook {
    public abstract virtual object Put(object o);
    public abstract virtual object Get(object cachedObject);
}
public interface Amazon.SecretsManager.Extensions.Caching.ISecretsManagerCache {
    public abstract virtual SecretCacheItem GetCachedSecret(string secretId);
    public abstract virtual Task`1<Byte[]> GetSecretBinary(string secretId, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetSecretString(string secretId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> RefreshNowAsync(string secretId, CancellationToken cancellationToken);
}
public class Amazon.SecretsManager.Extensions.Caching.SecretCacheConfiguration : object {
    public static ushort DEFAULT_MAX_CACHE_SIZE;
    public static string DEFAULT_VERSION_STAGE;
    public static UInt32 DEFAULT_CACHE_ITEM_TTL;
    [CompilerGeneratedAttribute]
private UInt32 <CacheItemTTL>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxCacheSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionStage>k__BackingField;
    [CompilerGeneratedAttribute]
private IAmazonSecretsManager <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private ISecretCacheHook <CacheHook>k__BackingField;
    public UInt32 CacheItemTTL { get; public set; }
    public ushort MaxCacheSize { get; public set; }
    public string VersionStage { get; public set; }
    public IAmazonSecretsManager Client { get; public set; }
    public ISecretCacheHook CacheHook { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_CacheItemTTL();
    [CompilerGeneratedAttribute]
public void set_CacheItemTTL(UInt32 value);
    [CompilerGeneratedAttribute]
public ushort get_MaxCacheSize();
    [CompilerGeneratedAttribute]
public void set_MaxCacheSize(ushort value);
    [CompilerGeneratedAttribute]
public string get_VersionStage();
    [CompilerGeneratedAttribute]
public void set_VersionStage(string value);
    [CompilerGeneratedAttribute]
public IAmazonSecretsManager get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(IAmazonSecretsManager value);
    [CompilerGeneratedAttribute]
public ISecretCacheHook get_CacheHook();
    [CompilerGeneratedAttribute]
public void set_CacheHook(ISecretCacheHook value);
}
public class Amazon.SecretsManager.Extensions.Caching.SecretCacheItem : SecretCacheObject`1<DescribeSecretResponse> {
    private MemoryCache versions;
    private static ushort MAX_VERSIONS_CACHE_SIZE;
    public SecretCacheItem(string secretId, IAmazonSecretsManager client, SecretCacheConfiguration config);
    [AsyncStateMachineAttribute("Amazon.SecretsManager.Extensions.Caching.SecretCacheItem/<ExecuteRefreshAsync>d__3")]
protected virtual Task`1<DescribeSecretResponse> ExecuteRefreshAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.SecretsManager.Extensions.Caching.SecretCacheItem/<GetSecretValueAsync>d__4")]
protected virtual Task`1<GetSecretValueResponse> GetSecretValueAsync(DescribeSecretResponse result, CancellationToken cancellationToken);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private SecretCacheVersion GetVersion(DescribeSecretResponse describeResult);
    private void TrimCacheToSizeLimit();
}
public abstract class Amazon.SecretsManager.Extensions.Caching.SecretCacheObject`1 : object {
    private static long EXCEPTION_BACKOFF;
    private static long EXCEPTION_BACKOFF_GROWTH_FACTOR;
    private static long BACKOFF_PLATEAU;
    private JitteredDelay EXCEPTION_JITTERED_DELAY;
    private static long FORCE_REFRESH_JITTER_BASE_INCREMENT;
    private static long FORCE_REFRESH_JITTER_VARIANCE;
    private JitteredDelay FORCE_REFRESH_JITTERED_DELAY;
    protected string secretId;
    protected static SemaphoreSlim Lock;
    protected IAmazonSecretsManager client;
    protected SecretCacheConfiguration config;
    private bool refreshNeeded;
    private object data;
    protected Exception exception;
    private long exceptionCount;
    private long nextRetryTime;
    public static ThreadLocal`1<Random> random;
    public SecretCacheObject`1(string secretId, IAmazonSecretsManager client, SecretCacheConfiguration config);
    private static SecretCacheObject`1();
    protected abstract virtual Task`1<T> ExecuteRefreshAsync(CancellationToken cancellationToken);
    protected abstract virtual Task`1<GetSecretValueResponse> GetSecretValueAsync(T result, CancellationToken cancellationToken);
    private T GetResult();
    private void SetResult(T result);
    protected bool IsRefreshNeeded();
    [AsyncStateMachineAttribute("Amazon.SecretsManager.Extensions.Caching.SecretCacheObject`1/<RefreshAsync>d__23")]
private Task`1<bool> RefreshAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.SecretsManager.Extensions.Caching.SecretCacheObject`1/<RefreshNowAsync>d__24")]
public Task`1<bool> RefreshNowAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.SecretsManager.Extensions.Caching.SecretCacheObject`1/<GetSecretValue>d__25")]
public Task`1<GetSecretValueResponse> GetSecretValue(CancellationToken cancellationToken);
}
internal class Amazon.SecretsManager.Extensions.Caching.SecretCacheVersion : SecretCacheObject`1<GetSecretValueResponse> {
    private string versionId;
    private int hash;
    public SecretCacheVersion(string secretId, string versionId, IAmazonSecretsManager client, SecretCacheConfiguration config);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [AsyncStateMachineAttribute("Amazon.SecretsManager.Extensions.Caching.SecretCacheVersion/<ExecuteRefreshAsync>d__6")]
protected virtual Task`1<GetSecretValueResponse> ExecuteRefreshAsync(CancellationToken cancellationToken);
    protected virtual Task`1<GetSecretValueResponse> GetSecretValueAsync(GetSecretValueResponse result, CancellationToken cancellationToken);
}
public class Amazon.SecretsManager.Extensions.Caching.SecretsManagerCache : object {
    private IAmazonSecretsManager secretsManager;
    private SecretCacheConfiguration config;
    private MemoryCacheEntryOptions cacheItemPolicy;
    private MemoryCache cache;
    public SecretsManagerCache(IAmazonSecretsManager secretsManager);
    public SecretsManagerCache(SecretCacheConfiguration config);
    public SecretsManagerCache(IAmazonSecretsManager secretsManager, SecretCacheConfiguration config);
    private void ServiceClientBeforeRequestEvent(object sender, RequestEventArgs e);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Amazon.SecretsManager.Extensions.Caching.SecretsManagerCache/<GetSecretString>d__10")]
public sealed virtual Task`1<string> GetSecretString(string secretId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.SecretsManager.Extensions.Caching.SecretsManagerCache/<GetSecretBinary>d__11")]
public sealed virtual Task`1<Byte[]> GetSecretBinary(string secretId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.SecretsManager.Extensions.Caching.SecretsManagerCache/<RefreshNowAsync>d__12")]
public sealed virtual Task`1<bool> RefreshNowAsync(string secretId, CancellationToken cancellationToken);
    public sealed virtual SecretCacheItem GetCachedSecret(string secretId);
}
internal static class Amazon.SecretsManager.Extensions.Caching.VersionInfo : object {
    public static string VERSION_NUM;
    public static string MAJOR_REVISION_NUM;
    public static string MINOR_REVISION_NUM;
    public static string BUGFIX_REVISION_NUM;
    public static string USER_AGENT_HEADER;
    public static string RELEASE_VERSION;
    public static string USER_AGENT_STRING;
    private static VersionInfo();
}
