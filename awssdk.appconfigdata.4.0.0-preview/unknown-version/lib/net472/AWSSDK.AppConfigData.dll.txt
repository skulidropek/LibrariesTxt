public class Amazon.AppConfigData.AmazonAppConfigDataClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonAppConfigDataClient(RegionEndpoint region);
    public AmazonAppConfigDataClient(AmazonAppConfigDataConfig config);
    public AmazonAppConfigDataClient(AWSCredentials credentials);
    public AmazonAppConfigDataClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonAppConfigDataClient(AWSCredentials credentials, AmazonAppConfigDataConfig clientConfig);
    public AmazonAppConfigDataClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonAppConfigDataClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonAppConfigDataClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonAppConfigDataConfig clientConfig);
    public AmazonAppConfigDataClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonAppConfigDataClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonAppConfigDataClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonAppConfigDataConfig clientConfig);
    private static AmazonAppConfigDataClient();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    public virtual GetLatestConfigurationResponse GetLatestConfiguration(GetLatestConfigurationRequest request);
    public virtual Task`1<GetLatestConfigurationResponse> GetLatestConfigurationAsync(GetLatestConfigurationRequest request, CancellationToken cancellationToken);
    public virtual StartConfigurationSessionResponse StartConfigurationSession(StartConfigurationSessionRequest request);
    public virtual Task`1<StartConfigurationSessionResponse> StartConfigurationSessionAsync(StartConfigurationSessionRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.AppConfigData.AmazonAppConfigDataConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonAppConfigDataEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonAppConfigDataConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.AppConfigData.AmazonAppConfigDataDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonAppConfigDataDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.AppConfigData.AmazonAppConfigDataException : AmazonServiceException {
    public AmazonAppConfigDataException(string message);
    public AmazonAppConfigDataException(string message, Exception innerException);
    public AmazonAppConfigDataException(Exception innerException);
    public AmazonAppConfigDataException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonAppConfigDataException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected AmazonAppConfigDataException(SerializationInfo info, StreamingContext context);
}
public class Amazon.AppConfigData.AmazonAppConfigDataRequest : AmazonWebServiceRequest {
}
public class Amazon.AppConfigData.BadRequestReason : ConstantClass {
    public static BadRequestReason InvalidParameters;
    public BadRequestReason(string value);
    private static BadRequestReason();
    public static BadRequestReason FindValue(string value);
    public static BadRequestReason op_Implicit(string value);
}
public class Amazon.AppConfigData.Endpoints.AppConfigDataEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public interface Amazon.AppConfigData.IAmazonAppConfigData {
    public abstract virtual GetLatestConfigurationResponse GetLatestConfiguration(GetLatestConfigurationRequest request);
    public abstract virtual Task`1<GetLatestConfigurationResponse> GetLatestConfigurationAsync(GetLatestConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual StartConfigurationSessionResponse StartConfigurationSession(StartConfigurationSessionRequest request);
    public abstract virtual Task`1<StartConfigurationSessionResponse> StartConfigurationSessionAsync(StartConfigurationSessionRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.AppConfigData.Internal.AmazonAppConfigDataEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.AppConfigData.Internal.AmazonAppConfigDataEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.AppConfigData.Internal.AmazonAppConfigDataMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.AppConfigData.InvalidParameterProblem : ConstantClass {
    public static InvalidParameterProblem Corrupted;
    public static InvalidParameterProblem Expired;
    public static InvalidParameterProblem PollIntervalNotSatisfied;
    public InvalidParameterProblem(string value);
    private static InvalidParameterProblem();
    public static InvalidParameterProblem FindValue(string value);
    public static InvalidParameterProblem op_Implicit(string value);
}
public class Amazon.AppConfigData.Model.BadRequestDetails : object {
    private Dictionary`2<string, InvalidParameterDetail> _invalidParameters;
    public Dictionary`2<string, InvalidParameterDetail> InvalidParameters { get; public set; }
    public Dictionary`2<string, InvalidParameterDetail> get_InvalidParameters();
    public void set_InvalidParameters(Dictionary`2<string, InvalidParameterDetail> value);
    internal bool IsSetInvalidParameters();
}
public class Amazon.AppConfigData.Model.BadRequestException : AmazonAppConfigDataException {
    private BadRequestDetails _details;
    private BadRequestReason _reason;
    public BadRequestDetails Details { get; public set; }
    public BadRequestReason Reason { get; public set; }
    public BadRequestException(string message);
    public BadRequestException(string message, Exception innerException);
    public BadRequestException(Exception innerException);
    public BadRequestException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BadRequestException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected BadRequestException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public BadRequestDetails get_Details();
    public void set_Details(BadRequestDetails value);
    internal bool IsSetDetails();
    public BadRequestReason get_Reason();
    public void set_Reason(BadRequestReason value);
    internal bool IsSetReason();
}
public class Amazon.AppConfigData.Model.GetLatestConfigurationRequest : AmazonAppConfigDataRequest {
    private string _configurationToken;
    [AWSPropertyAttribute]
public string ConfigurationToken { get; public set; }
    public string get_ConfigurationToken();
    public void set_ConfigurationToken(string value);
    internal bool IsSetConfigurationToken();
}
public class Amazon.AppConfigData.Model.GetLatestConfigurationResponse : AmazonWebServiceResponse {
    private MemoryStream _configuration;
    private string _contentType;
    private string _nextPollConfigurationToken;
    private Nullable`1<int> _nextPollIntervalInSeconds;
    private string _versionLabel;
    [AWSPropertyAttribute]
public MemoryStream Configuration { get; public set; }
    public string ContentType { get; public set; }
    public string NextPollConfigurationToken { get; public set; }
    public Nullable`1<int> NextPollIntervalInSeconds { get; public set; }
    public string VersionLabel { get; public set; }
    public MemoryStream get_Configuration();
    public void set_Configuration(MemoryStream value);
    internal bool IsSetConfiguration();
    public string get_ContentType();
    public void set_ContentType(string value);
    internal bool IsSetContentType();
    public string get_NextPollConfigurationToken();
    public void set_NextPollConfigurationToken(string value);
    internal bool IsSetNextPollConfigurationToken();
    public Nullable`1<int> get_NextPollIntervalInSeconds();
    public void set_NextPollIntervalInSeconds(Nullable`1<int> value);
    internal bool IsSetNextPollIntervalInSeconds();
    public string get_VersionLabel();
    public void set_VersionLabel(string value);
    internal bool IsSetVersionLabel();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.BadRequestDetailsUnmarshaller : object {
    private static BadRequestDetailsUnmarshaller _instance;
    public static BadRequestDetailsUnmarshaller Instance { get; }
    private static BadRequestDetailsUnmarshaller();
    private sealed virtual override BadRequestDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.AppConfigData.Model.BadRequestDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BadRequestDetails Unmarshall(JsonUnmarshallerContext context);
    public static BadRequestDetailsUnmarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.BadRequestExceptionUnmarshaller : object {
    private static BadRequestExceptionUnmarshaller _instance;
    public static BadRequestExceptionUnmarshaller Instance { get; }
    private static BadRequestExceptionUnmarshaller();
    public sealed virtual BadRequestException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual BadRequestException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static BadRequestExceptionUnmarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.GetLatestConfigurationRequestMarshaller : object {
    private static GetLatestConfigurationRequestMarshaller _instance;
    public static GetLatestConfigurationRequestMarshaller Instance { get; }
    private static GetLatestConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetLatestConfigurationRequest publicRequest);
    internal static GetLatestConfigurationRequestMarshaller GetInstance();
    public static GetLatestConfigurationRequestMarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.GetLatestConfigurationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetLatestConfigurationResponseUnmarshaller _instance;
    public static GetLatestConfigurationResponseUnmarshaller Instance { get; }
    private static GetLatestConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetLatestConfigurationResponseUnmarshaller GetInstance();
    public static GetLatestConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.InternalServerExceptionUnmarshaller : object {
    private static InternalServerExceptionUnmarshaller _instance;
    public static InternalServerExceptionUnmarshaller Instance { get; }
    private static InternalServerExceptionUnmarshaller();
    public sealed virtual InternalServerException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InternalServerException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InternalServerExceptionUnmarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.InvalidParameterDetailUnmarshaller : object {
    private static InvalidParameterDetailUnmarshaller _instance;
    public static InvalidParameterDetailUnmarshaller Instance { get; }
    private static InvalidParameterDetailUnmarshaller();
    private sealed virtual override InvalidParameterDetail Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.AppConfigData.Model.InvalidParameterDetail,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidParameterDetail Unmarshall(JsonUnmarshallerContext context);
    public static InvalidParameterDetailUnmarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller : object {
    private static ResourceNotFoundExceptionUnmarshaller _instance;
    public static ResourceNotFoundExceptionUnmarshaller Instance { get; }
    private static ResourceNotFoundExceptionUnmarshaller();
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.StartConfigurationSessionRequestMarshaller : object {
    private static StartConfigurationSessionRequestMarshaller _instance;
    public static StartConfigurationSessionRequestMarshaller Instance { get; }
    private static StartConfigurationSessionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StartConfigurationSessionRequest publicRequest);
    internal static StartConfigurationSessionRequestMarshaller GetInstance();
    public static StartConfigurationSessionRequestMarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.StartConfigurationSessionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StartConfigurationSessionResponseUnmarshaller _instance;
    public static StartConfigurationSessionResponseUnmarshaller Instance { get; }
    private static StartConfigurationSessionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StartConfigurationSessionResponseUnmarshaller GetInstance();
    public static StartConfigurationSessionResponseUnmarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.Internal.MarshallTransformations.ThrottlingExceptionUnmarshaller : object {
    private static ThrottlingExceptionUnmarshaller _instance;
    public static ThrottlingExceptionUnmarshaller Instance { get; }
    private static ThrottlingExceptionUnmarshaller();
    public sealed virtual ThrottlingException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ThrottlingException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ThrottlingExceptionUnmarshaller get_Instance();
}
public class Amazon.AppConfigData.Model.InternalServerException : AmazonAppConfigDataException {
    public InternalServerException(string message);
    public InternalServerException(string message, Exception innerException);
    public InternalServerException(Exception innerException);
    public InternalServerException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InternalServerException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected InternalServerException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.AppConfigData.Model.InvalidParameterDetail : object {
    private InvalidParameterProblem _problem;
    public InvalidParameterProblem Problem { get; public set; }
    public InvalidParameterProblem get_Problem();
    public void set_Problem(InvalidParameterProblem value);
    internal bool IsSetProblem();
}
public class Amazon.AppConfigData.Model.ResourceNotFoundException : AmazonAppConfigDataException {
    private Dictionary`2<string, string> _referencedBy;
    private ResourceType _resourceType;
    public Dictionary`2<string, string> ReferencedBy { get; public set; }
    public ResourceType ResourceType { get; public set; }
    public ResourceNotFoundException(string message);
    public ResourceNotFoundException(string message, Exception innerException);
    public ResourceNotFoundException(Exception innerException);
    public ResourceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ResourceNotFoundException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public Dictionary`2<string, string> get_ReferencedBy();
    public void set_ReferencedBy(Dictionary`2<string, string> value);
    internal bool IsSetReferencedBy();
    public ResourceType get_ResourceType();
    public void set_ResourceType(ResourceType value);
    internal bool IsSetResourceType();
}
public class Amazon.AppConfigData.Model.StartConfigurationSessionRequest : AmazonAppConfigDataRequest {
    private string _applicationIdentifier;
    private string _configurationProfileIdentifier;
    private string _environmentIdentifier;
    private Nullable`1<int> _requiredMinimumPollIntervalInSeconds;
    [AWSPropertyAttribute]
public string ApplicationIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ConfigurationProfileIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string EnvironmentIdentifier { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> RequiredMinimumPollIntervalInSeconds { get; public set; }
    public string get_ApplicationIdentifier();
    public void set_ApplicationIdentifier(string value);
    internal bool IsSetApplicationIdentifier();
    public string get_ConfigurationProfileIdentifier();
    public void set_ConfigurationProfileIdentifier(string value);
    internal bool IsSetConfigurationProfileIdentifier();
    public string get_EnvironmentIdentifier();
    public void set_EnvironmentIdentifier(string value);
    internal bool IsSetEnvironmentIdentifier();
    public Nullable`1<int> get_RequiredMinimumPollIntervalInSeconds();
    public void set_RequiredMinimumPollIntervalInSeconds(Nullable`1<int> value);
    internal bool IsSetRequiredMinimumPollIntervalInSeconds();
}
public class Amazon.AppConfigData.Model.StartConfigurationSessionResponse : AmazonWebServiceResponse {
    private string _initialConfigurationToken;
    public string InitialConfigurationToken { get; public set; }
    public string get_InitialConfigurationToken();
    public void set_InitialConfigurationToken(string value);
    internal bool IsSetInitialConfigurationToken();
}
public class Amazon.AppConfigData.Model.ThrottlingException : AmazonAppConfigDataException {
    public ThrottlingException(string message);
    public ThrottlingException(string message, Exception innerException);
    public ThrottlingException(Exception innerException);
    public ThrottlingException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ThrottlingException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ThrottlingException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.AppConfigData.ResourceType : ConstantClass {
    public static ResourceType Application;
    public static ResourceType Configuration;
    public static ResourceType ConfigurationProfile;
    public static ResourceType Deployment;
    public static ResourceType Environment;
    public ResourceType(string value);
    private static ResourceType();
    public static ResourceType FindValue(string value);
    public static ResourceType op_Implicit(string value);
}
