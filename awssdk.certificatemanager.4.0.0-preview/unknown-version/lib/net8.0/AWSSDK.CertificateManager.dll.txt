public class Amazon.CertificateManager.AmazonCertificateManagerClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private ICertificateManagerPaginatorFactory _paginators;
    public ICertificateManagerPaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonCertificateManagerClient(RegionEndpoint region);
    public AmazonCertificateManagerClient(AmazonCertificateManagerConfig config);
    public AmazonCertificateManagerClient(AWSCredentials credentials);
    public AmazonCertificateManagerClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonCertificateManagerClient(AWSCredentials credentials, AmazonCertificateManagerConfig clientConfig);
    public AmazonCertificateManagerClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonCertificateManagerClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonCertificateManagerClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonCertificateManagerConfig clientConfig);
    public AmazonCertificateManagerClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonCertificateManagerClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonCertificateManagerClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonCertificateManagerConfig clientConfig);
    private static AmazonCertificateManagerClient();
    public sealed virtual ICertificateManagerPaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual AddTagsToCertificateResponse AddTagsToCertificate(AddTagsToCertificateRequest request);
    public virtual Task`1<AddTagsToCertificateResponse> AddTagsToCertificateAsync(AddTagsToCertificateRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCertificateResponse DeleteCertificate(DeleteCertificateRequest request);
    public virtual Task`1<DeleteCertificateResponse> DeleteCertificateAsync(string certificateArn, CancellationToken cancellationToken);
    public virtual Task`1<DeleteCertificateResponse> DeleteCertificateAsync(DeleteCertificateRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCertificateResponse DescribeCertificate(DescribeCertificateRequest request);
    public virtual Task`1<DescribeCertificateResponse> DescribeCertificateAsync(string certificateArn, CancellationToken cancellationToken);
    public virtual Task`1<DescribeCertificateResponse> DescribeCertificateAsync(DescribeCertificateRequest request, CancellationToken cancellationToken);
    internal virtual ExportCertificateResponse ExportCertificate(ExportCertificateRequest request);
    public virtual Task`1<ExportCertificateResponse> ExportCertificateAsync(ExportCertificateRequest request, CancellationToken cancellationToken);
    internal virtual GetAccountConfigurationResponse GetAccountConfiguration(GetAccountConfigurationRequest request);
    public virtual Task`1<GetAccountConfigurationResponse> GetAccountConfigurationAsync(GetAccountConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetCertificateResponse GetCertificate(GetCertificateRequest request);
    public virtual Task`1<GetCertificateResponse> GetCertificateAsync(string certificateArn, CancellationToken cancellationToken);
    public virtual Task`1<GetCertificateResponse> GetCertificateAsync(GetCertificateRequest request, CancellationToken cancellationToken);
    internal virtual ImportCertificateResponse ImportCertificate(ImportCertificateRequest request);
    public virtual Task`1<ImportCertificateResponse> ImportCertificateAsync(ImportCertificateRequest request, CancellationToken cancellationToken);
    internal virtual ListCertificatesResponse ListCertificates();
    internal virtual ListCertificatesResponse ListCertificates(ListCertificatesRequest request);
    public virtual Task`1<ListCertificatesResponse> ListCertificatesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListCertificatesResponse> ListCertificatesAsync(ListCertificatesRequest request, CancellationToken cancellationToken);
    internal virtual ListTagsForCertificateResponse ListTagsForCertificate(ListTagsForCertificateRequest request);
    public virtual Task`1<ListTagsForCertificateResponse> ListTagsForCertificateAsync(ListTagsForCertificateRequest request, CancellationToken cancellationToken);
    internal virtual PutAccountConfigurationResponse PutAccountConfiguration(PutAccountConfigurationRequest request);
    public virtual Task`1<PutAccountConfigurationResponse> PutAccountConfigurationAsync(PutAccountConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual RemoveTagsFromCertificateResponse RemoveTagsFromCertificate(RemoveTagsFromCertificateRequest request);
    public virtual Task`1<RemoveTagsFromCertificateResponse> RemoveTagsFromCertificateAsync(RemoveTagsFromCertificateRequest request, CancellationToken cancellationToken);
    internal virtual RenewCertificateResponse RenewCertificate(RenewCertificateRequest request);
    public virtual Task`1<RenewCertificateResponse> RenewCertificateAsync(RenewCertificateRequest request, CancellationToken cancellationToken);
    internal virtual RequestCertificateResponse RequestCertificate(RequestCertificateRequest request);
    public virtual Task`1<RequestCertificateResponse> RequestCertificateAsync(string domainName, CancellationToken cancellationToken);
    public virtual Task`1<RequestCertificateResponse> RequestCertificateAsync(RequestCertificateRequest request, CancellationToken cancellationToken);
    internal virtual ResendValidationEmailResponse ResendValidationEmail(ResendValidationEmailRequest request);
    public virtual Task`1<ResendValidationEmailResponse> ResendValidationEmailAsync(ResendValidationEmailRequest request, CancellationToken cancellationToken);
    internal virtual UpdateCertificateOptionsResponse UpdateCertificateOptions(UpdateCertificateOptionsRequest request);
    public virtual Task`1<UpdateCertificateOptionsResponse> UpdateCertificateOptionsAsync(UpdateCertificateOptionsRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.CertificateManager.AmazonCertificateManagerConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonCertificateManagerEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonCertificateManagerConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.CertificateManager.AmazonCertificateManagerDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonCertificateManagerDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.CertificateManager.AmazonCertificateManagerException : AmazonServiceException {
    public AmazonCertificateManagerException(string message);
    public AmazonCertificateManagerException(string message, Exception innerException);
    public AmazonCertificateManagerException(Exception innerException);
    public AmazonCertificateManagerException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonCertificateManagerException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.AmazonCertificateManagerRequest : AmazonWebServiceRequest {
}
public class Amazon.CertificateManager.CertificateStatus : ConstantClass {
    public static CertificateStatus EXPIRED;
    public static CertificateStatus FAILED;
    public static CertificateStatus INACTIVE;
    public static CertificateStatus ISSUED;
    public static CertificateStatus PENDING_VALIDATION;
    public static CertificateStatus REVOKED;
    public static CertificateStatus VALIDATION_TIMED_OUT;
    public CertificateStatus(string value);
    private static CertificateStatus();
    public static CertificateStatus FindValue(string value);
    public static CertificateStatus op_Implicit(string value);
}
public class Amazon.CertificateManager.CertificateTransparencyLoggingPreference : ConstantClass {
    public static CertificateTransparencyLoggingPreference DISABLED;
    public static CertificateTransparencyLoggingPreference ENABLED;
    public CertificateTransparencyLoggingPreference(string value);
    private static CertificateTransparencyLoggingPreference();
    public static CertificateTransparencyLoggingPreference FindValue(string value);
    public static CertificateTransparencyLoggingPreference op_Implicit(string value);
}
public class Amazon.CertificateManager.CertificateType : ConstantClass {
    public static CertificateType AMAZON_ISSUED;
    public static CertificateType IMPORTED;
    public static CertificateType PRIVATE;
    public CertificateType(string value);
    private static CertificateType();
    public static CertificateType FindValue(string value);
    public static CertificateType op_Implicit(string value);
}
public class Amazon.CertificateManager.DomainStatus : ConstantClass {
    public static DomainStatus FAILED;
    public static DomainStatus PENDING_VALIDATION;
    public static DomainStatus SUCCESS;
    public DomainStatus(string value);
    private static DomainStatus();
    public static DomainStatus FindValue(string value);
    public static DomainStatus op_Implicit(string value);
}
public class Amazon.CertificateManager.Endpoints.CertificateManagerEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public class Amazon.CertificateManager.ExtendedKeyUsageName : ConstantClass {
    public static ExtendedKeyUsageName ANY;
    public static ExtendedKeyUsageName CODE_SIGNING;
    public static ExtendedKeyUsageName CUSTOM;
    public static ExtendedKeyUsageName EMAIL_PROTECTION;
    public static ExtendedKeyUsageName IPSEC_END_SYSTEM;
    public static ExtendedKeyUsageName IPSEC_TUNNEL;
    public static ExtendedKeyUsageName IPSEC_USER;
    public static ExtendedKeyUsageName NONE;
    public static ExtendedKeyUsageName OCSP_SIGNING;
    public static ExtendedKeyUsageName TIME_STAMPING;
    public static ExtendedKeyUsageName TLS_WEB_CLIENT_AUTHENTICATION;
    public static ExtendedKeyUsageName TLS_WEB_SERVER_AUTHENTICATION;
    public ExtendedKeyUsageName(string value);
    private static ExtendedKeyUsageName();
    public static ExtendedKeyUsageName FindValue(string value);
    public static ExtendedKeyUsageName op_Implicit(string value);
}
public class Amazon.CertificateManager.FailureReason : ConstantClass {
    public static FailureReason ADDITIONAL_VERIFICATION_REQUIRED;
    public static FailureReason CAA_ERROR;
    public static FailureReason DOMAIN_NOT_ALLOWED;
    public static FailureReason DOMAIN_VALIDATION_DENIED;
    public static FailureReason INVALID_PUBLIC_DOMAIN;
    public static FailureReason NO_AVAILABLE_CONTACTS;
    public static FailureReason OTHER;
    public static FailureReason PCA_ACCESS_DENIED;
    public static FailureReason PCA_INVALID_ARGS;
    public static FailureReason PCA_INVALID_ARN;
    public static FailureReason PCA_INVALID_DURATION;
    public static FailureReason PCA_INVALID_STATE;
    public static FailureReason PCA_LIMIT_EXCEEDED;
    public static FailureReason PCA_NAME_CONSTRAINTS_VALIDATION;
    public static FailureReason PCA_REQUEST_FAILED;
    public static FailureReason PCA_RESOURCE_NOT_FOUND;
    public static FailureReason SLR_NOT_FOUND;
    public FailureReason(string value);
    private static FailureReason();
    public static FailureReason FindValue(string value);
    public static FailureReason op_Implicit(string value);
}
public interface Amazon.CertificateManager.IAmazonCertificateManager {
    public ICertificateManagerPaginatorFactory Paginators { get; }
    public abstract virtual ICertificateManagerPaginatorFactory get_Paginators();
    public abstract virtual Task`1<AddTagsToCertificateResponse> AddTagsToCertificateAsync(AddTagsToCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCertificateResponse> DeleteCertificateAsync(string certificateArn, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCertificateResponse> DeleteCertificateAsync(DeleteCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCertificateResponse> DescribeCertificateAsync(string certificateArn, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCertificateResponse> DescribeCertificateAsync(DescribeCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ExportCertificateResponse> ExportCertificateAsync(ExportCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAccountConfigurationResponse> GetAccountConfigurationAsync(GetAccountConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetCertificateResponse> GetCertificateAsync(string certificateArn, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetCertificateResponse> GetCertificateAsync(GetCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ImportCertificateResponse> ImportCertificateAsync(ImportCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListCertificatesResponse> ListCertificatesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListCertificatesResponse> ListCertificatesAsync(ListCertificatesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForCertificateResponse> ListTagsForCertificateAsync(ListTagsForCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutAccountConfigurationResponse> PutAccountConfigurationAsync(PutAccountConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RemoveTagsFromCertificateResponse> RemoveTagsFromCertificateAsync(RemoveTagsFromCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RenewCertificateResponse> RenewCertificateAsync(RenewCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RequestCertificateResponse> RequestCertificateAsync(string domainName, CancellationToken cancellationToken);
    public abstract virtual Task`1<RequestCertificateResponse> RequestCertificateAsync(RequestCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResendValidationEmailResponse> ResendValidationEmailAsync(ResendValidationEmailRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateCertificateOptionsResponse> UpdateCertificateOptionsAsync(UpdateCertificateOptionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    [DynamicDependencyAttribute("512", "Amazon.CertificateManager.AmazonCertificateManagerConfig")]
private static override ClientConfig Amazon.Runtime.IAmazonService.CreateDefaultClientConfig();
    [UnconditionalSuppressMessageAttribute("AssemblyLoadTrimming", "IL2026:RequiresUnreferencedCode")]
private static override IAmazonService Amazon.Runtime.IAmazonService.CreateDefaultServiceClient(AWSCredentials awsCredentials, ClientConfig clientConfig);
}
public class Amazon.CertificateManager.Internal.AmazonCertificateManagerEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.CertificateManager.Internal.AmazonCertificateManagerEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.CertificateManager.Internal.AmazonCertificateManagerMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.CertificateManager.KeyAlgorithm : ConstantClass {
    public static KeyAlgorithm EC_prime256v1;
    public static KeyAlgorithm EC_secp384r1;
    public static KeyAlgorithm EC_secp521r1;
    public static KeyAlgorithm RSA_1024;
    public static KeyAlgorithm RSA_2048;
    public static KeyAlgorithm RSA_3072;
    public static KeyAlgorithm RSA_4096;
    public KeyAlgorithm(string value);
    private static KeyAlgorithm();
    public static KeyAlgorithm FindValue(string value);
    public static KeyAlgorithm op_Implicit(string value);
}
public class Amazon.CertificateManager.KeyUsageName : ConstantClass {
    public static KeyUsageName ANY;
    public static KeyUsageName CERTIFICATE_SIGNING;
    public static KeyUsageName CRL_SIGNING;
    public static KeyUsageName CUSTOM;
    public static KeyUsageName DATA_ENCIPHERMENT;
    public static KeyUsageName DECIPHER_ONLY;
    public static KeyUsageName DIGITAL_SIGNATURE;
    public static KeyUsageName ENCIPHER_ONLY;
    public static KeyUsageName KEY_AGREEMENT;
    public static KeyUsageName KEY_ENCIPHERMENT;
    public static KeyUsageName NON_REPUDIATION;
    public KeyUsageName(string value);
    private static KeyUsageName();
    public static KeyUsageName FindValue(string value);
    public static KeyUsageName op_Implicit(string value);
}
public class Amazon.CertificateManager.Model.AccessDeniedException : AmazonCertificateManagerException {
    public AccessDeniedException(string message);
    public AccessDeniedException(string message, Exception innerException);
    public AccessDeniedException(Exception innerException);
    public AccessDeniedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AccessDeniedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.AddTagsToCertificateRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.CertificateManager.Model.AddTagsToCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.CertificateManager.Model.CertificateDetail : object {
    private string _certificateArn;
    private string _certificateAuthorityArn;
    private Nullable`1<DateTime> _createdAt;
    private string _domainName;
    private List`1<DomainValidation> _domainValidationOptions;
    private List`1<ExtendedKeyUsage> _extendedKeyUsages;
    private FailureReason _failureReason;
    private Nullable`1<DateTime> _importedAt;
    private List`1<string> _inUseBy;
    private Nullable`1<DateTime> _issuedAt;
    private string _issuer;
    private KeyAlgorithm _keyAlgorithm;
    private List`1<KeyUsage> _keyUsages;
    private Nullable`1<DateTime> _notAfter;
    private Nullable`1<DateTime> _notBefore;
    private CertificateOptions _options;
    private RenewalEligibility _renewalEligibility;
    private RenewalSummary _renewalSummary;
    private RevocationReason _revocationReason;
    private Nullable`1<DateTime> _revokedAt;
    private string _serial;
    private string _signatureAlgorithm;
    private CertificateStatus _status;
    private string _subject;
    private List`1<string> _subjectAlternativeNames;
    private CertificateType _type;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    [AWSPropertyAttribute]
public string CertificateAuthorityArn { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public List`1<DomainValidation> DomainValidationOptions { get; public set; }
    public List`1<ExtendedKeyUsage> ExtendedKeyUsages { get; public set; }
    public FailureReason FailureReason { get; public set; }
    public Nullable`1<DateTime> ImportedAt { get; public set; }
    public List`1<string> InUseBy { get; public set; }
    public Nullable`1<DateTime> IssuedAt { get; public set; }
    public string Issuer { get; public set; }
    public KeyAlgorithm KeyAlgorithm { get; public set; }
    public List`1<KeyUsage> KeyUsages { get; public set; }
    public Nullable`1<DateTime> NotAfter { get; public set; }
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public CertificateOptions Options { get; public set; }
    public RenewalEligibility RenewalEligibility { get; public set; }
    public RenewalSummary RenewalSummary { get; public set; }
    public RevocationReason RevocationReason { get; public set; }
    public Nullable`1<DateTime> RevokedAt { get; public set; }
    public string Serial { get; public set; }
    public string SignatureAlgorithm { get; public set; }
    public CertificateStatus Status { get; public set; }
    public string Subject { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SubjectAlternativeNames { get; public set; }
    public CertificateType Type { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
    public string get_CertificateAuthorityArn();
    public void set_CertificateAuthorityArn(string value);
    internal bool IsSetCertificateAuthorityArn();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public List`1<DomainValidation> get_DomainValidationOptions();
    public void set_DomainValidationOptions(List`1<DomainValidation> value);
    internal bool IsSetDomainValidationOptions();
    public List`1<ExtendedKeyUsage> get_ExtendedKeyUsages();
    public void set_ExtendedKeyUsages(List`1<ExtendedKeyUsage> value);
    internal bool IsSetExtendedKeyUsages();
    public FailureReason get_FailureReason();
    public void set_FailureReason(FailureReason value);
    internal bool IsSetFailureReason();
    public Nullable`1<DateTime> get_ImportedAt();
    public void set_ImportedAt(Nullable`1<DateTime> value);
    internal bool IsSetImportedAt();
    public List`1<string> get_InUseBy();
    public void set_InUseBy(List`1<string> value);
    internal bool IsSetInUseBy();
    public Nullable`1<DateTime> get_IssuedAt();
    public void set_IssuedAt(Nullable`1<DateTime> value);
    internal bool IsSetIssuedAt();
    public string get_Issuer();
    public void set_Issuer(string value);
    internal bool IsSetIssuer();
    public KeyAlgorithm get_KeyAlgorithm();
    public void set_KeyAlgorithm(KeyAlgorithm value);
    internal bool IsSetKeyAlgorithm();
    public List`1<KeyUsage> get_KeyUsages();
    public void set_KeyUsages(List`1<KeyUsage> value);
    internal bool IsSetKeyUsages();
    public Nullable`1<DateTime> get_NotAfter();
    public void set_NotAfter(Nullable`1<DateTime> value);
    internal bool IsSetNotAfter();
    public Nullable`1<DateTime> get_NotBefore();
    public void set_NotBefore(Nullable`1<DateTime> value);
    internal bool IsSetNotBefore();
    public CertificateOptions get_Options();
    public void set_Options(CertificateOptions value);
    internal bool IsSetOptions();
    public RenewalEligibility get_RenewalEligibility();
    public void set_RenewalEligibility(RenewalEligibility value);
    internal bool IsSetRenewalEligibility();
    public RenewalSummary get_RenewalSummary();
    public void set_RenewalSummary(RenewalSummary value);
    internal bool IsSetRenewalSummary();
    public RevocationReason get_RevocationReason();
    public void set_RevocationReason(RevocationReason value);
    internal bool IsSetRevocationReason();
    public Nullable`1<DateTime> get_RevokedAt();
    public void set_RevokedAt(Nullable`1<DateTime> value);
    internal bool IsSetRevokedAt();
    public string get_Serial();
    public void set_Serial(string value);
    internal bool IsSetSerial();
    public string get_SignatureAlgorithm();
    public void set_SignatureAlgorithm(string value);
    internal bool IsSetSignatureAlgorithm();
    public CertificateStatus get_Status();
    public void set_Status(CertificateStatus value);
    internal bool IsSetStatus();
    public string get_Subject();
    public void set_Subject(string value);
    internal bool IsSetSubject();
    public List`1<string> get_SubjectAlternativeNames();
    public void set_SubjectAlternativeNames(List`1<string> value);
    internal bool IsSetSubjectAlternativeNames();
    public CertificateType get_Type();
    public void set_Type(CertificateType value);
    internal bool IsSetType();
}
public class Amazon.CertificateManager.Model.CertificateManagerPaginatorFactory : object {
    private IAmazonCertificateManager client;
    internal CertificateManagerPaginatorFactory(IAmazonCertificateManager client);
    public sealed virtual IListCertificatesPaginator ListCertificates(ListCertificatesRequest request);
}
public class Amazon.CertificateManager.Model.CertificateOptions : object {
    private CertificateTransparencyLoggingPreference _certificateTransparencyLoggingPreference;
    public CertificateTransparencyLoggingPreference CertificateTransparencyLoggingPreference { get; public set; }
    public CertificateTransparencyLoggingPreference get_CertificateTransparencyLoggingPreference();
    public void set_CertificateTransparencyLoggingPreference(CertificateTransparencyLoggingPreference value);
    internal bool IsSetCertificateTransparencyLoggingPreference();
}
public class Amazon.CertificateManager.Model.CertificateSummary : object {
    private string _certificateArn;
    private Nullable`1<DateTime> _createdAt;
    private string _domainName;
    private Nullable`1<bool> _exported;
    private List`1<string> _extendedKeyUsages;
    private Nullable`1<bool> _hasAdditionalSubjectAlternativeNames;
    private Nullable`1<DateTime> _importedAt;
    private Nullable`1<bool> _inUse;
    private Nullable`1<DateTime> _issuedAt;
    private KeyAlgorithm _keyAlgorithm;
    private List`1<string> _keyUsages;
    private Nullable`1<DateTime> _notAfter;
    private Nullable`1<DateTime> _notBefore;
    private RenewalEligibility _renewalEligibility;
    private Nullable`1<DateTime> _revokedAt;
    private CertificateStatus _status;
    private List`1<string> _subjectAlternativeNameSummaries;
    private CertificateType _type;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public Nullable`1<bool> Exported { get; public set; }
    public List`1<string> ExtendedKeyUsages { get; public set; }
    public Nullable`1<bool> HasAdditionalSubjectAlternativeNames { get; public set; }
    public Nullable`1<DateTime> ImportedAt { get; public set; }
    public Nullable`1<bool> InUse { get; public set; }
    public Nullable`1<DateTime> IssuedAt { get; public set; }
    public KeyAlgorithm KeyAlgorithm { get; public set; }
    public List`1<string> KeyUsages { get; public set; }
    public Nullable`1<DateTime> NotAfter { get; public set; }
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public RenewalEligibility RenewalEligibility { get; public set; }
    public Nullable`1<DateTime> RevokedAt { get; public set; }
    public CertificateStatus Status { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SubjectAlternativeNameSummaries { get; public set; }
    public CertificateType Type { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<bool> get_Exported();
    public void set_Exported(Nullable`1<bool> value);
    internal bool IsSetExported();
    public List`1<string> get_ExtendedKeyUsages();
    public void set_ExtendedKeyUsages(List`1<string> value);
    internal bool IsSetExtendedKeyUsages();
    public Nullable`1<bool> get_HasAdditionalSubjectAlternativeNames();
    public void set_HasAdditionalSubjectAlternativeNames(Nullable`1<bool> value);
    internal bool IsSetHasAdditionalSubjectAlternativeNames();
    public Nullable`1<DateTime> get_ImportedAt();
    public void set_ImportedAt(Nullable`1<DateTime> value);
    internal bool IsSetImportedAt();
    public Nullable`1<bool> get_InUse();
    public void set_InUse(Nullable`1<bool> value);
    internal bool IsSetInUse();
    public Nullable`1<DateTime> get_IssuedAt();
    public void set_IssuedAt(Nullable`1<DateTime> value);
    internal bool IsSetIssuedAt();
    public KeyAlgorithm get_KeyAlgorithm();
    public void set_KeyAlgorithm(KeyAlgorithm value);
    internal bool IsSetKeyAlgorithm();
    public List`1<string> get_KeyUsages();
    public void set_KeyUsages(List`1<string> value);
    internal bool IsSetKeyUsages();
    public Nullable`1<DateTime> get_NotAfter();
    public void set_NotAfter(Nullable`1<DateTime> value);
    internal bool IsSetNotAfter();
    public Nullable`1<DateTime> get_NotBefore();
    public void set_NotBefore(Nullable`1<DateTime> value);
    internal bool IsSetNotBefore();
    public RenewalEligibility get_RenewalEligibility();
    public void set_RenewalEligibility(RenewalEligibility value);
    internal bool IsSetRenewalEligibility();
    public Nullable`1<DateTime> get_RevokedAt();
    public void set_RevokedAt(Nullable`1<DateTime> value);
    internal bool IsSetRevokedAt();
    public CertificateStatus get_Status();
    public void set_Status(CertificateStatus value);
    internal bool IsSetStatus();
    public List`1<string> get_SubjectAlternativeNameSummaries();
    public void set_SubjectAlternativeNameSummaries(List`1<string> value);
    internal bool IsSetSubjectAlternativeNameSummaries();
    public CertificateType get_Type();
    public void set_Type(CertificateType value);
    internal bool IsSetType();
}
public class Amazon.CertificateManager.Model.ConflictException : AmazonCertificateManagerException {
    public ConflictException(string message);
    public ConflictException(string message, Exception innerException);
    public ConflictException(Exception innerException);
    public ConflictException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConflictException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.DeleteCertificateRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    public DeleteCertificateRequest(string certificateArn);
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
}
public class Amazon.CertificateManager.Model.DeleteCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.CertificateManager.Model.DescribeCertificateRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    public DescribeCertificateRequest(string certificateArn);
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
}
public class Amazon.CertificateManager.Model.DescribeCertificateResponse : AmazonWebServiceResponse {
    private CertificateDetail _certificate;
    public CertificateDetail Certificate { get; public set; }
    public CertificateDetail get_Certificate();
    public void set_Certificate(CertificateDetail value);
    internal bool IsSetCertificate();
}
public class Amazon.CertificateManager.Model.DomainValidation : object {
    private string _domainName;
    private ResourceRecord _resourceRecord;
    private string _validationDomain;
    private List`1<string> _validationEmails;
    private ValidationMethod _validationMethod;
    private DomainStatus _validationStatus;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public ResourceRecord ResourceRecord { get; public set; }
    [AWSPropertyAttribute]
public string ValidationDomain { get; public set; }
    public List`1<string> ValidationEmails { get; public set; }
    public ValidationMethod ValidationMethod { get; public set; }
    public DomainStatus ValidationStatus { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public ResourceRecord get_ResourceRecord();
    public void set_ResourceRecord(ResourceRecord value);
    internal bool IsSetResourceRecord();
    public string get_ValidationDomain();
    public void set_ValidationDomain(string value);
    internal bool IsSetValidationDomain();
    public List`1<string> get_ValidationEmails();
    public void set_ValidationEmails(List`1<string> value);
    internal bool IsSetValidationEmails();
    public ValidationMethod get_ValidationMethod();
    public void set_ValidationMethod(ValidationMethod value);
    internal bool IsSetValidationMethod();
    public DomainStatus get_ValidationStatus();
    public void set_ValidationStatus(DomainStatus value);
    internal bool IsSetValidationStatus();
}
public class Amazon.CertificateManager.Model.DomainValidationOption : object {
    private string _domainName;
    private string _validationDomain;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public string ValidationDomain { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public string get_ValidationDomain();
    public void set_ValidationDomain(string value);
    internal bool IsSetValidationDomain();
}
public class Amazon.CertificateManager.Model.ExpiryEventsConfiguration : object {
    private Nullable`1<int> _daysBeforeExpiry;
    [AWSPropertyAttribute]
public Nullable`1<int> DaysBeforeExpiry { get; public set; }
    public Nullable`1<int> get_DaysBeforeExpiry();
    public void set_DaysBeforeExpiry(Nullable`1<int> value);
    internal bool IsSetDaysBeforeExpiry();
}
public class Amazon.CertificateManager.Model.ExportCertificateRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    private MemoryStream _passphrase;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Passphrase { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
    public MemoryStream get_Passphrase();
    public void set_Passphrase(MemoryStream value);
    internal bool IsSetPassphrase();
}
public class Amazon.CertificateManager.Model.ExportCertificateResponse : AmazonWebServiceResponse {
    private string _certificate;
    private string _certificateChain;
    private string _privateKey;
    [AWSPropertyAttribute]
public string Certificate { get; public set; }
    [AWSPropertyAttribute]
public string CertificateChain { get; public set; }
    [AWSPropertyAttribute]
public string PrivateKey { get; public set; }
    public string get_Certificate();
    public void set_Certificate(string value);
    internal bool IsSetCertificate();
    public string get_CertificateChain();
    public void set_CertificateChain(string value);
    internal bool IsSetCertificateChain();
    public string get_PrivateKey();
    public void set_PrivateKey(string value);
    internal bool IsSetPrivateKey();
}
public class Amazon.CertificateManager.Model.ExtendedKeyUsage : object {
    private ExtendedKeyUsageName _name;
    private string _oid;
    public ExtendedKeyUsageName Name { get; public set; }
    public string OID { get; public set; }
    public ExtendedKeyUsageName get_Name();
    public void set_Name(ExtendedKeyUsageName value);
    internal bool IsSetName();
    public string get_OID();
    public void set_OID(string value);
    internal bool IsSetOID();
}
public class Amazon.CertificateManager.Model.Filters : object {
    private List`1<string> _extendedKeyUsage;
    private List`1<string> _keyTypes;
    private List`1<string> _keyUsage;
    public List`1<string> ExtendedKeyUsage { get; public set; }
    public List`1<string> KeyTypes { get; public set; }
    public List`1<string> KeyUsage { get; public set; }
    public List`1<string> get_ExtendedKeyUsage();
    public void set_ExtendedKeyUsage(List`1<string> value);
    internal bool IsSetExtendedKeyUsage();
    public List`1<string> get_KeyTypes();
    public void set_KeyTypes(List`1<string> value);
    internal bool IsSetKeyTypes();
    public List`1<string> get_KeyUsage();
    public void set_KeyUsage(List`1<string> value);
    internal bool IsSetKeyUsage();
}
public class Amazon.CertificateManager.Model.GetAccountConfigurationRequest : AmazonCertificateManagerRequest {
}
public class Amazon.CertificateManager.Model.GetAccountConfigurationResponse : AmazonWebServiceResponse {
    private ExpiryEventsConfiguration _expiryEvents;
    public ExpiryEventsConfiguration ExpiryEvents { get; public set; }
    public ExpiryEventsConfiguration get_ExpiryEvents();
    public void set_ExpiryEvents(ExpiryEventsConfiguration value);
    internal bool IsSetExpiryEvents();
}
public class Amazon.CertificateManager.Model.GetCertificateRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    public GetCertificateRequest(string certificateArn);
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
}
public class Amazon.CertificateManager.Model.GetCertificateResponse : AmazonWebServiceResponse {
    private string _certificate;
    private string _certificateChain;
    [AWSPropertyAttribute]
public string Certificate { get; public set; }
    [AWSPropertyAttribute]
public string CertificateChain { get; public set; }
    public string get_Certificate();
    public void set_Certificate(string value);
    internal bool IsSetCertificate();
    public string get_CertificateChain();
    public void set_CertificateChain(string value);
    internal bool IsSetCertificateChain();
}
public interface Amazon.CertificateManager.Model.ICertificateManagerPaginatorFactory {
    public abstract virtual IListCertificatesPaginator ListCertificates(ListCertificatesRequest request);
}
public interface Amazon.CertificateManager.Model.IListCertificatesPaginator {
    public IPaginatedEnumerable`1<ListCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<CertificateSummary> CertificateSummaryList { get; }
    public abstract virtual IPaginatedEnumerable`1<ListCertificatesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<CertificateSummary> get_CertificateSummaryList();
}
public class Amazon.CertificateManager.Model.ImportCertificateRequest : AmazonCertificateManagerRequest {
    private MemoryStream _certificate;
    private string _certificateArn;
    private MemoryStream _certificateChain;
    private MemoryStream _privateKey;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public MemoryStream Certificate { get; public set; }
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream CertificateChain { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream PrivateKey { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public MemoryStream get_Certificate();
    public void set_Certificate(MemoryStream value);
    internal bool IsSetCertificate();
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
    public MemoryStream get_CertificateChain();
    public void set_CertificateChain(MemoryStream value);
    internal bool IsSetCertificateChain();
    public MemoryStream get_PrivateKey();
    public void set_PrivateKey(MemoryStream value);
    internal bool IsSetPrivateKey();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.CertificateManager.Model.ImportCertificateResponse : AmazonWebServiceResponse {
    private string _certificateArn;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.AccessDeniedExceptionUnmarshaller : object {
    private static AccessDeniedExceptionUnmarshaller _instance;
    public static AccessDeniedExceptionUnmarshaller Instance { get; }
    private static AccessDeniedExceptionUnmarshaller();
    public sealed virtual AccessDeniedException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual AccessDeniedException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static AccessDeniedExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.AddTagsToCertificateRequestMarshaller : object {
    private static AddTagsToCertificateRequestMarshaller _instance;
    public static AddTagsToCertificateRequestMarshaller Instance { get; }
    private static AddTagsToCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AddTagsToCertificateRequest publicRequest);
    internal static AddTagsToCertificateRequestMarshaller GetInstance();
    public static AddTagsToCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.AddTagsToCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static AddTagsToCertificateResponseUnmarshaller _instance;
    public static AddTagsToCertificateResponseUnmarshaller Instance { get; }
    private static AddTagsToCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AddTagsToCertificateResponseUnmarshaller GetInstance();
    public static AddTagsToCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.CertificateDetailUnmarshaller : object {
    private static CertificateDetailUnmarshaller _instance;
    public static CertificateDetailUnmarshaller Instance { get; }
    private static CertificateDetailUnmarshaller();
    private sealed virtual override CertificateDetail Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.CertificateDetail,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CertificateDetail Unmarshall(JsonUnmarshallerContext context);
    public static CertificateDetailUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.CertificateOptionsMarshaller : object {
    public static CertificateOptionsMarshaller Instance;
    private static CertificateOptionsMarshaller();
    public sealed virtual void Marshall(CertificateOptions requestObject, JsonMarshallerContext context);
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.CertificateOptionsUnmarshaller : object {
    private static CertificateOptionsUnmarshaller _instance;
    public static CertificateOptionsUnmarshaller Instance { get; }
    private static CertificateOptionsUnmarshaller();
    private sealed virtual override CertificateOptions Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.CertificateOptions,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CertificateOptions Unmarshall(JsonUnmarshallerContext context);
    public static CertificateOptionsUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.CertificateSummaryUnmarshaller : object {
    private static CertificateSummaryUnmarshaller _instance;
    public static CertificateSummaryUnmarshaller Instance { get; }
    private static CertificateSummaryUnmarshaller();
    private sealed virtual override CertificateSummary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.CertificateSummary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CertificateSummary Unmarshall(JsonUnmarshallerContext context);
    public static CertificateSummaryUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller : object {
    private static ConflictExceptionUnmarshaller _instance;
    public static ConflictExceptionUnmarshaller Instance { get; }
    private static ConflictExceptionUnmarshaller();
    public sealed virtual ConflictException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ConflictException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConflictExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.DeleteCertificateRequestMarshaller : object {
    private static DeleteCertificateRequestMarshaller _instance;
    public static DeleteCertificateRequestMarshaller Instance { get; }
    private static DeleteCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCertificateRequest publicRequest);
    internal static DeleteCertificateRequestMarshaller GetInstance();
    public static DeleteCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.DeleteCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteCertificateResponseUnmarshaller _instance;
    public static DeleteCertificateResponseUnmarshaller Instance { get; }
    private static DeleteCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCertificateResponseUnmarshaller GetInstance();
    public static DeleteCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.DescribeCertificateRequestMarshaller : object {
    private static DescribeCertificateRequestMarshaller _instance;
    public static DescribeCertificateRequestMarshaller Instance { get; }
    private static DescribeCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCertificateRequest publicRequest);
    internal static DescribeCertificateRequestMarshaller GetInstance();
    public static DescribeCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.DescribeCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeCertificateResponseUnmarshaller _instance;
    public static DescribeCertificateResponseUnmarshaller Instance { get; }
    private static DescribeCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCertificateResponseUnmarshaller GetInstance();
    public static DescribeCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.DomainValidationOptionMarshaller : object {
    public static DomainValidationOptionMarshaller Instance;
    private static DomainValidationOptionMarshaller();
    public sealed virtual void Marshall(DomainValidationOption requestObject, JsonMarshallerContext context);
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.DomainValidationUnmarshaller : object {
    private static DomainValidationUnmarshaller _instance;
    public static DomainValidationUnmarshaller Instance { get; }
    private static DomainValidationUnmarshaller();
    private sealed virtual override DomainValidation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.DomainValidation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DomainValidation Unmarshall(JsonUnmarshallerContext context);
    public static DomainValidationUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ExpiryEventsConfigurationMarshaller : object {
    public static ExpiryEventsConfigurationMarshaller Instance;
    private static ExpiryEventsConfigurationMarshaller();
    public sealed virtual void Marshall(ExpiryEventsConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ExpiryEventsConfigurationUnmarshaller : object {
    private static ExpiryEventsConfigurationUnmarshaller _instance;
    public static ExpiryEventsConfigurationUnmarshaller Instance { get; }
    private static ExpiryEventsConfigurationUnmarshaller();
    private sealed virtual override ExpiryEventsConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.ExpiryEventsConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExpiryEventsConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ExpiryEventsConfigurationUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ExportCertificateRequestMarshaller : object {
    private static ExportCertificateRequestMarshaller _instance;
    public static ExportCertificateRequestMarshaller Instance { get; }
    private static ExportCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ExportCertificateRequest publicRequest);
    internal static ExportCertificateRequestMarshaller GetInstance();
    public static ExportCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ExportCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ExportCertificateResponseUnmarshaller _instance;
    public static ExportCertificateResponseUnmarshaller Instance { get; }
    private static ExportCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ExportCertificateResponseUnmarshaller GetInstance();
    public static ExportCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ExtendedKeyUsageUnmarshaller : object {
    private static ExtendedKeyUsageUnmarshaller _instance;
    public static ExtendedKeyUsageUnmarshaller Instance { get; }
    private static ExtendedKeyUsageUnmarshaller();
    private sealed virtual override ExtendedKeyUsage Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.ExtendedKeyUsage,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExtendedKeyUsage Unmarshall(JsonUnmarshallerContext context);
    public static ExtendedKeyUsageUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.FiltersMarshaller : object {
    public static FiltersMarshaller Instance;
    private static FiltersMarshaller();
    public sealed virtual void Marshall(Filters requestObject, JsonMarshallerContext context);
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.GetAccountConfigurationRequestMarshaller : object {
    private static GetAccountConfigurationRequestMarshaller _instance;
    public static GetAccountConfigurationRequestMarshaller Instance { get; }
    private static GetAccountConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetAccountConfigurationRequest publicRequest);
    internal static GetAccountConfigurationRequestMarshaller GetInstance();
    public static GetAccountConfigurationRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.GetAccountConfigurationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetAccountConfigurationResponseUnmarshaller _instance;
    public static GetAccountConfigurationResponseUnmarshaller Instance { get; }
    private static GetAccountConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetAccountConfigurationResponseUnmarshaller GetInstance();
    public static GetAccountConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.GetCertificateRequestMarshaller : object {
    private static GetCertificateRequestMarshaller _instance;
    public static GetCertificateRequestMarshaller Instance { get; }
    private static GetCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetCertificateRequest publicRequest);
    internal static GetCertificateRequestMarshaller GetInstance();
    public static GetCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.GetCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetCertificateResponseUnmarshaller _instance;
    public static GetCertificateResponseUnmarshaller Instance { get; }
    private static GetCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetCertificateResponseUnmarshaller GetInstance();
    public static GetCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ImportCertificateRequestMarshaller : object {
    private static ImportCertificateRequestMarshaller _instance;
    public static ImportCertificateRequestMarshaller Instance { get; }
    private static ImportCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ImportCertificateRequest publicRequest);
    internal static ImportCertificateRequestMarshaller GetInstance();
    public static ImportCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ImportCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ImportCertificateResponseUnmarshaller _instance;
    public static ImportCertificateResponseUnmarshaller Instance { get; }
    private static ImportCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ImportCertificateResponseUnmarshaller GetInstance();
    public static ImportCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.InvalidArgsExceptionUnmarshaller : object {
    private static InvalidArgsExceptionUnmarshaller _instance;
    public static InvalidArgsExceptionUnmarshaller Instance { get; }
    private static InvalidArgsExceptionUnmarshaller();
    public sealed virtual InvalidArgsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidArgsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidArgsExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.InvalidArnExceptionUnmarshaller : object {
    private static InvalidArnExceptionUnmarshaller _instance;
    public static InvalidArnExceptionUnmarshaller Instance { get; }
    private static InvalidArnExceptionUnmarshaller();
    public sealed virtual InvalidArnException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidArnException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidArnExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.InvalidDomainValidationOptionsExceptionUnmarshaller : object {
    private static InvalidDomainValidationOptionsExceptionUnmarshaller _instance;
    public static InvalidDomainValidationOptionsExceptionUnmarshaller Instance { get; }
    private static InvalidDomainValidationOptionsExceptionUnmarshaller();
    public sealed virtual InvalidDomainValidationOptionsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidDomainValidationOptionsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidDomainValidationOptionsExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.InvalidParameterExceptionUnmarshaller : object {
    private static InvalidParameterExceptionUnmarshaller _instance;
    public static InvalidParameterExceptionUnmarshaller Instance { get; }
    private static InvalidParameterExceptionUnmarshaller();
    public sealed virtual InvalidParameterException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidParameterException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidParameterExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.InvalidStateExceptionUnmarshaller : object {
    private static InvalidStateExceptionUnmarshaller _instance;
    public static InvalidStateExceptionUnmarshaller Instance { get; }
    private static InvalidStateExceptionUnmarshaller();
    public sealed virtual InvalidStateException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidStateException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidStateExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.InvalidTagExceptionUnmarshaller : object {
    private static InvalidTagExceptionUnmarshaller _instance;
    public static InvalidTagExceptionUnmarshaller Instance { get; }
    private static InvalidTagExceptionUnmarshaller();
    public sealed virtual InvalidTagException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidTagException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidTagExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.KeyUsageUnmarshaller : object {
    private static KeyUsageUnmarshaller _instance;
    public static KeyUsageUnmarshaller Instance { get; }
    private static KeyUsageUnmarshaller();
    private sealed virtual override KeyUsage Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.KeyUsage,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeyUsage Unmarshall(JsonUnmarshallerContext context);
    public static KeyUsageUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller : object {
    private static LimitExceededExceptionUnmarshaller _instance;
    public static LimitExceededExceptionUnmarshaller Instance { get; }
    private static LimitExceededExceptionUnmarshaller();
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ListCertificatesRequestMarshaller : object {
    private static ListCertificatesRequestMarshaller _instance;
    public static ListCertificatesRequestMarshaller Instance { get; }
    private static ListCertificatesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListCertificatesRequest publicRequest);
    internal static ListCertificatesRequestMarshaller GetInstance();
    public static ListCertificatesRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ListCertificatesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListCertificatesResponseUnmarshaller _instance;
    public static ListCertificatesResponseUnmarshaller Instance { get; }
    private static ListCertificatesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListCertificatesResponseUnmarshaller GetInstance();
    public static ListCertificatesResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ListTagsForCertificateRequestMarshaller : object {
    private static ListTagsForCertificateRequestMarshaller _instance;
    public static ListTagsForCertificateRequestMarshaller Instance { get; }
    private static ListTagsForCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForCertificateRequest publicRequest);
    internal static ListTagsForCertificateRequestMarshaller GetInstance();
    public static ListTagsForCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ListTagsForCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTagsForCertificateResponseUnmarshaller _instance;
    public static ListTagsForCertificateResponseUnmarshaller Instance { get; }
    private static ListTagsForCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForCertificateResponseUnmarshaller GetInstance();
    public static ListTagsForCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.PutAccountConfigurationRequestMarshaller : object {
    private static PutAccountConfigurationRequestMarshaller _instance;
    public static PutAccountConfigurationRequestMarshaller Instance { get; }
    private static PutAccountConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutAccountConfigurationRequest publicRequest);
    internal static PutAccountConfigurationRequestMarshaller GetInstance();
    public static PutAccountConfigurationRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.PutAccountConfigurationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutAccountConfigurationResponseUnmarshaller _instance;
    public static PutAccountConfigurationResponseUnmarshaller Instance { get; }
    private static PutAccountConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutAccountConfigurationResponseUnmarshaller GetInstance();
    public static PutAccountConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.RemoveTagsFromCertificateRequestMarshaller : object {
    private static RemoveTagsFromCertificateRequestMarshaller _instance;
    public static RemoveTagsFromCertificateRequestMarshaller Instance { get; }
    private static RemoveTagsFromCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RemoveTagsFromCertificateRequest publicRequest);
    internal static RemoveTagsFromCertificateRequestMarshaller GetInstance();
    public static RemoveTagsFromCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.RemoveTagsFromCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RemoveTagsFromCertificateResponseUnmarshaller _instance;
    public static RemoveTagsFromCertificateResponseUnmarshaller Instance { get; }
    private static RemoveTagsFromCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RemoveTagsFromCertificateResponseUnmarshaller GetInstance();
    public static RemoveTagsFromCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.RenewalSummaryUnmarshaller : object {
    private static RenewalSummaryUnmarshaller _instance;
    public static RenewalSummaryUnmarshaller Instance { get; }
    private static RenewalSummaryUnmarshaller();
    private sealed virtual override RenewalSummary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.RenewalSummary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RenewalSummary Unmarshall(JsonUnmarshallerContext context);
    public static RenewalSummaryUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.RenewCertificateRequestMarshaller : object {
    private static RenewCertificateRequestMarshaller _instance;
    public static RenewCertificateRequestMarshaller Instance { get; }
    private static RenewCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RenewCertificateRequest publicRequest);
    internal static RenewCertificateRequestMarshaller GetInstance();
    public static RenewCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.RenewCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RenewCertificateResponseUnmarshaller _instance;
    public static RenewCertificateResponseUnmarshaller Instance { get; }
    private static RenewCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RenewCertificateResponseUnmarshaller GetInstance();
    public static RenewCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.RequestCertificateRequestMarshaller : object {
    private static RequestCertificateRequestMarshaller _instance;
    public static RequestCertificateRequestMarshaller Instance { get; }
    private static RequestCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RequestCertificateRequest publicRequest);
    internal static RequestCertificateRequestMarshaller GetInstance();
    public static RequestCertificateRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.RequestCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RequestCertificateResponseUnmarshaller _instance;
    public static RequestCertificateResponseUnmarshaller Instance { get; }
    private static RequestCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RequestCertificateResponseUnmarshaller GetInstance();
    public static RequestCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.RequestInProgressExceptionUnmarshaller : object {
    private static RequestInProgressExceptionUnmarshaller _instance;
    public static RequestInProgressExceptionUnmarshaller Instance { get; }
    private static RequestInProgressExceptionUnmarshaller();
    public sealed virtual RequestInProgressException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual RequestInProgressException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static RequestInProgressExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ResendValidationEmailRequestMarshaller : object {
    private static ResendValidationEmailRequestMarshaller _instance;
    public static ResendValidationEmailRequestMarshaller Instance { get; }
    private static ResendValidationEmailRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ResendValidationEmailRequest publicRequest);
    internal static ResendValidationEmailRequestMarshaller GetInstance();
    public static ResendValidationEmailRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ResendValidationEmailResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ResendValidationEmailResponseUnmarshaller _instance;
    public static ResendValidationEmailResponseUnmarshaller Instance { get; }
    private static ResendValidationEmailResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ResendValidationEmailResponseUnmarshaller GetInstance();
    public static ResendValidationEmailResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ResourceInUseExceptionUnmarshaller : object {
    private static ResourceInUseExceptionUnmarshaller _instance;
    public static ResourceInUseExceptionUnmarshaller Instance { get; }
    private static ResourceInUseExceptionUnmarshaller();
    public sealed virtual ResourceInUseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceInUseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller : object {
    private static ResourceNotFoundExceptionUnmarshaller _instance;
    public static ResourceNotFoundExceptionUnmarshaller Instance { get; }
    private static ResourceNotFoundExceptionUnmarshaller();
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ResourceRecordUnmarshaller : object {
    private static ResourceRecordUnmarshaller _instance;
    public static ResourceRecordUnmarshaller Instance { get; }
    private static ResourceRecordUnmarshaller();
    private sealed virtual override ResourceRecord Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.ResourceRecord,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourceRecord Unmarshall(JsonUnmarshallerContext context);
    public static ResourceRecordUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.TagMarshaller : object {
    public static TagMarshaller Instance;
    private static TagMarshaller();
    public sealed virtual void Marshall(Tag requestObject, JsonMarshallerContext context);
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.TagPolicyExceptionUnmarshaller : object {
    private static TagPolicyExceptionUnmarshaller _instance;
    public static TagPolicyExceptionUnmarshaller Instance { get; }
    private static TagPolicyExceptionUnmarshaller();
    public sealed virtual TagPolicyException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual TagPolicyException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static TagPolicyExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    private sealed virtual override Tag Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.CertificateManager.Model.Tag,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ThrottlingExceptionUnmarshaller : object {
    private static ThrottlingExceptionUnmarshaller _instance;
    public static ThrottlingExceptionUnmarshaller Instance { get; }
    private static ThrottlingExceptionUnmarshaller();
    public sealed virtual ThrottlingException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ThrottlingException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ThrottlingExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.TooManyTagsExceptionUnmarshaller : object {
    private static TooManyTagsExceptionUnmarshaller _instance;
    public static TooManyTagsExceptionUnmarshaller Instance { get; }
    private static TooManyTagsExceptionUnmarshaller();
    public sealed virtual TooManyTagsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual TooManyTagsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyTagsExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.UpdateCertificateOptionsRequestMarshaller : object {
    private static UpdateCertificateOptionsRequestMarshaller _instance;
    public static UpdateCertificateOptionsRequestMarshaller Instance { get; }
    private static UpdateCertificateOptionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateCertificateOptionsRequest publicRequest);
    internal static UpdateCertificateOptionsRequestMarshaller GetInstance();
    public static UpdateCertificateOptionsRequestMarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.UpdateCertificateOptionsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateCertificateOptionsResponseUnmarshaller _instance;
    public static UpdateCertificateOptionsResponseUnmarshaller Instance { get; }
    private static UpdateCertificateOptionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateCertificateOptionsResponseUnmarshaller GetInstance();
    public static UpdateCertificateOptionsResponseUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.Internal.MarshallTransformations.ValidationExceptionUnmarshaller : object {
    private static ValidationExceptionUnmarshaller _instance;
    public static ValidationExceptionUnmarshaller Instance { get; }
    private static ValidationExceptionUnmarshaller();
    public sealed virtual ValidationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ValidationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ValidationExceptionUnmarshaller get_Instance();
}
public class Amazon.CertificateManager.Model.InvalidArgsException : AmazonCertificateManagerException {
    public InvalidArgsException(string message);
    public InvalidArgsException(string message, Exception innerException);
    public InvalidArgsException(Exception innerException);
    public InvalidArgsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidArgsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.InvalidArnException : AmazonCertificateManagerException {
    public InvalidArnException(string message);
    public InvalidArnException(string message, Exception innerException);
    public InvalidArnException(Exception innerException);
    public InvalidArnException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidArnException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.InvalidDomainValidationOptionsException : AmazonCertificateManagerException {
    public InvalidDomainValidationOptionsException(string message);
    public InvalidDomainValidationOptionsException(string message, Exception innerException);
    public InvalidDomainValidationOptionsException(Exception innerException);
    public InvalidDomainValidationOptionsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidDomainValidationOptionsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.InvalidParameterException : AmazonCertificateManagerException {
    public InvalidParameterException(string message);
    public InvalidParameterException(string message, Exception innerException);
    public InvalidParameterException(Exception innerException);
    public InvalidParameterException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidParameterException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.InvalidStateException : AmazonCertificateManagerException {
    public InvalidStateException(string message);
    public InvalidStateException(string message, Exception innerException);
    public InvalidStateException(Exception innerException);
    public InvalidStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.InvalidTagException : AmazonCertificateManagerException {
    public InvalidTagException(string message);
    public InvalidTagException(string message, Exception innerException);
    public InvalidTagException(Exception innerException);
    public InvalidTagException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidTagException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.KeyUsage : object {
    private KeyUsageName _name;
    public KeyUsageName Name { get; public set; }
    public KeyUsageName get_Name();
    public void set_Name(KeyUsageName value);
    internal bool IsSetName();
}
public class Amazon.CertificateManager.Model.LimitExceededException : AmazonCertificateManagerException {
    public LimitExceededException(string message);
    public LimitExceededException(string message, Exception innerException);
    public LimitExceededException(Exception innerException);
    public LimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
internal class Amazon.CertificateManager.Model.ListCertificatesPaginator : object {
    private IAmazonCertificateManager _client;
    private ListCertificatesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<CertificateSummary> CertificateSummaryList { get; }
    internal ListCertificatesPaginator(IAmazonCertificateManager client, ListCertificatesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListCertificatesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<CertificateSummary> get_CertificateSummaryList();
    [AsyncIteratorStateMachineAttribute("Amazon.CertificateManager.Model.ListCertificatesPaginator/<Amazon-Runtime-IPaginator<Amazon-CertificateManager-Model-ListCertificatesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListCertificatesResponse> Amazon.Runtime.IPaginator<Amazon.CertificateManager.Model.ListCertificatesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.CertificateManager.Model.ListCertificatesRequest : AmazonCertificateManagerRequest {
    private List`1<string> _certificateStatuses;
    private Filters _includes;
    private Nullable`1<int> _maxItems;
    private string _nextToken;
    private SortBy _sortBy;
    private SortOrder _sortOrder;
    public List`1<string> CertificateStatuses { get; public set; }
    public Filters Includes { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public SortBy SortBy { get; public set; }
    public SortOrder SortOrder { get; public set; }
    public List`1<string> get_CertificateStatuses();
    public void set_CertificateStatuses(List`1<string> value);
    internal bool IsSetCertificateStatuses();
    public Filters get_Includes();
    public void set_Includes(Filters value);
    internal bool IsSetIncludes();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public SortBy get_SortBy();
    public void set_SortBy(SortBy value);
    internal bool IsSetSortBy();
    public SortOrder get_SortOrder();
    public void set_SortOrder(SortOrder value);
    internal bool IsSetSortOrder();
}
public class Amazon.CertificateManager.Model.ListCertificatesResponse : AmazonWebServiceResponse {
    private List`1<CertificateSummary> _certificateSummaryList;
    private string _nextToken;
    public List`1<CertificateSummary> CertificateSummaryList { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<CertificateSummary> get_CertificateSummaryList();
    public void set_CertificateSummaryList(List`1<CertificateSummary> value);
    internal bool IsSetCertificateSummaryList();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.CertificateManager.Model.ListTagsForCertificateRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
}
public class Amazon.CertificateManager.Model.ListTagsForCertificateResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.CertificateManager.Model.PutAccountConfigurationRequest : AmazonCertificateManagerRequest {
    private ExpiryEventsConfiguration _expiryEvents;
    private string _idempotencyToken;
    public ExpiryEventsConfiguration ExpiryEvents { get; public set; }
    [AWSPropertyAttribute]
public string IdempotencyToken { get; public set; }
    public ExpiryEventsConfiguration get_ExpiryEvents();
    public void set_ExpiryEvents(ExpiryEventsConfiguration value);
    internal bool IsSetExpiryEvents();
    public string get_IdempotencyToken();
    public void set_IdempotencyToken(string value);
    internal bool IsSetIdempotencyToken();
}
public class Amazon.CertificateManager.Model.PutAccountConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.CertificateManager.Model.RemoveTagsFromCertificateRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.CertificateManager.Model.RemoveTagsFromCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.CertificateManager.Model.RenewalSummary : object {
    private List`1<DomainValidation> _domainValidationOptions;
    private RenewalStatus _renewalStatus;
    private FailureReason _renewalStatusReason;
    private Nullable`1<DateTime> _updatedAt;
    [AWSPropertyAttribute]
public List`1<DomainValidation> DomainValidationOptions { get; public set; }
    [AWSPropertyAttribute]
public RenewalStatus RenewalStatus { get; public set; }
    public FailureReason RenewalStatusReason { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> UpdatedAt { get; public set; }
    public List`1<DomainValidation> get_DomainValidationOptions();
    public void set_DomainValidationOptions(List`1<DomainValidation> value);
    internal bool IsSetDomainValidationOptions();
    public RenewalStatus get_RenewalStatus();
    public void set_RenewalStatus(RenewalStatus value);
    internal bool IsSetRenewalStatus();
    public FailureReason get_RenewalStatusReason();
    public void set_RenewalStatusReason(FailureReason value);
    internal bool IsSetRenewalStatusReason();
    public Nullable`1<DateTime> get_UpdatedAt();
    public void set_UpdatedAt(Nullable`1<DateTime> value);
    internal bool IsSetUpdatedAt();
}
public class Amazon.CertificateManager.Model.RenewCertificateRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
}
public class Amazon.CertificateManager.Model.RenewCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.CertificateManager.Model.RequestCertificateRequest : AmazonCertificateManagerRequest {
    private string _certificateAuthorityArn;
    private string _domainName;
    private List`1<DomainValidationOption> _domainValidationOptions;
    private string _idempotencyToken;
    private KeyAlgorithm _keyAlgorithm;
    private CertificateOptions _options;
    private List`1<string> _subjectAlternativeNames;
    private List`1<Tag> _tags;
    private ValidationMethod _validationMethod;
    [AWSPropertyAttribute]
public string CertificateAuthorityArn { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public List`1<DomainValidationOption> DomainValidationOptions { get; public set; }
    [AWSPropertyAttribute]
public string IdempotencyToken { get; public set; }
    public KeyAlgorithm KeyAlgorithm { get; public set; }
    public CertificateOptions Options { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SubjectAlternativeNames { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public ValidationMethod ValidationMethod { get; public set; }
    public string get_CertificateAuthorityArn();
    public void set_CertificateAuthorityArn(string value);
    internal bool IsSetCertificateAuthorityArn();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public List`1<DomainValidationOption> get_DomainValidationOptions();
    public void set_DomainValidationOptions(List`1<DomainValidationOption> value);
    internal bool IsSetDomainValidationOptions();
    public string get_IdempotencyToken();
    public void set_IdempotencyToken(string value);
    internal bool IsSetIdempotencyToken();
    public KeyAlgorithm get_KeyAlgorithm();
    public void set_KeyAlgorithm(KeyAlgorithm value);
    internal bool IsSetKeyAlgorithm();
    public CertificateOptions get_Options();
    public void set_Options(CertificateOptions value);
    internal bool IsSetOptions();
    public List`1<string> get_SubjectAlternativeNames();
    public void set_SubjectAlternativeNames(List`1<string> value);
    internal bool IsSetSubjectAlternativeNames();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public ValidationMethod get_ValidationMethod();
    public void set_ValidationMethod(ValidationMethod value);
    internal bool IsSetValidationMethod();
}
public class Amazon.CertificateManager.Model.RequestCertificateResponse : AmazonWebServiceResponse {
    private string _certificateArn;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
}
public class Amazon.CertificateManager.Model.RequestInProgressException : AmazonCertificateManagerException {
    public RequestInProgressException(string message);
    public RequestInProgressException(string message, Exception innerException);
    public RequestInProgressException(Exception innerException);
    public RequestInProgressException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RequestInProgressException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.ResendValidationEmailRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    private string _domain;
    private string _validationDomain;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    [AWSPropertyAttribute]
public string Domain { get; public set; }
    [AWSPropertyAttribute]
public string ValidationDomain { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
    public string get_Domain();
    public void set_Domain(string value);
    internal bool IsSetDomain();
    public string get_ValidationDomain();
    public void set_ValidationDomain(string value);
    internal bool IsSetValidationDomain();
}
public class Amazon.CertificateManager.Model.ResendValidationEmailResponse : AmazonWebServiceResponse {
}
public class Amazon.CertificateManager.Model.ResourceInUseException : AmazonCertificateManagerException {
    public ResourceInUseException(string message);
    public ResourceInUseException(string message, Exception innerException);
    public ResourceInUseException(Exception innerException);
    public ResourceInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.ResourceNotFoundException : AmazonCertificateManagerException {
    public ResourceNotFoundException(string message);
    public ResourceNotFoundException(string message, Exception innerException);
    public ResourceNotFoundException(Exception innerException);
    public ResourceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.ResourceRecord : object {
    private string _name;
    private RecordType _type;
    private string _value;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public RecordType Type { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public RecordType get_Type();
    public void set_Type(RecordType value);
    internal bool IsSetType();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.CertificateManager.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.CertificateManager.Model.TagPolicyException : AmazonCertificateManagerException {
    public TagPolicyException(string message);
    public TagPolicyException(string message, Exception innerException);
    public TagPolicyException(Exception innerException);
    public TagPolicyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TagPolicyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.ThrottlingException : AmazonCertificateManagerException {
    public ThrottlingException(string message);
    public ThrottlingException(string message, Exception innerException);
    public ThrottlingException(Exception innerException);
    public ThrottlingException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ThrottlingException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.TooManyTagsException : AmazonCertificateManagerException {
    public TooManyTagsException(string message);
    public TooManyTagsException(string message, Exception innerException);
    public TooManyTagsException(Exception innerException);
    public TooManyTagsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyTagsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.Model.UpdateCertificateOptionsRequest : AmazonCertificateManagerRequest {
    private string _certificateArn;
    private CertificateOptions _options;
    [AWSPropertyAttribute]
public string CertificateArn { get; public set; }
    [AWSPropertyAttribute]
public CertificateOptions Options { get; public set; }
    public string get_CertificateArn();
    public void set_CertificateArn(string value);
    internal bool IsSetCertificateArn();
    public CertificateOptions get_Options();
    public void set_Options(CertificateOptions value);
    internal bool IsSetOptions();
}
public class Amazon.CertificateManager.Model.UpdateCertificateOptionsResponse : AmazonWebServiceResponse {
}
public class Amazon.CertificateManager.Model.ValidationException : AmazonCertificateManagerException {
    public ValidationException(string message);
    public ValidationException(string message, Exception innerException);
    public ValidationException(Exception innerException);
    public ValidationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ValidationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.CertificateManager.RecordType : ConstantClass {
    public static RecordType CNAME;
    public RecordType(string value);
    private static RecordType();
    public static RecordType FindValue(string value);
    public static RecordType op_Implicit(string value);
}
public class Amazon.CertificateManager.RenewalEligibility : ConstantClass {
    public static RenewalEligibility ELIGIBLE;
    public static RenewalEligibility INELIGIBLE;
    public RenewalEligibility(string value);
    private static RenewalEligibility();
    public static RenewalEligibility FindValue(string value);
    public static RenewalEligibility op_Implicit(string value);
}
public class Amazon.CertificateManager.RenewalStatus : ConstantClass {
    public static RenewalStatus FAILED;
    public static RenewalStatus PENDING_AUTO_RENEWAL;
    public static RenewalStatus PENDING_VALIDATION;
    public static RenewalStatus SUCCESS;
    public RenewalStatus(string value);
    private static RenewalStatus();
    public static RenewalStatus FindValue(string value);
    public static RenewalStatus op_Implicit(string value);
}
public class Amazon.CertificateManager.RevocationReason : ConstantClass {
    public static RevocationReason A_A_COMPROMISE;
    public static RevocationReason AFFILIATION_CHANGED;
    public static RevocationReason CA_COMPROMISE;
    public static RevocationReason CERTIFICATE_HOLD;
    public static RevocationReason CESSATION_OF_OPERATION;
    public static RevocationReason KEY_COMPROMISE;
    public static RevocationReason PRIVILEGE_WITHDRAWN;
    public static RevocationReason REMOVE_FROM_CRL;
    public static RevocationReason SUPERCEDED;
    public static RevocationReason UNSPECIFIED;
    public RevocationReason(string value);
    private static RevocationReason();
    public static RevocationReason FindValue(string value);
    public static RevocationReason op_Implicit(string value);
}
public class Amazon.CertificateManager.SortBy : ConstantClass {
    public static SortBy CREATED_AT;
    public SortBy(string value);
    private static SortBy();
    public static SortBy FindValue(string value);
    public static SortBy op_Implicit(string value);
}
public class Amazon.CertificateManager.SortOrder : ConstantClass {
    public static SortOrder ASCENDING;
    public static SortOrder DESCENDING;
    public SortOrder(string value);
    private static SortOrder();
    public static SortOrder FindValue(string value);
    public static SortOrder op_Implicit(string value);
}
public class Amazon.CertificateManager.ValidationMethod : ConstantClass {
    public static ValidationMethod DNS;
    public static ValidationMethod EMAIL;
    public ValidationMethod(string value);
    private static ValidationMethod();
    public static ValidationMethod FindValue(string value);
    public static ValidationMethod op_Implicit(string value);
}
