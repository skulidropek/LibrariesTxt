public class Amazon.ECS.AgentUpdateStatus : ConstantClass {
    public static AgentUpdateStatus FAILED;
    public static AgentUpdateStatus PENDING;
    public static AgentUpdateStatus STAGED;
    public static AgentUpdateStatus STAGING;
    public static AgentUpdateStatus UPDATED;
    public static AgentUpdateStatus UPDATING;
    public AgentUpdateStatus(string value);
    private static AgentUpdateStatus();
    public static AgentUpdateStatus FindValue(string value);
    public static AgentUpdateStatus op_Implicit(string value);
}
public class Amazon.ECS.AmazonECSClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IECSPaginatorFactory _paginators;
    public IECSPaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonECSClient(RegionEndpoint region);
    public AmazonECSClient(AmazonECSConfig config);
    public AmazonECSClient(AWSCredentials credentials);
    public AmazonECSClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonECSClient(AWSCredentials credentials, AmazonECSConfig clientConfig);
    public AmazonECSClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonECSClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonECSClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonECSConfig clientConfig);
    public AmazonECSClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonECSClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonECSClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonECSConfig clientConfig);
    private static AmazonECSClient();
    public sealed virtual IECSPaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual CreateCapacityProviderResponse CreateCapacityProvider(CreateCapacityProviderRequest request);
    public virtual Task`1<CreateCapacityProviderResponse> CreateCapacityProviderAsync(CreateCapacityProviderRequest request, CancellationToken cancellationToken);
    internal virtual CreateClusterResponse CreateCluster(CreateClusterRequest request);
    public virtual Task`1<CreateClusterResponse> CreateClusterAsync(CreateClusterRequest request, CancellationToken cancellationToken);
    internal virtual CreateServiceResponse CreateService(CreateServiceRequest request);
    public virtual Task`1<CreateServiceResponse> CreateServiceAsync(CreateServiceRequest request, CancellationToken cancellationToken);
    internal virtual CreateTaskSetResponse CreateTaskSet(CreateTaskSetRequest request);
    public virtual Task`1<CreateTaskSetResponse> CreateTaskSetAsync(CreateTaskSetRequest request, CancellationToken cancellationToken);
    internal virtual DeleteAccountSettingResponse DeleteAccountSetting(DeleteAccountSettingRequest request);
    public virtual Task`1<DeleteAccountSettingResponse> DeleteAccountSettingAsync(DeleteAccountSettingRequest request, CancellationToken cancellationToken);
    internal virtual DeleteAttributesResponse DeleteAttributes(DeleteAttributesRequest request);
    public virtual Task`1<DeleteAttributesResponse> DeleteAttributesAsync(DeleteAttributesRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCapacityProviderResponse DeleteCapacityProvider(DeleteCapacityProviderRequest request);
    public virtual Task`1<DeleteCapacityProviderResponse> DeleteCapacityProviderAsync(DeleteCapacityProviderRequest request, CancellationToken cancellationToken);
    internal virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request);
    public virtual Task`1<DeleteClusterResponse> DeleteClusterAsync(DeleteClusterRequest request, CancellationToken cancellationToken);
    internal virtual DeleteServiceResponse DeleteService(DeleteServiceRequest request);
    public virtual Task`1<DeleteServiceResponse> DeleteServiceAsync(DeleteServiceRequest request, CancellationToken cancellationToken);
    internal virtual DeleteTaskDefinitionsResponse DeleteTaskDefinitions(DeleteTaskDefinitionsRequest request);
    public virtual Task`1<DeleteTaskDefinitionsResponse> DeleteTaskDefinitionsAsync(DeleteTaskDefinitionsRequest request, CancellationToken cancellationToken);
    internal virtual DeleteTaskSetResponse DeleteTaskSet(DeleteTaskSetRequest request);
    public virtual Task`1<DeleteTaskSetResponse> DeleteTaskSetAsync(DeleteTaskSetRequest request, CancellationToken cancellationToken);
    internal virtual DeregisterContainerInstanceResponse DeregisterContainerInstance(DeregisterContainerInstanceRequest request);
    public virtual Task`1<DeregisterContainerInstanceResponse> DeregisterContainerInstanceAsync(DeregisterContainerInstanceRequest request, CancellationToken cancellationToken);
    internal virtual DeregisterTaskDefinitionResponse DeregisterTaskDefinition(DeregisterTaskDefinitionRequest request);
    public virtual Task`1<DeregisterTaskDefinitionResponse> DeregisterTaskDefinitionAsync(DeregisterTaskDefinitionRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCapacityProvidersResponse DescribeCapacityProviders(DescribeCapacityProvidersRequest request);
    public virtual Task`1<DescribeCapacityProvidersResponse> DescribeCapacityProvidersAsync(DescribeCapacityProvidersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClustersResponse DescribeClusters(DescribeClustersRequest request);
    public virtual Task`1<DescribeClustersResponse> DescribeClustersAsync(DescribeClustersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeContainerInstancesResponse DescribeContainerInstances(DescribeContainerInstancesRequest request);
    public virtual Task`1<DescribeContainerInstancesResponse> DescribeContainerInstancesAsync(DescribeContainerInstancesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeServicesResponse DescribeServices(DescribeServicesRequest request);
    public virtual Task`1<DescribeServicesResponse> DescribeServicesAsync(DescribeServicesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeTaskDefinitionResponse DescribeTaskDefinition(DescribeTaskDefinitionRequest request);
    public virtual Task`1<DescribeTaskDefinitionResponse> DescribeTaskDefinitionAsync(DescribeTaskDefinitionRequest request, CancellationToken cancellationToken);
    internal virtual DescribeTasksResponse DescribeTasks(DescribeTasksRequest request);
    public virtual Task`1<DescribeTasksResponse> DescribeTasksAsync(DescribeTasksRequest request, CancellationToken cancellationToken);
    internal virtual DescribeTaskSetsResponse DescribeTaskSets(DescribeTaskSetsRequest request);
    public virtual Task`1<DescribeTaskSetsResponse> DescribeTaskSetsAsync(DescribeTaskSetsRequest request, CancellationToken cancellationToken);
    internal virtual ExecuteCommandResponse ExecuteCommand(ExecuteCommandRequest request);
    public virtual Task`1<ExecuteCommandResponse> ExecuteCommandAsync(ExecuteCommandRequest request, CancellationToken cancellationToken);
    internal virtual GetTaskProtectionResponse GetTaskProtection(GetTaskProtectionRequest request);
    public virtual Task`1<GetTaskProtectionResponse> GetTaskProtectionAsync(GetTaskProtectionRequest request, CancellationToken cancellationToken);
    internal virtual ListAccountSettingsResponse ListAccountSettings(ListAccountSettingsRequest request);
    public virtual Task`1<ListAccountSettingsResponse> ListAccountSettingsAsync(ListAccountSettingsRequest request, CancellationToken cancellationToken);
    internal virtual ListAttributesResponse ListAttributes(ListAttributesRequest request);
    public virtual Task`1<ListAttributesResponse> ListAttributesAsync(ListAttributesRequest request, CancellationToken cancellationToken);
    internal virtual ListClustersResponse ListClusters(ListClustersRequest request);
    public virtual Task`1<ListClustersResponse> ListClustersAsync(ListClustersRequest request, CancellationToken cancellationToken);
    internal virtual ListContainerInstancesResponse ListContainerInstances(ListContainerInstancesRequest request);
    public virtual Task`1<ListContainerInstancesResponse> ListContainerInstancesAsync(ListContainerInstancesRequest request, CancellationToken cancellationToken);
    internal virtual ListServicesResponse ListServices(ListServicesRequest request);
    public virtual Task`1<ListServicesResponse> ListServicesAsync(ListServicesRequest request, CancellationToken cancellationToken);
    internal virtual ListServicesByNamespaceResponse ListServicesByNamespace(ListServicesByNamespaceRequest request);
    public virtual Task`1<ListServicesByNamespaceResponse> ListServicesByNamespaceAsync(ListServicesByNamespaceRequest request, CancellationToken cancellationToken);
    internal virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    internal virtual ListTaskDefinitionFamiliesResponse ListTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request);
    public virtual Task`1<ListTaskDefinitionFamiliesResponse> ListTaskDefinitionFamiliesAsync(ListTaskDefinitionFamiliesRequest request, CancellationToken cancellationToken);
    internal virtual ListTaskDefinitionsResponse ListTaskDefinitions(ListTaskDefinitionsRequest request);
    public virtual Task`1<ListTaskDefinitionsResponse> ListTaskDefinitionsAsync(ListTaskDefinitionsRequest request, CancellationToken cancellationToken);
    internal virtual ListTasksResponse ListTasks(ListTasksRequest request);
    public virtual Task`1<ListTasksResponse> ListTasksAsync(ListTasksRequest request, CancellationToken cancellationToken);
    internal virtual PutAccountSettingResponse PutAccountSetting(PutAccountSettingRequest request);
    public virtual Task`1<PutAccountSettingResponse> PutAccountSettingAsync(PutAccountSettingRequest request, CancellationToken cancellationToken);
    internal virtual PutAccountSettingDefaultResponse PutAccountSettingDefault(PutAccountSettingDefaultRequest request);
    public virtual Task`1<PutAccountSettingDefaultResponse> PutAccountSettingDefaultAsync(PutAccountSettingDefaultRequest request, CancellationToken cancellationToken);
    internal virtual PutAttributesResponse PutAttributes(PutAttributesRequest request);
    public virtual Task`1<PutAttributesResponse> PutAttributesAsync(PutAttributesRequest request, CancellationToken cancellationToken);
    internal virtual PutClusterCapacityProvidersResponse PutClusterCapacityProviders(PutClusterCapacityProvidersRequest request);
    public virtual Task`1<PutClusterCapacityProvidersResponse> PutClusterCapacityProvidersAsync(PutClusterCapacityProvidersRequest request, CancellationToken cancellationToken);
    internal virtual RegisterTaskDefinitionResponse RegisterTaskDefinition(RegisterTaskDefinitionRequest request);
    public virtual Task`1<RegisterTaskDefinitionResponse> RegisterTaskDefinitionAsync(RegisterTaskDefinitionRequest request, CancellationToken cancellationToken);
    internal virtual RunTaskResponse RunTask(RunTaskRequest request);
    public virtual Task`1<RunTaskResponse> RunTaskAsync(RunTaskRequest request, CancellationToken cancellationToken);
    internal virtual StartTaskResponse StartTask(StartTaskRequest request);
    public virtual Task`1<StartTaskResponse> StartTaskAsync(StartTaskRequest request, CancellationToken cancellationToken);
    internal virtual StopTaskResponse StopTask(StopTaskRequest request);
    public virtual Task`1<StopTaskResponse> StopTaskAsync(StopTaskRequest request, CancellationToken cancellationToken);
    internal virtual SubmitAttachmentStateChangesResponse SubmitAttachmentStateChanges(SubmitAttachmentStateChangesRequest request);
    public virtual Task`1<SubmitAttachmentStateChangesResponse> SubmitAttachmentStateChangesAsync(SubmitAttachmentStateChangesRequest request, CancellationToken cancellationToken);
    internal virtual TagResourceResponse TagResource(TagResourceRequest request);
    public virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    internal virtual UntagResourceResponse UntagResource(UntagResourceRequest request);
    public virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    internal virtual UpdateCapacityProviderResponse UpdateCapacityProvider(UpdateCapacityProviderRequest request);
    public virtual Task`1<UpdateCapacityProviderResponse> UpdateCapacityProviderAsync(UpdateCapacityProviderRequest request, CancellationToken cancellationToken);
    internal virtual UpdateClusterResponse UpdateCluster(UpdateClusterRequest request);
    public virtual Task`1<UpdateClusterResponse> UpdateClusterAsync(UpdateClusterRequest request, CancellationToken cancellationToken);
    internal virtual UpdateClusterSettingsResponse UpdateClusterSettings(UpdateClusterSettingsRequest request);
    public virtual Task`1<UpdateClusterSettingsResponse> UpdateClusterSettingsAsync(UpdateClusterSettingsRequest request, CancellationToken cancellationToken);
    internal virtual UpdateContainerAgentResponse UpdateContainerAgent(UpdateContainerAgentRequest request);
    public virtual Task`1<UpdateContainerAgentResponse> UpdateContainerAgentAsync(UpdateContainerAgentRequest request, CancellationToken cancellationToken);
    internal virtual UpdateContainerInstancesStateResponse UpdateContainerInstancesState(UpdateContainerInstancesStateRequest request);
    public virtual Task`1<UpdateContainerInstancesStateResponse> UpdateContainerInstancesStateAsync(UpdateContainerInstancesStateRequest request, CancellationToken cancellationToken);
    internal virtual UpdateServiceResponse UpdateService(UpdateServiceRequest request);
    public virtual Task`1<UpdateServiceResponse> UpdateServiceAsync(UpdateServiceRequest request, CancellationToken cancellationToken);
    internal virtual UpdateServicePrimaryTaskSetResponse UpdateServicePrimaryTaskSet(UpdateServicePrimaryTaskSetRequest request);
    public virtual Task`1<UpdateServicePrimaryTaskSetResponse> UpdateServicePrimaryTaskSetAsync(UpdateServicePrimaryTaskSetRequest request, CancellationToken cancellationToken);
    internal virtual UpdateTaskProtectionResponse UpdateTaskProtection(UpdateTaskProtectionRequest request);
    public virtual Task`1<UpdateTaskProtectionResponse> UpdateTaskProtectionAsync(UpdateTaskProtectionRequest request, CancellationToken cancellationToken);
    internal virtual UpdateTaskSetResponse UpdateTaskSet(UpdateTaskSetRequest request);
    public virtual Task`1<UpdateTaskSetResponse> UpdateTaskSetAsync(UpdateTaskSetRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.ECS.AmazonECSConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonECSEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonECSConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.ECS.AmazonECSDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonECSDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.ECS.AmazonECSException : AmazonServiceException {
    public AmazonECSException(string message);
    public AmazonECSException(string message, Exception innerException);
    public AmazonECSException(Exception innerException);
    public AmazonECSException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonECSException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.AmazonECSRequest : AmazonWebServiceRequest {
}
public class Amazon.ECS.ApplicationProtocol : ConstantClass {
    public static ApplicationProtocol Grpc;
    public static ApplicationProtocol Http;
    public static ApplicationProtocol Http2;
    public ApplicationProtocol(string value);
    private static ApplicationProtocol();
    public static ApplicationProtocol FindValue(string value);
    public static ApplicationProtocol op_Implicit(string value);
}
public class Amazon.ECS.AssignPublicIp : ConstantClass {
    public static AssignPublicIp DISABLED;
    public static AssignPublicIp ENABLED;
    public AssignPublicIp(string value);
    private static AssignPublicIp();
    public static AssignPublicIp FindValue(string value);
    public static AssignPublicIp op_Implicit(string value);
}
public class Amazon.ECS.CapacityProviderField : ConstantClass {
    public static CapacityProviderField TAGS;
    public CapacityProviderField(string value);
    private static CapacityProviderField();
    public static CapacityProviderField FindValue(string value);
    public static CapacityProviderField op_Implicit(string value);
}
public class Amazon.ECS.CapacityProviderStatus : ConstantClass {
    public static CapacityProviderStatus ACTIVE;
    public static CapacityProviderStatus INACTIVE;
    public CapacityProviderStatus(string value);
    private static CapacityProviderStatus();
    public static CapacityProviderStatus FindValue(string value);
    public static CapacityProviderStatus op_Implicit(string value);
}
public class Amazon.ECS.CapacityProviderUpdateStatus : ConstantClass {
    public static CapacityProviderUpdateStatus DELETE_COMPLETE;
    public static CapacityProviderUpdateStatus DELETE_FAILED;
    public static CapacityProviderUpdateStatus DELETE_IN_PROGRESS;
    public static CapacityProviderUpdateStatus UPDATE_COMPLETE;
    public static CapacityProviderUpdateStatus UPDATE_FAILED;
    public static CapacityProviderUpdateStatus UPDATE_IN_PROGRESS;
    public CapacityProviderUpdateStatus(string value);
    private static CapacityProviderUpdateStatus();
    public static CapacityProviderUpdateStatus FindValue(string value);
    public static CapacityProviderUpdateStatus op_Implicit(string value);
}
public class Amazon.ECS.ClusterField : ConstantClass {
    public static ClusterField ATTACHMENTS;
    public static ClusterField CONFIGURATIONS;
    public static ClusterField SETTINGS;
    public static ClusterField STATISTICS;
    public static ClusterField TAGS;
    public ClusterField(string value);
    private static ClusterField();
    public static ClusterField FindValue(string value);
    public static ClusterField op_Implicit(string value);
}
public class Amazon.ECS.ClusterSettingName : ConstantClass {
    public static ClusterSettingName ContainerInsights;
    public ClusterSettingName(string value);
    private static ClusterSettingName();
    public static ClusterSettingName FindValue(string value);
    public static ClusterSettingName op_Implicit(string value);
}
public class Amazon.ECS.Compatibility : ConstantClass {
    public static Compatibility EC2;
    public static Compatibility EXTERNAL;
    public static Compatibility FARGATE;
    public Compatibility(string value);
    private static Compatibility();
    public static Compatibility FindValue(string value);
    public static Compatibility op_Implicit(string value);
}
public class Amazon.ECS.Connectivity : ConstantClass {
    public static Connectivity CONNECTED;
    public static Connectivity DISCONNECTED;
    public Connectivity(string value);
    private static Connectivity();
    public static Connectivity FindValue(string value);
    public static Connectivity op_Implicit(string value);
}
public class Amazon.ECS.ContainerCondition : ConstantClass {
    public static ContainerCondition COMPLETE;
    public static ContainerCondition HEALTHY;
    public static ContainerCondition START;
    public static ContainerCondition SUCCESS;
    public ContainerCondition(string value);
    private static ContainerCondition();
    public static ContainerCondition FindValue(string value);
    public static ContainerCondition op_Implicit(string value);
}
public class Amazon.ECS.ContainerInstanceField : ConstantClass {
    public static ContainerInstanceField CONTAINER_INSTANCE_HEALTH;
    public static ContainerInstanceField TAGS;
    public ContainerInstanceField(string value);
    private static ContainerInstanceField();
    public static ContainerInstanceField FindValue(string value);
    public static ContainerInstanceField op_Implicit(string value);
}
public class Amazon.ECS.ContainerInstanceStatus : ConstantClass {
    public static ContainerInstanceStatus ACTIVE;
    public static ContainerInstanceStatus DEREGISTERING;
    public static ContainerInstanceStatus DRAINING;
    public static ContainerInstanceStatus REGISTERING;
    public static ContainerInstanceStatus REGISTRATION_FAILED;
    public ContainerInstanceStatus(string value);
    private static ContainerInstanceStatus();
    public static ContainerInstanceStatus FindValue(string value);
    public static ContainerInstanceStatus op_Implicit(string value);
}
public class Amazon.ECS.CPUArchitecture : ConstantClass {
    public static CPUArchitecture ARM64;
    public static CPUArchitecture X86_64;
    public CPUArchitecture(string value);
    private static CPUArchitecture();
    public static CPUArchitecture FindValue(string value);
    public static CPUArchitecture op_Implicit(string value);
}
public class Amazon.ECS.DeploymentControllerType : ConstantClass {
    public static DeploymentControllerType CODE_DEPLOY;
    public static DeploymentControllerType ECS;
    public static DeploymentControllerType EXTERNAL;
    public DeploymentControllerType(string value);
    private static DeploymentControllerType();
    public static DeploymentControllerType FindValue(string value);
    public static DeploymentControllerType op_Implicit(string value);
}
public class Amazon.ECS.DeploymentRolloutState : ConstantClass {
    public static DeploymentRolloutState COMPLETED;
    public static DeploymentRolloutState FAILED;
    public static DeploymentRolloutState IN_PROGRESS;
    public DeploymentRolloutState(string value);
    private static DeploymentRolloutState();
    public static DeploymentRolloutState FindValue(string value);
    public static DeploymentRolloutState op_Implicit(string value);
}
public class Amazon.ECS.DesiredStatus : ConstantClass {
    public static DesiredStatus PENDING;
    public static DesiredStatus RUNNING;
    public static DesiredStatus STOPPED;
    public DesiredStatus(string value);
    private static DesiredStatus();
    public static DesiredStatus FindValue(string value);
    public static DesiredStatus op_Implicit(string value);
}
public class Amazon.ECS.DeviceCgroupPermission : ConstantClass {
    public static DeviceCgroupPermission Mknod;
    public static DeviceCgroupPermission Read;
    public static DeviceCgroupPermission Write;
    public DeviceCgroupPermission(string value);
    private static DeviceCgroupPermission();
    public static DeviceCgroupPermission FindValue(string value);
    public static DeviceCgroupPermission op_Implicit(string value);
}
public class Amazon.ECS.EBSResourceType : ConstantClass {
    public static EBSResourceType Volume;
    public EBSResourceType(string value);
    private static EBSResourceType();
    public static EBSResourceType FindValue(string value);
    public static EBSResourceType op_Implicit(string value);
}
public class Amazon.ECS.EFSAuthorizationConfigIAM : ConstantClass {
    public static EFSAuthorizationConfigIAM DISABLED;
    public static EFSAuthorizationConfigIAM ENABLED;
    public EFSAuthorizationConfigIAM(string value);
    private static EFSAuthorizationConfigIAM();
    public static EFSAuthorizationConfigIAM FindValue(string value);
    public static EFSAuthorizationConfigIAM op_Implicit(string value);
}
public class Amazon.ECS.EFSTransitEncryption : ConstantClass {
    public static EFSTransitEncryption DISABLED;
    public static EFSTransitEncryption ENABLED;
    public EFSTransitEncryption(string value);
    private static EFSTransitEncryption();
    public static EFSTransitEncryption FindValue(string value);
    public static EFSTransitEncryption op_Implicit(string value);
}
public class Amazon.ECS.Endpoints.ECSEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public class Amazon.ECS.EnvironmentFileType : ConstantClass {
    public static EnvironmentFileType S3;
    public EnvironmentFileType(string value);
    private static EnvironmentFileType();
    public static EnvironmentFileType FindValue(string value);
    public static EnvironmentFileType op_Implicit(string value);
}
public class Amazon.ECS.ExecuteCommandLogging : ConstantClass {
    public static ExecuteCommandLogging DEFAULT;
    public static ExecuteCommandLogging NONE;
    public static ExecuteCommandLogging OVERRIDE;
    public ExecuteCommandLogging(string value);
    private static ExecuteCommandLogging();
    public static ExecuteCommandLogging FindValue(string value);
    public static ExecuteCommandLogging op_Implicit(string value);
}
public class Amazon.ECS.FirelensConfigurationType : ConstantClass {
    public static FirelensConfigurationType Fluentbit;
    public static FirelensConfigurationType Fluentd;
    public FirelensConfigurationType(string value);
    private static FirelensConfigurationType();
    public static FirelensConfigurationType FindValue(string value);
    public static FirelensConfigurationType op_Implicit(string value);
}
public class Amazon.ECS.HealthStatus : ConstantClass {
    public static HealthStatus HEALTHY;
    public static HealthStatus UNHEALTHY;
    public static HealthStatus UNKNOWN;
    public HealthStatus(string value);
    private static HealthStatus();
    public static HealthStatus FindValue(string value);
    public static HealthStatus op_Implicit(string value);
}
public interface Amazon.ECS.IAmazonECS {
    public IECSPaginatorFactory Paginators { get; }
    public abstract virtual IECSPaginatorFactory get_Paginators();
    public abstract virtual Task`1<CreateCapacityProviderResponse> CreateCapacityProviderAsync(CreateCapacityProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateClusterResponse> CreateClusterAsync(CreateClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateServiceResponse> CreateServiceAsync(CreateServiceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateTaskSetResponse> CreateTaskSetAsync(CreateTaskSetRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAccountSettingResponse> DeleteAccountSettingAsync(DeleteAccountSettingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAttributesResponse> DeleteAttributesAsync(DeleteAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCapacityProviderResponse> DeleteCapacityProviderAsync(DeleteCapacityProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteClusterResponse> DeleteClusterAsync(DeleteClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteServiceResponse> DeleteServiceAsync(DeleteServiceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteTaskDefinitionsResponse> DeleteTaskDefinitionsAsync(DeleteTaskDefinitionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteTaskSetResponse> DeleteTaskSetAsync(DeleteTaskSetRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeregisterContainerInstanceResponse> DeregisterContainerInstanceAsync(DeregisterContainerInstanceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeregisterTaskDefinitionResponse> DeregisterTaskDefinitionAsync(DeregisterTaskDefinitionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCapacityProvidersResponse> DescribeCapacityProvidersAsync(DescribeCapacityProvidersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClustersResponse> DescribeClustersAsync(DescribeClustersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeContainerInstancesResponse> DescribeContainerInstancesAsync(DescribeContainerInstancesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeServicesResponse> DescribeServicesAsync(DescribeServicesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeTaskDefinitionResponse> DescribeTaskDefinitionAsync(DescribeTaskDefinitionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeTasksResponse> DescribeTasksAsync(DescribeTasksRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeTaskSetsResponse> DescribeTaskSetsAsync(DescribeTaskSetsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ExecuteCommandResponse> ExecuteCommandAsync(ExecuteCommandRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetTaskProtectionResponse> GetTaskProtectionAsync(GetTaskProtectionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAccountSettingsResponse> ListAccountSettingsAsync(ListAccountSettingsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAttributesResponse> ListAttributesAsync(ListAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListClustersResponse> ListClustersAsync(ListClustersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListContainerInstancesResponse> ListContainerInstancesAsync(ListContainerInstancesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListServicesResponse> ListServicesAsync(ListServicesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListServicesByNamespaceResponse> ListServicesByNamespaceAsync(ListServicesByNamespaceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTaskDefinitionFamiliesResponse> ListTaskDefinitionFamiliesAsync(ListTaskDefinitionFamiliesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTaskDefinitionsResponse> ListTaskDefinitionsAsync(ListTaskDefinitionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTasksResponse> ListTasksAsync(ListTasksRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutAccountSettingResponse> PutAccountSettingAsync(PutAccountSettingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutAccountSettingDefaultResponse> PutAccountSettingDefaultAsync(PutAccountSettingDefaultRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutAttributesResponse> PutAttributesAsync(PutAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutClusterCapacityProvidersResponse> PutClusterCapacityProvidersAsync(PutClusterCapacityProvidersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RegisterTaskDefinitionResponse> RegisterTaskDefinitionAsync(RegisterTaskDefinitionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RunTaskResponse> RunTaskAsync(RunTaskRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<StartTaskResponse> StartTaskAsync(StartTaskRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<StopTaskResponse> StopTaskAsync(StopTaskRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SubmitAttachmentStateChangesResponse> SubmitAttachmentStateChangesAsync(SubmitAttachmentStateChangesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateCapacityProviderResponse> UpdateCapacityProviderAsync(UpdateCapacityProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateClusterResponse> UpdateClusterAsync(UpdateClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateClusterSettingsResponse> UpdateClusterSettingsAsync(UpdateClusterSettingsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateContainerAgentResponse> UpdateContainerAgentAsync(UpdateContainerAgentRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateContainerInstancesStateResponse> UpdateContainerInstancesStateAsync(UpdateContainerInstancesStateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateServiceResponse> UpdateServiceAsync(UpdateServiceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateServicePrimaryTaskSetResponse> UpdateServicePrimaryTaskSetAsync(UpdateServicePrimaryTaskSetRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateTaskProtectionResponse> UpdateTaskProtectionAsync(UpdateTaskProtectionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateTaskSetResponse> UpdateTaskSetAsync(UpdateTaskSetRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    [DynamicDependencyAttribute("512", "Amazon.ECS.AmazonECSConfig")]
private static override ClientConfig Amazon.Runtime.IAmazonService.CreateDefaultClientConfig();
    [UnconditionalSuppressMessageAttribute("AssemblyLoadTrimming", "IL2026:RequiresUnreferencedCode")]
private static override IAmazonService Amazon.Runtime.IAmazonService.CreateDefaultServiceClient(AWSCredentials awsCredentials, ClientConfig clientConfig);
}
public class Amazon.ECS.InstanceHealthCheckState : ConstantClass {
    public static InstanceHealthCheckState IMPAIRED;
    public static InstanceHealthCheckState INITIALIZING;
    public static InstanceHealthCheckState INSUFFICIENT_DATA;
    public static InstanceHealthCheckState OK;
    public InstanceHealthCheckState(string value);
    private static InstanceHealthCheckState();
    public static InstanceHealthCheckState FindValue(string value);
    public static InstanceHealthCheckState op_Implicit(string value);
}
public class Amazon.ECS.InstanceHealthCheckType : ConstantClass {
    public static InstanceHealthCheckType CONTAINER_RUNTIME;
    public InstanceHealthCheckType(string value);
    private static InstanceHealthCheckType();
    public static InstanceHealthCheckType FindValue(string value);
    public static InstanceHealthCheckType op_Implicit(string value);
}
public class Amazon.ECS.Internal.AmazonECSEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.ECS.Internal.AmazonECSEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.ECS.Internal.AmazonECSMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.ECS.IpcMode : ConstantClass {
    public static IpcMode Host;
    public static IpcMode None;
    public static IpcMode Task;
    public IpcMode(string value);
    private static IpcMode();
    public static IpcMode FindValue(string value);
    public static IpcMode op_Implicit(string value);
}
public class Amazon.ECS.LaunchType : ConstantClass {
    public static LaunchType EC2;
    public static LaunchType EXTERNAL;
    public static LaunchType FARGATE;
    public LaunchType(string value);
    private static LaunchType();
    public static LaunchType FindValue(string value);
    public static LaunchType op_Implicit(string value);
}
public class Amazon.ECS.LogDriver : ConstantClass {
    public static LogDriver Awsfirelens;
    public static LogDriver Awslogs;
    public static LogDriver Fluentd;
    public static LogDriver Gelf;
    public static LogDriver Journald;
    public static LogDriver JsonFile;
    public static LogDriver Splunk;
    public static LogDriver Syslog;
    public LogDriver(string value);
    private static LogDriver();
    public static LogDriver FindValue(string value);
    public static LogDriver op_Implicit(string value);
}
public class Amazon.ECS.ManagedAgentName : ConstantClass {
    public static ManagedAgentName ExecuteCommandAgent;
    public ManagedAgentName(string value);
    private static ManagedAgentName();
    public static ManagedAgentName FindValue(string value);
    public static ManagedAgentName op_Implicit(string value);
}
public class Amazon.ECS.ManagedDraining : ConstantClass {
    public static ManagedDraining DISABLED;
    public static ManagedDraining ENABLED;
    public ManagedDraining(string value);
    private static ManagedDraining();
    public static ManagedDraining FindValue(string value);
    public static ManagedDraining op_Implicit(string value);
}
public class Amazon.ECS.ManagedScalingStatus : ConstantClass {
    public static ManagedScalingStatus DISABLED;
    public static ManagedScalingStatus ENABLED;
    public ManagedScalingStatus(string value);
    private static ManagedScalingStatus();
    public static ManagedScalingStatus FindValue(string value);
    public static ManagedScalingStatus op_Implicit(string value);
}
public class Amazon.ECS.ManagedTerminationProtection : ConstantClass {
    public static ManagedTerminationProtection DISABLED;
    public static ManagedTerminationProtection ENABLED;
    public ManagedTerminationProtection(string value);
    private static ManagedTerminationProtection();
    public static ManagedTerminationProtection FindValue(string value);
    public static ManagedTerminationProtection op_Implicit(string value);
}
public class Amazon.ECS.Model.AccessDeniedException : AmazonECSException {
    public AccessDeniedException(string message);
    public AccessDeniedException(string message, Exception innerException);
    public AccessDeniedException(Exception innerException);
    public AccessDeniedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AccessDeniedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.Attachment : object {
    private List`1<KeyValuePair> _details;
    private string _id;
    private string _status;
    private string _type;
    public List`1<KeyValuePair> Details { get; public set; }
    public string Id { get; public set; }
    public string Status { get; public set; }
    public string Type { get; public set; }
    public List`1<KeyValuePair> get_Details();
    public void set_Details(List`1<KeyValuePair> value);
    internal bool IsSetDetails();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
}
public class Amazon.ECS.Model.AttachmentStateChange : object {
    private string _attachmentArn;
    private string _status;
    [AWSPropertyAttribute]
public string AttachmentArn { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public string get_AttachmentArn();
    public void set_AttachmentArn(string value);
    internal bool IsSetAttachmentArn();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.ECS.Model.Attribute : object {
    private string _name;
    private string _targetId;
    private TargetType _targetType;
    private string _value;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string TargetId { get; public set; }
    public TargetType TargetType { get; public set; }
    public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_TargetId();
    public void set_TargetId(string value);
    internal bool IsSetTargetId();
    public TargetType get_TargetType();
    public void set_TargetType(TargetType value);
    internal bool IsSetTargetType();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.AttributeLimitExceededException : AmazonECSException {
    public AttributeLimitExceededException(string message);
    public AttributeLimitExceededException(string message, Exception innerException);
    public AttributeLimitExceededException(Exception innerException);
    public AttributeLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AttributeLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.AutoScalingGroupProvider : object {
    private string _autoScalingGroupArn;
    private ManagedDraining _managedDraining;
    private ManagedScaling _managedScaling;
    private ManagedTerminationProtection _managedTerminationProtection;
    [AWSPropertyAttribute]
public string AutoScalingGroupArn { get; public set; }
    public ManagedDraining ManagedDraining { get; public set; }
    public ManagedScaling ManagedScaling { get; public set; }
    public ManagedTerminationProtection ManagedTerminationProtection { get; public set; }
    public string get_AutoScalingGroupArn();
    public void set_AutoScalingGroupArn(string value);
    internal bool IsSetAutoScalingGroupArn();
    public ManagedDraining get_ManagedDraining();
    public void set_ManagedDraining(ManagedDraining value);
    internal bool IsSetManagedDraining();
    public ManagedScaling get_ManagedScaling();
    public void set_ManagedScaling(ManagedScaling value);
    internal bool IsSetManagedScaling();
    public ManagedTerminationProtection get_ManagedTerminationProtection();
    public void set_ManagedTerminationProtection(ManagedTerminationProtection value);
    internal bool IsSetManagedTerminationProtection();
}
public class Amazon.ECS.Model.AutoScalingGroupProviderUpdate : object {
    private ManagedDraining _managedDraining;
    private ManagedScaling _managedScaling;
    private ManagedTerminationProtection _managedTerminationProtection;
    public ManagedDraining ManagedDraining { get; public set; }
    public ManagedScaling ManagedScaling { get; public set; }
    public ManagedTerminationProtection ManagedTerminationProtection { get; public set; }
    public ManagedDraining get_ManagedDraining();
    public void set_ManagedDraining(ManagedDraining value);
    internal bool IsSetManagedDraining();
    public ManagedScaling get_ManagedScaling();
    public void set_ManagedScaling(ManagedScaling value);
    internal bool IsSetManagedScaling();
    public ManagedTerminationProtection get_ManagedTerminationProtection();
    public void set_ManagedTerminationProtection(ManagedTerminationProtection value);
    internal bool IsSetManagedTerminationProtection();
}
public class Amazon.ECS.Model.AwsVpcConfiguration : object {
    private AssignPublicIp _assignPublicIp;
    private List`1<string> _securityGroups;
    private List`1<string> _subnets;
    public AssignPublicIp AssignPublicIp { get; public set; }
    public List`1<string> SecurityGroups { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Subnets { get; public set; }
    public AssignPublicIp get_AssignPublicIp();
    public void set_AssignPublicIp(AssignPublicIp value);
    internal bool IsSetAssignPublicIp();
    public List`1<string> get_SecurityGroups();
    public void set_SecurityGroups(List`1<string> value);
    internal bool IsSetSecurityGroups();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
}
public class Amazon.ECS.Model.BlockedException : AmazonECSException {
    public BlockedException(string message);
    public BlockedException(string message, Exception innerException);
    public BlockedException(Exception innerException);
    public BlockedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BlockedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.CapacityProvider : object {
    private AutoScalingGroupProvider _autoScalingGroupProvider;
    private string _capacityProviderArn;
    private string _name;
    private CapacityProviderStatus _status;
    private List`1<Tag> _tags;
    private CapacityProviderUpdateStatus _updateStatus;
    private string _updateStatusReason;
    public AutoScalingGroupProvider AutoScalingGroupProvider { get; public set; }
    public string CapacityProviderArn { get; public set; }
    public string Name { get; public set; }
    public CapacityProviderStatus Status { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public CapacityProviderUpdateStatus UpdateStatus { get; public set; }
    public string UpdateStatusReason { get; public set; }
    public AutoScalingGroupProvider get_AutoScalingGroupProvider();
    public void set_AutoScalingGroupProvider(AutoScalingGroupProvider value);
    internal bool IsSetAutoScalingGroupProvider();
    public string get_CapacityProviderArn();
    public void set_CapacityProviderArn(string value);
    internal bool IsSetCapacityProviderArn();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public CapacityProviderStatus get_Status();
    public void set_Status(CapacityProviderStatus value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public CapacityProviderUpdateStatus get_UpdateStatus();
    public void set_UpdateStatus(CapacityProviderUpdateStatus value);
    internal bool IsSetUpdateStatus();
    public string get_UpdateStatusReason();
    public void set_UpdateStatusReason(string value);
    internal bool IsSetUpdateStatusReason();
}
public class Amazon.ECS.Model.CapacityProviderStrategyItem : object {
    private Nullable`1<int> _base;
    private string _capacityProvider;
    private Nullable`1<int> _weight;
    [AWSPropertyAttribute]
public Nullable`1<int> Base { get; public set; }
    [AWSPropertyAttribute]
public string CapacityProvider { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Weight { get; public set; }
    public Nullable`1<int> get_Base();
    public void set_Base(Nullable`1<int> value);
    internal bool IsSetBase();
    public string get_CapacityProvider();
    public void set_CapacityProvider(string value);
    internal bool IsSetCapacityProvider();
    public Nullable`1<int> get_Weight();
    public void set_Weight(Nullable`1<int> value);
    internal bool IsSetWeight();
}
public class Amazon.ECS.Model.ClientException : AmazonECSException {
    public ClientException(string message);
    public ClientException(string message, Exception innerException);
    public ClientException(Exception innerException);
    public ClientException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClientException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.Cluster : object {
    private Nullable`1<int> _activeServicesCount;
    private List`1<Attachment> _attachments;
    private string _attachmentsStatus;
    private List`1<string> _capacityProviders;
    private string _clusterArn;
    private string _clusterName;
    private ClusterConfiguration _configuration;
    private List`1<CapacityProviderStrategyItem> _defaultCapacityProviderStrategy;
    private Nullable`1<int> _pendingTasksCount;
    private Nullable`1<int> _registeredContainerInstancesCount;
    private Nullable`1<int> _runningTasksCount;
    private ClusterServiceConnectDefaults _serviceConnectDefaults;
    private List`1<ClusterSetting> _settings;
    private List`1<KeyValuePair> _statistics;
    private string _status;
    private List`1<Tag> _tags;
    public Nullable`1<int> ActiveServicesCount { get; public set; }
    public List`1<Attachment> Attachments { get; public set; }
    public string AttachmentsStatus { get; public set; }
    public List`1<string> CapacityProviders { get; public set; }
    public string ClusterArn { get; public set; }
    public string ClusterName { get; public set; }
    public ClusterConfiguration Configuration { get; public set; }
    public List`1<CapacityProviderStrategyItem> DefaultCapacityProviderStrategy { get; public set; }
    public Nullable`1<int> PendingTasksCount { get; public set; }
    public Nullable`1<int> RegisteredContainerInstancesCount { get; public set; }
    public Nullable`1<int> RunningTasksCount { get; public set; }
    public ClusterServiceConnectDefaults ServiceConnectDefaults { get; public set; }
    public List`1<ClusterSetting> Settings { get; public set; }
    public List`1<KeyValuePair> Statistics { get; public set; }
    public string Status { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<int> get_ActiveServicesCount();
    public void set_ActiveServicesCount(Nullable`1<int> value);
    internal bool IsSetActiveServicesCount();
    public List`1<Attachment> get_Attachments();
    public void set_Attachments(List`1<Attachment> value);
    internal bool IsSetAttachments();
    public string get_AttachmentsStatus();
    public void set_AttachmentsStatus(string value);
    internal bool IsSetAttachmentsStatus();
    public List`1<string> get_CapacityProviders();
    public void set_CapacityProviders(List`1<string> value);
    internal bool IsSetCapacityProviders();
    public string get_ClusterArn();
    public void set_ClusterArn(string value);
    internal bool IsSetClusterArn();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public ClusterConfiguration get_Configuration();
    public void set_Configuration(ClusterConfiguration value);
    internal bool IsSetConfiguration();
    public List`1<CapacityProviderStrategyItem> get_DefaultCapacityProviderStrategy();
    public void set_DefaultCapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetDefaultCapacityProviderStrategy();
    public Nullable`1<int> get_PendingTasksCount();
    public void set_PendingTasksCount(Nullable`1<int> value);
    internal bool IsSetPendingTasksCount();
    public Nullable`1<int> get_RegisteredContainerInstancesCount();
    public void set_RegisteredContainerInstancesCount(Nullable`1<int> value);
    internal bool IsSetRegisteredContainerInstancesCount();
    public Nullable`1<int> get_RunningTasksCount();
    public void set_RunningTasksCount(Nullable`1<int> value);
    internal bool IsSetRunningTasksCount();
    public ClusterServiceConnectDefaults get_ServiceConnectDefaults();
    public void set_ServiceConnectDefaults(ClusterServiceConnectDefaults value);
    internal bool IsSetServiceConnectDefaults();
    public List`1<ClusterSetting> get_Settings();
    public void set_Settings(List`1<ClusterSetting> value);
    internal bool IsSetSettings();
    public List`1<KeyValuePair> get_Statistics();
    public void set_Statistics(List`1<KeyValuePair> value);
    internal bool IsSetStatistics();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ECS.Model.ClusterConfiguration : object {
    private ExecuteCommandConfiguration _executeCommandConfiguration;
    private ManagedStorageConfiguration _managedStorageConfiguration;
    public ExecuteCommandConfiguration ExecuteCommandConfiguration { get; public set; }
    public ManagedStorageConfiguration ManagedStorageConfiguration { get; public set; }
    public ExecuteCommandConfiguration get_ExecuteCommandConfiguration();
    public void set_ExecuteCommandConfiguration(ExecuteCommandConfiguration value);
    internal bool IsSetExecuteCommandConfiguration();
    public ManagedStorageConfiguration get_ManagedStorageConfiguration();
    public void set_ManagedStorageConfiguration(ManagedStorageConfiguration value);
    internal bool IsSetManagedStorageConfiguration();
}
public class Amazon.ECS.Model.ClusterContainsContainerInstancesException : AmazonECSException {
    public ClusterContainsContainerInstancesException(string message);
    public ClusterContainsContainerInstancesException(string message, Exception innerException);
    public ClusterContainsContainerInstancesException(Exception innerException);
    public ClusterContainsContainerInstancesException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterContainsContainerInstancesException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.ClusterContainsServicesException : AmazonECSException {
    public ClusterContainsServicesException(string message);
    public ClusterContainsServicesException(string message, Exception innerException);
    public ClusterContainsServicesException(Exception innerException);
    public ClusterContainsServicesException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterContainsServicesException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.ClusterContainsTasksException : AmazonECSException {
    public ClusterContainsTasksException(string message);
    public ClusterContainsTasksException(string message, Exception innerException);
    public ClusterContainsTasksException(Exception innerException);
    public ClusterContainsTasksException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterContainsTasksException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.ClusterNotFoundException : AmazonECSException {
    public ClusterNotFoundException(string message);
    public ClusterNotFoundException(string message, Exception innerException);
    public ClusterNotFoundException(Exception innerException);
    public ClusterNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.ClusterServiceConnectDefaults : object {
    private string _awsNamespace;
    public string Namespace { get; public set; }
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
}
public class Amazon.ECS.Model.ClusterServiceConnectDefaultsRequest : object {
    private string _awsNamespace;
    [AWSPropertyAttribute]
public string Namespace { get; public set; }
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
}
public class Amazon.ECS.Model.ClusterSetting : object {
    private ClusterSettingName _name;
    private string _value;
    public ClusterSettingName Name { get; public set; }
    public string Value { get; public set; }
    public ClusterSettingName get_Name();
    public void set_Name(ClusterSettingName value);
    internal bool IsSetName();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.ConflictException : AmazonECSException {
    private List`1<string> _resourceIds;
    public List`1<string> ResourceIds { get; public set; }
    public ConflictException(string message);
    public ConflictException(string message, Exception innerException);
    public ConflictException(Exception innerException);
    public ConflictException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConflictException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public List`1<string> get_ResourceIds();
    public void set_ResourceIds(List`1<string> value);
    internal bool IsSetResourceIds();
}
public class Amazon.ECS.Model.Container : object {
    private string _containerArn;
    private string _cpu;
    private Nullable`1<int> _exitCode;
    private List`1<string> _gpuIds;
    private HealthStatus _healthStatus;
    private string _image;
    private string _imageDigest;
    private string _lastStatus;
    private List`1<ManagedAgent> _managedAgents;
    private string _memory;
    private string _memoryReservation;
    private string _name;
    private List`1<NetworkBinding> _networkBindings;
    private List`1<NetworkInterface> _networkInterfaces;
    private string _reason;
    private string _runtimeId;
    private string _taskArn;
    public string ContainerArn { get; public set; }
    public string Cpu { get; public set; }
    public Nullable`1<int> ExitCode { get; public set; }
    public List`1<string> GpuIds { get; public set; }
    public HealthStatus HealthStatus { get; public set; }
    public string Image { get; public set; }
    public string ImageDigest { get; public set; }
    public string LastStatus { get; public set; }
    public List`1<ManagedAgent> ManagedAgents { get; public set; }
    public string Memory { get; public set; }
    public string MemoryReservation { get; public set; }
    public string Name { get; public set; }
    public List`1<NetworkBinding> NetworkBindings { get; public set; }
    public List`1<NetworkInterface> NetworkInterfaces { get; public set; }
    public string Reason { get; public set; }
    public string RuntimeId { get; public set; }
    public string TaskArn { get; public set; }
    public string get_ContainerArn();
    public void set_ContainerArn(string value);
    internal bool IsSetContainerArn();
    public string get_Cpu();
    public void set_Cpu(string value);
    internal bool IsSetCpu();
    public Nullable`1<int> get_ExitCode();
    public void set_ExitCode(Nullable`1<int> value);
    internal bool IsSetExitCode();
    public List`1<string> get_GpuIds();
    public void set_GpuIds(List`1<string> value);
    internal bool IsSetGpuIds();
    public HealthStatus get_HealthStatus();
    public void set_HealthStatus(HealthStatus value);
    internal bool IsSetHealthStatus();
    public string get_Image();
    public void set_Image(string value);
    internal bool IsSetImage();
    public string get_ImageDigest();
    public void set_ImageDigest(string value);
    internal bool IsSetImageDigest();
    public string get_LastStatus();
    public void set_LastStatus(string value);
    internal bool IsSetLastStatus();
    public List`1<ManagedAgent> get_ManagedAgents();
    public void set_ManagedAgents(List`1<ManagedAgent> value);
    internal bool IsSetManagedAgents();
    public string get_Memory();
    public void set_Memory(string value);
    internal bool IsSetMemory();
    public string get_MemoryReservation();
    public void set_MemoryReservation(string value);
    internal bool IsSetMemoryReservation();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<NetworkBinding> get_NetworkBindings();
    public void set_NetworkBindings(List`1<NetworkBinding> value);
    internal bool IsSetNetworkBindings();
    public List`1<NetworkInterface> get_NetworkInterfaces();
    public void set_NetworkInterfaces(List`1<NetworkInterface> value);
    internal bool IsSetNetworkInterfaces();
    public string get_Reason();
    public void set_Reason(string value);
    internal bool IsSetReason();
    public string get_RuntimeId();
    public void set_RuntimeId(string value);
    internal bool IsSetRuntimeId();
    public string get_TaskArn();
    public void set_TaskArn(string value);
    internal bool IsSetTaskArn();
}
public class Amazon.ECS.Model.ContainerDefinition : object {
    private List`1<string> _command;
    private Nullable`1<int> _cpu;
    private List`1<string> _credentialSpecs;
    private List`1<ContainerDependency> _dependsOn;
    private Nullable`1<bool> _disableNetworking;
    private List`1<string> _dnsSearchDomains;
    private List`1<string> _dnsServers;
    private Dictionary`2<string, string> _dockerLabels;
    private List`1<string> _dockerSecurityOptions;
    private List`1<string> _entryPoint;
    private List`1<KeyValuePair> _environment;
    private List`1<EnvironmentFile> _environmentFiles;
    private Nullable`1<bool> _essential;
    private List`1<HostEntry> _extraHosts;
    private FirelensConfiguration _firelensConfiguration;
    private HealthCheck _healthCheck;
    private string _hostname;
    private string _image;
    private Nullable`1<bool> _interactive;
    private List`1<string> _links;
    private LinuxParameters _linuxParameters;
    private LogConfiguration _logConfiguration;
    private Nullable`1<int> _memory;
    private Nullable`1<int> _memoryReservation;
    private List`1<MountPoint> _mountPoints;
    private string _name;
    private List`1<PortMapping> _portMappings;
    private Nullable`1<bool> _privileged;
    private Nullable`1<bool> _pseudoTerminal;
    private Nullable`1<bool> _readonlyRootFilesystem;
    private RepositoryCredentials _repositoryCredentials;
    private List`1<ResourceRequirement> _resourceRequirements;
    private List`1<Secret> _secrets;
    private Nullable`1<int> _startTimeout;
    private Nullable`1<int> _stopTimeout;
    private List`1<SystemControl> _systemControls;
    private List`1<Ulimit> _ulimits;
    private string _user;
    private List`1<VolumeFrom> _volumesFrom;
    private string _workingDirectory;
    public List`1<string> Command { get; public set; }
    public Nullable`1<int> Cpu { get; public set; }
    public List`1<string> CredentialSpecs { get; public set; }
    public List`1<ContainerDependency> DependsOn { get; public set; }
    public Nullable`1<bool> DisableNetworking { get; public set; }
    public List`1<string> DnsSearchDomains { get; public set; }
    public List`1<string> DnsServers { get; public set; }
    public Dictionary`2<string, string> DockerLabels { get; public set; }
    public List`1<string> DockerSecurityOptions { get; public set; }
    public List`1<string> EntryPoint { get; public set; }
    public List`1<KeyValuePair> Environment { get; public set; }
    public List`1<EnvironmentFile> EnvironmentFiles { get; public set; }
    public Nullable`1<bool> Essential { get; public set; }
    public List`1<HostEntry> ExtraHosts { get; public set; }
    public FirelensConfiguration FirelensConfiguration { get; public set; }
    public HealthCheck HealthCheck { get; public set; }
    public string Hostname { get; public set; }
    public string Image { get; public set; }
    public Nullable`1<bool> Interactive { get; public set; }
    public List`1<string> Links { get; public set; }
    public LinuxParameters LinuxParameters { get; public set; }
    public LogConfiguration LogConfiguration { get; public set; }
    public Nullable`1<int> Memory { get; public set; }
    public Nullable`1<int> MemoryReservation { get; public set; }
    public List`1<MountPoint> MountPoints { get; public set; }
    public string Name { get; public set; }
    public List`1<PortMapping> PortMappings { get; public set; }
    public Nullable`1<bool> Privileged { get; public set; }
    public Nullable`1<bool> PseudoTerminal { get; public set; }
    public Nullable`1<bool> ReadonlyRootFilesystem { get; public set; }
    public RepositoryCredentials RepositoryCredentials { get; public set; }
    public List`1<ResourceRequirement> ResourceRequirements { get; public set; }
    public List`1<Secret> Secrets { get; public set; }
    public Nullable`1<int> StartTimeout { get; public set; }
    public Nullable`1<int> StopTimeout { get; public set; }
    public List`1<SystemControl> SystemControls { get; public set; }
    public List`1<Ulimit> Ulimits { get; public set; }
    public string User { get; public set; }
    public List`1<VolumeFrom> VolumesFrom { get; public set; }
    public string WorkingDirectory { get; public set; }
    public List`1<string> get_Command();
    public void set_Command(List`1<string> value);
    internal bool IsSetCommand();
    public Nullable`1<int> get_Cpu();
    public void set_Cpu(Nullable`1<int> value);
    internal bool IsSetCpu();
    public List`1<string> get_CredentialSpecs();
    public void set_CredentialSpecs(List`1<string> value);
    internal bool IsSetCredentialSpecs();
    public List`1<ContainerDependency> get_DependsOn();
    public void set_DependsOn(List`1<ContainerDependency> value);
    internal bool IsSetDependsOn();
    public Nullable`1<bool> get_DisableNetworking();
    public void set_DisableNetworking(Nullable`1<bool> value);
    internal bool IsSetDisableNetworking();
    public List`1<string> get_DnsSearchDomains();
    public void set_DnsSearchDomains(List`1<string> value);
    internal bool IsSetDnsSearchDomains();
    public List`1<string> get_DnsServers();
    public void set_DnsServers(List`1<string> value);
    internal bool IsSetDnsServers();
    public Dictionary`2<string, string> get_DockerLabels();
    public void set_DockerLabels(Dictionary`2<string, string> value);
    internal bool IsSetDockerLabels();
    public List`1<string> get_DockerSecurityOptions();
    public void set_DockerSecurityOptions(List`1<string> value);
    internal bool IsSetDockerSecurityOptions();
    public List`1<string> get_EntryPoint();
    public void set_EntryPoint(List`1<string> value);
    internal bool IsSetEntryPoint();
    public List`1<KeyValuePair> get_Environment();
    public void set_Environment(List`1<KeyValuePair> value);
    internal bool IsSetEnvironment();
    public List`1<EnvironmentFile> get_EnvironmentFiles();
    public void set_EnvironmentFiles(List`1<EnvironmentFile> value);
    internal bool IsSetEnvironmentFiles();
    public Nullable`1<bool> get_Essential();
    public void set_Essential(Nullable`1<bool> value);
    internal bool IsSetEssential();
    public List`1<HostEntry> get_ExtraHosts();
    public void set_ExtraHosts(List`1<HostEntry> value);
    internal bool IsSetExtraHosts();
    public FirelensConfiguration get_FirelensConfiguration();
    public void set_FirelensConfiguration(FirelensConfiguration value);
    internal bool IsSetFirelensConfiguration();
    public HealthCheck get_HealthCheck();
    public void set_HealthCheck(HealthCheck value);
    internal bool IsSetHealthCheck();
    public string get_Hostname();
    public void set_Hostname(string value);
    internal bool IsSetHostname();
    public string get_Image();
    public void set_Image(string value);
    internal bool IsSetImage();
    public Nullable`1<bool> get_Interactive();
    public void set_Interactive(Nullable`1<bool> value);
    internal bool IsSetInteractive();
    public List`1<string> get_Links();
    public void set_Links(List`1<string> value);
    internal bool IsSetLinks();
    public LinuxParameters get_LinuxParameters();
    public void set_LinuxParameters(LinuxParameters value);
    internal bool IsSetLinuxParameters();
    public LogConfiguration get_LogConfiguration();
    public void set_LogConfiguration(LogConfiguration value);
    internal bool IsSetLogConfiguration();
    public Nullable`1<int> get_Memory();
    public void set_Memory(Nullable`1<int> value);
    internal bool IsSetMemory();
    public Nullable`1<int> get_MemoryReservation();
    public void set_MemoryReservation(Nullable`1<int> value);
    internal bool IsSetMemoryReservation();
    public List`1<MountPoint> get_MountPoints();
    public void set_MountPoints(List`1<MountPoint> value);
    internal bool IsSetMountPoints();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<PortMapping> get_PortMappings();
    public void set_PortMappings(List`1<PortMapping> value);
    internal bool IsSetPortMappings();
    public Nullable`1<bool> get_Privileged();
    public void set_Privileged(Nullable`1<bool> value);
    internal bool IsSetPrivileged();
    public Nullable`1<bool> get_PseudoTerminal();
    public void set_PseudoTerminal(Nullable`1<bool> value);
    internal bool IsSetPseudoTerminal();
    public Nullable`1<bool> get_ReadonlyRootFilesystem();
    public void set_ReadonlyRootFilesystem(Nullable`1<bool> value);
    internal bool IsSetReadonlyRootFilesystem();
    public RepositoryCredentials get_RepositoryCredentials();
    public void set_RepositoryCredentials(RepositoryCredentials value);
    internal bool IsSetRepositoryCredentials();
    public List`1<ResourceRequirement> get_ResourceRequirements();
    public void set_ResourceRequirements(List`1<ResourceRequirement> value);
    internal bool IsSetResourceRequirements();
    public List`1<Secret> get_Secrets();
    public void set_Secrets(List`1<Secret> value);
    internal bool IsSetSecrets();
    public Nullable`1<int> get_StartTimeout();
    public void set_StartTimeout(Nullable`1<int> value);
    internal bool IsSetStartTimeout();
    public Nullable`1<int> get_StopTimeout();
    public void set_StopTimeout(Nullable`1<int> value);
    internal bool IsSetStopTimeout();
    public List`1<SystemControl> get_SystemControls();
    public void set_SystemControls(List`1<SystemControl> value);
    internal bool IsSetSystemControls();
    public List`1<Ulimit> get_Ulimits();
    public void set_Ulimits(List`1<Ulimit> value);
    internal bool IsSetUlimits();
    public string get_User();
    public void set_User(string value);
    internal bool IsSetUser();
    public List`1<VolumeFrom> get_VolumesFrom();
    public void set_VolumesFrom(List`1<VolumeFrom> value);
    internal bool IsSetVolumesFrom();
    public string get_WorkingDirectory();
    public void set_WorkingDirectory(string value);
    internal bool IsSetWorkingDirectory();
}
public class Amazon.ECS.Model.ContainerDependency : object {
    private ContainerCondition _condition;
    private string _containerName;
    [AWSPropertyAttribute]
public ContainerCondition Condition { get; public set; }
    [AWSPropertyAttribute]
public string ContainerName { get; public set; }
    public ContainerCondition get_Condition();
    public void set_Condition(ContainerCondition value);
    internal bool IsSetCondition();
    public string get_ContainerName();
    public void set_ContainerName(string value);
    internal bool IsSetContainerName();
}
public class Amazon.ECS.Model.ContainerInstance : object {
    private Nullable`1<bool> _agentConnected;
    private AgentUpdateStatus _agentUpdateStatus;
    private List`1<Attachment> _attachments;
    private List`1<Attribute> _attributes;
    private string _capacityProviderName;
    private string _containerInstanceArn;
    private string _ec2InstanceId;
    private ContainerInstanceHealthStatus _healthStatus;
    private Nullable`1<int> _pendingTasksCount;
    private Nullable`1<DateTime> _registeredAt;
    private List`1<Resource> _registeredResources;
    private List`1<Resource> _remainingResources;
    private Nullable`1<int> _runningTasksCount;
    private string _status;
    private string _statusReason;
    private List`1<Tag> _tags;
    private Nullable`1<long> _version;
    private VersionInfo _versionInfo;
    public Nullable`1<bool> AgentConnected { get; public set; }
    public AgentUpdateStatus AgentUpdateStatus { get; public set; }
    public List`1<Attachment> Attachments { get; public set; }
    public List`1<Attribute> Attributes { get; public set; }
    public string CapacityProviderName { get; public set; }
    public string ContainerInstanceArn { get; public set; }
    public string Ec2InstanceId { get; public set; }
    public ContainerInstanceHealthStatus HealthStatus { get; public set; }
    public Nullable`1<int> PendingTasksCount { get; public set; }
    public Nullable`1<DateTime> RegisteredAt { get; public set; }
    public List`1<Resource> RegisteredResources { get; public set; }
    public List`1<Resource> RemainingResources { get; public set; }
    public Nullable`1<int> RunningTasksCount { get; public set; }
    public string Status { get; public set; }
    public string StatusReason { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public VersionInfo VersionInfo { get; public set; }
    public Nullable`1<bool> get_AgentConnected();
    public void set_AgentConnected(Nullable`1<bool> value);
    internal bool IsSetAgentConnected();
    public AgentUpdateStatus get_AgentUpdateStatus();
    public void set_AgentUpdateStatus(AgentUpdateStatus value);
    internal bool IsSetAgentUpdateStatus();
    public List`1<Attachment> get_Attachments();
    public void set_Attachments(List`1<Attachment> value);
    internal bool IsSetAttachments();
    public List`1<Attribute> get_Attributes();
    public void set_Attributes(List`1<Attribute> value);
    internal bool IsSetAttributes();
    public string get_CapacityProviderName();
    public void set_CapacityProviderName(string value);
    internal bool IsSetCapacityProviderName();
    public string get_ContainerInstanceArn();
    public void set_ContainerInstanceArn(string value);
    internal bool IsSetContainerInstanceArn();
    public string get_Ec2InstanceId();
    public void set_Ec2InstanceId(string value);
    internal bool IsSetEc2InstanceId();
    public ContainerInstanceHealthStatus get_HealthStatus();
    public void set_HealthStatus(ContainerInstanceHealthStatus value);
    internal bool IsSetHealthStatus();
    public Nullable`1<int> get_PendingTasksCount();
    public void set_PendingTasksCount(Nullable`1<int> value);
    internal bool IsSetPendingTasksCount();
    public Nullable`1<DateTime> get_RegisteredAt();
    public void set_RegisteredAt(Nullable`1<DateTime> value);
    internal bool IsSetRegisteredAt();
    public List`1<Resource> get_RegisteredResources();
    public void set_RegisteredResources(List`1<Resource> value);
    internal bool IsSetRegisteredResources();
    public List`1<Resource> get_RemainingResources();
    public void set_RemainingResources(List`1<Resource> value);
    internal bool IsSetRemainingResources();
    public Nullable`1<int> get_RunningTasksCount();
    public void set_RunningTasksCount(Nullable`1<int> value);
    internal bool IsSetRunningTasksCount();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_StatusReason();
    public void set_StatusReason(string value);
    internal bool IsSetStatusReason();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    internal bool IsSetVersion();
    public VersionInfo get_VersionInfo();
    public void set_VersionInfo(VersionInfo value);
    internal bool IsSetVersionInfo();
}
public class Amazon.ECS.Model.ContainerInstanceHealthStatus : object {
    private List`1<InstanceHealthCheckResult> _details;
    private InstanceHealthCheckState _overallStatus;
    public List`1<InstanceHealthCheckResult> Details { get; public set; }
    public InstanceHealthCheckState OverallStatus { get; public set; }
    public List`1<InstanceHealthCheckResult> get_Details();
    public void set_Details(List`1<InstanceHealthCheckResult> value);
    internal bool IsSetDetails();
    public InstanceHealthCheckState get_OverallStatus();
    public void set_OverallStatus(InstanceHealthCheckState value);
    internal bool IsSetOverallStatus();
}
public class Amazon.ECS.Model.ContainerOverride : object {
    private List`1<string> _command;
    private Nullable`1<int> _cpu;
    private List`1<KeyValuePair> _environment;
    private List`1<EnvironmentFile> _environmentFiles;
    private Nullable`1<int> _memory;
    private Nullable`1<int> _memoryReservation;
    private string _name;
    private List`1<ResourceRequirement> _resourceRequirements;
    public List`1<string> Command { get; public set; }
    public Nullable`1<int> Cpu { get; public set; }
    public List`1<KeyValuePair> Environment { get; public set; }
    public List`1<EnvironmentFile> EnvironmentFiles { get; public set; }
    public Nullable`1<int> Memory { get; public set; }
    public Nullable`1<int> MemoryReservation { get; public set; }
    public string Name { get; public set; }
    public List`1<ResourceRequirement> ResourceRequirements { get; public set; }
    public List`1<string> get_Command();
    public void set_Command(List`1<string> value);
    internal bool IsSetCommand();
    public Nullable`1<int> get_Cpu();
    public void set_Cpu(Nullable`1<int> value);
    internal bool IsSetCpu();
    public List`1<KeyValuePair> get_Environment();
    public void set_Environment(List`1<KeyValuePair> value);
    internal bool IsSetEnvironment();
    public List`1<EnvironmentFile> get_EnvironmentFiles();
    public void set_EnvironmentFiles(List`1<EnvironmentFile> value);
    internal bool IsSetEnvironmentFiles();
    public Nullable`1<int> get_Memory();
    public void set_Memory(Nullable`1<int> value);
    internal bool IsSetMemory();
    public Nullable`1<int> get_MemoryReservation();
    public void set_MemoryReservation(Nullable`1<int> value);
    internal bool IsSetMemoryReservation();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<ResourceRequirement> get_ResourceRequirements();
    public void set_ResourceRequirements(List`1<ResourceRequirement> value);
    internal bool IsSetResourceRequirements();
}
public class Amazon.ECS.Model.CreateCapacityProviderRequest : AmazonECSRequest {
    private AutoScalingGroupProvider _autoScalingGroupProvider;
    private string _name;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public AutoScalingGroupProvider AutoScalingGroupProvider { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public AutoScalingGroupProvider get_AutoScalingGroupProvider();
    public void set_AutoScalingGroupProvider(AutoScalingGroupProvider value);
    internal bool IsSetAutoScalingGroupProvider();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ECS.Model.CreateCapacityProviderResponse : AmazonWebServiceResponse {
    private CapacityProvider _capacityProvider;
    public CapacityProvider CapacityProvider { get; public set; }
    public CapacityProvider get_CapacityProvider();
    public void set_CapacityProvider(CapacityProvider value);
    internal bool IsSetCapacityProvider();
}
public class Amazon.ECS.Model.CreateClusterRequest : AmazonECSRequest {
    private List`1<string> _capacityProviders;
    private string _clusterName;
    private ClusterConfiguration _configuration;
    private List`1<CapacityProviderStrategyItem> _defaultCapacityProviderStrategy;
    private ClusterServiceConnectDefaultsRequest _serviceConnectDefaults;
    private List`1<ClusterSetting> _settings;
    private List`1<Tag> _tags;
    public List`1<string> CapacityProviders { get; public set; }
    public string ClusterName { get; public set; }
    public ClusterConfiguration Configuration { get; public set; }
    public List`1<CapacityProviderStrategyItem> DefaultCapacityProviderStrategy { get; public set; }
    public ClusterServiceConnectDefaultsRequest ServiceConnectDefaults { get; public set; }
    public List`1<ClusterSetting> Settings { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public List`1<string> get_CapacityProviders();
    public void set_CapacityProviders(List`1<string> value);
    internal bool IsSetCapacityProviders();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public ClusterConfiguration get_Configuration();
    public void set_Configuration(ClusterConfiguration value);
    internal bool IsSetConfiguration();
    public List`1<CapacityProviderStrategyItem> get_DefaultCapacityProviderStrategy();
    public void set_DefaultCapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetDefaultCapacityProviderStrategy();
    public ClusterServiceConnectDefaultsRequest get_ServiceConnectDefaults();
    public void set_ServiceConnectDefaults(ClusterServiceConnectDefaultsRequest value);
    internal bool IsSetServiceConnectDefaults();
    public List`1<ClusterSetting> get_Settings();
    public void set_Settings(List`1<ClusterSetting> value);
    internal bool IsSetSettings();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ECS.Model.CreateClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.ECS.Model.CreateServiceRequest : AmazonECSRequest {
    private List`1<CapacityProviderStrategyItem> _capacityProviderStrategy;
    private string _clientToken;
    private string _cluster;
    private DeploymentConfiguration _deploymentConfiguration;
    private DeploymentController _deploymentController;
    private Nullable`1<int> _desiredCount;
    private Nullable`1<bool> _enableecsManagedTags;
    private Nullable`1<bool> _enableExecuteCommand;
    private Nullable`1<int> _healthCheckGracePeriodSeconds;
    private LaunchType _launchType;
    private List`1<LoadBalancer> _loadBalancers;
    private NetworkConfiguration _networkConfiguration;
    private List`1<PlacementConstraint> _placementConstraints;
    private List`1<PlacementStrategy> _placementStrategy;
    private string _platformVersion;
    private PropagateTags _propagateTags;
    private string _role;
    private SchedulingStrategy _schedulingStrategy;
    private ServiceConnectConfiguration _serviceConnectConfiguration;
    private string _serviceName;
    private List`1<ServiceRegistry> _serviceRegistries;
    private List`1<Tag> _tags;
    private string _taskDefinition;
    private List`1<ServiceVolumeConfiguration> _volumeConfigurations;
    public List`1<CapacityProviderStrategyItem> CapacityProviderStrategy { get; public set; }
    public string ClientToken { get; public set; }
    public string Cluster { get; public set; }
    public DeploymentConfiguration DeploymentConfiguration { get; public set; }
    public DeploymentController DeploymentController { get; public set; }
    public Nullable`1<int> DesiredCount { get; public set; }
    public Nullable`1<bool> EnableECSManagedTags { get; public set; }
    public Nullable`1<bool> EnableExecuteCommand { get; public set; }
    public Nullable`1<int> HealthCheckGracePeriodSeconds { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public List`1<LoadBalancer> LoadBalancers { get; public set; }
    public NetworkConfiguration NetworkConfiguration { get; public set; }
    public List`1<PlacementConstraint> PlacementConstraints { get; public set; }
    public List`1<PlacementStrategy> PlacementStrategy { get; public set; }
    public string PlatformVersion { get; public set; }
    public PropagateTags PropagateTags { get; public set; }
    public string Role { get; public set; }
    public SchedulingStrategy SchedulingStrategy { get; public set; }
    public ServiceConnectConfiguration ServiceConnectConfiguration { get; public set; }
    [AWSPropertyAttribute]
public string ServiceName { get; public set; }
    public List`1<ServiceRegistry> ServiceRegistries { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string TaskDefinition { get; public set; }
    public List`1<ServiceVolumeConfiguration> VolumeConfigurations { get; public set; }
    public List`1<CapacityProviderStrategyItem> get_CapacityProviderStrategy();
    public void set_CapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetCapacityProviderStrategy();
    public string get_ClientToken();
    public void set_ClientToken(string value);
    internal bool IsSetClientToken();
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public DeploymentConfiguration get_DeploymentConfiguration();
    public void set_DeploymentConfiguration(DeploymentConfiguration value);
    internal bool IsSetDeploymentConfiguration();
    public DeploymentController get_DeploymentController();
    public void set_DeploymentController(DeploymentController value);
    internal bool IsSetDeploymentController();
    public Nullable`1<int> get_DesiredCount();
    public void set_DesiredCount(Nullable`1<int> value);
    internal bool IsSetDesiredCount();
    public Nullable`1<bool> get_EnableECSManagedTags();
    public void set_EnableECSManagedTags(Nullable`1<bool> value);
    internal bool IsSetEnableECSManagedTags();
    public Nullable`1<bool> get_EnableExecuteCommand();
    public void set_EnableExecuteCommand(Nullable`1<bool> value);
    internal bool IsSetEnableExecuteCommand();
    public Nullable`1<int> get_HealthCheckGracePeriodSeconds();
    public void set_HealthCheckGracePeriodSeconds(Nullable`1<int> value);
    internal bool IsSetHealthCheckGracePeriodSeconds();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public List`1<LoadBalancer> get_LoadBalancers();
    public void set_LoadBalancers(List`1<LoadBalancer> value);
    internal bool IsSetLoadBalancers();
    public NetworkConfiguration get_NetworkConfiguration();
    public void set_NetworkConfiguration(NetworkConfiguration value);
    internal bool IsSetNetworkConfiguration();
    public List`1<PlacementConstraint> get_PlacementConstraints();
    public void set_PlacementConstraints(List`1<PlacementConstraint> value);
    internal bool IsSetPlacementConstraints();
    public List`1<PlacementStrategy> get_PlacementStrategy();
    public void set_PlacementStrategy(List`1<PlacementStrategy> value);
    internal bool IsSetPlacementStrategy();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public PropagateTags get_PropagateTags();
    public void set_PropagateTags(PropagateTags value);
    internal bool IsSetPropagateTags();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
    public SchedulingStrategy get_SchedulingStrategy();
    public void set_SchedulingStrategy(SchedulingStrategy value);
    internal bool IsSetSchedulingStrategy();
    public ServiceConnectConfiguration get_ServiceConnectConfiguration();
    public void set_ServiceConnectConfiguration(ServiceConnectConfiguration value);
    internal bool IsSetServiceConnectConfiguration();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
    public List`1<ServiceRegistry> get_ServiceRegistries();
    public void set_ServiceRegistries(List`1<ServiceRegistry> value);
    internal bool IsSetServiceRegistries();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
    public List`1<ServiceVolumeConfiguration> get_VolumeConfigurations();
    public void set_VolumeConfigurations(List`1<ServiceVolumeConfiguration> value);
    internal bool IsSetVolumeConfigurations();
}
public class Amazon.ECS.Model.CreateServiceResponse : AmazonWebServiceResponse {
    private Service _service;
    public Service Service { get; public set; }
    public Service get_Service();
    public void set_Service(Service value);
    internal bool IsSetService();
}
public class Amazon.ECS.Model.CreateTaskSetRequest : AmazonECSRequest {
    private List`1<CapacityProviderStrategyItem> _capacityProviderStrategy;
    private string _clientToken;
    private string _cluster;
    private string _externalId;
    private LaunchType _launchType;
    private List`1<LoadBalancer> _loadBalancers;
    private NetworkConfiguration _networkConfiguration;
    private string _platformVersion;
    private Scale _scale;
    private string _service;
    private List`1<ServiceRegistry> _serviceRegistries;
    private List`1<Tag> _tags;
    private string _taskDefinition;
    public List`1<CapacityProviderStrategyItem> CapacityProviderStrategy { get; public set; }
    public string ClientToken { get; public set; }
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    public string ExternalId { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public List`1<LoadBalancer> LoadBalancers { get; public set; }
    public NetworkConfiguration NetworkConfiguration { get; public set; }
    public string PlatformVersion { get; public set; }
    public Scale Scale { get; public set; }
    [AWSPropertyAttribute]
public string Service { get; public set; }
    public List`1<ServiceRegistry> ServiceRegistries { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string TaskDefinition { get; public set; }
    public List`1<CapacityProviderStrategyItem> get_CapacityProviderStrategy();
    public void set_CapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetCapacityProviderStrategy();
    public string get_ClientToken();
    public void set_ClientToken(string value);
    internal bool IsSetClientToken();
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public List`1<LoadBalancer> get_LoadBalancers();
    public void set_LoadBalancers(List`1<LoadBalancer> value);
    internal bool IsSetLoadBalancers();
    public NetworkConfiguration get_NetworkConfiguration();
    public void set_NetworkConfiguration(NetworkConfiguration value);
    internal bool IsSetNetworkConfiguration();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public Scale get_Scale();
    public void set_Scale(Scale value);
    internal bool IsSetScale();
    public string get_Service();
    public void set_Service(string value);
    internal bool IsSetService();
    public List`1<ServiceRegistry> get_ServiceRegistries();
    public void set_ServiceRegistries(List`1<ServiceRegistry> value);
    internal bool IsSetServiceRegistries();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
}
public class Amazon.ECS.Model.CreateTaskSetResponse : AmazonWebServiceResponse {
    private TaskSet _taskSet;
    public TaskSet TaskSet { get; public set; }
    public TaskSet get_TaskSet();
    public void set_TaskSet(TaskSet value);
    internal bool IsSetTaskSet();
}
public class Amazon.ECS.Model.DeleteAccountSettingRequest : AmazonECSRequest {
    private SettingName _name;
    private string _principalArn;
    [AWSPropertyAttribute]
public SettingName Name { get; public set; }
    public string PrincipalArn { get; public set; }
    public SettingName get_Name();
    public void set_Name(SettingName value);
    internal bool IsSetName();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
}
public class Amazon.ECS.Model.DeleteAccountSettingResponse : AmazonWebServiceResponse {
    private Setting _setting;
    public Setting Setting { get; public set; }
    public Setting get_Setting();
    public void set_Setting(Setting value);
    internal bool IsSetSetting();
}
public class Amazon.ECS.Model.DeleteAttributesRequest : AmazonECSRequest {
    private List`1<Attribute> _attributes;
    private string _cluster;
    [AWSPropertyAttribute]
public List`1<Attribute> Attributes { get; public set; }
    public string Cluster { get; public set; }
    public List`1<Attribute> get_Attributes();
    public void set_Attributes(List`1<Attribute> value);
    internal bool IsSetAttributes();
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
}
public class Amazon.ECS.Model.DeleteAttributesResponse : AmazonWebServiceResponse {
    private List`1<Attribute> _attributes;
    public List`1<Attribute> Attributes { get; public set; }
    public List`1<Attribute> get_Attributes();
    public void set_Attributes(List`1<Attribute> value);
    internal bool IsSetAttributes();
}
public class Amazon.ECS.Model.DeleteCapacityProviderRequest : AmazonECSRequest {
    private string _capacityProvider;
    [AWSPropertyAttribute]
public string CapacityProvider { get; public set; }
    public string get_CapacityProvider();
    public void set_CapacityProvider(string value);
    internal bool IsSetCapacityProvider();
}
public class Amazon.ECS.Model.DeleteCapacityProviderResponse : AmazonWebServiceResponse {
    private CapacityProvider _capacityProvider;
    public CapacityProvider CapacityProvider { get; public set; }
    public CapacityProvider get_CapacityProvider();
    public void set_CapacityProvider(CapacityProvider value);
    internal bool IsSetCapacityProvider();
}
public class Amazon.ECS.Model.DeleteClusterRequest : AmazonECSRequest {
    private string _cluster;
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
}
public class Amazon.ECS.Model.DeleteClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.ECS.Model.DeleteServiceRequest : AmazonECSRequest {
    private string _cluster;
    private Nullable`1<bool> _force;
    private string _service;
    public string Cluster { get; public set; }
    public Nullable`1<bool> Force { get; public set; }
    [AWSPropertyAttribute]
public string Service { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
    public string get_Service();
    public void set_Service(string value);
    internal bool IsSetService();
}
public class Amazon.ECS.Model.DeleteServiceResponse : AmazonWebServiceResponse {
    private Service _service;
    public Service Service { get; public set; }
    public Service get_Service();
    public void set_Service(Service value);
    internal bool IsSetService();
}
public class Amazon.ECS.Model.DeleteTaskDefinitionsRequest : AmazonECSRequest {
    private List`1<string> _taskDefinitions;
    [AWSPropertyAttribute]
public List`1<string> TaskDefinitions { get; public set; }
    public List`1<string> get_TaskDefinitions();
    public void set_TaskDefinitions(List`1<string> value);
    internal bool IsSetTaskDefinitions();
}
public class Amazon.ECS.Model.DeleteTaskDefinitionsResponse : AmazonWebServiceResponse {
    private List`1<Failure> _failures;
    private List`1<TaskDefinition> _taskDefinitions;
    public List`1<Failure> Failures { get; public set; }
    public List`1<TaskDefinition> TaskDefinitions { get; public set; }
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
    public List`1<TaskDefinition> get_TaskDefinitions();
    public void set_TaskDefinitions(List`1<TaskDefinition> value);
    internal bool IsSetTaskDefinitions();
}
public class Amazon.ECS.Model.DeleteTaskSetRequest : AmazonECSRequest {
    private string _cluster;
    private Nullable`1<bool> _force;
    private string _service;
    private string _taskSet;
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    public Nullable`1<bool> Force { get; public set; }
    [AWSPropertyAttribute]
public string Service { get; public set; }
    [AWSPropertyAttribute]
public string TaskSet { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
    public string get_Service();
    public void set_Service(string value);
    internal bool IsSetService();
    public string get_TaskSet();
    public void set_TaskSet(string value);
    internal bool IsSetTaskSet();
}
public class Amazon.ECS.Model.DeleteTaskSetResponse : AmazonWebServiceResponse {
    private TaskSet _taskSet;
    public TaskSet TaskSet { get; public set; }
    public TaskSet get_TaskSet();
    public void set_TaskSet(TaskSet value);
    internal bool IsSetTaskSet();
}
public class Amazon.ECS.Model.Deployment : object {
    private List`1<CapacityProviderStrategyItem> _capacityProviderStrategy;
    private Nullable`1<DateTime> _createdAt;
    private Nullable`1<int> _desiredCount;
    private Nullable`1<int> _failedTasks;
    private DeploymentEphemeralStorage _fargateEphemeralStorage;
    private string _id;
    private LaunchType _launchType;
    private NetworkConfiguration _networkConfiguration;
    private Nullable`1<int> _pendingCount;
    private string _platformFamily;
    private string _platformVersion;
    private DeploymentRolloutState _rolloutState;
    private string _rolloutStateReason;
    private Nullable`1<int> _runningCount;
    private ServiceConnectConfiguration _serviceConnectConfiguration;
    private List`1<ServiceConnectServiceResource> _serviceConnectResources;
    private string _status;
    private string _taskDefinition;
    private Nullable`1<DateTime> _updatedAt;
    private List`1<ServiceVolumeConfiguration> _volumeConfigurations;
    public List`1<CapacityProviderStrategyItem> CapacityProviderStrategy { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public Nullable`1<int> DesiredCount { get; public set; }
    public Nullable`1<int> FailedTasks { get; public set; }
    public DeploymentEphemeralStorage FargateEphemeralStorage { get; public set; }
    public string Id { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public NetworkConfiguration NetworkConfiguration { get; public set; }
    public Nullable`1<int> PendingCount { get; public set; }
    public string PlatformFamily { get; public set; }
    public string PlatformVersion { get; public set; }
    public DeploymentRolloutState RolloutState { get; public set; }
    public string RolloutStateReason { get; public set; }
    public Nullable`1<int> RunningCount { get; public set; }
    public ServiceConnectConfiguration ServiceConnectConfiguration { get; public set; }
    public List`1<ServiceConnectServiceResource> ServiceConnectResources { get; public set; }
    public string Status { get; public set; }
    public string TaskDefinition { get; public set; }
    public Nullable`1<DateTime> UpdatedAt { get; public set; }
    public List`1<ServiceVolumeConfiguration> VolumeConfigurations { get; public set; }
    public List`1<CapacityProviderStrategyItem> get_CapacityProviderStrategy();
    public void set_CapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetCapacityProviderStrategy();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public Nullable`1<int> get_DesiredCount();
    public void set_DesiredCount(Nullable`1<int> value);
    internal bool IsSetDesiredCount();
    public Nullable`1<int> get_FailedTasks();
    public void set_FailedTasks(Nullable`1<int> value);
    internal bool IsSetFailedTasks();
    public DeploymentEphemeralStorage get_FargateEphemeralStorage();
    public void set_FargateEphemeralStorage(DeploymentEphemeralStorage value);
    internal bool IsSetFargateEphemeralStorage();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public NetworkConfiguration get_NetworkConfiguration();
    public void set_NetworkConfiguration(NetworkConfiguration value);
    internal bool IsSetNetworkConfiguration();
    public Nullable`1<int> get_PendingCount();
    public void set_PendingCount(Nullable`1<int> value);
    internal bool IsSetPendingCount();
    public string get_PlatformFamily();
    public void set_PlatformFamily(string value);
    internal bool IsSetPlatformFamily();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public DeploymentRolloutState get_RolloutState();
    public void set_RolloutState(DeploymentRolloutState value);
    internal bool IsSetRolloutState();
    public string get_RolloutStateReason();
    public void set_RolloutStateReason(string value);
    internal bool IsSetRolloutStateReason();
    public Nullable`1<int> get_RunningCount();
    public void set_RunningCount(Nullable`1<int> value);
    internal bool IsSetRunningCount();
    public ServiceConnectConfiguration get_ServiceConnectConfiguration();
    public void set_ServiceConnectConfiguration(ServiceConnectConfiguration value);
    internal bool IsSetServiceConnectConfiguration();
    public List`1<ServiceConnectServiceResource> get_ServiceConnectResources();
    public void set_ServiceConnectResources(List`1<ServiceConnectServiceResource> value);
    internal bool IsSetServiceConnectResources();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
    public Nullable`1<DateTime> get_UpdatedAt();
    public void set_UpdatedAt(Nullable`1<DateTime> value);
    internal bool IsSetUpdatedAt();
    public List`1<ServiceVolumeConfiguration> get_VolumeConfigurations();
    public void set_VolumeConfigurations(List`1<ServiceVolumeConfiguration> value);
    internal bool IsSetVolumeConfigurations();
}
public class Amazon.ECS.Model.DeploymentAlarms : object {
    private List`1<string> _alarmNames;
    private Nullable`1<bool> _enable;
    private Nullable`1<bool> _rollback;
    [AWSPropertyAttribute]
public List`1<string> AlarmNames { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> Enable { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> Rollback { get; public set; }
    public List`1<string> get_AlarmNames();
    public void set_AlarmNames(List`1<string> value);
    internal bool IsSetAlarmNames();
    public Nullable`1<bool> get_Enable();
    public void set_Enable(Nullable`1<bool> value);
    internal bool IsSetEnable();
    public Nullable`1<bool> get_Rollback();
    public void set_Rollback(Nullable`1<bool> value);
    internal bool IsSetRollback();
}
public class Amazon.ECS.Model.DeploymentCircuitBreaker : object {
    private Nullable`1<bool> _enable;
    private Nullable`1<bool> _rollback;
    [AWSPropertyAttribute]
public Nullable`1<bool> Enable { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> Rollback { get; public set; }
    public Nullable`1<bool> get_Enable();
    public void set_Enable(Nullable`1<bool> value);
    internal bool IsSetEnable();
    public Nullable`1<bool> get_Rollback();
    public void set_Rollback(Nullable`1<bool> value);
    internal bool IsSetRollback();
}
public class Amazon.ECS.Model.DeploymentConfiguration : object {
    private DeploymentAlarms _alarms;
    private DeploymentCircuitBreaker _deploymentCircuitBreaker;
    private Nullable`1<int> _maximumPercent;
    private Nullable`1<int> _minimumHealthyPercent;
    public DeploymentAlarms Alarms { get; public set; }
    public DeploymentCircuitBreaker DeploymentCircuitBreaker { get; public set; }
    public Nullable`1<int> MaximumPercent { get; public set; }
    public Nullable`1<int> MinimumHealthyPercent { get; public set; }
    public DeploymentAlarms get_Alarms();
    public void set_Alarms(DeploymentAlarms value);
    internal bool IsSetAlarms();
    public DeploymentCircuitBreaker get_DeploymentCircuitBreaker();
    public void set_DeploymentCircuitBreaker(DeploymentCircuitBreaker value);
    internal bool IsSetDeploymentCircuitBreaker();
    public Nullable`1<int> get_MaximumPercent();
    public void set_MaximumPercent(Nullable`1<int> value);
    internal bool IsSetMaximumPercent();
    public Nullable`1<int> get_MinimumHealthyPercent();
    public void set_MinimumHealthyPercent(Nullable`1<int> value);
    internal bool IsSetMinimumHealthyPercent();
}
public class Amazon.ECS.Model.DeploymentController : object {
    private DeploymentControllerType _type;
    [AWSPropertyAttribute]
public DeploymentControllerType Type { get; public set; }
    public DeploymentControllerType get_Type();
    public void set_Type(DeploymentControllerType value);
    internal bool IsSetType();
}
public class Amazon.ECS.Model.DeploymentEphemeralStorage : object {
    private string _kmsKeyId;
    public string KmsKeyId { get; public set; }
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
}
public class Amazon.ECS.Model.DeregisterContainerInstanceRequest : AmazonECSRequest {
    private string _cluster;
    private string _containerInstance;
    private Nullable`1<bool> _force;
    public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public string ContainerInstance { get; public set; }
    public Nullable`1<bool> Force { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public string get_ContainerInstance();
    public void set_ContainerInstance(string value);
    internal bool IsSetContainerInstance();
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
}
public class Amazon.ECS.Model.DeregisterContainerInstanceResponse : AmazonWebServiceResponse {
    private ContainerInstance _containerInstance;
    public ContainerInstance ContainerInstance { get; public set; }
    public ContainerInstance get_ContainerInstance();
    public void set_ContainerInstance(ContainerInstance value);
    internal bool IsSetContainerInstance();
}
public class Amazon.ECS.Model.DeregisterTaskDefinitionRequest : AmazonECSRequest {
    private string _taskDefinition;
    [AWSPropertyAttribute]
public string TaskDefinition { get; public set; }
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
}
public class Amazon.ECS.Model.DeregisterTaskDefinitionResponse : AmazonWebServiceResponse {
    private TaskDefinition _taskDefinition;
    public TaskDefinition TaskDefinition { get; public set; }
    public TaskDefinition get_TaskDefinition();
    public void set_TaskDefinition(TaskDefinition value);
    internal bool IsSetTaskDefinition();
}
public class Amazon.ECS.Model.DescribeCapacityProvidersRequest : AmazonECSRequest {
    private List`1<string> _capacityProviders;
    private List`1<string> _include;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    public List`1<string> CapacityProviders { get; public set; }
    public List`1<string> Include { get; public set; }
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_CapacityProviders();
    public void set_CapacityProviders(List`1<string> value);
    internal bool IsSetCapacityProviders();
    public List`1<string> get_Include();
    public void set_Include(List`1<string> value);
    internal bool IsSetInclude();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.ECS.Model.DescribeCapacityProvidersResponse : AmazonWebServiceResponse {
    private List`1<CapacityProvider> _capacityProviders;
    private List`1<Failure> _failures;
    private string _nextToken;
    public List`1<CapacityProvider> CapacityProviders { get; public set; }
    public List`1<Failure> Failures { get; public set; }
    public string NextToken { get; public set; }
    public List`1<CapacityProvider> get_CapacityProviders();
    public void set_CapacityProviders(List`1<CapacityProvider> value);
    internal bool IsSetCapacityProviders();
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.ECS.Model.DescribeClustersRequest : AmazonECSRequest {
    private List`1<string> _clusters;
    private List`1<string> _include;
    public List`1<string> Clusters { get; public set; }
    public List`1<string> Include { get; public set; }
    public List`1<string> get_Clusters();
    public void set_Clusters(List`1<string> value);
    internal bool IsSetClusters();
    public List`1<string> get_Include();
    public void set_Include(List`1<string> value);
    internal bool IsSetInclude();
}
public class Amazon.ECS.Model.DescribeClustersResponse : AmazonWebServiceResponse {
    private List`1<Cluster> _clusters;
    private List`1<Failure> _failures;
    public List`1<Cluster> Clusters { get; public set; }
    public List`1<Failure> Failures { get; public set; }
    public List`1<Cluster> get_Clusters();
    public void set_Clusters(List`1<Cluster> value);
    internal bool IsSetClusters();
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
}
public class Amazon.ECS.Model.DescribeContainerInstancesRequest : AmazonECSRequest {
    private string _cluster;
    private List`1<string> _containerInstances;
    private List`1<string> _include;
    public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ContainerInstances { get; public set; }
    public List`1<string> Include { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public List`1<string> get_ContainerInstances();
    public void set_ContainerInstances(List`1<string> value);
    internal bool IsSetContainerInstances();
    public List`1<string> get_Include();
    public void set_Include(List`1<string> value);
    internal bool IsSetInclude();
}
public class Amazon.ECS.Model.DescribeContainerInstancesResponse : AmazonWebServiceResponse {
    private List`1<ContainerInstance> _containerInstances;
    private List`1<Failure> _failures;
    public List`1<ContainerInstance> ContainerInstances { get; public set; }
    public List`1<Failure> Failures { get; public set; }
    public List`1<ContainerInstance> get_ContainerInstances();
    public void set_ContainerInstances(List`1<ContainerInstance> value);
    internal bool IsSetContainerInstances();
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
}
public class Amazon.ECS.Model.DescribeServicesRequest : AmazonECSRequest {
    private string _cluster;
    private List`1<string> _include;
    private List`1<string> _services;
    public string Cluster { get; public set; }
    public List`1<string> Include { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Services { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public List`1<string> get_Include();
    public void set_Include(List`1<string> value);
    internal bool IsSetInclude();
    public List`1<string> get_Services();
    public void set_Services(List`1<string> value);
    internal bool IsSetServices();
}
public class Amazon.ECS.Model.DescribeServicesResponse : AmazonWebServiceResponse {
    private List`1<Failure> _failures;
    private List`1<Service> _services;
    public List`1<Failure> Failures { get; public set; }
    public List`1<Service> Services { get; public set; }
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
    public List`1<Service> get_Services();
    public void set_Services(List`1<Service> value);
    internal bool IsSetServices();
}
public class Amazon.ECS.Model.DescribeTaskDefinitionRequest : AmazonECSRequest {
    private List`1<string> _include;
    private string _taskDefinition;
    public List`1<string> Include { get; public set; }
    [AWSPropertyAttribute]
public string TaskDefinition { get; public set; }
    public List`1<string> get_Include();
    public void set_Include(List`1<string> value);
    internal bool IsSetInclude();
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
}
public class Amazon.ECS.Model.DescribeTaskDefinitionResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tags;
    private TaskDefinition _taskDefinition;
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public TaskDefinition TaskDefinition { get; public set; }
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public TaskDefinition get_TaskDefinition();
    public void set_TaskDefinition(TaskDefinition value);
    internal bool IsSetTaskDefinition();
}
public class Amazon.ECS.Model.DescribeTaskSetsRequest : AmazonECSRequest {
    private string _cluster;
    private List`1<string> _include;
    private string _service;
    private List`1<string> _taskSets;
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    public List`1<string> Include { get; public set; }
    [AWSPropertyAttribute]
public string Service { get; public set; }
    public List`1<string> TaskSets { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public List`1<string> get_Include();
    public void set_Include(List`1<string> value);
    internal bool IsSetInclude();
    public string get_Service();
    public void set_Service(string value);
    internal bool IsSetService();
    public List`1<string> get_TaskSets();
    public void set_TaskSets(List`1<string> value);
    internal bool IsSetTaskSets();
}
public class Amazon.ECS.Model.DescribeTaskSetsResponse : AmazonWebServiceResponse {
    private List`1<Failure> _failures;
    private List`1<TaskSet> _taskSets;
    public List`1<Failure> Failures { get; public set; }
    public List`1<TaskSet> TaskSets { get; public set; }
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
    public List`1<TaskSet> get_TaskSets();
    public void set_TaskSets(List`1<TaskSet> value);
    internal bool IsSetTaskSets();
}
public class Amazon.ECS.Model.DescribeTasksRequest : AmazonECSRequest {
    private string _cluster;
    private List`1<string> _include;
    private List`1<string> _tasks;
    public string Cluster { get; public set; }
    public List`1<string> Include { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Tasks { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public List`1<string> get_Include();
    public void set_Include(List`1<string> value);
    internal bool IsSetInclude();
    public List`1<string> get_Tasks();
    public void set_Tasks(List`1<string> value);
    internal bool IsSetTasks();
}
public class Amazon.ECS.Model.DescribeTasksResponse : AmazonWebServiceResponse {
    private List`1<Failure> _failures;
    private List`1<Task> _tasks;
    public List`1<Failure> Failures { get; public set; }
    public List`1<Task> Tasks { get; public set; }
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
    public List`1<Task> get_Tasks();
    public void set_Tasks(List`1<Task> value);
    internal bool IsSetTasks();
}
public class Amazon.ECS.Model.Device : object {
    private string _containerPath;
    private string _hostPath;
    private List`1<string> _permissions;
    public string ContainerPath { get; public set; }
    [AWSPropertyAttribute]
public string HostPath { get; public set; }
    public List`1<string> Permissions { get; public set; }
    public string get_ContainerPath();
    public void set_ContainerPath(string value);
    internal bool IsSetContainerPath();
    public string get_HostPath();
    public void set_HostPath(string value);
    internal bool IsSetHostPath();
    public List`1<string> get_Permissions();
    public void set_Permissions(List`1<string> value);
    internal bool IsSetPermissions();
}
public class Amazon.ECS.Model.DockerVolumeConfiguration : object {
    private Nullable`1<bool> _autoprovision;
    private string _driver;
    private Dictionary`2<string, string> _driverOpts;
    private Dictionary`2<string, string> _labels;
    private Scope _scope;
    public Nullable`1<bool> Autoprovision { get; public set; }
    public string Driver { get; public set; }
    public Dictionary`2<string, string> DriverOpts { get; public set; }
    public Dictionary`2<string, string> Labels { get; public set; }
    public Scope Scope { get; public set; }
    public Nullable`1<bool> get_Autoprovision();
    public void set_Autoprovision(Nullable`1<bool> value);
    internal bool IsSetAutoprovision();
    public string get_Driver();
    public void set_Driver(string value);
    internal bool IsSetDriver();
    public Dictionary`2<string, string> get_DriverOpts();
    public void set_DriverOpts(Dictionary`2<string, string> value);
    internal bool IsSetDriverOpts();
    public Dictionary`2<string, string> get_Labels();
    public void set_Labels(Dictionary`2<string, string> value);
    internal bool IsSetLabels();
    public Scope get_Scope();
    public void set_Scope(Scope value);
    internal bool IsSetScope();
}
public class Amazon.ECS.Model.EBSTagSpecification : object {
    private PropagateTags _propagateTags;
    private EBSResourceType _resourceType;
    private List`1<Tag> _tags;
    public PropagateTags PropagateTags { get; public set; }
    [AWSPropertyAttribute]
public EBSResourceType ResourceType { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public PropagateTags get_PropagateTags();
    public void set_PropagateTags(PropagateTags value);
    internal bool IsSetPropagateTags();
    public EBSResourceType get_ResourceType();
    public void set_ResourceType(EBSResourceType value);
    internal bool IsSetResourceType();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ECS.Model.ECSPaginatorFactory : object {
    private IAmazonECS client;
    internal ECSPaginatorFactory(IAmazonECS client);
    public sealed virtual IListAccountSettingsPaginator ListAccountSettings(ListAccountSettingsRequest request);
    public sealed virtual IListAttributesPaginator ListAttributes(ListAttributesRequest request);
    public sealed virtual IListClustersPaginator ListClusters(ListClustersRequest request);
    public sealed virtual IListContainerInstancesPaginator ListContainerInstances(ListContainerInstancesRequest request);
    public sealed virtual IListServicesPaginator ListServices(ListServicesRequest request);
    public sealed virtual IListServicesByNamespacePaginator ListServicesByNamespace(ListServicesByNamespaceRequest request);
    public sealed virtual IListTaskDefinitionFamiliesPaginator ListTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request);
    public sealed virtual IListTaskDefinitionsPaginator ListTaskDefinitions(ListTaskDefinitionsRequest request);
    public sealed virtual IListTasksPaginator ListTasks(ListTasksRequest request);
}
public class Amazon.ECS.Model.EFSAuthorizationConfig : object {
    private string _accessPointId;
    private EFSAuthorizationConfigIAM _iam;
    public string AccessPointId { get; public set; }
    public EFSAuthorizationConfigIAM Iam { get; public set; }
    public string get_AccessPointId();
    public void set_AccessPointId(string value);
    internal bool IsSetAccessPointId();
    public EFSAuthorizationConfigIAM get_Iam();
    public void set_Iam(EFSAuthorizationConfigIAM value);
    internal bool IsSetIam();
}
public class Amazon.ECS.Model.EFSVolumeConfiguration : object {
    private EFSAuthorizationConfig _authorizationConfig;
    private string _fileSystemId;
    private string _rootDirectory;
    private EFSTransitEncryption _transitEncryption;
    private Nullable`1<int> _transitEncryptionPort;
    public EFSAuthorizationConfig AuthorizationConfig { get; public set; }
    [AWSPropertyAttribute]
public string FileSystemId { get; public set; }
    public string RootDirectory { get; public set; }
    public EFSTransitEncryption TransitEncryption { get; public set; }
    public Nullable`1<int> TransitEncryptionPort { get; public set; }
    public EFSAuthorizationConfig get_AuthorizationConfig();
    public void set_AuthorizationConfig(EFSAuthorizationConfig value);
    internal bool IsSetAuthorizationConfig();
    public string get_FileSystemId();
    public void set_FileSystemId(string value);
    internal bool IsSetFileSystemId();
    public string get_RootDirectory();
    public void set_RootDirectory(string value);
    internal bool IsSetRootDirectory();
    public EFSTransitEncryption get_TransitEncryption();
    public void set_TransitEncryption(EFSTransitEncryption value);
    internal bool IsSetTransitEncryption();
    public Nullable`1<int> get_TransitEncryptionPort();
    public void set_TransitEncryptionPort(Nullable`1<int> value);
    internal bool IsSetTransitEncryptionPort();
}
public class Amazon.ECS.Model.EnvironmentFile : object {
    private EnvironmentFileType _type;
    private string _value;
    [AWSPropertyAttribute]
public EnvironmentFileType Type { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public EnvironmentFileType get_Type();
    public void set_Type(EnvironmentFileType value);
    internal bool IsSetType();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.EphemeralStorage : object {
    private Nullable`1<int> _sizeInGiB;
    [AWSPropertyAttribute]
public Nullable`1<int> SizeInGiB { get; public set; }
    public Nullable`1<int> get_SizeInGiB();
    public void set_SizeInGiB(Nullable`1<int> value);
    internal bool IsSetSizeInGiB();
}
public class Amazon.ECS.Model.ExecuteCommandConfiguration : object {
    private string _kmsKeyId;
    private ExecuteCommandLogConfiguration _logConfiguration;
    private ExecuteCommandLogging _logging;
    public string KmsKeyId { get; public set; }
    public ExecuteCommandLogConfiguration LogConfiguration { get; public set; }
    public ExecuteCommandLogging Logging { get; public set; }
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public ExecuteCommandLogConfiguration get_LogConfiguration();
    public void set_LogConfiguration(ExecuteCommandLogConfiguration value);
    internal bool IsSetLogConfiguration();
    public ExecuteCommandLogging get_Logging();
    public void set_Logging(ExecuteCommandLogging value);
    internal bool IsSetLogging();
}
public class Amazon.ECS.Model.ExecuteCommandLogConfiguration : object {
    private Nullable`1<bool> _cloudWatchEncryptionEnabled;
    private string _cloudWatchLogGroupName;
    private string _s3BucketName;
    private Nullable`1<bool> _s3EncryptionEnabled;
    private string _s3KeyPrefix;
    public Nullable`1<bool> CloudWatchEncryptionEnabled { get; public set; }
    public string CloudWatchLogGroupName { get; public set; }
    public string S3BucketName { get; public set; }
    public Nullable`1<bool> S3EncryptionEnabled { get; public set; }
    public string S3KeyPrefix { get; public set; }
    public Nullable`1<bool> get_CloudWatchEncryptionEnabled();
    public void set_CloudWatchEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetCloudWatchEncryptionEnabled();
    public string get_CloudWatchLogGroupName();
    public void set_CloudWatchLogGroupName(string value);
    internal bool IsSetCloudWatchLogGroupName();
    public string get_S3BucketName();
    public void set_S3BucketName(string value);
    internal bool IsSetS3BucketName();
    public Nullable`1<bool> get_S3EncryptionEnabled();
    public void set_S3EncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetS3EncryptionEnabled();
    public string get_S3KeyPrefix();
    public void set_S3KeyPrefix(string value);
    internal bool IsSetS3KeyPrefix();
}
public class Amazon.ECS.Model.ExecuteCommandRequest : AmazonECSRequest {
    private string _cluster;
    private string _command;
    private string _container;
    private Nullable`1<bool> _interactive;
    private string _task;
    public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public string Command { get; public set; }
    public string Container { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> Interactive { get; public set; }
    [AWSPropertyAttribute]
public string Task { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public string get_Command();
    public void set_Command(string value);
    internal bool IsSetCommand();
    public string get_Container();
    public void set_Container(string value);
    internal bool IsSetContainer();
    public Nullable`1<bool> get_Interactive();
    public void set_Interactive(Nullable`1<bool> value);
    internal bool IsSetInteractive();
    public string get_Task();
    public void set_Task(string value);
    internal bool IsSetTask();
}
public class Amazon.ECS.Model.ExecuteCommandResponse : AmazonWebServiceResponse {
    private string _clusterArn;
    private string _containerArn;
    private string _containerName;
    private Nullable`1<bool> _interactive;
    private Session _session;
    private string _taskArn;
    public string ClusterArn { get; public set; }
    public string ContainerArn { get; public set; }
    public string ContainerName { get; public set; }
    public Nullable`1<bool> Interactive { get; public set; }
    public Session Session { get; public set; }
    public string TaskArn { get; public set; }
    public string get_ClusterArn();
    public void set_ClusterArn(string value);
    internal bool IsSetClusterArn();
    public string get_ContainerArn();
    public void set_ContainerArn(string value);
    internal bool IsSetContainerArn();
    public string get_ContainerName();
    public void set_ContainerName(string value);
    internal bool IsSetContainerName();
    public Nullable`1<bool> get_Interactive();
    public void set_Interactive(Nullable`1<bool> value);
    internal bool IsSetInteractive();
    public Session get_Session();
    public void set_Session(Session value);
    internal bool IsSetSession();
    public string get_TaskArn();
    public void set_TaskArn(string value);
    internal bool IsSetTaskArn();
}
public class Amazon.ECS.Model.Failure : object {
    private string _arn;
    private string _detail;
    private string _reason;
    public string Arn { get; public set; }
    public string Detail { get; public set; }
    public string Reason { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Detail();
    public void set_Detail(string value);
    internal bool IsSetDetail();
    public string get_Reason();
    public void set_Reason(string value);
    internal bool IsSetReason();
}
public class Amazon.ECS.Model.FirelensConfiguration : object {
    private Dictionary`2<string, string> _options;
    private FirelensConfigurationType _type;
    public Dictionary`2<string, string> Options { get; public set; }
    [AWSPropertyAttribute]
public FirelensConfigurationType Type { get; public set; }
    public Dictionary`2<string, string> get_Options();
    public void set_Options(Dictionary`2<string, string> value);
    internal bool IsSetOptions();
    public FirelensConfigurationType get_Type();
    public void set_Type(FirelensConfigurationType value);
    internal bool IsSetType();
}
public class Amazon.ECS.Model.FSxWindowsFileServerAuthorizationConfig : object {
    private string _credentialsParameter;
    private string _domain;
    [AWSPropertyAttribute]
public string CredentialsParameter { get; public set; }
    [AWSPropertyAttribute]
public string Domain { get; public set; }
    public string get_CredentialsParameter();
    public void set_CredentialsParameter(string value);
    internal bool IsSetCredentialsParameter();
    public string get_Domain();
    public void set_Domain(string value);
    internal bool IsSetDomain();
}
public class Amazon.ECS.Model.FSxWindowsFileServerVolumeConfiguration : object {
    private FSxWindowsFileServerAuthorizationConfig _authorizationConfig;
    private string _fileSystemId;
    private string _rootDirectory;
    [AWSPropertyAttribute]
public FSxWindowsFileServerAuthorizationConfig AuthorizationConfig { get; public set; }
    [AWSPropertyAttribute]
public string FileSystemId { get; public set; }
    [AWSPropertyAttribute]
public string RootDirectory { get; public set; }
    public FSxWindowsFileServerAuthorizationConfig get_AuthorizationConfig();
    public void set_AuthorizationConfig(FSxWindowsFileServerAuthorizationConfig value);
    internal bool IsSetAuthorizationConfig();
    public string get_FileSystemId();
    public void set_FileSystemId(string value);
    internal bool IsSetFileSystemId();
    public string get_RootDirectory();
    public void set_RootDirectory(string value);
    internal bool IsSetRootDirectory();
}
public class Amazon.ECS.Model.GetTaskProtectionRequest : AmazonECSRequest {
    private string _cluster;
    private List`1<string> _tasks;
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    public List`1<string> Tasks { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public List`1<string> get_Tasks();
    public void set_Tasks(List`1<string> value);
    internal bool IsSetTasks();
}
public class Amazon.ECS.Model.GetTaskProtectionResponse : AmazonWebServiceResponse {
    private List`1<Failure> _failures;
    private List`1<ProtectedTask> _protectedTasks;
    public List`1<Failure> Failures { get; public set; }
    public List`1<ProtectedTask> ProtectedTasks { get; public set; }
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
    public List`1<ProtectedTask> get_ProtectedTasks();
    public void set_ProtectedTasks(List`1<ProtectedTask> value);
    internal bool IsSetProtectedTasks();
}
public class Amazon.ECS.Model.HealthCheck : object {
    private List`1<string> _command;
    private Nullable`1<int> _interval;
    private Nullable`1<int> _retries;
    private Nullable`1<int> _startPeriod;
    private Nullable`1<int> _timeout;
    [AWSPropertyAttribute]
public List`1<string> Command { get; public set; }
    public Nullable`1<int> Interval { get; public set; }
    public Nullable`1<int> Retries { get; public set; }
    public Nullable`1<int> StartPeriod { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public List`1<string> get_Command();
    public void set_Command(List`1<string> value);
    internal bool IsSetCommand();
    public Nullable`1<int> get_Interval();
    public void set_Interval(Nullable`1<int> value);
    internal bool IsSetInterval();
    public Nullable`1<int> get_Retries();
    public void set_Retries(Nullable`1<int> value);
    internal bool IsSetRetries();
    public Nullable`1<int> get_StartPeriod();
    public void set_StartPeriod(Nullable`1<int> value);
    internal bool IsSetStartPeriod();
    public Nullable`1<int> get_Timeout();
    public void set_Timeout(Nullable`1<int> value);
    internal bool IsSetTimeout();
}
public class Amazon.ECS.Model.HostEntry : object {
    private string _hostname;
    private string _ipAddress;
    [AWSPropertyAttribute]
public string Hostname { get; public set; }
    [AWSPropertyAttribute]
public string IpAddress { get; public set; }
    public string get_Hostname();
    public void set_Hostname(string value);
    internal bool IsSetHostname();
    public string get_IpAddress();
    public void set_IpAddress(string value);
    internal bool IsSetIpAddress();
}
public class Amazon.ECS.Model.HostVolumeProperties : object {
    private string _sourcePath;
    public string SourcePath { get; public set; }
    public string get_SourcePath();
    public void set_SourcePath(string value);
    internal bool IsSetSourcePath();
}
public interface Amazon.ECS.Model.IECSPaginatorFactory {
    public abstract virtual IListAccountSettingsPaginator ListAccountSettings(ListAccountSettingsRequest request);
    public abstract virtual IListAttributesPaginator ListAttributes(ListAttributesRequest request);
    public abstract virtual IListClustersPaginator ListClusters(ListClustersRequest request);
    public abstract virtual IListContainerInstancesPaginator ListContainerInstances(ListContainerInstancesRequest request);
    public abstract virtual IListServicesPaginator ListServices(ListServicesRequest request);
    public abstract virtual IListServicesByNamespacePaginator ListServicesByNamespace(ListServicesByNamespaceRequest request);
    public abstract virtual IListTaskDefinitionFamiliesPaginator ListTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request);
    public abstract virtual IListTaskDefinitionsPaginator ListTaskDefinitions(ListTaskDefinitionsRequest request);
    public abstract virtual IListTasksPaginator ListTasks(ListTasksRequest request);
}
public interface Amazon.ECS.Model.IListAccountSettingsPaginator {
    public IPaginatedEnumerable`1<ListAccountSettingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Setting> Settings { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAccountSettingsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Setting> get_Settings();
}
public interface Amazon.ECS.Model.IListAttributesPaginator {
    public IPaginatedEnumerable`1<ListAttributesResponse> Responses { get; }
    public IPaginatedEnumerable`1<Attribute> Attributes { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAttributesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Attribute> get_Attributes();
}
public interface Amazon.ECS.Model.IListClustersPaginator {
    public IPaginatedEnumerable`1<ListClustersResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> ClusterArns { get; }
    public abstract virtual IPaginatedEnumerable`1<ListClustersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_ClusterArns();
}
public interface Amazon.ECS.Model.IListContainerInstancesPaginator {
    public IPaginatedEnumerable`1<ListContainerInstancesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> ContainerInstanceArns { get; }
    public abstract virtual IPaginatedEnumerable`1<ListContainerInstancesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_ContainerInstanceArns();
}
public interface Amazon.ECS.Model.IListServicesByNamespacePaginator {
    public IPaginatedEnumerable`1<ListServicesByNamespaceResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> ServiceArns { get; }
    public abstract virtual IPaginatedEnumerable`1<ListServicesByNamespaceResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_ServiceArns();
}
public interface Amazon.ECS.Model.IListServicesPaginator {
    public IPaginatedEnumerable`1<ListServicesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> ServiceArns { get; }
    public abstract virtual IPaginatedEnumerable`1<ListServicesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_ServiceArns();
}
public interface Amazon.ECS.Model.IListTaskDefinitionFamiliesPaginator {
    public IPaginatedEnumerable`1<ListTaskDefinitionFamiliesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> Families { get; }
    public abstract virtual IPaginatedEnumerable`1<ListTaskDefinitionFamiliesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_Families();
}
public interface Amazon.ECS.Model.IListTaskDefinitionsPaginator {
    public IPaginatedEnumerable`1<ListTaskDefinitionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> TaskDefinitionArns { get; }
    public abstract virtual IPaginatedEnumerable`1<ListTaskDefinitionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_TaskDefinitionArns();
}
public interface Amazon.ECS.Model.IListTasksPaginator {
    public IPaginatedEnumerable`1<ListTasksResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> TaskArns { get; }
    public abstract virtual IPaginatedEnumerable`1<ListTasksResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_TaskArns();
}
public class Amazon.ECS.Model.InferenceAccelerator : object {
    private string _deviceName;
    private string _deviceType;
    [AWSPropertyAttribute]
public string DeviceName { get; public set; }
    [AWSPropertyAttribute]
public string DeviceType { get; public set; }
    public string get_DeviceName();
    public void set_DeviceName(string value);
    internal bool IsSetDeviceName();
    public string get_DeviceType();
    public void set_DeviceType(string value);
    internal bool IsSetDeviceType();
}
public class Amazon.ECS.Model.InferenceAcceleratorOverride : object {
    private string _deviceName;
    private string _deviceType;
    public string DeviceName { get; public set; }
    public string DeviceType { get; public set; }
    public string get_DeviceName();
    public void set_DeviceName(string value);
    internal bool IsSetDeviceName();
    public string get_DeviceType();
    public void set_DeviceType(string value);
    internal bool IsSetDeviceType();
}
public class Amazon.ECS.Model.InstanceHealthCheckResult : object {
    private Nullable`1<DateTime> _lastStatusChange;
    private Nullable`1<DateTime> _lastUpdated;
    private InstanceHealthCheckState _status;
    private InstanceHealthCheckType _type;
    public Nullable`1<DateTime> LastStatusChange { get; public set; }
    public Nullable`1<DateTime> LastUpdated { get; public set; }
    public InstanceHealthCheckState Status { get; public set; }
    public InstanceHealthCheckType Type { get; public set; }
    public Nullable`1<DateTime> get_LastStatusChange();
    public void set_LastStatusChange(Nullable`1<DateTime> value);
    internal bool IsSetLastStatusChange();
    public Nullable`1<DateTime> get_LastUpdated();
    public void set_LastUpdated(Nullable`1<DateTime> value);
    internal bool IsSetLastUpdated();
    public InstanceHealthCheckState get_Status();
    public void set_Status(InstanceHealthCheckState value);
    internal bool IsSetStatus();
    public InstanceHealthCheckType get_Type();
    public void set_Type(InstanceHealthCheckType value);
    internal bool IsSetType();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AccessDeniedExceptionUnmarshaller : object {
    private static AccessDeniedExceptionUnmarshaller _instance;
    public static AccessDeniedExceptionUnmarshaller Instance { get; }
    private static AccessDeniedExceptionUnmarshaller();
    public sealed virtual AccessDeniedException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual AccessDeniedException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static AccessDeniedExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AttachmentStateChangeMarshaller : object {
    public static AttachmentStateChangeMarshaller Instance;
    private static AttachmentStateChangeMarshaller();
    public sealed virtual void Marshall(AttachmentStateChange requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AttachmentUnmarshaller : object {
    private static AttachmentUnmarshaller _instance;
    public static AttachmentUnmarshaller Instance { get; }
    private static AttachmentUnmarshaller();
    private sealed virtual override Attachment Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Attachment,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Attachment Unmarshall(JsonUnmarshallerContext context);
    public static AttachmentUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AttributeLimitExceededExceptionUnmarshaller : object {
    private static AttributeLimitExceededExceptionUnmarshaller _instance;
    public static AttributeLimitExceededExceptionUnmarshaller Instance { get; }
    private static AttributeLimitExceededExceptionUnmarshaller();
    public sealed virtual AttributeLimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual AttributeLimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static AttributeLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AttributeMarshaller : object {
    public static AttributeMarshaller Instance;
    private static AttributeMarshaller();
    public sealed virtual void Marshall(Attribute requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AttributeUnmarshaller : object {
    private static AttributeUnmarshaller _instance;
    public static AttributeUnmarshaller Instance { get; }
    private static AttributeUnmarshaller();
    private sealed virtual override Attribute Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Attribute,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Attribute Unmarshall(JsonUnmarshallerContext context);
    public static AttributeUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AutoScalingGroupProviderMarshaller : object {
    public static AutoScalingGroupProviderMarshaller Instance;
    private static AutoScalingGroupProviderMarshaller();
    public sealed virtual void Marshall(AutoScalingGroupProvider requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AutoScalingGroupProviderUnmarshaller : object {
    private static AutoScalingGroupProviderUnmarshaller _instance;
    public static AutoScalingGroupProviderUnmarshaller Instance { get; }
    private static AutoScalingGroupProviderUnmarshaller();
    private sealed virtual override AutoScalingGroupProvider Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.AutoScalingGroupProvider,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AutoScalingGroupProvider Unmarshall(JsonUnmarshallerContext context);
    public static AutoScalingGroupProviderUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AutoScalingGroupProviderUpdateMarshaller : object {
    public static AutoScalingGroupProviderUpdateMarshaller Instance;
    private static AutoScalingGroupProviderUpdateMarshaller();
    public sealed virtual void Marshall(AutoScalingGroupProviderUpdate requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AwsVpcConfigurationMarshaller : object {
    public static AwsVpcConfigurationMarshaller Instance;
    private static AwsVpcConfigurationMarshaller();
    public sealed virtual void Marshall(AwsVpcConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.AwsVpcConfigurationUnmarshaller : object {
    private static AwsVpcConfigurationUnmarshaller _instance;
    public static AwsVpcConfigurationUnmarshaller Instance { get; }
    private static AwsVpcConfigurationUnmarshaller();
    private sealed virtual override AwsVpcConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.AwsVpcConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AwsVpcConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static AwsVpcConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.BlockedExceptionUnmarshaller : object {
    private static BlockedExceptionUnmarshaller _instance;
    public static BlockedExceptionUnmarshaller Instance { get; }
    private static BlockedExceptionUnmarshaller();
    public sealed virtual BlockedException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual BlockedException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static BlockedExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CapacityProviderStrategyItemMarshaller : object {
    public static CapacityProviderStrategyItemMarshaller Instance;
    private static CapacityProviderStrategyItemMarshaller();
    public sealed virtual void Marshall(CapacityProviderStrategyItem requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CapacityProviderStrategyItemUnmarshaller : object {
    private static CapacityProviderStrategyItemUnmarshaller _instance;
    public static CapacityProviderStrategyItemUnmarshaller Instance { get; }
    private static CapacityProviderStrategyItemUnmarshaller();
    private sealed virtual override CapacityProviderStrategyItem Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.CapacityProviderStrategyItem,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CapacityProviderStrategyItem Unmarshall(JsonUnmarshallerContext context);
    public static CapacityProviderStrategyItemUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CapacityProviderUnmarshaller : object {
    private static CapacityProviderUnmarshaller _instance;
    public static CapacityProviderUnmarshaller Instance { get; }
    private static CapacityProviderUnmarshaller();
    private sealed virtual override CapacityProvider Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.CapacityProvider,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CapacityProvider Unmarshall(JsonUnmarshallerContext context);
    public static CapacityProviderUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClientExceptionUnmarshaller : object {
    private static ClientExceptionUnmarshaller _instance;
    public static ClientExceptionUnmarshaller Instance { get; }
    private static ClientExceptionUnmarshaller();
    public sealed virtual ClientException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ClientException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClientExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterConfigurationMarshaller : object {
    public static ClusterConfigurationMarshaller Instance;
    private static ClusterConfigurationMarshaller();
    public sealed virtual void Marshall(ClusterConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterConfigurationUnmarshaller : object {
    private static ClusterConfigurationUnmarshaller _instance;
    public static ClusterConfigurationUnmarshaller Instance { get; }
    private static ClusterConfigurationUnmarshaller();
    private sealed virtual override ClusterConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ClusterConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ClusterConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterContainsContainerInstancesExceptionUnmarshaller : object {
    private static ClusterContainsContainerInstancesExceptionUnmarshaller _instance;
    public static ClusterContainsContainerInstancesExceptionUnmarshaller Instance { get; }
    private static ClusterContainsContainerInstancesExceptionUnmarshaller();
    public sealed virtual ClusterContainsContainerInstancesException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ClusterContainsContainerInstancesException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterContainsContainerInstancesExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterContainsServicesExceptionUnmarshaller : object {
    private static ClusterContainsServicesExceptionUnmarshaller _instance;
    public static ClusterContainsServicesExceptionUnmarshaller Instance { get; }
    private static ClusterContainsServicesExceptionUnmarshaller();
    public sealed virtual ClusterContainsServicesException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ClusterContainsServicesException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterContainsServicesExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterContainsTasksExceptionUnmarshaller : object {
    private static ClusterContainsTasksExceptionUnmarshaller _instance;
    public static ClusterContainsTasksExceptionUnmarshaller Instance { get; }
    private static ClusterContainsTasksExceptionUnmarshaller();
    public sealed virtual ClusterContainsTasksException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ClusterContainsTasksException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterContainsTasksExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterNotFoundExceptionUnmarshaller : object {
    private static ClusterNotFoundExceptionUnmarshaller _instance;
    public static ClusterNotFoundExceptionUnmarshaller Instance { get; }
    private static ClusterNotFoundExceptionUnmarshaller();
    public sealed virtual ClusterNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ClusterNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterServiceConnectDefaultsRequestMarshaller : object {
    public static ClusterServiceConnectDefaultsRequestMarshaller Instance;
    private static ClusterServiceConnectDefaultsRequestMarshaller();
    public sealed virtual void Marshall(ClusterServiceConnectDefaultsRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterServiceConnectDefaultsUnmarshaller : object {
    private static ClusterServiceConnectDefaultsUnmarshaller _instance;
    public static ClusterServiceConnectDefaultsUnmarshaller Instance { get; }
    private static ClusterServiceConnectDefaultsUnmarshaller();
    private sealed virtual override ClusterServiceConnectDefaults Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ClusterServiceConnectDefaults,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterServiceConnectDefaults Unmarshall(JsonUnmarshallerContext context);
    public static ClusterServiceConnectDefaultsUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterSettingMarshaller : object {
    public static ClusterSettingMarshaller Instance;
    private static ClusterSettingMarshaller();
    public sealed virtual void Marshall(ClusterSetting requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterSettingUnmarshaller : object {
    private static ClusterSettingUnmarshaller _instance;
    public static ClusterSettingUnmarshaller Instance { get; }
    private static ClusterSettingUnmarshaller();
    private sealed virtual override ClusterSetting Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ClusterSetting,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSetting Unmarshall(JsonUnmarshallerContext context);
    public static ClusterSettingUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ClusterUnmarshaller : object {
    private static ClusterUnmarshaller _instance;
    public static ClusterUnmarshaller Instance { get; }
    private static ClusterUnmarshaller();
    private sealed virtual override Cluster Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Cluster,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Cluster Unmarshall(JsonUnmarshallerContext context);
    public static ClusterUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller : object {
    private static ConflictExceptionUnmarshaller _instance;
    public static ConflictExceptionUnmarshaller Instance { get; }
    private static ConflictExceptionUnmarshaller();
    public sealed virtual ConflictException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ConflictException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConflictExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ContainerDefinitionMarshaller : object {
    public static ContainerDefinitionMarshaller Instance;
    private static ContainerDefinitionMarshaller();
    public sealed virtual void Marshall(ContainerDefinition requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ContainerDefinitionUnmarshaller : object {
    private static ContainerDefinitionUnmarshaller _instance;
    public static ContainerDefinitionUnmarshaller Instance { get; }
    private static ContainerDefinitionUnmarshaller();
    private sealed virtual override ContainerDefinition Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ContainerDefinition,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ContainerDefinition Unmarshall(JsonUnmarshallerContext context);
    public static ContainerDefinitionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ContainerDependencyMarshaller : object {
    public static ContainerDependencyMarshaller Instance;
    private static ContainerDependencyMarshaller();
    public sealed virtual void Marshall(ContainerDependency requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ContainerDependencyUnmarshaller : object {
    private static ContainerDependencyUnmarshaller _instance;
    public static ContainerDependencyUnmarshaller Instance { get; }
    private static ContainerDependencyUnmarshaller();
    private sealed virtual override ContainerDependency Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ContainerDependency,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ContainerDependency Unmarshall(JsonUnmarshallerContext context);
    public static ContainerDependencyUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ContainerInstanceHealthStatusUnmarshaller : object {
    private static ContainerInstanceHealthStatusUnmarshaller _instance;
    public static ContainerInstanceHealthStatusUnmarshaller Instance { get; }
    private static ContainerInstanceHealthStatusUnmarshaller();
    private sealed virtual override ContainerInstanceHealthStatus Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ContainerInstanceHealthStatus,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ContainerInstanceHealthStatus Unmarshall(JsonUnmarshallerContext context);
    public static ContainerInstanceHealthStatusUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ContainerInstanceUnmarshaller : object {
    private static ContainerInstanceUnmarshaller _instance;
    public static ContainerInstanceUnmarshaller Instance { get; }
    private static ContainerInstanceUnmarshaller();
    private sealed virtual override ContainerInstance Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ContainerInstance,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ContainerInstance Unmarshall(JsonUnmarshallerContext context);
    public static ContainerInstanceUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ContainerOverrideMarshaller : object {
    public static ContainerOverrideMarshaller Instance;
    private static ContainerOverrideMarshaller();
    public sealed virtual void Marshall(ContainerOverride requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ContainerOverrideUnmarshaller : object {
    private static ContainerOverrideUnmarshaller _instance;
    public static ContainerOverrideUnmarshaller Instance { get; }
    private static ContainerOverrideUnmarshaller();
    private sealed virtual override ContainerOverride Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ContainerOverride,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ContainerOverride Unmarshall(JsonUnmarshallerContext context);
    public static ContainerOverrideUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ContainerUnmarshaller : object {
    private static ContainerUnmarshaller _instance;
    public static ContainerUnmarshaller Instance { get; }
    private static ContainerUnmarshaller();
    private sealed virtual override Container Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Container,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Container Unmarshall(JsonUnmarshallerContext context);
    public static ContainerUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CreateCapacityProviderRequestMarshaller : object {
    private static CreateCapacityProviderRequestMarshaller _instance;
    public static CreateCapacityProviderRequestMarshaller Instance { get; }
    private static CreateCapacityProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateCapacityProviderRequest publicRequest);
    internal static CreateCapacityProviderRequestMarshaller GetInstance();
    public static CreateCapacityProviderRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CreateCapacityProviderResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateCapacityProviderResponseUnmarshaller _instance;
    public static CreateCapacityProviderResponseUnmarshaller Instance { get; }
    private static CreateCapacityProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateCapacityProviderResponseUnmarshaller GetInstance();
    public static CreateCapacityProviderResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CreateClusterRequestMarshaller : object {
    private static CreateClusterRequestMarshaller _instance;
    public static CreateClusterRequestMarshaller Instance { get; }
    private static CreateClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateClusterRequest publicRequest);
    internal static CreateClusterRequestMarshaller GetInstance();
    public static CreateClusterRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CreateClusterResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateClusterResponseUnmarshaller _instance;
    public static CreateClusterResponseUnmarshaller Instance { get; }
    private static CreateClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateClusterResponseUnmarshaller GetInstance();
    public static CreateClusterResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CreateServiceRequestMarshaller : object {
    private static CreateServiceRequestMarshaller _instance;
    public static CreateServiceRequestMarshaller Instance { get; }
    private static CreateServiceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateServiceRequest publicRequest);
    internal static CreateServiceRequestMarshaller GetInstance();
    public static CreateServiceRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CreateServiceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateServiceResponseUnmarshaller _instance;
    public static CreateServiceResponseUnmarshaller Instance { get; }
    private static CreateServiceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateServiceResponseUnmarshaller GetInstance();
    public static CreateServiceResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CreateTaskSetRequestMarshaller : object {
    private static CreateTaskSetRequestMarshaller _instance;
    public static CreateTaskSetRequestMarshaller Instance { get; }
    private static CreateTaskSetRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateTaskSetRequest publicRequest);
    internal static CreateTaskSetRequestMarshaller GetInstance();
    public static CreateTaskSetRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.CreateTaskSetResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateTaskSetResponseUnmarshaller _instance;
    public static CreateTaskSetResponseUnmarshaller Instance { get; }
    private static CreateTaskSetResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateTaskSetResponseUnmarshaller GetInstance();
    public static CreateTaskSetResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteAccountSettingRequestMarshaller : object {
    private static DeleteAccountSettingRequestMarshaller _instance;
    public static DeleteAccountSettingRequestMarshaller Instance { get; }
    private static DeleteAccountSettingRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAccountSettingRequest publicRequest);
    internal static DeleteAccountSettingRequestMarshaller GetInstance();
    public static DeleteAccountSettingRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteAccountSettingResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteAccountSettingResponseUnmarshaller _instance;
    public static DeleteAccountSettingResponseUnmarshaller Instance { get; }
    private static DeleteAccountSettingResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAccountSettingResponseUnmarshaller GetInstance();
    public static DeleteAccountSettingResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteAttributesRequestMarshaller : object {
    private static DeleteAttributesRequestMarshaller _instance;
    public static DeleteAttributesRequestMarshaller Instance { get; }
    private static DeleteAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAttributesRequest publicRequest);
    internal static DeleteAttributesRequestMarshaller GetInstance();
    public static DeleteAttributesRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteAttributesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteAttributesResponseUnmarshaller _instance;
    public static DeleteAttributesResponseUnmarshaller Instance { get; }
    private static DeleteAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAttributesResponseUnmarshaller GetInstance();
    public static DeleteAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteCapacityProviderRequestMarshaller : object {
    private static DeleteCapacityProviderRequestMarshaller _instance;
    public static DeleteCapacityProviderRequestMarshaller Instance { get; }
    private static DeleteCapacityProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCapacityProviderRequest publicRequest);
    internal static DeleteCapacityProviderRequestMarshaller GetInstance();
    public static DeleteCapacityProviderRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteCapacityProviderResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteCapacityProviderResponseUnmarshaller _instance;
    public static DeleteCapacityProviderResponseUnmarshaller Instance { get; }
    private static DeleteCapacityProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCapacityProviderResponseUnmarshaller GetInstance();
    public static DeleteCapacityProviderResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteClusterRequestMarshaller : object {
    private static DeleteClusterRequestMarshaller _instance;
    public static DeleteClusterRequestMarshaller Instance { get; }
    private static DeleteClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteClusterRequest publicRequest);
    internal static DeleteClusterRequestMarshaller GetInstance();
    public static DeleteClusterRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteClusterResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteClusterResponseUnmarshaller _instance;
    public static DeleteClusterResponseUnmarshaller Instance { get; }
    private static DeleteClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteClusterResponseUnmarshaller GetInstance();
    public static DeleteClusterResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteServiceRequestMarshaller : object {
    private static DeleteServiceRequestMarshaller _instance;
    public static DeleteServiceRequestMarshaller Instance { get; }
    private static DeleteServiceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteServiceRequest publicRequest);
    internal static DeleteServiceRequestMarshaller GetInstance();
    public static DeleteServiceRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteServiceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteServiceResponseUnmarshaller _instance;
    public static DeleteServiceResponseUnmarshaller Instance { get; }
    private static DeleteServiceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteServiceResponseUnmarshaller GetInstance();
    public static DeleteServiceResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteTaskDefinitionsRequestMarshaller : object {
    private static DeleteTaskDefinitionsRequestMarshaller _instance;
    public static DeleteTaskDefinitionsRequestMarshaller Instance { get; }
    private static DeleteTaskDefinitionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteTaskDefinitionsRequest publicRequest);
    internal static DeleteTaskDefinitionsRequestMarshaller GetInstance();
    public static DeleteTaskDefinitionsRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteTaskDefinitionsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteTaskDefinitionsResponseUnmarshaller _instance;
    public static DeleteTaskDefinitionsResponseUnmarshaller Instance { get; }
    private static DeleteTaskDefinitionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteTaskDefinitionsResponseUnmarshaller GetInstance();
    public static DeleteTaskDefinitionsResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteTaskSetRequestMarshaller : object {
    private static DeleteTaskSetRequestMarshaller _instance;
    public static DeleteTaskSetRequestMarshaller Instance { get; }
    private static DeleteTaskSetRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteTaskSetRequest publicRequest);
    internal static DeleteTaskSetRequestMarshaller GetInstance();
    public static DeleteTaskSetRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeleteTaskSetResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteTaskSetResponseUnmarshaller _instance;
    public static DeleteTaskSetResponseUnmarshaller Instance { get; }
    private static DeleteTaskSetResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteTaskSetResponseUnmarshaller GetInstance();
    public static DeleteTaskSetResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentAlarmsMarshaller : object {
    public static DeploymentAlarmsMarshaller Instance;
    private static DeploymentAlarmsMarshaller();
    public sealed virtual void Marshall(DeploymentAlarms requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentAlarmsUnmarshaller : object {
    private static DeploymentAlarmsUnmarshaller _instance;
    public static DeploymentAlarmsUnmarshaller Instance { get; }
    private static DeploymentAlarmsUnmarshaller();
    private sealed virtual override DeploymentAlarms Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.DeploymentAlarms,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeploymentAlarms Unmarshall(JsonUnmarshallerContext context);
    public static DeploymentAlarmsUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentCircuitBreakerMarshaller : object {
    public static DeploymentCircuitBreakerMarshaller Instance;
    private static DeploymentCircuitBreakerMarshaller();
    public sealed virtual void Marshall(DeploymentCircuitBreaker requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentCircuitBreakerUnmarshaller : object {
    private static DeploymentCircuitBreakerUnmarshaller _instance;
    public static DeploymentCircuitBreakerUnmarshaller Instance { get; }
    private static DeploymentCircuitBreakerUnmarshaller();
    private sealed virtual override DeploymentCircuitBreaker Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.DeploymentCircuitBreaker,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeploymentCircuitBreaker Unmarshall(JsonUnmarshallerContext context);
    public static DeploymentCircuitBreakerUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentConfigurationMarshaller : object {
    public static DeploymentConfigurationMarshaller Instance;
    private static DeploymentConfigurationMarshaller();
    public sealed virtual void Marshall(DeploymentConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentConfigurationUnmarshaller : object {
    private static DeploymentConfigurationUnmarshaller _instance;
    public static DeploymentConfigurationUnmarshaller Instance { get; }
    private static DeploymentConfigurationUnmarshaller();
    private sealed virtual override DeploymentConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.DeploymentConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeploymentConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static DeploymentConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentControllerMarshaller : object {
    public static DeploymentControllerMarshaller Instance;
    private static DeploymentControllerMarshaller();
    public sealed virtual void Marshall(DeploymentController requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentControllerUnmarshaller : object {
    private static DeploymentControllerUnmarshaller _instance;
    public static DeploymentControllerUnmarshaller Instance { get; }
    private static DeploymentControllerUnmarshaller();
    private sealed virtual override DeploymentController Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.DeploymentController,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeploymentController Unmarshall(JsonUnmarshallerContext context);
    public static DeploymentControllerUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentEphemeralStorageUnmarshaller : object {
    private static DeploymentEphemeralStorageUnmarshaller _instance;
    public static DeploymentEphemeralStorageUnmarshaller Instance { get; }
    private static DeploymentEphemeralStorageUnmarshaller();
    private sealed virtual override DeploymentEphemeralStorage Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.DeploymentEphemeralStorage,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeploymentEphemeralStorage Unmarshall(JsonUnmarshallerContext context);
    public static DeploymentEphemeralStorageUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeploymentUnmarshaller : object {
    private static DeploymentUnmarshaller _instance;
    public static DeploymentUnmarshaller Instance { get; }
    private static DeploymentUnmarshaller();
    private sealed virtual override Deployment Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Deployment,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Deployment Unmarshall(JsonUnmarshallerContext context);
    public static DeploymentUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeregisterContainerInstanceRequestMarshaller : object {
    private static DeregisterContainerInstanceRequestMarshaller _instance;
    public static DeregisterContainerInstanceRequestMarshaller Instance { get; }
    private static DeregisterContainerInstanceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeregisterContainerInstanceRequest publicRequest);
    internal static DeregisterContainerInstanceRequestMarshaller GetInstance();
    public static DeregisterContainerInstanceRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeregisterContainerInstanceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeregisterContainerInstanceResponseUnmarshaller _instance;
    public static DeregisterContainerInstanceResponseUnmarshaller Instance { get; }
    private static DeregisterContainerInstanceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeregisterContainerInstanceResponseUnmarshaller GetInstance();
    public static DeregisterContainerInstanceResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeregisterTaskDefinitionRequestMarshaller : object {
    private static DeregisterTaskDefinitionRequestMarshaller _instance;
    public static DeregisterTaskDefinitionRequestMarshaller Instance { get; }
    private static DeregisterTaskDefinitionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeregisterTaskDefinitionRequest publicRequest);
    internal static DeregisterTaskDefinitionRequestMarshaller GetInstance();
    public static DeregisterTaskDefinitionRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeregisterTaskDefinitionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeregisterTaskDefinitionResponseUnmarshaller _instance;
    public static DeregisterTaskDefinitionResponseUnmarshaller Instance { get; }
    private static DeregisterTaskDefinitionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeregisterTaskDefinitionResponseUnmarshaller GetInstance();
    public static DeregisterTaskDefinitionResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeCapacityProvidersRequestMarshaller : object {
    private static DescribeCapacityProvidersRequestMarshaller _instance;
    public static DescribeCapacityProvidersRequestMarshaller Instance { get; }
    private static DescribeCapacityProvidersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCapacityProvidersRequest publicRequest);
    internal static DescribeCapacityProvidersRequestMarshaller GetInstance();
    public static DescribeCapacityProvidersRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeCapacityProvidersResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeCapacityProvidersResponseUnmarshaller _instance;
    public static DescribeCapacityProvidersResponseUnmarshaller Instance { get; }
    private static DescribeCapacityProvidersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCapacityProvidersResponseUnmarshaller GetInstance();
    public static DescribeCapacityProvidersResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeClustersRequestMarshaller : object {
    private static DescribeClustersRequestMarshaller _instance;
    public static DescribeClustersRequestMarshaller Instance { get; }
    private static DescribeClustersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClustersRequest publicRequest);
    internal static DescribeClustersRequestMarshaller GetInstance();
    public static DescribeClustersRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeClustersResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeClustersResponseUnmarshaller _instance;
    public static DescribeClustersResponseUnmarshaller Instance { get; }
    private static DescribeClustersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClustersResponseUnmarshaller GetInstance();
    public static DescribeClustersResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeContainerInstancesRequestMarshaller : object {
    private static DescribeContainerInstancesRequestMarshaller _instance;
    public static DescribeContainerInstancesRequestMarshaller Instance { get; }
    private static DescribeContainerInstancesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeContainerInstancesRequest publicRequest);
    internal static DescribeContainerInstancesRequestMarshaller GetInstance();
    public static DescribeContainerInstancesRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeContainerInstancesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeContainerInstancesResponseUnmarshaller _instance;
    public static DescribeContainerInstancesResponseUnmarshaller Instance { get; }
    private static DescribeContainerInstancesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeContainerInstancesResponseUnmarshaller GetInstance();
    public static DescribeContainerInstancesResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeServicesRequestMarshaller : object {
    private static DescribeServicesRequestMarshaller _instance;
    public static DescribeServicesRequestMarshaller Instance { get; }
    private static DescribeServicesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeServicesRequest publicRequest);
    internal static DescribeServicesRequestMarshaller GetInstance();
    public static DescribeServicesRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeServicesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeServicesResponseUnmarshaller _instance;
    public static DescribeServicesResponseUnmarshaller Instance { get; }
    private static DescribeServicesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeServicesResponseUnmarshaller GetInstance();
    public static DescribeServicesResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeTaskDefinitionRequestMarshaller : object {
    private static DescribeTaskDefinitionRequestMarshaller _instance;
    public static DescribeTaskDefinitionRequestMarshaller Instance { get; }
    private static DescribeTaskDefinitionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeTaskDefinitionRequest publicRequest);
    internal static DescribeTaskDefinitionRequestMarshaller GetInstance();
    public static DescribeTaskDefinitionRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeTaskDefinitionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeTaskDefinitionResponseUnmarshaller _instance;
    public static DescribeTaskDefinitionResponseUnmarshaller Instance { get; }
    private static DescribeTaskDefinitionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeTaskDefinitionResponseUnmarshaller GetInstance();
    public static DescribeTaskDefinitionResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeTaskSetsRequestMarshaller : object {
    private static DescribeTaskSetsRequestMarshaller _instance;
    public static DescribeTaskSetsRequestMarshaller Instance { get; }
    private static DescribeTaskSetsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeTaskSetsRequest publicRequest);
    internal static DescribeTaskSetsRequestMarshaller GetInstance();
    public static DescribeTaskSetsRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeTaskSetsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeTaskSetsResponseUnmarshaller _instance;
    public static DescribeTaskSetsResponseUnmarshaller Instance { get; }
    private static DescribeTaskSetsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeTaskSetsResponseUnmarshaller GetInstance();
    public static DescribeTaskSetsResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeTasksRequestMarshaller : object {
    private static DescribeTasksRequestMarshaller _instance;
    public static DescribeTasksRequestMarshaller Instance { get; }
    private static DescribeTasksRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeTasksRequest publicRequest);
    internal static DescribeTasksRequestMarshaller GetInstance();
    public static DescribeTasksRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DescribeTasksResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeTasksResponseUnmarshaller _instance;
    public static DescribeTasksResponseUnmarshaller Instance { get; }
    private static DescribeTasksResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeTasksResponseUnmarshaller GetInstance();
    public static DescribeTasksResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeviceMarshaller : object {
    public static DeviceMarshaller Instance;
    private static DeviceMarshaller();
    public sealed virtual void Marshall(Device requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DeviceUnmarshaller : object {
    private static DeviceUnmarshaller _instance;
    public static DeviceUnmarshaller Instance { get; }
    private static DeviceUnmarshaller();
    private sealed virtual override Device Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Device,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Device Unmarshall(JsonUnmarshallerContext context);
    public static DeviceUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DockerVolumeConfigurationMarshaller : object {
    public static DockerVolumeConfigurationMarshaller Instance;
    private static DockerVolumeConfigurationMarshaller();
    public sealed virtual void Marshall(DockerVolumeConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.DockerVolumeConfigurationUnmarshaller : object {
    private static DockerVolumeConfigurationUnmarshaller _instance;
    public static DockerVolumeConfigurationUnmarshaller Instance { get; }
    private static DockerVolumeConfigurationUnmarshaller();
    private sealed virtual override DockerVolumeConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.DockerVolumeConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DockerVolumeConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static DockerVolumeConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EBSTagSpecificationMarshaller : object {
    public static EBSTagSpecificationMarshaller Instance;
    private static EBSTagSpecificationMarshaller();
    public sealed virtual void Marshall(EBSTagSpecification requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EBSTagSpecificationUnmarshaller : object {
    private static EBSTagSpecificationUnmarshaller _instance;
    public static EBSTagSpecificationUnmarshaller Instance { get; }
    private static EBSTagSpecificationUnmarshaller();
    private sealed virtual override EBSTagSpecification Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.EBSTagSpecification,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EBSTagSpecification Unmarshall(JsonUnmarshallerContext context);
    public static EBSTagSpecificationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EFSAuthorizationConfigMarshaller : object {
    public static EFSAuthorizationConfigMarshaller Instance;
    private static EFSAuthorizationConfigMarshaller();
    public sealed virtual void Marshall(EFSAuthorizationConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EFSAuthorizationConfigUnmarshaller : object {
    private static EFSAuthorizationConfigUnmarshaller _instance;
    public static EFSAuthorizationConfigUnmarshaller Instance { get; }
    private static EFSAuthorizationConfigUnmarshaller();
    private sealed virtual override EFSAuthorizationConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.EFSAuthorizationConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EFSAuthorizationConfig Unmarshall(JsonUnmarshallerContext context);
    public static EFSAuthorizationConfigUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EFSVolumeConfigurationMarshaller : object {
    public static EFSVolumeConfigurationMarshaller Instance;
    private static EFSVolumeConfigurationMarshaller();
    public sealed virtual void Marshall(EFSVolumeConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EFSVolumeConfigurationUnmarshaller : object {
    private static EFSVolumeConfigurationUnmarshaller _instance;
    public static EFSVolumeConfigurationUnmarshaller Instance { get; }
    private static EFSVolumeConfigurationUnmarshaller();
    private sealed virtual override EFSVolumeConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.EFSVolumeConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EFSVolumeConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static EFSVolumeConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EnvironmentFileMarshaller : object {
    public static EnvironmentFileMarshaller Instance;
    private static EnvironmentFileMarshaller();
    public sealed virtual void Marshall(EnvironmentFile requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EnvironmentFileUnmarshaller : object {
    private static EnvironmentFileUnmarshaller _instance;
    public static EnvironmentFileUnmarshaller Instance { get; }
    private static EnvironmentFileUnmarshaller();
    private sealed virtual override EnvironmentFile Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.EnvironmentFile,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EnvironmentFile Unmarshall(JsonUnmarshallerContext context);
    public static EnvironmentFileUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EphemeralStorageMarshaller : object {
    public static EphemeralStorageMarshaller Instance;
    private static EphemeralStorageMarshaller();
    public sealed virtual void Marshall(EphemeralStorage requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.EphemeralStorageUnmarshaller : object {
    private static EphemeralStorageUnmarshaller _instance;
    public static EphemeralStorageUnmarshaller Instance { get; }
    private static EphemeralStorageUnmarshaller();
    private sealed virtual override EphemeralStorage Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.EphemeralStorage,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EphemeralStorage Unmarshall(JsonUnmarshallerContext context);
    public static EphemeralStorageUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ExecuteCommandConfigurationMarshaller : object {
    public static ExecuteCommandConfigurationMarshaller Instance;
    private static ExecuteCommandConfigurationMarshaller();
    public sealed virtual void Marshall(ExecuteCommandConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ExecuteCommandConfigurationUnmarshaller : object {
    private static ExecuteCommandConfigurationUnmarshaller _instance;
    public static ExecuteCommandConfigurationUnmarshaller Instance { get; }
    private static ExecuteCommandConfigurationUnmarshaller();
    private sealed virtual override ExecuteCommandConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ExecuteCommandConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExecuteCommandConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ExecuteCommandConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ExecuteCommandLogConfigurationMarshaller : object {
    public static ExecuteCommandLogConfigurationMarshaller Instance;
    private static ExecuteCommandLogConfigurationMarshaller();
    public sealed virtual void Marshall(ExecuteCommandLogConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ExecuteCommandLogConfigurationUnmarshaller : object {
    private static ExecuteCommandLogConfigurationUnmarshaller _instance;
    public static ExecuteCommandLogConfigurationUnmarshaller Instance { get; }
    private static ExecuteCommandLogConfigurationUnmarshaller();
    private sealed virtual override ExecuteCommandLogConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ExecuteCommandLogConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExecuteCommandLogConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ExecuteCommandLogConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ExecuteCommandRequestMarshaller : object {
    private static ExecuteCommandRequestMarshaller _instance;
    public static ExecuteCommandRequestMarshaller Instance { get; }
    private static ExecuteCommandRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ExecuteCommandRequest publicRequest);
    internal static ExecuteCommandRequestMarshaller GetInstance();
    public static ExecuteCommandRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ExecuteCommandResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ExecuteCommandResponseUnmarshaller _instance;
    public static ExecuteCommandResponseUnmarshaller Instance { get; }
    private static ExecuteCommandResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ExecuteCommandResponseUnmarshaller GetInstance();
    public static ExecuteCommandResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.FailureUnmarshaller : object {
    private static FailureUnmarshaller _instance;
    public static FailureUnmarshaller Instance { get; }
    private static FailureUnmarshaller();
    private sealed virtual override Failure Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Failure,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Failure Unmarshall(JsonUnmarshallerContext context);
    public static FailureUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.FirelensConfigurationMarshaller : object {
    public static FirelensConfigurationMarshaller Instance;
    private static FirelensConfigurationMarshaller();
    public sealed virtual void Marshall(FirelensConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.FirelensConfigurationUnmarshaller : object {
    private static FirelensConfigurationUnmarshaller _instance;
    public static FirelensConfigurationUnmarshaller Instance { get; }
    private static FirelensConfigurationUnmarshaller();
    private sealed virtual override FirelensConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.FirelensConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FirelensConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static FirelensConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.FSxWindowsFileServerAuthorizationConfigMarshaller : object {
    public static FSxWindowsFileServerAuthorizationConfigMarshaller Instance;
    private static FSxWindowsFileServerAuthorizationConfigMarshaller();
    public sealed virtual void Marshall(FSxWindowsFileServerAuthorizationConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.FSxWindowsFileServerAuthorizationConfigUnmarshaller : object {
    private static FSxWindowsFileServerAuthorizationConfigUnmarshaller _instance;
    public static FSxWindowsFileServerAuthorizationConfigUnmarshaller Instance { get; }
    private static FSxWindowsFileServerAuthorizationConfigUnmarshaller();
    private sealed virtual override FSxWindowsFileServerAuthorizationConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.FSxWindowsFileServerAuthorizationConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FSxWindowsFileServerAuthorizationConfig Unmarshall(JsonUnmarshallerContext context);
    public static FSxWindowsFileServerAuthorizationConfigUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.FSxWindowsFileServerVolumeConfigurationMarshaller : object {
    public static FSxWindowsFileServerVolumeConfigurationMarshaller Instance;
    private static FSxWindowsFileServerVolumeConfigurationMarshaller();
    public sealed virtual void Marshall(FSxWindowsFileServerVolumeConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.FSxWindowsFileServerVolumeConfigurationUnmarshaller : object {
    private static FSxWindowsFileServerVolumeConfigurationUnmarshaller _instance;
    public static FSxWindowsFileServerVolumeConfigurationUnmarshaller Instance { get; }
    private static FSxWindowsFileServerVolumeConfigurationUnmarshaller();
    private sealed virtual override FSxWindowsFileServerVolumeConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.FSxWindowsFileServerVolumeConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FSxWindowsFileServerVolumeConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static FSxWindowsFileServerVolumeConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.GetTaskProtectionRequestMarshaller : object {
    private static GetTaskProtectionRequestMarshaller _instance;
    public static GetTaskProtectionRequestMarshaller Instance { get; }
    private static GetTaskProtectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetTaskProtectionRequest publicRequest);
    internal static GetTaskProtectionRequestMarshaller GetInstance();
    public static GetTaskProtectionRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.GetTaskProtectionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetTaskProtectionResponseUnmarshaller _instance;
    public static GetTaskProtectionResponseUnmarshaller Instance { get; }
    private static GetTaskProtectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetTaskProtectionResponseUnmarshaller GetInstance();
    public static GetTaskProtectionResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.HealthCheckMarshaller : object {
    public static HealthCheckMarshaller Instance;
    private static HealthCheckMarshaller();
    public sealed virtual void Marshall(HealthCheck requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.HealthCheckUnmarshaller : object {
    private static HealthCheckUnmarshaller _instance;
    public static HealthCheckUnmarshaller Instance { get; }
    private static HealthCheckUnmarshaller();
    private sealed virtual override HealthCheck Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.HealthCheck,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HealthCheck Unmarshall(JsonUnmarshallerContext context);
    public static HealthCheckUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.HostEntryMarshaller : object {
    public static HostEntryMarshaller Instance;
    private static HostEntryMarshaller();
    public sealed virtual void Marshall(HostEntry requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.HostEntryUnmarshaller : object {
    private static HostEntryUnmarshaller _instance;
    public static HostEntryUnmarshaller Instance { get; }
    private static HostEntryUnmarshaller();
    private sealed virtual override HostEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.HostEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostEntry Unmarshall(JsonUnmarshallerContext context);
    public static HostEntryUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.HostVolumePropertiesMarshaller : object {
    public static HostVolumePropertiesMarshaller Instance;
    private static HostVolumePropertiesMarshaller();
    public sealed virtual void Marshall(HostVolumeProperties requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.HostVolumePropertiesUnmarshaller : object {
    private static HostVolumePropertiesUnmarshaller _instance;
    public static HostVolumePropertiesUnmarshaller Instance { get; }
    private static HostVolumePropertiesUnmarshaller();
    private sealed virtual override HostVolumeProperties Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.HostVolumeProperties,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostVolumeProperties Unmarshall(JsonUnmarshallerContext context);
    public static HostVolumePropertiesUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.InferenceAcceleratorMarshaller : object {
    public static InferenceAcceleratorMarshaller Instance;
    private static InferenceAcceleratorMarshaller();
    public sealed virtual void Marshall(InferenceAccelerator requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.InferenceAcceleratorOverrideMarshaller : object {
    public static InferenceAcceleratorOverrideMarshaller Instance;
    private static InferenceAcceleratorOverrideMarshaller();
    public sealed virtual void Marshall(InferenceAcceleratorOverride requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.InferenceAcceleratorOverrideUnmarshaller : object {
    private static InferenceAcceleratorOverrideUnmarshaller _instance;
    public static InferenceAcceleratorOverrideUnmarshaller Instance { get; }
    private static InferenceAcceleratorOverrideUnmarshaller();
    private sealed virtual override InferenceAcceleratorOverride Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.InferenceAcceleratorOverride,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InferenceAcceleratorOverride Unmarshall(JsonUnmarshallerContext context);
    public static InferenceAcceleratorOverrideUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.InferenceAcceleratorUnmarshaller : object {
    private static InferenceAcceleratorUnmarshaller _instance;
    public static InferenceAcceleratorUnmarshaller Instance { get; }
    private static InferenceAcceleratorUnmarshaller();
    private sealed virtual override InferenceAccelerator Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.InferenceAccelerator,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InferenceAccelerator Unmarshall(JsonUnmarshallerContext context);
    public static InferenceAcceleratorUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.InstanceHealthCheckResultUnmarshaller : object {
    private static InstanceHealthCheckResultUnmarshaller _instance;
    public static InstanceHealthCheckResultUnmarshaller Instance { get; }
    private static InstanceHealthCheckResultUnmarshaller();
    private sealed virtual override InstanceHealthCheckResult Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.InstanceHealthCheckResult,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InstanceHealthCheckResult Unmarshall(JsonUnmarshallerContext context);
    public static InstanceHealthCheckResultUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.InvalidParameterExceptionUnmarshaller : object {
    private static InvalidParameterExceptionUnmarshaller _instance;
    public static InvalidParameterExceptionUnmarshaller Instance { get; }
    private static InvalidParameterExceptionUnmarshaller();
    public sealed virtual InvalidParameterException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidParameterException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidParameterExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.KernelCapabilitiesMarshaller : object {
    public static KernelCapabilitiesMarshaller Instance;
    private static KernelCapabilitiesMarshaller();
    public sealed virtual void Marshall(KernelCapabilities requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.KernelCapabilitiesUnmarshaller : object {
    private static KernelCapabilitiesUnmarshaller _instance;
    public static KernelCapabilitiesUnmarshaller Instance { get; }
    private static KernelCapabilitiesUnmarshaller();
    private sealed virtual override KernelCapabilities Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.KernelCapabilities,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KernelCapabilities Unmarshall(JsonUnmarshallerContext context);
    public static KernelCapabilitiesUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.KeyValuePairMarshaller : object {
    public static KeyValuePairMarshaller Instance;
    private static KeyValuePairMarshaller();
    public sealed virtual void Marshall(KeyValuePair requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.KeyValuePairUnmarshaller : object {
    private static KeyValuePairUnmarshaller _instance;
    public static KeyValuePairUnmarshaller Instance { get; }
    private static KeyValuePairUnmarshaller();
    private sealed virtual override KeyValuePair Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.KeyValuePair,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeyValuePair Unmarshall(JsonUnmarshallerContext context);
    public static KeyValuePairUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller : object {
    private static LimitExceededExceptionUnmarshaller _instance;
    public static LimitExceededExceptionUnmarshaller Instance { get; }
    private static LimitExceededExceptionUnmarshaller();
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.LinuxParametersMarshaller : object {
    public static LinuxParametersMarshaller Instance;
    private static LinuxParametersMarshaller();
    public sealed virtual void Marshall(LinuxParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.LinuxParametersUnmarshaller : object {
    private static LinuxParametersUnmarshaller _instance;
    public static LinuxParametersUnmarshaller Instance { get; }
    private static LinuxParametersUnmarshaller();
    private sealed virtual override LinuxParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.LinuxParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LinuxParameters Unmarshall(JsonUnmarshallerContext context);
    public static LinuxParametersUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListAccountSettingsRequestMarshaller : object {
    private static ListAccountSettingsRequestMarshaller _instance;
    public static ListAccountSettingsRequestMarshaller Instance { get; }
    private static ListAccountSettingsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAccountSettingsRequest publicRequest);
    internal static ListAccountSettingsRequestMarshaller GetInstance();
    public static ListAccountSettingsRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListAccountSettingsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListAccountSettingsResponseUnmarshaller _instance;
    public static ListAccountSettingsResponseUnmarshaller Instance { get; }
    private static ListAccountSettingsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAccountSettingsResponseUnmarshaller GetInstance();
    public static ListAccountSettingsResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListAttributesRequestMarshaller : object {
    private static ListAttributesRequestMarshaller _instance;
    public static ListAttributesRequestMarshaller Instance { get; }
    private static ListAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAttributesRequest publicRequest);
    internal static ListAttributesRequestMarshaller GetInstance();
    public static ListAttributesRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListAttributesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListAttributesResponseUnmarshaller _instance;
    public static ListAttributesResponseUnmarshaller Instance { get; }
    private static ListAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAttributesResponseUnmarshaller GetInstance();
    public static ListAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListClustersRequestMarshaller : object {
    private static ListClustersRequestMarshaller _instance;
    public static ListClustersRequestMarshaller Instance { get; }
    private static ListClustersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListClustersRequest publicRequest);
    internal static ListClustersRequestMarshaller GetInstance();
    public static ListClustersRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListClustersResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListClustersResponseUnmarshaller _instance;
    public static ListClustersResponseUnmarshaller Instance { get; }
    private static ListClustersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListClustersResponseUnmarshaller GetInstance();
    public static ListClustersResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListContainerInstancesRequestMarshaller : object {
    private static ListContainerInstancesRequestMarshaller _instance;
    public static ListContainerInstancesRequestMarshaller Instance { get; }
    private static ListContainerInstancesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListContainerInstancesRequest publicRequest);
    internal static ListContainerInstancesRequestMarshaller GetInstance();
    public static ListContainerInstancesRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListContainerInstancesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListContainerInstancesResponseUnmarshaller _instance;
    public static ListContainerInstancesResponseUnmarshaller Instance { get; }
    private static ListContainerInstancesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListContainerInstancesResponseUnmarshaller GetInstance();
    public static ListContainerInstancesResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListServicesByNamespaceRequestMarshaller : object {
    private static ListServicesByNamespaceRequestMarshaller _instance;
    public static ListServicesByNamespaceRequestMarshaller Instance { get; }
    private static ListServicesByNamespaceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListServicesByNamespaceRequest publicRequest);
    internal static ListServicesByNamespaceRequestMarshaller GetInstance();
    public static ListServicesByNamespaceRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListServicesByNamespaceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListServicesByNamespaceResponseUnmarshaller _instance;
    public static ListServicesByNamespaceResponseUnmarshaller Instance { get; }
    private static ListServicesByNamespaceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListServicesByNamespaceResponseUnmarshaller GetInstance();
    public static ListServicesByNamespaceResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListServicesRequestMarshaller : object {
    private static ListServicesRequestMarshaller _instance;
    public static ListServicesRequestMarshaller Instance { get; }
    private static ListServicesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListServicesRequest publicRequest);
    internal static ListServicesRequestMarshaller GetInstance();
    public static ListServicesRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListServicesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListServicesResponseUnmarshaller _instance;
    public static ListServicesResponseUnmarshaller Instance { get; }
    private static ListServicesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListServicesResponseUnmarshaller GetInstance();
    public static ListServicesResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller : object {
    private static ListTagsForResourceRequestMarshaller _instance;
    public static ListTagsForResourceRequestMarshaller Instance { get; }
    private static ListTagsForResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForResourceRequest publicRequest);
    internal static ListTagsForResourceRequestMarshaller GetInstance();
    public static ListTagsForResourceRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTagsForResourceResponseUnmarshaller _instance;
    public static ListTagsForResourceResponseUnmarshaller Instance { get; }
    private static ListTagsForResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForResourceResponseUnmarshaller GetInstance();
    public static ListTagsForResourceResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListTaskDefinitionFamiliesRequestMarshaller : object {
    private static ListTaskDefinitionFamiliesRequestMarshaller _instance;
    public static ListTaskDefinitionFamiliesRequestMarshaller Instance { get; }
    private static ListTaskDefinitionFamiliesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTaskDefinitionFamiliesRequest publicRequest);
    internal static ListTaskDefinitionFamiliesRequestMarshaller GetInstance();
    public static ListTaskDefinitionFamiliesRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListTaskDefinitionFamiliesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTaskDefinitionFamiliesResponseUnmarshaller _instance;
    public static ListTaskDefinitionFamiliesResponseUnmarshaller Instance { get; }
    private static ListTaskDefinitionFamiliesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTaskDefinitionFamiliesResponseUnmarshaller GetInstance();
    public static ListTaskDefinitionFamiliesResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListTaskDefinitionsRequestMarshaller : object {
    private static ListTaskDefinitionsRequestMarshaller _instance;
    public static ListTaskDefinitionsRequestMarshaller Instance { get; }
    private static ListTaskDefinitionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTaskDefinitionsRequest publicRequest);
    internal static ListTaskDefinitionsRequestMarshaller GetInstance();
    public static ListTaskDefinitionsRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListTaskDefinitionsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTaskDefinitionsResponseUnmarshaller _instance;
    public static ListTaskDefinitionsResponseUnmarshaller Instance { get; }
    private static ListTaskDefinitionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTaskDefinitionsResponseUnmarshaller GetInstance();
    public static ListTaskDefinitionsResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListTasksRequestMarshaller : object {
    private static ListTasksRequestMarshaller _instance;
    public static ListTasksRequestMarshaller Instance { get; }
    private static ListTasksRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTasksRequest publicRequest);
    internal static ListTasksRequestMarshaller GetInstance();
    public static ListTasksRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ListTasksResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTasksResponseUnmarshaller _instance;
    public static ListTasksResponseUnmarshaller Instance { get; }
    private static ListTasksResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTasksResponseUnmarshaller GetInstance();
    public static ListTasksResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.LoadBalancerMarshaller : object {
    public static LoadBalancerMarshaller Instance;
    private static LoadBalancerMarshaller();
    public sealed virtual void Marshall(LoadBalancer requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.LoadBalancerUnmarshaller : object {
    private static LoadBalancerUnmarshaller _instance;
    public static LoadBalancerUnmarshaller Instance { get; }
    private static LoadBalancerUnmarshaller();
    private sealed virtual override LoadBalancer Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.LoadBalancer,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LoadBalancer Unmarshall(JsonUnmarshallerContext context);
    public static LoadBalancerUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.LogConfigurationMarshaller : object {
    public static LogConfigurationMarshaller Instance;
    private static LogConfigurationMarshaller();
    public sealed virtual void Marshall(LogConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.LogConfigurationUnmarshaller : object {
    private static LogConfigurationUnmarshaller _instance;
    public static LogConfigurationUnmarshaller Instance { get; }
    private static LogConfigurationUnmarshaller();
    private sealed virtual override LogConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.LogConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LogConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static LogConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ManagedAgentUnmarshaller : object {
    private static ManagedAgentUnmarshaller _instance;
    public static ManagedAgentUnmarshaller Instance { get; }
    private static ManagedAgentUnmarshaller();
    private sealed virtual override ManagedAgent Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ManagedAgent,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ManagedAgent Unmarshall(JsonUnmarshallerContext context);
    public static ManagedAgentUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ManagedScalingMarshaller : object {
    public static ManagedScalingMarshaller Instance;
    private static ManagedScalingMarshaller();
    public sealed virtual void Marshall(ManagedScaling requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ManagedScalingUnmarshaller : object {
    private static ManagedScalingUnmarshaller _instance;
    public static ManagedScalingUnmarshaller Instance { get; }
    private static ManagedScalingUnmarshaller();
    private sealed virtual override ManagedScaling Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ManagedScaling,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ManagedScaling Unmarshall(JsonUnmarshallerContext context);
    public static ManagedScalingUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ManagedStorageConfigurationMarshaller : object {
    public static ManagedStorageConfigurationMarshaller Instance;
    private static ManagedStorageConfigurationMarshaller();
    public sealed virtual void Marshall(ManagedStorageConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ManagedStorageConfigurationUnmarshaller : object {
    private static ManagedStorageConfigurationUnmarshaller _instance;
    public static ManagedStorageConfigurationUnmarshaller Instance { get; }
    private static ManagedStorageConfigurationUnmarshaller();
    private sealed virtual override ManagedStorageConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ManagedStorageConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ManagedStorageConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ManagedStorageConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.MissingVersionExceptionUnmarshaller : object {
    private static MissingVersionExceptionUnmarshaller _instance;
    public static MissingVersionExceptionUnmarshaller Instance { get; }
    private static MissingVersionExceptionUnmarshaller();
    public sealed virtual MissingVersionException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual MissingVersionException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static MissingVersionExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.MountPointMarshaller : object {
    public static MountPointMarshaller Instance;
    private static MountPointMarshaller();
    public sealed virtual void Marshall(MountPoint requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.MountPointUnmarshaller : object {
    private static MountPointUnmarshaller _instance;
    public static MountPointUnmarshaller Instance { get; }
    private static MountPointUnmarshaller();
    private sealed virtual override MountPoint Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.MountPoint,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MountPoint Unmarshall(JsonUnmarshallerContext context);
    public static MountPointUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.NamespaceNotFoundExceptionUnmarshaller : object {
    private static NamespaceNotFoundExceptionUnmarshaller _instance;
    public static NamespaceNotFoundExceptionUnmarshaller Instance { get; }
    private static NamespaceNotFoundExceptionUnmarshaller();
    public sealed virtual NamespaceNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual NamespaceNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static NamespaceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.NetworkBindingUnmarshaller : object {
    private static NetworkBindingUnmarshaller _instance;
    public static NetworkBindingUnmarshaller Instance { get; }
    private static NetworkBindingUnmarshaller();
    private sealed virtual override NetworkBinding Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.NetworkBinding,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NetworkBinding Unmarshall(JsonUnmarshallerContext context);
    public static NetworkBindingUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.NetworkConfigurationMarshaller : object {
    public static NetworkConfigurationMarshaller Instance;
    private static NetworkConfigurationMarshaller();
    public sealed virtual void Marshall(NetworkConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.NetworkConfigurationUnmarshaller : object {
    private static NetworkConfigurationUnmarshaller _instance;
    public static NetworkConfigurationUnmarshaller Instance { get; }
    private static NetworkConfigurationUnmarshaller();
    private sealed virtual override NetworkConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.NetworkConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NetworkConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static NetworkConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.NetworkInterfaceUnmarshaller : object {
    private static NetworkInterfaceUnmarshaller _instance;
    public static NetworkInterfaceUnmarshaller Instance { get; }
    private static NetworkInterfaceUnmarshaller();
    private sealed virtual override NetworkInterface Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.NetworkInterface,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NetworkInterface Unmarshall(JsonUnmarshallerContext context);
    public static NetworkInterfaceUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.NoUpdateAvailableExceptionUnmarshaller : object {
    private static NoUpdateAvailableExceptionUnmarshaller _instance;
    public static NoUpdateAvailableExceptionUnmarshaller Instance { get; }
    private static NoUpdateAvailableExceptionUnmarshaller();
    public sealed virtual NoUpdateAvailableException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual NoUpdateAvailableException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoUpdateAvailableExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PlacementConstraintMarshaller : object {
    public static PlacementConstraintMarshaller Instance;
    private static PlacementConstraintMarshaller();
    public sealed virtual void Marshall(PlacementConstraint requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PlacementConstraintUnmarshaller : object {
    private static PlacementConstraintUnmarshaller _instance;
    public static PlacementConstraintUnmarshaller Instance { get; }
    private static PlacementConstraintUnmarshaller();
    private sealed virtual override PlacementConstraint Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.PlacementConstraint,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PlacementConstraint Unmarshall(JsonUnmarshallerContext context);
    public static PlacementConstraintUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PlacementStrategyMarshaller : object {
    public static PlacementStrategyMarshaller Instance;
    private static PlacementStrategyMarshaller();
    public sealed virtual void Marshall(PlacementStrategy requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PlacementStrategyUnmarshaller : object {
    private static PlacementStrategyUnmarshaller _instance;
    public static PlacementStrategyUnmarshaller Instance { get; }
    private static PlacementStrategyUnmarshaller();
    private sealed virtual override PlacementStrategy Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.PlacementStrategy,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PlacementStrategy Unmarshall(JsonUnmarshallerContext context);
    public static PlacementStrategyUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PlatformTaskDefinitionIncompatibilityExceptionUnmarshaller : object {
    private static PlatformTaskDefinitionIncompatibilityExceptionUnmarshaller _instance;
    public static PlatformTaskDefinitionIncompatibilityExceptionUnmarshaller Instance { get; }
    private static PlatformTaskDefinitionIncompatibilityExceptionUnmarshaller();
    public sealed virtual PlatformTaskDefinitionIncompatibilityException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual PlatformTaskDefinitionIncompatibilityException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static PlatformTaskDefinitionIncompatibilityExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PlatformUnknownExceptionUnmarshaller : object {
    private static PlatformUnknownExceptionUnmarshaller _instance;
    public static PlatformUnknownExceptionUnmarshaller Instance { get; }
    private static PlatformUnknownExceptionUnmarshaller();
    public sealed virtual PlatformUnknownException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual PlatformUnknownException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static PlatformUnknownExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PortMappingMarshaller : object {
    public static PortMappingMarshaller Instance;
    private static PortMappingMarshaller();
    public sealed virtual void Marshall(PortMapping requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PortMappingUnmarshaller : object {
    private static PortMappingUnmarshaller _instance;
    public static PortMappingUnmarshaller Instance { get; }
    private static PortMappingUnmarshaller();
    private sealed virtual override PortMapping Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.PortMapping,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PortMapping Unmarshall(JsonUnmarshallerContext context);
    public static PortMappingUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ProtectedTaskUnmarshaller : object {
    private static ProtectedTaskUnmarshaller _instance;
    public static ProtectedTaskUnmarshaller Instance { get; }
    private static ProtectedTaskUnmarshaller();
    private sealed virtual override ProtectedTask Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ProtectedTask,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ProtectedTask Unmarshall(JsonUnmarshallerContext context);
    public static ProtectedTaskUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ProxyConfigurationMarshaller : object {
    public static ProxyConfigurationMarshaller Instance;
    private static ProxyConfigurationMarshaller();
    public sealed virtual void Marshall(ProxyConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ProxyConfigurationUnmarshaller : object {
    private static ProxyConfigurationUnmarshaller _instance;
    public static ProxyConfigurationUnmarshaller Instance { get; }
    private static ProxyConfigurationUnmarshaller();
    private sealed virtual override ProxyConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ProxyConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ProxyConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ProxyConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PutAccountSettingDefaultRequestMarshaller : object {
    private static PutAccountSettingDefaultRequestMarshaller _instance;
    public static PutAccountSettingDefaultRequestMarshaller Instance { get; }
    private static PutAccountSettingDefaultRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutAccountSettingDefaultRequest publicRequest);
    internal static PutAccountSettingDefaultRequestMarshaller GetInstance();
    public static PutAccountSettingDefaultRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PutAccountSettingDefaultResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutAccountSettingDefaultResponseUnmarshaller _instance;
    public static PutAccountSettingDefaultResponseUnmarshaller Instance { get; }
    private static PutAccountSettingDefaultResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutAccountSettingDefaultResponseUnmarshaller GetInstance();
    public static PutAccountSettingDefaultResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PutAccountSettingRequestMarshaller : object {
    private static PutAccountSettingRequestMarshaller _instance;
    public static PutAccountSettingRequestMarshaller Instance { get; }
    private static PutAccountSettingRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutAccountSettingRequest publicRequest);
    internal static PutAccountSettingRequestMarshaller GetInstance();
    public static PutAccountSettingRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PutAccountSettingResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutAccountSettingResponseUnmarshaller _instance;
    public static PutAccountSettingResponseUnmarshaller Instance { get; }
    private static PutAccountSettingResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutAccountSettingResponseUnmarshaller GetInstance();
    public static PutAccountSettingResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PutAttributesRequestMarshaller : object {
    private static PutAttributesRequestMarshaller _instance;
    public static PutAttributesRequestMarshaller Instance { get; }
    private static PutAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutAttributesRequest publicRequest);
    internal static PutAttributesRequestMarshaller GetInstance();
    public static PutAttributesRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PutAttributesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutAttributesResponseUnmarshaller _instance;
    public static PutAttributesResponseUnmarshaller Instance { get; }
    private static PutAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutAttributesResponseUnmarshaller GetInstance();
    public static PutAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PutClusterCapacityProvidersRequestMarshaller : object {
    private static PutClusterCapacityProvidersRequestMarshaller _instance;
    public static PutClusterCapacityProvidersRequestMarshaller Instance { get; }
    private static PutClusterCapacityProvidersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutClusterCapacityProvidersRequest publicRequest);
    internal static PutClusterCapacityProvidersRequestMarshaller GetInstance();
    public static PutClusterCapacityProvidersRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.PutClusterCapacityProvidersResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutClusterCapacityProvidersResponseUnmarshaller _instance;
    public static PutClusterCapacityProvidersResponseUnmarshaller Instance { get; }
    private static PutClusterCapacityProvidersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutClusterCapacityProvidersResponseUnmarshaller GetInstance();
    public static PutClusterCapacityProvidersResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.RegisterTaskDefinitionRequestMarshaller : object {
    private static RegisterTaskDefinitionRequestMarshaller _instance;
    public static RegisterTaskDefinitionRequestMarshaller Instance { get; }
    private static RegisterTaskDefinitionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RegisterTaskDefinitionRequest publicRequest);
    internal static RegisterTaskDefinitionRequestMarshaller GetInstance();
    public static RegisterTaskDefinitionRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.RegisterTaskDefinitionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RegisterTaskDefinitionResponseUnmarshaller _instance;
    public static RegisterTaskDefinitionResponseUnmarshaller Instance { get; }
    private static RegisterTaskDefinitionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RegisterTaskDefinitionResponseUnmarshaller GetInstance();
    public static RegisterTaskDefinitionResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.RepositoryCredentialsMarshaller : object {
    public static RepositoryCredentialsMarshaller Instance;
    private static RepositoryCredentialsMarshaller();
    public sealed virtual void Marshall(RepositoryCredentials requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.RepositoryCredentialsUnmarshaller : object {
    private static RepositoryCredentialsUnmarshaller _instance;
    public static RepositoryCredentialsUnmarshaller Instance { get; }
    private static RepositoryCredentialsUnmarshaller();
    private sealed virtual override RepositoryCredentials Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.RepositoryCredentials,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RepositoryCredentials Unmarshall(JsonUnmarshallerContext context);
    public static RepositoryCredentialsUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ResourceInUseExceptionUnmarshaller : object {
    private static ResourceInUseExceptionUnmarshaller _instance;
    public static ResourceInUseExceptionUnmarshaller Instance { get; }
    private static ResourceInUseExceptionUnmarshaller();
    public sealed virtual ResourceInUseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceInUseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller : object {
    private static ResourceNotFoundExceptionUnmarshaller _instance;
    public static ResourceNotFoundExceptionUnmarshaller Instance { get; }
    private static ResourceNotFoundExceptionUnmarshaller();
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ResourceRequirementMarshaller : object {
    public static ResourceRequirementMarshaller Instance;
    private static ResourceRequirementMarshaller();
    public sealed virtual void Marshall(ResourceRequirement requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ResourceRequirementUnmarshaller : object {
    private static ResourceRequirementUnmarshaller _instance;
    public static ResourceRequirementUnmarshaller Instance { get; }
    private static ResourceRequirementUnmarshaller();
    private sealed virtual override ResourceRequirement Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ResourceRequirement,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourceRequirement Unmarshall(JsonUnmarshallerContext context);
    public static ResourceRequirementUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ResourceUnmarshaller : object {
    private static ResourceUnmarshaller _instance;
    public static ResourceUnmarshaller Instance { get; }
    private static ResourceUnmarshaller();
    private sealed virtual override Resource Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Resource,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Resource Unmarshall(JsonUnmarshallerContext context);
    public static ResourceUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.RunTaskRequestMarshaller : object {
    private static RunTaskRequestMarshaller _instance;
    public static RunTaskRequestMarshaller Instance { get; }
    private static RunTaskRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RunTaskRequest publicRequest);
    internal static RunTaskRequestMarshaller GetInstance();
    public static RunTaskRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.RunTaskResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RunTaskResponseUnmarshaller _instance;
    public static RunTaskResponseUnmarshaller Instance { get; }
    private static RunTaskResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RunTaskResponseUnmarshaller GetInstance();
    public static RunTaskResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.RuntimePlatformMarshaller : object {
    public static RuntimePlatformMarshaller Instance;
    private static RuntimePlatformMarshaller();
    public sealed virtual void Marshall(RuntimePlatform requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.RuntimePlatformUnmarshaller : object {
    private static RuntimePlatformUnmarshaller _instance;
    public static RuntimePlatformUnmarshaller Instance { get; }
    private static RuntimePlatformUnmarshaller();
    private sealed virtual override RuntimePlatform Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.RuntimePlatform,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RuntimePlatform Unmarshall(JsonUnmarshallerContext context);
    public static RuntimePlatformUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ScaleMarshaller : object {
    public static ScaleMarshaller Instance;
    private static ScaleMarshaller();
    public sealed virtual void Marshall(Scale requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ScaleUnmarshaller : object {
    private static ScaleUnmarshaller _instance;
    public static ScaleUnmarshaller Instance { get; }
    private static ScaleUnmarshaller();
    private sealed virtual override Scale Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Scale,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Scale Unmarshall(JsonUnmarshallerContext context);
    public static ScaleUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.SecretMarshaller : object {
    public static SecretMarshaller Instance;
    private static SecretMarshaller();
    public sealed virtual void Marshall(Secret requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.SecretUnmarshaller : object {
    private static SecretUnmarshaller _instance;
    public static SecretUnmarshaller Instance { get; }
    private static SecretUnmarshaller();
    private sealed virtual override Secret Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Secret,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Secret Unmarshall(JsonUnmarshallerContext context);
    public static SecretUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServerExceptionUnmarshaller : object {
    private static ServerExceptionUnmarshaller _instance;
    public static ServerExceptionUnmarshaller Instance { get; }
    private static ServerExceptionUnmarshaller();
    public sealed virtual ServerException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ServerException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServerExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectClientAliasMarshaller : object {
    public static ServiceConnectClientAliasMarshaller Instance;
    private static ServiceConnectClientAliasMarshaller();
    public sealed virtual void Marshall(ServiceConnectClientAlias requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectClientAliasUnmarshaller : object {
    private static ServiceConnectClientAliasUnmarshaller _instance;
    public static ServiceConnectClientAliasUnmarshaller Instance { get; }
    private static ServiceConnectClientAliasUnmarshaller();
    private sealed virtual override ServiceConnectClientAlias Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceConnectClientAlias,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceConnectClientAlias Unmarshall(JsonUnmarshallerContext context);
    public static ServiceConnectClientAliasUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectConfigurationMarshaller : object {
    public static ServiceConnectConfigurationMarshaller Instance;
    private static ServiceConnectConfigurationMarshaller();
    public sealed virtual void Marshall(ServiceConnectConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectConfigurationUnmarshaller : object {
    private static ServiceConnectConfigurationUnmarshaller _instance;
    public static ServiceConnectConfigurationUnmarshaller Instance { get; }
    private static ServiceConnectConfigurationUnmarshaller();
    private sealed virtual override ServiceConnectConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceConnectConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceConnectConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ServiceConnectConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectServiceMarshaller : object {
    public static ServiceConnectServiceMarshaller Instance;
    private static ServiceConnectServiceMarshaller();
    public sealed virtual void Marshall(ServiceConnectService requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectServiceResourceUnmarshaller : object {
    private static ServiceConnectServiceResourceUnmarshaller _instance;
    public static ServiceConnectServiceResourceUnmarshaller Instance { get; }
    private static ServiceConnectServiceResourceUnmarshaller();
    private sealed virtual override ServiceConnectServiceResource Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceConnectServiceResource,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceConnectServiceResource Unmarshall(JsonUnmarshallerContext context);
    public static ServiceConnectServiceResourceUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectServiceUnmarshaller : object {
    private static ServiceConnectServiceUnmarshaller _instance;
    public static ServiceConnectServiceUnmarshaller Instance { get; }
    private static ServiceConnectServiceUnmarshaller();
    private sealed virtual override ServiceConnectService Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceConnectService,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceConnectService Unmarshall(JsonUnmarshallerContext context);
    public static ServiceConnectServiceUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectTlsCertificateAuthorityMarshaller : object {
    public static ServiceConnectTlsCertificateAuthorityMarshaller Instance;
    private static ServiceConnectTlsCertificateAuthorityMarshaller();
    public sealed virtual void Marshall(ServiceConnectTlsCertificateAuthority requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectTlsCertificateAuthorityUnmarshaller : object {
    private static ServiceConnectTlsCertificateAuthorityUnmarshaller _instance;
    public static ServiceConnectTlsCertificateAuthorityUnmarshaller Instance { get; }
    private static ServiceConnectTlsCertificateAuthorityUnmarshaller();
    private sealed virtual override ServiceConnectTlsCertificateAuthority Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceConnectTlsCertificateAuthority,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceConnectTlsCertificateAuthority Unmarshall(JsonUnmarshallerContext context);
    public static ServiceConnectTlsCertificateAuthorityUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectTlsConfigurationMarshaller : object {
    public static ServiceConnectTlsConfigurationMarshaller Instance;
    private static ServiceConnectTlsConfigurationMarshaller();
    public sealed virtual void Marshall(ServiceConnectTlsConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceConnectTlsConfigurationUnmarshaller : object {
    private static ServiceConnectTlsConfigurationUnmarshaller _instance;
    public static ServiceConnectTlsConfigurationUnmarshaller Instance { get; }
    private static ServiceConnectTlsConfigurationUnmarshaller();
    private sealed virtual override ServiceConnectTlsConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceConnectTlsConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceConnectTlsConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ServiceConnectTlsConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceEventUnmarshaller : object {
    private static ServiceEventUnmarshaller _instance;
    public static ServiceEventUnmarshaller Instance { get; }
    private static ServiceEventUnmarshaller();
    private sealed virtual override ServiceEvent Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceEvent,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceEvent Unmarshall(JsonUnmarshallerContext context);
    public static ServiceEventUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceManagedEBSVolumeConfigurationMarshaller : object {
    public static ServiceManagedEBSVolumeConfigurationMarshaller Instance;
    private static ServiceManagedEBSVolumeConfigurationMarshaller();
    public sealed virtual void Marshall(ServiceManagedEBSVolumeConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceManagedEBSVolumeConfigurationUnmarshaller : object {
    private static ServiceManagedEBSVolumeConfigurationUnmarshaller _instance;
    public static ServiceManagedEBSVolumeConfigurationUnmarshaller Instance { get; }
    private static ServiceManagedEBSVolumeConfigurationUnmarshaller();
    private sealed virtual override ServiceManagedEBSVolumeConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceManagedEBSVolumeConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceManagedEBSVolumeConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ServiceManagedEBSVolumeConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceNotActiveExceptionUnmarshaller : object {
    private static ServiceNotActiveExceptionUnmarshaller _instance;
    public static ServiceNotActiveExceptionUnmarshaller Instance { get; }
    private static ServiceNotActiveExceptionUnmarshaller();
    public sealed virtual ServiceNotActiveException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ServiceNotActiveException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServiceNotActiveExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceNotFoundExceptionUnmarshaller : object {
    private static ServiceNotFoundExceptionUnmarshaller _instance;
    public static ServiceNotFoundExceptionUnmarshaller Instance { get; }
    private static ServiceNotFoundExceptionUnmarshaller();
    public sealed virtual ServiceNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ServiceNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServiceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceRegistryMarshaller : object {
    public static ServiceRegistryMarshaller Instance;
    private static ServiceRegistryMarshaller();
    public sealed virtual void Marshall(ServiceRegistry requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceRegistryUnmarshaller : object {
    private static ServiceRegistryUnmarshaller _instance;
    public static ServiceRegistryUnmarshaller Instance { get; }
    private static ServiceRegistryUnmarshaller();
    private sealed virtual override ServiceRegistry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceRegistry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceRegistry Unmarshall(JsonUnmarshallerContext context);
    public static ServiceRegistryUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceUnmarshaller : object {
    private static ServiceUnmarshaller _instance;
    public static ServiceUnmarshaller Instance { get; }
    private static ServiceUnmarshaller();
    private sealed virtual override Service Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Service,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Service Unmarshall(JsonUnmarshallerContext context);
    public static ServiceUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceVolumeConfigurationMarshaller : object {
    public static ServiceVolumeConfigurationMarshaller Instance;
    private static ServiceVolumeConfigurationMarshaller();
    public sealed virtual void Marshall(ServiceVolumeConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.ServiceVolumeConfigurationUnmarshaller : object {
    private static ServiceVolumeConfigurationUnmarshaller _instance;
    public static ServiceVolumeConfigurationUnmarshaller Instance { get; }
    private static ServiceVolumeConfigurationUnmarshaller();
    private sealed virtual override ServiceVolumeConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.ServiceVolumeConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceVolumeConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ServiceVolumeConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.SessionUnmarshaller : object {
    private static SessionUnmarshaller _instance;
    public static SessionUnmarshaller Instance { get; }
    private static SessionUnmarshaller();
    private sealed virtual override Session Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Session,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Session Unmarshall(JsonUnmarshallerContext context);
    public static SessionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.SettingUnmarshaller : object {
    private static SettingUnmarshaller _instance;
    public static SettingUnmarshaller Instance { get; }
    private static SettingUnmarshaller();
    private sealed virtual override Setting Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Setting,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Setting Unmarshall(JsonUnmarshallerContext context);
    public static SettingUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.StartTaskRequestMarshaller : object {
    private static StartTaskRequestMarshaller _instance;
    public static StartTaskRequestMarshaller Instance { get; }
    private static StartTaskRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StartTaskRequest publicRequest);
    internal static StartTaskRequestMarshaller GetInstance();
    public static StartTaskRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.StartTaskResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StartTaskResponseUnmarshaller _instance;
    public static StartTaskResponseUnmarshaller Instance { get; }
    private static StartTaskResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StartTaskResponseUnmarshaller GetInstance();
    public static StartTaskResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.StopTaskRequestMarshaller : object {
    private static StopTaskRequestMarshaller _instance;
    public static StopTaskRequestMarshaller Instance { get; }
    private static StopTaskRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StopTaskRequest publicRequest);
    internal static StopTaskRequestMarshaller GetInstance();
    public static StopTaskRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.StopTaskResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StopTaskResponseUnmarshaller _instance;
    public static StopTaskResponseUnmarshaller Instance { get; }
    private static StopTaskResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StopTaskResponseUnmarshaller GetInstance();
    public static StopTaskResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.SubmitAttachmentStateChangesRequestMarshaller : object {
    private static SubmitAttachmentStateChangesRequestMarshaller _instance;
    public static SubmitAttachmentStateChangesRequestMarshaller Instance { get; }
    private static SubmitAttachmentStateChangesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SubmitAttachmentStateChangesRequest publicRequest);
    internal static SubmitAttachmentStateChangesRequestMarshaller GetInstance();
    public static SubmitAttachmentStateChangesRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.SubmitAttachmentStateChangesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static SubmitAttachmentStateChangesResponseUnmarshaller _instance;
    public static SubmitAttachmentStateChangesResponseUnmarshaller Instance { get; }
    private static SubmitAttachmentStateChangesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SubmitAttachmentStateChangesResponseUnmarshaller GetInstance();
    public static SubmitAttachmentStateChangesResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.SystemControlMarshaller : object {
    public static SystemControlMarshaller Instance;
    private static SystemControlMarshaller();
    public sealed virtual void Marshall(SystemControl requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.SystemControlUnmarshaller : object {
    private static SystemControlUnmarshaller _instance;
    public static SystemControlUnmarshaller Instance { get; }
    private static SystemControlUnmarshaller();
    private sealed virtual override SystemControl Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.SystemControl,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SystemControl Unmarshall(JsonUnmarshallerContext context);
    public static SystemControlUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TagMarshaller : object {
    public static TagMarshaller Instance;
    private static TagMarshaller();
    public sealed virtual void Marshall(Tag requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller : object {
    private static TagResourceRequestMarshaller _instance;
    public static TagResourceRequestMarshaller Instance { get; }
    private static TagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagResourceRequest publicRequest);
    internal static TagResourceRequestMarshaller GetInstance();
    public static TagResourceRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TagResourceResponseUnmarshaller _instance;
    public static TagResourceResponseUnmarshaller Instance { get; }
    private static TagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagResourceResponseUnmarshaller GetInstance();
    public static TagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    private sealed virtual override Tag Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Tag,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TargetNotConnectedExceptionUnmarshaller : object {
    private static TargetNotConnectedExceptionUnmarshaller _instance;
    public static TargetNotConnectedExceptionUnmarshaller Instance { get; }
    private static TargetNotConnectedExceptionUnmarshaller();
    public sealed virtual TargetNotConnectedException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual TargetNotConnectedException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static TargetNotConnectedExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TargetNotFoundExceptionUnmarshaller : object {
    private static TargetNotFoundExceptionUnmarshaller _instance;
    public static TargetNotFoundExceptionUnmarshaller Instance { get; }
    private static TargetNotFoundExceptionUnmarshaller();
    public sealed virtual TargetNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual TargetNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static TargetNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskDefinitionPlacementConstraintMarshaller : object {
    public static TaskDefinitionPlacementConstraintMarshaller Instance;
    private static TaskDefinitionPlacementConstraintMarshaller();
    public sealed virtual void Marshall(TaskDefinitionPlacementConstraint requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskDefinitionPlacementConstraintUnmarshaller : object {
    private static TaskDefinitionPlacementConstraintUnmarshaller _instance;
    public static TaskDefinitionPlacementConstraintUnmarshaller Instance { get; }
    private static TaskDefinitionPlacementConstraintUnmarshaller();
    private sealed virtual override TaskDefinitionPlacementConstraint Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.TaskDefinitionPlacementConstraint,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TaskDefinitionPlacementConstraint Unmarshall(JsonUnmarshallerContext context);
    public static TaskDefinitionPlacementConstraintUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskDefinitionUnmarshaller : object {
    private static TaskDefinitionUnmarshaller _instance;
    public static TaskDefinitionUnmarshaller Instance { get; }
    private static TaskDefinitionUnmarshaller();
    private sealed virtual override TaskDefinition Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.TaskDefinition,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TaskDefinition Unmarshall(JsonUnmarshallerContext context);
    public static TaskDefinitionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskEphemeralStorageUnmarshaller : object {
    private static TaskEphemeralStorageUnmarshaller _instance;
    public static TaskEphemeralStorageUnmarshaller Instance { get; }
    private static TaskEphemeralStorageUnmarshaller();
    private sealed virtual override TaskEphemeralStorage Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.TaskEphemeralStorage,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TaskEphemeralStorage Unmarshall(JsonUnmarshallerContext context);
    public static TaskEphemeralStorageUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskManagedEBSVolumeConfigurationMarshaller : object {
    public static TaskManagedEBSVolumeConfigurationMarshaller Instance;
    private static TaskManagedEBSVolumeConfigurationMarshaller();
    public sealed virtual void Marshall(TaskManagedEBSVolumeConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskManagedEBSVolumeTerminationPolicyMarshaller : object {
    public static TaskManagedEBSVolumeTerminationPolicyMarshaller Instance;
    private static TaskManagedEBSVolumeTerminationPolicyMarshaller();
    public sealed virtual void Marshall(TaskManagedEBSVolumeTerminationPolicy requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskOverrideMarshaller : object {
    public static TaskOverrideMarshaller Instance;
    private static TaskOverrideMarshaller();
    public sealed virtual void Marshall(TaskOverride requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskOverrideUnmarshaller : object {
    private static TaskOverrideUnmarshaller _instance;
    public static TaskOverrideUnmarshaller Instance { get; }
    private static TaskOverrideUnmarshaller();
    private sealed virtual override TaskOverride Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.TaskOverride,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TaskOverride Unmarshall(JsonUnmarshallerContext context);
    public static TaskOverrideUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskSetNotFoundExceptionUnmarshaller : object {
    private static TaskSetNotFoundExceptionUnmarshaller _instance;
    public static TaskSetNotFoundExceptionUnmarshaller Instance { get; }
    private static TaskSetNotFoundExceptionUnmarshaller();
    public sealed virtual TaskSetNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual TaskSetNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static TaskSetNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskSetUnmarshaller : object {
    private static TaskSetUnmarshaller _instance;
    public static TaskSetUnmarshaller Instance { get; }
    private static TaskSetUnmarshaller();
    private sealed virtual override TaskSet Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.TaskSet,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TaskSet Unmarshall(JsonUnmarshallerContext context);
    public static TaskSetUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskUnmarshaller : object {
    private static TaskUnmarshaller _instance;
    public static TaskUnmarshaller Instance { get; }
    private static TaskUnmarshaller();
    private sealed virtual override Task Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Task,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Task Unmarshall(JsonUnmarshallerContext context);
    public static TaskUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TaskVolumeConfigurationMarshaller : object {
    public static TaskVolumeConfigurationMarshaller Instance;
    private static TaskVolumeConfigurationMarshaller();
    public sealed virtual void Marshall(TaskVolumeConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TimeoutConfigurationMarshaller : object {
    public static TimeoutConfigurationMarshaller Instance;
    private static TimeoutConfigurationMarshaller();
    public sealed virtual void Marshall(TimeoutConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TimeoutConfigurationUnmarshaller : object {
    private static TimeoutConfigurationUnmarshaller _instance;
    public static TimeoutConfigurationUnmarshaller Instance { get; }
    private static TimeoutConfigurationUnmarshaller();
    private sealed virtual override TimeoutConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.TimeoutConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TimeoutConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static TimeoutConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TmpfsMarshaller : object {
    public static TmpfsMarshaller Instance;
    private static TmpfsMarshaller();
    public sealed virtual void Marshall(Tmpfs requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.TmpfsUnmarshaller : object {
    private static TmpfsUnmarshaller _instance;
    public static TmpfsUnmarshaller Instance { get; }
    private static TmpfsUnmarshaller();
    private sealed virtual override Tmpfs Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Tmpfs,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tmpfs Unmarshall(JsonUnmarshallerContext context);
    public static TmpfsUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UlimitMarshaller : object {
    public static UlimitMarshaller Instance;
    private static UlimitMarshaller();
    public sealed virtual void Marshall(Ulimit requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UlimitUnmarshaller : object {
    private static UlimitUnmarshaller _instance;
    public static UlimitUnmarshaller Instance { get; }
    private static UlimitUnmarshaller();
    private sealed virtual override Ulimit Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Ulimit,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Ulimit Unmarshall(JsonUnmarshallerContext context);
    public static UlimitUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UnsupportedFeatureExceptionUnmarshaller : object {
    private static UnsupportedFeatureExceptionUnmarshaller _instance;
    public static UnsupportedFeatureExceptionUnmarshaller Instance { get; }
    private static UnsupportedFeatureExceptionUnmarshaller();
    public sealed virtual UnsupportedFeatureException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnsupportedFeatureException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnsupportedFeatureExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller : object {
    private static UntagResourceRequestMarshaller _instance;
    public static UntagResourceRequestMarshaller Instance { get; }
    private static UntagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagResourceRequest publicRequest);
    internal static UntagResourceRequestMarshaller GetInstance();
    public static UntagResourceRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UntagResourceResponseUnmarshaller _instance;
    public static UntagResourceResponseUnmarshaller Instance { get; }
    private static UntagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagResourceResponseUnmarshaller GetInstance();
    public static UntagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateCapacityProviderRequestMarshaller : object {
    private static UpdateCapacityProviderRequestMarshaller _instance;
    public static UpdateCapacityProviderRequestMarshaller Instance { get; }
    private static UpdateCapacityProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateCapacityProviderRequest publicRequest);
    internal static UpdateCapacityProviderRequestMarshaller GetInstance();
    public static UpdateCapacityProviderRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateCapacityProviderResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateCapacityProviderResponseUnmarshaller _instance;
    public static UpdateCapacityProviderResponseUnmarshaller Instance { get; }
    private static UpdateCapacityProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateCapacityProviderResponseUnmarshaller GetInstance();
    public static UpdateCapacityProviderResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateClusterRequestMarshaller : object {
    private static UpdateClusterRequestMarshaller _instance;
    public static UpdateClusterRequestMarshaller Instance { get; }
    private static UpdateClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateClusterRequest publicRequest);
    internal static UpdateClusterRequestMarshaller GetInstance();
    public static UpdateClusterRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateClusterResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateClusterResponseUnmarshaller _instance;
    public static UpdateClusterResponseUnmarshaller Instance { get; }
    private static UpdateClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateClusterResponseUnmarshaller GetInstance();
    public static UpdateClusterResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateClusterSettingsRequestMarshaller : object {
    private static UpdateClusterSettingsRequestMarshaller _instance;
    public static UpdateClusterSettingsRequestMarshaller Instance { get; }
    private static UpdateClusterSettingsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateClusterSettingsRequest publicRequest);
    internal static UpdateClusterSettingsRequestMarshaller GetInstance();
    public static UpdateClusterSettingsRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateClusterSettingsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateClusterSettingsResponseUnmarshaller _instance;
    public static UpdateClusterSettingsResponseUnmarshaller Instance { get; }
    private static UpdateClusterSettingsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateClusterSettingsResponseUnmarshaller GetInstance();
    public static UpdateClusterSettingsResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateContainerAgentRequestMarshaller : object {
    private static UpdateContainerAgentRequestMarshaller _instance;
    public static UpdateContainerAgentRequestMarshaller Instance { get; }
    private static UpdateContainerAgentRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateContainerAgentRequest publicRequest);
    internal static UpdateContainerAgentRequestMarshaller GetInstance();
    public static UpdateContainerAgentRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateContainerAgentResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateContainerAgentResponseUnmarshaller _instance;
    public static UpdateContainerAgentResponseUnmarshaller Instance { get; }
    private static UpdateContainerAgentResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateContainerAgentResponseUnmarshaller GetInstance();
    public static UpdateContainerAgentResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateContainerInstancesStateRequestMarshaller : object {
    private static UpdateContainerInstancesStateRequestMarshaller _instance;
    public static UpdateContainerInstancesStateRequestMarshaller Instance { get; }
    private static UpdateContainerInstancesStateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateContainerInstancesStateRequest publicRequest);
    internal static UpdateContainerInstancesStateRequestMarshaller GetInstance();
    public static UpdateContainerInstancesStateRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateContainerInstancesStateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateContainerInstancesStateResponseUnmarshaller _instance;
    public static UpdateContainerInstancesStateResponseUnmarshaller Instance { get; }
    private static UpdateContainerInstancesStateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateContainerInstancesStateResponseUnmarshaller GetInstance();
    public static UpdateContainerInstancesStateResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateInProgressExceptionUnmarshaller : object {
    private static UpdateInProgressExceptionUnmarshaller _instance;
    public static UpdateInProgressExceptionUnmarshaller Instance { get; }
    private static UpdateInProgressExceptionUnmarshaller();
    public sealed virtual UpdateInProgressException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UpdateInProgressException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UpdateInProgressExceptionUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateServicePrimaryTaskSetRequestMarshaller : object {
    private static UpdateServicePrimaryTaskSetRequestMarshaller _instance;
    public static UpdateServicePrimaryTaskSetRequestMarshaller Instance { get; }
    private static UpdateServicePrimaryTaskSetRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateServicePrimaryTaskSetRequest publicRequest);
    internal static UpdateServicePrimaryTaskSetRequestMarshaller GetInstance();
    public static UpdateServicePrimaryTaskSetRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateServicePrimaryTaskSetResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateServicePrimaryTaskSetResponseUnmarshaller _instance;
    public static UpdateServicePrimaryTaskSetResponseUnmarshaller Instance { get; }
    private static UpdateServicePrimaryTaskSetResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateServicePrimaryTaskSetResponseUnmarshaller GetInstance();
    public static UpdateServicePrimaryTaskSetResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateServiceRequestMarshaller : object {
    private static UpdateServiceRequestMarshaller _instance;
    public static UpdateServiceRequestMarshaller Instance { get; }
    private static UpdateServiceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateServiceRequest publicRequest);
    internal static UpdateServiceRequestMarshaller GetInstance();
    public static UpdateServiceRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateServiceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateServiceResponseUnmarshaller _instance;
    public static UpdateServiceResponseUnmarshaller Instance { get; }
    private static UpdateServiceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateServiceResponseUnmarshaller GetInstance();
    public static UpdateServiceResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateTaskProtectionRequestMarshaller : object {
    private static UpdateTaskProtectionRequestMarshaller _instance;
    public static UpdateTaskProtectionRequestMarshaller Instance { get; }
    private static UpdateTaskProtectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateTaskProtectionRequest publicRequest);
    internal static UpdateTaskProtectionRequestMarshaller GetInstance();
    public static UpdateTaskProtectionRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateTaskProtectionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateTaskProtectionResponseUnmarshaller _instance;
    public static UpdateTaskProtectionResponseUnmarshaller Instance { get; }
    private static UpdateTaskProtectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateTaskProtectionResponseUnmarshaller GetInstance();
    public static UpdateTaskProtectionResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateTaskSetRequestMarshaller : object {
    private static UpdateTaskSetRequestMarshaller _instance;
    public static UpdateTaskSetRequestMarshaller Instance { get; }
    private static UpdateTaskSetRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateTaskSetRequest publicRequest);
    internal static UpdateTaskSetRequestMarshaller GetInstance();
    public static UpdateTaskSetRequestMarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.UpdateTaskSetResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateTaskSetResponseUnmarshaller _instance;
    public static UpdateTaskSetResponseUnmarshaller Instance { get; }
    private static UpdateTaskSetResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateTaskSetResponseUnmarshaller GetInstance();
    public static UpdateTaskSetResponseUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.VersionInfoUnmarshaller : object {
    private static VersionInfoUnmarshaller _instance;
    public static VersionInfoUnmarshaller Instance { get; }
    private static VersionInfoUnmarshaller();
    private sealed virtual override VersionInfo Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.VersionInfo,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VersionInfo Unmarshall(JsonUnmarshallerContext context);
    public static VersionInfoUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.VolumeFromMarshaller : object {
    public static VolumeFromMarshaller Instance;
    private static VolumeFromMarshaller();
    public sealed virtual void Marshall(VolumeFrom requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.VolumeFromUnmarshaller : object {
    private static VolumeFromUnmarshaller _instance;
    public static VolumeFromUnmarshaller Instance { get; }
    private static VolumeFromUnmarshaller();
    private sealed virtual override VolumeFrom Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.VolumeFrom,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VolumeFrom Unmarshall(JsonUnmarshallerContext context);
    public static VolumeFromUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.VolumeMarshaller : object {
    public static VolumeMarshaller Instance;
    private static VolumeMarshaller();
    public sealed virtual void Marshall(Volume requestObject, JsonMarshallerContext context);
}
public class Amazon.ECS.Model.Internal.MarshallTransformations.VolumeUnmarshaller : object {
    private static VolumeUnmarshaller _instance;
    public static VolumeUnmarshaller Instance { get; }
    private static VolumeUnmarshaller();
    private sealed virtual override Volume Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECS.Model.Volume,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Volume Unmarshall(JsonUnmarshallerContext context);
    public static VolumeUnmarshaller get_Instance();
}
public class Amazon.ECS.Model.InvalidParameterException : AmazonECSException {
    public InvalidParameterException(string message);
    public InvalidParameterException(string message, Exception innerException);
    public InvalidParameterException(Exception innerException);
    public InvalidParameterException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidParameterException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.KernelCapabilities : object {
    private List`1<string> _add;
    private List`1<string> _drop;
    public List`1<string> Add { get; public set; }
    public List`1<string> Drop { get; public set; }
    public List`1<string> get_Add();
    public void set_Add(List`1<string> value);
    internal bool IsSetAdd();
    public List`1<string> get_Drop();
    public void set_Drop(List`1<string> value);
    internal bool IsSetDrop();
}
public class Amazon.ECS.Model.KeyValuePair : object {
    private string _name;
    private string _value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.LimitExceededException : AmazonECSException {
    public LimitExceededException(string message);
    public LimitExceededException(string message, Exception innerException);
    public LimitExceededException(Exception innerException);
    public LimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.LinuxParameters : object {
    private KernelCapabilities _capabilities;
    private List`1<Device> _devices;
    private Nullable`1<bool> _initProcessEnabled;
    private Nullable`1<int> _maxSwap;
    private Nullable`1<int> _sharedMemorySize;
    private Nullable`1<int> _swappiness;
    private List`1<Tmpfs> _tmpfs;
    public KernelCapabilities Capabilities { get; public set; }
    public List`1<Device> Devices { get; public set; }
    public Nullable`1<bool> InitProcessEnabled { get; public set; }
    public Nullable`1<int> MaxSwap { get; public set; }
    public Nullable`1<int> SharedMemorySize { get; public set; }
    public Nullable`1<int> Swappiness { get; public set; }
    public List`1<Tmpfs> Tmpfs { get; public set; }
    public KernelCapabilities get_Capabilities();
    public void set_Capabilities(KernelCapabilities value);
    internal bool IsSetCapabilities();
    public List`1<Device> get_Devices();
    public void set_Devices(List`1<Device> value);
    internal bool IsSetDevices();
    public Nullable`1<bool> get_InitProcessEnabled();
    public void set_InitProcessEnabled(Nullable`1<bool> value);
    internal bool IsSetInitProcessEnabled();
    public Nullable`1<int> get_MaxSwap();
    public void set_MaxSwap(Nullable`1<int> value);
    internal bool IsSetMaxSwap();
    public Nullable`1<int> get_SharedMemorySize();
    public void set_SharedMemorySize(Nullable`1<int> value);
    internal bool IsSetSharedMemorySize();
    public Nullable`1<int> get_Swappiness();
    public void set_Swappiness(Nullable`1<int> value);
    internal bool IsSetSwappiness();
    public List`1<Tmpfs> get_Tmpfs();
    public void set_Tmpfs(List`1<Tmpfs> value);
    internal bool IsSetTmpfs();
}
internal class Amazon.ECS.Model.ListAccountSettingsPaginator : object {
    private IAmazonECS _client;
    private ListAccountSettingsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAccountSettingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Setting> Settings { get; }
    internal ListAccountSettingsPaginator(IAmazonECS client, ListAccountSettingsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAccountSettingsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Setting> get_Settings();
    [AsyncIteratorStateMachineAttribute("Amazon.ECS.Model.ListAccountSettingsPaginator/<Amazon-Runtime-IPaginator<Amazon-ECS-Model-ListAccountSettingsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAccountSettingsResponse> Amazon.Runtime.IPaginator<Amazon.ECS.Model.ListAccountSettingsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECS.Model.ListAccountSettingsRequest : AmazonECSRequest {
    private Nullable`1<bool> _effectiveSettings;
    private Nullable`1<int> _maxResults;
    private SettingName _name;
    private string _nextToken;
    private string _principalArn;
    private string _value;
    public Nullable`1<bool> EffectiveSettings { get; public set; }
    public Nullable`1<int> MaxResults { get; public set; }
    public SettingName Name { get; public set; }
    public string NextToken { get; public set; }
    public string PrincipalArn { get; public set; }
    public string Value { get; public set; }
    public Nullable`1<bool> get_EffectiveSettings();
    public void set_EffectiveSettings(Nullable`1<bool> value);
    internal bool IsSetEffectiveSettings();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public SettingName get_Name();
    public void set_Name(SettingName value);
    internal bool IsSetName();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.ListAccountSettingsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<Setting> _settings;
    public string NextToken { get; public set; }
    public List`1<Setting> Settings { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<Setting> get_Settings();
    public void set_Settings(List`1<Setting> value);
    internal bool IsSetSettings();
}
internal class Amazon.ECS.Model.ListAttributesPaginator : object {
    private IAmazonECS _client;
    private ListAttributesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAttributesResponse> Responses { get; }
    public IPaginatedEnumerable`1<Attribute> Attributes { get; }
    internal ListAttributesPaginator(IAmazonECS client, ListAttributesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAttributesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Attribute> get_Attributes();
    [AsyncIteratorStateMachineAttribute("Amazon.ECS.Model.ListAttributesPaginator/<Amazon-Runtime-IPaginator<Amazon-ECS-Model-ListAttributesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAttributesResponse> Amazon.Runtime.IPaginator<Amazon.ECS.Model.ListAttributesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECS.Model.ListAttributesRequest : AmazonECSRequest {
    private string _attributeName;
    private string _attributeValue;
    private string _cluster;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private TargetType _targetType;
    public string AttributeName { get; public set; }
    public string AttributeValue { get; public set; }
    public string Cluster { get; public set; }
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public TargetType TargetType { get; public set; }
    public string get_AttributeName();
    public void set_AttributeName(string value);
    internal bool IsSetAttributeName();
    public string get_AttributeValue();
    public void set_AttributeValue(string value);
    internal bool IsSetAttributeValue();
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public TargetType get_TargetType();
    public void set_TargetType(TargetType value);
    internal bool IsSetTargetType();
}
public class Amazon.ECS.Model.ListAttributesResponse : AmazonWebServiceResponse {
    private List`1<Attribute> _attributes;
    private string _nextToken;
    public List`1<Attribute> Attributes { get; public set; }
    public string NextToken { get; public set; }
    public List`1<Attribute> get_Attributes();
    public void set_Attributes(List`1<Attribute> value);
    internal bool IsSetAttributes();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.ECS.Model.ListClustersPaginator : object {
    private IAmazonECS _client;
    private ListClustersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListClustersResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> ClusterArns { get; }
    internal ListClustersPaginator(IAmazonECS client, ListClustersRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListClustersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_ClusterArns();
    [AsyncIteratorStateMachineAttribute("Amazon.ECS.Model.ListClustersPaginator/<Amazon-Runtime-IPaginator<Amazon-ECS-Model-ListClustersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListClustersResponse> Amazon.Runtime.IPaginator<Amazon.ECS.Model.ListClustersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECS.Model.ListClustersRequest : AmazonECSRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.ECS.Model.ListClustersResponse : AmazonWebServiceResponse {
    private List`1<string> _clusterArns;
    private string _nextToken;
    public List`1<string> ClusterArns { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_ClusterArns();
    public void set_ClusterArns(List`1<string> value);
    internal bool IsSetClusterArns();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.ECS.Model.ListContainerInstancesPaginator : object {
    private IAmazonECS _client;
    private ListContainerInstancesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListContainerInstancesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> ContainerInstanceArns { get; }
    internal ListContainerInstancesPaginator(IAmazonECS client, ListContainerInstancesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListContainerInstancesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_ContainerInstanceArns();
    [AsyncIteratorStateMachineAttribute("Amazon.ECS.Model.ListContainerInstancesPaginator/<Amazon-Runtime-IPaginator<Amazon-ECS-Model-ListContainerInstancesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListContainerInstancesResponse> Amazon.Runtime.IPaginator<Amazon.ECS.Model.ListContainerInstancesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECS.Model.ListContainerInstancesRequest : AmazonECSRequest {
    private string _cluster;
    private string _filter;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private ContainerInstanceStatus _status;
    public string Cluster { get; public set; }
    public string Filter { get; public set; }
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public ContainerInstanceStatus Status { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public string get_Filter();
    public void set_Filter(string value);
    internal bool IsSetFilter();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public ContainerInstanceStatus get_Status();
    public void set_Status(ContainerInstanceStatus value);
    internal bool IsSetStatus();
}
public class Amazon.ECS.Model.ListContainerInstancesResponse : AmazonWebServiceResponse {
    private List`1<string> _containerInstanceArns;
    private string _nextToken;
    public List`1<string> ContainerInstanceArns { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_ContainerInstanceArns();
    public void set_ContainerInstanceArns(List`1<string> value);
    internal bool IsSetContainerInstanceArns();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.ECS.Model.ListServicesByNamespacePaginator : object {
    private IAmazonECS _client;
    private ListServicesByNamespaceRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListServicesByNamespaceResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> ServiceArns { get; }
    internal ListServicesByNamespacePaginator(IAmazonECS client, ListServicesByNamespaceRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListServicesByNamespaceResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_ServiceArns();
    [AsyncIteratorStateMachineAttribute("Amazon.ECS.Model.ListServicesByNamespacePaginator/<Amazon-Runtime-IPaginator<Amazon-ECS-Model-ListServicesByNamespaceResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListServicesByNamespaceResponse> Amazon.Runtime.IPaginator<Amazon.ECS.Model.ListServicesByNamespaceResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECS.Model.ListServicesByNamespaceRequest : AmazonECSRequest {
    private Nullable`1<int> _maxResults;
    private string _awsNamespace;
    private string _nextToken;
    public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string Namespace { get; public set; }
    public string NextToken { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.ECS.Model.ListServicesByNamespaceResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<string> _serviceArns;
    public string NextToken { get; public set; }
    public List`1<string> ServiceArns { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_ServiceArns();
    public void set_ServiceArns(List`1<string> value);
    internal bool IsSetServiceArns();
}
internal class Amazon.ECS.Model.ListServicesPaginator : object {
    private IAmazonECS _client;
    private ListServicesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListServicesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> ServiceArns { get; }
    internal ListServicesPaginator(IAmazonECS client, ListServicesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListServicesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_ServiceArns();
    [AsyncIteratorStateMachineAttribute("Amazon.ECS.Model.ListServicesPaginator/<Amazon-Runtime-IPaginator<Amazon-ECS-Model-ListServicesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListServicesResponse> Amazon.Runtime.IPaginator<Amazon.ECS.Model.ListServicesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECS.Model.ListServicesRequest : AmazonECSRequest {
    private string _cluster;
    private LaunchType _launchType;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private SchedulingStrategy _schedulingStrategy;
    public string Cluster { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public SchedulingStrategy SchedulingStrategy { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public SchedulingStrategy get_SchedulingStrategy();
    public void set_SchedulingStrategy(SchedulingStrategy value);
    internal bool IsSetSchedulingStrategy();
}
public class Amazon.ECS.Model.ListServicesResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<string> _serviceArns;
    public string NextToken { get; public set; }
    public List`1<string> ServiceArns { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_ServiceArns();
    public void set_ServiceArns(List`1<string> value);
    internal bool IsSetServiceArns();
}
public class Amazon.ECS.Model.ListTagsForResourceRequest : AmazonECSRequest {
    private string _resourceArn;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.ECS.Model.ListTagsForResourceResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
internal class Amazon.ECS.Model.ListTaskDefinitionFamiliesPaginator : object {
    private IAmazonECS _client;
    private ListTaskDefinitionFamiliesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListTaskDefinitionFamiliesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> Families { get; }
    internal ListTaskDefinitionFamiliesPaginator(IAmazonECS client, ListTaskDefinitionFamiliesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListTaskDefinitionFamiliesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_Families();
    [AsyncIteratorStateMachineAttribute("Amazon.ECS.Model.ListTaskDefinitionFamiliesPaginator/<Amazon-Runtime-IPaginator<Amazon-ECS-Model-ListTaskDefinitionFamiliesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListTaskDefinitionFamiliesResponse> Amazon.Runtime.IPaginator<Amazon.ECS.Model.ListTaskDefinitionFamiliesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECS.Model.ListTaskDefinitionFamiliesRequest : AmazonECSRequest {
    private string _familyPrefix;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private TaskDefinitionFamilyStatus _status;
    public string FamilyPrefix { get; public set; }
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public TaskDefinitionFamilyStatus Status { get; public set; }
    public string get_FamilyPrefix();
    public void set_FamilyPrefix(string value);
    internal bool IsSetFamilyPrefix();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public TaskDefinitionFamilyStatus get_Status();
    public void set_Status(TaskDefinitionFamilyStatus value);
    internal bool IsSetStatus();
}
public class Amazon.ECS.Model.ListTaskDefinitionFamiliesResponse : AmazonWebServiceResponse {
    private List`1<string> _families;
    private string _nextToken;
    public List`1<string> Families { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_Families();
    public void set_Families(List`1<string> value);
    internal bool IsSetFamilies();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.ECS.Model.ListTaskDefinitionsPaginator : object {
    private IAmazonECS _client;
    private ListTaskDefinitionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListTaskDefinitionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> TaskDefinitionArns { get; }
    internal ListTaskDefinitionsPaginator(IAmazonECS client, ListTaskDefinitionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListTaskDefinitionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_TaskDefinitionArns();
    [AsyncIteratorStateMachineAttribute("Amazon.ECS.Model.ListTaskDefinitionsPaginator/<Amazon-Runtime-IPaginator<Amazon-ECS-Model-ListTaskDefinitionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListTaskDefinitionsResponse> Amazon.Runtime.IPaginator<Amazon.ECS.Model.ListTaskDefinitionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECS.Model.ListTaskDefinitionsRequest : AmazonECSRequest {
    private string _familyPrefix;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private SortOrder _sort;
    private TaskDefinitionStatus _status;
    public string FamilyPrefix { get; public set; }
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public SortOrder Sort { get; public set; }
    public TaskDefinitionStatus Status { get; public set; }
    public string get_FamilyPrefix();
    public void set_FamilyPrefix(string value);
    internal bool IsSetFamilyPrefix();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public SortOrder get_Sort();
    public void set_Sort(SortOrder value);
    internal bool IsSetSort();
    public TaskDefinitionStatus get_Status();
    public void set_Status(TaskDefinitionStatus value);
    internal bool IsSetStatus();
}
public class Amazon.ECS.Model.ListTaskDefinitionsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<string> _taskDefinitionArns;
    public string NextToken { get; public set; }
    public List`1<string> TaskDefinitionArns { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_TaskDefinitionArns();
    public void set_TaskDefinitionArns(List`1<string> value);
    internal bool IsSetTaskDefinitionArns();
}
internal class Amazon.ECS.Model.ListTasksPaginator : object {
    private IAmazonECS _client;
    private ListTasksRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListTasksResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> TaskArns { get; }
    internal ListTasksPaginator(IAmazonECS client, ListTasksRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListTasksResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_TaskArns();
    [AsyncIteratorStateMachineAttribute("Amazon.ECS.Model.ListTasksPaginator/<Amazon-Runtime-IPaginator<Amazon-ECS-Model-ListTasksResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListTasksResponse> Amazon.Runtime.IPaginator<Amazon.ECS.Model.ListTasksResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECS.Model.ListTasksRequest : AmazonECSRequest {
    private string _cluster;
    private string _containerInstance;
    private DesiredStatus _desiredStatus;
    private string _family;
    private LaunchType _launchType;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _serviceName;
    private string _startedBy;
    public string Cluster { get; public set; }
    public string ContainerInstance { get; public set; }
    public DesiredStatus DesiredStatus { get; public set; }
    public string Family { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string ServiceName { get; public set; }
    public string StartedBy { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public string get_ContainerInstance();
    public void set_ContainerInstance(string value);
    internal bool IsSetContainerInstance();
    public DesiredStatus get_DesiredStatus();
    public void set_DesiredStatus(DesiredStatus value);
    internal bool IsSetDesiredStatus();
    public string get_Family();
    public void set_Family(string value);
    internal bool IsSetFamily();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
    public string get_StartedBy();
    public void set_StartedBy(string value);
    internal bool IsSetStartedBy();
}
public class Amazon.ECS.Model.ListTasksResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<string> _taskArns;
    public string NextToken { get; public set; }
    public List`1<string> TaskArns { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_TaskArns();
    public void set_TaskArns(List`1<string> value);
    internal bool IsSetTaskArns();
}
public class Amazon.ECS.Model.LoadBalancer : object {
    private string _containerName;
    private Nullable`1<int> _containerPort;
    private string _loadBalancerName;
    private string _targetGroupArn;
    public string ContainerName { get; public set; }
    public Nullable`1<int> ContainerPort { get; public set; }
    public string LoadBalancerName { get; public set; }
    public string TargetGroupArn { get; public set; }
    public string get_ContainerName();
    public void set_ContainerName(string value);
    internal bool IsSetContainerName();
    public Nullable`1<int> get_ContainerPort();
    public void set_ContainerPort(Nullable`1<int> value);
    internal bool IsSetContainerPort();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public string get_TargetGroupArn();
    public void set_TargetGroupArn(string value);
    internal bool IsSetTargetGroupArn();
}
public class Amazon.ECS.Model.LogConfiguration : object {
    private LogDriver _logDriver;
    private Dictionary`2<string, string> _options;
    private List`1<Secret> _secretOptions;
    [AWSPropertyAttribute]
public LogDriver LogDriver { get; public set; }
    public Dictionary`2<string, string> Options { get; public set; }
    public List`1<Secret> SecretOptions { get; public set; }
    public LogDriver get_LogDriver();
    public void set_LogDriver(LogDriver value);
    internal bool IsSetLogDriver();
    public Dictionary`2<string, string> get_Options();
    public void set_Options(Dictionary`2<string, string> value);
    internal bool IsSetOptions();
    public List`1<Secret> get_SecretOptions();
    public void set_SecretOptions(List`1<Secret> value);
    internal bool IsSetSecretOptions();
}
public class Amazon.ECS.Model.ManagedAgent : object {
    private Nullable`1<DateTime> _lastStartedAt;
    private string _lastStatus;
    private ManagedAgentName _name;
    private string _reason;
    public Nullable`1<DateTime> LastStartedAt { get; public set; }
    public string LastStatus { get; public set; }
    public ManagedAgentName Name { get; public set; }
    public string Reason { get; public set; }
    public Nullable`1<DateTime> get_LastStartedAt();
    public void set_LastStartedAt(Nullable`1<DateTime> value);
    internal bool IsSetLastStartedAt();
    public string get_LastStatus();
    public void set_LastStatus(string value);
    internal bool IsSetLastStatus();
    public ManagedAgentName get_Name();
    public void set_Name(ManagedAgentName value);
    internal bool IsSetName();
    public string get_Reason();
    public void set_Reason(string value);
    internal bool IsSetReason();
}
public class Amazon.ECS.Model.ManagedScaling : object {
    private Nullable`1<int> _instanceWarmupPeriod;
    private Nullable`1<int> _maximumScalingStepSize;
    private Nullable`1<int> _minimumScalingStepSize;
    private ManagedScalingStatus _status;
    private Nullable`1<int> _targetCapacity;
    [AWSPropertyAttribute]
public Nullable`1<int> InstanceWarmupPeriod { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaximumScalingStepSize { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MinimumScalingStepSize { get; public set; }
    public ManagedScalingStatus Status { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> TargetCapacity { get; public set; }
    public Nullable`1<int> get_InstanceWarmupPeriod();
    public void set_InstanceWarmupPeriod(Nullable`1<int> value);
    internal bool IsSetInstanceWarmupPeriod();
    public Nullable`1<int> get_MaximumScalingStepSize();
    public void set_MaximumScalingStepSize(Nullable`1<int> value);
    internal bool IsSetMaximumScalingStepSize();
    public Nullable`1<int> get_MinimumScalingStepSize();
    public void set_MinimumScalingStepSize(Nullable`1<int> value);
    internal bool IsSetMinimumScalingStepSize();
    public ManagedScalingStatus get_Status();
    public void set_Status(ManagedScalingStatus value);
    internal bool IsSetStatus();
    public Nullable`1<int> get_TargetCapacity();
    public void set_TargetCapacity(Nullable`1<int> value);
    internal bool IsSetTargetCapacity();
}
public class Amazon.ECS.Model.ManagedStorageConfiguration : object {
    private string _fargateEphemeralStorageKmsKeyId;
    private string _kmsKeyId;
    public string FargateEphemeralStorageKmsKeyId { get; public set; }
    public string KmsKeyId { get; public set; }
    public string get_FargateEphemeralStorageKmsKeyId();
    public void set_FargateEphemeralStorageKmsKeyId(string value);
    internal bool IsSetFargateEphemeralStorageKmsKeyId();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
}
public class Amazon.ECS.Model.MissingVersionException : AmazonECSException {
    public MissingVersionException(string message);
    public MissingVersionException(string message, Exception innerException);
    public MissingVersionException(Exception innerException);
    public MissingVersionException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public MissingVersionException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.MountPoint : object {
    private string _containerPath;
    private Nullable`1<bool> _readOnly;
    private string _sourceVolume;
    public string ContainerPath { get; public set; }
    public Nullable`1<bool> ReadOnly { get; public set; }
    public string SourceVolume { get; public set; }
    public string get_ContainerPath();
    public void set_ContainerPath(string value);
    internal bool IsSetContainerPath();
    public Nullable`1<bool> get_ReadOnly();
    public void set_ReadOnly(Nullable`1<bool> value);
    internal bool IsSetReadOnly();
    public string get_SourceVolume();
    public void set_SourceVolume(string value);
    internal bool IsSetSourceVolume();
}
public class Amazon.ECS.Model.NamespaceNotFoundException : AmazonECSException {
    public NamespaceNotFoundException(string message);
    public NamespaceNotFoundException(string message, Exception innerException);
    public NamespaceNotFoundException(Exception innerException);
    public NamespaceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NamespaceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.NetworkBinding : object {
    private string _bindip;
    private Nullable`1<int> _containerPort;
    private string _containerPortRange;
    private Nullable`1<int> _hostPort;
    private string _hostPortRange;
    private TransportProtocol _protocol;
    public string BindIP { get; public set; }
    public Nullable`1<int> ContainerPort { get; public set; }
    public string ContainerPortRange { get; public set; }
    public Nullable`1<int> HostPort { get; public set; }
    public string HostPortRange { get; public set; }
    public TransportProtocol Protocol { get; public set; }
    public string get_BindIP();
    public void set_BindIP(string value);
    internal bool IsSetBindIP();
    public Nullable`1<int> get_ContainerPort();
    public void set_ContainerPort(Nullable`1<int> value);
    internal bool IsSetContainerPort();
    public string get_ContainerPortRange();
    public void set_ContainerPortRange(string value);
    internal bool IsSetContainerPortRange();
    public Nullable`1<int> get_HostPort();
    public void set_HostPort(Nullable`1<int> value);
    internal bool IsSetHostPort();
    public string get_HostPortRange();
    public void set_HostPortRange(string value);
    internal bool IsSetHostPortRange();
    public TransportProtocol get_Protocol();
    public void set_Protocol(TransportProtocol value);
    internal bool IsSetProtocol();
}
public class Amazon.ECS.Model.NetworkConfiguration : object {
    private AwsVpcConfiguration _awsvpcConfiguration;
    public AwsVpcConfiguration AwsvpcConfiguration { get; public set; }
    public AwsVpcConfiguration get_AwsvpcConfiguration();
    public void set_AwsvpcConfiguration(AwsVpcConfiguration value);
    internal bool IsSetAwsvpcConfiguration();
}
public class Amazon.ECS.Model.NetworkInterface : object {
    private string _attachmentId;
    private string _ipv6Address;
    private string _privateIpv4Address;
    public string AttachmentId { get; public set; }
    public string Ipv6Address { get; public set; }
    public string PrivateIpv4Address { get; public set; }
    public string get_AttachmentId();
    public void set_AttachmentId(string value);
    internal bool IsSetAttachmentId();
    public string get_Ipv6Address();
    public void set_Ipv6Address(string value);
    internal bool IsSetIpv6Address();
    public string get_PrivateIpv4Address();
    public void set_PrivateIpv4Address(string value);
    internal bool IsSetPrivateIpv4Address();
}
public class Amazon.ECS.Model.NoUpdateAvailableException : AmazonECSException {
    public NoUpdateAvailableException(string message);
    public NoUpdateAvailableException(string message, Exception innerException);
    public NoUpdateAvailableException(Exception innerException);
    public NoUpdateAvailableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoUpdateAvailableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.PlacementConstraint : object {
    private string _expression;
    private PlacementConstraintType _type;
    public string Expression { get; public set; }
    public PlacementConstraintType Type { get; public set; }
    public string get_Expression();
    public void set_Expression(string value);
    internal bool IsSetExpression();
    public PlacementConstraintType get_Type();
    public void set_Type(PlacementConstraintType value);
    internal bool IsSetType();
}
public class Amazon.ECS.Model.PlacementStrategy : object {
    private string _field;
    private PlacementStrategyType _type;
    public string Field { get; public set; }
    public PlacementStrategyType Type { get; public set; }
    public string get_Field();
    public void set_Field(string value);
    internal bool IsSetField();
    public PlacementStrategyType get_Type();
    public void set_Type(PlacementStrategyType value);
    internal bool IsSetType();
}
public class Amazon.ECS.Model.PlatformTaskDefinitionIncompatibilityException : AmazonECSException {
    public PlatformTaskDefinitionIncompatibilityException(string message);
    public PlatformTaskDefinitionIncompatibilityException(string message, Exception innerException);
    public PlatformTaskDefinitionIncompatibilityException(Exception innerException);
    public PlatformTaskDefinitionIncompatibilityException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PlatformTaskDefinitionIncompatibilityException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.PlatformUnknownException : AmazonECSException {
    public PlatformUnknownException(string message);
    public PlatformUnknownException(string message, Exception innerException);
    public PlatformUnknownException(Exception innerException);
    public PlatformUnknownException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PlatformUnknownException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.PortMapping : object {
    private ApplicationProtocol _appProtocol;
    private Nullable`1<int> _containerPort;
    private string _containerPortRange;
    private Nullable`1<int> _hostPort;
    private string _name;
    private TransportProtocol _protocol;
    public ApplicationProtocol AppProtocol { get; public set; }
    public Nullable`1<int> ContainerPort { get; public set; }
    public string ContainerPortRange { get; public set; }
    public Nullable`1<int> HostPort { get; public set; }
    public string Name { get; public set; }
    public TransportProtocol Protocol { get; public set; }
    public ApplicationProtocol get_AppProtocol();
    public void set_AppProtocol(ApplicationProtocol value);
    internal bool IsSetAppProtocol();
    public Nullable`1<int> get_ContainerPort();
    public void set_ContainerPort(Nullable`1<int> value);
    internal bool IsSetContainerPort();
    public string get_ContainerPortRange();
    public void set_ContainerPortRange(string value);
    internal bool IsSetContainerPortRange();
    public Nullable`1<int> get_HostPort();
    public void set_HostPort(Nullable`1<int> value);
    internal bool IsSetHostPort();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public TransportProtocol get_Protocol();
    public void set_Protocol(TransportProtocol value);
    internal bool IsSetProtocol();
}
public class Amazon.ECS.Model.ProtectedTask : object {
    private Nullable`1<DateTime> _expirationDate;
    private Nullable`1<bool> _protectionEnabled;
    private string _taskArn;
    public Nullable`1<DateTime> ExpirationDate { get; public set; }
    public Nullable`1<bool> ProtectionEnabled { get; public set; }
    public string TaskArn { get; public set; }
    public Nullable`1<DateTime> get_ExpirationDate();
    public void set_ExpirationDate(Nullable`1<DateTime> value);
    internal bool IsSetExpirationDate();
    public Nullable`1<bool> get_ProtectionEnabled();
    public void set_ProtectionEnabled(Nullable`1<bool> value);
    internal bool IsSetProtectionEnabled();
    public string get_TaskArn();
    public void set_TaskArn(string value);
    internal bool IsSetTaskArn();
}
public class Amazon.ECS.Model.ProxyConfiguration : object {
    private string _containerName;
    private List`1<KeyValuePair> _properties;
    private ProxyConfigurationType _type;
    [AWSPropertyAttribute]
public string ContainerName { get; public set; }
    public List`1<KeyValuePair> Properties { get; public set; }
    public ProxyConfigurationType Type { get; public set; }
    public string get_ContainerName();
    public void set_ContainerName(string value);
    internal bool IsSetContainerName();
    public List`1<KeyValuePair> get_Properties();
    public void set_Properties(List`1<KeyValuePair> value);
    internal bool IsSetProperties();
    public ProxyConfigurationType get_Type();
    public void set_Type(ProxyConfigurationType value);
    internal bool IsSetType();
}
public class Amazon.ECS.Model.PutAccountSettingDefaultRequest : AmazonECSRequest {
    private SettingName _name;
    private string _value;
    [AWSPropertyAttribute]
public SettingName Name { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public SettingName get_Name();
    public void set_Name(SettingName value);
    internal bool IsSetName();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.PutAccountSettingDefaultResponse : AmazonWebServiceResponse {
    private Setting _setting;
    public Setting Setting { get; public set; }
    public Setting get_Setting();
    public void set_Setting(Setting value);
    internal bool IsSetSetting();
}
public class Amazon.ECS.Model.PutAccountSettingRequest : AmazonECSRequest {
    private SettingName _name;
    private string _principalArn;
    private string _value;
    [AWSPropertyAttribute]
public SettingName Name { get; public set; }
    public string PrincipalArn { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public SettingName get_Name();
    public void set_Name(SettingName value);
    internal bool IsSetName();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.PutAccountSettingResponse : AmazonWebServiceResponse {
    private Setting _setting;
    public Setting Setting { get; public set; }
    public Setting get_Setting();
    public void set_Setting(Setting value);
    internal bool IsSetSetting();
}
public class Amazon.ECS.Model.PutAttributesRequest : AmazonECSRequest {
    private List`1<Attribute> _attributes;
    private string _cluster;
    [AWSPropertyAttribute]
public List`1<Attribute> Attributes { get; public set; }
    public string Cluster { get; public set; }
    public List`1<Attribute> get_Attributes();
    public void set_Attributes(List`1<Attribute> value);
    internal bool IsSetAttributes();
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
}
public class Amazon.ECS.Model.PutAttributesResponse : AmazonWebServiceResponse {
    private List`1<Attribute> _attributes;
    public List`1<Attribute> Attributes { get; public set; }
    public List`1<Attribute> get_Attributes();
    public void set_Attributes(List`1<Attribute> value);
    internal bool IsSetAttributes();
}
public class Amazon.ECS.Model.PutClusterCapacityProvidersRequest : AmazonECSRequest {
    private List`1<string> _capacityProviders;
    private string _cluster;
    private List`1<CapacityProviderStrategyItem> _defaultCapacityProviderStrategy;
    [AWSPropertyAttribute]
public List`1<string> CapacityProviders { get; public set; }
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public List`1<CapacityProviderStrategyItem> DefaultCapacityProviderStrategy { get; public set; }
    public List`1<string> get_CapacityProviders();
    public void set_CapacityProviders(List`1<string> value);
    internal bool IsSetCapacityProviders();
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public List`1<CapacityProviderStrategyItem> get_DefaultCapacityProviderStrategy();
    public void set_DefaultCapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetDefaultCapacityProviderStrategy();
}
public class Amazon.ECS.Model.PutClusterCapacityProvidersResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.ECS.Model.RegisterTaskDefinitionRequest : AmazonECSRequest {
    private List`1<ContainerDefinition> _containerDefinitions;
    private string _cpu;
    private EphemeralStorage _ephemeralStorage;
    private string _executionRoleArn;
    private string _family;
    private List`1<InferenceAccelerator> _inferenceAccelerators;
    private IpcMode _ipcMode;
    private string _memory;
    private NetworkMode _networkMode;
    private PidMode _pidMode;
    private List`1<TaskDefinitionPlacementConstraint> _placementConstraints;
    private ProxyConfiguration _proxyConfiguration;
    private List`1<string> _requiresCompatibilities;
    private RuntimePlatform _runtimePlatform;
    private List`1<Tag> _tags;
    private string _taskRoleArn;
    private List`1<Volume> _volumes;
    [AWSPropertyAttribute]
public List`1<ContainerDefinition> ContainerDefinitions { get; public set; }
    public string Cpu { get; public set; }
    public EphemeralStorage EphemeralStorage { get; public set; }
    public string ExecutionRoleArn { get; public set; }
    [AWSPropertyAttribute]
public string Family { get; public set; }
    public List`1<InferenceAccelerator> InferenceAccelerators { get; public set; }
    public IpcMode IpcMode { get; public set; }
    public string Memory { get; public set; }
    public NetworkMode NetworkMode { get; public set; }
    public PidMode PidMode { get; public set; }
    public List`1<TaskDefinitionPlacementConstraint> PlacementConstraints { get; public set; }
    public ProxyConfiguration ProxyConfiguration { get; public set; }
    public List`1<string> RequiresCompatibilities { get; public set; }
    public RuntimePlatform RuntimePlatform { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string TaskRoleArn { get; public set; }
    public List`1<Volume> Volumes { get; public set; }
    public List`1<ContainerDefinition> get_ContainerDefinitions();
    public void set_ContainerDefinitions(List`1<ContainerDefinition> value);
    internal bool IsSetContainerDefinitions();
    public string get_Cpu();
    public void set_Cpu(string value);
    internal bool IsSetCpu();
    public EphemeralStorage get_EphemeralStorage();
    public void set_EphemeralStorage(EphemeralStorage value);
    internal bool IsSetEphemeralStorage();
    public string get_ExecutionRoleArn();
    public void set_ExecutionRoleArn(string value);
    internal bool IsSetExecutionRoleArn();
    public string get_Family();
    public void set_Family(string value);
    internal bool IsSetFamily();
    public List`1<InferenceAccelerator> get_InferenceAccelerators();
    public void set_InferenceAccelerators(List`1<InferenceAccelerator> value);
    internal bool IsSetInferenceAccelerators();
    public IpcMode get_IpcMode();
    public void set_IpcMode(IpcMode value);
    internal bool IsSetIpcMode();
    public string get_Memory();
    public void set_Memory(string value);
    internal bool IsSetMemory();
    public NetworkMode get_NetworkMode();
    public void set_NetworkMode(NetworkMode value);
    internal bool IsSetNetworkMode();
    public PidMode get_PidMode();
    public void set_PidMode(PidMode value);
    internal bool IsSetPidMode();
    public List`1<TaskDefinitionPlacementConstraint> get_PlacementConstraints();
    public void set_PlacementConstraints(List`1<TaskDefinitionPlacementConstraint> value);
    internal bool IsSetPlacementConstraints();
    public ProxyConfiguration get_ProxyConfiguration();
    public void set_ProxyConfiguration(ProxyConfiguration value);
    internal bool IsSetProxyConfiguration();
    public List`1<string> get_RequiresCompatibilities();
    public void set_RequiresCompatibilities(List`1<string> value);
    internal bool IsSetRequiresCompatibilities();
    public RuntimePlatform get_RuntimePlatform();
    public void set_RuntimePlatform(RuntimePlatform value);
    internal bool IsSetRuntimePlatform();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TaskRoleArn();
    public void set_TaskRoleArn(string value);
    internal bool IsSetTaskRoleArn();
    public List`1<Volume> get_Volumes();
    public void set_Volumes(List`1<Volume> value);
    internal bool IsSetVolumes();
}
public class Amazon.ECS.Model.RegisterTaskDefinitionResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tags;
    private TaskDefinition _taskDefinition;
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public TaskDefinition TaskDefinition { get; public set; }
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public TaskDefinition get_TaskDefinition();
    public void set_TaskDefinition(TaskDefinition value);
    internal bool IsSetTaskDefinition();
}
public class Amazon.ECS.Model.RepositoryCredentials : object {
    private string _credentialsParameter;
    [AWSPropertyAttribute]
public string CredentialsParameter { get; public set; }
    public string get_CredentialsParameter();
    public void set_CredentialsParameter(string value);
    internal bool IsSetCredentialsParameter();
}
public class Amazon.ECS.Model.Resource : object {
    private Nullable`1<double> _doubleValue;
    private Nullable`1<int> _integerValue;
    private Nullable`1<long> _longValue;
    private string _name;
    private List`1<string> _stringSetValue;
    private string _type;
    public Nullable`1<double> DoubleValue { get; public set; }
    public Nullable`1<int> IntegerValue { get; public set; }
    public Nullable`1<long> LongValue { get; public set; }
    public string Name { get; public set; }
    public List`1<string> StringSetValue { get; public set; }
    public string Type { get; public set; }
    public Nullable`1<double> get_DoubleValue();
    public void set_DoubleValue(Nullable`1<double> value);
    internal bool IsSetDoubleValue();
    public Nullable`1<int> get_IntegerValue();
    public void set_IntegerValue(Nullable`1<int> value);
    internal bool IsSetIntegerValue();
    public Nullable`1<long> get_LongValue();
    public void set_LongValue(Nullable`1<long> value);
    internal bool IsSetLongValue();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<string> get_StringSetValue();
    public void set_StringSetValue(List`1<string> value);
    internal bool IsSetStringSetValue();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
}
public class Amazon.ECS.Model.ResourceInUseException : AmazonECSException {
    public ResourceInUseException(string message);
    public ResourceInUseException(string message, Exception innerException);
    public ResourceInUseException(Exception innerException);
    public ResourceInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.ResourceNotFoundException : AmazonECSException {
    public ResourceNotFoundException(string message);
    public ResourceNotFoundException(string message, Exception innerException);
    public ResourceNotFoundException(Exception innerException);
    public ResourceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.ResourceRequirement : object {
    private ResourceType _type;
    private string _value;
    [AWSPropertyAttribute]
public ResourceType Type { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public ResourceType get_Type();
    public void set_Type(ResourceType value);
    internal bool IsSetType();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.RunTaskRequest : AmazonECSRequest {
    private List`1<CapacityProviderStrategyItem> _capacityProviderStrategy;
    private string _clientToken;
    private string _cluster;
    private Nullable`1<int> _count;
    private Nullable`1<bool> _enableecsManagedTags;
    private Nullable`1<bool> _enableExecuteCommand;
    private string _group;
    private LaunchType _launchType;
    private NetworkConfiguration _networkConfiguration;
    private TaskOverride _overrides;
    private List`1<PlacementConstraint> _placementConstraints;
    private List`1<PlacementStrategy> _placementStrategy;
    private string _platformVersion;
    private PropagateTags _propagateTags;
    private string _referenceId;
    private string _startedBy;
    private List`1<Tag> _tags;
    private string _taskDefinition;
    private List`1<TaskVolumeConfiguration> _volumeConfigurations;
    public List`1<CapacityProviderStrategyItem> CapacityProviderStrategy { get; public set; }
    public string ClientToken { get; public set; }
    public string Cluster { get; public set; }
    public Nullable`1<int> Count { get; public set; }
    public Nullable`1<bool> EnableECSManagedTags { get; public set; }
    public Nullable`1<bool> EnableExecuteCommand { get; public set; }
    public string Group { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public NetworkConfiguration NetworkConfiguration { get; public set; }
    public TaskOverride Overrides { get; public set; }
    public List`1<PlacementConstraint> PlacementConstraints { get; public set; }
    public List`1<PlacementStrategy> PlacementStrategy { get; public set; }
    public string PlatformVersion { get; public set; }
    public PropagateTags PropagateTags { get; public set; }
    public string ReferenceId { get; public set; }
    public string StartedBy { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string TaskDefinition { get; public set; }
    public List`1<TaskVolumeConfiguration> VolumeConfigurations { get; public set; }
    public List`1<CapacityProviderStrategyItem> get_CapacityProviderStrategy();
    public void set_CapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetCapacityProviderStrategy();
    public string get_ClientToken();
    public void set_ClientToken(string value);
    internal bool IsSetClientToken();
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public Nullable`1<int> get_Count();
    public void set_Count(Nullable`1<int> value);
    internal bool IsSetCount();
    public Nullable`1<bool> get_EnableECSManagedTags();
    public void set_EnableECSManagedTags(Nullable`1<bool> value);
    internal bool IsSetEnableECSManagedTags();
    public Nullable`1<bool> get_EnableExecuteCommand();
    public void set_EnableExecuteCommand(Nullable`1<bool> value);
    internal bool IsSetEnableExecuteCommand();
    public string get_Group();
    public void set_Group(string value);
    internal bool IsSetGroup();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public NetworkConfiguration get_NetworkConfiguration();
    public void set_NetworkConfiguration(NetworkConfiguration value);
    internal bool IsSetNetworkConfiguration();
    public TaskOverride get_Overrides();
    public void set_Overrides(TaskOverride value);
    internal bool IsSetOverrides();
    public List`1<PlacementConstraint> get_PlacementConstraints();
    public void set_PlacementConstraints(List`1<PlacementConstraint> value);
    internal bool IsSetPlacementConstraints();
    public List`1<PlacementStrategy> get_PlacementStrategy();
    public void set_PlacementStrategy(List`1<PlacementStrategy> value);
    internal bool IsSetPlacementStrategy();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public PropagateTags get_PropagateTags();
    public void set_PropagateTags(PropagateTags value);
    internal bool IsSetPropagateTags();
    public string get_ReferenceId();
    public void set_ReferenceId(string value);
    internal bool IsSetReferenceId();
    public string get_StartedBy();
    public void set_StartedBy(string value);
    internal bool IsSetStartedBy();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
    public List`1<TaskVolumeConfiguration> get_VolumeConfigurations();
    public void set_VolumeConfigurations(List`1<TaskVolumeConfiguration> value);
    internal bool IsSetVolumeConfigurations();
}
public class Amazon.ECS.Model.RunTaskResponse : AmazonWebServiceResponse {
    private List`1<Failure> _failures;
    private List`1<Task> _tasks;
    public List`1<Failure> Failures { get; public set; }
    public List`1<Task> Tasks { get; public set; }
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
    public List`1<Task> get_Tasks();
    public void set_Tasks(List`1<Task> value);
    internal bool IsSetTasks();
}
public class Amazon.ECS.Model.RuntimePlatform : object {
    private CPUArchitecture _cpuArchitecture;
    private OSFamily _operatingSystemFamily;
    public CPUArchitecture CpuArchitecture { get; public set; }
    public OSFamily OperatingSystemFamily { get; public set; }
    public CPUArchitecture get_CpuArchitecture();
    public void set_CpuArchitecture(CPUArchitecture value);
    internal bool IsSetCpuArchitecture();
    public OSFamily get_OperatingSystemFamily();
    public void set_OperatingSystemFamily(OSFamily value);
    internal bool IsSetOperatingSystemFamily();
}
public class Amazon.ECS.Model.Scale : object {
    private ScaleUnit _unit;
    private Nullable`1<double> _value;
    public ScaleUnit Unit { get; public set; }
    public Nullable`1<double> Value { get; public set; }
    public ScaleUnit get_Unit();
    public void set_Unit(ScaleUnit value);
    internal bool IsSetUnit();
    public Nullable`1<double> get_Value();
    public void set_Value(Nullable`1<double> value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.Secret : object {
    private string _name;
    private string _valueFrom;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string ValueFrom { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_ValueFrom();
    public void set_ValueFrom(string value);
    internal bool IsSetValueFrom();
}
public class Amazon.ECS.Model.ServerException : AmazonECSException {
    public ServerException(string message);
    public ServerException(string message, Exception innerException);
    public ServerException(Exception innerException);
    public ServerException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServerException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.Service : object {
    private List`1<CapacityProviderStrategyItem> _capacityProviderStrategy;
    private string _clusterArn;
    private Nullable`1<DateTime> _createdAt;
    private string _createdBy;
    private DeploymentConfiguration _deploymentConfiguration;
    private DeploymentController _deploymentController;
    private List`1<Deployment> _deployments;
    private Nullable`1<int> _desiredCount;
    private Nullable`1<bool> _enableecsManagedTags;
    private Nullable`1<bool> _enableExecuteCommand;
    private List`1<ServiceEvent> _events;
    private Nullable`1<int> _healthCheckGracePeriodSeconds;
    private LaunchType _launchType;
    private List`1<LoadBalancer> _loadBalancers;
    private NetworkConfiguration _networkConfiguration;
    private Nullable`1<int> _pendingCount;
    private List`1<PlacementConstraint> _placementConstraints;
    private List`1<PlacementStrategy> _placementStrategy;
    private string _platformFamily;
    private string _platformVersion;
    private PropagateTags _propagateTags;
    private string _roleArn;
    private Nullable`1<int> _runningCount;
    private SchedulingStrategy _schedulingStrategy;
    private string _serviceArn;
    private string _serviceName;
    private List`1<ServiceRegistry> _serviceRegistries;
    private string _status;
    private List`1<Tag> _tags;
    private string _taskDefinition;
    private List`1<TaskSet> _taskSets;
    public List`1<CapacityProviderStrategyItem> CapacityProviderStrategy { get; public set; }
    public string ClusterArn { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public string CreatedBy { get; public set; }
    public DeploymentConfiguration DeploymentConfiguration { get; public set; }
    public DeploymentController DeploymentController { get; public set; }
    public List`1<Deployment> Deployments { get; public set; }
    public Nullable`1<int> DesiredCount { get; public set; }
    public Nullable`1<bool> EnableECSManagedTags { get; public set; }
    public Nullable`1<bool> EnableExecuteCommand { get; public set; }
    public List`1<ServiceEvent> Events { get; public set; }
    public Nullable`1<int> HealthCheckGracePeriodSeconds { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public List`1<LoadBalancer> LoadBalancers { get; public set; }
    public NetworkConfiguration NetworkConfiguration { get; public set; }
    public Nullable`1<int> PendingCount { get; public set; }
    public List`1<PlacementConstraint> PlacementConstraints { get; public set; }
    public List`1<PlacementStrategy> PlacementStrategy { get; public set; }
    public string PlatformFamily { get; public set; }
    public string PlatformVersion { get; public set; }
    public PropagateTags PropagateTags { get; public set; }
    public string RoleArn { get; public set; }
    public Nullable`1<int> RunningCount { get; public set; }
    public SchedulingStrategy SchedulingStrategy { get; public set; }
    public string ServiceArn { get; public set; }
    public string ServiceName { get; public set; }
    public List`1<ServiceRegistry> ServiceRegistries { get; public set; }
    public string Status { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string TaskDefinition { get; public set; }
    public List`1<TaskSet> TaskSets { get; public set; }
    public List`1<CapacityProviderStrategyItem> get_CapacityProviderStrategy();
    public void set_CapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetCapacityProviderStrategy();
    public string get_ClusterArn();
    public void set_ClusterArn(string value);
    internal bool IsSetClusterArn();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public string get_CreatedBy();
    public void set_CreatedBy(string value);
    internal bool IsSetCreatedBy();
    public DeploymentConfiguration get_DeploymentConfiguration();
    public void set_DeploymentConfiguration(DeploymentConfiguration value);
    internal bool IsSetDeploymentConfiguration();
    public DeploymentController get_DeploymentController();
    public void set_DeploymentController(DeploymentController value);
    internal bool IsSetDeploymentController();
    public List`1<Deployment> get_Deployments();
    public void set_Deployments(List`1<Deployment> value);
    internal bool IsSetDeployments();
    public Nullable`1<int> get_DesiredCount();
    public void set_DesiredCount(Nullable`1<int> value);
    internal bool IsSetDesiredCount();
    public Nullable`1<bool> get_EnableECSManagedTags();
    public void set_EnableECSManagedTags(Nullable`1<bool> value);
    internal bool IsSetEnableECSManagedTags();
    public Nullable`1<bool> get_EnableExecuteCommand();
    public void set_EnableExecuteCommand(Nullable`1<bool> value);
    internal bool IsSetEnableExecuteCommand();
    public List`1<ServiceEvent> get_Events();
    public void set_Events(List`1<ServiceEvent> value);
    internal bool IsSetEvents();
    public Nullable`1<int> get_HealthCheckGracePeriodSeconds();
    public void set_HealthCheckGracePeriodSeconds(Nullable`1<int> value);
    internal bool IsSetHealthCheckGracePeriodSeconds();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public List`1<LoadBalancer> get_LoadBalancers();
    public void set_LoadBalancers(List`1<LoadBalancer> value);
    internal bool IsSetLoadBalancers();
    public NetworkConfiguration get_NetworkConfiguration();
    public void set_NetworkConfiguration(NetworkConfiguration value);
    internal bool IsSetNetworkConfiguration();
    public Nullable`1<int> get_PendingCount();
    public void set_PendingCount(Nullable`1<int> value);
    internal bool IsSetPendingCount();
    public List`1<PlacementConstraint> get_PlacementConstraints();
    public void set_PlacementConstraints(List`1<PlacementConstraint> value);
    internal bool IsSetPlacementConstraints();
    public List`1<PlacementStrategy> get_PlacementStrategy();
    public void set_PlacementStrategy(List`1<PlacementStrategy> value);
    internal bool IsSetPlacementStrategy();
    public string get_PlatformFamily();
    public void set_PlatformFamily(string value);
    internal bool IsSetPlatformFamily();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public PropagateTags get_PropagateTags();
    public void set_PropagateTags(PropagateTags value);
    internal bool IsSetPropagateTags();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public Nullable`1<int> get_RunningCount();
    public void set_RunningCount(Nullable`1<int> value);
    internal bool IsSetRunningCount();
    public SchedulingStrategy get_SchedulingStrategy();
    public void set_SchedulingStrategy(SchedulingStrategy value);
    internal bool IsSetSchedulingStrategy();
    public string get_ServiceArn();
    public void set_ServiceArn(string value);
    internal bool IsSetServiceArn();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
    public List`1<ServiceRegistry> get_ServiceRegistries();
    public void set_ServiceRegistries(List`1<ServiceRegistry> value);
    internal bool IsSetServiceRegistries();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
    public List`1<TaskSet> get_TaskSets();
    public void set_TaskSets(List`1<TaskSet> value);
    internal bool IsSetTaskSets();
}
public class Amazon.ECS.Model.ServiceConnectClientAlias : object {
    private string _dnsName;
    private Nullable`1<int> _port;
    public string DnsName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Port { get; public set; }
    public string get_DnsName();
    public void set_DnsName(string value);
    internal bool IsSetDnsName();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
}
public class Amazon.ECS.Model.ServiceConnectConfiguration : object {
    private Nullable`1<bool> _enabled;
    private LogConfiguration _logConfiguration;
    private string _awsNamespace;
    private List`1<ServiceConnectService> _services;
    [AWSPropertyAttribute]
public Nullable`1<bool> Enabled { get; public set; }
    public LogConfiguration LogConfiguration { get; public set; }
    public string Namespace { get; public set; }
    public List`1<ServiceConnectService> Services { get; public set; }
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
    public LogConfiguration get_LogConfiguration();
    public void set_LogConfiguration(LogConfiguration value);
    internal bool IsSetLogConfiguration();
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
    public List`1<ServiceConnectService> get_Services();
    public void set_Services(List`1<ServiceConnectService> value);
    internal bool IsSetServices();
}
public class Amazon.ECS.Model.ServiceConnectService : object {
    private List`1<ServiceConnectClientAlias> _clientAliases;
    private string _discoveryName;
    private Nullable`1<int> _ingressPortOverride;
    private string _portName;
    private TimeoutConfiguration _timeout;
    private ServiceConnectTlsConfiguration _tls;
    public List`1<ServiceConnectClientAlias> ClientAliases { get; public set; }
    public string DiscoveryName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> IngressPortOverride { get; public set; }
    [AWSPropertyAttribute]
public string PortName { get; public set; }
    public TimeoutConfiguration Timeout { get; public set; }
    public ServiceConnectTlsConfiguration Tls { get; public set; }
    public List`1<ServiceConnectClientAlias> get_ClientAliases();
    public void set_ClientAliases(List`1<ServiceConnectClientAlias> value);
    internal bool IsSetClientAliases();
    public string get_DiscoveryName();
    public void set_DiscoveryName(string value);
    internal bool IsSetDiscoveryName();
    public Nullable`1<int> get_IngressPortOverride();
    public void set_IngressPortOverride(Nullable`1<int> value);
    internal bool IsSetIngressPortOverride();
    public string get_PortName();
    public void set_PortName(string value);
    internal bool IsSetPortName();
    public TimeoutConfiguration get_Timeout();
    public void set_Timeout(TimeoutConfiguration value);
    internal bool IsSetTimeout();
    public ServiceConnectTlsConfiguration get_Tls();
    public void set_Tls(ServiceConnectTlsConfiguration value);
    internal bool IsSetTls();
}
public class Amazon.ECS.Model.ServiceConnectServiceResource : object {
    private string _discoveryArn;
    private string _discoveryName;
    public string DiscoveryArn { get; public set; }
    public string DiscoveryName { get; public set; }
    public string get_DiscoveryArn();
    public void set_DiscoveryArn(string value);
    internal bool IsSetDiscoveryArn();
    public string get_DiscoveryName();
    public void set_DiscoveryName(string value);
    internal bool IsSetDiscoveryName();
}
public class Amazon.ECS.Model.ServiceConnectTlsCertificateAuthority : object {
    private string _awsPcaAuthorityArn;
    public string AwsPcaAuthorityArn { get; public set; }
    public string get_AwsPcaAuthorityArn();
    public void set_AwsPcaAuthorityArn(string value);
    internal bool IsSetAwsPcaAuthorityArn();
}
public class Amazon.ECS.Model.ServiceConnectTlsConfiguration : object {
    private ServiceConnectTlsCertificateAuthority _issuerCertificateAuthority;
    private string _kmsKey;
    private string _roleArn;
    [AWSPropertyAttribute]
public ServiceConnectTlsCertificateAuthority IssuerCertificateAuthority { get; public set; }
    public string KmsKey { get; public set; }
    public string RoleArn { get; public set; }
    public ServiceConnectTlsCertificateAuthority get_IssuerCertificateAuthority();
    public void set_IssuerCertificateAuthority(ServiceConnectTlsCertificateAuthority value);
    internal bool IsSetIssuerCertificateAuthority();
    public string get_KmsKey();
    public void set_KmsKey(string value);
    internal bool IsSetKmsKey();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
}
public class Amazon.ECS.Model.ServiceEvent : object {
    private Nullable`1<DateTime> _createdAt;
    private string _id;
    private string _message;
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public string Id { get; public set; }
    public string Message { get; public set; }
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
}
public class Amazon.ECS.Model.ServiceManagedEBSVolumeConfiguration : object {
    private Nullable`1<bool> _encrypted;
    private TaskFilesystemType _filesystemType;
    private Nullable`1<int> _iops;
    private string _kmsKeyId;
    private string _roleArn;
    private Nullable`1<int> _sizeInGiB;
    private string _snapshotId;
    private List`1<EBSTagSpecification> _tagSpecifications;
    private Nullable`1<int> _throughput;
    private string _volumeType;
    public Nullable`1<bool> Encrypted { get; public set; }
    public TaskFilesystemType FilesystemType { get; public set; }
    public Nullable`1<int> Iops { get; public set; }
    public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    public Nullable`1<int> SizeInGiB { get; public set; }
    public string SnapshotId { get; public set; }
    public List`1<EBSTagSpecification> TagSpecifications { get; public set; }
    public Nullable`1<int> Throughput { get; public set; }
    public string VolumeType { get; public set; }
    public Nullable`1<bool> get_Encrypted();
    public void set_Encrypted(Nullable`1<bool> value);
    internal bool IsSetEncrypted();
    public TaskFilesystemType get_FilesystemType();
    public void set_FilesystemType(TaskFilesystemType value);
    internal bool IsSetFilesystemType();
    public Nullable`1<int> get_Iops();
    public void set_Iops(Nullable`1<int> value);
    internal bool IsSetIops();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public Nullable`1<int> get_SizeInGiB();
    public void set_SizeInGiB(Nullable`1<int> value);
    internal bool IsSetSizeInGiB();
    public string get_SnapshotId();
    public void set_SnapshotId(string value);
    internal bool IsSetSnapshotId();
    public List`1<EBSTagSpecification> get_TagSpecifications();
    public void set_TagSpecifications(List`1<EBSTagSpecification> value);
    internal bool IsSetTagSpecifications();
    public Nullable`1<int> get_Throughput();
    public void set_Throughput(Nullable`1<int> value);
    internal bool IsSetThroughput();
    public string get_VolumeType();
    public void set_VolumeType(string value);
    internal bool IsSetVolumeType();
}
public class Amazon.ECS.Model.ServiceNotActiveException : AmazonECSException {
    public ServiceNotActiveException(string message);
    public ServiceNotActiveException(string message, Exception innerException);
    public ServiceNotActiveException(Exception innerException);
    public ServiceNotActiveException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServiceNotActiveException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.ServiceNotFoundException : AmazonECSException {
    public ServiceNotFoundException(string message);
    public ServiceNotFoundException(string message, Exception innerException);
    public ServiceNotFoundException(Exception innerException);
    public ServiceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServiceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.ServiceRegistry : object {
    private string _containerName;
    private Nullable`1<int> _containerPort;
    private Nullable`1<int> _port;
    private string _registryArn;
    public string ContainerName { get; public set; }
    public Nullable`1<int> ContainerPort { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public string RegistryArn { get; public set; }
    public string get_ContainerName();
    public void set_ContainerName(string value);
    internal bool IsSetContainerName();
    public Nullable`1<int> get_ContainerPort();
    public void set_ContainerPort(Nullable`1<int> value);
    internal bool IsSetContainerPort();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_RegistryArn();
    public void set_RegistryArn(string value);
    internal bool IsSetRegistryArn();
}
public class Amazon.ECS.Model.ServiceVolumeConfiguration : object {
    private ServiceManagedEBSVolumeConfiguration _managedebsVolume;
    private string _name;
    public ServiceManagedEBSVolumeConfiguration ManagedEBSVolume { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public ServiceManagedEBSVolumeConfiguration get_ManagedEBSVolume();
    public void set_ManagedEBSVolume(ServiceManagedEBSVolumeConfiguration value);
    internal bool IsSetManagedEBSVolume();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.ECS.Model.Session : object {
    private string _sessionId;
    private string _streamUrl;
    private string _tokenValue;
    public string SessionId { get; public set; }
    public string StreamUrl { get; public set; }
    [AWSPropertyAttribute]
public string TokenValue { get; public set; }
    public string get_SessionId();
    public void set_SessionId(string value);
    internal bool IsSetSessionId();
    public string get_StreamUrl();
    public void set_StreamUrl(string value);
    internal bool IsSetStreamUrl();
    public string get_TokenValue();
    public void set_TokenValue(string value);
    internal bool IsSetTokenValue();
}
public class Amazon.ECS.Model.Setting : object {
    private SettingName _name;
    private string _principalArn;
    private SettingType _type;
    private string _value;
    public SettingName Name { get; public set; }
    public string PrincipalArn { get; public set; }
    public SettingType Type { get; public set; }
    public string Value { get; public set; }
    public SettingName get_Name();
    public void set_Name(SettingName value);
    internal bool IsSetName();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
    public SettingType get_Type();
    public void set_Type(SettingType value);
    internal bool IsSetType();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.StartTaskRequest : AmazonECSRequest {
    private string _cluster;
    private List`1<string> _containerInstances;
    private Nullable`1<bool> _enableecsManagedTags;
    private Nullable`1<bool> _enableExecuteCommand;
    private string _group;
    private NetworkConfiguration _networkConfiguration;
    private TaskOverride _overrides;
    private PropagateTags _propagateTags;
    private string _referenceId;
    private string _startedBy;
    private List`1<Tag> _tags;
    private string _taskDefinition;
    private List`1<TaskVolumeConfiguration> _volumeConfigurations;
    public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ContainerInstances { get; public set; }
    public Nullable`1<bool> EnableECSManagedTags { get; public set; }
    public Nullable`1<bool> EnableExecuteCommand { get; public set; }
    public string Group { get; public set; }
    public NetworkConfiguration NetworkConfiguration { get; public set; }
    public TaskOverride Overrides { get; public set; }
    public PropagateTags PropagateTags { get; public set; }
    public string ReferenceId { get; public set; }
    public string StartedBy { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string TaskDefinition { get; public set; }
    public List`1<TaskVolumeConfiguration> VolumeConfigurations { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public List`1<string> get_ContainerInstances();
    public void set_ContainerInstances(List`1<string> value);
    internal bool IsSetContainerInstances();
    public Nullable`1<bool> get_EnableECSManagedTags();
    public void set_EnableECSManagedTags(Nullable`1<bool> value);
    internal bool IsSetEnableECSManagedTags();
    public Nullable`1<bool> get_EnableExecuteCommand();
    public void set_EnableExecuteCommand(Nullable`1<bool> value);
    internal bool IsSetEnableExecuteCommand();
    public string get_Group();
    public void set_Group(string value);
    internal bool IsSetGroup();
    public NetworkConfiguration get_NetworkConfiguration();
    public void set_NetworkConfiguration(NetworkConfiguration value);
    internal bool IsSetNetworkConfiguration();
    public TaskOverride get_Overrides();
    public void set_Overrides(TaskOverride value);
    internal bool IsSetOverrides();
    public PropagateTags get_PropagateTags();
    public void set_PropagateTags(PropagateTags value);
    internal bool IsSetPropagateTags();
    public string get_ReferenceId();
    public void set_ReferenceId(string value);
    internal bool IsSetReferenceId();
    public string get_StartedBy();
    public void set_StartedBy(string value);
    internal bool IsSetStartedBy();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
    public List`1<TaskVolumeConfiguration> get_VolumeConfigurations();
    public void set_VolumeConfigurations(List`1<TaskVolumeConfiguration> value);
    internal bool IsSetVolumeConfigurations();
}
public class Amazon.ECS.Model.StartTaskResponse : AmazonWebServiceResponse {
    private List`1<Failure> _failures;
    private List`1<Task> _tasks;
    public List`1<Failure> Failures { get; public set; }
    public List`1<Task> Tasks { get; public set; }
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
    public List`1<Task> get_Tasks();
    public void set_Tasks(List`1<Task> value);
    internal bool IsSetTasks();
}
public class Amazon.ECS.Model.StopTaskRequest : AmazonECSRequest {
    private string _cluster;
    private string _reason;
    private string _task;
    public string Cluster { get; public set; }
    public string Reason { get; public set; }
    [AWSPropertyAttribute]
public string Task { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public string get_Reason();
    public void set_Reason(string value);
    internal bool IsSetReason();
    public string get_Task();
    public void set_Task(string value);
    internal bool IsSetTask();
}
public class Amazon.ECS.Model.StopTaskResponse : AmazonWebServiceResponse {
    private Task _task;
    public Task Task { get; public set; }
    public Task get_Task();
    public void set_Task(Task value);
    internal bool IsSetTask();
}
public class Amazon.ECS.Model.SubmitAttachmentStateChangesRequest : AmazonECSRequest {
    private List`1<AttachmentStateChange> _attachments;
    private string _cluster;
    [AWSPropertyAttribute]
public List`1<AttachmentStateChange> Attachments { get; public set; }
    public string Cluster { get; public set; }
    public List`1<AttachmentStateChange> get_Attachments();
    public void set_Attachments(List`1<AttachmentStateChange> value);
    internal bool IsSetAttachments();
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
}
public class Amazon.ECS.Model.SubmitAttachmentStateChangesResponse : AmazonWebServiceResponse {
    private string _acknowledgment;
    public string Acknowledgment { get; public set; }
    public string get_Acknowledgment();
    public void set_Acknowledgment(string value);
    internal bool IsSetAcknowledgment();
}
public class Amazon.ECS.Model.SystemControl : object {
    private string _awsNamespace;
    private string _value;
    public string Namespace { get; public set; }
    public string Value { get; public set; }
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECS.Model.TagResourceRequest : AmazonECSRequest {
    private string _resourceArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ECS.Model.TagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.ECS.Model.TargetNotConnectedException : AmazonECSException {
    public TargetNotConnectedException(string message);
    public TargetNotConnectedException(string message, Exception innerException);
    public TargetNotConnectedException(Exception innerException);
    public TargetNotConnectedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TargetNotConnectedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.TargetNotFoundException : AmazonECSException {
    public TargetNotFoundException(string message);
    public TargetNotFoundException(string message, Exception innerException);
    public TargetNotFoundException(Exception innerException);
    public TargetNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TargetNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.Task : object {
    private List`1<Attachment> _attachments;
    private List`1<Attribute> _attributes;
    private string _availabilityZone;
    private string _capacityProviderName;
    private string _clusterArn;
    private Connectivity _connectivity;
    private Nullable`1<DateTime> _connectivityAt;
    private string _containerInstanceArn;
    private List`1<Container> _containers;
    private string _cpu;
    private Nullable`1<DateTime> _createdAt;
    private string _desiredStatus;
    private Nullable`1<bool> _enableExecuteCommand;
    private EphemeralStorage _ephemeralStorage;
    private Nullable`1<DateTime> _executionStoppedAt;
    private TaskEphemeralStorage _fargateEphemeralStorage;
    private string _group;
    private HealthStatus _healthStatus;
    private List`1<InferenceAccelerator> _inferenceAccelerators;
    private string _lastStatus;
    private LaunchType _launchType;
    private string _memory;
    private TaskOverride _overrides;
    private string _platformFamily;
    private string _platformVersion;
    private Nullable`1<DateTime> _pullStartedAt;
    private Nullable`1<DateTime> _pullStoppedAt;
    private Nullable`1<DateTime> _startedAt;
    private string _startedBy;
    private TaskStopCode _stopCode;
    private Nullable`1<DateTime> _stoppedAt;
    private string _stoppedReason;
    private Nullable`1<DateTime> _stoppingAt;
    private List`1<Tag> _tags;
    private string _taskArn;
    private string _taskDefinitionArn;
    private Nullable`1<long> _version;
    public List`1<Attachment> Attachments { get; public set; }
    public List`1<Attribute> Attributes { get; public set; }
    public string AvailabilityZone { get; public set; }
    public string CapacityProviderName { get; public set; }
    public string ClusterArn { get; public set; }
    public Connectivity Connectivity { get; public set; }
    public Nullable`1<DateTime> ConnectivityAt { get; public set; }
    public string ContainerInstanceArn { get; public set; }
    public List`1<Container> Containers { get; public set; }
    public string Cpu { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public string DesiredStatus { get; public set; }
    public Nullable`1<bool> EnableExecuteCommand { get; public set; }
    public EphemeralStorage EphemeralStorage { get; public set; }
    public Nullable`1<DateTime> ExecutionStoppedAt { get; public set; }
    public TaskEphemeralStorage FargateEphemeralStorage { get; public set; }
    public string Group { get; public set; }
    public HealthStatus HealthStatus { get; public set; }
    public List`1<InferenceAccelerator> InferenceAccelerators { get; public set; }
    public string LastStatus { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public string Memory { get; public set; }
    public TaskOverride Overrides { get; public set; }
    public string PlatformFamily { get; public set; }
    public string PlatformVersion { get; public set; }
    public Nullable`1<DateTime> PullStartedAt { get; public set; }
    public Nullable`1<DateTime> PullStoppedAt { get; public set; }
    public Nullable`1<DateTime> StartedAt { get; public set; }
    public string StartedBy { get; public set; }
    public TaskStopCode StopCode { get; public set; }
    public Nullable`1<DateTime> StoppedAt { get; public set; }
    public string StoppedReason { get; public set; }
    public Nullable`1<DateTime> StoppingAt { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string TaskArn { get; public set; }
    public string TaskDefinitionArn { get; public set; }
    public Nullable`1<long> Version { get; public set; }
    public List`1<Attachment> get_Attachments();
    public void set_Attachments(List`1<Attachment> value);
    internal bool IsSetAttachments();
    public List`1<Attribute> get_Attributes();
    public void set_Attributes(List`1<Attribute> value);
    internal bool IsSetAttributes();
    public string get_AvailabilityZone();
    public void set_AvailabilityZone(string value);
    internal bool IsSetAvailabilityZone();
    public string get_CapacityProviderName();
    public void set_CapacityProviderName(string value);
    internal bool IsSetCapacityProviderName();
    public string get_ClusterArn();
    public void set_ClusterArn(string value);
    internal bool IsSetClusterArn();
    public Connectivity get_Connectivity();
    public void set_Connectivity(Connectivity value);
    internal bool IsSetConnectivity();
    public Nullable`1<DateTime> get_ConnectivityAt();
    public void set_ConnectivityAt(Nullable`1<DateTime> value);
    internal bool IsSetConnectivityAt();
    public string get_ContainerInstanceArn();
    public void set_ContainerInstanceArn(string value);
    internal bool IsSetContainerInstanceArn();
    public List`1<Container> get_Containers();
    public void set_Containers(List`1<Container> value);
    internal bool IsSetContainers();
    public string get_Cpu();
    public void set_Cpu(string value);
    internal bool IsSetCpu();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public string get_DesiredStatus();
    public void set_DesiredStatus(string value);
    internal bool IsSetDesiredStatus();
    public Nullable`1<bool> get_EnableExecuteCommand();
    public void set_EnableExecuteCommand(Nullable`1<bool> value);
    internal bool IsSetEnableExecuteCommand();
    public EphemeralStorage get_EphemeralStorage();
    public void set_EphemeralStorage(EphemeralStorage value);
    internal bool IsSetEphemeralStorage();
    public Nullable`1<DateTime> get_ExecutionStoppedAt();
    public void set_ExecutionStoppedAt(Nullable`1<DateTime> value);
    internal bool IsSetExecutionStoppedAt();
    public TaskEphemeralStorage get_FargateEphemeralStorage();
    public void set_FargateEphemeralStorage(TaskEphemeralStorage value);
    internal bool IsSetFargateEphemeralStorage();
    public string get_Group();
    public void set_Group(string value);
    internal bool IsSetGroup();
    public HealthStatus get_HealthStatus();
    public void set_HealthStatus(HealthStatus value);
    internal bool IsSetHealthStatus();
    public List`1<InferenceAccelerator> get_InferenceAccelerators();
    public void set_InferenceAccelerators(List`1<InferenceAccelerator> value);
    internal bool IsSetInferenceAccelerators();
    public string get_LastStatus();
    public void set_LastStatus(string value);
    internal bool IsSetLastStatus();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public string get_Memory();
    public void set_Memory(string value);
    internal bool IsSetMemory();
    public TaskOverride get_Overrides();
    public void set_Overrides(TaskOverride value);
    internal bool IsSetOverrides();
    public string get_PlatformFamily();
    public void set_PlatformFamily(string value);
    internal bool IsSetPlatformFamily();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public Nullable`1<DateTime> get_PullStartedAt();
    public void set_PullStartedAt(Nullable`1<DateTime> value);
    internal bool IsSetPullStartedAt();
    public Nullable`1<DateTime> get_PullStoppedAt();
    public void set_PullStoppedAt(Nullable`1<DateTime> value);
    internal bool IsSetPullStoppedAt();
    public Nullable`1<DateTime> get_StartedAt();
    public void set_StartedAt(Nullable`1<DateTime> value);
    internal bool IsSetStartedAt();
    public string get_StartedBy();
    public void set_StartedBy(string value);
    internal bool IsSetStartedBy();
    public TaskStopCode get_StopCode();
    public void set_StopCode(TaskStopCode value);
    internal bool IsSetStopCode();
    public Nullable`1<DateTime> get_StoppedAt();
    public void set_StoppedAt(Nullable`1<DateTime> value);
    internal bool IsSetStoppedAt();
    public string get_StoppedReason();
    public void set_StoppedReason(string value);
    internal bool IsSetStoppedReason();
    public Nullable`1<DateTime> get_StoppingAt();
    public void set_StoppingAt(Nullable`1<DateTime> value);
    internal bool IsSetStoppingAt();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TaskArn();
    public void set_TaskArn(string value);
    internal bool IsSetTaskArn();
    public string get_TaskDefinitionArn();
    public void set_TaskDefinitionArn(string value);
    internal bool IsSetTaskDefinitionArn();
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    internal bool IsSetVersion();
}
public class Amazon.ECS.Model.TaskDefinition : object {
    private List`1<string> _compatibilities;
    private List`1<ContainerDefinition> _containerDefinitions;
    private string _cpu;
    private Nullable`1<DateTime> _deregisteredAt;
    private EphemeralStorage _ephemeralStorage;
    private string _executionRoleArn;
    private string _family;
    private List`1<InferenceAccelerator> _inferenceAccelerators;
    private IpcMode _ipcMode;
    private string _memory;
    private NetworkMode _networkMode;
    private PidMode _pidMode;
    private List`1<TaskDefinitionPlacementConstraint> _placementConstraints;
    private ProxyConfiguration _proxyConfiguration;
    private Nullable`1<DateTime> _registeredAt;
    private string _registeredBy;
    private List`1<Attribute> _requiresAttributes;
    private List`1<string> _requiresCompatibilities;
    private Nullable`1<int> _revision;
    private RuntimePlatform _runtimePlatform;
    private TaskDefinitionStatus _status;
    private string _taskDefinitionArn;
    private string _taskRoleArn;
    private List`1<Volume> _volumes;
    public List`1<string> Compatibilities { get; public set; }
    public List`1<ContainerDefinition> ContainerDefinitions { get; public set; }
    public string Cpu { get; public set; }
    public Nullable`1<DateTime> DeregisteredAt { get; public set; }
    public EphemeralStorage EphemeralStorage { get; public set; }
    public string ExecutionRoleArn { get; public set; }
    public string Family { get; public set; }
    public List`1<InferenceAccelerator> InferenceAccelerators { get; public set; }
    public IpcMode IpcMode { get; public set; }
    public string Memory { get; public set; }
    public NetworkMode NetworkMode { get; public set; }
    public PidMode PidMode { get; public set; }
    public List`1<TaskDefinitionPlacementConstraint> PlacementConstraints { get; public set; }
    public ProxyConfiguration ProxyConfiguration { get; public set; }
    public Nullable`1<DateTime> RegisteredAt { get; public set; }
    public string RegisteredBy { get; public set; }
    public List`1<Attribute> RequiresAttributes { get; public set; }
    public List`1<string> RequiresCompatibilities { get; public set; }
    public Nullable`1<int> Revision { get; public set; }
    public RuntimePlatform RuntimePlatform { get; public set; }
    public TaskDefinitionStatus Status { get; public set; }
    public string TaskDefinitionArn { get; public set; }
    public string TaskRoleArn { get; public set; }
    public List`1<Volume> Volumes { get; public set; }
    public List`1<string> get_Compatibilities();
    public void set_Compatibilities(List`1<string> value);
    internal bool IsSetCompatibilities();
    public List`1<ContainerDefinition> get_ContainerDefinitions();
    public void set_ContainerDefinitions(List`1<ContainerDefinition> value);
    internal bool IsSetContainerDefinitions();
    public string get_Cpu();
    public void set_Cpu(string value);
    internal bool IsSetCpu();
    public Nullable`1<DateTime> get_DeregisteredAt();
    public void set_DeregisteredAt(Nullable`1<DateTime> value);
    internal bool IsSetDeregisteredAt();
    public EphemeralStorage get_EphemeralStorage();
    public void set_EphemeralStorage(EphemeralStorage value);
    internal bool IsSetEphemeralStorage();
    public string get_ExecutionRoleArn();
    public void set_ExecutionRoleArn(string value);
    internal bool IsSetExecutionRoleArn();
    public string get_Family();
    public void set_Family(string value);
    internal bool IsSetFamily();
    public List`1<InferenceAccelerator> get_InferenceAccelerators();
    public void set_InferenceAccelerators(List`1<InferenceAccelerator> value);
    internal bool IsSetInferenceAccelerators();
    public IpcMode get_IpcMode();
    public void set_IpcMode(IpcMode value);
    internal bool IsSetIpcMode();
    public string get_Memory();
    public void set_Memory(string value);
    internal bool IsSetMemory();
    public NetworkMode get_NetworkMode();
    public void set_NetworkMode(NetworkMode value);
    internal bool IsSetNetworkMode();
    public PidMode get_PidMode();
    public void set_PidMode(PidMode value);
    internal bool IsSetPidMode();
    public List`1<TaskDefinitionPlacementConstraint> get_PlacementConstraints();
    public void set_PlacementConstraints(List`1<TaskDefinitionPlacementConstraint> value);
    internal bool IsSetPlacementConstraints();
    public ProxyConfiguration get_ProxyConfiguration();
    public void set_ProxyConfiguration(ProxyConfiguration value);
    internal bool IsSetProxyConfiguration();
    public Nullable`1<DateTime> get_RegisteredAt();
    public void set_RegisteredAt(Nullable`1<DateTime> value);
    internal bool IsSetRegisteredAt();
    public string get_RegisteredBy();
    public void set_RegisteredBy(string value);
    internal bool IsSetRegisteredBy();
    public List`1<Attribute> get_RequiresAttributes();
    public void set_RequiresAttributes(List`1<Attribute> value);
    internal bool IsSetRequiresAttributes();
    public List`1<string> get_RequiresCompatibilities();
    public void set_RequiresCompatibilities(List`1<string> value);
    internal bool IsSetRequiresCompatibilities();
    public Nullable`1<int> get_Revision();
    public void set_Revision(Nullable`1<int> value);
    internal bool IsSetRevision();
    public RuntimePlatform get_RuntimePlatform();
    public void set_RuntimePlatform(RuntimePlatform value);
    internal bool IsSetRuntimePlatform();
    public TaskDefinitionStatus get_Status();
    public void set_Status(TaskDefinitionStatus value);
    internal bool IsSetStatus();
    public string get_TaskDefinitionArn();
    public void set_TaskDefinitionArn(string value);
    internal bool IsSetTaskDefinitionArn();
    public string get_TaskRoleArn();
    public void set_TaskRoleArn(string value);
    internal bool IsSetTaskRoleArn();
    public List`1<Volume> get_Volumes();
    public void set_Volumes(List`1<Volume> value);
    internal bool IsSetVolumes();
}
public class Amazon.ECS.Model.TaskDefinitionPlacementConstraint : object {
    private string _expression;
    private TaskDefinitionPlacementConstraintType _type;
    public string Expression { get; public set; }
    public TaskDefinitionPlacementConstraintType Type { get; public set; }
    public string get_Expression();
    public void set_Expression(string value);
    internal bool IsSetExpression();
    public TaskDefinitionPlacementConstraintType get_Type();
    public void set_Type(TaskDefinitionPlacementConstraintType value);
    internal bool IsSetType();
}
public class Amazon.ECS.Model.TaskEphemeralStorage : object {
    private string _kmsKeyId;
    private Nullable`1<int> _sizeInGiB;
    public string KmsKeyId { get; public set; }
    public Nullable`1<int> SizeInGiB { get; public set; }
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public Nullable`1<int> get_SizeInGiB();
    public void set_SizeInGiB(Nullable`1<int> value);
    internal bool IsSetSizeInGiB();
}
public class Amazon.ECS.Model.TaskManagedEBSVolumeConfiguration : object {
    private Nullable`1<bool> _encrypted;
    private TaskFilesystemType _filesystemType;
    private Nullable`1<int> _iops;
    private string _kmsKeyId;
    private string _roleArn;
    private Nullable`1<int> _sizeInGiB;
    private string _snapshotId;
    private List`1<EBSTagSpecification> _tagSpecifications;
    private TaskManagedEBSVolumeTerminationPolicy _terminationPolicy;
    private Nullable`1<int> _throughput;
    private string _volumeType;
    public Nullable`1<bool> Encrypted { get; public set; }
    public TaskFilesystemType FilesystemType { get; public set; }
    public Nullable`1<int> Iops { get; public set; }
    public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    public Nullable`1<int> SizeInGiB { get; public set; }
    public string SnapshotId { get; public set; }
    public List`1<EBSTagSpecification> TagSpecifications { get; public set; }
    public TaskManagedEBSVolumeTerminationPolicy TerminationPolicy { get; public set; }
    public Nullable`1<int> Throughput { get; public set; }
    public string VolumeType { get; public set; }
    public Nullable`1<bool> get_Encrypted();
    public void set_Encrypted(Nullable`1<bool> value);
    internal bool IsSetEncrypted();
    public TaskFilesystemType get_FilesystemType();
    public void set_FilesystemType(TaskFilesystemType value);
    internal bool IsSetFilesystemType();
    public Nullable`1<int> get_Iops();
    public void set_Iops(Nullable`1<int> value);
    internal bool IsSetIops();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public Nullable`1<int> get_SizeInGiB();
    public void set_SizeInGiB(Nullable`1<int> value);
    internal bool IsSetSizeInGiB();
    public string get_SnapshotId();
    public void set_SnapshotId(string value);
    internal bool IsSetSnapshotId();
    public List`1<EBSTagSpecification> get_TagSpecifications();
    public void set_TagSpecifications(List`1<EBSTagSpecification> value);
    internal bool IsSetTagSpecifications();
    public TaskManagedEBSVolumeTerminationPolicy get_TerminationPolicy();
    public void set_TerminationPolicy(TaskManagedEBSVolumeTerminationPolicy value);
    internal bool IsSetTerminationPolicy();
    public Nullable`1<int> get_Throughput();
    public void set_Throughput(Nullable`1<int> value);
    internal bool IsSetThroughput();
    public string get_VolumeType();
    public void set_VolumeType(string value);
    internal bool IsSetVolumeType();
}
public class Amazon.ECS.Model.TaskManagedEBSVolumeTerminationPolicy : object {
    private Nullable`1<bool> _deleteOnTermination;
    [AWSPropertyAttribute]
public Nullable`1<bool> DeleteOnTermination { get; public set; }
    public Nullable`1<bool> get_DeleteOnTermination();
    public void set_DeleteOnTermination(Nullable`1<bool> value);
    internal bool IsSetDeleteOnTermination();
}
public class Amazon.ECS.Model.TaskOverride : object {
    private List`1<ContainerOverride> _containerOverrides;
    private string _cpu;
    private EphemeralStorage _ephemeralStorage;
    private string _executionRoleArn;
    private List`1<InferenceAcceleratorOverride> _inferenceAcceleratorOverrides;
    private string _memory;
    private string _taskRoleArn;
    public List`1<ContainerOverride> ContainerOverrides { get; public set; }
    public string Cpu { get; public set; }
    public EphemeralStorage EphemeralStorage { get; public set; }
    public string ExecutionRoleArn { get; public set; }
    public List`1<InferenceAcceleratorOverride> InferenceAcceleratorOverrides { get; public set; }
    public string Memory { get; public set; }
    public string TaskRoleArn { get; public set; }
    public List`1<ContainerOverride> get_ContainerOverrides();
    public void set_ContainerOverrides(List`1<ContainerOverride> value);
    internal bool IsSetContainerOverrides();
    public string get_Cpu();
    public void set_Cpu(string value);
    internal bool IsSetCpu();
    public EphemeralStorage get_EphemeralStorage();
    public void set_EphemeralStorage(EphemeralStorage value);
    internal bool IsSetEphemeralStorage();
    public string get_ExecutionRoleArn();
    public void set_ExecutionRoleArn(string value);
    internal bool IsSetExecutionRoleArn();
    public List`1<InferenceAcceleratorOverride> get_InferenceAcceleratorOverrides();
    public void set_InferenceAcceleratorOverrides(List`1<InferenceAcceleratorOverride> value);
    internal bool IsSetInferenceAcceleratorOverrides();
    public string get_Memory();
    public void set_Memory(string value);
    internal bool IsSetMemory();
    public string get_TaskRoleArn();
    public void set_TaskRoleArn(string value);
    internal bool IsSetTaskRoleArn();
}
public class Amazon.ECS.Model.TaskSet : object {
    private List`1<CapacityProviderStrategyItem> _capacityProviderStrategy;
    private string _clusterArn;
    private Nullable`1<int> _computedDesiredCount;
    private Nullable`1<DateTime> _createdAt;
    private string _externalId;
    private DeploymentEphemeralStorage _fargateEphemeralStorage;
    private string _id;
    private LaunchType _launchType;
    private List`1<LoadBalancer> _loadBalancers;
    private NetworkConfiguration _networkConfiguration;
    private Nullable`1<int> _pendingCount;
    private string _platformFamily;
    private string _platformVersion;
    private Nullable`1<int> _runningCount;
    private Scale _scale;
    private string _serviceArn;
    private List`1<ServiceRegistry> _serviceRegistries;
    private StabilityStatus _stabilityStatus;
    private Nullable`1<DateTime> _stabilityStatusAt;
    private string _startedBy;
    private string _status;
    private List`1<Tag> _tags;
    private string _taskDefinition;
    private string _taskSetArn;
    private Nullable`1<DateTime> _updatedAt;
    public List`1<CapacityProviderStrategyItem> CapacityProviderStrategy { get; public set; }
    public string ClusterArn { get; public set; }
    public Nullable`1<int> ComputedDesiredCount { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public string ExternalId { get; public set; }
    public DeploymentEphemeralStorage FargateEphemeralStorage { get; public set; }
    public string Id { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public List`1<LoadBalancer> LoadBalancers { get; public set; }
    public NetworkConfiguration NetworkConfiguration { get; public set; }
    public Nullable`1<int> PendingCount { get; public set; }
    public string PlatformFamily { get; public set; }
    public string PlatformVersion { get; public set; }
    public Nullable`1<int> RunningCount { get; public set; }
    public Scale Scale { get; public set; }
    public string ServiceArn { get; public set; }
    public List`1<ServiceRegistry> ServiceRegistries { get; public set; }
    public StabilityStatus StabilityStatus { get; public set; }
    public Nullable`1<DateTime> StabilityStatusAt { get; public set; }
    public string StartedBy { get; public set; }
    public string Status { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string TaskDefinition { get; public set; }
    public string TaskSetArn { get; public set; }
    public Nullable`1<DateTime> UpdatedAt { get; public set; }
    public List`1<CapacityProviderStrategyItem> get_CapacityProviderStrategy();
    public void set_CapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetCapacityProviderStrategy();
    public string get_ClusterArn();
    public void set_ClusterArn(string value);
    internal bool IsSetClusterArn();
    public Nullable`1<int> get_ComputedDesiredCount();
    public void set_ComputedDesiredCount(Nullable`1<int> value);
    internal bool IsSetComputedDesiredCount();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public DeploymentEphemeralStorage get_FargateEphemeralStorage();
    public void set_FargateEphemeralStorage(DeploymentEphemeralStorage value);
    internal bool IsSetFargateEphemeralStorage();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public List`1<LoadBalancer> get_LoadBalancers();
    public void set_LoadBalancers(List`1<LoadBalancer> value);
    internal bool IsSetLoadBalancers();
    public NetworkConfiguration get_NetworkConfiguration();
    public void set_NetworkConfiguration(NetworkConfiguration value);
    internal bool IsSetNetworkConfiguration();
    public Nullable`1<int> get_PendingCount();
    public void set_PendingCount(Nullable`1<int> value);
    internal bool IsSetPendingCount();
    public string get_PlatformFamily();
    public void set_PlatformFamily(string value);
    internal bool IsSetPlatformFamily();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public Nullable`1<int> get_RunningCount();
    public void set_RunningCount(Nullable`1<int> value);
    internal bool IsSetRunningCount();
    public Scale get_Scale();
    public void set_Scale(Scale value);
    internal bool IsSetScale();
    public string get_ServiceArn();
    public void set_ServiceArn(string value);
    internal bool IsSetServiceArn();
    public List`1<ServiceRegistry> get_ServiceRegistries();
    public void set_ServiceRegistries(List`1<ServiceRegistry> value);
    internal bool IsSetServiceRegistries();
    public StabilityStatus get_StabilityStatus();
    public void set_StabilityStatus(StabilityStatus value);
    internal bool IsSetStabilityStatus();
    public Nullable`1<DateTime> get_StabilityStatusAt();
    public void set_StabilityStatusAt(Nullable`1<DateTime> value);
    internal bool IsSetStabilityStatusAt();
    public string get_StartedBy();
    public void set_StartedBy(string value);
    internal bool IsSetStartedBy();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
    public string get_TaskSetArn();
    public void set_TaskSetArn(string value);
    internal bool IsSetTaskSetArn();
    public Nullable`1<DateTime> get_UpdatedAt();
    public void set_UpdatedAt(Nullable`1<DateTime> value);
    internal bool IsSetUpdatedAt();
}
public class Amazon.ECS.Model.TaskSetNotFoundException : AmazonECSException {
    public TaskSetNotFoundException(string message);
    public TaskSetNotFoundException(string message, Exception innerException);
    public TaskSetNotFoundException(Exception innerException);
    public TaskSetNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TaskSetNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.TaskVolumeConfiguration : object {
    private TaskManagedEBSVolumeConfiguration _managedebsVolume;
    private string _name;
    public TaskManagedEBSVolumeConfiguration ManagedEBSVolume { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public TaskManagedEBSVolumeConfiguration get_ManagedEBSVolume();
    public void set_ManagedEBSVolume(TaskManagedEBSVolumeConfiguration value);
    internal bool IsSetManagedEBSVolume();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.ECS.Model.TimeoutConfiguration : object {
    private Nullable`1<int> _idleTimeoutSeconds;
    private Nullable`1<int> _perRequestTimeoutSeconds;
    [AWSPropertyAttribute]
public Nullable`1<int> IdleTimeoutSeconds { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PerRequestTimeoutSeconds { get; public set; }
    public Nullable`1<int> get_IdleTimeoutSeconds();
    public void set_IdleTimeoutSeconds(Nullable`1<int> value);
    internal bool IsSetIdleTimeoutSeconds();
    public Nullable`1<int> get_PerRequestTimeoutSeconds();
    public void set_PerRequestTimeoutSeconds(Nullable`1<int> value);
    internal bool IsSetPerRequestTimeoutSeconds();
}
public class Amazon.ECS.Model.Tmpfs : object {
    private string _containerPath;
    private List`1<string> _mountOptions;
    private Nullable`1<int> _size;
    [AWSPropertyAttribute]
public string ContainerPath { get; public set; }
    public List`1<string> MountOptions { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Size { get; public set; }
    public string get_ContainerPath();
    public void set_ContainerPath(string value);
    internal bool IsSetContainerPath();
    public List`1<string> get_MountOptions();
    public void set_MountOptions(List`1<string> value);
    internal bool IsSetMountOptions();
    public Nullable`1<int> get_Size();
    public void set_Size(Nullable`1<int> value);
    internal bool IsSetSize();
}
public class Amazon.ECS.Model.Ulimit : object {
    private Nullable`1<int> _hardLimit;
    private UlimitName _name;
    private Nullable`1<int> _softLimit;
    [AWSPropertyAttribute]
public Nullable`1<int> HardLimit { get; public set; }
    [AWSPropertyAttribute]
public UlimitName Name { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> SoftLimit { get; public set; }
    public Nullable`1<int> get_HardLimit();
    public void set_HardLimit(Nullable`1<int> value);
    internal bool IsSetHardLimit();
    public UlimitName get_Name();
    public void set_Name(UlimitName value);
    internal bool IsSetName();
    public Nullable`1<int> get_SoftLimit();
    public void set_SoftLimit(Nullable`1<int> value);
    internal bool IsSetSoftLimit();
}
public class Amazon.ECS.Model.UnsupportedFeatureException : AmazonECSException {
    public UnsupportedFeatureException(string message);
    public UnsupportedFeatureException(string message, Exception innerException);
    public UnsupportedFeatureException(Exception innerException);
    public UnsupportedFeatureException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnsupportedFeatureException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.UntagResourceRequest : AmazonECSRequest {
    private string _resourceArn;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.ECS.Model.UntagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.ECS.Model.UpdateCapacityProviderRequest : AmazonECSRequest {
    private AutoScalingGroupProviderUpdate _autoScalingGroupProvider;
    private string _name;
    [AWSPropertyAttribute]
public AutoScalingGroupProviderUpdate AutoScalingGroupProvider { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public AutoScalingGroupProviderUpdate get_AutoScalingGroupProvider();
    public void set_AutoScalingGroupProvider(AutoScalingGroupProviderUpdate value);
    internal bool IsSetAutoScalingGroupProvider();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.ECS.Model.UpdateCapacityProviderResponse : AmazonWebServiceResponse {
    private CapacityProvider _capacityProvider;
    public CapacityProvider CapacityProvider { get; public set; }
    public CapacityProvider get_CapacityProvider();
    public void set_CapacityProvider(CapacityProvider value);
    internal bool IsSetCapacityProvider();
}
public class Amazon.ECS.Model.UpdateClusterRequest : AmazonECSRequest {
    private string _cluster;
    private ClusterConfiguration _configuration;
    private ClusterServiceConnectDefaultsRequest _serviceConnectDefaults;
    private List`1<ClusterSetting> _settings;
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    public ClusterConfiguration Configuration { get; public set; }
    public ClusterServiceConnectDefaultsRequest ServiceConnectDefaults { get; public set; }
    public List`1<ClusterSetting> Settings { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public ClusterConfiguration get_Configuration();
    public void set_Configuration(ClusterConfiguration value);
    internal bool IsSetConfiguration();
    public ClusterServiceConnectDefaultsRequest get_ServiceConnectDefaults();
    public void set_ServiceConnectDefaults(ClusterServiceConnectDefaultsRequest value);
    internal bool IsSetServiceConnectDefaults();
    public List`1<ClusterSetting> get_Settings();
    public void set_Settings(List`1<ClusterSetting> value);
    internal bool IsSetSettings();
}
public class Amazon.ECS.Model.UpdateClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.ECS.Model.UpdateClusterSettingsRequest : AmazonECSRequest {
    private string _cluster;
    private List`1<ClusterSetting> _settings;
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public List`1<ClusterSetting> Settings { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public List`1<ClusterSetting> get_Settings();
    public void set_Settings(List`1<ClusterSetting> value);
    internal bool IsSetSettings();
}
public class Amazon.ECS.Model.UpdateClusterSettingsResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.ECS.Model.UpdateContainerAgentRequest : AmazonECSRequest {
    private string _cluster;
    private string _containerInstance;
    public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public string ContainerInstance { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public string get_ContainerInstance();
    public void set_ContainerInstance(string value);
    internal bool IsSetContainerInstance();
}
public class Amazon.ECS.Model.UpdateContainerAgentResponse : AmazonWebServiceResponse {
    private ContainerInstance _containerInstance;
    public ContainerInstance ContainerInstance { get; public set; }
    public ContainerInstance get_ContainerInstance();
    public void set_ContainerInstance(ContainerInstance value);
    internal bool IsSetContainerInstance();
}
public class Amazon.ECS.Model.UpdateContainerInstancesStateRequest : AmazonECSRequest {
    private string _cluster;
    private List`1<string> _containerInstances;
    private ContainerInstanceStatus _status;
    public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ContainerInstances { get; public set; }
    [AWSPropertyAttribute]
public ContainerInstanceStatus Status { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public List`1<string> get_ContainerInstances();
    public void set_ContainerInstances(List`1<string> value);
    internal bool IsSetContainerInstances();
    public ContainerInstanceStatus get_Status();
    public void set_Status(ContainerInstanceStatus value);
    internal bool IsSetStatus();
}
public class Amazon.ECS.Model.UpdateContainerInstancesStateResponse : AmazonWebServiceResponse {
    private List`1<ContainerInstance> _containerInstances;
    private List`1<Failure> _failures;
    public List`1<ContainerInstance> ContainerInstances { get; public set; }
    public List`1<Failure> Failures { get; public set; }
    public List`1<ContainerInstance> get_ContainerInstances();
    public void set_ContainerInstances(List`1<ContainerInstance> value);
    internal bool IsSetContainerInstances();
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
}
public class Amazon.ECS.Model.UpdateInProgressException : AmazonECSException {
    public UpdateInProgressException(string message);
    public UpdateInProgressException(string message, Exception innerException);
    public UpdateInProgressException(Exception innerException);
    public UpdateInProgressException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UpdateInProgressException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECS.Model.UpdateServicePrimaryTaskSetRequest : AmazonECSRequest {
    private string _cluster;
    private string _primaryTaskSet;
    private string _service;
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public string PrimaryTaskSet { get; public set; }
    [AWSPropertyAttribute]
public string Service { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public string get_PrimaryTaskSet();
    public void set_PrimaryTaskSet(string value);
    internal bool IsSetPrimaryTaskSet();
    public string get_Service();
    public void set_Service(string value);
    internal bool IsSetService();
}
public class Amazon.ECS.Model.UpdateServicePrimaryTaskSetResponse : AmazonWebServiceResponse {
    private TaskSet _taskSet;
    public TaskSet TaskSet { get; public set; }
    public TaskSet get_TaskSet();
    public void set_TaskSet(TaskSet value);
    internal bool IsSetTaskSet();
}
public class Amazon.ECS.Model.UpdateServiceRequest : AmazonECSRequest {
    private List`1<CapacityProviderStrategyItem> _capacityProviderStrategy;
    private string _cluster;
    private DeploymentConfiguration _deploymentConfiguration;
    private Nullable`1<int> _desiredCount;
    private Nullable`1<bool> _enableecsManagedTags;
    private Nullable`1<bool> _enableExecuteCommand;
    private Nullable`1<bool> _forceNewDeployment;
    private Nullable`1<int> _healthCheckGracePeriodSeconds;
    private List`1<LoadBalancer> _loadBalancers;
    private NetworkConfiguration _networkConfiguration;
    private List`1<PlacementConstraint> _placementConstraints;
    private List`1<PlacementStrategy> _placementStrategy;
    private string _platformVersion;
    private PropagateTags _propagateTags;
    private string _service;
    private ServiceConnectConfiguration _serviceConnectConfiguration;
    private List`1<ServiceRegistry> _serviceRegistries;
    private string _taskDefinition;
    private List`1<ServiceVolumeConfiguration> _volumeConfigurations;
    public List`1<CapacityProviderStrategyItem> CapacityProviderStrategy { get; public set; }
    public string Cluster { get; public set; }
    public DeploymentConfiguration DeploymentConfiguration { get; public set; }
    public Nullable`1<int> DesiredCount { get; public set; }
    public Nullable`1<bool> EnableECSManagedTags { get; public set; }
    public Nullable`1<bool> EnableExecuteCommand { get; public set; }
    public Nullable`1<bool> ForceNewDeployment { get; public set; }
    public Nullable`1<int> HealthCheckGracePeriodSeconds { get; public set; }
    public List`1<LoadBalancer> LoadBalancers { get; public set; }
    public NetworkConfiguration NetworkConfiguration { get; public set; }
    public List`1<PlacementConstraint> PlacementConstraints { get; public set; }
    public List`1<PlacementStrategy> PlacementStrategy { get; public set; }
    public string PlatformVersion { get; public set; }
    public PropagateTags PropagateTags { get; public set; }
    [AWSPropertyAttribute]
public string Service { get; public set; }
    public ServiceConnectConfiguration ServiceConnectConfiguration { get; public set; }
    public List`1<ServiceRegistry> ServiceRegistries { get; public set; }
    public string TaskDefinition { get; public set; }
    public List`1<ServiceVolumeConfiguration> VolumeConfigurations { get; public set; }
    public List`1<CapacityProviderStrategyItem> get_CapacityProviderStrategy();
    public void set_CapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetCapacityProviderStrategy();
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public DeploymentConfiguration get_DeploymentConfiguration();
    public void set_DeploymentConfiguration(DeploymentConfiguration value);
    internal bool IsSetDeploymentConfiguration();
    public Nullable`1<int> get_DesiredCount();
    public void set_DesiredCount(Nullable`1<int> value);
    internal bool IsSetDesiredCount();
    public Nullable`1<bool> get_EnableECSManagedTags();
    public void set_EnableECSManagedTags(Nullable`1<bool> value);
    internal bool IsSetEnableECSManagedTags();
    public Nullable`1<bool> get_EnableExecuteCommand();
    public void set_EnableExecuteCommand(Nullable`1<bool> value);
    internal bool IsSetEnableExecuteCommand();
    public Nullable`1<bool> get_ForceNewDeployment();
    public void set_ForceNewDeployment(Nullable`1<bool> value);
    internal bool IsSetForceNewDeployment();
    public Nullable`1<int> get_HealthCheckGracePeriodSeconds();
    public void set_HealthCheckGracePeriodSeconds(Nullable`1<int> value);
    internal bool IsSetHealthCheckGracePeriodSeconds();
    public List`1<LoadBalancer> get_LoadBalancers();
    public void set_LoadBalancers(List`1<LoadBalancer> value);
    internal bool IsSetLoadBalancers();
    public NetworkConfiguration get_NetworkConfiguration();
    public void set_NetworkConfiguration(NetworkConfiguration value);
    internal bool IsSetNetworkConfiguration();
    public List`1<PlacementConstraint> get_PlacementConstraints();
    public void set_PlacementConstraints(List`1<PlacementConstraint> value);
    internal bool IsSetPlacementConstraints();
    public List`1<PlacementStrategy> get_PlacementStrategy();
    public void set_PlacementStrategy(List`1<PlacementStrategy> value);
    internal bool IsSetPlacementStrategy();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public PropagateTags get_PropagateTags();
    public void set_PropagateTags(PropagateTags value);
    internal bool IsSetPropagateTags();
    public string get_Service();
    public void set_Service(string value);
    internal bool IsSetService();
    public ServiceConnectConfiguration get_ServiceConnectConfiguration();
    public void set_ServiceConnectConfiguration(ServiceConnectConfiguration value);
    internal bool IsSetServiceConnectConfiguration();
    public List`1<ServiceRegistry> get_ServiceRegistries();
    public void set_ServiceRegistries(List`1<ServiceRegistry> value);
    internal bool IsSetServiceRegistries();
    public string get_TaskDefinition();
    public void set_TaskDefinition(string value);
    internal bool IsSetTaskDefinition();
    public List`1<ServiceVolumeConfiguration> get_VolumeConfigurations();
    public void set_VolumeConfigurations(List`1<ServiceVolumeConfiguration> value);
    internal bool IsSetVolumeConfigurations();
}
public class Amazon.ECS.Model.UpdateServiceResponse : AmazonWebServiceResponse {
    private Service _service;
    public Service Service { get; public set; }
    public Service get_Service();
    public void set_Service(Service value);
    internal bool IsSetService();
}
public class Amazon.ECS.Model.UpdateTaskProtectionRequest : AmazonECSRequest {
    private string _cluster;
    private Nullable`1<int> _expiresInMinutes;
    private Nullable`1<bool> _protectionEnabled;
    private List`1<string> _tasks;
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    public Nullable`1<int> ExpiresInMinutes { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> ProtectionEnabled { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Tasks { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public Nullable`1<int> get_ExpiresInMinutes();
    public void set_ExpiresInMinutes(Nullable`1<int> value);
    internal bool IsSetExpiresInMinutes();
    public Nullable`1<bool> get_ProtectionEnabled();
    public void set_ProtectionEnabled(Nullable`1<bool> value);
    internal bool IsSetProtectionEnabled();
    public List`1<string> get_Tasks();
    public void set_Tasks(List`1<string> value);
    internal bool IsSetTasks();
}
public class Amazon.ECS.Model.UpdateTaskProtectionResponse : AmazonWebServiceResponse {
    private List`1<Failure> _failures;
    private List`1<ProtectedTask> _protectedTasks;
    public List`1<Failure> Failures { get; public set; }
    public List`1<ProtectedTask> ProtectedTasks { get; public set; }
    public List`1<Failure> get_Failures();
    public void set_Failures(List`1<Failure> value);
    internal bool IsSetFailures();
    public List`1<ProtectedTask> get_ProtectedTasks();
    public void set_ProtectedTasks(List`1<ProtectedTask> value);
    internal bool IsSetProtectedTasks();
}
public class Amazon.ECS.Model.UpdateTaskSetRequest : AmazonECSRequest {
    private string _cluster;
    private Scale _scale;
    private string _service;
    private string _taskSet;
    [AWSPropertyAttribute]
public string Cluster { get; public set; }
    [AWSPropertyAttribute]
public Scale Scale { get; public set; }
    [AWSPropertyAttribute]
public string Service { get; public set; }
    [AWSPropertyAttribute]
public string TaskSet { get; public set; }
    public string get_Cluster();
    public void set_Cluster(string value);
    internal bool IsSetCluster();
    public Scale get_Scale();
    public void set_Scale(Scale value);
    internal bool IsSetScale();
    public string get_Service();
    public void set_Service(string value);
    internal bool IsSetService();
    public string get_TaskSet();
    public void set_TaskSet(string value);
    internal bool IsSetTaskSet();
}
public class Amazon.ECS.Model.UpdateTaskSetResponse : AmazonWebServiceResponse {
    private TaskSet _taskSet;
    public TaskSet TaskSet { get; public set; }
    public TaskSet get_TaskSet();
    public void set_TaskSet(TaskSet value);
    internal bool IsSetTaskSet();
}
public class Amazon.ECS.Model.VersionInfo : object {
    private string _agentHash;
    private string _agentVersion;
    private string _dockerVersion;
    public string AgentHash { get; public set; }
    public string AgentVersion { get; public set; }
    public string DockerVersion { get; public set; }
    public string get_AgentHash();
    public void set_AgentHash(string value);
    internal bool IsSetAgentHash();
    public string get_AgentVersion();
    public void set_AgentVersion(string value);
    internal bool IsSetAgentVersion();
    public string get_DockerVersion();
    public void set_DockerVersion(string value);
    internal bool IsSetDockerVersion();
}
public class Amazon.ECS.Model.Volume : object {
    private Nullable`1<bool> _configuredAtLaunch;
    private DockerVolumeConfiguration _dockerVolumeConfiguration;
    private EFSVolumeConfiguration _efsVolumeConfiguration;
    private FSxWindowsFileServerVolumeConfiguration _fsxWindowsFileServerVolumeConfiguration;
    private HostVolumeProperties _host;
    private string _name;
    public Nullable`1<bool> ConfiguredAtLaunch { get; public set; }
    public DockerVolumeConfiguration DockerVolumeConfiguration { get; public set; }
    public EFSVolumeConfiguration EfsVolumeConfiguration { get; public set; }
    public FSxWindowsFileServerVolumeConfiguration FsxWindowsFileServerVolumeConfiguration { get; public set; }
    public HostVolumeProperties Host { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<bool> get_ConfiguredAtLaunch();
    public void set_ConfiguredAtLaunch(Nullable`1<bool> value);
    internal bool IsSetConfiguredAtLaunch();
    public DockerVolumeConfiguration get_DockerVolumeConfiguration();
    public void set_DockerVolumeConfiguration(DockerVolumeConfiguration value);
    internal bool IsSetDockerVolumeConfiguration();
    public EFSVolumeConfiguration get_EfsVolumeConfiguration();
    public void set_EfsVolumeConfiguration(EFSVolumeConfiguration value);
    internal bool IsSetEfsVolumeConfiguration();
    public FSxWindowsFileServerVolumeConfiguration get_FsxWindowsFileServerVolumeConfiguration();
    public void set_FsxWindowsFileServerVolumeConfiguration(FSxWindowsFileServerVolumeConfiguration value);
    internal bool IsSetFsxWindowsFileServerVolumeConfiguration();
    public HostVolumeProperties get_Host();
    public void set_Host(HostVolumeProperties value);
    internal bool IsSetHost();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.ECS.Model.VolumeFrom : object {
    private Nullable`1<bool> _readOnly;
    private string _sourceContainer;
    public Nullable`1<bool> ReadOnly { get; public set; }
    public string SourceContainer { get; public set; }
    public Nullable`1<bool> get_ReadOnly();
    public void set_ReadOnly(Nullable`1<bool> value);
    internal bool IsSetReadOnly();
    public string get_SourceContainer();
    public void set_SourceContainer(string value);
    internal bool IsSetSourceContainer();
}
public class Amazon.ECS.NetworkMode : ConstantClass {
    public static NetworkMode Awsvpc;
    public static NetworkMode Bridge;
    public static NetworkMode Host;
    public static NetworkMode None;
    public NetworkMode(string value);
    private static NetworkMode();
    public static NetworkMode FindValue(string value);
    public static NetworkMode op_Implicit(string value);
}
public class Amazon.ECS.OSFamily : ConstantClass {
    public static OSFamily LINUX;
    public static OSFamily WINDOWS_SERVER_2004_CORE;
    public static OSFamily WINDOWS_SERVER_2016_FULL;
    public static OSFamily WINDOWS_SERVER_2019_CORE;
    public static OSFamily WINDOWS_SERVER_2019_FULL;
    public static OSFamily WINDOWS_SERVER_2022_CORE;
    public static OSFamily WINDOWS_SERVER_2022_FULL;
    public static OSFamily WINDOWS_SERVER_20H2_CORE;
    public OSFamily(string value);
    private static OSFamily();
    public static OSFamily FindValue(string value);
    public static OSFamily op_Implicit(string value);
}
public class Amazon.ECS.PidMode : ConstantClass {
    public static PidMode Host;
    public static PidMode Task;
    public PidMode(string value);
    private static PidMode();
    public static PidMode FindValue(string value);
    public static PidMode op_Implicit(string value);
}
public class Amazon.ECS.PlacementConstraintType : ConstantClass {
    public static PlacementConstraintType DistinctInstance;
    public static PlacementConstraintType MemberOf;
    public PlacementConstraintType(string value);
    private static PlacementConstraintType();
    public static PlacementConstraintType FindValue(string value);
    public static PlacementConstraintType op_Implicit(string value);
}
public class Amazon.ECS.PlacementStrategyType : ConstantClass {
    public static PlacementStrategyType Binpack;
    public static PlacementStrategyType Random;
    public static PlacementStrategyType Spread;
    public PlacementStrategyType(string value);
    private static PlacementStrategyType();
    public static PlacementStrategyType FindValue(string value);
    public static PlacementStrategyType op_Implicit(string value);
}
public class Amazon.ECS.PlatformDeviceType : ConstantClass {
    public static PlatformDeviceType GPU;
    public PlatformDeviceType(string value);
    private static PlatformDeviceType();
    public static PlatformDeviceType FindValue(string value);
    public static PlatformDeviceType op_Implicit(string value);
}
public class Amazon.ECS.PropagateTags : ConstantClass {
    public static PropagateTags NONE;
    public static PropagateTags SERVICE;
    public static PropagateTags TASK_DEFINITION;
    public PropagateTags(string value);
    private static PropagateTags();
    public static PropagateTags FindValue(string value);
    public static PropagateTags op_Implicit(string value);
}
public class Amazon.ECS.ProxyConfigurationType : ConstantClass {
    public static ProxyConfigurationType APPMESH;
    public ProxyConfigurationType(string value);
    private static ProxyConfigurationType();
    public static ProxyConfigurationType FindValue(string value);
    public static ProxyConfigurationType op_Implicit(string value);
}
public class Amazon.ECS.ResourceType : ConstantClass {
    public static ResourceType GPU;
    public static ResourceType InferenceAccelerator;
    public ResourceType(string value);
    private static ResourceType();
    public static ResourceType FindValue(string value);
    public static ResourceType op_Implicit(string value);
}
public class Amazon.ECS.ScaleUnit : ConstantClass {
    public static ScaleUnit PERCENT;
    public ScaleUnit(string value);
    private static ScaleUnit();
    public static ScaleUnit FindValue(string value);
    public static ScaleUnit op_Implicit(string value);
}
public class Amazon.ECS.SchedulingStrategy : ConstantClass {
    public static SchedulingStrategy DAEMON;
    public static SchedulingStrategy REPLICA;
    public SchedulingStrategy(string value);
    private static SchedulingStrategy();
    public static SchedulingStrategy FindValue(string value);
    public static SchedulingStrategy op_Implicit(string value);
}
public class Amazon.ECS.Scope : ConstantClass {
    public static Scope Shared;
    public static Scope Task;
    public Scope(string value);
    private static Scope();
    public static Scope FindValue(string value);
    public static Scope op_Implicit(string value);
}
public class Amazon.ECS.ServiceField : ConstantClass {
    public static ServiceField TAGS;
    public ServiceField(string value);
    private static ServiceField();
    public static ServiceField FindValue(string value);
    public static ServiceField op_Implicit(string value);
}
public class Amazon.ECS.SettingName : ConstantClass {
    public static SettingName AwsvpcTrunking;
    public static SettingName ContainerInsights;
    public static SettingName ContainerInstanceLongArnFormat;
    public static SettingName FargateFIPSMode;
    public static SettingName FargateTaskRetirementWaitPeriod;
    public static SettingName GuardDutyActivate;
    public static SettingName ServiceLongArnFormat;
    public static SettingName TagResourceAuthorization;
    public static SettingName TaskLongArnFormat;
    public SettingName(string value);
    private static SettingName();
    public static SettingName FindValue(string value);
    public static SettingName op_Implicit(string value);
}
public class Amazon.ECS.SettingType : ConstantClass {
    public static SettingType Aws_managed;
    public static SettingType User;
    public SettingType(string value);
    private static SettingType();
    public static SettingType FindValue(string value);
    public static SettingType op_Implicit(string value);
}
public class Amazon.ECS.SortOrder : ConstantClass {
    public static SortOrder ASC;
    public static SortOrder DESC;
    public SortOrder(string value);
    private static SortOrder();
    public static SortOrder FindValue(string value);
    public static SortOrder op_Implicit(string value);
}
public class Amazon.ECS.StabilityStatus : ConstantClass {
    public static StabilityStatus STABILIZING;
    public static StabilityStatus STEADY_STATE;
    public StabilityStatus(string value);
    private static StabilityStatus();
    public static StabilityStatus FindValue(string value);
    public static StabilityStatus op_Implicit(string value);
}
public class Amazon.ECS.TargetType : ConstantClass {
    public static TargetType ContainerInstance;
    public TargetType(string value);
    private static TargetType();
    public static TargetType FindValue(string value);
    public static TargetType op_Implicit(string value);
}
public class Amazon.ECS.TaskDefinitionFamilyStatus : ConstantClass {
    public static TaskDefinitionFamilyStatus ACTIVE;
    public static TaskDefinitionFamilyStatus ALL;
    public static TaskDefinitionFamilyStatus INACTIVE;
    public TaskDefinitionFamilyStatus(string value);
    private static TaskDefinitionFamilyStatus();
    public static TaskDefinitionFamilyStatus FindValue(string value);
    public static TaskDefinitionFamilyStatus op_Implicit(string value);
}
public class Amazon.ECS.TaskDefinitionField : ConstantClass {
    public static TaskDefinitionField TAGS;
    public TaskDefinitionField(string value);
    private static TaskDefinitionField();
    public static TaskDefinitionField FindValue(string value);
    public static TaskDefinitionField op_Implicit(string value);
}
public class Amazon.ECS.TaskDefinitionPlacementConstraintType : ConstantClass {
    public static TaskDefinitionPlacementConstraintType MemberOf;
    public TaskDefinitionPlacementConstraintType(string value);
    private static TaskDefinitionPlacementConstraintType();
    public static TaskDefinitionPlacementConstraintType FindValue(string value);
    public static TaskDefinitionPlacementConstraintType op_Implicit(string value);
}
public class Amazon.ECS.TaskDefinitionStatus : ConstantClass {
    public static TaskDefinitionStatus ACTIVE;
    public static TaskDefinitionStatus DELETE_IN_PROGRESS;
    public static TaskDefinitionStatus INACTIVE;
    public TaskDefinitionStatus(string value);
    private static TaskDefinitionStatus();
    public static TaskDefinitionStatus FindValue(string value);
    public static TaskDefinitionStatus op_Implicit(string value);
}
public class Amazon.ECS.TaskField : ConstantClass {
    public static TaskField TAGS;
    public TaskField(string value);
    private static TaskField();
    public static TaskField FindValue(string value);
    public static TaskField op_Implicit(string value);
}
public class Amazon.ECS.TaskFilesystemType : ConstantClass {
    public static TaskFilesystemType Ext3;
    public static TaskFilesystemType Ext4;
    public static TaskFilesystemType Xfs;
    public TaskFilesystemType(string value);
    private static TaskFilesystemType();
    public static TaskFilesystemType FindValue(string value);
    public static TaskFilesystemType op_Implicit(string value);
}
public class Amazon.ECS.TaskSetField : ConstantClass {
    public static TaskSetField TAGS;
    public TaskSetField(string value);
    private static TaskSetField();
    public static TaskSetField FindValue(string value);
    public static TaskSetField op_Implicit(string value);
}
public class Amazon.ECS.TaskStopCode : ConstantClass {
    public static TaskStopCode EssentialContainerExited;
    public static TaskStopCode ServiceSchedulerInitiated;
    public static TaskStopCode SpotInterruption;
    public static TaskStopCode TaskFailedToStart;
    public static TaskStopCode TerminationNotice;
    public static TaskStopCode UserInitiated;
    public TaskStopCode(string value);
    private static TaskStopCode();
    public static TaskStopCode FindValue(string value);
    public static TaskStopCode op_Implicit(string value);
}
public class Amazon.ECS.TransportProtocol : ConstantClass {
    public static TransportProtocol Tcp;
    public static TransportProtocol Udp;
    public TransportProtocol(string value);
    private static TransportProtocol();
    public static TransportProtocol FindValue(string value);
    public static TransportProtocol op_Implicit(string value);
}
public class Amazon.ECS.UlimitName : ConstantClass {
    public static UlimitName Core;
    public static UlimitName Cpu;
    public static UlimitName Data;
    public static UlimitName Fsize;
    public static UlimitName Locks;
    public static UlimitName Memlock;
    public static UlimitName Msgqueue;
    public static UlimitName Nice;
    public static UlimitName Nofile;
    public static UlimitName Nproc;
    public static UlimitName Rss;
    public static UlimitName Rtprio;
    public static UlimitName Rttime;
    public static UlimitName Sigpending;
    public static UlimitName Stack;
    public UlimitName(string value);
    private static UlimitName();
    public static UlimitName FindValue(string value);
    public static UlimitName op_Implicit(string value);
}
