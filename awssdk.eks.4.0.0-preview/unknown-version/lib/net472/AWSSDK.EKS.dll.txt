public class Amazon.EKS.AccessScopeType : ConstantClass {
    public static AccessScopeType Cluster;
    public static AccessScopeType Namespace;
    public AccessScopeType(string value);
    private static AccessScopeType();
    public static AccessScopeType FindValue(string value);
    public static AccessScopeType op_Implicit(string value);
}
public class Amazon.EKS.AddonIssueCode : ConstantClass {
    public static AddonIssueCode AccessDenied;
    public static AddonIssueCode AddonPermissionFailure;
    public static AddonIssueCode AddonSubscriptionNeeded;
    public static AddonIssueCode AdmissionRequestDenied;
    public static AddonIssueCode ClusterUnreachable;
    public static AddonIssueCode ConfigurationConflict;
    public static AddonIssueCode InsufficientNumberOfReplicas;
    public static AddonIssueCode InternalFailure;
    public static AddonIssueCode K8sResourceNotFound;
    public static AddonIssueCode UnsupportedAddonModification;
    public AddonIssueCode(string value);
    private static AddonIssueCode();
    public static AddonIssueCode FindValue(string value);
    public static AddonIssueCode op_Implicit(string value);
}
public class Amazon.EKS.AddonStatus : ConstantClass {
    public static AddonStatus ACTIVE;
    public static AddonStatus CREATE_FAILED;
    public static AddonStatus CREATING;
    public static AddonStatus DEGRADED;
    public static AddonStatus DELETE_FAILED;
    public static AddonStatus DELETING;
    public static AddonStatus UPDATE_FAILED;
    public static AddonStatus UPDATING;
    public AddonStatus(string value);
    private static AddonStatus();
    public static AddonStatus FindValue(string value);
    public static AddonStatus op_Implicit(string value);
}
public class Amazon.EKS.AmazonEKSClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IEKSPaginatorFactory _paginators;
    public IEKSPaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonEKSClient(RegionEndpoint region);
    public AmazonEKSClient(AmazonEKSConfig config);
    public AmazonEKSClient(AWSCredentials credentials);
    public AmazonEKSClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonEKSClient(AWSCredentials credentials, AmazonEKSConfig clientConfig);
    public AmazonEKSClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonEKSClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonEKSClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonEKSConfig clientConfig);
    public AmazonEKSClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonEKSClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonEKSClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonEKSConfig clientConfig);
    private static AmazonEKSClient();
    public sealed virtual IEKSPaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    public virtual AssociateAccessPolicyResponse AssociateAccessPolicy(AssociateAccessPolicyRequest request);
    public virtual Task`1<AssociateAccessPolicyResponse> AssociateAccessPolicyAsync(AssociateAccessPolicyRequest request, CancellationToken cancellationToken);
    public virtual AssociateEncryptionConfigResponse AssociateEncryptionConfig(AssociateEncryptionConfigRequest request);
    public virtual Task`1<AssociateEncryptionConfigResponse> AssociateEncryptionConfigAsync(AssociateEncryptionConfigRequest request, CancellationToken cancellationToken);
    public virtual AssociateIdentityProviderConfigResponse AssociateIdentityProviderConfig(AssociateIdentityProviderConfigRequest request);
    public virtual Task`1<AssociateIdentityProviderConfigResponse> AssociateIdentityProviderConfigAsync(AssociateIdentityProviderConfigRequest request, CancellationToken cancellationToken);
    public virtual CreateAccessEntryResponse CreateAccessEntry(CreateAccessEntryRequest request);
    public virtual Task`1<CreateAccessEntryResponse> CreateAccessEntryAsync(CreateAccessEntryRequest request, CancellationToken cancellationToken);
    public virtual CreateAddonResponse CreateAddon(CreateAddonRequest request);
    public virtual Task`1<CreateAddonResponse> CreateAddonAsync(CreateAddonRequest request, CancellationToken cancellationToken);
    public virtual CreateClusterResponse CreateCluster(CreateClusterRequest request);
    public virtual Task`1<CreateClusterResponse> CreateClusterAsync(CreateClusterRequest request, CancellationToken cancellationToken);
    public virtual CreateEksAnywhereSubscriptionResponse CreateEksAnywhereSubscription(CreateEksAnywhereSubscriptionRequest request);
    public virtual Task`1<CreateEksAnywhereSubscriptionResponse> CreateEksAnywhereSubscriptionAsync(CreateEksAnywhereSubscriptionRequest request, CancellationToken cancellationToken);
    public virtual CreateFargateProfileResponse CreateFargateProfile(CreateFargateProfileRequest request);
    public virtual Task`1<CreateFargateProfileResponse> CreateFargateProfileAsync(CreateFargateProfileRequest request, CancellationToken cancellationToken);
    public virtual CreateNodegroupResponse CreateNodegroup(CreateNodegroupRequest request);
    public virtual Task`1<CreateNodegroupResponse> CreateNodegroupAsync(CreateNodegroupRequest request, CancellationToken cancellationToken);
    public virtual CreatePodIdentityAssociationResponse CreatePodIdentityAssociation(CreatePodIdentityAssociationRequest request);
    public virtual Task`1<CreatePodIdentityAssociationResponse> CreatePodIdentityAssociationAsync(CreatePodIdentityAssociationRequest request, CancellationToken cancellationToken);
    public virtual DeleteAccessEntryResponse DeleteAccessEntry(DeleteAccessEntryRequest request);
    public virtual Task`1<DeleteAccessEntryResponse> DeleteAccessEntryAsync(DeleteAccessEntryRequest request, CancellationToken cancellationToken);
    public virtual DeleteAddonResponse DeleteAddon(DeleteAddonRequest request);
    public virtual Task`1<DeleteAddonResponse> DeleteAddonAsync(DeleteAddonRequest request, CancellationToken cancellationToken);
    public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request);
    public virtual Task`1<DeleteClusterResponse> DeleteClusterAsync(DeleteClusterRequest request, CancellationToken cancellationToken);
    public virtual DeleteEksAnywhereSubscriptionResponse DeleteEksAnywhereSubscription(DeleteEksAnywhereSubscriptionRequest request);
    public virtual Task`1<DeleteEksAnywhereSubscriptionResponse> DeleteEksAnywhereSubscriptionAsync(DeleteEksAnywhereSubscriptionRequest request, CancellationToken cancellationToken);
    public virtual DeleteFargateProfileResponse DeleteFargateProfile(DeleteFargateProfileRequest request);
    public virtual Task`1<DeleteFargateProfileResponse> DeleteFargateProfileAsync(DeleteFargateProfileRequest request, CancellationToken cancellationToken);
    public virtual DeleteNodegroupResponse DeleteNodegroup(DeleteNodegroupRequest request);
    public virtual Task`1<DeleteNodegroupResponse> DeleteNodegroupAsync(DeleteNodegroupRequest request, CancellationToken cancellationToken);
    public virtual DeletePodIdentityAssociationResponse DeletePodIdentityAssociation(DeletePodIdentityAssociationRequest request);
    public virtual Task`1<DeletePodIdentityAssociationResponse> DeletePodIdentityAssociationAsync(DeletePodIdentityAssociationRequest request, CancellationToken cancellationToken);
    public virtual DeregisterClusterResponse DeregisterCluster(DeregisterClusterRequest request);
    public virtual Task`1<DeregisterClusterResponse> DeregisterClusterAsync(DeregisterClusterRequest request, CancellationToken cancellationToken);
    public virtual DescribeAccessEntryResponse DescribeAccessEntry(DescribeAccessEntryRequest request);
    public virtual Task`1<DescribeAccessEntryResponse> DescribeAccessEntryAsync(DescribeAccessEntryRequest request, CancellationToken cancellationToken);
    public virtual DescribeAddonResponse DescribeAddon(DescribeAddonRequest request);
    public virtual Task`1<DescribeAddonResponse> DescribeAddonAsync(DescribeAddonRequest request, CancellationToken cancellationToken);
    public virtual DescribeAddonConfigurationResponse DescribeAddonConfiguration(DescribeAddonConfigurationRequest request);
    public virtual Task`1<DescribeAddonConfigurationResponse> DescribeAddonConfigurationAsync(DescribeAddonConfigurationRequest request, CancellationToken cancellationToken);
    public virtual DescribeAddonVersionsResponse DescribeAddonVersions(DescribeAddonVersionsRequest request);
    public virtual Task`1<DescribeAddonVersionsResponse> DescribeAddonVersionsAsync(DescribeAddonVersionsRequest request, CancellationToken cancellationToken);
    public virtual DescribeClusterResponse DescribeCluster(DescribeClusterRequest request);
    public virtual Task`1<DescribeClusterResponse> DescribeClusterAsync(DescribeClusterRequest request, CancellationToken cancellationToken);
    public virtual DescribeEksAnywhereSubscriptionResponse DescribeEksAnywhereSubscription(DescribeEksAnywhereSubscriptionRequest request);
    public virtual Task`1<DescribeEksAnywhereSubscriptionResponse> DescribeEksAnywhereSubscriptionAsync(DescribeEksAnywhereSubscriptionRequest request, CancellationToken cancellationToken);
    public virtual DescribeFargateProfileResponse DescribeFargateProfile(DescribeFargateProfileRequest request);
    public virtual Task`1<DescribeFargateProfileResponse> DescribeFargateProfileAsync(DescribeFargateProfileRequest request, CancellationToken cancellationToken);
    public virtual DescribeIdentityProviderConfigResponse DescribeIdentityProviderConfig(DescribeIdentityProviderConfigRequest request);
    public virtual Task`1<DescribeIdentityProviderConfigResponse> DescribeIdentityProviderConfigAsync(DescribeIdentityProviderConfigRequest request, CancellationToken cancellationToken);
    public virtual DescribeInsightResponse DescribeInsight(DescribeInsightRequest request);
    public virtual Task`1<DescribeInsightResponse> DescribeInsightAsync(DescribeInsightRequest request, CancellationToken cancellationToken);
    public virtual DescribeNodegroupResponse DescribeNodegroup(DescribeNodegroupRequest request);
    public virtual Task`1<DescribeNodegroupResponse> DescribeNodegroupAsync(DescribeNodegroupRequest request, CancellationToken cancellationToken);
    public virtual DescribePodIdentityAssociationResponse DescribePodIdentityAssociation(DescribePodIdentityAssociationRequest request);
    public virtual Task`1<DescribePodIdentityAssociationResponse> DescribePodIdentityAssociationAsync(DescribePodIdentityAssociationRequest request, CancellationToken cancellationToken);
    public virtual DescribeUpdateResponse DescribeUpdate(DescribeUpdateRequest request);
    public virtual Task`1<DescribeUpdateResponse> DescribeUpdateAsync(DescribeUpdateRequest request, CancellationToken cancellationToken);
    public virtual DisassociateAccessPolicyResponse DisassociateAccessPolicy(DisassociateAccessPolicyRequest request);
    public virtual Task`1<DisassociateAccessPolicyResponse> DisassociateAccessPolicyAsync(DisassociateAccessPolicyRequest request, CancellationToken cancellationToken);
    public virtual DisassociateIdentityProviderConfigResponse DisassociateIdentityProviderConfig(DisassociateIdentityProviderConfigRequest request);
    public virtual Task`1<DisassociateIdentityProviderConfigResponse> DisassociateIdentityProviderConfigAsync(DisassociateIdentityProviderConfigRequest request, CancellationToken cancellationToken);
    public virtual ListAccessEntriesResponse ListAccessEntries(ListAccessEntriesRequest request);
    public virtual Task`1<ListAccessEntriesResponse> ListAccessEntriesAsync(ListAccessEntriesRequest request, CancellationToken cancellationToken);
    public virtual ListAccessPoliciesResponse ListAccessPolicies(ListAccessPoliciesRequest request);
    public virtual Task`1<ListAccessPoliciesResponse> ListAccessPoliciesAsync(ListAccessPoliciesRequest request, CancellationToken cancellationToken);
    public virtual ListAddonsResponse ListAddons(ListAddonsRequest request);
    public virtual Task`1<ListAddonsResponse> ListAddonsAsync(ListAddonsRequest request, CancellationToken cancellationToken);
    public virtual ListAssociatedAccessPoliciesResponse ListAssociatedAccessPolicies(ListAssociatedAccessPoliciesRequest request);
    public virtual Task`1<ListAssociatedAccessPoliciesResponse> ListAssociatedAccessPoliciesAsync(ListAssociatedAccessPoliciesRequest request, CancellationToken cancellationToken);
    public virtual ListClustersResponse ListClusters(ListClustersRequest request);
    public virtual Task`1<ListClustersResponse> ListClustersAsync(ListClustersRequest request, CancellationToken cancellationToken);
    public virtual ListEksAnywhereSubscriptionsResponse ListEksAnywhereSubscriptions(ListEksAnywhereSubscriptionsRequest request);
    public virtual Task`1<ListEksAnywhereSubscriptionsResponse> ListEksAnywhereSubscriptionsAsync(ListEksAnywhereSubscriptionsRequest request, CancellationToken cancellationToken);
    public virtual ListFargateProfilesResponse ListFargateProfiles(ListFargateProfilesRequest request);
    public virtual Task`1<ListFargateProfilesResponse> ListFargateProfilesAsync(ListFargateProfilesRequest request, CancellationToken cancellationToken);
    public virtual ListIdentityProviderConfigsResponse ListIdentityProviderConfigs(ListIdentityProviderConfigsRequest request);
    public virtual Task`1<ListIdentityProviderConfigsResponse> ListIdentityProviderConfigsAsync(ListIdentityProviderConfigsRequest request, CancellationToken cancellationToken);
    public virtual ListInsightsResponse ListInsights(ListInsightsRequest request);
    public virtual Task`1<ListInsightsResponse> ListInsightsAsync(ListInsightsRequest request, CancellationToken cancellationToken);
    public virtual ListNodegroupsResponse ListNodegroups(ListNodegroupsRequest request);
    public virtual Task`1<ListNodegroupsResponse> ListNodegroupsAsync(ListNodegroupsRequest request, CancellationToken cancellationToken);
    public virtual ListPodIdentityAssociationsResponse ListPodIdentityAssociations(ListPodIdentityAssociationsRequest request);
    public virtual Task`1<ListPodIdentityAssociationsResponse> ListPodIdentityAssociationsAsync(ListPodIdentityAssociationsRequest request, CancellationToken cancellationToken);
    public virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public virtual ListUpdatesResponse ListUpdates(ListUpdatesRequest request);
    public virtual Task`1<ListUpdatesResponse> ListUpdatesAsync(ListUpdatesRequest request, CancellationToken cancellationToken);
    public virtual RegisterClusterResponse RegisterCluster(RegisterClusterRequest request);
    public virtual Task`1<RegisterClusterResponse> RegisterClusterAsync(RegisterClusterRequest request, CancellationToken cancellationToken);
    public virtual TagResourceResponse TagResource(TagResourceRequest request);
    public virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    public virtual UntagResourceResponse UntagResource(UntagResourceRequest request);
    public virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    public virtual UpdateAccessEntryResponse UpdateAccessEntry(UpdateAccessEntryRequest request);
    public virtual Task`1<UpdateAccessEntryResponse> UpdateAccessEntryAsync(UpdateAccessEntryRequest request, CancellationToken cancellationToken);
    public virtual UpdateAddonResponse UpdateAddon(UpdateAddonRequest request);
    public virtual Task`1<UpdateAddonResponse> UpdateAddonAsync(UpdateAddonRequest request, CancellationToken cancellationToken);
    public virtual UpdateClusterConfigResponse UpdateClusterConfig(UpdateClusterConfigRequest request);
    public virtual Task`1<UpdateClusterConfigResponse> UpdateClusterConfigAsync(UpdateClusterConfigRequest request, CancellationToken cancellationToken);
    public virtual UpdateClusterVersionResponse UpdateClusterVersion(UpdateClusterVersionRequest request);
    public virtual Task`1<UpdateClusterVersionResponse> UpdateClusterVersionAsync(UpdateClusterVersionRequest request, CancellationToken cancellationToken);
    public virtual UpdateEksAnywhereSubscriptionResponse UpdateEksAnywhereSubscription(UpdateEksAnywhereSubscriptionRequest request);
    public virtual Task`1<UpdateEksAnywhereSubscriptionResponse> UpdateEksAnywhereSubscriptionAsync(UpdateEksAnywhereSubscriptionRequest request, CancellationToken cancellationToken);
    public virtual UpdateNodegroupConfigResponse UpdateNodegroupConfig(UpdateNodegroupConfigRequest request);
    public virtual Task`1<UpdateNodegroupConfigResponse> UpdateNodegroupConfigAsync(UpdateNodegroupConfigRequest request, CancellationToken cancellationToken);
    public virtual UpdateNodegroupVersionResponse UpdateNodegroupVersion(UpdateNodegroupVersionRequest request);
    public virtual Task`1<UpdateNodegroupVersionResponse> UpdateNodegroupVersionAsync(UpdateNodegroupVersionRequest request, CancellationToken cancellationToken);
    public virtual UpdatePodIdentityAssociationResponse UpdatePodIdentityAssociation(UpdatePodIdentityAssociationRequest request);
    public virtual Task`1<UpdatePodIdentityAssociationResponse> UpdatePodIdentityAssociationAsync(UpdatePodIdentityAssociationRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.EKS.AmazonEKSConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonEKSEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonEKSConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.EKS.AmazonEKSDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonEKSDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.EKS.AmazonEKSException : AmazonServiceException {
    public AmazonEKSException(string message);
    public AmazonEKSException(string message, Exception innerException);
    public AmazonEKSException(Exception innerException);
    public AmazonEKSException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonEKSException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected AmazonEKSException(SerializationInfo info, StreamingContext context);
}
public class Amazon.EKS.AmazonEKSRequest : AmazonWebServiceRequest {
}
public class Amazon.EKS.AMITypes : ConstantClass {
    public static AMITypes AL2_ARM_64;
    public static AMITypes AL2_x86_64;
    public static AMITypes AL2_x86_64_GPU;
    public static AMITypes AL2023_ARM_64_STANDARD;
    public static AMITypes AL2023_x86_64_STANDARD;
    public static AMITypes BOTTLEROCKET_ARM_64;
    public static AMITypes BOTTLEROCKET_ARM_64_NVIDIA;
    public static AMITypes BOTTLEROCKET_x86_64;
    public static AMITypes BOTTLEROCKET_x86_64_NVIDIA;
    public static AMITypes CUSTOM;
    public static AMITypes WINDOWS_CORE_2019_x86_64;
    public static AMITypes WINDOWS_CORE_2022_x86_64;
    public static AMITypes WINDOWS_FULL_2019_x86_64;
    public static AMITypes WINDOWS_FULL_2022_x86_64;
    public AMITypes(string value);
    private static AMITypes();
    public static AMITypes FindValue(string value);
    public static AMITypes op_Implicit(string value);
}
public class Amazon.EKS.AuthenticationMode : ConstantClass {
    public static AuthenticationMode API;
    public static AuthenticationMode API_AND_CONFIG_MAP;
    public static AuthenticationMode CONFIG_MAP;
    public AuthenticationMode(string value);
    private static AuthenticationMode();
    public static AuthenticationMode FindValue(string value);
    public static AuthenticationMode op_Implicit(string value);
}
public class Amazon.EKS.CapacityTypes : ConstantClass {
    public static CapacityTypes CAPACITY_BLOCK;
    public static CapacityTypes ON_DEMAND;
    public static CapacityTypes SPOT;
    public CapacityTypes(string value);
    private static CapacityTypes();
    public static CapacityTypes FindValue(string value);
    public static CapacityTypes op_Implicit(string value);
}
public class Amazon.EKS.Category : ConstantClass {
    public static Category UPGRADE_READINESS;
    public Category(string value);
    private static Category();
    public static Category FindValue(string value);
    public static Category op_Implicit(string value);
}
public class Amazon.EKS.ClusterIssueCode : ConstantClass {
    public static ClusterIssueCode AccessDenied;
    public static ClusterIssueCode ClusterUnreachable;
    public static ClusterIssueCode ConfigurationConflict;
    public static ClusterIssueCode Ec2SecurityGroupNotFound;
    public static ClusterIssueCode Ec2ServiceNotSubscribed;
    public static ClusterIssueCode Ec2SubnetNotFound;
    public static ClusterIssueCode IamRoleNotFound;
    public static ClusterIssueCode InsufficientFreeAddresses;
    public static ClusterIssueCode InternalFailure;
    public static ClusterIssueCode KmsGrantRevoked;
    public static ClusterIssueCode KmsKeyDisabled;
    public static ClusterIssueCode KmsKeyMarkedForDeletion;
    public static ClusterIssueCode KmsKeyNotFound;
    public static ClusterIssueCode Other;
    public static ClusterIssueCode ResourceLimitExceeded;
    public static ClusterIssueCode ResourceNotFound;
    public static ClusterIssueCode StsRegionalEndpointDisabled;
    public static ClusterIssueCode UnsupportedVersion;
    public static ClusterIssueCode VpcNotFound;
    public ClusterIssueCode(string value);
    private static ClusterIssueCode();
    public static ClusterIssueCode FindValue(string value);
    public static ClusterIssueCode op_Implicit(string value);
}
public class Amazon.EKS.ClusterStatus : ConstantClass {
    public static ClusterStatus ACTIVE;
    public static ClusterStatus CREATING;
    public static ClusterStatus DELETING;
    public static ClusterStatus FAILED;
    public static ClusterStatus PENDING;
    public static ClusterStatus UPDATING;
    public ClusterStatus(string value);
    private static ClusterStatus();
    public static ClusterStatus FindValue(string value);
    public static ClusterStatus op_Implicit(string value);
}
public class Amazon.EKS.ConfigStatus : ConstantClass {
    public static ConfigStatus ACTIVE;
    public static ConfigStatus CREATING;
    public static ConfigStatus DELETING;
    public ConfigStatus(string value);
    private static ConfigStatus();
    public static ConfigStatus FindValue(string value);
    public static ConfigStatus op_Implicit(string value);
}
public class Amazon.EKS.ConnectorConfigProvider : ConstantClass {
    public static ConnectorConfigProvider AKS;
    public static ConnectorConfigProvider ANTHOS;
    public static ConnectorConfigProvider EC2;
    public static ConnectorConfigProvider EKS_ANYWHERE;
    public static ConnectorConfigProvider GKE;
    public static ConnectorConfigProvider OPENSHIFT;
    public static ConnectorConfigProvider OTHER;
    public static ConnectorConfigProvider RANCHER;
    public static ConnectorConfigProvider TANZU;
    public ConnectorConfigProvider(string value);
    private static ConnectorConfigProvider();
    public static ConnectorConfigProvider FindValue(string value);
    public static ConnectorConfigProvider op_Implicit(string value);
}
public class Amazon.EKS.EksAnywhereSubscriptionLicenseType : ConstantClass {
    public static EksAnywhereSubscriptionLicenseType Cluster;
    public EksAnywhereSubscriptionLicenseType(string value);
    private static EksAnywhereSubscriptionLicenseType();
    public static EksAnywhereSubscriptionLicenseType FindValue(string value);
    public static EksAnywhereSubscriptionLicenseType op_Implicit(string value);
}
public class Amazon.EKS.EksAnywhereSubscriptionStatus : ConstantClass {
    public static EksAnywhereSubscriptionStatus ACTIVE;
    public static EksAnywhereSubscriptionStatus CREATING;
    public static EksAnywhereSubscriptionStatus DELETING;
    public static EksAnywhereSubscriptionStatus EXPIRED;
    public static EksAnywhereSubscriptionStatus EXPIRING;
    public static EksAnywhereSubscriptionStatus UPDATING;
    public EksAnywhereSubscriptionStatus(string value);
    private static EksAnywhereSubscriptionStatus();
    public static EksAnywhereSubscriptionStatus FindValue(string value);
    public static EksAnywhereSubscriptionStatus op_Implicit(string value);
}
public class Amazon.EKS.EksAnywhereSubscriptionTermUnit : ConstantClass {
    public static EksAnywhereSubscriptionTermUnit MONTHS;
    public EksAnywhereSubscriptionTermUnit(string value);
    private static EksAnywhereSubscriptionTermUnit();
    public static EksAnywhereSubscriptionTermUnit FindValue(string value);
    public static EksAnywhereSubscriptionTermUnit op_Implicit(string value);
}
public class Amazon.EKS.Endpoints.EKSEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public class Amazon.EKS.ErrorCode : ConstantClass {
    public static ErrorCode AccessDenied;
    public static ErrorCode AdmissionRequestDenied;
    public static ErrorCode ClusterUnreachable;
    public static ErrorCode ConfigurationConflict;
    public static ErrorCode EniLimitReached;
    public static ErrorCode InsufficientFreeAddresses;
    public static ErrorCode InsufficientNumberOfReplicas;
    public static ErrorCode IpNotAvailable;
    public static ErrorCode K8sResourceNotFound;
    public static ErrorCode NodeCreationFailure;
    public static ErrorCode OperationNotPermitted;
    public static ErrorCode PodEvictionFailure;
    public static ErrorCode SecurityGroupNotFound;
    public static ErrorCode SubnetNotFound;
    public static ErrorCode Unknown;
    public static ErrorCode UnsupportedAddonModification;
    public static ErrorCode VpcIdNotFound;
    public ErrorCode(string value);
    private static ErrorCode();
    public static ErrorCode FindValue(string value);
    public static ErrorCode op_Implicit(string value);
}
public class Amazon.EKS.FargateProfileIssueCode : ConstantClass {
    public static FargateProfileIssueCode AccessDenied;
    public static FargateProfileIssueCode ClusterUnreachable;
    public static FargateProfileIssueCode InternalFailure;
    public static FargateProfileIssueCode PodExecutionRoleAlreadyInUse;
    public FargateProfileIssueCode(string value);
    private static FargateProfileIssueCode();
    public static FargateProfileIssueCode FindValue(string value);
    public static FargateProfileIssueCode op_Implicit(string value);
}
public class Amazon.EKS.FargateProfileStatus : ConstantClass {
    public static FargateProfileStatus ACTIVE;
    public static FargateProfileStatus CREATE_FAILED;
    public static FargateProfileStatus CREATING;
    public static FargateProfileStatus DELETE_FAILED;
    public static FargateProfileStatus DELETING;
    public FargateProfileStatus(string value);
    private static FargateProfileStatus();
    public static FargateProfileStatus FindValue(string value);
    public static FargateProfileStatus op_Implicit(string value);
}
public interface Amazon.EKS.IAmazonEKS {
    public IEKSPaginatorFactory Paginators { get; }
    public abstract virtual IEKSPaginatorFactory get_Paginators();
    public abstract virtual AssociateAccessPolicyResponse AssociateAccessPolicy(AssociateAccessPolicyRequest request);
    public abstract virtual Task`1<AssociateAccessPolicyResponse> AssociateAccessPolicyAsync(AssociateAccessPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual AssociateEncryptionConfigResponse AssociateEncryptionConfig(AssociateEncryptionConfigRequest request);
    public abstract virtual Task`1<AssociateEncryptionConfigResponse> AssociateEncryptionConfigAsync(AssociateEncryptionConfigRequest request, CancellationToken cancellationToken);
    public abstract virtual AssociateIdentityProviderConfigResponse AssociateIdentityProviderConfig(AssociateIdentityProviderConfigRequest request);
    public abstract virtual Task`1<AssociateIdentityProviderConfigResponse> AssociateIdentityProviderConfigAsync(AssociateIdentityProviderConfigRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateAccessEntryResponse CreateAccessEntry(CreateAccessEntryRequest request);
    public abstract virtual Task`1<CreateAccessEntryResponse> CreateAccessEntryAsync(CreateAccessEntryRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateAddonResponse CreateAddon(CreateAddonRequest request);
    public abstract virtual Task`1<CreateAddonResponse> CreateAddonAsync(CreateAddonRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateClusterResponse CreateCluster(CreateClusterRequest request);
    public abstract virtual Task`1<CreateClusterResponse> CreateClusterAsync(CreateClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateEksAnywhereSubscriptionResponse CreateEksAnywhereSubscription(CreateEksAnywhereSubscriptionRequest request);
    public abstract virtual Task`1<CreateEksAnywhereSubscriptionResponse> CreateEksAnywhereSubscriptionAsync(CreateEksAnywhereSubscriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateFargateProfileResponse CreateFargateProfile(CreateFargateProfileRequest request);
    public abstract virtual Task`1<CreateFargateProfileResponse> CreateFargateProfileAsync(CreateFargateProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateNodegroupResponse CreateNodegroup(CreateNodegroupRequest request);
    public abstract virtual Task`1<CreateNodegroupResponse> CreateNodegroupAsync(CreateNodegroupRequest request, CancellationToken cancellationToken);
    public abstract virtual CreatePodIdentityAssociationResponse CreatePodIdentityAssociation(CreatePodIdentityAssociationRequest request);
    public abstract virtual Task`1<CreatePodIdentityAssociationResponse> CreatePodIdentityAssociationAsync(CreatePodIdentityAssociationRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteAccessEntryResponse DeleteAccessEntry(DeleteAccessEntryRequest request);
    public abstract virtual Task`1<DeleteAccessEntryResponse> DeleteAccessEntryAsync(DeleteAccessEntryRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteAddonResponse DeleteAddon(DeleteAddonRequest request);
    public abstract virtual Task`1<DeleteAddonResponse> DeleteAddonAsync(DeleteAddonRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request);
    public abstract virtual Task`1<DeleteClusterResponse> DeleteClusterAsync(DeleteClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteEksAnywhereSubscriptionResponse DeleteEksAnywhereSubscription(DeleteEksAnywhereSubscriptionRequest request);
    public abstract virtual Task`1<DeleteEksAnywhereSubscriptionResponse> DeleteEksAnywhereSubscriptionAsync(DeleteEksAnywhereSubscriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteFargateProfileResponse DeleteFargateProfile(DeleteFargateProfileRequest request);
    public abstract virtual Task`1<DeleteFargateProfileResponse> DeleteFargateProfileAsync(DeleteFargateProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteNodegroupResponse DeleteNodegroup(DeleteNodegroupRequest request);
    public abstract virtual Task`1<DeleteNodegroupResponse> DeleteNodegroupAsync(DeleteNodegroupRequest request, CancellationToken cancellationToken);
    public abstract virtual DeletePodIdentityAssociationResponse DeletePodIdentityAssociation(DeletePodIdentityAssociationRequest request);
    public abstract virtual Task`1<DeletePodIdentityAssociationResponse> DeletePodIdentityAssociationAsync(DeletePodIdentityAssociationRequest request, CancellationToken cancellationToken);
    public abstract virtual DeregisterClusterResponse DeregisterCluster(DeregisterClusterRequest request);
    public abstract virtual Task`1<DeregisterClusterResponse> DeregisterClusterAsync(DeregisterClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeAccessEntryResponse DescribeAccessEntry(DescribeAccessEntryRequest request);
    public abstract virtual Task`1<DescribeAccessEntryResponse> DescribeAccessEntryAsync(DescribeAccessEntryRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeAddonResponse DescribeAddon(DescribeAddonRequest request);
    public abstract virtual Task`1<DescribeAddonResponse> DescribeAddonAsync(DescribeAddonRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeAddonConfigurationResponse DescribeAddonConfiguration(DescribeAddonConfigurationRequest request);
    public abstract virtual Task`1<DescribeAddonConfigurationResponse> DescribeAddonConfigurationAsync(DescribeAddonConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeAddonVersionsResponse DescribeAddonVersions(DescribeAddonVersionsRequest request);
    public abstract virtual Task`1<DescribeAddonVersionsResponse> DescribeAddonVersionsAsync(DescribeAddonVersionsRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeClusterResponse DescribeCluster(DescribeClusterRequest request);
    public abstract virtual Task`1<DescribeClusterResponse> DescribeClusterAsync(DescribeClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeEksAnywhereSubscriptionResponse DescribeEksAnywhereSubscription(DescribeEksAnywhereSubscriptionRequest request);
    public abstract virtual Task`1<DescribeEksAnywhereSubscriptionResponse> DescribeEksAnywhereSubscriptionAsync(DescribeEksAnywhereSubscriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeFargateProfileResponse DescribeFargateProfile(DescribeFargateProfileRequest request);
    public abstract virtual Task`1<DescribeFargateProfileResponse> DescribeFargateProfileAsync(DescribeFargateProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeIdentityProviderConfigResponse DescribeIdentityProviderConfig(DescribeIdentityProviderConfigRequest request);
    public abstract virtual Task`1<DescribeIdentityProviderConfigResponse> DescribeIdentityProviderConfigAsync(DescribeIdentityProviderConfigRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeInsightResponse DescribeInsight(DescribeInsightRequest request);
    public abstract virtual Task`1<DescribeInsightResponse> DescribeInsightAsync(DescribeInsightRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeNodegroupResponse DescribeNodegroup(DescribeNodegroupRequest request);
    public abstract virtual Task`1<DescribeNodegroupResponse> DescribeNodegroupAsync(DescribeNodegroupRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribePodIdentityAssociationResponse DescribePodIdentityAssociation(DescribePodIdentityAssociationRequest request);
    public abstract virtual Task`1<DescribePodIdentityAssociationResponse> DescribePodIdentityAssociationAsync(DescribePodIdentityAssociationRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeUpdateResponse DescribeUpdate(DescribeUpdateRequest request);
    public abstract virtual Task`1<DescribeUpdateResponse> DescribeUpdateAsync(DescribeUpdateRequest request, CancellationToken cancellationToken);
    public abstract virtual DisassociateAccessPolicyResponse DisassociateAccessPolicy(DisassociateAccessPolicyRequest request);
    public abstract virtual Task`1<DisassociateAccessPolicyResponse> DisassociateAccessPolicyAsync(DisassociateAccessPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual DisassociateIdentityProviderConfigResponse DisassociateIdentityProviderConfig(DisassociateIdentityProviderConfigRequest request);
    public abstract virtual Task`1<DisassociateIdentityProviderConfigResponse> DisassociateIdentityProviderConfigAsync(DisassociateIdentityProviderConfigRequest request, CancellationToken cancellationToken);
    public abstract virtual ListAccessEntriesResponse ListAccessEntries(ListAccessEntriesRequest request);
    public abstract virtual Task`1<ListAccessEntriesResponse> ListAccessEntriesAsync(ListAccessEntriesRequest request, CancellationToken cancellationToken);
    public abstract virtual ListAccessPoliciesResponse ListAccessPolicies(ListAccessPoliciesRequest request);
    public abstract virtual Task`1<ListAccessPoliciesResponse> ListAccessPoliciesAsync(ListAccessPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual ListAddonsResponse ListAddons(ListAddonsRequest request);
    public abstract virtual Task`1<ListAddonsResponse> ListAddonsAsync(ListAddonsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListAssociatedAccessPoliciesResponse ListAssociatedAccessPolicies(ListAssociatedAccessPoliciesRequest request);
    public abstract virtual Task`1<ListAssociatedAccessPoliciesResponse> ListAssociatedAccessPoliciesAsync(ListAssociatedAccessPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual ListClustersResponse ListClusters(ListClustersRequest request);
    public abstract virtual Task`1<ListClustersResponse> ListClustersAsync(ListClustersRequest request, CancellationToken cancellationToken);
    public abstract virtual ListEksAnywhereSubscriptionsResponse ListEksAnywhereSubscriptions(ListEksAnywhereSubscriptionsRequest request);
    public abstract virtual Task`1<ListEksAnywhereSubscriptionsResponse> ListEksAnywhereSubscriptionsAsync(ListEksAnywhereSubscriptionsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListFargateProfilesResponse ListFargateProfiles(ListFargateProfilesRequest request);
    public abstract virtual Task`1<ListFargateProfilesResponse> ListFargateProfilesAsync(ListFargateProfilesRequest request, CancellationToken cancellationToken);
    public abstract virtual ListIdentityProviderConfigsResponse ListIdentityProviderConfigs(ListIdentityProviderConfigsRequest request);
    public abstract virtual Task`1<ListIdentityProviderConfigsResponse> ListIdentityProviderConfigsAsync(ListIdentityProviderConfigsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListInsightsResponse ListInsights(ListInsightsRequest request);
    public abstract virtual Task`1<ListInsightsResponse> ListInsightsAsync(ListInsightsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListNodegroupsResponse ListNodegroups(ListNodegroupsRequest request);
    public abstract virtual Task`1<ListNodegroupsResponse> ListNodegroupsAsync(ListNodegroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListPodIdentityAssociationsResponse ListPodIdentityAssociations(ListPodIdentityAssociationsRequest request);
    public abstract virtual Task`1<ListPodIdentityAssociationsResponse> ListPodIdentityAssociationsAsync(ListPodIdentityAssociationsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public abstract virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual ListUpdatesResponse ListUpdates(ListUpdatesRequest request);
    public abstract virtual Task`1<ListUpdatesResponse> ListUpdatesAsync(ListUpdatesRequest request, CancellationToken cancellationToken);
    public abstract virtual RegisterClusterResponse RegisterCluster(RegisterClusterRequest request);
    public abstract virtual Task`1<RegisterClusterResponse> RegisterClusterAsync(RegisterClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual TagResourceResponse TagResource(TagResourceRequest request);
    public abstract virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual UntagResourceResponse UntagResource(UntagResourceRequest request);
    public abstract virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateAccessEntryResponse UpdateAccessEntry(UpdateAccessEntryRequest request);
    public abstract virtual Task`1<UpdateAccessEntryResponse> UpdateAccessEntryAsync(UpdateAccessEntryRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateAddonResponse UpdateAddon(UpdateAddonRequest request);
    public abstract virtual Task`1<UpdateAddonResponse> UpdateAddonAsync(UpdateAddonRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateClusterConfigResponse UpdateClusterConfig(UpdateClusterConfigRequest request);
    public abstract virtual Task`1<UpdateClusterConfigResponse> UpdateClusterConfigAsync(UpdateClusterConfigRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateClusterVersionResponse UpdateClusterVersion(UpdateClusterVersionRequest request);
    public abstract virtual Task`1<UpdateClusterVersionResponse> UpdateClusterVersionAsync(UpdateClusterVersionRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateEksAnywhereSubscriptionResponse UpdateEksAnywhereSubscription(UpdateEksAnywhereSubscriptionRequest request);
    public abstract virtual Task`1<UpdateEksAnywhereSubscriptionResponse> UpdateEksAnywhereSubscriptionAsync(UpdateEksAnywhereSubscriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateNodegroupConfigResponse UpdateNodegroupConfig(UpdateNodegroupConfigRequest request);
    public abstract virtual Task`1<UpdateNodegroupConfigResponse> UpdateNodegroupConfigAsync(UpdateNodegroupConfigRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateNodegroupVersionResponse UpdateNodegroupVersion(UpdateNodegroupVersionRequest request);
    public abstract virtual Task`1<UpdateNodegroupVersionResponse> UpdateNodegroupVersionAsync(UpdateNodegroupVersionRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdatePodIdentityAssociationResponse UpdatePodIdentityAssociation(UpdatePodIdentityAssociationRequest request);
    public abstract virtual Task`1<UpdatePodIdentityAssociationResponse> UpdatePodIdentityAssociationAsync(UpdatePodIdentityAssociationRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.EKS.InsightStatusValue : ConstantClass {
    public static InsightStatusValue ERROR;
    public static InsightStatusValue PASSING;
    public static InsightStatusValue UNKNOWN;
    public static InsightStatusValue WARNING;
    public InsightStatusValue(string value);
    private static InsightStatusValue();
    public static InsightStatusValue FindValue(string value);
    public static InsightStatusValue op_Implicit(string value);
}
public class Amazon.EKS.Internal.AmazonEKSEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.EKS.Internal.AmazonEKSEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.EKS.Internal.AmazonEKSMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.EKS.IpFamily : ConstantClass {
    public static IpFamily Ipv4;
    public static IpFamily Ipv6;
    public IpFamily(string value);
    private static IpFamily();
    public static IpFamily FindValue(string value);
    public static IpFamily op_Implicit(string value);
}
public class Amazon.EKS.LogType : ConstantClass {
    public static LogType Api;
    public static LogType Audit;
    public static LogType Authenticator;
    public static LogType ControllerManager;
    public static LogType Scheduler;
    public LogType(string value);
    private static LogType();
    public static LogType FindValue(string value);
    public static LogType op_Implicit(string value);
}
public class Amazon.EKS.Model.AccessConfigResponse : object {
    private AuthenticationMode _authenticationMode;
    private Nullable`1<bool> _bootstrapClusterCreatorAdminPermissions;
    public AuthenticationMode AuthenticationMode { get; public set; }
    public Nullable`1<bool> BootstrapClusterCreatorAdminPermissions { get; public set; }
    public AuthenticationMode get_AuthenticationMode();
    public void set_AuthenticationMode(AuthenticationMode value);
    internal bool IsSetAuthenticationMode();
    public Nullable`1<bool> get_BootstrapClusterCreatorAdminPermissions();
    public void set_BootstrapClusterCreatorAdminPermissions(Nullable`1<bool> value);
    internal bool IsSetBootstrapClusterCreatorAdminPermissions();
}
public class Amazon.EKS.Model.AccessDeniedException : AmazonEKSException {
    public AccessDeniedException(string message);
    public AccessDeniedException(string message, Exception innerException);
    public AccessDeniedException(Exception innerException);
    public AccessDeniedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AccessDeniedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected AccessDeniedException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EKS.Model.AccessEntry : object {
    private string _accessEntryArn;
    private string _clusterName;
    private Nullable`1<DateTime> _createdAt;
    private List`1<string> _kubernetesGroups;
    private Nullable`1<DateTime> _modifiedAt;
    private string _principalArn;
    private Dictionary`2<string, string> _tags;
    private string _type;
    private string _username;
    public string AccessEntryArn { get; public set; }
    public string ClusterName { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public List`1<string> KubernetesGroups { get; public set; }
    public Nullable`1<DateTime> ModifiedAt { get; public set; }
    public string PrincipalArn { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string Type { get; public set; }
    public string Username { get; public set; }
    public string get_AccessEntryArn();
    public void set_AccessEntryArn(string value);
    internal bool IsSetAccessEntryArn();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public List`1<string> get_KubernetesGroups();
    public void set_KubernetesGroups(List`1<string> value);
    internal bool IsSetKubernetesGroups();
    public Nullable`1<DateTime> get_ModifiedAt();
    public void set_ModifiedAt(Nullable`1<DateTime> value);
    internal bool IsSetModifiedAt();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
    public string get_Username();
    public void set_Username(string value);
    internal bool IsSetUsername();
}
public class Amazon.EKS.Model.AccessPolicy : object {
    private string _arn;
    private string _name;
    public string Arn { get; public set; }
    public string Name { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EKS.Model.AccessScope : object {
    private List`1<string> _namespaces;
    private AccessScopeType _type;
    public List`1<string> Namespaces { get; public set; }
    public AccessScopeType Type { get; public set; }
    public List`1<string> get_Namespaces();
    public void set_Namespaces(List`1<string> value);
    internal bool IsSetNamespaces();
    public AccessScopeType get_Type();
    public void set_Type(AccessScopeType value);
    internal bool IsSetType();
}
public class Amazon.EKS.Model.Addon : object {
    private string _addonArn;
    private string _addonName;
    private string _addonVersion;
    private string _clusterName;
    private string _configurationValues;
    private Nullable`1<DateTime> _createdAt;
    private AddonHealth _health;
    private MarketplaceInformation _marketplaceInformation;
    private Nullable`1<DateTime> _modifiedAt;
    private string _owner;
    private List`1<string> _podIdentityAssociations;
    private string _publisher;
    private string _serviceAccountRoleArn;
    private AddonStatus _status;
    private Dictionary`2<string, string> _tags;
    public string AddonArn { get; public set; }
    public string AddonName { get; public set; }
    public string AddonVersion { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public string ConfigurationValues { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public AddonHealth Health { get; public set; }
    public MarketplaceInformation MarketplaceInformation { get; public set; }
    public Nullable`1<DateTime> ModifiedAt { get; public set; }
    public string Owner { get; public set; }
    public List`1<string> PodIdentityAssociations { get; public set; }
    public string Publisher { get; public set; }
    public string ServiceAccountRoleArn { get; public set; }
    public AddonStatus Status { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string get_AddonArn();
    public void set_AddonArn(string value);
    internal bool IsSetAddonArn();
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_AddonVersion();
    public void set_AddonVersion(string value);
    internal bool IsSetAddonVersion();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_ConfigurationValues();
    public void set_ConfigurationValues(string value);
    internal bool IsSetConfigurationValues();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public AddonHealth get_Health();
    public void set_Health(AddonHealth value);
    internal bool IsSetHealth();
    public MarketplaceInformation get_MarketplaceInformation();
    public void set_MarketplaceInformation(MarketplaceInformation value);
    internal bool IsSetMarketplaceInformation();
    public Nullable`1<DateTime> get_ModifiedAt();
    public void set_ModifiedAt(Nullable`1<DateTime> value);
    internal bool IsSetModifiedAt();
    public string get_Owner();
    public void set_Owner(string value);
    internal bool IsSetOwner();
    public List`1<string> get_PodIdentityAssociations();
    public void set_PodIdentityAssociations(List`1<string> value);
    internal bool IsSetPodIdentityAssociations();
    public string get_Publisher();
    public void set_Publisher(string value);
    internal bool IsSetPublisher();
    public string get_ServiceAccountRoleArn();
    public void set_ServiceAccountRoleArn(string value);
    internal bool IsSetServiceAccountRoleArn();
    public AddonStatus get_Status();
    public void set_Status(AddonStatus value);
    internal bool IsSetStatus();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
public class Amazon.EKS.Model.AddonHealth : object {
    private List`1<AddonIssue> _issues;
    public List`1<AddonIssue> Issues { get; public set; }
    public List`1<AddonIssue> get_Issues();
    public void set_Issues(List`1<AddonIssue> value);
    internal bool IsSetIssues();
}
public class Amazon.EKS.Model.AddonInfo : object {
    private string _addonName;
    private List`1<AddonVersionInfo> _addonVersions;
    private MarketplaceInformation _marketplaceInformation;
    private string _owner;
    private string _publisher;
    private string _type;
    public string AddonName { get; public set; }
    public List`1<AddonVersionInfo> AddonVersions { get; public set; }
    public MarketplaceInformation MarketplaceInformation { get; public set; }
    public string Owner { get; public set; }
    public string Publisher { get; public set; }
    public string Type { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public List`1<AddonVersionInfo> get_AddonVersions();
    public void set_AddonVersions(List`1<AddonVersionInfo> value);
    internal bool IsSetAddonVersions();
    public MarketplaceInformation get_MarketplaceInformation();
    public void set_MarketplaceInformation(MarketplaceInformation value);
    internal bool IsSetMarketplaceInformation();
    public string get_Owner();
    public void set_Owner(string value);
    internal bool IsSetOwner();
    public string get_Publisher();
    public void set_Publisher(string value);
    internal bool IsSetPublisher();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
}
public class Amazon.EKS.Model.AddonIssue : object {
    private AddonIssueCode _code;
    private string _message;
    private List`1<string> _resourceIds;
    public AddonIssueCode Code { get; public set; }
    public string Message { get; public set; }
    public List`1<string> ResourceIds { get; public set; }
    public AddonIssueCode get_Code();
    public void set_Code(AddonIssueCode value);
    internal bool IsSetCode();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public List`1<string> get_ResourceIds();
    public void set_ResourceIds(List`1<string> value);
    internal bool IsSetResourceIds();
}
public class Amazon.EKS.Model.AddonPodIdentityAssociations : object {
    private string _roleArn;
    private string _serviceAccount;
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public string ServiceAccount { get; public set; }
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public string get_ServiceAccount();
    public void set_ServiceAccount(string value);
    internal bool IsSetServiceAccount();
}
public class Amazon.EKS.Model.AddonPodIdentityConfiguration : object {
    private List`1<string> _recommendedManagedPolicies;
    private string _serviceAccount;
    public List`1<string> RecommendedManagedPolicies { get; public set; }
    public string ServiceAccount { get; public set; }
    public List`1<string> get_RecommendedManagedPolicies();
    public void set_RecommendedManagedPolicies(List`1<string> value);
    internal bool IsSetRecommendedManagedPolicies();
    public string get_ServiceAccount();
    public void set_ServiceAccount(string value);
    internal bool IsSetServiceAccount();
}
public class Amazon.EKS.Model.AddonVersionInfo : object {
    private string _addonVersion;
    private List`1<string> _architecture;
    private List`1<Compatibility> _compatibilities;
    private Nullable`1<bool> _requiresConfiguration;
    private Nullable`1<bool> _requiresIamPermissions;
    public string AddonVersion { get; public set; }
    public List`1<string> Architecture { get; public set; }
    public List`1<Compatibility> Compatibilities { get; public set; }
    public Nullable`1<bool> RequiresConfiguration { get; public set; }
    public Nullable`1<bool> RequiresIamPermissions { get; public set; }
    public string get_AddonVersion();
    public void set_AddonVersion(string value);
    internal bool IsSetAddonVersion();
    public List`1<string> get_Architecture();
    public void set_Architecture(List`1<string> value);
    internal bool IsSetArchitecture();
    public List`1<Compatibility> get_Compatibilities();
    public void set_Compatibilities(List`1<Compatibility> value);
    internal bool IsSetCompatibilities();
    public Nullable`1<bool> get_RequiresConfiguration();
    public void set_RequiresConfiguration(Nullable`1<bool> value);
    internal bool IsSetRequiresConfiguration();
    public Nullable`1<bool> get_RequiresIamPermissions();
    public void set_RequiresIamPermissions(Nullable`1<bool> value);
    internal bool IsSetRequiresIamPermissions();
}
public class Amazon.EKS.Model.AssociateAccessPolicyRequest : AmazonEKSRequest {
    private AccessScope _accessScope;
    private string _clusterName;
    private string _policyArn;
    private string _principalArn;
    [AWSPropertyAttribute]
public AccessScope AccessScope { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string PrincipalArn { get; public set; }
    public AccessScope get_AccessScope();
    public void set_AccessScope(AccessScope value);
    internal bool IsSetAccessScope();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
}
public class Amazon.EKS.Model.AssociateAccessPolicyResponse : AmazonWebServiceResponse {
    private AssociatedAccessPolicy _associatedAccessPolicy;
    private string _clusterName;
    private string _principalArn;
    public AssociatedAccessPolicy AssociatedAccessPolicy { get; public set; }
    public string ClusterName { get; public set; }
    public string PrincipalArn { get; public set; }
    public AssociatedAccessPolicy get_AssociatedAccessPolicy();
    public void set_AssociatedAccessPolicy(AssociatedAccessPolicy value);
    internal bool IsSetAssociatedAccessPolicy();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
}
public class Amazon.EKS.Model.AssociatedAccessPolicy : object {
    private AccessScope _accessScope;
    private Nullable`1<DateTime> _associatedAt;
    private Nullable`1<DateTime> _modifiedAt;
    private string _policyArn;
    public AccessScope AccessScope { get; public set; }
    public Nullable`1<DateTime> AssociatedAt { get; public set; }
    public Nullable`1<DateTime> ModifiedAt { get; public set; }
    public string PolicyArn { get; public set; }
    public AccessScope get_AccessScope();
    public void set_AccessScope(AccessScope value);
    internal bool IsSetAccessScope();
    public Nullable`1<DateTime> get_AssociatedAt();
    public void set_AssociatedAt(Nullable`1<DateTime> value);
    internal bool IsSetAssociatedAt();
    public Nullable`1<DateTime> get_ModifiedAt();
    public void set_ModifiedAt(Nullable`1<DateTime> value);
    internal bool IsSetModifiedAt();
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
}
public class Amazon.EKS.Model.AssociateEncryptionConfigRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _clusterName;
    private List`1<EncryptionConfig> _encryptionConfig;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public List`1<EncryptionConfig> EncryptionConfig { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public List`1<EncryptionConfig> get_EncryptionConfig();
    public void set_EncryptionConfig(List`1<EncryptionConfig> value);
    internal bool IsSetEncryptionConfig();
}
public class Amazon.EKS.Model.AssociateEncryptionConfigResponse : AmazonWebServiceResponse {
    private Update _update;
    public Update Update { get; public set; }
    public Update get_Update();
    public void set_Update(Update value);
    internal bool IsSetUpdate();
}
public class Amazon.EKS.Model.AssociateIdentityProviderConfigRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _clusterName;
    private OidcIdentityProviderConfigRequest _oidc;
    private Dictionary`2<string, string> _tags;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public OidcIdentityProviderConfigRequest Oidc { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public OidcIdentityProviderConfigRequest get_Oidc();
    public void set_Oidc(OidcIdentityProviderConfigRequest value);
    internal bool IsSetOidc();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
public class Amazon.EKS.Model.AssociateIdentityProviderConfigResponse : AmazonWebServiceResponse {
    private Dictionary`2<string, string> _tags;
    private Update _update;
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public Update Update { get; public set; }
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public Update get_Update();
    public void set_Update(Update value);
    internal bool IsSetUpdate();
}
public class Amazon.EKS.Model.AutoScalingGroup : object {
    private string _name;
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EKS.Model.BadRequestException : AmazonEKSException {
    public BadRequestException(string message);
    public BadRequestException(string message, Exception innerException);
    public BadRequestException(Exception innerException);
    public BadRequestException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BadRequestException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected BadRequestException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EKS.Model.Certificate : object {
    private string _data;
    public string Data { get; public set; }
    public string get_Data();
    public void set_Data(string value);
    internal bool IsSetData();
}
public class Amazon.EKS.Model.ClientException : AmazonEKSException {
    private string _addonName;
    private string _clusterName;
    private string _nodegroupName;
    private string _subscriptionId;
    public string AddonName { get; public set; }
    public string ClusterName { get; public set; }
    public string NodegroupName { get; public set; }
    public string SubscriptionId { get; public set; }
    public ClientException(string message);
    public ClientException(string message, Exception innerException);
    public ClientException(Exception innerException);
    public ClientException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClientException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ClientException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_SubscriptionId();
    public void set_SubscriptionId(string value);
    internal bool IsSetSubscriptionId();
}
public class Amazon.EKS.Model.ClientStat : object {
    private Nullable`1<DateTime> _lastRequestTime;
    private Nullable`1<int> _numberOfRequestsLast30Days;
    private string _userAgent;
    public Nullable`1<DateTime> LastRequestTime { get; public set; }
    public Nullable`1<int> NumberOfRequestsLast30Days { get; public set; }
    public string UserAgent { get; public set; }
    public Nullable`1<DateTime> get_LastRequestTime();
    public void set_LastRequestTime(Nullable`1<DateTime> value);
    internal bool IsSetLastRequestTime();
    public Nullable`1<int> get_NumberOfRequestsLast30Days();
    public void set_NumberOfRequestsLast30Days(Nullable`1<int> value);
    internal bool IsSetNumberOfRequestsLast30Days();
    public string get_UserAgent();
    public void set_UserAgent(string value);
    internal bool IsSetUserAgent();
}
public class Amazon.EKS.Model.Cluster : object {
    private AccessConfigResponse _accessConfig;
    private string _arn;
    private Certificate _certificateAuthority;
    private string _clientRequestToken;
    private ConnectorConfigResponse _connectorConfig;
    private Nullable`1<DateTime> _createdAt;
    private List`1<EncryptionConfig> _encryptionConfig;
    private string _endpoint;
    private ClusterHealth _health;
    private string _id;
    private Identity _identity;
    private KubernetesNetworkConfigResponse _kubernetesNetworkConfig;
    private Logging _logging;
    private string _name;
    private OutpostConfigResponse _outpostConfig;
    private string _platformVersion;
    private VpcConfigResponse _resourcesVpcConfig;
    private string _roleArn;
    private ClusterStatus _status;
    private Dictionary`2<string, string> _tags;
    private UpgradePolicyResponse _upgradePolicy;
    private string _version;
    public AccessConfigResponse AccessConfig { get; public set; }
    public string Arn { get; public set; }
    public Certificate CertificateAuthority { get; public set; }
    public string ClientRequestToken { get; public set; }
    public ConnectorConfigResponse ConnectorConfig { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    [AWSPropertyAttribute]
public List`1<EncryptionConfig> EncryptionConfig { get; public set; }
    public string Endpoint { get; public set; }
    public ClusterHealth Health { get; public set; }
    public string Id { get; public set; }
    public Identity Identity { get; public set; }
    public KubernetesNetworkConfigResponse KubernetesNetworkConfig { get; public set; }
    public Logging Logging { get; public set; }
    public string Name { get; public set; }
    public OutpostConfigResponse OutpostConfig { get; public set; }
    public string PlatformVersion { get; public set; }
    public VpcConfigResponse ResourcesVpcConfig { get; public set; }
    public string RoleArn { get; public set; }
    public ClusterStatus Status { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public UpgradePolicyResponse UpgradePolicy { get; public set; }
    public string Version { get; public set; }
    public AccessConfigResponse get_AccessConfig();
    public void set_AccessConfig(AccessConfigResponse value);
    internal bool IsSetAccessConfig();
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Certificate get_CertificateAuthority();
    public void set_CertificateAuthority(Certificate value);
    internal bool IsSetCertificateAuthority();
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public ConnectorConfigResponse get_ConnectorConfig();
    public void set_ConnectorConfig(ConnectorConfigResponse value);
    internal bool IsSetConnectorConfig();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public List`1<EncryptionConfig> get_EncryptionConfig();
    public void set_EncryptionConfig(List`1<EncryptionConfig> value);
    internal bool IsSetEncryptionConfig();
    public string get_Endpoint();
    public void set_Endpoint(string value);
    internal bool IsSetEndpoint();
    public ClusterHealth get_Health();
    public void set_Health(ClusterHealth value);
    internal bool IsSetHealth();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public Identity get_Identity();
    public void set_Identity(Identity value);
    internal bool IsSetIdentity();
    public KubernetesNetworkConfigResponse get_KubernetesNetworkConfig();
    public void set_KubernetesNetworkConfig(KubernetesNetworkConfigResponse value);
    internal bool IsSetKubernetesNetworkConfig();
    public Logging get_Logging();
    public void set_Logging(Logging value);
    internal bool IsSetLogging();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public OutpostConfigResponse get_OutpostConfig();
    public void set_OutpostConfig(OutpostConfigResponse value);
    internal bool IsSetOutpostConfig();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public VpcConfigResponse get_ResourcesVpcConfig();
    public void set_ResourcesVpcConfig(VpcConfigResponse value);
    internal bool IsSetResourcesVpcConfig();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public ClusterStatus get_Status();
    public void set_Status(ClusterStatus value);
    internal bool IsSetStatus();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public UpgradePolicyResponse get_UpgradePolicy();
    public void set_UpgradePolicy(UpgradePolicyResponse value);
    internal bool IsSetUpgradePolicy();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.EKS.Model.ClusterHealth : object {
    private List`1<ClusterIssue> _issues;
    public List`1<ClusterIssue> Issues { get; public set; }
    public List`1<ClusterIssue> get_Issues();
    public void set_Issues(List`1<ClusterIssue> value);
    internal bool IsSetIssues();
}
public class Amazon.EKS.Model.ClusterIssue : object {
    private ClusterIssueCode _code;
    private string _message;
    private List`1<string> _resourceIds;
    public ClusterIssueCode Code { get; public set; }
    public string Message { get; public set; }
    public List`1<string> ResourceIds { get; public set; }
    public ClusterIssueCode get_Code();
    public void set_Code(ClusterIssueCode value);
    internal bool IsSetCode();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public List`1<string> get_ResourceIds();
    public void set_ResourceIds(List`1<string> value);
    internal bool IsSetResourceIds();
}
public class Amazon.EKS.Model.Compatibility : object {
    private string _clusterVersion;
    private Nullable`1<bool> _defaultVersion;
    private List`1<string> _platformVersions;
    public string ClusterVersion { get; public set; }
    public Nullable`1<bool> DefaultVersion { get; public set; }
    public List`1<string> PlatformVersions { get; public set; }
    public string get_ClusterVersion();
    public void set_ClusterVersion(string value);
    internal bool IsSetClusterVersion();
    public Nullable`1<bool> get_DefaultVersion();
    public void set_DefaultVersion(Nullable`1<bool> value);
    internal bool IsSetDefaultVersion();
    public List`1<string> get_PlatformVersions();
    public void set_PlatformVersions(List`1<string> value);
    internal bool IsSetPlatformVersions();
}
public class Amazon.EKS.Model.ConnectorConfigRequest : object {
    private ConnectorConfigProvider _provider;
    private string _roleArn;
    [AWSPropertyAttribute]
public ConnectorConfigProvider Provider { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    public ConnectorConfigProvider get_Provider();
    public void set_Provider(ConnectorConfigProvider value);
    internal bool IsSetProvider();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
}
public class Amazon.EKS.Model.ConnectorConfigResponse : object {
    private string _activationCode;
    private Nullable`1<DateTime> _activationExpiry;
    private string _activationId;
    private string _provider;
    private string _roleArn;
    public string ActivationCode { get; public set; }
    public Nullable`1<DateTime> ActivationExpiry { get; public set; }
    public string ActivationId { get; public set; }
    public string Provider { get; public set; }
    public string RoleArn { get; public set; }
    public string get_ActivationCode();
    public void set_ActivationCode(string value);
    internal bool IsSetActivationCode();
    public Nullable`1<DateTime> get_ActivationExpiry();
    public void set_ActivationExpiry(Nullable`1<DateTime> value);
    internal bool IsSetActivationExpiry();
    public string get_ActivationId();
    public void set_ActivationId(string value);
    internal bool IsSetActivationId();
    public string get_Provider();
    public void set_Provider(string value);
    internal bool IsSetProvider();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
}
public class Amazon.EKS.Model.ControlPlanePlacementRequest : object {
    private string _groupName;
    public string GroupName { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
}
public class Amazon.EKS.Model.ControlPlanePlacementResponse : object {
    private string _groupName;
    public string GroupName { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
}
public class Amazon.EKS.Model.CreateAccessConfigRequest : object {
    private AuthenticationMode _authenticationMode;
    private Nullable`1<bool> _bootstrapClusterCreatorAdminPermissions;
    public AuthenticationMode AuthenticationMode { get; public set; }
    public Nullable`1<bool> BootstrapClusterCreatorAdminPermissions { get; public set; }
    public AuthenticationMode get_AuthenticationMode();
    public void set_AuthenticationMode(AuthenticationMode value);
    internal bool IsSetAuthenticationMode();
    public Nullable`1<bool> get_BootstrapClusterCreatorAdminPermissions();
    public void set_BootstrapClusterCreatorAdminPermissions(Nullable`1<bool> value);
    internal bool IsSetBootstrapClusterCreatorAdminPermissions();
}
public class Amazon.EKS.Model.CreateAccessEntryRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _clusterName;
    private List`1<string> _kubernetesGroups;
    private string _principalArn;
    private Dictionary`2<string, string> _tags;
    private string _type;
    private string _username;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public List`1<string> KubernetesGroups { get; public set; }
    [AWSPropertyAttribute]
public string PrincipalArn { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string Type { get; public set; }
    public string Username { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public List`1<string> get_KubernetesGroups();
    public void set_KubernetesGroups(List`1<string> value);
    internal bool IsSetKubernetesGroups();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
    public string get_Username();
    public void set_Username(string value);
    internal bool IsSetUsername();
}
public class Amazon.EKS.Model.CreateAccessEntryResponse : AmazonWebServiceResponse {
    private AccessEntry _accessEntry;
    public AccessEntry AccessEntry { get; public set; }
    public AccessEntry get_AccessEntry();
    public void set_AccessEntry(AccessEntry value);
    internal bool IsSetAccessEntry();
}
public class Amazon.EKS.Model.CreateAddonRequest : AmazonEKSRequest {
    private string _addonName;
    private string _addonVersion;
    private string _clientRequestToken;
    private string _clusterName;
    private string _configurationValues;
    private List`1<AddonPodIdentityAssociations> _podIdentityAssociations;
    private ResolveConflicts _resolveConflicts;
    private string _serviceAccountRoleArn;
    private Dictionary`2<string, string> _tags;
    [AWSPropertyAttribute]
public string AddonName { get; public set; }
    public string AddonVersion { get; public set; }
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public string ConfigurationValues { get; public set; }
    public List`1<AddonPodIdentityAssociations> PodIdentityAssociations { get; public set; }
    public ResolveConflicts ResolveConflicts { get; public set; }
    [AWSPropertyAttribute]
public string ServiceAccountRoleArn { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_AddonVersion();
    public void set_AddonVersion(string value);
    internal bool IsSetAddonVersion();
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_ConfigurationValues();
    public void set_ConfigurationValues(string value);
    internal bool IsSetConfigurationValues();
    public List`1<AddonPodIdentityAssociations> get_PodIdentityAssociations();
    public void set_PodIdentityAssociations(List`1<AddonPodIdentityAssociations> value);
    internal bool IsSetPodIdentityAssociations();
    public ResolveConflicts get_ResolveConflicts();
    public void set_ResolveConflicts(ResolveConflicts value);
    internal bool IsSetResolveConflicts();
    public string get_ServiceAccountRoleArn();
    public void set_ServiceAccountRoleArn(string value);
    internal bool IsSetServiceAccountRoleArn();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
public class Amazon.EKS.Model.CreateAddonResponse : AmazonWebServiceResponse {
    private Addon _addon;
    public Addon Addon { get; public set; }
    public Addon get_Addon();
    public void set_Addon(Addon value);
    internal bool IsSetAddon();
}
public class Amazon.EKS.Model.CreateClusterRequest : AmazonEKSRequest {
    private CreateAccessConfigRequest _accessConfig;
    private Nullable`1<bool> _bootstrapSelfManagedAddons;
    private string _clientRequestToken;
    private List`1<EncryptionConfig> _encryptionConfig;
    private KubernetesNetworkConfigRequest _kubernetesNetworkConfig;
    private Logging _logging;
    private string _name;
    private OutpostConfigRequest _outpostConfig;
    private VpcConfigRequest _resourcesVpcConfig;
    private string _roleArn;
    private Dictionary`2<string, string> _tags;
    private UpgradePolicyRequest _upgradePolicy;
    private string _version;
    public CreateAccessConfigRequest AccessConfig { get; public set; }
    public Nullable`1<bool> BootstrapSelfManagedAddons { get; public set; }
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public List`1<EncryptionConfig> EncryptionConfig { get; public set; }
    public KubernetesNetworkConfigRequest KubernetesNetworkConfig { get; public set; }
    public Logging Logging { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public OutpostConfigRequest OutpostConfig { get; public set; }
    [AWSPropertyAttribute]
public VpcConfigRequest ResourcesVpcConfig { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public UpgradePolicyRequest UpgradePolicy { get; public set; }
    public string Version { get; public set; }
    public CreateAccessConfigRequest get_AccessConfig();
    public void set_AccessConfig(CreateAccessConfigRequest value);
    internal bool IsSetAccessConfig();
    public Nullable`1<bool> get_BootstrapSelfManagedAddons();
    public void set_BootstrapSelfManagedAddons(Nullable`1<bool> value);
    internal bool IsSetBootstrapSelfManagedAddons();
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public List`1<EncryptionConfig> get_EncryptionConfig();
    public void set_EncryptionConfig(List`1<EncryptionConfig> value);
    internal bool IsSetEncryptionConfig();
    public KubernetesNetworkConfigRequest get_KubernetesNetworkConfig();
    public void set_KubernetesNetworkConfig(KubernetesNetworkConfigRequest value);
    internal bool IsSetKubernetesNetworkConfig();
    public Logging get_Logging();
    public void set_Logging(Logging value);
    internal bool IsSetLogging();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public OutpostConfigRequest get_OutpostConfig();
    public void set_OutpostConfig(OutpostConfigRequest value);
    internal bool IsSetOutpostConfig();
    public VpcConfigRequest get_ResourcesVpcConfig();
    public void set_ResourcesVpcConfig(VpcConfigRequest value);
    internal bool IsSetResourcesVpcConfig();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public UpgradePolicyRequest get_UpgradePolicy();
    public void set_UpgradePolicy(UpgradePolicyRequest value);
    internal bool IsSetUpgradePolicy();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.EKS.Model.CreateClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.EKS.Model.CreateEksAnywhereSubscriptionRequest : AmazonEKSRequest {
    private Nullable`1<bool> _autoRenew;
    private string _clientRequestToken;
    private Nullable`1<int> _licenseQuantity;
    private EksAnywhereSubscriptionLicenseType _licenseType;
    private string _name;
    private Dictionary`2<string, string> _tags;
    private EksAnywhereSubscriptionTerm _term;
    public Nullable`1<bool> AutoRenew { get; public set; }
    public string ClientRequestToken { get; public set; }
    public Nullable`1<int> LicenseQuantity { get; public set; }
    public EksAnywhereSubscriptionLicenseType LicenseType { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    [AWSPropertyAttribute]
public EksAnywhereSubscriptionTerm Term { get; public set; }
    public Nullable`1<bool> get_AutoRenew();
    public void set_AutoRenew(Nullable`1<bool> value);
    internal bool IsSetAutoRenew();
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public Nullable`1<int> get_LicenseQuantity();
    public void set_LicenseQuantity(Nullable`1<int> value);
    internal bool IsSetLicenseQuantity();
    public EksAnywhereSubscriptionLicenseType get_LicenseType();
    public void set_LicenseType(EksAnywhereSubscriptionLicenseType value);
    internal bool IsSetLicenseType();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public EksAnywhereSubscriptionTerm get_Term();
    public void set_Term(EksAnywhereSubscriptionTerm value);
    internal bool IsSetTerm();
}
public class Amazon.EKS.Model.CreateEksAnywhereSubscriptionResponse : AmazonWebServiceResponse {
    private EksAnywhereSubscription _subscription;
    public EksAnywhereSubscription Subscription { get; public set; }
    public EksAnywhereSubscription get_Subscription();
    public void set_Subscription(EksAnywhereSubscription value);
    internal bool IsSetSubscription();
}
public class Amazon.EKS.Model.CreateFargateProfileRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _clusterName;
    private string _fargateProfileName;
    private string _podExecutionRoleArn;
    private List`1<FargateProfileSelector> _selectors;
    private List`1<string> _subnets;
    private Dictionary`2<string, string> _tags;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string FargateProfileName { get; public set; }
    [AWSPropertyAttribute]
public string PodExecutionRoleArn { get; public set; }
    public List`1<FargateProfileSelector> Selectors { get; public set; }
    public List`1<string> Subnets { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_FargateProfileName();
    public void set_FargateProfileName(string value);
    internal bool IsSetFargateProfileName();
    public string get_PodExecutionRoleArn();
    public void set_PodExecutionRoleArn(string value);
    internal bool IsSetPodExecutionRoleArn();
    public List`1<FargateProfileSelector> get_Selectors();
    public void set_Selectors(List`1<FargateProfileSelector> value);
    internal bool IsSetSelectors();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
public class Amazon.EKS.Model.CreateFargateProfileResponse : AmazonWebServiceResponse {
    private FargateProfile _fargateProfile;
    public FargateProfile FargateProfile { get; public set; }
    public FargateProfile get_FargateProfile();
    public void set_FargateProfile(FargateProfile value);
    internal bool IsSetFargateProfile();
}
public class Amazon.EKS.Model.CreateNodegroupRequest : AmazonEKSRequest {
    private AMITypes _amiType;
    private CapacityTypes _capacityType;
    private string _clientRequestToken;
    private string _clusterName;
    private Nullable`1<int> _diskSize;
    private List`1<string> _instanceTypes;
    private Dictionary`2<string, string> _labels;
    private LaunchTemplateSpecification _launchTemplate;
    private string _nodegroupName;
    private string _nodeRole;
    private string _releaseVersion;
    private RemoteAccessConfig _remoteAccess;
    private NodegroupScalingConfig _scalingConfig;
    private List`1<string> _subnets;
    private Dictionary`2<string, string> _tags;
    private List`1<Taint> _taints;
    private NodegroupUpdateConfig _updateConfig;
    private string _version;
    public AMITypes AmiType { get; public set; }
    public CapacityTypes CapacityType { get; public set; }
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public Nullable`1<int> DiskSize { get; public set; }
    public List`1<string> InstanceTypes { get; public set; }
    public Dictionary`2<string, string> Labels { get; public set; }
    public LaunchTemplateSpecification LaunchTemplate { get; public set; }
    [AWSPropertyAttribute]
public string NodegroupName { get; public set; }
    [AWSPropertyAttribute]
public string NodeRole { get; public set; }
    public string ReleaseVersion { get; public set; }
    public RemoteAccessConfig RemoteAccess { get; public set; }
    public NodegroupScalingConfig ScalingConfig { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Subnets { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public List`1<Taint> Taints { get; public set; }
    public NodegroupUpdateConfig UpdateConfig { get; public set; }
    public string Version { get; public set; }
    public AMITypes get_AmiType();
    public void set_AmiType(AMITypes value);
    internal bool IsSetAmiType();
    public CapacityTypes get_CapacityType();
    public void set_CapacityType(CapacityTypes value);
    internal bool IsSetCapacityType();
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<int> get_DiskSize();
    public void set_DiskSize(Nullable`1<int> value);
    internal bool IsSetDiskSize();
    public List`1<string> get_InstanceTypes();
    public void set_InstanceTypes(List`1<string> value);
    internal bool IsSetInstanceTypes();
    public Dictionary`2<string, string> get_Labels();
    public void set_Labels(Dictionary`2<string, string> value);
    internal bool IsSetLabels();
    public LaunchTemplateSpecification get_LaunchTemplate();
    public void set_LaunchTemplate(LaunchTemplateSpecification value);
    internal bool IsSetLaunchTemplate();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_NodeRole();
    public void set_NodeRole(string value);
    internal bool IsSetNodeRole();
    public string get_ReleaseVersion();
    public void set_ReleaseVersion(string value);
    internal bool IsSetReleaseVersion();
    public RemoteAccessConfig get_RemoteAccess();
    public void set_RemoteAccess(RemoteAccessConfig value);
    internal bool IsSetRemoteAccess();
    public NodegroupScalingConfig get_ScalingConfig();
    public void set_ScalingConfig(NodegroupScalingConfig value);
    internal bool IsSetScalingConfig();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public List`1<Taint> get_Taints();
    public void set_Taints(List`1<Taint> value);
    internal bool IsSetTaints();
    public NodegroupUpdateConfig get_UpdateConfig();
    public void set_UpdateConfig(NodegroupUpdateConfig value);
    internal bool IsSetUpdateConfig();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.EKS.Model.CreateNodegroupResponse : AmazonWebServiceResponse {
    private Nodegroup _nodegroup;
    public Nodegroup Nodegroup { get; public set; }
    public Nodegroup get_Nodegroup();
    public void set_Nodegroup(Nodegroup value);
    internal bool IsSetNodegroup();
}
public class Amazon.EKS.Model.CreatePodIdentityAssociationRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _clusterName;
    private string _awsNamespace;
    private string _roleArn;
    private string _serviceAccount;
    private Dictionary`2<string, string> _tags;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string Namespace { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public string ServiceAccount { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public string get_ServiceAccount();
    public void set_ServiceAccount(string value);
    internal bool IsSetServiceAccount();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
public class Amazon.EKS.Model.CreatePodIdentityAssociationResponse : AmazonWebServiceResponse {
    private PodIdentityAssociation _association;
    public PodIdentityAssociation Association { get; public set; }
    public PodIdentityAssociation get_Association();
    public void set_Association(PodIdentityAssociation value);
    internal bool IsSetAssociation();
}
public class Amazon.EKS.Model.DeleteAccessEntryRequest : AmazonEKSRequest {
    private string _clusterName;
    private string _principalArn;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string PrincipalArn { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
}
public class Amazon.EKS.Model.DeleteAccessEntryResponse : AmazonWebServiceResponse {
}
public class Amazon.EKS.Model.DeleteAddonRequest : AmazonEKSRequest {
    private string _addonName;
    private string _clusterName;
    private Nullable`1<bool> _preserve;
    [AWSPropertyAttribute]
public string AddonName { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public Nullable`1<bool> Preserve { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<bool> get_Preserve();
    public void set_Preserve(Nullable`1<bool> value);
    internal bool IsSetPreserve();
}
public class Amazon.EKS.Model.DeleteAddonResponse : AmazonWebServiceResponse {
    private Addon _addon;
    public Addon Addon { get; public set; }
    public Addon get_Addon();
    public void set_Addon(Addon value);
    internal bool IsSetAddon();
}
public class Amazon.EKS.Model.DeleteClusterRequest : AmazonEKSRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EKS.Model.DeleteClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.EKS.Model.DeleteEksAnywhereSubscriptionRequest : AmazonEKSRequest {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.EKS.Model.DeleteEksAnywhereSubscriptionResponse : AmazonWebServiceResponse {
    private EksAnywhereSubscription _subscription;
    public EksAnywhereSubscription Subscription { get; public set; }
    public EksAnywhereSubscription get_Subscription();
    public void set_Subscription(EksAnywhereSubscription value);
    internal bool IsSetSubscription();
}
public class Amazon.EKS.Model.DeleteFargateProfileRequest : AmazonEKSRequest {
    private string _clusterName;
    private string _fargateProfileName;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string FargateProfileName { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_FargateProfileName();
    public void set_FargateProfileName(string value);
    internal bool IsSetFargateProfileName();
}
public class Amazon.EKS.Model.DeleteFargateProfileResponse : AmazonWebServiceResponse {
    private FargateProfile _fargateProfile;
    public FargateProfile FargateProfile { get; public set; }
    public FargateProfile get_FargateProfile();
    public void set_FargateProfile(FargateProfile value);
    internal bool IsSetFargateProfile();
}
public class Amazon.EKS.Model.DeleteNodegroupRequest : AmazonEKSRequest {
    private string _clusterName;
    private string _nodegroupName;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string NodegroupName { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
}
public class Amazon.EKS.Model.DeleteNodegroupResponse : AmazonWebServiceResponse {
    private Nodegroup _nodegroup;
    public Nodegroup Nodegroup { get; public set; }
    public Nodegroup get_Nodegroup();
    public void set_Nodegroup(Nodegroup value);
    internal bool IsSetNodegroup();
}
public class Amazon.EKS.Model.DeletePodIdentityAssociationRequest : AmazonEKSRequest {
    private string _associationId;
    private string _clusterName;
    [AWSPropertyAttribute]
public string AssociationId { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public string get_AssociationId();
    public void set_AssociationId(string value);
    internal bool IsSetAssociationId();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
}
public class Amazon.EKS.Model.DeletePodIdentityAssociationResponse : AmazonWebServiceResponse {
    private PodIdentityAssociation _association;
    public PodIdentityAssociation Association { get; public set; }
    public PodIdentityAssociation get_Association();
    public void set_Association(PodIdentityAssociation value);
    internal bool IsSetAssociation();
}
public class Amazon.EKS.Model.DeprecationDetail : object {
    private List`1<ClientStat> _clientStats;
    private string _replacedWith;
    private string _startServingReplacementVersion;
    private string _stopServingVersion;
    private string _usage;
    public List`1<ClientStat> ClientStats { get; public set; }
    public string ReplacedWith { get; public set; }
    public string StartServingReplacementVersion { get; public set; }
    public string StopServingVersion { get; public set; }
    public string Usage { get; public set; }
    public List`1<ClientStat> get_ClientStats();
    public void set_ClientStats(List`1<ClientStat> value);
    internal bool IsSetClientStats();
    public string get_ReplacedWith();
    public void set_ReplacedWith(string value);
    internal bool IsSetReplacedWith();
    public string get_StartServingReplacementVersion();
    public void set_StartServingReplacementVersion(string value);
    internal bool IsSetStartServingReplacementVersion();
    public string get_StopServingVersion();
    public void set_StopServingVersion(string value);
    internal bool IsSetStopServingVersion();
    public string get_Usage();
    public void set_Usage(string value);
    internal bool IsSetUsage();
}
public class Amazon.EKS.Model.DeregisterClusterRequest : AmazonEKSRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EKS.Model.DeregisterClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.EKS.Model.DescribeAccessEntryRequest : AmazonEKSRequest {
    private string _clusterName;
    private string _principalArn;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string PrincipalArn { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
}
public class Amazon.EKS.Model.DescribeAccessEntryResponse : AmazonWebServiceResponse {
    private AccessEntry _accessEntry;
    public AccessEntry AccessEntry { get; public set; }
    public AccessEntry get_AccessEntry();
    public void set_AccessEntry(AccessEntry value);
    internal bool IsSetAccessEntry();
}
public class Amazon.EKS.Model.DescribeAddonConfigurationRequest : AmazonEKSRequest {
    private string _addonName;
    private string _addonVersion;
    [AWSPropertyAttribute]
public string AddonName { get; public set; }
    [AWSPropertyAttribute]
public string AddonVersion { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_AddonVersion();
    public void set_AddonVersion(string value);
    internal bool IsSetAddonVersion();
}
public class Amazon.EKS.Model.DescribeAddonConfigurationResponse : AmazonWebServiceResponse {
    private string _addonName;
    private string _addonVersion;
    private string _configurationSchema;
    private List`1<AddonPodIdentityConfiguration> _podIdentityConfiguration;
    public string AddonName { get; public set; }
    public string AddonVersion { get; public set; }
    public string ConfigurationSchema { get; public set; }
    public List`1<AddonPodIdentityConfiguration> PodIdentityConfiguration { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_AddonVersion();
    public void set_AddonVersion(string value);
    internal bool IsSetAddonVersion();
    public string get_ConfigurationSchema();
    public void set_ConfigurationSchema(string value);
    internal bool IsSetConfigurationSchema();
    public List`1<AddonPodIdentityConfiguration> get_PodIdentityConfiguration();
    public void set_PodIdentityConfiguration(List`1<AddonPodIdentityConfiguration> value);
    internal bool IsSetPodIdentityConfiguration();
}
public class Amazon.EKS.Model.DescribeAddonRequest : AmazonEKSRequest {
    private string _addonName;
    private string _clusterName;
    [AWSPropertyAttribute]
public string AddonName { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
}
public class Amazon.EKS.Model.DescribeAddonResponse : AmazonWebServiceResponse {
    private Addon _addon;
    public Addon Addon { get; public set; }
    public Addon get_Addon();
    public void set_Addon(Addon value);
    internal bool IsSetAddon();
}
internal class Amazon.EKS.Model.DescribeAddonVersionsPaginator : object {
    private IAmazonEKS _client;
    private DescribeAddonVersionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeAddonVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<AddonInfo> Addons { get; }
    internal DescribeAddonVersionsPaginator(IAmazonEKS client, DescribeAddonVersionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeAddonVersionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<AddonInfo> get_Addons();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.DescribeAddonVersionsPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-DescribeAddonVersionsResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<DescribeAddonVersionsResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.DescribeAddonVersionsResponse>.Paginate();
}
public class Amazon.EKS.Model.DescribeAddonVersionsRequest : AmazonEKSRequest {
    private string _addonName;
    private string _kubernetesVersion;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private List`1<string> _owners;
    private List`1<string> _publishers;
    private List`1<string> _types;
    public string AddonName { get; public set; }
    public string KubernetesVersion { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> Owners { get; public set; }
    public List`1<string> Publishers { get; public set; }
    public List`1<string> Types { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_KubernetesVersion();
    public void set_KubernetesVersion(string value);
    internal bool IsSetKubernetesVersion();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_Owners();
    public void set_Owners(List`1<string> value);
    internal bool IsSetOwners();
    public List`1<string> get_Publishers();
    public void set_Publishers(List`1<string> value);
    internal bool IsSetPublishers();
    public List`1<string> get_Types();
    public void set_Types(List`1<string> value);
    internal bool IsSetTypes();
}
public class Amazon.EKS.Model.DescribeAddonVersionsResponse : AmazonWebServiceResponse {
    private List`1<AddonInfo> _addons;
    private string _nextToken;
    public List`1<AddonInfo> Addons { get; public set; }
    public string NextToken { get; public set; }
    public List`1<AddonInfo> get_Addons();
    public void set_Addons(List`1<AddonInfo> value);
    internal bool IsSetAddons();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.DescribeClusterRequest : AmazonEKSRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EKS.Model.DescribeClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.EKS.Model.DescribeEksAnywhereSubscriptionRequest : AmazonEKSRequest {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.EKS.Model.DescribeEksAnywhereSubscriptionResponse : AmazonWebServiceResponse {
    private EksAnywhereSubscription _subscription;
    public EksAnywhereSubscription Subscription { get; public set; }
    public EksAnywhereSubscription get_Subscription();
    public void set_Subscription(EksAnywhereSubscription value);
    internal bool IsSetSubscription();
}
public class Amazon.EKS.Model.DescribeFargateProfileRequest : AmazonEKSRequest {
    private string _clusterName;
    private string _fargateProfileName;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string FargateProfileName { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_FargateProfileName();
    public void set_FargateProfileName(string value);
    internal bool IsSetFargateProfileName();
}
public class Amazon.EKS.Model.DescribeFargateProfileResponse : AmazonWebServiceResponse {
    private FargateProfile _fargateProfile;
    public FargateProfile FargateProfile { get; public set; }
    public FargateProfile get_FargateProfile();
    public void set_FargateProfile(FargateProfile value);
    internal bool IsSetFargateProfile();
}
public class Amazon.EKS.Model.DescribeIdentityProviderConfigRequest : AmazonEKSRequest {
    private string _clusterName;
    private IdentityProviderConfig _identityProviderConfig;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public IdentityProviderConfig IdentityProviderConfig { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public IdentityProviderConfig get_IdentityProviderConfig();
    public void set_IdentityProviderConfig(IdentityProviderConfig value);
    internal bool IsSetIdentityProviderConfig();
}
public class Amazon.EKS.Model.DescribeIdentityProviderConfigResponse : AmazonWebServiceResponse {
    private IdentityProviderConfigResponse _identityProviderConfig;
    public IdentityProviderConfigResponse IdentityProviderConfig { get; public set; }
    public IdentityProviderConfigResponse get_IdentityProviderConfig();
    public void set_IdentityProviderConfig(IdentityProviderConfigResponse value);
    internal bool IsSetIdentityProviderConfig();
}
public class Amazon.EKS.Model.DescribeInsightRequest : AmazonEKSRequest {
    private string _clusterName;
    private string _id;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.EKS.Model.DescribeInsightResponse : AmazonWebServiceResponse {
    private Insight _insight;
    public Insight Insight { get; public set; }
    public Insight get_Insight();
    public void set_Insight(Insight value);
    internal bool IsSetInsight();
}
public class Amazon.EKS.Model.DescribeNodegroupRequest : AmazonEKSRequest {
    private string _clusterName;
    private string _nodegroupName;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string NodegroupName { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
}
public class Amazon.EKS.Model.DescribeNodegroupResponse : AmazonWebServiceResponse {
    private Nodegroup _nodegroup;
    public Nodegroup Nodegroup { get; public set; }
    public Nodegroup get_Nodegroup();
    public void set_Nodegroup(Nodegroup value);
    internal bool IsSetNodegroup();
}
public class Amazon.EKS.Model.DescribePodIdentityAssociationRequest : AmazonEKSRequest {
    private string _associationId;
    private string _clusterName;
    [AWSPropertyAttribute]
public string AssociationId { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public string get_AssociationId();
    public void set_AssociationId(string value);
    internal bool IsSetAssociationId();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
}
public class Amazon.EKS.Model.DescribePodIdentityAssociationResponse : AmazonWebServiceResponse {
    private PodIdentityAssociation _association;
    public PodIdentityAssociation Association { get; public set; }
    public PodIdentityAssociation get_Association();
    public void set_Association(PodIdentityAssociation value);
    internal bool IsSetAssociation();
}
public class Amazon.EKS.Model.DescribeUpdateRequest : AmazonEKSRequest {
    private string _addonName;
    private string _name;
    private string _nodegroupName;
    private string _updateId;
    public string AddonName { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string NodegroupName { get; public set; }
    [AWSPropertyAttribute]
public string UpdateId { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_UpdateId();
    public void set_UpdateId(string value);
    internal bool IsSetUpdateId();
}
public class Amazon.EKS.Model.DescribeUpdateResponse : AmazonWebServiceResponse {
    private Update _update;
    public Update Update { get; public set; }
    public Update get_Update();
    public void set_Update(Update value);
    internal bool IsSetUpdate();
}
public class Amazon.EKS.Model.DisassociateAccessPolicyRequest : AmazonEKSRequest {
    private string _clusterName;
    private string _policyArn;
    private string _principalArn;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string PrincipalArn { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
}
public class Amazon.EKS.Model.DisassociateAccessPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.EKS.Model.DisassociateIdentityProviderConfigRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _clusterName;
    private IdentityProviderConfig _identityProviderConfig;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public IdentityProviderConfig IdentityProviderConfig { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public IdentityProviderConfig get_IdentityProviderConfig();
    public void set_IdentityProviderConfig(IdentityProviderConfig value);
    internal bool IsSetIdentityProviderConfig();
}
public class Amazon.EKS.Model.DisassociateIdentityProviderConfigResponse : AmazonWebServiceResponse {
    private Update _update;
    public Update Update { get; public set; }
    public Update get_Update();
    public void set_Update(Update value);
    internal bool IsSetUpdate();
}
public class Amazon.EKS.Model.EksAnywhereSubscription : object {
    private string _arn;
    private Nullable`1<bool> _autoRenew;
    private Nullable`1<DateTime> _createdAt;
    private Nullable`1<DateTime> _effectiveDate;
    private Nullable`1<DateTime> _expirationDate;
    private string _id;
    private List`1<string> _licenseArns;
    private Nullable`1<int> _licenseQuantity;
    private EksAnywhereSubscriptionLicenseType _licenseType;
    private string _status;
    private Dictionary`2<string, string> _tags;
    private EksAnywhereSubscriptionTerm _term;
    public string Arn { get; public set; }
    public Nullable`1<bool> AutoRenew { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public Nullable`1<DateTime> EffectiveDate { get; public set; }
    public Nullable`1<DateTime> ExpirationDate { get; public set; }
    public string Id { get; public set; }
    public List`1<string> LicenseArns { get; public set; }
    public Nullable`1<int> LicenseQuantity { get; public set; }
    public EksAnywhereSubscriptionLicenseType LicenseType { get; public set; }
    public string Status { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public EksAnywhereSubscriptionTerm Term { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<bool> get_AutoRenew();
    public void set_AutoRenew(Nullable`1<bool> value);
    internal bool IsSetAutoRenew();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public Nullable`1<DateTime> get_EffectiveDate();
    public void set_EffectiveDate(Nullable`1<DateTime> value);
    internal bool IsSetEffectiveDate();
    public Nullable`1<DateTime> get_ExpirationDate();
    public void set_ExpirationDate(Nullable`1<DateTime> value);
    internal bool IsSetExpirationDate();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public List`1<string> get_LicenseArns();
    public void set_LicenseArns(List`1<string> value);
    internal bool IsSetLicenseArns();
    public Nullable`1<int> get_LicenseQuantity();
    public void set_LicenseQuantity(Nullable`1<int> value);
    internal bool IsSetLicenseQuantity();
    public EksAnywhereSubscriptionLicenseType get_LicenseType();
    public void set_LicenseType(EksAnywhereSubscriptionLicenseType value);
    internal bool IsSetLicenseType();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public EksAnywhereSubscriptionTerm get_Term();
    public void set_Term(EksAnywhereSubscriptionTerm value);
    internal bool IsSetTerm();
}
public class Amazon.EKS.Model.EksAnywhereSubscriptionTerm : object {
    private Nullable`1<int> _duration;
    private EksAnywhereSubscriptionTermUnit _unit;
    public Nullable`1<int> Duration { get; public set; }
    public EksAnywhereSubscriptionTermUnit Unit { get; public set; }
    public Nullable`1<int> get_Duration();
    public void set_Duration(Nullable`1<int> value);
    internal bool IsSetDuration();
    public EksAnywhereSubscriptionTermUnit get_Unit();
    public void set_Unit(EksAnywhereSubscriptionTermUnit value);
    internal bool IsSetUnit();
}
public class Amazon.EKS.Model.EKSPaginatorFactory : object {
    private IAmazonEKS client;
    internal EKSPaginatorFactory(IAmazonEKS client);
    public sealed virtual IDescribeAddonVersionsPaginator DescribeAddonVersions(DescribeAddonVersionsRequest request);
    public sealed virtual IListAccessEntriesPaginator ListAccessEntries(ListAccessEntriesRequest request);
    public sealed virtual IListAccessPoliciesPaginator ListAccessPolicies(ListAccessPoliciesRequest request);
    public sealed virtual IListAddonsPaginator ListAddons(ListAddonsRequest request);
    public sealed virtual IListAssociatedAccessPoliciesPaginator ListAssociatedAccessPolicies(ListAssociatedAccessPoliciesRequest request);
    public sealed virtual IListClustersPaginator ListClusters(ListClustersRequest request);
    public sealed virtual IListEksAnywhereSubscriptionsPaginator ListEksAnywhereSubscriptions(ListEksAnywhereSubscriptionsRequest request);
    public sealed virtual IListFargateProfilesPaginator ListFargateProfiles(ListFargateProfilesRequest request);
    public sealed virtual IListIdentityProviderConfigsPaginator ListIdentityProviderConfigs(ListIdentityProviderConfigsRequest request);
    public sealed virtual IListInsightsPaginator ListInsights(ListInsightsRequest request);
    public sealed virtual IListNodegroupsPaginator ListNodegroups(ListNodegroupsRequest request);
    public sealed virtual IListPodIdentityAssociationsPaginator ListPodIdentityAssociations(ListPodIdentityAssociationsRequest request);
    public sealed virtual IListUpdatesPaginator ListUpdates(ListUpdatesRequest request);
}
public class Amazon.EKS.Model.EncryptionConfig : object {
    private Provider _provider;
    private List`1<string> _resources;
    public Provider Provider { get; public set; }
    public List`1<string> Resources { get; public set; }
    public Provider get_Provider();
    public void set_Provider(Provider value);
    internal bool IsSetProvider();
    public List`1<string> get_Resources();
    public void set_Resources(List`1<string> value);
    internal bool IsSetResources();
}
public class Amazon.EKS.Model.ErrorDetail : object {
    private ErrorCode _errorCode;
    private string _errorMessage;
    private List`1<string> _resourceIds;
    public ErrorCode ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    public List`1<string> ResourceIds { get; public set; }
    public ErrorCode get_ErrorCode();
    public void set_ErrorCode(ErrorCode value);
    internal bool IsSetErrorCode();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    internal bool IsSetErrorMessage();
    public List`1<string> get_ResourceIds();
    public void set_ResourceIds(List`1<string> value);
    internal bool IsSetResourceIds();
}
public class Amazon.EKS.Model.FargateProfile : object {
    private string _clusterName;
    private Nullable`1<DateTime> _createdAt;
    private string _fargateProfileArn;
    private string _fargateProfileName;
    private FargateProfileHealth _health;
    private string _podExecutionRoleArn;
    private List`1<FargateProfileSelector> _selectors;
    private FargateProfileStatus _status;
    private List`1<string> _subnets;
    private Dictionary`2<string, string> _tags;
    public string ClusterName { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public string FargateProfileArn { get; public set; }
    public string FargateProfileName { get; public set; }
    public FargateProfileHealth Health { get; public set; }
    public string PodExecutionRoleArn { get; public set; }
    public List`1<FargateProfileSelector> Selectors { get; public set; }
    public FargateProfileStatus Status { get; public set; }
    public List`1<string> Subnets { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public string get_FargateProfileArn();
    public void set_FargateProfileArn(string value);
    internal bool IsSetFargateProfileArn();
    public string get_FargateProfileName();
    public void set_FargateProfileName(string value);
    internal bool IsSetFargateProfileName();
    public FargateProfileHealth get_Health();
    public void set_Health(FargateProfileHealth value);
    internal bool IsSetHealth();
    public string get_PodExecutionRoleArn();
    public void set_PodExecutionRoleArn(string value);
    internal bool IsSetPodExecutionRoleArn();
    public List`1<FargateProfileSelector> get_Selectors();
    public void set_Selectors(List`1<FargateProfileSelector> value);
    internal bool IsSetSelectors();
    public FargateProfileStatus get_Status();
    public void set_Status(FargateProfileStatus value);
    internal bool IsSetStatus();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
public class Amazon.EKS.Model.FargateProfileHealth : object {
    private List`1<FargateProfileIssue> _issues;
    public List`1<FargateProfileIssue> Issues { get; public set; }
    public List`1<FargateProfileIssue> get_Issues();
    public void set_Issues(List`1<FargateProfileIssue> value);
    internal bool IsSetIssues();
}
public class Amazon.EKS.Model.FargateProfileIssue : object {
    private FargateProfileIssueCode _code;
    private string _message;
    private List`1<string> _resourceIds;
    public FargateProfileIssueCode Code { get; public set; }
    public string Message { get; public set; }
    public List`1<string> ResourceIds { get; public set; }
    public FargateProfileIssueCode get_Code();
    public void set_Code(FargateProfileIssueCode value);
    internal bool IsSetCode();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public List`1<string> get_ResourceIds();
    public void set_ResourceIds(List`1<string> value);
    internal bool IsSetResourceIds();
}
public class Amazon.EKS.Model.FargateProfileSelector : object {
    private Dictionary`2<string, string> _labels;
    private string _awsNamespace;
    public Dictionary`2<string, string> Labels { get; public set; }
    public string Namespace { get; public set; }
    public Dictionary`2<string, string> get_Labels();
    public void set_Labels(Dictionary`2<string, string> value);
    internal bool IsSetLabels();
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
}
public class Amazon.EKS.Model.Identity : object {
    private OIDC _oidc;
    public OIDC Oidc { get; public set; }
    public OIDC get_Oidc();
    public void set_Oidc(OIDC value);
    internal bool IsSetOidc();
}
public class Amazon.EKS.Model.IdentityProviderConfig : object {
    private string _name;
    private string _type;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
}
public class Amazon.EKS.Model.IdentityProviderConfigResponse : object {
    private OidcIdentityProviderConfig _oidc;
    public OidcIdentityProviderConfig Oidc { get; public set; }
    public OidcIdentityProviderConfig get_Oidc();
    public void set_Oidc(OidcIdentityProviderConfig value);
    internal bool IsSetOidc();
}
public interface Amazon.EKS.Model.IDescribeAddonVersionsPaginator {
    public IPaginatedEnumerable`1<DescribeAddonVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<AddonInfo> Addons { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeAddonVersionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<AddonInfo> get_Addons();
}
public interface Amazon.EKS.Model.IEKSPaginatorFactory {
    public abstract virtual IDescribeAddonVersionsPaginator DescribeAddonVersions(DescribeAddonVersionsRequest request);
    public abstract virtual IListAccessEntriesPaginator ListAccessEntries(ListAccessEntriesRequest request);
    public abstract virtual IListAccessPoliciesPaginator ListAccessPolicies(ListAccessPoliciesRequest request);
    public abstract virtual IListAddonsPaginator ListAddons(ListAddonsRequest request);
    public abstract virtual IListAssociatedAccessPoliciesPaginator ListAssociatedAccessPolicies(ListAssociatedAccessPoliciesRequest request);
    public abstract virtual IListClustersPaginator ListClusters(ListClustersRequest request);
    public abstract virtual IListEksAnywhereSubscriptionsPaginator ListEksAnywhereSubscriptions(ListEksAnywhereSubscriptionsRequest request);
    public abstract virtual IListFargateProfilesPaginator ListFargateProfiles(ListFargateProfilesRequest request);
    public abstract virtual IListIdentityProviderConfigsPaginator ListIdentityProviderConfigs(ListIdentityProviderConfigsRequest request);
    public abstract virtual IListInsightsPaginator ListInsights(ListInsightsRequest request);
    public abstract virtual IListNodegroupsPaginator ListNodegroups(ListNodegroupsRequest request);
    public abstract virtual IListPodIdentityAssociationsPaginator ListPodIdentityAssociations(ListPodIdentityAssociationsRequest request);
    public abstract virtual IListUpdatesPaginator ListUpdates(ListUpdatesRequest request);
}
public interface Amazon.EKS.Model.IListAccessEntriesPaginator {
    public IPaginatedEnumerable`1<ListAccessEntriesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> AccessEntries { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAccessEntriesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_AccessEntries();
}
public interface Amazon.EKS.Model.IListAccessPoliciesPaginator {
    public IPaginatedEnumerable`1<ListAccessPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AccessPolicy> AccessPolicies { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAccessPoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<AccessPolicy> get_AccessPolicies();
}
public interface Amazon.EKS.Model.IListAddonsPaginator {
    public IPaginatedEnumerable`1<ListAddonsResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> Addons { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAddonsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_Addons();
}
public interface Amazon.EKS.Model.IListAssociatedAccessPoliciesPaginator {
    public IPaginatedEnumerable`1<ListAssociatedAccessPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AssociatedAccessPolicy> AssociatedAccessPolicies { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAssociatedAccessPoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<AssociatedAccessPolicy> get_AssociatedAccessPolicies();
}
public interface Amazon.EKS.Model.IListClustersPaginator {
    public IPaginatedEnumerable`1<ListClustersResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> Clusters { get; }
    public abstract virtual IPaginatedEnumerable`1<ListClustersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_Clusters();
}
public interface Amazon.EKS.Model.IListEksAnywhereSubscriptionsPaginator {
    public IPaginatedEnumerable`1<ListEksAnywhereSubscriptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<EksAnywhereSubscription> Subscriptions { get; }
    public abstract virtual IPaginatedEnumerable`1<ListEksAnywhereSubscriptionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<EksAnywhereSubscription> get_Subscriptions();
}
public interface Amazon.EKS.Model.IListFargateProfilesPaginator {
    public IPaginatedEnumerable`1<ListFargateProfilesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> FargateProfileNames { get; }
    public abstract virtual IPaginatedEnumerable`1<ListFargateProfilesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_FargateProfileNames();
}
public interface Amazon.EKS.Model.IListIdentityProviderConfigsPaginator {
    public IPaginatedEnumerable`1<ListIdentityProviderConfigsResponse> Responses { get; }
    public IPaginatedEnumerable`1<IdentityProviderConfig> IdentityProviderConfigs { get; }
    public abstract virtual IPaginatedEnumerable`1<ListIdentityProviderConfigsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<IdentityProviderConfig> get_IdentityProviderConfigs();
}
public interface Amazon.EKS.Model.IListInsightsPaginator {
    public IPaginatedEnumerable`1<ListInsightsResponse> Responses { get; }
    public IPaginatedEnumerable`1<InsightSummary> Insights { get; }
    public abstract virtual IPaginatedEnumerable`1<ListInsightsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<InsightSummary> get_Insights();
}
public interface Amazon.EKS.Model.IListNodegroupsPaginator {
    public IPaginatedEnumerable`1<ListNodegroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> Nodegroups { get; }
    public abstract virtual IPaginatedEnumerable`1<ListNodegroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_Nodegroups();
}
public interface Amazon.EKS.Model.IListPodIdentityAssociationsPaginator {
    public IPaginatedEnumerable`1<ListPodIdentityAssociationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<PodIdentityAssociationSummary> Associations { get; }
    public abstract virtual IPaginatedEnumerable`1<ListPodIdentityAssociationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<PodIdentityAssociationSummary> get_Associations();
}
public interface Amazon.EKS.Model.IListUpdatesPaginator {
    public IPaginatedEnumerable`1<ListUpdatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> UpdateIds { get; }
    public abstract virtual IPaginatedEnumerable`1<ListUpdatesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_UpdateIds();
}
public class Amazon.EKS.Model.Insight : object {
    private Dictionary`2<string, string> _additionalInfo;
    private Category _category;
    private InsightCategorySpecificSummary _categorySpecificSummary;
    private string _description;
    private string _id;
    private InsightStatus _insightStatus;
    private string _kubernetesVersion;
    private Nullable`1<DateTime> _lastRefreshTime;
    private Nullable`1<DateTime> _lastTransitionTime;
    private string _name;
    private string _recommendation;
    private List`1<InsightResourceDetail> _resources;
    public Dictionary`2<string, string> AdditionalInfo { get; public set; }
    public Category Category { get; public set; }
    public InsightCategorySpecificSummary CategorySpecificSummary { get; public set; }
    public string Description { get; public set; }
    public string Id { get; public set; }
    public InsightStatus InsightStatus { get; public set; }
    public string KubernetesVersion { get; public set; }
    public Nullable`1<DateTime> LastRefreshTime { get; public set; }
    public Nullable`1<DateTime> LastTransitionTime { get; public set; }
    public string Name { get; public set; }
    public string Recommendation { get; public set; }
    public List`1<InsightResourceDetail> Resources { get; public set; }
    public Dictionary`2<string, string> get_AdditionalInfo();
    public void set_AdditionalInfo(Dictionary`2<string, string> value);
    internal bool IsSetAdditionalInfo();
    public Category get_Category();
    public void set_Category(Category value);
    internal bool IsSetCategory();
    public InsightCategorySpecificSummary get_CategorySpecificSummary();
    public void set_CategorySpecificSummary(InsightCategorySpecificSummary value);
    internal bool IsSetCategorySpecificSummary();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public InsightStatus get_InsightStatus();
    public void set_InsightStatus(InsightStatus value);
    internal bool IsSetInsightStatus();
    public string get_KubernetesVersion();
    public void set_KubernetesVersion(string value);
    internal bool IsSetKubernetesVersion();
    public Nullable`1<DateTime> get_LastRefreshTime();
    public void set_LastRefreshTime(Nullable`1<DateTime> value);
    internal bool IsSetLastRefreshTime();
    public Nullable`1<DateTime> get_LastTransitionTime();
    public void set_LastTransitionTime(Nullable`1<DateTime> value);
    internal bool IsSetLastTransitionTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Recommendation();
    public void set_Recommendation(string value);
    internal bool IsSetRecommendation();
    public List`1<InsightResourceDetail> get_Resources();
    public void set_Resources(List`1<InsightResourceDetail> value);
    internal bool IsSetResources();
}
public class Amazon.EKS.Model.InsightCategorySpecificSummary : object {
    private List`1<DeprecationDetail> _deprecationDetails;
    public List`1<DeprecationDetail> DeprecationDetails { get; public set; }
    public List`1<DeprecationDetail> get_DeprecationDetails();
    public void set_DeprecationDetails(List`1<DeprecationDetail> value);
    internal bool IsSetDeprecationDetails();
}
public class Amazon.EKS.Model.InsightResourceDetail : object {
    private string _arn;
    private InsightStatus _insightStatus;
    private string _kubernetesResourceUri;
    public string Arn { get; public set; }
    public InsightStatus InsightStatus { get; public set; }
    public string KubernetesResourceUri { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public InsightStatus get_InsightStatus();
    public void set_InsightStatus(InsightStatus value);
    internal bool IsSetInsightStatus();
    public string get_KubernetesResourceUri();
    public void set_KubernetesResourceUri(string value);
    internal bool IsSetKubernetesResourceUri();
}
public class Amazon.EKS.Model.InsightsFilter : object {
    private List`1<string> _categories;
    private List`1<string> _kubernetesVersions;
    private List`1<string> _statuses;
    public List`1<string> Categories { get; public set; }
    public List`1<string> KubernetesVersions { get; public set; }
    public List`1<string> Statuses { get; public set; }
    public List`1<string> get_Categories();
    public void set_Categories(List`1<string> value);
    internal bool IsSetCategories();
    public List`1<string> get_KubernetesVersions();
    public void set_KubernetesVersions(List`1<string> value);
    internal bool IsSetKubernetesVersions();
    public List`1<string> get_Statuses();
    public void set_Statuses(List`1<string> value);
    internal bool IsSetStatuses();
}
public class Amazon.EKS.Model.InsightStatus : object {
    private string _reason;
    private InsightStatusValue _status;
    public string Reason { get; public set; }
    public InsightStatusValue Status { get; public set; }
    public string get_Reason();
    public void set_Reason(string value);
    internal bool IsSetReason();
    public InsightStatusValue get_Status();
    public void set_Status(InsightStatusValue value);
    internal bool IsSetStatus();
}
public class Amazon.EKS.Model.InsightSummary : object {
    private Category _category;
    private string _description;
    private string _id;
    private InsightStatus _insightStatus;
    private string _kubernetesVersion;
    private Nullable`1<DateTime> _lastRefreshTime;
    private Nullable`1<DateTime> _lastTransitionTime;
    private string _name;
    public Category Category { get; public set; }
    public string Description { get; public set; }
    public string Id { get; public set; }
    public InsightStatus InsightStatus { get; public set; }
    public string KubernetesVersion { get; public set; }
    public Nullable`1<DateTime> LastRefreshTime { get; public set; }
    public Nullable`1<DateTime> LastTransitionTime { get; public set; }
    public string Name { get; public set; }
    public Category get_Category();
    public void set_Category(Category value);
    internal bool IsSetCategory();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public InsightStatus get_InsightStatus();
    public void set_InsightStatus(InsightStatus value);
    internal bool IsSetInsightStatus();
    public string get_KubernetesVersion();
    public void set_KubernetesVersion(string value);
    internal bool IsSetKubernetesVersion();
    public Nullable`1<DateTime> get_LastRefreshTime();
    public void set_LastRefreshTime(Nullable`1<DateTime> value);
    internal bool IsSetLastRefreshTime();
    public Nullable`1<DateTime> get_LastTransitionTime();
    public void set_LastTransitionTime(Nullable`1<DateTime> value);
    internal bool IsSetLastTransitionTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AccessConfigResponseUnmarshaller : object {
    private static AccessConfigResponseUnmarshaller _instance;
    public static AccessConfigResponseUnmarshaller Instance { get; }
    private static AccessConfigResponseUnmarshaller();
    private sealed virtual override AccessConfigResponse Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AccessConfigResponse,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessConfigResponse Unmarshall(JsonUnmarshallerContext context);
    public static AccessConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AccessDeniedExceptionUnmarshaller : object {
    private static AccessDeniedExceptionUnmarshaller _instance;
    public static AccessDeniedExceptionUnmarshaller Instance { get; }
    private static AccessDeniedExceptionUnmarshaller();
    public sealed virtual AccessDeniedException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual AccessDeniedException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static AccessDeniedExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AccessEntryUnmarshaller : object {
    private static AccessEntryUnmarshaller _instance;
    public static AccessEntryUnmarshaller Instance { get; }
    private static AccessEntryUnmarshaller();
    private sealed virtual override AccessEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AccessEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessEntry Unmarshall(JsonUnmarshallerContext context);
    public static AccessEntryUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AccessPolicyUnmarshaller : object {
    private static AccessPolicyUnmarshaller _instance;
    public static AccessPolicyUnmarshaller Instance { get; }
    private static AccessPolicyUnmarshaller();
    private sealed virtual override AccessPolicy Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AccessPolicy,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessPolicy Unmarshall(JsonUnmarshallerContext context);
    public static AccessPolicyUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AccessScopeMarshaller : object {
    public static AccessScopeMarshaller Instance;
    private static AccessScopeMarshaller();
    public sealed virtual void Marshall(AccessScope requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AccessScopeUnmarshaller : object {
    private static AccessScopeUnmarshaller _instance;
    public static AccessScopeUnmarshaller Instance { get; }
    private static AccessScopeUnmarshaller();
    private sealed virtual override AccessScope Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AccessScope,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessScope Unmarshall(JsonUnmarshallerContext context);
    public static AccessScopeUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AddonHealthUnmarshaller : object {
    private static AddonHealthUnmarshaller _instance;
    public static AddonHealthUnmarshaller Instance { get; }
    private static AddonHealthUnmarshaller();
    private sealed virtual override AddonHealth Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AddonHealth,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AddonHealth Unmarshall(JsonUnmarshallerContext context);
    public static AddonHealthUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AddonInfoUnmarshaller : object {
    private static AddonInfoUnmarshaller _instance;
    public static AddonInfoUnmarshaller Instance { get; }
    private static AddonInfoUnmarshaller();
    private sealed virtual override AddonInfo Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AddonInfo,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AddonInfo Unmarshall(JsonUnmarshallerContext context);
    public static AddonInfoUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AddonIssueUnmarshaller : object {
    private static AddonIssueUnmarshaller _instance;
    public static AddonIssueUnmarshaller Instance { get; }
    private static AddonIssueUnmarshaller();
    private sealed virtual override AddonIssue Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AddonIssue,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AddonIssue Unmarshall(JsonUnmarshallerContext context);
    public static AddonIssueUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AddonPodIdentityAssociationsMarshaller : object {
    public static AddonPodIdentityAssociationsMarshaller Instance;
    private static AddonPodIdentityAssociationsMarshaller();
    public sealed virtual void Marshall(AddonPodIdentityAssociations requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AddonPodIdentityConfigurationUnmarshaller : object {
    private static AddonPodIdentityConfigurationUnmarshaller _instance;
    public static AddonPodIdentityConfigurationUnmarshaller Instance { get; }
    private static AddonPodIdentityConfigurationUnmarshaller();
    private sealed virtual override AddonPodIdentityConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AddonPodIdentityConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AddonPodIdentityConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static AddonPodIdentityConfigurationUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AddonUnmarshaller : object {
    private static AddonUnmarshaller _instance;
    public static AddonUnmarshaller Instance { get; }
    private static AddonUnmarshaller();
    private sealed virtual override Addon Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Addon,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Addon Unmarshall(JsonUnmarshallerContext context);
    public static AddonUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AddonVersionInfoUnmarshaller : object {
    private static AddonVersionInfoUnmarshaller _instance;
    public static AddonVersionInfoUnmarshaller Instance { get; }
    private static AddonVersionInfoUnmarshaller();
    private sealed virtual override AddonVersionInfo Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AddonVersionInfo,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AddonVersionInfo Unmarshall(JsonUnmarshallerContext context);
    public static AddonVersionInfoUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AssociateAccessPolicyRequestMarshaller : object {
    private static AssociateAccessPolicyRequestMarshaller _instance;
    public static AssociateAccessPolicyRequestMarshaller Instance { get; }
    private static AssociateAccessPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AssociateAccessPolicyRequest publicRequest);
    internal static AssociateAccessPolicyRequestMarshaller GetInstance();
    public static AssociateAccessPolicyRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AssociateAccessPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static AssociateAccessPolicyResponseUnmarshaller _instance;
    public static AssociateAccessPolicyResponseUnmarshaller Instance { get; }
    private static AssociateAccessPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AssociateAccessPolicyResponseUnmarshaller GetInstance();
    public static AssociateAccessPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AssociatedAccessPolicyUnmarshaller : object {
    private static AssociatedAccessPolicyUnmarshaller _instance;
    public static AssociatedAccessPolicyUnmarshaller Instance { get; }
    private static AssociatedAccessPolicyUnmarshaller();
    private sealed virtual override AssociatedAccessPolicy Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AssociatedAccessPolicy,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AssociatedAccessPolicy Unmarshall(JsonUnmarshallerContext context);
    public static AssociatedAccessPolicyUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AssociateEncryptionConfigRequestMarshaller : object {
    private static AssociateEncryptionConfigRequestMarshaller _instance;
    public static AssociateEncryptionConfigRequestMarshaller Instance { get; }
    private static AssociateEncryptionConfigRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AssociateEncryptionConfigRequest publicRequest);
    internal static AssociateEncryptionConfigRequestMarshaller GetInstance();
    public static AssociateEncryptionConfigRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AssociateEncryptionConfigResponseUnmarshaller : JsonResponseUnmarshaller {
    private static AssociateEncryptionConfigResponseUnmarshaller _instance;
    public static AssociateEncryptionConfigResponseUnmarshaller Instance { get; }
    private static AssociateEncryptionConfigResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AssociateEncryptionConfigResponseUnmarshaller GetInstance();
    public static AssociateEncryptionConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AssociateIdentityProviderConfigRequestMarshaller : object {
    private static AssociateIdentityProviderConfigRequestMarshaller _instance;
    public static AssociateIdentityProviderConfigRequestMarshaller Instance { get; }
    private static AssociateIdentityProviderConfigRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AssociateIdentityProviderConfigRequest publicRequest);
    internal static AssociateIdentityProviderConfigRequestMarshaller GetInstance();
    public static AssociateIdentityProviderConfigRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AssociateIdentityProviderConfigResponseUnmarshaller : JsonResponseUnmarshaller {
    private static AssociateIdentityProviderConfigResponseUnmarshaller _instance;
    public static AssociateIdentityProviderConfigResponseUnmarshaller Instance { get; }
    private static AssociateIdentityProviderConfigResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AssociateIdentityProviderConfigResponseUnmarshaller GetInstance();
    public static AssociateIdentityProviderConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.AutoScalingGroupUnmarshaller : object {
    private static AutoScalingGroupUnmarshaller _instance;
    public static AutoScalingGroupUnmarshaller Instance { get; }
    private static AutoScalingGroupUnmarshaller();
    private sealed virtual override AutoScalingGroup Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.AutoScalingGroup,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AutoScalingGroup Unmarshall(JsonUnmarshallerContext context);
    public static AutoScalingGroupUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.BadRequestExceptionUnmarshaller : object {
    private static BadRequestExceptionUnmarshaller _instance;
    public static BadRequestExceptionUnmarshaller Instance { get; }
    private static BadRequestExceptionUnmarshaller();
    public sealed virtual BadRequestException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual BadRequestException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static BadRequestExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CertificateUnmarshaller : object {
    private static CertificateUnmarshaller _instance;
    public static CertificateUnmarshaller Instance { get; }
    private static CertificateUnmarshaller();
    private sealed virtual override Certificate Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Certificate,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Certificate Unmarshall(JsonUnmarshallerContext context);
    public static CertificateUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ClientExceptionUnmarshaller : object {
    private static ClientExceptionUnmarshaller _instance;
    public static ClientExceptionUnmarshaller Instance { get; }
    private static ClientExceptionUnmarshaller();
    public sealed virtual ClientException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ClientException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClientExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ClientStatUnmarshaller : object {
    private static ClientStatUnmarshaller _instance;
    public static ClientStatUnmarshaller Instance { get; }
    private static ClientStatUnmarshaller();
    private sealed virtual override ClientStat Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.ClientStat,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClientStat Unmarshall(JsonUnmarshallerContext context);
    public static ClientStatUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ClusterHealthUnmarshaller : object {
    private static ClusterHealthUnmarshaller _instance;
    public static ClusterHealthUnmarshaller Instance { get; }
    private static ClusterHealthUnmarshaller();
    private sealed virtual override ClusterHealth Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.ClusterHealth,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterHealth Unmarshall(JsonUnmarshallerContext context);
    public static ClusterHealthUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ClusterIssueUnmarshaller : object {
    private static ClusterIssueUnmarshaller _instance;
    public static ClusterIssueUnmarshaller Instance { get; }
    private static ClusterIssueUnmarshaller();
    private sealed virtual override ClusterIssue Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.ClusterIssue,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterIssue Unmarshall(JsonUnmarshallerContext context);
    public static ClusterIssueUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ClusterUnmarshaller : object {
    private static ClusterUnmarshaller _instance;
    public static ClusterUnmarshaller Instance { get; }
    private static ClusterUnmarshaller();
    private sealed virtual override Cluster Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Cluster,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Cluster Unmarshall(JsonUnmarshallerContext context);
    public static ClusterUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CompatibilityUnmarshaller : object {
    private static CompatibilityUnmarshaller _instance;
    public static CompatibilityUnmarshaller Instance { get; }
    private static CompatibilityUnmarshaller();
    private sealed virtual override Compatibility Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Compatibility,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Compatibility Unmarshall(JsonUnmarshallerContext context);
    public static CompatibilityUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ConnectorConfigRequestMarshaller : object {
    public static ConnectorConfigRequestMarshaller Instance;
    private static ConnectorConfigRequestMarshaller();
    public sealed virtual void Marshall(ConnectorConfigRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ConnectorConfigResponseUnmarshaller : object {
    private static ConnectorConfigResponseUnmarshaller _instance;
    public static ConnectorConfigResponseUnmarshaller Instance { get; }
    private static ConnectorConfigResponseUnmarshaller();
    private sealed virtual override ConnectorConfigResponse Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.ConnectorConfigResponse,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectorConfigResponse Unmarshall(JsonUnmarshallerContext context);
    public static ConnectorConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ControlPlanePlacementRequestMarshaller : object {
    public static ControlPlanePlacementRequestMarshaller Instance;
    private static ControlPlanePlacementRequestMarshaller();
    public sealed virtual void Marshall(ControlPlanePlacementRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ControlPlanePlacementResponseUnmarshaller : object {
    private static ControlPlanePlacementResponseUnmarshaller _instance;
    public static ControlPlanePlacementResponseUnmarshaller Instance { get; }
    private static ControlPlanePlacementResponseUnmarshaller();
    private sealed virtual override ControlPlanePlacementResponse Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.ControlPlanePlacementResponse,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ControlPlanePlacementResponse Unmarshall(JsonUnmarshallerContext context);
    public static ControlPlanePlacementResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateAccessConfigRequestMarshaller : object {
    public static CreateAccessConfigRequestMarshaller Instance;
    private static CreateAccessConfigRequestMarshaller();
    public sealed virtual void Marshall(CreateAccessConfigRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateAccessEntryRequestMarshaller : object {
    private static CreateAccessEntryRequestMarshaller _instance;
    public static CreateAccessEntryRequestMarshaller Instance { get; }
    private static CreateAccessEntryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateAccessEntryRequest publicRequest);
    internal static CreateAccessEntryRequestMarshaller GetInstance();
    public static CreateAccessEntryRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateAccessEntryResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateAccessEntryResponseUnmarshaller _instance;
    public static CreateAccessEntryResponseUnmarshaller Instance { get; }
    private static CreateAccessEntryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateAccessEntryResponseUnmarshaller GetInstance();
    public static CreateAccessEntryResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateAddonRequestMarshaller : object {
    private static CreateAddonRequestMarshaller _instance;
    public static CreateAddonRequestMarshaller Instance { get; }
    private static CreateAddonRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateAddonRequest publicRequest);
    internal static CreateAddonRequestMarshaller GetInstance();
    public static CreateAddonRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateAddonResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateAddonResponseUnmarshaller _instance;
    public static CreateAddonResponseUnmarshaller Instance { get; }
    private static CreateAddonResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateAddonResponseUnmarshaller GetInstance();
    public static CreateAddonResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateClusterRequestMarshaller : object {
    private static CreateClusterRequestMarshaller _instance;
    public static CreateClusterRequestMarshaller Instance { get; }
    private static CreateClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateClusterRequest publicRequest);
    internal static CreateClusterRequestMarshaller GetInstance();
    public static CreateClusterRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateClusterResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateClusterResponseUnmarshaller _instance;
    public static CreateClusterResponseUnmarshaller Instance { get; }
    private static CreateClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateClusterResponseUnmarshaller GetInstance();
    public static CreateClusterResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateEksAnywhereSubscriptionRequestMarshaller : object {
    private static CreateEksAnywhereSubscriptionRequestMarshaller _instance;
    public static CreateEksAnywhereSubscriptionRequestMarshaller Instance { get; }
    private static CreateEksAnywhereSubscriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateEksAnywhereSubscriptionRequest publicRequest);
    internal static CreateEksAnywhereSubscriptionRequestMarshaller GetInstance();
    public static CreateEksAnywhereSubscriptionRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateEksAnywhereSubscriptionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateEksAnywhereSubscriptionResponseUnmarshaller _instance;
    public static CreateEksAnywhereSubscriptionResponseUnmarshaller Instance { get; }
    private static CreateEksAnywhereSubscriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateEksAnywhereSubscriptionResponseUnmarshaller GetInstance();
    public static CreateEksAnywhereSubscriptionResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateFargateProfileRequestMarshaller : object {
    private static CreateFargateProfileRequestMarshaller _instance;
    public static CreateFargateProfileRequestMarshaller Instance { get; }
    private static CreateFargateProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateFargateProfileRequest publicRequest);
    internal static CreateFargateProfileRequestMarshaller GetInstance();
    public static CreateFargateProfileRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateFargateProfileResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateFargateProfileResponseUnmarshaller _instance;
    public static CreateFargateProfileResponseUnmarshaller Instance { get; }
    private static CreateFargateProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateFargateProfileResponseUnmarshaller GetInstance();
    public static CreateFargateProfileResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateNodegroupRequestMarshaller : object {
    private static CreateNodegroupRequestMarshaller _instance;
    public static CreateNodegroupRequestMarshaller Instance { get; }
    private static CreateNodegroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateNodegroupRequest publicRequest);
    internal static CreateNodegroupRequestMarshaller GetInstance();
    public static CreateNodegroupRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreateNodegroupResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateNodegroupResponseUnmarshaller _instance;
    public static CreateNodegroupResponseUnmarshaller Instance { get; }
    private static CreateNodegroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateNodegroupResponseUnmarshaller GetInstance();
    public static CreateNodegroupResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreatePodIdentityAssociationRequestMarshaller : object {
    private static CreatePodIdentityAssociationRequestMarshaller _instance;
    public static CreatePodIdentityAssociationRequestMarshaller Instance { get; }
    private static CreatePodIdentityAssociationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreatePodIdentityAssociationRequest publicRequest);
    internal static CreatePodIdentityAssociationRequestMarshaller GetInstance();
    public static CreatePodIdentityAssociationRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.CreatePodIdentityAssociationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreatePodIdentityAssociationResponseUnmarshaller _instance;
    public static CreatePodIdentityAssociationResponseUnmarshaller Instance { get; }
    private static CreatePodIdentityAssociationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreatePodIdentityAssociationResponseUnmarshaller GetInstance();
    public static CreatePodIdentityAssociationResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteAccessEntryRequestMarshaller : object {
    private static DeleteAccessEntryRequestMarshaller _instance;
    public static DeleteAccessEntryRequestMarshaller Instance { get; }
    private static DeleteAccessEntryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAccessEntryRequest publicRequest);
    internal static DeleteAccessEntryRequestMarshaller GetInstance();
    public static DeleteAccessEntryRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteAccessEntryResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteAccessEntryResponseUnmarshaller _instance;
    public static DeleteAccessEntryResponseUnmarshaller Instance { get; }
    private static DeleteAccessEntryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAccessEntryResponseUnmarshaller GetInstance();
    public static DeleteAccessEntryResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteAddonRequestMarshaller : object {
    private static DeleteAddonRequestMarshaller _instance;
    public static DeleteAddonRequestMarshaller Instance { get; }
    private static DeleteAddonRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAddonRequest publicRequest);
    internal static DeleteAddonRequestMarshaller GetInstance();
    public static DeleteAddonRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteAddonResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteAddonResponseUnmarshaller _instance;
    public static DeleteAddonResponseUnmarshaller Instance { get; }
    private static DeleteAddonResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAddonResponseUnmarshaller GetInstance();
    public static DeleteAddonResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteClusterRequestMarshaller : object {
    private static DeleteClusterRequestMarshaller _instance;
    public static DeleteClusterRequestMarshaller Instance { get; }
    private static DeleteClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteClusterRequest publicRequest);
    internal static DeleteClusterRequestMarshaller GetInstance();
    public static DeleteClusterRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteClusterResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteClusterResponseUnmarshaller _instance;
    public static DeleteClusterResponseUnmarshaller Instance { get; }
    private static DeleteClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteClusterResponseUnmarshaller GetInstance();
    public static DeleteClusterResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteEksAnywhereSubscriptionRequestMarshaller : object {
    private static DeleteEksAnywhereSubscriptionRequestMarshaller _instance;
    public static DeleteEksAnywhereSubscriptionRequestMarshaller Instance { get; }
    private static DeleteEksAnywhereSubscriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteEksAnywhereSubscriptionRequest publicRequest);
    internal static DeleteEksAnywhereSubscriptionRequestMarshaller GetInstance();
    public static DeleteEksAnywhereSubscriptionRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteEksAnywhereSubscriptionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteEksAnywhereSubscriptionResponseUnmarshaller _instance;
    public static DeleteEksAnywhereSubscriptionResponseUnmarshaller Instance { get; }
    private static DeleteEksAnywhereSubscriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteEksAnywhereSubscriptionResponseUnmarshaller GetInstance();
    public static DeleteEksAnywhereSubscriptionResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteFargateProfileRequestMarshaller : object {
    private static DeleteFargateProfileRequestMarshaller _instance;
    public static DeleteFargateProfileRequestMarshaller Instance { get; }
    private static DeleteFargateProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteFargateProfileRequest publicRequest);
    internal static DeleteFargateProfileRequestMarshaller GetInstance();
    public static DeleteFargateProfileRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteFargateProfileResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteFargateProfileResponseUnmarshaller _instance;
    public static DeleteFargateProfileResponseUnmarshaller Instance { get; }
    private static DeleteFargateProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteFargateProfileResponseUnmarshaller GetInstance();
    public static DeleteFargateProfileResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteNodegroupRequestMarshaller : object {
    private static DeleteNodegroupRequestMarshaller _instance;
    public static DeleteNodegroupRequestMarshaller Instance { get; }
    private static DeleteNodegroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteNodegroupRequest publicRequest);
    internal static DeleteNodegroupRequestMarshaller GetInstance();
    public static DeleteNodegroupRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeleteNodegroupResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteNodegroupResponseUnmarshaller _instance;
    public static DeleteNodegroupResponseUnmarshaller Instance { get; }
    private static DeleteNodegroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteNodegroupResponseUnmarshaller GetInstance();
    public static DeleteNodegroupResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeletePodIdentityAssociationRequestMarshaller : object {
    private static DeletePodIdentityAssociationRequestMarshaller _instance;
    public static DeletePodIdentityAssociationRequestMarshaller Instance { get; }
    private static DeletePodIdentityAssociationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeletePodIdentityAssociationRequest publicRequest);
    internal static DeletePodIdentityAssociationRequestMarshaller GetInstance();
    public static DeletePodIdentityAssociationRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeletePodIdentityAssociationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeletePodIdentityAssociationResponseUnmarshaller _instance;
    public static DeletePodIdentityAssociationResponseUnmarshaller Instance { get; }
    private static DeletePodIdentityAssociationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeletePodIdentityAssociationResponseUnmarshaller GetInstance();
    public static DeletePodIdentityAssociationResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeprecationDetailUnmarshaller : object {
    private static DeprecationDetailUnmarshaller _instance;
    public static DeprecationDetailUnmarshaller Instance { get; }
    private static DeprecationDetailUnmarshaller();
    private sealed virtual override DeprecationDetail Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.DeprecationDetail,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeprecationDetail Unmarshall(JsonUnmarshallerContext context);
    public static DeprecationDetailUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeregisterClusterRequestMarshaller : object {
    private static DeregisterClusterRequestMarshaller _instance;
    public static DeregisterClusterRequestMarshaller Instance { get; }
    private static DeregisterClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeregisterClusterRequest publicRequest);
    internal static DeregisterClusterRequestMarshaller GetInstance();
    public static DeregisterClusterRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DeregisterClusterResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeregisterClusterResponseUnmarshaller _instance;
    public static DeregisterClusterResponseUnmarshaller Instance { get; }
    private static DeregisterClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeregisterClusterResponseUnmarshaller GetInstance();
    public static DeregisterClusterResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeAccessEntryRequestMarshaller : object {
    private static DescribeAccessEntryRequestMarshaller _instance;
    public static DescribeAccessEntryRequestMarshaller Instance { get; }
    private static DescribeAccessEntryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeAccessEntryRequest publicRequest);
    internal static DescribeAccessEntryRequestMarshaller GetInstance();
    public static DescribeAccessEntryRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeAccessEntryResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeAccessEntryResponseUnmarshaller _instance;
    public static DescribeAccessEntryResponseUnmarshaller Instance { get; }
    private static DescribeAccessEntryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeAccessEntryResponseUnmarshaller GetInstance();
    public static DescribeAccessEntryResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeAddonConfigurationRequestMarshaller : object {
    private static DescribeAddonConfigurationRequestMarshaller _instance;
    public static DescribeAddonConfigurationRequestMarshaller Instance { get; }
    private static DescribeAddonConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeAddonConfigurationRequest publicRequest);
    internal static DescribeAddonConfigurationRequestMarshaller GetInstance();
    public static DescribeAddonConfigurationRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeAddonConfigurationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeAddonConfigurationResponseUnmarshaller _instance;
    public static DescribeAddonConfigurationResponseUnmarshaller Instance { get; }
    private static DescribeAddonConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeAddonConfigurationResponseUnmarshaller GetInstance();
    public static DescribeAddonConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeAddonRequestMarshaller : object {
    private static DescribeAddonRequestMarshaller _instance;
    public static DescribeAddonRequestMarshaller Instance { get; }
    private static DescribeAddonRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeAddonRequest publicRequest);
    internal static DescribeAddonRequestMarshaller GetInstance();
    public static DescribeAddonRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeAddonResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeAddonResponseUnmarshaller _instance;
    public static DescribeAddonResponseUnmarshaller Instance { get; }
    private static DescribeAddonResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeAddonResponseUnmarshaller GetInstance();
    public static DescribeAddonResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeAddonVersionsRequestMarshaller : object {
    private static DescribeAddonVersionsRequestMarshaller _instance;
    public static DescribeAddonVersionsRequestMarshaller Instance { get; }
    private static DescribeAddonVersionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeAddonVersionsRequest publicRequest);
    internal static DescribeAddonVersionsRequestMarshaller GetInstance();
    public static DescribeAddonVersionsRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeAddonVersionsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeAddonVersionsResponseUnmarshaller _instance;
    public static DescribeAddonVersionsResponseUnmarshaller Instance { get; }
    private static DescribeAddonVersionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeAddonVersionsResponseUnmarshaller GetInstance();
    public static DescribeAddonVersionsResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeClusterRequestMarshaller : object {
    private static DescribeClusterRequestMarshaller _instance;
    public static DescribeClusterRequestMarshaller Instance { get; }
    private static DescribeClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClusterRequest publicRequest);
    internal static DescribeClusterRequestMarshaller GetInstance();
    public static DescribeClusterRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeClusterResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeClusterResponseUnmarshaller _instance;
    public static DescribeClusterResponseUnmarshaller Instance { get; }
    private static DescribeClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClusterResponseUnmarshaller GetInstance();
    public static DescribeClusterResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeEksAnywhereSubscriptionRequestMarshaller : object {
    private static DescribeEksAnywhereSubscriptionRequestMarshaller _instance;
    public static DescribeEksAnywhereSubscriptionRequestMarshaller Instance { get; }
    private static DescribeEksAnywhereSubscriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEksAnywhereSubscriptionRequest publicRequest);
    internal static DescribeEksAnywhereSubscriptionRequestMarshaller GetInstance();
    public static DescribeEksAnywhereSubscriptionRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeEksAnywhereSubscriptionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeEksAnywhereSubscriptionResponseUnmarshaller _instance;
    public static DescribeEksAnywhereSubscriptionResponseUnmarshaller Instance { get; }
    private static DescribeEksAnywhereSubscriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEksAnywhereSubscriptionResponseUnmarshaller GetInstance();
    public static DescribeEksAnywhereSubscriptionResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeFargateProfileRequestMarshaller : object {
    private static DescribeFargateProfileRequestMarshaller _instance;
    public static DescribeFargateProfileRequestMarshaller Instance { get; }
    private static DescribeFargateProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeFargateProfileRequest publicRequest);
    internal static DescribeFargateProfileRequestMarshaller GetInstance();
    public static DescribeFargateProfileRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeFargateProfileResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeFargateProfileResponseUnmarshaller _instance;
    public static DescribeFargateProfileResponseUnmarshaller Instance { get; }
    private static DescribeFargateProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeFargateProfileResponseUnmarshaller GetInstance();
    public static DescribeFargateProfileResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeIdentityProviderConfigRequestMarshaller : object {
    private static DescribeIdentityProviderConfigRequestMarshaller _instance;
    public static DescribeIdentityProviderConfigRequestMarshaller Instance { get; }
    private static DescribeIdentityProviderConfigRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeIdentityProviderConfigRequest publicRequest);
    internal static DescribeIdentityProviderConfigRequestMarshaller GetInstance();
    public static DescribeIdentityProviderConfigRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeIdentityProviderConfigResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeIdentityProviderConfigResponseUnmarshaller _instance;
    public static DescribeIdentityProviderConfigResponseUnmarshaller Instance { get; }
    private static DescribeIdentityProviderConfigResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeIdentityProviderConfigResponseUnmarshaller GetInstance();
    public static DescribeIdentityProviderConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeInsightRequestMarshaller : object {
    private static DescribeInsightRequestMarshaller _instance;
    public static DescribeInsightRequestMarshaller Instance { get; }
    private static DescribeInsightRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeInsightRequest publicRequest);
    internal static DescribeInsightRequestMarshaller GetInstance();
    public static DescribeInsightRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeInsightResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeInsightResponseUnmarshaller _instance;
    public static DescribeInsightResponseUnmarshaller Instance { get; }
    private static DescribeInsightResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeInsightResponseUnmarshaller GetInstance();
    public static DescribeInsightResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeNodegroupRequestMarshaller : object {
    private static DescribeNodegroupRequestMarshaller _instance;
    public static DescribeNodegroupRequestMarshaller Instance { get; }
    private static DescribeNodegroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeNodegroupRequest publicRequest);
    internal static DescribeNodegroupRequestMarshaller GetInstance();
    public static DescribeNodegroupRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeNodegroupResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeNodegroupResponseUnmarshaller _instance;
    public static DescribeNodegroupResponseUnmarshaller Instance { get; }
    private static DescribeNodegroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeNodegroupResponseUnmarshaller GetInstance();
    public static DescribeNodegroupResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribePodIdentityAssociationRequestMarshaller : object {
    private static DescribePodIdentityAssociationRequestMarshaller _instance;
    public static DescribePodIdentityAssociationRequestMarshaller Instance { get; }
    private static DescribePodIdentityAssociationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribePodIdentityAssociationRequest publicRequest);
    internal static DescribePodIdentityAssociationRequestMarshaller GetInstance();
    public static DescribePodIdentityAssociationRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribePodIdentityAssociationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribePodIdentityAssociationResponseUnmarshaller _instance;
    public static DescribePodIdentityAssociationResponseUnmarshaller Instance { get; }
    private static DescribePodIdentityAssociationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribePodIdentityAssociationResponseUnmarshaller GetInstance();
    public static DescribePodIdentityAssociationResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeUpdateRequestMarshaller : object {
    private static DescribeUpdateRequestMarshaller _instance;
    public static DescribeUpdateRequestMarshaller Instance { get; }
    private static DescribeUpdateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeUpdateRequest publicRequest);
    internal static DescribeUpdateRequestMarshaller GetInstance();
    public static DescribeUpdateRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DescribeUpdateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeUpdateResponseUnmarshaller _instance;
    public static DescribeUpdateResponseUnmarshaller Instance { get; }
    private static DescribeUpdateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeUpdateResponseUnmarshaller GetInstance();
    public static DescribeUpdateResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DisassociateAccessPolicyRequestMarshaller : object {
    private static DisassociateAccessPolicyRequestMarshaller _instance;
    public static DisassociateAccessPolicyRequestMarshaller Instance { get; }
    private static DisassociateAccessPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisassociateAccessPolicyRequest publicRequest);
    internal static DisassociateAccessPolicyRequestMarshaller GetInstance();
    public static DisassociateAccessPolicyRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DisassociateAccessPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DisassociateAccessPolicyResponseUnmarshaller _instance;
    public static DisassociateAccessPolicyResponseUnmarshaller Instance { get; }
    private static DisassociateAccessPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisassociateAccessPolicyResponseUnmarshaller GetInstance();
    public static DisassociateAccessPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DisassociateIdentityProviderConfigRequestMarshaller : object {
    private static DisassociateIdentityProviderConfigRequestMarshaller _instance;
    public static DisassociateIdentityProviderConfigRequestMarshaller Instance { get; }
    private static DisassociateIdentityProviderConfigRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisassociateIdentityProviderConfigRequest publicRequest);
    internal static DisassociateIdentityProviderConfigRequestMarshaller GetInstance();
    public static DisassociateIdentityProviderConfigRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.DisassociateIdentityProviderConfigResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DisassociateIdentityProviderConfigResponseUnmarshaller _instance;
    public static DisassociateIdentityProviderConfigResponseUnmarshaller Instance { get; }
    private static DisassociateIdentityProviderConfigResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisassociateIdentityProviderConfigResponseUnmarshaller GetInstance();
    public static DisassociateIdentityProviderConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.EksAnywhereSubscriptionTermMarshaller : object {
    public static EksAnywhereSubscriptionTermMarshaller Instance;
    private static EksAnywhereSubscriptionTermMarshaller();
    public sealed virtual void Marshall(EksAnywhereSubscriptionTerm requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.EksAnywhereSubscriptionTermUnmarshaller : object {
    private static EksAnywhereSubscriptionTermUnmarshaller _instance;
    public static EksAnywhereSubscriptionTermUnmarshaller Instance { get; }
    private static EksAnywhereSubscriptionTermUnmarshaller();
    private sealed virtual override EksAnywhereSubscriptionTerm Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.EksAnywhereSubscriptionTerm,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EksAnywhereSubscriptionTerm Unmarshall(JsonUnmarshallerContext context);
    public static EksAnywhereSubscriptionTermUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.EksAnywhereSubscriptionUnmarshaller : object {
    private static EksAnywhereSubscriptionUnmarshaller _instance;
    public static EksAnywhereSubscriptionUnmarshaller Instance { get; }
    private static EksAnywhereSubscriptionUnmarshaller();
    private sealed virtual override EksAnywhereSubscription Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.EksAnywhereSubscription,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EksAnywhereSubscription Unmarshall(JsonUnmarshallerContext context);
    public static EksAnywhereSubscriptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.EncryptionConfigMarshaller : object {
    public static EncryptionConfigMarshaller Instance;
    private static EncryptionConfigMarshaller();
    public sealed virtual void Marshall(EncryptionConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.EncryptionConfigUnmarshaller : object {
    private static EncryptionConfigUnmarshaller _instance;
    public static EncryptionConfigUnmarshaller Instance { get; }
    private static EncryptionConfigUnmarshaller();
    private sealed virtual override EncryptionConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.EncryptionConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EncryptionConfig Unmarshall(JsonUnmarshallerContext context);
    public static EncryptionConfigUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ErrorDetailUnmarshaller : object {
    private static ErrorDetailUnmarshaller _instance;
    public static ErrorDetailUnmarshaller Instance { get; }
    private static ErrorDetailUnmarshaller();
    private sealed virtual override ErrorDetail Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.ErrorDetail,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ErrorDetail Unmarshall(JsonUnmarshallerContext context);
    public static ErrorDetailUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.FargateProfileHealthUnmarshaller : object {
    private static FargateProfileHealthUnmarshaller _instance;
    public static FargateProfileHealthUnmarshaller Instance { get; }
    private static FargateProfileHealthUnmarshaller();
    private sealed virtual override FargateProfileHealth Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.FargateProfileHealth,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FargateProfileHealth Unmarshall(JsonUnmarshallerContext context);
    public static FargateProfileHealthUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.FargateProfileIssueUnmarshaller : object {
    private static FargateProfileIssueUnmarshaller _instance;
    public static FargateProfileIssueUnmarshaller Instance { get; }
    private static FargateProfileIssueUnmarshaller();
    private sealed virtual override FargateProfileIssue Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.FargateProfileIssue,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FargateProfileIssue Unmarshall(JsonUnmarshallerContext context);
    public static FargateProfileIssueUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.FargateProfileSelectorMarshaller : object {
    public static FargateProfileSelectorMarshaller Instance;
    private static FargateProfileSelectorMarshaller();
    public sealed virtual void Marshall(FargateProfileSelector requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.FargateProfileSelectorUnmarshaller : object {
    private static FargateProfileSelectorUnmarshaller _instance;
    public static FargateProfileSelectorUnmarshaller Instance { get; }
    private static FargateProfileSelectorUnmarshaller();
    private sealed virtual override FargateProfileSelector Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.FargateProfileSelector,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FargateProfileSelector Unmarshall(JsonUnmarshallerContext context);
    public static FargateProfileSelectorUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.FargateProfileUnmarshaller : object {
    private static FargateProfileUnmarshaller _instance;
    public static FargateProfileUnmarshaller Instance { get; }
    private static FargateProfileUnmarshaller();
    private sealed virtual override FargateProfile Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.FargateProfile,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FargateProfile Unmarshall(JsonUnmarshallerContext context);
    public static FargateProfileUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.IdentityProviderConfigMarshaller : object {
    public static IdentityProviderConfigMarshaller Instance;
    private static IdentityProviderConfigMarshaller();
    public sealed virtual void Marshall(IdentityProviderConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.IdentityProviderConfigResponseUnmarshaller : object {
    private static IdentityProviderConfigResponseUnmarshaller _instance;
    public static IdentityProviderConfigResponseUnmarshaller Instance { get; }
    private static IdentityProviderConfigResponseUnmarshaller();
    private sealed virtual override IdentityProviderConfigResponse Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.IdentityProviderConfigResponse,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IdentityProviderConfigResponse Unmarshall(JsonUnmarshallerContext context);
    public static IdentityProviderConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.IdentityProviderConfigUnmarshaller : object {
    private static IdentityProviderConfigUnmarshaller _instance;
    public static IdentityProviderConfigUnmarshaller Instance { get; }
    private static IdentityProviderConfigUnmarshaller();
    private sealed virtual override IdentityProviderConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.IdentityProviderConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IdentityProviderConfig Unmarshall(JsonUnmarshallerContext context);
    public static IdentityProviderConfigUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.IdentityUnmarshaller : object {
    private static IdentityUnmarshaller _instance;
    public static IdentityUnmarshaller Instance { get; }
    private static IdentityUnmarshaller();
    private sealed virtual override Identity Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Identity,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Identity Unmarshall(JsonUnmarshallerContext context);
    public static IdentityUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.InsightCategorySpecificSummaryUnmarshaller : object {
    private static InsightCategorySpecificSummaryUnmarshaller _instance;
    public static InsightCategorySpecificSummaryUnmarshaller Instance { get; }
    private static InsightCategorySpecificSummaryUnmarshaller();
    private sealed virtual override InsightCategorySpecificSummary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.InsightCategorySpecificSummary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InsightCategorySpecificSummary Unmarshall(JsonUnmarshallerContext context);
    public static InsightCategorySpecificSummaryUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.InsightResourceDetailUnmarshaller : object {
    private static InsightResourceDetailUnmarshaller _instance;
    public static InsightResourceDetailUnmarshaller Instance { get; }
    private static InsightResourceDetailUnmarshaller();
    private sealed virtual override InsightResourceDetail Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.InsightResourceDetail,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InsightResourceDetail Unmarshall(JsonUnmarshallerContext context);
    public static InsightResourceDetailUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.InsightsFilterMarshaller : object {
    public static InsightsFilterMarshaller Instance;
    private static InsightsFilterMarshaller();
    public sealed virtual void Marshall(InsightsFilter requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.InsightStatusUnmarshaller : object {
    private static InsightStatusUnmarshaller _instance;
    public static InsightStatusUnmarshaller Instance { get; }
    private static InsightStatusUnmarshaller();
    private sealed virtual override InsightStatus Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.InsightStatus,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InsightStatus Unmarshall(JsonUnmarshallerContext context);
    public static InsightStatusUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.InsightSummaryUnmarshaller : object {
    private static InsightSummaryUnmarshaller _instance;
    public static InsightSummaryUnmarshaller Instance { get; }
    private static InsightSummaryUnmarshaller();
    private sealed virtual override InsightSummary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.InsightSummary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InsightSummary Unmarshall(JsonUnmarshallerContext context);
    public static InsightSummaryUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.InsightUnmarshaller : object {
    private static InsightUnmarshaller _instance;
    public static InsightUnmarshaller Instance { get; }
    private static InsightUnmarshaller();
    private sealed virtual override Insight Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Insight,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Insight Unmarshall(JsonUnmarshallerContext context);
    public static InsightUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.InvalidParameterExceptionUnmarshaller : object {
    private static InvalidParameterExceptionUnmarshaller _instance;
    public static InvalidParameterExceptionUnmarshaller Instance { get; }
    private static InvalidParameterExceptionUnmarshaller();
    public sealed virtual InvalidParameterException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidParameterException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidParameterExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.InvalidRequestExceptionUnmarshaller : object {
    private static InvalidRequestExceptionUnmarshaller _instance;
    public static InvalidRequestExceptionUnmarshaller Instance { get; }
    private static InvalidRequestExceptionUnmarshaller();
    public sealed virtual InvalidRequestException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidRequestException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidRequestExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.IssueUnmarshaller : object {
    private static IssueUnmarshaller _instance;
    public static IssueUnmarshaller Instance { get; }
    private static IssueUnmarshaller();
    private sealed virtual override Issue Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Issue,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Issue Unmarshall(JsonUnmarshallerContext context);
    public static IssueUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.KubernetesNetworkConfigRequestMarshaller : object {
    public static KubernetesNetworkConfigRequestMarshaller Instance;
    private static KubernetesNetworkConfigRequestMarshaller();
    public sealed virtual void Marshall(KubernetesNetworkConfigRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.KubernetesNetworkConfigResponseUnmarshaller : object {
    private static KubernetesNetworkConfigResponseUnmarshaller _instance;
    public static KubernetesNetworkConfigResponseUnmarshaller Instance { get; }
    private static KubernetesNetworkConfigResponseUnmarshaller();
    private sealed virtual override KubernetesNetworkConfigResponse Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.KubernetesNetworkConfigResponse,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KubernetesNetworkConfigResponse Unmarshall(JsonUnmarshallerContext context);
    public static KubernetesNetworkConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.LaunchTemplateSpecificationMarshaller : object {
    public static LaunchTemplateSpecificationMarshaller Instance;
    private static LaunchTemplateSpecificationMarshaller();
    public sealed virtual void Marshall(LaunchTemplateSpecification requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.LaunchTemplateSpecificationUnmarshaller : object {
    private static LaunchTemplateSpecificationUnmarshaller _instance;
    public static LaunchTemplateSpecificationUnmarshaller Instance { get; }
    private static LaunchTemplateSpecificationUnmarshaller();
    private sealed virtual override LaunchTemplateSpecification Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.LaunchTemplateSpecification,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LaunchTemplateSpecification Unmarshall(JsonUnmarshallerContext context);
    public static LaunchTemplateSpecificationUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListAccessEntriesRequestMarshaller : object {
    private static ListAccessEntriesRequestMarshaller _instance;
    public static ListAccessEntriesRequestMarshaller Instance { get; }
    private static ListAccessEntriesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAccessEntriesRequest publicRequest);
    internal static ListAccessEntriesRequestMarshaller GetInstance();
    public static ListAccessEntriesRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListAccessEntriesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListAccessEntriesResponseUnmarshaller _instance;
    public static ListAccessEntriesResponseUnmarshaller Instance { get; }
    private static ListAccessEntriesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAccessEntriesResponseUnmarshaller GetInstance();
    public static ListAccessEntriesResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListAccessPoliciesRequestMarshaller : object {
    private static ListAccessPoliciesRequestMarshaller _instance;
    public static ListAccessPoliciesRequestMarshaller Instance { get; }
    private static ListAccessPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAccessPoliciesRequest publicRequest);
    internal static ListAccessPoliciesRequestMarshaller GetInstance();
    public static ListAccessPoliciesRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListAccessPoliciesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListAccessPoliciesResponseUnmarshaller _instance;
    public static ListAccessPoliciesResponseUnmarshaller Instance { get; }
    private static ListAccessPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAccessPoliciesResponseUnmarshaller GetInstance();
    public static ListAccessPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListAddonsRequestMarshaller : object {
    private static ListAddonsRequestMarshaller _instance;
    public static ListAddonsRequestMarshaller Instance { get; }
    private static ListAddonsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAddonsRequest publicRequest);
    internal static ListAddonsRequestMarshaller GetInstance();
    public static ListAddonsRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListAddonsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListAddonsResponseUnmarshaller _instance;
    public static ListAddonsResponseUnmarshaller Instance { get; }
    private static ListAddonsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAddonsResponseUnmarshaller GetInstance();
    public static ListAddonsResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListAssociatedAccessPoliciesRequestMarshaller : object {
    private static ListAssociatedAccessPoliciesRequestMarshaller _instance;
    public static ListAssociatedAccessPoliciesRequestMarshaller Instance { get; }
    private static ListAssociatedAccessPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAssociatedAccessPoliciesRequest publicRequest);
    internal static ListAssociatedAccessPoliciesRequestMarshaller GetInstance();
    public static ListAssociatedAccessPoliciesRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListAssociatedAccessPoliciesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListAssociatedAccessPoliciesResponseUnmarshaller _instance;
    public static ListAssociatedAccessPoliciesResponseUnmarshaller Instance { get; }
    private static ListAssociatedAccessPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAssociatedAccessPoliciesResponseUnmarshaller GetInstance();
    public static ListAssociatedAccessPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListClustersRequestMarshaller : object {
    private static ListClustersRequestMarshaller _instance;
    public static ListClustersRequestMarshaller Instance { get; }
    private static ListClustersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListClustersRequest publicRequest);
    internal static ListClustersRequestMarshaller GetInstance();
    public static ListClustersRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListClustersResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListClustersResponseUnmarshaller _instance;
    public static ListClustersResponseUnmarshaller Instance { get; }
    private static ListClustersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListClustersResponseUnmarshaller GetInstance();
    public static ListClustersResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListEksAnywhereSubscriptionsRequestMarshaller : object {
    private static ListEksAnywhereSubscriptionsRequestMarshaller _instance;
    public static ListEksAnywhereSubscriptionsRequestMarshaller Instance { get; }
    private static ListEksAnywhereSubscriptionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListEksAnywhereSubscriptionsRequest publicRequest);
    internal static ListEksAnywhereSubscriptionsRequestMarshaller GetInstance();
    public static ListEksAnywhereSubscriptionsRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListEksAnywhereSubscriptionsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListEksAnywhereSubscriptionsResponseUnmarshaller _instance;
    public static ListEksAnywhereSubscriptionsResponseUnmarshaller Instance { get; }
    private static ListEksAnywhereSubscriptionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListEksAnywhereSubscriptionsResponseUnmarshaller GetInstance();
    public static ListEksAnywhereSubscriptionsResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListFargateProfilesRequestMarshaller : object {
    private static ListFargateProfilesRequestMarshaller _instance;
    public static ListFargateProfilesRequestMarshaller Instance { get; }
    private static ListFargateProfilesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListFargateProfilesRequest publicRequest);
    internal static ListFargateProfilesRequestMarshaller GetInstance();
    public static ListFargateProfilesRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListFargateProfilesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListFargateProfilesResponseUnmarshaller _instance;
    public static ListFargateProfilesResponseUnmarshaller Instance { get; }
    private static ListFargateProfilesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListFargateProfilesResponseUnmarshaller GetInstance();
    public static ListFargateProfilesResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListIdentityProviderConfigsRequestMarshaller : object {
    private static ListIdentityProviderConfigsRequestMarshaller _instance;
    public static ListIdentityProviderConfigsRequestMarshaller Instance { get; }
    private static ListIdentityProviderConfigsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListIdentityProviderConfigsRequest publicRequest);
    internal static ListIdentityProviderConfigsRequestMarshaller GetInstance();
    public static ListIdentityProviderConfigsRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListIdentityProviderConfigsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListIdentityProviderConfigsResponseUnmarshaller _instance;
    public static ListIdentityProviderConfigsResponseUnmarshaller Instance { get; }
    private static ListIdentityProviderConfigsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListIdentityProviderConfigsResponseUnmarshaller GetInstance();
    public static ListIdentityProviderConfigsResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListInsightsRequestMarshaller : object {
    private static ListInsightsRequestMarshaller _instance;
    public static ListInsightsRequestMarshaller Instance { get; }
    private static ListInsightsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListInsightsRequest publicRequest);
    internal static ListInsightsRequestMarshaller GetInstance();
    public static ListInsightsRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListInsightsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListInsightsResponseUnmarshaller _instance;
    public static ListInsightsResponseUnmarshaller Instance { get; }
    private static ListInsightsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListInsightsResponseUnmarshaller GetInstance();
    public static ListInsightsResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListNodegroupsRequestMarshaller : object {
    private static ListNodegroupsRequestMarshaller _instance;
    public static ListNodegroupsRequestMarshaller Instance { get; }
    private static ListNodegroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListNodegroupsRequest publicRequest);
    internal static ListNodegroupsRequestMarshaller GetInstance();
    public static ListNodegroupsRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListNodegroupsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListNodegroupsResponseUnmarshaller _instance;
    public static ListNodegroupsResponseUnmarshaller Instance { get; }
    private static ListNodegroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListNodegroupsResponseUnmarshaller GetInstance();
    public static ListNodegroupsResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListPodIdentityAssociationsRequestMarshaller : object {
    private static ListPodIdentityAssociationsRequestMarshaller _instance;
    public static ListPodIdentityAssociationsRequestMarshaller Instance { get; }
    private static ListPodIdentityAssociationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPodIdentityAssociationsRequest publicRequest);
    internal static ListPodIdentityAssociationsRequestMarshaller GetInstance();
    public static ListPodIdentityAssociationsRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListPodIdentityAssociationsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListPodIdentityAssociationsResponseUnmarshaller _instance;
    public static ListPodIdentityAssociationsResponseUnmarshaller Instance { get; }
    private static ListPodIdentityAssociationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPodIdentityAssociationsResponseUnmarshaller GetInstance();
    public static ListPodIdentityAssociationsResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller : object {
    private static ListTagsForResourceRequestMarshaller _instance;
    public static ListTagsForResourceRequestMarshaller Instance { get; }
    private static ListTagsForResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForResourceRequest publicRequest);
    internal static ListTagsForResourceRequestMarshaller GetInstance();
    public static ListTagsForResourceRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTagsForResourceResponseUnmarshaller _instance;
    public static ListTagsForResourceResponseUnmarshaller Instance { get; }
    private static ListTagsForResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForResourceResponseUnmarshaller GetInstance();
    public static ListTagsForResourceResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListUpdatesRequestMarshaller : object {
    private static ListUpdatesRequestMarshaller _instance;
    public static ListUpdatesRequestMarshaller Instance { get; }
    private static ListUpdatesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListUpdatesRequest publicRequest);
    internal static ListUpdatesRequestMarshaller GetInstance();
    public static ListUpdatesRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ListUpdatesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListUpdatesResponseUnmarshaller _instance;
    public static ListUpdatesResponseUnmarshaller Instance { get; }
    private static ListUpdatesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListUpdatesResponseUnmarshaller GetInstance();
    public static ListUpdatesResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.LoggingMarshaller : object {
    public static LoggingMarshaller Instance;
    private static LoggingMarshaller();
    public sealed virtual void Marshall(Logging requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.LoggingUnmarshaller : object {
    private static LoggingUnmarshaller _instance;
    public static LoggingUnmarshaller Instance { get; }
    private static LoggingUnmarshaller();
    private sealed virtual override Logging Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Logging,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Logging Unmarshall(JsonUnmarshallerContext context);
    public static LoggingUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.LogSetupMarshaller : object {
    public static LogSetupMarshaller Instance;
    private static LogSetupMarshaller();
    public sealed virtual void Marshall(LogSetup requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.LogSetupUnmarshaller : object {
    private static LogSetupUnmarshaller _instance;
    public static LogSetupUnmarshaller Instance { get; }
    private static LogSetupUnmarshaller();
    private sealed virtual override LogSetup Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.LogSetup,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LogSetup Unmarshall(JsonUnmarshallerContext context);
    public static LogSetupUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.MarketplaceInformationUnmarshaller : object {
    private static MarketplaceInformationUnmarshaller _instance;
    public static MarketplaceInformationUnmarshaller Instance { get; }
    private static MarketplaceInformationUnmarshaller();
    private sealed virtual override MarketplaceInformation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.MarketplaceInformation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MarketplaceInformation Unmarshall(JsonUnmarshallerContext context);
    public static MarketplaceInformationUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.NodegroupHealthUnmarshaller : object {
    private static NodegroupHealthUnmarshaller _instance;
    public static NodegroupHealthUnmarshaller Instance { get; }
    private static NodegroupHealthUnmarshaller();
    private sealed virtual override NodegroupHealth Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.NodegroupHealth,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodegroupHealth Unmarshall(JsonUnmarshallerContext context);
    public static NodegroupHealthUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.NodegroupResourcesUnmarshaller : object {
    private static NodegroupResourcesUnmarshaller _instance;
    public static NodegroupResourcesUnmarshaller Instance { get; }
    private static NodegroupResourcesUnmarshaller();
    private sealed virtual override NodegroupResources Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.NodegroupResources,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodegroupResources Unmarshall(JsonUnmarshallerContext context);
    public static NodegroupResourcesUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.NodegroupScalingConfigMarshaller : object {
    public static NodegroupScalingConfigMarshaller Instance;
    private static NodegroupScalingConfigMarshaller();
    public sealed virtual void Marshall(NodegroupScalingConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.NodegroupScalingConfigUnmarshaller : object {
    private static NodegroupScalingConfigUnmarshaller _instance;
    public static NodegroupScalingConfigUnmarshaller Instance { get; }
    private static NodegroupScalingConfigUnmarshaller();
    private sealed virtual override NodegroupScalingConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.NodegroupScalingConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodegroupScalingConfig Unmarshall(JsonUnmarshallerContext context);
    public static NodegroupScalingConfigUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.NodegroupUnmarshaller : object {
    private static NodegroupUnmarshaller _instance;
    public static NodegroupUnmarshaller Instance { get; }
    private static NodegroupUnmarshaller();
    private sealed virtual override Nodegroup Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Nodegroup,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Nodegroup Unmarshall(JsonUnmarshallerContext context);
    public static NodegroupUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.NodegroupUpdateConfigMarshaller : object {
    public static NodegroupUpdateConfigMarshaller Instance;
    private static NodegroupUpdateConfigMarshaller();
    public sealed virtual void Marshall(NodegroupUpdateConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.NodegroupUpdateConfigUnmarshaller : object {
    private static NodegroupUpdateConfigUnmarshaller _instance;
    public static NodegroupUpdateConfigUnmarshaller Instance { get; }
    private static NodegroupUpdateConfigUnmarshaller();
    private sealed virtual override NodegroupUpdateConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.NodegroupUpdateConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodegroupUpdateConfig Unmarshall(JsonUnmarshallerContext context);
    public static NodegroupUpdateConfigUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller : object {
    private static NotFoundExceptionUnmarshaller _instance;
    public static NotFoundExceptionUnmarshaller Instance { get; }
    private static NotFoundExceptionUnmarshaller();
    public sealed virtual NotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual NotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static NotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.OidcIdentityProviderConfigRequestMarshaller : object {
    public static OidcIdentityProviderConfigRequestMarshaller Instance;
    private static OidcIdentityProviderConfigRequestMarshaller();
    public sealed virtual void Marshall(OidcIdentityProviderConfigRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.OidcIdentityProviderConfigUnmarshaller : object {
    private static OidcIdentityProviderConfigUnmarshaller _instance;
    public static OidcIdentityProviderConfigUnmarshaller Instance { get; }
    private static OidcIdentityProviderConfigUnmarshaller();
    private sealed virtual override OidcIdentityProviderConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.OidcIdentityProviderConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OidcIdentityProviderConfig Unmarshall(JsonUnmarshallerContext context);
    public static OidcIdentityProviderConfigUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.OIDCUnmarshaller : object {
    private static OIDCUnmarshaller _instance;
    public static OIDCUnmarshaller Instance { get; }
    private static OIDCUnmarshaller();
    private sealed virtual override OIDC Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.OIDC,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OIDC Unmarshall(JsonUnmarshallerContext context);
    public static OIDCUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.OutpostConfigRequestMarshaller : object {
    public static OutpostConfigRequestMarshaller Instance;
    private static OutpostConfigRequestMarshaller();
    public sealed virtual void Marshall(OutpostConfigRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.OutpostConfigResponseUnmarshaller : object {
    private static OutpostConfigResponseUnmarshaller _instance;
    public static OutpostConfigResponseUnmarshaller Instance { get; }
    private static OutpostConfigResponseUnmarshaller();
    private sealed virtual override OutpostConfigResponse Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.OutpostConfigResponse,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OutpostConfigResponse Unmarshall(JsonUnmarshallerContext context);
    public static OutpostConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.PodIdentityAssociationSummaryUnmarshaller : object {
    private static PodIdentityAssociationSummaryUnmarshaller _instance;
    public static PodIdentityAssociationSummaryUnmarshaller Instance { get; }
    private static PodIdentityAssociationSummaryUnmarshaller();
    private sealed virtual override PodIdentityAssociationSummary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.PodIdentityAssociationSummary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PodIdentityAssociationSummary Unmarshall(JsonUnmarshallerContext context);
    public static PodIdentityAssociationSummaryUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.PodIdentityAssociationUnmarshaller : object {
    private static PodIdentityAssociationUnmarshaller _instance;
    public static PodIdentityAssociationUnmarshaller Instance { get; }
    private static PodIdentityAssociationUnmarshaller();
    private sealed virtual override PodIdentityAssociation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.PodIdentityAssociation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PodIdentityAssociation Unmarshall(JsonUnmarshallerContext context);
    public static PodIdentityAssociationUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ProviderMarshaller : object {
    public static ProviderMarshaller Instance;
    private static ProviderMarshaller();
    public sealed virtual void Marshall(Provider requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ProviderUnmarshaller : object {
    private static ProviderUnmarshaller _instance;
    public static ProviderUnmarshaller Instance { get; }
    private static ProviderUnmarshaller();
    private sealed virtual override Provider Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Provider,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Provider Unmarshall(JsonUnmarshallerContext context);
    public static ProviderUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.RegisterClusterRequestMarshaller : object {
    private static RegisterClusterRequestMarshaller _instance;
    public static RegisterClusterRequestMarshaller Instance { get; }
    private static RegisterClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RegisterClusterRequest publicRequest);
    internal static RegisterClusterRequestMarshaller GetInstance();
    public static RegisterClusterRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.RegisterClusterResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RegisterClusterResponseUnmarshaller _instance;
    public static RegisterClusterResponseUnmarshaller Instance { get; }
    private static RegisterClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RegisterClusterResponseUnmarshaller GetInstance();
    public static RegisterClusterResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.RemoteAccessConfigMarshaller : object {
    public static RemoteAccessConfigMarshaller Instance;
    private static RemoteAccessConfigMarshaller();
    public sealed virtual void Marshall(RemoteAccessConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.RemoteAccessConfigUnmarshaller : object {
    private static RemoteAccessConfigUnmarshaller _instance;
    public static RemoteAccessConfigUnmarshaller Instance { get; }
    private static RemoteAccessConfigUnmarshaller();
    private sealed virtual override RemoteAccessConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.RemoteAccessConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RemoteAccessConfig Unmarshall(JsonUnmarshallerContext context);
    public static RemoteAccessConfigUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ResourceInUseExceptionUnmarshaller : object {
    private static ResourceInUseExceptionUnmarshaller _instance;
    public static ResourceInUseExceptionUnmarshaller Instance { get; }
    private static ResourceInUseExceptionUnmarshaller();
    public sealed virtual ResourceInUseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceInUseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ResourceLimitExceededExceptionUnmarshaller : object {
    private static ResourceLimitExceededExceptionUnmarshaller _instance;
    public static ResourceLimitExceededExceptionUnmarshaller Instance { get; }
    private static ResourceLimitExceededExceptionUnmarshaller();
    public sealed virtual ResourceLimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceLimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller : object {
    private static ResourceNotFoundExceptionUnmarshaller _instance;
    public static ResourceNotFoundExceptionUnmarshaller Instance { get; }
    private static ResourceNotFoundExceptionUnmarshaller();
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ResourcePropagationDelayExceptionUnmarshaller : object {
    private static ResourcePropagationDelayExceptionUnmarshaller _instance;
    public static ResourcePropagationDelayExceptionUnmarshaller Instance { get; }
    private static ResourcePropagationDelayExceptionUnmarshaller();
    public sealed virtual ResourcePropagationDelayException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourcePropagationDelayException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourcePropagationDelayExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ServerExceptionUnmarshaller : object {
    private static ServerExceptionUnmarshaller _instance;
    public static ServerExceptionUnmarshaller Instance { get; }
    private static ServerExceptionUnmarshaller();
    public sealed virtual ServerException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ServerException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServerExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.ServiceUnavailableExceptionUnmarshaller : object {
    private static ServiceUnavailableExceptionUnmarshaller _instance;
    public static ServiceUnavailableExceptionUnmarshaller Instance { get; }
    private static ServiceUnavailableExceptionUnmarshaller();
    public sealed virtual ServiceUnavailableException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ServiceUnavailableException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServiceUnavailableExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller : object {
    private static TagResourceRequestMarshaller _instance;
    public static TagResourceRequestMarshaller Instance { get; }
    private static TagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagResourceRequest publicRequest);
    internal static TagResourceRequestMarshaller GetInstance();
    public static TagResourceRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TagResourceResponseUnmarshaller _instance;
    public static TagResourceResponseUnmarshaller Instance { get; }
    private static TagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagResourceResponseUnmarshaller GetInstance();
    public static TagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.TaintMarshaller : object {
    public static TaintMarshaller Instance;
    private static TaintMarshaller();
    public sealed virtual void Marshall(Taint requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.TaintUnmarshaller : object {
    private static TaintUnmarshaller _instance;
    public static TaintUnmarshaller Instance { get; }
    private static TaintUnmarshaller();
    private sealed virtual override Taint Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Taint,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Taint Unmarshall(JsonUnmarshallerContext context);
    public static TaintUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UnsupportedAvailabilityZoneExceptionUnmarshaller : object {
    private static UnsupportedAvailabilityZoneExceptionUnmarshaller _instance;
    public static UnsupportedAvailabilityZoneExceptionUnmarshaller Instance { get; }
    private static UnsupportedAvailabilityZoneExceptionUnmarshaller();
    public sealed virtual UnsupportedAvailabilityZoneException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnsupportedAvailabilityZoneException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnsupportedAvailabilityZoneExceptionUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller : object {
    private static UntagResourceRequestMarshaller _instance;
    public static UntagResourceRequestMarshaller Instance { get; }
    private static UntagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagResourceRequest publicRequest);
    internal static UntagResourceRequestMarshaller GetInstance();
    public static UntagResourceRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UntagResourceResponseUnmarshaller _instance;
    public static UntagResourceResponseUnmarshaller Instance { get; }
    private static UntagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagResourceResponseUnmarshaller GetInstance();
    public static UntagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateAccessConfigRequestMarshaller : object {
    public static UpdateAccessConfigRequestMarshaller Instance;
    private static UpdateAccessConfigRequestMarshaller();
    public sealed virtual void Marshall(UpdateAccessConfigRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateAccessEntryRequestMarshaller : object {
    private static UpdateAccessEntryRequestMarshaller _instance;
    public static UpdateAccessEntryRequestMarshaller Instance { get; }
    private static UpdateAccessEntryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateAccessEntryRequest publicRequest);
    internal static UpdateAccessEntryRequestMarshaller GetInstance();
    public static UpdateAccessEntryRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateAccessEntryResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateAccessEntryResponseUnmarshaller _instance;
    public static UpdateAccessEntryResponseUnmarshaller Instance { get; }
    private static UpdateAccessEntryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateAccessEntryResponseUnmarshaller GetInstance();
    public static UpdateAccessEntryResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateAddonRequestMarshaller : object {
    private static UpdateAddonRequestMarshaller _instance;
    public static UpdateAddonRequestMarshaller Instance { get; }
    private static UpdateAddonRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateAddonRequest publicRequest);
    internal static UpdateAddonRequestMarshaller GetInstance();
    public static UpdateAddonRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateAddonResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateAddonResponseUnmarshaller _instance;
    public static UpdateAddonResponseUnmarshaller Instance { get; }
    private static UpdateAddonResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateAddonResponseUnmarshaller GetInstance();
    public static UpdateAddonResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateClusterConfigRequestMarshaller : object {
    private static UpdateClusterConfigRequestMarshaller _instance;
    public static UpdateClusterConfigRequestMarshaller Instance { get; }
    private static UpdateClusterConfigRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateClusterConfigRequest publicRequest);
    internal static UpdateClusterConfigRequestMarshaller GetInstance();
    public static UpdateClusterConfigRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateClusterConfigResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateClusterConfigResponseUnmarshaller _instance;
    public static UpdateClusterConfigResponseUnmarshaller Instance { get; }
    private static UpdateClusterConfigResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateClusterConfigResponseUnmarshaller GetInstance();
    public static UpdateClusterConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateClusterVersionRequestMarshaller : object {
    private static UpdateClusterVersionRequestMarshaller _instance;
    public static UpdateClusterVersionRequestMarshaller Instance { get; }
    private static UpdateClusterVersionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateClusterVersionRequest publicRequest);
    internal static UpdateClusterVersionRequestMarshaller GetInstance();
    public static UpdateClusterVersionRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateClusterVersionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateClusterVersionResponseUnmarshaller _instance;
    public static UpdateClusterVersionResponseUnmarshaller Instance { get; }
    private static UpdateClusterVersionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateClusterVersionResponseUnmarshaller GetInstance();
    public static UpdateClusterVersionResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateEksAnywhereSubscriptionRequestMarshaller : object {
    private static UpdateEksAnywhereSubscriptionRequestMarshaller _instance;
    public static UpdateEksAnywhereSubscriptionRequestMarshaller Instance { get; }
    private static UpdateEksAnywhereSubscriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateEksAnywhereSubscriptionRequest publicRequest);
    internal static UpdateEksAnywhereSubscriptionRequestMarshaller GetInstance();
    public static UpdateEksAnywhereSubscriptionRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateEksAnywhereSubscriptionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateEksAnywhereSubscriptionResponseUnmarshaller _instance;
    public static UpdateEksAnywhereSubscriptionResponseUnmarshaller Instance { get; }
    private static UpdateEksAnywhereSubscriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateEksAnywhereSubscriptionResponseUnmarshaller GetInstance();
    public static UpdateEksAnywhereSubscriptionResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateLabelsPayloadMarshaller : object {
    public static UpdateLabelsPayloadMarshaller Instance;
    private static UpdateLabelsPayloadMarshaller();
    public sealed virtual void Marshall(UpdateLabelsPayload requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateNodegroupConfigRequestMarshaller : object {
    private static UpdateNodegroupConfigRequestMarshaller _instance;
    public static UpdateNodegroupConfigRequestMarshaller Instance { get; }
    private static UpdateNodegroupConfigRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateNodegroupConfigRequest publicRequest);
    internal static UpdateNodegroupConfigRequestMarshaller GetInstance();
    public static UpdateNodegroupConfigRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateNodegroupConfigResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateNodegroupConfigResponseUnmarshaller _instance;
    public static UpdateNodegroupConfigResponseUnmarshaller Instance { get; }
    private static UpdateNodegroupConfigResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateNodegroupConfigResponseUnmarshaller GetInstance();
    public static UpdateNodegroupConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateNodegroupVersionRequestMarshaller : object {
    private static UpdateNodegroupVersionRequestMarshaller _instance;
    public static UpdateNodegroupVersionRequestMarshaller Instance { get; }
    private static UpdateNodegroupVersionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateNodegroupVersionRequest publicRequest);
    internal static UpdateNodegroupVersionRequestMarshaller GetInstance();
    public static UpdateNodegroupVersionRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateNodegroupVersionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateNodegroupVersionResponseUnmarshaller _instance;
    public static UpdateNodegroupVersionResponseUnmarshaller Instance { get; }
    private static UpdateNodegroupVersionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateNodegroupVersionResponseUnmarshaller GetInstance();
    public static UpdateNodegroupVersionResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateParamUnmarshaller : object {
    private static UpdateParamUnmarshaller _instance;
    public static UpdateParamUnmarshaller Instance { get; }
    private static UpdateParamUnmarshaller();
    private sealed virtual override UpdateParam Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.UpdateParam,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UpdateParam Unmarshall(JsonUnmarshallerContext context);
    public static UpdateParamUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdatePodIdentityAssociationRequestMarshaller : object {
    private static UpdatePodIdentityAssociationRequestMarshaller _instance;
    public static UpdatePodIdentityAssociationRequestMarshaller Instance { get; }
    private static UpdatePodIdentityAssociationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdatePodIdentityAssociationRequest publicRequest);
    internal static UpdatePodIdentityAssociationRequestMarshaller GetInstance();
    public static UpdatePodIdentityAssociationRequestMarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdatePodIdentityAssociationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdatePodIdentityAssociationResponseUnmarshaller _instance;
    public static UpdatePodIdentityAssociationResponseUnmarshaller Instance { get; }
    private static UpdatePodIdentityAssociationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdatePodIdentityAssociationResponseUnmarshaller GetInstance();
    public static UpdatePodIdentityAssociationResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateTaintsPayloadMarshaller : object {
    public static UpdateTaintsPayloadMarshaller Instance;
    private static UpdateTaintsPayloadMarshaller();
    public sealed virtual void Marshall(UpdateTaintsPayload requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpdateUnmarshaller : object {
    private static UpdateUnmarshaller _instance;
    public static UpdateUnmarshaller Instance { get; }
    private static UpdateUnmarshaller();
    private sealed virtual override Update Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.Update,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Update Unmarshall(JsonUnmarshallerContext context);
    public static UpdateUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpgradePolicyRequestMarshaller : object {
    public static UpgradePolicyRequestMarshaller Instance;
    private static UpgradePolicyRequestMarshaller();
    public sealed virtual void Marshall(UpgradePolicyRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.UpgradePolicyResponseUnmarshaller : object {
    private static UpgradePolicyResponseUnmarshaller _instance;
    public static UpgradePolicyResponseUnmarshaller Instance { get; }
    private static UpgradePolicyResponseUnmarshaller();
    private sealed virtual override UpgradePolicyResponse Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.UpgradePolicyResponse,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UpgradePolicyResponse Unmarshall(JsonUnmarshallerContext context);
    public static UpgradePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.VpcConfigRequestMarshaller : object {
    public static VpcConfigRequestMarshaller Instance;
    private static VpcConfigRequestMarshaller();
    public sealed virtual void Marshall(VpcConfigRequest requestObject, JsonMarshallerContext context);
}
public class Amazon.EKS.Model.Internal.MarshallTransformations.VpcConfigResponseUnmarshaller : object {
    private static VpcConfigResponseUnmarshaller _instance;
    public static VpcConfigResponseUnmarshaller Instance { get; }
    private static VpcConfigResponseUnmarshaller();
    private sealed virtual override VpcConfigResponse Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EKS.Model.VpcConfigResponse,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VpcConfigResponse Unmarshall(JsonUnmarshallerContext context);
    public static VpcConfigResponseUnmarshaller get_Instance();
}
public class Amazon.EKS.Model.InvalidParameterException : AmazonEKSException {
    private string _addonName;
    private string _clusterName;
    private string _fargateProfileName;
    private string _nodegroupName;
    private string _subscriptionId;
    public string AddonName { get; public set; }
    public string ClusterName { get; public set; }
    public string FargateProfileName { get; public set; }
    public string NodegroupName { get; public set; }
    public string SubscriptionId { get; public set; }
    public InvalidParameterException(string message);
    public InvalidParameterException(string message, Exception innerException);
    public InvalidParameterException(Exception innerException);
    public InvalidParameterException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidParameterException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected InvalidParameterException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_FargateProfileName();
    public void set_FargateProfileName(string value);
    internal bool IsSetFargateProfileName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_SubscriptionId();
    public void set_SubscriptionId(string value);
    internal bool IsSetSubscriptionId();
}
public class Amazon.EKS.Model.InvalidRequestException : AmazonEKSException {
    private string _addonName;
    private string _clusterName;
    private string _nodegroupName;
    private string _subscriptionId;
    public string AddonName { get; public set; }
    public string ClusterName { get; public set; }
    public string NodegroupName { get; public set; }
    public string SubscriptionId { get; public set; }
    public InvalidRequestException(string message);
    public InvalidRequestException(string message, Exception innerException);
    public InvalidRequestException(Exception innerException);
    public InvalidRequestException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidRequestException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected InvalidRequestException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_SubscriptionId();
    public void set_SubscriptionId(string value);
    internal bool IsSetSubscriptionId();
}
public class Amazon.EKS.Model.Issue : object {
    private NodegroupIssueCode _code;
    private string _message;
    private List`1<string> _resourceIds;
    public NodegroupIssueCode Code { get; public set; }
    public string Message { get; public set; }
    public List`1<string> ResourceIds { get; public set; }
    public NodegroupIssueCode get_Code();
    public void set_Code(NodegroupIssueCode value);
    internal bool IsSetCode();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public List`1<string> get_ResourceIds();
    public void set_ResourceIds(List`1<string> value);
    internal bool IsSetResourceIds();
}
public class Amazon.EKS.Model.KubernetesNetworkConfigRequest : object {
    private IpFamily _ipFamily;
    private string _serviceIpv4Cidr;
    public IpFamily IpFamily { get; public set; }
    public string ServiceIpv4Cidr { get; public set; }
    public IpFamily get_IpFamily();
    public void set_IpFamily(IpFamily value);
    internal bool IsSetIpFamily();
    public string get_ServiceIpv4Cidr();
    public void set_ServiceIpv4Cidr(string value);
    internal bool IsSetServiceIpv4Cidr();
}
public class Amazon.EKS.Model.KubernetesNetworkConfigResponse : object {
    private IpFamily _ipFamily;
    private string _serviceIpv4Cidr;
    private string _serviceIpv6Cidr;
    public IpFamily IpFamily { get; public set; }
    public string ServiceIpv4Cidr { get; public set; }
    public string ServiceIpv6Cidr { get; public set; }
    public IpFamily get_IpFamily();
    public void set_IpFamily(IpFamily value);
    internal bool IsSetIpFamily();
    public string get_ServiceIpv4Cidr();
    public void set_ServiceIpv4Cidr(string value);
    internal bool IsSetServiceIpv4Cidr();
    public string get_ServiceIpv6Cidr();
    public void set_ServiceIpv6Cidr(string value);
    internal bool IsSetServiceIpv6Cidr();
}
public class Amazon.EKS.Model.LaunchTemplateSpecification : object {
    private string _id;
    private string _name;
    private string _version;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
internal class Amazon.EKS.Model.ListAccessEntriesPaginator : object {
    private IAmazonEKS _client;
    private ListAccessEntriesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAccessEntriesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> AccessEntries { get; }
    internal ListAccessEntriesPaginator(IAmazonEKS client, ListAccessEntriesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAccessEntriesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_AccessEntries();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListAccessEntriesPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListAccessEntriesResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListAccessEntriesResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListAccessEntriesResponse>.Paginate();
}
public class Amazon.EKS.Model.ListAccessEntriesRequest : AmazonEKSRequest {
    private string _associatedPolicyArn;
    private string _clusterName;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    public string AssociatedPolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string get_AssociatedPolicyArn();
    public void set_AssociatedPolicyArn(string value);
    internal bool IsSetAssociatedPolicyArn();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListAccessEntriesResponse : AmazonWebServiceResponse {
    private List`1<string> _accessEntries;
    private string _nextToken;
    public List`1<string> AccessEntries { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_AccessEntries();
    public void set_AccessEntries(List`1<string> value);
    internal bool IsSetAccessEntries();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.EKS.Model.ListAccessPoliciesPaginator : object {
    private IAmazonEKS _client;
    private ListAccessPoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAccessPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AccessPolicy> AccessPolicies { get; }
    internal ListAccessPoliciesPaginator(IAmazonEKS client, ListAccessPoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAccessPoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<AccessPolicy> get_AccessPolicies();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListAccessPoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListAccessPoliciesResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListAccessPoliciesResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListAccessPoliciesResponse>.Paginate();
}
public class Amazon.EKS.Model.ListAccessPoliciesRequest : AmazonEKSRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListAccessPoliciesResponse : AmazonWebServiceResponse {
    private List`1<AccessPolicy> _accessPolicies;
    private string _nextToken;
    public List`1<AccessPolicy> AccessPolicies { get; public set; }
    public string NextToken { get; public set; }
    public List`1<AccessPolicy> get_AccessPolicies();
    public void set_AccessPolicies(List`1<AccessPolicy> value);
    internal bool IsSetAccessPolicies();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.EKS.Model.ListAddonsPaginator : object {
    private IAmazonEKS _client;
    private ListAddonsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAddonsResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> Addons { get; }
    internal ListAddonsPaginator(IAmazonEKS client, ListAddonsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAddonsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_Addons();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListAddonsPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListAddonsResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListAddonsResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListAddonsResponse>.Paginate();
}
public class Amazon.EKS.Model.ListAddonsRequest : AmazonEKSRequest {
    private string _clusterName;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListAddonsResponse : AmazonWebServiceResponse {
    private List`1<string> _addons;
    private string _nextToken;
    public List`1<string> Addons { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_Addons();
    public void set_Addons(List`1<string> value);
    internal bool IsSetAddons();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.EKS.Model.ListAssociatedAccessPoliciesPaginator : object {
    private IAmazonEKS _client;
    private ListAssociatedAccessPoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAssociatedAccessPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AssociatedAccessPolicy> AssociatedAccessPolicies { get; }
    internal ListAssociatedAccessPoliciesPaginator(IAmazonEKS client, ListAssociatedAccessPoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAssociatedAccessPoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<AssociatedAccessPolicy> get_AssociatedAccessPolicies();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListAssociatedAccessPoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListAssociatedAccessPoliciesResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListAssociatedAccessPoliciesResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListAssociatedAccessPoliciesResponse>.Paginate();
}
public class Amazon.EKS.Model.ListAssociatedAccessPoliciesRequest : AmazonEKSRequest {
    private string _clusterName;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _principalArn;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string PrincipalArn { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
}
public class Amazon.EKS.Model.ListAssociatedAccessPoliciesResponse : AmazonWebServiceResponse {
    private List`1<AssociatedAccessPolicy> _associatedAccessPolicies;
    private string _clusterName;
    private string _nextToken;
    private string _principalArn;
    public List`1<AssociatedAccessPolicy> AssociatedAccessPolicies { get; public set; }
    public string ClusterName { get; public set; }
    public string NextToken { get; public set; }
    public string PrincipalArn { get; public set; }
    public List`1<AssociatedAccessPolicy> get_AssociatedAccessPolicies();
    public void set_AssociatedAccessPolicies(List`1<AssociatedAccessPolicy> value);
    internal bool IsSetAssociatedAccessPolicies();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
}
internal class Amazon.EKS.Model.ListClustersPaginator : object {
    private IAmazonEKS _client;
    private ListClustersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListClustersResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> Clusters { get; }
    internal ListClustersPaginator(IAmazonEKS client, ListClustersRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListClustersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_Clusters();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListClustersPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListClustersResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListClustersResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListClustersResponse>.Paginate();
}
public class Amazon.EKS.Model.ListClustersRequest : AmazonEKSRequest {
    private List`1<string> _include;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    public List`1<string> Include { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_Include();
    public void set_Include(List`1<string> value);
    internal bool IsSetInclude();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListClustersResponse : AmazonWebServiceResponse {
    private List`1<string> _clusters;
    private string _nextToken;
    public List`1<string> Clusters { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_Clusters();
    public void set_Clusters(List`1<string> value);
    internal bool IsSetClusters();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.EKS.Model.ListEksAnywhereSubscriptionsPaginator : object {
    private IAmazonEKS _client;
    private ListEksAnywhereSubscriptionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListEksAnywhereSubscriptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<EksAnywhereSubscription> Subscriptions { get; }
    internal ListEksAnywhereSubscriptionsPaginator(IAmazonEKS client, ListEksAnywhereSubscriptionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListEksAnywhereSubscriptionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<EksAnywhereSubscription> get_Subscriptions();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListEksAnywhereSubscriptionsPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListEksAnywhereSubscriptionsResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListEksAnywhereSubscriptionsResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListEksAnywhereSubscriptionsResponse>.Paginate();
}
public class Amazon.EKS.Model.ListEksAnywhereSubscriptionsRequest : AmazonEKSRequest {
    private List`1<string> _includeStatus;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    public List`1<string> IncludeStatus { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_IncludeStatus();
    public void set_IncludeStatus(List`1<string> value);
    internal bool IsSetIncludeStatus();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListEksAnywhereSubscriptionsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<EksAnywhereSubscription> _subscriptions;
    public string NextToken { get; public set; }
    public List`1<EksAnywhereSubscription> Subscriptions { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<EksAnywhereSubscription> get_Subscriptions();
    public void set_Subscriptions(List`1<EksAnywhereSubscription> value);
    internal bool IsSetSubscriptions();
}
internal class Amazon.EKS.Model.ListFargateProfilesPaginator : object {
    private IAmazonEKS _client;
    private ListFargateProfilesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListFargateProfilesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> FargateProfileNames { get; }
    internal ListFargateProfilesPaginator(IAmazonEKS client, ListFargateProfilesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListFargateProfilesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_FargateProfileNames();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListFargateProfilesPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListFargateProfilesResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListFargateProfilesResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListFargateProfilesResponse>.Paginate();
}
public class Amazon.EKS.Model.ListFargateProfilesRequest : AmazonEKSRequest {
    private string _clusterName;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListFargateProfilesResponse : AmazonWebServiceResponse {
    private List`1<string> _fargateProfileNames;
    private string _nextToken;
    public List`1<string> FargateProfileNames { get; public set; }
    public string NextToken { get; public set; }
    public List`1<string> get_FargateProfileNames();
    public void set_FargateProfileNames(List`1<string> value);
    internal bool IsSetFargateProfileNames();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.EKS.Model.ListIdentityProviderConfigsPaginator : object {
    private IAmazonEKS _client;
    private ListIdentityProviderConfigsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListIdentityProviderConfigsResponse> Responses { get; }
    public IPaginatedEnumerable`1<IdentityProviderConfig> IdentityProviderConfigs { get; }
    internal ListIdentityProviderConfigsPaginator(IAmazonEKS client, ListIdentityProviderConfigsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListIdentityProviderConfigsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<IdentityProviderConfig> get_IdentityProviderConfigs();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListIdentityProviderConfigsPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListIdentityProviderConfigsResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListIdentityProviderConfigsResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListIdentityProviderConfigsResponse>.Paginate();
}
public class Amazon.EKS.Model.ListIdentityProviderConfigsRequest : AmazonEKSRequest {
    private string _clusterName;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListIdentityProviderConfigsResponse : AmazonWebServiceResponse {
    private List`1<IdentityProviderConfig> _identityProviderConfigs;
    private string _nextToken;
    public List`1<IdentityProviderConfig> IdentityProviderConfigs { get; public set; }
    public string NextToken { get; public set; }
    public List`1<IdentityProviderConfig> get_IdentityProviderConfigs();
    public void set_IdentityProviderConfigs(List`1<IdentityProviderConfig> value);
    internal bool IsSetIdentityProviderConfigs();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.EKS.Model.ListInsightsPaginator : object {
    private IAmazonEKS _client;
    private ListInsightsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListInsightsResponse> Responses { get; }
    public IPaginatedEnumerable`1<InsightSummary> Insights { get; }
    internal ListInsightsPaginator(IAmazonEKS client, ListInsightsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListInsightsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<InsightSummary> get_Insights();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListInsightsPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListInsightsResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListInsightsResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListInsightsResponse>.Paginate();
}
public class Amazon.EKS.Model.ListInsightsRequest : AmazonEKSRequest {
    private string _clusterName;
    private InsightsFilter _filter;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public InsightsFilter Filter { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public InsightsFilter get_Filter();
    public void set_Filter(InsightsFilter value);
    internal bool IsSetFilter();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListInsightsResponse : AmazonWebServiceResponse {
    private List`1<InsightSummary> _insights;
    private string _nextToken;
    public List`1<InsightSummary> Insights { get; public set; }
    public string NextToken { get; public set; }
    public List`1<InsightSummary> get_Insights();
    public void set_Insights(List`1<InsightSummary> value);
    internal bool IsSetInsights();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.EKS.Model.ListNodegroupsPaginator : object {
    private IAmazonEKS _client;
    private ListNodegroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListNodegroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> Nodegroups { get; }
    internal ListNodegroupsPaginator(IAmazonEKS client, ListNodegroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListNodegroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_Nodegroups();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListNodegroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListNodegroupsResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListNodegroupsResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListNodegroupsResponse>.Paginate();
}
public class Amazon.EKS.Model.ListNodegroupsRequest : AmazonEKSRequest {
    private string _clusterName;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListNodegroupsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<string> _nodegroups;
    public string NextToken { get; public set; }
    public List`1<string> Nodegroups { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_Nodegroups();
    public void set_Nodegroups(List`1<string> value);
    internal bool IsSetNodegroups();
}
internal class Amazon.EKS.Model.ListPodIdentityAssociationsPaginator : object {
    private IAmazonEKS _client;
    private ListPodIdentityAssociationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListPodIdentityAssociationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<PodIdentityAssociationSummary> Associations { get; }
    internal ListPodIdentityAssociationsPaginator(IAmazonEKS client, ListPodIdentityAssociationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListPodIdentityAssociationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<PodIdentityAssociationSummary> get_Associations();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListPodIdentityAssociationsPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListPodIdentityAssociationsResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListPodIdentityAssociationsResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListPodIdentityAssociationsResponse>.Paginate();
}
public class Amazon.EKS.Model.ListPodIdentityAssociationsRequest : AmazonEKSRequest {
    private string _clusterName;
    private Nullable`1<int> _maxResults;
    private string _awsNamespace;
    private string _nextToken;
    private string _serviceAccount;
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    public string Namespace { get; public set; }
    public string NextToken { get; public set; }
    public string ServiceAccount { get; public set; }
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServiceAccount();
    public void set_ServiceAccount(string value);
    internal bool IsSetServiceAccount();
}
public class Amazon.EKS.Model.ListPodIdentityAssociationsResponse : AmazonWebServiceResponse {
    private List`1<PodIdentityAssociationSummary> _associations;
    private string _nextToken;
    public List`1<PodIdentityAssociationSummary> Associations { get; public set; }
    public string NextToken { get; public set; }
    public List`1<PodIdentityAssociationSummary> get_Associations();
    public void set_Associations(List`1<PodIdentityAssociationSummary> value);
    internal bool IsSetAssociations();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EKS.Model.ListTagsForResourceRequest : AmazonEKSRequest {
    private string _resourceArn;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.EKS.Model.ListTagsForResourceResponse : AmazonWebServiceResponse {
    private Dictionary`2<string, string> _tags;
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
internal class Amazon.EKS.Model.ListUpdatesPaginator : object {
    private IAmazonEKS _client;
    private ListUpdatesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListUpdatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> UpdateIds { get; }
    internal ListUpdatesPaginator(IAmazonEKS client, ListUpdatesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListUpdatesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_UpdateIds();
    [IteratorStateMachineAttribute("Amazon.EKS.Model.ListUpdatesPaginator/<Amazon-Runtime-IPaginator<Amazon-EKS-Model-ListUpdatesResponse>-Paginate>d__8")]
private sealed virtual override IEnumerable`1<ListUpdatesResponse> Amazon.Runtime.IPaginator<Amazon.EKS.Model.ListUpdatesResponse>.Paginate();
}
public class Amazon.EKS.Model.ListUpdatesRequest : AmazonEKSRequest {
    private string _addonName;
    private Nullable`1<int> _maxResults;
    private string _name;
    private string _nextToken;
    private string _nodegroupName;
    public string AddonName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string NextToken { get; public set; }
    public string NodegroupName { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
}
public class Amazon.EKS.Model.ListUpdatesResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<string> _updateIds;
    public string NextToken { get; public set; }
    public List`1<string> UpdateIds { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_UpdateIds();
    public void set_UpdateIds(List`1<string> value);
    internal bool IsSetUpdateIds();
}
public class Amazon.EKS.Model.Logging : object {
    private List`1<LogSetup> _clusterLogging;
    public List`1<LogSetup> ClusterLogging { get; public set; }
    public List`1<LogSetup> get_ClusterLogging();
    public void set_ClusterLogging(List`1<LogSetup> value);
    internal bool IsSetClusterLogging();
}
public class Amazon.EKS.Model.LogSetup : object {
    private Nullable`1<bool> _enabled;
    private List`1<string> _types;
    public Nullable`1<bool> Enabled { get; public set; }
    public List`1<string> Types { get; public set; }
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
    public List`1<string> get_Types();
    public void set_Types(List`1<string> value);
    internal bool IsSetTypes();
}
public class Amazon.EKS.Model.MarketplaceInformation : object {
    private string _productId;
    private string _productUrl;
    public string ProductId { get; public set; }
    public string ProductUrl { get; public set; }
    public string get_ProductId();
    public void set_ProductId(string value);
    internal bool IsSetProductId();
    public string get_ProductUrl();
    public void set_ProductUrl(string value);
    internal bool IsSetProductUrl();
}
public class Amazon.EKS.Model.Nodegroup : object {
    private AMITypes _amiType;
    private CapacityTypes _capacityType;
    private string _clusterName;
    private Nullable`1<DateTime> _createdAt;
    private Nullable`1<int> _diskSize;
    private NodegroupHealth _health;
    private List`1<string> _instanceTypes;
    private Dictionary`2<string, string> _labels;
    private LaunchTemplateSpecification _launchTemplate;
    private Nullable`1<DateTime> _modifiedAt;
    private string _nodegroupArn;
    private string _nodegroupName;
    private string _nodeRole;
    private string _releaseVersion;
    private RemoteAccessConfig _remoteAccess;
    private NodegroupResources _resources;
    private NodegroupScalingConfig _scalingConfig;
    private NodegroupStatus _status;
    private List`1<string> _subnets;
    private Dictionary`2<string, string> _tags;
    private List`1<Taint> _taints;
    private NodegroupUpdateConfig _updateConfig;
    private string _version;
    public AMITypes AmiType { get; public set; }
    public CapacityTypes CapacityType { get; public set; }
    public string ClusterName { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public Nullable`1<int> DiskSize { get; public set; }
    public NodegroupHealth Health { get; public set; }
    public List`1<string> InstanceTypes { get; public set; }
    public Dictionary`2<string, string> Labels { get; public set; }
    public LaunchTemplateSpecification LaunchTemplate { get; public set; }
    public Nullable`1<DateTime> ModifiedAt { get; public set; }
    public string NodegroupArn { get; public set; }
    public string NodegroupName { get; public set; }
    public string NodeRole { get; public set; }
    public string ReleaseVersion { get; public set; }
    public RemoteAccessConfig RemoteAccess { get; public set; }
    public NodegroupResources Resources { get; public set; }
    public NodegroupScalingConfig ScalingConfig { get; public set; }
    public NodegroupStatus Status { get; public set; }
    public List`1<string> Subnets { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public List`1<Taint> Taints { get; public set; }
    public NodegroupUpdateConfig UpdateConfig { get; public set; }
    public string Version { get; public set; }
    public AMITypes get_AmiType();
    public void set_AmiType(AMITypes value);
    internal bool IsSetAmiType();
    public CapacityTypes get_CapacityType();
    public void set_CapacityType(CapacityTypes value);
    internal bool IsSetCapacityType();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public Nullable`1<int> get_DiskSize();
    public void set_DiskSize(Nullable`1<int> value);
    internal bool IsSetDiskSize();
    public NodegroupHealth get_Health();
    public void set_Health(NodegroupHealth value);
    internal bool IsSetHealth();
    public List`1<string> get_InstanceTypes();
    public void set_InstanceTypes(List`1<string> value);
    internal bool IsSetInstanceTypes();
    public Dictionary`2<string, string> get_Labels();
    public void set_Labels(Dictionary`2<string, string> value);
    internal bool IsSetLabels();
    public LaunchTemplateSpecification get_LaunchTemplate();
    public void set_LaunchTemplate(LaunchTemplateSpecification value);
    internal bool IsSetLaunchTemplate();
    public Nullable`1<DateTime> get_ModifiedAt();
    public void set_ModifiedAt(Nullable`1<DateTime> value);
    internal bool IsSetModifiedAt();
    public string get_NodegroupArn();
    public void set_NodegroupArn(string value);
    internal bool IsSetNodegroupArn();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_NodeRole();
    public void set_NodeRole(string value);
    internal bool IsSetNodeRole();
    public string get_ReleaseVersion();
    public void set_ReleaseVersion(string value);
    internal bool IsSetReleaseVersion();
    public RemoteAccessConfig get_RemoteAccess();
    public void set_RemoteAccess(RemoteAccessConfig value);
    internal bool IsSetRemoteAccess();
    public NodegroupResources get_Resources();
    public void set_Resources(NodegroupResources value);
    internal bool IsSetResources();
    public NodegroupScalingConfig get_ScalingConfig();
    public void set_ScalingConfig(NodegroupScalingConfig value);
    internal bool IsSetScalingConfig();
    public NodegroupStatus get_Status();
    public void set_Status(NodegroupStatus value);
    internal bool IsSetStatus();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public List`1<Taint> get_Taints();
    public void set_Taints(List`1<Taint> value);
    internal bool IsSetTaints();
    public NodegroupUpdateConfig get_UpdateConfig();
    public void set_UpdateConfig(NodegroupUpdateConfig value);
    internal bool IsSetUpdateConfig();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.EKS.Model.NodegroupHealth : object {
    private List`1<Issue> _issues;
    public List`1<Issue> Issues { get; public set; }
    public List`1<Issue> get_Issues();
    public void set_Issues(List`1<Issue> value);
    internal bool IsSetIssues();
}
public class Amazon.EKS.Model.NodegroupResources : object {
    private List`1<AutoScalingGroup> _autoScalingGroups;
    private string _remoteAccessSecurityGroup;
    public List`1<AutoScalingGroup> AutoScalingGroups { get; public set; }
    public string RemoteAccessSecurityGroup { get; public set; }
    public List`1<AutoScalingGroup> get_AutoScalingGroups();
    public void set_AutoScalingGroups(List`1<AutoScalingGroup> value);
    internal bool IsSetAutoScalingGroups();
    public string get_RemoteAccessSecurityGroup();
    public void set_RemoteAccessSecurityGroup(string value);
    internal bool IsSetRemoteAccessSecurityGroup();
}
public class Amazon.EKS.Model.NodegroupScalingConfig : object {
    private Nullable`1<int> _desiredSize;
    private Nullable`1<int> _maxSize;
    private Nullable`1<int> _minSize;
    [AWSPropertyAttribute]
public Nullable`1<int> DesiredSize { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxSize { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MinSize { get; public set; }
    public Nullable`1<int> get_DesiredSize();
    public void set_DesiredSize(Nullable`1<int> value);
    internal bool IsSetDesiredSize();
    public Nullable`1<int> get_MaxSize();
    public void set_MaxSize(Nullable`1<int> value);
    internal bool IsSetMaxSize();
    public Nullable`1<int> get_MinSize();
    public void set_MinSize(Nullable`1<int> value);
    internal bool IsSetMinSize();
}
public class Amazon.EKS.Model.NodegroupUpdateConfig : object {
    private Nullable`1<int> _maxUnavailable;
    private Nullable`1<int> _maxUnavailablePercentage;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxUnavailable { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxUnavailablePercentage { get; public set; }
    public Nullable`1<int> get_MaxUnavailable();
    public void set_MaxUnavailable(Nullable`1<int> value);
    internal bool IsSetMaxUnavailable();
    public Nullable`1<int> get_MaxUnavailablePercentage();
    public void set_MaxUnavailablePercentage(Nullable`1<int> value);
    internal bool IsSetMaxUnavailablePercentage();
}
public class Amazon.EKS.Model.NotFoundException : AmazonEKSException {
    public NotFoundException(string message);
    public NotFoundException(string message, Exception innerException);
    public NotFoundException(Exception innerException);
    public NotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected NotFoundException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EKS.Model.OIDC : object {
    private string _issuer;
    public string Issuer { get; public set; }
    public string get_Issuer();
    public void set_Issuer(string value);
    internal bool IsSetIssuer();
}
public class Amazon.EKS.Model.OidcIdentityProviderConfig : object {
    private string _clientId;
    private string _clusterName;
    private string _groupsClaim;
    private string _groupsPrefix;
    private string _identityProviderConfigArn;
    private string _identityProviderConfigName;
    private string _issuerUrl;
    private Dictionary`2<string, string> _requiredClaims;
    private ConfigStatus _status;
    private Dictionary`2<string, string> _tags;
    private string _usernameClaim;
    private string _usernamePrefix;
    public string ClientId { get; public set; }
    public string ClusterName { get; public set; }
    public string GroupsClaim { get; public set; }
    public string GroupsPrefix { get; public set; }
    public string IdentityProviderConfigArn { get; public set; }
    public string IdentityProviderConfigName { get; public set; }
    public string IssuerUrl { get; public set; }
    public Dictionary`2<string, string> RequiredClaims { get; public set; }
    public ConfigStatus Status { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string UsernameClaim { get; public set; }
    public string UsernamePrefix { get; public set; }
    public string get_ClientId();
    public void set_ClientId(string value);
    internal bool IsSetClientId();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_GroupsClaim();
    public void set_GroupsClaim(string value);
    internal bool IsSetGroupsClaim();
    public string get_GroupsPrefix();
    public void set_GroupsPrefix(string value);
    internal bool IsSetGroupsPrefix();
    public string get_IdentityProviderConfigArn();
    public void set_IdentityProviderConfigArn(string value);
    internal bool IsSetIdentityProviderConfigArn();
    public string get_IdentityProviderConfigName();
    public void set_IdentityProviderConfigName(string value);
    internal bool IsSetIdentityProviderConfigName();
    public string get_IssuerUrl();
    public void set_IssuerUrl(string value);
    internal bool IsSetIssuerUrl();
    public Dictionary`2<string, string> get_RequiredClaims();
    public void set_RequiredClaims(Dictionary`2<string, string> value);
    internal bool IsSetRequiredClaims();
    public ConfigStatus get_Status();
    public void set_Status(ConfigStatus value);
    internal bool IsSetStatus();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public string get_UsernameClaim();
    public void set_UsernameClaim(string value);
    internal bool IsSetUsernameClaim();
    public string get_UsernamePrefix();
    public void set_UsernamePrefix(string value);
    internal bool IsSetUsernamePrefix();
}
public class Amazon.EKS.Model.OidcIdentityProviderConfigRequest : object {
    private string _clientId;
    private string _groupsClaim;
    private string _groupsPrefix;
    private string _identityProviderConfigName;
    private string _issuerUrl;
    private Dictionary`2<string, string> _requiredClaims;
    private string _usernameClaim;
    private string _usernamePrefix;
    [AWSPropertyAttribute]
public string ClientId { get; public set; }
    public string GroupsClaim { get; public set; }
    public string GroupsPrefix { get; public set; }
    [AWSPropertyAttribute]
public string IdentityProviderConfigName { get; public set; }
    [AWSPropertyAttribute]
public string IssuerUrl { get; public set; }
    public Dictionary`2<string, string> RequiredClaims { get; public set; }
    public string UsernameClaim { get; public set; }
    public string UsernamePrefix { get; public set; }
    public string get_ClientId();
    public void set_ClientId(string value);
    internal bool IsSetClientId();
    public string get_GroupsClaim();
    public void set_GroupsClaim(string value);
    internal bool IsSetGroupsClaim();
    public string get_GroupsPrefix();
    public void set_GroupsPrefix(string value);
    internal bool IsSetGroupsPrefix();
    public string get_IdentityProviderConfigName();
    public void set_IdentityProviderConfigName(string value);
    internal bool IsSetIdentityProviderConfigName();
    public string get_IssuerUrl();
    public void set_IssuerUrl(string value);
    internal bool IsSetIssuerUrl();
    public Dictionary`2<string, string> get_RequiredClaims();
    public void set_RequiredClaims(Dictionary`2<string, string> value);
    internal bool IsSetRequiredClaims();
    public string get_UsernameClaim();
    public void set_UsernameClaim(string value);
    internal bool IsSetUsernameClaim();
    public string get_UsernamePrefix();
    public void set_UsernamePrefix(string value);
    internal bool IsSetUsernamePrefix();
}
public class Amazon.EKS.Model.OutpostConfigRequest : object {
    private string _controlPlaneInstanceType;
    private ControlPlanePlacementRequest _controlPlanePlacement;
    private List`1<string> _outpostArns;
    [AWSPropertyAttribute]
public string ControlPlaneInstanceType { get; public set; }
    public ControlPlanePlacementRequest ControlPlanePlacement { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> OutpostArns { get; public set; }
    public string get_ControlPlaneInstanceType();
    public void set_ControlPlaneInstanceType(string value);
    internal bool IsSetControlPlaneInstanceType();
    public ControlPlanePlacementRequest get_ControlPlanePlacement();
    public void set_ControlPlanePlacement(ControlPlanePlacementRequest value);
    internal bool IsSetControlPlanePlacement();
    public List`1<string> get_OutpostArns();
    public void set_OutpostArns(List`1<string> value);
    internal bool IsSetOutpostArns();
}
public class Amazon.EKS.Model.OutpostConfigResponse : object {
    private string _controlPlaneInstanceType;
    private ControlPlanePlacementResponse _controlPlanePlacement;
    private List`1<string> _outpostArns;
    [AWSPropertyAttribute]
public string ControlPlaneInstanceType { get; public set; }
    public ControlPlanePlacementResponse ControlPlanePlacement { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> OutpostArns { get; public set; }
    public string get_ControlPlaneInstanceType();
    public void set_ControlPlaneInstanceType(string value);
    internal bool IsSetControlPlaneInstanceType();
    public ControlPlanePlacementResponse get_ControlPlanePlacement();
    public void set_ControlPlanePlacement(ControlPlanePlacementResponse value);
    internal bool IsSetControlPlanePlacement();
    public List`1<string> get_OutpostArns();
    public void set_OutpostArns(List`1<string> value);
    internal bool IsSetOutpostArns();
}
public class Amazon.EKS.Model.PodIdentityAssociation : object {
    private string _associationArn;
    private string _associationId;
    private string _clusterName;
    private Nullable`1<DateTime> _createdAt;
    private Nullable`1<DateTime> _modifiedAt;
    private string _awsNamespace;
    private string _ownerArn;
    private string _roleArn;
    private string _serviceAccount;
    private Dictionary`2<string, string> _tags;
    public string AssociationArn { get; public set; }
    public string AssociationId { get; public set; }
    public string ClusterName { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public Nullable`1<DateTime> ModifiedAt { get; public set; }
    public string Namespace { get; public set; }
    public string OwnerArn { get; public set; }
    public string RoleArn { get; public set; }
    public string ServiceAccount { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string get_AssociationArn();
    public void set_AssociationArn(string value);
    internal bool IsSetAssociationArn();
    public string get_AssociationId();
    public void set_AssociationId(string value);
    internal bool IsSetAssociationId();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public Nullable`1<DateTime> get_ModifiedAt();
    public void set_ModifiedAt(Nullable`1<DateTime> value);
    internal bool IsSetModifiedAt();
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
    public string get_OwnerArn();
    public void set_OwnerArn(string value);
    internal bool IsSetOwnerArn();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public string get_ServiceAccount();
    public void set_ServiceAccount(string value);
    internal bool IsSetServiceAccount();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
public class Amazon.EKS.Model.PodIdentityAssociationSummary : object {
    private string _associationArn;
    private string _associationId;
    private string _clusterName;
    private string _awsNamespace;
    private string _ownerArn;
    private string _serviceAccount;
    public string AssociationArn { get; public set; }
    public string AssociationId { get; public set; }
    public string ClusterName { get; public set; }
    public string Namespace { get; public set; }
    public string OwnerArn { get; public set; }
    public string ServiceAccount { get; public set; }
    public string get_AssociationArn();
    public void set_AssociationArn(string value);
    internal bool IsSetAssociationArn();
    public string get_AssociationId();
    public void set_AssociationId(string value);
    internal bool IsSetAssociationId();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
    public string get_OwnerArn();
    public void set_OwnerArn(string value);
    internal bool IsSetOwnerArn();
    public string get_ServiceAccount();
    public void set_ServiceAccount(string value);
    internal bool IsSetServiceAccount();
}
public class Amazon.EKS.Model.Provider : object {
    private string _keyArn;
    public string KeyArn { get; public set; }
    public string get_KeyArn();
    public void set_KeyArn(string value);
    internal bool IsSetKeyArn();
}
public class Amazon.EKS.Model.RegisterClusterRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private ConnectorConfigRequest _connectorConfig;
    private string _name;
    private Dictionary`2<string, string> _tags;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public ConnectorConfigRequest ConnectorConfig { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public ConnectorConfigRequest get_ConnectorConfig();
    public void set_ConnectorConfig(ConnectorConfigRequest value);
    internal bool IsSetConnectorConfig();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
public class Amazon.EKS.Model.RegisterClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.EKS.Model.RemoteAccessConfig : object {
    private string _ec2SshKey;
    private List`1<string> _sourceSecurityGroups;
    public string Ec2SshKey { get; public set; }
    public List`1<string> SourceSecurityGroups { get; public set; }
    public string get_Ec2SshKey();
    public void set_Ec2SshKey(string value);
    internal bool IsSetEc2SshKey();
    public List`1<string> get_SourceSecurityGroups();
    public void set_SourceSecurityGroups(List`1<string> value);
    internal bool IsSetSourceSecurityGroups();
}
public class Amazon.EKS.Model.ResourceInUseException : AmazonEKSException {
    private string _addonName;
    private string _clusterName;
    private string _nodegroupName;
    public string AddonName { get; public set; }
    public string ClusterName { get; public set; }
    public string NodegroupName { get; public set; }
    public ResourceInUseException(string message);
    public ResourceInUseException(string message, Exception innerException);
    public ResourceInUseException(Exception innerException);
    public ResourceInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ResourceInUseException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
}
public class Amazon.EKS.Model.ResourceLimitExceededException : AmazonEKSException {
    private string _clusterName;
    private string _nodegroupName;
    private string _subscriptionId;
    public string ClusterName { get; public set; }
    public string NodegroupName { get; public set; }
    public string SubscriptionId { get; public set; }
    public ResourceLimitExceededException(string message);
    public ResourceLimitExceededException(string message, Exception innerException);
    public ResourceLimitExceededException(Exception innerException);
    public ResourceLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ResourceLimitExceededException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_SubscriptionId();
    public void set_SubscriptionId(string value);
    internal bool IsSetSubscriptionId();
}
public class Amazon.EKS.Model.ResourceNotFoundException : AmazonEKSException {
    private string _addonName;
    private string _clusterName;
    private string _fargateProfileName;
    private string _nodegroupName;
    private string _subscriptionId;
    public string AddonName { get; public set; }
    public string ClusterName { get; public set; }
    public string FargateProfileName { get; public set; }
    public string NodegroupName { get; public set; }
    public string SubscriptionId { get; public set; }
    public ResourceNotFoundException(string message);
    public ResourceNotFoundException(string message, Exception innerException);
    public ResourceNotFoundException(Exception innerException);
    public ResourceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ResourceNotFoundException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_FargateProfileName();
    public void set_FargateProfileName(string value);
    internal bool IsSetFargateProfileName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_SubscriptionId();
    public void set_SubscriptionId(string value);
    internal bool IsSetSubscriptionId();
}
public class Amazon.EKS.Model.ResourcePropagationDelayException : AmazonEKSException {
    public ResourcePropagationDelayException(string message);
    public ResourcePropagationDelayException(string message, Exception innerException);
    public ResourcePropagationDelayException(Exception innerException);
    public ResourcePropagationDelayException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourcePropagationDelayException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ResourcePropagationDelayException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EKS.Model.ServerException : AmazonEKSException {
    private string _addonName;
    private string _clusterName;
    private string _nodegroupName;
    private string _subscriptionId;
    public string AddonName { get; public set; }
    public string ClusterName { get; public set; }
    public string NodegroupName { get; public set; }
    public string SubscriptionId { get; public set; }
    public ServerException(string message);
    public ServerException(string message, Exception innerException);
    public ServerException(Exception innerException);
    public ServerException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServerException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ServerException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_SubscriptionId();
    public void set_SubscriptionId(string value);
    internal bool IsSetSubscriptionId();
}
public class Amazon.EKS.Model.ServiceUnavailableException : AmazonEKSException {
    public ServiceUnavailableException(string message);
    public ServiceUnavailableException(string message, Exception innerException);
    public ServiceUnavailableException(Exception innerException);
    public ServiceUnavailableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServiceUnavailableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ServiceUnavailableException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EKS.Model.TagResourceRequest : AmazonEKSRequest {
    private string _resourceArn;
    private Dictionary`2<string, string> _tags;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    [AWSPropertyAttribute]
public Dictionary`2<string, string> Tags { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
}
public class Amazon.EKS.Model.TagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.EKS.Model.Taint : object {
    private TaintEffect _effect;
    private string _key;
    private string _value;
    public TaintEffect Effect { get; public set; }
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public TaintEffect get_Effect();
    public void set_Effect(TaintEffect value);
    internal bool IsSetEffect();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.EKS.Model.UnsupportedAvailabilityZoneException : AmazonEKSException {
    private string _clusterName;
    private string _nodegroupName;
    private List`1<string> _validZones;
    public string ClusterName { get; public set; }
    public string NodegroupName { get; public set; }
    public List`1<string> ValidZones { get; public set; }
    public UnsupportedAvailabilityZoneException(string message);
    public UnsupportedAvailabilityZoneException(string message, Exception innerException);
    public UnsupportedAvailabilityZoneException(Exception innerException);
    public UnsupportedAvailabilityZoneException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnsupportedAvailabilityZoneException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected UnsupportedAvailabilityZoneException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public List`1<string> get_ValidZones();
    public void set_ValidZones(List`1<string> value);
    internal bool IsSetValidZones();
}
public class Amazon.EKS.Model.UntagResourceRequest : AmazonEKSRequest {
    private string _resourceArn;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.EKS.Model.UntagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.EKS.Model.Update : object {
    private Nullable`1<DateTime> _createdAt;
    private List`1<ErrorDetail> _errors;
    private string _id;
    private List`1<UpdateParam> _params;
    private UpdateStatus _status;
    private UpdateType _type;
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    public List`1<ErrorDetail> Errors { get; public set; }
    public string Id { get; public set; }
    public List`1<UpdateParam> Params { get; public set; }
    public UpdateStatus Status { get; public set; }
    public UpdateType Type { get; public set; }
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public List`1<ErrorDetail> get_Errors();
    public void set_Errors(List`1<ErrorDetail> value);
    internal bool IsSetErrors();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public List`1<UpdateParam> get_Params();
    public void set_Params(List`1<UpdateParam> value);
    internal bool IsSetParams();
    public UpdateStatus get_Status();
    public void set_Status(UpdateStatus value);
    internal bool IsSetStatus();
    public UpdateType get_Type();
    public void set_Type(UpdateType value);
    internal bool IsSetType();
}
public class Amazon.EKS.Model.UpdateAccessConfigRequest : object {
    private AuthenticationMode _authenticationMode;
    public AuthenticationMode AuthenticationMode { get; public set; }
    public AuthenticationMode get_AuthenticationMode();
    public void set_AuthenticationMode(AuthenticationMode value);
    internal bool IsSetAuthenticationMode();
}
public class Amazon.EKS.Model.UpdateAccessEntryRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _clusterName;
    private List`1<string> _kubernetesGroups;
    private string _principalArn;
    private string _username;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public List`1<string> KubernetesGroups { get; public set; }
    [AWSPropertyAttribute]
public string PrincipalArn { get; public set; }
    public string Username { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public List`1<string> get_KubernetesGroups();
    public void set_KubernetesGroups(List`1<string> value);
    internal bool IsSetKubernetesGroups();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
    public string get_Username();
    public void set_Username(string value);
    internal bool IsSetUsername();
}
public class Amazon.EKS.Model.UpdateAccessEntryResponse : AmazonWebServiceResponse {
    private AccessEntry _accessEntry;
    public AccessEntry AccessEntry { get; public set; }
    public AccessEntry get_AccessEntry();
    public void set_AccessEntry(AccessEntry value);
    internal bool IsSetAccessEntry();
}
public class Amazon.EKS.Model.UpdateAddonRequest : AmazonEKSRequest {
    private string _addonName;
    private string _addonVersion;
    private string _clientRequestToken;
    private string _clusterName;
    private string _configurationValues;
    private List`1<AddonPodIdentityAssociations> _podIdentityAssociations;
    private ResolveConflicts _resolveConflicts;
    private string _serviceAccountRoleArn;
    [AWSPropertyAttribute]
public string AddonName { get; public set; }
    public string AddonVersion { get; public set; }
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public string ConfigurationValues { get; public set; }
    public List`1<AddonPodIdentityAssociations> PodIdentityAssociations { get; public set; }
    public ResolveConflicts ResolveConflicts { get; public set; }
    [AWSPropertyAttribute]
public string ServiceAccountRoleArn { get; public set; }
    public string get_AddonName();
    public void set_AddonName(string value);
    internal bool IsSetAddonName();
    public string get_AddonVersion();
    public void set_AddonVersion(string value);
    internal bool IsSetAddonVersion();
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_ConfigurationValues();
    public void set_ConfigurationValues(string value);
    internal bool IsSetConfigurationValues();
    public List`1<AddonPodIdentityAssociations> get_PodIdentityAssociations();
    public void set_PodIdentityAssociations(List`1<AddonPodIdentityAssociations> value);
    internal bool IsSetPodIdentityAssociations();
    public ResolveConflicts get_ResolveConflicts();
    public void set_ResolveConflicts(ResolveConflicts value);
    internal bool IsSetResolveConflicts();
    public string get_ServiceAccountRoleArn();
    public void set_ServiceAccountRoleArn(string value);
    internal bool IsSetServiceAccountRoleArn();
}
public class Amazon.EKS.Model.UpdateAddonResponse : AmazonWebServiceResponse {
    private Update _update;
    public Update Update { get; public set; }
    public Update get_Update();
    public void set_Update(Update value);
    internal bool IsSetUpdate();
}
public class Amazon.EKS.Model.UpdateClusterConfigRequest : AmazonEKSRequest {
    private UpdateAccessConfigRequest _accessConfig;
    private string _clientRequestToken;
    private Logging _logging;
    private string _name;
    private VpcConfigRequest _resourcesVpcConfig;
    private UpgradePolicyRequest _upgradePolicy;
    public UpdateAccessConfigRequest AccessConfig { get; public set; }
    public string ClientRequestToken { get; public set; }
    public Logging Logging { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public VpcConfigRequest ResourcesVpcConfig { get; public set; }
    public UpgradePolicyRequest UpgradePolicy { get; public set; }
    public UpdateAccessConfigRequest get_AccessConfig();
    public void set_AccessConfig(UpdateAccessConfigRequest value);
    internal bool IsSetAccessConfig();
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public Logging get_Logging();
    public void set_Logging(Logging value);
    internal bool IsSetLogging();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public VpcConfigRequest get_ResourcesVpcConfig();
    public void set_ResourcesVpcConfig(VpcConfigRequest value);
    internal bool IsSetResourcesVpcConfig();
    public UpgradePolicyRequest get_UpgradePolicy();
    public void set_UpgradePolicy(UpgradePolicyRequest value);
    internal bool IsSetUpgradePolicy();
}
public class Amazon.EKS.Model.UpdateClusterConfigResponse : AmazonWebServiceResponse {
    private Update _update;
    public Update Update { get; public set; }
    public Update get_Update();
    public void set_Update(Update value);
    internal bool IsSetUpdate();
}
public class Amazon.EKS.Model.UpdateClusterVersionRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _name;
    private string _version;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string Version { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.EKS.Model.UpdateClusterVersionResponse : AmazonWebServiceResponse {
    private Update _update;
    public Update Update { get; public set; }
    public Update get_Update();
    public void set_Update(Update value);
    internal bool IsSetUpdate();
}
public class Amazon.EKS.Model.UpdateEksAnywhereSubscriptionRequest : AmazonEKSRequest {
    private Nullable`1<bool> _autoRenew;
    private string _clientRequestToken;
    private string _id;
    [AWSPropertyAttribute]
public Nullable`1<bool> AutoRenew { get; public set; }
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public Nullable`1<bool> get_AutoRenew();
    public void set_AutoRenew(Nullable`1<bool> value);
    internal bool IsSetAutoRenew();
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.EKS.Model.UpdateEksAnywhereSubscriptionResponse : AmazonWebServiceResponse {
    private EksAnywhereSubscription _subscription;
    public EksAnywhereSubscription Subscription { get; public set; }
    public EksAnywhereSubscription get_Subscription();
    public void set_Subscription(EksAnywhereSubscription value);
    internal bool IsSetSubscription();
}
public class Amazon.EKS.Model.UpdateLabelsPayload : object {
    private Dictionary`2<string, string> _addOrUpdateLabels;
    private List`1<string> _removeLabels;
    public Dictionary`2<string, string> AddOrUpdateLabels { get; public set; }
    public List`1<string> RemoveLabels { get; public set; }
    public Dictionary`2<string, string> get_AddOrUpdateLabels();
    public void set_AddOrUpdateLabels(Dictionary`2<string, string> value);
    internal bool IsSetAddOrUpdateLabels();
    public List`1<string> get_RemoveLabels();
    public void set_RemoveLabels(List`1<string> value);
    internal bool IsSetRemoveLabels();
}
public class Amazon.EKS.Model.UpdateNodegroupConfigRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _clusterName;
    private UpdateLabelsPayload _labels;
    private string _nodegroupName;
    private NodegroupScalingConfig _scalingConfig;
    private UpdateTaintsPayload _taints;
    private NodegroupUpdateConfig _updateConfig;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public UpdateLabelsPayload Labels { get; public set; }
    [AWSPropertyAttribute]
public string NodegroupName { get; public set; }
    public NodegroupScalingConfig ScalingConfig { get; public set; }
    public UpdateTaintsPayload Taints { get; public set; }
    public NodegroupUpdateConfig UpdateConfig { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public UpdateLabelsPayload get_Labels();
    public void set_Labels(UpdateLabelsPayload value);
    internal bool IsSetLabels();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public NodegroupScalingConfig get_ScalingConfig();
    public void set_ScalingConfig(NodegroupScalingConfig value);
    internal bool IsSetScalingConfig();
    public UpdateTaintsPayload get_Taints();
    public void set_Taints(UpdateTaintsPayload value);
    internal bool IsSetTaints();
    public NodegroupUpdateConfig get_UpdateConfig();
    public void set_UpdateConfig(NodegroupUpdateConfig value);
    internal bool IsSetUpdateConfig();
}
public class Amazon.EKS.Model.UpdateNodegroupConfigResponse : AmazonWebServiceResponse {
    private Update _update;
    public Update Update { get; public set; }
    public Update get_Update();
    public void set_Update(Update value);
    internal bool IsSetUpdate();
}
public class Amazon.EKS.Model.UpdateNodegroupVersionRequest : AmazonEKSRequest {
    private string _clientRequestToken;
    private string _clusterName;
    private Nullable`1<bool> _force;
    private LaunchTemplateSpecification _launchTemplate;
    private string _nodegroupName;
    private string _releaseVersion;
    private string _version;
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public Nullable`1<bool> Force { get; public set; }
    public LaunchTemplateSpecification LaunchTemplate { get; public set; }
    [AWSPropertyAttribute]
public string NodegroupName { get; public set; }
    public string ReleaseVersion { get; public set; }
    public string Version { get; public set; }
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
    public LaunchTemplateSpecification get_LaunchTemplate();
    public void set_LaunchTemplate(LaunchTemplateSpecification value);
    internal bool IsSetLaunchTemplate();
    public string get_NodegroupName();
    public void set_NodegroupName(string value);
    internal bool IsSetNodegroupName();
    public string get_ReleaseVersion();
    public void set_ReleaseVersion(string value);
    internal bool IsSetReleaseVersion();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.EKS.Model.UpdateNodegroupVersionResponse : AmazonWebServiceResponse {
    private Update _update;
    public Update Update { get; public set; }
    public Update get_Update();
    public void set_Update(Update value);
    internal bool IsSetUpdate();
}
public class Amazon.EKS.Model.UpdateParam : object {
    private UpdateParamType _type;
    private string _value;
    public UpdateParamType Type { get; public set; }
    public string Value { get; public set; }
    public UpdateParamType get_Type();
    public void set_Type(UpdateParamType value);
    internal bool IsSetType();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.EKS.Model.UpdatePodIdentityAssociationRequest : AmazonEKSRequest {
    private string _associationId;
    private string _clientRequestToken;
    private string _clusterName;
    private string _roleArn;
    [AWSPropertyAttribute]
public string AssociationId { get; public set; }
    public string ClientRequestToken { get; public set; }
    [AWSPropertyAttribute]
public string ClusterName { get; public set; }
    public string RoleArn { get; public set; }
    public string get_AssociationId();
    public void set_AssociationId(string value);
    internal bool IsSetAssociationId();
    public string get_ClientRequestToken();
    public void set_ClientRequestToken(string value);
    internal bool IsSetClientRequestToken();
    public string get_ClusterName();
    public void set_ClusterName(string value);
    internal bool IsSetClusterName();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
}
public class Amazon.EKS.Model.UpdatePodIdentityAssociationResponse : AmazonWebServiceResponse {
    private PodIdentityAssociation _association;
    public PodIdentityAssociation Association { get; public set; }
    public PodIdentityAssociation get_Association();
    public void set_Association(PodIdentityAssociation value);
    internal bool IsSetAssociation();
}
public class Amazon.EKS.Model.UpdateTaintsPayload : object {
    private List`1<Taint> _addOrUpdateTaints;
    private List`1<Taint> _removeTaints;
    public List`1<Taint> AddOrUpdateTaints { get; public set; }
    public List`1<Taint> RemoveTaints { get; public set; }
    public List`1<Taint> get_AddOrUpdateTaints();
    public void set_AddOrUpdateTaints(List`1<Taint> value);
    internal bool IsSetAddOrUpdateTaints();
    public List`1<Taint> get_RemoveTaints();
    public void set_RemoveTaints(List`1<Taint> value);
    internal bool IsSetRemoveTaints();
}
public class Amazon.EKS.Model.UpgradePolicyRequest : object {
    private SupportType _supportType;
    public SupportType SupportType { get; public set; }
    public SupportType get_SupportType();
    public void set_SupportType(SupportType value);
    internal bool IsSetSupportType();
}
public class Amazon.EKS.Model.UpgradePolicyResponse : object {
    private SupportType _supportType;
    public SupportType SupportType { get; public set; }
    public SupportType get_SupportType();
    public void set_SupportType(SupportType value);
    internal bool IsSetSupportType();
}
public class Amazon.EKS.Model.VpcConfigRequest : object {
    private Nullable`1<bool> _endpointPrivateAccess;
    private Nullable`1<bool> _endpointPublicAccess;
    private List`1<string> _publicAccessCidrs;
    private List`1<string> _securityGroupIds;
    private List`1<string> _subnetIds;
    public Nullable`1<bool> EndpointPrivateAccess { get; public set; }
    public Nullable`1<bool> EndpointPublicAccess { get; public set; }
    public List`1<string> PublicAccessCidrs { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    public List`1<string> SubnetIds { get; public set; }
    public Nullable`1<bool> get_EndpointPrivateAccess();
    public void set_EndpointPrivateAccess(Nullable`1<bool> value);
    internal bool IsSetEndpointPrivateAccess();
    public Nullable`1<bool> get_EndpointPublicAccess();
    public void set_EndpointPublicAccess(Nullable`1<bool> value);
    internal bool IsSetEndpointPublicAccess();
    public List`1<string> get_PublicAccessCidrs();
    public void set_PublicAccessCidrs(List`1<string> value);
    internal bool IsSetPublicAccessCidrs();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public List`1<string> get_SubnetIds();
    public void set_SubnetIds(List`1<string> value);
    internal bool IsSetSubnetIds();
}
public class Amazon.EKS.Model.VpcConfigResponse : object {
    private string _clusterSecurityGroupId;
    private Nullable`1<bool> _endpointPrivateAccess;
    private Nullable`1<bool> _endpointPublicAccess;
    private List`1<string> _publicAccessCidrs;
    private List`1<string> _securityGroupIds;
    private List`1<string> _subnetIds;
    private string _vpcId;
    public string ClusterSecurityGroupId { get; public set; }
    public Nullable`1<bool> EndpointPrivateAccess { get; public set; }
    public Nullable`1<bool> EndpointPublicAccess { get; public set; }
    public List`1<string> PublicAccessCidrs { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    public List`1<string> SubnetIds { get; public set; }
    public string VpcId { get; public set; }
    public string get_ClusterSecurityGroupId();
    public void set_ClusterSecurityGroupId(string value);
    internal bool IsSetClusterSecurityGroupId();
    public Nullable`1<bool> get_EndpointPrivateAccess();
    public void set_EndpointPrivateAccess(Nullable`1<bool> value);
    internal bool IsSetEndpointPrivateAccess();
    public Nullable`1<bool> get_EndpointPublicAccess();
    public void set_EndpointPublicAccess(Nullable`1<bool> value);
    internal bool IsSetEndpointPublicAccess();
    public List`1<string> get_PublicAccessCidrs();
    public void set_PublicAccessCidrs(List`1<string> value);
    internal bool IsSetPublicAccessCidrs();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public List`1<string> get_SubnetIds();
    public void set_SubnetIds(List`1<string> value);
    internal bool IsSetSubnetIds();
    public string get_VpcId();
    public void set_VpcId(string value);
    internal bool IsSetVpcId();
}
public class Amazon.EKS.NodegroupIssueCode : ConstantClass {
    public static NodegroupIssueCode AccessDenied;
    public static NodegroupIssueCode AmiIdNotFound;
    public static NodegroupIssueCode AsgInstanceLaunchFailures;
    public static NodegroupIssueCode AutoScalingGroupInstanceRefreshActive;
    public static NodegroupIssueCode AutoScalingGroupInvalidConfiguration;
    public static NodegroupIssueCode AutoScalingGroupNotFound;
    public static NodegroupIssueCode AutoScalingGroupOptInRequired;
    public static NodegroupIssueCode AutoScalingGroupRateLimitExceeded;
    public static NodegroupIssueCode ClusterUnreachable;
    public static NodegroupIssueCode Ec2LaunchTemplateDeletionFailure;
    public static NodegroupIssueCode Ec2LaunchTemplateInvalidConfiguration;
    public static NodegroupIssueCode Ec2LaunchTemplateMaxLimitExceeded;
    public static NodegroupIssueCode Ec2LaunchTemplateNotFound;
    public static NodegroupIssueCode Ec2LaunchTemplateVersionMaxLimitExceeded;
    public static NodegroupIssueCode Ec2LaunchTemplateVersionMismatch;
    public static NodegroupIssueCode Ec2SecurityGroupDeletionFailure;
    public static NodegroupIssueCode Ec2SecurityGroupNotFound;
    public static NodegroupIssueCode Ec2SubnetInvalidConfiguration;
    public static NodegroupIssueCode Ec2SubnetListTooLong;
    public static NodegroupIssueCode Ec2SubnetMissingIpv6Assignment;
    public static NodegroupIssueCode Ec2SubnetNotFound;
    public static NodegroupIssueCode IamInstanceProfileNotFound;
    public static NodegroupIssueCode IamLimitExceeded;
    public static NodegroupIssueCode IamNodeRoleNotFound;
    public static NodegroupIssueCode IamThrottling;
    public static NodegroupIssueCode InstanceLimitExceeded;
    public static NodegroupIssueCode InsufficientFreeAddresses;
    public static NodegroupIssueCode InternalFailure;
    public static NodegroupIssueCode KubernetesLabelInvalid;
    public static NodegroupIssueCode LimitExceeded;
    public static NodegroupIssueCode NodeCreationFailure;
    public static NodegroupIssueCode NodeTerminationFailure;
    public static NodegroupIssueCode PodEvictionFailure;
    public static NodegroupIssueCode SourceEc2LaunchTemplateNotFound;
    public static NodegroupIssueCode Unknown;
    public NodegroupIssueCode(string value);
    private static NodegroupIssueCode();
    public static NodegroupIssueCode FindValue(string value);
    public static NodegroupIssueCode op_Implicit(string value);
}
public class Amazon.EKS.NodegroupStatus : ConstantClass {
    public static NodegroupStatus ACTIVE;
    public static NodegroupStatus CREATE_FAILED;
    public static NodegroupStatus CREATING;
    public static NodegroupStatus DEGRADED;
    public static NodegroupStatus DELETE_FAILED;
    public static NodegroupStatus DELETING;
    public static NodegroupStatus UPDATING;
    public NodegroupStatus(string value);
    private static NodegroupStatus();
    public static NodegroupStatus FindValue(string value);
    public static NodegroupStatus op_Implicit(string value);
}
public class Amazon.EKS.ResolveConflicts : ConstantClass {
    public static ResolveConflicts NONE;
    public static ResolveConflicts OVERWRITE;
    public static ResolveConflicts PRESERVE;
    public ResolveConflicts(string value);
    private static ResolveConflicts();
    public static ResolveConflicts FindValue(string value);
    public static ResolveConflicts op_Implicit(string value);
}
public class Amazon.EKS.SupportType : ConstantClass {
    public static SupportType EXTENDED;
    public static SupportType STANDARD;
    public SupportType(string value);
    private static SupportType();
    public static SupportType FindValue(string value);
    public static SupportType op_Implicit(string value);
}
public class Amazon.EKS.TaintEffect : ConstantClass {
    public static TaintEffect NO_EXECUTE;
    public static TaintEffect NO_SCHEDULE;
    public static TaintEffect PREFER_NO_SCHEDULE;
    public TaintEffect(string value);
    private static TaintEffect();
    public static TaintEffect FindValue(string value);
    public static TaintEffect op_Implicit(string value);
}
public class Amazon.EKS.UpdateParamType : ConstantClass {
    public static UpdateParamType AddonVersion;
    public static UpdateParamType AuthenticationMode;
    public static UpdateParamType ClusterLogging;
    public static UpdateParamType ConfigurationValues;
    public static UpdateParamType DesiredSize;
    public static UpdateParamType EncryptionConfig;
    public static UpdateParamType EndpointPrivateAccess;
    public static UpdateParamType EndpointPublicAccess;
    public static UpdateParamType IdentityProviderConfig;
    public static UpdateParamType LabelsToAdd;
    public static UpdateParamType LabelsToRemove;
    public static UpdateParamType LaunchTemplateName;
    public static UpdateParamType LaunchTemplateVersion;
    public static UpdateParamType MaxSize;
    public static UpdateParamType MaxUnavailable;
    public static UpdateParamType MaxUnavailablePercentage;
    public static UpdateParamType MinSize;
    public static UpdateParamType PlatformVersion;
    public static UpdateParamType PodIdentityAssociations;
    public static UpdateParamType PublicAccessCidrs;
    public static UpdateParamType ReleaseVersion;
    public static UpdateParamType ResolveConflicts;
    public static UpdateParamType SecurityGroups;
    public static UpdateParamType ServiceAccountRoleArn;
    public static UpdateParamType Subnets;
    public static UpdateParamType TaintsToAdd;
    public static UpdateParamType TaintsToRemove;
    public static UpdateParamType UpgradePolicy;
    public static UpdateParamType Version;
    public UpdateParamType(string value);
    private static UpdateParamType();
    public static UpdateParamType FindValue(string value);
    public static UpdateParamType op_Implicit(string value);
}
public class Amazon.EKS.UpdateStatus : ConstantClass {
    public static UpdateStatus Cancelled;
    public static UpdateStatus Failed;
    public static UpdateStatus InProgress;
    public static UpdateStatus Successful;
    public UpdateStatus(string value);
    private static UpdateStatus();
    public static UpdateStatus FindValue(string value);
    public static UpdateStatus op_Implicit(string value);
}
public class Amazon.EKS.UpdateType : ConstantClass {
    public static UpdateType AccessConfigUpdate;
    public static UpdateType AddonUpdate;
    public static UpdateType AssociateEncryptionConfig;
    public static UpdateType AssociateIdentityProviderConfig;
    public static UpdateType ConfigUpdate;
    public static UpdateType DisassociateIdentityProviderConfig;
    public static UpdateType EndpointAccessUpdate;
    public static UpdateType LoggingUpdate;
    public static UpdateType UpgradePolicyUpdate;
    public static UpdateType VersionUpdate;
    public static UpdateType VpcConfigUpdate;
    public UpdateType(string value);
    private static UpdateType();
    public static UpdateType FindValue(string value);
    public static UpdateType op_Implicit(string value);
}
