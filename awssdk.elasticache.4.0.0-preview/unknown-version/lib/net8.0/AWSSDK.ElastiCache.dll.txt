public class Amazon.ElastiCache.AmazonElastiCacheClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IElastiCachePaginatorFactory _paginators;
    public IElastiCachePaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonElastiCacheClient(RegionEndpoint region);
    public AmazonElastiCacheClient(AmazonElastiCacheConfig config);
    public AmazonElastiCacheClient(AWSCredentials credentials);
    public AmazonElastiCacheClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonElastiCacheClient(AWSCredentials credentials, AmazonElastiCacheConfig clientConfig);
    public AmazonElastiCacheClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonElastiCacheClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonElastiCacheClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonElastiCacheConfig clientConfig);
    public AmazonElastiCacheClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonElastiCacheClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonElastiCacheClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonElastiCacheConfig clientConfig);
    private static AmazonElastiCacheClient();
    public sealed virtual IElastiCachePaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual AddTagsToResourceResponse AddTagsToResource(AddTagsToResourceRequest request);
    public virtual Task`1<AddTagsToResourceResponse> AddTagsToResourceAsync(AddTagsToResourceRequest request, CancellationToken cancellationToken);
    internal virtual AuthorizeCacheSecurityGroupIngressResponse AuthorizeCacheSecurityGroupIngress(AuthorizeCacheSecurityGroupIngressRequest request);
    public virtual Task`1<AuthorizeCacheSecurityGroupIngressResponse> AuthorizeCacheSecurityGroupIngressAsync(AuthorizeCacheSecurityGroupIngressRequest request, CancellationToken cancellationToken);
    internal virtual BatchApplyUpdateActionResponse BatchApplyUpdateAction(BatchApplyUpdateActionRequest request);
    public virtual Task`1<BatchApplyUpdateActionResponse> BatchApplyUpdateActionAsync(BatchApplyUpdateActionRequest request, CancellationToken cancellationToken);
    internal virtual BatchStopUpdateActionResponse BatchStopUpdateAction(BatchStopUpdateActionRequest request);
    public virtual Task`1<BatchStopUpdateActionResponse> BatchStopUpdateActionAsync(BatchStopUpdateActionRequest request, CancellationToken cancellationToken);
    internal virtual CompleteMigrationResponse CompleteMigration(CompleteMigrationRequest request);
    public virtual Task`1<CompleteMigrationResponse> CompleteMigrationAsync(CompleteMigrationRequest request, CancellationToken cancellationToken);
    internal virtual CopyServerlessCacheSnapshotResponse CopyServerlessCacheSnapshot(CopyServerlessCacheSnapshotRequest request);
    public virtual Task`1<CopyServerlessCacheSnapshotResponse> CopyServerlessCacheSnapshotAsync(CopyServerlessCacheSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual CopySnapshotResponse CopySnapshot(CopySnapshotRequest request);
    public virtual Task`1<CopySnapshotResponse> CopySnapshotAsync(CopySnapshotRequest request, CancellationToken cancellationToken);
    internal virtual CreateCacheClusterResponse CreateCacheCluster(CreateCacheClusterRequest request);
    public virtual Task`1<CreateCacheClusterResponse> CreateCacheClusterAsync(CreateCacheClusterRequest request, CancellationToken cancellationToken);
    internal virtual CreateCacheParameterGroupResponse CreateCacheParameterGroup(CreateCacheParameterGroupRequest request);
    public virtual Task`1<CreateCacheParameterGroupResponse> CreateCacheParameterGroupAsync(CreateCacheParameterGroupRequest request, CancellationToken cancellationToken);
    internal virtual CreateCacheSecurityGroupResponse CreateCacheSecurityGroup(CreateCacheSecurityGroupRequest request);
    public virtual Task`1<CreateCacheSecurityGroupResponse> CreateCacheSecurityGroupAsync(CreateCacheSecurityGroupRequest request, CancellationToken cancellationToken);
    internal virtual CreateCacheSubnetGroupResponse CreateCacheSubnetGroup(CreateCacheSubnetGroupRequest request);
    public virtual Task`1<CreateCacheSubnetGroupResponse> CreateCacheSubnetGroupAsync(CreateCacheSubnetGroupRequest request, CancellationToken cancellationToken);
    internal virtual CreateGlobalReplicationGroupResponse CreateGlobalReplicationGroup(CreateGlobalReplicationGroupRequest request);
    public virtual Task`1<CreateGlobalReplicationGroupResponse> CreateGlobalReplicationGroupAsync(CreateGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual CreateReplicationGroupResponse CreateReplicationGroup(CreateReplicationGroupRequest request);
    public virtual Task`1<CreateReplicationGroupResponse> CreateReplicationGroupAsync(CreateReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual CreateServerlessCacheResponse CreateServerlessCache(CreateServerlessCacheRequest request);
    public virtual Task`1<CreateServerlessCacheResponse> CreateServerlessCacheAsync(CreateServerlessCacheRequest request, CancellationToken cancellationToken);
    internal virtual CreateServerlessCacheSnapshotResponse CreateServerlessCacheSnapshot(CreateServerlessCacheSnapshotRequest request);
    public virtual Task`1<CreateServerlessCacheSnapshotResponse> CreateServerlessCacheSnapshotAsync(CreateServerlessCacheSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual CreateSnapshotResponse CreateSnapshot(CreateSnapshotRequest request);
    public virtual Task`1<CreateSnapshotResponse> CreateSnapshotAsync(CreateSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual CreateUserResponse CreateUser(CreateUserRequest request);
    public virtual Task`1<CreateUserResponse> CreateUserAsync(CreateUserRequest request, CancellationToken cancellationToken);
    internal virtual CreateUserGroupResponse CreateUserGroup(CreateUserGroupRequest request);
    public virtual Task`1<CreateUserGroupResponse> CreateUserGroupAsync(CreateUserGroupRequest request, CancellationToken cancellationToken);
    internal virtual DecreaseNodeGroupsInGlobalReplicationGroupResponse DecreaseNodeGroupsInGlobalReplicationGroup(DecreaseNodeGroupsInGlobalReplicationGroupRequest request);
    public virtual Task`1<DecreaseNodeGroupsInGlobalReplicationGroupResponse> DecreaseNodeGroupsInGlobalReplicationGroupAsync(DecreaseNodeGroupsInGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual DecreaseReplicaCountResponse DecreaseReplicaCount(DecreaseReplicaCountRequest request);
    public virtual Task`1<DecreaseReplicaCountResponse> DecreaseReplicaCountAsync(DecreaseReplicaCountRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCacheClusterResponse DeleteCacheCluster(DeleteCacheClusterRequest request);
    public virtual Task`1<DeleteCacheClusterResponse> DeleteCacheClusterAsync(DeleteCacheClusterRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCacheParameterGroupResponse DeleteCacheParameterGroup(DeleteCacheParameterGroupRequest request);
    public virtual Task`1<DeleteCacheParameterGroupResponse> DeleteCacheParameterGroupAsync(DeleteCacheParameterGroupRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCacheSecurityGroupResponse DeleteCacheSecurityGroup(DeleteCacheSecurityGroupRequest request);
    public virtual Task`1<DeleteCacheSecurityGroupResponse> DeleteCacheSecurityGroupAsync(DeleteCacheSecurityGroupRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCacheSubnetGroupResponse DeleteCacheSubnetGroup(DeleteCacheSubnetGroupRequest request);
    public virtual Task`1<DeleteCacheSubnetGroupResponse> DeleteCacheSubnetGroupAsync(DeleteCacheSubnetGroupRequest request, CancellationToken cancellationToken);
    internal virtual DeleteGlobalReplicationGroupResponse DeleteGlobalReplicationGroup(DeleteGlobalReplicationGroupRequest request);
    public virtual Task`1<DeleteGlobalReplicationGroupResponse> DeleteGlobalReplicationGroupAsync(DeleteGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual DeleteReplicationGroupResponse DeleteReplicationGroup(DeleteReplicationGroupRequest request);
    public virtual Task`1<DeleteReplicationGroupResponse> DeleteReplicationGroupAsync(DeleteReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual DeleteServerlessCacheResponse DeleteServerlessCache(DeleteServerlessCacheRequest request);
    public virtual Task`1<DeleteServerlessCacheResponse> DeleteServerlessCacheAsync(DeleteServerlessCacheRequest request, CancellationToken cancellationToken);
    internal virtual DeleteServerlessCacheSnapshotResponse DeleteServerlessCacheSnapshot(DeleteServerlessCacheSnapshotRequest request);
    public virtual Task`1<DeleteServerlessCacheSnapshotResponse> DeleteServerlessCacheSnapshotAsync(DeleteServerlessCacheSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual DeleteSnapshotResponse DeleteSnapshot(DeleteSnapshotRequest request);
    public virtual Task`1<DeleteSnapshotResponse> DeleteSnapshotAsync(DeleteSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual DeleteUserResponse DeleteUser(DeleteUserRequest request);
    public virtual Task`1<DeleteUserResponse> DeleteUserAsync(DeleteUserRequest request, CancellationToken cancellationToken);
    internal virtual DeleteUserGroupResponse DeleteUserGroup(DeleteUserGroupRequest request);
    public virtual Task`1<DeleteUserGroupResponse> DeleteUserGroupAsync(DeleteUserGroupRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCacheClustersResponse DescribeCacheClusters();
    internal virtual DescribeCacheClustersResponse DescribeCacheClusters(DescribeCacheClustersRequest request);
    public virtual Task`1<DescribeCacheClustersResponse> DescribeCacheClustersAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeCacheClustersResponse> DescribeCacheClustersAsync(DescribeCacheClustersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCacheEngineVersionsResponse DescribeCacheEngineVersions();
    internal virtual DescribeCacheEngineVersionsResponse DescribeCacheEngineVersions(DescribeCacheEngineVersionsRequest request);
    public virtual Task`1<DescribeCacheEngineVersionsResponse> DescribeCacheEngineVersionsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeCacheEngineVersionsResponse> DescribeCacheEngineVersionsAsync(DescribeCacheEngineVersionsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCacheParameterGroupsResponse DescribeCacheParameterGroups();
    internal virtual DescribeCacheParameterGroupsResponse DescribeCacheParameterGroups(DescribeCacheParameterGroupsRequest request);
    public virtual Task`1<DescribeCacheParameterGroupsResponse> DescribeCacheParameterGroupsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeCacheParameterGroupsResponse> DescribeCacheParameterGroupsAsync(DescribeCacheParameterGroupsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCacheParametersResponse DescribeCacheParameters(DescribeCacheParametersRequest request);
    public virtual Task`1<DescribeCacheParametersResponse> DescribeCacheParametersAsync(DescribeCacheParametersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCacheSecurityGroupsResponse DescribeCacheSecurityGroups();
    internal virtual DescribeCacheSecurityGroupsResponse DescribeCacheSecurityGroups(DescribeCacheSecurityGroupsRequest request);
    public virtual Task`1<DescribeCacheSecurityGroupsResponse> DescribeCacheSecurityGroupsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeCacheSecurityGroupsResponse> DescribeCacheSecurityGroupsAsync(DescribeCacheSecurityGroupsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups();
    internal virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request);
    public virtual Task`1<DescribeCacheSubnetGroupsResponse> DescribeCacheSubnetGroupsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeCacheSubnetGroupsResponse> DescribeCacheSubnetGroupsAsync(DescribeCacheSubnetGroupsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeEngineDefaultParametersResponse DescribeEngineDefaultParameters(DescribeEngineDefaultParametersRequest request);
    public virtual Task`1<DescribeEngineDefaultParametersResponse> DescribeEngineDefaultParametersAsync(DescribeEngineDefaultParametersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeEventsResponse DescribeEvents();
    internal virtual DescribeEventsResponse DescribeEvents(DescribeEventsRequest request);
    public virtual Task`1<DescribeEventsResponse> DescribeEventsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeEventsResponse> DescribeEventsAsync(DescribeEventsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeGlobalReplicationGroupsResponse DescribeGlobalReplicationGroups(DescribeGlobalReplicationGroupsRequest request);
    public virtual Task`1<DescribeGlobalReplicationGroupsResponse> DescribeGlobalReplicationGroupsAsync(DescribeGlobalReplicationGroupsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeReplicationGroupsResponse DescribeReplicationGroups();
    internal virtual DescribeReplicationGroupsResponse DescribeReplicationGroups(DescribeReplicationGroupsRequest request);
    public virtual Task`1<DescribeReplicationGroupsResponse> DescribeReplicationGroupsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeReplicationGroupsResponse> DescribeReplicationGroupsAsync(DescribeReplicationGroupsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeReservedCacheNodesResponse DescribeReservedCacheNodes();
    internal virtual DescribeReservedCacheNodesResponse DescribeReservedCacheNodes(DescribeReservedCacheNodesRequest request);
    public virtual Task`1<DescribeReservedCacheNodesResponse> DescribeReservedCacheNodesAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeReservedCacheNodesResponse> DescribeReservedCacheNodesAsync(DescribeReservedCacheNodesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings();
    internal virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings(DescribeReservedCacheNodesOfferingsRequest request);
    public virtual Task`1<DescribeReservedCacheNodesOfferingsResponse> DescribeReservedCacheNodesOfferingsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeReservedCacheNodesOfferingsResponse> DescribeReservedCacheNodesOfferingsAsync(DescribeReservedCacheNodesOfferingsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeServerlessCachesResponse DescribeServerlessCaches(DescribeServerlessCachesRequest request);
    public virtual Task`1<DescribeServerlessCachesResponse> DescribeServerlessCachesAsync(DescribeServerlessCachesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeServerlessCacheSnapshotsResponse DescribeServerlessCacheSnapshots(DescribeServerlessCacheSnapshotsRequest request);
    public virtual Task`1<DescribeServerlessCacheSnapshotsResponse> DescribeServerlessCacheSnapshotsAsync(DescribeServerlessCacheSnapshotsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request);
    public virtual Task`1<DescribeServiceUpdatesResponse> DescribeServiceUpdatesAsync(DescribeServiceUpdatesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeSnapshotsResponse DescribeSnapshots();
    internal virtual DescribeSnapshotsResponse DescribeSnapshots(DescribeSnapshotsRequest request);
    public virtual Task`1<DescribeSnapshotsResponse> DescribeSnapshotsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeSnapshotsResponse> DescribeSnapshotsAsync(DescribeSnapshotsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeUpdateActionsResponse DescribeUpdateActions(DescribeUpdateActionsRequest request);
    public virtual Task`1<DescribeUpdateActionsResponse> DescribeUpdateActionsAsync(DescribeUpdateActionsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeUserGroupsResponse DescribeUserGroups(DescribeUserGroupsRequest request);
    public virtual Task`1<DescribeUserGroupsResponse> DescribeUserGroupsAsync(DescribeUserGroupsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeUsersResponse DescribeUsers(DescribeUsersRequest request);
    public virtual Task`1<DescribeUsersResponse> DescribeUsersAsync(DescribeUsersRequest request, CancellationToken cancellationToken);
    internal virtual DisassociateGlobalReplicationGroupResponse DisassociateGlobalReplicationGroup(DisassociateGlobalReplicationGroupRequest request);
    public virtual Task`1<DisassociateGlobalReplicationGroupResponse> DisassociateGlobalReplicationGroupAsync(DisassociateGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual ExportServerlessCacheSnapshotResponse ExportServerlessCacheSnapshot(ExportServerlessCacheSnapshotRequest request);
    public virtual Task`1<ExportServerlessCacheSnapshotResponse> ExportServerlessCacheSnapshotAsync(ExportServerlessCacheSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual FailoverGlobalReplicationGroupResponse FailoverGlobalReplicationGroup(FailoverGlobalReplicationGroupRequest request);
    public virtual Task`1<FailoverGlobalReplicationGroupResponse> FailoverGlobalReplicationGroupAsync(FailoverGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual IncreaseNodeGroupsInGlobalReplicationGroupResponse IncreaseNodeGroupsInGlobalReplicationGroup(IncreaseNodeGroupsInGlobalReplicationGroupRequest request);
    public virtual Task`1<IncreaseNodeGroupsInGlobalReplicationGroupResponse> IncreaseNodeGroupsInGlobalReplicationGroupAsync(IncreaseNodeGroupsInGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual IncreaseReplicaCountResponse IncreaseReplicaCount(IncreaseReplicaCountRequest request);
    public virtual Task`1<IncreaseReplicaCountResponse> IncreaseReplicaCountAsync(IncreaseReplicaCountRequest request, CancellationToken cancellationToken);
    internal virtual ListAllowedNodeTypeModificationsResponse ListAllowedNodeTypeModifications(ListAllowedNodeTypeModificationsRequest request);
    public virtual Task`1<ListAllowedNodeTypeModificationsResponse> ListAllowedNodeTypeModificationsAsync(ListAllowedNodeTypeModificationsRequest request, CancellationToken cancellationToken);
    internal virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    internal virtual ModifyCacheClusterResponse ModifyCacheCluster(ModifyCacheClusterRequest request);
    public virtual Task`1<ModifyCacheClusterResponse> ModifyCacheClusterAsync(ModifyCacheClusterRequest request, CancellationToken cancellationToken);
    internal virtual ModifyCacheParameterGroupResponse ModifyCacheParameterGroup(ModifyCacheParameterGroupRequest request);
    public virtual Task`1<ModifyCacheParameterGroupResponse> ModifyCacheParameterGroupAsync(ModifyCacheParameterGroupRequest request, CancellationToken cancellationToken);
    internal virtual ModifyCacheSubnetGroupResponse ModifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request);
    public virtual Task`1<ModifyCacheSubnetGroupResponse> ModifyCacheSubnetGroupAsync(ModifyCacheSubnetGroupRequest request, CancellationToken cancellationToken);
    internal virtual ModifyGlobalReplicationGroupResponse ModifyGlobalReplicationGroup(ModifyGlobalReplicationGroupRequest request);
    public virtual Task`1<ModifyGlobalReplicationGroupResponse> ModifyGlobalReplicationGroupAsync(ModifyGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual ModifyReplicationGroupResponse ModifyReplicationGroup(ModifyReplicationGroupRequest request);
    public virtual Task`1<ModifyReplicationGroupResponse> ModifyReplicationGroupAsync(ModifyReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual ModifyReplicationGroupShardConfigurationResponse ModifyReplicationGroupShardConfiguration(ModifyReplicationGroupShardConfigurationRequest request);
    public virtual Task`1<ModifyReplicationGroupShardConfigurationResponse> ModifyReplicationGroupShardConfigurationAsync(ModifyReplicationGroupShardConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual ModifyServerlessCacheResponse ModifyServerlessCache(ModifyServerlessCacheRequest request);
    public virtual Task`1<ModifyServerlessCacheResponse> ModifyServerlessCacheAsync(ModifyServerlessCacheRequest request, CancellationToken cancellationToken);
    internal virtual ModifyUserResponse ModifyUser(ModifyUserRequest request);
    public virtual Task`1<ModifyUserResponse> ModifyUserAsync(ModifyUserRequest request, CancellationToken cancellationToken);
    internal virtual ModifyUserGroupResponse ModifyUserGroup(ModifyUserGroupRequest request);
    public virtual Task`1<ModifyUserGroupResponse> ModifyUserGroupAsync(ModifyUserGroupRequest request, CancellationToken cancellationToken);
    internal virtual PurchaseReservedCacheNodesOfferingResponse PurchaseReservedCacheNodesOffering(PurchaseReservedCacheNodesOfferingRequest request);
    public virtual Task`1<PurchaseReservedCacheNodesOfferingResponse> PurchaseReservedCacheNodesOfferingAsync(PurchaseReservedCacheNodesOfferingRequest request, CancellationToken cancellationToken);
    internal virtual RebalanceSlotsInGlobalReplicationGroupResponse RebalanceSlotsInGlobalReplicationGroup(RebalanceSlotsInGlobalReplicationGroupRequest request);
    public virtual Task`1<RebalanceSlotsInGlobalReplicationGroupResponse> RebalanceSlotsInGlobalReplicationGroupAsync(RebalanceSlotsInGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    internal virtual RebootCacheClusterResponse RebootCacheCluster(RebootCacheClusterRequest request);
    public virtual Task`1<RebootCacheClusterResponse> RebootCacheClusterAsync(RebootCacheClusterRequest request, CancellationToken cancellationToken);
    internal virtual RemoveTagsFromResourceResponse RemoveTagsFromResource(RemoveTagsFromResourceRequest request);
    public virtual Task`1<RemoveTagsFromResourceResponse> RemoveTagsFromResourceAsync(RemoveTagsFromResourceRequest request, CancellationToken cancellationToken);
    internal virtual ResetCacheParameterGroupResponse ResetCacheParameterGroup(ResetCacheParameterGroupRequest request);
    public virtual Task`1<ResetCacheParameterGroupResponse> ResetCacheParameterGroupAsync(ResetCacheParameterGroupRequest request, CancellationToken cancellationToken);
    internal virtual RevokeCacheSecurityGroupIngressResponse RevokeCacheSecurityGroupIngress(RevokeCacheSecurityGroupIngressRequest request);
    public virtual Task`1<RevokeCacheSecurityGroupIngressResponse> RevokeCacheSecurityGroupIngressAsync(RevokeCacheSecurityGroupIngressRequest request, CancellationToken cancellationToken);
    internal virtual StartMigrationResponse StartMigration(StartMigrationRequest request);
    public virtual Task`1<StartMigrationResponse> StartMigrationAsync(StartMigrationRequest request, CancellationToken cancellationToken);
    internal virtual TestFailoverResponse TestFailover(TestFailoverRequest request);
    public virtual Task`1<TestFailoverResponse> TestFailoverAsync(TestFailoverRequest request, CancellationToken cancellationToken);
    internal virtual TestMigrationResponse TestMigration(TestMigrationRequest request);
    public virtual Task`1<TestMigrationResponse> TestMigrationAsync(TestMigrationRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.ElastiCache.AmazonElastiCacheConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonElastiCacheEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonElastiCacheConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.ElastiCache.AmazonElastiCacheDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonElastiCacheDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.ElastiCache.AmazonElastiCacheException : AmazonServiceException {
    public AmazonElastiCacheException(string message);
    public AmazonElastiCacheException(string message, Exception innerException);
    public AmazonElastiCacheException(Exception innerException);
    public AmazonElastiCacheException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonElastiCacheException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.AmazonElastiCacheRequest : AmazonWebServiceRequest {
}
public class Amazon.ElastiCache.AuthenticationType : ConstantClass {
    public static AuthenticationType Iam;
    public static AuthenticationType NoPassword;
    public static AuthenticationType Password;
    public AuthenticationType(string value);
    private static AuthenticationType();
    public static AuthenticationType FindValue(string value);
    public static AuthenticationType op_Implicit(string value);
}
public class Amazon.ElastiCache.AuthTokenUpdateStatus : ConstantClass {
    public static AuthTokenUpdateStatus ROTATING;
    public static AuthTokenUpdateStatus SETTING;
    public AuthTokenUpdateStatus(string value);
    private static AuthTokenUpdateStatus();
    public static AuthTokenUpdateStatus FindValue(string value);
    public static AuthTokenUpdateStatus op_Implicit(string value);
}
public class Amazon.ElastiCache.AuthTokenUpdateStrategyType : ConstantClass {
    public static AuthTokenUpdateStrategyType DELETE;
    public static AuthTokenUpdateStrategyType ROTATE;
    public static AuthTokenUpdateStrategyType SET;
    public AuthTokenUpdateStrategyType(string value);
    private static AuthTokenUpdateStrategyType();
    public static AuthTokenUpdateStrategyType FindValue(string value);
    public static AuthTokenUpdateStrategyType op_Implicit(string value);
}
public class Amazon.ElastiCache.AutomaticFailoverStatus : ConstantClass {
    public static AutomaticFailoverStatus Disabled;
    public static AutomaticFailoverStatus Disabling;
    public static AutomaticFailoverStatus Enabled;
    public static AutomaticFailoverStatus Enabling;
    public AutomaticFailoverStatus(string value);
    private static AutomaticFailoverStatus();
    public static AutomaticFailoverStatus FindValue(string value);
    public static AutomaticFailoverStatus op_Implicit(string value);
}
public class Amazon.ElastiCache.AZMode : ConstantClass {
    public static AZMode CrossAz;
    public static AZMode SingleAz;
    public AZMode(string value);
    private static AZMode();
    public static AZMode FindValue(string value);
    public static AZMode op_Implicit(string value);
}
public class Amazon.ElastiCache.ChangeType : ConstantClass {
    public static ChangeType Immediate;
    public static ChangeType RequiresReboot;
    public ChangeType(string value);
    private static ChangeType();
    public static ChangeType FindValue(string value);
    public static ChangeType op_Implicit(string value);
}
public class Amazon.ElastiCache.ClusterMode : ConstantClass {
    public static ClusterMode Compatible;
    public static ClusterMode Disabled;
    public static ClusterMode Enabled;
    public ClusterMode(string value);
    private static ClusterMode();
    public static ClusterMode FindValue(string value);
    public static ClusterMode op_Implicit(string value);
}
public class Amazon.ElastiCache.DataStorageUnit : ConstantClass {
    public static DataStorageUnit GB;
    public DataStorageUnit(string value);
    private static DataStorageUnit();
    public static DataStorageUnit FindValue(string value);
    public static DataStorageUnit op_Implicit(string value);
}
public class Amazon.ElastiCache.DataTieringStatus : ConstantClass {
    public static DataTieringStatus Disabled;
    public static DataTieringStatus Enabled;
    public DataTieringStatus(string value);
    private static DataTieringStatus();
    public static DataTieringStatus FindValue(string value);
    public static DataTieringStatus op_Implicit(string value);
}
public class Amazon.ElastiCache.DestinationType : ConstantClass {
    public static DestinationType CloudwatchLogs;
    public static DestinationType KinesisFirehose;
    public DestinationType(string value);
    private static DestinationType();
    public static DestinationType FindValue(string value);
    public static DestinationType op_Implicit(string value);
}
public class Amazon.ElastiCache.Endpoints.ElastiCacheEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public interface Amazon.ElastiCache.IAmazonElastiCache {
    public IElastiCachePaginatorFactory Paginators { get; }
    public abstract virtual IElastiCachePaginatorFactory get_Paginators();
    public abstract virtual Task`1<AddTagsToResourceResponse> AddTagsToResourceAsync(AddTagsToResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthorizeCacheSecurityGroupIngressResponse> AuthorizeCacheSecurityGroupIngressAsync(AuthorizeCacheSecurityGroupIngressRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<BatchApplyUpdateActionResponse> BatchApplyUpdateActionAsync(BatchApplyUpdateActionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<BatchStopUpdateActionResponse> BatchStopUpdateActionAsync(BatchStopUpdateActionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CompleteMigrationResponse> CompleteMigrationAsync(CompleteMigrationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CopyServerlessCacheSnapshotResponse> CopyServerlessCacheSnapshotAsync(CopyServerlessCacheSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CopySnapshotResponse> CopySnapshotAsync(CopySnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateCacheClusterResponse> CreateCacheClusterAsync(CreateCacheClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateCacheParameterGroupResponse> CreateCacheParameterGroupAsync(CreateCacheParameterGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateCacheSecurityGroupResponse> CreateCacheSecurityGroupAsync(CreateCacheSecurityGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateCacheSubnetGroupResponse> CreateCacheSubnetGroupAsync(CreateCacheSubnetGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateGlobalReplicationGroupResponse> CreateGlobalReplicationGroupAsync(CreateGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateReplicationGroupResponse> CreateReplicationGroupAsync(CreateReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateServerlessCacheResponse> CreateServerlessCacheAsync(CreateServerlessCacheRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateServerlessCacheSnapshotResponse> CreateServerlessCacheSnapshotAsync(CreateServerlessCacheSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateSnapshotResponse> CreateSnapshotAsync(CreateSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateUserResponse> CreateUserAsync(CreateUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateUserGroupResponse> CreateUserGroupAsync(CreateUserGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DecreaseNodeGroupsInGlobalReplicationGroupResponse> DecreaseNodeGroupsInGlobalReplicationGroupAsync(DecreaseNodeGroupsInGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DecreaseReplicaCountResponse> DecreaseReplicaCountAsync(DecreaseReplicaCountRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCacheClusterResponse> DeleteCacheClusterAsync(DeleteCacheClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCacheParameterGroupResponse> DeleteCacheParameterGroupAsync(DeleteCacheParameterGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCacheSecurityGroupResponse> DeleteCacheSecurityGroupAsync(DeleteCacheSecurityGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCacheSubnetGroupResponse> DeleteCacheSubnetGroupAsync(DeleteCacheSubnetGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteGlobalReplicationGroupResponse> DeleteGlobalReplicationGroupAsync(DeleteGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteReplicationGroupResponse> DeleteReplicationGroupAsync(DeleteReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteServerlessCacheResponse> DeleteServerlessCacheAsync(DeleteServerlessCacheRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteServerlessCacheSnapshotResponse> DeleteServerlessCacheSnapshotAsync(DeleteServerlessCacheSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteSnapshotResponse> DeleteSnapshotAsync(DeleteSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteUserResponse> DeleteUserAsync(DeleteUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteUserGroupResponse> DeleteUserGroupAsync(DeleteUserGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheClustersResponse> DescribeCacheClustersAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheClustersResponse> DescribeCacheClustersAsync(DescribeCacheClustersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheEngineVersionsResponse> DescribeCacheEngineVersionsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheEngineVersionsResponse> DescribeCacheEngineVersionsAsync(DescribeCacheEngineVersionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheParameterGroupsResponse> DescribeCacheParameterGroupsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheParameterGroupsResponse> DescribeCacheParameterGroupsAsync(DescribeCacheParameterGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheParametersResponse> DescribeCacheParametersAsync(DescribeCacheParametersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheSecurityGroupsResponse> DescribeCacheSecurityGroupsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheSecurityGroupsResponse> DescribeCacheSecurityGroupsAsync(DescribeCacheSecurityGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheSubnetGroupsResponse> DescribeCacheSubnetGroupsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCacheSubnetGroupsResponse> DescribeCacheSubnetGroupsAsync(DescribeCacheSubnetGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEngineDefaultParametersResponse> DescribeEngineDefaultParametersAsync(DescribeEngineDefaultParametersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEventsResponse> DescribeEventsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEventsResponse> DescribeEventsAsync(DescribeEventsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeGlobalReplicationGroupsResponse> DescribeGlobalReplicationGroupsAsync(DescribeGlobalReplicationGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReplicationGroupsResponse> DescribeReplicationGroupsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReplicationGroupsResponse> DescribeReplicationGroupsAsync(DescribeReplicationGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReservedCacheNodesResponse> DescribeReservedCacheNodesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReservedCacheNodesResponse> DescribeReservedCacheNodesAsync(DescribeReservedCacheNodesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReservedCacheNodesOfferingsResponse> DescribeReservedCacheNodesOfferingsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReservedCacheNodesOfferingsResponse> DescribeReservedCacheNodesOfferingsAsync(DescribeReservedCacheNodesOfferingsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeServerlessCachesResponse> DescribeServerlessCachesAsync(DescribeServerlessCachesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeServerlessCacheSnapshotsResponse> DescribeServerlessCacheSnapshotsAsync(DescribeServerlessCacheSnapshotsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeServiceUpdatesResponse> DescribeServiceUpdatesAsync(DescribeServiceUpdatesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeSnapshotsResponse> DescribeSnapshotsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeSnapshotsResponse> DescribeSnapshotsAsync(DescribeSnapshotsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeUpdateActionsResponse> DescribeUpdateActionsAsync(DescribeUpdateActionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeUserGroupsResponse> DescribeUserGroupsAsync(DescribeUserGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeUsersResponse> DescribeUsersAsync(DescribeUsersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisassociateGlobalReplicationGroupResponse> DisassociateGlobalReplicationGroupAsync(DisassociateGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ExportServerlessCacheSnapshotResponse> ExportServerlessCacheSnapshotAsync(ExportServerlessCacheSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<FailoverGlobalReplicationGroupResponse> FailoverGlobalReplicationGroupAsync(FailoverGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IncreaseNodeGroupsInGlobalReplicationGroupResponse> IncreaseNodeGroupsInGlobalReplicationGroupAsync(IncreaseNodeGroupsInGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IncreaseReplicaCountResponse> IncreaseReplicaCountAsync(IncreaseReplicaCountRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAllowedNodeTypeModificationsResponse> ListAllowedNodeTypeModificationsAsync(ListAllowedNodeTypeModificationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyCacheClusterResponse> ModifyCacheClusterAsync(ModifyCacheClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyCacheParameterGroupResponse> ModifyCacheParameterGroupAsync(ModifyCacheParameterGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyCacheSubnetGroupResponse> ModifyCacheSubnetGroupAsync(ModifyCacheSubnetGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyGlobalReplicationGroupResponse> ModifyGlobalReplicationGroupAsync(ModifyGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyReplicationGroupResponse> ModifyReplicationGroupAsync(ModifyReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyReplicationGroupShardConfigurationResponse> ModifyReplicationGroupShardConfigurationAsync(ModifyReplicationGroupShardConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyServerlessCacheResponse> ModifyServerlessCacheAsync(ModifyServerlessCacheRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyUserResponse> ModifyUserAsync(ModifyUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyUserGroupResponse> ModifyUserGroupAsync(ModifyUserGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PurchaseReservedCacheNodesOfferingResponse> PurchaseReservedCacheNodesOfferingAsync(PurchaseReservedCacheNodesOfferingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RebalanceSlotsInGlobalReplicationGroupResponse> RebalanceSlotsInGlobalReplicationGroupAsync(RebalanceSlotsInGlobalReplicationGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RebootCacheClusterResponse> RebootCacheClusterAsync(RebootCacheClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RemoveTagsFromResourceResponse> RemoveTagsFromResourceAsync(RemoveTagsFromResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResetCacheParameterGroupResponse> ResetCacheParameterGroupAsync(ResetCacheParameterGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RevokeCacheSecurityGroupIngressResponse> RevokeCacheSecurityGroupIngressAsync(RevokeCacheSecurityGroupIngressRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<StartMigrationResponse> StartMigrationAsync(StartMigrationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TestFailoverResponse> TestFailoverAsync(TestFailoverRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TestMigrationResponse> TestMigrationAsync(TestMigrationRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    [DynamicDependencyAttribute("512", "Amazon.ElastiCache.AmazonElastiCacheConfig")]
private static override ClientConfig Amazon.Runtime.IAmazonService.CreateDefaultClientConfig();
    [UnconditionalSuppressMessageAttribute("AssemblyLoadTrimming", "IL2026:RequiresUnreferencedCode")]
private static override IAmazonService Amazon.Runtime.IAmazonService.CreateDefaultServiceClient(AWSCredentials awsCredentials, ClientConfig clientConfig);
}
public class Amazon.ElastiCache.InputAuthenticationType : ConstantClass {
    public static InputAuthenticationType Iam;
    public static InputAuthenticationType NoPasswordRequired;
    public static InputAuthenticationType Password;
    public InputAuthenticationType(string value);
    private static InputAuthenticationType();
    public static InputAuthenticationType FindValue(string value);
    public static InputAuthenticationType op_Implicit(string value);
}
public class Amazon.ElastiCache.Internal.AmazonElastiCacheEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.ElastiCache.Internal.AmazonElastiCacheEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.ElastiCache.Internal.AmazonElastiCacheMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.ElastiCache.IpDiscovery : ConstantClass {
    public static IpDiscovery Ipv4;
    public static IpDiscovery Ipv6;
    public IpDiscovery(string value);
    private static IpDiscovery();
    public static IpDiscovery FindValue(string value);
    public static IpDiscovery op_Implicit(string value);
}
public class Amazon.ElastiCache.LogDeliveryConfigurationStatus : ConstantClass {
    public static LogDeliveryConfigurationStatus Active;
    public static LogDeliveryConfigurationStatus Disabling;
    public static LogDeliveryConfigurationStatus Enabling;
    public static LogDeliveryConfigurationStatus Error;
    public static LogDeliveryConfigurationStatus Modifying;
    public LogDeliveryConfigurationStatus(string value);
    private static LogDeliveryConfigurationStatus();
    public static LogDeliveryConfigurationStatus FindValue(string value);
    public static LogDeliveryConfigurationStatus op_Implicit(string value);
}
public class Amazon.ElastiCache.LogFormat : ConstantClass {
    public static LogFormat Json;
    public static LogFormat Text;
    public LogFormat(string value);
    private static LogFormat();
    public static LogFormat FindValue(string value);
    public static LogFormat op_Implicit(string value);
}
public class Amazon.ElastiCache.LogType : ConstantClass {
    public static LogType EngineLog;
    public static LogType SlowLog;
    public LogType(string value);
    private static LogType();
    public static LogType FindValue(string value);
    public static LogType op_Implicit(string value);
}
public class Amazon.ElastiCache.Model.AddTagsToResourceRequest : AmazonElastiCacheRequest {
    private string _resourceName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ResourceName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_ResourceName();
    public void set_ResourceName(string value);
    internal bool IsSetResourceName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElastiCache.Model.AddTagsToResourceResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tagList;
    public List`1<Tag> TagList { get; public set; }
    public List`1<Tag> get_TagList();
    public void set_TagList(List`1<Tag> value);
    internal bool IsSetTagList();
}
public class Amazon.ElastiCache.Model.APICallRateForCustomerExceededException : AmazonElastiCacheException {
    public APICallRateForCustomerExceededException(string message);
    public APICallRateForCustomerExceededException(string message, Exception innerException);
    public APICallRateForCustomerExceededException(Exception innerException);
    public APICallRateForCustomerExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public APICallRateForCustomerExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.Authentication : object {
    private Nullable`1<int> _passwordCount;
    private AuthenticationType _type;
    public Nullable`1<int> PasswordCount { get; public set; }
    public AuthenticationType Type { get; public set; }
    public Nullable`1<int> get_PasswordCount();
    public void set_PasswordCount(Nullable`1<int> value);
    internal bool IsSetPasswordCount();
    public AuthenticationType get_Type();
    public void set_Type(AuthenticationType value);
    internal bool IsSetType();
}
public class Amazon.ElastiCache.Model.AuthenticationMode : object {
    private List`1<string> _passwords;
    private InputAuthenticationType _type;
    [AWSPropertyAttribute]
public List`1<string> Passwords { get; public set; }
    public InputAuthenticationType Type { get; public set; }
    public List`1<string> get_Passwords();
    public void set_Passwords(List`1<string> value);
    internal bool IsSetPasswords();
    public InputAuthenticationType get_Type();
    public void set_Type(InputAuthenticationType value);
    internal bool IsSetType();
}
public class Amazon.ElastiCache.Model.AuthorizationAlreadyExistsException : AmazonElastiCacheException {
    public AuthorizationAlreadyExistsException(string message);
    public AuthorizationAlreadyExistsException(string message, Exception innerException);
    public AuthorizationAlreadyExistsException(Exception innerException);
    public AuthorizationAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AuthorizationAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.AuthorizationNotFoundException : AmazonElastiCacheException {
    public AuthorizationNotFoundException(string message);
    public AuthorizationNotFoundException(string message, Exception innerException);
    public AuthorizationNotFoundException(Exception innerException);
    public AuthorizationNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AuthorizationNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.AuthorizeCacheSecurityGroupIngressRequest : AmazonElastiCacheRequest {
    private string _cacheSecurityGroupName;
    private string _ec2SecurityGroupName;
    private string _ec2SecurityGroupOwnerId;
    [AWSPropertyAttribute]
public string CacheSecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string EC2SecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string EC2SecurityGroupOwnerId { get; public set; }
    public string get_CacheSecurityGroupName();
    public void set_CacheSecurityGroupName(string value);
    internal bool IsSetCacheSecurityGroupName();
    public string get_EC2SecurityGroupName();
    public void set_EC2SecurityGroupName(string value);
    internal bool IsSetEC2SecurityGroupName();
    public string get_EC2SecurityGroupOwnerId();
    public void set_EC2SecurityGroupOwnerId(string value);
    internal bool IsSetEC2SecurityGroupOwnerId();
}
public class Amazon.ElastiCache.Model.AuthorizeCacheSecurityGroupIngressResponse : AmazonWebServiceResponse {
    private CacheSecurityGroup _cacheSecurityGroup;
    public CacheSecurityGroup CacheSecurityGroup { get; public set; }
    public CacheSecurityGroup get_CacheSecurityGroup();
    public void set_CacheSecurityGroup(CacheSecurityGroup value);
    internal bool IsSetCacheSecurityGroup();
}
public class Amazon.ElastiCache.Model.AvailabilityZone : object {
    private string _name;
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.ElastiCache.Model.BatchApplyUpdateActionRequest : AmazonElastiCacheRequest {
    private List`1<string> _cacheClusterIds;
    private List`1<string> _replicationGroupIds;
    private string _serviceUpdateName;
    [AWSPropertyAttribute]
public List`1<string> CacheClusterIds { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ReplicationGroupIds { get; public set; }
    [AWSPropertyAttribute]
public string ServiceUpdateName { get; public set; }
    public List`1<string> get_CacheClusterIds();
    public void set_CacheClusterIds(List`1<string> value);
    internal bool IsSetCacheClusterIds();
    public List`1<string> get_ReplicationGroupIds();
    public void set_ReplicationGroupIds(List`1<string> value);
    internal bool IsSetReplicationGroupIds();
    public string get_ServiceUpdateName();
    public void set_ServiceUpdateName(string value);
    internal bool IsSetServiceUpdateName();
}
public class Amazon.ElastiCache.Model.BatchApplyUpdateActionResponse : AmazonWebServiceResponse {
    private List`1<ProcessedUpdateAction> _processedUpdateActions;
    private List`1<UnprocessedUpdateAction> _unprocessedUpdateActions;
    public List`1<ProcessedUpdateAction> ProcessedUpdateActions { get; public set; }
    public List`1<UnprocessedUpdateAction> UnprocessedUpdateActions { get; public set; }
    public List`1<ProcessedUpdateAction> get_ProcessedUpdateActions();
    public void set_ProcessedUpdateActions(List`1<ProcessedUpdateAction> value);
    internal bool IsSetProcessedUpdateActions();
    public List`1<UnprocessedUpdateAction> get_UnprocessedUpdateActions();
    public void set_UnprocessedUpdateActions(List`1<UnprocessedUpdateAction> value);
    internal bool IsSetUnprocessedUpdateActions();
}
public class Amazon.ElastiCache.Model.BatchStopUpdateActionRequest : AmazonElastiCacheRequest {
    private List`1<string> _cacheClusterIds;
    private List`1<string> _replicationGroupIds;
    private string _serviceUpdateName;
    [AWSPropertyAttribute]
public List`1<string> CacheClusterIds { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ReplicationGroupIds { get; public set; }
    [AWSPropertyAttribute]
public string ServiceUpdateName { get; public set; }
    public List`1<string> get_CacheClusterIds();
    public void set_CacheClusterIds(List`1<string> value);
    internal bool IsSetCacheClusterIds();
    public List`1<string> get_ReplicationGroupIds();
    public void set_ReplicationGroupIds(List`1<string> value);
    internal bool IsSetReplicationGroupIds();
    public string get_ServiceUpdateName();
    public void set_ServiceUpdateName(string value);
    internal bool IsSetServiceUpdateName();
}
public class Amazon.ElastiCache.Model.BatchStopUpdateActionResponse : AmazonWebServiceResponse {
    private List`1<ProcessedUpdateAction> _processedUpdateActions;
    private List`1<UnprocessedUpdateAction> _unprocessedUpdateActions;
    public List`1<ProcessedUpdateAction> ProcessedUpdateActions { get; public set; }
    public List`1<UnprocessedUpdateAction> UnprocessedUpdateActions { get; public set; }
    public List`1<ProcessedUpdateAction> get_ProcessedUpdateActions();
    public void set_ProcessedUpdateActions(List`1<ProcessedUpdateAction> value);
    internal bool IsSetProcessedUpdateActions();
    public List`1<UnprocessedUpdateAction> get_UnprocessedUpdateActions();
    public void set_UnprocessedUpdateActions(List`1<UnprocessedUpdateAction> value);
    internal bool IsSetUnprocessedUpdateActions();
}
public class Amazon.ElastiCache.Model.CacheCluster : object {
    private string _arn;
    private Nullable`1<bool> _atRestEncryptionEnabled;
    private Nullable`1<bool> _authTokenEnabled;
    private Nullable`1<DateTime> _authTokenLastModifiedDate;
    private Nullable`1<bool> _autoMinorVersionUpgrade;
    private Nullable`1<DateTime> _cacheClusterCreateTime;
    private string _cacheClusterId;
    private string _cacheClusterStatus;
    private List`1<CacheNode> _cacheNodes;
    private string _cacheNodeType;
    private CacheParameterGroupStatus _cacheParameterGroup;
    private List`1<CacheSecurityGroupMembership> _cacheSecurityGroups;
    private string _cacheSubnetGroupName;
    private string _clientDownloadLandingPage;
    private Endpoint _configurationEndpoint;
    private string _engine;
    private string _engineVersion;
    private IpDiscovery _ipDiscovery;
    private List`1<LogDeliveryConfiguration> _logDeliveryConfigurations;
    private NetworkType _networkType;
    private NotificationConfiguration _notificationConfiguration;
    private Nullable`1<int> _numCacheNodes;
    private PendingModifiedValues _pendingModifiedValues;
    private string _preferredAvailabilityZone;
    private string _preferredMaintenanceWindow;
    private string _preferredOutpostArn;
    private string _replicationGroupId;
    private Nullable`1<bool> _replicationGroupLogDeliveryEnabled;
    private List`1<SecurityGroupMembership> _securityGroups;
    private Nullable`1<int> _snapshotRetentionLimit;
    private string _snapshotWindow;
    private Nullable`1<bool> _transitEncryptionEnabled;
    private TransitEncryptionMode _transitEncryptionMode;
    public string ARN { get; public set; }
    public Nullable`1<bool> AtRestEncryptionEnabled { get; public set; }
    public Nullable`1<bool> AuthTokenEnabled { get; public set; }
    public Nullable`1<DateTime> AuthTokenLastModifiedDate { get; public set; }
    public Nullable`1<bool> AutoMinorVersionUpgrade { get; public set; }
    public Nullable`1<DateTime> CacheClusterCreateTime { get; public set; }
    public string CacheClusterId { get; public set; }
    public string CacheClusterStatus { get; public set; }
    public List`1<CacheNode> CacheNodes { get; public set; }
    public string CacheNodeType { get; public set; }
    public CacheParameterGroupStatus CacheParameterGroup { get; public set; }
    public List`1<CacheSecurityGroupMembership> CacheSecurityGroups { get; public set; }
    public string CacheSubnetGroupName { get; public set; }
    public string ClientDownloadLandingPage { get; public set; }
    public Endpoint ConfigurationEndpoint { get; public set; }
    public string Engine { get; public set; }
    public string EngineVersion { get; public set; }
    public IpDiscovery IpDiscovery { get; public set; }
    public List`1<LogDeliveryConfiguration> LogDeliveryConfigurations { get; public set; }
    public NetworkType NetworkType { get; public set; }
    public NotificationConfiguration NotificationConfiguration { get; public set; }
    public Nullable`1<int> NumCacheNodes { get; public set; }
    public PendingModifiedValues PendingModifiedValues { get; public set; }
    public string PreferredAvailabilityZone { get; public set; }
    public string PreferredMaintenanceWindow { get; public set; }
    public string PreferredOutpostArn { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public Nullable`1<bool> ReplicationGroupLogDeliveryEnabled { get; public set; }
    public List`1<SecurityGroupMembership> SecurityGroups { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public string SnapshotWindow { get; public set; }
    public Nullable`1<bool> TransitEncryptionEnabled { get; public set; }
    public TransitEncryptionMode TransitEncryptionMode { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public Nullable`1<bool> get_AtRestEncryptionEnabled();
    public void set_AtRestEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetAtRestEncryptionEnabled();
    public Nullable`1<bool> get_AuthTokenEnabled();
    public void set_AuthTokenEnabled(Nullable`1<bool> value);
    internal bool IsSetAuthTokenEnabled();
    public Nullable`1<DateTime> get_AuthTokenLastModifiedDate();
    public void set_AuthTokenLastModifiedDate(Nullable`1<DateTime> value);
    internal bool IsSetAuthTokenLastModifiedDate();
    public Nullable`1<bool> get_AutoMinorVersionUpgrade();
    public void set_AutoMinorVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAutoMinorVersionUpgrade();
    public Nullable`1<DateTime> get_CacheClusterCreateTime();
    public void set_CacheClusterCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetCacheClusterCreateTime();
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_CacheClusterStatus();
    public void set_CacheClusterStatus(string value);
    internal bool IsSetCacheClusterStatus();
    public List`1<CacheNode> get_CacheNodes();
    public void set_CacheNodes(List`1<CacheNode> value);
    internal bool IsSetCacheNodes();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public CacheParameterGroupStatus get_CacheParameterGroup();
    public void set_CacheParameterGroup(CacheParameterGroupStatus value);
    internal bool IsSetCacheParameterGroup();
    public List`1<CacheSecurityGroupMembership> get_CacheSecurityGroups();
    public void set_CacheSecurityGroups(List`1<CacheSecurityGroupMembership> value);
    internal bool IsSetCacheSecurityGroups();
    public string get_CacheSubnetGroupName();
    public void set_CacheSubnetGroupName(string value);
    internal bool IsSetCacheSubnetGroupName();
    public string get_ClientDownloadLandingPage();
    public void set_ClientDownloadLandingPage(string value);
    internal bool IsSetClientDownloadLandingPage();
    public Endpoint get_ConfigurationEndpoint();
    public void set_ConfigurationEndpoint(Endpoint value);
    internal bool IsSetConfigurationEndpoint();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public IpDiscovery get_IpDiscovery();
    public void set_IpDiscovery(IpDiscovery value);
    internal bool IsSetIpDiscovery();
    public List`1<LogDeliveryConfiguration> get_LogDeliveryConfigurations();
    public void set_LogDeliveryConfigurations(List`1<LogDeliveryConfiguration> value);
    internal bool IsSetLogDeliveryConfigurations();
    public NetworkType get_NetworkType();
    public void set_NetworkType(NetworkType value);
    internal bool IsSetNetworkType();
    public NotificationConfiguration get_NotificationConfiguration();
    public void set_NotificationConfiguration(NotificationConfiguration value);
    internal bool IsSetNotificationConfiguration();
    public Nullable`1<int> get_NumCacheNodes();
    public void set_NumCacheNodes(Nullable`1<int> value);
    internal bool IsSetNumCacheNodes();
    public PendingModifiedValues get_PendingModifiedValues();
    public void set_PendingModifiedValues(PendingModifiedValues value);
    internal bool IsSetPendingModifiedValues();
    public string get_PreferredAvailabilityZone();
    public void set_PreferredAvailabilityZone(string value);
    internal bool IsSetPreferredAvailabilityZone();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public string get_PreferredOutpostArn();
    public void set_PreferredOutpostArn(string value);
    internal bool IsSetPreferredOutpostArn();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public Nullable`1<bool> get_ReplicationGroupLogDeliveryEnabled();
    public void set_ReplicationGroupLogDeliveryEnabled(Nullable`1<bool> value);
    internal bool IsSetReplicationGroupLogDeliveryEnabled();
    public List`1<SecurityGroupMembership> get_SecurityGroups();
    public void set_SecurityGroups(List`1<SecurityGroupMembership> value);
    internal bool IsSetSecurityGroups();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public string get_SnapshotWindow();
    public void set_SnapshotWindow(string value);
    internal bool IsSetSnapshotWindow();
    public Nullable`1<bool> get_TransitEncryptionEnabled();
    public void set_TransitEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetTransitEncryptionEnabled();
    public TransitEncryptionMode get_TransitEncryptionMode();
    public void set_TransitEncryptionMode(TransitEncryptionMode value);
    internal bool IsSetTransitEncryptionMode();
}
public class Amazon.ElastiCache.Model.CacheClusterAlreadyExistsException : AmazonElastiCacheException {
    public CacheClusterAlreadyExistsException(string message);
    public CacheClusterAlreadyExistsException(string message, Exception innerException);
    public CacheClusterAlreadyExistsException(Exception innerException);
    public CacheClusterAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheClusterAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheClusterNotFoundException : AmazonElastiCacheException {
    public CacheClusterNotFoundException(string message);
    public CacheClusterNotFoundException(string message, Exception innerException);
    public CacheClusterNotFoundException(Exception innerException);
    public CacheClusterNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheClusterNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheEngineVersion : object {
    private string _cacheEngineDescription;
    private string _cacheEngineVersionDescription;
    private string _cacheParameterGroupFamily;
    private string _engine;
    private string _engineVersion;
    public string CacheEngineDescription { get; public set; }
    public string CacheEngineVersionDescription { get; public set; }
    public string CacheParameterGroupFamily { get; public set; }
    public string Engine { get; public set; }
    public string EngineVersion { get; public set; }
    public string get_CacheEngineDescription();
    public void set_CacheEngineDescription(string value);
    internal bool IsSetCacheEngineDescription();
    public string get_CacheEngineVersionDescription();
    public void set_CacheEngineVersionDescription(string value);
    internal bool IsSetCacheEngineVersionDescription();
    public string get_CacheParameterGroupFamily();
    public void set_CacheParameterGroupFamily(string value);
    internal bool IsSetCacheParameterGroupFamily();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
}
public class Amazon.ElastiCache.Model.CacheNode : object {
    private Nullable`1<DateTime> _cacheNodeCreateTime;
    private string _cacheNodeId;
    private string _cacheNodeStatus;
    private string _customerAvailabilityZone;
    private string _customerOutpostArn;
    private Endpoint _endpoint;
    private string _parameterGroupStatus;
    private string _sourceCacheNodeId;
    public Nullable`1<DateTime> CacheNodeCreateTime { get; public set; }
    public string CacheNodeId { get; public set; }
    public string CacheNodeStatus { get; public set; }
    public string CustomerAvailabilityZone { get; public set; }
    public string CustomerOutpostArn { get; public set; }
    public Endpoint Endpoint { get; public set; }
    public string ParameterGroupStatus { get; public set; }
    public string SourceCacheNodeId { get; public set; }
    public Nullable`1<DateTime> get_CacheNodeCreateTime();
    public void set_CacheNodeCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetCacheNodeCreateTime();
    public string get_CacheNodeId();
    public void set_CacheNodeId(string value);
    internal bool IsSetCacheNodeId();
    public string get_CacheNodeStatus();
    public void set_CacheNodeStatus(string value);
    internal bool IsSetCacheNodeStatus();
    public string get_CustomerAvailabilityZone();
    public void set_CustomerAvailabilityZone(string value);
    internal bool IsSetCustomerAvailabilityZone();
    public string get_CustomerOutpostArn();
    public void set_CustomerOutpostArn(string value);
    internal bool IsSetCustomerOutpostArn();
    public Endpoint get_Endpoint();
    public void set_Endpoint(Endpoint value);
    internal bool IsSetEndpoint();
    public string get_ParameterGroupStatus();
    public void set_ParameterGroupStatus(string value);
    internal bool IsSetParameterGroupStatus();
    public string get_SourceCacheNodeId();
    public void set_SourceCacheNodeId(string value);
    internal bool IsSetSourceCacheNodeId();
}
public class Amazon.ElastiCache.Model.CacheNodeTypeSpecificParameter : object {
    private string _allowedValues;
    private List`1<CacheNodeTypeSpecificValue> _cacheNodeTypeSpecificValues;
    private ChangeType _changeType;
    private string _dataType;
    private string _description;
    private Nullable`1<bool> _isModifiable;
    private string _minimumEngineVersion;
    private string _parameterName;
    private string _source;
    public string AllowedValues { get; public set; }
    public List`1<CacheNodeTypeSpecificValue> CacheNodeTypeSpecificValues { get; public set; }
    public ChangeType ChangeType { get; public set; }
    public string DataType { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> IsModifiable { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public string ParameterName { get; public set; }
    public string Source { get; public set; }
    public string get_AllowedValues();
    public void set_AllowedValues(string value);
    internal bool IsSetAllowedValues();
    public List`1<CacheNodeTypeSpecificValue> get_CacheNodeTypeSpecificValues();
    public void set_CacheNodeTypeSpecificValues(List`1<CacheNodeTypeSpecificValue> value);
    internal bool IsSetCacheNodeTypeSpecificValues();
    public ChangeType get_ChangeType();
    public void set_ChangeType(ChangeType value);
    internal bool IsSetChangeType();
    public string get_DataType();
    public void set_DataType(string value);
    internal bool IsSetDataType();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<bool> get_IsModifiable();
    public void set_IsModifiable(Nullable`1<bool> value);
    internal bool IsSetIsModifiable();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public string get_ParameterName();
    public void set_ParameterName(string value);
    internal bool IsSetParameterName();
    public string get_Source();
    public void set_Source(string value);
    internal bool IsSetSource();
}
public class Amazon.ElastiCache.Model.CacheNodeTypeSpecificValue : object {
    private string _cacheNodeType;
    private string _value;
    public string CacheNodeType { get; public set; }
    public string Value { get; public set; }
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ElastiCache.Model.CacheNodeUpdateStatus : object {
    private string _cacheNodeId;
    private Nullable`1<DateTime> _nodeDeletionDate;
    private Nullable`1<DateTime> _nodeUpdateEndDate;
    private NodeUpdateInitiatedBy _nodeUpdateInitiatedBy;
    private Nullable`1<DateTime> _nodeUpdateInitiatedDate;
    private Nullable`1<DateTime> _nodeUpdateStartDate;
    private NodeUpdateStatus _nodeUpdateStatus;
    private Nullable`1<DateTime> _nodeUpdateStatusModifiedDate;
    public string CacheNodeId { get; public set; }
    public Nullable`1<DateTime> NodeDeletionDate { get; public set; }
    public Nullable`1<DateTime> NodeUpdateEndDate { get; public set; }
    public NodeUpdateInitiatedBy NodeUpdateInitiatedBy { get; public set; }
    public Nullable`1<DateTime> NodeUpdateInitiatedDate { get; public set; }
    public Nullable`1<DateTime> NodeUpdateStartDate { get; public set; }
    public NodeUpdateStatus NodeUpdateStatus { get; public set; }
    public Nullable`1<DateTime> NodeUpdateStatusModifiedDate { get; public set; }
    public string get_CacheNodeId();
    public void set_CacheNodeId(string value);
    internal bool IsSetCacheNodeId();
    public Nullable`1<DateTime> get_NodeDeletionDate();
    public void set_NodeDeletionDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeDeletionDate();
    public Nullable`1<DateTime> get_NodeUpdateEndDate();
    public void set_NodeUpdateEndDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeUpdateEndDate();
    public NodeUpdateInitiatedBy get_NodeUpdateInitiatedBy();
    public void set_NodeUpdateInitiatedBy(NodeUpdateInitiatedBy value);
    internal bool IsSetNodeUpdateInitiatedBy();
    public Nullable`1<DateTime> get_NodeUpdateInitiatedDate();
    public void set_NodeUpdateInitiatedDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeUpdateInitiatedDate();
    public Nullable`1<DateTime> get_NodeUpdateStartDate();
    public void set_NodeUpdateStartDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeUpdateStartDate();
    public NodeUpdateStatus get_NodeUpdateStatus();
    public void set_NodeUpdateStatus(NodeUpdateStatus value);
    internal bool IsSetNodeUpdateStatus();
    public Nullable`1<DateTime> get_NodeUpdateStatusModifiedDate();
    public void set_NodeUpdateStatusModifiedDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeUpdateStatusModifiedDate();
}
public class Amazon.ElastiCache.Model.CacheParameterGroup : object {
    private string _arn;
    private string _cacheParameterGroupFamily;
    private string _cacheParameterGroupName;
    private string _description;
    private Nullable`1<bool> _isGlobal;
    public string ARN { get; public set; }
    public string CacheParameterGroupFamily { get; public set; }
    public string CacheParameterGroupName { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> IsGlobal { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public string get_CacheParameterGroupFamily();
    public void set_CacheParameterGroupFamily(string value);
    internal bool IsSetCacheParameterGroupFamily();
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<bool> get_IsGlobal();
    public void set_IsGlobal(Nullable`1<bool> value);
    internal bool IsSetIsGlobal();
}
public class Amazon.ElastiCache.Model.CacheParameterGroupAlreadyExistsException : AmazonElastiCacheException {
    public CacheParameterGroupAlreadyExistsException(string message);
    public CacheParameterGroupAlreadyExistsException(string message, Exception innerException);
    public CacheParameterGroupAlreadyExistsException(Exception innerException);
    public CacheParameterGroupAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheParameterGroupAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheParameterGroupNotFoundException : AmazonElastiCacheException {
    public CacheParameterGroupNotFoundException(string message);
    public CacheParameterGroupNotFoundException(string message, Exception innerException);
    public CacheParameterGroupNotFoundException(Exception innerException);
    public CacheParameterGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheParameterGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheParameterGroupQuotaExceededException : AmazonElastiCacheException {
    public CacheParameterGroupQuotaExceededException(string message);
    public CacheParameterGroupQuotaExceededException(string message, Exception innerException);
    public CacheParameterGroupQuotaExceededException(Exception innerException);
    public CacheParameterGroupQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheParameterGroupQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheParameterGroupStatus : object {
    private List`1<string> _cacheNodeIdsToReboot;
    private string _cacheParameterGroupName;
    private string _parameterApplyStatus;
    public List`1<string> CacheNodeIdsToReboot { get; public set; }
    public string CacheParameterGroupName { get; public set; }
    public string ParameterApplyStatus { get; public set; }
    public List`1<string> get_CacheNodeIdsToReboot();
    public void set_CacheNodeIdsToReboot(List`1<string> value);
    internal bool IsSetCacheNodeIdsToReboot();
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public string get_ParameterApplyStatus();
    public void set_ParameterApplyStatus(string value);
    internal bool IsSetParameterApplyStatus();
}
public class Amazon.ElastiCache.Model.CacheSecurityGroup : object {
    private string _arn;
    private string _cacheSecurityGroupName;
    private string _description;
    private List`1<EC2SecurityGroup> _ec2SecurityGroups;
    private string _ownerId;
    public string ARN { get; public set; }
    public string CacheSecurityGroupName { get; public set; }
    public string Description { get; public set; }
    public List`1<EC2SecurityGroup> EC2SecurityGroups { get; public set; }
    public string OwnerId { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public string get_CacheSecurityGroupName();
    public void set_CacheSecurityGroupName(string value);
    internal bool IsSetCacheSecurityGroupName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<EC2SecurityGroup> get_EC2SecurityGroups();
    public void set_EC2SecurityGroups(List`1<EC2SecurityGroup> value);
    internal bool IsSetEC2SecurityGroups();
    public string get_OwnerId();
    public void set_OwnerId(string value);
    internal bool IsSetOwnerId();
}
public class Amazon.ElastiCache.Model.CacheSecurityGroupAlreadyExistsException : AmazonElastiCacheException {
    public CacheSecurityGroupAlreadyExistsException(string message);
    public CacheSecurityGroupAlreadyExistsException(string message, Exception innerException);
    public CacheSecurityGroupAlreadyExistsException(Exception innerException);
    public CacheSecurityGroupAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheSecurityGroupAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheSecurityGroupMembership : object {
    private string _cacheSecurityGroupName;
    private string _status;
    public string CacheSecurityGroupName { get; public set; }
    public string Status { get; public set; }
    public string get_CacheSecurityGroupName();
    public void set_CacheSecurityGroupName(string value);
    internal bool IsSetCacheSecurityGroupName();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.ElastiCache.Model.CacheSecurityGroupNotFoundException : AmazonElastiCacheException {
    public CacheSecurityGroupNotFoundException(string message);
    public CacheSecurityGroupNotFoundException(string message, Exception innerException);
    public CacheSecurityGroupNotFoundException(Exception innerException);
    public CacheSecurityGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheSecurityGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheSecurityGroupQuotaExceededException : AmazonElastiCacheException {
    public CacheSecurityGroupQuotaExceededException(string message);
    public CacheSecurityGroupQuotaExceededException(string message, Exception innerException);
    public CacheSecurityGroupQuotaExceededException(Exception innerException);
    public CacheSecurityGroupQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheSecurityGroupQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheSubnetGroup : object {
    private string _arn;
    private string _cacheSubnetGroupDescription;
    private string _cacheSubnetGroupName;
    private List`1<Subnet> _subnets;
    private List`1<string> _supportedNetworkTypes;
    private string _vpcId;
    public string ARN { get; public set; }
    public string CacheSubnetGroupDescription { get; public set; }
    public string CacheSubnetGroupName { get; public set; }
    public List`1<Subnet> Subnets { get; public set; }
    public List`1<string> SupportedNetworkTypes { get; public set; }
    public string VpcId { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public string get_CacheSubnetGroupDescription();
    public void set_CacheSubnetGroupDescription(string value);
    internal bool IsSetCacheSubnetGroupDescription();
    public string get_CacheSubnetGroupName();
    public void set_CacheSubnetGroupName(string value);
    internal bool IsSetCacheSubnetGroupName();
    public List`1<Subnet> get_Subnets();
    public void set_Subnets(List`1<Subnet> value);
    internal bool IsSetSubnets();
    public List`1<string> get_SupportedNetworkTypes();
    public void set_SupportedNetworkTypes(List`1<string> value);
    internal bool IsSetSupportedNetworkTypes();
    public string get_VpcId();
    public void set_VpcId(string value);
    internal bool IsSetVpcId();
}
public class Amazon.ElastiCache.Model.CacheSubnetGroupAlreadyExistsException : AmazonElastiCacheException {
    public CacheSubnetGroupAlreadyExistsException(string message);
    public CacheSubnetGroupAlreadyExistsException(string message, Exception innerException);
    public CacheSubnetGroupAlreadyExistsException(Exception innerException);
    public CacheSubnetGroupAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheSubnetGroupAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheSubnetGroupInUseException : AmazonElastiCacheException {
    public CacheSubnetGroupInUseException(string message);
    public CacheSubnetGroupInUseException(string message, Exception innerException);
    public CacheSubnetGroupInUseException(Exception innerException);
    public CacheSubnetGroupInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheSubnetGroupInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheSubnetGroupNotFoundException : AmazonElastiCacheException {
    public CacheSubnetGroupNotFoundException(string message);
    public CacheSubnetGroupNotFoundException(string message, Exception innerException);
    public CacheSubnetGroupNotFoundException(Exception innerException);
    public CacheSubnetGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheSubnetGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheSubnetGroupQuotaExceededException : AmazonElastiCacheException {
    public CacheSubnetGroupQuotaExceededException(string message);
    public CacheSubnetGroupQuotaExceededException(string message, Exception innerException);
    public CacheSubnetGroupQuotaExceededException(Exception innerException);
    public CacheSubnetGroupQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheSubnetGroupQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheSubnetQuotaExceededException : AmazonElastiCacheException {
    public CacheSubnetQuotaExceededException(string message);
    public CacheSubnetQuotaExceededException(string message, Exception innerException);
    public CacheSubnetQuotaExceededException(Exception innerException);
    public CacheSubnetQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CacheSubnetQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CacheUsageLimits : object {
    private DataStorage _dataStorage;
    private ECPUPerSecond _ecpuPerSecond;
    public DataStorage DataStorage { get; public set; }
    public ECPUPerSecond ECPUPerSecond { get; public set; }
    public DataStorage get_DataStorage();
    public void set_DataStorage(DataStorage value);
    internal bool IsSetDataStorage();
    public ECPUPerSecond get_ECPUPerSecond();
    public void set_ECPUPerSecond(ECPUPerSecond value);
    internal bool IsSetECPUPerSecond();
}
public class Amazon.ElastiCache.Model.CloudWatchLogsDestinationDetails : object {
    private string _logGroup;
    public string LogGroup { get; public set; }
    public string get_LogGroup();
    public void set_LogGroup(string value);
    internal bool IsSetLogGroup();
}
public class Amazon.ElastiCache.Model.ClusterQuotaForCustomerExceededException : AmazonElastiCacheException {
    public ClusterQuotaForCustomerExceededException(string message);
    public ClusterQuotaForCustomerExceededException(string message, Exception innerException);
    public ClusterQuotaForCustomerExceededException(Exception innerException);
    public ClusterQuotaForCustomerExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterQuotaForCustomerExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.CompleteMigrationRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _force;
    private string _replicationGroupId;
    public Nullable`1<bool> Force { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
}
public class Amazon.ElastiCache.Model.CompleteMigrationResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.ConfigureShard : object {
    private Nullable`1<int> _newReplicaCount;
    private string _nodeGroupId;
    private List`1<string> _preferredAvailabilityZones;
    private List`1<string> _preferredOutpostArns;
    [AWSPropertyAttribute]
public Nullable`1<int> NewReplicaCount { get; public set; }
    [AWSPropertyAttribute]
public string NodeGroupId { get; public set; }
    public List`1<string> PreferredAvailabilityZones { get; public set; }
    public List`1<string> PreferredOutpostArns { get; public set; }
    public Nullable`1<int> get_NewReplicaCount();
    public void set_NewReplicaCount(Nullable`1<int> value);
    internal bool IsSetNewReplicaCount();
    public string get_NodeGroupId();
    public void set_NodeGroupId(string value);
    internal bool IsSetNodeGroupId();
    public List`1<string> get_PreferredAvailabilityZones();
    public void set_PreferredAvailabilityZones(List`1<string> value);
    internal bool IsSetPreferredAvailabilityZones();
    public List`1<string> get_PreferredOutpostArns();
    public void set_PreferredOutpostArns(List`1<string> value);
    internal bool IsSetPreferredOutpostArns();
}
public class Amazon.ElastiCache.Model.CopyServerlessCacheSnapshotRequest : AmazonElastiCacheRequest {
    private string _kmsKeyId;
    private string _sourceServerlessCacheSnapshotName;
    private List`1<Tag> _tags;
    private string _targetServerlessCacheSnapshotName;
    public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string SourceServerlessCacheSnapshotName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string TargetServerlessCacheSnapshotName { get; public set; }
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_SourceServerlessCacheSnapshotName();
    public void set_SourceServerlessCacheSnapshotName(string value);
    internal bool IsSetSourceServerlessCacheSnapshotName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TargetServerlessCacheSnapshotName();
    public void set_TargetServerlessCacheSnapshotName(string value);
    internal bool IsSetTargetServerlessCacheSnapshotName();
}
public class Amazon.ElastiCache.Model.CopyServerlessCacheSnapshotResponse : AmazonWebServiceResponse {
    private ServerlessCacheSnapshot _serverlessCacheSnapshot;
    public ServerlessCacheSnapshot ServerlessCacheSnapshot { get; public set; }
    public ServerlessCacheSnapshot get_ServerlessCacheSnapshot();
    public void set_ServerlessCacheSnapshot(ServerlessCacheSnapshot value);
    internal bool IsSetServerlessCacheSnapshot();
}
public class Amazon.ElastiCache.Model.CopySnapshotRequest : AmazonElastiCacheRequest {
    private string _kmsKeyId;
    private string _sourceSnapshotName;
    private List`1<Tag> _tags;
    private string _targetBucket;
    private string _targetSnapshotName;
    public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string SourceSnapshotName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string TargetBucket { get; public set; }
    [AWSPropertyAttribute]
public string TargetSnapshotName { get; public set; }
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_SourceSnapshotName();
    public void set_SourceSnapshotName(string value);
    internal bool IsSetSourceSnapshotName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TargetBucket();
    public void set_TargetBucket(string value);
    internal bool IsSetTargetBucket();
    public string get_TargetSnapshotName();
    public void set_TargetSnapshotName(string value);
    internal bool IsSetTargetSnapshotName();
}
public class Amazon.ElastiCache.Model.CopySnapshotResponse : AmazonWebServiceResponse {
    private Snapshot _snapshot;
    public Snapshot Snapshot { get; public set; }
    public Snapshot get_Snapshot();
    public void set_Snapshot(Snapshot value);
    internal bool IsSetSnapshot();
}
public class Amazon.ElastiCache.Model.CreateCacheClusterRequest : AmazonElastiCacheRequest {
    private string _authToken;
    private Nullable`1<bool> _autoMinorVersionUpgrade;
    private AZMode _azMode;
    private string _cacheClusterId;
    private string _cacheNodeType;
    private string _cacheParameterGroupName;
    private List`1<string> _cacheSecurityGroupNames;
    private string _cacheSubnetGroupName;
    private string _engine;
    private string _engineVersion;
    private IpDiscovery _ipDiscovery;
    private List`1<LogDeliveryConfigurationRequest> _logDeliveryConfigurations;
    private NetworkType _networkType;
    private string _notificationTopicArn;
    private Nullable`1<int> _numCacheNodes;
    private OutpostMode _outpostMode;
    private Nullable`1<int> _port;
    private string _preferredAvailabilityZone;
    private List`1<string> _preferredAvailabilityZones;
    private string _preferredMaintenanceWindow;
    private string _preferredOutpostArn;
    private List`1<string> _preferredOutpostArns;
    private string _replicationGroupId;
    private List`1<string> _securityGroupIds;
    private List`1<string> _snapshotArns;
    private string _snapshotName;
    private Nullable`1<int> _snapshotRetentionLimit;
    private string _snapshotWindow;
    private List`1<Tag> _tags;
    private Nullable`1<bool> _transitEncryptionEnabled;
    public string AuthToken { get; public set; }
    public Nullable`1<bool> AutoMinorVersionUpgrade { get; public set; }
    public AZMode AZMode { get; public set; }
    [AWSPropertyAttribute]
public string CacheClusterId { get; public set; }
    public string CacheNodeType { get; public set; }
    public string CacheParameterGroupName { get; public set; }
    public List`1<string> CacheSecurityGroupNames { get; public set; }
    public string CacheSubnetGroupName { get; public set; }
    public string Engine { get; public set; }
    public string EngineVersion { get; public set; }
    public IpDiscovery IpDiscovery { get; public set; }
    public List`1<LogDeliveryConfigurationRequest> LogDeliveryConfigurations { get; public set; }
    public NetworkType NetworkType { get; public set; }
    public string NotificationTopicArn { get; public set; }
    public Nullable`1<int> NumCacheNodes { get; public set; }
    public OutpostMode OutpostMode { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public string PreferredAvailabilityZone { get; public set; }
    public List`1<string> PreferredAvailabilityZones { get; public set; }
    public string PreferredMaintenanceWindow { get; public set; }
    public string PreferredOutpostArn { get; public set; }
    public List`1<string> PreferredOutpostArns { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    public List`1<string> SnapshotArns { get; public set; }
    public string SnapshotName { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public string SnapshotWindow { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> TransitEncryptionEnabled { get; public set; }
    public CreateCacheClusterRequest(string cacheClusterId, Nullable`1<int> numCacheNodes, string cacheNodeType, string engine, List`1<string> cacheSecurityGroupNames);
    public string get_AuthToken();
    public void set_AuthToken(string value);
    internal bool IsSetAuthToken();
    public Nullable`1<bool> get_AutoMinorVersionUpgrade();
    public void set_AutoMinorVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAutoMinorVersionUpgrade();
    public AZMode get_AZMode();
    public void set_AZMode(AZMode value);
    internal bool IsSetAZMode();
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public List`1<string> get_CacheSecurityGroupNames();
    public void set_CacheSecurityGroupNames(List`1<string> value);
    internal bool IsSetCacheSecurityGroupNames();
    public string get_CacheSubnetGroupName();
    public void set_CacheSubnetGroupName(string value);
    internal bool IsSetCacheSubnetGroupName();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public IpDiscovery get_IpDiscovery();
    public void set_IpDiscovery(IpDiscovery value);
    internal bool IsSetIpDiscovery();
    public List`1<LogDeliveryConfigurationRequest> get_LogDeliveryConfigurations();
    public void set_LogDeliveryConfigurations(List`1<LogDeliveryConfigurationRequest> value);
    internal bool IsSetLogDeliveryConfigurations();
    public NetworkType get_NetworkType();
    public void set_NetworkType(NetworkType value);
    internal bool IsSetNetworkType();
    public string get_NotificationTopicArn();
    public void set_NotificationTopicArn(string value);
    internal bool IsSetNotificationTopicArn();
    public Nullable`1<int> get_NumCacheNodes();
    public void set_NumCacheNodes(Nullable`1<int> value);
    internal bool IsSetNumCacheNodes();
    public OutpostMode get_OutpostMode();
    public void set_OutpostMode(OutpostMode value);
    internal bool IsSetOutpostMode();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_PreferredAvailabilityZone();
    public void set_PreferredAvailabilityZone(string value);
    internal bool IsSetPreferredAvailabilityZone();
    public List`1<string> get_PreferredAvailabilityZones();
    public void set_PreferredAvailabilityZones(List`1<string> value);
    internal bool IsSetPreferredAvailabilityZones();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public string get_PreferredOutpostArn();
    public void set_PreferredOutpostArn(string value);
    internal bool IsSetPreferredOutpostArn();
    public List`1<string> get_PreferredOutpostArns();
    public void set_PreferredOutpostArns(List`1<string> value);
    internal bool IsSetPreferredOutpostArns();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public List`1<string> get_SnapshotArns();
    public void set_SnapshotArns(List`1<string> value);
    internal bool IsSetSnapshotArns();
    public string get_SnapshotName();
    public void set_SnapshotName(string value);
    internal bool IsSetSnapshotName();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public string get_SnapshotWindow();
    public void set_SnapshotWindow(string value);
    internal bool IsSetSnapshotWindow();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<bool> get_TransitEncryptionEnabled();
    public void set_TransitEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetTransitEncryptionEnabled();
}
public class Amazon.ElastiCache.Model.CreateCacheClusterResponse : AmazonWebServiceResponse {
    private CacheCluster _cacheCluster;
    public CacheCluster CacheCluster { get; public set; }
    public CacheCluster get_CacheCluster();
    public void set_CacheCluster(CacheCluster value);
    internal bool IsSetCacheCluster();
}
public class Amazon.ElastiCache.Model.CreateCacheParameterGroupRequest : AmazonElastiCacheRequest {
    private string _cacheParameterGroupFamily;
    private string _cacheParameterGroupName;
    private string _description;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string CacheParameterGroupFamily { get; public set; }
    [AWSPropertyAttribute]
public string CacheParameterGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public CreateCacheParameterGroupRequest(string cacheParameterGroupName, string cacheParameterGroupFamily, string description);
    public string get_CacheParameterGroupFamily();
    public void set_CacheParameterGroupFamily(string value);
    internal bool IsSetCacheParameterGroupFamily();
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElastiCache.Model.CreateCacheParameterGroupResponse : AmazonWebServiceResponse {
    private CacheParameterGroup _cacheParameterGroup;
    public CacheParameterGroup CacheParameterGroup { get; public set; }
    public CacheParameterGroup get_CacheParameterGroup();
    public void set_CacheParameterGroup(CacheParameterGroup value);
    internal bool IsSetCacheParameterGroup();
}
public class Amazon.ElastiCache.Model.CreateCacheSecurityGroupRequest : AmazonElastiCacheRequest {
    private string _cacheSecurityGroupName;
    private string _description;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string CacheSecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public CreateCacheSecurityGroupRequest(string cacheSecurityGroupName, string description);
    public string get_CacheSecurityGroupName();
    public void set_CacheSecurityGroupName(string value);
    internal bool IsSetCacheSecurityGroupName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElastiCache.Model.CreateCacheSecurityGroupResponse : AmazonWebServiceResponse {
    private CacheSecurityGroup _cacheSecurityGroup;
    public CacheSecurityGroup CacheSecurityGroup { get; public set; }
    public CacheSecurityGroup get_CacheSecurityGroup();
    public void set_CacheSecurityGroup(CacheSecurityGroup value);
    internal bool IsSetCacheSecurityGroup();
}
public class Amazon.ElastiCache.Model.CreateCacheSubnetGroupRequest : AmazonElastiCacheRequest {
    private string _cacheSubnetGroupDescription;
    private string _cacheSubnetGroupName;
    private List`1<string> _subnetIds;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string CacheSubnetGroupDescription { get; public set; }
    [AWSPropertyAttribute]
public string CacheSubnetGroupName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SubnetIds { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_CacheSubnetGroupDescription();
    public void set_CacheSubnetGroupDescription(string value);
    internal bool IsSetCacheSubnetGroupDescription();
    public string get_CacheSubnetGroupName();
    public void set_CacheSubnetGroupName(string value);
    internal bool IsSetCacheSubnetGroupName();
    public List`1<string> get_SubnetIds();
    public void set_SubnetIds(List`1<string> value);
    internal bool IsSetSubnetIds();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElastiCache.Model.CreateCacheSubnetGroupResponse : AmazonWebServiceResponse {
    private CacheSubnetGroup _cacheSubnetGroup;
    public CacheSubnetGroup CacheSubnetGroup { get; public set; }
    public CacheSubnetGroup get_CacheSubnetGroup();
    public void set_CacheSubnetGroup(CacheSubnetGroup value);
    internal bool IsSetCacheSubnetGroup();
}
public class Amazon.ElastiCache.Model.CreateGlobalReplicationGroupRequest : AmazonElastiCacheRequest {
    private string _globalReplicationGroupDescription;
    private string _globalReplicationGroupIdSuffix;
    private string _primaryReplicationGroupId;
    public string GlobalReplicationGroupDescription { get; public set; }
    [AWSPropertyAttribute]
public string GlobalReplicationGroupIdSuffix { get; public set; }
    [AWSPropertyAttribute]
public string PrimaryReplicationGroupId { get; public set; }
    public string get_GlobalReplicationGroupDescription();
    public void set_GlobalReplicationGroupDescription(string value);
    internal bool IsSetGlobalReplicationGroupDescription();
    public string get_GlobalReplicationGroupIdSuffix();
    public void set_GlobalReplicationGroupIdSuffix(string value);
    internal bool IsSetGlobalReplicationGroupIdSuffix();
    public string get_PrimaryReplicationGroupId();
    public void set_PrimaryReplicationGroupId(string value);
    internal bool IsSetPrimaryReplicationGroupId();
}
public class Amazon.ElastiCache.Model.CreateGlobalReplicationGroupResponse : AmazonWebServiceResponse {
    private GlobalReplicationGroup _globalReplicationGroup;
    public GlobalReplicationGroup GlobalReplicationGroup { get; public set; }
    public GlobalReplicationGroup get_GlobalReplicationGroup();
    public void set_GlobalReplicationGroup(GlobalReplicationGroup value);
    internal bool IsSetGlobalReplicationGroup();
}
public class Amazon.ElastiCache.Model.CreateReplicationGroupRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _atRestEncryptionEnabled;
    private string _authToken;
    private Nullable`1<bool> _automaticFailoverEnabled;
    private Nullable`1<bool> _autoMinorVersionUpgrade;
    private string _cacheNodeType;
    private string _cacheParameterGroupName;
    private List`1<string> _cacheSecurityGroupNames;
    private string _cacheSubnetGroupName;
    private ClusterMode _clusterMode;
    private Nullable`1<bool> _dataTieringEnabled;
    private string _engine;
    private string _engineVersion;
    private string _globalReplicationGroupId;
    private IpDiscovery _ipDiscovery;
    private string _kmsKeyId;
    private List`1<LogDeliveryConfigurationRequest> _logDeliveryConfigurations;
    private Nullable`1<bool> _multiAZEnabled;
    private NetworkType _networkType;
    private List`1<NodeGroupConfiguration> _nodeGroupConfiguration;
    private string _notificationTopicArn;
    private Nullable`1<int> _numCacheClusters;
    private Nullable`1<int> _numNodeGroups;
    private Nullable`1<int> _port;
    private List`1<string> _preferredCacheClusterAZs;
    private string _preferredMaintenanceWindow;
    private string _primaryClusterId;
    private Nullable`1<int> _replicasPerNodeGroup;
    private string _replicationGroupDescription;
    private string _replicationGroupId;
    private List`1<string> _securityGroupIds;
    private string _serverlessCacheSnapshotName;
    private List`1<string> _snapshotArns;
    private string _snapshotName;
    private Nullable`1<int> _snapshotRetentionLimit;
    private string _snapshotWindow;
    private List`1<Tag> _tags;
    private Nullable`1<bool> _transitEncryptionEnabled;
    private TransitEncryptionMode _transitEncryptionMode;
    private List`1<string> _userGroupIds;
    public Nullable`1<bool> AtRestEncryptionEnabled { get; public set; }
    public string AuthToken { get; public set; }
    public Nullable`1<bool> AutomaticFailoverEnabled { get; public set; }
    public Nullable`1<bool> AutoMinorVersionUpgrade { get; public set; }
    public string CacheNodeType { get; public set; }
    public string CacheParameterGroupName { get; public set; }
    public List`1<string> CacheSecurityGroupNames { get; public set; }
    public string CacheSubnetGroupName { get; public set; }
    public ClusterMode ClusterMode { get; public set; }
    public Nullable`1<bool> DataTieringEnabled { get; public set; }
    public string Engine { get; public set; }
    public string EngineVersion { get; public set; }
    public string GlobalReplicationGroupId { get; public set; }
    public IpDiscovery IpDiscovery { get; public set; }
    public string KmsKeyId { get; public set; }
    public List`1<LogDeliveryConfigurationRequest> LogDeliveryConfigurations { get; public set; }
    public Nullable`1<bool> MultiAZEnabled { get; public set; }
    public NetworkType NetworkType { get; public set; }
    public List`1<NodeGroupConfiguration> NodeGroupConfiguration { get; public set; }
    public string NotificationTopicArn { get; public set; }
    public Nullable`1<int> NumCacheClusters { get; public set; }
    public Nullable`1<int> NumNodeGroups { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public List`1<string> PreferredCacheClusterAZs { get; public set; }
    public string PreferredMaintenanceWindow { get; public set; }
    public string PrimaryClusterId { get; public set; }
    public Nullable`1<int> ReplicasPerNodeGroup { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupDescription { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    public string ServerlessCacheSnapshotName { get; public set; }
    public List`1<string> SnapshotArns { get; public set; }
    public string SnapshotName { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public string SnapshotWindow { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> TransitEncryptionEnabled { get; public set; }
    public TransitEncryptionMode TransitEncryptionMode { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> UserGroupIds { get; public set; }
    public Nullable`1<bool> get_AtRestEncryptionEnabled();
    public void set_AtRestEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetAtRestEncryptionEnabled();
    public string get_AuthToken();
    public void set_AuthToken(string value);
    internal bool IsSetAuthToken();
    public Nullable`1<bool> get_AutomaticFailoverEnabled();
    public void set_AutomaticFailoverEnabled(Nullable`1<bool> value);
    internal bool IsSetAutomaticFailoverEnabled();
    public Nullable`1<bool> get_AutoMinorVersionUpgrade();
    public void set_AutoMinorVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAutoMinorVersionUpgrade();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public List`1<string> get_CacheSecurityGroupNames();
    public void set_CacheSecurityGroupNames(List`1<string> value);
    internal bool IsSetCacheSecurityGroupNames();
    public string get_CacheSubnetGroupName();
    public void set_CacheSubnetGroupName(string value);
    internal bool IsSetCacheSubnetGroupName();
    public ClusterMode get_ClusterMode();
    public void set_ClusterMode(ClusterMode value);
    internal bool IsSetClusterMode();
    public Nullable`1<bool> get_DataTieringEnabled();
    public void set_DataTieringEnabled(Nullable`1<bool> value);
    internal bool IsSetDataTieringEnabled();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
    public IpDiscovery get_IpDiscovery();
    public void set_IpDiscovery(IpDiscovery value);
    internal bool IsSetIpDiscovery();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public List`1<LogDeliveryConfigurationRequest> get_LogDeliveryConfigurations();
    public void set_LogDeliveryConfigurations(List`1<LogDeliveryConfigurationRequest> value);
    internal bool IsSetLogDeliveryConfigurations();
    public Nullable`1<bool> get_MultiAZEnabled();
    public void set_MultiAZEnabled(Nullable`1<bool> value);
    internal bool IsSetMultiAZEnabled();
    public NetworkType get_NetworkType();
    public void set_NetworkType(NetworkType value);
    internal bool IsSetNetworkType();
    public List`1<NodeGroupConfiguration> get_NodeGroupConfiguration();
    public void set_NodeGroupConfiguration(List`1<NodeGroupConfiguration> value);
    internal bool IsSetNodeGroupConfiguration();
    public string get_NotificationTopicArn();
    public void set_NotificationTopicArn(string value);
    internal bool IsSetNotificationTopicArn();
    public Nullable`1<int> get_NumCacheClusters();
    public void set_NumCacheClusters(Nullable`1<int> value);
    internal bool IsSetNumCacheClusters();
    public Nullable`1<int> get_NumNodeGroups();
    public void set_NumNodeGroups(Nullable`1<int> value);
    internal bool IsSetNumNodeGroups();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public List`1<string> get_PreferredCacheClusterAZs();
    public void set_PreferredCacheClusterAZs(List`1<string> value);
    internal bool IsSetPreferredCacheClusterAZs();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public string get_PrimaryClusterId();
    public void set_PrimaryClusterId(string value);
    internal bool IsSetPrimaryClusterId();
    public Nullable`1<int> get_ReplicasPerNodeGroup();
    public void set_ReplicasPerNodeGroup(Nullable`1<int> value);
    internal bool IsSetReplicasPerNodeGroup();
    public string get_ReplicationGroupDescription();
    public void set_ReplicationGroupDescription(string value);
    internal bool IsSetReplicationGroupDescription();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public string get_ServerlessCacheSnapshotName();
    public void set_ServerlessCacheSnapshotName(string value);
    internal bool IsSetServerlessCacheSnapshotName();
    public List`1<string> get_SnapshotArns();
    public void set_SnapshotArns(List`1<string> value);
    internal bool IsSetSnapshotArns();
    public string get_SnapshotName();
    public void set_SnapshotName(string value);
    internal bool IsSetSnapshotName();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public string get_SnapshotWindow();
    public void set_SnapshotWindow(string value);
    internal bool IsSetSnapshotWindow();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<bool> get_TransitEncryptionEnabled();
    public void set_TransitEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetTransitEncryptionEnabled();
    public TransitEncryptionMode get_TransitEncryptionMode();
    public void set_TransitEncryptionMode(TransitEncryptionMode value);
    internal bool IsSetTransitEncryptionMode();
    public List`1<string> get_UserGroupIds();
    public void set_UserGroupIds(List`1<string> value);
    internal bool IsSetUserGroupIds();
}
public class Amazon.ElastiCache.Model.CreateReplicationGroupResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.CreateServerlessCacheRequest : AmazonElastiCacheRequest {
    private CacheUsageLimits _cacheUsageLimits;
    private string _dailySnapshotTime;
    private string _description;
    private string _engine;
    private string _kmsKeyId;
    private string _majorEngineVersion;
    private List`1<string> _securityGroupIds;
    private string _serverlessCacheName;
    private List`1<string> _snapshotArnsToRestore;
    private Nullable`1<int> _snapshotRetentionLimit;
    private List`1<string> _subnetIds;
    private List`1<Tag> _tags;
    private string _userGroupId;
    public CacheUsageLimits CacheUsageLimits { get; public set; }
    public string DailySnapshotTime { get; public set; }
    public string Description { get; public set; }
    [AWSPropertyAttribute]
public string Engine { get; public set; }
    public string KmsKeyId { get; public set; }
    public string MajorEngineVersion { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    [AWSPropertyAttribute]
public string ServerlessCacheName { get; public set; }
    public List`1<string> SnapshotArnsToRestore { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public List`1<string> SubnetIds { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string UserGroupId { get; public set; }
    public CacheUsageLimits get_CacheUsageLimits();
    public void set_CacheUsageLimits(CacheUsageLimits value);
    internal bool IsSetCacheUsageLimits();
    public string get_DailySnapshotTime();
    public void set_DailySnapshotTime(string value);
    internal bool IsSetDailySnapshotTime();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_MajorEngineVersion();
    public void set_MajorEngineVersion(string value);
    internal bool IsSetMajorEngineVersion();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public string get_ServerlessCacheName();
    public void set_ServerlessCacheName(string value);
    internal bool IsSetServerlessCacheName();
    public List`1<string> get_SnapshotArnsToRestore();
    public void set_SnapshotArnsToRestore(List`1<string> value);
    internal bool IsSetSnapshotArnsToRestore();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public List`1<string> get_SubnetIds();
    public void set_SubnetIds(List`1<string> value);
    internal bool IsSetSubnetIds();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
}
public class Amazon.ElastiCache.Model.CreateServerlessCacheResponse : AmazonWebServiceResponse {
    private ServerlessCache _serverlessCache;
    public ServerlessCache ServerlessCache { get; public set; }
    public ServerlessCache get_ServerlessCache();
    public void set_ServerlessCache(ServerlessCache value);
    internal bool IsSetServerlessCache();
}
public class Amazon.ElastiCache.Model.CreateServerlessCacheSnapshotRequest : AmazonElastiCacheRequest {
    private string _kmsKeyId;
    private string _serverlessCacheName;
    private string _serverlessCacheSnapshotName;
    private List`1<Tag> _tags;
    public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string ServerlessCacheName { get; public set; }
    [AWSPropertyAttribute]
public string ServerlessCacheSnapshotName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_ServerlessCacheName();
    public void set_ServerlessCacheName(string value);
    internal bool IsSetServerlessCacheName();
    public string get_ServerlessCacheSnapshotName();
    public void set_ServerlessCacheSnapshotName(string value);
    internal bool IsSetServerlessCacheSnapshotName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElastiCache.Model.CreateServerlessCacheSnapshotResponse : AmazonWebServiceResponse {
    private ServerlessCacheSnapshot _serverlessCacheSnapshot;
    public ServerlessCacheSnapshot ServerlessCacheSnapshot { get; public set; }
    public ServerlessCacheSnapshot get_ServerlessCacheSnapshot();
    public void set_ServerlessCacheSnapshot(ServerlessCacheSnapshot value);
    internal bool IsSetServerlessCacheSnapshot();
}
public class Amazon.ElastiCache.Model.CreateSnapshotRequest : AmazonElastiCacheRequest {
    private string _cacheClusterId;
    private string _kmsKeyId;
    private string _replicationGroupId;
    private string _snapshotName;
    private List`1<Tag> _tags;
    public string CacheClusterId { get; public set; }
    public string KmsKeyId { get; public set; }
    public string ReplicationGroupId { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public string get_SnapshotName();
    public void set_SnapshotName(string value);
    internal bool IsSetSnapshotName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElastiCache.Model.CreateSnapshotResponse : AmazonWebServiceResponse {
    private Snapshot _snapshot;
    public Snapshot Snapshot { get; public set; }
    public Snapshot get_Snapshot();
    public void set_Snapshot(Snapshot value);
    internal bool IsSetSnapshot();
}
public class Amazon.ElastiCache.Model.CreateUserGroupRequest : AmazonElastiCacheRequest {
    private string _engine;
    private List`1<Tag> _tags;
    private string _userGroupId;
    private List`1<string> _userIds;
    [AWSPropertyAttribute]
public string Engine { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UserGroupId { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> UserIds { get; public set; }
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
    public List`1<string> get_UserIds();
    public void set_UserIds(List`1<string> value);
    internal bool IsSetUserIds();
}
public class Amazon.ElastiCache.Model.CreateUserGroupResponse : AmazonWebServiceResponse {
    private string _arn;
    private string _engine;
    private string _minimumEngineVersion;
    private UserGroupPendingChanges _pendingChanges;
    private List`1<string> _replicationGroups;
    private List`1<string> _serverlessCaches;
    private string _status;
    private string _userGroupId;
    private List`1<string> _userIds;
    public string ARN { get; public set; }
    public string Engine { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public UserGroupPendingChanges PendingChanges { get; public set; }
    public List`1<string> ReplicationGroups { get; public set; }
    public List`1<string> ServerlessCaches { get; public set; }
    public string Status { get; public set; }
    public string UserGroupId { get; public set; }
    public List`1<string> UserIds { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public UserGroupPendingChanges get_PendingChanges();
    public void set_PendingChanges(UserGroupPendingChanges value);
    internal bool IsSetPendingChanges();
    public List`1<string> get_ReplicationGroups();
    public void set_ReplicationGroups(List`1<string> value);
    internal bool IsSetReplicationGroups();
    public List`1<string> get_ServerlessCaches();
    public void set_ServerlessCaches(List`1<string> value);
    internal bool IsSetServerlessCaches();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
    public List`1<string> get_UserIds();
    public void set_UserIds(List`1<string> value);
    internal bool IsSetUserIds();
}
public class Amazon.ElastiCache.Model.CreateUserRequest : AmazonElastiCacheRequest {
    private string _accessString;
    private AuthenticationMode _authenticationMode;
    private string _engine;
    private Nullable`1<bool> _noPasswordRequired;
    private List`1<string> _passwords;
    private List`1<Tag> _tags;
    private string _userId;
    private string _userName;
    [AWSPropertyAttribute]
public string AccessString { get; public set; }
    public AuthenticationMode AuthenticationMode { get; public set; }
    [AWSPropertyAttribute]
public string Engine { get; public set; }
    public Nullable`1<bool> NoPasswordRequired { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Passwords { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UserId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_AccessString();
    public void set_AccessString(string value);
    internal bool IsSetAccessString();
    public AuthenticationMode get_AuthenticationMode();
    public void set_AuthenticationMode(AuthenticationMode value);
    internal bool IsSetAuthenticationMode();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public Nullable`1<bool> get_NoPasswordRequired();
    public void set_NoPasswordRequired(Nullable`1<bool> value);
    internal bool IsSetNoPasswordRequired();
    public List`1<string> get_Passwords();
    public void set_Passwords(List`1<string> value);
    internal bool IsSetPasswords();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.ElastiCache.Model.CreateUserResponse : AmazonWebServiceResponse {
    private string _accessString;
    private string _arn;
    private Authentication _authentication;
    private string _engine;
    private string _minimumEngineVersion;
    private string _status;
    private List`1<string> _userGroupIds;
    private string _userId;
    private string _userName;
    public string AccessString { get; public set; }
    public string ARN { get; public set; }
    public Authentication Authentication { get; public set; }
    public string Engine { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public string Status { get; public set; }
    public List`1<string> UserGroupIds { get; public set; }
    public string UserId { get; public set; }
    public string UserName { get; public set; }
    public string get_AccessString();
    public void set_AccessString(string value);
    internal bool IsSetAccessString();
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public Authentication get_Authentication();
    public void set_Authentication(Authentication value);
    internal bool IsSetAuthentication();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<string> get_UserGroupIds();
    public void set_UserGroupIds(List`1<string> value);
    internal bool IsSetUserGroupIds();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.ElastiCache.Model.CustomerNodeEndpoint : object {
    private string _address;
    private Nullable`1<int> _port;
    public string Address { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    internal bool IsSetAddress();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
}
public class Amazon.ElastiCache.Model.DataStorage : object {
    private Nullable`1<int> _maximum;
    private Nullable`1<int> _minimum;
    private DataStorageUnit _unit;
    public Nullable`1<int> Maximum { get; public set; }
    public Nullable`1<int> Minimum { get; public set; }
    [AWSPropertyAttribute]
public DataStorageUnit Unit { get; public set; }
    public Nullable`1<int> get_Maximum();
    public void set_Maximum(Nullable`1<int> value);
    internal bool IsSetMaximum();
    public Nullable`1<int> get_Minimum();
    public void set_Minimum(Nullable`1<int> value);
    internal bool IsSetMinimum();
    public DataStorageUnit get_Unit();
    public void set_Unit(DataStorageUnit value);
    internal bool IsSetUnit();
}
public class Amazon.ElastiCache.Model.DecreaseNodeGroupsInGlobalReplicationGroupRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _applyImmediately;
    private List`1<string> _globalNodeGroupsToRemove;
    private List`1<string> _globalNodeGroupsToRetain;
    private string _globalReplicationGroupId;
    private Nullable`1<int> _nodeGroupCount;
    [AWSPropertyAttribute]
public Nullable`1<bool> ApplyImmediately { get; public set; }
    public List`1<string> GlobalNodeGroupsToRemove { get; public set; }
    public List`1<string> GlobalNodeGroupsToRetain { get; public set; }
    [AWSPropertyAttribute]
public string GlobalReplicationGroupId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> NodeGroupCount { get; public set; }
    public Nullable`1<bool> get_ApplyImmediately();
    public void set_ApplyImmediately(Nullable`1<bool> value);
    internal bool IsSetApplyImmediately();
    public List`1<string> get_GlobalNodeGroupsToRemove();
    public void set_GlobalNodeGroupsToRemove(List`1<string> value);
    internal bool IsSetGlobalNodeGroupsToRemove();
    public List`1<string> get_GlobalNodeGroupsToRetain();
    public void set_GlobalNodeGroupsToRetain(List`1<string> value);
    internal bool IsSetGlobalNodeGroupsToRetain();
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
    public Nullable`1<int> get_NodeGroupCount();
    public void set_NodeGroupCount(Nullable`1<int> value);
    internal bool IsSetNodeGroupCount();
}
public class Amazon.ElastiCache.Model.DecreaseNodeGroupsInGlobalReplicationGroupResponse : AmazonWebServiceResponse {
    private GlobalReplicationGroup _globalReplicationGroup;
    public GlobalReplicationGroup GlobalReplicationGroup { get; public set; }
    public GlobalReplicationGroup get_GlobalReplicationGroup();
    public void set_GlobalReplicationGroup(GlobalReplicationGroup value);
    internal bool IsSetGlobalReplicationGroup();
}
public class Amazon.ElastiCache.Model.DecreaseReplicaCountRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _applyImmediately;
    private Nullable`1<int> _newReplicaCount;
    private List`1<ConfigureShard> _replicaConfiguration;
    private List`1<string> _replicasToRemove;
    private string _replicationGroupId;
    [AWSPropertyAttribute]
public Nullable`1<bool> ApplyImmediately { get; public set; }
    public Nullable`1<int> NewReplicaCount { get; public set; }
    public List`1<ConfigureShard> ReplicaConfiguration { get; public set; }
    public List`1<string> ReplicasToRemove { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public Nullable`1<bool> get_ApplyImmediately();
    public void set_ApplyImmediately(Nullable`1<bool> value);
    internal bool IsSetApplyImmediately();
    public Nullable`1<int> get_NewReplicaCount();
    public void set_NewReplicaCount(Nullable`1<int> value);
    internal bool IsSetNewReplicaCount();
    public List`1<ConfigureShard> get_ReplicaConfiguration();
    public void set_ReplicaConfiguration(List`1<ConfigureShard> value);
    internal bool IsSetReplicaConfiguration();
    public List`1<string> get_ReplicasToRemove();
    public void set_ReplicasToRemove(List`1<string> value);
    internal bool IsSetReplicasToRemove();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
}
public class Amazon.ElastiCache.Model.DecreaseReplicaCountResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.DefaultUserAssociatedToUserGroupException : AmazonElastiCacheException {
    public DefaultUserAssociatedToUserGroupException(string message);
    public DefaultUserAssociatedToUserGroupException(string message, Exception innerException);
    public DefaultUserAssociatedToUserGroupException(Exception innerException);
    public DefaultUserAssociatedToUserGroupException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DefaultUserAssociatedToUserGroupException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.DefaultUserRequiredException : AmazonElastiCacheException {
    public DefaultUserRequiredException(string message);
    public DefaultUserRequiredException(string message, Exception innerException);
    public DefaultUserRequiredException(Exception innerException);
    public DefaultUserRequiredException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DefaultUserRequiredException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.DeleteCacheClusterRequest : AmazonElastiCacheRequest {
    private string _cacheClusterId;
    private string _finalSnapshotIdentifier;
    [AWSPropertyAttribute]
public string CacheClusterId { get; public set; }
    public string FinalSnapshotIdentifier { get; public set; }
    public DeleteCacheClusterRequest(string cacheClusterId);
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_FinalSnapshotIdentifier();
    public void set_FinalSnapshotIdentifier(string value);
    internal bool IsSetFinalSnapshotIdentifier();
}
public class Amazon.ElastiCache.Model.DeleteCacheClusterResponse : AmazonWebServiceResponse {
    private CacheCluster _cacheCluster;
    public CacheCluster CacheCluster { get; public set; }
    public CacheCluster get_CacheCluster();
    public void set_CacheCluster(CacheCluster value);
    internal bool IsSetCacheCluster();
}
public class Amazon.ElastiCache.Model.DeleteCacheParameterGroupRequest : AmazonElastiCacheRequest {
    private string _cacheParameterGroupName;
    [AWSPropertyAttribute]
public string CacheParameterGroupName { get; public set; }
    public DeleteCacheParameterGroupRequest(string cacheParameterGroupName);
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
}
public class Amazon.ElastiCache.Model.DeleteCacheParameterGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.ElastiCache.Model.DeleteCacheSecurityGroupRequest : AmazonElastiCacheRequest {
    private string _cacheSecurityGroupName;
    [AWSPropertyAttribute]
public string CacheSecurityGroupName { get; public set; }
    public DeleteCacheSecurityGroupRequest(string cacheSecurityGroupName);
    public string get_CacheSecurityGroupName();
    public void set_CacheSecurityGroupName(string value);
    internal bool IsSetCacheSecurityGroupName();
}
public class Amazon.ElastiCache.Model.DeleteCacheSecurityGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.ElastiCache.Model.DeleteCacheSubnetGroupRequest : AmazonElastiCacheRequest {
    private string _cacheSubnetGroupName;
    [AWSPropertyAttribute]
public string CacheSubnetGroupName { get; public set; }
    public string get_CacheSubnetGroupName();
    public void set_CacheSubnetGroupName(string value);
    internal bool IsSetCacheSubnetGroupName();
}
public class Amazon.ElastiCache.Model.DeleteCacheSubnetGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.ElastiCache.Model.DeleteGlobalReplicationGroupRequest : AmazonElastiCacheRequest {
    private string _globalReplicationGroupId;
    private Nullable`1<bool> _retainPrimaryReplicationGroup;
    [AWSPropertyAttribute]
public string GlobalReplicationGroupId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> RetainPrimaryReplicationGroup { get; public set; }
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
    public Nullable`1<bool> get_RetainPrimaryReplicationGroup();
    public void set_RetainPrimaryReplicationGroup(Nullable`1<bool> value);
    internal bool IsSetRetainPrimaryReplicationGroup();
}
public class Amazon.ElastiCache.Model.DeleteGlobalReplicationGroupResponse : AmazonWebServiceResponse {
    private GlobalReplicationGroup _globalReplicationGroup;
    public GlobalReplicationGroup GlobalReplicationGroup { get; public set; }
    public GlobalReplicationGroup get_GlobalReplicationGroup();
    public void set_GlobalReplicationGroup(GlobalReplicationGroup value);
    internal bool IsSetGlobalReplicationGroup();
}
public class Amazon.ElastiCache.Model.DeleteReplicationGroupRequest : AmazonElastiCacheRequest {
    private string _finalSnapshotIdentifier;
    private string _replicationGroupId;
    private Nullable`1<bool> _retainPrimaryCluster;
    public string FinalSnapshotIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public Nullable`1<bool> RetainPrimaryCluster { get; public set; }
    public string get_FinalSnapshotIdentifier();
    public void set_FinalSnapshotIdentifier(string value);
    internal bool IsSetFinalSnapshotIdentifier();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public Nullable`1<bool> get_RetainPrimaryCluster();
    public void set_RetainPrimaryCluster(Nullable`1<bool> value);
    internal bool IsSetRetainPrimaryCluster();
}
public class Amazon.ElastiCache.Model.DeleteReplicationGroupResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.DeleteServerlessCacheRequest : AmazonElastiCacheRequest {
    private string _finalSnapshotName;
    private string _serverlessCacheName;
    public string FinalSnapshotName { get; public set; }
    [AWSPropertyAttribute]
public string ServerlessCacheName { get; public set; }
    public string get_FinalSnapshotName();
    public void set_FinalSnapshotName(string value);
    internal bool IsSetFinalSnapshotName();
    public string get_ServerlessCacheName();
    public void set_ServerlessCacheName(string value);
    internal bool IsSetServerlessCacheName();
}
public class Amazon.ElastiCache.Model.DeleteServerlessCacheResponse : AmazonWebServiceResponse {
    private ServerlessCache _serverlessCache;
    public ServerlessCache ServerlessCache { get; public set; }
    public ServerlessCache get_ServerlessCache();
    public void set_ServerlessCache(ServerlessCache value);
    internal bool IsSetServerlessCache();
}
public class Amazon.ElastiCache.Model.DeleteServerlessCacheSnapshotRequest : AmazonElastiCacheRequest {
    private string _serverlessCacheSnapshotName;
    [AWSPropertyAttribute]
public string ServerlessCacheSnapshotName { get; public set; }
    public string get_ServerlessCacheSnapshotName();
    public void set_ServerlessCacheSnapshotName(string value);
    internal bool IsSetServerlessCacheSnapshotName();
}
public class Amazon.ElastiCache.Model.DeleteServerlessCacheSnapshotResponse : AmazonWebServiceResponse {
    private ServerlessCacheSnapshot _serverlessCacheSnapshot;
    public ServerlessCacheSnapshot ServerlessCacheSnapshot { get; public set; }
    public ServerlessCacheSnapshot get_ServerlessCacheSnapshot();
    public void set_ServerlessCacheSnapshot(ServerlessCacheSnapshot value);
    internal bool IsSetServerlessCacheSnapshot();
}
public class Amazon.ElastiCache.Model.DeleteSnapshotRequest : AmazonElastiCacheRequest {
    private string _snapshotName;
    [AWSPropertyAttribute]
public string SnapshotName { get; public set; }
    public string get_SnapshotName();
    public void set_SnapshotName(string value);
    internal bool IsSetSnapshotName();
}
public class Amazon.ElastiCache.Model.DeleteSnapshotResponse : AmazonWebServiceResponse {
    private Snapshot _snapshot;
    public Snapshot Snapshot { get; public set; }
    public Snapshot get_Snapshot();
    public void set_Snapshot(Snapshot value);
    internal bool IsSetSnapshot();
}
public class Amazon.ElastiCache.Model.DeleteUserGroupRequest : AmazonElastiCacheRequest {
    private string _userGroupId;
    [AWSPropertyAttribute]
public string UserGroupId { get; public set; }
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
}
public class Amazon.ElastiCache.Model.DeleteUserGroupResponse : AmazonWebServiceResponse {
    private string _arn;
    private string _engine;
    private string _minimumEngineVersion;
    private UserGroupPendingChanges _pendingChanges;
    private List`1<string> _replicationGroups;
    private List`1<string> _serverlessCaches;
    private string _status;
    private string _userGroupId;
    private List`1<string> _userIds;
    public string ARN { get; public set; }
    public string Engine { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public UserGroupPendingChanges PendingChanges { get; public set; }
    public List`1<string> ReplicationGroups { get; public set; }
    public List`1<string> ServerlessCaches { get; public set; }
    public string Status { get; public set; }
    public string UserGroupId { get; public set; }
    public List`1<string> UserIds { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public UserGroupPendingChanges get_PendingChanges();
    public void set_PendingChanges(UserGroupPendingChanges value);
    internal bool IsSetPendingChanges();
    public List`1<string> get_ReplicationGroups();
    public void set_ReplicationGroups(List`1<string> value);
    internal bool IsSetReplicationGroups();
    public List`1<string> get_ServerlessCaches();
    public void set_ServerlessCaches(List`1<string> value);
    internal bool IsSetServerlessCaches();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
    public List`1<string> get_UserIds();
    public void set_UserIds(List`1<string> value);
    internal bool IsSetUserIds();
}
public class Amazon.ElastiCache.Model.DeleteUserRequest : AmazonElastiCacheRequest {
    private string _userId;
    [AWSPropertyAttribute]
public string UserId { get; public set; }
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
}
public class Amazon.ElastiCache.Model.DeleteUserResponse : AmazonWebServiceResponse {
    private string _accessString;
    private string _arn;
    private Authentication _authentication;
    private string _engine;
    private string _minimumEngineVersion;
    private string _status;
    private List`1<string> _userGroupIds;
    private string _userId;
    private string _userName;
    public string AccessString { get; public set; }
    public string ARN { get; public set; }
    public Authentication Authentication { get; public set; }
    public string Engine { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public string Status { get; public set; }
    public List`1<string> UserGroupIds { get; public set; }
    public string UserId { get; public set; }
    public string UserName { get; public set; }
    public string get_AccessString();
    public void set_AccessString(string value);
    internal bool IsSetAccessString();
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public Authentication get_Authentication();
    public void set_Authentication(Authentication value);
    internal bool IsSetAuthentication();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<string> get_UserGroupIds();
    public void set_UserGroupIds(List`1<string> value);
    internal bool IsSetUserGroupIds();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
internal class Amazon.ElastiCache.Model.DescribeCacheClustersPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeCacheClustersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeCacheClustersResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheCluster> CacheClusters { get; }
    internal DescribeCacheClustersPaginator(IAmazonElastiCache client, DescribeCacheClustersRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeCacheClustersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<CacheCluster> get_CacheClusters();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeCacheClustersPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeCacheClustersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeCacheClustersResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeCacheClustersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeCacheClustersRequest : AmazonElastiCacheRequest {
    private string _cacheClusterId;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private Nullable`1<bool> _showCacheClustersNotInReplicationGroups;
    private Nullable`1<bool> _showCacheNodeInfo;
    public string CacheClusterId { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public Nullable`1<bool> ShowCacheClustersNotInReplicationGroups { get; public set; }
    public Nullable`1<bool> ShowCacheNodeInfo { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public Nullable`1<bool> get_ShowCacheClustersNotInReplicationGroups();
    public void set_ShowCacheClustersNotInReplicationGroups(Nullable`1<bool> value);
    internal bool IsSetShowCacheClustersNotInReplicationGroups();
    public Nullable`1<bool> get_ShowCacheNodeInfo();
    public void set_ShowCacheNodeInfo(Nullable`1<bool> value);
    internal bool IsSetShowCacheNodeInfo();
}
public class Amazon.ElastiCache.Model.DescribeCacheClustersResponse : AmazonWebServiceResponse {
    private List`1<CacheCluster> _cacheClusters;
    private string _marker;
    public List`1<CacheCluster> CacheClusters { get; public set; }
    public string Marker { get; public set; }
    public List`1<CacheCluster> get_CacheClusters();
    public void set_CacheClusters(List`1<CacheCluster> value);
    internal bool IsSetCacheClusters();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.ElastiCache.Model.DescribeCacheEngineVersionsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeCacheEngineVersionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeCacheEngineVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheEngineVersion> CacheEngineVersions { get; }
    internal DescribeCacheEngineVersionsPaginator(IAmazonElastiCache client, DescribeCacheEngineVersionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeCacheEngineVersionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<CacheEngineVersion> get_CacheEngineVersions();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeCacheEngineVersionsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeCacheEngineVersionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeCacheEngineVersionsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeCacheEngineVersionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeCacheEngineVersionsRequest : AmazonElastiCacheRequest {
    private string _cacheParameterGroupFamily;
    private Nullable`1<bool> _defaultOnly;
    private string _engine;
    private string _engineVersion;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    public string CacheParameterGroupFamily { get; public set; }
    public Nullable`1<bool> DefaultOnly { get; public set; }
    public string Engine { get; public set; }
    public string EngineVersion { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string get_CacheParameterGroupFamily();
    public void set_CacheParameterGroupFamily(string value);
    internal bool IsSetCacheParameterGroupFamily();
    public Nullable`1<bool> get_DefaultOnly();
    public void set_DefaultOnly(Nullable`1<bool> value);
    internal bool IsSetDefaultOnly();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.ElastiCache.Model.DescribeCacheEngineVersionsResponse : AmazonWebServiceResponse {
    private List`1<CacheEngineVersion> _cacheEngineVersions;
    private string _marker;
    public List`1<CacheEngineVersion> CacheEngineVersions { get; public set; }
    public string Marker { get; public set; }
    public List`1<CacheEngineVersion> get_CacheEngineVersions();
    public void set_CacheEngineVersions(List`1<CacheEngineVersion> value);
    internal bool IsSetCacheEngineVersions();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.ElastiCache.Model.DescribeCacheParameterGroupsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeCacheParameterGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeCacheParameterGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheParameterGroup> CacheParameterGroups { get; }
    internal DescribeCacheParameterGroupsPaginator(IAmazonElastiCache client, DescribeCacheParameterGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeCacheParameterGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<CacheParameterGroup> get_CacheParameterGroups();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeCacheParameterGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeCacheParameterGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeCacheParameterGroupsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeCacheParameterGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeCacheParameterGroupsRequest : AmazonElastiCacheRequest {
    private string _cacheParameterGroupName;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    public string CacheParameterGroupName { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public DescribeCacheParameterGroupsRequest(string cacheParameterGroupName);
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.ElastiCache.Model.DescribeCacheParameterGroupsResponse : AmazonWebServiceResponse {
    private List`1<CacheParameterGroup> _cacheParameterGroups;
    private string _marker;
    public List`1<CacheParameterGroup> CacheParameterGroups { get; public set; }
    public string Marker { get; public set; }
    public List`1<CacheParameterGroup> get_CacheParameterGroups();
    public void set_CacheParameterGroups(List`1<CacheParameterGroup> value);
    internal bool IsSetCacheParameterGroups();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.ElastiCache.Model.DescribeCacheParametersPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeCacheParametersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeCacheParametersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Parameter> Parameters { get; }
    internal DescribeCacheParametersPaginator(IAmazonElastiCache client, DescribeCacheParametersRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeCacheParametersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Parameter> get_Parameters();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeCacheParametersPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeCacheParametersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeCacheParametersResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeCacheParametersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeCacheParametersRequest : AmazonElastiCacheRequest {
    private string _cacheParameterGroupName;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _source;
    [AWSPropertyAttribute]
public string CacheParameterGroupName { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string Source { get; public set; }
    public DescribeCacheParametersRequest(string cacheParameterGroupName);
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_Source();
    public void set_Source(string value);
    internal bool IsSetSource();
}
public class Amazon.ElastiCache.Model.DescribeCacheParametersResponse : AmazonWebServiceResponse {
    private List`1<CacheNodeTypeSpecificParameter> _cacheNodeTypeSpecificParameters;
    private string _marker;
    private List`1<Parameter> _parameters;
    public List`1<CacheNodeTypeSpecificParameter> CacheNodeTypeSpecificParameters { get; public set; }
    public string Marker { get; public set; }
    public List`1<Parameter> Parameters { get; public set; }
    public List`1<CacheNodeTypeSpecificParameter> get_CacheNodeTypeSpecificParameters();
    public void set_CacheNodeTypeSpecificParameters(List`1<CacheNodeTypeSpecificParameter> value);
    internal bool IsSetCacheNodeTypeSpecificParameters();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Parameter> get_Parameters();
    public void set_Parameters(List`1<Parameter> value);
    internal bool IsSetParameters();
}
internal class Amazon.ElastiCache.Model.DescribeCacheSecurityGroupsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeCacheSecurityGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeCacheSecurityGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheSecurityGroup> CacheSecurityGroups { get; }
    internal DescribeCacheSecurityGroupsPaginator(IAmazonElastiCache client, DescribeCacheSecurityGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeCacheSecurityGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<CacheSecurityGroup> get_CacheSecurityGroups();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeCacheSecurityGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeCacheSecurityGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeCacheSecurityGroupsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeCacheSecurityGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeCacheSecurityGroupsRequest : AmazonElastiCacheRequest {
    private string _cacheSecurityGroupName;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    public string CacheSecurityGroupName { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public DescribeCacheSecurityGroupsRequest(string cacheSecurityGroupName);
    public string get_CacheSecurityGroupName();
    public void set_CacheSecurityGroupName(string value);
    internal bool IsSetCacheSecurityGroupName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.ElastiCache.Model.DescribeCacheSecurityGroupsResponse : AmazonWebServiceResponse {
    private List`1<CacheSecurityGroup> _cacheSecurityGroups;
    private string _marker;
    public List`1<CacheSecurityGroup> CacheSecurityGroups { get; public set; }
    public string Marker { get; public set; }
    public List`1<CacheSecurityGroup> get_CacheSecurityGroups();
    public void set_CacheSecurityGroups(List`1<CacheSecurityGroup> value);
    internal bool IsSetCacheSecurityGroups();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.ElastiCache.Model.DescribeCacheSubnetGroupsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeCacheSubnetGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeCacheSubnetGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheSubnetGroup> CacheSubnetGroups { get; }
    internal DescribeCacheSubnetGroupsPaginator(IAmazonElastiCache client, DescribeCacheSubnetGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeCacheSubnetGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<CacheSubnetGroup> get_CacheSubnetGroups();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeCacheSubnetGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeCacheSubnetGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeCacheSubnetGroupsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeCacheSubnetGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeCacheSubnetGroupsRequest : AmazonElastiCacheRequest {
    private string _cacheSubnetGroupName;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    public string CacheSubnetGroupName { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string get_CacheSubnetGroupName();
    public void set_CacheSubnetGroupName(string value);
    internal bool IsSetCacheSubnetGroupName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.ElastiCache.Model.DescribeCacheSubnetGroupsResponse : AmazonWebServiceResponse {
    private List`1<CacheSubnetGroup> _cacheSubnetGroups;
    private string _marker;
    public List`1<CacheSubnetGroup> CacheSubnetGroups { get; public set; }
    public string Marker { get; public set; }
    public List`1<CacheSubnetGroup> get_CacheSubnetGroups();
    public void set_CacheSubnetGroups(List`1<CacheSubnetGroup> value);
    internal bool IsSetCacheSubnetGroups();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.ElastiCache.Model.DescribeEngineDefaultParametersPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeEngineDefaultParametersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeEngineDefaultParametersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Parameter> Parameters { get; }
    internal DescribeEngineDefaultParametersPaginator(IAmazonElastiCache client, DescribeEngineDefaultParametersRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeEngineDefaultParametersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Parameter> get_Parameters();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeEngineDefaultParametersPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeEngineDefaultParametersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeEngineDefaultParametersResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeEngineDefaultParametersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeEngineDefaultParametersRequest : AmazonElastiCacheRequest {
    private string _cacheParameterGroupFamily;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    [AWSPropertyAttribute]
public string CacheParameterGroupFamily { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public DescribeEngineDefaultParametersRequest(string cacheParameterGroupFamily);
    public string get_CacheParameterGroupFamily();
    public void set_CacheParameterGroupFamily(string value);
    internal bool IsSetCacheParameterGroupFamily();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.ElastiCache.Model.DescribeEngineDefaultParametersResponse : AmazonWebServiceResponse {
    private EngineDefaults _engineDefaults;
    public EngineDefaults EngineDefaults { get; public set; }
    public EngineDefaults get_EngineDefaults();
    public void set_EngineDefaults(EngineDefaults value);
    internal bool IsSetEngineDefaults();
}
internal class Amazon.ElastiCache.Model.DescribeEventsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeEventsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeEventsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Event> Events { get; }
    internal DescribeEventsPaginator(IAmazonElastiCache client, DescribeEventsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeEventsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Event> get_Events();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeEventsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeEventsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeEventsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeEventsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeEventsRequest : AmazonElastiCacheRequest {
    private Nullable`1<int> _duration;
    private Nullable`1<DateTime> _endTimeUtc;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _sourceIdentifier;
    private SourceType _sourceType;
    private Nullable`1<DateTime> _startTimeUtc;
    private Nullable`1<DateTime> _endTime;
    private Nullable`1<DateTime> _startTime;
    public Nullable`1<int> Duration { get; public set; }
    public Nullable`1<DateTime> EndTimeUtc { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string SourceIdentifier { get; public set; }
    public SourceType SourceType { get; public set; }
    public Nullable`1<DateTime> StartTimeUtc { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use EndTimeUtc instead. Setting either EndTime or EndTimeUtc results in both EndTime and EndTimeUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. EndTime is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> EndTime { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use StartTimeUtc instead. Setting either StartTime or StartTimeUtc results in both StartTime and StartTimeUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. StartTime is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> StartTime { get; public set; }
    public Nullable`1<int> get_Duration();
    public void set_Duration(Nullable`1<int> value);
    internal bool IsSetDuration();
    public Nullable`1<DateTime> get_EndTimeUtc();
    public void set_EndTimeUtc(Nullable`1<DateTime> value);
    internal bool IsSetEndTimeUtc();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    internal bool IsSetSourceIdentifier();
    public SourceType get_SourceType();
    public void set_SourceType(SourceType value);
    internal bool IsSetSourceType();
    public Nullable`1<DateTime> get_StartTimeUtc();
    public void set_StartTimeUtc(Nullable`1<DateTime> value);
    internal bool IsSetStartTimeUtc();
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
}
public class Amazon.ElastiCache.Model.DescribeEventsResponse : AmazonWebServiceResponse {
    private List`1<Event> _events;
    private string _marker;
    public List`1<Event> Events { get; public set; }
    public string Marker { get; public set; }
    public List`1<Event> get_Events();
    public void set_Events(List`1<Event> value);
    internal bool IsSetEvents();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.ElastiCache.Model.DescribeGlobalReplicationGroupsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeGlobalReplicationGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeGlobalReplicationGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<GlobalReplicationGroup> GlobalReplicationGroups { get; }
    internal DescribeGlobalReplicationGroupsPaginator(IAmazonElastiCache client, DescribeGlobalReplicationGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeGlobalReplicationGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<GlobalReplicationGroup> get_GlobalReplicationGroups();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeGlobalReplicationGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeGlobalReplicationGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeGlobalReplicationGroupsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeGlobalReplicationGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeGlobalReplicationGroupsRequest : AmazonElastiCacheRequest {
    private string _globalReplicationGroupId;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private Nullable`1<bool> _showMemberInfo;
    public string GlobalReplicationGroupId { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public Nullable`1<bool> ShowMemberInfo { get; public set; }
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public Nullable`1<bool> get_ShowMemberInfo();
    public void set_ShowMemberInfo(Nullable`1<bool> value);
    internal bool IsSetShowMemberInfo();
}
public class Amazon.ElastiCache.Model.DescribeGlobalReplicationGroupsResponse : AmazonWebServiceResponse {
    private List`1<GlobalReplicationGroup> _globalReplicationGroups;
    private string _marker;
    public List`1<GlobalReplicationGroup> GlobalReplicationGroups { get; public set; }
    public string Marker { get; public set; }
    public List`1<GlobalReplicationGroup> get_GlobalReplicationGroups();
    public void set_GlobalReplicationGroups(List`1<GlobalReplicationGroup> value);
    internal bool IsSetGlobalReplicationGroups();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.ElastiCache.Model.DescribeReplicationGroupsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeReplicationGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeReplicationGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReplicationGroup> ReplicationGroups { get; }
    internal DescribeReplicationGroupsPaginator(IAmazonElastiCache client, DescribeReplicationGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeReplicationGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ReplicationGroup> get_ReplicationGroups();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeReplicationGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeReplicationGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeReplicationGroupsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeReplicationGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeReplicationGroupsRequest : AmazonElastiCacheRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _replicationGroupId;
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
}
public class Amazon.ElastiCache.Model.DescribeReplicationGroupsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ReplicationGroup> _replicationGroups;
    public string Marker { get; public set; }
    public List`1<ReplicationGroup> ReplicationGroups { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ReplicationGroup> get_ReplicationGroups();
    public void set_ReplicationGroups(List`1<ReplicationGroup> value);
    internal bool IsSetReplicationGroups();
}
internal class Amazon.ElastiCache.Model.DescribeReservedCacheNodesOfferingsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeReservedCacheNodesOfferingsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeReservedCacheNodesOfferingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedCacheNodesOffering> ReservedCacheNodesOfferings { get; }
    internal DescribeReservedCacheNodesOfferingsPaginator(IAmazonElastiCache client, DescribeReservedCacheNodesOfferingsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeReservedCacheNodesOfferingsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ReservedCacheNodesOffering> get_ReservedCacheNodesOfferings();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeReservedCacheNodesOfferingsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeReservedCacheNodesOfferingsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeReservedCacheNodesOfferingsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeReservedCacheNodesOfferingsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeReservedCacheNodesOfferingsRequest : AmazonElastiCacheRequest {
    private string _cacheNodeType;
    private string _duration;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _offeringType;
    private string _productDescription;
    private string _reservedCacheNodesOfferingId;
    public string CacheNodeType { get; public set; }
    public string Duration { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string OfferingType { get; public set; }
    public string ProductDescription { get; public set; }
    public string ReservedCacheNodesOfferingId { get; public set; }
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_Duration();
    public void set_Duration(string value);
    internal bool IsSetDuration();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_OfferingType();
    public void set_OfferingType(string value);
    internal bool IsSetOfferingType();
    public string get_ProductDescription();
    public void set_ProductDescription(string value);
    internal bool IsSetProductDescription();
    public string get_ReservedCacheNodesOfferingId();
    public void set_ReservedCacheNodesOfferingId(string value);
    internal bool IsSetReservedCacheNodesOfferingId();
}
public class Amazon.ElastiCache.Model.DescribeReservedCacheNodesOfferingsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ReservedCacheNodesOffering> _reservedCacheNodesOfferings;
    public string Marker { get; public set; }
    public List`1<ReservedCacheNodesOffering> ReservedCacheNodesOfferings { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ReservedCacheNodesOffering> get_ReservedCacheNodesOfferings();
    public void set_ReservedCacheNodesOfferings(List`1<ReservedCacheNodesOffering> value);
    internal bool IsSetReservedCacheNodesOfferings();
}
internal class Amazon.ElastiCache.Model.DescribeReservedCacheNodesPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeReservedCacheNodesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeReservedCacheNodesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedCacheNode> ReservedCacheNodes { get; }
    internal DescribeReservedCacheNodesPaginator(IAmazonElastiCache client, DescribeReservedCacheNodesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeReservedCacheNodesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ReservedCacheNode> get_ReservedCacheNodes();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeReservedCacheNodesPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeReservedCacheNodesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeReservedCacheNodesResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeReservedCacheNodesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeReservedCacheNodesRequest : AmazonElastiCacheRequest {
    private string _cacheNodeType;
    private string _duration;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _offeringType;
    private string _productDescription;
    private string _reservedCacheNodeId;
    private string _reservedCacheNodesOfferingId;
    public string CacheNodeType { get; public set; }
    public string Duration { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string OfferingType { get; public set; }
    public string ProductDescription { get; public set; }
    public string ReservedCacheNodeId { get; public set; }
    public string ReservedCacheNodesOfferingId { get; public set; }
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_Duration();
    public void set_Duration(string value);
    internal bool IsSetDuration();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_OfferingType();
    public void set_OfferingType(string value);
    internal bool IsSetOfferingType();
    public string get_ProductDescription();
    public void set_ProductDescription(string value);
    internal bool IsSetProductDescription();
    public string get_ReservedCacheNodeId();
    public void set_ReservedCacheNodeId(string value);
    internal bool IsSetReservedCacheNodeId();
    public string get_ReservedCacheNodesOfferingId();
    public void set_ReservedCacheNodesOfferingId(string value);
    internal bool IsSetReservedCacheNodesOfferingId();
}
public class Amazon.ElastiCache.Model.DescribeReservedCacheNodesResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ReservedCacheNode> _reservedCacheNodes;
    public string Marker { get; public set; }
    public List`1<ReservedCacheNode> ReservedCacheNodes { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ReservedCacheNode> get_ReservedCacheNodes();
    public void set_ReservedCacheNodes(List`1<ReservedCacheNode> value);
    internal bool IsSetReservedCacheNodes();
}
internal class Amazon.ElastiCache.Model.DescribeServerlessCacheSnapshotsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeServerlessCacheSnapshotsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeServerlessCacheSnapshotsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ServerlessCacheSnapshot> ServerlessCacheSnapshots { get; }
    internal DescribeServerlessCacheSnapshotsPaginator(IAmazonElastiCache client, DescribeServerlessCacheSnapshotsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeServerlessCacheSnapshotsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ServerlessCacheSnapshot> get_ServerlessCacheSnapshots();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeServerlessCacheSnapshotsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeServerlessCacheSnapshotsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeServerlessCacheSnapshotsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeServerlessCacheSnapshotsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeServerlessCacheSnapshotsRequest : AmazonElastiCacheRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _serverlessCacheName;
    private string _serverlessCacheSnapshotName;
    private string _snapshotType;
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string ServerlessCacheName { get; public set; }
    public string ServerlessCacheSnapshotName { get; public set; }
    public string SnapshotType { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServerlessCacheName();
    public void set_ServerlessCacheName(string value);
    internal bool IsSetServerlessCacheName();
    public string get_ServerlessCacheSnapshotName();
    public void set_ServerlessCacheSnapshotName(string value);
    internal bool IsSetServerlessCacheSnapshotName();
    public string get_SnapshotType();
    public void set_SnapshotType(string value);
    internal bool IsSetSnapshotType();
}
public class Amazon.ElastiCache.Model.DescribeServerlessCacheSnapshotsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<ServerlessCacheSnapshot> _serverlessCacheSnapshots;
    public string NextToken { get; public set; }
    public List`1<ServerlessCacheSnapshot> ServerlessCacheSnapshots { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<ServerlessCacheSnapshot> get_ServerlessCacheSnapshots();
    public void set_ServerlessCacheSnapshots(List`1<ServerlessCacheSnapshot> value);
    internal bool IsSetServerlessCacheSnapshots();
}
internal class Amazon.ElastiCache.Model.DescribeServerlessCachesPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeServerlessCachesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeServerlessCachesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ServerlessCache> ServerlessCaches { get; }
    internal DescribeServerlessCachesPaginator(IAmazonElastiCache client, DescribeServerlessCachesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeServerlessCachesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ServerlessCache> get_ServerlessCaches();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeServerlessCachesPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeServerlessCachesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeServerlessCachesResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeServerlessCachesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeServerlessCachesRequest : AmazonElastiCacheRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _serverlessCacheName;
    public Nullable`1<int> MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string ServerlessCacheName { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServerlessCacheName();
    public void set_ServerlessCacheName(string value);
    internal bool IsSetServerlessCacheName();
}
public class Amazon.ElastiCache.Model.DescribeServerlessCachesResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<ServerlessCache> _serverlessCaches;
    public string NextToken { get; public set; }
    public List`1<ServerlessCache> ServerlessCaches { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<ServerlessCache> get_ServerlessCaches();
    public void set_ServerlessCaches(List`1<ServerlessCache> value);
    internal bool IsSetServerlessCaches();
}
internal class Amazon.ElastiCache.Model.DescribeServiceUpdatesPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeServiceUpdatesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeServiceUpdatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ServiceUpdate> ServiceUpdates { get; }
    internal DescribeServiceUpdatesPaginator(IAmazonElastiCache client, DescribeServiceUpdatesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeServiceUpdatesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ServiceUpdate> get_ServiceUpdates();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeServiceUpdatesPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeServiceUpdatesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeServiceUpdatesResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeServiceUpdatesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeServiceUpdatesRequest : AmazonElastiCacheRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _serviceUpdateName;
    private List`1<string> _serviceUpdateStatus;
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string ServiceUpdateName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ServiceUpdateStatus { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ServiceUpdateName();
    public void set_ServiceUpdateName(string value);
    internal bool IsSetServiceUpdateName();
    public List`1<string> get_ServiceUpdateStatus();
    public void set_ServiceUpdateStatus(List`1<string> value);
    internal bool IsSetServiceUpdateStatus();
}
public class Amazon.ElastiCache.Model.DescribeServiceUpdatesResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ServiceUpdate> _serviceUpdates;
    public string Marker { get; public set; }
    public List`1<ServiceUpdate> ServiceUpdates { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ServiceUpdate> get_ServiceUpdates();
    public void set_ServiceUpdates(List`1<ServiceUpdate> value);
    internal bool IsSetServiceUpdates();
}
internal class Amazon.ElastiCache.Model.DescribeSnapshotsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeSnapshotsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeSnapshotsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Snapshot> Snapshots { get; }
    internal DescribeSnapshotsPaginator(IAmazonElastiCache client, DescribeSnapshotsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeSnapshotsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Snapshot> get_Snapshots();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeSnapshotsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeSnapshotsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeSnapshotsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeSnapshotsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeSnapshotsRequest : AmazonElastiCacheRequest {
    private string _cacheClusterId;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _replicationGroupId;
    private Nullable`1<bool> _showNodeGroupConfig;
    private string _snapshotName;
    private string _snapshotSource;
    public string CacheClusterId { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public Nullable`1<bool> ShowNodeGroupConfig { get; public set; }
    public string SnapshotName { get; public set; }
    public string SnapshotSource { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public Nullable`1<bool> get_ShowNodeGroupConfig();
    public void set_ShowNodeGroupConfig(Nullable`1<bool> value);
    internal bool IsSetShowNodeGroupConfig();
    public string get_SnapshotName();
    public void set_SnapshotName(string value);
    internal bool IsSetSnapshotName();
    public string get_SnapshotSource();
    public void set_SnapshotSource(string value);
    internal bool IsSetSnapshotSource();
}
public class Amazon.ElastiCache.Model.DescribeSnapshotsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<Snapshot> _snapshots;
    public string Marker { get; public set; }
    public List`1<Snapshot> Snapshots { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Snapshot> get_Snapshots();
    public void set_Snapshots(List`1<Snapshot> value);
    internal bool IsSetSnapshots();
}
internal class Amazon.ElastiCache.Model.DescribeUpdateActionsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeUpdateActionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeUpdateActionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<UpdateAction> UpdateActions { get; }
    internal DescribeUpdateActionsPaginator(IAmazonElastiCache client, DescribeUpdateActionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeUpdateActionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<UpdateAction> get_UpdateActions();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeUpdateActionsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeUpdateActionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeUpdateActionsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeUpdateActionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeUpdateActionsRequest : AmazonElastiCacheRequest {
    private List`1<string> _cacheClusterIds;
    private string _engine;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private List`1<string> _replicationGroupIds;
    private string _serviceUpdateName;
    private List`1<string> _serviceUpdateStatus;
    private TimeRangeFilter _serviceUpdateTimeRange;
    private Nullable`1<bool> _showNodeLevelUpdateStatus;
    private List`1<string> _updateActionStatus;
    [AWSPropertyAttribute]
public List`1<string> CacheClusterIds { get; public set; }
    public string Engine { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ReplicationGroupIds { get; public set; }
    public string ServiceUpdateName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ServiceUpdateStatus { get; public set; }
    public TimeRangeFilter ServiceUpdateTimeRange { get; public set; }
    public Nullable`1<bool> ShowNodeLevelUpdateStatus { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> UpdateActionStatus { get; public set; }
    public List`1<string> get_CacheClusterIds();
    public void set_CacheClusterIds(List`1<string> value);
    internal bool IsSetCacheClusterIds();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public List`1<string> get_ReplicationGroupIds();
    public void set_ReplicationGroupIds(List`1<string> value);
    internal bool IsSetReplicationGroupIds();
    public string get_ServiceUpdateName();
    public void set_ServiceUpdateName(string value);
    internal bool IsSetServiceUpdateName();
    public List`1<string> get_ServiceUpdateStatus();
    public void set_ServiceUpdateStatus(List`1<string> value);
    internal bool IsSetServiceUpdateStatus();
    public TimeRangeFilter get_ServiceUpdateTimeRange();
    public void set_ServiceUpdateTimeRange(TimeRangeFilter value);
    internal bool IsSetServiceUpdateTimeRange();
    public Nullable`1<bool> get_ShowNodeLevelUpdateStatus();
    public void set_ShowNodeLevelUpdateStatus(Nullable`1<bool> value);
    internal bool IsSetShowNodeLevelUpdateStatus();
    public List`1<string> get_UpdateActionStatus();
    public void set_UpdateActionStatus(List`1<string> value);
    internal bool IsSetUpdateActionStatus();
}
public class Amazon.ElastiCache.Model.DescribeUpdateActionsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<UpdateAction> _updateActions;
    public string Marker { get; public set; }
    public List`1<UpdateAction> UpdateActions { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<UpdateAction> get_UpdateActions();
    public void set_UpdateActions(List`1<UpdateAction> value);
    internal bool IsSetUpdateActions();
}
internal class Amazon.ElastiCache.Model.DescribeUserGroupsPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeUserGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeUserGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<UserGroup> UserGroups { get; }
    internal DescribeUserGroupsPaginator(IAmazonElastiCache client, DescribeUserGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeUserGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<UserGroup> get_UserGroups();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeUserGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeUserGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeUserGroupsResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeUserGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeUserGroupsRequest : AmazonElastiCacheRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _userGroupId;
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string UserGroupId { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
}
public class Amazon.ElastiCache.Model.DescribeUserGroupsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<UserGroup> _userGroups;
    public string Marker { get; public set; }
    public List`1<UserGroup> UserGroups { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<UserGroup> get_UserGroups();
    public void set_UserGroups(List`1<UserGroup> value);
    internal bool IsSetUserGroups();
}
internal class Amazon.ElastiCache.Model.DescribeUsersPaginator : object {
    private IAmazonElastiCache _client;
    private DescribeUsersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeUsersResponse> Responses { get; }
    public IPaginatedEnumerable`1<User> Users { get; }
    internal DescribeUsersPaginator(IAmazonElastiCache client, DescribeUsersRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeUsersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<User> get_Users();
    [AsyncIteratorStateMachineAttribute("Amazon.ElastiCache.Model.DescribeUsersPaginator/<Amazon-Runtime-IPaginator<Amazon-ElastiCache-Model-DescribeUsersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeUsersResponse> Amazon.Runtime.IPaginator<Amazon.ElastiCache.Model.DescribeUsersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElastiCache.Model.DescribeUsersRequest : AmazonElastiCacheRequest {
    private string _engine;
    private List`1<Filter> _filters;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _userId;
    public string Engine { get; public set; }
    public List`1<Filter> Filters { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string UserId { get; public set; }
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public List`1<Filter> get_Filters();
    public void set_Filters(List`1<Filter> value);
    internal bool IsSetFilters();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
}
public class Amazon.ElastiCache.Model.DescribeUsersResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<User> _users;
    public string Marker { get; public set; }
    public List`1<User> Users { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<User> get_Users();
    public void set_Users(List`1<User> value);
    internal bool IsSetUsers();
}
public class Amazon.ElastiCache.Model.DestinationDetails : object {
    private CloudWatchLogsDestinationDetails _cloudWatchLogsDetails;
    private KinesisFirehoseDestinationDetails _kinesisFirehoseDetails;
    public CloudWatchLogsDestinationDetails CloudWatchLogsDetails { get; public set; }
    public KinesisFirehoseDestinationDetails KinesisFirehoseDetails { get; public set; }
    public CloudWatchLogsDestinationDetails get_CloudWatchLogsDetails();
    public void set_CloudWatchLogsDetails(CloudWatchLogsDestinationDetails value);
    internal bool IsSetCloudWatchLogsDetails();
    public KinesisFirehoseDestinationDetails get_KinesisFirehoseDetails();
    public void set_KinesisFirehoseDetails(KinesisFirehoseDestinationDetails value);
    internal bool IsSetKinesisFirehoseDetails();
}
public class Amazon.ElastiCache.Model.DisassociateGlobalReplicationGroupRequest : AmazonElastiCacheRequest {
    private string _globalReplicationGroupId;
    private string _replicationGroupId;
    private string _replicationGroupRegion;
    [AWSPropertyAttribute]
public string GlobalReplicationGroupId { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupRegion { get; public set; }
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public string get_ReplicationGroupRegion();
    public void set_ReplicationGroupRegion(string value);
    internal bool IsSetReplicationGroupRegion();
}
public class Amazon.ElastiCache.Model.DisassociateGlobalReplicationGroupResponse : AmazonWebServiceResponse {
    private GlobalReplicationGroup _globalReplicationGroup;
    public GlobalReplicationGroup GlobalReplicationGroup { get; public set; }
    public GlobalReplicationGroup get_GlobalReplicationGroup();
    public void set_GlobalReplicationGroup(GlobalReplicationGroup value);
    internal bool IsSetGlobalReplicationGroup();
}
public class Amazon.ElastiCache.Model.DuplicateUserNameException : AmazonElastiCacheException {
    public DuplicateUserNameException(string message);
    public DuplicateUserNameException(string message, Exception innerException);
    public DuplicateUserNameException(Exception innerException);
    public DuplicateUserNameException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DuplicateUserNameException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.EC2SecurityGroup : object {
    private string _ec2SecurityGroupName;
    private string _ec2SecurityGroupOwnerId;
    private string _status;
    public string EC2SecurityGroupName { get; public set; }
    public string EC2SecurityGroupOwnerId { get; public set; }
    public string Status { get; public set; }
    public string get_EC2SecurityGroupName();
    public void set_EC2SecurityGroupName(string value);
    internal bool IsSetEC2SecurityGroupName();
    public string get_EC2SecurityGroupOwnerId();
    public void set_EC2SecurityGroupOwnerId(string value);
    internal bool IsSetEC2SecurityGroupOwnerId();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.ElastiCache.Model.ECPUPerSecond : object {
    private Nullable`1<int> _maximum;
    private Nullable`1<int> _minimum;
    public Nullable`1<int> Maximum { get; public set; }
    public Nullable`1<int> Minimum { get; public set; }
    public Nullable`1<int> get_Maximum();
    public void set_Maximum(Nullable`1<int> value);
    internal bool IsSetMaximum();
    public Nullable`1<int> get_Minimum();
    public void set_Minimum(Nullable`1<int> value);
    internal bool IsSetMinimum();
}
public class Amazon.ElastiCache.Model.ElastiCachePaginatorFactory : object {
    private IAmazonElastiCache client;
    internal ElastiCachePaginatorFactory(IAmazonElastiCache client);
    public sealed virtual IDescribeCacheClustersPaginator DescribeCacheClusters(DescribeCacheClustersRequest request);
    public sealed virtual IDescribeCacheEngineVersionsPaginator DescribeCacheEngineVersions(DescribeCacheEngineVersionsRequest request);
    public sealed virtual IDescribeCacheParameterGroupsPaginator DescribeCacheParameterGroups(DescribeCacheParameterGroupsRequest request);
    public sealed virtual IDescribeCacheParametersPaginator DescribeCacheParameters(DescribeCacheParametersRequest request);
    public sealed virtual IDescribeCacheSecurityGroupsPaginator DescribeCacheSecurityGroups(DescribeCacheSecurityGroupsRequest request);
    public sealed virtual IDescribeCacheSubnetGroupsPaginator DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request);
    public sealed virtual IDescribeEngineDefaultParametersPaginator DescribeEngineDefaultParameters(DescribeEngineDefaultParametersRequest request);
    public sealed virtual IDescribeEventsPaginator DescribeEvents(DescribeEventsRequest request);
    public sealed virtual IDescribeGlobalReplicationGroupsPaginator DescribeGlobalReplicationGroups(DescribeGlobalReplicationGroupsRequest request);
    public sealed virtual IDescribeReplicationGroupsPaginator DescribeReplicationGroups(DescribeReplicationGroupsRequest request);
    public sealed virtual IDescribeReservedCacheNodesPaginator DescribeReservedCacheNodes(DescribeReservedCacheNodesRequest request);
    public sealed virtual IDescribeReservedCacheNodesOfferingsPaginator DescribeReservedCacheNodesOfferings(DescribeReservedCacheNodesOfferingsRequest request);
    public sealed virtual IDescribeServerlessCachesPaginator DescribeServerlessCaches(DescribeServerlessCachesRequest request);
    public sealed virtual IDescribeServerlessCacheSnapshotsPaginator DescribeServerlessCacheSnapshots(DescribeServerlessCacheSnapshotsRequest request);
    public sealed virtual IDescribeServiceUpdatesPaginator DescribeServiceUpdates(DescribeServiceUpdatesRequest request);
    public sealed virtual IDescribeSnapshotsPaginator DescribeSnapshots(DescribeSnapshotsRequest request);
    public sealed virtual IDescribeUpdateActionsPaginator DescribeUpdateActions(DescribeUpdateActionsRequest request);
    public sealed virtual IDescribeUserGroupsPaginator DescribeUserGroups(DescribeUserGroupsRequest request);
    public sealed virtual IDescribeUsersPaginator DescribeUsers(DescribeUsersRequest request);
}
public class Amazon.ElastiCache.Model.Endpoint : object {
    private string _address;
    private Nullable`1<int> _port;
    public string Address { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    internal bool IsSetAddress();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
}
public class Amazon.ElastiCache.Model.EngineDefaults : object {
    private List`1<CacheNodeTypeSpecificParameter> _cacheNodeTypeSpecificParameters;
    private string _cacheParameterGroupFamily;
    private string _marker;
    private List`1<Parameter> _parameters;
    public List`1<CacheNodeTypeSpecificParameter> CacheNodeTypeSpecificParameters { get; public set; }
    public string CacheParameterGroupFamily { get; public set; }
    public string Marker { get; public set; }
    public List`1<Parameter> Parameters { get; public set; }
    public List`1<CacheNodeTypeSpecificParameter> get_CacheNodeTypeSpecificParameters();
    public void set_CacheNodeTypeSpecificParameters(List`1<CacheNodeTypeSpecificParameter> value);
    internal bool IsSetCacheNodeTypeSpecificParameters();
    public string get_CacheParameterGroupFamily();
    public void set_CacheParameterGroupFamily(string value);
    internal bool IsSetCacheParameterGroupFamily();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Parameter> get_Parameters();
    public void set_Parameters(List`1<Parameter> value);
    internal bool IsSetParameters();
}
public class Amazon.ElastiCache.Model.Event : object {
    private Nullable`1<DateTime> _date;
    private string _message;
    private string _sourceIdentifier;
    private SourceType _sourceType;
    public Nullable`1<DateTime> Date { get; public set; }
    public string Message { get; public set; }
    public string SourceIdentifier { get; public set; }
    public SourceType SourceType { get; public set; }
    public Nullable`1<DateTime> get_Date();
    public void set_Date(Nullable`1<DateTime> value);
    internal bool IsSetDate();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    internal bool IsSetSourceIdentifier();
    public SourceType get_SourceType();
    public void set_SourceType(SourceType value);
    internal bool IsSetSourceType();
}
public class Amazon.ElastiCache.Model.ExportServerlessCacheSnapshotRequest : AmazonElastiCacheRequest {
    private string _s3BucketName;
    private string _serverlessCacheSnapshotName;
    [AWSPropertyAttribute]
public string S3BucketName { get; public set; }
    [AWSPropertyAttribute]
public string ServerlessCacheSnapshotName { get; public set; }
    public string get_S3BucketName();
    public void set_S3BucketName(string value);
    internal bool IsSetS3BucketName();
    public string get_ServerlessCacheSnapshotName();
    public void set_ServerlessCacheSnapshotName(string value);
    internal bool IsSetServerlessCacheSnapshotName();
}
public class Amazon.ElastiCache.Model.ExportServerlessCacheSnapshotResponse : AmazonWebServiceResponse {
    private ServerlessCacheSnapshot _serverlessCacheSnapshot;
    public ServerlessCacheSnapshot ServerlessCacheSnapshot { get; public set; }
    public ServerlessCacheSnapshot get_ServerlessCacheSnapshot();
    public void set_ServerlessCacheSnapshot(ServerlessCacheSnapshot value);
    internal bool IsSetServerlessCacheSnapshot();
}
public class Amazon.ElastiCache.Model.FailoverGlobalReplicationGroupRequest : AmazonElastiCacheRequest {
    private string _globalReplicationGroupId;
    private string _primaryRegion;
    private string _primaryReplicationGroupId;
    [AWSPropertyAttribute]
public string GlobalReplicationGroupId { get; public set; }
    [AWSPropertyAttribute]
public string PrimaryRegion { get; public set; }
    [AWSPropertyAttribute]
public string PrimaryReplicationGroupId { get; public set; }
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
    public string get_PrimaryRegion();
    public void set_PrimaryRegion(string value);
    internal bool IsSetPrimaryRegion();
    public string get_PrimaryReplicationGroupId();
    public void set_PrimaryReplicationGroupId(string value);
    internal bool IsSetPrimaryReplicationGroupId();
}
public class Amazon.ElastiCache.Model.FailoverGlobalReplicationGroupResponse : AmazonWebServiceResponse {
    private GlobalReplicationGroup _globalReplicationGroup;
    public GlobalReplicationGroup GlobalReplicationGroup { get; public set; }
    public GlobalReplicationGroup get_GlobalReplicationGroup();
    public void set_GlobalReplicationGroup(GlobalReplicationGroup value);
    internal bool IsSetGlobalReplicationGroup();
}
public class Amazon.ElastiCache.Model.Filter : object {
    private string _name;
    private List`1<string> _values;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Values { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<string> get_Values();
    public void set_Values(List`1<string> value);
    internal bool IsSetValues();
}
public class Amazon.ElastiCache.Model.GlobalNodeGroup : object {
    private string _globalNodeGroupId;
    private string _slots;
    public string GlobalNodeGroupId { get; public set; }
    public string Slots { get; public set; }
    public string get_GlobalNodeGroupId();
    public void set_GlobalNodeGroupId(string value);
    internal bool IsSetGlobalNodeGroupId();
    public string get_Slots();
    public void set_Slots(string value);
    internal bool IsSetSlots();
}
public class Amazon.ElastiCache.Model.GlobalReplicationGroup : object {
    private string _arn;
    private Nullable`1<bool> _atRestEncryptionEnabled;
    private Nullable`1<bool> _authTokenEnabled;
    private string _cacheNodeType;
    private Nullable`1<bool> _clusterEnabled;
    private string _engine;
    private string _engineVersion;
    private List`1<GlobalNodeGroup> _globalNodeGroups;
    private string _globalReplicationGroupDescription;
    private string _globalReplicationGroupId;
    private List`1<GlobalReplicationGroupMember> _members;
    private string _status;
    private Nullable`1<bool> _transitEncryptionEnabled;
    public string ARN { get; public set; }
    public Nullable`1<bool> AtRestEncryptionEnabled { get; public set; }
    public Nullable`1<bool> AuthTokenEnabled { get; public set; }
    public string CacheNodeType { get; public set; }
    public Nullable`1<bool> ClusterEnabled { get; public set; }
    public string Engine { get; public set; }
    public string EngineVersion { get; public set; }
    public List`1<GlobalNodeGroup> GlobalNodeGroups { get; public set; }
    public string GlobalReplicationGroupDescription { get; public set; }
    public string GlobalReplicationGroupId { get; public set; }
    public List`1<GlobalReplicationGroupMember> Members { get; public set; }
    public string Status { get; public set; }
    public Nullable`1<bool> TransitEncryptionEnabled { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public Nullable`1<bool> get_AtRestEncryptionEnabled();
    public void set_AtRestEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetAtRestEncryptionEnabled();
    public Nullable`1<bool> get_AuthTokenEnabled();
    public void set_AuthTokenEnabled(Nullable`1<bool> value);
    internal bool IsSetAuthTokenEnabled();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public Nullable`1<bool> get_ClusterEnabled();
    public void set_ClusterEnabled(Nullable`1<bool> value);
    internal bool IsSetClusterEnabled();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public List`1<GlobalNodeGroup> get_GlobalNodeGroups();
    public void set_GlobalNodeGroups(List`1<GlobalNodeGroup> value);
    internal bool IsSetGlobalNodeGroups();
    public string get_GlobalReplicationGroupDescription();
    public void set_GlobalReplicationGroupDescription(string value);
    internal bool IsSetGlobalReplicationGroupDescription();
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
    public List`1<GlobalReplicationGroupMember> get_Members();
    public void set_Members(List`1<GlobalReplicationGroupMember> value);
    internal bool IsSetMembers();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public Nullable`1<bool> get_TransitEncryptionEnabled();
    public void set_TransitEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetTransitEncryptionEnabled();
}
public class Amazon.ElastiCache.Model.GlobalReplicationGroupAlreadyExistsException : AmazonElastiCacheException {
    public GlobalReplicationGroupAlreadyExistsException(string message);
    public GlobalReplicationGroupAlreadyExistsException(string message, Exception innerException);
    public GlobalReplicationGroupAlreadyExistsException(Exception innerException);
    public GlobalReplicationGroupAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public GlobalReplicationGroupAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.GlobalReplicationGroupInfo : object {
    private string _globalReplicationGroupId;
    private string _globalReplicationGroupMemberRole;
    public string GlobalReplicationGroupId { get; public set; }
    public string GlobalReplicationGroupMemberRole { get; public set; }
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
    public string get_GlobalReplicationGroupMemberRole();
    public void set_GlobalReplicationGroupMemberRole(string value);
    internal bool IsSetGlobalReplicationGroupMemberRole();
}
public class Amazon.ElastiCache.Model.GlobalReplicationGroupMember : object {
    private AutomaticFailoverStatus _automaticFailover;
    private string _replicationGroupId;
    private string _replicationGroupRegion;
    private string _role;
    private string _status;
    public AutomaticFailoverStatus AutomaticFailover { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public string ReplicationGroupRegion { get; public set; }
    public string Role { get; public set; }
    public string Status { get; public set; }
    public AutomaticFailoverStatus get_AutomaticFailover();
    public void set_AutomaticFailover(AutomaticFailoverStatus value);
    internal bool IsSetAutomaticFailover();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public string get_ReplicationGroupRegion();
    public void set_ReplicationGroupRegion(string value);
    internal bool IsSetReplicationGroupRegion();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.ElastiCache.Model.GlobalReplicationGroupNotFoundException : AmazonElastiCacheException {
    public GlobalReplicationGroupNotFoundException(string message);
    public GlobalReplicationGroupNotFoundException(string message, Exception innerException);
    public GlobalReplicationGroupNotFoundException(Exception innerException);
    public GlobalReplicationGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public GlobalReplicationGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public interface Amazon.ElastiCache.Model.IDescribeCacheClustersPaginator {
    public IPaginatedEnumerable`1<DescribeCacheClustersResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheCluster> CacheClusters { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeCacheClustersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<CacheCluster> get_CacheClusters();
}
public interface Amazon.ElastiCache.Model.IDescribeCacheEngineVersionsPaginator {
    public IPaginatedEnumerable`1<DescribeCacheEngineVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheEngineVersion> CacheEngineVersions { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeCacheEngineVersionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<CacheEngineVersion> get_CacheEngineVersions();
}
public interface Amazon.ElastiCache.Model.IDescribeCacheParameterGroupsPaginator {
    public IPaginatedEnumerable`1<DescribeCacheParameterGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheParameterGroup> CacheParameterGroups { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeCacheParameterGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<CacheParameterGroup> get_CacheParameterGroups();
}
public interface Amazon.ElastiCache.Model.IDescribeCacheParametersPaginator {
    public IPaginatedEnumerable`1<DescribeCacheParametersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Parameter> Parameters { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeCacheParametersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Parameter> get_Parameters();
}
public interface Amazon.ElastiCache.Model.IDescribeCacheSecurityGroupsPaginator {
    public IPaginatedEnumerable`1<DescribeCacheSecurityGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheSecurityGroup> CacheSecurityGroups { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeCacheSecurityGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<CacheSecurityGroup> get_CacheSecurityGroups();
}
public interface Amazon.ElastiCache.Model.IDescribeCacheSubnetGroupsPaginator {
    public IPaginatedEnumerable`1<DescribeCacheSubnetGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CacheSubnetGroup> CacheSubnetGroups { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeCacheSubnetGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<CacheSubnetGroup> get_CacheSubnetGroups();
}
public interface Amazon.ElastiCache.Model.IDescribeEngineDefaultParametersPaginator {
    public IPaginatedEnumerable`1<DescribeEngineDefaultParametersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Parameter> Parameters { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeEngineDefaultParametersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Parameter> get_Parameters();
}
public interface Amazon.ElastiCache.Model.IDescribeEventsPaginator {
    public IPaginatedEnumerable`1<DescribeEventsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Event> Events { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeEventsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Event> get_Events();
}
public interface Amazon.ElastiCache.Model.IDescribeGlobalReplicationGroupsPaginator {
    public IPaginatedEnumerable`1<DescribeGlobalReplicationGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<GlobalReplicationGroup> GlobalReplicationGroups { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeGlobalReplicationGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<GlobalReplicationGroup> get_GlobalReplicationGroups();
}
public interface Amazon.ElastiCache.Model.IDescribeReplicationGroupsPaginator {
    public IPaginatedEnumerable`1<DescribeReplicationGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReplicationGroup> ReplicationGroups { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeReplicationGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ReplicationGroup> get_ReplicationGroups();
}
public interface Amazon.ElastiCache.Model.IDescribeReservedCacheNodesOfferingsPaginator {
    public IPaginatedEnumerable`1<DescribeReservedCacheNodesOfferingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedCacheNodesOffering> ReservedCacheNodesOfferings { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeReservedCacheNodesOfferingsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ReservedCacheNodesOffering> get_ReservedCacheNodesOfferings();
}
public interface Amazon.ElastiCache.Model.IDescribeReservedCacheNodesPaginator {
    public IPaginatedEnumerable`1<DescribeReservedCacheNodesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedCacheNode> ReservedCacheNodes { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeReservedCacheNodesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ReservedCacheNode> get_ReservedCacheNodes();
}
public interface Amazon.ElastiCache.Model.IDescribeServerlessCacheSnapshotsPaginator {
    public IPaginatedEnumerable`1<DescribeServerlessCacheSnapshotsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ServerlessCacheSnapshot> ServerlessCacheSnapshots { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeServerlessCacheSnapshotsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ServerlessCacheSnapshot> get_ServerlessCacheSnapshots();
}
public interface Amazon.ElastiCache.Model.IDescribeServerlessCachesPaginator {
    public IPaginatedEnumerable`1<DescribeServerlessCachesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ServerlessCache> ServerlessCaches { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeServerlessCachesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ServerlessCache> get_ServerlessCaches();
}
public interface Amazon.ElastiCache.Model.IDescribeServiceUpdatesPaginator {
    public IPaginatedEnumerable`1<DescribeServiceUpdatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ServiceUpdate> ServiceUpdates { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeServiceUpdatesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ServiceUpdate> get_ServiceUpdates();
}
public interface Amazon.ElastiCache.Model.IDescribeSnapshotsPaginator {
    public IPaginatedEnumerable`1<DescribeSnapshotsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Snapshot> Snapshots { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeSnapshotsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Snapshot> get_Snapshots();
}
public interface Amazon.ElastiCache.Model.IDescribeUpdateActionsPaginator {
    public IPaginatedEnumerable`1<DescribeUpdateActionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<UpdateAction> UpdateActions { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeUpdateActionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<UpdateAction> get_UpdateActions();
}
public interface Amazon.ElastiCache.Model.IDescribeUserGroupsPaginator {
    public IPaginatedEnumerable`1<DescribeUserGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<UserGroup> UserGroups { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeUserGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<UserGroup> get_UserGroups();
}
public interface Amazon.ElastiCache.Model.IDescribeUsersPaginator {
    public IPaginatedEnumerable`1<DescribeUsersResponse> Responses { get; }
    public IPaginatedEnumerable`1<User> Users { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeUsersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<User> get_Users();
}
public interface Amazon.ElastiCache.Model.IElastiCachePaginatorFactory {
    public abstract virtual IDescribeCacheClustersPaginator DescribeCacheClusters(DescribeCacheClustersRequest request);
    public abstract virtual IDescribeCacheEngineVersionsPaginator DescribeCacheEngineVersions(DescribeCacheEngineVersionsRequest request);
    public abstract virtual IDescribeCacheParameterGroupsPaginator DescribeCacheParameterGroups(DescribeCacheParameterGroupsRequest request);
    public abstract virtual IDescribeCacheParametersPaginator DescribeCacheParameters(DescribeCacheParametersRequest request);
    public abstract virtual IDescribeCacheSecurityGroupsPaginator DescribeCacheSecurityGroups(DescribeCacheSecurityGroupsRequest request);
    public abstract virtual IDescribeCacheSubnetGroupsPaginator DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request);
    public abstract virtual IDescribeEngineDefaultParametersPaginator DescribeEngineDefaultParameters(DescribeEngineDefaultParametersRequest request);
    public abstract virtual IDescribeEventsPaginator DescribeEvents(DescribeEventsRequest request);
    public abstract virtual IDescribeGlobalReplicationGroupsPaginator DescribeGlobalReplicationGroups(DescribeGlobalReplicationGroupsRequest request);
    public abstract virtual IDescribeReplicationGroupsPaginator DescribeReplicationGroups(DescribeReplicationGroupsRequest request);
    public abstract virtual IDescribeReservedCacheNodesPaginator DescribeReservedCacheNodes(DescribeReservedCacheNodesRequest request);
    public abstract virtual IDescribeReservedCacheNodesOfferingsPaginator DescribeReservedCacheNodesOfferings(DescribeReservedCacheNodesOfferingsRequest request);
    public abstract virtual IDescribeServerlessCachesPaginator DescribeServerlessCaches(DescribeServerlessCachesRequest request);
    public abstract virtual IDescribeServerlessCacheSnapshotsPaginator DescribeServerlessCacheSnapshots(DescribeServerlessCacheSnapshotsRequest request);
    public abstract virtual IDescribeServiceUpdatesPaginator DescribeServiceUpdates(DescribeServiceUpdatesRequest request);
    public abstract virtual IDescribeSnapshotsPaginator DescribeSnapshots(DescribeSnapshotsRequest request);
    public abstract virtual IDescribeUpdateActionsPaginator DescribeUpdateActions(DescribeUpdateActionsRequest request);
    public abstract virtual IDescribeUserGroupsPaginator DescribeUserGroups(DescribeUserGroupsRequest request);
    public abstract virtual IDescribeUsersPaginator DescribeUsers(DescribeUsersRequest request);
}
public class Amazon.ElastiCache.Model.IncreaseNodeGroupsInGlobalReplicationGroupRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _applyImmediately;
    private string _globalReplicationGroupId;
    private Nullable`1<int> _nodeGroupCount;
    private List`1<RegionalConfiguration> _regionalConfigurations;
    [AWSPropertyAttribute]
public Nullable`1<bool> ApplyImmediately { get; public set; }
    [AWSPropertyAttribute]
public string GlobalReplicationGroupId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> NodeGroupCount { get; public set; }
    public List`1<RegionalConfiguration> RegionalConfigurations { get; public set; }
    public Nullable`1<bool> get_ApplyImmediately();
    public void set_ApplyImmediately(Nullable`1<bool> value);
    internal bool IsSetApplyImmediately();
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
    public Nullable`1<int> get_NodeGroupCount();
    public void set_NodeGroupCount(Nullable`1<int> value);
    internal bool IsSetNodeGroupCount();
    public List`1<RegionalConfiguration> get_RegionalConfigurations();
    public void set_RegionalConfigurations(List`1<RegionalConfiguration> value);
    internal bool IsSetRegionalConfigurations();
}
public class Amazon.ElastiCache.Model.IncreaseNodeGroupsInGlobalReplicationGroupResponse : AmazonWebServiceResponse {
    private GlobalReplicationGroup _globalReplicationGroup;
    public GlobalReplicationGroup GlobalReplicationGroup { get; public set; }
    public GlobalReplicationGroup get_GlobalReplicationGroup();
    public void set_GlobalReplicationGroup(GlobalReplicationGroup value);
    internal bool IsSetGlobalReplicationGroup();
}
public class Amazon.ElastiCache.Model.IncreaseReplicaCountRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _applyImmediately;
    private Nullable`1<int> _newReplicaCount;
    private List`1<ConfigureShard> _replicaConfiguration;
    private string _replicationGroupId;
    [AWSPropertyAttribute]
public Nullable`1<bool> ApplyImmediately { get; public set; }
    public Nullable`1<int> NewReplicaCount { get; public set; }
    public List`1<ConfigureShard> ReplicaConfiguration { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public Nullable`1<bool> get_ApplyImmediately();
    public void set_ApplyImmediately(Nullable`1<bool> value);
    internal bool IsSetApplyImmediately();
    public Nullable`1<int> get_NewReplicaCount();
    public void set_NewReplicaCount(Nullable`1<int> value);
    internal bool IsSetNewReplicaCount();
    public List`1<ConfigureShard> get_ReplicaConfiguration();
    public void set_ReplicaConfiguration(List`1<ConfigureShard> value);
    internal bool IsSetReplicaConfiguration();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
}
public class Amazon.ElastiCache.Model.IncreaseReplicaCountResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.InsufficientCacheClusterCapacityException : AmazonElastiCacheException {
    public InsufficientCacheClusterCapacityException(string message);
    public InsufficientCacheClusterCapacityException(string message, Exception innerException);
    public InsufficientCacheClusterCapacityException(Exception innerException);
    public InsufficientCacheClusterCapacityException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InsufficientCacheClusterCapacityException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.AddTagsToResourceRequestMarshaller : object {
    private static AddTagsToResourceRequestMarshaller _instance;
    public static AddTagsToResourceRequestMarshaller Instance { get; }
    private static AddTagsToResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AddTagsToResourceRequest publicRequest);
    internal static AddTagsToResourceRequestMarshaller GetInstance();
    public static AddTagsToResourceRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.AddTagsToResourceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AddTagsToResourceResponseUnmarshaller _instance;
    public static AddTagsToResourceResponseUnmarshaller Instance { get; }
    private static AddTagsToResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AddTagsToResourceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AddTagsToResourceResponseUnmarshaller GetInstance();
    public static AddTagsToResourceResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.APICallRateForCustomerExceededExceptionUnmarshaller : object {
    private static APICallRateForCustomerExceededExceptionUnmarshaller _instance;
    public static APICallRateForCustomerExceededExceptionUnmarshaller Instance { get; }
    private static APICallRateForCustomerExceededExceptionUnmarshaller();
    public sealed virtual APICallRateForCustomerExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual APICallRateForCustomerExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static APICallRateForCustomerExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.AuthenticationUnmarshaller : object {
    private static AuthenticationUnmarshaller _instance;
    public static AuthenticationUnmarshaller Instance { get; }
    private static AuthenticationUnmarshaller();
    public sealed virtual Authentication Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Authentication Unmarshall(JsonUnmarshallerContext context);
    public static AuthenticationUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.AuthorizationAlreadyExistsExceptionUnmarshaller : object {
    private static AuthorizationAlreadyExistsExceptionUnmarshaller _instance;
    public static AuthorizationAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static AuthorizationAlreadyExistsExceptionUnmarshaller();
    public sealed virtual AuthorizationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthorizationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AuthorizationAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.AuthorizationNotFoundExceptionUnmarshaller : object {
    private static AuthorizationNotFoundExceptionUnmarshaller _instance;
    public static AuthorizationNotFoundExceptionUnmarshaller Instance { get; }
    private static AuthorizationNotFoundExceptionUnmarshaller();
    public sealed virtual AuthorizationNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthorizationNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AuthorizationNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.AuthorizeCacheSecurityGroupIngressRequestMarshaller : object {
    private static AuthorizeCacheSecurityGroupIngressRequestMarshaller _instance;
    public static AuthorizeCacheSecurityGroupIngressRequestMarshaller Instance { get; }
    private static AuthorizeCacheSecurityGroupIngressRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AuthorizeCacheSecurityGroupIngressRequest publicRequest);
    internal static AuthorizeCacheSecurityGroupIngressRequestMarshaller GetInstance();
    public static AuthorizeCacheSecurityGroupIngressRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.AuthorizeCacheSecurityGroupIngressResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AuthorizeCacheSecurityGroupIngressResponseUnmarshaller _instance;
    public static AuthorizeCacheSecurityGroupIngressResponseUnmarshaller Instance { get; }
    private static AuthorizeCacheSecurityGroupIngressResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AuthorizeCacheSecurityGroupIngressResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AuthorizeCacheSecurityGroupIngressResponseUnmarshaller GetInstance();
    public static AuthorizeCacheSecurityGroupIngressResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.AvailabilityZoneUnmarshaller : object {
    private static AvailabilityZoneUnmarshaller _instance;
    public static AvailabilityZoneUnmarshaller Instance { get; }
    private static AvailabilityZoneUnmarshaller();
    public sealed virtual AvailabilityZone Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AvailabilityZone Unmarshall(JsonUnmarshallerContext context);
    public static AvailabilityZoneUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.BatchApplyUpdateActionRequestMarshaller : object {
    private static BatchApplyUpdateActionRequestMarshaller _instance;
    public static BatchApplyUpdateActionRequestMarshaller Instance { get; }
    private static BatchApplyUpdateActionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(BatchApplyUpdateActionRequest publicRequest);
    internal static BatchApplyUpdateActionRequestMarshaller GetInstance();
    public static BatchApplyUpdateActionRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.BatchApplyUpdateActionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static BatchApplyUpdateActionResponseUnmarshaller _instance;
    public static BatchApplyUpdateActionResponseUnmarshaller Instance { get; }
    private static BatchApplyUpdateActionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, BatchApplyUpdateActionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static BatchApplyUpdateActionResponseUnmarshaller GetInstance();
    public static BatchApplyUpdateActionResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.BatchStopUpdateActionRequestMarshaller : object {
    private static BatchStopUpdateActionRequestMarshaller _instance;
    public static BatchStopUpdateActionRequestMarshaller Instance { get; }
    private static BatchStopUpdateActionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(BatchStopUpdateActionRequest publicRequest);
    internal static BatchStopUpdateActionRequestMarshaller GetInstance();
    public static BatchStopUpdateActionRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.BatchStopUpdateActionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static BatchStopUpdateActionResponseUnmarshaller _instance;
    public static BatchStopUpdateActionResponseUnmarshaller Instance { get; }
    private static BatchStopUpdateActionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, BatchStopUpdateActionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static BatchStopUpdateActionResponseUnmarshaller GetInstance();
    public static BatchStopUpdateActionResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheClusterAlreadyExistsExceptionUnmarshaller : object {
    private static CacheClusterAlreadyExistsExceptionUnmarshaller _instance;
    public static CacheClusterAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static CacheClusterAlreadyExistsExceptionUnmarshaller();
    public sealed virtual CacheClusterAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheClusterAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheClusterAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheClusterNotFoundExceptionUnmarshaller : object {
    private static CacheClusterNotFoundExceptionUnmarshaller _instance;
    public static CacheClusterNotFoundExceptionUnmarshaller Instance { get; }
    private static CacheClusterNotFoundExceptionUnmarshaller();
    public sealed virtual CacheClusterNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheClusterNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheClusterNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheClusterUnmarshaller : object {
    private static CacheClusterUnmarshaller _instance;
    public static CacheClusterUnmarshaller Instance { get; }
    private static CacheClusterUnmarshaller();
    public sealed virtual CacheCluster Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheCluster Unmarshall(JsonUnmarshallerContext context);
    public static CacheClusterUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheEngineVersionUnmarshaller : object {
    private static CacheEngineVersionUnmarshaller _instance;
    public static CacheEngineVersionUnmarshaller Instance { get; }
    private static CacheEngineVersionUnmarshaller();
    public sealed virtual CacheEngineVersion Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheEngineVersion Unmarshall(JsonUnmarshallerContext context);
    public static CacheEngineVersionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheNodeTypeSpecificParameterUnmarshaller : object {
    private static CacheNodeTypeSpecificParameterUnmarshaller _instance;
    public static CacheNodeTypeSpecificParameterUnmarshaller Instance { get; }
    private static CacheNodeTypeSpecificParameterUnmarshaller();
    public sealed virtual CacheNodeTypeSpecificParameter Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheNodeTypeSpecificParameter Unmarshall(JsonUnmarshallerContext context);
    public static CacheNodeTypeSpecificParameterUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheNodeTypeSpecificValueUnmarshaller : object {
    private static CacheNodeTypeSpecificValueUnmarshaller _instance;
    public static CacheNodeTypeSpecificValueUnmarshaller Instance { get; }
    private static CacheNodeTypeSpecificValueUnmarshaller();
    public sealed virtual CacheNodeTypeSpecificValue Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheNodeTypeSpecificValue Unmarshall(JsonUnmarshallerContext context);
    public static CacheNodeTypeSpecificValueUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheNodeUnmarshaller : object {
    private static CacheNodeUnmarshaller _instance;
    public static CacheNodeUnmarshaller Instance { get; }
    private static CacheNodeUnmarshaller();
    public sealed virtual CacheNode Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheNode Unmarshall(JsonUnmarshallerContext context);
    public static CacheNodeUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheNodeUpdateStatusUnmarshaller : object {
    private static CacheNodeUpdateStatusUnmarshaller _instance;
    public static CacheNodeUpdateStatusUnmarshaller Instance { get; }
    private static CacheNodeUpdateStatusUnmarshaller();
    public sealed virtual CacheNodeUpdateStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheNodeUpdateStatus Unmarshall(JsonUnmarshallerContext context);
    public static CacheNodeUpdateStatusUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheParameterGroupAlreadyExistsExceptionUnmarshaller : object {
    private static CacheParameterGroupAlreadyExistsExceptionUnmarshaller _instance;
    public static CacheParameterGroupAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static CacheParameterGroupAlreadyExistsExceptionUnmarshaller();
    public sealed virtual CacheParameterGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheParameterGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheParameterGroupAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheParameterGroupNotFoundExceptionUnmarshaller : object {
    private static CacheParameterGroupNotFoundExceptionUnmarshaller _instance;
    public static CacheParameterGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static CacheParameterGroupNotFoundExceptionUnmarshaller();
    public sealed virtual CacheParameterGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheParameterGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheParameterGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheParameterGroupQuotaExceededExceptionUnmarshaller : object {
    private static CacheParameterGroupQuotaExceededExceptionUnmarshaller _instance;
    public static CacheParameterGroupQuotaExceededExceptionUnmarshaller Instance { get; }
    private static CacheParameterGroupQuotaExceededExceptionUnmarshaller();
    public sealed virtual CacheParameterGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheParameterGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheParameterGroupQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheParameterGroupStatusUnmarshaller : object {
    private static CacheParameterGroupStatusUnmarshaller _instance;
    public static CacheParameterGroupStatusUnmarshaller Instance { get; }
    private static CacheParameterGroupStatusUnmarshaller();
    public sealed virtual CacheParameterGroupStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheParameterGroupStatus Unmarshall(JsonUnmarshallerContext context);
    public static CacheParameterGroupStatusUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheParameterGroupUnmarshaller : object {
    private static CacheParameterGroupUnmarshaller _instance;
    public static CacheParameterGroupUnmarshaller Instance { get; }
    private static CacheParameterGroupUnmarshaller();
    public sealed virtual CacheParameterGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheParameterGroup Unmarshall(JsonUnmarshallerContext context);
    public static CacheParameterGroupUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSecurityGroupAlreadyExistsExceptionUnmarshaller : object {
    private static CacheSecurityGroupAlreadyExistsExceptionUnmarshaller _instance;
    public static CacheSecurityGroupAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static CacheSecurityGroupAlreadyExistsExceptionUnmarshaller();
    public sealed virtual CacheSecurityGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSecurityGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheSecurityGroupAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSecurityGroupMembershipUnmarshaller : object {
    private static CacheSecurityGroupMembershipUnmarshaller _instance;
    public static CacheSecurityGroupMembershipUnmarshaller Instance { get; }
    private static CacheSecurityGroupMembershipUnmarshaller();
    public sealed virtual CacheSecurityGroupMembership Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSecurityGroupMembership Unmarshall(JsonUnmarshallerContext context);
    public static CacheSecurityGroupMembershipUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSecurityGroupNotFoundExceptionUnmarshaller : object {
    private static CacheSecurityGroupNotFoundExceptionUnmarshaller _instance;
    public static CacheSecurityGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static CacheSecurityGroupNotFoundExceptionUnmarshaller();
    public sealed virtual CacheSecurityGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSecurityGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheSecurityGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSecurityGroupQuotaExceededExceptionUnmarshaller : object {
    private static CacheSecurityGroupQuotaExceededExceptionUnmarshaller _instance;
    public static CacheSecurityGroupQuotaExceededExceptionUnmarshaller Instance { get; }
    private static CacheSecurityGroupQuotaExceededExceptionUnmarshaller();
    public sealed virtual CacheSecurityGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSecurityGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheSecurityGroupQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSecurityGroupUnmarshaller : object {
    private static CacheSecurityGroupUnmarshaller _instance;
    public static CacheSecurityGroupUnmarshaller Instance { get; }
    private static CacheSecurityGroupUnmarshaller();
    public sealed virtual CacheSecurityGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSecurityGroup Unmarshall(JsonUnmarshallerContext context);
    public static CacheSecurityGroupUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSubnetGroupAlreadyExistsExceptionUnmarshaller : object {
    private static CacheSubnetGroupAlreadyExistsExceptionUnmarshaller _instance;
    public static CacheSubnetGroupAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static CacheSubnetGroupAlreadyExistsExceptionUnmarshaller();
    public sealed virtual CacheSubnetGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSubnetGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheSubnetGroupAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSubnetGroupInUseExceptionUnmarshaller : object {
    private static CacheSubnetGroupInUseExceptionUnmarshaller _instance;
    public static CacheSubnetGroupInUseExceptionUnmarshaller Instance { get; }
    private static CacheSubnetGroupInUseExceptionUnmarshaller();
    public sealed virtual CacheSubnetGroupInUseException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSubnetGroupInUseException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheSubnetGroupInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSubnetGroupNotFoundExceptionUnmarshaller : object {
    private static CacheSubnetGroupNotFoundExceptionUnmarshaller _instance;
    public static CacheSubnetGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static CacheSubnetGroupNotFoundExceptionUnmarshaller();
    public sealed virtual CacheSubnetGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSubnetGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheSubnetGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSubnetGroupQuotaExceededExceptionUnmarshaller : object {
    private static CacheSubnetGroupQuotaExceededExceptionUnmarshaller _instance;
    public static CacheSubnetGroupQuotaExceededExceptionUnmarshaller Instance { get; }
    private static CacheSubnetGroupQuotaExceededExceptionUnmarshaller();
    public sealed virtual CacheSubnetGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSubnetGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheSubnetGroupQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSubnetGroupUnmarshaller : object {
    private static CacheSubnetGroupUnmarshaller _instance;
    public static CacheSubnetGroupUnmarshaller Instance { get; }
    private static CacheSubnetGroupUnmarshaller();
    public sealed virtual CacheSubnetGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSubnetGroup Unmarshall(JsonUnmarshallerContext context);
    public static CacheSubnetGroupUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheSubnetQuotaExceededExceptionUnmarshaller : object {
    private static CacheSubnetQuotaExceededExceptionUnmarshaller _instance;
    public static CacheSubnetQuotaExceededExceptionUnmarshaller Instance { get; }
    private static CacheSubnetQuotaExceededExceptionUnmarshaller();
    public sealed virtual CacheSubnetQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheSubnetQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CacheSubnetQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CacheUsageLimitsUnmarshaller : object {
    private static CacheUsageLimitsUnmarshaller _instance;
    public static CacheUsageLimitsUnmarshaller Instance { get; }
    private static CacheUsageLimitsUnmarshaller();
    public sealed virtual CacheUsageLimits Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CacheUsageLimits Unmarshall(JsonUnmarshallerContext context);
    public static CacheUsageLimitsUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CloudWatchLogsDestinationDetailsUnmarshaller : object {
    private static CloudWatchLogsDestinationDetailsUnmarshaller _instance;
    public static CloudWatchLogsDestinationDetailsUnmarshaller Instance { get; }
    private static CloudWatchLogsDestinationDetailsUnmarshaller();
    public sealed virtual CloudWatchLogsDestinationDetails Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CloudWatchLogsDestinationDetails Unmarshall(JsonUnmarshallerContext context);
    public static CloudWatchLogsDestinationDetailsUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ClusterQuotaForCustomerExceededExceptionUnmarshaller : object {
    private static ClusterQuotaForCustomerExceededExceptionUnmarshaller _instance;
    public static ClusterQuotaForCustomerExceededExceptionUnmarshaller Instance { get; }
    private static ClusterQuotaForCustomerExceededExceptionUnmarshaller();
    public sealed virtual ClusterQuotaForCustomerExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterQuotaForCustomerExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterQuotaForCustomerExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CompleteMigrationRequestMarshaller : object {
    private static CompleteMigrationRequestMarshaller _instance;
    public static CompleteMigrationRequestMarshaller Instance { get; }
    private static CompleteMigrationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CompleteMigrationRequest publicRequest);
    internal static CompleteMigrationRequestMarshaller GetInstance();
    public static CompleteMigrationRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CompleteMigrationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CompleteMigrationResponseUnmarshaller _instance;
    public static CompleteMigrationResponseUnmarshaller Instance { get; }
    private static CompleteMigrationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CompleteMigrationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CompleteMigrationResponseUnmarshaller GetInstance();
    public static CompleteMigrationResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CopyServerlessCacheSnapshotRequestMarshaller : object {
    private static CopyServerlessCacheSnapshotRequestMarshaller _instance;
    public static CopyServerlessCacheSnapshotRequestMarshaller Instance { get; }
    private static CopyServerlessCacheSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CopyServerlessCacheSnapshotRequest publicRequest);
    internal static CopyServerlessCacheSnapshotRequestMarshaller GetInstance();
    public static CopyServerlessCacheSnapshotRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CopyServerlessCacheSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CopyServerlessCacheSnapshotResponseUnmarshaller _instance;
    public static CopyServerlessCacheSnapshotResponseUnmarshaller Instance { get; }
    private static CopyServerlessCacheSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CopyServerlessCacheSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CopyServerlessCacheSnapshotResponseUnmarshaller GetInstance();
    public static CopyServerlessCacheSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CopySnapshotRequestMarshaller : object {
    private static CopySnapshotRequestMarshaller _instance;
    public static CopySnapshotRequestMarshaller Instance { get; }
    private static CopySnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CopySnapshotRequest publicRequest);
    internal static CopySnapshotRequestMarshaller GetInstance();
    public static CopySnapshotRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CopySnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CopySnapshotResponseUnmarshaller _instance;
    public static CopySnapshotResponseUnmarshaller Instance { get; }
    private static CopySnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CopySnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CopySnapshotResponseUnmarshaller GetInstance();
    public static CopySnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateCacheClusterRequestMarshaller : object {
    private static CreateCacheClusterRequestMarshaller _instance;
    public static CreateCacheClusterRequestMarshaller Instance { get; }
    private static CreateCacheClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateCacheClusterRequest publicRequest);
    internal static CreateCacheClusterRequestMarshaller GetInstance();
    public static CreateCacheClusterRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateCacheClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateCacheClusterResponseUnmarshaller _instance;
    public static CreateCacheClusterResponseUnmarshaller Instance { get; }
    private static CreateCacheClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateCacheClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateCacheClusterResponseUnmarshaller GetInstance();
    public static CreateCacheClusterResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateCacheParameterGroupRequestMarshaller : object {
    private static CreateCacheParameterGroupRequestMarshaller _instance;
    public static CreateCacheParameterGroupRequestMarshaller Instance { get; }
    private static CreateCacheParameterGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateCacheParameterGroupRequest publicRequest);
    internal static CreateCacheParameterGroupRequestMarshaller GetInstance();
    public static CreateCacheParameterGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateCacheParameterGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateCacheParameterGroupResponseUnmarshaller _instance;
    public static CreateCacheParameterGroupResponseUnmarshaller Instance { get; }
    private static CreateCacheParameterGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateCacheParameterGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateCacheParameterGroupResponseUnmarshaller GetInstance();
    public static CreateCacheParameterGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateCacheSecurityGroupRequestMarshaller : object {
    private static CreateCacheSecurityGroupRequestMarshaller _instance;
    public static CreateCacheSecurityGroupRequestMarshaller Instance { get; }
    private static CreateCacheSecurityGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateCacheSecurityGroupRequest publicRequest);
    internal static CreateCacheSecurityGroupRequestMarshaller GetInstance();
    public static CreateCacheSecurityGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateCacheSecurityGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateCacheSecurityGroupResponseUnmarshaller _instance;
    public static CreateCacheSecurityGroupResponseUnmarshaller Instance { get; }
    private static CreateCacheSecurityGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateCacheSecurityGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateCacheSecurityGroupResponseUnmarshaller GetInstance();
    public static CreateCacheSecurityGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateCacheSubnetGroupRequestMarshaller : object {
    private static CreateCacheSubnetGroupRequestMarshaller _instance;
    public static CreateCacheSubnetGroupRequestMarshaller Instance { get; }
    private static CreateCacheSubnetGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateCacheSubnetGroupRequest publicRequest);
    internal static CreateCacheSubnetGroupRequestMarshaller GetInstance();
    public static CreateCacheSubnetGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateCacheSubnetGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateCacheSubnetGroupResponseUnmarshaller _instance;
    public static CreateCacheSubnetGroupResponseUnmarshaller Instance { get; }
    private static CreateCacheSubnetGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateCacheSubnetGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateCacheSubnetGroupResponseUnmarshaller GetInstance();
    public static CreateCacheSubnetGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateGlobalReplicationGroupRequestMarshaller : object {
    private static CreateGlobalReplicationGroupRequestMarshaller _instance;
    public static CreateGlobalReplicationGroupRequestMarshaller Instance { get; }
    private static CreateGlobalReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateGlobalReplicationGroupRequest publicRequest);
    internal static CreateGlobalReplicationGroupRequestMarshaller GetInstance();
    public static CreateGlobalReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateGlobalReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateGlobalReplicationGroupResponseUnmarshaller _instance;
    public static CreateGlobalReplicationGroupResponseUnmarshaller Instance { get; }
    private static CreateGlobalReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateGlobalReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateGlobalReplicationGroupResponseUnmarshaller GetInstance();
    public static CreateGlobalReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateReplicationGroupRequestMarshaller : object {
    private static CreateReplicationGroupRequestMarshaller _instance;
    public static CreateReplicationGroupRequestMarshaller Instance { get; }
    private static CreateReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateReplicationGroupRequest publicRequest);
    internal static CreateReplicationGroupRequestMarshaller GetInstance();
    public static CreateReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateReplicationGroupResponseUnmarshaller _instance;
    public static CreateReplicationGroupResponseUnmarshaller Instance { get; }
    private static CreateReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateReplicationGroupResponseUnmarshaller GetInstance();
    public static CreateReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateServerlessCacheRequestMarshaller : object {
    private static CreateServerlessCacheRequestMarshaller _instance;
    public static CreateServerlessCacheRequestMarshaller Instance { get; }
    private static CreateServerlessCacheRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateServerlessCacheRequest publicRequest);
    internal static CreateServerlessCacheRequestMarshaller GetInstance();
    public static CreateServerlessCacheRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateServerlessCacheResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateServerlessCacheResponseUnmarshaller _instance;
    public static CreateServerlessCacheResponseUnmarshaller Instance { get; }
    private static CreateServerlessCacheResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateServerlessCacheResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateServerlessCacheResponseUnmarshaller GetInstance();
    public static CreateServerlessCacheResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateServerlessCacheSnapshotRequestMarshaller : object {
    private static CreateServerlessCacheSnapshotRequestMarshaller _instance;
    public static CreateServerlessCacheSnapshotRequestMarshaller Instance { get; }
    private static CreateServerlessCacheSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateServerlessCacheSnapshotRequest publicRequest);
    internal static CreateServerlessCacheSnapshotRequestMarshaller GetInstance();
    public static CreateServerlessCacheSnapshotRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateServerlessCacheSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateServerlessCacheSnapshotResponseUnmarshaller _instance;
    public static CreateServerlessCacheSnapshotResponseUnmarshaller Instance { get; }
    private static CreateServerlessCacheSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateServerlessCacheSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateServerlessCacheSnapshotResponseUnmarshaller GetInstance();
    public static CreateServerlessCacheSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateSnapshotRequestMarshaller : object {
    private static CreateSnapshotRequestMarshaller _instance;
    public static CreateSnapshotRequestMarshaller Instance { get; }
    private static CreateSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateSnapshotRequest publicRequest);
    internal static CreateSnapshotRequestMarshaller GetInstance();
    public static CreateSnapshotRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateSnapshotResponseUnmarshaller _instance;
    public static CreateSnapshotResponseUnmarshaller Instance { get; }
    private static CreateSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateSnapshotResponseUnmarshaller GetInstance();
    public static CreateSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateUserGroupRequestMarshaller : object {
    private static CreateUserGroupRequestMarshaller _instance;
    public static CreateUserGroupRequestMarshaller Instance { get; }
    private static CreateUserGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateUserGroupRequest publicRequest);
    internal static CreateUserGroupRequestMarshaller GetInstance();
    public static CreateUserGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateUserGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateUserGroupResponseUnmarshaller _instance;
    public static CreateUserGroupResponseUnmarshaller Instance { get; }
    private static CreateUserGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateUserGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateUserGroupResponseUnmarshaller GetInstance();
    public static CreateUserGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateUserRequestMarshaller : object {
    private static CreateUserRequestMarshaller _instance;
    public static CreateUserRequestMarshaller Instance { get; }
    private static CreateUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateUserRequest publicRequest);
    internal static CreateUserRequestMarshaller GetInstance();
    public static CreateUserRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.CreateUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateUserResponseUnmarshaller _instance;
    public static CreateUserResponseUnmarshaller Instance { get; }
    private static CreateUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateUserResponseUnmarshaller GetInstance();
    public static CreateUserResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DataStorageUnmarshaller : object {
    private static DataStorageUnmarshaller _instance;
    public static DataStorageUnmarshaller Instance { get; }
    private static DataStorageUnmarshaller();
    public sealed virtual DataStorage Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DataStorage Unmarshall(JsonUnmarshallerContext context);
    public static DataStorageUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DecreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller : object {
    private static DecreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller _instance;
    public static DecreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller Instance { get; }
    private static DecreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DecreaseNodeGroupsInGlobalReplicationGroupRequest publicRequest);
    internal static DecreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller GetInstance();
    public static DecreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DecreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DecreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller _instance;
    public static DecreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller Instance { get; }
    private static DecreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DecreaseNodeGroupsInGlobalReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DecreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller GetInstance();
    public static DecreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DecreaseReplicaCountRequestMarshaller : object {
    private static DecreaseReplicaCountRequestMarshaller _instance;
    public static DecreaseReplicaCountRequestMarshaller Instance { get; }
    private static DecreaseReplicaCountRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DecreaseReplicaCountRequest publicRequest);
    internal static DecreaseReplicaCountRequestMarshaller GetInstance();
    public static DecreaseReplicaCountRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DecreaseReplicaCountResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DecreaseReplicaCountResponseUnmarshaller _instance;
    public static DecreaseReplicaCountResponseUnmarshaller Instance { get; }
    private static DecreaseReplicaCountResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DecreaseReplicaCountResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DecreaseReplicaCountResponseUnmarshaller GetInstance();
    public static DecreaseReplicaCountResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DefaultUserAssociatedToUserGroupExceptionUnmarshaller : object {
    private static DefaultUserAssociatedToUserGroupExceptionUnmarshaller _instance;
    public static DefaultUserAssociatedToUserGroupExceptionUnmarshaller Instance { get; }
    private static DefaultUserAssociatedToUserGroupExceptionUnmarshaller();
    public sealed virtual DefaultUserAssociatedToUserGroupException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DefaultUserAssociatedToUserGroupException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DefaultUserAssociatedToUserGroupExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DefaultUserRequiredExceptionUnmarshaller : object {
    private static DefaultUserRequiredExceptionUnmarshaller _instance;
    public static DefaultUserRequiredExceptionUnmarshaller Instance { get; }
    private static DefaultUserRequiredExceptionUnmarshaller();
    public sealed virtual DefaultUserRequiredException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DefaultUserRequiredException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DefaultUserRequiredExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteCacheClusterRequestMarshaller : object {
    private static DeleteCacheClusterRequestMarshaller _instance;
    public static DeleteCacheClusterRequestMarshaller Instance { get; }
    private static DeleteCacheClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCacheClusterRequest publicRequest);
    internal static DeleteCacheClusterRequestMarshaller GetInstance();
    public static DeleteCacheClusterRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteCacheClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteCacheClusterResponseUnmarshaller _instance;
    public static DeleteCacheClusterResponseUnmarshaller Instance { get; }
    private static DeleteCacheClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteCacheClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCacheClusterResponseUnmarshaller GetInstance();
    public static DeleteCacheClusterResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteCacheParameterGroupRequestMarshaller : object {
    private static DeleteCacheParameterGroupRequestMarshaller _instance;
    public static DeleteCacheParameterGroupRequestMarshaller Instance { get; }
    private static DeleteCacheParameterGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCacheParameterGroupRequest publicRequest);
    internal static DeleteCacheParameterGroupRequestMarshaller GetInstance();
    public static DeleteCacheParameterGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteCacheParameterGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteCacheParameterGroupResponseUnmarshaller _instance;
    public static DeleteCacheParameterGroupResponseUnmarshaller Instance { get; }
    private static DeleteCacheParameterGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteCacheParameterGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCacheParameterGroupResponseUnmarshaller GetInstance();
    public static DeleteCacheParameterGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteCacheSecurityGroupRequestMarshaller : object {
    private static DeleteCacheSecurityGroupRequestMarshaller _instance;
    public static DeleteCacheSecurityGroupRequestMarshaller Instance { get; }
    private static DeleteCacheSecurityGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCacheSecurityGroupRequest publicRequest);
    internal static DeleteCacheSecurityGroupRequestMarshaller GetInstance();
    public static DeleteCacheSecurityGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteCacheSecurityGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteCacheSecurityGroupResponseUnmarshaller _instance;
    public static DeleteCacheSecurityGroupResponseUnmarshaller Instance { get; }
    private static DeleteCacheSecurityGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteCacheSecurityGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCacheSecurityGroupResponseUnmarshaller GetInstance();
    public static DeleteCacheSecurityGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteCacheSubnetGroupRequestMarshaller : object {
    private static DeleteCacheSubnetGroupRequestMarshaller _instance;
    public static DeleteCacheSubnetGroupRequestMarshaller Instance { get; }
    private static DeleteCacheSubnetGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCacheSubnetGroupRequest publicRequest);
    internal static DeleteCacheSubnetGroupRequestMarshaller GetInstance();
    public static DeleteCacheSubnetGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteCacheSubnetGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteCacheSubnetGroupResponseUnmarshaller _instance;
    public static DeleteCacheSubnetGroupResponseUnmarshaller Instance { get; }
    private static DeleteCacheSubnetGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteCacheSubnetGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCacheSubnetGroupResponseUnmarshaller GetInstance();
    public static DeleteCacheSubnetGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteGlobalReplicationGroupRequestMarshaller : object {
    private static DeleteGlobalReplicationGroupRequestMarshaller _instance;
    public static DeleteGlobalReplicationGroupRequestMarshaller Instance { get; }
    private static DeleteGlobalReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteGlobalReplicationGroupRequest publicRequest);
    internal static DeleteGlobalReplicationGroupRequestMarshaller GetInstance();
    public static DeleteGlobalReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteGlobalReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteGlobalReplicationGroupResponseUnmarshaller _instance;
    public static DeleteGlobalReplicationGroupResponseUnmarshaller Instance { get; }
    private static DeleteGlobalReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteGlobalReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteGlobalReplicationGroupResponseUnmarshaller GetInstance();
    public static DeleteGlobalReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteReplicationGroupRequestMarshaller : object {
    private static DeleteReplicationGroupRequestMarshaller _instance;
    public static DeleteReplicationGroupRequestMarshaller Instance { get; }
    private static DeleteReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteReplicationGroupRequest publicRequest);
    internal static DeleteReplicationGroupRequestMarshaller GetInstance();
    public static DeleteReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteReplicationGroupResponseUnmarshaller _instance;
    public static DeleteReplicationGroupResponseUnmarshaller Instance { get; }
    private static DeleteReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteReplicationGroupResponseUnmarshaller GetInstance();
    public static DeleteReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteServerlessCacheRequestMarshaller : object {
    private static DeleteServerlessCacheRequestMarshaller _instance;
    public static DeleteServerlessCacheRequestMarshaller Instance { get; }
    private static DeleteServerlessCacheRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteServerlessCacheRequest publicRequest);
    internal static DeleteServerlessCacheRequestMarshaller GetInstance();
    public static DeleteServerlessCacheRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteServerlessCacheResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteServerlessCacheResponseUnmarshaller _instance;
    public static DeleteServerlessCacheResponseUnmarshaller Instance { get; }
    private static DeleteServerlessCacheResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteServerlessCacheResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteServerlessCacheResponseUnmarshaller GetInstance();
    public static DeleteServerlessCacheResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteServerlessCacheSnapshotRequestMarshaller : object {
    private static DeleteServerlessCacheSnapshotRequestMarshaller _instance;
    public static DeleteServerlessCacheSnapshotRequestMarshaller Instance { get; }
    private static DeleteServerlessCacheSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteServerlessCacheSnapshotRequest publicRequest);
    internal static DeleteServerlessCacheSnapshotRequestMarshaller GetInstance();
    public static DeleteServerlessCacheSnapshotRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteServerlessCacheSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteServerlessCacheSnapshotResponseUnmarshaller _instance;
    public static DeleteServerlessCacheSnapshotResponseUnmarshaller Instance { get; }
    private static DeleteServerlessCacheSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteServerlessCacheSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteServerlessCacheSnapshotResponseUnmarshaller GetInstance();
    public static DeleteServerlessCacheSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteSnapshotRequestMarshaller : object {
    private static DeleteSnapshotRequestMarshaller _instance;
    public static DeleteSnapshotRequestMarshaller Instance { get; }
    private static DeleteSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteSnapshotRequest publicRequest);
    internal static DeleteSnapshotRequestMarshaller GetInstance();
    public static DeleteSnapshotRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteSnapshotResponseUnmarshaller _instance;
    public static DeleteSnapshotResponseUnmarshaller Instance { get; }
    private static DeleteSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteSnapshotResponseUnmarshaller GetInstance();
    public static DeleteSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteUserGroupRequestMarshaller : object {
    private static DeleteUserGroupRequestMarshaller _instance;
    public static DeleteUserGroupRequestMarshaller Instance { get; }
    private static DeleteUserGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteUserGroupRequest publicRequest);
    internal static DeleteUserGroupRequestMarshaller GetInstance();
    public static DeleteUserGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteUserGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteUserGroupResponseUnmarshaller _instance;
    public static DeleteUserGroupResponseUnmarshaller Instance { get; }
    private static DeleteUserGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteUserGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteUserGroupResponseUnmarshaller GetInstance();
    public static DeleteUserGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteUserRequestMarshaller : object {
    private static DeleteUserRequestMarshaller _instance;
    public static DeleteUserRequestMarshaller Instance { get; }
    private static DeleteUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteUserRequest publicRequest);
    internal static DeleteUserRequestMarshaller GetInstance();
    public static DeleteUserRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DeleteUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteUserResponseUnmarshaller _instance;
    public static DeleteUserResponseUnmarshaller Instance { get; }
    private static DeleteUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteUserResponseUnmarshaller GetInstance();
    public static DeleteUserResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheClustersRequestMarshaller : object {
    private static DescribeCacheClustersRequestMarshaller _instance;
    public static DescribeCacheClustersRequestMarshaller Instance { get; }
    private static DescribeCacheClustersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCacheClustersRequest publicRequest);
    internal static DescribeCacheClustersRequestMarshaller GetInstance();
    public static DescribeCacheClustersRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheClustersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeCacheClustersResponseUnmarshaller _instance;
    public static DescribeCacheClustersResponseUnmarshaller Instance { get; }
    private static DescribeCacheClustersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeCacheClustersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCacheClustersResponseUnmarshaller GetInstance();
    public static DescribeCacheClustersResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheEngineVersionsRequestMarshaller : object {
    private static DescribeCacheEngineVersionsRequestMarshaller _instance;
    public static DescribeCacheEngineVersionsRequestMarshaller Instance { get; }
    private static DescribeCacheEngineVersionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCacheEngineVersionsRequest publicRequest);
    internal static DescribeCacheEngineVersionsRequestMarshaller GetInstance();
    public static DescribeCacheEngineVersionsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheEngineVersionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeCacheEngineVersionsResponseUnmarshaller _instance;
    public static DescribeCacheEngineVersionsResponseUnmarshaller Instance { get; }
    private static DescribeCacheEngineVersionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeCacheEngineVersionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCacheEngineVersionsResponseUnmarshaller GetInstance();
    public static DescribeCacheEngineVersionsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheParameterGroupsRequestMarshaller : object {
    private static DescribeCacheParameterGroupsRequestMarshaller _instance;
    public static DescribeCacheParameterGroupsRequestMarshaller Instance { get; }
    private static DescribeCacheParameterGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCacheParameterGroupsRequest publicRequest);
    internal static DescribeCacheParameterGroupsRequestMarshaller GetInstance();
    public static DescribeCacheParameterGroupsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheParameterGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeCacheParameterGroupsResponseUnmarshaller _instance;
    public static DescribeCacheParameterGroupsResponseUnmarshaller Instance { get; }
    private static DescribeCacheParameterGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeCacheParameterGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCacheParameterGroupsResponseUnmarshaller GetInstance();
    public static DescribeCacheParameterGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheParametersRequestMarshaller : object {
    private static DescribeCacheParametersRequestMarshaller _instance;
    public static DescribeCacheParametersRequestMarshaller Instance { get; }
    private static DescribeCacheParametersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCacheParametersRequest publicRequest);
    internal static DescribeCacheParametersRequestMarshaller GetInstance();
    public static DescribeCacheParametersRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheParametersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeCacheParametersResponseUnmarshaller _instance;
    public static DescribeCacheParametersResponseUnmarshaller Instance { get; }
    private static DescribeCacheParametersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeCacheParametersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCacheParametersResponseUnmarshaller GetInstance();
    public static DescribeCacheParametersResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheSecurityGroupsRequestMarshaller : object {
    private static DescribeCacheSecurityGroupsRequestMarshaller _instance;
    public static DescribeCacheSecurityGroupsRequestMarshaller Instance { get; }
    private static DescribeCacheSecurityGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCacheSecurityGroupsRequest publicRequest);
    internal static DescribeCacheSecurityGroupsRequestMarshaller GetInstance();
    public static DescribeCacheSecurityGroupsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheSecurityGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeCacheSecurityGroupsResponseUnmarshaller _instance;
    public static DescribeCacheSecurityGroupsResponseUnmarshaller Instance { get; }
    private static DescribeCacheSecurityGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeCacheSecurityGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCacheSecurityGroupsResponseUnmarshaller GetInstance();
    public static DescribeCacheSecurityGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheSubnetGroupsRequestMarshaller : object {
    private static DescribeCacheSubnetGroupsRequestMarshaller _instance;
    public static DescribeCacheSubnetGroupsRequestMarshaller Instance { get; }
    private static DescribeCacheSubnetGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCacheSubnetGroupsRequest publicRequest);
    internal static DescribeCacheSubnetGroupsRequestMarshaller GetInstance();
    public static DescribeCacheSubnetGroupsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeCacheSubnetGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeCacheSubnetGroupsResponseUnmarshaller _instance;
    public static DescribeCacheSubnetGroupsResponseUnmarshaller Instance { get; }
    private static DescribeCacheSubnetGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeCacheSubnetGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCacheSubnetGroupsResponseUnmarshaller GetInstance();
    public static DescribeCacheSubnetGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeEngineDefaultParametersRequestMarshaller : object {
    private static DescribeEngineDefaultParametersRequestMarshaller _instance;
    public static DescribeEngineDefaultParametersRequestMarshaller Instance { get; }
    private static DescribeEngineDefaultParametersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEngineDefaultParametersRequest publicRequest);
    internal static DescribeEngineDefaultParametersRequestMarshaller GetInstance();
    public static DescribeEngineDefaultParametersRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeEngineDefaultParametersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeEngineDefaultParametersResponseUnmarshaller _instance;
    public static DescribeEngineDefaultParametersResponseUnmarshaller Instance { get; }
    private static DescribeEngineDefaultParametersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeEngineDefaultParametersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEngineDefaultParametersResponseUnmarshaller GetInstance();
    public static DescribeEngineDefaultParametersResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeEventsRequestMarshaller : object {
    private static DescribeEventsRequestMarshaller _instance;
    public static DescribeEventsRequestMarshaller Instance { get; }
    private static DescribeEventsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEventsRequest publicRequest);
    internal static DescribeEventsRequestMarshaller GetInstance();
    public static DescribeEventsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeEventsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeEventsResponseUnmarshaller _instance;
    public static DescribeEventsResponseUnmarshaller Instance { get; }
    private static DescribeEventsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeEventsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEventsResponseUnmarshaller GetInstance();
    public static DescribeEventsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeGlobalReplicationGroupsRequestMarshaller : object {
    private static DescribeGlobalReplicationGroupsRequestMarshaller _instance;
    public static DescribeGlobalReplicationGroupsRequestMarshaller Instance { get; }
    private static DescribeGlobalReplicationGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeGlobalReplicationGroupsRequest publicRequest);
    internal static DescribeGlobalReplicationGroupsRequestMarshaller GetInstance();
    public static DescribeGlobalReplicationGroupsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeGlobalReplicationGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeGlobalReplicationGroupsResponseUnmarshaller _instance;
    public static DescribeGlobalReplicationGroupsResponseUnmarshaller Instance { get; }
    private static DescribeGlobalReplicationGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeGlobalReplicationGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeGlobalReplicationGroupsResponseUnmarshaller GetInstance();
    public static DescribeGlobalReplicationGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeReplicationGroupsRequestMarshaller : object {
    private static DescribeReplicationGroupsRequestMarshaller _instance;
    public static DescribeReplicationGroupsRequestMarshaller Instance { get; }
    private static DescribeReplicationGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeReplicationGroupsRequest publicRequest);
    internal static DescribeReplicationGroupsRequestMarshaller GetInstance();
    public static DescribeReplicationGroupsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeReplicationGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeReplicationGroupsResponseUnmarshaller _instance;
    public static DescribeReplicationGroupsResponseUnmarshaller Instance { get; }
    private static DescribeReplicationGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeReplicationGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeReplicationGroupsResponseUnmarshaller GetInstance();
    public static DescribeReplicationGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeReservedCacheNodesOfferingsRequestMarshaller : object {
    private static DescribeReservedCacheNodesOfferingsRequestMarshaller _instance;
    public static DescribeReservedCacheNodesOfferingsRequestMarshaller Instance { get; }
    private static DescribeReservedCacheNodesOfferingsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeReservedCacheNodesOfferingsRequest publicRequest);
    internal static DescribeReservedCacheNodesOfferingsRequestMarshaller GetInstance();
    public static DescribeReservedCacheNodesOfferingsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeReservedCacheNodesOfferingsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeReservedCacheNodesOfferingsResponseUnmarshaller _instance;
    public static DescribeReservedCacheNodesOfferingsResponseUnmarshaller Instance { get; }
    private static DescribeReservedCacheNodesOfferingsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeReservedCacheNodesOfferingsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeReservedCacheNodesOfferingsResponseUnmarshaller GetInstance();
    public static DescribeReservedCacheNodesOfferingsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeReservedCacheNodesRequestMarshaller : object {
    private static DescribeReservedCacheNodesRequestMarshaller _instance;
    public static DescribeReservedCacheNodesRequestMarshaller Instance { get; }
    private static DescribeReservedCacheNodesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeReservedCacheNodesRequest publicRequest);
    internal static DescribeReservedCacheNodesRequestMarshaller GetInstance();
    public static DescribeReservedCacheNodesRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeReservedCacheNodesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeReservedCacheNodesResponseUnmarshaller _instance;
    public static DescribeReservedCacheNodesResponseUnmarshaller Instance { get; }
    private static DescribeReservedCacheNodesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeReservedCacheNodesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeReservedCacheNodesResponseUnmarshaller GetInstance();
    public static DescribeReservedCacheNodesResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeServerlessCacheSnapshotsRequestMarshaller : object {
    private static DescribeServerlessCacheSnapshotsRequestMarshaller _instance;
    public static DescribeServerlessCacheSnapshotsRequestMarshaller Instance { get; }
    private static DescribeServerlessCacheSnapshotsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeServerlessCacheSnapshotsRequest publicRequest);
    internal static DescribeServerlessCacheSnapshotsRequestMarshaller GetInstance();
    public static DescribeServerlessCacheSnapshotsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeServerlessCacheSnapshotsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeServerlessCacheSnapshotsResponseUnmarshaller _instance;
    public static DescribeServerlessCacheSnapshotsResponseUnmarshaller Instance { get; }
    private static DescribeServerlessCacheSnapshotsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeServerlessCacheSnapshotsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeServerlessCacheSnapshotsResponseUnmarshaller GetInstance();
    public static DescribeServerlessCacheSnapshotsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeServerlessCachesRequestMarshaller : object {
    private static DescribeServerlessCachesRequestMarshaller _instance;
    public static DescribeServerlessCachesRequestMarshaller Instance { get; }
    private static DescribeServerlessCachesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeServerlessCachesRequest publicRequest);
    internal static DescribeServerlessCachesRequestMarshaller GetInstance();
    public static DescribeServerlessCachesRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeServerlessCachesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeServerlessCachesResponseUnmarshaller _instance;
    public static DescribeServerlessCachesResponseUnmarshaller Instance { get; }
    private static DescribeServerlessCachesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeServerlessCachesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeServerlessCachesResponseUnmarshaller GetInstance();
    public static DescribeServerlessCachesResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeServiceUpdatesRequestMarshaller : object {
    private static DescribeServiceUpdatesRequestMarshaller _instance;
    public static DescribeServiceUpdatesRequestMarshaller Instance { get; }
    private static DescribeServiceUpdatesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeServiceUpdatesRequest publicRequest);
    internal static DescribeServiceUpdatesRequestMarshaller GetInstance();
    public static DescribeServiceUpdatesRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeServiceUpdatesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeServiceUpdatesResponseUnmarshaller _instance;
    public static DescribeServiceUpdatesResponseUnmarshaller Instance { get; }
    private static DescribeServiceUpdatesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeServiceUpdatesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeServiceUpdatesResponseUnmarshaller GetInstance();
    public static DescribeServiceUpdatesResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeSnapshotsRequestMarshaller : object {
    private static DescribeSnapshotsRequestMarshaller _instance;
    public static DescribeSnapshotsRequestMarshaller Instance { get; }
    private static DescribeSnapshotsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeSnapshotsRequest publicRequest);
    internal static DescribeSnapshotsRequestMarshaller GetInstance();
    public static DescribeSnapshotsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeSnapshotsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeSnapshotsResponseUnmarshaller _instance;
    public static DescribeSnapshotsResponseUnmarshaller Instance { get; }
    private static DescribeSnapshotsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeSnapshotsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeSnapshotsResponseUnmarshaller GetInstance();
    public static DescribeSnapshotsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeUpdateActionsRequestMarshaller : object {
    private static DescribeUpdateActionsRequestMarshaller _instance;
    public static DescribeUpdateActionsRequestMarshaller Instance { get; }
    private static DescribeUpdateActionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeUpdateActionsRequest publicRequest);
    internal static DescribeUpdateActionsRequestMarshaller GetInstance();
    public static DescribeUpdateActionsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeUpdateActionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeUpdateActionsResponseUnmarshaller _instance;
    public static DescribeUpdateActionsResponseUnmarshaller Instance { get; }
    private static DescribeUpdateActionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeUpdateActionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeUpdateActionsResponseUnmarshaller GetInstance();
    public static DescribeUpdateActionsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeUserGroupsRequestMarshaller : object {
    private static DescribeUserGroupsRequestMarshaller _instance;
    public static DescribeUserGroupsRequestMarshaller Instance { get; }
    private static DescribeUserGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeUserGroupsRequest publicRequest);
    internal static DescribeUserGroupsRequestMarshaller GetInstance();
    public static DescribeUserGroupsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeUserGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeUserGroupsResponseUnmarshaller _instance;
    public static DescribeUserGroupsResponseUnmarshaller Instance { get; }
    private static DescribeUserGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeUserGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeUserGroupsResponseUnmarshaller GetInstance();
    public static DescribeUserGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeUsersRequestMarshaller : object {
    private static DescribeUsersRequestMarshaller _instance;
    public static DescribeUsersRequestMarshaller Instance { get; }
    private static DescribeUsersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeUsersRequest publicRequest);
    internal static DescribeUsersRequestMarshaller GetInstance();
    public static DescribeUsersRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DescribeUsersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeUsersResponseUnmarshaller _instance;
    public static DescribeUsersResponseUnmarshaller Instance { get; }
    private static DescribeUsersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeUsersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeUsersResponseUnmarshaller GetInstance();
    public static DescribeUsersResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DestinationDetailsUnmarshaller : object {
    private static DestinationDetailsUnmarshaller _instance;
    public static DestinationDetailsUnmarshaller Instance { get; }
    private static DestinationDetailsUnmarshaller();
    public sealed virtual DestinationDetails Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DestinationDetails Unmarshall(JsonUnmarshallerContext context);
    public static DestinationDetailsUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DisassociateGlobalReplicationGroupRequestMarshaller : object {
    private static DisassociateGlobalReplicationGroupRequestMarshaller _instance;
    public static DisassociateGlobalReplicationGroupRequestMarshaller Instance { get; }
    private static DisassociateGlobalReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisassociateGlobalReplicationGroupRequest publicRequest);
    internal static DisassociateGlobalReplicationGroupRequestMarshaller GetInstance();
    public static DisassociateGlobalReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DisassociateGlobalReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DisassociateGlobalReplicationGroupResponseUnmarshaller _instance;
    public static DisassociateGlobalReplicationGroupResponseUnmarshaller Instance { get; }
    private static DisassociateGlobalReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DisassociateGlobalReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisassociateGlobalReplicationGroupResponseUnmarshaller GetInstance();
    public static DisassociateGlobalReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.DuplicateUserNameExceptionUnmarshaller : object {
    private static DuplicateUserNameExceptionUnmarshaller _instance;
    public static DuplicateUserNameExceptionUnmarshaller Instance { get; }
    private static DuplicateUserNameExceptionUnmarshaller();
    public sealed virtual DuplicateUserNameException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DuplicateUserNameException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DuplicateUserNameExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.EC2SecurityGroupUnmarshaller : object {
    private static EC2SecurityGroupUnmarshaller _instance;
    public static EC2SecurityGroupUnmarshaller Instance { get; }
    private static EC2SecurityGroupUnmarshaller();
    public sealed virtual EC2SecurityGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EC2SecurityGroup Unmarshall(JsonUnmarshallerContext context);
    public static EC2SecurityGroupUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ECPUPerSecondUnmarshaller : object {
    private static ECPUPerSecondUnmarshaller _instance;
    public static ECPUPerSecondUnmarshaller Instance { get; }
    private static ECPUPerSecondUnmarshaller();
    public sealed virtual ECPUPerSecond Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ECPUPerSecond Unmarshall(JsonUnmarshallerContext context);
    public static ECPUPerSecondUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.EndpointUnmarshaller : object {
    private static EndpointUnmarshaller _instance;
    public static EndpointUnmarshaller Instance { get; }
    private static EndpointUnmarshaller();
    public sealed virtual Endpoint Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Endpoint Unmarshall(JsonUnmarshallerContext context);
    public static EndpointUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.EngineDefaultsUnmarshaller : object {
    private static EngineDefaultsUnmarshaller _instance;
    public static EngineDefaultsUnmarshaller Instance { get; }
    private static EngineDefaultsUnmarshaller();
    public sealed virtual EngineDefaults Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EngineDefaults Unmarshall(JsonUnmarshallerContext context);
    public static EngineDefaultsUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.EventUnmarshaller : object {
    private static EventUnmarshaller _instance;
    public static EventUnmarshaller Instance { get; }
    private static EventUnmarshaller();
    public sealed virtual Event Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Event Unmarshall(JsonUnmarshallerContext context);
    public static EventUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ExportServerlessCacheSnapshotRequestMarshaller : object {
    private static ExportServerlessCacheSnapshotRequestMarshaller _instance;
    public static ExportServerlessCacheSnapshotRequestMarshaller Instance { get; }
    private static ExportServerlessCacheSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ExportServerlessCacheSnapshotRequest publicRequest);
    internal static ExportServerlessCacheSnapshotRequestMarshaller GetInstance();
    public static ExportServerlessCacheSnapshotRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ExportServerlessCacheSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ExportServerlessCacheSnapshotResponseUnmarshaller _instance;
    public static ExportServerlessCacheSnapshotResponseUnmarshaller Instance { get; }
    private static ExportServerlessCacheSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ExportServerlessCacheSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ExportServerlessCacheSnapshotResponseUnmarshaller GetInstance();
    public static ExportServerlessCacheSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.FailoverGlobalReplicationGroupRequestMarshaller : object {
    private static FailoverGlobalReplicationGroupRequestMarshaller _instance;
    public static FailoverGlobalReplicationGroupRequestMarshaller Instance { get; }
    private static FailoverGlobalReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(FailoverGlobalReplicationGroupRequest publicRequest);
    internal static FailoverGlobalReplicationGroupRequestMarshaller GetInstance();
    public static FailoverGlobalReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.FailoverGlobalReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static FailoverGlobalReplicationGroupResponseUnmarshaller _instance;
    public static FailoverGlobalReplicationGroupResponseUnmarshaller Instance { get; }
    private static FailoverGlobalReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, FailoverGlobalReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static FailoverGlobalReplicationGroupResponseUnmarshaller GetInstance();
    public static FailoverGlobalReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.GlobalNodeGroupUnmarshaller : object {
    private static GlobalNodeGroupUnmarshaller _instance;
    public static GlobalNodeGroupUnmarshaller Instance { get; }
    private static GlobalNodeGroupUnmarshaller();
    public sealed virtual GlobalNodeGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GlobalNodeGroup Unmarshall(JsonUnmarshallerContext context);
    public static GlobalNodeGroupUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.GlobalReplicationGroupAlreadyExistsExceptionUnmarshaller : object {
    private static GlobalReplicationGroupAlreadyExistsExceptionUnmarshaller _instance;
    public static GlobalReplicationGroupAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static GlobalReplicationGroupAlreadyExistsExceptionUnmarshaller();
    public sealed virtual GlobalReplicationGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GlobalReplicationGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static GlobalReplicationGroupAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.GlobalReplicationGroupInfoUnmarshaller : object {
    private static GlobalReplicationGroupInfoUnmarshaller _instance;
    public static GlobalReplicationGroupInfoUnmarshaller Instance { get; }
    private static GlobalReplicationGroupInfoUnmarshaller();
    public sealed virtual GlobalReplicationGroupInfo Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GlobalReplicationGroupInfo Unmarshall(JsonUnmarshallerContext context);
    public static GlobalReplicationGroupInfoUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.GlobalReplicationGroupMemberUnmarshaller : object {
    private static GlobalReplicationGroupMemberUnmarshaller _instance;
    public static GlobalReplicationGroupMemberUnmarshaller Instance { get; }
    private static GlobalReplicationGroupMemberUnmarshaller();
    public sealed virtual GlobalReplicationGroupMember Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GlobalReplicationGroupMember Unmarshall(JsonUnmarshallerContext context);
    public static GlobalReplicationGroupMemberUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.GlobalReplicationGroupNotFoundExceptionUnmarshaller : object {
    private static GlobalReplicationGroupNotFoundExceptionUnmarshaller _instance;
    public static GlobalReplicationGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static GlobalReplicationGroupNotFoundExceptionUnmarshaller();
    public sealed virtual GlobalReplicationGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GlobalReplicationGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static GlobalReplicationGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.GlobalReplicationGroupUnmarshaller : object {
    private static GlobalReplicationGroupUnmarshaller _instance;
    public static GlobalReplicationGroupUnmarshaller Instance { get; }
    private static GlobalReplicationGroupUnmarshaller();
    public sealed virtual GlobalReplicationGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GlobalReplicationGroup Unmarshall(JsonUnmarshallerContext context);
    public static GlobalReplicationGroupUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.IncreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller : object {
    private static IncreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller _instance;
    public static IncreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller Instance { get; }
    private static IncreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(IncreaseNodeGroupsInGlobalReplicationGroupRequest publicRequest);
    internal static IncreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller GetInstance();
    public static IncreaseNodeGroupsInGlobalReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.IncreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static IncreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller _instance;
    public static IncreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller Instance { get; }
    private static IncreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, IncreaseNodeGroupsInGlobalReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static IncreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller GetInstance();
    public static IncreaseNodeGroupsInGlobalReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.IncreaseReplicaCountRequestMarshaller : object {
    private static IncreaseReplicaCountRequestMarshaller _instance;
    public static IncreaseReplicaCountRequestMarshaller Instance { get; }
    private static IncreaseReplicaCountRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(IncreaseReplicaCountRequest publicRequest);
    internal static IncreaseReplicaCountRequestMarshaller GetInstance();
    public static IncreaseReplicaCountRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.IncreaseReplicaCountResponseUnmarshaller : XmlResponseUnmarshaller {
    private static IncreaseReplicaCountResponseUnmarshaller _instance;
    public static IncreaseReplicaCountResponseUnmarshaller Instance { get; }
    private static IncreaseReplicaCountResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, IncreaseReplicaCountResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static IncreaseReplicaCountResponseUnmarshaller GetInstance();
    public static IncreaseReplicaCountResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InsufficientCacheClusterCapacityExceptionUnmarshaller : object {
    private static InsufficientCacheClusterCapacityExceptionUnmarshaller _instance;
    public static InsufficientCacheClusterCapacityExceptionUnmarshaller Instance { get; }
    private static InsufficientCacheClusterCapacityExceptionUnmarshaller();
    public sealed virtual InsufficientCacheClusterCapacityException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InsufficientCacheClusterCapacityException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InsufficientCacheClusterCapacityExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidARNExceptionUnmarshaller : object {
    private static InvalidARNExceptionUnmarshaller _instance;
    public static InvalidARNExceptionUnmarshaller Instance { get; }
    private static InvalidARNExceptionUnmarshaller();
    public sealed virtual InvalidARNException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidARNException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidARNExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidCacheClusterStateExceptionUnmarshaller : object {
    private static InvalidCacheClusterStateExceptionUnmarshaller _instance;
    public static InvalidCacheClusterStateExceptionUnmarshaller Instance { get; }
    private static InvalidCacheClusterStateExceptionUnmarshaller();
    public sealed virtual InvalidCacheClusterStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidCacheClusterStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidCacheClusterStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidCacheParameterGroupStateExceptionUnmarshaller : object {
    private static InvalidCacheParameterGroupStateExceptionUnmarshaller _instance;
    public static InvalidCacheParameterGroupStateExceptionUnmarshaller Instance { get; }
    private static InvalidCacheParameterGroupStateExceptionUnmarshaller();
    public sealed virtual InvalidCacheParameterGroupStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidCacheParameterGroupStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidCacheParameterGroupStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidCacheSecurityGroupStateExceptionUnmarshaller : object {
    private static InvalidCacheSecurityGroupStateExceptionUnmarshaller _instance;
    public static InvalidCacheSecurityGroupStateExceptionUnmarshaller Instance { get; }
    private static InvalidCacheSecurityGroupStateExceptionUnmarshaller();
    public sealed virtual InvalidCacheSecurityGroupStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidCacheSecurityGroupStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidCacheSecurityGroupStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidCredentialsExceptionUnmarshaller : object {
    private static InvalidCredentialsExceptionUnmarshaller _instance;
    public static InvalidCredentialsExceptionUnmarshaller Instance { get; }
    private static InvalidCredentialsExceptionUnmarshaller();
    public sealed virtual InvalidCredentialsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidCredentialsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidCredentialsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidGlobalReplicationGroupStateExceptionUnmarshaller : object {
    private static InvalidGlobalReplicationGroupStateExceptionUnmarshaller _instance;
    public static InvalidGlobalReplicationGroupStateExceptionUnmarshaller Instance { get; }
    private static InvalidGlobalReplicationGroupStateExceptionUnmarshaller();
    public sealed virtual InvalidGlobalReplicationGroupStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidGlobalReplicationGroupStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidGlobalReplicationGroupStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidKMSKeyExceptionUnmarshaller : object {
    private static InvalidKMSKeyExceptionUnmarshaller _instance;
    public static InvalidKMSKeyExceptionUnmarshaller Instance { get; }
    private static InvalidKMSKeyExceptionUnmarshaller();
    public sealed virtual InvalidKMSKeyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidKMSKeyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidKMSKeyExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidParameterCombinationExceptionUnmarshaller : object {
    private static InvalidParameterCombinationExceptionUnmarshaller _instance;
    public static InvalidParameterCombinationExceptionUnmarshaller Instance { get; }
    private static InvalidParameterCombinationExceptionUnmarshaller();
    public sealed virtual InvalidParameterCombinationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidParameterCombinationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidParameterCombinationExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidParameterValueExceptionUnmarshaller : object {
    private static InvalidParameterValueExceptionUnmarshaller _instance;
    public static InvalidParameterValueExceptionUnmarshaller Instance { get; }
    private static InvalidParameterValueExceptionUnmarshaller();
    public sealed virtual InvalidParameterValueException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidParameterValueException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidParameterValueExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidReplicationGroupStateExceptionUnmarshaller : object {
    private static InvalidReplicationGroupStateExceptionUnmarshaller _instance;
    public static InvalidReplicationGroupStateExceptionUnmarshaller Instance { get; }
    private static InvalidReplicationGroupStateExceptionUnmarshaller();
    public sealed virtual InvalidReplicationGroupStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidReplicationGroupStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidReplicationGroupStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidServerlessCacheSnapshotStateExceptionUnmarshaller : object {
    private static InvalidServerlessCacheSnapshotStateExceptionUnmarshaller _instance;
    public static InvalidServerlessCacheSnapshotStateExceptionUnmarshaller Instance { get; }
    private static InvalidServerlessCacheSnapshotStateExceptionUnmarshaller();
    public sealed virtual InvalidServerlessCacheSnapshotStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidServerlessCacheSnapshotStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidServerlessCacheSnapshotStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidServerlessCacheStateExceptionUnmarshaller : object {
    private static InvalidServerlessCacheStateExceptionUnmarshaller _instance;
    public static InvalidServerlessCacheStateExceptionUnmarshaller Instance { get; }
    private static InvalidServerlessCacheStateExceptionUnmarshaller();
    public sealed virtual InvalidServerlessCacheStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidServerlessCacheStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidServerlessCacheStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidSnapshotStateExceptionUnmarshaller : object {
    private static InvalidSnapshotStateExceptionUnmarshaller _instance;
    public static InvalidSnapshotStateExceptionUnmarshaller Instance { get; }
    private static InvalidSnapshotStateExceptionUnmarshaller();
    public sealed virtual InvalidSnapshotStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSnapshotStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSnapshotStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidSubnetExceptionUnmarshaller : object {
    private static InvalidSubnetExceptionUnmarshaller _instance;
    public static InvalidSubnetExceptionUnmarshaller Instance { get; }
    private static InvalidSubnetExceptionUnmarshaller();
    public sealed virtual InvalidSubnetException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSubnetException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSubnetExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidUserGroupStateExceptionUnmarshaller : object {
    private static InvalidUserGroupStateExceptionUnmarshaller _instance;
    public static InvalidUserGroupStateExceptionUnmarshaller Instance { get; }
    private static InvalidUserGroupStateExceptionUnmarshaller();
    public sealed virtual InvalidUserGroupStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidUserGroupStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidUserGroupStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidUserStateExceptionUnmarshaller : object {
    private static InvalidUserStateExceptionUnmarshaller _instance;
    public static InvalidUserStateExceptionUnmarshaller Instance { get; }
    private static InvalidUserStateExceptionUnmarshaller();
    public sealed virtual InvalidUserStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidUserStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidUserStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.InvalidVPCNetworkStateExceptionUnmarshaller : object {
    private static InvalidVPCNetworkStateExceptionUnmarshaller _instance;
    public static InvalidVPCNetworkStateExceptionUnmarshaller Instance { get; }
    private static InvalidVPCNetworkStateExceptionUnmarshaller();
    public sealed virtual InvalidVPCNetworkStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidVPCNetworkStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidVPCNetworkStateExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.KinesisFirehoseDestinationDetailsUnmarshaller : object {
    private static KinesisFirehoseDestinationDetailsUnmarshaller _instance;
    public static KinesisFirehoseDestinationDetailsUnmarshaller Instance { get; }
    private static KinesisFirehoseDestinationDetailsUnmarshaller();
    public sealed virtual KinesisFirehoseDestinationDetails Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KinesisFirehoseDestinationDetails Unmarshall(JsonUnmarshallerContext context);
    public static KinesisFirehoseDestinationDetailsUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ListAllowedNodeTypeModificationsRequestMarshaller : object {
    private static ListAllowedNodeTypeModificationsRequestMarshaller _instance;
    public static ListAllowedNodeTypeModificationsRequestMarshaller Instance { get; }
    private static ListAllowedNodeTypeModificationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAllowedNodeTypeModificationsRequest publicRequest);
    internal static ListAllowedNodeTypeModificationsRequestMarshaller GetInstance();
    public static ListAllowedNodeTypeModificationsRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ListAllowedNodeTypeModificationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListAllowedNodeTypeModificationsResponseUnmarshaller _instance;
    public static ListAllowedNodeTypeModificationsResponseUnmarshaller Instance { get; }
    private static ListAllowedNodeTypeModificationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListAllowedNodeTypeModificationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAllowedNodeTypeModificationsResponseUnmarshaller GetInstance();
    public static ListAllowedNodeTypeModificationsResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller : object {
    private static ListTagsForResourceRequestMarshaller _instance;
    public static ListTagsForResourceRequestMarshaller Instance { get; }
    private static ListTagsForResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForResourceRequest publicRequest);
    internal static ListTagsForResourceRequestMarshaller GetInstance();
    public static ListTagsForResourceRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTagsForResourceResponseUnmarshaller _instance;
    public static ListTagsForResourceResponseUnmarshaller Instance { get; }
    private static ListTagsForResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTagsForResourceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForResourceResponseUnmarshaller GetInstance();
    public static ListTagsForResourceResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.LogDeliveryConfigurationUnmarshaller : object {
    private static LogDeliveryConfigurationUnmarshaller _instance;
    public static LogDeliveryConfigurationUnmarshaller Instance { get; }
    private static LogDeliveryConfigurationUnmarshaller();
    public sealed virtual LogDeliveryConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LogDeliveryConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static LogDeliveryConfigurationUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyCacheClusterRequestMarshaller : object {
    private static ModifyCacheClusterRequestMarshaller _instance;
    public static ModifyCacheClusterRequestMarshaller Instance { get; }
    private static ModifyCacheClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyCacheClusterRequest publicRequest);
    internal static ModifyCacheClusterRequestMarshaller GetInstance();
    public static ModifyCacheClusterRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyCacheClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyCacheClusterResponseUnmarshaller _instance;
    public static ModifyCacheClusterResponseUnmarshaller Instance { get; }
    private static ModifyCacheClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyCacheClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyCacheClusterResponseUnmarshaller GetInstance();
    public static ModifyCacheClusterResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyCacheParameterGroupRequestMarshaller : object {
    private static ModifyCacheParameterGroupRequestMarshaller _instance;
    public static ModifyCacheParameterGroupRequestMarshaller Instance { get; }
    private static ModifyCacheParameterGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyCacheParameterGroupRequest publicRequest);
    internal static ModifyCacheParameterGroupRequestMarshaller GetInstance();
    public static ModifyCacheParameterGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyCacheParameterGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyCacheParameterGroupResponseUnmarshaller _instance;
    public static ModifyCacheParameterGroupResponseUnmarshaller Instance { get; }
    private static ModifyCacheParameterGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyCacheParameterGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyCacheParameterGroupResponseUnmarshaller GetInstance();
    public static ModifyCacheParameterGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyCacheSubnetGroupRequestMarshaller : object {
    private static ModifyCacheSubnetGroupRequestMarshaller _instance;
    public static ModifyCacheSubnetGroupRequestMarshaller Instance { get; }
    private static ModifyCacheSubnetGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyCacheSubnetGroupRequest publicRequest);
    internal static ModifyCacheSubnetGroupRequestMarshaller GetInstance();
    public static ModifyCacheSubnetGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyCacheSubnetGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyCacheSubnetGroupResponseUnmarshaller _instance;
    public static ModifyCacheSubnetGroupResponseUnmarshaller Instance { get; }
    private static ModifyCacheSubnetGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyCacheSubnetGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyCacheSubnetGroupResponseUnmarshaller GetInstance();
    public static ModifyCacheSubnetGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyGlobalReplicationGroupRequestMarshaller : object {
    private static ModifyGlobalReplicationGroupRequestMarshaller _instance;
    public static ModifyGlobalReplicationGroupRequestMarshaller Instance { get; }
    private static ModifyGlobalReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyGlobalReplicationGroupRequest publicRequest);
    internal static ModifyGlobalReplicationGroupRequestMarshaller GetInstance();
    public static ModifyGlobalReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyGlobalReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyGlobalReplicationGroupResponseUnmarshaller _instance;
    public static ModifyGlobalReplicationGroupResponseUnmarshaller Instance { get; }
    private static ModifyGlobalReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyGlobalReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyGlobalReplicationGroupResponseUnmarshaller GetInstance();
    public static ModifyGlobalReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyReplicationGroupRequestMarshaller : object {
    private static ModifyReplicationGroupRequestMarshaller _instance;
    public static ModifyReplicationGroupRequestMarshaller Instance { get; }
    private static ModifyReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyReplicationGroupRequest publicRequest);
    internal static ModifyReplicationGroupRequestMarshaller GetInstance();
    public static ModifyReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyReplicationGroupResponseUnmarshaller _instance;
    public static ModifyReplicationGroupResponseUnmarshaller Instance { get; }
    private static ModifyReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyReplicationGroupResponseUnmarshaller GetInstance();
    public static ModifyReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyReplicationGroupShardConfigurationRequestMarshaller : object {
    private static ModifyReplicationGroupShardConfigurationRequestMarshaller _instance;
    public static ModifyReplicationGroupShardConfigurationRequestMarshaller Instance { get; }
    private static ModifyReplicationGroupShardConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyReplicationGroupShardConfigurationRequest publicRequest);
    internal static ModifyReplicationGroupShardConfigurationRequestMarshaller GetInstance();
    public static ModifyReplicationGroupShardConfigurationRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyReplicationGroupShardConfigurationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyReplicationGroupShardConfigurationResponseUnmarshaller _instance;
    public static ModifyReplicationGroupShardConfigurationResponseUnmarshaller Instance { get; }
    private static ModifyReplicationGroupShardConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyReplicationGroupShardConfigurationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyReplicationGroupShardConfigurationResponseUnmarshaller GetInstance();
    public static ModifyReplicationGroupShardConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyServerlessCacheRequestMarshaller : object {
    private static ModifyServerlessCacheRequestMarshaller _instance;
    public static ModifyServerlessCacheRequestMarshaller Instance { get; }
    private static ModifyServerlessCacheRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyServerlessCacheRequest publicRequest);
    internal static ModifyServerlessCacheRequestMarshaller GetInstance();
    public static ModifyServerlessCacheRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyServerlessCacheResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyServerlessCacheResponseUnmarshaller _instance;
    public static ModifyServerlessCacheResponseUnmarshaller Instance { get; }
    private static ModifyServerlessCacheResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyServerlessCacheResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyServerlessCacheResponseUnmarshaller GetInstance();
    public static ModifyServerlessCacheResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyUserGroupRequestMarshaller : object {
    private static ModifyUserGroupRequestMarshaller _instance;
    public static ModifyUserGroupRequestMarshaller Instance { get; }
    private static ModifyUserGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyUserGroupRequest publicRequest);
    internal static ModifyUserGroupRequestMarshaller GetInstance();
    public static ModifyUserGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyUserGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyUserGroupResponseUnmarshaller _instance;
    public static ModifyUserGroupResponseUnmarshaller Instance { get; }
    private static ModifyUserGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyUserGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyUserGroupResponseUnmarshaller GetInstance();
    public static ModifyUserGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyUserRequestMarshaller : object {
    private static ModifyUserRequestMarshaller _instance;
    public static ModifyUserRequestMarshaller Instance { get; }
    private static ModifyUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyUserRequest publicRequest);
    internal static ModifyUserRequestMarshaller GetInstance();
    public static ModifyUserRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ModifyUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyUserResponseUnmarshaller _instance;
    public static ModifyUserResponseUnmarshaller Instance { get; }
    private static ModifyUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyUserResponseUnmarshaller GetInstance();
    public static ModifyUserResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeGroupConfigurationUnmarshaller : object {
    private static NodeGroupConfigurationUnmarshaller _instance;
    public static NodeGroupConfigurationUnmarshaller Instance { get; }
    private static NodeGroupConfigurationUnmarshaller();
    public sealed virtual NodeGroupConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeGroupConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static NodeGroupConfigurationUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeGroupMemberUnmarshaller : object {
    private static NodeGroupMemberUnmarshaller _instance;
    public static NodeGroupMemberUnmarshaller Instance { get; }
    private static NodeGroupMemberUnmarshaller();
    public sealed virtual NodeGroupMember Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeGroupMember Unmarshall(JsonUnmarshallerContext context);
    public static NodeGroupMemberUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeGroupMemberUpdateStatusUnmarshaller : object {
    private static NodeGroupMemberUpdateStatusUnmarshaller _instance;
    public static NodeGroupMemberUpdateStatusUnmarshaller Instance { get; }
    private static NodeGroupMemberUpdateStatusUnmarshaller();
    public sealed virtual NodeGroupMemberUpdateStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeGroupMemberUpdateStatus Unmarshall(JsonUnmarshallerContext context);
    public static NodeGroupMemberUpdateStatusUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeGroupNotFoundExceptionUnmarshaller : object {
    private static NodeGroupNotFoundExceptionUnmarshaller _instance;
    public static NodeGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static NodeGroupNotFoundExceptionUnmarshaller();
    public sealed virtual NodeGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NodeGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeGroupsPerReplicationGroupQuotaExceededExceptionUnmarshaller : object {
    private static NodeGroupsPerReplicationGroupQuotaExceededExceptionUnmarshaller _instance;
    public static NodeGroupsPerReplicationGroupQuotaExceededExceptionUnmarshaller Instance { get; }
    private static NodeGroupsPerReplicationGroupQuotaExceededExceptionUnmarshaller();
    public sealed virtual NodeGroupsPerReplicationGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeGroupsPerReplicationGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NodeGroupsPerReplicationGroupQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeGroupUnmarshaller : object {
    private static NodeGroupUnmarshaller _instance;
    public static NodeGroupUnmarshaller Instance { get; }
    private static NodeGroupUnmarshaller();
    public sealed virtual NodeGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeGroup Unmarshall(JsonUnmarshallerContext context);
    public static NodeGroupUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeGroupUpdateStatusUnmarshaller : object {
    private static NodeGroupUpdateStatusUnmarshaller _instance;
    public static NodeGroupUpdateStatusUnmarshaller Instance { get; }
    private static NodeGroupUpdateStatusUnmarshaller();
    public sealed virtual NodeGroupUpdateStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeGroupUpdateStatus Unmarshall(JsonUnmarshallerContext context);
    public static NodeGroupUpdateStatusUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeQuotaForClusterExceededExceptionUnmarshaller : object {
    private static NodeQuotaForClusterExceededExceptionUnmarshaller _instance;
    public static NodeQuotaForClusterExceededExceptionUnmarshaller Instance { get; }
    private static NodeQuotaForClusterExceededExceptionUnmarshaller();
    public sealed virtual NodeQuotaForClusterExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeQuotaForClusterExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NodeQuotaForClusterExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeQuotaForCustomerExceededExceptionUnmarshaller : object {
    private static NodeQuotaForCustomerExceededExceptionUnmarshaller _instance;
    public static NodeQuotaForCustomerExceededExceptionUnmarshaller Instance { get; }
    private static NodeQuotaForCustomerExceededExceptionUnmarshaller();
    public sealed virtual NodeQuotaForCustomerExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeQuotaForCustomerExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NodeQuotaForCustomerExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NodeSnapshotUnmarshaller : object {
    private static NodeSnapshotUnmarshaller _instance;
    public static NodeSnapshotUnmarshaller Instance { get; }
    private static NodeSnapshotUnmarshaller();
    public sealed virtual NodeSnapshot Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeSnapshot Unmarshall(JsonUnmarshallerContext context);
    public static NodeSnapshotUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NoOperationExceptionUnmarshaller : object {
    private static NoOperationExceptionUnmarshaller _instance;
    public static NoOperationExceptionUnmarshaller Instance { get; }
    private static NoOperationExceptionUnmarshaller();
    public sealed virtual NoOperationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoOperationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoOperationExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.NotificationConfigurationUnmarshaller : object {
    private static NotificationConfigurationUnmarshaller _instance;
    public static NotificationConfigurationUnmarshaller Instance { get; }
    private static NotificationConfigurationUnmarshaller();
    public sealed virtual NotificationConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NotificationConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static NotificationConfigurationUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ParameterUnmarshaller : object {
    private static ParameterUnmarshaller _instance;
    public static ParameterUnmarshaller Instance { get; }
    private static ParameterUnmarshaller();
    public sealed virtual Parameter Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Parameter Unmarshall(JsonUnmarshallerContext context);
    public static ParameterUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.PendingLogDeliveryConfigurationUnmarshaller : object {
    private static PendingLogDeliveryConfigurationUnmarshaller _instance;
    public static PendingLogDeliveryConfigurationUnmarshaller Instance { get; }
    private static PendingLogDeliveryConfigurationUnmarshaller();
    public sealed virtual PendingLogDeliveryConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PendingLogDeliveryConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static PendingLogDeliveryConfigurationUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.PendingModifiedValuesUnmarshaller : object {
    private static PendingModifiedValuesUnmarshaller _instance;
    public static PendingModifiedValuesUnmarshaller Instance { get; }
    private static PendingModifiedValuesUnmarshaller();
    public sealed virtual PendingModifiedValues Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PendingModifiedValues Unmarshall(JsonUnmarshallerContext context);
    public static PendingModifiedValuesUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ProcessedUpdateActionUnmarshaller : object {
    private static ProcessedUpdateActionUnmarshaller _instance;
    public static ProcessedUpdateActionUnmarshaller Instance { get; }
    private static ProcessedUpdateActionUnmarshaller();
    public sealed virtual ProcessedUpdateAction Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ProcessedUpdateAction Unmarshall(JsonUnmarshallerContext context);
    public static ProcessedUpdateActionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.PurchaseReservedCacheNodesOfferingRequestMarshaller : object {
    private static PurchaseReservedCacheNodesOfferingRequestMarshaller _instance;
    public static PurchaseReservedCacheNodesOfferingRequestMarshaller Instance { get; }
    private static PurchaseReservedCacheNodesOfferingRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PurchaseReservedCacheNodesOfferingRequest publicRequest);
    internal static PurchaseReservedCacheNodesOfferingRequestMarshaller GetInstance();
    public static PurchaseReservedCacheNodesOfferingRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.PurchaseReservedCacheNodesOfferingResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PurchaseReservedCacheNodesOfferingResponseUnmarshaller _instance;
    public static PurchaseReservedCacheNodesOfferingResponseUnmarshaller Instance { get; }
    private static PurchaseReservedCacheNodesOfferingResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PurchaseReservedCacheNodesOfferingResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PurchaseReservedCacheNodesOfferingResponseUnmarshaller GetInstance();
    public static PurchaseReservedCacheNodesOfferingResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.RebalanceSlotsInGlobalReplicationGroupRequestMarshaller : object {
    private static RebalanceSlotsInGlobalReplicationGroupRequestMarshaller _instance;
    public static RebalanceSlotsInGlobalReplicationGroupRequestMarshaller Instance { get; }
    private static RebalanceSlotsInGlobalReplicationGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RebalanceSlotsInGlobalReplicationGroupRequest publicRequest);
    internal static RebalanceSlotsInGlobalReplicationGroupRequestMarshaller GetInstance();
    public static RebalanceSlotsInGlobalReplicationGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.RebalanceSlotsInGlobalReplicationGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RebalanceSlotsInGlobalReplicationGroupResponseUnmarshaller _instance;
    public static RebalanceSlotsInGlobalReplicationGroupResponseUnmarshaller Instance { get; }
    private static RebalanceSlotsInGlobalReplicationGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RebalanceSlotsInGlobalReplicationGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RebalanceSlotsInGlobalReplicationGroupResponseUnmarshaller GetInstance();
    public static RebalanceSlotsInGlobalReplicationGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.RebootCacheClusterRequestMarshaller : object {
    private static RebootCacheClusterRequestMarshaller _instance;
    public static RebootCacheClusterRequestMarshaller Instance { get; }
    private static RebootCacheClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RebootCacheClusterRequest publicRequest);
    internal static RebootCacheClusterRequestMarshaller GetInstance();
    public static RebootCacheClusterRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.RebootCacheClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RebootCacheClusterResponseUnmarshaller _instance;
    public static RebootCacheClusterResponseUnmarshaller Instance { get; }
    private static RebootCacheClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RebootCacheClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RebootCacheClusterResponseUnmarshaller GetInstance();
    public static RebootCacheClusterResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.RecurringChargeUnmarshaller : object {
    private static RecurringChargeUnmarshaller _instance;
    public static RecurringChargeUnmarshaller Instance { get; }
    private static RecurringChargeUnmarshaller();
    public sealed virtual RecurringCharge Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RecurringCharge Unmarshall(JsonUnmarshallerContext context);
    public static RecurringChargeUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.RemoveTagsFromResourceRequestMarshaller : object {
    private static RemoveTagsFromResourceRequestMarshaller _instance;
    public static RemoveTagsFromResourceRequestMarshaller Instance { get; }
    private static RemoveTagsFromResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RemoveTagsFromResourceRequest publicRequest);
    internal static RemoveTagsFromResourceRequestMarshaller GetInstance();
    public static RemoveTagsFromResourceRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.RemoveTagsFromResourceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RemoveTagsFromResourceResponseUnmarshaller _instance;
    public static RemoveTagsFromResourceResponseUnmarshaller Instance { get; }
    private static RemoveTagsFromResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RemoveTagsFromResourceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RemoveTagsFromResourceResponseUnmarshaller GetInstance();
    public static RemoveTagsFromResourceResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReplicationGroupAlreadyExistsExceptionUnmarshaller : object {
    private static ReplicationGroupAlreadyExistsExceptionUnmarshaller _instance;
    public static ReplicationGroupAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ReplicationGroupAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ReplicationGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReplicationGroupAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReplicationGroupAlreadyUnderMigrationExceptionUnmarshaller : object {
    private static ReplicationGroupAlreadyUnderMigrationExceptionUnmarshaller _instance;
    public static ReplicationGroupAlreadyUnderMigrationExceptionUnmarshaller Instance { get; }
    private static ReplicationGroupAlreadyUnderMigrationExceptionUnmarshaller();
    public sealed virtual ReplicationGroupAlreadyUnderMigrationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationGroupAlreadyUnderMigrationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReplicationGroupAlreadyUnderMigrationExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReplicationGroupNotFoundExceptionUnmarshaller : object {
    private static ReplicationGroupNotFoundExceptionUnmarshaller _instance;
    public static ReplicationGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static ReplicationGroupNotFoundExceptionUnmarshaller();
    public sealed virtual ReplicationGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReplicationGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReplicationGroupNotUnderMigrationExceptionUnmarshaller : object {
    private static ReplicationGroupNotUnderMigrationExceptionUnmarshaller _instance;
    public static ReplicationGroupNotUnderMigrationExceptionUnmarshaller Instance { get; }
    private static ReplicationGroupNotUnderMigrationExceptionUnmarshaller();
    public sealed virtual ReplicationGroupNotUnderMigrationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationGroupNotUnderMigrationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReplicationGroupNotUnderMigrationExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReplicationGroupPendingModifiedValuesUnmarshaller : object {
    private static ReplicationGroupPendingModifiedValuesUnmarshaller _instance;
    public static ReplicationGroupPendingModifiedValuesUnmarshaller Instance { get; }
    private static ReplicationGroupPendingModifiedValuesUnmarshaller();
    public sealed virtual ReplicationGroupPendingModifiedValues Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationGroupPendingModifiedValues Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationGroupPendingModifiedValuesUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReplicationGroupUnmarshaller : object {
    private static ReplicationGroupUnmarshaller _instance;
    public static ReplicationGroupUnmarshaller Instance { get; }
    private static ReplicationGroupUnmarshaller();
    public sealed virtual ReplicationGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationGroup Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationGroupUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReservedCacheNodeAlreadyExistsExceptionUnmarshaller : object {
    private static ReservedCacheNodeAlreadyExistsExceptionUnmarshaller _instance;
    public static ReservedCacheNodeAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ReservedCacheNodeAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ReservedCacheNodeAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedCacheNodeAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedCacheNodeAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReservedCacheNodeNotFoundExceptionUnmarshaller : object {
    private static ReservedCacheNodeNotFoundExceptionUnmarshaller _instance;
    public static ReservedCacheNodeNotFoundExceptionUnmarshaller Instance { get; }
    private static ReservedCacheNodeNotFoundExceptionUnmarshaller();
    public sealed virtual ReservedCacheNodeNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedCacheNodeNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedCacheNodeNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReservedCacheNodeQuotaExceededExceptionUnmarshaller : object {
    private static ReservedCacheNodeQuotaExceededExceptionUnmarshaller _instance;
    public static ReservedCacheNodeQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ReservedCacheNodeQuotaExceededExceptionUnmarshaller();
    public sealed virtual ReservedCacheNodeQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedCacheNodeQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedCacheNodeQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReservedCacheNodesOfferingNotFoundExceptionUnmarshaller : object {
    private static ReservedCacheNodesOfferingNotFoundExceptionUnmarshaller _instance;
    public static ReservedCacheNodesOfferingNotFoundExceptionUnmarshaller Instance { get; }
    private static ReservedCacheNodesOfferingNotFoundExceptionUnmarshaller();
    public sealed virtual ReservedCacheNodesOfferingNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedCacheNodesOfferingNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedCacheNodesOfferingNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReservedCacheNodesOfferingUnmarshaller : object {
    private static ReservedCacheNodesOfferingUnmarshaller _instance;
    public static ReservedCacheNodesOfferingUnmarshaller Instance { get; }
    private static ReservedCacheNodesOfferingUnmarshaller();
    public sealed virtual ReservedCacheNodesOffering Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedCacheNodesOffering Unmarshall(JsonUnmarshallerContext context);
    public static ReservedCacheNodesOfferingUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReservedCacheNodeUnmarshaller : object {
    private static ReservedCacheNodeUnmarshaller _instance;
    public static ReservedCacheNodeUnmarshaller Instance { get; }
    private static ReservedCacheNodeUnmarshaller();
    public sealed virtual ReservedCacheNode Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedCacheNode Unmarshall(JsonUnmarshallerContext context);
    public static ReservedCacheNodeUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ResetCacheParameterGroupRequestMarshaller : object {
    private static ResetCacheParameterGroupRequestMarshaller _instance;
    public static ResetCacheParameterGroupRequestMarshaller Instance { get; }
    private static ResetCacheParameterGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ResetCacheParameterGroupRequest publicRequest);
    internal static ResetCacheParameterGroupRequestMarshaller GetInstance();
    public static ResetCacheParameterGroupRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ResetCacheParameterGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ResetCacheParameterGroupResponseUnmarshaller _instance;
    public static ResetCacheParameterGroupResponseUnmarshaller Instance { get; }
    private static ResetCacheParameterGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ResetCacheParameterGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ResetCacheParameterGroupResponseUnmarshaller GetInstance();
    public static ResetCacheParameterGroupResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ReshardingStatusUnmarshaller : object {
    private static ReshardingStatusUnmarshaller _instance;
    public static ReshardingStatusUnmarshaller Instance { get; }
    private static ReshardingStatusUnmarshaller();
    public sealed virtual ReshardingStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReshardingStatus Unmarshall(JsonUnmarshallerContext context);
    public static ReshardingStatusUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.RevokeCacheSecurityGroupIngressRequestMarshaller : object {
    private static RevokeCacheSecurityGroupIngressRequestMarshaller _instance;
    public static RevokeCacheSecurityGroupIngressRequestMarshaller Instance { get; }
    private static RevokeCacheSecurityGroupIngressRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RevokeCacheSecurityGroupIngressRequest publicRequest);
    internal static RevokeCacheSecurityGroupIngressRequestMarshaller GetInstance();
    public static RevokeCacheSecurityGroupIngressRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.RevokeCacheSecurityGroupIngressResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RevokeCacheSecurityGroupIngressResponseUnmarshaller _instance;
    public static RevokeCacheSecurityGroupIngressResponseUnmarshaller Instance { get; }
    private static RevokeCacheSecurityGroupIngressResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RevokeCacheSecurityGroupIngressResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RevokeCacheSecurityGroupIngressResponseUnmarshaller GetInstance();
    public static RevokeCacheSecurityGroupIngressResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SecurityGroupMembershipUnmarshaller : object {
    private static SecurityGroupMembershipUnmarshaller _instance;
    public static SecurityGroupMembershipUnmarshaller Instance { get; }
    private static SecurityGroupMembershipUnmarshaller();
    public sealed virtual SecurityGroupMembership Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SecurityGroupMembership Unmarshall(JsonUnmarshallerContext context);
    public static SecurityGroupMembershipUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServerlessCacheAlreadyExistsExceptionUnmarshaller : object {
    private static ServerlessCacheAlreadyExistsExceptionUnmarshaller _instance;
    public static ServerlessCacheAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ServerlessCacheAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ServerlessCacheAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerlessCacheAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServerlessCacheAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServerlessCacheConfigurationUnmarshaller : object {
    private static ServerlessCacheConfigurationUnmarshaller _instance;
    public static ServerlessCacheConfigurationUnmarshaller Instance { get; }
    private static ServerlessCacheConfigurationUnmarshaller();
    public sealed virtual ServerlessCacheConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerlessCacheConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ServerlessCacheConfigurationUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServerlessCacheNotFoundExceptionUnmarshaller : object {
    private static ServerlessCacheNotFoundExceptionUnmarshaller _instance;
    public static ServerlessCacheNotFoundExceptionUnmarshaller Instance { get; }
    private static ServerlessCacheNotFoundExceptionUnmarshaller();
    public sealed virtual ServerlessCacheNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerlessCacheNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServerlessCacheNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServerlessCacheQuotaForCustomerExceededExceptionUnmarshaller : object {
    private static ServerlessCacheQuotaForCustomerExceededExceptionUnmarshaller _instance;
    public static ServerlessCacheQuotaForCustomerExceededExceptionUnmarshaller Instance { get; }
    private static ServerlessCacheQuotaForCustomerExceededExceptionUnmarshaller();
    public sealed virtual ServerlessCacheQuotaForCustomerExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerlessCacheQuotaForCustomerExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServerlessCacheQuotaForCustomerExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServerlessCacheSnapshotAlreadyExistsExceptionUnmarshaller : object {
    private static ServerlessCacheSnapshotAlreadyExistsExceptionUnmarshaller _instance;
    public static ServerlessCacheSnapshotAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ServerlessCacheSnapshotAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ServerlessCacheSnapshotAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerlessCacheSnapshotAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServerlessCacheSnapshotAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServerlessCacheSnapshotNotFoundExceptionUnmarshaller : object {
    private static ServerlessCacheSnapshotNotFoundExceptionUnmarshaller _instance;
    public static ServerlessCacheSnapshotNotFoundExceptionUnmarshaller Instance { get; }
    private static ServerlessCacheSnapshotNotFoundExceptionUnmarshaller();
    public sealed virtual ServerlessCacheSnapshotNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerlessCacheSnapshotNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServerlessCacheSnapshotNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServerlessCacheSnapshotQuotaExceededExceptionUnmarshaller : object {
    private static ServerlessCacheSnapshotQuotaExceededExceptionUnmarshaller _instance;
    public static ServerlessCacheSnapshotQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ServerlessCacheSnapshotQuotaExceededExceptionUnmarshaller();
    public sealed virtual ServerlessCacheSnapshotQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerlessCacheSnapshotQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServerlessCacheSnapshotQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServerlessCacheSnapshotUnmarshaller : object {
    private static ServerlessCacheSnapshotUnmarshaller _instance;
    public static ServerlessCacheSnapshotUnmarshaller Instance { get; }
    private static ServerlessCacheSnapshotUnmarshaller();
    public sealed virtual ServerlessCacheSnapshot Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerlessCacheSnapshot Unmarshall(JsonUnmarshallerContext context);
    public static ServerlessCacheSnapshotUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServerlessCacheUnmarshaller : object {
    private static ServerlessCacheUnmarshaller _instance;
    public static ServerlessCacheUnmarshaller Instance { get; }
    private static ServerlessCacheUnmarshaller();
    public sealed virtual ServerlessCache Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerlessCache Unmarshall(JsonUnmarshallerContext context);
    public static ServerlessCacheUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServiceLinkedRoleNotFoundExceptionUnmarshaller : object {
    private static ServiceLinkedRoleNotFoundExceptionUnmarshaller _instance;
    public static ServiceLinkedRoleNotFoundExceptionUnmarshaller Instance { get; }
    private static ServiceLinkedRoleNotFoundExceptionUnmarshaller();
    public sealed virtual ServiceLinkedRoleNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceLinkedRoleNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServiceLinkedRoleNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServiceUpdateNotFoundExceptionUnmarshaller : object {
    private static ServiceUpdateNotFoundExceptionUnmarshaller _instance;
    public static ServiceUpdateNotFoundExceptionUnmarshaller Instance { get; }
    private static ServiceUpdateNotFoundExceptionUnmarshaller();
    public sealed virtual ServiceUpdateNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceUpdateNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServiceUpdateNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.ServiceUpdateUnmarshaller : object {
    private static ServiceUpdateUnmarshaller _instance;
    public static ServiceUpdateUnmarshaller Instance { get; }
    private static ServiceUpdateUnmarshaller();
    public sealed virtual ServiceUpdate Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceUpdate Unmarshall(JsonUnmarshallerContext context);
    public static ServiceUpdateUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SlotMigrationUnmarshaller : object {
    private static SlotMigrationUnmarshaller _instance;
    public static SlotMigrationUnmarshaller Instance { get; }
    private static SlotMigrationUnmarshaller();
    public sealed virtual SlotMigration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SlotMigration Unmarshall(JsonUnmarshallerContext context);
    public static SlotMigrationUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SnapshotAlreadyExistsExceptionUnmarshaller : object {
    private static SnapshotAlreadyExistsExceptionUnmarshaller _instance;
    public static SnapshotAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static SnapshotAlreadyExistsExceptionUnmarshaller();
    public sealed virtual SnapshotAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SnapshotFeatureNotSupportedExceptionUnmarshaller : object {
    private static SnapshotFeatureNotSupportedExceptionUnmarshaller _instance;
    public static SnapshotFeatureNotSupportedExceptionUnmarshaller Instance { get; }
    private static SnapshotFeatureNotSupportedExceptionUnmarshaller();
    public sealed virtual SnapshotFeatureNotSupportedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotFeatureNotSupportedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotFeatureNotSupportedExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SnapshotNotFoundExceptionUnmarshaller : object {
    private static SnapshotNotFoundExceptionUnmarshaller _instance;
    public static SnapshotNotFoundExceptionUnmarshaller Instance { get; }
    private static SnapshotNotFoundExceptionUnmarshaller();
    public sealed virtual SnapshotNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SnapshotQuotaExceededExceptionUnmarshaller : object {
    private static SnapshotQuotaExceededExceptionUnmarshaller _instance;
    public static SnapshotQuotaExceededExceptionUnmarshaller Instance { get; }
    private static SnapshotQuotaExceededExceptionUnmarshaller();
    public sealed virtual SnapshotQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SnapshotUnmarshaller : object {
    private static SnapshotUnmarshaller _instance;
    public static SnapshotUnmarshaller Instance { get; }
    private static SnapshotUnmarshaller();
    public sealed virtual Snapshot Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Snapshot Unmarshall(JsonUnmarshallerContext context);
    public static SnapshotUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.StartMigrationRequestMarshaller : object {
    private static StartMigrationRequestMarshaller _instance;
    public static StartMigrationRequestMarshaller Instance { get; }
    private static StartMigrationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StartMigrationRequest publicRequest);
    internal static StartMigrationRequestMarshaller GetInstance();
    public static StartMigrationRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.StartMigrationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static StartMigrationResponseUnmarshaller _instance;
    public static StartMigrationResponseUnmarshaller Instance { get; }
    private static StartMigrationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, StartMigrationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StartMigrationResponseUnmarshaller GetInstance();
    public static StartMigrationResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SubnetInUseExceptionUnmarshaller : object {
    private static SubnetInUseExceptionUnmarshaller _instance;
    public static SubnetInUseExceptionUnmarshaller Instance { get; }
    private static SubnetInUseExceptionUnmarshaller();
    public sealed virtual SubnetInUseException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubnetInUseException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubnetInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SubnetNotAllowedExceptionUnmarshaller : object {
    private static SubnetNotAllowedExceptionUnmarshaller _instance;
    public static SubnetNotAllowedExceptionUnmarshaller Instance { get; }
    private static SubnetNotAllowedExceptionUnmarshaller();
    public sealed virtual SubnetNotAllowedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubnetNotAllowedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubnetNotAllowedExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SubnetOutpostUnmarshaller : object {
    private static SubnetOutpostUnmarshaller _instance;
    public static SubnetOutpostUnmarshaller Instance { get; }
    private static SubnetOutpostUnmarshaller();
    public sealed virtual SubnetOutpost Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubnetOutpost Unmarshall(JsonUnmarshallerContext context);
    public static SubnetOutpostUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.SubnetUnmarshaller : object {
    private static SubnetUnmarshaller _instance;
    public static SubnetUnmarshaller Instance { get; }
    private static SubnetUnmarshaller();
    public sealed virtual Subnet Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Subnet Unmarshall(JsonUnmarshallerContext context);
    public static SubnetUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.TagNotFoundExceptionUnmarshaller : object {
    private static TagNotFoundExceptionUnmarshaller _instance;
    public static TagNotFoundExceptionUnmarshaller Instance { get; }
    private static TagNotFoundExceptionUnmarshaller();
    public sealed virtual TagNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TagNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TagNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.TagQuotaPerResourceExceededExceptionUnmarshaller : object {
    private static TagQuotaPerResourceExceededExceptionUnmarshaller _instance;
    public static TagQuotaPerResourceExceededExceptionUnmarshaller Instance { get; }
    private static TagQuotaPerResourceExceededExceptionUnmarshaller();
    public sealed virtual TagQuotaPerResourceExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TagQuotaPerResourceExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TagQuotaPerResourceExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    public sealed virtual Tag Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.TestFailoverNotAvailableExceptionUnmarshaller : object {
    private static TestFailoverNotAvailableExceptionUnmarshaller _instance;
    public static TestFailoverNotAvailableExceptionUnmarshaller Instance { get; }
    private static TestFailoverNotAvailableExceptionUnmarshaller();
    public sealed virtual TestFailoverNotAvailableException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TestFailoverNotAvailableException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TestFailoverNotAvailableExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.TestFailoverRequestMarshaller : object {
    private static TestFailoverRequestMarshaller _instance;
    public static TestFailoverRequestMarshaller Instance { get; }
    private static TestFailoverRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TestFailoverRequest publicRequest);
    internal static TestFailoverRequestMarshaller GetInstance();
    public static TestFailoverRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.TestFailoverResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TestFailoverResponseUnmarshaller _instance;
    public static TestFailoverResponseUnmarshaller Instance { get; }
    private static TestFailoverResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TestFailoverResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TestFailoverResponseUnmarshaller GetInstance();
    public static TestFailoverResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.TestMigrationRequestMarshaller : object {
    private static TestMigrationRequestMarshaller _instance;
    public static TestMigrationRequestMarshaller Instance { get; }
    private static TestMigrationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TestMigrationRequest publicRequest);
    internal static TestMigrationRequestMarshaller GetInstance();
    public static TestMigrationRequestMarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.TestMigrationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TestMigrationResponseUnmarshaller _instance;
    public static TestMigrationResponseUnmarshaller Instance { get; }
    private static TestMigrationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TestMigrationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TestMigrationResponseUnmarshaller GetInstance();
    public static TestMigrationResponseUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UnprocessedUpdateActionUnmarshaller : object {
    private static UnprocessedUpdateActionUnmarshaller _instance;
    public static UnprocessedUpdateActionUnmarshaller Instance { get; }
    private static UnprocessedUpdateActionUnmarshaller();
    public sealed virtual UnprocessedUpdateAction Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UnprocessedUpdateAction Unmarshall(JsonUnmarshallerContext context);
    public static UnprocessedUpdateActionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UpdateActionUnmarshaller : object {
    private static UpdateActionUnmarshaller _instance;
    public static UpdateActionUnmarshaller Instance { get; }
    private static UpdateActionUnmarshaller();
    public sealed virtual UpdateAction Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UpdateAction Unmarshall(JsonUnmarshallerContext context);
    public static UpdateActionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserAlreadyExistsExceptionUnmarshaller : object {
    private static UserAlreadyExistsExceptionUnmarshaller _instance;
    public static UserAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static UserAlreadyExistsExceptionUnmarshaller();
    public sealed virtual UserAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UserAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserGroupAlreadyExistsExceptionUnmarshaller : object {
    private static UserGroupAlreadyExistsExceptionUnmarshaller _instance;
    public static UserGroupAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static UserGroupAlreadyExistsExceptionUnmarshaller();
    public sealed virtual UserGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UserGroupAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserGroupNotFoundExceptionUnmarshaller : object {
    private static UserGroupNotFoundExceptionUnmarshaller _instance;
    public static UserGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static UserGroupNotFoundExceptionUnmarshaller();
    public sealed virtual UserGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UserGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserGroupPendingChangesUnmarshaller : object {
    private static UserGroupPendingChangesUnmarshaller _instance;
    public static UserGroupPendingChangesUnmarshaller Instance { get; }
    private static UserGroupPendingChangesUnmarshaller();
    public sealed virtual UserGroupPendingChanges Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserGroupPendingChanges Unmarshall(JsonUnmarshallerContext context);
    public static UserGroupPendingChangesUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserGroupQuotaExceededExceptionUnmarshaller : object {
    private static UserGroupQuotaExceededExceptionUnmarshaller _instance;
    public static UserGroupQuotaExceededExceptionUnmarshaller Instance { get; }
    private static UserGroupQuotaExceededExceptionUnmarshaller();
    public sealed virtual UserGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UserGroupQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserGroupsUpdateStatusUnmarshaller : object {
    private static UserGroupsUpdateStatusUnmarshaller _instance;
    public static UserGroupsUpdateStatusUnmarshaller Instance { get; }
    private static UserGroupsUpdateStatusUnmarshaller();
    public sealed virtual UserGroupsUpdateStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserGroupsUpdateStatus Unmarshall(JsonUnmarshallerContext context);
    public static UserGroupsUpdateStatusUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserGroupUnmarshaller : object {
    private static UserGroupUnmarshaller _instance;
    public static UserGroupUnmarshaller Instance { get; }
    private static UserGroupUnmarshaller();
    public sealed virtual UserGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserGroup Unmarshall(JsonUnmarshallerContext context);
    public static UserGroupUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserNotFoundExceptionUnmarshaller : object {
    private static UserNotFoundExceptionUnmarshaller _instance;
    public static UserNotFoundExceptionUnmarshaller Instance { get; }
    private static UserNotFoundExceptionUnmarshaller();
    public sealed virtual UserNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UserNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserQuotaExceededExceptionUnmarshaller : object {
    private static UserQuotaExceededExceptionUnmarshaller _instance;
    public static UserQuotaExceededExceptionUnmarshaller Instance { get; }
    private static UserQuotaExceededExceptionUnmarshaller();
    public sealed virtual UserQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UserQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.Internal.MarshallTransformations.UserUnmarshaller : object {
    private static UserUnmarshaller _instance;
    public static UserUnmarshaller Instance { get; }
    private static UserUnmarshaller();
    public sealed virtual User Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual User Unmarshall(JsonUnmarshallerContext context);
    public static UserUnmarshaller get_Instance();
}
public class Amazon.ElastiCache.Model.InvalidARNException : AmazonElastiCacheException {
    public InvalidARNException(string message);
    public InvalidARNException(string message, Exception innerException);
    public InvalidARNException(Exception innerException);
    public InvalidARNException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidARNException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidCacheClusterStateException : AmazonElastiCacheException {
    public InvalidCacheClusterStateException(string message);
    public InvalidCacheClusterStateException(string message, Exception innerException);
    public InvalidCacheClusterStateException(Exception innerException);
    public InvalidCacheClusterStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidCacheClusterStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidCacheParameterGroupStateException : AmazonElastiCacheException {
    public InvalidCacheParameterGroupStateException(string message);
    public InvalidCacheParameterGroupStateException(string message, Exception innerException);
    public InvalidCacheParameterGroupStateException(Exception innerException);
    public InvalidCacheParameterGroupStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidCacheParameterGroupStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidCacheSecurityGroupStateException : AmazonElastiCacheException {
    public InvalidCacheSecurityGroupStateException(string message);
    public InvalidCacheSecurityGroupStateException(string message, Exception innerException);
    public InvalidCacheSecurityGroupStateException(Exception innerException);
    public InvalidCacheSecurityGroupStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidCacheSecurityGroupStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidCredentialsException : AmazonElastiCacheException {
    public InvalidCredentialsException(string message);
    public InvalidCredentialsException(string message, Exception innerException);
    public InvalidCredentialsException(Exception innerException);
    public InvalidCredentialsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidCredentialsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidGlobalReplicationGroupStateException : AmazonElastiCacheException {
    public InvalidGlobalReplicationGroupStateException(string message);
    public InvalidGlobalReplicationGroupStateException(string message, Exception innerException);
    public InvalidGlobalReplicationGroupStateException(Exception innerException);
    public InvalidGlobalReplicationGroupStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidGlobalReplicationGroupStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidKMSKeyException : AmazonElastiCacheException {
    public InvalidKMSKeyException(string message);
    public InvalidKMSKeyException(string message, Exception innerException);
    public InvalidKMSKeyException(Exception innerException);
    public InvalidKMSKeyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidKMSKeyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidParameterCombinationException : AmazonElastiCacheException {
    public InvalidParameterCombinationException(string message);
    public InvalidParameterCombinationException(string message, Exception innerException);
    public InvalidParameterCombinationException(Exception innerException);
    public InvalidParameterCombinationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidParameterCombinationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidParameterValueException : AmazonElastiCacheException {
    public InvalidParameterValueException(string message);
    public InvalidParameterValueException(string message, Exception innerException);
    public InvalidParameterValueException(Exception innerException);
    public InvalidParameterValueException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidParameterValueException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidReplicationGroupStateException : AmazonElastiCacheException {
    public InvalidReplicationGroupStateException(string message);
    public InvalidReplicationGroupStateException(string message, Exception innerException);
    public InvalidReplicationGroupStateException(Exception innerException);
    public InvalidReplicationGroupStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidReplicationGroupStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidServerlessCacheSnapshotStateException : AmazonElastiCacheException {
    public InvalidServerlessCacheSnapshotStateException(string message);
    public InvalidServerlessCacheSnapshotStateException(string message, Exception innerException);
    public InvalidServerlessCacheSnapshotStateException(Exception innerException);
    public InvalidServerlessCacheSnapshotStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidServerlessCacheSnapshotStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidServerlessCacheStateException : AmazonElastiCacheException {
    public InvalidServerlessCacheStateException(string message);
    public InvalidServerlessCacheStateException(string message, Exception innerException);
    public InvalidServerlessCacheStateException(Exception innerException);
    public InvalidServerlessCacheStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidServerlessCacheStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidSnapshotStateException : AmazonElastiCacheException {
    public InvalidSnapshotStateException(string message);
    public InvalidSnapshotStateException(string message, Exception innerException);
    public InvalidSnapshotStateException(Exception innerException);
    public InvalidSnapshotStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSnapshotStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidSubnetException : AmazonElastiCacheException {
    public InvalidSubnetException(string message);
    public InvalidSubnetException(string message, Exception innerException);
    public InvalidSubnetException(Exception innerException);
    public InvalidSubnetException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSubnetException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidUserGroupStateException : AmazonElastiCacheException {
    public InvalidUserGroupStateException(string message);
    public InvalidUserGroupStateException(string message, Exception innerException);
    public InvalidUserGroupStateException(Exception innerException);
    public InvalidUserGroupStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidUserGroupStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidUserStateException : AmazonElastiCacheException {
    public InvalidUserStateException(string message);
    public InvalidUserStateException(string message, Exception innerException);
    public InvalidUserStateException(Exception innerException);
    public InvalidUserStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidUserStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.InvalidVPCNetworkStateException : AmazonElastiCacheException {
    public InvalidVPCNetworkStateException(string message);
    public InvalidVPCNetworkStateException(string message, Exception innerException);
    public InvalidVPCNetworkStateException(Exception innerException);
    public InvalidVPCNetworkStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidVPCNetworkStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.KinesisFirehoseDestinationDetails : object {
    private string _deliveryStream;
    public string DeliveryStream { get; public set; }
    public string get_DeliveryStream();
    public void set_DeliveryStream(string value);
    internal bool IsSetDeliveryStream();
}
public class Amazon.ElastiCache.Model.ListAllowedNodeTypeModificationsRequest : AmazonElastiCacheRequest {
    private string _cacheClusterId;
    private string _replicationGroupId;
    public string CacheClusterId { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
}
public class Amazon.ElastiCache.Model.ListAllowedNodeTypeModificationsResponse : AmazonWebServiceResponse {
    private List`1<string> _scaleDownModifications;
    private List`1<string> _scaleUpModifications;
    public List`1<string> ScaleDownModifications { get; public set; }
    public List`1<string> ScaleUpModifications { get; public set; }
    public List`1<string> get_ScaleDownModifications();
    public void set_ScaleDownModifications(List`1<string> value);
    internal bool IsSetScaleDownModifications();
    public List`1<string> get_ScaleUpModifications();
    public void set_ScaleUpModifications(List`1<string> value);
    internal bool IsSetScaleUpModifications();
}
public class Amazon.ElastiCache.Model.ListTagsForResourceRequest : AmazonElastiCacheRequest {
    private string _resourceName;
    [AWSPropertyAttribute]
public string ResourceName { get; public set; }
    public string get_ResourceName();
    public void set_ResourceName(string value);
    internal bool IsSetResourceName();
}
public class Amazon.ElastiCache.Model.ListTagsForResourceResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tagList;
    public List`1<Tag> TagList { get; public set; }
    public List`1<Tag> get_TagList();
    public void set_TagList(List`1<Tag> value);
    internal bool IsSetTagList();
}
public class Amazon.ElastiCache.Model.LogDeliveryConfiguration : object {
    private DestinationDetails _destinationDetails;
    private DestinationType _destinationType;
    private LogFormat _logFormat;
    private LogType _logType;
    private string _message;
    private LogDeliveryConfigurationStatus _status;
    public DestinationDetails DestinationDetails { get; public set; }
    public DestinationType DestinationType { get; public set; }
    public LogFormat LogFormat { get; public set; }
    public LogType LogType { get; public set; }
    public string Message { get; public set; }
    public LogDeliveryConfigurationStatus Status { get; public set; }
    public DestinationDetails get_DestinationDetails();
    public void set_DestinationDetails(DestinationDetails value);
    internal bool IsSetDestinationDetails();
    public DestinationType get_DestinationType();
    public void set_DestinationType(DestinationType value);
    internal bool IsSetDestinationType();
    public LogFormat get_LogFormat();
    public void set_LogFormat(LogFormat value);
    internal bool IsSetLogFormat();
    public LogType get_LogType();
    public void set_LogType(LogType value);
    internal bool IsSetLogType();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public LogDeliveryConfigurationStatus get_Status();
    public void set_Status(LogDeliveryConfigurationStatus value);
    internal bool IsSetStatus();
}
public class Amazon.ElastiCache.Model.LogDeliveryConfigurationRequest : object {
    private DestinationDetails _destinationDetails;
    private DestinationType _destinationType;
    private Nullable`1<bool> _enabled;
    private LogFormat _logFormat;
    private LogType _logType;
    public DestinationDetails DestinationDetails { get; public set; }
    public DestinationType DestinationType { get; public set; }
    public Nullable`1<bool> Enabled { get; public set; }
    public LogFormat LogFormat { get; public set; }
    public LogType LogType { get; public set; }
    public DestinationDetails get_DestinationDetails();
    public void set_DestinationDetails(DestinationDetails value);
    internal bool IsSetDestinationDetails();
    public DestinationType get_DestinationType();
    public void set_DestinationType(DestinationType value);
    internal bool IsSetDestinationType();
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
    public LogFormat get_LogFormat();
    public void set_LogFormat(LogFormat value);
    internal bool IsSetLogFormat();
    public LogType get_LogType();
    public void set_LogType(LogType value);
    internal bool IsSetLogType();
}
public class Amazon.ElastiCache.Model.ModifyCacheClusterRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _applyImmediately;
    private string _authToken;
    private AuthTokenUpdateStrategyType _authTokenUpdateStrategy;
    private Nullable`1<bool> _autoMinorVersionUpgrade;
    private AZMode _azMode;
    private string _cacheClusterId;
    private List`1<string> _cacheNodeIdsToRemove;
    private string _cacheNodeType;
    private string _cacheParameterGroupName;
    private List`1<string> _cacheSecurityGroupNames;
    private string _engineVersion;
    private IpDiscovery _ipDiscovery;
    private List`1<LogDeliveryConfigurationRequest> _logDeliveryConfigurations;
    private List`1<string> _newAvailabilityZones;
    private string _notificationTopicArn;
    private string _notificationTopicStatus;
    private Nullable`1<int> _numCacheNodes;
    private string _preferredMaintenanceWindow;
    private List`1<string> _securityGroupIds;
    private Nullable`1<int> _snapshotRetentionLimit;
    private string _snapshotWindow;
    public Nullable`1<bool> ApplyImmediately { get; public set; }
    public string AuthToken { get; public set; }
    public AuthTokenUpdateStrategyType AuthTokenUpdateStrategy { get; public set; }
    public Nullable`1<bool> AutoMinorVersionUpgrade { get; public set; }
    public AZMode AZMode { get; public set; }
    [AWSPropertyAttribute]
public string CacheClusterId { get; public set; }
    public List`1<string> CacheNodeIdsToRemove { get; public set; }
    public string CacheNodeType { get; public set; }
    public string CacheParameterGroupName { get; public set; }
    public List`1<string> CacheSecurityGroupNames { get; public set; }
    public string EngineVersion { get; public set; }
    public IpDiscovery IpDiscovery { get; public set; }
    public List`1<LogDeliveryConfigurationRequest> LogDeliveryConfigurations { get; public set; }
    public List`1<string> NewAvailabilityZones { get; public set; }
    public string NotificationTopicArn { get; public set; }
    public string NotificationTopicStatus { get; public set; }
    public Nullable`1<int> NumCacheNodes { get; public set; }
    public string PreferredMaintenanceWindow { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public string SnapshotWindow { get; public set; }
    public ModifyCacheClusterRequest(string cacheClusterId);
    public Nullable`1<bool> get_ApplyImmediately();
    public void set_ApplyImmediately(Nullable`1<bool> value);
    internal bool IsSetApplyImmediately();
    public string get_AuthToken();
    public void set_AuthToken(string value);
    internal bool IsSetAuthToken();
    public AuthTokenUpdateStrategyType get_AuthTokenUpdateStrategy();
    public void set_AuthTokenUpdateStrategy(AuthTokenUpdateStrategyType value);
    internal bool IsSetAuthTokenUpdateStrategy();
    public Nullable`1<bool> get_AutoMinorVersionUpgrade();
    public void set_AutoMinorVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAutoMinorVersionUpgrade();
    public AZMode get_AZMode();
    public void set_AZMode(AZMode value);
    internal bool IsSetAZMode();
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public List`1<string> get_CacheNodeIdsToRemove();
    public void set_CacheNodeIdsToRemove(List`1<string> value);
    internal bool IsSetCacheNodeIdsToRemove();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public List`1<string> get_CacheSecurityGroupNames();
    public void set_CacheSecurityGroupNames(List`1<string> value);
    internal bool IsSetCacheSecurityGroupNames();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public IpDiscovery get_IpDiscovery();
    public void set_IpDiscovery(IpDiscovery value);
    internal bool IsSetIpDiscovery();
    public List`1<LogDeliveryConfigurationRequest> get_LogDeliveryConfigurations();
    public void set_LogDeliveryConfigurations(List`1<LogDeliveryConfigurationRequest> value);
    internal bool IsSetLogDeliveryConfigurations();
    public List`1<string> get_NewAvailabilityZones();
    public void set_NewAvailabilityZones(List`1<string> value);
    internal bool IsSetNewAvailabilityZones();
    public string get_NotificationTopicArn();
    public void set_NotificationTopicArn(string value);
    internal bool IsSetNotificationTopicArn();
    public string get_NotificationTopicStatus();
    public void set_NotificationTopicStatus(string value);
    internal bool IsSetNotificationTopicStatus();
    public Nullable`1<int> get_NumCacheNodes();
    public void set_NumCacheNodes(Nullable`1<int> value);
    internal bool IsSetNumCacheNodes();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public string get_SnapshotWindow();
    public void set_SnapshotWindow(string value);
    internal bool IsSetSnapshotWindow();
}
public class Amazon.ElastiCache.Model.ModifyCacheClusterResponse : AmazonWebServiceResponse {
    private CacheCluster _cacheCluster;
    public CacheCluster CacheCluster { get; public set; }
    public CacheCluster get_CacheCluster();
    public void set_CacheCluster(CacheCluster value);
    internal bool IsSetCacheCluster();
}
public class Amazon.ElastiCache.Model.ModifyCacheParameterGroupRequest : AmazonElastiCacheRequest {
    private string _cacheParameterGroupName;
    private List`1<ParameterNameValue> _parameterNameValues;
    [AWSPropertyAttribute]
public string CacheParameterGroupName { get; public set; }
    [AWSPropertyAttribute]
public List`1<ParameterNameValue> ParameterNameValues { get; public set; }
    public ModifyCacheParameterGroupRequest(string cacheParameterGroupName, List`1<ParameterNameValue> parameterNameValues);
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public List`1<ParameterNameValue> get_ParameterNameValues();
    public void set_ParameterNameValues(List`1<ParameterNameValue> value);
    internal bool IsSetParameterNameValues();
}
public class Amazon.ElastiCache.Model.ModifyCacheParameterGroupResponse : AmazonWebServiceResponse {
    private string _cacheParameterGroupName;
    public string CacheParameterGroupName { get; public set; }
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
}
public class Amazon.ElastiCache.Model.ModifyCacheSubnetGroupRequest : AmazonElastiCacheRequest {
    private string _cacheSubnetGroupDescription;
    private string _cacheSubnetGroupName;
    private List`1<string> _subnetIds;
    public string CacheSubnetGroupDescription { get; public set; }
    [AWSPropertyAttribute]
public string CacheSubnetGroupName { get; public set; }
    public List`1<string> SubnetIds { get; public set; }
    public string get_CacheSubnetGroupDescription();
    public void set_CacheSubnetGroupDescription(string value);
    internal bool IsSetCacheSubnetGroupDescription();
    public string get_CacheSubnetGroupName();
    public void set_CacheSubnetGroupName(string value);
    internal bool IsSetCacheSubnetGroupName();
    public List`1<string> get_SubnetIds();
    public void set_SubnetIds(List`1<string> value);
    internal bool IsSetSubnetIds();
}
public class Amazon.ElastiCache.Model.ModifyCacheSubnetGroupResponse : AmazonWebServiceResponse {
    private CacheSubnetGroup _cacheSubnetGroup;
    public CacheSubnetGroup CacheSubnetGroup { get; public set; }
    public CacheSubnetGroup get_CacheSubnetGroup();
    public void set_CacheSubnetGroup(CacheSubnetGroup value);
    internal bool IsSetCacheSubnetGroup();
}
public class Amazon.ElastiCache.Model.ModifyGlobalReplicationGroupRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _applyImmediately;
    private Nullable`1<bool> _automaticFailoverEnabled;
    private string _cacheNodeType;
    private string _cacheParameterGroupName;
    private string _engineVersion;
    private string _globalReplicationGroupDescription;
    private string _globalReplicationGroupId;
    [AWSPropertyAttribute]
public Nullable`1<bool> ApplyImmediately { get; public set; }
    public Nullable`1<bool> AutomaticFailoverEnabled { get; public set; }
    public string CacheNodeType { get; public set; }
    public string CacheParameterGroupName { get; public set; }
    public string EngineVersion { get; public set; }
    public string GlobalReplicationGroupDescription { get; public set; }
    [AWSPropertyAttribute]
public string GlobalReplicationGroupId { get; public set; }
    public Nullable`1<bool> get_ApplyImmediately();
    public void set_ApplyImmediately(Nullable`1<bool> value);
    internal bool IsSetApplyImmediately();
    public Nullable`1<bool> get_AutomaticFailoverEnabled();
    public void set_AutomaticFailoverEnabled(Nullable`1<bool> value);
    internal bool IsSetAutomaticFailoverEnabled();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public string get_GlobalReplicationGroupDescription();
    public void set_GlobalReplicationGroupDescription(string value);
    internal bool IsSetGlobalReplicationGroupDescription();
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
}
public class Amazon.ElastiCache.Model.ModifyGlobalReplicationGroupResponse : AmazonWebServiceResponse {
    private GlobalReplicationGroup _globalReplicationGroup;
    public GlobalReplicationGroup GlobalReplicationGroup { get; public set; }
    public GlobalReplicationGroup get_GlobalReplicationGroup();
    public void set_GlobalReplicationGroup(GlobalReplicationGroup value);
    internal bool IsSetGlobalReplicationGroup();
}
public class Amazon.ElastiCache.Model.ModifyReplicationGroupRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _applyImmediately;
    private string _authToken;
    private AuthTokenUpdateStrategyType _authTokenUpdateStrategy;
    private Nullable`1<bool> _automaticFailoverEnabled;
    private Nullable`1<bool> _autoMinorVersionUpgrade;
    private string _cacheNodeType;
    private string _cacheParameterGroupName;
    private List`1<string> _cacheSecurityGroupNames;
    private ClusterMode _clusterMode;
    private string _engineVersion;
    private IpDiscovery _ipDiscovery;
    private List`1<LogDeliveryConfigurationRequest> _logDeliveryConfigurations;
    private Nullable`1<bool> _multiAZEnabled;
    private string _nodeGroupId;
    private string _notificationTopicArn;
    private string _notificationTopicStatus;
    private string _preferredMaintenanceWindow;
    private string _primaryClusterId;
    private Nullable`1<bool> _removeUserGroups;
    private string _replicationGroupDescription;
    private string _replicationGroupId;
    private List`1<string> _securityGroupIds;
    private Nullable`1<int> _snapshotRetentionLimit;
    private string _snapshottingClusterId;
    private string _snapshotWindow;
    private Nullable`1<bool> _transitEncryptionEnabled;
    private TransitEncryptionMode _transitEncryptionMode;
    private List`1<string> _userGroupIdsToAdd;
    private List`1<string> _userGroupIdsToRemove;
    public Nullable`1<bool> ApplyImmediately { get; public set; }
    public string AuthToken { get; public set; }
    public AuthTokenUpdateStrategyType AuthTokenUpdateStrategy { get; public set; }
    public Nullable`1<bool> AutomaticFailoverEnabled { get; public set; }
    public Nullable`1<bool> AutoMinorVersionUpgrade { get; public set; }
    public string CacheNodeType { get; public set; }
    public string CacheParameterGroupName { get; public set; }
    public List`1<string> CacheSecurityGroupNames { get; public set; }
    public ClusterMode ClusterMode { get; public set; }
    public string EngineVersion { get; public set; }
    public IpDiscovery IpDiscovery { get; public set; }
    public List`1<LogDeliveryConfigurationRequest> LogDeliveryConfigurations { get; public set; }
    public Nullable`1<bool> MultiAZEnabled { get; public set; }
    [ObsoleteAttribute("This field is deprecated and is no longer used.")]
public string NodeGroupId { get; public set; }
    public string NotificationTopicArn { get; public set; }
    public string NotificationTopicStatus { get; public set; }
    public string PreferredMaintenanceWindow { get; public set; }
    public string PrimaryClusterId { get; public set; }
    public Nullable`1<bool> RemoveUserGroups { get; public set; }
    public string ReplicationGroupDescription { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public string SnapshottingClusterId { get; public set; }
    public string SnapshotWindow { get; public set; }
    public Nullable`1<bool> TransitEncryptionEnabled { get; public set; }
    public TransitEncryptionMode TransitEncryptionMode { get; public set; }
    public List`1<string> UserGroupIdsToAdd { get; public set; }
    public List`1<string> UserGroupIdsToRemove { get; public set; }
    public Nullable`1<bool> get_ApplyImmediately();
    public void set_ApplyImmediately(Nullable`1<bool> value);
    internal bool IsSetApplyImmediately();
    public string get_AuthToken();
    public void set_AuthToken(string value);
    internal bool IsSetAuthToken();
    public AuthTokenUpdateStrategyType get_AuthTokenUpdateStrategy();
    public void set_AuthTokenUpdateStrategy(AuthTokenUpdateStrategyType value);
    internal bool IsSetAuthTokenUpdateStrategy();
    public Nullable`1<bool> get_AutomaticFailoverEnabled();
    public void set_AutomaticFailoverEnabled(Nullable`1<bool> value);
    internal bool IsSetAutomaticFailoverEnabled();
    public Nullable`1<bool> get_AutoMinorVersionUpgrade();
    public void set_AutoMinorVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAutoMinorVersionUpgrade();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public List`1<string> get_CacheSecurityGroupNames();
    public void set_CacheSecurityGroupNames(List`1<string> value);
    internal bool IsSetCacheSecurityGroupNames();
    public ClusterMode get_ClusterMode();
    public void set_ClusterMode(ClusterMode value);
    internal bool IsSetClusterMode();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public IpDiscovery get_IpDiscovery();
    public void set_IpDiscovery(IpDiscovery value);
    internal bool IsSetIpDiscovery();
    public List`1<LogDeliveryConfigurationRequest> get_LogDeliveryConfigurations();
    public void set_LogDeliveryConfigurations(List`1<LogDeliveryConfigurationRequest> value);
    internal bool IsSetLogDeliveryConfigurations();
    public Nullable`1<bool> get_MultiAZEnabled();
    public void set_MultiAZEnabled(Nullable`1<bool> value);
    internal bool IsSetMultiAZEnabled();
    public string get_NodeGroupId();
    public void set_NodeGroupId(string value);
    internal bool IsSetNodeGroupId();
    public string get_NotificationTopicArn();
    public void set_NotificationTopicArn(string value);
    internal bool IsSetNotificationTopicArn();
    public string get_NotificationTopicStatus();
    public void set_NotificationTopicStatus(string value);
    internal bool IsSetNotificationTopicStatus();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public string get_PrimaryClusterId();
    public void set_PrimaryClusterId(string value);
    internal bool IsSetPrimaryClusterId();
    public Nullable`1<bool> get_RemoveUserGroups();
    public void set_RemoveUserGroups(Nullable`1<bool> value);
    internal bool IsSetRemoveUserGroups();
    public string get_ReplicationGroupDescription();
    public void set_ReplicationGroupDescription(string value);
    internal bool IsSetReplicationGroupDescription();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public string get_SnapshottingClusterId();
    public void set_SnapshottingClusterId(string value);
    internal bool IsSetSnapshottingClusterId();
    public string get_SnapshotWindow();
    public void set_SnapshotWindow(string value);
    internal bool IsSetSnapshotWindow();
    public Nullable`1<bool> get_TransitEncryptionEnabled();
    public void set_TransitEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetTransitEncryptionEnabled();
    public TransitEncryptionMode get_TransitEncryptionMode();
    public void set_TransitEncryptionMode(TransitEncryptionMode value);
    internal bool IsSetTransitEncryptionMode();
    public List`1<string> get_UserGroupIdsToAdd();
    public void set_UserGroupIdsToAdd(List`1<string> value);
    internal bool IsSetUserGroupIdsToAdd();
    public List`1<string> get_UserGroupIdsToRemove();
    public void set_UserGroupIdsToRemove(List`1<string> value);
    internal bool IsSetUserGroupIdsToRemove();
}
public class Amazon.ElastiCache.Model.ModifyReplicationGroupResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.ModifyReplicationGroupShardConfigurationRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _applyImmediately;
    private Nullable`1<int> _nodeGroupCount;
    private List`1<string> _nodeGroupsToRemove;
    private List`1<string> _nodeGroupsToRetain;
    private string _replicationGroupId;
    private List`1<ReshardingConfiguration> _reshardingConfiguration;
    [AWSPropertyAttribute]
public Nullable`1<bool> ApplyImmediately { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> NodeGroupCount { get; public set; }
    public List`1<string> NodeGroupsToRemove { get; public set; }
    public List`1<string> NodeGroupsToRetain { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public List`1<ReshardingConfiguration> ReshardingConfiguration { get; public set; }
    public Nullable`1<bool> get_ApplyImmediately();
    public void set_ApplyImmediately(Nullable`1<bool> value);
    internal bool IsSetApplyImmediately();
    public Nullable`1<int> get_NodeGroupCount();
    public void set_NodeGroupCount(Nullable`1<int> value);
    internal bool IsSetNodeGroupCount();
    public List`1<string> get_NodeGroupsToRemove();
    public void set_NodeGroupsToRemove(List`1<string> value);
    internal bool IsSetNodeGroupsToRemove();
    public List`1<string> get_NodeGroupsToRetain();
    public void set_NodeGroupsToRetain(List`1<string> value);
    internal bool IsSetNodeGroupsToRetain();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public List`1<ReshardingConfiguration> get_ReshardingConfiguration();
    public void set_ReshardingConfiguration(List`1<ReshardingConfiguration> value);
    internal bool IsSetReshardingConfiguration();
}
public class Amazon.ElastiCache.Model.ModifyReplicationGroupShardConfigurationResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.ModifyServerlessCacheRequest : AmazonElastiCacheRequest {
    private CacheUsageLimits _cacheUsageLimits;
    private string _dailySnapshotTime;
    private string _description;
    private Nullable`1<bool> _removeUserGroup;
    private List`1<string> _securityGroupIds;
    private string _serverlessCacheName;
    private Nullable`1<int> _snapshotRetentionLimit;
    private string _userGroupId;
    public CacheUsageLimits CacheUsageLimits { get; public set; }
    public string DailySnapshotTime { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> RemoveUserGroup { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    [AWSPropertyAttribute]
public string ServerlessCacheName { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public string UserGroupId { get; public set; }
    public CacheUsageLimits get_CacheUsageLimits();
    public void set_CacheUsageLimits(CacheUsageLimits value);
    internal bool IsSetCacheUsageLimits();
    public string get_DailySnapshotTime();
    public void set_DailySnapshotTime(string value);
    internal bool IsSetDailySnapshotTime();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<bool> get_RemoveUserGroup();
    public void set_RemoveUserGroup(Nullable`1<bool> value);
    internal bool IsSetRemoveUserGroup();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public string get_ServerlessCacheName();
    public void set_ServerlessCacheName(string value);
    internal bool IsSetServerlessCacheName();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
}
public class Amazon.ElastiCache.Model.ModifyServerlessCacheResponse : AmazonWebServiceResponse {
    private ServerlessCache _serverlessCache;
    public ServerlessCache ServerlessCache { get; public set; }
    public ServerlessCache get_ServerlessCache();
    public void set_ServerlessCache(ServerlessCache value);
    internal bool IsSetServerlessCache();
}
public class Amazon.ElastiCache.Model.ModifyUserGroupRequest : AmazonElastiCacheRequest {
    private string _userGroupId;
    private List`1<string> _userIdsToAdd;
    private List`1<string> _userIdsToRemove;
    [AWSPropertyAttribute]
public string UserGroupId { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> UserIdsToAdd { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> UserIdsToRemove { get; public set; }
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
    public List`1<string> get_UserIdsToAdd();
    public void set_UserIdsToAdd(List`1<string> value);
    internal bool IsSetUserIdsToAdd();
    public List`1<string> get_UserIdsToRemove();
    public void set_UserIdsToRemove(List`1<string> value);
    internal bool IsSetUserIdsToRemove();
}
public class Amazon.ElastiCache.Model.ModifyUserGroupResponse : AmazonWebServiceResponse {
    private string _arn;
    private string _engine;
    private string _minimumEngineVersion;
    private UserGroupPendingChanges _pendingChanges;
    private List`1<string> _replicationGroups;
    private List`1<string> _serverlessCaches;
    private string _status;
    private string _userGroupId;
    private List`1<string> _userIds;
    public string ARN { get; public set; }
    public string Engine { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public UserGroupPendingChanges PendingChanges { get; public set; }
    public List`1<string> ReplicationGroups { get; public set; }
    public List`1<string> ServerlessCaches { get; public set; }
    public string Status { get; public set; }
    public string UserGroupId { get; public set; }
    public List`1<string> UserIds { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public UserGroupPendingChanges get_PendingChanges();
    public void set_PendingChanges(UserGroupPendingChanges value);
    internal bool IsSetPendingChanges();
    public List`1<string> get_ReplicationGroups();
    public void set_ReplicationGroups(List`1<string> value);
    internal bool IsSetReplicationGroups();
    public List`1<string> get_ServerlessCaches();
    public void set_ServerlessCaches(List`1<string> value);
    internal bool IsSetServerlessCaches();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
    public List`1<string> get_UserIds();
    public void set_UserIds(List`1<string> value);
    internal bool IsSetUserIds();
}
public class Amazon.ElastiCache.Model.ModifyUserRequest : AmazonElastiCacheRequest {
    private string _accessString;
    private string _appendAccessString;
    private AuthenticationMode _authenticationMode;
    private Nullable`1<bool> _noPasswordRequired;
    private List`1<string> _passwords;
    private string _userId;
    public string AccessString { get; public set; }
    public string AppendAccessString { get; public set; }
    public AuthenticationMode AuthenticationMode { get; public set; }
    public Nullable`1<bool> NoPasswordRequired { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Passwords { get; public set; }
    [AWSPropertyAttribute]
public string UserId { get; public set; }
    public string get_AccessString();
    public void set_AccessString(string value);
    internal bool IsSetAccessString();
    public string get_AppendAccessString();
    public void set_AppendAccessString(string value);
    internal bool IsSetAppendAccessString();
    public AuthenticationMode get_AuthenticationMode();
    public void set_AuthenticationMode(AuthenticationMode value);
    internal bool IsSetAuthenticationMode();
    public Nullable`1<bool> get_NoPasswordRequired();
    public void set_NoPasswordRequired(Nullable`1<bool> value);
    internal bool IsSetNoPasswordRequired();
    public List`1<string> get_Passwords();
    public void set_Passwords(List`1<string> value);
    internal bool IsSetPasswords();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
}
public class Amazon.ElastiCache.Model.ModifyUserResponse : AmazonWebServiceResponse {
    private string _accessString;
    private string _arn;
    private Authentication _authentication;
    private string _engine;
    private string _minimumEngineVersion;
    private string _status;
    private List`1<string> _userGroupIds;
    private string _userId;
    private string _userName;
    public string AccessString { get; public set; }
    public string ARN { get; public set; }
    public Authentication Authentication { get; public set; }
    public string Engine { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public string Status { get; public set; }
    public List`1<string> UserGroupIds { get; public set; }
    public string UserId { get; public set; }
    public string UserName { get; public set; }
    public string get_AccessString();
    public void set_AccessString(string value);
    internal bool IsSetAccessString();
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public Authentication get_Authentication();
    public void set_Authentication(Authentication value);
    internal bool IsSetAuthentication();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<string> get_UserGroupIds();
    public void set_UserGroupIds(List`1<string> value);
    internal bool IsSetUserGroupIds();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.ElastiCache.Model.NodeGroup : object {
    private string _nodeGroupId;
    private List`1<NodeGroupMember> _nodeGroupMembers;
    private Endpoint _primaryEndpoint;
    private Endpoint _readerEndpoint;
    private string _slots;
    private string _status;
    public string NodeGroupId { get; public set; }
    public List`1<NodeGroupMember> NodeGroupMembers { get; public set; }
    public Endpoint PrimaryEndpoint { get; public set; }
    public Endpoint ReaderEndpoint { get; public set; }
    public string Slots { get; public set; }
    public string Status { get; public set; }
    public string get_NodeGroupId();
    public void set_NodeGroupId(string value);
    internal bool IsSetNodeGroupId();
    public List`1<NodeGroupMember> get_NodeGroupMembers();
    public void set_NodeGroupMembers(List`1<NodeGroupMember> value);
    internal bool IsSetNodeGroupMembers();
    public Endpoint get_PrimaryEndpoint();
    public void set_PrimaryEndpoint(Endpoint value);
    internal bool IsSetPrimaryEndpoint();
    public Endpoint get_ReaderEndpoint();
    public void set_ReaderEndpoint(Endpoint value);
    internal bool IsSetReaderEndpoint();
    public string get_Slots();
    public void set_Slots(string value);
    internal bool IsSetSlots();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.ElastiCache.Model.NodeGroupConfiguration : object {
    private string _nodeGroupId;
    private string _primaryAvailabilityZone;
    private string _primaryOutpostArn;
    private List`1<string> _replicaAvailabilityZones;
    private Nullable`1<int> _replicaCount;
    private List`1<string> _replicaOutpostArns;
    private string _slots;
    [AWSPropertyAttribute]
public string NodeGroupId { get; public set; }
    public string PrimaryAvailabilityZone { get; public set; }
    public string PrimaryOutpostArn { get; public set; }
    public List`1<string> ReplicaAvailabilityZones { get; public set; }
    public Nullable`1<int> ReplicaCount { get; public set; }
    public List`1<string> ReplicaOutpostArns { get; public set; }
    public string Slots { get; public set; }
    public string get_NodeGroupId();
    public void set_NodeGroupId(string value);
    internal bool IsSetNodeGroupId();
    public string get_PrimaryAvailabilityZone();
    public void set_PrimaryAvailabilityZone(string value);
    internal bool IsSetPrimaryAvailabilityZone();
    public string get_PrimaryOutpostArn();
    public void set_PrimaryOutpostArn(string value);
    internal bool IsSetPrimaryOutpostArn();
    public List`1<string> get_ReplicaAvailabilityZones();
    public void set_ReplicaAvailabilityZones(List`1<string> value);
    internal bool IsSetReplicaAvailabilityZones();
    public Nullable`1<int> get_ReplicaCount();
    public void set_ReplicaCount(Nullable`1<int> value);
    internal bool IsSetReplicaCount();
    public List`1<string> get_ReplicaOutpostArns();
    public void set_ReplicaOutpostArns(List`1<string> value);
    internal bool IsSetReplicaOutpostArns();
    public string get_Slots();
    public void set_Slots(string value);
    internal bool IsSetSlots();
}
public class Amazon.ElastiCache.Model.NodeGroupMember : object {
    private string _cacheClusterId;
    private string _cacheNodeId;
    private string _currentRole;
    private string _preferredAvailabilityZone;
    private string _preferredOutpostArn;
    private Endpoint _readEndpoint;
    public string CacheClusterId { get; public set; }
    public string CacheNodeId { get; public set; }
    public string CurrentRole { get; public set; }
    public string PreferredAvailabilityZone { get; public set; }
    public string PreferredOutpostArn { get; public set; }
    public Endpoint ReadEndpoint { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_CacheNodeId();
    public void set_CacheNodeId(string value);
    internal bool IsSetCacheNodeId();
    public string get_CurrentRole();
    public void set_CurrentRole(string value);
    internal bool IsSetCurrentRole();
    public string get_PreferredAvailabilityZone();
    public void set_PreferredAvailabilityZone(string value);
    internal bool IsSetPreferredAvailabilityZone();
    public string get_PreferredOutpostArn();
    public void set_PreferredOutpostArn(string value);
    internal bool IsSetPreferredOutpostArn();
    public Endpoint get_ReadEndpoint();
    public void set_ReadEndpoint(Endpoint value);
    internal bool IsSetReadEndpoint();
}
public class Amazon.ElastiCache.Model.NodeGroupMemberUpdateStatus : object {
    private string _cacheClusterId;
    private string _cacheNodeId;
    private Nullable`1<DateTime> _nodeDeletionDate;
    private Nullable`1<DateTime> _nodeUpdateEndDate;
    private NodeUpdateInitiatedBy _nodeUpdateInitiatedBy;
    private Nullable`1<DateTime> _nodeUpdateInitiatedDate;
    private Nullable`1<DateTime> _nodeUpdateStartDate;
    private NodeUpdateStatus _nodeUpdateStatus;
    private Nullable`1<DateTime> _nodeUpdateStatusModifiedDate;
    public string CacheClusterId { get; public set; }
    public string CacheNodeId { get; public set; }
    public Nullable`1<DateTime> NodeDeletionDate { get; public set; }
    public Nullable`1<DateTime> NodeUpdateEndDate { get; public set; }
    public NodeUpdateInitiatedBy NodeUpdateInitiatedBy { get; public set; }
    public Nullable`1<DateTime> NodeUpdateInitiatedDate { get; public set; }
    public Nullable`1<DateTime> NodeUpdateStartDate { get; public set; }
    public NodeUpdateStatus NodeUpdateStatus { get; public set; }
    public Nullable`1<DateTime> NodeUpdateStatusModifiedDate { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_CacheNodeId();
    public void set_CacheNodeId(string value);
    internal bool IsSetCacheNodeId();
    public Nullable`1<DateTime> get_NodeDeletionDate();
    public void set_NodeDeletionDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeDeletionDate();
    public Nullable`1<DateTime> get_NodeUpdateEndDate();
    public void set_NodeUpdateEndDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeUpdateEndDate();
    public NodeUpdateInitiatedBy get_NodeUpdateInitiatedBy();
    public void set_NodeUpdateInitiatedBy(NodeUpdateInitiatedBy value);
    internal bool IsSetNodeUpdateInitiatedBy();
    public Nullable`1<DateTime> get_NodeUpdateInitiatedDate();
    public void set_NodeUpdateInitiatedDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeUpdateInitiatedDate();
    public Nullable`1<DateTime> get_NodeUpdateStartDate();
    public void set_NodeUpdateStartDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeUpdateStartDate();
    public NodeUpdateStatus get_NodeUpdateStatus();
    public void set_NodeUpdateStatus(NodeUpdateStatus value);
    internal bool IsSetNodeUpdateStatus();
    public Nullable`1<DateTime> get_NodeUpdateStatusModifiedDate();
    public void set_NodeUpdateStatusModifiedDate(Nullable`1<DateTime> value);
    internal bool IsSetNodeUpdateStatusModifiedDate();
}
public class Amazon.ElastiCache.Model.NodeGroupNotFoundException : AmazonElastiCacheException {
    public NodeGroupNotFoundException(string message);
    public NodeGroupNotFoundException(string message, Exception innerException);
    public NodeGroupNotFoundException(Exception innerException);
    public NodeGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NodeGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.NodeGroupsPerReplicationGroupQuotaExceededException : AmazonElastiCacheException {
    public NodeGroupsPerReplicationGroupQuotaExceededException(string message);
    public NodeGroupsPerReplicationGroupQuotaExceededException(string message, Exception innerException);
    public NodeGroupsPerReplicationGroupQuotaExceededException(Exception innerException);
    public NodeGroupsPerReplicationGroupQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NodeGroupsPerReplicationGroupQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.NodeGroupUpdateStatus : object {
    private string _nodeGroupId;
    private List`1<NodeGroupMemberUpdateStatus> _nodeGroupMemberUpdateStatus;
    public string NodeGroupId { get; public set; }
    public List`1<NodeGroupMemberUpdateStatus> NodeGroupMemberUpdateStatus { get; public set; }
    public string get_NodeGroupId();
    public void set_NodeGroupId(string value);
    internal bool IsSetNodeGroupId();
    public List`1<NodeGroupMemberUpdateStatus> get_NodeGroupMemberUpdateStatus();
    public void set_NodeGroupMemberUpdateStatus(List`1<NodeGroupMemberUpdateStatus> value);
    internal bool IsSetNodeGroupMemberUpdateStatus();
}
public class Amazon.ElastiCache.Model.NodeQuotaForClusterExceededException : AmazonElastiCacheException {
    public NodeQuotaForClusterExceededException(string message);
    public NodeQuotaForClusterExceededException(string message, Exception innerException);
    public NodeQuotaForClusterExceededException(Exception innerException);
    public NodeQuotaForClusterExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NodeQuotaForClusterExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.NodeQuotaForCustomerExceededException : AmazonElastiCacheException {
    public NodeQuotaForCustomerExceededException(string message);
    public NodeQuotaForCustomerExceededException(string message, Exception innerException);
    public NodeQuotaForCustomerExceededException(Exception innerException);
    public NodeQuotaForCustomerExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NodeQuotaForCustomerExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.NodeSnapshot : object {
    private string _cacheClusterId;
    private Nullable`1<DateTime> _cacheNodeCreateTime;
    private string _cacheNodeId;
    private string _cacheSize;
    private NodeGroupConfiguration _nodeGroupConfiguration;
    private string _nodeGroupId;
    private Nullable`1<DateTime> _snapshotCreateTime;
    public string CacheClusterId { get; public set; }
    public Nullable`1<DateTime> CacheNodeCreateTime { get; public set; }
    public string CacheNodeId { get; public set; }
    public string CacheSize { get; public set; }
    public NodeGroupConfiguration NodeGroupConfiguration { get; public set; }
    public string NodeGroupId { get; public set; }
    public Nullable`1<DateTime> SnapshotCreateTime { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public Nullable`1<DateTime> get_CacheNodeCreateTime();
    public void set_CacheNodeCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetCacheNodeCreateTime();
    public string get_CacheNodeId();
    public void set_CacheNodeId(string value);
    internal bool IsSetCacheNodeId();
    public string get_CacheSize();
    public void set_CacheSize(string value);
    internal bool IsSetCacheSize();
    public NodeGroupConfiguration get_NodeGroupConfiguration();
    public void set_NodeGroupConfiguration(NodeGroupConfiguration value);
    internal bool IsSetNodeGroupConfiguration();
    public string get_NodeGroupId();
    public void set_NodeGroupId(string value);
    internal bool IsSetNodeGroupId();
    public Nullable`1<DateTime> get_SnapshotCreateTime();
    public void set_SnapshotCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetSnapshotCreateTime();
}
public class Amazon.ElastiCache.Model.NoOperationException : AmazonElastiCacheException {
    public NoOperationException(string message);
    public NoOperationException(string message, Exception innerException);
    public NoOperationException(Exception innerException);
    public NoOperationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoOperationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.NotificationConfiguration : object {
    private string _topicArn;
    private string _topicStatus;
    public string TopicArn { get; public set; }
    public string TopicStatus { get; public set; }
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
    public string get_TopicStatus();
    public void set_TopicStatus(string value);
    internal bool IsSetTopicStatus();
}
public class Amazon.ElastiCache.Model.Parameter : object {
    private string _allowedValues;
    private ChangeType _changeType;
    private string _dataType;
    private string _description;
    private Nullable`1<bool> _isModifiable;
    private string _minimumEngineVersion;
    private string _parameterName;
    private string _parameterValue;
    private string _source;
    public string AllowedValues { get; public set; }
    public ChangeType ChangeType { get; public set; }
    public string DataType { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> IsModifiable { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public string ParameterName { get; public set; }
    public string ParameterValue { get; public set; }
    public string Source { get; public set; }
    public string get_AllowedValues();
    public void set_AllowedValues(string value);
    internal bool IsSetAllowedValues();
    public ChangeType get_ChangeType();
    public void set_ChangeType(ChangeType value);
    internal bool IsSetChangeType();
    public string get_DataType();
    public void set_DataType(string value);
    internal bool IsSetDataType();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<bool> get_IsModifiable();
    public void set_IsModifiable(Nullable`1<bool> value);
    internal bool IsSetIsModifiable();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public string get_ParameterName();
    public void set_ParameterName(string value);
    internal bool IsSetParameterName();
    public string get_ParameterValue();
    public void set_ParameterValue(string value);
    internal bool IsSetParameterValue();
    public string get_Source();
    public void set_Source(string value);
    internal bool IsSetSource();
}
public class Amazon.ElastiCache.Model.ParameterNameValue : object {
    private string _parameterName;
    private string _parameterValue;
    public string ParameterName { get; public set; }
    public string ParameterValue { get; public set; }
    public ParameterNameValue(string parameterName);
    public ParameterNameValue(string parameterName, string parameterValue);
    public string get_ParameterName();
    public void set_ParameterName(string value);
    internal bool IsSetParameterName();
    public string get_ParameterValue();
    public void set_ParameterValue(string value);
    internal bool IsSetParameterValue();
}
public class Amazon.ElastiCache.Model.PendingLogDeliveryConfiguration : object {
    private DestinationDetails _destinationDetails;
    private DestinationType _destinationType;
    private LogFormat _logFormat;
    private LogType _logType;
    public DestinationDetails DestinationDetails { get; public set; }
    public DestinationType DestinationType { get; public set; }
    public LogFormat LogFormat { get; public set; }
    public LogType LogType { get; public set; }
    public DestinationDetails get_DestinationDetails();
    public void set_DestinationDetails(DestinationDetails value);
    internal bool IsSetDestinationDetails();
    public DestinationType get_DestinationType();
    public void set_DestinationType(DestinationType value);
    internal bool IsSetDestinationType();
    public LogFormat get_LogFormat();
    public void set_LogFormat(LogFormat value);
    internal bool IsSetLogFormat();
    public LogType get_LogType();
    public void set_LogType(LogType value);
    internal bool IsSetLogType();
}
public class Amazon.ElastiCache.Model.PendingModifiedValues : object {
    private AuthTokenUpdateStatus _authTokenStatus;
    private List`1<string> _cacheNodeIdsToRemove;
    private string _cacheNodeType;
    private string _engineVersion;
    private List`1<PendingLogDeliveryConfiguration> _logDeliveryConfigurations;
    private Nullable`1<int> _numCacheNodes;
    private Nullable`1<bool> _transitEncryptionEnabled;
    private TransitEncryptionMode _transitEncryptionMode;
    public AuthTokenUpdateStatus AuthTokenStatus { get; public set; }
    public List`1<string> CacheNodeIdsToRemove { get; public set; }
    public string CacheNodeType { get; public set; }
    public string EngineVersion { get; public set; }
    public List`1<PendingLogDeliveryConfiguration> LogDeliveryConfigurations { get; public set; }
    public Nullable`1<int> NumCacheNodes { get; public set; }
    public Nullable`1<bool> TransitEncryptionEnabled { get; public set; }
    public TransitEncryptionMode TransitEncryptionMode { get; public set; }
    public AuthTokenUpdateStatus get_AuthTokenStatus();
    public void set_AuthTokenStatus(AuthTokenUpdateStatus value);
    internal bool IsSetAuthTokenStatus();
    public List`1<string> get_CacheNodeIdsToRemove();
    public void set_CacheNodeIdsToRemove(List`1<string> value);
    internal bool IsSetCacheNodeIdsToRemove();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public List`1<PendingLogDeliveryConfiguration> get_LogDeliveryConfigurations();
    public void set_LogDeliveryConfigurations(List`1<PendingLogDeliveryConfiguration> value);
    internal bool IsSetLogDeliveryConfigurations();
    public Nullable`1<int> get_NumCacheNodes();
    public void set_NumCacheNodes(Nullable`1<int> value);
    internal bool IsSetNumCacheNodes();
    public Nullable`1<bool> get_TransitEncryptionEnabled();
    public void set_TransitEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetTransitEncryptionEnabled();
    public TransitEncryptionMode get_TransitEncryptionMode();
    public void set_TransitEncryptionMode(TransitEncryptionMode value);
    internal bool IsSetTransitEncryptionMode();
}
public class Amazon.ElastiCache.Model.ProcessedUpdateAction : object {
    private string _cacheClusterId;
    private string _replicationGroupId;
    private string _serviceUpdateName;
    private UpdateActionStatus _updateActionStatus;
    public string CacheClusterId { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public string ServiceUpdateName { get; public set; }
    public UpdateActionStatus UpdateActionStatus { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public string get_ServiceUpdateName();
    public void set_ServiceUpdateName(string value);
    internal bool IsSetServiceUpdateName();
    public UpdateActionStatus get_UpdateActionStatus();
    public void set_UpdateActionStatus(UpdateActionStatus value);
    internal bool IsSetUpdateActionStatus();
}
public class Amazon.ElastiCache.Model.PurchaseReservedCacheNodesOfferingRequest : AmazonElastiCacheRequest {
    private Nullable`1<int> _cacheNodeCount;
    private string _reservedCacheNodeId;
    private string _reservedCacheNodesOfferingId;
    private List`1<Tag> _tags;
    public Nullable`1<int> CacheNodeCount { get; public set; }
    public string ReservedCacheNodeId { get; public set; }
    [AWSPropertyAttribute]
public string ReservedCacheNodesOfferingId { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<int> get_CacheNodeCount();
    public void set_CacheNodeCount(Nullable`1<int> value);
    internal bool IsSetCacheNodeCount();
    public string get_ReservedCacheNodeId();
    public void set_ReservedCacheNodeId(string value);
    internal bool IsSetReservedCacheNodeId();
    public string get_ReservedCacheNodesOfferingId();
    public void set_ReservedCacheNodesOfferingId(string value);
    internal bool IsSetReservedCacheNodesOfferingId();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElastiCache.Model.PurchaseReservedCacheNodesOfferingResponse : AmazonWebServiceResponse {
    private ReservedCacheNode _reservedCacheNode;
    public ReservedCacheNode ReservedCacheNode { get; public set; }
    public ReservedCacheNode get_ReservedCacheNode();
    public void set_ReservedCacheNode(ReservedCacheNode value);
    internal bool IsSetReservedCacheNode();
}
public class Amazon.ElastiCache.Model.RebalanceSlotsInGlobalReplicationGroupRequest : AmazonElastiCacheRequest {
    private Nullable`1<bool> _applyImmediately;
    private string _globalReplicationGroupId;
    [AWSPropertyAttribute]
public Nullable`1<bool> ApplyImmediately { get; public set; }
    [AWSPropertyAttribute]
public string GlobalReplicationGroupId { get; public set; }
    public Nullable`1<bool> get_ApplyImmediately();
    public void set_ApplyImmediately(Nullable`1<bool> value);
    internal bool IsSetApplyImmediately();
    public string get_GlobalReplicationGroupId();
    public void set_GlobalReplicationGroupId(string value);
    internal bool IsSetGlobalReplicationGroupId();
}
public class Amazon.ElastiCache.Model.RebalanceSlotsInGlobalReplicationGroupResponse : AmazonWebServiceResponse {
    private GlobalReplicationGroup _globalReplicationGroup;
    public GlobalReplicationGroup GlobalReplicationGroup { get; public set; }
    public GlobalReplicationGroup get_GlobalReplicationGroup();
    public void set_GlobalReplicationGroup(GlobalReplicationGroup value);
    internal bool IsSetGlobalReplicationGroup();
}
public class Amazon.ElastiCache.Model.RebootCacheClusterRequest : AmazonElastiCacheRequest {
    private string _cacheClusterId;
    private List`1<string> _cacheNodeIdsToReboot;
    [AWSPropertyAttribute]
public string CacheClusterId { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> CacheNodeIdsToReboot { get; public set; }
    public RebootCacheClusterRequest(string cacheClusterId, List`1<string> cacheNodeIdsToReboot);
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public List`1<string> get_CacheNodeIdsToReboot();
    public void set_CacheNodeIdsToReboot(List`1<string> value);
    internal bool IsSetCacheNodeIdsToReboot();
}
public class Amazon.ElastiCache.Model.RebootCacheClusterResponse : AmazonWebServiceResponse {
    private CacheCluster _cacheCluster;
    public CacheCluster CacheCluster { get; public set; }
    public CacheCluster get_CacheCluster();
    public void set_CacheCluster(CacheCluster value);
    internal bool IsSetCacheCluster();
}
public class Amazon.ElastiCache.Model.RecurringCharge : object {
    private Nullable`1<double> _recurringChargeAmount;
    private string _recurringChargeFrequency;
    public Nullable`1<double> RecurringChargeAmount { get; public set; }
    public string RecurringChargeFrequency { get; public set; }
    public Nullable`1<double> get_RecurringChargeAmount();
    public void set_RecurringChargeAmount(Nullable`1<double> value);
    internal bool IsSetRecurringChargeAmount();
    public string get_RecurringChargeFrequency();
    public void set_RecurringChargeFrequency(string value);
    internal bool IsSetRecurringChargeFrequency();
}
public class Amazon.ElastiCache.Model.RegionalConfiguration : object {
    private string _replicationGroupId;
    private string _replicationGroupRegion;
    private List`1<ReshardingConfiguration> _reshardingConfiguration;
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupRegion { get; public set; }
    [AWSPropertyAttribute]
public List`1<ReshardingConfiguration> ReshardingConfiguration { get; public set; }
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public string get_ReplicationGroupRegion();
    public void set_ReplicationGroupRegion(string value);
    internal bool IsSetReplicationGroupRegion();
    public List`1<ReshardingConfiguration> get_ReshardingConfiguration();
    public void set_ReshardingConfiguration(List`1<ReshardingConfiguration> value);
    internal bool IsSetReshardingConfiguration();
}
public class Amazon.ElastiCache.Model.RemoveTagsFromResourceRequest : AmazonElastiCacheRequest {
    private string _resourceName;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string ResourceName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_ResourceName();
    public void set_ResourceName(string value);
    internal bool IsSetResourceName();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.ElastiCache.Model.RemoveTagsFromResourceResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tagList;
    public List`1<Tag> TagList { get; public set; }
    public List`1<Tag> get_TagList();
    public void set_TagList(List`1<Tag> value);
    internal bool IsSetTagList();
}
public class Amazon.ElastiCache.Model.ReplicationGroup : object {
    private string _arn;
    private Nullable`1<bool> _atRestEncryptionEnabled;
    private Nullable`1<bool> _authTokenEnabled;
    private Nullable`1<DateTime> _authTokenLastModifiedDate;
    private AutomaticFailoverStatus _automaticFailover;
    private Nullable`1<bool> _autoMinorVersionUpgrade;
    private string _cacheNodeType;
    private Nullable`1<bool> _clusterEnabled;
    private ClusterMode _clusterMode;
    private Endpoint _configurationEndpoint;
    private DataTieringStatus _dataTiering;
    private string _description;
    private GlobalReplicationGroupInfo _globalReplicationGroupInfo;
    private IpDiscovery _ipDiscovery;
    private string _kmsKeyId;
    private List`1<LogDeliveryConfiguration> _logDeliveryConfigurations;
    private List`1<string> _memberClusters;
    private List`1<string> _memberClustersOutpostArns;
    private MultiAZStatus _multiAZ;
    private NetworkType _networkType;
    private List`1<NodeGroup> _nodeGroups;
    private ReplicationGroupPendingModifiedValues _pendingModifiedValues;
    private Nullable`1<DateTime> _replicationGroupCreateTime;
    private string _replicationGroupId;
    private Nullable`1<int> _snapshotRetentionLimit;
    private string _snapshottingClusterId;
    private string _snapshotWindow;
    private string _status;
    private Nullable`1<bool> _transitEncryptionEnabled;
    private TransitEncryptionMode _transitEncryptionMode;
    private List`1<string> _userGroupIds;
    public string ARN { get; public set; }
    public Nullable`1<bool> AtRestEncryptionEnabled { get; public set; }
    public Nullable`1<bool> AuthTokenEnabled { get; public set; }
    public Nullable`1<DateTime> AuthTokenLastModifiedDate { get; public set; }
    public AutomaticFailoverStatus AutomaticFailover { get; public set; }
    public Nullable`1<bool> AutoMinorVersionUpgrade { get; public set; }
    public string CacheNodeType { get; public set; }
    public Nullable`1<bool> ClusterEnabled { get; public set; }
    public ClusterMode ClusterMode { get; public set; }
    public Endpoint ConfigurationEndpoint { get; public set; }
    public DataTieringStatus DataTiering { get; public set; }
    public string Description { get; public set; }
    public GlobalReplicationGroupInfo GlobalReplicationGroupInfo { get; public set; }
    public IpDiscovery IpDiscovery { get; public set; }
    public string KmsKeyId { get; public set; }
    public List`1<LogDeliveryConfiguration> LogDeliveryConfigurations { get; public set; }
    public List`1<string> MemberClusters { get; public set; }
    public List`1<string> MemberClustersOutpostArns { get; public set; }
    public MultiAZStatus MultiAZ { get; public set; }
    public NetworkType NetworkType { get; public set; }
    public List`1<NodeGroup> NodeGroups { get; public set; }
    public ReplicationGroupPendingModifiedValues PendingModifiedValues { get; public set; }
    public Nullable`1<DateTime> ReplicationGroupCreateTime { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public string SnapshottingClusterId { get; public set; }
    public string SnapshotWindow { get; public set; }
    public string Status { get; public set; }
    public Nullable`1<bool> TransitEncryptionEnabled { get; public set; }
    public TransitEncryptionMode TransitEncryptionMode { get; public set; }
    public List`1<string> UserGroupIds { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public Nullable`1<bool> get_AtRestEncryptionEnabled();
    public void set_AtRestEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetAtRestEncryptionEnabled();
    public Nullable`1<bool> get_AuthTokenEnabled();
    public void set_AuthTokenEnabled(Nullable`1<bool> value);
    internal bool IsSetAuthTokenEnabled();
    public Nullable`1<DateTime> get_AuthTokenLastModifiedDate();
    public void set_AuthTokenLastModifiedDate(Nullable`1<DateTime> value);
    internal bool IsSetAuthTokenLastModifiedDate();
    public AutomaticFailoverStatus get_AutomaticFailover();
    public void set_AutomaticFailover(AutomaticFailoverStatus value);
    internal bool IsSetAutomaticFailover();
    public Nullable`1<bool> get_AutoMinorVersionUpgrade();
    public void set_AutoMinorVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAutoMinorVersionUpgrade();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public Nullable`1<bool> get_ClusterEnabled();
    public void set_ClusterEnabled(Nullable`1<bool> value);
    internal bool IsSetClusterEnabled();
    public ClusterMode get_ClusterMode();
    public void set_ClusterMode(ClusterMode value);
    internal bool IsSetClusterMode();
    public Endpoint get_ConfigurationEndpoint();
    public void set_ConfigurationEndpoint(Endpoint value);
    internal bool IsSetConfigurationEndpoint();
    public DataTieringStatus get_DataTiering();
    public void set_DataTiering(DataTieringStatus value);
    internal bool IsSetDataTiering();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public GlobalReplicationGroupInfo get_GlobalReplicationGroupInfo();
    public void set_GlobalReplicationGroupInfo(GlobalReplicationGroupInfo value);
    internal bool IsSetGlobalReplicationGroupInfo();
    public IpDiscovery get_IpDiscovery();
    public void set_IpDiscovery(IpDiscovery value);
    internal bool IsSetIpDiscovery();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public List`1<LogDeliveryConfiguration> get_LogDeliveryConfigurations();
    public void set_LogDeliveryConfigurations(List`1<LogDeliveryConfiguration> value);
    internal bool IsSetLogDeliveryConfigurations();
    public List`1<string> get_MemberClusters();
    public void set_MemberClusters(List`1<string> value);
    internal bool IsSetMemberClusters();
    public List`1<string> get_MemberClustersOutpostArns();
    public void set_MemberClustersOutpostArns(List`1<string> value);
    internal bool IsSetMemberClustersOutpostArns();
    public MultiAZStatus get_MultiAZ();
    public void set_MultiAZ(MultiAZStatus value);
    internal bool IsSetMultiAZ();
    public NetworkType get_NetworkType();
    public void set_NetworkType(NetworkType value);
    internal bool IsSetNetworkType();
    public List`1<NodeGroup> get_NodeGroups();
    public void set_NodeGroups(List`1<NodeGroup> value);
    internal bool IsSetNodeGroups();
    public ReplicationGroupPendingModifiedValues get_PendingModifiedValues();
    public void set_PendingModifiedValues(ReplicationGroupPendingModifiedValues value);
    internal bool IsSetPendingModifiedValues();
    public Nullable`1<DateTime> get_ReplicationGroupCreateTime();
    public void set_ReplicationGroupCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetReplicationGroupCreateTime();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public string get_SnapshottingClusterId();
    public void set_SnapshottingClusterId(string value);
    internal bool IsSetSnapshottingClusterId();
    public string get_SnapshotWindow();
    public void set_SnapshotWindow(string value);
    internal bool IsSetSnapshotWindow();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public Nullable`1<bool> get_TransitEncryptionEnabled();
    public void set_TransitEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetTransitEncryptionEnabled();
    public TransitEncryptionMode get_TransitEncryptionMode();
    public void set_TransitEncryptionMode(TransitEncryptionMode value);
    internal bool IsSetTransitEncryptionMode();
    public List`1<string> get_UserGroupIds();
    public void set_UserGroupIds(List`1<string> value);
    internal bool IsSetUserGroupIds();
}
public class Amazon.ElastiCache.Model.ReplicationGroupAlreadyExistsException : AmazonElastiCacheException {
    public ReplicationGroupAlreadyExistsException(string message);
    public ReplicationGroupAlreadyExistsException(string message, Exception innerException);
    public ReplicationGroupAlreadyExistsException(Exception innerException);
    public ReplicationGroupAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReplicationGroupAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ReplicationGroupAlreadyUnderMigrationException : AmazonElastiCacheException {
    public ReplicationGroupAlreadyUnderMigrationException(string message);
    public ReplicationGroupAlreadyUnderMigrationException(string message, Exception innerException);
    public ReplicationGroupAlreadyUnderMigrationException(Exception innerException);
    public ReplicationGroupAlreadyUnderMigrationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReplicationGroupAlreadyUnderMigrationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ReplicationGroupNotFoundException : AmazonElastiCacheException {
    public ReplicationGroupNotFoundException(string message);
    public ReplicationGroupNotFoundException(string message, Exception innerException);
    public ReplicationGroupNotFoundException(Exception innerException);
    public ReplicationGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReplicationGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ReplicationGroupNotUnderMigrationException : AmazonElastiCacheException {
    public ReplicationGroupNotUnderMigrationException(string message);
    public ReplicationGroupNotUnderMigrationException(string message, Exception innerException);
    public ReplicationGroupNotUnderMigrationException(Exception innerException);
    public ReplicationGroupNotUnderMigrationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReplicationGroupNotUnderMigrationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ReplicationGroupPendingModifiedValues : object {
    private AuthTokenUpdateStatus _authTokenStatus;
    private PendingAutomaticFailoverStatus _automaticFailoverStatus;
    private ClusterMode _clusterMode;
    private List`1<PendingLogDeliveryConfiguration> _logDeliveryConfigurations;
    private string _primaryClusterId;
    private ReshardingStatus _resharding;
    private Nullable`1<bool> _transitEncryptionEnabled;
    private TransitEncryptionMode _transitEncryptionMode;
    private UserGroupsUpdateStatus _userGroups;
    public AuthTokenUpdateStatus AuthTokenStatus { get; public set; }
    public PendingAutomaticFailoverStatus AutomaticFailoverStatus { get; public set; }
    public ClusterMode ClusterMode { get; public set; }
    public List`1<PendingLogDeliveryConfiguration> LogDeliveryConfigurations { get; public set; }
    public string PrimaryClusterId { get; public set; }
    public ReshardingStatus Resharding { get; public set; }
    public Nullable`1<bool> TransitEncryptionEnabled { get; public set; }
    public TransitEncryptionMode TransitEncryptionMode { get; public set; }
    public UserGroupsUpdateStatus UserGroups { get; public set; }
    public AuthTokenUpdateStatus get_AuthTokenStatus();
    public void set_AuthTokenStatus(AuthTokenUpdateStatus value);
    internal bool IsSetAuthTokenStatus();
    public PendingAutomaticFailoverStatus get_AutomaticFailoverStatus();
    public void set_AutomaticFailoverStatus(PendingAutomaticFailoverStatus value);
    internal bool IsSetAutomaticFailoverStatus();
    public ClusterMode get_ClusterMode();
    public void set_ClusterMode(ClusterMode value);
    internal bool IsSetClusterMode();
    public List`1<PendingLogDeliveryConfiguration> get_LogDeliveryConfigurations();
    public void set_LogDeliveryConfigurations(List`1<PendingLogDeliveryConfiguration> value);
    internal bool IsSetLogDeliveryConfigurations();
    public string get_PrimaryClusterId();
    public void set_PrimaryClusterId(string value);
    internal bool IsSetPrimaryClusterId();
    public ReshardingStatus get_Resharding();
    public void set_Resharding(ReshardingStatus value);
    internal bool IsSetResharding();
    public Nullable`1<bool> get_TransitEncryptionEnabled();
    public void set_TransitEncryptionEnabled(Nullable`1<bool> value);
    internal bool IsSetTransitEncryptionEnabled();
    public TransitEncryptionMode get_TransitEncryptionMode();
    public void set_TransitEncryptionMode(TransitEncryptionMode value);
    internal bool IsSetTransitEncryptionMode();
    public UserGroupsUpdateStatus get_UserGroups();
    public void set_UserGroups(UserGroupsUpdateStatus value);
    internal bool IsSetUserGroups();
}
public class Amazon.ElastiCache.Model.ReservedCacheNode : object {
    private Nullable`1<int> _cacheNodeCount;
    private string _cacheNodeType;
    private Nullable`1<int> _duration;
    private Nullable`1<double> _fixedPrice;
    private string _offeringType;
    private string _productDescription;
    private List`1<RecurringCharge> _recurringCharges;
    private string _reservationARN;
    private string _reservedCacheNodeId;
    private string _reservedCacheNodesOfferingId;
    private Nullable`1<DateTime> _startTime;
    private string _state;
    private Nullable`1<double> _usagePrice;
    public Nullable`1<int> CacheNodeCount { get; public set; }
    public string CacheNodeType { get; public set; }
    public Nullable`1<int> Duration { get; public set; }
    public Nullable`1<double> FixedPrice { get; public set; }
    public string OfferingType { get; public set; }
    public string ProductDescription { get; public set; }
    public List`1<RecurringCharge> RecurringCharges { get; public set; }
    public string ReservationARN { get; public set; }
    public string ReservedCacheNodeId { get; public set; }
    public string ReservedCacheNodesOfferingId { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public string State { get; public set; }
    public Nullable`1<double> UsagePrice { get; public set; }
    public Nullable`1<int> get_CacheNodeCount();
    public void set_CacheNodeCount(Nullable`1<int> value);
    internal bool IsSetCacheNodeCount();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public Nullable`1<int> get_Duration();
    public void set_Duration(Nullable`1<int> value);
    internal bool IsSetDuration();
    public Nullable`1<double> get_FixedPrice();
    public void set_FixedPrice(Nullable`1<double> value);
    internal bool IsSetFixedPrice();
    public string get_OfferingType();
    public void set_OfferingType(string value);
    internal bool IsSetOfferingType();
    public string get_ProductDescription();
    public void set_ProductDescription(string value);
    internal bool IsSetProductDescription();
    public List`1<RecurringCharge> get_RecurringCharges();
    public void set_RecurringCharges(List`1<RecurringCharge> value);
    internal bool IsSetRecurringCharges();
    public string get_ReservationARN();
    public void set_ReservationARN(string value);
    internal bool IsSetReservationARN();
    public string get_ReservedCacheNodeId();
    public void set_ReservedCacheNodeId(string value);
    internal bool IsSetReservedCacheNodeId();
    public string get_ReservedCacheNodesOfferingId();
    public void set_ReservedCacheNodesOfferingId(string value);
    internal bool IsSetReservedCacheNodesOfferingId();
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    internal bool IsSetStartTime();
    public string get_State();
    public void set_State(string value);
    internal bool IsSetState();
    public Nullable`1<double> get_UsagePrice();
    public void set_UsagePrice(Nullable`1<double> value);
    internal bool IsSetUsagePrice();
}
public class Amazon.ElastiCache.Model.ReservedCacheNodeAlreadyExistsException : AmazonElastiCacheException {
    public ReservedCacheNodeAlreadyExistsException(string message);
    public ReservedCacheNodeAlreadyExistsException(string message, Exception innerException);
    public ReservedCacheNodeAlreadyExistsException(Exception innerException);
    public ReservedCacheNodeAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedCacheNodeAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ReservedCacheNodeNotFoundException : AmazonElastiCacheException {
    public ReservedCacheNodeNotFoundException(string message);
    public ReservedCacheNodeNotFoundException(string message, Exception innerException);
    public ReservedCacheNodeNotFoundException(Exception innerException);
    public ReservedCacheNodeNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedCacheNodeNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ReservedCacheNodeQuotaExceededException : AmazonElastiCacheException {
    public ReservedCacheNodeQuotaExceededException(string message);
    public ReservedCacheNodeQuotaExceededException(string message, Exception innerException);
    public ReservedCacheNodeQuotaExceededException(Exception innerException);
    public ReservedCacheNodeQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedCacheNodeQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ReservedCacheNodesOffering : object {
    private string _cacheNodeType;
    private Nullable`1<int> _duration;
    private Nullable`1<double> _fixedPrice;
    private string _offeringType;
    private string _productDescription;
    private List`1<RecurringCharge> _recurringCharges;
    private string _reservedCacheNodesOfferingId;
    private Nullable`1<double> _usagePrice;
    public string CacheNodeType { get; public set; }
    public Nullable`1<int> Duration { get; public set; }
    public Nullable`1<double> FixedPrice { get; public set; }
    public string OfferingType { get; public set; }
    public string ProductDescription { get; public set; }
    public List`1<RecurringCharge> RecurringCharges { get; public set; }
    public string ReservedCacheNodesOfferingId { get; public set; }
    public Nullable`1<double> UsagePrice { get; public set; }
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public Nullable`1<int> get_Duration();
    public void set_Duration(Nullable`1<int> value);
    internal bool IsSetDuration();
    public Nullable`1<double> get_FixedPrice();
    public void set_FixedPrice(Nullable`1<double> value);
    internal bool IsSetFixedPrice();
    public string get_OfferingType();
    public void set_OfferingType(string value);
    internal bool IsSetOfferingType();
    public string get_ProductDescription();
    public void set_ProductDescription(string value);
    internal bool IsSetProductDescription();
    public List`1<RecurringCharge> get_RecurringCharges();
    public void set_RecurringCharges(List`1<RecurringCharge> value);
    internal bool IsSetRecurringCharges();
    public string get_ReservedCacheNodesOfferingId();
    public void set_ReservedCacheNodesOfferingId(string value);
    internal bool IsSetReservedCacheNodesOfferingId();
    public Nullable`1<double> get_UsagePrice();
    public void set_UsagePrice(Nullable`1<double> value);
    internal bool IsSetUsagePrice();
}
public class Amazon.ElastiCache.Model.ReservedCacheNodesOfferingNotFoundException : AmazonElastiCacheException {
    public ReservedCacheNodesOfferingNotFoundException(string message);
    public ReservedCacheNodesOfferingNotFoundException(string message, Exception innerException);
    public ReservedCacheNodesOfferingNotFoundException(Exception innerException);
    public ReservedCacheNodesOfferingNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedCacheNodesOfferingNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ResetCacheParameterGroupRequest : AmazonElastiCacheRequest {
    private string _cacheParameterGroupName;
    private List`1<ParameterNameValue> _parameterNameValues;
    private Nullable`1<bool> _resetAllParameters;
    [AWSPropertyAttribute]
public string CacheParameterGroupName { get; public set; }
    public List`1<ParameterNameValue> ParameterNameValues { get; public set; }
    public Nullable`1<bool> ResetAllParameters { get; public set; }
    public ResetCacheParameterGroupRequest(string cacheParameterGroupName, List`1<ParameterNameValue> parameterNameValues);
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public List`1<ParameterNameValue> get_ParameterNameValues();
    public void set_ParameterNameValues(List`1<ParameterNameValue> value);
    internal bool IsSetParameterNameValues();
    public Nullable`1<bool> get_ResetAllParameters();
    public void set_ResetAllParameters(Nullable`1<bool> value);
    internal bool IsSetResetAllParameters();
}
public class Amazon.ElastiCache.Model.ResetCacheParameterGroupResponse : AmazonWebServiceResponse {
    private string _cacheParameterGroupName;
    public string CacheParameterGroupName { get; public set; }
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
}
public class Amazon.ElastiCache.Model.ReshardingConfiguration : object {
    private string _nodeGroupId;
    private List`1<string> _preferredAvailabilityZones;
    [AWSPropertyAttribute]
public string NodeGroupId { get; public set; }
    public List`1<string> PreferredAvailabilityZones { get; public set; }
    public string get_NodeGroupId();
    public void set_NodeGroupId(string value);
    internal bool IsSetNodeGroupId();
    public List`1<string> get_PreferredAvailabilityZones();
    public void set_PreferredAvailabilityZones(List`1<string> value);
    internal bool IsSetPreferredAvailabilityZones();
}
public class Amazon.ElastiCache.Model.ReshardingStatus : object {
    private SlotMigration _slotMigration;
    public SlotMigration SlotMigration { get; public set; }
    public SlotMigration get_SlotMigration();
    public void set_SlotMigration(SlotMigration value);
    internal bool IsSetSlotMigration();
}
public class Amazon.ElastiCache.Model.RevokeCacheSecurityGroupIngressRequest : AmazonElastiCacheRequest {
    private string _cacheSecurityGroupName;
    private string _ec2SecurityGroupName;
    private string _ec2SecurityGroupOwnerId;
    [AWSPropertyAttribute]
public string CacheSecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string EC2SecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string EC2SecurityGroupOwnerId { get; public set; }
    public string get_CacheSecurityGroupName();
    public void set_CacheSecurityGroupName(string value);
    internal bool IsSetCacheSecurityGroupName();
    public string get_EC2SecurityGroupName();
    public void set_EC2SecurityGroupName(string value);
    internal bool IsSetEC2SecurityGroupName();
    public string get_EC2SecurityGroupOwnerId();
    public void set_EC2SecurityGroupOwnerId(string value);
    internal bool IsSetEC2SecurityGroupOwnerId();
}
public class Amazon.ElastiCache.Model.RevokeCacheSecurityGroupIngressResponse : AmazonWebServiceResponse {
    private CacheSecurityGroup _cacheSecurityGroup;
    public CacheSecurityGroup CacheSecurityGroup { get; public set; }
    public CacheSecurityGroup get_CacheSecurityGroup();
    public void set_CacheSecurityGroup(CacheSecurityGroup value);
    internal bool IsSetCacheSecurityGroup();
}
public class Amazon.ElastiCache.Model.SecurityGroupMembership : object {
    private string _securityGroupId;
    private string _status;
    public string SecurityGroupId { get; public set; }
    public string Status { get; public set; }
    public string get_SecurityGroupId();
    public void set_SecurityGroupId(string value);
    internal bool IsSetSecurityGroupId();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.ElastiCache.Model.ServerlessCache : object {
    private string _arn;
    private CacheUsageLimits _cacheUsageLimits;
    private Nullable`1<DateTime> _createTime;
    private string _dailySnapshotTime;
    private string _description;
    private Endpoint _endpoint;
    private string _engine;
    private string _fullEngineVersion;
    private string _kmsKeyId;
    private string _majorEngineVersion;
    private Endpoint _readerEndpoint;
    private List`1<string> _securityGroupIds;
    private string _serverlessCacheName;
    private Nullable`1<int> _snapshotRetentionLimit;
    private string _status;
    private List`1<string> _subnetIds;
    private string _userGroupId;
    public string ARN { get; public set; }
    public CacheUsageLimits CacheUsageLimits { get; public set; }
    public Nullable`1<DateTime> CreateTime { get; public set; }
    public string DailySnapshotTime { get; public set; }
    public string Description { get; public set; }
    public Endpoint Endpoint { get; public set; }
    public string Engine { get; public set; }
    public string FullEngineVersion { get; public set; }
    public string KmsKeyId { get; public set; }
    public string MajorEngineVersion { get; public set; }
    public Endpoint ReaderEndpoint { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    public string ServerlessCacheName { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public string Status { get; public set; }
    public List`1<string> SubnetIds { get; public set; }
    public string UserGroupId { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public CacheUsageLimits get_CacheUsageLimits();
    public void set_CacheUsageLimits(CacheUsageLimits value);
    internal bool IsSetCacheUsageLimits();
    public Nullable`1<DateTime> get_CreateTime();
    public void set_CreateTime(Nullable`1<DateTime> value);
    internal bool IsSetCreateTime();
    public string get_DailySnapshotTime();
    public void set_DailySnapshotTime(string value);
    internal bool IsSetDailySnapshotTime();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Endpoint get_Endpoint();
    public void set_Endpoint(Endpoint value);
    internal bool IsSetEndpoint();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_FullEngineVersion();
    public void set_FullEngineVersion(string value);
    internal bool IsSetFullEngineVersion();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_MajorEngineVersion();
    public void set_MajorEngineVersion(string value);
    internal bool IsSetMajorEngineVersion();
    public Endpoint get_ReaderEndpoint();
    public void set_ReaderEndpoint(Endpoint value);
    internal bool IsSetReaderEndpoint();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public string get_ServerlessCacheName();
    public void set_ServerlessCacheName(string value);
    internal bool IsSetServerlessCacheName();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<string> get_SubnetIds();
    public void set_SubnetIds(List`1<string> value);
    internal bool IsSetSubnetIds();
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
}
public class Amazon.ElastiCache.Model.ServerlessCacheAlreadyExistsException : AmazonElastiCacheException {
    public ServerlessCacheAlreadyExistsException(string message);
    public ServerlessCacheAlreadyExistsException(string message, Exception innerException);
    public ServerlessCacheAlreadyExistsException(Exception innerException);
    public ServerlessCacheAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServerlessCacheAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ServerlessCacheConfiguration : object {
    private string _engine;
    private string _majorEngineVersion;
    private string _serverlessCacheName;
    public string Engine { get; public set; }
    public string MajorEngineVersion { get; public set; }
    public string ServerlessCacheName { get; public set; }
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_MajorEngineVersion();
    public void set_MajorEngineVersion(string value);
    internal bool IsSetMajorEngineVersion();
    public string get_ServerlessCacheName();
    public void set_ServerlessCacheName(string value);
    internal bool IsSetServerlessCacheName();
}
public class Amazon.ElastiCache.Model.ServerlessCacheNotFoundException : AmazonElastiCacheException {
    public ServerlessCacheNotFoundException(string message);
    public ServerlessCacheNotFoundException(string message, Exception innerException);
    public ServerlessCacheNotFoundException(Exception innerException);
    public ServerlessCacheNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServerlessCacheNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ServerlessCacheQuotaForCustomerExceededException : AmazonElastiCacheException {
    public ServerlessCacheQuotaForCustomerExceededException(string message);
    public ServerlessCacheQuotaForCustomerExceededException(string message, Exception innerException);
    public ServerlessCacheQuotaForCustomerExceededException(Exception innerException);
    public ServerlessCacheQuotaForCustomerExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServerlessCacheQuotaForCustomerExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ServerlessCacheSnapshot : object {
    private string _arn;
    private string _bytesUsedForCache;
    private Nullable`1<DateTime> _createTime;
    private Nullable`1<DateTime> _expiryTime;
    private string _kmsKeyId;
    private ServerlessCacheConfiguration _serverlessCacheConfiguration;
    private string _serverlessCacheSnapshotName;
    private string _snapshotType;
    private string _status;
    public string ARN { get; public set; }
    public string BytesUsedForCache { get; public set; }
    public Nullable`1<DateTime> CreateTime { get; public set; }
    public Nullable`1<DateTime> ExpiryTime { get; public set; }
    public string KmsKeyId { get; public set; }
    public ServerlessCacheConfiguration ServerlessCacheConfiguration { get; public set; }
    public string ServerlessCacheSnapshotName { get; public set; }
    public string SnapshotType { get; public set; }
    public string Status { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public string get_BytesUsedForCache();
    public void set_BytesUsedForCache(string value);
    internal bool IsSetBytesUsedForCache();
    public Nullable`1<DateTime> get_CreateTime();
    public void set_CreateTime(Nullable`1<DateTime> value);
    internal bool IsSetCreateTime();
    public Nullable`1<DateTime> get_ExpiryTime();
    public void set_ExpiryTime(Nullable`1<DateTime> value);
    internal bool IsSetExpiryTime();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public ServerlessCacheConfiguration get_ServerlessCacheConfiguration();
    public void set_ServerlessCacheConfiguration(ServerlessCacheConfiguration value);
    internal bool IsSetServerlessCacheConfiguration();
    public string get_ServerlessCacheSnapshotName();
    public void set_ServerlessCacheSnapshotName(string value);
    internal bool IsSetServerlessCacheSnapshotName();
    public string get_SnapshotType();
    public void set_SnapshotType(string value);
    internal bool IsSetSnapshotType();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.ElastiCache.Model.ServerlessCacheSnapshotAlreadyExistsException : AmazonElastiCacheException {
    public ServerlessCacheSnapshotAlreadyExistsException(string message);
    public ServerlessCacheSnapshotAlreadyExistsException(string message, Exception innerException);
    public ServerlessCacheSnapshotAlreadyExistsException(Exception innerException);
    public ServerlessCacheSnapshotAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServerlessCacheSnapshotAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ServerlessCacheSnapshotNotFoundException : AmazonElastiCacheException {
    public ServerlessCacheSnapshotNotFoundException(string message);
    public ServerlessCacheSnapshotNotFoundException(string message, Exception innerException);
    public ServerlessCacheSnapshotNotFoundException(Exception innerException);
    public ServerlessCacheSnapshotNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServerlessCacheSnapshotNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ServerlessCacheSnapshotQuotaExceededException : AmazonElastiCacheException {
    public ServerlessCacheSnapshotQuotaExceededException(string message);
    public ServerlessCacheSnapshotQuotaExceededException(string message, Exception innerException);
    public ServerlessCacheSnapshotQuotaExceededException(Exception innerException);
    public ServerlessCacheSnapshotQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServerlessCacheSnapshotQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ServiceLinkedRoleNotFoundException : AmazonElastiCacheException {
    public ServiceLinkedRoleNotFoundException(string message);
    public ServiceLinkedRoleNotFoundException(string message, Exception innerException);
    public ServiceLinkedRoleNotFoundException(Exception innerException);
    public ServiceLinkedRoleNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServiceLinkedRoleNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.ServiceUpdate : object {
    private Nullable`1<bool> _autoUpdateAfterRecommendedApplyByDate;
    private string _engine;
    private string _engineVersion;
    private string _estimatedUpdateTime;
    private string _serviceUpdateDescription;
    private Nullable`1<DateTime> _serviceUpdateEndDate;
    private string _serviceUpdateName;
    private Nullable`1<DateTime> _serviceUpdateRecommendedApplyByDate;
    private Nullable`1<DateTime> _serviceUpdateReleaseDate;
    private ServiceUpdateSeverity _serviceUpdateSeverity;
    private ServiceUpdateStatus _serviceUpdateStatus;
    private ServiceUpdateType _serviceUpdateType;
    public Nullable`1<bool> AutoUpdateAfterRecommendedApplyByDate { get; public set; }
    public string Engine { get; public set; }
    public string EngineVersion { get; public set; }
    public string EstimatedUpdateTime { get; public set; }
    public string ServiceUpdateDescription { get; public set; }
    public Nullable`1<DateTime> ServiceUpdateEndDate { get; public set; }
    public string ServiceUpdateName { get; public set; }
    public Nullable`1<DateTime> ServiceUpdateRecommendedApplyByDate { get; public set; }
    public Nullable`1<DateTime> ServiceUpdateReleaseDate { get; public set; }
    public ServiceUpdateSeverity ServiceUpdateSeverity { get; public set; }
    public ServiceUpdateStatus ServiceUpdateStatus { get; public set; }
    public ServiceUpdateType ServiceUpdateType { get; public set; }
    public Nullable`1<bool> get_AutoUpdateAfterRecommendedApplyByDate();
    public void set_AutoUpdateAfterRecommendedApplyByDate(Nullable`1<bool> value);
    internal bool IsSetAutoUpdateAfterRecommendedApplyByDate();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public string get_EstimatedUpdateTime();
    public void set_EstimatedUpdateTime(string value);
    internal bool IsSetEstimatedUpdateTime();
    public string get_ServiceUpdateDescription();
    public void set_ServiceUpdateDescription(string value);
    internal bool IsSetServiceUpdateDescription();
    public Nullable`1<DateTime> get_ServiceUpdateEndDate();
    public void set_ServiceUpdateEndDate(Nullable`1<DateTime> value);
    internal bool IsSetServiceUpdateEndDate();
    public string get_ServiceUpdateName();
    public void set_ServiceUpdateName(string value);
    internal bool IsSetServiceUpdateName();
    public Nullable`1<DateTime> get_ServiceUpdateRecommendedApplyByDate();
    public void set_ServiceUpdateRecommendedApplyByDate(Nullable`1<DateTime> value);
    internal bool IsSetServiceUpdateRecommendedApplyByDate();
    public Nullable`1<DateTime> get_ServiceUpdateReleaseDate();
    public void set_ServiceUpdateReleaseDate(Nullable`1<DateTime> value);
    internal bool IsSetServiceUpdateReleaseDate();
    public ServiceUpdateSeverity get_ServiceUpdateSeverity();
    public void set_ServiceUpdateSeverity(ServiceUpdateSeverity value);
    internal bool IsSetServiceUpdateSeverity();
    public ServiceUpdateStatus get_ServiceUpdateStatus();
    public void set_ServiceUpdateStatus(ServiceUpdateStatus value);
    internal bool IsSetServiceUpdateStatus();
    public ServiceUpdateType get_ServiceUpdateType();
    public void set_ServiceUpdateType(ServiceUpdateType value);
    internal bool IsSetServiceUpdateType();
}
public class Amazon.ElastiCache.Model.ServiceUpdateNotFoundException : AmazonElastiCacheException {
    public ServiceUpdateNotFoundException(string message);
    public ServiceUpdateNotFoundException(string message, Exception innerException);
    public ServiceUpdateNotFoundException(Exception innerException);
    public ServiceUpdateNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServiceUpdateNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.SlotMigration : object {
    private Nullable`1<double> _progressPercentage;
    public Nullable`1<double> ProgressPercentage { get; public set; }
    public Nullable`1<double> get_ProgressPercentage();
    public void set_ProgressPercentage(Nullable`1<double> value);
    internal bool IsSetProgressPercentage();
}
public class Amazon.ElastiCache.Model.Snapshot : object {
    private string _arn;
    private AutomaticFailoverStatus _automaticFailover;
    private Nullable`1<bool> _autoMinorVersionUpgrade;
    private Nullable`1<DateTime> _cacheClusterCreateTime;
    private string _cacheClusterId;
    private string _cacheNodeType;
    private string _cacheParameterGroupName;
    private string _cacheSubnetGroupName;
    private DataTieringStatus _dataTiering;
    private string _engine;
    private string _engineVersion;
    private string _kmsKeyId;
    private List`1<NodeSnapshot> _nodeSnapshots;
    private Nullable`1<int> _numCacheNodes;
    private Nullable`1<int> _numNodeGroups;
    private Nullable`1<int> _port;
    private string _preferredAvailabilityZone;
    private string _preferredMaintenanceWindow;
    private string _preferredOutpostArn;
    private string _replicationGroupDescription;
    private string _replicationGroupId;
    private string _snapshotName;
    private Nullable`1<int> _snapshotRetentionLimit;
    private string _snapshotSource;
    private string _snapshotStatus;
    private string _snapshotWindow;
    private string _topicArn;
    private string _vpcId;
    public string ARN { get; public set; }
    public AutomaticFailoverStatus AutomaticFailover { get; public set; }
    public Nullable`1<bool> AutoMinorVersionUpgrade { get; public set; }
    public Nullable`1<DateTime> CacheClusterCreateTime { get; public set; }
    public string CacheClusterId { get; public set; }
    public string CacheNodeType { get; public set; }
    public string CacheParameterGroupName { get; public set; }
    public string CacheSubnetGroupName { get; public set; }
    public DataTieringStatus DataTiering { get; public set; }
    public string Engine { get; public set; }
    public string EngineVersion { get; public set; }
    public string KmsKeyId { get; public set; }
    public List`1<NodeSnapshot> NodeSnapshots { get; public set; }
    public Nullable`1<int> NumCacheNodes { get; public set; }
    public Nullable`1<int> NumNodeGroups { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public string PreferredAvailabilityZone { get; public set; }
    public string PreferredMaintenanceWindow { get; public set; }
    public string PreferredOutpostArn { get; public set; }
    public string ReplicationGroupDescription { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public string SnapshotName { get; public set; }
    public Nullable`1<int> SnapshotRetentionLimit { get; public set; }
    public string SnapshotSource { get; public set; }
    public string SnapshotStatus { get; public set; }
    public string SnapshotWindow { get; public set; }
    public string TopicArn { get; public set; }
    public string VpcId { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public AutomaticFailoverStatus get_AutomaticFailover();
    public void set_AutomaticFailover(AutomaticFailoverStatus value);
    internal bool IsSetAutomaticFailover();
    public Nullable`1<bool> get_AutoMinorVersionUpgrade();
    public void set_AutoMinorVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAutoMinorVersionUpgrade();
    public Nullable`1<DateTime> get_CacheClusterCreateTime();
    public void set_CacheClusterCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetCacheClusterCreateTime();
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_CacheNodeType();
    public void set_CacheNodeType(string value);
    internal bool IsSetCacheNodeType();
    public string get_CacheParameterGroupName();
    public void set_CacheParameterGroupName(string value);
    internal bool IsSetCacheParameterGroupName();
    public string get_CacheSubnetGroupName();
    public void set_CacheSubnetGroupName(string value);
    internal bool IsSetCacheSubnetGroupName();
    public DataTieringStatus get_DataTiering();
    public void set_DataTiering(DataTieringStatus value);
    internal bool IsSetDataTiering();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_EngineVersion();
    public void set_EngineVersion(string value);
    internal bool IsSetEngineVersion();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public List`1<NodeSnapshot> get_NodeSnapshots();
    public void set_NodeSnapshots(List`1<NodeSnapshot> value);
    internal bool IsSetNodeSnapshots();
    public Nullable`1<int> get_NumCacheNodes();
    public void set_NumCacheNodes(Nullable`1<int> value);
    internal bool IsSetNumCacheNodes();
    public Nullable`1<int> get_NumNodeGroups();
    public void set_NumNodeGroups(Nullable`1<int> value);
    internal bool IsSetNumNodeGroups();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_PreferredAvailabilityZone();
    public void set_PreferredAvailabilityZone(string value);
    internal bool IsSetPreferredAvailabilityZone();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public string get_PreferredOutpostArn();
    public void set_PreferredOutpostArn(string value);
    internal bool IsSetPreferredOutpostArn();
    public string get_ReplicationGroupDescription();
    public void set_ReplicationGroupDescription(string value);
    internal bool IsSetReplicationGroupDescription();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public string get_SnapshotName();
    public void set_SnapshotName(string value);
    internal bool IsSetSnapshotName();
    public Nullable`1<int> get_SnapshotRetentionLimit();
    public void set_SnapshotRetentionLimit(Nullable`1<int> value);
    internal bool IsSetSnapshotRetentionLimit();
    public string get_SnapshotSource();
    public void set_SnapshotSource(string value);
    internal bool IsSetSnapshotSource();
    public string get_SnapshotStatus();
    public void set_SnapshotStatus(string value);
    internal bool IsSetSnapshotStatus();
    public string get_SnapshotWindow();
    public void set_SnapshotWindow(string value);
    internal bool IsSetSnapshotWindow();
    public string get_TopicArn();
    public void set_TopicArn(string value);
    internal bool IsSetTopicArn();
    public string get_VpcId();
    public void set_VpcId(string value);
    internal bool IsSetVpcId();
}
public class Amazon.ElastiCache.Model.SnapshotAlreadyExistsException : AmazonElastiCacheException {
    public SnapshotAlreadyExistsException(string message);
    public SnapshotAlreadyExistsException(string message, Exception innerException);
    public SnapshotAlreadyExistsException(Exception innerException);
    public SnapshotAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.SnapshotFeatureNotSupportedException : AmazonElastiCacheException {
    public SnapshotFeatureNotSupportedException(string message);
    public SnapshotFeatureNotSupportedException(string message, Exception innerException);
    public SnapshotFeatureNotSupportedException(Exception innerException);
    public SnapshotFeatureNotSupportedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotFeatureNotSupportedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.SnapshotNotFoundException : AmazonElastiCacheException {
    public SnapshotNotFoundException(string message);
    public SnapshotNotFoundException(string message, Exception innerException);
    public SnapshotNotFoundException(Exception innerException);
    public SnapshotNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.SnapshotQuotaExceededException : AmazonElastiCacheException {
    public SnapshotQuotaExceededException(string message);
    public SnapshotQuotaExceededException(string message, Exception innerException);
    public SnapshotQuotaExceededException(Exception innerException);
    public SnapshotQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.StartMigrationRequest : AmazonElastiCacheRequest {
    private List`1<CustomerNodeEndpoint> _customerNodeEndpointList;
    private string _replicationGroupId;
    [AWSPropertyAttribute]
public List`1<CustomerNodeEndpoint> CustomerNodeEndpointList { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public List`1<CustomerNodeEndpoint> get_CustomerNodeEndpointList();
    public void set_CustomerNodeEndpointList(List`1<CustomerNodeEndpoint> value);
    internal bool IsSetCustomerNodeEndpointList();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
}
public class Amazon.ElastiCache.Model.StartMigrationResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.Subnet : object {
    private AvailabilityZone _subnetAvailabilityZone;
    private string _subnetIdentifier;
    private SubnetOutpost _subnetOutpost;
    private List`1<string> _supportedNetworkTypes;
    public AvailabilityZone SubnetAvailabilityZone { get; public set; }
    public string SubnetIdentifier { get; public set; }
    public SubnetOutpost SubnetOutpost { get; public set; }
    public List`1<string> SupportedNetworkTypes { get; public set; }
    public AvailabilityZone get_SubnetAvailabilityZone();
    public void set_SubnetAvailabilityZone(AvailabilityZone value);
    internal bool IsSetSubnetAvailabilityZone();
    public string get_SubnetIdentifier();
    public void set_SubnetIdentifier(string value);
    internal bool IsSetSubnetIdentifier();
    public SubnetOutpost get_SubnetOutpost();
    public void set_SubnetOutpost(SubnetOutpost value);
    internal bool IsSetSubnetOutpost();
    public List`1<string> get_SupportedNetworkTypes();
    public void set_SupportedNetworkTypes(List`1<string> value);
    internal bool IsSetSupportedNetworkTypes();
}
public class Amazon.ElastiCache.Model.SubnetInUseException : AmazonElastiCacheException {
    public SubnetInUseException(string message);
    public SubnetInUseException(string message, Exception innerException);
    public SubnetInUseException(Exception innerException);
    public SubnetInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubnetInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.SubnetNotAllowedException : AmazonElastiCacheException {
    public SubnetNotAllowedException(string message);
    public SubnetNotAllowedException(string message, Exception innerException);
    public SubnetNotAllowedException(Exception innerException);
    public SubnetNotAllowedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubnetNotAllowedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.SubnetOutpost : object {
    private string _subnetOutpostArn;
    public string SubnetOutpostArn { get; public set; }
    public string get_SubnetOutpostArn();
    public void set_SubnetOutpostArn(string value);
    internal bool IsSetSubnetOutpostArn();
}
public class Amazon.ElastiCache.Model.Tag : object {
    private string _key;
    private string _value;
    public string Key { get; public set; }
    public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ElastiCache.Model.TagNotFoundException : AmazonElastiCacheException {
    public TagNotFoundException(string message);
    public TagNotFoundException(string message, Exception innerException);
    public TagNotFoundException(Exception innerException);
    public TagNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TagNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.TagQuotaPerResourceExceededException : AmazonElastiCacheException {
    public TagQuotaPerResourceExceededException(string message);
    public TagQuotaPerResourceExceededException(string message, Exception innerException);
    public TagQuotaPerResourceExceededException(Exception innerException);
    public TagQuotaPerResourceExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TagQuotaPerResourceExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.TestFailoverNotAvailableException : AmazonElastiCacheException {
    public TestFailoverNotAvailableException(string message);
    public TestFailoverNotAvailableException(string message, Exception innerException);
    public TestFailoverNotAvailableException(Exception innerException);
    public TestFailoverNotAvailableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TestFailoverNotAvailableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.TestFailoverRequest : AmazonElastiCacheRequest {
    private string _nodeGroupId;
    private string _replicationGroupId;
    [AWSPropertyAttribute]
public string NodeGroupId { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public string get_NodeGroupId();
    public void set_NodeGroupId(string value);
    internal bool IsSetNodeGroupId();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
}
public class Amazon.ElastiCache.Model.TestFailoverResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.TestMigrationRequest : AmazonElastiCacheRequest {
    private List`1<CustomerNodeEndpoint> _customerNodeEndpointList;
    private string _replicationGroupId;
    [AWSPropertyAttribute]
public List`1<CustomerNodeEndpoint> CustomerNodeEndpointList { get; public set; }
    [AWSPropertyAttribute]
public string ReplicationGroupId { get; public set; }
    public List`1<CustomerNodeEndpoint> get_CustomerNodeEndpointList();
    public void set_CustomerNodeEndpointList(List`1<CustomerNodeEndpoint> value);
    internal bool IsSetCustomerNodeEndpointList();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
}
public class Amazon.ElastiCache.Model.TestMigrationResponse : AmazonWebServiceResponse {
    private ReplicationGroup _replicationGroup;
    public ReplicationGroup ReplicationGroup { get; public set; }
    public ReplicationGroup get_ReplicationGroup();
    public void set_ReplicationGroup(ReplicationGroup value);
    internal bool IsSetReplicationGroup();
}
public class Amazon.ElastiCache.Model.TimeRangeFilter : object {
    private Nullable`1<DateTime> _endTime;
    private Nullable`1<DateTime> _startTime;
    public Nullable`1<DateTime> EndTime { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    internal bool IsSetEndTime();
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    internal bool IsSetStartTime();
}
public class Amazon.ElastiCache.Model.UnprocessedUpdateAction : object {
    private string _cacheClusterId;
    private string _errorMessage;
    private string _errorType;
    private string _replicationGroupId;
    private string _serviceUpdateName;
    public string CacheClusterId { get; public set; }
    public string ErrorMessage { get; public set; }
    public string ErrorType { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public string ServiceUpdateName { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    internal bool IsSetErrorMessage();
    public string get_ErrorType();
    public void set_ErrorType(string value);
    internal bool IsSetErrorType();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public string get_ServiceUpdateName();
    public void set_ServiceUpdateName(string value);
    internal bool IsSetServiceUpdateName();
}
public class Amazon.ElastiCache.Model.UpdateAction : object {
    private string _cacheClusterId;
    private List`1<CacheNodeUpdateStatus> _cacheNodeUpdateStatus;
    private string _engine;
    private string _estimatedUpdateTime;
    private List`1<NodeGroupUpdateStatus> _nodeGroupUpdateStatus;
    private string _nodesUpdated;
    private string _replicationGroupId;
    private string _serviceUpdateName;
    private Nullable`1<DateTime> _serviceUpdateRecommendedApplyByDate;
    private Nullable`1<DateTime> _serviceUpdateReleaseDate;
    private ServiceUpdateSeverity _serviceUpdateSeverity;
    private ServiceUpdateStatus _serviceUpdateStatus;
    private ServiceUpdateType _serviceUpdateType;
    private SlaMet _slaMet;
    private Nullable`1<DateTime> _updateActionAvailableDate;
    private UpdateActionStatus _updateActionStatus;
    private Nullable`1<DateTime> _updateActionStatusModifiedDate;
    public string CacheClusterId { get; public set; }
    public List`1<CacheNodeUpdateStatus> CacheNodeUpdateStatus { get; public set; }
    public string Engine { get; public set; }
    public string EstimatedUpdateTime { get; public set; }
    public List`1<NodeGroupUpdateStatus> NodeGroupUpdateStatus { get; public set; }
    public string NodesUpdated { get; public set; }
    public string ReplicationGroupId { get; public set; }
    public string ServiceUpdateName { get; public set; }
    public Nullable`1<DateTime> ServiceUpdateRecommendedApplyByDate { get; public set; }
    public Nullable`1<DateTime> ServiceUpdateReleaseDate { get; public set; }
    public ServiceUpdateSeverity ServiceUpdateSeverity { get; public set; }
    public ServiceUpdateStatus ServiceUpdateStatus { get; public set; }
    public ServiceUpdateType ServiceUpdateType { get; public set; }
    public SlaMet SlaMet { get; public set; }
    public Nullable`1<DateTime> UpdateActionAvailableDate { get; public set; }
    public UpdateActionStatus UpdateActionStatus { get; public set; }
    public Nullable`1<DateTime> UpdateActionStatusModifiedDate { get; public set; }
    public string get_CacheClusterId();
    public void set_CacheClusterId(string value);
    internal bool IsSetCacheClusterId();
    public List`1<CacheNodeUpdateStatus> get_CacheNodeUpdateStatus();
    public void set_CacheNodeUpdateStatus(List`1<CacheNodeUpdateStatus> value);
    internal bool IsSetCacheNodeUpdateStatus();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_EstimatedUpdateTime();
    public void set_EstimatedUpdateTime(string value);
    internal bool IsSetEstimatedUpdateTime();
    public List`1<NodeGroupUpdateStatus> get_NodeGroupUpdateStatus();
    public void set_NodeGroupUpdateStatus(List`1<NodeGroupUpdateStatus> value);
    internal bool IsSetNodeGroupUpdateStatus();
    public string get_NodesUpdated();
    public void set_NodesUpdated(string value);
    internal bool IsSetNodesUpdated();
    public string get_ReplicationGroupId();
    public void set_ReplicationGroupId(string value);
    internal bool IsSetReplicationGroupId();
    public string get_ServiceUpdateName();
    public void set_ServiceUpdateName(string value);
    internal bool IsSetServiceUpdateName();
    public Nullable`1<DateTime> get_ServiceUpdateRecommendedApplyByDate();
    public void set_ServiceUpdateRecommendedApplyByDate(Nullable`1<DateTime> value);
    internal bool IsSetServiceUpdateRecommendedApplyByDate();
    public Nullable`1<DateTime> get_ServiceUpdateReleaseDate();
    public void set_ServiceUpdateReleaseDate(Nullable`1<DateTime> value);
    internal bool IsSetServiceUpdateReleaseDate();
    public ServiceUpdateSeverity get_ServiceUpdateSeverity();
    public void set_ServiceUpdateSeverity(ServiceUpdateSeverity value);
    internal bool IsSetServiceUpdateSeverity();
    public ServiceUpdateStatus get_ServiceUpdateStatus();
    public void set_ServiceUpdateStatus(ServiceUpdateStatus value);
    internal bool IsSetServiceUpdateStatus();
    public ServiceUpdateType get_ServiceUpdateType();
    public void set_ServiceUpdateType(ServiceUpdateType value);
    internal bool IsSetServiceUpdateType();
    public SlaMet get_SlaMet();
    public void set_SlaMet(SlaMet value);
    internal bool IsSetSlaMet();
    public Nullable`1<DateTime> get_UpdateActionAvailableDate();
    public void set_UpdateActionAvailableDate(Nullable`1<DateTime> value);
    internal bool IsSetUpdateActionAvailableDate();
    public UpdateActionStatus get_UpdateActionStatus();
    public void set_UpdateActionStatus(UpdateActionStatus value);
    internal bool IsSetUpdateActionStatus();
    public Nullable`1<DateTime> get_UpdateActionStatusModifiedDate();
    public void set_UpdateActionStatusModifiedDate(Nullable`1<DateTime> value);
    internal bool IsSetUpdateActionStatusModifiedDate();
}
public class Amazon.ElastiCache.Model.User : object {
    private string _accessString;
    private string _arn;
    private Authentication _authentication;
    private string _engine;
    private string _minimumEngineVersion;
    private string _status;
    private List`1<string> _userGroupIds;
    private string _userId;
    private string _userName;
    public string AccessString { get; public set; }
    public string ARN { get; public set; }
    public Authentication Authentication { get; public set; }
    public string Engine { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public string Status { get; public set; }
    public List`1<string> UserGroupIds { get; public set; }
    public string UserId { get; public set; }
    public string UserName { get; public set; }
    public string get_AccessString();
    public void set_AccessString(string value);
    internal bool IsSetAccessString();
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public Authentication get_Authentication();
    public void set_Authentication(Authentication value);
    internal bool IsSetAuthentication();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<string> get_UserGroupIds();
    public void set_UserGroupIds(List`1<string> value);
    internal bool IsSetUserGroupIds();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.ElastiCache.Model.UserAlreadyExistsException : AmazonElastiCacheException {
    public UserAlreadyExistsException(string message);
    public UserAlreadyExistsException(string message, Exception innerException);
    public UserAlreadyExistsException(Exception innerException);
    public UserAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UserAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.UserGroup : object {
    private string _arn;
    private string _engine;
    private string _minimumEngineVersion;
    private UserGroupPendingChanges _pendingChanges;
    private List`1<string> _replicationGroups;
    private List`1<string> _serverlessCaches;
    private string _status;
    private string _userGroupId;
    private List`1<string> _userIds;
    public string ARN { get; public set; }
    public string Engine { get; public set; }
    public string MinimumEngineVersion { get; public set; }
    public UserGroupPendingChanges PendingChanges { get; public set; }
    public List`1<string> ReplicationGroups { get; public set; }
    public List`1<string> ServerlessCaches { get; public set; }
    public string Status { get; public set; }
    public string UserGroupId { get; public set; }
    public List`1<string> UserIds { get; public set; }
    public string get_ARN();
    public void set_ARN(string value);
    internal bool IsSetARN();
    public string get_Engine();
    public void set_Engine(string value);
    internal bool IsSetEngine();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public UserGroupPendingChanges get_PendingChanges();
    public void set_PendingChanges(UserGroupPendingChanges value);
    internal bool IsSetPendingChanges();
    public List`1<string> get_ReplicationGroups();
    public void set_ReplicationGroups(List`1<string> value);
    internal bool IsSetReplicationGroups();
    public List`1<string> get_ServerlessCaches();
    public void set_ServerlessCaches(List`1<string> value);
    internal bool IsSetServerlessCaches();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_UserGroupId();
    public void set_UserGroupId(string value);
    internal bool IsSetUserGroupId();
    public List`1<string> get_UserIds();
    public void set_UserIds(List`1<string> value);
    internal bool IsSetUserIds();
}
public class Amazon.ElastiCache.Model.UserGroupAlreadyExistsException : AmazonElastiCacheException {
    public UserGroupAlreadyExistsException(string message);
    public UserGroupAlreadyExistsException(string message, Exception innerException);
    public UserGroupAlreadyExistsException(Exception innerException);
    public UserGroupAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UserGroupAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.UserGroupNotFoundException : AmazonElastiCacheException {
    public UserGroupNotFoundException(string message);
    public UserGroupNotFoundException(string message, Exception innerException);
    public UserGroupNotFoundException(Exception innerException);
    public UserGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UserGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.UserGroupPendingChanges : object {
    private List`1<string> _userIdsToAdd;
    private List`1<string> _userIdsToRemove;
    public List`1<string> UserIdsToAdd { get; public set; }
    public List`1<string> UserIdsToRemove { get; public set; }
    public List`1<string> get_UserIdsToAdd();
    public void set_UserIdsToAdd(List`1<string> value);
    internal bool IsSetUserIdsToAdd();
    public List`1<string> get_UserIdsToRemove();
    public void set_UserIdsToRemove(List`1<string> value);
    internal bool IsSetUserIdsToRemove();
}
public class Amazon.ElastiCache.Model.UserGroupQuotaExceededException : AmazonElastiCacheException {
    public UserGroupQuotaExceededException(string message);
    public UserGroupQuotaExceededException(string message, Exception innerException);
    public UserGroupQuotaExceededException(Exception innerException);
    public UserGroupQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UserGroupQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.UserGroupsUpdateStatus : object {
    private List`1<string> _userGroupIdsToAdd;
    private List`1<string> _userGroupIdsToRemove;
    public List`1<string> UserGroupIdsToAdd { get; public set; }
    public List`1<string> UserGroupIdsToRemove { get; public set; }
    public List`1<string> get_UserGroupIdsToAdd();
    public void set_UserGroupIdsToAdd(List`1<string> value);
    internal bool IsSetUserGroupIdsToAdd();
    public List`1<string> get_UserGroupIdsToRemove();
    public void set_UserGroupIdsToRemove(List`1<string> value);
    internal bool IsSetUserGroupIdsToRemove();
}
public class Amazon.ElastiCache.Model.UserNotFoundException : AmazonElastiCacheException {
    public UserNotFoundException(string message);
    public UserNotFoundException(string message, Exception innerException);
    public UserNotFoundException(Exception innerException);
    public UserNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UserNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.Model.UserQuotaExceededException : AmazonElastiCacheException {
    public UserQuotaExceededException(string message);
    public UserQuotaExceededException(string message, Exception innerException);
    public UserQuotaExceededException(Exception innerException);
    public UserQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UserQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElastiCache.MultiAZStatus : ConstantClass {
    public static MultiAZStatus Disabled;
    public static MultiAZStatus Enabled;
    public MultiAZStatus(string value);
    private static MultiAZStatus();
    public static MultiAZStatus FindValue(string value);
    public static MultiAZStatus op_Implicit(string value);
}
public class Amazon.ElastiCache.NetworkType : ConstantClass {
    public static NetworkType Dual_stack;
    public static NetworkType Ipv4;
    public static NetworkType Ipv6;
    public NetworkType(string value);
    private static NetworkType();
    public static NetworkType FindValue(string value);
    public static NetworkType op_Implicit(string value);
}
public class Amazon.ElastiCache.NodeUpdateInitiatedBy : ConstantClass {
    public static NodeUpdateInitiatedBy Customer;
    public static NodeUpdateInitiatedBy System;
    public NodeUpdateInitiatedBy(string value);
    private static NodeUpdateInitiatedBy();
    public static NodeUpdateInitiatedBy FindValue(string value);
    public static NodeUpdateInitiatedBy op_Implicit(string value);
}
public class Amazon.ElastiCache.NodeUpdateStatus : ConstantClass {
    public static NodeUpdateStatus Complete;
    public static NodeUpdateStatus InProgress;
    public static NodeUpdateStatus NotApplied;
    public static NodeUpdateStatus Stopped;
    public static NodeUpdateStatus Stopping;
    public static NodeUpdateStatus WaitingToStart;
    public NodeUpdateStatus(string value);
    private static NodeUpdateStatus();
    public static NodeUpdateStatus FindValue(string value);
    public static NodeUpdateStatus op_Implicit(string value);
}
public class Amazon.ElastiCache.OutpostMode : ConstantClass {
    public static OutpostMode CrossOutpost;
    public static OutpostMode SingleOutpost;
    public OutpostMode(string value);
    private static OutpostMode();
    public static OutpostMode FindValue(string value);
    public static OutpostMode op_Implicit(string value);
}
public class Amazon.ElastiCache.PendingAutomaticFailoverStatus : ConstantClass {
    public static PendingAutomaticFailoverStatus Disabled;
    public static PendingAutomaticFailoverStatus Enabled;
    public PendingAutomaticFailoverStatus(string value);
    private static PendingAutomaticFailoverStatus();
    public static PendingAutomaticFailoverStatus FindValue(string value);
    public static PendingAutomaticFailoverStatus op_Implicit(string value);
}
public class Amazon.ElastiCache.ServiceUpdateSeverity : ConstantClass {
    public static ServiceUpdateSeverity Critical;
    public static ServiceUpdateSeverity Important;
    public static ServiceUpdateSeverity Low;
    public static ServiceUpdateSeverity Medium;
    public ServiceUpdateSeverity(string value);
    private static ServiceUpdateSeverity();
    public static ServiceUpdateSeverity FindValue(string value);
    public static ServiceUpdateSeverity op_Implicit(string value);
}
public class Amazon.ElastiCache.ServiceUpdateStatus : ConstantClass {
    public static ServiceUpdateStatus Available;
    public static ServiceUpdateStatus Cancelled;
    public static ServiceUpdateStatus Expired;
    public ServiceUpdateStatus(string value);
    private static ServiceUpdateStatus();
    public static ServiceUpdateStatus FindValue(string value);
    public static ServiceUpdateStatus op_Implicit(string value);
}
public class Amazon.ElastiCache.ServiceUpdateType : ConstantClass {
    public static ServiceUpdateType SecurityUpdate;
    public ServiceUpdateType(string value);
    private static ServiceUpdateType();
    public static ServiceUpdateType FindValue(string value);
    public static ServiceUpdateType op_Implicit(string value);
}
public class Amazon.ElastiCache.SlaMet : ConstantClass {
    public static SlaMet NA;
    public static SlaMet No;
    public static SlaMet Yes;
    public SlaMet(string value);
    private static SlaMet();
    public static SlaMet FindValue(string value);
    public static SlaMet op_Implicit(string value);
}
public class Amazon.ElastiCache.SourceType : ConstantClass {
    public static SourceType CacheCluster;
    public static SourceType CacheParameterGroup;
    public static SourceType CacheSecurityGroup;
    public static SourceType CacheSubnetGroup;
    public static SourceType ReplicationGroup;
    public static SourceType ServerlessCache;
    public static SourceType ServerlessCacheSnapshot;
    public static SourceType User;
    public static SourceType UserGroup;
    public SourceType(string value);
    private static SourceType();
    public static SourceType FindValue(string value);
    public static SourceType op_Implicit(string value);
}
public class Amazon.ElastiCache.TransitEncryptionMode : ConstantClass {
    public static TransitEncryptionMode Preferred;
    public static TransitEncryptionMode Required;
    public TransitEncryptionMode(string value);
    private static TransitEncryptionMode();
    public static TransitEncryptionMode FindValue(string value);
    public static TransitEncryptionMode op_Implicit(string value);
}
public class Amazon.ElastiCache.UpdateActionStatus : ConstantClass {
    public static UpdateActionStatus Complete;
    public static UpdateActionStatus InProgress;
    public static UpdateActionStatus NotApplicable;
    public static UpdateActionStatus NotApplied;
    public static UpdateActionStatus Scheduled;
    public static UpdateActionStatus Scheduling;
    public static UpdateActionStatus Stopped;
    public static UpdateActionStatus Stopping;
    public static UpdateActionStatus WaitingToStart;
    public UpdateActionStatus(string value);
    private static UpdateActionStatus();
    public static UpdateActionStatus FindValue(string value);
    public static UpdateActionStatus op_Implicit(string value);
}
