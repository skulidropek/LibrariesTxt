public class Amazon.ElasticLoadBalancing.AmazonElasticLoadBalancingClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IElasticLoadBalancingPaginatorFactory _paginators;
    public IElasticLoadBalancingPaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonElasticLoadBalancingClient(RegionEndpoint region);
    public AmazonElasticLoadBalancingClient(AmazonElasticLoadBalancingConfig config);
    public AmazonElasticLoadBalancingClient(AWSCredentials credentials);
    public AmazonElasticLoadBalancingClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonElasticLoadBalancingClient(AWSCredentials credentials, AmazonElasticLoadBalancingConfig clientConfig);
    public AmazonElasticLoadBalancingClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonElasticLoadBalancingClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonElasticLoadBalancingClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonElasticLoadBalancingConfig clientConfig);
    public AmazonElasticLoadBalancingClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonElasticLoadBalancingClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonElasticLoadBalancingClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonElasticLoadBalancingConfig clientConfig);
    private static AmazonElasticLoadBalancingClient();
    public sealed virtual IElasticLoadBalancingPaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual AddTagsResponse AddTags(AddTagsRequest request);
    public virtual Task`1<AddTagsResponse> AddTagsAsync(AddTagsRequest request, CancellationToken cancellationToken);
    internal virtual ApplySecurityGroupsToLoadBalancerResponse ApplySecurityGroupsToLoadBalancer(ApplySecurityGroupsToLoadBalancerRequest request);
    public virtual Task`1<ApplySecurityGroupsToLoadBalancerResponse> ApplySecurityGroupsToLoadBalancerAsync(ApplySecurityGroupsToLoadBalancerRequest request, CancellationToken cancellationToken);
    internal virtual AttachLoadBalancerToSubnetsResponse AttachLoadBalancerToSubnets(AttachLoadBalancerToSubnetsRequest request);
    public virtual Task`1<AttachLoadBalancerToSubnetsResponse> AttachLoadBalancerToSubnetsAsync(AttachLoadBalancerToSubnetsRequest request, CancellationToken cancellationToken);
    internal virtual ConfigureHealthCheckResponse ConfigureHealthCheck(ConfigureHealthCheckRequest request);
    public virtual Task`1<ConfigureHealthCheckResponse> ConfigureHealthCheckAsync(ConfigureHealthCheckRequest request, CancellationToken cancellationToken);
    internal virtual CreateAppCookieStickinessPolicyResponse CreateAppCookieStickinessPolicy(CreateAppCookieStickinessPolicyRequest request);
    public virtual Task`1<CreateAppCookieStickinessPolicyResponse> CreateAppCookieStickinessPolicyAsync(CreateAppCookieStickinessPolicyRequest request, CancellationToken cancellationToken);
    internal virtual CreateLBCookieStickinessPolicyResponse CreateLBCookieStickinessPolicy(CreateLBCookieStickinessPolicyRequest request);
    public virtual Task`1<CreateLBCookieStickinessPolicyResponse> CreateLBCookieStickinessPolicyAsync(CreateLBCookieStickinessPolicyRequest request, CancellationToken cancellationToken);
    internal virtual CreateLoadBalancerResponse CreateLoadBalancer(CreateLoadBalancerRequest request);
    public virtual Task`1<CreateLoadBalancerResponse> CreateLoadBalancerAsync(CreateLoadBalancerRequest request, CancellationToken cancellationToken);
    internal virtual CreateLoadBalancerListenersResponse CreateLoadBalancerListeners(CreateLoadBalancerListenersRequest request);
    public virtual Task`1<CreateLoadBalancerListenersResponse> CreateLoadBalancerListenersAsync(CreateLoadBalancerListenersRequest request, CancellationToken cancellationToken);
    internal virtual CreateLoadBalancerPolicyResponse CreateLoadBalancerPolicy(CreateLoadBalancerPolicyRequest request);
    public virtual Task`1<CreateLoadBalancerPolicyResponse> CreateLoadBalancerPolicyAsync(CreateLoadBalancerPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteLoadBalancerResponse DeleteLoadBalancer(DeleteLoadBalancerRequest request);
    public virtual Task`1<DeleteLoadBalancerResponse> DeleteLoadBalancerAsync(DeleteLoadBalancerRequest request, CancellationToken cancellationToken);
    internal virtual DeleteLoadBalancerListenersResponse DeleteLoadBalancerListeners(DeleteLoadBalancerListenersRequest request);
    public virtual Task`1<DeleteLoadBalancerListenersResponse> DeleteLoadBalancerListenersAsync(DeleteLoadBalancerListenersRequest request, CancellationToken cancellationToken);
    internal virtual DeleteLoadBalancerPolicyResponse DeleteLoadBalancerPolicy(DeleteLoadBalancerPolicyRequest request);
    public virtual Task`1<DeleteLoadBalancerPolicyResponse> DeleteLoadBalancerPolicyAsync(DeleteLoadBalancerPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeregisterInstancesFromLoadBalancerResponse DeregisterInstancesFromLoadBalancer(DeregisterInstancesFromLoadBalancerRequest request);
    public virtual Task`1<DeregisterInstancesFromLoadBalancerResponse> DeregisterInstancesFromLoadBalancerAsync(DeregisterInstancesFromLoadBalancerRequest request, CancellationToken cancellationToken);
    internal virtual DescribeAccountLimitsResponse DescribeAccountLimits(DescribeAccountLimitsRequest request);
    public virtual Task`1<DescribeAccountLimitsResponse> DescribeAccountLimitsAsync(DescribeAccountLimitsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeInstanceHealthResponse DescribeInstanceHealth(DescribeInstanceHealthRequest request);
    public virtual Task`1<DescribeInstanceHealthResponse> DescribeInstanceHealthAsync(DescribeInstanceHealthRequest request, CancellationToken cancellationToken);
    internal virtual DescribeLoadBalancerAttributesResponse DescribeLoadBalancerAttributes(DescribeLoadBalancerAttributesRequest request);
    public virtual Task`1<DescribeLoadBalancerAttributesResponse> DescribeLoadBalancerAttributesAsync(DescribeLoadBalancerAttributesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeLoadBalancerPoliciesResponse DescribeLoadBalancerPolicies();
    internal virtual DescribeLoadBalancerPoliciesResponse DescribeLoadBalancerPolicies(DescribeLoadBalancerPoliciesRequest request);
    public virtual Task`1<DescribeLoadBalancerPoliciesResponse> DescribeLoadBalancerPoliciesAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeLoadBalancerPoliciesResponse> DescribeLoadBalancerPoliciesAsync(DescribeLoadBalancerPoliciesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeLoadBalancerPolicyTypesResponse DescribeLoadBalancerPolicyTypes();
    internal virtual DescribeLoadBalancerPolicyTypesResponse DescribeLoadBalancerPolicyTypes(DescribeLoadBalancerPolicyTypesRequest request);
    public virtual Task`1<DescribeLoadBalancerPolicyTypesResponse> DescribeLoadBalancerPolicyTypesAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeLoadBalancerPolicyTypesResponse> DescribeLoadBalancerPolicyTypesAsync(DescribeLoadBalancerPolicyTypesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeLoadBalancersResponse DescribeLoadBalancers();
    internal virtual DescribeLoadBalancersResponse DescribeLoadBalancers(DescribeLoadBalancersRequest request);
    public virtual Task`1<DescribeLoadBalancersResponse> DescribeLoadBalancersAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeLoadBalancersResponse> DescribeLoadBalancersAsync(DescribeLoadBalancersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeTagsResponse DescribeTags(DescribeTagsRequest request);
    public virtual Task`1<DescribeTagsResponse> DescribeTagsAsync(DescribeTagsRequest request, CancellationToken cancellationToken);
    internal virtual DetachLoadBalancerFromSubnetsResponse DetachLoadBalancerFromSubnets(DetachLoadBalancerFromSubnetsRequest request);
    public virtual Task`1<DetachLoadBalancerFromSubnetsResponse> DetachLoadBalancerFromSubnetsAsync(DetachLoadBalancerFromSubnetsRequest request, CancellationToken cancellationToken);
    internal virtual DisableAvailabilityZonesForLoadBalancerResponse DisableAvailabilityZonesForLoadBalancer(DisableAvailabilityZonesForLoadBalancerRequest request);
    public virtual Task`1<DisableAvailabilityZonesForLoadBalancerResponse> DisableAvailabilityZonesForLoadBalancerAsync(DisableAvailabilityZonesForLoadBalancerRequest request, CancellationToken cancellationToken);
    internal virtual EnableAvailabilityZonesForLoadBalancerResponse EnableAvailabilityZonesForLoadBalancer(EnableAvailabilityZonesForLoadBalancerRequest request);
    public virtual Task`1<EnableAvailabilityZonesForLoadBalancerResponse> EnableAvailabilityZonesForLoadBalancerAsync(EnableAvailabilityZonesForLoadBalancerRequest request, CancellationToken cancellationToken);
    internal virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request);
    public virtual Task`1<ModifyLoadBalancerAttributesResponse> ModifyLoadBalancerAttributesAsync(ModifyLoadBalancerAttributesRequest request, CancellationToken cancellationToken);
    internal virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request);
    public virtual Task`1<RegisterInstancesWithLoadBalancerResponse> RegisterInstancesWithLoadBalancerAsync(RegisterInstancesWithLoadBalancerRequest request, CancellationToken cancellationToken);
    internal virtual RemoveTagsResponse RemoveTags(RemoveTagsRequest request);
    public virtual Task`1<RemoveTagsResponse> RemoveTagsAsync(RemoveTagsRequest request, CancellationToken cancellationToken);
    internal virtual SetLoadBalancerListenerSSLCertificateResponse SetLoadBalancerListenerSSLCertificate(SetLoadBalancerListenerSSLCertificateRequest request);
    public virtual Task`1<SetLoadBalancerListenerSSLCertificateResponse> SetLoadBalancerListenerSSLCertificateAsync(SetLoadBalancerListenerSSLCertificateRequest request, CancellationToken cancellationToken);
    internal virtual SetLoadBalancerPoliciesForBackendServerResponse SetLoadBalancerPoliciesForBackendServer(SetLoadBalancerPoliciesForBackendServerRequest request);
    public virtual Task`1<SetLoadBalancerPoliciesForBackendServerResponse> SetLoadBalancerPoliciesForBackendServerAsync(SetLoadBalancerPoliciesForBackendServerRequest request, CancellationToken cancellationToken);
    internal virtual SetLoadBalancerPoliciesOfListenerResponse SetLoadBalancerPoliciesOfListener(SetLoadBalancerPoliciesOfListenerRequest request);
    public virtual Task`1<SetLoadBalancerPoliciesOfListenerResponse> SetLoadBalancerPoliciesOfListenerAsync(SetLoadBalancerPoliciesOfListenerRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.ElasticLoadBalancing.AmazonElasticLoadBalancingConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonElasticLoadBalancingEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonElasticLoadBalancingConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.ElasticLoadBalancing.AmazonElasticLoadBalancingDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonElasticLoadBalancingDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.ElasticLoadBalancing.AmazonElasticLoadBalancingException : AmazonServiceException {
    public AmazonElasticLoadBalancingException(string message);
    public AmazonElasticLoadBalancingException(string message, Exception innerException);
    public AmazonElasticLoadBalancingException(Exception innerException);
    public AmazonElasticLoadBalancingException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonElasticLoadBalancingException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.AmazonElasticLoadBalancingRequest : AmazonWebServiceRequest {
}
public class Amazon.ElasticLoadBalancing.Endpoints.ElasticLoadBalancingEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public interface Amazon.ElasticLoadBalancing.IAmazonElasticLoadBalancing {
    public IElasticLoadBalancingPaginatorFactory Paginators { get; }
    public abstract virtual IElasticLoadBalancingPaginatorFactory get_Paginators();
    public abstract virtual Task`1<AddTagsResponse> AddTagsAsync(AddTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ApplySecurityGroupsToLoadBalancerResponse> ApplySecurityGroupsToLoadBalancerAsync(ApplySecurityGroupsToLoadBalancerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AttachLoadBalancerToSubnetsResponse> AttachLoadBalancerToSubnetsAsync(AttachLoadBalancerToSubnetsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConfigureHealthCheckResponse> ConfigureHealthCheckAsync(ConfigureHealthCheckRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateAppCookieStickinessPolicyResponse> CreateAppCookieStickinessPolicyAsync(CreateAppCookieStickinessPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateLBCookieStickinessPolicyResponse> CreateLBCookieStickinessPolicyAsync(CreateLBCookieStickinessPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateLoadBalancerResponse> CreateLoadBalancerAsync(CreateLoadBalancerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateLoadBalancerListenersResponse> CreateLoadBalancerListenersAsync(CreateLoadBalancerListenersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateLoadBalancerPolicyResponse> CreateLoadBalancerPolicyAsync(CreateLoadBalancerPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteLoadBalancerResponse> DeleteLoadBalancerAsync(DeleteLoadBalancerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteLoadBalancerListenersResponse> DeleteLoadBalancerListenersAsync(DeleteLoadBalancerListenersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteLoadBalancerPolicyResponse> DeleteLoadBalancerPolicyAsync(DeleteLoadBalancerPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeregisterInstancesFromLoadBalancerResponse> DeregisterInstancesFromLoadBalancerAsync(DeregisterInstancesFromLoadBalancerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeAccountLimitsResponse> DescribeAccountLimitsAsync(DescribeAccountLimitsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeInstanceHealthResponse> DescribeInstanceHealthAsync(DescribeInstanceHealthRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeLoadBalancerAttributesResponse> DescribeLoadBalancerAttributesAsync(DescribeLoadBalancerAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeLoadBalancerPoliciesResponse> DescribeLoadBalancerPoliciesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeLoadBalancerPoliciesResponse> DescribeLoadBalancerPoliciesAsync(DescribeLoadBalancerPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeLoadBalancerPolicyTypesResponse> DescribeLoadBalancerPolicyTypesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeLoadBalancerPolicyTypesResponse> DescribeLoadBalancerPolicyTypesAsync(DescribeLoadBalancerPolicyTypesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeLoadBalancersResponse> DescribeLoadBalancersAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeLoadBalancersResponse> DescribeLoadBalancersAsync(DescribeLoadBalancersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeTagsResponse> DescribeTagsAsync(DescribeTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DetachLoadBalancerFromSubnetsResponse> DetachLoadBalancerFromSubnetsAsync(DetachLoadBalancerFromSubnetsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableAvailabilityZonesForLoadBalancerResponse> DisableAvailabilityZonesForLoadBalancerAsync(DisableAvailabilityZonesForLoadBalancerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableAvailabilityZonesForLoadBalancerResponse> EnableAvailabilityZonesForLoadBalancerAsync(EnableAvailabilityZonesForLoadBalancerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyLoadBalancerAttributesResponse> ModifyLoadBalancerAttributesAsync(ModifyLoadBalancerAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RegisterInstancesWithLoadBalancerResponse> RegisterInstancesWithLoadBalancerAsync(RegisterInstancesWithLoadBalancerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RemoveTagsResponse> RemoveTagsAsync(RemoveTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetLoadBalancerListenerSSLCertificateResponse> SetLoadBalancerListenerSSLCertificateAsync(SetLoadBalancerListenerSSLCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetLoadBalancerPoliciesForBackendServerResponse> SetLoadBalancerPoliciesForBackendServerAsync(SetLoadBalancerPoliciesForBackendServerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetLoadBalancerPoliciesOfListenerResponse> SetLoadBalancerPoliciesOfListenerAsync(SetLoadBalancerPoliciesOfListenerRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.ElasticLoadBalancing.Internal.AmazonElasticLoadBalancingEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.ElasticLoadBalancing.Internal.AmazonElasticLoadBalancingEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.ElasticLoadBalancing.Internal.AmazonElasticLoadBalancingMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.ElasticLoadBalancing.Internal.ProcessRequestHandler : PipelineHandler {
    public virtual void InvokeSync(IExecutionContext executionContext);
    public virtual Task`1<T> InvokeAsync(IExecutionContext executionContext);
    protected virtual void PreInvoke(IExecutionContext executionContext);
    private static void SetPolicyNames(IRequest request);
}
public class Amazon.ElasticLoadBalancing.Model.AccessLog : object {
    private Nullable`1<int> _emitInterval;
    private Nullable`1<bool> _enabled;
    private string _s3BucketName;
    private string _s3BucketPrefix;
    public Nullable`1<int> EmitInterval { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> Enabled { get; public set; }
    public string S3BucketName { get; public set; }
    public string S3BucketPrefix { get; public set; }
    public Nullable`1<int> get_EmitInterval();
    public void set_EmitInterval(Nullable`1<int> value);
    internal bool IsSetEmitInterval();
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
    public string get_S3BucketName();
    public void set_S3BucketName(string value);
    internal bool IsSetS3BucketName();
    public string get_S3BucketPrefix();
    public void set_S3BucketPrefix(string value);
    internal bool IsSetS3BucketPrefix();
}
public class Amazon.ElasticLoadBalancing.Model.AccessPointNotFoundException : AmazonElasticLoadBalancingException {
    public AccessPointNotFoundException(string message);
    public AccessPointNotFoundException(string message, Exception innerException);
    public AccessPointNotFoundException(Exception innerException);
    public AccessPointNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AccessPointNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.AdditionalAttribute : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ElasticLoadBalancing.Model.AddTagsRequest : AmazonElasticLoadBalancingRequest {
    private List`1<string> _loadBalancerNames;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public List`1<string> LoadBalancerNames { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public List`1<string> get_LoadBalancerNames();
    public void set_LoadBalancerNames(List`1<string> value);
    internal bool IsSetLoadBalancerNames();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElasticLoadBalancing.Model.AddTagsResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.AppCookieStickinessPolicy : object {
    private string _cookieName;
    private string _policyName;
    public string CookieName { get; public set; }
    public string PolicyName { get; public set; }
    public AppCookieStickinessPolicy(string policyName, string cookieName);
    public string get_CookieName();
    public void set_CookieName(string value);
    internal bool IsSetCookieName();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.ElasticLoadBalancing.Model.ApplySecurityGroupsToLoadBalancerRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    private List`1<string> _securityGroups;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SecurityGroups { get; public set; }
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public List`1<string> get_SecurityGroups();
    public void set_SecurityGroups(List`1<string> value);
    internal bool IsSetSecurityGroups();
}
public class Amazon.ElasticLoadBalancing.Model.ApplySecurityGroupsToLoadBalancerResponse : AmazonWebServiceResponse {
    private List`1<string> _securityGroups;
    public List`1<string> SecurityGroups { get; public set; }
    public List`1<string> get_SecurityGroups();
    public void set_SecurityGroups(List`1<string> value);
    internal bool IsSetSecurityGroups();
}
public class Amazon.ElasticLoadBalancing.Model.AttachLoadBalancerToSubnetsRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    private List`1<string> _subnets;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Subnets { get; public set; }
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
}
public class Amazon.ElasticLoadBalancing.Model.AttachLoadBalancerToSubnetsResponse : AmazonWebServiceResponse {
    private List`1<string> _subnets;
    public List`1<string> Subnets { get; public set; }
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
}
public class Amazon.ElasticLoadBalancing.Model.BackendServerDescription : object {
    private Nullable`1<int> _instancePort;
    private List`1<string> _policyNames;
    [AWSPropertyAttribute]
public Nullable`1<int> InstancePort { get; public set; }
    public List`1<string> PolicyNames { get; public set; }
    public Nullable`1<int> get_InstancePort();
    public void set_InstancePort(Nullable`1<int> value);
    internal bool IsSetInstancePort();
    public List`1<string> get_PolicyNames();
    public void set_PolicyNames(List`1<string> value);
    internal bool IsSetPolicyNames();
}
public class Amazon.ElasticLoadBalancing.Model.CertificateNotFoundException : AmazonElasticLoadBalancingException {
    public CertificateNotFoundException(string message);
    public CertificateNotFoundException(string message, Exception innerException);
    public CertificateNotFoundException(Exception innerException);
    public CertificateNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CertificateNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.ConfigureHealthCheckRequest : AmazonElasticLoadBalancingRequest {
    private HealthCheck _healthCheck;
    private string _loadBalancerName;
    [AWSPropertyAttribute]
public HealthCheck HealthCheck { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public ConfigureHealthCheckRequest(string loadBalancerName, HealthCheck healthCheck);
    public HealthCheck get_HealthCheck();
    public void set_HealthCheck(HealthCheck value);
    internal bool IsSetHealthCheck();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.ConfigureHealthCheckResponse : AmazonWebServiceResponse {
    private HealthCheck _healthCheck;
    public HealthCheck HealthCheck { get; public set; }
    public HealthCheck get_HealthCheck();
    public void set_HealthCheck(HealthCheck value);
    internal bool IsSetHealthCheck();
}
public class Amazon.ElasticLoadBalancing.Model.ConnectionDraining : object {
    private Nullable`1<bool> _enabled;
    private Nullable`1<int> _timeout;
    [AWSPropertyAttribute]
public Nullable`1<bool> Enabled { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
    public Nullable`1<int> get_Timeout();
    public void set_Timeout(Nullable`1<int> value);
    internal bool IsSetTimeout();
}
public class Amazon.ElasticLoadBalancing.Model.ConnectionSettings : object {
    private Nullable`1<int> _idleTimeout;
    [AWSPropertyAttribute]
public Nullable`1<int> IdleTimeout { get; public set; }
    public Nullable`1<int> get_IdleTimeout();
    public void set_IdleTimeout(Nullable`1<int> value);
    internal bool IsSetIdleTimeout();
}
public class Amazon.ElasticLoadBalancing.Model.CreateAppCookieStickinessPolicyRequest : AmazonElasticLoadBalancingRequest {
    private string _cookieName;
    private string _loadBalancerName;
    private string _policyName;
    [AWSPropertyAttribute]
public string CookieName { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public CreateAppCookieStickinessPolicyRequest(string loadBalancerName, string policyName, string cookieName);
    public string get_CookieName();
    public void set_CookieName(string value);
    internal bool IsSetCookieName();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.ElasticLoadBalancing.Model.CreateAppCookieStickinessPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.CreateLBCookieStickinessPolicyRequest : AmazonElasticLoadBalancingRequest {
    private Nullable`1<long> _cookieExpirationPeriod;
    private string _loadBalancerName;
    private string _policyName;
    public Nullable`1<long> CookieExpirationPeriod { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public CreateLBCookieStickinessPolicyRequest(string loadBalancerName, string policyName);
    public Nullable`1<long> get_CookieExpirationPeriod();
    public void set_CookieExpirationPeriod(Nullable`1<long> value);
    internal bool IsSetCookieExpirationPeriod();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.ElasticLoadBalancing.Model.CreateLBCookieStickinessPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.CreateLoadBalancerListenersRequest : AmazonElasticLoadBalancingRequest {
    private List`1<Listener> _listeners;
    private string _loadBalancerName;
    [AWSPropertyAttribute]
public List`1<Listener> Listeners { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public CreateLoadBalancerListenersRequest(string loadBalancerName, List`1<Listener> listeners);
    public List`1<Listener> get_Listeners();
    public void set_Listeners(List`1<Listener> value);
    internal bool IsSetListeners();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.CreateLoadBalancerListenersResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.CreateLoadBalancerPolicyRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    private List`1<PolicyAttribute> _policyAttributes;
    private string _policyName;
    private string _policyTypeName;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public List`1<PolicyAttribute> PolicyAttributes { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyTypeName { get; public set; }
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public List`1<PolicyAttribute> get_PolicyAttributes();
    public void set_PolicyAttributes(List`1<PolicyAttribute> value);
    internal bool IsSetPolicyAttributes();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_PolicyTypeName();
    public void set_PolicyTypeName(string value);
    internal bool IsSetPolicyTypeName();
}
public class Amazon.ElasticLoadBalancing.Model.CreateLoadBalancerPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.CreateLoadBalancerRequest : AmazonElasticLoadBalancingRequest {
    private List`1<string> _availabilityZones;
    private List`1<Listener> _listeners;
    private string _loadBalancerName;
    private string _scheme;
    private List`1<string> _securityGroups;
    private List`1<string> _subnets;
    private List`1<Tag> _tags;
    public List`1<string> AvailabilityZones { get; public set; }
    [AWSPropertyAttribute]
public List`1<Listener> Listeners { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public string Scheme { get; public set; }
    public List`1<string> SecurityGroups { get; public set; }
    public List`1<string> Subnets { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public CreateLoadBalancerRequest(string loadBalancerName);
    public CreateLoadBalancerRequest(string loadBalancerName, List`1<Listener> listeners, List`1<string> availabilityZones);
    public List`1<string> get_AvailabilityZones();
    public void set_AvailabilityZones(List`1<string> value);
    internal bool IsSetAvailabilityZones();
    public List`1<Listener> get_Listeners();
    public void set_Listeners(List`1<Listener> value);
    internal bool IsSetListeners();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public string get_Scheme();
    public void set_Scheme(string value);
    internal bool IsSetScheme();
    public List`1<string> get_SecurityGroups();
    public void set_SecurityGroups(List`1<string> value);
    internal bool IsSetSecurityGroups();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElasticLoadBalancing.Model.CreateLoadBalancerResponse : AmazonWebServiceResponse {
    private string _dnsName;
    public string DNSName { get; public set; }
    public string get_DNSName();
    public void set_DNSName(string value);
    internal bool IsSetDNSName();
}
public class Amazon.ElasticLoadBalancing.Model.CrossZoneLoadBalancing : object {
    private Nullable`1<bool> _enabled;
    [AWSPropertyAttribute]
public Nullable`1<bool> Enabled { get; public set; }
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
}
public class Amazon.ElasticLoadBalancing.Model.DeleteLoadBalancerListenersRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    private List`1<int> _loadBalancerPorts;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public List`1<int> LoadBalancerPorts { get; public set; }
    public DeleteLoadBalancerListenersRequest(string loadBalancerName, List`1<int> loadBalancerPorts);
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public List`1<int> get_LoadBalancerPorts();
    public void set_LoadBalancerPorts(List`1<int> value);
    internal bool IsSetLoadBalancerPorts();
}
public class Amazon.ElasticLoadBalancing.Model.DeleteLoadBalancerListenersResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.DeleteLoadBalancerPolicyRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    private string _policyName;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName);
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.ElasticLoadBalancing.Model.DeleteLoadBalancerPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.DeleteLoadBalancerRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public DeleteLoadBalancerRequest(string loadBalancerName);
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.DeleteLoadBalancerResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.DependencyThrottleException : AmazonElasticLoadBalancingException {
    public DependencyThrottleException(string message);
    public DependencyThrottleException(string message, Exception innerException);
    public DependencyThrottleException(Exception innerException);
    public DependencyThrottleException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DependencyThrottleException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.DeregisterInstancesFromLoadBalancerRequest : AmazonElasticLoadBalancingRequest {
    private List`1<Instance> _instances;
    private string _loadBalancerName;
    [AWSPropertyAttribute]
public List`1<Instance> Instances { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public DeregisterInstancesFromLoadBalancerRequest(string loadBalancerName, List`1<Instance> instances);
    public List`1<Instance> get_Instances();
    public void set_Instances(List`1<Instance> value);
    internal bool IsSetInstances();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.DeregisterInstancesFromLoadBalancerResponse : AmazonWebServiceResponse {
    private List`1<Instance> _instances;
    public List`1<Instance> Instances { get; public set; }
    public List`1<Instance> get_Instances();
    public void set_Instances(List`1<Instance> value);
    internal bool IsSetInstances();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeAccountLimitsRequest : AmazonElasticLoadBalancingRequest {
    private string _marker;
    private Nullable`1<int> _pageSize;
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PageSize { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_PageSize();
    public void set_PageSize(Nullable`1<int> value);
    internal bool IsSetPageSize();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeAccountLimitsResponse : AmazonWebServiceResponse {
    private List`1<Limit> _limits;
    private string _nextMarker;
    public List`1<Limit> Limits { get; public set; }
    public string NextMarker { get; public set; }
    public List`1<Limit> get_Limits();
    public void set_Limits(List`1<Limit> value);
    internal bool IsSetLimits();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeInstanceHealthRequest : AmazonElasticLoadBalancingRequest {
    private List`1<Instance> _instances;
    private string _loadBalancerName;
    public List`1<Instance> Instances { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public DescribeInstanceHealthRequest(string loadBalancerName);
    public List`1<Instance> get_Instances();
    public void set_Instances(List`1<Instance> value);
    internal bool IsSetInstances();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeInstanceHealthResponse : AmazonWebServiceResponse {
    private List`1<InstanceState> _instanceStates;
    public List`1<InstanceState> InstanceStates { get; public set; }
    public List`1<InstanceState> get_InstanceStates();
    public void set_InstanceStates(List`1<InstanceState> value);
    internal bool IsSetInstanceStates();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancerAttributesRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancerAttributesResponse : AmazonWebServiceResponse {
    private LoadBalancerAttributes _loadBalancerAttributes;
    public LoadBalancerAttributes LoadBalancerAttributes { get; public set; }
    public LoadBalancerAttributes get_LoadBalancerAttributes();
    public void set_LoadBalancerAttributes(LoadBalancerAttributes value);
    internal bool IsSetLoadBalancerAttributes();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancerPoliciesRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    private List`1<string> _policyNames;
    public string LoadBalancerName { get; public set; }
    public List`1<string> PolicyNames { get; public set; }
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public List`1<string> get_PolicyNames();
    public void set_PolicyNames(List`1<string> value);
    internal bool IsSetPolicyNames();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancerPoliciesResponse : AmazonWebServiceResponse {
    private List`1<PolicyDescription> _policyDescriptions;
    public List`1<PolicyDescription> PolicyDescriptions { get; public set; }
    public List`1<PolicyDescription> get_PolicyDescriptions();
    public void set_PolicyDescriptions(List`1<PolicyDescription> value);
    internal bool IsSetPolicyDescriptions();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancerPolicyTypesRequest : AmazonElasticLoadBalancingRequest {
    private List`1<string> _policyTypeNames;
    public List`1<string> PolicyTypeNames { get; public set; }
    public List`1<string> get_PolicyTypeNames();
    public void set_PolicyTypeNames(List`1<string> value);
    internal bool IsSetPolicyTypeNames();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancerPolicyTypesResponse : AmazonWebServiceResponse {
    private List`1<PolicyTypeDescription> _policyTypeDescriptions;
    public List`1<PolicyTypeDescription> PolicyTypeDescriptions { get; public set; }
    public List`1<PolicyTypeDescription> get_PolicyTypeDescriptions();
    public void set_PolicyTypeDescriptions(List`1<PolicyTypeDescription> value);
    internal bool IsSetPolicyTypeDescriptions();
}
internal class Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancersPaginator : object {
    private IAmazonElasticLoadBalancing _client;
    private DescribeLoadBalancersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeLoadBalancersResponse> Responses { get; }
    public IPaginatedEnumerable`1<LoadBalancerDescription> LoadBalancerDescriptions { get; }
    internal DescribeLoadBalancersPaginator(IAmazonElasticLoadBalancing client, DescribeLoadBalancersRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeLoadBalancersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<LoadBalancerDescription> get_LoadBalancerDescriptions();
    [AsyncIteratorStateMachineAttribute("Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancersPaginator/<Amazon-Runtime-IPaginator<Amazon-ElasticLoadBalancing-Model-DescribeLoadBalancersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeLoadBalancersResponse> Amazon.Runtime.IPaginator<Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancersRequest : AmazonElasticLoadBalancingRequest {
    private List`1<string> _loadBalancerNames;
    private string _marker;
    private Nullable`1<int> _pageSize;
    public List`1<string> LoadBalancerNames { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PageSize { get; public set; }
    public DescribeLoadBalancersRequest(List`1<string> loadBalancerNames);
    public List`1<string> get_LoadBalancerNames();
    public void set_LoadBalancerNames(List`1<string> value);
    internal bool IsSetLoadBalancerNames();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_PageSize();
    public void set_PageSize(Nullable`1<int> value);
    internal bool IsSetPageSize();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeLoadBalancersResponse : AmazonWebServiceResponse {
    private List`1<LoadBalancerDescription> _loadBalancerDescriptions;
    private string _nextMarker;
    public List`1<LoadBalancerDescription> LoadBalancerDescriptions { get; public set; }
    public string NextMarker { get; public set; }
    public List`1<LoadBalancerDescription> get_LoadBalancerDescriptions();
    public void set_LoadBalancerDescriptions(List`1<LoadBalancerDescription> value);
    internal bool IsSetLoadBalancerDescriptions();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeTagsRequest : AmazonElasticLoadBalancingRequest {
    private List`1<string> _loadBalancerNames;
    [AWSPropertyAttribute]
public List`1<string> LoadBalancerNames { get; public set; }
    public List`1<string> get_LoadBalancerNames();
    public void set_LoadBalancerNames(List`1<string> value);
    internal bool IsSetLoadBalancerNames();
}
public class Amazon.ElasticLoadBalancing.Model.DescribeTagsResponse : AmazonWebServiceResponse {
    private List`1<TagDescription> _tagDescriptions;
    public List`1<TagDescription> TagDescriptions { get; public set; }
    public List`1<TagDescription> get_TagDescriptions();
    public void set_TagDescriptions(List`1<TagDescription> value);
    internal bool IsSetTagDescriptions();
}
public class Amazon.ElasticLoadBalancing.Model.DetachLoadBalancerFromSubnetsRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    private List`1<string> _subnets;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Subnets { get; public set; }
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
}
public class Amazon.ElasticLoadBalancing.Model.DetachLoadBalancerFromSubnetsResponse : AmazonWebServiceResponse {
    private List`1<string> _subnets;
    public List`1<string> Subnets { get; public set; }
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
}
public class Amazon.ElasticLoadBalancing.Model.DisableAvailabilityZonesForLoadBalancerRequest : AmazonElasticLoadBalancingRequest {
    private List`1<string> _availabilityZones;
    private string _loadBalancerName;
    [AWSPropertyAttribute]
public List`1<string> AvailabilityZones { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public DisableAvailabilityZonesForLoadBalancerRequest(string loadBalancerName, List`1<string> availabilityZones);
    public List`1<string> get_AvailabilityZones();
    public void set_AvailabilityZones(List`1<string> value);
    internal bool IsSetAvailabilityZones();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.DisableAvailabilityZonesForLoadBalancerResponse : AmazonWebServiceResponse {
    private List`1<string> _availabilityZones;
    public List`1<string> AvailabilityZones { get; public set; }
    public List`1<string> get_AvailabilityZones();
    public void set_AvailabilityZones(List`1<string> value);
    internal bool IsSetAvailabilityZones();
}
public class Amazon.ElasticLoadBalancing.Model.DuplicateAccessPointNameException : AmazonElasticLoadBalancingException {
    public DuplicateAccessPointNameException(string message);
    public DuplicateAccessPointNameException(string message, Exception innerException);
    public DuplicateAccessPointNameException(Exception innerException);
    public DuplicateAccessPointNameException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DuplicateAccessPointNameException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.DuplicateListenerException : AmazonElasticLoadBalancingException {
    public DuplicateListenerException(string message);
    public DuplicateListenerException(string message, Exception innerException);
    public DuplicateListenerException(Exception innerException);
    public DuplicateListenerException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DuplicateListenerException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.DuplicatePolicyNameException : AmazonElasticLoadBalancingException {
    public DuplicatePolicyNameException(string message);
    public DuplicatePolicyNameException(string message, Exception innerException);
    public DuplicatePolicyNameException(Exception innerException);
    public DuplicatePolicyNameException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DuplicatePolicyNameException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.DuplicateTagKeysException : AmazonElasticLoadBalancingException {
    public DuplicateTagKeysException(string message);
    public DuplicateTagKeysException(string message, Exception innerException);
    public DuplicateTagKeysException(Exception innerException);
    public DuplicateTagKeysException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DuplicateTagKeysException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.ElasticLoadBalancingPaginatorFactory : object {
    private IAmazonElasticLoadBalancing client;
    internal ElasticLoadBalancingPaginatorFactory(IAmazonElasticLoadBalancing client);
    public sealed virtual IDescribeLoadBalancersPaginator DescribeLoadBalancers(DescribeLoadBalancersRequest request);
}
public class Amazon.ElasticLoadBalancing.Model.EnableAvailabilityZonesForLoadBalancerRequest : AmazonElasticLoadBalancingRequest {
    private List`1<string> _availabilityZones;
    private string _loadBalancerName;
    [AWSPropertyAttribute]
public List`1<string> AvailabilityZones { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public EnableAvailabilityZonesForLoadBalancerRequest(string loadBalancerName, List`1<string> availabilityZones);
    public List`1<string> get_AvailabilityZones();
    public void set_AvailabilityZones(List`1<string> value);
    internal bool IsSetAvailabilityZones();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.EnableAvailabilityZonesForLoadBalancerResponse : AmazonWebServiceResponse {
    private List`1<string> _availabilityZones;
    public List`1<string> AvailabilityZones { get; public set; }
    public List`1<string> get_AvailabilityZones();
    public void set_AvailabilityZones(List`1<string> value);
    internal bool IsSetAvailabilityZones();
}
public class Amazon.ElasticLoadBalancing.Model.HealthCheck : object {
    private Nullable`1<int> _healthyThreshold;
    private Nullable`1<int> _interval;
    private string _target;
    private Nullable`1<int> _timeout;
    private Nullable`1<int> _unhealthyThreshold;
    [AWSPropertyAttribute]
public Nullable`1<int> HealthyThreshold { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Interval { get; public set; }
    [AWSPropertyAttribute]
public string Target { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Timeout { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> UnhealthyThreshold { get; public set; }
    public HealthCheck(string target, Nullable`1<int> interval, Nullable`1<int> timeout, Nullable`1<int> unhealthyThreshold, Nullable`1<int> healthyThreshold);
    public Nullable`1<int> get_HealthyThreshold();
    public void set_HealthyThreshold(Nullable`1<int> value);
    internal bool IsSetHealthyThreshold();
    public Nullable`1<int> get_Interval();
    public void set_Interval(Nullable`1<int> value);
    internal bool IsSetInterval();
    public string get_Target();
    public void set_Target(string value);
    internal bool IsSetTarget();
    public Nullable`1<int> get_Timeout();
    public void set_Timeout(Nullable`1<int> value);
    internal bool IsSetTimeout();
    public Nullable`1<int> get_UnhealthyThreshold();
    public void set_UnhealthyThreshold(Nullable`1<int> value);
    internal bool IsSetUnhealthyThreshold();
}
public interface Amazon.ElasticLoadBalancing.Model.IDescribeLoadBalancersPaginator {
    public IPaginatedEnumerable`1<DescribeLoadBalancersResponse> Responses { get; }
    public IPaginatedEnumerable`1<LoadBalancerDescription> LoadBalancerDescriptions { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeLoadBalancersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<LoadBalancerDescription> get_LoadBalancerDescriptions();
}
public interface Amazon.ElasticLoadBalancing.Model.IElasticLoadBalancingPaginatorFactory {
    public abstract virtual IDescribeLoadBalancersPaginator DescribeLoadBalancers(DescribeLoadBalancersRequest request);
}
public class Amazon.ElasticLoadBalancing.Model.Instance : object {
    private string _instanceId;
    public string InstanceId { get; public set; }
    public Instance(string instanceId);
    public string get_InstanceId();
    public void set_InstanceId(string value);
    internal bool IsSetInstanceId();
}
public class Amazon.ElasticLoadBalancing.Model.InstanceState : object {
    private string _description;
    private string _instanceId;
    private string _reasonCode;
    private string _state;
    public string Description { get; public set; }
    public string InstanceId { get; public set; }
    public string ReasonCode { get; public set; }
    public string State { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_InstanceId();
    public void set_InstanceId(string value);
    internal bool IsSetInstanceId();
    public string get_ReasonCode();
    public void set_ReasonCode(string value);
    internal bool IsSetReasonCode();
    public string get_State();
    public void set_State(string value);
    internal bool IsSetState();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.AccessLogUnmarshaller : object {
    private static AccessLogUnmarshaller _instance;
    public static AccessLogUnmarshaller Instance { get; }
    private static AccessLogUnmarshaller();
    public sealed virtual AccessLog Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessLog Unmarshall(JsonUnmarshallerContext context);
    public static AccessLogUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.AccessPointNotFoundExceptionUnmarshaller : object {
    private static AccessPointNotFoundExceptionUnmarshaller _instance;
    public static AccessPointNotFoundExceptionUnmarshaller Instance { get; }
    private static AccessPointNotFoundExceptionUnmarshaller();
    public sealed virtual AccessPointNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessPointNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AccessPointNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.AdditionalAttributeUnmarshaller : object {
    private static AdditionalAttributeUnmarshaller _instance;
    public static AdditionalAttributeUnmarshaller Instance { get; }
    private static AdditionalAttributeUnmarshaller();
    public sealed virtual AdditionalAttribute Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AdditionalAttribute Unmarshall(JsonUnmarshallerContext context);
    public static AdditionalAttributeUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.AddTagsRequestMarshaller : object {
    private static AddTagsRequestMarshaller _instance;
    public static AddTagsRequestMarshaller Instance { get; }
    private static AddTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AddTagsRequest publicRequest);
    internal static AddTagsRequestMarshaller GetInstance();
    public static AddTagsRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.AddTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AddTagsResponseUnmarshaller _instance;
    public static AddTagsResponseUnmarshaller Instance { get; }
    private static AddTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AddTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AddTagsResponseUnmarshaller GetInstance();
    public static AddTagsResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.AppCookieStickinessPolicyUnmarshaller : object {
    private static AppCookieStickinessPolicyUnmarshaller _instance;
    public static AppCookieStickinessPolicyUnmarshaller Instance { get; }
    private static AppCookieStickinessPolicyUnmarshaller();
    public sealed virtual AppCookieStickinessPolicy Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AppCookieStickinessPolicy Unmarshall(JsonUnmarshallerContext context);
    public static AppCookieStickinessPolicyUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ApplySecurityGroupsToLoadBalancerRequestMarshaller : object {
    private static ApplySecurityGroupsToLoadBalancerRequestMarshaller _instance;
    public static ApplySecurityGroupsToLoadBalancerRequestMarshaller Instance { get; }
    private static ApplySecurityGroupsToLoadBalancerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ApplySecurityGroupsToLoadBalancerRequest publicRequest);
    internal static ApplySecurityGroupsToLoadBalancerRequestMarshaller GetInstance();
    public static ApplySecurityGroupsToLoadBalancerRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ApplySecurityGroupsToLoadBalancerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ApplySecurityGroupsToLoadBalancerResponseUnmarshaller _instance;
    public static ApplySecurityGroupsToLoadBalancerResponseUnmarshaller Instance { get; }
    private static ApplySecurityGroupsToLoadBalancerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ApplySecurityGroupsToLoadBalancerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ApplySecurityGroupsToLoadBalancerResponseUnmarshaller GetInstance();
    public static ApplySecurityGroupsToLoadBalancerResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.AttachLoadBalancerToSubnetsRequestMarshaller : object {
    private static AttachLoadBalancerToSubnetsRequestMarshaller _instance;
    public static AttachLoadBalancerToSubnetsRequestMarshaller Instance { get; }
    private static AttachLoadBalancerToSubnetsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AttachLoadBalancerToSubnetsRequest publicRequest);
    internal static AttachLoadBalancerToSubnetsRequestMarshaller GetInstance();
    public static AttachLoadBalancerToSubnetsRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.AttachLoadBalancerToSubnetsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AttachLoadBalancerToSubnetsResponseUnmarshaller _instance;
    public static AttachLoadBalancerToSubnetsResponseUnmarshaller Instance { get; }
    private static AttachLoadBalancerToSubnetsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AttachLoadBalancerToSubnetsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AttachLoadBalancerToSubnetsResponseUnmarshaller GetInstance();
    public static AttachLoadBalancerToSubnetsResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.BackendServerDescriptionUnmarshaller : object {
    private static BackendServerDescriptionUnmarshaller _instance;
    public static BackendServerDescriptionUnmarshaller Instance { get; }
    private static BackendServerDescriptionUnmarshaller();
    public sealed virtual BackendServerDescription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BackendServerDescription Unmarshall(JsonUnmarshallerContext context);
    public static BackendServerDescriptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CertificateNotFoundExceptionUnmarshaller : object {
    private static CertificateNotFoundExceptionUnmarshaller _instance;
    public static CertificateNotFoundExceptionUnmarshaller Instance { get; }
    private static CertificateNotFoundExceptionUnmarshaller();
    public sealed virtual CertificateNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CertificateNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CertificateNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ConfigureHealthCheckRequestMarshaller : object {
    private static ConfigureHealthCheckRequestMarshaller _instance;
    public static ConfigureHealthCheckRequestMarshaller Instance { get; }
    private static ConfigureHealthCheckRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ConfigureHealthCheckRequest publicRequest);
    internal static ConfigureHealthCheckRequestMarshaller GetInstance();
    public static ConfigureHealthCheckRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ConfigureHealthCheckResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ConfigureHealthCheckResponseUnmarshaller _instance;
    public static ConfigureHealthCheckResponseUnmarshaller Instance { get; }
    private static ConfigureHealthCheckResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ConfigureHealthCheckResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ConfigureHealthCheckResponseUnmarshaller GetInstance();
    public static ConfigureHealthCheckResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ConnectionDrainingUnmarshaller : object {
    private static ConnectionDrainingUnmarshaller _instance;
    public static ConnectionDrainingUnmarshaller Instance { get; }
    private static ConnectionDrainingUnmarshaller();
    public sealed virtual ConnectionDraining Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionDraining Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionDrainingUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ConnectionSettingsUnmarshaller : object {
    private static ConnectionSettingsUnmarshaller _instance;
    public static ConnectionSettingsUnmarshaller Instance { get; }
    private static ConnectionSettingsUnmarshaller();
    public sealed virtual ConnectionSettings Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionSettings Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionSettingsUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateAppCookieStickinessPolicyRequestMarshaller : object {
    private static CreateAppCookieStickinessPolicyRequestMarshaller _instance;
    public static CreateAppCookieStickinessPolicyRequestMarshaller Instance { get; }
    private static CreateAppCookieStickinessPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateAppCookieStickinessPolicyRequest publicRequest);
    internal static CreateAppCookieStickinessPolicyRequestMarshaller GetInstance();
    public static CreateAppCookieStickinessPolicyRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateAppCookieStickinessPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateAppCookieStickinessPolicyResponseUnmarshaller _instance;
    public static CreateAppCookieStickinessPolicyResponseUnmarshaller Instance { get; }
    private static CreateAppCookieStickinessPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateAppCookieStickinessPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateAppCookieStickinessPolicyResponseUnmarshaller GetInstance();
    public static CreateAppCookieStickinessPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateLBCookieStickinessPolicyRequestMarshaller : object {
    private static CreateLBCookieStickinessPolicyRequestMarshaller _instance;
    public static CreateLBCookieStickinessPolicyRequestMarshaller Instance { get; }
    private static CreateLBCookieStickinessPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateLBCookieStickinessPolicyRequest publicRequest);
    internal static CreateLBCookieStickinessPolicyRequestMarshaller GetInstance();
    public static CreateLBCookieStickinessPolicyRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateLBCookieStickinessPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateLBCookieStickinessPolicyResponseUnmarshaller _instance;
    public static CreateLBCookieStickinessPolicyResponseUnmarshaller Instance { get; }
    private static CreateLBCookieStickinessPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateLBCookieStickinessPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateLBCookieStickinessPolicyResponseUnmarshaller GetInstance();
    public static CreateLBCookieStickinessPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateLoadBalancerListenersRequestMarshaller : object {
    private static CreateLoadBalancerListenersRequestMarshaller _instance;
    public static CreateLoadBalancerListenersRequestMarshaller Instance { get; }
    private static CreateLoadBalancerListenersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateLoadBalancerListenersRequest publicRequest);
    internal static CreateLoadBalancerListenersRequestMarshaller GetInstance();
    public static CreateLoadBalancerListenersRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateLoadBalancerListenersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateLoadBalancerListenersResponseUnmarshaller _instance;
    public static CreateLoadBalancerListenersResponseUnmarshaller Instance { get; }
    private static CreateLoadBalancerListenersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateLoadBalancerListenersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateLoadBalancerListenersResponseUnmarshaller GetInstance();
    public static CreateLoadBalancerListenersResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateLoadBalancerPolicyRequestMarshaller : object {
    private static CreateLoadBalancerPolicyRequestMarshaller _instance;
    public static CreateLoadBalancerPolicyRequestMarshaller Instance { get; }
    private static CreateLoadBalancerPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateLoadBalancerPolicyRequest publicRequest);
    internal static CreateLoadBalancerPolicyRequestMarshaller GetInstance();
    public static CreateLoadBalancerPolicyRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateLoadBalancerPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateLoadBalancerPolicyResponseUnmarshaller _instance;
    public static CreateLoadBalancerPolicyResponseUnmarshaller Instance { get; }
    private static CreateLoadBalancerPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateLoadBalancerPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateLoadBalancerPolicyResponseUnmarshaller GetInstance();
    public static CreateLoadBalancerPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateLoadBalancerRequestMarshaller : object {
    private static CreateLoadBalancerRequestMarshaller _instance;
    public static CreateLoadBalancerRequestMarshaller Instance { get; }
    private static CreateLoadBalancerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateLoadBalancerRequest publicRequest);
    internal static CreateLoadBalancerRequestMarshaller GetInstance();
    public static CreateLoadBalancerRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CreateLoadBalancerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateLoadBalancerResponseUnmarshaller _instance;
    public static CreateLoadBalancerResponseUnmarshaller Instance { get; }
    private static CreateLoadBalancerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateLoadBalancerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateLoadBalancerResponseUnmarshaller GetInstance();
    public static CreateLoadBalancerResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.CrossZoneLoadBalancingUnmarshaller : object {
    private static CrossZoneLoadBalancingUnmarshaller _instance;
    public static CrossZoneLoadBalancingUnmarshaller Instance { get; }
    private static CrossZoneLoadBalancingUnmarshaller();
    public sealed virtual CrossZoneLoadBalancing Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CrossZoneLoadBalancing Unmarshall(JsonUnmarshallerContext context);
    public static CrossZoneLoadBalancingUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DeleteLoadBalancerListenersRequestMarshaller : object {
    private static DeleteLoadBalancerListenersRequestMarshaller _instance;
    public static DeleteLoadBalancerListenersRequestMarshaller Instance { get; }
    private static DeleteLoadBalancerListenersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteLoadBalancerListenersRequest publicRequest);
    internal static DeleteLoadBalancerListenersRequestMarshaller GetInstance();
    public static DeleteLoadBalancerListenersRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DeleteLoadBalancerListenersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteLoadBalancerListenersResponseUnmarshaller _instance;
    public static DeleteLoadBalancerListenersResponseUnmarshaller Instance { get; }
    private static DeleteLoadBalancerListenersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteLoadBalancerListenersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteLoadBalancerListenersResponseUnmarshaller GetInstance();
    public static DeleteLoadBalancerListenersResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DeleteLoadBalancerPolicyRequestMarshaller : object {
    private static DeleteLoadBalancerPolicyRequestMarshaller _instance;
    public static DeleteLoadBalancerPolicyRequestMarshaller Instance { get; }
    private static DeleteLoadBalancerPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteLoadBalancerPolicyRequest publicRequest);
    internal static DeleteLoadBalancerPolicyRequestMarshaller GetInstance();
    public static DeleteLoadBalancerPolicyRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DeleteLoadBalancerPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteLoadBalancerPolicyResponseUnmarshaller _instance;
    public static DeleteLoadBalancerPolicyResponseUnmarshaller Instance { get; }
    private static DeleteLoadBalancerPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteLoadBalancerPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteLoadBalancerPolicyResponseUnmarshaller GetInstance();
    public static DeleteLoadBalancerPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DeleteLoadBalancerRequestMarshaller : object {
    private static DeleteLoadBalancerRequestMarshaller _instance;
    public static DeleteLoadBalancerRequestMarshaller Instance { get; }
    private static DeleteLoadBalancerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteLoadBalancerRequest publicRequest);
    internal static DeleteLoadBalancerRequestMarshaller GetInstance();
    public static DeleteLoadBalancerRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DeleteLoadBalancerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteLoadBalancerResponseUnmarshaller _instance;
    public static DeleteLoadBalancerResponseUnmarshaller Instance { get; }
    private static DeleteLoadBalancerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteLoadBalancerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteLoadBalancerResponseUnmarshaller GetInstance();
    public static DeleteLoadBalancerResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DependencyThrottleExceptionUnmarshaller : object {
    private static DependencyThrottleExceptionUnmarshaller _instance;
    public static DependencyThrottleExceptionUnmarshaller Instance { get; }
    private static DependencyThrottleExceptionUnmarshaller();
    public sealed virtual DependencyThrottleException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DependencyThrottleException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DependencyThrottleExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DeregisterInstancesFromLoadBalancerRequestMarshaller : object {
    private static DeregisterInstancesFromLoadBalancerRequestMarshaller _instance;
    public static DeregisterInstancesFromLoadBalancerRequestMarshaller Instance { get; }
    private static DeregisterInstancesFromLoadBalancerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeregisterInstancesFromLoadBalancerRequest publicRequest);
    internal static DeregisterInstancesFromLoadBalancerRequestMarshaller GetInstance();
    public static DeregisterInstancesFromLoadBalancerRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DeregisterInstancesFromLoadBalancerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeregisterInstancesFromLoadBalancerResponseUnmarshaller _instance;
    public static DeregisterInstancesFromLoadBalancerResponseUnmarshaller Instance { get; }
    private static DeregisterInstancesFromLoadBalancerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeregisterInstancesFromLoadBalancerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeregisterInstancesFromLoadBalancerResponseUnmarshaller GetInstance();
    public static DeregisterInstancesFromLoadBalancerResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeAccountLimitsRequestMarshaller : object {
    private static DescribeAccountLimitsRequestMarshaller _instance;
    public static DescribeAccountLimitsRequestMarshaller Instance { get; }
    private static DescribeAccountLimitsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeAccountLimitsRequest publicRequest);
    internal static DescribeAccountLimitsRequestMarshaller GetInstance();
    public static DescribeAccountLimitsRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeAccountLimitsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeAccountLimitsResponseUnmarshaller _instance;
    public static DescribeAccountLimitsResponseUnmarshaller Instance { get; }
    private static DescribeAccountLimitsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeAccountLimitsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeAccountLimitsResponseUnmarshaller GetInstance();
    public static DescribeAccountLimitsResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeInstanceHealthRequestMarshaller : object {
    private static DescribeInstanceHealthRequestMarshaller _instance;
    public static DescribeInstanceHealthRequestMarshaller Instance { get; }
    private static DescribeInstanceHealthRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeInstanceHealthRequest publicRequest);
    internal static DescribeInstanceHealthRequestMarshaller GetInstance();
    public static DescribeInstanceHealthRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeInstanceHealthResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeInstanceHealthResponseUnmarshaller _instance;
    public static DescribeInstanceHealthResponseUnmarshaller Instance { get; }
    private static DescribeInstanceHealthResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeInstanceHealthResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeInstanceHealthResponseUnmarshaller GetInstance();
    public static DescribeInstanceHealthResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeLoadBalancerAttributesRequestMarshaller : object {
    private static DescribeLoadBalancerAttributesRequestMarshaller _instance;
    public static DescribeLoadBalancerAttributesRequestMarshaller Instance { get; }
    private static DescribeLoadBalancerAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeLoadBalancerAttributesRequest publicRequest);
    internal static DescribeLoadBalancerAttributesRequestMarshaller GetInstance();
    public static DescribeLoadBalancerAttributesRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeLoadBalancerAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeLoadBalancerAttributesResponseUnmarshaller _instance;
    public static DescribeLoadBalancerAttributesResponseUnmarshaller Instance { get; }
    private static DescribeLoadBalancerAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeLoadBalancerAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeLoadBalancerAttributesResponseUnmarshaller GetInstance();
    public static DescribeLoadBalancerAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeLoadBalancerPoliciesRequestMarshaller : object {
    private static DescribeLoadBalancerPoliciesRequestMarshaller _instance;
    public static DescribeLoadBalancerPoliciesRequestMarshaller Instance { get; }
    private static DescribeLoadBalancerPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeLoadBalancerPoliciesRequest publicRequest);
    internal static DescribeLoadBalancerPoliciesRequestMarshaller GetInstance();
    public static DescribeLoadBalancerPoliciesRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeLoadBalancerPoliciesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeLoadBalancerPoliciesResponseUnmarshaller _instance;
    public static DescribeLoadBalancerPoliciesResponseUnmarshaller Instance { get; }
    private static DescribeLoadBalancerPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeLoadBalancerPoliciesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeLoadBalancerPoliciesResponseUnmarshaller GetInstance();
    public static DescribeLoadBalancerPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeLoadBalancerPolicyTypesRequestMarshaller : object {
    private static DescribeLoadBalancerPolicyTypesRequestMarshaller _instance;
    public static DescribeLoadBalancerPolicyTypesRequestMarshaller Instance { get; }
    private static DescribeLoadBalancerPolicyTypesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeLoadBalancerPolicyTypesRequest publicRequest);
    internal static DescribeLoadBalancerPolicyTypesRequestMarshaller GetInstance();
    public static DescribeLoadBalancerPolicyTypesRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeLoadBalancerPolicyTypesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeLoadBalancerPolicyTypesResponseUnmarshaller _instance;
    public static DescribeLoadBalancerPolicyTypesResponseUnmarshaller Instance { get; }
    private static DescribeLoadBalancerPolicyTypesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeLoadBalancerPolicyTypesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeLoadBalancerPolicyTypesResponseUnmarshaller GetInstance();
    public static DescribeLoadBalancerPolicyTypesResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeLoadBalancersRequestMarshaller : object {
    private static DescribeLoadBalancersRequestMarshaller _instance;
    public static DescribeLoadBalancersRequestMarshaller Instance { get; }
    private static DescribeLoadBalancersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeLoadBalancersRequest publicRequest);
    internal static DescribeLoadBalancersRequestMarshaller GetInstance();
    public static DescribeLoadBalancersRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeLoadBalancersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeLoadBalancersResponseUnmarshaller _instance;
    public static DescribeLoadBalancersResponseUnmarshaller Instance { get; }
    private static DescribeLoadBalancersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeLoadBalancersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeLoadBalancersResponseUnmarshaller GetInstance();
    public static DescribeLoadBalancersResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeTagsRequestMarshaller : object {
    private static DescribeTagsRequestMarshaller _instance;
    public static DescribeTagsRequestMarshaller Instance { get; }
    private static DescribeTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeTagsRequest publicRequest);
    internal static DescribeTagsRequestMarshaller GetInstance();
    public static DescribeTagsRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DescribeTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeTagsResponseUnmarshaller _instance;
    public static DescribeTagsResponseUnmarshaller Instance { get; }
    private static DescribeTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeTagsResponseUnmarshaller GetInstance();
    public static DescribeTagsResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DetachLoadBalancerFromSubnetsRequestMarshaller : object {
    private static DetachLoadBalancerFromSubnetsRequestMarshaller _instance;
    public static DetachLoadBalancerFromSubnetsRequestMarshaller Instance { get; }
    private static DetachLoadBalancerFromSubnetsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DetachLoadBalancerFromSubnetsRequest publicRequest);
    internal static DetachLoadBalancerFromSubnetsRequestMarshaller GetInstance();
    public static DetachLoadBalancerFromSubnetsRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DetachLoadBalancerFromSubnetsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DetachLoadBalancerFromSubnetsResponseUnmarshaller _instance;
    public static DetachLoadBalancerFromSubnetsResponseUnmarshaller Instance { get; }
    private static DetachLoadBalancerFromSubnetsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DetachLoadBalancerFromSubnetsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DetachLoadBalancerFromSubnetsResponseUnmarshaller GetInstance();
    public static DetachLoadBalancerFromSubnetsResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DisableAvailabilityZonesForLoadBalancerRequestMarshaller : object {
    private static DisableAvailabilityZonesForLoadBalancerRequestMarshaller _instance;
    public static DisableAvailabilityZonesForLoadBalancerRequestMarshaller Instance { get; }
    private static DisableAvailabilityZonesForLoadBalancerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisableAvailabilityZonesForLoadBalancerRequest publicRequest);
    internal static DisableAvailabilityZonesForLoadBalancerRequestMarshaller GetInstance();
    public static DisableAvailabilityZonesForLoadBalancerRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DisableAvailabilityZonesForLoadBalancerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DisableAvailabilityZonesForLoadBalancerResponseUnmarshaller _instance;
    public static DisableAvailabilityZonesForLoadBalancerResponseUnmarshaller Instance { get; }
    private static DisableAvailabilityZonesForLoadBalancerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DisableAvailabilityZonesForLoadBalancerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisableAvailabilityZonesForLoadBalancerResponseUnmarshaller GetInstance();
    public static DisableAvailabilityZonesForLoadBalancerResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DuplicateAccessPointNameExceptionUnmarshaller : object {
    private static DuplicateAccessPointNameExceptionUnmarshaller _instance;
    public static DuplicateAccessPointNameExceptionUnmarshaller Instance { get; }
    private static DuplicateAccessPointNameExceptionUnmarshaller();
    public sealed virtual DuplicateAccessPointNameException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DuplicateAccessPointNameException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DuplicateAccessPointNameExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DuplicateListenerExceptionUnmarshaller : object {
    private static DuplicateListenerExceptionUnmarshaller _instance;
    public static DuplicateListenerExceptionUnmarshaller Instance { get; }
    private static DuplicateListenerExceptionUnmarshaller();
    public sealed virtual DuplicateListenerException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DuplicateListenerException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DuplicateListenerExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DuplicatePolicyNameExceptionUnmarshaller : object {
    private static DuplicatePolicyNameExceptionUnmarshaller _instance;
    public static DuplicatePolicyNameExceptionUnmarshaller Instance { get; }
    private static DuplicatePolicyNameExceptionUnmarshaller();
    public sealed virtual DuplicatePolicyNameException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DuplicatePolicyNameException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DuplicatePolicyNameExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.DuplicateTagKeysExceptionUnmarshaller : object {
    private static DuplicateTagKeysExceptionUnmarshaller _instance;
    public static DuplicateTagKeysExceptionUnmarshaller Instance { get; }
    private static DuplicateTagKeysExceptionUnmarshaller();
    public sealed virtual DuplicateTagKeysException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DuplicateTagKeysException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DuplicateTagKeysExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.EnableAvailabilityZonesForLoadBalancerRequestMarshaller : object {
    private static EnableAvailabilityZonesForLoadBalancerRequestMarshaller _instance;
    public static EnableAvailabilityZonesForLoadBalancerRequestMarshaller Instance { get; }
    private static EnableAvailabilityZonesForLoadBalancerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableAvailabilityZonesForLoadBalancerRequest publicRequest);
    internal static EnableAvailabilityZonesForLoadBalancerRequestMarshaller GetInstance();
    public static EnableAvailabilityZonesForLoadBalancerRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller _instance;
    public static EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller Instance { get; }
    private static EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, EnableAvailabilityZonesForLoadBalancerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller GetInstance();
    public static EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.HealthCheckUnmarshaller : object {
    private static HealthCheckUnmarshaller _instance;
    public static HealthCheckUnmarshaller Instance { get; }
    private static HealthCheckUnmarshaller();
    public sealed virtual HealthCheck Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HealthCheck Unmarshall(JsonUnmarshallerContext context);
    public static HealthCheckUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.InstanceStateUnmarshaller : object {
    private static InstanceStateUnmarshaller _instance;
    public static InstanceStateUnmarshaller Instance { get; }
    private static InstanceStateUnmarshaller();
    public sealed virtual InstanceState Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InstanceState Unmarshall(JsonUnmarshallerContext context);
    public static InstanceStateUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.InstanceUnmarshaller : object {
    private static InstanceUnmarshaller _instance;
    public static InstanceUnmarshaller Instance { get; }
    private static InstanceUnmarshaller();
    public sealed virtual Instance Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Instance Unmarshall(JsonUnmarshallerContext context);
    public static InstanceUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.InvalidConfigurationRequestExceptionUnmarshaller : object {
    private static InvalidConfigurationRequestExceptionUnmarshaller _instance;
    public static InvalidConfigurationRequestExceptionUnmarshaller Instance { get; }
    private static InvalidConfigurationRequestExceptionUnmarshaller();
    public sealed virtual InvalidConfigurationRequestException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidConfigurationRequestException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidConfigurationRequestExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.InvalidEndPointExceptionUnmarshaller : object {
    private static InvalidEndPointExceptionUnmarshaller _instance;
    public static InvalidEndPointExceptionUnmarshaller Instance { get; }
    private static InvalidEndPointExceptionUnmarshaller();
    public sealed virtual InvalidEndPointException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidEndPointException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidEndPointExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.InvalidSchemeExceptionUnmarshaller : object {
    private static InvalidSchemeExceptionUnmarshaller _instance;
    public static InvalidSchemeExceptionUnmarshaller Instance { get; }
    private static InvalidSchemeExceptionUnmarshaller();
    public sealed virtual InvalidSchemeException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSchemeException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSchemeExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.InvalidSecurityGroupExceptionUnmarshaller : object {
    private static InvalidSecurityGroupExceptionUnmarshaller _instance;
    public static InvalidSecurityGroupExceptionUnmarshaller Instance { get; }
    private static InvalidSecurityGroupExceptionUnmarshaller();
    public sealed virtual InvalidSecurityGroupException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSecurityGroupException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSecurityGroupExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.InvalidSubnetExceptionUnmarshaller : object {
    private static InvalidSubnetExceptionUnmarshaller _instance;
    public static InvalidSubnetExceptionUnmarshaller Instance { get; }
    private static InvalidSubnetExceptionUnmarshaller();
    public sealed virtual InvalidSubnetException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSubnetException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSubnetExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.LBCookieStickinessPolicyUnmarshaller : object {
    private static LBCookieStickinessPolicyUnmarshaller _instance;
    public static LBCookieStickinessPolicyUnmarshaller Instance { get; }
    private static LBCookieStickinessPolicyUnmarshaller();
    public sealed virtual LBCookieStickinessPolicy Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LBCookieStickinessPolicy Unmarshall(JsonUnmarshallerContext context);
    public static LBCookieStickinessPolicyUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.LimitUnmarshaller : object {
    private static LimitUnmarshaller _instance;
    public static LimitUnmarshaller Instance { get; }
    private static LimitUnmarshaller();
    public sealed virtual Limit Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Limit Unmarshall(JsonUnmarshallerContext context);
    public static LimitUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ListenerDescriptionUnmarshaller : object {
    private static ListenerDescriptionUnmarshaller _instance;
    public static ListenerDescriptionUnmarshaller Instance { get; }
    private static ListenerDescriptionUnmarshaller();
    public sealed virtual ListenerDescription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListenerDescription Unmarshall(JsonUnmarshallerContext context);
    public static ListenerDescriptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ListenerNotFoundExceptionUnmarshaller : object {
    private static ListenerNotFoundExceptionUnmarshaller _instance;
    public static ListenerNotFoundExceptionUnmarshaller Instance { get; }
    private static ListenerNotFoundExceptionUnmarshaller();
    public sealed virtual ListenerNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListenerNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ListenerNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ListenerUnmarshaller : object {
    private static ListenerUnmarshaller _instance;
    public static ListenerUnmarshaller Instance { get; }
    private static ListenerUnmarshaller();
    public sealed virtual Listener Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Listener Unmarshall(JsonUnmarshallerContext context);
    public static ListenerUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.LoadBalancerAttributeNotFoundExceptionUnmarshaller : object {
    private static LoadBalancerAttributeNotFoundExceptionUnmarshaller _instance;
    public static LoadBalancerAttributeNotFoundExceptionUnmarshaller Instance { get; }
    private static LoadBalancerAttributeNotFoundExceptionUnmarshaller();
    public sealed virtual LoadBalancerAttributeNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LoadBalancerAttributeNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static LoadBalancerAttributeNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.LoadBalancerAttributesUnmarshaller : object {
    private static LoadBalancerAttributesUnmarshaller _instance;
    public static LoadBalancerAttributesUnmarshaller Instance { get; }
    private static LoadBalancerAttributesUnmarshaller();
    public sealed virtual LoadBalancerAttributes Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LoadBalancerAttributes Unmarshall(JsonUnmarshallerContext context);
    public static LoadBalancerAttributesUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.LoadBalancerDescriptionUnmarshaller : object {
    private static LoadBalancerDescriptionUnmarshaller _instance;
    public static LoadBalancerDescriptionUnmarshaller Instance { get; }
    private static LoadBalancerDescriptionUnmarshaller();
    public sealed virtual LoadBalancerDescription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LoadBalancerDescription Unmarshall(JsonUnmarshallerContext context);
    public static LoadBalancerDescriptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ModifyLoadBalancerAttributesRequestMarshaller : object {
    private static ModifyLoadBalancerAttributesRequestMarshaller _instance;
    public static ModifyLoadBalancerAttributesRequestMarshaller Instance { get; }
    private static ModifyLoadBalancerAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyLoadBalancerAttributesRequest publicRequest);
    internal static ModifyLoadBalancerAttributesRequestMarshaller GetInstance();
    public static ModifyLoadBalancerAttributesRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.ModifyLoadBalancerAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyLoadBalancerAttributesResponseUnmarshaller _instance;
    public static ModifyLoadBalancerAttributesResponseUnmarshaller Instance { get; }
    private static ModifyLoadBalancerAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyLoadBalancerAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyLoadBalancerAttributesResponseUnmarshaller GetInstance();
    public static ModifyLoadBalancerAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.OperationNotPermittedExceptionUnmarshaller : object {
    private static OperationNotPermittedExceptionUnmarshaller _instance;
    public static OperationNotPermittedExceptionUnmarshaller Instance { get; }
    private static OperationNotPermittedExceptionUnmarshaller();
    public sealed virtual OperationNotPermittedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OperationNotPermittedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static OperationNotPermittedExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.PoliciesUnmarshaller : object {
    private static PoliciesUnmarshaller _instance;
    public static PoliciesUnmarshaller Instance { get; }
    private static PoliciesUnmarshaller();
    public sealed virtual Policies Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Policies Unmarshall(JsonUnmarshallerContext context);
    public static PoliciesUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.PolicyAttributeDescriptionUnmarshaller : object {
    private static PolicyAttributeDescriptionUnmarshaller _instance;
    public static PolicyAttributeDescriptionUnmarshaller Instance { get; }
    private static PolicyAttributeDescriptionUnmarshaller();
    public sealed virtual PolicyAttributeDescription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyAttributeDescription Unmarshall(JsonUnmarshallerContext context);
    public static PolicyAttributeDescriptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.PolicyAttributeTypeDescriptionUnmarshaller : object {
    private static PolicyAttributeTypeDescriptionUnmarshaller _instance;
    public static PolicyAttributeTypeDescriptionUnmarshaller Instance { get; }
    private static PolicyAttributeTypeDescriptionUnmarshaller();
    public sealed virtual PolicyAttributeTypeDescription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyAttributeTypeDescription Unmarshall(JsonUnmarshallerContext context);
    public static PolicyAttributeTypeDescriptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.PolicyDescriptionUnmarshaller : object {
    private static PolicyDescriptionUnmarshaller _instance;
    public static PolicyDescriptionUnmarshaller Instance { get; }
    private static PolicyDescriptionUnmarshaller();
    public sealed virtual PolicyDescription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyDescription Unmarshall(JsonUnmarshallerContext context);
    public static PolicyDescriptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.PolicyNotFoundExceptionUnmarshaller : object {
    private static PolicyNotFoundExceptionUnmarshaller _instance;
    public static PolicyNotFoundExceptionUnmarshaller Instance { get; }
    private static PolicyNotFoundExceptionUnmarshaller();
    public sealed virtual PolicyNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PolicyNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.PolicyTypeDescriptionUnmarshaller : object {
    private static PolicyTypeDescriptionUnmarshaller _instance;
    public static PolicyTypeDescriptionUnmarshaller Instance { get; }
    private static PolicyTypeDescriptionUnmarshaller();
    public sealed virtual PolicyTypeDescription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyTypeDescription Unmarshall(JsonUnmarshallerContext context);
    public static PolicyTypeDescriptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.PolicyTypeNotFoundExceptionUnmarshaller : object {
    private static PolicyTypeNotFoundExceptionUnmarshaller _instance;
    public static PolicyTypeNotFoundExceptionUnmarshaller Instance { get; }
    private static PolicyTypeNotFoundExceptionUnmarshaller();
    public sealed virtual PolicyTypeNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyTypeNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PolicyTypeNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.RegisterInstancesWithLoadBalancerRequestMarshaller : object {
    private static RegisterInstancesWithLoadBalancerRequestMarshaller _instance;
    public static RegisterInstancesWithLoadBalancerRequestMarshaller Instance { get; }
    private static RegisterInstancesWithLoadBalancerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RegisterInstancesWithLoadBalancerRequest publicRequest);
    internal static RegisterInstancesWithLoadBalancerRequestMarshaller GetInstance();
    public static RegisterInstancesWithLoadBalancerRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.RegisterInstancesWithLoadBalancerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RegisterInstancesWithLoadBalancerResponseUnmarshaller _instance;
    public static RegisterInstancesWithLoadBalancerResponseUnmarshaller Instance { get; }
    private static RegisterInstancesWithLoadBalancerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RegisterInstancesWithLoadBalancerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RegisterInstancesWithLoadBalancerResponseUnmarshaller GetInstance();
    public static RegisterInstancesWithLoadBalancerResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.RemoveTagsRequestMarshaller : object {
    private static RemoveTagsRequestMarshaller _instance;
    public static RemoveTagsRequestMarshaller Instance { get; }
    private static RemoveTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RemoveTagsRequest publicRequest);
    internal static RemoveTagsRequestMarshaller GetInstance();
    public static RemoveTagsRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.RemoveTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RemoveTagsResponseUnmarshaller _instance;
    public static RemoveTagsResponseUnmarshaller Instance { get; }
    private static RemoveTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RemoveTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RemoveTagsResponseUnmarshaller GetInstance();
    public static RemoveTagsResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.SetLoadBalancerListenerSSLCertificateRequestMarshaller : object {
    private static SetLoadBalancerListenerSSLCertificateRequestMarshaller _instance;
    public static SetLoadBalancerListenerSSLCertificateRequestMarshaller Instance { get; }
    private static SetLoadBalancerListenerSSLCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetLoadBalancerListenerSSLCertificateRequest publicRequest);
    internal static SetLoadBalancerListenerSSLCertificateRequestMarshaller GetInstance();
    public static SetLoadBalancerListenerSSLCertificateRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.SetLoadBalancerListenerSSLCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetLoadBalancerListenerSSLCertificateResponseUnmarshaller _instance;
    public static SetLoadBalancerListenerSSLCertificateResponseUnmarshaller Instance { get; }
    private static SetLoadBalancerListenerSSLCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetLoadBalancerListenerSSLCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetLoadBalancerListenerSSLCertificateResponseUnmarshaller GetInstance();
    public static SetLoadBalancerListenerSSLCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.SetLoadBalancerPoliciesForBackendServerRequestMarshaller : object {
    private static SetLoadBalancerPoliciesForBackendServerRequestMarshaller _instance;
    public static SetLoadBalancerPoliciesForBackendServerRequestMarshaller Instance { get; }
    private static SetLoadBalancerPoliciesForBackendServerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetLoadBalancerPoliciesForBackendServerRequest publicRequest);
    internal static SetLoadBalancerPoliciesForBackendServerRequestMarshaller GetInstance();
    public static SetLoadBalancerPoliciesForBackendServerRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.SetLoadBalancerPoliciesForBackendServerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetLoadBalancerPoliciesForBackendServerResponseUnmarshaller _instance;
    public static SetLoadBalancerPoliciesForBackendServerResponseUnmarshaller Instance { get; }
    private static SetLoadBalancerPoliciesForBackendServerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetLoadBalancerPoliciesForBackendServerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetLoadBalancerPoliciesForBackendServerResponseUnmarshaller GetInstance();
    public static SetLoadBalancerPoliciesForBackendServerResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.SetLoadBalancerPoliciesOfListenerRequestMarshaller : object {
    private static SetLoadBalancerPoliciesOfListenerRequestMarshaller _instance;
    public static SetLoadBalancerPoliciesOfListenerRequestMarshaller Instance { get; }
    private static SetLoadBalancerPoliciesOfListenerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetLoadBalancerPoliciesOfListenerRequest publicRequest);
    internal static SetLoadBalancerPoliciesOfListenerRequestMarshaller GetInstance();
    public static SetLoadBalancerPoliciesOfListenerRequestMarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.SetLoadBalancerPoliciesOfListenerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetLoadBalancerPoliciesOfListenerResponseUnmarshaller _instance;
    public static SetLoadBalancerPoliciesOfListenerResponseUnmarshaller Instance { get; }
    private static SetLoadBalancerPoliciesOfListenerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetLoadBalancerPoliciesOfListenerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetLoadBalancerPoliciesOfListenerResponseUnmarshaller GetInstance();
    public static SetLoadBalancerPoliciesOfListenerResponseUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.SourceSecurityGroupUnmarshaller : object {
    private static SourceSecurityGroupUnmarshaller _instance;
    public static SourceSecurityGroupUnmarshaller Instance { get; }
    private static SourceSecurityGroupUnmarshaller();
    public sealed virtual SourceSecurityGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SourceSecurityGroup Unmarshall(JsonUnmarshallerContext context);
    public static SourceSecurityGroupUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.SubnetNotFoundExceptionUnmarshaller : object {
    private static SubnetNotFoundExceptionUnmarshaller _instance;
    public static SubnetNotFoundExceptionUnmarshaller Instance { get; }
    private static SubnetNotFoundExceptionUnmarshaller();
    public sealed virtual SubnetNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubnetNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubnetNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.TagDescriptionUnmarshaller : object {
    private static TagDescriptionUnmarshaller _instance;
    public static TagDescriptionUnmarshaller Instance { get; }
    private static TagDescriptionUnmarshaller();
    public sealed virtual TagDescription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TagDescription Unmarshall(JsonUnmarshallerContext context);
    public static TagDescriptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    public sealed virtual Tag Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.TooManyAccessPointsExceptionUnmarshaller : object {
    private static TooManyAccessPointsExceptionUnmarshaller _instance;
    public static TooManyAccessPointsExceptionUnmarshaller Instance { get; }
    private static TooManyAccessPointsExceptionUnmarshaller();
    public sealed virtual TooManyAccessPointsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyAccessPointsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyAccessPointsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.TooManyPoliciesExceptionUnmarshaller : object {
    private static TooManyPoliciesExceptionUnmarshaller _instance;
    public static TooManyPoliciesExceptionUnmarshaller Instance { get; }
    private static TooManyPoliciesExceptionUnmarshaller();
    public sealed virtual TooManyPoliciesException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyPoliciesException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyPoliciesExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.TooManyTagsExceptionUnmarshaller : object {
    private static TooManyTagsExceptionUnmarshaller _instance;
    public static TooManyTagsExceptionUnmarshaller Instance { get; }
    private static TooManyTagsExceptionUnmarshaller();
    public sealed virtual TooManyTagsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyTagsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyTagsExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.Internal.MarshallTransformations.UnsupportedProtocolExceptionUnmarshaller : object {
    private static UnsupportedProtocolExceptionUnmarshaller _instance;
    public static UnsupportedProtocolExceptionUnmarshaller Instance { get; }
    private static UnsupportedProtocolExceptionUnmarshaller();
    public sealed virtual UnsupportedProtocolException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UnsupportedProtocolException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnsupportedProtocolExceptionUnmarshaller get_Instance();
}
public class Amazon.ElasticLoadBalancing.Model.InvalidConfigurationRequestException : AmazonElasticLoadBalancingException {
    public InvalidConfigurationRequestException(string message);
    public InvalidConfigurationRequestException(string message, Exception innerException);
    public InvalidConfigurationRequestException(Exception innerException);
    public InvalidConfigurationRequestException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidConfigurationRequestException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.InvalidEndPointException : AmazonElasticLoadBalancingException {
    public InvalidEndPointException(string message);
    public InvalidEndPointException(string message, Exception innerException);
    public InvalidEndPointException(Exception innerException);
    public InvalidEndPointException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidEndPointException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.InvalidSchemeException : AmazonElasticLoadBalancingException {
    public InvalidSchemeException(string message);
    public InvalidSchemeException(string message, Exception innerException);
    public InvalidSchemeException(Exception innerException);
    public InvalidSchemeException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSchemeException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.InvalidSecurityGroupException : AmazonElasticLoadBalancingException {
    public InvalidSecurityGroupException(string message);
    public InvalidSecurityGroupException(string message, Exception innerException);
    public InvalidSecurityGroupException(Exception innerException);
    public InvalidSecurityGroupException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSecurityGroupException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.InvalidSubnetException : AmazonElasticLoadBalancingException {
    public InvalidSubnetException(string message);
    public InvalidSubnetException(string message, Exception innerException);
    public InvalidSubnetException(Exception innerException);
    public InvalidSubnetException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSubnetException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.LBCookieStickinessPolicy : object {
    private Nullable`1<long> _cookieExpirationPeriod;
    private string _policyName;
    public Nullable`1<long> CookieExpirationPeriod { get; public set; }
    public string PolicyName { get; public set; }
    public LBCookieStickinessPolicy(string policyName, Nullable`1<long> cookieExpirationPeriod);
    public Nullable`1<long> get_CookieExpirationPeriod();
    public void set_CookieExpirationPeriod(Nullable`1<long> value);
    internal bool IsSetCookieExpirationPeriod();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.ElasticLoadBalancing.Model.Limit : object {
    private string _max;
    private string _name;
    public string Max { get; public set; }
    public string Name { get; public set; }
    public string get_Max();
    public void set_Max(string value);
    internal bool IsSetMax();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.ElasticLoadBalancing.Model.Listener : object {
    private Nullable`1<int> _instancePort;
    private string _instanceProtocol;
    private Nullable`1<int> _loadBalancerPort;
    private string _protocol;
    private string _sslCertificateId;
    [AWSPropertyAttribute]
public Nullable`1<int> InstancePort { get; public set; }
    public string InstanceProtocol { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> LoadBalancerPort { get; public set; }
    [AWSPropertyAttribute]
public string Protocol { get; public set; }
    public string SSLCertificateId { get; public set; }
    public Listener(string protocol, Nullable`1<int> loadBalancerPort, Nullable`1<int> instancePort);
    public Nullable`1<int> get_InstancePort();
    public void set_InstancePort(Nullable`1<int> value);
    internal bool IsSetInstancePort();
    public string get_InstanceProtocol();
    public void set_InstanceProtocol(string value);
    internal bool IsSetInstanceProtocol();
    public Nullable`1<int> get_LoadBalancerPort();
    public void set_LoadBalancerPort(Nullable`1<int> value);
    internal bool IsSetLoadBalancerPort();
    public string get_Protocol();
    public void set_Protocol(string value);
    internal bool IsSetProtocol();
    public string get_SSLCertificateId();
    public void set_SSLCertificateId(string value);
    internal bool IsSetSSLCertificateId();
}
public class Amazon.ElasticLoadBalancing.Model.ListenerDescription : object {
    private Listener _listener;
    private List`1<string> _policyNames;
    public Listener Listener { get; public set; }
    public List`1<string> PolicyNames { get; public set; }
    public Listener get_Listener();
    public void set_Listener(Listener value);
    internal bool IsSetListener();
    public List`1<string> get_PolicyNames();
    public void set_PolicyNames(List`1<string> value);
    internal bool IsSetPolicyNames();
}
public class Amazon.ElasticLoadBalancing.Model.ListenerNotFoundException : AmazonElasticLoadBalancingException {
    public ListenerNotFoundException(string message);
    public ListenerNotFoundException(string message, Exception innerException);
    public ListenerNotFoundException(Exception innerException);
    public ListenerNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ListenerNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.LoadBalancerAttributeNotFoundException : AmazonElasticLoadBalancingException {
    public LoadBalancerAttributeNotFoundException(string message);
    public LoadBalancerAttributeNotFoundException(string message, Exception innerException);
    public LoadBalancerAttributeNotFoundException(Exception innerException);
    public LoadBalancerAttributeNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LoadBalancerAttributeNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.LoadBalancerAttributes : object {
    private AccessLog _accessLog;
    private List`1<AdditionalAttribute> _additionalAttributes;
    private ConnectionDraining _connectionDraining;
    private ConnectionSettings _connectionSettings;
    private CrossZoneLoadBalancing _crossZoneLoadBalancing;
    public AccessLog AccessLog { get; public set; }
    [AWSPropertyAttribute]
public List`1<AdditionalAttribute> AdditionalAttributes { get; public set; }
    public ConnectionDraining ConnectionDraining { get; public set; }
    public ConnectionSettings ConnectionSettings { get; public set; }
    public CrossZoneLoadBalancing CrossZoneLoadBalancing { get; public set; }
    public AccessLog get_AccessLog();
    public void set_AccessLog(AccessLog value);
    internal bool IsSetAccessLog();
    public List`1<AdditionalAttribute> get_AdditionalAttributes();
    public void set_AdditionalAttributes(List`1<AdditionalAttribute> value);
    internal bool IsSetAdditionalAttributes();
    public ConnectionDraining get_ConnectionDraining();
    public void set_ConnectionDraining(ConnectionDraining value);
    internal bool IsSetConnectionDraining();
    public ConnectionSettings get_ConnectionSettings();
    public void set_ConnectionSettings(ConnectionSettings value);
    internal bool IsSetConnectionSettings();
    public CrossZoneLoadBalancing get_CrossZoneLoadBalancing();
    public void set_CrossZoneLoadBalancing(CrossZoneLoadBalancing value);
    internal bool IsSetCrossZoneLoadBalancing();
}
public class Amazon.ElasticLoadBalancing.Model.LoadBalancerDescription : object {
    private List`1<string> _availabilityZones;
    private List`1<BackendServerDescription> _backendServerDescriptions;
    private string _canonicalHostedZoneName;
    private string _canonicalHostedZoneNameID;
    private Nullable`1<DateTime> _createdTime;
    private string _dnsName;
    private HealthCheck _healthCheck;
    private List`1<Instance> _instances;
    private List`1<ListenerDescription> _listenerDescriptions;
    private string _loadBalancerName;
    private Policies _policies;
    private string _scheme;
    private List`1<string> _securityGroups;
    private SourceSecurityGroup _sourceSecurityGroup;
    private List`1<string> _subnets;
    private string _vpcId;
    public List`1<string> AvailabilityZones { get; public set; }
    public List`1<BackendServerDescription> BackendServerDescriptions { get; public set; }
    public string CanonicalHostedZoneName { get; public set; }
    public string CanonicalHostedZoneNameID { get; public set; }
    public Nullable`1<DateTime> CreatedTime { get; public set; }
    public string DNSName { get; public set; }
    public HealthCheck HealthCheck { get; public set; }
    public List`1<Instance> Instances { get; public set; }
    public List`1<ListenerDescription> ListenerDescriptions { get; public set; }
    public string LoadBalancerName { get; public set; }
    public Policies Policies { get; public set; }
    public string Scheme { get; public set; }
    public List`1<string> SecurityGroups { get; public set; }
    public SourceSecurityGroup SourceSecurityGroup { get; public set; }
    public List`1<string> Subnets { get; public set; }
    public string VPCId { get; public set; }
    public List`1<string> get_AvailabilityZones();
    public void set_AvailabilityZones(List`1<string> value);
    internal bool IsSetAvailabilityZones();
    public List`1<BackendServerDescription> get_BackendServerDescriptions();
    public void set_BackendServerDescriptions(List`1<BackendServerDescription> value);
    internal bool IsSetBackendServerDescriptions();
    public string get_CanonicalHostedZoneName();
    public void set_CanonicalHostedZoneName(string value);
    internal bool IsSetCanonicalHostedZoneName();
    public string get_CanonicalHostedZoneNameID();
    public void set_CanonicalHostedZoneNameID(string value);
    internal bool IsSetCanonicalHostedZoneNameID();
    public Nullable`1<DateTime> get_CreatedTime();
    public void set_CreatedTime(Nullable`1<DateTime> value);
    internal bool IsSetCreatedTime();
    public string get_DNSName();
    public void set_DNSName(string value);
    internal bool IsSetDNSName();
    public HealthCheck get_HealthCheck();
    public void set_HealthCheck(HealthCheck value);
    internal bool IsSetHealthCheck();
    public List`1<Instance> get_Instances();
    public void set_Instances(List`1<Instance> value);
    internal bool IsSetInstances();
    public List`1<ListenerDescription> get_ListenerDescriptions();
    public void set_ListenerDescriptions(List`1<ListenerDescription> value);
    internal bool IsSetListenerDescriptions();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public Policies get_Policies();
    public void set_Policies(Policies value);
    internal bool IsSetPolicies();
    public string get_Scheme();
    public void set_Scheme(string value);
    internal bool IsSetScheme();
    public List`1<string> get_SecurityGroups();
    public void set_SecurityGroups(List`1<string> value);
    internal bool IsSetSecurityGroups();
    public SourceSecurityGroup get_SourceSecurityGroup();
    public void set_SourceSecurityGroup(SourceSecurityGroup value);
    internal bool IsSetSourceSecurityGroup();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
    public string get_VPCId();
    public void set_VPCId(string value);
    internal bool IsSetVPCId();
}
public class Amazon.ElasticLoadBalancing.Model.ModifyLoadBalancerAttributesRequest : AmazonElasticLoadBalancingRequest {
    private LoadBalancerAttributes _loadBalancerAttributes;
    private string _loadBalancerName;
    [AWSPropertyAttribute]
public LoadBalancerAttributes LoadBalancerAttributes { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public LoadBalancerAttributes get_LoadBalancerAttributes();
    public void set_LoadBalancerAttributes(LoadBalancerAttributes value);
    internal bool IsSetLoadBalancerAttributes();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.ModifyLoadBalancerAttributesResponse : AmazonWebServiceResponse {
    private LoadBalancerAttributes _loadBalancerAttributes;
    private string _loadBalancerName;
    public LoadBalancerAttributes LoadBalancerAttributes { get; public set; }
    public string LoadBalancerName { get; public set; }
    public LoadBalancerAttributes get_LoadBalancerAttributes();
    public void set_LoadBalancerAttributes(LoadBalancerAttributes value);
    internal bool IsSetLoadBalancerAttributes();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.OperationNotPermittedException : AmazonElasticLoadBalancingException {
    public OperationNotPermittedException(string message);
    public OperationNotPermittedException(string message, Exception innerException);
    public OperationNotPermittedException(Exception innerException);
    public OperationNotPermittedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public OperationNotPermittedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.Policies : object {
    private List`1<AppCookieStickinessPolicy> _appCookieStickinessPolicies;
    private List`1<LBCookieStickinessPolicy> _lbCookieStickinessPolicies;
    private List`1<string> _otherPolicies;
    public List`1<AppCookieStickinessPolicy> AppCookieStickinessPolicies { get; public set; }
    public List`1<LBCookieStickinessPolicy> LBCookieStickinessPolicies { get; public set; }
    public List`1<string> OtherPolicies { get; public set; }
    public List`1<AppCookieStickinessPolicy> get_AppCookieStickinessPolicies();
    public void set_AppCookieStickinessPolicies(List`1<AppCookieStickinessPolicy> value);
    internal bool IsSetAppCookieStickinessPolicies();
    public List`1<LBCookieStickinessPolicy> get_LBCookieStickinessPolicies();
    public void set_LBCookieStickinessPolicies(List`1<LBCookieStickinessPolicy> value);
    internal bool IsSetLBCookieStickinessPolicies();
    public List`1<string> get_OtherPolicies();
    public void set_OtherPolicies(List`1<string> value);
    internal bool IsSetOtherPolicies();
}
public class Amazon.ElasticLoadBalancing.Model.PolicyAttribute : object {
    private string _attributeName;
    private string _attributeValue;
    public string AttributeName { get; public set; }
    public string AttributeValue { get; public set; }
    public PolicyAttribute(string attributeName, string attributeValue);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    internal bool IsSetAttributeName();
    public string get_AttributeValue();
    public void set_AttributeValue(string value);
    internal bool IsSetAttributeValue();
}
public class Amazon.ElasticLoadBalancing.Model.PolicyAttributeDescription : object {
    private string _attributeName;
    private string _attributeValue;
    public string AttributeName { get; public set; }
    public string AttributeValue { get; public set; }
    public string get_AttributeName();
    public void set_AttributeName(string value);
    internal bool IsSetAttributeName();
    public string get_AttributeValue();
    public void set_AttributeValue(string value);
    internal bool IsSetAttributeValue();
}
public class Amazon.ElasticLoadBalancing.Model.PolicyAttributeTypeDescription : object {
    private string _attributeName;
    private string _attributeType;
    private string _cardinality;
    private string _defaultValue;
    private string _description;
    public string AttributeName { get; public set; }
    public string AttributeType { get; public set; }
    public string Cardinality { get; public set; }
    public string DefaultValue { get; public set; }
    public string Description { get; public set; }
    public string get_AttributeName();
    public void set_AttributeName(string value);
    internal bool IsSetAttributeName();
    public string get_AttributeType();
    public void set_AttributeType(string value);
    internal bool IsSetAttributeType();
    public string get_Cardinality();
    public void set_Cardinality(string value);
    internal bool IsSetCardinality();
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    internal bool IsSetDefaultValue();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
}
public class Amazon.ElasticLoadBalancing.Model.PolicyDescription : object {
    private List`1<PolicyAttributeDescription> _policyAttributeDescriptions;
    private string _policyName;
    private string _policyTypeName;
    public List`1<PolicyAttributeDescription> PolicyAttributeDescriptions { get; public set; }
    public string PolicyName { get; public set; }
    public string PolicyTypeName { get; public set; }
    public List`1<PolicyAttributeDescription> get_PolicyAttributeDescriptions();
    public void set_PolicyAttributeDescriptions(List`1<PolicyAttributeDescription> value);
    internal bool IsSetPolicyAttributeDescriptions();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_PolicyTypeName();
    public void set_PolicyTypeName(string value);
    internal bool IsSetPolicyTypeName();
}
public class Amazon.ElasticLoadBalancing.Model.PolicyNotFoundException : AmazonElasticLoadBalancingException {
    public PolicyNotFoundException(string message);
    public PolicyNotFoundException(string message, Exception innerException);
    public PolicyNotFoundException(Exception innerException);
    public PolicyNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PolicyNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.PolicyTypeDescription : object {
    private string _description;
    private List`1<PolicyAttributeTypeDescription> _policyAttributeTypeDescriptions;
    private string _policyTypeName;
    public string Description { get; public set; }
    public List`1<PolicyAttributeTypeDescription> PolicyAttributeTypeDescriptions { get; public set; }
    public string PolicyTypeName { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<PolicyAttributeTypeDescription> get_PolicyAttributeTypeDescriptions();
    public void set_PolicyAttributeTypeDescriptions(List`1<PolicyAttributeTypeDescription> value);
    internal bool IsSetPolicyAttributeTypeDescriptions();
    public string get_PolicyTypeName();
    public void set_PolicyTypeName(string value);
    internal bool IsSetPolicyTypeName();
}
public class Amazon.ElasticLoadBalancing.Model.PolicyTypeNotFoundException : AmazonElasticLoadBalancingException {
    public PolicyTypeNotFoundException(string message);
    public PolicyTypeNotFoundException(string message, Exception innerException);
    public PolicyTypeNotFoundException(Exception innerException);
    public PolicyTypeNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PolicyTypeNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.RegisterInstancesWithLoadBalancerRequest : AmazonElasticLoadBalancingRequest {
    private List`1<Instance> _instances;
    private string _loadBalancerName;
    [AWSPropertyAttribute]
public List`1<Instance> Instances { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    public RegisterInstancesWithLoadBalancerRequest(string loadBalancerName, List`1<Instance> instances);
    public List`1<Instance> get_Instances();
    public void set_Instances(List`1<Instance> value);
    internal bool IsSetInstances();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
}
public class Amazon.ElasticLoadBalancing.Model.RegisterInstancesWithLoadBalancerResponse : AmazonWebServiceResponse {
    private List`1<Instance> _instances;
    public List`1<Instance> Instances { get; public set; }
    public List`1<Instance> get_Instances();
    public void set_Instances(List`1<Instance> value);
    internal bool IsSetInstances();
}
public class Amazon.ElasticLoadBalancing.Model.RemoveTagsRequest : AmazonElasticLoadBalancingRequest {
    private List`1<string> _loadBalancerNames;
    private List`1<TagKeyOnly> _tags;
    [AWSPropertyAttribute]
public List`1<string> LoadBalancerNames { get; public set; }
    [AWSPropertyAttribute]
public List`1<TagKeyOnly> Tags { get; public set; }
    public List`1<string> get_LoadBalancerNames();
    public void set_LoadBalancerNames(List`1<string> value);
    internal bool IsSetLoadBalancerNames();
    public List`1<TagKeyOnly> get_Tags();
    public void set_Tags(List`1<TagKeyOnly> value);
    internal bool IsSetTags();
}
public class Amazon.ElasticLoadBalancing.Model.RemoveTagsResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.SetLoadBalancerListenerSSLCertificateRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    private Nullable`1<int> _loadBalancerPort;
    private string _sslCertificateId;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> LoadBalancerPort { get; public set; }
    [AWSPropertyAttribute]
public string SSLCertificateId { get; public set; }
    public SetLoadBalancerListenerSSLCertificateRequest(string loadBalancerName, Nullable`1<int> loadBalancerPort, string sslCertificateId);
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public Nullable`1<int> get_LoadBalancerPort();
    public void set_LoadBalancerPort(Nullable`1<int> value);
    internal bool IsSetLoadBalancerPort();
    public string get_SSLCertificateId();
    public void set_SSLCertificateId(string value);
    internal bool IsSetSSLCertificateId();
}
public class Amazon.ElasticLoadBalancing.Model.SetLoadBalancerListenerSSLCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.SetLoadBalancerPoliciesForBackendServerRequest : AmazonElasticLoadBalancingRequest {
    private Nullable`1<int> _instancePort;
    private string _loadBalancerName;
    private List`1<string> _policyNames;
    [AWSPropertyAttribute]
public Nullable`1<int> InstancePort { get; public set; }
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> PolicyNames { get; public set; }
    public Nullable`1<int> get_InstancePort();
    public void set_InstancePort(Nullable`1<int> value);
    internal bool IsSetInstancePort();
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public List`1<string> get_PolicyNames();
    public void set_PolicyNames(List`1<string> value);
    internal bool IsSetPolicyNames();
}
public class Amazon.ElasticLoadBalancing.Model.SetLoadBalancerPoliciesForBackendServerResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.SetLoadBalancerPoliciesOfListenerRequest : AmazonElasticLoadBalancingRequest {
    private string _loadBalancerName;
    private Nullable`1<int> _loadBalancerPort;
    private List`1<string> _policyNames;
    [AWSPropertyAttribute]
public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> LoadBalancerPort { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> PolicyNames { get; public set; }
    public SetLoadBalancerPoliciesOfListenerRequest(string loadBalancerName, Nullable`1<int> loadBalancerPort, List`1<string> policyNames);
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public Nullable`1<int> get_LoadBalancerPort();
    public void set_LoadBalancerPort(Nullable`1<int> value);
    internal bool IsSetLoadBalancerPort();
    public List`1<string> get_PolicyNames();
    public void set_PolicyNames(List`1<string> value);
    internal bool IsSetPolicyNames();
}
public class Amazon.ElasticLoadBalancing.Model.SetLoadBalancerPoliciesOfListenerResponse : AmazonWebServiceResponse {
}
public class Amazon.ElasticLoadBalancing.Model.SourceSecurityGroup : object {
    private string _groupName;
    private string _ownerAlias;
    public string GroupName { get; public set; }
    public string OwnerAlias { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_OwnerAlias();
    public void set_OwnerAlias(string value);
    internal bool IsSetOwnerAlias();
}
public class Amazon.ElasticLoadBalancing.Model.SubnetNotFoundException : AmazonElasticLoadBalancingException {
    public SubnetNotFoundException(string message);
    public SubnetNotFoundException(string message, Exception innerException);
    public SubnetNotFoundException(Exception innerException);
    public SubnetNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubnetNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ElasticLoadBalancing.Model.TagDescription : object {
    private string _loadBalancerName;
    private List`1<Tag> _tags;
    public string LoadBalancerName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_LoadBalancerName();
    public void set_LoadBalancerName(string value);
    internal bool IsSetLoadBalancerName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ElasticLoadBalancing.Model.TagKeyOnly : object {
    private string _key;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
}
public class Amazon.ElasticLoadBalancing.Model.TooManyAccessPointsException : AmazonElasticLoadBalancingException {
    public TooManyAccessPointsException(string message);
    public TooManyAccessPointsException(string message, Exception innerException);
    public TooManyAccessPointsException(Exception innerException);
    public TooManyAccessPointsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyAccessPointsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.TooManyPoliciesException : AmazonElasticLoadBalancingException {
    public TooManyPoliciesException(string message);
    public TooManyPoliciesException(string message, Exception innerException);
    public TooManyPoliciesException(Exception innerException);
    public TooManyPoliciesException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyPoliciesException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.TooManyTagsException : AmazonElasticLoadBalancingException {
    public TooManyTagsException(string message);
    public TooManyTagsException(string message, Exception innerException);
    public TooManyTagsException(Exception innerException);
    public TooManyTagsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyTagsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ElasticLoadBalancing.Model.UnsupportedProtocolException : AmazonElasticLoadBalancingException {
    public UnsupportedProtocolException(string message);
    public UnsupportedProtocolException(string message, Exception innerException);
    public UnsupportedProtocolException(Exception innerException);
    public UnsupportedProtocolException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnsupportedProtocolException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
