public class Amazon.EventBridge.AmazonEventBridgeClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonEventBridgeClient(RegionEndpoint region);
    public AmazonEventBridgeClient(AmazonEventBridgeConfig config);
    public AmazonEventBridgeClient(AWSCredentials credentials);
    public AmazonEventBridgeClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonEventBridgeClient(AWSCredentials credentials, AmazonEventBridgeConfig clientConfig);
    public AmazonEventBridgeClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonEventBridgeClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonEventBridgeClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonEventBridgeConfig clientConfig);
    public AmazonEventBridgeClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonEventBridgeClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonEventBridgeClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonEventBridgeConfig clientConfig);
    private static AmazonEventBridgeClient();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    public virtual ActivateEventSourceResponse ActivateEventSource(ActivateEventSourceRequest request);
    public virtual Task`1<ActivateEventSourceResponse> ActivateEventSourceAsync(ActivateEventSourceRequest request, CancellationToken cancellationToken);
    public virtual CancelReplayResponse CancelReplay(CancelReplayRequest request);
    public virtual Task`1<CancelReplayResponse> CancelReplayAsync(CancelReplayRequest request, CancellationToken cancellationToken);
    public virtual CreateApiDestinationResponse CreateApiDestination(CreateApiDestinationRequest request);
    public virtual Task`1<CreateApiDestinationResponse> CreateApiDestinationAsync(CreateApiDestinationRequest request, CancellationToken cancellationToken);
    public virtual CreateArchiveResponse CreateArchive(CreateArchiveRequest request);
    public virtual Task`1<CreateArchiveResponse> CreateArchiveAsync(CreateArchiveRequest request, CancellationToken cancellationToken);
    public virtual CreateConnectionResponse CreateConnection(CreateConnectionRequest request);
    public virtual Task`1<CreateConnectionResponse> CreateConnectionAsync(CreateConnectionRequest request, CancellationToken cancellationToken);
    public virtual CreateEndpointResponse CreateEndpoint(CreateEndpointRequest request);
    public virtual Task`1<CreateEndpointResponse> CreateEndpointAsync(CreateEndpointRequest request, CancellationToken cancellationToken);
    public virtual CreateEventBusResponse CreateEventBus(CreateEventBusRequest request);
    public virtual Task`1<CreateEventBusResponse> CreateEventBusAsync(CreateEventBusRequest request, CancellationToken cancellationToken);
    public virtual CreatePartnerEventSourceResponse CreatePartnerEventSource(CreatePartnerEventSourceRequest request);
    public virtual Task`1<CreatePartnerEventSourceResponse> CreatePartnerEventSourceAsync(CreatePartnerEventSourceRequest request, CancellationToken cancellationToken);
    public virtual DeactivateEventSourceResponse DeactivateEventSource(DeactivateEventSourceRequest request);
    public virtual Task`1<DeactivateEventSourceResponse> DeactivateEventSourceAsync(DeactivateEventSourceRequest request, CancellationToken cancellationToken);
    public virtual DeauthorizeConnectionResponse DeauthorizeConnection(DeauthorizeConnectionRequest request);
    public virtual Task`1<DeauthorizeConnectionResponse> DeauthorizeConnectionAsync(DeauthorizeConnectionRequest request, CancellationToken cancellationToken);
    public virtual DeleteApiDestinationResponse DeleteApiDestination(DeleteApiDestinationRequest request);
    public virtual Task`1<DeleteApiDestinationResponse> DeleteApiDestinationAsync(DeleteApiDestinationRequest request, CancellationToken cancellationToken);
    public virtual DeleteArchiveResponse DeleteArchive(DeleteArchiveRequest request);
    public virtual Task`1<DeleteArchiveResponse> DeleteArchiveAsync(DeleteArchiveRequest request, CancellationToken cancellationToken);
    public virtual DeleteConnectionResponse DeleteConnection(DeleteConnectionRequest request);
    public virtual Task`1<DeleteConnectionResponse> DeleteConnectionAsync(DeleteConnectionRequest request, CancellationToken cancellationToken);
    public virtual DeleteEndpointResponse DeleteEndpoint(DeleteEndpointRequest request);
    public virtual Task`1<DeleteEndpointResponse> DeleteEndpointAsync(DeleteEndpointRequest request, CancellationToken cancellationToken);
    public virtual DeleteEventBusResponse DeleteEventBus(DeleteEventBusRequest request);
    public virtual Task`1<DeleteEventBusResponse> DeleteEventBusAsync(DeleteEventBusRequest request, CancellationToken cancellationToken);
    public virtual DeletePartnerEventSourceResponse DeletePartnerEventSource(DeletePartnerEventSourceRequest request);
    public virtual Task`1<DeletePartnerEventSourceResponse> DeletePartnerEventSourceAsync(DeletePartnerEventSourceRequest request, CancellationToken cancellationToken);
    public virtual DeleteRuleResponse DeleteRule(DeleteRuleRequest request);
    public virtual Task`1<DeleteRuleResponse> DeleteRuleAsync(DeleteRuleRequest request, CancellationToken cancellationToken);
    public virtual DescribeApiDestinationResponse DescribeApiDestination(DescribeApiDestinationRequest request);
    public virtual Task`1<DescribeApiDestinationResponse> DescribeApiDestinationAsync(DescribeApiDestinationRequest request, CancellationToken cancellationToken);
    public virtual DescribeArchiveResponse DescribeArchive(DescribeArchiveRequest request);
    public virtual Task`1<DescribeArchiveResponse> DescribeArchiveAsync(DescribeArchiveRequest request, CancellationToken cancellationToken);
    public virtual DescribeConnectionResponse DescribeConnection(DescribeConnectionRequest request);
    public virtual Task`1<DescribeConnectionResponse> DescribeConnectionAsync(DescribeConnectionRequest request, CancellationToken cancellationToken);
    public virtual DescribeEndpointResponse DescribeEndpoint(DescribeEndpointRequest request);
    public virtual Task`1<DescribeEndpointResponse> DescribeEndpointAsync(DescribeEndpointRequest request, CancellationToken cancellationToken);
    public virtual DescribeEventBusResponse DescribeEventBus(DescribeEventBusRequest request);
    public virtual Task`1<DescribeEventBusResponse> DescribeEventBusAsync(DescribeEventBusRequest request, CancellationToken cancellationToken);
    public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request);
    public virtual Task`1<DescribeEventSourceResponse> DescribeEventSourceAsync(DescribeEventSourceRequest request, CancellationToken cancellationToken);
    public virtual DescribePartnerEventSourceResponse DescribePartnerEventSource(DescribePartnerEventSourceRequest request);
    public virtual Task`1<DescribePartnerEventSourceResponse> DescribePartnerEventSourceAsync(DescribePartnerEventSourceRequest request, CancellationToken cancellationToken);
    public virtual DescribeReplayResponse DescribeReplay(DescribeReplayRequest request);
    public virtual Task`1<DescribeReplayResponse> DescribeReplayAsync(DescribeReplayRequest request, CancellationToken cancellationToken);
    public virtual DescribeRuleResponse DescribeRule(DescribeRuleRequest request);
    public virtual Task`1<DescribeRuleResponse> DescribeRuleAsync(DescribeRuleRequest request, CancellationToken cancellationToken);
    public virtual DisableRuleResponse DisableRule(DisableRuleRequest request);
    public virtual Task`1<DisableRuleResponse> DisableRuleAsync(DisableRuleRequest request, CancellationToken cancellationToken);
    public virtual EnableRuleResponse EnableRule(EnableRuleRequest request);
    public virtual Task`1<EnableRuleResponse> EnableRuleAsync(EnableRuleRequest request, CancellationToken cancellationToken);
    public virtual ListApiDestinationsResponse ListApiDestinations(ListApiDestinationsRequest request);
    public virtual Task`1<ListApiDestinationsResponse> ListApiDestinationsAsync(ListApiDestinationsRequest request, CancellationToken cancellationToken);
    public virtual ListArchivesResponse ListArchives(ListArchivesRequest request);
    public virtual Task`1<ListArchivesResponse> ListArchivesAsync(ListArchivesRequest request, CancellationToken cancellationToken);
    public virtual ListConnectionsResponse ListConnections(ListConnectionsRequest request);
    public virtual Task`1<ListConnectionsResponse> ListConnectionsAsync(ListConnectionsRequest request, CancellationToken cancellationToken);
    public virtual ListEndpointsResponse ListEndpoints(ListEndpointsRequest request);
    public virtual Task`1<ListEndpointsResponse> ListEndpointsAsync(ListEndpointsRequest request, CancellationToken cancellationToken);
    public virtual ListEventBusesResponse ListEventBuses(ListEventBusesRequest request);
    public virtual Task`1<ListEventBusesResponse> ListEventBusesAsync(ListEventBusesRequest request, CancellationToken cancellationToken);
    public virtual ListEventSourcesResponse ListEventSources(ListEventSourcesRequest request);
    public virtual Task`1<ListEventSourcesResponse> ListEventSourcesAsync(ListEventSourcesRequest request, CancellationToken cancellationToken);
    public virtual ListPartnerEventSourceAccountsResponse ListPartnerEventSourceAccounts(ListPartnerEventSourceAccountsRequest request);
    public virtual Task`1<ListPartnerEventSourceAccountsResponse> ListPartnerEventSourceAccountsAsync(ListPartnerEventSourceAccountsRequest request, CancellationToken cancellationToken);
    public virtual ListPartnerEventSourcesResponse ListPartnerEventSources(ListPartnerEventSourcesRequest request);
    public virtual Task`1<ListPartnerEventSourcesResponse> ListPartnerEventSourcesAsync(ListPartnerEventSourcesRequest request, CancellationToken cancellationToken);
    public virtual ListReplaysResponse ListReplays(ListReplaysRequest request);
    public virtual Task`1<ListReplaysResponse> ListReplaysAsync(ListReplaysRequest request, CancellationToken cancellationToken);
    public virtual ListRuleNamesByTargetResponse ListRuleNamesByTarget(ListRuleNamesByTargetRequest request);
    public virtual Task`1<ListRuleNamesByTargetResponse> ListRuleNamesByTargetAsync(ListRuleNamesByTargetRequest request, CancellationToken cancellationToken);
    public virtual ListRulesResponse ListRules(ListRulesRequest request);
    public virtual Task`1<ListRulesResponse> ListRulesAsync(ListRulesRequest request, CancellationToken cancellationToken);
    public virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public virtual ListTargetsByRuleResponse ListTargetsByRule(ListTargetsByRuleRequest request);
    public virtual Task`1<ListTargetsByRuleResponse> ListTargetsByRuleAsync(ListTargetsByRuleRequest request, CancellationToken cancellationToken);
    public virtual PutEventsResponse PutEvents(PutEventsRequest request);
    public virtual Task`1<PutEventsResponse> PutEventsAsync(PutEventsRequest request, CancellationToken cancellationToken);
    public virtual PutPartnerEventsResponse PutPartnerEvents(PutPartnerEventsRequest request);
    public virtual Task`1<PutPartnerEventsResponse> PutPartnerEventsAsync(PutPartnerEventsRequest request, CancellationToken cancellationToken);
    public virtual PutPermissionResponse PutPermission(PutPermissionRequest request);
    public virtual Task`1<PutPermissionResponse> PutPermissionAsync(PutPermissionRequest request, CancellationToken cancellationToken);
    public virtual PutRuleResponse PutRule(PutRuleRequest request);
    public virtual Task`1<PutRuleResponse> PutRuleAsync(PutRuleRequest request, CancellationToken cancellationToken);
    public virtual PutTargetsResponse PutTargets(PutTargetsRequest request);
    public virtual Task`1<PutTargetsResponse> PutTargetsAsync(PutTargetsRequest request, CancellationToken cancellationToken);
    public virtual RemovePermissionResponse RemovePermission(RemovePermissionRequest request);
    public virtual Task`1<RemovePermissionResponse> RemovePermissionAsync(RemovePermissionRequest request, CancellationToken cancellationToken);
    public virtual RemoveTargetsResponse RemoveTargets(RemoveTargetsRequest request);
    public virtual Task`1<RemoveTargetsResponse> RemoveTargetsAsync(RemoveTargetsRequest request, CancellationToken cancellationToken);
    public virtual StartReplayResponse StartReplay(StartReplayRequest request);
    public virtual Task`1<StartReplayResponse> StartReplayAsync(StartReplayRequest request, CancellationToken cancellationToken);
    public virtual TagResourceResponse TagResource(TagResourceRequest request);
    public virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    public virtual TestEventPatternResponse TestEventPattern(TestEventPatternRequest request);
    public virtual Task`1<TestEventPatternResponse> TestEventPatternAsync(TestEventPatternRequest request, CancellationToken cancellationToken);
    public virtual UntagResourceResponse UntagResource(UntagResourceRequest request);
    public virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    public virtual UpdateApiDestinationResponse UpdateApiDestination(UpdateApiDestinationRequest request);
    public virtual Task`1<UpdateApiDestinationResponse> UpdateApiDestinationAsync(UpdateApiDestinationRequest request, CancellationToken cancellationToken);
    public virtual UpdateArchiveResponse UpdateArchive(UpdateArchiveRequest request);
    public virtual Task`1<UpdateArchiveResponse> UpdateArchiveAsync(UpdateArchiveRequest request, CancellationToken cancellationToken);
    public virtual UpdateConnectionResponse UpdateConnection(UpdateConnectionRequest request);
    public virtual Task`1<UpdateConnectionResponse> UpdateConnectionAsync(UpdateConnectionRequest request, CancellationToken cancellationToken);
    public virtual UpdateEndpointResponse UpdateEndpoint(UpdateEndpointRequest request);
    public virtual Task`1<UpdateEndpointResponse> UpdateEndpointAsync(UpdateEndpointRequest request, CancellationToken cancellationToken);
    public virtual UpdateEventBusResponse UpdateEventBus(UpdateEventBusRequest request);
    public virtual Task`1<UpdateEventBusResponse> UpdateEventBusAsync(UpdateEventBusRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.EventBridge.AmazonEventBridgeConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonEventBridgeEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonEventBridgeConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.EventBridge.AmazonEventBridgeDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonEventBridgeDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.EventBridge.AmazonEventBridgeException : AmazonServiceException {
    public AmazonEventBridgeException(string message);
    public AmazonEventBridgeException(string message, Exception innerException);
    public AmazonEventBridgeException(Exception innerException);
    public AmazonEventBridgeException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonEventBridgeException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected AmazonEventBridgeException(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.AmazonEventBridgeRequest : AmazonWebServiceRequest {
}
public class Amazon.EventBridge.ApiDestinationHttpMethod : ConstantClass {
    public static ApiDestinationHttpMethod DELETE;
    public static ApiDestinationHttpMethod GET;
    public static ApiDestinationHttpMethod HEAD;
    public static ApiDestinationHttpMethod OPTIONS;
    public static ApiDestinationHttpMethod PATCH;
    public static ApiDestinationHttpMethod POST;
    public static ApiDestinationHttpMethod PUT;
    public ApiDestinationHttpMethod(string value);
    private static ApiDestinationHttpMethod();
    public static ApiDestinationHttpMethod FindValue(string value);
    public static ApiDestinationHttpMethod op_Implicit(string value);
}
public class Amazon.EventBridge.ApiDestinationState : ConstantClass {
    public static ApiDestinationState ACTIVE;
    public static ApiDestinationState INACTIVE;
    public ApiDestinationState(string value);
    private static ApiDestinationState();
    public static ApiDestinationState FindValue(string value);
    public static ApiDestinationState op_Implicit(string value);
}
public class Amazon.EventBridge.ArchiveState : ConstantClass {
    public static ArchiveState CREATE_FAILED;
    public static ArchiveState CREATING;
    public static ArchiveState DISABLED;
    public static ArchiveState ENABLED;
    public static ArchiveState UPDATE_FAILED;
    public static ArchiveState UPDATING;
    public ArchiveState(string value);
    private static ArchiveState();
    public static ArchiveState FindValue(string value);
    public static ArchiveState op_Implicit(string value);
}
public class Amazon.EventBridge.AssignPublicIp : ConstantClass {
    public static AssignPublicIp DISABLED;
    public static AssignPublicIp ENABLED;
    public AssignPublicIp(string value);
    private static AssignPublicIp();
    public static AssignPublicIp FindValue(string value);
    public static AssignPublicIp op_Implicit(string value);
}
public class Amazon.EventBridge.ConnectionAuthorizationType : ConstantClass {
    public static ConnectionAuthorizationType API_KEY;
    public static ConnectionAuthorizationType BASIC;
    public static ConnectionAuthorizationType OAUTH_CLIENT_CREDENTIALS;
    public ConnectionAuthorizationType(string value);
    private static ConnectionAuthorizationType();
    public static ConnectionAuthorizationType FindValue(string value);
    public static ConnectionAuthorizationType op_Implicit(string value);
}
public class Amazon.EventBridge.ConnectionOAuthHttpMethod : ConstantClass {
    public static ConnectionOAuthHttpMethod GET;
    public static ConnectionOAuthHttpMethod POST;
    public static ConnectionOAuthHttpMethod PUT;
    public ConnectionOAuthHttpMethod(string value);
    private static ConnectionOAuthHttpMethod();
    public static ConnectionOAuthHttpMethod FindValue(string value);
    public static ConnectionOAuthHttpMethod op_Implicit(string value);
}
public class Amazon.EventBridge.ConnectionState : ConstantClass {
    public static ConnectionState AUTHORIZED;
    public static ConnectionState AUTHORIZING;
    public static ConnectionState CREATING;
    public static ConnectionState DEAUTHORIZED;
    public static ConnectionState DEAUTHORIZING;
    public static ConnectionState DELETING;
    public static ConnectionState UPDATING;
    public ConnectionState(string value);
    private static ConnectionState();
    public static ConnectionState FindValue(string value);
    public static ConnectionState op_Implicit(string value);
}
public class Amazon.EventBridge.Endpoints.EventBridgeEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string EndpointId { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
    public string get_EndpointId();
    public void set_EndpointId(string value);
}
public class Amazon.EventBridge.EndpointState : ConstantClass {
    public static EndpointState ACTIVE;
    public static EndpointState CREATE_FAILED;
    public static EndpointState CREATING;
    public static EndpointState DELETE_FAILED;
    public static EndpointState DELETING;
    public static EndpointState UPDATE_FAILED;
    public static EndpointState UPDATING;
    public EndpointState(string value);
    private static EndpointState();
    public static EndpointState FindValue(string value);
    public static EndpointState op_Implicit(string value);
}
public class Amazon.EventBridge.EventSourceState : ConstantClass {
    public static EventSourceState ACTIVE;
    public static EventSourceState DELETED;
    public static EventSourceState PENDING;
    public EventSourceState(string value);
    private static EventSourceState();
    public static EventSourceState FindValue(string value);
    public static EventSourceState op_Implicit(string value);
}
public interface Amazon.EventBridge.IAmazonEventBridge {
    public abstract virtual ActivateEventSourceResponse ActivateEventSource(ActivateEventSourceRequest request);
    public abstract virtual Task`1<ActivateEventSourceResponse> ActivateEventSourceAsync(ActivateEventSourceRequest request, CancellationToken cancellationToken);
    public abstract virtual CancelReplayResponse CancelReplay(CancelReplayRequest request);
    public abstract virtual Task`1<CancelReplayResponse> CancelReplayAsync(CancelReplayRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateApiDestinationResponse CreateApiDestination(CreateApiDestinationRequest request);
    public abstract virtual Task`1<CreateApiDestinationResponse> CreateApiDestinationAsync(CreateApiDestinationRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateArchiveResponse CreateArchive(CreateArchiveRequest request);
    public abstract virtual Task`1<CreateArchiveResponse> CreateArchiveAsync(CreateArchiveRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateConnectionResponse CreateConnection(CreateConnectionRequest request);
    public abstract virtual Task`1<CreateConnectionResponse> CreateConnectionAsync(CreateConnectionRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateEndpointResponse CreateEndpoint(CreateEndpointRequest request);
    public abstract virtual Task`1<CreateEndpointResponse> CreateEndpointAsync(CreateEndpointRequest request, CancellationToken cancellationToken);
    public abstract virtual CreateEventBusResponse CreateEventBus(CreateEventBusRequest request);
    public abstract virtual Task`1<CreateEventBusResponse> CreateEventBusAsync(CreateEventBusRequest request, CancellationToken cancellationToken);
    public abstract virtual CreatePartnerEventSourceResponse CreatePartnerEventSource(CreatePartnerEventSourceRequest request);
    public abstract virtual Task`1<CreatePartnerEventSourceResponse> CreatePartnerEventSourceAsync(CreatePartnerEventSourceRequest request, CancellationToken cancellationToken);
    public abstract virtual DeactivateEventSourceResponse DeactivateEventSource(DeactivateEventSourceRequest request);
    public abstract virtual Task`1<DeactivateEventSourceResponse> DeactivateEventSourceAsync(DeactivateEventSourceRequest request, CancellationToken cancellationToken);
    public abstract virtual DeauthorizeConnectionResponse DeauthorizeConnection(DeauthorizeConnectionRequest request);
    public abstract virtual Task`1<DeauthorizeConnectionResponse> DeauthorizeConnectionAsync(DeauthorizeConnectionRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteApiDestinationResponse DeleteApiDestination(DeleteApiDestinationRequest request);
    public abstract virtual Task`1<DeleteApiDestinationResponse> DeleteApiDestinationAsync(DeleteApiDestinationRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteArchiveResponse DeleteArchive(DeleteArchiveRequest request);
    public abstract virtual Task`1<DeleteArchiveResponse> DeleteArchiveAsync(DeleteArchiveRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteConnectionResponse DeleteConnection(DeleteConnectionRequest request);
    public abstract virtual Task`1<DeleteConnectionResponse> DeleteConnectionAsync(DeleteConnectionRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteEndpointResponse DeleteEndpoint(DeleteEndpointRequest request);
    public abstract virtual Task`1<DeleteEndpointResponse> DeleteEndpointAsync(DeleteEndpointRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteEventBusResponse DeleteEventBus(DeleteEventBusRequest request);
    public abstract virtual Task`1<DeleteEventBusResponse> DeleteEventBusAsync(DeleteEventBusRequest request, CancellationToken cancellationToken);
    public abstract virtual DeletePartnerEventSourceResponse DeletePartnerEventSource(DeletePartnerEventSourceRequest request);
    public abstract virtual Task`1<DeletePartnerEventSourceResponse> DeletePartnerEventSourceAsync(DeletePartnerEventSourceRequest request, CancellationToken cancellationToken);
    public abstract virtual DeleteRuleResponse DeleteRule(DeleteRuleRequest request);
    public abstract virtual Task`1<DeleteRuleResponse> DeleteRuleAsync(DeleteRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeApiDestinationResponse DescribeApiDestination(DescribeApiDestinationRequest request);
    public abstract virtual Task`1<DescribeApiDestinationResponse> DescribeApiDestinationAsync(DescribeApiDestinationRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeArchiveResponse DescribeArchive(DescribeArchiveRequest request);
    public abstract virtual Task`1<DescribeArchiveResponse> DescribeArchiveAsync(DescribeArchiveRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeConnectionResponse DescribeConnection(DescribeConnectionRequest request);
    public abstract virtual Task`1<DescribeConnectionResponse> DescribeConnectionAsync(DescribeConnectionRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeEndpointResponse DescribeEndpoint(DescribeEndpointRequest request);
    public abstract virtual Task`1<DescribeEndpointResponse> DescribeEndpointAsync(DescribeEndpointRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeEventBusResponse DescribeEventBus(DescribeEventBusRequest request);
    public abstract virtual Task`1<DescribeEventBusResponse> DescribeEventBusAsync(DescribeEventBusRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request);
    public abstract virtual Task`1<DescribeEventSourceResponse> DescribeEventSourceAsync(DescribeEventSourceRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribePartnerEventSourceResponse DescribePartnerEventSource(DescribePartnerEventSourceRequest request);
    public abstract virtual Task`1<DescribePartnerEventSourceResponse> DescribePartnerEventSourceAsync(DescribePartnerEventSourceRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeReplayResponse DescribeReplay(DescribeReplayRequest request);
    public abstract virtual Task`1<DescribeReplayResponse> DescribeReplayAsync(DescribeReplayRequest request, CancellationToken cancellationToken);
    public abstract virtual DescribeRuleResponse DescribeRule(DescribeRuleRequest request);
    public abstract virtual Task`1<DescribeRuleResponse> DescribeRuleAsync(DescribeRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual DisableRuleResponse DisableRule(DisableRuleRequest request);
    public abstract virtual Task`1<DisableRuleResponse> DisableRuleAsync(DisableRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual EnableRuleResponse EnableRule(EnableRuleRequest request);
    public abstract virtual Task`1<EnableRuleResponse> EnableRuleAsync(EnableRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual ListApiDestinationsResponse ListApiDestinations(ListApiDestinationsRequest request);
    public abstract virtual Task`1<ListApiDestinationsResponse> ListApiDestinationsAsync(ListApiDestinationsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListArchivesResponse ListArchives(ListArchivesRequest request);
    public abstract virtual Task`1<ListArchivesResponse> ListArchivesAsync(ListArchivesRequest request, CancellationToken cancellationToken);
    public abstract virtual ListConnectionsResponse ListConnections(ListConnectionsRequest request);
    public abstract virtual Task`1<ListConnectionsResponse> ListConnectionsAsync(ListConnectionsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListEndpointsResponse ListEndpoints(ListEndpointsRequest request);
    public abstract virtual Task`1<ListEndpointsResponse> ListEndpointsAsync(ListEndpointsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListEventBusesResponse ListEventBuses(ListEventBusesRequest request);
    public abstract virtual Task`1<ListEventBusesResponse> ListEventBusesAsync(ListEventBusesRequest request, CancellationToken cancellationToken);
    public abstract virtual ListEventSourcesResponse ListEventSources(ListEventSourcesRequest request);
    public abstract virtual Task`1<ListEventSourcesResponse> ListEventSourcesAsync(ListEventSourcesRequest request, CancellationToken cancellationToken);
    public abstract virtual ListPartnerEventSourceAccountsResponse ListPartnerEventSourceAccounts(ListPartnerEventSourceAccountsRequest request);
    public abstract virtual Task`1<ListPartnerEventSourceAccountsResponse> ListPartnerEventSourceAccountsAsync(ListPartnerEventSourceAccountsRequest request, CancellationToken cancellationToken);
    public abstract virtual ListPartnerEventSourcesResponse ListPartnerEventSources(ListPartnerEventSourcesRequest request);
    public abstract virtual Task`1<ListPartnerEventSourcesResponse> ListPartnerEventSourcesAsync(ListPartnerEventSourcesRequest request, CancellationToken cancellationToken);
    public abstract virtual ListReplaysResponse ListReplays(ListReplaysRequest request);
    public abstract virtual Task`1<ListReplaysResponse> ListReplaysAsync(ListReplaysRequest request, CancellationToken cancellationToken);
    public abstract virtual ListRuleNamesByTargetResponse ListRuleNamesByTarget(ListRuleNamesByTargetRequest request);
    public abstract virtual Task`1<ListRuleNamesByTargetResponse> ListRuleNamesByTargetAsync(ListRuleNamesByTargetRequest request, CancellationToken cancellationToken);
    public abstract virtual ListRulesResponse ListRules(ListRulesRequest request);
    public abstract virtual Task`1<ListRulesResponse> ListRulesAsync(ListRulesRequest request, CancellationToken cancellationToken);
    public abstract virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public abstract virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual ListTargetsByRuleResponse ListTargetsByRule(ListTargetsByRuleRequest request);
    public abstract virtual Task`1<ListTargetsByRuleResponse> ListTargetsByRuleAsync(ListTargetsByRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual PutEventsResponse PutEvents(PutEventsRequest request);
    public abstract virtual Task`1<PutEventsResponse> PutEventsAsync(PutEventsRequest request, CancellationToken cancellationToken);
    public abstract virtual PutPartnerEventsResponse PutPartnerEvents(PutPartnerEventsRequest request);
    public abstract virtual Task`1<PutPartnerEventsResponse> PutPartnerEventsAsync(PutPartnerEventsRequest request, CancellationToken cancellationToken);
    public abstract virtual PutPermissionResponse PutPermission(PutPermissionRequest request);
    public abstract virtual Task`1<PutPermissionResponse> PutPermissionAsync(PutPermissionRequest request, CancellationToken cancellationToken);
    public abstract virtual PutRuleResponse PutRule(PutRuleRequest request);
    public abstract virtual Task`1<PutRuleResponse> PutRuleAsync(PutRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual PutTargetsResponse PutTargets(PutTargetsRequest request);
    public abstract virtual Task`1<PutTargetsResponse> PutTargetsAsync(PutTargetsRequest request, CancellationToken cancellationToken);
    public abstract virtual RemovePermissionResponse RemovePermission(RemovePermissionRequest request);
    public abstract virtual Task`1<RemovePermissionResponse> RemovePermissionAsync(RemovePermissionRequest request, CancellationToken cancellationToken);
    public abstract virtual RemoveTargetsResponse RemoveTargets(RemoveTargetsRequest request);
    public abstract virtual Task`1<RemoveTargetsResponse> RemoveTargetsAsync(RemoveTargetsRequest request, CancellationToken cancellationToken);
    public abstract virtual StartReplayResponse StartReplay(StartReplayRequest request);
    public abstract virtual Task`1<StartReplayResponse> StartReplayAsync(StartReplayRequest request, CancellationToken cancellationToken);
    public abstract virtual TagResourceResponse TagResource(TagResourceRequest request);
    public abstract virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual TestEventPatternResponse TestEventPattern(TestEventPatternRequest request);
    public abstract virtual Task`1<TestEventPatternResponse> TestEventPatternAsync(TestEventPatternRequest request, CancellationToken cancellationToken);
    public abstract virtual UntagResourceResponse UntagResource(UntagResourceRequest request);
    public abstract virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateApiDestinationResponse UpdateApiDestination(UpdateApiDestinationRequest request);
    public abstract virtual Task`1<UpdateApiDestinationResponse> UpdateApiDestinationAsync(UpdateApiDestinationRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateArchiveResponse UpdateArchive(UpdateArchiveRequest request);
    public abstract virtual Task`1<UpdateArchiveResponse> UpdateArchiveAsync(UpdateArchiveRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateConnectionResponse UpdateConnection(UpdateConnectionRequest request);
    public abstract virtual Task`1<UpdateConnectionResponse> UpdateConnectionAsync(UpdateConnectionRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateEndpointResponse UpdateEndpoint(UpdateEndpointRequest request);
    public abstract virtual Task`1<UpdateEndpointResponse> UpdateEndpointAsync(UpdateEndpointRequest request, CancellationToken cancellationToken);
    public abstract virtual UpdateEventBusResponse UpdateEventBus(UpdateEventBusRequest request);
    public abstract virtual Task`1<UpdateEventBusResponse> UpdateEventBusAsync(UpdateEventBusRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.EventBridge.Internal.AmazonEventBridgeEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.EventBridge.Internal.AmazonEventBridgeEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.EventBridge.Internal.AmazonEventBridgeMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.EventBridge.LaunchType : ConstantClass {
    public static LaunchType EC2;
    public static LaunchType EXTERNAL;
    public static LaunchType FARGATE;
    public LaunchType(string value);
    private static LaunchType();
    public static LaunchType FindValue(string value);
    public static LaunchType op_Implicit(string value);
}
public class Amazon.EventBridge.Model.ActivateEventSourceRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.ActivateEventSourceResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.ApiDestination : object {
    private string _apiDestinationArn;
    private ApiDestinationState _apiDestinationState;
    private string _connectionArn;
    private Nullable`1<DateTime> _creationTime;
    private ApiDestinationHttpMethod _httpMethod;
    private string _invocationEndpoint;
    private Nullable`1<int> _invocationRateLimitPerSecond;
    private Nullable`1<DateTime> _lastModifiedTime;
    private string _name;
    [AWSPropertyAttribute]
public string ApiDestinationArn { get; public set; }
    public ApiDestinationState ApiDestinationState { get; public set; }
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public ApiDestinationHttpMethod HttpMethod { get; public set; }
    [AWSPropertyAttribute]
public string InvocationEndpoint { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> InvocationRateLimitPerSecond { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_ApiDestinationArn();
    public void set_ApiDestinationArn(string value);
    internal bool IsSetApiDestinationArn();
    public ApiDestinationState get_ApiDestinationState();
    public void set_ApiDestinationState(ApiDestinationState value);
    internal bool IsSetApiDestinationState();
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public ApiDestinationHttpMethod get_HttpMethod();
    public void set_HttpMethod(ApiDestinationHttpMethod value);
    internal bool IsSetHttpMethod();
    public string get_InvocationEndpoint();
    public void set_InvocationEndpoint(string value);
    internal bool IsSetInvocationEndpoint();
    public Nullable`1<int> get_InvocationRateLimitPerSecond();
    public void set_InvocationRateLimitPerSecond(Nullable`1<int> value);
    internal bool IsSetInvocationRateLimitPerSecond();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.AppSyncParameters : object {
    private string _graphQLOperation;
    [AWSPropertyAttribute]
public string GraphQLOperation { get; public set; }
    public string get_GraphQLOperation();
    public void set_GraphQLOperation(string value);
    internal bool IsSetGraphQLOperation();
}
public class Amazon.EventBridge.Model.Archive : object {
    private string _archiveName;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<long> _eventCount;
    private string _eventSourceArn;
    private Nullable`1<int> _retentionDays;
    private Nullable`1<long> _sizeBytes;
    private ArchiveState _state;
    private string _stateReason;
    [AWSPropertyAttribute]
public string ArchiveName { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<long> EventCount { get; public set; }
    [AWSPropertyAttribute]
public string EventSourceArn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> RetentionDays { get; public set; }
    public Nullable`1<long> SizeBytes { get; public set; }
    public ArchiveState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public string get_ArchiveName();
    public void set_ArchiveName(string value);
    internal bool IsSetArchiveName();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<long> get_EventCount();
    public void set_EventCount(Nullable`1<long> value);
    internal bool IsSetEventCount();
    public string get_EventSourceArn();
    public void set_EventSourceArn(string value);
    internal bool IsSetEventSourceArn();
    public Nullable`1<int> get_RetentionDays();
    public void set_RetentionDays(Nullable`1<int> value);
    internal bool IsSetRetentionDays();
    public Nullable`1<long> get_SizeBytes();
    public void set_SizeBytes(Nullable`1<long> value);
    internal bool IsSetSizeBytes();
    public ArchiveState get_State();
    public void set_State(ArchiveState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.AwsVpcConfiguration : object {
    private AssignPublicIp _assignPublicIp;
    private List`1<string> _securityGroups;
    private List`1<string> _subnets;
    public AssignPublicIp AssignPublicIp { get; public set; }
    public List`1<string> SecurityGroups { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Subnets { get; public set; }
    public AssignPublicIp get_AssignPublicIp();
    public void set_AssignPublicIp(AssignPublicIp value);
    internal bool IsSetAssignPublicIp();
    public List`1<string> get_SecurityGroups();
    public void set_SecurityGroups(List`1<string> value);
    internal bool IsSetSecurityGroups();
    public List`1<string> get_Subnets();
    public void set_Subnets(List`1<string> value);
    internal bool IsSetSubnets();
}
public class Amazon.EventBridge.Model.BatchArrayProperties : object {
    private Nullable`1<int> _size;
    public Nullable`1<int> Size { get; public set; }
    public Nullable`1<int> get_Size();
    public void set_Size(Nullable`1<int> value);
    internal bool IsSetSize();
}
public class Amazon.EventBridge.Model.BatchParameters : object {
    private BatchArrayProperties _arrayProperties;
    private string _jobDefinition;
    private string _jobName;
    private BatchRetryStrategy _retryStrategy;
    public BatchArrayProperties ArrayProperties { get; public set; }
    [AWSPropertyAttribute]
public string JobDefinition { get; public set; }
    [AWSPropertyAttribute]
public string JobName { get; public set; }
    public BatchRetryStrategy RetryStrategy { get; public set; }
    public BatchArrayProperties get_ArrayProperties();
    public void set_ArrayProperties(BatchArrayProperties value);
    internal bool IsSetArrayProperties();
    public string get_JobDefinition();
    public void set_JobDefinition(string value);
    internal bool IsSetJobDefinition();
    public string get_JobName();
    public void set_JobName(string value);
    internal bool IsSetJobName();
    public BatchRetryStrategy get_RetryStrategy();
    public void set_RetryStrategy(BatchRetryStrategy value);
    internal bool IsSetRetryStrategy();
}
public class Amazon.EventBridge.Model.BatchRetryStrategy : object {
    private Nullable`1<int> _attempts;
    public Nullable`1<int> Attempts { get; public set; }
    public Nullable`1<int> get_Attempts();
    public void set_Attempts(Nullable`1<int> value);
    internal bool IsSetAttempts();
}
public class Amazon.EventBridge.Model.CancelReplayRequest : AmazonEventBridgeRequest {
    private string _replayName;
    [AWSPropertyAttribute]
public string ReplayName { get; public set; }
    public string get_ReplayName();
    public void set_ReplayName(string value);
    internal bool IsSetReplayName();
}
public class Amazon.EventBridge.Model.CancelReplayResponse : AmazonWebServiceResponse {
    private string _replayArn;
    private ReplayState _state;
    private string _stateReason;
    [AWSPropertyAttribute]
public string ReplayArn { get; public set; }
    public ReplayState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public string get_ReplayArn();
    public void set_ReplayArn(string value);
    internal bool IsSetReplayArn();
    public ReplayState get_State();
    public void set_State(ReplayState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.CapacityProviderStrategyItem : object {
    private Nullable`1<int> _base;
    private string _capacityProvider;
    private Nullable`1<int> _weight;
    [AWSPropertyAttribute]
public Nullable`1<int> Base { get; public set; }
    [AWSPropertyAttribute]
public string CapacityProvider { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Weight { get; public set; }
    public Nullable`1<int> get_Base();
    public void set_Base(Nullable`1<int> value);
    internal bool IsSetBase();
    public string get_CapacityProvider();
    public void set_CapacityProvider(string value);
    internal bool IsSetCapacityProvider();
    public Nullable`1<int> get_Weight();
    public void set_Weight(Nullable`1<int> value);
    internal bool IsSetWeight();
}
public class Amazon.EventBridge.Model.ConcurrentModificationException : AmazonEventBridgeException {
    public ConcurrentModificationException(string message);
    public ConcurrentModificationException(string message, Exception innerException);
    public ConcurrentModificationException(Exception innerException);
    public ConcurrentModificationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConcurrentModificationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ConcurrentModificationException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.Condition : object {
    private string _key;
    private string _type;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Type { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.EventBridge.Model.Connection : object {
    private ConnectionAuthorizationType _authorizationType;
    private string _connectionArn;
    private ConnectionState _connectionState;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _lastAuthorizedTime;
    private Nullable`1<DateTime> _lastModifiedTime;
    private string _name;
    private string _stateReason;
    public ConnectionAuthorizationType AuthorizationType { get; public set; }
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    public ConnectionState ConnectionState { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> LastAuthorizedTime { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public ConnectionAuthorizationType get_AuthorizationType();
    public void set_AuthorizationType(ConnectionAuthorizationType value);
    internal bool IsSetAuthorizationType();
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public ConnectionState get_ConnectionState();
    public void set_ConnectionState(ConnectionState value);
    internal bool IsSetConnectionState();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_LastAuthorizedTime();
    public void set_LastAuthorizedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastAuthorizedTime();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.ConnectionApiKeyAuthResponseParameters : object {
    private string _apiKeyName;
    [AWSPropertyAttribute]
public string ApiKeyName { get; public set; }
    public string get_ApiKeyName();
    public void set_ApiKeyName(string value);
    internal bool IsSetApiKeyName();
}
public class Amazon.EventBridge.Model.ConnectionAuthResponseParameters : object {
    private ConnectionApiKeyAuthResponseParameters _apiKeyAuthParameters;
    private ConnectionBasicAuthResponseParameters _basicAuthParameters;
    private ConnectionHttpParameters _invocationHttpParameters;
    private ConnectionOAuthResponseParameters _oAuthParameters;
    public ConnectionApiKeyAuthResponseParameters ApiKeyAuthParameters { get; public set; }
    public ConnectionBasicAuthResponseParameters BasicAuthParameters { get; public set; }
    public ConnectionHttpParameters InvocationHttpParameters { get; public set; }
    public ConnectionOAuthResponseParameters OAuthParameters { get; public set; }
    public ConnectionApiKeyAuthResponseParameters get_ApiKeyAuthParameters();
    public void set_ApiKeyAuthParameters(ConnectionApiKeyAuthResponseParameters value);
    internal bool IsSetApiKeyAuthParameters();
    public ConnectionBasicAuthResponseParameters get_BasicAuthParameters();
    public void set_BasicAuthParameters(ConnectionBasicAuthResponseParameters value);
    internal bool IsSetBasicAuthParameters();
    public ConnectionHttpParameters get_InvocationHttpParameters();
    public void set_InvocationHttpParameters(ConnectionHttpParameters value);
    internal bool IsSetInvocationHttpParameters();
    public ConnectionOAuthResponseParameters get_OAuthParameters();
    public void set_OAuthParameters(ConnectionOAuthResponseParameters value);
    internal bool IsSetOAuthParameters();
}
public class Amazon.EventBridge.Model.ConnectionBasicAuthResponseParameters : object {
    private string _username;
    [AWSPropertyAttribute]
public string Username { get; public set; }
    public string get_Username();
    public void set_Username(string value);
    internal bool IsSetUsername();
}
public class Amazon.EventBridge.Model.ConnectionBodyParameter : object {
    private Nullable`1<bool> _isValueSecret;
    private string _key;
    private string _value;
    public Nullable`1<bool> IsValueSecret { get; public set; }
    public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public Nullable`1<bool> get_IsValueSecret();
    public void set_IsValueSecret(Nullable`1<bool> value);
    internal bool IsSetIsValueSecret();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.EventBridge.Model.ConnectionHeaderParameter : object {
    private Nullable`1<bool> _isValueSecret;
    private string _key;
    private string _value;
    public Nullable`1<bool> IsValueSecret { get; public set; }
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public Nullable`1<bool> get_IsValueSecret();
    public void set_IsValueSecret(Nullable`1<bool> value);
    internal bool IsSetIsValueSecret();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.EventBridge.Model.ConnectionHttpParameters : object {
    private List`1<ConnectionBodyParameter> _bodyParameters;
    private List`1<ConnectionHeaderParameter> _headerParameters;
    private List`1<ConnectionQueryStringParameter> _queryStringParameters;
    [AWSPropertyAttribute]
public List`1<ConnectionBodyParameter> BodyParameters { get; public set; }
    [AWSPropertyAttribute]
public List`1<ConnectionHeaderParameter> HeaderParameters { get; public set; }
    [AWSPropertyAttribute]
public List`1<ConnectionQueryStringParameter> QueryStringParameters { get; public set; }
    public List`1<ConnectionBodyParameter> get_BodyParameters();
    public void set_BodyParameters(List`1<ConnectionBodyParameter> value);
    internal bool IsSetBodyParameters();
    public List`1<ConnectionHeaderParameter> get_HeaderParameters();
    public void set_HeaderParameters(List`1<ConnectionHeaderParameter> value);
    internal bool IsSetHeaderParameters();
    public List`1<ConnectionQueryStringParameter> get_QueryStringParameters();
    public void set_QueryStringParameters(List`1<ConnectionQueryStringParameter> value);
    internal bool IsSetQueryStringParameters();
}
public class Amazon.EventBridge.Model.ConnectionOAuthClientResponseParameters : object {
    private string _clientID;
    [AWSPropertyAttribute]
public string ClientID { get; public set; }
    public string get_ClientID();
    public void set_ClientID(string value);
    internal bool IsSetClientID();
}
public class Amazon.EventBridge.Model.ConnectionOAuthResponseParameters : object {
    private string _authorizationEndpoint;
    private ConnectionOAuthClientResponseParameters _clientParameters;
    private ConnectionOAuthHttpMethod _httpMethod;
    private ConnectionHttpParameters _oAuthHttpParameters;
    [AWSPropertyAttribute]
public string AuthorizationEndpoint { get; public set; }
    public ConnectionOAuthClientResponseParameters ClientParameters { get; public set; }
    public ConnectionOAuthHttpMethod HttpMethod { get; public set; }
    public ConnectionHttpParameters OAuthHttpParameters { get; public set; }
    public string get_AuthorizationEndpoint();
    public void set_AuthorizationEndpoint(string value);
    internal bool IsSetAuthorizationEndpoint();
    public ConnectionOAuthClientResponseParameters get_ClientParameters();
    public void set_ClientParameters(ConnectionOAuthClientResponseParameters value);
    internal bool IsSetClientParameters();
    public ConnectionOAuthHttpMethod get_HttpMethod();
    public void set_HttpMethod(ConnectionOAuthHttpMethod value);
    internal bool IsSetHttpMethod();
    public ConnectionHttpParameters get_OAuthHttpParameters();
    public void set_OAuthHttpParameters(ConnectionHttpParameters value);
    internal bool IsSetOAuthHttpParameters();
}
public class Amazon.EventBridge.Model.ConnectionQueryStringParameter : object {
    private Nullable`1<bool> _isValueSecret;
    private string _key;
    private string _value;
    public Nullable`1<bool> IsValueSecret { get; public set; }
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public Nullable`1<bool> get_IsValueSecret();
    public void set_IsValueSecret(Nullable`1<bool> value);
    internal bool IsSetIsValueSecret();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.EventBridge.Model.CreateApiDestinationRequest : AmazonEventBridgeRequest {
    private string _connectionArn;
    private string _description;
    private ApiDestinationHttpMethod _httpMethod;
    private string _invocationEndpoint;
    private Nullable`1<int> _invocationRateLimitPerSecond;
    private string _name;
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public ApiDestinationHttpMethod HttpMethod { get; public set; }
    [AWSPropertyAttribute]
public string InvocationEndpoint { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> InvocationRateLimitPerSecond { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public ApiDestinationHttpMethod get_HttpMethod();
    public void set_HttpMethod(ApiDestinationHttpMethod value);
    internal bool IsSetHttpMethod();
    public string get_InvocationEndpoint();
    public void set_InvocationEndpoint(string value);
    internal bool IsSetInvocationEndpoint();
    public Nullable`1<int> get_InvocationRateLimitPerSecond();
    public void set_InvocationRateLimitPerSecond(Nullable`1<int> value);
    internal bool IsSetInvocationRateLimitPerSecond();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.CreateApiDestinationResponse : AmazonWebServiceResponse {
    private string _apiDestinationArn;
    private ApiDestinationState _apiDestinationState;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _lastModifiedTime;
    [AWSPropertyAttribute]
public string ApiDestinationArn { get; public set; }
    public ApiDestinationState ApiDestinationState { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    public string get_ApiDestinationArn();
    public void set_ApiDestinationArn(string value);
    internal bool IsSetApiDestinationArn();
    public ApiDestinationState get_ApiDestinationState();
    public void set_ApiDestinationState(ApiDestinationState value);
    internal bool IsSetApiDestinationState();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
}
public class Amazon.EventBridge.Model.CreateArchiveRequest : AmazonEventBridgeRequest {
    private string _archiveName;
    private string _description;
    private string _eventPattern;
    private string _eventSourceArn;
    private Nullable`1<int> _retentionDays;
    [AWSPropertyAttribute]
public string ArchiveName { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string EventPattern { get; public set; }
    [AWSPropertyAttribute]
public string EventSourceArn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> RetentionDays { get; public set; }
    public string get_ArchiveName();
    public void set_ArchiveName(string value);
    internal bool IsSetArchiveName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_EventPattern();
    public void set_EventPattern(string value);
    internal bool IsSetEventPattern();
    public string get_EventSourceArn();
    public void set_EventSourceArn(string value);
    internal bool IsSetEventSourceArn();
    public Nullable`1<int> get_RetentionDays();
    public void set_RetentionDays(Nullable`1<int> value);
    internal bool IsSetRetentionDays();
}
public class Amazon.EventBridge.Model.CreateArchiveResponse : AmazonWebServiceResponse {
    private string _archiveArn;
    private Nullable`1<DateTime> _creationTime;
    private ArchiveState _state;
    private string _stateReason;
    [AWSPropertyAttribute]
public string ArchiveArn { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public ArchiveState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public string get_ArchiveArn();
    public void set_ArchiveArn(string value);
    internal bool IsSetArchiveArn();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public ArchiveState get_State();
    public void set_State(ArchiveState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.CreateConnectionApiKeyAuthRequestParameters : object {
    private string _apiKeyName;
    private string _apiKeyValue;
    [AWSPropertyAttribute]
public string ApiKeyName { get; public set; }
    [AWSPropertyAttribute]
public string ApiKeyValue { get; public set; }
    public string get_ApiKeyName();
    public void set_ApiKeyName(string value);
    internal bool IsSetApiKeyName();
    public string get_ApiKeyValue();
    public void set_ApiKeyValue(string value);
    internal bool IsSetApiKeyValue();
}
public class Amazon.EventBridge.Model.CreateConnectionAuthRequestParameters : object {
    private CreateConnectionApiKeyAuthRequestParameters _apiKeyAuthParameters;
    private CreateConnectionBasicAuthRequestParameters _basicAuthParameters;
    private ConnectionHttpParameters _invocationHttpParameters;
    private CreateConnectionOAuthRequestParameters _oAuthParameters;
    public CreateConnectionApiKeyAuthRequestParameters ApiKeyAuthParameters { get; public set; }
    public CreateConnectionBasicAuthRequestParameters BasicAuthParameters { get; public set; }
    public ConnectionHttpParameters InvocationHttpParameters { get; public set; }
    public CreateConnectionOAuthRequestParameters OAuthParameters { get; public set; }
    public CreateConnectionApiKeyAuthRequestParameters get_ApiKeyAuthParameters();
    public void set_ApiKeyAuthParameters(CreateConnectionApiKeyAuthRequestParameters value);
    internal bool IsSetApiKeyAuthParameters();
    public CreateConnectionBasicAuthRequestParameters get_BasicAuthParameters();
    public void set_BasicAuthParameters(CreateConnectionBasicAuthRequestParameters value);
    internal bool IsSetBasicAuthParameters();
    public ConnectionHttpParameters get_InvocationHttpParameters();
    public void set_InvocationHttpParameters(ConnectionHttpParameters value);
    internal bool IsSetInvocationHttpParameters();
    public CreateConnectionOAuthRequestParameters get_OAuthParameters();
    public void set_OAuthParameters(CreateConnectionOAuthRequestParameters value);
    internal bool IsSetOAuthParameters();
}
public class Amazon.EventBridge.Model.CreateConnectionBasicAuthRequestParameters : object {
    private string _password;
    private string _username;
    [AWSPropertyAttribute]
public string Password { get; public set; }
    [AWSPropertyAttribute]
public string Username { get; public set; }
    public string get_Password();
    public void set_Password(string value);
    internal bool IsSetPassword();
    public string get_Username();
    public void set_Username(string value);
    internal bool IsSetUsername();
}
public class Amazon.EventBridge.Model.CreateConnectionOAuthClientRequestParameters : object {
    private string _clientID;
    private string _clientSecret;
    [AWSPropertyAttribute]
public string ClientID { get; public set; }
    [AWSPropertyAttribute]
public string ClientSecret { get; public set; }
    public string get_ClientID();
    public void set_ClientID(string value);
    internal bool IsSetClientID();
    public string get_ClientSecret();
    public void set_ClientSecret(string value);
    internal bool IsSetClientSecret();
}
public class Amazon.EventBridge.Model.CreateConnectionOAuthRequestParameters : object {
    private string _authorizationEndpoint;
    private CreateConnectionOAuthClientRequestParameters _clientParameters;
    private ConnectionOAuthHttpMethod _httpMethod;
    private ConnectionHttpParameters _oAuthHttpParameters;
    [AWSPropertyAttribute]
public string AuthorizationEndpoint { get; public set; }
    [AWSPropertyAttribute]
public CreateConnectionOAuthClientRequestParameters ClientParameters { get; public set; }
    [AWSPropertyAttribute]
public ConnectionOAuthHttpMethod HttpMethod { get; public set; }
    public ConnectionHttpParameters OAuthHttpParameters { get; public set; }
    public string get_AuthorizationEndpoint();
    public void set_AuthorizationEndpoint(string value);
    internal bool IsSetAuthorizationEndpoint();
    public CreateConnectionOAuthClientRequestParameters get_ClientParameters();
    public void set_ClientParameters(CreateConnectionOAuthClientRequestParameters value);
    internal bool IsSetClientParameters();
    public ConnectionOAuthHttpMethod get_HttpMethod();
    public void set_HttpMethod(ConnectionOAuthHttpMethod value);
    internal bool IsSetHttpMethod();
    public ConnectionHttpParameters get_OAuthHttpParameters();
    public void set_OAuthHttpParameters(ConnectionHttpParameters value);
    internal bool IsSetOAuthHttpParameters();
}
public class Amazon.EventBridge.Model.CreateConnectionRequest : AmazonEventBridgeRequest {
    private ConnectionAuthorizationType _authorizationType;
    private CreateConnectionAuthRequestParameters _authParameters;
    private string _description;
    private string _name;
    [AWSPropertyAttribute]
public ConnectionAuthorizationType AuthorizationType { get; public set; }
    [AWSPropertyAttribute]
public CreateConnectionAuthRequestParameters AuthParameters { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public ConnectionAuthorizationType get_AuthorizationType();
    public void set_AuthorizationType(ConnectionAuthorizationType value);
    internal bool IsSetAuthorizationType();
    public CreateConnectionAuthRequestParameters get_AuthParameters();
    public void set_AuthParameters(CreateConnectionAuthRequestParameters value);
    internal bool IsSetAuthParameters();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.CreateConnectionResponse : AmazonWebServiceResponse {
    private string _connectionArn;
    private ConnectionState _connectionState;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _lastModifiedTime;
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    public ConnectionState ConnectionState { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public ConnectionState get_ConnectionState();
    public void set_ConnectionState(ConnectionState value);
    internal bool IsSetConnectionState();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
}
public class Amazon.EventBridge.Model.CreateEndpointRequest : AmazonEventBridgeRequest {
    private string _description;
    private List`1<EndpointEventBus> _eventBuses;
    private string _name;
    private ReplicationConfig _replicationConfig;
    private string _roleArn;
    private RoutingConfig _routingConfig;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public List`1<EndpointEventBus> EventBuses { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public ReplicationConfig ReplicationConfig { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public RoutingConfig RoutingConfig { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<EndpointEventBus> get_EventBuses();
    public void set_EventBuses(List`1<EndpointEventBus> value);
    internal bool IsSetEventBuses();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public ReplicationConfig get_ReplicationConfig();
    public void set_ReplicationConfig(ReplicationConfig value);
    internal bool IsSetReplicationConfig();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public RoutingConfig get_RoutingConfig();
    public void set_RoutingConfig(RoutingConfig value);
    internal bool IsSetRoutingConfig();
}
public class Amazon.EventBridge.Model.CreateEndpointResponse : AmazonWebServiceResponse {
    private string _arn;
    private List`1<EndpointEventBus> _eventBuses;
    private string _name;
    private ReplicationConfig _replicationConfig;
    private string _roleArn;
    private RoutingConfig _routingConfig;
    private EndpointState _state;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public List`1<EndpointEventBus> EventBuses { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public ReplicationConfig ReplicationConfig { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    public RoutingConfig RoutingConfig { get; public set; }
    public EndpointState State { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public List`1<EndpointEventBus> get_EventBuses();
    public void set_EventBuses(List`1<EndpointEventBus> value);
    internal bool IsSetEventBuses();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public ReplicationConfig get_ReplicationConfig();
    public void set_ReplicationConfig(ReplicationConfig value);
    internal bool IsSetReplicationConfig();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public RoutingConfig get_RoutingConfig();
    public void set_RoutingConfig(RoutingConfig value);
    internal bool IsSetRoutingConfig();
    public EndpointState get_State();
    public void set_State(EndpointState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.CreateEventBusRequest : AmazonEventBridgeRequest {
    private DeadLetterConfig _deadLetterConfig;
    private string _description;
    private string _eventSourceName;
    private string _kmsKeyIdentifier;
    private string _name;
    private List`1<Tag> _tags;
    public DeadLetterConfig DeadLetterConfig { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string EventSourceName { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public DeadLetterConfig get_DeadLetterConfig();
    public void set_DeadLetterConfig(DeadLetterConfig value);
    internal bool IsSetDeadLetterConfig();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_EventSourceName();
    public void set_EventSourceName(string value);
    internal bool IsSetEventSourceName();
    public string get_KmsKeyIdentifier();
    public void set_KmsKeyIdentifier(string value);
    internal bool IsSetKmsKeyIdentifier();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.EventBridge.Model.CreateEventBusResponse : AmazonWebServiceResponse {
    private DeadLetterConfig _deadLetterConfig;
    private string _description;
    private string _eventBusArn;
    private string _kmsKeyIdentifier;
    public DeadLetterConfig DeadLetterConfig { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public string EventBusArn { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyIdentifier { get; public set; }
    public DeadLetterConfig get_DeadLetterConfig();
    public void set_DeadLetterConfig(DeadLetterConfig value);
    internal bool IsSetDeadLetterConfig();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_EventBusArn();
    public void set_EventBusArn(string value);
    internal bool IsSetEventBusArn();
    public string get_KmsKeyIdentifier();
    public void set_KmsKeyIdentifier(string value);
    internal bool IsSetKmsKeyIdentifier();
}
public class Amazon.EventBridge.Model.CreatePartnerEventSourceRequest : AmazonEventBridgeRequest {
    private string _account;
    private string _name;
    [AWSPropertyAttribute]
public string Account { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Account();
    public void set_Account(string value);
    internal bool IsSetAccount();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.CreatePartnerEventSourceResponse : AmazonWebServiceResponse {
    private string _eventSourceArn;
    public string EventSourceArn { get; public set; }
    public string get_EventSourceArn();
    public void set_EventSourceArn(string value);
    internal bool IsSetEventSourceArn();
}
public class Amazon.EventBridge.Model.DeactivateEventSourceRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DeactivateEventSourceResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.DeadLetterConfig : object {
    private string _arn;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
}
public class Amazon.EventBridge.Model.DeauthorizeConnectionRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DeauthorizeConnectionResponse : AmazonWebServiceResponse {
    private string _connectionArn;
    private ConnectionState _connectionState;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _lastAuthorizedTime;
    private Nullable`1<DateTime> _lastModifiedTime;
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    public ConnectionState ConnectionState { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> LastAuthorizedTime { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public ConnectionState get_ConnectionState();
    public void set_ConnectionState(ConnectionState value);
    internal bool IsSetConnectionState();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_LastAuthorizedTime();
    public void set_LastAuthorizedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastAuthorizedTime();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
}
public class Amazon.EventBridge.Model.DeleteApiDestinationRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DeleteApiDestinationResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.DeleteArchiveRequest : AmazonEventBridgeRequest {
    private string _archiveName;
    [AWSPropertyAttribute]
public string ArchiveName { get; public set; }
    public string get_ArchiveName();
    public void set_ArchiveName(string value);
    internal bool IsSetArchiveName();
}
public class Amazon.EventBridge.Model.DeleteArchiveResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.DeleteConnectionRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DeleteConnectionResponse : AmazonWebServiceResponse {
    private string _connectionArn;
    private ConnectionState _connectionState;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _lastAuthorizedTime;
    private Nullable`1<DateTime> _lastModifiedTime;
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    public ConnectionState ConnectionState { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> LastAuthorizedTime { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public ConnectionState get_ConnectionState();
    public void set_ConnectionState(ConnectionState value);
    internal bool IsSetConnectionState();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_LastAuthorizedTime();
    public void set_LastAuthorizedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastAuthorizedTime();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
}
public class Amazon.EventBridge.Model.DeleteEndpointRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DeleteEndpointResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.DeleteEventBusRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DeleteEventBusResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.DeletePartnerEventSourceRequest : AmazonEventBridgeRequest {
    private string _account;
    private string _name;
    [AWSPropertyAttribute]
public string Account { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Account();
    public void set_Account(string value);
    internal bool IsSetAccount();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DeletePartnerEventSourceResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.DeleteRuleRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private Nullable`1<bool> _force;
    private string _name;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    public Nullable`1<bool> Force { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DeleteRuleResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.DescribeApiDestinationRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DescribeApiDestinationResponse : AmazonWebServiceResponse {
    private string _apiDestinationArn;
    private ApiDestinationState _apiDestinationState;
    private string _connectionArn;
    private Nullable`1<DateTime> _creationTime;
    private string _description;
    private ApiDestinationHttpMethod _httpMethod;
    private string _invocationEndpoint;
    private Nullable`1<int> _invocationRateLimitPerSecond;
    private Nullable`1<DateTime> _lastModifiedTime;
    private string _name;
    [AWSPropertyAttribute]
public string ApiDestinationArn { get; public set; }
    public ApiDestinationState ApiDestinationState { get; public set; }
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public ApiDestinationHttpMethod HttpMethod { get; public set; }
    [AWSPropertyAttribute]
public string InvocationEndpoint { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> InvocationRateLimitPerSecond { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_ApiDestinationArn();
    public void set_ApiDestinationArn(string value);
    internal bool IsSetApiDestinationArn();
    public ApiDestinationState get_ApiDestinationState();
    public void set_ApiDestinationState(ApiDestinationState value);
    internal bool IsSetApiDestinationState();
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public ApiDestinationHttpMethod get_HttpMethod();
    public void set_HttpMethod(ApiDestinationHttpMethod value);
    internal bool IsSetHttpMethod();
    public string get_InvocationEndpoint();
    public void set_InvocationEndpoint(string value);
    internal bool IsSetInvocationEndpoint();
    public Nullable`1<int> get_InvocationRateLimitPerSecond();
    public void set_InvocationRateLimitPerSecond(Nullable`1<int> value);
    internal bool IsSetInvocationRateLimitPerSecond();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DescribeArchiveRequest : AmazonEventBridgeRequest {
    private string _archiveName;
    [AWSPropertyAttribute]
public string ArchiveName { get; public set; }
    public string get_ArchiveName();
    public void set_ArchiveName(string value);
    internal bool IsSetArchiveName();
}
public class Amazon.EventBridge.Model.DescribeArchiveResponse : AmazonWebServiceResponse {
    private string _archiveArn;
    private string _archiveName;
    private Nullable`1<DateTime> _creationTime;
    private string _description;
    private Nullable`1<long> _eventCount;
    private string _eventPattern;
    private string _eventSourceArn;
    private Nullable`1<int> _retentionDays;
    private Nullable`1<long> _sizeBytes;
    private ArchiveState _state;
    private string _stateReason;
    [AWSPropertyAttribute]
public string ArchiveArn { get; public set; }
    [AWSPropertyAttribute]
public string ArchiveName { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<long> EventCount { get; public set; }
    [AWSPropertyAttribute]
public string EventPattern { get; public set; }
    [AWSPropertyAttribute]
public string EventSourceArn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> RetentionDays { get; public set; }
    public Nullable`1<long> SizeBytes { get; public set; }
    public ArchiveState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public string get_ArchiveArn();
    public void set_ArchiveArn(string value);
    internal bool IsSetArchiveArn();
    public string get_ArchiveName();
    public void set_ArchiveName(string value);
    internal bool IsSetArchiveName();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<long> get_EventCount();
    public void set_EventCount(Nullable`1<long> value);
    internal bool IsSetEventCount();
    public string get_EventPattern();
    public void set_EventPattern(string value);
    internal bool IsSetEventPattern();
    public string get_EventSourceArn();
    public void set_EventSourceArn(string value);
    internal bool IsSetEventSourceArn();
    public Nullable`1<int> get_RetentionDays();
    public void set_RetentionDays(Nullable`1<int> value);
    internal bool IsSetRetentionDays();
    public Nullable`1<long> get_SizeBytes();
    public void set_SizeBytes(Nullable`1<long> value);
    internal bool IsSetSizeBytes();
    public ArchiveState get_State();
    public void set_State(ArchiveState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.DescribeConnectionRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DescribeConnectionResponse : AmazonWebServiceResponse {
    private ConnectionAuthorizationType _authorizationType;
    private ConnectionAuthResponseParameters _authParameters;
    private string _connectionArn;
    private ConnectionState _connectionState;
    private Nullable`1<DateTime> _creationTime;
    private string _description;
    private Nullable`1<DateTime> _lastAuthorizedTime;
    private Nullable`1<DateTime> _lastModifiedTime;
    private string _name;
    private string _secretArn;
    private string _stateReason;
    public ConnectionAuthorizationType AuthorizationType { get; public set; }
    public ConnectionAuthResponseParameters AuthParameters { get; public set; }
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    public ConnectionState ConnectionState { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<DateTime> LastAuthorizedTime { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string SecretArn { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public ConnectionAuthorizationType get_AuthorizationType();
    public void set_AuthorizationType(ConnectionAuthorizationType value);
    internal bool IsSetAuthorizationType();
    public ConnectionAuthResponseParameters get_AuthParameters();
    public void set_AuthParameters(ConnectionAuthResponseParameters value);
    internal bool IsSetAuthParameters();
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public ConnectionState get_ConnectionState();
    public void set_ConnectionState(ConnectionState value);
    internal bool IsSetConnectionState();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<DateTime> get_LastAuthorizedTime();
    public void set_LastAuthorizedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastAuthorizedTime();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_SecretArn();
    public void set_SecretArn(string value);
    internal bool IsSetSecretArn();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.DescribeEndpointRequest : AmazonEventBridgeRequest {
    private string _homeRegion;
    private string _name;
    [AWSPropertyAttribute]
public string HomeRegion { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_HomeRegion();
    public void set_HomeRegion(string value);
    internal bool IsSetHomeRegion();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DescribeEndpointResponse : AmazonWebServiceResponse {
    private string _arn;
    private Nullable`1<DateTime> _creationTime;
    private string _description;
    private string _endpointId;
    private string _endpointUrl;
    private List`1<EndpointEventBus> _eventBuses;
    private Nullable`1<DateTime> _lastModifiedTime;
    private string _name;
    private ReplicationConfig _replicationConfig;
    private string _roleArn;
    private RoutingConfig _routingConfig;
    private EndpointState _state;
    private string _stateReason;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string EndpointId { get; public set; }
    [AWSPropertyAttribute]
public string EndpointUrl { get; public set; }
    [AWSPropertyAttribute]
public List`1<EndpointEventBus> EventBuses { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public ReplicationConfig ReplicationConfig { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    public RoutingConfig RoutingConfig { get; public set; }
    public EndpointState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_EndpointId();
    public void set_EndpointId(string value);
    internal bool IsSetEndpointId();
    public string get_EndpointUrl();
    public void set_EndpointUrl(string value);
    internal bool IsSetEndpointUrl();
    public List`1<EndpointEventBus> get_EventBuses();
    public void set_EventBuses(List`1<EndpointEventBus> value);
    internal bool IsSetEventBuses();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public ReplicationConfig get_ReplicationConfig();
    public void set_ReplicationConfig(ReplicationConfig value);
    internal bool IsSetReplicationConfig();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public RoutingConfig get_RoutingConfig();
    public void set_RoutingConfig(RoutingConfig value);
    internal bool IsSetRoutingConfig();
    public EndpointState get_State();
    public void set_State(EndpointState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.DescribeEventBusRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DescribeEventBusResponse : AmazonWebServiceResponse {
    private string _arn;
    private Nullable`1<DateTime> _creationTime;
    private DeadLetterConfig _deadLetterConfig;
    private string _description;
    private string _kmsKeyIdentifier;
    private Nullable`1<DateTime> _lastModifiedTime;
    private string _name;
    private string _policy;
    public string Arn { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public DeadLetterConfig DeadLetterConfig { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyIdentifier { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    public string Name { get; public set; }
    public string Policy { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public DeadLetterConfig get_DeadLetterConfig();
    public void set_DeadLetterConfig(DeadLetterConfig value);
    internal bool IsSetDeadLetterConfig();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_KmsKeyIdentifier();
    public void set_KmsKeyIdentifier(string value);
    internal bool IsSetKmsKeyIdentifier();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
}
public class Amazon.EventBridge.Model.DescribeEventSourceRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DescribeEventSourceResponse : AmazonWebServiceResponse {
    private string _arn;
    private string _createdBy;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _expirationTime;
    private string _name;
    private EventSourceState _state;
    public string Arn { get; public set; }
    public string CreatedBy { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> ExpirationTime { get; public set; }
    public string Name { get; public set; }
    public EventSourceState State { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_CreatedBy();
    public void set_CreatedBy(string value);
    internal bool IsSetCreatedBy();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_ExpirationTime();
    public void set_ExpirationTime(Nullable`1<DateTime> value);
    internal bool IsSetExpirationTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public EventSourceState get_State();
    public void set_State(EventSourceState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.DescribePartnerEventSourceRequest : AmazonEventBridgeRequest {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DescribePartnerEventSourceResponse : AmazonWebServiceResponse {
    private string _arn;
    private string _name;
    public string Arn { get; public set; }
    public string Name { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DescribeReplayRequest : AmazonEventBridgeRequest {
    private string _replayName;
    [AWSPropertyAttribute]
public string ReplayName { get; public set; }
    public string get_ReplayName();
    public void set_ReplayName(string value);
    internal bool IsSetReplayName();
}
public class Amazon.EventBridge.Model.DescribeReplayResponse : AmazonWebServiceResponse {
    private string _description;
    private ReplayDestination _destination;
    private Nullable`1<DateTime> _eventEndTime;
    private Nullable`1<DateTime> _eventLastReplayedTime;
    private string _eventSourceArn;
    private Nullable`1<DateTime> _eventStartTime;
    private string _replayArn;
    private Nullable`1<DateTime> _replayEndTime;
    private string _replayName;
    private Nullable`1<DateTime> _replayStartTime;
    private ReplayState _state;
    private string _stateReason;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public ReplayDestination Destination { get; public set; }
    public Nullable`1<DateTime> EventEndTime { get; public set; }
    public Nullable`1<DateTime> EventLastReplayedTime { get; public set; }
    [AWSPropertyAttribute]
public string EventSourceArn { get; public set; }
    public Nullable`1<DateTime> EventStartTime { get; public set; }
    [AWSPropertyAttribute]
public string ReplayArn { get; public set; }
    public Nullable`1<DateTime> ReplayEndTime { get; public set; }
    [AWSPropertyAttribute]
public string ReplayName { get; public set; }
    public Nullable`1<DateTime> ReplayStartTime { get; public set; }
    public ReplayState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public ReplayDestination get_Destination();
    public void set_Destination(ReplayDestination value);
    internal bool IsSetDestination();
    public Nullable`1<DateTime> get_EventEndTime();
    public void set_EventEndTime(Nullable`1<DateTime> value);
    internal bool IsSetEventEndTime();
    public Nullable`1<DateTime> get_EventLastReplayedTime();
    public void set_EventLastReplayedTime(Nullable`1<DateTime> value);
    internal bool IsSetEventLastReplayedTime();
    public string get_EventSourceArn();
    public void set_EventSourceArn(string value);
    internal bool IsSetEventSourceArn();
    public Nullable`1<DateTime> get_EventStartTime();
    public void set_EventStartTime(Nullable`1<DateTime> value);
    internal bool IsSetEventStartTime();
    public string get_ReplayArn();
    public void set_ReplayArn(string value);
    internal bool IsSetReplayArn();
    public Nullable`1<DateTime> get_ReplayEndTime();
    public void set_ReplayEndTime(Nullable`1<DateTime> value);
    internal bool IsSetReplayEndTime();
    public string get_ReplayName();
    public void set_ReplayName(string value);
    internal bool IsSetReplayName();
    public Nullable`1<DateTime> get_ReplayStartTime();
    public void set_ReplayStartTime(Nullable`1<DateTime> value);
    internal bool IsSetReplayStartTime();
    public ReplayState get_State();
    public void set_State(ReplayState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.DescribeRuleRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private string _name;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DescribeRuleResponse : AmazonWebServiceResponse {
    private string _arn;
    private string _createdBy;
    private string _description;
    private string _eventBusName;
    private string _eventPattern;
    private string _managedBy;
    private string _name;
    private string _roleArn;
    private string _scheduleExpression;
    private RuleState _state;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string CreatedBy { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public string EventPattern { get; public set; }
    [AWSPropertyAttribute]
public string ManagedBy { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleExpression { get; public set; }
    public RuleState State { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_CreatedBy();
    public void set_CreatedBy(string value);
    internal bool IsSetCreatedBy();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public string get_EventPattern();
    public void set_EventPattern(string value);
    internal bool IsSetEventPattern();
    public string get_ManagedBy();
    public void set_ManagedBy(string value);
    internal bool IsSetManagedBy();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public string get_ScheduleExpression();
    public void set_ScheduleExpression(string value);
    internal bool IsSetScheduleExpression();
    public RuleState get_State();
    public void set_State(RuleState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.DisableRuleRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private string _name;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.DisableRuleResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.EcsParameters : object {
    private List`1<CapacityProviderStrategyItem> _capacityProviderStrategy;
    private Nullable`1<bool> _enableECSManagedTags;
    private Nullable`1<bool> _enableExecuteCommand;
    private string _group;
    private LaunchType _launchType;
    private NetworkConfiguration _networkConfiguration;
    private List`1<PlacementConstraint> _placementConstraints;
    private List`1<PlacementStrategy> _placementStrategy;
    private string _platformVersion;
    private PropagateTags _propagateTags;
    private string _referenceId;
    private List`1<Tag> _tags;
    private Nullable`1<int> _taskCount;
    private string _taskDefinitionArn;
    [AWSPropertyAttribute]
public List`1<CapacityProviderStrategyItem> CapacityProviderStrategy { get; public set; }
    public Nullable`1<bool> EnableECSManagedTags { get; public set; }
    public Nullable`1<bool> EnableExecuteCommand { get; public set; }
    public string Group { get; public set; }
    public LaunchType LaunchType { get; public set; }
    public NetworkConfiguration NetworkConfiguration { get; public set; }
    [AWSPropertyAttribute]
public List`1<PlacementConstraint> PlacementConstraints { get; public set; }
    [AWSPropertyAttribute]
public List`1<PlacementStrategy> PlacementStrategy { get; public set; }
    public string PlatformVersion { get; public set; }
    public PropagateTags PropagateTags { get; public set; }
    [AWSPropertyAttribute]
public string ReferenceId { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> TaskCount { get; public set; }
    [AWSPropertyAttribute]
public string TaskDefinitionArn { get; public set; }
    public List`1<CapacityProviderStrategyItem> get_CapacityProviderStrategy();
    public void set_CapacityProviderStrategy(List`1<CapacityProviderStrategyItem> value);
    internal bool IsSetCapacityProviderStrategy();
    public Nullable`1<bool> get_EnableECSManagedTags();
    public void set_EnableECSManagedTags(Nullable`1<bool> value);
    internal bool IsSetEnableECSManagedTags();
    public Nullable`1<bool> get_EnableExecuteCommand();
    public void set_EnableExecuteCommand(Nullable`1<bool> value);
    internal bool IsSetEnableExecuteCommand();
    public string get_Group();
    public void set_Group(string value);
    internal bool IsSetGroup();
    public LaunchType get_LaunchType();
    public void set_LaunchType(LaunchType value);
    internal bool IsSetLaunchType();
    public NetworkConfiguration get_NetworkConfiguration();
    public void set_NetworkConfiguration(NetworkConfiguration value);
    internal bool IsSetNetworkConfiguration();
    public List`1<PlacementConstraint> get_PlacementConstraints();
    public void set_PlacementConstraints(List`1<PlacementConstraint> value);
    internal bool IsSetPlacementConstraints();
    public List`1<PlacementStrategy> get_PlacementStrategy();
    public void set_PlacementStrategy(List`1<PlacementStrategy> value);
    internal bool IsSetPlacementStrategy();
    public string get_PlatformVersion();
    public void set_PlatformVersion(string value);
    internal bool IsSetPlatformVersion();
    public PropagateTags get_PropagateTags();
    public void set_PropagateTags(PropagateTags value);
    internal bool IsSetPropagateTags();
    public string get_ReferenceId();
    public void set_ReferenceId(string value);
    internal bool IsSetReferenceId();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<int> get_TaskCount();
    public void set_TaskCount(Nullable`1<int> value);
    internal bool IsSetTaskCount();
    public string get_TaskDefinitionArn();
    public void set_TaskDefinitionArn(string value);
    internal bool IsSetTaskDefinitionArn();
}
public class Amazon.EventBridge.Model.EnableRuleRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private string _name;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.EnableRuleResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.Endpoint : object {
    private string _arn;
    private Nullable`1<DateTime> _creationTime;
    private string _description;
    private string _endpointId;
    private string _endpointUrl;
    private List`1<EndpointEventBus> _eventBuses;
    private Nullable`1<DateTime> _lastModifiedTime;
    private string _name;
    private ReplicationConfig _replicationConfig;
    private string _roleArn;
    private RoutingConfig _routingConfig;
    private EndpointState _state;
    private string _stateReason;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string EndpointId { get; public set; }
    [AWSPropertyAttribute]
public string EndpointUrl { get; public set; }
    [AWSPropertyAttribute]
public List`1<EndpointEventBus> EventBuses { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public ReplicationConfig ReplicationConfig { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    public RoutingConfig RoutingConfig { get; public set; }
    public EndpointState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_EndpointId();
    public void set_EndpointId(string value);
    internal bool IsSetEndpointId();
    public string get_EndpointUrl();
    public void set_EndpointUrl(string value);
    internal bool IsSetEndpointUrl();
    public List`1<EndpointEventBus> get_EventBuses();
    public void set_EventBuses(List`1<EndpointEventBus> value);
    internal bool IsSetEventBuses();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public ReplicationConfig get_ReplicationConfig();
    public void set_ReplicationConfig(ReplicationConfig value);
    internal bool IsSetReplicationConfig();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public RoutingConfig get_RoutingConfig();
    public void set_RoutingConfig(RoutingConfig value);
    internal bool IsSetRoutingConfig();
    public EndpointState get_State();
    public void set_State(EndpointState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.EndpointEventBus : object {
    private string _eventBusArn;
    [AWSPropertyAttribute]
public string EventBusArn { get; public set; }
    public string get_EventBusArn();
    public void set_EventBusArn(string value);
    internal bool IsSetEventBusArn();
}
public class Amazon.EventBridge.Model.EventBus : object {
    private string _arn;
    private Nullable`1<DateTime> _creationTime;
    private string _description;
    private Nullable`1<DateTime> _lastModifiedTime;
    private string _name;
    private string _policy;
    public string Arn { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    public string Name { get; public set; }
    public string Policy { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
}
public class Amazon.EventBridge.Model.EventSource : object {
    private string _arn;
    private string _createdBy;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _expirationTime;
    private string _name;
    private EventSourceState _state;
    public string Arn { get; public set; }
    public string CreatedBy { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> ExpirationTime { get; public set; }
    public string Name { get; public set; }
    public EventSourceState State { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_CreatedBy();
    public void set_CreatedBy(string value);
    internal bool IsSetCreatedBy();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_ExpirationTime();
    public void set_ExpirationTime(Nullable`1<DateTime> value);
    internal bool IsSetExpirationTime();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public EventSourceState get_State();
    public void set_State(EventSourceState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.FailoverConfig : object {
    private Primary _primary;
    private Secondary _secondary;
    [AWSPropertyAttribute]
public Primary Primary { get; public set; }
    [AWSPropertyAttribute]
public Secondary Secondary { get; public set; }
    public Primary get_Primary();
    public void set_Primary(Primary value);
    internal bool IsSetPrimary();
    public Secondary get_Secondary();
    public void set_Secondary(Secondary value);
    internal bool IsSetSecondary();
}
public class Amazon.EventBridge.Model.HttpParameters : object {
    private Dictionary`2<string, string> _headerParameters;
    private List`1<string> _pathParameterValues;
    private Dictionary`2<string, string> _queryStringParameters;
    public Dictionary`2<string, string> HeaderParameters { get; public set; }
    public List`1<string> PathParameterValues { get; public set; }
    public Dictionary`2<string, string> QueryStringParameters { get; public set; }
    public Dictionary`2<string, string> get_HeaderParameters();
    public void set_HeaderParameters(Dictionary`2<string, string> value);
    internal bool IsSetHeaderParameters();
    public List`1<string> get_PathParameterValues();
    public void set_PathParameterValues(List`1<string> value);
    internal bool IsSetPathParameterValues();
    public Dictionary`2<string, string> get_QueryStringParameters();
    public void set_QueryStringParameters(Dictionary`2<string, string> value);
    internal bool IsSetQueryStringParameters();
}
public class Amazon.EventBridge.Model.IllegalStatusException : AmazonEventBridgeException {
    public IllegalStatusException(string message);
    public IllegalStatusException(string message, Exception innerException);
    public IllegalStatusException(Exception innerException);
    public IllegalStatusException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public IllegalStatusException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected IllegalStatusException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.InputTransformer : object {
    private Dictionary`2<string, string> _inputPathsMap;
    private string _inputTemplate;
    [AWSPropertyAttribute]
public Dictionary`2<string, string> InputPathsMap { get; public set; }
    [AWSPropertyAttribute]
public string InputTemplate { get; public set; }
    public Dictionary`2<string, string> get_InputPathsMap();
    public void set_InputPathsMap(Dictionary`2<string, string> value);
    internal bool IsSetInputPathsMap();
    public string get_InputTemplate();
    public void set_InputTemplate(string value);
    internal bool IsSetInputTemplate();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceRequestMarshaller : object {
    private static ActivateEventSourceRequestMarshaller _instance;
    public static ActivateEventSourceRequestMarshaller Instance { get; }
    private static ActivateEventSourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ActivateEventSourceRequest publicRequest);
    internal static ActivateEventSourceRequestMarshaller GetInstance();
    public static ActivateEventSourceRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ActivateEventSourceResponseUnmarshaller _instance;
    public static ActivateEventSourceResponseUnmarshaller Instance { get; }
    private static ActivateEventSourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ActivateEventSourceResponseUnmarshaller GetInstance();
    public static ActivateEventSourceResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ApiDestinationUnmarshaller : object {
    private static ApiDestinationUnmarshaller _instance;
    public static ApiDestinationUnmarshaller Instance { get; }
    private static ApiDestinationUnmarshaller();
    private sealed virtual override ApiDestination Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ApiDestination,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ApiDestination Unmarshall(JsonUnmarshallerContext context);
    public static ApiDestinationUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.AppSyncParametersMarshaller : object {
    public static AppSyncParametersMarshaller Instance;
    private static AppSyncParametersMarshaller();
    public sealed virtual void Marshall(AppSyncParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.AppSyncParametersUnmarshaller : object {
    private static AppSyncParametersUnmarshaller _instance;
    public static AppSyncParametersUnmarshaller Instance { get; }
    private static AppSyncParametersUnmarshaller();
    private sealed virtual override AppSyncParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.AppSyncParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AppSyncParameters Unmarshall(JsonUnmarshallerContext context);
    public static AppSyncParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ArchiveUnmarshaller : object {
    private static ArchiveUnmarshaller _instance;
    public static ArchiveUnmarshaller Instance { get; }
    private static ArchiveUnmarshaller();
    private sealed virtual override Archive Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.Archive,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Archive Unmarshall(JsonUnmarshallerContext context);
    public static ArchiveUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.AwsVpcConfigurationMarshaller : object {
    public static AwsVpcConfigurationMarshaller Instance;
    private static AwsVpcConfigurationMarshaller();
    public sealed virtual void Marshall(AwsVpcConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.AwsVpcConfigurationUnmarshaller : object {
    private static AwsVpcConfigurationUnmarshaller _instance;
    public static AwsVpcConfigurationUnmarshaller Instance { get; }
    private static AwsVpcConfigurationUnmarshaller();
    private sealed virtual override AwsVpcConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.AwsVpcConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AwsVpcConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static AwsVpcConfigurationUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchArrayPropertiesMarshaller : object {
    public static BatchArrayPropertiesMarshaller Instance;
    private static BatchArrayPropertiesMarshaller();
    public sealed virtual void Marshall(BatchArrayProperties requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchArrayPropertiesUnmarshaller : object {
    private static BatchArrayPropertiesUnmarshaller _instance;
    public static BatchArrayPropertiesUnmarshaller Instance { get; }
    private static BatchArrayPropertiesUnmarshaller();
    private sealed virtual override BatchArrayProperties Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.BatchArrayProperties,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BatchArrayProperties Unmarshall(JsonUnmarshallerContext context);
    public static BatchArrayPropertiesUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchParametersMarshaller : object {
    public static BatchParametersMarshaller Instance;
    private static BatchParametersMarshaller();
    public sealed virtual void Marshall(BatchParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchParametersUnmarshaller : object {
    private static BatchParametersUnmarshaller _instance;
    public static BatchParametersUnmarshaller Instance { get; }
    private static BatchParametersUnmarshaller();
    private sealed virtual override BatchParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.BatchParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BatchParameters Unmarshall(JsonUnmarshallerContext context);
    public static BatchParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchRetryStrategyMarshaller : object {
    public static BatchRetryStrategyMarshaller Instance;
    private static BatchRetryStrategyMarshaller();
    public sealed virtual void Marshall(BatchRetryStrategy requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchRetryStrategyUnmarshaller : object {
    private static BatchRetryStrategyUnmarshaller _instance;
    public static BatchRetryStrategyUnmarshaller Instance { get; }
    private static BatchRetryStrategyUnmarshaller();
    private sealed virtual override BatchRetryStrategy Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.BatchRetryStrategy,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BatchRetryStrategy Unmarshall(JsonUnmarshallerContext context);
    public static BatchRetryStrategyUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CancelReplayRequestMarshaller : object {
    private static CancelReplayRequestMarshaller _instance;
    public static CancelReplayRequestMarshaller Instance { get; }
    private static CancelReplayRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CancelReplayRequest publicRequest);
    internal static CancelReplayRequestMarshaller GetInstance();
    public static CancelReplayRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CancelReplayResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CancelReplayResponseUnmarshaller _instance;
    public static CancelReplayResponseUnmarshaller Instance { get; }
    private static CancelReplayResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CancelReplayResponseUnmarshaller GetInstance();
    public static CancelReplayResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CapacityProviderStrategyItemMarshaller : object {
    public static CapacityProviderStrategyItemMarshaller Instance;
    private static CapacityProviderStrategyItemMarshaller();
    public sealed virtual void Marshall(CapacityProviderStrategyItem requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CapacityProviderStrategyItemUnmarshaller : object {
    private static CapacityProviderStrategyItemUnmarshaller _instance;
    public static CapacityProviderStrategyItemUnmarshaller Instance { get; }
    private static CapacityProviderStrategyItemUnmarshaller();
    private sealed virtual override CapacityProviderStrategyItem Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.CapacityProviderStrategyItem,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CapacityProviderStrategyItem Unmarshall(JsonUnmarshallerContext context);
    public static CapacityProviderStrategyItemUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConcurrentModificationExceptionUnmarshaller : object {
    private static ConcurrentModificationExceptionUnmarshaller _instance;
    public static ConcurrentModificationExceptionUnmarshaller Instance { get; }
    private static ConcurrentModificationExceptionUnmarshaller();
    public sealed virtual ConcurrentModificationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ConcurrentModificationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConcurrentModificationExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConditionMarshaller : object {
    public static ConditionMarshaller Instance;
    private static ConditionMarshaller();
    public sealed virtual void Marshall(Condition requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionApiKeyAuthResponseParametersUnmarshaller : object {
    private static ConnectionApiKeyAuthResponseParametersUnmarshaller _instance;
    public static ConnectionApiKeyAuthResponseParametersUnmarshaller Instance { get; }
    private static ConnectionApiKeyAuthResponseParametersUnmarshaller();
    private sealed virtual override ConnectionApiKeyAuthResponseParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ConnectionApiKeyAuthResponseParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionApiKeyAuthResponseParameters Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionApiKeyAuthResponseParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionAuthResponseParametersUnmarshaller : object {
    private static ConnectionAuthResponseParametersUnmarshaller _instance;
    public static ConnectionAuthResponseParametersUnmarshaller Instance { get; }
    private static ConnectionAuthResponseParametersUnmarshaller();
    private sealed virtual override ConnectionAuthResponseParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ConnectionAuthResponseParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionAuthResponseParameters Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionAuthResponseParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionBasicAuthResponseParametersUnmarshaller : object {
    private static ConnectionBasicAuthResponseParametersUnmarshaller _instance;
    public static ConnectionBasicAuthResponseParametersUnmarshaller Instance { get; }
    private static ConnectionBasicAuthResponseParametersUnmarshaller();
    private sealed virtual override ConnectionBasicAuthResponseParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ConnectionBasicAuthResponseParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionBasicAuthResponseParameters Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionBasicAuthResponseParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionBodyParameterMarshaller : object {
    public static ConnectionBodyParameterMarshaller Instance;
    private static ConnectionBodyParameterMarshaller();
    public sealed virtual void Marshall(ConnectionBodyParameter requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionBodyParameterUnmarshaller : object {
    private static ConnectionBodyParameterUnmarshaller _instance;
    public static ConnectionBodyParameterUnmarshaller Instance { get; }
    private static ConnectionBodyParameterUnmarshaller();
    private sealed virtual override ConnectionBodyParameter Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ConnectionBodyParameter,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionBodyParameter Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionBodyParameterUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionHeaderParameterMarshaller : object {
    public static ConnectionHeaderParameterMarshaller Instance;
    private static ConnectionHeaderParameterMarshaller();
    public sealed virtual void Marshall(ConnectionHeaderParameter requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionHeaderParameterUnmarshaller : object {
    private static ConnectionHeaderParameterUnmarshaller _instance;
    public static ConnectionHeaderParameterUnmarshaller Instance { get; }
    private static ConnectionHeaderParameterUnmarshaller();
    private sealed virtual override ConnectionHeaderParameter Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ConnectionHeaderParameter,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionHeaderParameter Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionHeaderParameterUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionHttpParametersMarshaller : object {
    public static ConnectionHttpParametersMarshaller Instance;
    private static ConnectionHttpParametersMarshaller();
    public sealed virtual void Marshall(ConnectionHttpParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionHttpParametersUnmarshaller : object {
    private static ConnectionHttpParametersUnmarshaller _instance;
    public static ConnectionHttpParametersUnmarshaller Instance { get; }
    private static ConnectionHttpParametersUnmarshaller();
    private sealed virtual override ConnectionHttpParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ConnectionHttpParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionHttpParameters Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionHttpParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionOAuthClientResponseParametersUnmarshaller : object {
    private static ConnectionOAuthClientResponseParametersUnmarshaller _instance;
    public static ConnectionOAuthClientResponseParametersUnmarshaller Instance { get; }
    private static ConnectionOAuthClientResponseParametersUnmarshaller();
    private sealed virtual override ConnectionOAuthClientResponseParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ConnectionOAuthClientResponseParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionOAuthClientResponseParameters Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionOAuthClientResponseParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionOAuthResponseParametersUnmarshaller : object {
    private static ConnectionOAuthResponseParametersUnmarshaller _instance;
    public static ConnectionOAuthResponseParametersUnmarshaller Instance { get; }
    private static ConnectionOAuthResponseParametersUnmarshaller();
    private sealed virtual override ConnectionOAuthResponseParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ConnectionOAuthResponseParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionOAuthResponseParameters Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionOAuthResponseParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionQueryStringParameterMarshaller : object {
    public static ConnectionQueryStringParameterMarshaller Instance;
    private static ConnectionQueryStringParameterMarshaller();
    public sealed virtual void Marshall(ConnectionQueryStringParameter requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionQueryStringParameterUnmarshaller : object {
    private static ConnectionQueryStringParameterUnmarshaller _instance;
    public static ConnectionQueryStringParameterUnmarshaller Instance { get; }
    private static ConnectionQueryStringParameterUnmarshaller();
    private sealed virtual override ConnectionQueryStringParameter Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ConnectionQueryStringParameter,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConnectionQueryStringParameter Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionQueryStringParameterUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ConnectionUnmarshaller : object {
    private static ConnectionUnmarshaller _instance;
    public static ConnectionUnmarshaller Instance { get; }
    private static ConnectionUnmarshaller();
    private sealed virtual override Connection Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.Connection,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Connection Unmarshall(JsonUnmarshallerContext context);
    public static ConnectionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateApiDestinationRequestMarshaller : object {
    private static CreateApiDestinationRequestMarshaller _instance;
    public static CreateApiDestinationRequestMarshaller Instance { get; }
    private static CreateApiDestinationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateApiDestinationRequest publicRequest);
    internal static CreateApiDestinationRequestMarshaller GetInstance();
    public static CreateApiDestinationRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateApiDestinationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateApiDestinationResponseUnmarshaller _instance;
    public static CreateApiDestinationResponseUnmarshaller Instance { get; }
    private static CreateApiDestinationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateApiDestinationResponseUnmarshaller GetInstance();
    public static CreateApiDestinationResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateArchiveRequestMarshaller : object {
    private static CreateArchiveRequestMarshaller _instance;
    public static CreateArchiveRequestMarshaller Instance { get; }
    private static CreateArchiveRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateArchiveRequest publicRequest);
    internal static CreateArchiveRequestMarshaller GetInstance();
    public static CreateArchiveRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateArchiveResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateArchiveResponseUnmarshaller _instance;
    public static CreateArchiveResponseUnmarshaller Instance { get; }
    private static CreateArchiveResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateArchiveResponseUnmarshaller GetInstance();
    public static CreateArchiveResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateConnectionApiKeyAuthRequestParametersMarshaller : object {
    public static CreateConnectionApiKeyAuthRequestParametersMarshaller Instance;
    private static CreateConnectionApiKeyAuthRequestParametersMarshaller();
    public sealed virtual void Marshall(CreateConnectionApiKeyAuthRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateConnectionAuthRequestParametersMarshaller : object {
    public static CreateConnectionAuthRequestParametersMarshaller Instance;
    private static CreateConnectionAuthRequestParametersMarshaller();
    public sealed virtual void Marshall(CreateConnectionAuthRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateConnectionBasicAuthRequestParametersMarshaller : object {
    public static CreateConnectionBasicAuthRequestParametersMarshaller Instance;
    private static CreateConnectionBasicAuthRequestParametersMarshaller();
    public sealed virtual void Marshall(CreateConnectionBasicAuthRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateConnectionOAuthClientRequestParametersMarshaller : object {
    public static CreateConnectionOAuthClientRequestParametersMarshaller Instance;
    private static CreateConnectionOAuthClientRequestParametersMarshaller();
    public sealed virtual void Marshall(CreateConnectionOAuthClientRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateConnectionOAuthRequestParametersMarshaller : object {
    public static CreateConnectionOAuthRequestParametersMarshaller Instance;
    private static CreateConnectionOAuthRequestParametersMarshaller();
    public sealed virtual void Marshall(CreateConnectionOAuthRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateConnectionRequestMarshaller : object {
    private static CreateConnectionRequestMarshaller _instance;
    public static CreateConnectionRequestMarshaller Instance { get; }
    private static CreateConnectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateConnectionRequest publicRequest);
    internal static CreateConnectionRequestMarshaller GetInstance();
    public static CreateConnectionRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateConnectionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateConnectionResponseUnmarshaller _instance;
    public static CreateConnectionResponseUnmarshaller Instance { get; }
    private static CreateConnectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateConnectionResponseUnmarshaller GetInstance();
    public static CreateConnectionResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEndpointRequestMarshaller : object {
    private static CreateEndpointRequestMarshaller _instance;
    public static CreateEndpointRequestMarshaller Instance { get; }
    private static CreateEndpointRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateEndpointRequest publicRequest);
    internal static CreateEndpointRequestMarshaller GetInstance();
    public static CreateEndpointRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEndpointResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateEndpointResponseUnmarshaller _instance;
    public static CreateEndpointResponseUnmarshaller Instance { get; }
    private static CreateEndpointResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateEndpointResponseUnmarshaller GetInstance();
    public static CreateEndpointResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusRequestMarshaller : object {
    private static CreateEventBusRequestMarshaller _instance;
    public static CreateEventBusRequestMarshaller Instance { get; }
    private static CreateEventBusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateEventBusRequest publicRequest);
    internal static CreateEventBusRequestMarshaller GetInstance();
    public static CreateEventBusRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateEventBusResponseUnmarshaller _instance;
    public static CreateEventBusResponseUnmarshaller Instance { get; }
    private static CreateEventBusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateEventBusResponseUnmarshaller GetInstance();
    public static CreateEventBusResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceRequestMarshaller : object {
    private static CreatePartnerEventSourceRequestMarshaller _instance;
    public static CreatePartnerEventSourceRequestMarshaller Instance { get; }
    private static CreatePartnerEventSourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreatePartnerEventSourceRequest publicRequest);
    internal static CreatePartnerEventSourceRequestMarshaller GetInstance();
    public static CreatePartnerEventSourceRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreatePartnerEventSourceResponseUnmarshaller _instance;
    public static CreatePartnerEventSourceResponseUnmarshaller Instance { get; }
    private static CreatePartnerEventSourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreatePartnerEventSourceResponseUnmarshaller GetInstance();
    public static CreatePartnerEventSourceResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceRequestMarshaller : object {
    private static DeactivateEventSourceRequestMarshaller _instance;
    public static DeactivateEventSourceRequestMarshaller Instance { get; }
    private static DeactivateEventSourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeactivateEventSourceRequest publicRequest);
    internal static DeactivateEventSourceRequestMarshaller GetInstance();
    public static DeactivateEventSourceRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeactivateEventSourceResponseUnmarshaller _instance;
    public static DeactivateEventSourceResponseUnmarshaller Instance { get; }
    private static DeactivateEventSourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeactivateEventSourceResponseUnmarshaller GetInstance();
    public static DeactivateEventSourceResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeadLetterConfigMarshaller : object {
    public static DeadLetterConfigMarshaller Instance;
    private static DeadLetterConfigMarshaller();
    public sealed virtual void Marshall(DeadLetterConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeadLetterConfigUnmarshaller : object {
    private static DeadLetterConfigUnmarshaller _instance;
    public static DeadLetterConfigUnmarshaller Instance { get; }
    private static DeadLetterConfigUnmarshaller();
    private sealed virtual override DeadLetterConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.DeadLetterConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeadLetterConfig Unmarshall(JsonUnmarshallerContext context);
    public static DeadLetterConfigUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeauthorizeConnectionRequestMarshaller : object {
    private static DeauthorizeConnectionRequestMarshaller _instance;
    public static DeauthorizeConnectionRequestMarshaller Instance { get; }
    private static DeauthorizeConnectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeauthorizeConnectionRequest publicRequest);
    internal static DeauthorizeConnectionRequestMarshaller GetInstance();
    public static DeauthorizeConnectionRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeauthorizeConnectionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeauthorizeConnectionResponseUnmarshaller _instance;
    public static DeauthorizeConnectionResponseUnmarshaller Instance { get; }
    private static DeauthorizeConnectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeauthorizeConnectionResponseUnmarshaller GetInstance();
    public static DeauthorizeConnectionResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteApiDestinationRequestMarshaller : object {
    private static DeleteApiDestinationRequestMarshaller _instance;
    public static DeleteApiDestinationRequestMarshaller Instance { get; }
    private static DeleteApiDestinationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteApiDestinationRequest publicRequest);
    internal static DeleteApiDestinationRequestMarshaller GetInstance();
    public static DeleteApiDestinationRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteApiDestinationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteApiDestinationResponseUnmarshaller _instance;
    public static DeleteApiDestinationResponseUnmarshaller Instance { get; }
    private static DeleteApiDestinationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteApiDestinationResponseUnmarshaller GetInstance();
    public static DeleteApiDestinationResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteArchiveRequestMarshaller : object {
    private static DeleteArchiveRequestMarshaller _instance;
    public static DeleteArchiveRequestMarshaller Instance { get; }
    private static DeleteArchiveRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteArchiveRequest publicRequest);
    internal static DeleteArchiveRequestMarshaller GetInstance();
    public static DeleteArchiveRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteArchiveResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteArchiveResponseUnmarshaller _instance;
    public static DeleteArchiveResponseUnmarshaller Instance { get; }
    private static DeleteArchiveResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteArchiveResponseUnmarshaller GetInstance();
    public static DeleteArchiveResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteConnectionRequestMarshaller : object {
    private static DeleteConnectionRequestMarshaller _instance;
    public static DeleteConnectionRequestMarshaller Instance { get; }
    private static DeleteConnectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteConnectionRequest publicRequest);
    internal static DeleteConnectionRequestMarshaller GetInstance();
    public static DeleteConnectionRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteConnectionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteConnectionResponseUnmarshaller _instance;
    public static DeleteConnectionResponseUnmarshaller Instance { get; }
    private static DeleteConnectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteConnectionResponseUnmarshaller GetInstance();
    public static DeleteConnectionResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEndpointRequestMarshaller : object {
    private static DeleteEndpointRequestMarshaller _instance;
    public static DeleteEndpointRequestMarshaller Instance { get; }
    private static DeleteEndpointRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteEndpointRequest publicRequest);
    internal static DeleteEndpointRequestMarshaller GetInstance();
    public static DeleteEndpointRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEndpointResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteEndpointResponseUnmarshaller _instance;
    public static DeleteEndpointResponseUnmarshaller Instance { get; }
    private static DeleteEndpointResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteEndpointResponseUnmarshaller GetInstance();
    public static DeleteEndpointResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusRequestMarshaller : object {
    private static DeleteEventBusRequestMarshaller _instance;
    public static DeleteEventBusRequestMarshaller Instance { get; }
    private static DeleteEventBusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteEventBusRequest publicRequest);
    internal static DeleteEventBusRequestMarshaller GetInstance();
    public static DeleteEventBusRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteEventBusResponseUnmarshaller _instance;
    public static DeleteEventBusResponseUnmarshaller Instance { get; }
    private static DeleteEventBusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteEventBusResponseUnmarshaller GetInstance();
    public static DeleteEventBusResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceRequestMarshaller : object {
    private static DeletePartnerEventSourceRequestMarshaller _instance;
    public static DeletePartnerEventSourceRequestMarshaller Instance { get; }
    private static DeletePartnerEventSourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeletePartnerEventSourceRequest publicRequest);
    internal static DeletePartnerEventSourceRequestMarshaller GetInstance();
    public static DeletePartnerEventSourceRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeletePartnerEventSourceResponseUnmarshaller _instance;
    public static DeletePartnerEventSourceResponseUnmarshaller Instance { get; }
    private static DeletePartnerEventSourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeletePartnerEventSourceResponseUnmarshaller GetInstance();
    public static DeletePartnerEventSourceResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleRequestMarshaller : object {
    private static DeleteRuleRequestMarshaller _instance;
    public static DeleteRuleRequestMarshaller Instance { get; }
    private static DeleteRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteRuleRequest publicRequest);
    internal static DeleteRuleRequestMarshaller GetInstance();
    public static DeleteRuleRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteRuleResponseUnmarshaller _instance;
    public static DeleteRuleResponseUnmarshaller Instance { get; }
    private static DeleteRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteRuleResponseUnmarshaller GetInstance();
    public static DeleteRuleResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeApiDestinationRequestMarshaller : object {
    private static DescribeApiDestinationRequestMarshaller _instance;
    public static DescribeApiDestinationRequestMarshaller Instance { get; }
    private static DescribeApiDestinationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeApiDestinationRequest publicRequest);
    internal static DescribeApiDestinationRequestMarshaller GetInstance();
    public static DescribeApiDestinationRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeApiDestinationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeApiDestinationResponseUnmarshaller _instance;
    public static DescribeApiDestinationResponseUnmarshaller Instance { get; }
    private static DescribeApiDestinationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeApiDestinationResponseUnmarshaller GetInstance();
    public static DescribeApiDestinationResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeArchiveRequestMarshaller : object {
    private static DescribeArchiveRequestMarshaller _instance;
    public static DescribeArchiveRequestMarshaller Instance { get; }
    private static DescribeArchiveRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeArchiveRequest publicRequest);
    internal static DescribeArchiveRequestMarshaller GetInstance();
    public static DescribeArchiveRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeArchiveResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeArchiveResponseUnmarshaller _instance;
    public static DescribeArchiveResponseUnmarshaller Instance { get; }
    private static DescribeArchiveResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeArchiveResponseUnmarshaller GetInstance();
    public static DescribeArchiveResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeConnectionRequestMarshaller : object {
    private static DescribeConnectionRequestMarshaller _instance;
    public static DescribeConnectionRequestMarshaller Instance { get; }
    private static DescribeConnectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeConnectionRequest publicRequest);
    internal static DescribeConnectionRequestMarshaller GetInstance();
    public static DescribeConnectionRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeConnectionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeConnectionResponseUnmarshaller _instance;
    public static DescribeConnectionResponseUnmarshaller Instance { get; }
    private static DescribeConnectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeConnectionResponseUnmarshaller GetInstance();
    public static DescribeConnectionResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEndpointRequestMarshaller : object {
    private static DescribeEndpointRequestMarshaller _instance;
    public static DescribeEndpointRequestMarshaller Instance { get; }
    private static DescribeEndpointRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEndpointRequest publicRequest);
    internal static DescribeEndpointRequestMarshaller GetInstance();
    public static DescribeEndpointRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEndpointResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeEndpointResponseUnmarshaller _instance;
    public static DescribeEndpointResponseUnmarshaller Instance { get; }
    private static DescribeEndpointResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEndpointResponseUnmarshaller GetInstance();
    public static DescribeEndpointResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusRequestMarshaller : object {
    private static DescribeEventBusRequestMarshaller _instance;
    public static DescribeEventBusRequestMarshaller Instance { get; }
    private static DescribeEventBusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEventBusRequest publicRequest);
    internal static DescribeEventBusRequestMarshaller GetInstance();
    public static DescribeEventBusRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeEventBusResponseUnmarshaller _instance;
    public static DescribeEventBusResponseUnmarshaller Instance { get; }
    private static DescribeEventBusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEventBusResponseUnmarshaller GetInstance();
    public static DescribeEventBusResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceRequestMarshaller : object {
    private static DescribeEventSourceRequestMarshaller _instance;
    public static DescribeEventSourceRequestMarshaller Instance { get; }
    private static DescribeEventSourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEventSourceRequest publicRequest);
    internal static DescribeEventSourceRequestMarshaller GetInstance();
    public static DescribeEventSourceRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeEventSourceResponseUnmarshaller _instance;
    public static DescribeEventSourceResponseUnmarshaller Instance { get; }
    private static DescribeEventSourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEventSourceResponseUnmarshaller GetInstance();
    public static DescribeEventSourceResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceRequestMarshaller : object {
    private static DescribePartnerEventSourceRequestMarshaller _instance;
    public static DescribePartnerEventSourceRequestMarshaller Instance { get; }
    private static DescribePartnerEventSourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribePartnerEventSourceRequest publicRequest);
    internal static DescribePartnerEventSourceRequestMarshaller GetInstance();
    public static DescribePartnerEventSourceRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribePartnerEventSourceResponseUnmarshaller _instance;
    public static DescribePartnerEventSourceResponseUnmarshaller Instance { get; }
    private static DescribePartnerEventSourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribePartnerEventSourceResponseUnmarshaller GetInstance();
    public static DescribePartnerEventSourceResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeReplayRequestMarshaller : object {
    private static DescribeReplayRequestMarshaller _instance;
    public static DescribeReplayRequestMarshaller Instance { get; }
    private static DescribeReplayRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeReplayRequest publicRequest);
    internal static DescribeReplayRequestMarshaller GetInstance();
    public static DescribeReplayRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeReplayResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeReplayResponseUnmarshaller _instance;
    public static DescribeReplayResponseUnmarshaller Instance { get; }
    private static DescribeReplayResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeReplayResponseUnmarshaller GetInstance();
    public static DescribeReplayResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleRequestMarshaller : object {
    private static DescribeRuleRequestMarshaller _instance;
    public static DescribeRuleRequestMarshaller Instance { get; }
    private static DescribeRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeRuleRequest publicRequest);
    internal static DescribeRuleRequestMarshaller GetInstance();
    public static DescribeRuleRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeRuleResponseUnmarshaller _instance;
    public static DescribeRuleResponseUnmarshaller Instance { get; }
    private static DescribeRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeRuleResponseUnmarshaller GetInstance();
    public static DescribeRuleResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleRequestMarshaller : object {
    private static DisableRuleRequestMarshaller _instance;
    public static DisableRuleRequestMarshaller Instance { get; }
    private static DisableRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisableRuleRequest publicRequest);
    internal static DisableRuleRequestMarshaller GetInstance();
    public static DisableRuleRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DisableRuleResponseUnmarshaller _instance;
    public static DisableRuleResponseUnmarshaller Instance { get; }
    private static DisableRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisableRuleResponseUnmarshaller GetInstance();
    public static DisableRuleResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.EcsParametersMarshaller : object {
    public static EcsParametersMarshaller Instance;
    private static EcsParametersMarshaller();
    public sealed virtual void Marshall(EcsParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.EcsParametersUnmarshaller : object {
    private static EcsParametersUnmarshaller _instance;
    public static EcsParametersUnmarshaller Instance { get; }
    private static EcsParametersUnmarshaller();
    private sealed virtual override EcsParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.EcsParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EcsParameters Unmarshall(JsonUnmarshallerContext context);
    public static EcsParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleRequestMarshaller : object {
    private static EnableRuleRequestMarshaller _instance;
    public static EnableRuleRequestMarshaller Instance { get; }
    private static EnableRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableRuleRequest publicRequest);
    internal static EnableRuleRequestMarshaller GetInstance();
    public static EnableRuleRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static EnableRuleResponseUnmarshaller _instance;
    public static EnableRuleResponseUnmarshaller Instance { get; }
    private static EnableRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableRuleResponseUnmarshaller GetInstance();
    public static EnableRuleResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.EndpointEventBusMarshaller : object {
    public static EndpointEventBusMarshaller Instance;
    private static EndpointEventBusMarshaller();
    public sealed virtual void Marshall(EndpointEventBus requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.EndpointEventBusUnmarshaller : object {
    private static EndpointEventBusUnmarshaller _instance;
    public static EndpointEventBusUnmarshaller Instance { get; }
    private static EndpointEventBusUnmarshaller();
    private sealed virtual override EndpointEventBus Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.EndpointEventBus,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointEventBus Unmarshall(JsonUnmarshallerContext context);
    public static EndpointEventBusUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.EndpointUnmarshaller : object {
    private static EndpointUnmarshaller _instance;
    public static EndpointUnmarshaller Instance { get; }
    private static EndpointUnmarshaller();
    private sealed virtual override Endpoint Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.Endpoint,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Endpoint Unmarshall(JsonUnmarshallerContext context);
    public static EndpointUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.EventBusUnmarshaller : object {
    private static EventBusUnmarshaller _instance;
    public static EventBusUnmarshaller Instance { get; }
    private static EventBusUnmarshaller();
    private sealed virtual override EventBus Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.EventBus,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EventBus Unmarshall(JsonUnmarshallerContext context);
    public static EventBusUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.EventSourceUnmarshaller : object {
    private static EventSourceUnmarshaller _instance;
    public static EventSourceUnmarshaller Instance { get; }
    private static EventSourceUnmarshaller();
    private sealed virtual override EventSource Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.EventSource,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EventSource Unmarshall(JsonUnmarshallerContext context);
    public static EventSourceUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.FailoverConfigMarshaller : object {
    public static FailoverConfigMarshaller Instance;
    private static FailoverConfigMarshaller();
    public sealed virtual void Marshall(FailoverConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.FailoverConfigUnmarshaller : object {
    private static FailoverConfigUnmarshaller _instance;
    public static FailoverConfigUnmarshaller Instance { get; }
    private static FailoverConfigUnmarshaller();
    private sealed virtual override FailoverConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.FailoverConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FailoverConfig Unmarshall(JsonUnmarshallerContext context);
    public static FailoverConfigUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.HttpParametersMarshaller : object {
    public static HttpParametersMarshaller Instance;
    private static HttpParametersMarshaller();
    public sealed virtual void Marshall(HttpParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.HttpParametersUnmarshaller : object {
    private static HttpParametersUnmarshaller _instance;
    public static HttpParametersUnmarshaller Instance { get; }
    private static HttpParametersUnmarshaller();
    private sealed virtual override HttpParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.HttpParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HttpParameters Unmarshall(JsonUnmarshallerContext context);
    public static HttpParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.IllegalStatusExceptionUnmarshaller : object {
    private static IllegalStatusExceptionUnmarshaller _instance;
    public static IllegalStatusExceptionUnmarshaller Instance { get; }
    private static IllegalStatusExceptionUnmarshaller();
    public sealed virtual IllegalStatusException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual IllegalStatusException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static IllegalStatusExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.InputTransformerMarshaller : object {
    public static InputTransformerMarshaller Instance;
    private static InputTransformerMarshaller();
    public sealed virtual void Marshall(InputTransformer requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.InputTransformerUnmarshaller : object {
    private static InputTransformerUnmarshaller _instance;
    public static InputTransformerUnmarshaller Instance { get; }
    private static InputTransformerUnmarshaller();
    private sealed virtual override InputTransformer Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.InputTransformer,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InputTransformer Unmarshall(JsonUnmarshallerContext context);
    public static InputTransformerUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.InternalExceptionUnmarshaller : object {
    private static InternalExceptionUnmarshaller _instance;
    public static InternalExceptionUnmarshaller Instance { get; }
    private static InternalExceptionUnmarshaller();
    public sealed virtual InternalException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InternalException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InternalExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.InvalidEventPatternExceptionUnmarshaller : object {
    private static InvalidEventPatternExceptionUnmarshaller _instance;
    public static InvalidEventPatternExceptionUnmarshaller Instance { get; }
    private static InvalidEventPatternExceptionUnmarshaller();
    public sealed virtual InvalidEventPatternException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidEventPatternException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidEventPatternExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.InvalidStateExceptionUnmarshaller : object {
    private static InvalidStateExceptionUnmarshaller _instance;
    public static InvalidStateExceptionUnmarshaller Instance { get; }
    private static InvalidStateExceptionUnmarshaller();
    public sealed virtual InvalidStateException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidStateException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidStateExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.KinesisParametersMarshaller : object {
    public static KinesisParametersMarshaller Instance;
    private static KinesisParametersMarshaller();
    public sealed virtual void Marshall(KinesisParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.KinesisParametersUnmarshaller : object {
    private static KinesisParametersUnmarshaller _instance;
    public static KinesisParametersUnmarshaller Instance { get; }
    private static KinesisParametersUnmarshaller();
    private sealed virtual override KinesisParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.KinesisParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KinesisParameters Unmarshall(JsonUnmarshallerContext context);
    public static KinesisParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller : object {
    private static LimitExceededExceptionUnmarshaller _instance;
    public static LimitExceededExceptionUnmarshaller Instance { get; }
    private static LimitExceededExceptionUnmarshaller();
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListApiDestinationsRequestMarshaller : object {
    private static ListApiDestinationsRequestMarshaller _instance;
    public static ListApiDestinationsRequestMarshaller Instance { get; }
    private static ListApiDestinationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListApiDestinationsRequest publicRequest);
    internal static ListApiDestinationsRequestMarshaller GetInstance();
    public static ListApiDestinationsRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListApiDestinationsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListApiDestinationsResponseUnmarshaller _instance;
    public static ListApiDestinationsResponseUnmarshaller Instance { get; }
    private static ListApiDestinationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListApiDestinationsResponseUnmarshaller GetInstance();
    public static ListApiDestinationsResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListArchivesRequestMarshaller : object {
    private static ListArchivesRequestMarshaller _instance;
    public static ListArchivesRequestMarshaller Instance { get; }
    private static ListArchivesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListArchivesRequest publicRequest);
    internal static ListArchivesRequestMarshaller GetInstance();
    public static ListArchivesRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListArchivesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListArchivesResponseUnmarshaller _instance;
    public static ListArchivesResponseUnmarshaller Instance { get; }
    private static ListArchivesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListArchivesResponseUnmarshaller GetInstance();
    public static ListArchivesResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListConnectionsRequestMarshaller : object {
    private static ListConnectionsRequestMarshaller _instance;
    public static ListConnectionsRequestMarshaller Instance { get; }
    private static ListConnectionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListConnectionsRequest publicRequest);
    internal static ListConnectionsRequestMarshaller GetInstance();
    public static ListConnectionsRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListConnectionsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListConnectionsResponseUnmarshaller _instance;
    public static ListConnectionsResponseUnmarshaller Instance { get; }
    private static ListConnectionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListConnectionsResponseUnmarshaller GetInstance();
    public static ListConnectionsResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEndpointsRequestMarshaller : object {
    private static ListEndpointsRequestMarshaller _instance;
    public static ListEndpointsRequestMarshaller Instance { get; }
    private static ListEndpointsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListEndpointsRequest publicRequest);
    internal static ListEndpointsRequestMarshaller GetInstance();
    public static ListEndpointsRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEndpointsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListEndpointsResponseUnmarshaller _instance;
    public static ListEndpointsResponseUnmarshaller Instance { get; }
    private static ListEndpointsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListEndpointsResponseUnmarshaller GetInstance();
    public static ListEndpointsResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesRequestMarshaller : object {
    private static ListEventBusesRequestMarshaller _instance;
    public static ListEventBusesRequestMarshaller Instance { get; }
    private static ListEventBusesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListEventBusesRequest publicRequest);
    internal static ListEventBusesRequestMarshaller GetInstance();
    public static ListEventBusesRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListEventBusesResponseUnmarshaller _instance;
    public static ListEventBusesResponseUnmarshaller Instance { get; }
    private static ListEventBusesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListEventBusesResponseUnmarshaller GetInstance();
    public static ListEventBusesResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesRequestMarshaller : object {
    private static ListEventSourcesRequestMarshaller _instance;
    public static ListEventSourcesRequestMarshaller Instance { get; }
    private static ListEventSourcesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListEventSourcesRequest publicRequest);
    internal static ListEventSourcesRequestMarshaller GetInstance();
    public static ListEventSourcesRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListEventSourcesResponseUnmarshaller _instance;
    public static ListEventSourcesResponseUnmarshaller Instance { get; }
    private static ListEventSourcesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListEventSourcesResponseUnmarshaller GetInstance();
    public static ListEventSourcesResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsRequestMarshaller : object {
    private static ListPartnerEventSourceAccountsRequestMarshaller _instance;
    public static ListPartnerEventSourceAccountsRequestMarshaller Instance { get; }
    private static ListPartnerEventSourceAccountsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPartnerEventSourceAccountsRequest publicRequest);
    internal static ListPartnerEventSourceAccountsRequestMarshaller GetInstance();
    public static ListPartnerEventSourceAccountsRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListPartnerEventSourceAccountsResponseUnmarshaller _instance;
    public static ListPartnerEventSourceAccountsResponseUnmarshaller Instance { get; }
    private static ListPartnerEventSourceAccountsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPartnerEventSourceAccountsResponseUnmarshaller GetInstance();
    public static ListPartnerEventSourceAccountsResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesRequestMarshaller : object {
    private static ListPartnerEventSourcesRequestMarshaller _instance;
    public static ListPartnerEventSourcesRequestMarshaller Instance { get; }
    private static ListPartnerEventSourcesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPartnerEventSourcesRequest publicRequest);
    internal static ListPartnerEventSourcesRequestMarshaller GetInstance();
    public static ListPartnerEventSourcesRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListPartnerEventSourcesResponseUnmarshaller _instance;
    public static ListPartnerEventSourcesResponseUnmarshaller Instance { get; }
    private static ListPartnerEventSourcesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPartnerEventSourcesResponseUnmarshaller GetInstance();
    public static ListPartnerEventSourcesResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListReplaysRequestMarshaller : object {
    private static ListReplaysRequestMarshaller _instance;
    public static ListReplaysRequestMarshaller Instance { get; }
    private static ListReplaysRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListReplaysRequest publicRequest);
    internal static ListReplaysRequestMarshaller GetInstance();
    public static ListReplaysRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListReplaysResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListReplaysResponseUnmarshaller _instance;
    public static ListReplaysResponseUnmarshaller Instance { get; }
    private static ListReplaysResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListReplaysResponseUnmarshaller GetInstance();
    public static ListReplaysResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetRequestMarshaller : object {
    private static ListRuleNamesByTargetRequestMarshaller _instance;
    public static ListRuleNamesByTargetRequestMarshaller Instance { get; }
    private static ListRuleNamesByTargetRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListRuleNamesByTargetRequest publicRequest);
    internal static ListRuleNamesByTargetRequestMarshaller GetInstance();
    public static ListRuleNamesByTargetRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListRuleNamesByTargetResponseUnmarshaller _instance;
    public static ListRuleNamesByTargetResponseUnmarshaller Instance { get; }
    private static ListRuleNamesByTargetResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListRuleNamesByTargetResponseUnmarshaller GetInstance();
    public static ListRuleNamesByTargetResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesRequestMarshaller : object {
    private static ListRulesRequestMarshaller _instance;
    public static ListRulesRequestMarshaller Instance { get; }
    private static ListRulesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListRulesRequest publicRequest);
    internal static ListRulesRequestMarshaller GetInstance();
    public static ListRulesRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListRulesResponseUnmarshaller _instance;
    public static ListRulesResponseUnmarshaller Instance { get; }
    private static ListRulesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListRulesResponseUnmarshaller GetInstance();
    public static ListRulesResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller : object {
    private static ListTagsForResourceRequestMarshaller _instance;
    public static ListTagsForResourceRequestMarshaller Instance { get; }
    private static ListTagsForResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForResourceRequest publicRequest);
    internal static ListTagsForResourceRequestMarshaller GetInstance();
    public static ListTagsForResourceRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTagsForResourceResponseUnmarshaller _instance;
    public static ListTagsForResourceResponseUnmarshaller Instance { get; }
    private static ListTagsForResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForResourceResponseUnmarshaller GetInstance();
    public static ListTagsForResourceResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleRequestMarshaller : object {
    private static ListTargetsByRuleRequestMarshaller _instance;
    public static ListTargetsByRuleRequestMarshaller Instance { get; }
    private static ListTargetsByRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTargetsByRuleRequest publicRequest);
    internal static ListTargetsByRuleRequestMarshaller GetInstance();
    public static ListTargetsByRuleRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTargetsByRuleResponseUnmarshaller _instance;
    public static ListTargetsByRuleResponseUnmarshaller Instance { get; }
    private static ListTargetsByRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTargetsByRuleResponseUnmarshaller GetInstance();
    public static ListTargetsByRuleResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ManagedRuleExceptionUnmarshaller : object {
    private static ManagedRuleExceptionUnmarshaller _instance;
    public static ManagedRuleExceptionUnmarshaller Instance { get; }
    private static ManagedRuleExceptionUnmarshaller();
    public sealed virtual ManagedRuleException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ManagedRuleException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ManagedRuleExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.NetworkConfigurationMarshaller : object {
    public static NetworkConfigurationMarshaller Instance;
    private static NetworkConfigurationMarshaller();
    public sealed virtual void Marshall(NetworkConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.NetworkConfigurationUnmarshaller : object {
    private static NetworkConfigurationUnmarshaller _instance;
    public static NetworkConfigurationUnmarshaller Instance { get; }
    private static NetworkConfigurationUnmarshaller();
    private sealed virtual override NetworkConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.NetworkConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NetworkConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static NetworkConfigurationUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.OperationDisabledExceptionUnmarshaller : object {
    private static OperationDisabledExceptionUnmarshaller _instance;
    public static OperationDisabledExceptionUnmarshaller Instance { get; }
    private static OperationDisabledExceptionUnmarshaller();
    public sealed virtual OperationDisabledException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual OperationDisabledException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static OperationDisabledExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceAccountUnmarshaller : object {
    private static PartnerEventSourceAccountUnmarshaller _instance;
    public static PartnerEventSourceAccountUnmarshaller Instance { get; }
    private static PartnerEventSourceAccountUnmarshaller();
    private sealed virtual override PartnerEventSourceAccount Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.PartnerEventSourceAccount,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PartnerEventSourceAccount Unmarshall(JsonUnmarshallerContext context);
    public static PartnerEventSourceAccountUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceUnmarshaller : object {
    private static PartnerEventSourceUnmarshaller _instance;
    public static PartnerEventSourceUnmarshaller Instance { get; }
    private static PartnerEventSourceUnmarshaller();
    private sealed virtual override PartnerEventSource Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.PartnerEventSource,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PartnerEventSource Unmarshall(JsonUnmarshallerContext context);
    public static PartnerEventSourceUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PlacementConstraintMarshaller : object {
    public static PlacementConstraintMarshaller Instance;
    private static PlacementConstraintMarshaller();
    public sealed virtual void Marshall(PlacementConstraint requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PlacementConstraintUnmarshaller : object {
    private static PlacementConstraintUnmarshaller _instance;
    public static PlacementConstraintUnmarshaller Instance { get; }
    private static PlacementConstraintUnmarshaller();
    private sealed virtual override PlacementConstraint Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.PlacementConstraint,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PlacementConstraint Unmarshall(JsonUnmarshallerContext context);
    public static PlacementConstraintUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PlacementStrategyMarshaller : object {
    public static PlacementStrategyMarshaller Instance;
    private static PlacementStrategyMarshaller();
    public sealed virtual void Marshall(PlacementStrategy requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PlacementStrategyUnmarshaller : object {
    private static PlacementStrategyUnmarshaller _instance;
    public static PlacementStrategyUnmarshaller Instance { get; }
    private static PlacementStrategyUnmarshaller();
    private sealed virtual override PlacementStrategy Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.PlacementStrategy,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PlacementStrategy Unmarshall(JsonUnmarshallerContext context);
    public static PlacementStrategyUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PolicyLengthExceededExceptionUnmarshaller : object {
    private static PolicyLengthExceededExceptionUnmarshaller _instance;
    public static PolicyLengthExceededExceptionUnmarshaller Instance { get; }
    private static PolicyLengthExceededExceptionUnmarshaller();
    public sealed virtual PolicyLengthExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual PolicyLengthExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static PolicyLengthExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PrimaryMarshaller : object {
    public static PrimaryMarshaller Instance;
    private static PrimaryMarshaller();
    public sealed virtual void Marshall(Primary requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PrimaryUnmarshaller : object {
    private static PrimaryUnmarshaller _instance;
    public static PrimaryUnmarshaller Instance { get; }
    private static PrimaryUnmarshaller();
    private sealed virtual override Primary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.Primary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Primary Unmarshall(JsonUnmarshallerContext context);
    public static PrimaryUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsRequestEntryMarshaller : object {
    public static PutEventsRequestEntryMarshaller Instance;
    private static PutEventsRequestEntryMarshaller();
    public sealed virtual void Marshall(PutEventsRequestEntry requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsRequestMarshaller : object {
    private static PutEventsRequestMarshaller _instance;
    public static PutEventsRequestMarshaller Instance { get; }
    private static PutEventsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutEventsRequest publicRequest);
    internal static PutEventsRequestMarshaller GetInstance();
    public static PutEventsRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutEventsResponseUnmarshaller _instance;
    public static PutEventsResponseUnmarshaller Instance { get; }
    private static PutEventsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutEventsResponseUnmarshaller GetInstance();
    public static PutEventsResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResultEntryUnmarshaller : object {
    private static PutEventsResultEntryUnmarshaller _instance;
    public static PutEventsResultEntryUnmarshaller Instance { get; }
    private static PutEventsResultEntryUnmarshaller();
    private sealed virtual override PutEventsResultEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.PutEventsResultEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PutEventsResultEntry Unmarshall(JsonUnmarshallerContext context);
    public static PutEventsResultEntryUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsRequestEntryMarshaller : object {
    public static PutPartnerEventsRequestEntryMarshaller Instance;
    private static PutPartnerEventsRequestEntryMarshaller();
    public sealed virtual void Marshall(PutPartnerEventsRequestEntry requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsRequestMarshaller : object {
    private static PutPartnerEventsRequestMarshaller _instance;
    public static PutPartnerEventsRequestMarshaller Instance { get; }
    private static PutPartnerEventsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutPartnerEventsRequest publicRequest);
    internal static PutPartnerEventsRequestMarshaller GetInstance();
    public static PutPartnerEventsRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutPartnerEventsResponseUnmarshaller _instance;
    public static PutPartnerEventsResponseUnmarshaller Instance { get; }
    private static PutPartnerEventsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutPartnerEventsResponseUnmarshaller GetInstance();
    public static PutPartnerEventsResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResultEntryUnmarshaller : object {
    private static PutPartnerEventsResultEntryUnmarshaller _instance;
    public static PutPartnerEventsResultEntryUnmarshaller Instance { get; }
    private static PutPartnerEventsResultEntryUnmarshaller();
    private sealed virtual override PutPartnerEventsResultEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.PutPartnerEventsResultEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PutPartnerEventsResultEntry Unmarshall(JsonUnmarshallerContext context);
    public static PutPartnerEventsResultEntryUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionRequestMarshaller : object {
    private static PutPermissionRequestMarshaller _instance;
    public static PutPermissionRequestMarshaller Instance { get; }
    private static PutPermissionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutPermissionRequest publicRequest);
    internal static PutPermissionRequestMarshaller GetInstance();
    public static PutPermissionRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutPermissionResponseUnmarshaller _instance;
    public static PutPermissionResponseUnmarshaller Instance { get; }
    private static PutPermissionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutPermissionResponseUnmarshaller GetInstance();
    public static PutPermissionResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleRequestMarshaller : object {
    private static PutRuleRequestMarshaller _instance;
    public static PutRuleRequestMarshaller Instance { get; }
    private static PutRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutRuleRequest publicRequest);
    internal static PutRuleRequestMarshaller GetInstance();
    public static PutRuleRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutRuleResponseUnmarshaller _instance;
    public static PutRuleResponseUnmarshaller Instance { get; }
    private static PutRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutRuleResponseUnmarshaller GetInstance();
    public static PutRuleResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsRequestMarshaller : object {
    private static PutTargetsRequestMarshaller _instance;
    public static PutTargetsRequestMarshaller Instance { get; }
    private static PutTargetsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutTargetsRequest publicRequest);
    internal static PutTargetsRequestMarshaller GetInstance();
    public static PutTargetsRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutTargetsResponseUnmarshaller _instance;
    public static PutTargetsResponseUnmarshaller Instance { get; }
    private static PutTargetsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutTargetsResponseUnmarshaller GetInstance();
    public static PutTargetsResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResultEntryUnmarshaller : object {
    private static PutTargetsResultEntryUnmarshaller _instance;
    public static PutTargetsResultEntryUnmarshaller Instance { get; }
    private static PutTargetsResultEntryUnmarshaller();
    private sealed virtual override PutTargetsResultEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.PutTargetsResultEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PutTargetsResultEntry Unmarshall(JsonUnmarshallerContext context);
    public static PutTargetsResultEntryUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RedshiftDataParametersMarshaller : object {
    public static RedshiftDataParametersMarshaller Instance;
    private static RedshiftDataParametersMarshaller();
    public sealed virtual void Marshall(RedshiftDataParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RedshiftDataParametersUnmarshaller : object {
    private static RedshiftDataParametersUnmarshaller _instance;
    public static RedshiftDataParametersUnmarshaller Instance { get; }
    private static RedshiftDataParametersUnmarshaller();
    private sealed virtual override RedshiftDataParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.RedshiftDataParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RedshiftDataParameters Unmarshall(JsonUnmarshallerContext context);
    public static RedshiftDataParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionRequestMarshaller : object {
    private static RemovePermissionRequestMarshaller _instance;
    public static RemovePermissionRequestMarshaller Instance { get; }
    private static RemovePermissionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RemovePermissionRequest publicRequest);
    internal static RemovePermissionRequestMarshaller GetInstance();
    public static RemovePermissionRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RemovePermissionResponseUnmarshaller _instance;
    public static RemovePermissionResponseUnmarshaller Instance { get; }
    private static RemovePermissionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RemovePermissionResponseUnmarshaller GetInstance();
    public static RemovePermissionResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsRequestMarshaller : object {
    private static RemoveTargetsRequestMarshaller _instance;
    public static RemoveTargetsRequestMarshaller Instance { get; }
    private static RemoveTargetsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RemoveTargetsRequest publicRequest);
    internal static RemoveTargetsRequestMarshaller GetInstance();
    public static RemoveTargetsRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RemoveTargetsResponseUnmarshaller _instance;
    public static RemoveTargetsResponseUnmarshaller Instance { get; }
    private static RemoveTargetsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RemoveTargetsResponseUnmarshaller GetInstance();
    public static RemoveTargetsResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResultEntryUnmarshaller : object {
    private static RemoveTargetsResultEntryUnmarshaller _instance;
    public static RemoveTargetsResultEntryUnmarshaller Instance { get; }
    private static RemoveTargetsResultEntryUnmarshaller();
    private sealed virtual override RemoveTargetsResultEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.RemoveTargetsResultEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RemoveTargetsResultEntry Unmarshall(JsonUnmarshallerContext context);
    public static RemoveTargetsResultEntryUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ReplayDestinationMarshaller : object {
    public static ReplayDestinationMarshaller Instance;
    private static ReplayDestinationMarshaller();
    public sealed virtual void Marshall(ReplayDestination requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ReplayDestinationUnmarshaller : object {
    private static ReplayDestinationUnmarshaller _instance;
    public static ReplayDestinationUnmarshaller Instance { get; }
    private static ReplayDestinationUnmarshaller();
    private sealed virtual override ReplayDestination Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ReplayDestination,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplayDestination Unmarshall(JsonUnmarshallerContext context);
    public static ReplayDestinationUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ReplayUnmarshaller : object {
    private static ReplayUnmarshaller _instance;
    public static ReplayUnmarshaller Instance { get; }
    private static ReplayUnmarshaller();
    private sealed virtual override Replay Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.Replay,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Replay Unmarshall(JsonUnmarshallerContext context);
    public static ReplayUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ReplicationConfigMarshaller : object {
    public static ReplicationConfigMarshaller Instance;
    private static ReplicationConfigMarshaller();
    public sealed virtual void Marshall(ReplicationConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ReplicationConfigUnmarshaller : object {
    private static ReplicationConfigUnmarshaller _instance;
    public static ReplicationConfigUnmarshaller Instance { get; }
    private static ReplicationConfigUnmarshaller();
    private sealed virtual override ReplicationConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.ReplicationConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationConfig Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationConfigUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ResourceAlreadyExistsExceptionUnmarshaller : object {
    private static ResourceAlreadyExistsExceptionUnmarshaller _instance;
    public static ResourceAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ResourceAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ResourceAlreadyExistsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceAlreadyExistsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller : object {
    private static ResourceNotFoundExceptionUnmarshaller _instance;
    public static ResourceNotFoundExceptionUnmarshaller Instance { get; }
    private static ResourceNotFoundExceptionUnmarshaller();
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RetryPolicyMarshaller : object {
    public static RetryPolicyMarshaller Instance;
    private static RetryPolicyMarshaller();
    public sealed virtual void Marshall(RetryPolicy requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RetryPolicyUnmarshaller : object {
    private static RetryPolicyUnmarshaller _instance;
    public static RetryPolicyUnmarshaller Instance { get; }
    private static RetryPolicyUnmarshaller();
    private sealed virtual override RetryPolicy Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.RetryPolicy,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RetryPolicy Unmarshall(JsonUnmarshallerContext context);
    public static RetryPolicyUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RoutingConfigMarshaller : object {
    public static RoutingConfigMarshaller Instance;
    private static RoutingConfigMarshaller();
    public sealed virtual void Marshall(RoutingConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RoutingConfigUnmarshaller : object {
    private static RoutingConfigUnmarshaller _instance;
    public static RoutingConfigUnmarshaller Instance { get; }
    private static RoutingConfigUnmarshaller();
    private sealed virtual override RoutingConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.RoutingConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RoutingConfig Unmarshall(JsonUnmarshallerContext context);
    public static RoutingConfigUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RuleUnmarshaller : object {
    private static RuleUnmarshaller _instance;
    public static RuleUnmarshaller Instance { get; }
    private static RuleUnmarshaller();
    private sealed virtual override Rule Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.Rule,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Rule Unmarshall(JsonUnmarshallerContext context);
    public static RuleUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandParametersMarshaller : object {
    public static RunCommandParametersMarshaller Instance;
    private static RunCommandParametersMarshaller();
    public sealed virtual void Marshall(RunCommandParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandParametersUnmarshaller : object {
    private static RunCommandParametersUnmarshaller _instance;
    public static RunCommandParametersUnmarshaller Instance { get; }
    private static RunCommandParametersUnmarshaller();
    private sealed virtual override RunCommandParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.RunCommandParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RunCommandParameters Unmarshall(JsonUnmarshallerContext context);
    public static RunCommandParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandTargetMarshaller : object {
    public static RunCommandTargetMarshaller Instance;
    private static RunCommandTargetMarshaller();
    public sealed virtual void Marshall(RunCommandTarget requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandTargetUnmarshaller : object {
    private static RunCommandTargetUnmarshaller _instance;
    public static RunCommandTargetUnmarshaller Instance { get; }
    private static RunCommandTargetUnmarshaller();
    private sealed virtual override RunCommandTarget Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.RunCommandTarget,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RunCommandTarget Unmarshall(JsonUnmarshallerContext context);
    public static RunCommandTargetUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.SageMakerPipelineParameterMarshaller : object {
    public static SageMakerPipelineParameterMarshaller Instance;
    private static SageMakerPipelineParameterMarshaller();
    public sealed virtual void Marshall(SageMakerPipelineParameter requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.SageMakerPipelineParametersMarshaller : object {
    public static SageMakerPipelineParametersMarshaller Instance;
    private static SageMakerPipelineParametersMarshaller();
    public sealed virtual void Marshall(SageMakerPipelineParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.SageMakerPipelineParametersUnmarshaller : object {
    private static SageMakerPipelineParametersUnmarshaller _instance;
    public static SageMakerPipelineParametersUnmarshaller Instance { get; }
    private static SageMakerPipelineParametersUnmarshaller();
    private sealed virtual override SageMakerPipelineParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.SageMakerPipelineParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SageMakerPipelineParameters Unmarshall(JsonUnmarshallerContext context);
    public static SageMakerPipelineParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.SageMakerPipelineParameterUnmarshaller : object {
    private static SageMakerPipelineParameterUnmarshaller _instance;
    public static SageMakerPipelineParameterUnmarshaller Instance { get; }
    private static SageMakerPipelineParameterUnmarshaller();
    private sealed virtual override SageMakerPipelineParameter Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.SageMakerPipelineParameter,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SageMakerPipelineParameter Unmarshall(JsonUnmarshallerContext context);
    public static SageMakerPipelineParameterUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.SecondaryMarshaller : object {
    public static SecondaryMarshaller Instance;
    private static SecondaryMarshaller();
    public sealed virtual void Marshall(Secondary requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.SecondaryUnmarshaller : object {
    private static SecondaryUnmarshaller _instance;
    public static SecondaryUnmarshaller Instance { get; }
    private static SecondaryUnmarshaller();
    private sealed virtual override Secondary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.Secondary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Secondary Unmarshall(JsonUnmarshallerContext context);
    public static SecondaryUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.SqsParametersMarshaller : object {
    public static SqsParametersMarshaller Instance;
    private static SqsParametersMarshaller();
    public sealed virtual void Marshall(SqsParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.SqsParametersUnmarshaller : object {
    private static SqsParametersUnmarshaller _instance;
    public static SqsParametersUnmarshaller Instance { get; }
    private static SqsParametersUnmarshaller();
    private sealed virtual override SqsParameters Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.SqsParameters,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SqsParameters Unmarshall(JsonUnmarshallerContext context);
    public static SqsParametersUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.StartReplayRequestMarshaller : object {
    private static StartReplayRequestMarshaller _instance;
    public static StartReplayRequestMarshaller Instance { get; }
    private static StartReplayRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StartReplayRequest publicRequest);
    internal static StartReplayRequestMarshaller GetInstance();
    public static StartReplayRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.StartReplayResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StartReplayResponseUnmarshaller _instance;
    public static StartReplayResponseUnmarshaller Instance { get; }
    private static StartReplayResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StartReplayResponseUnmarshaller GetInstance();
    public static StartReplayResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.TagMarshaller : object {
    public static TagMarshaller Instance;
    private static TagMarshaller();
    public sealed virtual void Marshall(Tag requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller : object {
    private static TagResourceRequestMarshaller _instance;
    public static TagResourceRequestMarshaller Instance { get; }
    private static TagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagResourceRequest publicRequest);
    internal static TagResourceRequestMarshaller GetInstance();
    public static TagResourceRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TagResourceResponseUnmarshaller _instance;
    public static TagResourceResponseUnmarshaller Instance { get; }
    private static TagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagResourceResponseUnmarshaller GetInstance();
    public static TagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    private sealed virtual override Tag Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.Tag,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.TargetMarshaller : object {
    public static TargetMarshaller Instance;
    private static TargetMarshaller();
    public sealed virtual void Marshall(Target requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.TargetUnmarshaller : object {
    private static TargetUnmarshaller _instance;
    public static TargetUnmarshaller Instance { get; }
    private static TargetUnmarshaller();
    private sealed virtual override Target Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.EventBridge.Model.Target,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Target Unmarshall(JsonUnmarshallerContext context);
    public static TargetUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternRequestMarshaller : object {
    private static TestEventPatternRequestMarshaller _instance;
    public static TestEventPatternRequestMarshaller Instance { get; }
    private static TestEventPatternRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TestEventPatternRequest publicRequest);
    internal static TestEventPatternRequestMarshaller GetInstance();
    public static TestEventPatternRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TestEventPatternResponseUnmarshaller _instance;
    public static TestEventPatternResponseUnmarshaller Instance { get; }
    private static TestEventPatternResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TestEventPatternResponseUnmarshaller GetInstance();
    public static TestEventPatternResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller : object {
    private static UntagResourceRequestMarshaller _instance;
    public static UntagResourceRequestMarshaller Instance { get; }
    private static UntagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagResourceRequest publicRequest);
    internal static UntagResourceRequestMarshaller GetInstance();
    public static UntagResourceRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UntagResourceResponseUnmarshaller _instance;
    public static UntagResourceResponseUnmarshaller Instance { get; }
    private static UntagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagResourceResponseUnmarshaller GetInstance();
    public static UntagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateApiDestinationRequestMarshaller : object {
    private static UpdateApiDestinationRequestMarshaller _instance;
    public static UpdateApiDestinationRequestMarshaller Instance { get; }
    private static UpdateApiDestinationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateApiDestinationRequest publicRequest);
    internal static UpdateApiDestinationRequestMarshaller GetInstance();
    public static UpdateApiDestinationRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateApiDestinationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateApiDestinationResponseUnmarshaller _instance;
    public static UpdateApiDestinationResponseUnmarshaller Instance { get; }
    private static UpdateApiDestinationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateApiDestinationResponseUnmarshaller GetInstance();
    public static UpdateApiDestinationResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateArchiveRequestMarshaller : object {
    private static UpdateArchiveRequestMarshaller _instance;
    public static UpdateArchiveRequestMarshaller Instance { get; }
    private static UpdateArchiveRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateArchiveRequest publicRequest);
    internal static UpdateArchiveRequestMarshaller GetInstance();
    public static UpdateArchiveRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateArchiveResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateArchiveResponseUnmarshaller _instance;
    public static UpdateArchiveResponseUnmarshaller Instance { get; }
    private static UpdateArchiveResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateArchiveResponseUnmarshaller GetInstance();
    public static UpdateArchiveResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateConnectionApiKeyAuthRequestParametersMarshaller : object {
    public static UpdateConnectionApiKeyAuthRequestParametersMarshaller Instance;
    private static UpdateConnectionApiKeyAuthRequestParametersMarshaller();
    public sealed virtual void Marshall(UpdateConnectionApiKeyAuthRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateConnectionAuthRequestParametersMarshaller : object {
    public static UpdateConnectionAuthRequestParametersMarshaller Instance;
    private static UpdateConnectionAuthRequestParametersMarshaller();
    public sealed virtual void Marshall(UpdateConnectionAuthRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateConnectionBasicAuthRequestParametersMarshaller : object {
    public static UpdateConnectionBasicAuthRequestParametersMarshaller Instance;
    private static UpdateConnectionBasicAuthRequestParametersMarshaller();
    public sealed virtual void Marshall(UpdateConnectionBasicAuthRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateConnectionOAuthClientRequestParametersMarshaller : object {
    public static UpdateConnectionOAuthClientRequestParametersMarshaller Instance;
    private static UpdateConnectionOAuthClientRequestParametersMarshaller();
    public sealed virtual void Marshall(UpdateConnectionOAuthClientRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateConnectionOAuthRequestParametersMarshaller : object {
    public static UpdateConnectionOAuthRequestParametersMarshaller Instance;
    private static UpdateConnectionOAuthRequestParametersMarshaller();
    public sealed virtual void Marshall(UpdateConnectionOAuthRequestParameters requestObject, JsonMarshallerContext context);
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateConnectionRequestMarshaller : object {
    private static UpdateConnectionRequestMarshaller _instance;
    public static UpdateConnectionRequestMarshaller Instance { get; }
    private static UpdateConnectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateConnectionRequest publicRequest);
    internal static UpdateConnectionRequestMarshaller GetInstance();
    public static UpdateConnectionRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateConnectionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateConnectionResponseUnmarshaller _instance;
    public static UpdateConnectionResponseUnmarshaller Instance { get; }
    private static UpdateConnectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateConnectionResponseUnmarshaller GetInstance();
    public static UpdateConnectionResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateEndpointRequestMarshaller : object {
    private static UpdateEndpointRequestMarshaller _instance;
    public static UpdateEndpointRequestMarshaller Instance { get; }
    private static UpdateEndpointRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateEndpointRequest publicRequest);
    internal static UpdateEndpointRequestMarshaller GetInstance();
    public static UpdateEndpointRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateEndpointResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateEndpointResponseUnmarshaller _instance;
    public static UpdateEndpointResponseUnmarshaller Instance { get; }
    private static UpdateEndpointResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateEndpointResponseUnmarshaller GetInstance();
    public static UpdateEndpointResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateEventBusRequestMarshaller : object {
    private static UpdateEventBusRequestMarshaller _instance;
    public static UpdateEventBusRequestMarshaller Instance { get; }
    private static UpdateEventBusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateEventBusRequest publicRequest);
    internal static UpdateEventBusRequestMarshaller GetInstance();
    public static UpdateEventBusRequestMarshaller get_Instance();
}
public class Amazon.EventBridge.Model.Internal.MarshallTransformations.UpdateEventBusResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateEventBusResponseUnmarshaller _instance;
    public static UpdateEventBusResponseUnmarshaller Instance { get; }
    private static UpdateEventBusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateEventBusResponseUnmarshaller GetInstance();
    public static UpdateEventBusResponseUnmarshaller get_Instance();
}
public class Amazon.EventBridge.Model.InternalException : AmazonEventBridgeException {
    public InternalException(string message);
    public InternalException(string message, Exception innerException);
    public InternalException(Exception innerException);
    public InternalException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InternalException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected InternalException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.InvalidEventPatternException : AmazonEventBridgeException {
    public InvalidEventPatternException(string message);
    public InvalidEventPatternException(string message, Exception innerException);
    public InvalidEventPatternException(Exception innerException);
    public InvalidEventPatternException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidEventPatternException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected InvalidEventPatternException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.InvalidStateException : AmazonEventBridgeException {
    public InvalidStateException(string message);
    public InvalidStateException(string message, Exception innerException);
    public InvalidStateException(Exception innerException);
    public InvalidStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected InvalidStateException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.KinesisParameters : object {
    private string _partitionKeyPath;
    [AWSPropertyAttribute]
public string PartitionKeyPath { get; public set; }
    public string get_PartitionKeyPath();
    public void set_PartitionKeyPath(string value);
    internal bool IsSetPartitionKeyPath();
}
public class Amazon.EventBridge.Model.LimitExceededException : AmazonEventBridgeException {
    public LimitExceededException(string message);
    public LimitExceededException(string message, Exception innerException);
    public LimitExceededException(Exception innerException);
    public LimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected LimitExceededException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.ListApiDestinationsRequest : AmazonEventBridgeRequest {
    private string _connectionArn;
    private Nullable`1<int> _limit;
    private string _namePrefix;
    private string _nextToken;
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NamePrefix { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NamePrefix();
    public void set_NamePrefix(string value);
    internal bool IsSetNamePrefix();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListApiDestinationsResponse : AmazonWebServiceResponse {
    private List`1<ApiDestination> _apiDestinations;
    private string _nextToken;
    public List`1<ApiDestination> ApiDestinations { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<ApiDestination> get_ApiDestinations();
    public void set_ApiDestinations(List`1<ApiDestination> value);
    internal bool IsSetApiDestinations();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListArchivesRequest : AmazonEventBridgeRequest {
    private string _eventSourceArn;
    private Nullable`1<int> _limit;
    private string _namePrefix;
    private string _nextToken;
    private ArchiveState _state;
    [AWSPropertyAttribute]
public string EventSourceArn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NamePrefix { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public ArchiveState State { get; public set; }
    public string get_EventSourceArn();
    public void set_EventSourceArn(string value);
    internal bool IsSetEventSourceArn();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NamePrefix();
    public void set_NamePrefix(string value);
    internal bool IsSetNamePrefix();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public ArchiveState get_State();
    public void set_State(ArchiveState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.ListArchivesResponse : AmazonWebServiceResponse {
    private List`1<Archive> _archives;
    private string _nextToken;
    public List`1<Archive> Archives { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<Archive> get_Archives();
    public void set_Archives(List`1<Archive> value);
    internal bool IsSetArchives();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListConnectionsRequest : AmazonEventBridgeRequest {
    private ConnectionState _connectionState;
    private Nullable`1<int> _limit;
    private string _namePrefix;
    private string _nextToken;
    public ConnectionState ConnectionState { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NamePrefix { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public ConnectionState get_ConnectionState();
    public void set_ConnectionState(ConnectionState value);
    internal bool IsSetConnectionState();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NamePrefix();
    public void set_NamePrefix(string value);
    internal bool IsSetNamePrefix();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListConnectionsResponse : AmazonWebServiceResponse {
    private List`1<Connection> _connections;
    private string _nextToken;
    public List`1<Connection> Connections { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<Connection> get_Connections();
    public void set_Connections(List`1<Connection> value);
    internal bool IsSetConnections();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListEndpointsRequest : AmazonEventBridgeRequest {
    private string _homeRegion;
    private Nullable`1<int> _maxResults;
    private string _namePrefix;
    private string _nextToken;
    [AWSPropertyAttribute]
public string HomeRegion { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NamePrefix { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string get_HomeRegion();
    public void set_HomeRegion(string value);
    internal bool IsSetHomeRegion();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NamePrefix();
    public void set_NamePrefix(string value);
    internal bool IsSetNamePrefix();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListEndpointsResponse : AmazonWebServiceResponse {
    private List`1<Endpoint> _endpoints;
    private string _nextToken;
    public List`1<Endpoint> Endpoints { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<Endpoint> get_Endpoints();
    public void set_Endpoints(List`1<Endpoint> value);
    internal bool IsSetEndpoints();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListEventBusesRequest : AmazonEventBridgeRequest {
    private Nullable`1<int> _limit;
    private string _namePrefix;
    private string _nextToken;
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NamePrefix { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NamePrefix();
    public void set_NamePrefix(string value);
    internal bool IsSetNamePrefix();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListEventBusesResponse : AmazonWebServiceResponse {
    private List`1<EventBus> _eventBuses;
    private string _nextToken;
    public List`1<EventBus> EventBuses { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<EventBus> get_EventBuses();
    public void set_EventBuses(List`1<EventBus> value);
    internal bool IsSetEventBuses();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListEventSourcesRequest : AmazonEventBridgeRequest {
    private Nullable`1<int> _limit;
    private string _namePrefix;
    private string _nextToken;
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NamePrefix { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NamePrefix();
    public void set_NamePrefix(string value);
    internal bool IsSetNamePrefix();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListEventSourcesResponse : AmazonWebServiceResponse {
    private List`1<EventSource> _eventSources;
    private string _nextToken;
    public List`1<EventSource> EventSources { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<EventSource> get_EventSources();
    public void set_EventSources(List`1<EventSource> value);
    internal bool IsSetEventSources();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListPartnerEventSourceAccountsRequest : AmazonEventBridgeRequest {
    private string _eventSourceName;
    private Nullable`1<int> _limit;
    private string _nextToken;
    [AWSPropertyAttribute]
public string EventSourceName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string get_EventSourceName();
    public void set_EventSourceName(string value);
    internal bool IsSetEventSourceName();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListPartnerEventSourceAccountsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<PartnerEventSourceAccount> _partnerEventSourceAccounts;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<PartnerEventSourceAccount> PartnerEventSourceAccounts { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<PartnerEventSourceAccount> get_PartnerEventSourceAccounts();
    public void set_PartnerEventSourceAccounts(List`1<PartnerEventSourceAccount> value);
    internal bool IsSetPartnerEventSourceAccounts();
}
public class Amazon.EventBridge.Model.ListPartnerEventSourcesRequest : AmazonEventBridgeRequest {
    private Nullable`1<int> _limit;
    private string _namePrefix;
    private string _nextToken;
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NamePrefix { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NamePrefix();
    public void set_NamePrefix(string value);
    internal bool IsSetNamePrefix();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListPartnerEventSourcesResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<PartnerEventSource> _partnerEventSources;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<PartnerEventSource> PartnerEventSources { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<PartnerEventSource> get_PartnerEventSources();
    public void set_PartnerEventSources(List`1<PartnerEventSource> value);
    internal bool IsSetPartnerEventSources();
}
public class Amazon.EventBridge.Model.ListReplaysRequest : AmazonEventBridgeRequest {
    private string _eventSourceArn;
    private Nullable`1<int> _limit;
    private string _namePrefix;
    private string _nextToken;
    private ReplayState _state;
    [AWSPropertyAttribute]
public string EventSourceArn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NamePrefix { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public ReplayState State { get; public set; }
    public string get_EventSourceArn();
    public void set_EventSourceArn(string value);
    internal bool IsSetEventSourceArn();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NamePrefix();
    public void set_NamePrefix(string value);
    internal bool IsSetNamePrefix();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public ReplayState get_State();
    public void set_State(ReplayState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.ListReplaysResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<Replay> _replays;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<Replay> Replays { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<Replay> get_Replays();
    public void set_Replays(List`1<Replay> value);
    internal bool IsSetReplays();
}
public class Amazon.EventBridge.Model.ListRuleNamesByTargetRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private Nullable`1<int> _limit;
    private string _nextToken;
    private string _targetArn;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string TargetArn { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_TargetArn();
    public void set_TargetArn(string value);
    internal bool IsSetTargetArn();
}
public class Amazon.EventBridge.Model.ListRuleNamesByTargetResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<string> _ruleNames;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<string> RuleNames { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_RuleNames();
    public void set_RuleNames(List`1<string> value);
    internal bool IsSetRuleNames();
}
public class Amazon.EventBridge.Model.ListRulesRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private Nullable`1<int> _limit;
    private string _namePrefix;
    private string _nextToken;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NamePrefix { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NamePrefix();
    public void set_NamePrefix(string value);
    internal bool IsSetNamePrefix();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.EventBridge.Model.ListRulesResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<Rule> _rules;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<Rule> Rules { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<Rule> get_Rules();
    public void set_Rules(List`1<Rule> value);
    internal bool IsSetRules();
}
public class Amazon.EventBridge.Model.ListTagsForResourceRequest : AmazonEventBridgeRequest {
    private string _resourceARN;
    [AWSPropertyAttribute]
public string ResourceARN { get; public set; }
    public string get_ResourceARN();
    public void set_ResourceARN(string value);
    internal bool IsSetResourceARN();
}
public class Amazon.EventBridge.Model.ListTagsForResourceResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tags;
    public List`1<Tag> Tags { get; public set; }
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.EventBridge.Model.ListTargetsByRuleRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private Nullable`1<int> _limit;
    private string _nextToken;
    private string _rule;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string Rule { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_Rule();
    public void set_Rule(string value);
    internal bool IsSetRule();
}
public class Amazon.EventBridge.Model.ListTargetsByRuleResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<Target> _targets;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public List`1<Target> Targets { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<Target> get_Targets();
    public void set_Targets(List`1<Target> value);
    internal bool IsSetTargets();
}
public class Amazon.EventBridge.Model.ManagedRuleException : AmazonEventBridgeException {
    public ManagedRuleException(string message);
    public ManagedRuleException(string message, Exception innerException);
    public ManagedRuleException(Exception innerException);
    public ManagedRuleException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ManagedRuleException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ManagedRuleException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.NetworkConfiguration : object {
    private AwsVpcConfiguration _awsvpcConfiguration;
    public AwsVpcConfiguration AwsvpcConfiguration { get; public set; }
    public AwsVpcConfiguration get_AwsvpcConfiguration();
    public void set_AwsvpcConfiguration(AwsVpcConfiguration value);
    internal bool IsSetAwsvpcConfiguration();
}
public class Amazon.EventBridge.Model.OperationDisabledException : AmazonEventBridgeException {
    public OperationDisabledException(string message);
    public OperationDisabledException(string message, Exception innerException);
    public OperationDisabledException(Exception innerException);
    public OperationDisabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public OperationDisabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected OperationDisabledException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.PartnerEventSource : object {
    private string _arn;
    private string _name;
    public string Arn { get; public set; }
    public string Name { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.PartnerEventSourceAccount : object {
    private string _account;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _expirationTime;
    private EventSourceState _state;
    [AWSPropertyAttribute]
public string Account { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> ExpirationTime { get; public set; }
    public EventSourceState State { get; public set; }
    public string get_Account();
    public void set_Account(string value);
    internal bool IsSetAccount();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_ExpirationTime();
    public void set_ExpirationTime(Nullable`1<DateTime> value);
    internal bool IsSetExpirationTime();
    public EventSourceState get_State();
    public void set_State(EventSourceState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.PlacementConstraint : object {
    private string _expression;
    private PlacementConstraintType _type;
    [AWSPropertyAttribute]
public string Expression { get; public set; }
    public PlacementConstraintType Type { get; public set; }
    public string get_Expression();
    public void set_Expression(string value);
    internal bool IsSetExpression();
    public PlacementConstraintType get_Type();
    public void set_Type(PlacementConstraintType value);
    internal bool IsSetType();
}
public class Amazon.EventBridge.Model.PlacementStrategy : object {
    private string _field;
    private PlacementStrategyType _type;
    [AWSPropertyAttribute]
public string Field { get; public set; }
    public PlacementStrategyType Type { get; public set; }
    public string get_Field();
    public void set_Field(string value);
    internal bool IsSetField();
    public PlacementStrategyType get_Type();
    public void set_Type(PlacementStrategyType value);
    internal bool IsSetType();
}
public class Amazon.EventBridge.Model.PolicyLengthExceededException : AmazonEventBridgeException {
    public PolicyLengthExceededException(string message);
    public PolicyLengthExceededException(string message, Exception innerException);
    public PolicyLengthExceededException(Exception innerException);
    public PolicyLengthExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PolicyLengthExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected PolicyLengthExceededException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.Primary : object {
    private string _healthCheck;
    [AWSPropertyAttribute]
public string HealthCheck { get; public set; }
    public string get_HealthCheck();
    public void set_HealthCheck(string value);
    internal bool IsSetHealthCheck();
}
public class Amazon.EventBridge.Model.PutEventsRequest : AmazonEventBridgeRequest {
    private string _endpointId;
    private List`1<PutEventsRequestEntry> _entries;
    [AWSPropertyAttribute]
public string EndpointId { get; public set; }
    [AWSPropertyAttribute]
public List`1<PutEventsRequestEntry> Entries { get; public set; }
    public string get_EndpointId();
    public void set_EndpointId(string value);
    internal bool IsSetEndpointId();
    public List`1<PutEventsRequestEntry> get_Entries();
    public void set_Entries(List`1<PutEventsRequestEntry> value);
    internal bool IsSetEntries();
}
public class Amazon.EventBridge.Model.PutEventsRequestEntry : object {
    private string _detail;
    private string _detailType;
    private string _eventBusName;
    private List`1<string> _resources;
    private string _source;
    private Nullable`1<DateTime> _time;
    private string _traceHeader;
    public string Detail { get; public set; }
    public string DetailType { get; public set; }
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    public List`1<string> Resources { get; public set; }
    public string Source { get; public set; }
    public Nullable`1<DateTime> Time { get; public set; }
    [AWSPropertyAttribute]
public string TraceHeader { get; public set; }
    public string get_Detail();
    public void set_Detail(string value);
    internal bool IsSetDetail();
    public string get_DetailType();
    public void set_DetailType(string value);
    internal bool IsSetDetailType();
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public List`1<string> get_Resources();
    public void set_Resources(List`1<string> value);
    internal bool IsSetResources();
    public string get_Source();
    public void set_Source(string value);
    internal bool IsSetSource();
    public Nullable`1<DateTime> get_Time();
    public void set_Time(Nullable`1<DateTime> value);
    internal bool IsSetTime();
    public string get_TraceHeader();
    public void set_TraceHeader(string value);
    internal bool IsSetTraceHeader();
}
public class Amazon.EventBridge.Model.PutEventsResponse : AmazonWebServiceResponse {
    private List`1<PutEventsResultEntry> _entries;
    private Nullable`1<int> _failedEntryCount;
    public List`1<PutEventsResultEntry> Entries { get; public set; }
    public Nullable`1<int> FailedEntryCount { get; public set; }
    public List`1<PutEventsResultEntry> get_Entries();
    public void set_Entries(List`1<PutEventsResultEntry> value);
    internal bool IsSetEntries();
    public Nullable`1<int> get_FailedEntryCount();
    public void set_FailedEntryCount(Nullable`1<int> value);
    internal bool IsSetFailedEntryCount();
}
public class Amazon.EventBridge.Model.PutEventsResultEntry : object {
    private string _errorCode;
    private string _errorMessage;
    private string _eventId;
    public string ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    [AWSPropertyAttribute]
public string EventId { get; public set; }
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    internal bool IsSetErrorCode();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    internal bool IsSetErrorMessage();
    public string get_EventId();
    public void set_EventId(string value);
    internal bool IsSetEventId();
}
public class Amazon.EventBridge.Model.PutPartnerEventsRequest : AmazonEventBridgeRequest {
    private List`1<PutPartnerEventsRequestEntry> _entries;
    [AWSPropertyAttribute]
public List`1<PutPartnerEventsRequestEntry> Entries { get; public set; }
    public List`1<PutPartnerEventsRequestEntry> get_Entries();
    public void set_Entries(List`1<PutPartnerEventsRequestEntry> value);
    internal bool IsSetEntries();
}
public class Amazon.EventBridge.Model.PutPartnerEventsRequestEntry : object {
    private string _detail;
    private string _detailType;
    private List`1<string> _resources;
    private string _source;
    private Nullable`1<DateTime> _time;
    public string Detail { get; public set; }
    public string DetailType { get; public set; }
    public List`1<string> Resources { get; public set; }
    [AWSPropertyAttribute]
public string Source { get; public set; }
    public Nullable`1<DateTime> Time { get; public set; }
    public string get_Detail();
    public void set_Detail(string value);
    internal bool IsSetDetail();
    public string get_DetailType();
    public void set_DetailType(string value);
    internal bool IsSetDetailType();
    public List`1<string> get_Resources();
    public void set_Resources(List`1<string> value);
    internal bool IsSetResources();
    public string get_Source();
    public void set_Source(string value);
    internal bool IsSetSource();
    public Nullable`1<DateTime> get_Time();
    public void set_Time(Nullable`1<DateTime> value);
    internal bool IsSetTime();
}
public class Amazon.EventBridge.Model.PutPartnerEventsResponse : AmazonWebServiceResponse {
    private List`1<PutPartnerEventsResultEntry> _entries;
    private Nullable`1<int> _failedEntryCount;
    public List`1<PutPartnerEventsResultEntry> Entries { get; public set; }
    public Nullable`1<int> FailedEntryCount { get; public set; }
    public List`1<PutPartnerEventsResultEntry> get_Entries();
    public void set_Entries(List`1<PutPartnerEventsResultEntry> value);
    internal bool IsSetEntries();
    public Nullable`1<int> get_FailedEntryCount();
    public void set_FailedEntryCount(Nullable`1<int> value);
    internal bool IsSetFailedEntryCount();
}
public class Amazon.EventBridge.Model.PutPartnerEventsResultEntry : object {
    private string _errorCode;
    private string _errorMessage;
    private string _eventId;
    public string ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    [AWSPropertyAttribute]
public string EventId { get; public set; }
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    internal bool IsSetErrorCode();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    internal bool IsSetErrorMessage();
    public string get_EventId();
    public void set_EventId(string value);
    internal bool IsSetEventId();
}
public class Amazon.EventBridge.Model.PutPermissionRequest : AmazonEventBridgeRequest {
    private string _action;
    private Condition _condition;
    private string _eventBusName;
    private string _policy;
    private string _principal;
    private string _statementId;
    [AWSPropertyAttribute]
public string Action { get; public set; }
    public Condition Condition { get; public set; }
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    public string Policy { get; public set; }
    [AWSPropertyAttribute]
public string Principal { get; public set; }
    [AWSPropertyAttribute]
public string StatementId { get; public set; }
    public string get_Action();
    public void set_Action(string value);
    internal bool IsSetAction();
    public Condition get_Condition();
    public void set_Condition(Condition value);
    internal bool IsSetCondition();
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public string get_Principal();
    public void set_Principal(string value);
    internal bool IsSetPrincipal();
    public string get_StatementId();
    public void set_StatementId(string value);
    internal bool IsSetStatementId();
}
public class Amazon.EventBridge.Model.PutPermissionResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.PutRuleRequest : AmazonEventBridgeRequest {
    private string _description;
    private string _eventBusName;
    private string _eventPattern;
    private string _name;
    private string _roleArn;
    private string _scheduleExpression;
    private RuleState _state;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public string EventPattern { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleExpression { get; public set; }
    public RuleState State { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public string get_EventPattern();
    public void set_EventPattern(string value);
    internal bool IsSetEventPattern();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public string get_ScheduleExpression();
    public void set_ScheduleExpression(string value);
    internal bool IsSetScheduleExpression();
    public RuleState get_State();
    public void set_State(RuleState value);
    internal bool IsSetState();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.EventBridge.Model.PutRuleResponse : AmazonWebServiceResponse {
    private string _ruleArn;
    [AWSPropertyAttribute]
public string RuleArn { get; public set; }
    public string get_RuleArn();
    public void set_RuleArn(string value);
    internal bool IsSetRuleArn();
}
public class Amazon.EventBridge.Model.PutTargetsRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private string _rule;
    private List`1<Target> _targets;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public string Rule { get; public set; }
    [AWSPropertyAttribute]
public List`1<Target> Targets { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public string get_Rule();
    public void set_Rule(string value);
    internal bool IsSetRule();
    public List`1<Target> get_Targets();
    public void set_Targets(List`1<Target> value);
    internal bool IsSetTargets();
}
public class Amazon.EventBridge.Model.PutTargetsResponse : AmazonWebServiceResponse {
    private List`1<PutTargetsResultEntry> _failedEntries;
    private Nullable`1<int> _failedEntryCount;
    public List`1<PutTargetsResultEntry> FailedEntries { get; public set; }
    public Nullable`1<int> FailedEntryCount { get; public set; }
    public List`1<PutTargetsResultEntry> get_FailedEntries();
    public void set_FailedEntries(List`1<PutTargetsResultEntry> value);
    internal bool IsSetFailedEntries();
    public Nullable`1<int> get_FailedEntryCount();
    public void set_FailedEntryCount(Nullable`1<int> value);
    internal bool IsSetFailedEntryCount();
}
public class Amazon.EventBridge.Model.PutTargetsResultEntry : object {
    private string _errorCode;
    private string _errorMessage;
    private string _targetId;
    public string ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    [AWSPropertyAttribute]
public string TargetId { get; public set; }
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    internal bool IsSetErrorCode();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    internal bool IsSetErrorMessage();
    public string get_TargetId();
    public void set_TargetId(string value);
    internal bool IsSetTargetId();
}
public class Amazon.EventBridge.Model.RedshiftDataParameters : object {
    private string _database;
    private string _dbUser;
    private string _secretManagerArn;
    private string _sql;
    private List`1<string> _sqls;
    private string _statementName;
    private Nullable`1<bool> _withEvent;
    [AWSPropertyAttribute]
public string Database { get; public set; }
    [AWSPropertyAttribute]
public string DbUser { get; public set; }
    [AWSPropertyAttribute]
public string SecretManagerArn { get; public set; }
    [AWSPropertyAttribute]
public string Sql { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Sqls { get; public set; }
    [AWSPropertyAttribute]
public string StatementName { get; public set; }
    public Nullable`1<bool> WithEvent { get; public set; }
    public string get_Database();
    public void set_Database(string value);
    internal bool IsSetDatabase();
    public string get_DbUser();
    public void set_DbUser(string value);
    internal bool IsSetDbUser();
    public string get_SecretManagerArn();
    public void set_SecretManagerArn(string value);
    internal bool IsSetSecretManagerArn();
    public string get_Sql();
    public void set_Sql(string value);
    internal bool IsSetSql();
    public List`1<string> get_Sqls();
    public void set_Sqls(List`1<string> value);
    internal bool IsSetSqls();
    public string get_StatementName();
    public void set_StatementName(string value);
    internal bool IsSetStatementName();
    public Nullable`1<bool> get_WithEvent();
    public void set_WithEvent(Nullable`1<bool> value);
    internal bool IsSetWithEvent();
}
public class Amazon.EventBridge.Model.RemovePermissionRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private Nullable`1<bool> _removeAllPermissions;
    private string _statementId;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    public Nullable`1<bool> RemoveAllPermissions { get; public set; }
    [AWSPropertyAttribute]
public string StatementId { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public Nullable`1<bool> get_RemoveAllPermissions();
    public void set_RemoveAllPermissions(Nullable`1<bool> value);
    internal bool IsSetRemoveAllPermissions();
    public string get_StatementId();
    public void set_StatementId(string value);
    internal bool IsSetStatementId();
}
public class Amazon.EventBridge.Model.RemovePermissionResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.RemoveTargetsRequest : AmazonEventBridgeRequest {
    private string _eventBusName;
    private Nullable`1<bool> _force;
    private List`1<string> _ids;
    private string _rule;
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    public Nullable`1<bool> Force { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Ids { get; public set; }
    [AWSPropertyAttribute]
public string Rule { get; public set; }
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
    public List`1<string> get_Ids();
    public void set_Ids(List`1<string> value);
    internal bool IsSetIds();
    public string get_Rule();
    public void set_Rule(string value);
    internal bool IsSetRule();
}
public class Amazon.EventBridge.Model.RemoveTargetsResponse : AmazonWebServiceResponse {
    private List`1<RemoveTargetsResultEntry> _failedEntries;
    private Nullable`1<int> _failedEntryCount;
    public List`1<RemoveTargetsResultEntry> FailedEntries { get; public set; }
    public Nullable`1<int> FailedEntryCount { get; public set; }
    public List`1<RemoveTargetsResultEntry> get_FailedEntries();
    public void set_FailedEntries(List`1<RemoveTargetsResultEntry> value);
    internal bool IsSetFailedEntries();
    public Nullable`1<int> get_FailedEntryCount();
    public void set_FailedEntryCount(Nullable`1<int> value);
    internal bool IsSetFailedEntryCount();
}
public class Amazon.EventBridge.Model.RemoveTargetsResultEntry : object {
    private string _errorCode;
    private string _errorMessage;
    private string _targetId;
    public string ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    [AWSPropertyAttribute]
public string TargetId { get; public set; }
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    internal bool IsSetErrorCode();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    internal bool IsSetErrorMessage();
    public string get_TargetId();
    public void set_TargetId(string value);
    internal bool IsSetTargetId();
}
public class Amazon.EventBridge.Model.Replay : object {
    private Nullable`1<DateTime> _eventEndTime;
    private Nullable`1<DateTime> _eventLastReplayedTime;
    private string _eventSourceArn;
    private Nullable`1<DateTime> _eventStartTime;
    private Nullable`1<DateTime> _replayEndTime;
    private string _replayName;
    private Nullable`1<DateTime> _replayStartTime;
    private ReplayState _state;
    private string _stateReason;
    public Nullable`1<DateTime> EventEndTime { get; public set; }
    public Nullable`1<DateTime> EventLastReplayedTime { get; public set; }
    [AWSPropertyAttribute]
public string EventSourceArn { get; public set; }
    public Nullable`1<DateTime> EventStartTime { get; public set; }
    public Nullable`1<DateTime> ReplayEndTime { get; public set; }
    [AWSPropertyAttribute]
public string ReplayName { get; public set; }
    public Nullable`1<DateTime> ReplayStartTime { get; public set; }
    public ReplayState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public Nullable`1<DateTime> get_EventEndTime();
    public void set_EventEndTime(Nullable`1<DateTime> value);
    internal bool IsSetEventEndTime();
    public Nullable`1<DateTime> get_EventLastReplayedTime();
    public void set_EventLastReplayedTime(Nullable`1<DateTime> value);
    internal bool IsSetEventLastReplayedTime();
    public string get_EventSourceArn();
    public void set_EventSourceArn(string value);
    internal bool IsSetEventSourceArn();
    public Nullable`1<DateTime> get_EventStartTime();
    public void set_EventStartTime(Nullable`1<DateTime> value);
    internal bool IsSetEventStartTime();
    public Nullable`1<DateTime> get_ReplayEndTime();
    public void set_ReplayEndTime(Nullable`1<DateTime> value);
    internal bool IsSetReplayEndTime();
    public string get_ReplayName();
    public void set_ReplayName(string value);
    internal bool IsSetReplayName();
    public Nullable`1<DateTime> get_ReplayStartTime();
    public void set_ReplayStartTime(Nullable`1<DateTime> value);
    internal bool IsSetReplayStartTime();
    public ReplayState get_State();
    public void set_State(ReplayState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.ReplayDestination : object {
    private string _arn;
    private List`1<string> _filterArns;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public List`1<string> FilterArns { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public List`1<string> get_FilterArns();
    public void set_FilterArns(List`1<string> value);
    internal bool IsSetFilterArns();
}
public class Amazon.EventBridge.Model.ReplicationConfig : object {
    private ReplicationState _state;
    public ReplicationState State { get; public set; }
    public ReplicationState get_State();
    public void set_State(ReplicationState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.ResourceAlreadyExistsException : AmazonEventBridgeException {
    public ResourceAlreadyExistsException(string message);
    public ResourceAlreadyExistsException(string message, Exception innerException);
    public ResourceAlreadyExistsException(Exception innerException);
    public ResourceAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ResourceAlreadyExistsException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.ResourceNotFoundException : AmazonEventBridgeException {
    public ResourceNotFoundException(string message);
    public ResourceNotFoundException(string message, Exception innerException);
    public ResourceNotFoundException(Exception innerException);
    public ResourceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    protected ResourceNotFoundException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
[SuppressMessageAttribute("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Amazon.EventBridge.Model.RetryPolicy : object {
    private Nullable`1<int> _maximumEventAgeInSeconds;
    private Nullable`1<int> _maximumRetryAttempts;
    [AWSPropertyAttribute]
public Nullable`1<int> MaximumEventAgeInSeconds { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaximumRetryAttempts { get; public set; }
    public Nullable`1<int> get_MaximumEventAgeInSeconds();
    public void set_MaximumEventAgeInSeconds(Nullable`1<int> value);
    internal bool IsSetMaximumEventAgeInSeconds();
    public Nullable`1<int> get_MaximumRetryAttempts();
    public void set_MaximumRetryAttempts(Nullable`1<int> value);
    internal bool IsSetMaximumRetryAttempts();
}
public class Amazon.EventBridge.Model.RoutingConfig : object {
    private FailoverConfig _failoverConfig;
    [AWSPropertyAttribute]
public FailoverConfig FailoverConfig { get; public set; }
    public FailoverConfig get_FailoverConfig();
    public void set_FailoverConfig(FailoverConfig value);
    internal bool IsSetFailoverConfig();
}
public class Amazon.EventBridge.Model.Rule : object {
    private string _arn;
    private string _description;
    private string _eventBusName;
    private string _eventPattern;
    private string _managedBy;
    private string _name;
    private string _roleArn;
    private string _scheduleExpression;
    private RuleState _state;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string EventBusName { get; public set; }
    [AWSPropertyAttribute]
public string EventPattern { get; public set; }
    [AWSPropertyAttribute]
public string ManagedBy { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleExpression { get; public set; }
    public RuleState State { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_EventBusName();
    public void set_EventBusName(string value);
    internal bool IsSetEventBusName();
    public string get_EventPattern();
    public void set_EventPattern(string value);
    internal bool IsSetEventPattern();
    public string get_ManagedBy();
    public void set_ManagedBy(string value);
    internal bool IsSetManagedBy();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public string get_ScheduleExpression();
    public void set_ScheduleExpression(string value);
    internal bool IsSetScheduleExpression();
    public RuleState get_State();
    public void set_State(RuleState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.RunCommandParameters : object {
    private List`1<RunCommandTarget> _runCommandTargets;
    [AWSPropertyAttribute]
public List`1<RunCommandTarget> RunCommandTargets { get; public set; }
    public List`1<RunCommandTarget> get_RunCommandTargets();
    public void set_RunCommandTargets(List`1<RunCommandTarget> value);
    internal bool IsSetRunCommandTargets();
}
public class Amazon.EventBridge.Model.RunCommandTarget : object {
    private string _key;
    private List`1<string> _values;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Values { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public List`1<string> get_Values();
    public void set_Values(List`1<string> value);
    internal bool IsSetValues();
}
public class Amazon.EventBridge.Model.SageMakerPipelineParameter : object {
    private string _name;
    private string _value;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.EventBridge.Model.SageMakerPipelineParameters : object {
    private List`1<SageMakerPipelineParameter> _pipelineParameterList;
    [AWSPropertyAttribute]
public List`1<SageMakerPipelineParameter> PipelineParameterList { get; public set; }
    public List`1<SageMakerPipelineParameter> get_PipelineParameterList();
    public void set_PipelineParameterList(List`1<SageMakerPipelineParameter> value);
    internal bool IsSetPipelineParameterList();
}
public class Amazon.EventBridge.Model.Secondary : object {
    private string _route;
    [AWSPropertyAttribute]
public string Route { get; public set; }
    public string get_Route();
    public void set_Route(string value);
    internal bool IsSetRoute();
}
public class Amazon.EventBridge.Model.SqsParameters : object {
    private string _messageGroupId;
    [AWSPropertyAttribute]
public string MessageGroupId { get; public set; }
    public string get_MessageGroupId();
    public void set_MessageGroupId(string value);
    internal bool IsSetMessageGroupId();
}
public class Amazon.EventBridge.Model.StartReplayRequest : AmazonEventBridgeRequest {
    private string _description;
    private ReplayDestination _destination;
    private Nullable`1<DateTime> _eventEndTime;
    private string _eventSourceArn;
    private Nullable`1<DateTime> _eventStartTime;
    private string _replayName;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public ReplayDestination Destination { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> EventEndTime { get; public set; }
    [AWSPropertyAttribute]
public string EventSourceArn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> EventStartTime { get; public set; }
    [AWSPropertyAttribute]
public string ReplayName { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public ReplayDestination get_Destination();
    public void set_Destination(ReplayDestination value);
    internal bool IsSetDestination();
    public Nullable`1<DateTime> get_EventEndTime();
    public void set_EventEndTime(Nullable`1<DateTime> value);
    internal bool IsSetEventEndTime();
    public string get_EventSourceArn();
    public void set_EventSourceArn(string value);
    internal bool IsSetEventSourceArn();
    public Nullable`1<DateTime> get_EventStartTime();
    public void set_EventStartTime(Nullable`1<DateTime> value);
    internal bool IsSetEventStartTime();
    public string get_ReplayName();
    public void set_ReplayName(string value);
    internal bool IsSetReplayName();
}
public class Amazon.EventBridge.Model.StartReplayResponse : AmazonWebServiceResponse {
    private string _replayArn;
    private Nullable`1<DateTime> _replayStartTime;
    private ReplayState _state;
    private string _stateReason;
    [AWSPropertyAttribute]
public string ReplayArn { get; public set; }
    public Nullable`1<DateTime> ReplayStartTime { get; public set; }
    public ReplayState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public string get_ReplayArn();
    public void set_ReplayArn(string value);
    internal bool IsSetReplayArn();
    public Nullable`1<DateTime> get_ReplayStartTime();
    public void set_ReplayStartTime(Nullable`1<DateTime> value);
    internal bool IsSetReplayStartTime();
    public ReplayState get_State();
    public void set_State(ReplayState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.EventBridge.Model.TagResourceRequest : AmazonEventBridgeRequest {
    private string _resourceARN;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ResourceARN { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_ResourceARN();
    public void set_ResourceARN(string value);
    internal bool IsSetResourceARN();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.EventBridge.Model.TagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.Target : object {
    private AppSyncParameters _appSyncParameters;
    private string _arn;
    private BatchParameters _batchParameters;
    private DeadLetterConfig _deadLetterConfig;
    private EcsParameters _ecsParameters;
    private HttpParameters _httpParameters;
    private string _id;
    private string _input;
    private string _inputPath;
    private InputTransformer _inputTransformer;
    private KinesisParameters _kinesisParameters;
    private RedshiftDataParameters _redshiftDataParameters;
    private RetryPolicy _retryPolicy;
    private string _roleArn;
    private RunCommandParameters _runCommandParameters;
    private SageMakerPipelineParameters _sageMakerPipelineParameters;
    private SqsParameters _sqsParameters;
    public AppSyncParameters AppSyncParameters { get; public set; }
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public BatchParameters BatchParameters { get; public set; }
    public DeadLetterConfig DeadLetterConfig { get; public set; }
    public EcsParameters EcsParameters { get; public set; }
    public HttpParameters HttpParameters { get; public set; }
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string Input { get; public set; }
    [AWSPropertyAttribute]
public string InputPath { get; public set; }
    public InputTransformer InputTransformer { get; public set; }
    public KinesisParameters KinesisParameters { get; public set; }
    public RedshiftDataParameters RedshiftDataParameters { get; public set; }
    public RetryPolicy RetryPolicy { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    public RunCommandParameters RunCommandParameters { get; public set; }
    public SageMakerPipelineParameters SageMakerPipelineParameters { get; public set; }
    public SqsParameters SqsParameters { get; public set; }
    public AppSyncParameters get_AppSyncParameters();
    public void set_AppSyncParameters(AppSyncParameters value);
    internal bool IsSetAppSyncParameters();
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public BatchParameters get_BatchParameters();
    public void set_BatchParameters(BatchParameters value);
    internal bool IsSetBatchParameters();
    public DeadLetterConfig get_DeadLetterConfig();
    public void set_DeadLetterConfig(DeadLetterConfig value);
    internal bool IsSetDeadLetterConfig();
    public EcsParameters get_EcsParameters();
    public void set_EcsParameters(EcsParameters value);
    internal bool IsSetEcsParameters();
    public HttpParameters get_HttpParameters();
    public void set_HttpParameters(HttpParameters value);
    internal bool IsSetHttpParameters();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Input();
    public void set_Input(string value);
    internal bool IsSetInput();
    public string get_InputPath();
    public void set_InputPath(string value);
    internal bool IsSetInputPath();
    public InputTransformer get_InputTransformer();
    public void set_InputTransformer(InputTransformer value);
    internal bool IsSetInputTransformer();
    public KinesisParameters get_KinesisParameters();
    public void set_KinesisParameters(KinesisParameters value);
    internal bool IsSetKinesisParameters();
    public RedshiftDataParameters get_RedshiftDataParameters();
    public void set_RedshiftDataParameters(RedshiftDataParameters value);
    internal bool IsSetRedshiftDataParameters();
    public RetryPolicy get_RetryPolicy();
    public void set_RetryPolicy(RetryPolicy value);
    internal bool IsSetRetryPolicy();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public RunCommandParameters get_RunCommandParameters();
    public void set_RunCommandParameters(RunCommandParameters value);
    internal bool IsSetRunCommandParameters();
    public SageMakerPipelineParameters get_SageMakerPipelineParameters();
    public void set_SageMakerPipelineParameters(SageMakerPipelineParameters value);
    internal bool IsSetSageMakerPipelineParameters();
    public SqsParameters get_SqsParameters();
    public void set_SqsParameters(SqsParameters value);
    internal bool IsSetSqsParameters();
}
public class Amazon.EventBridge.Model.TestEventPatternRequest : AmazonEventBridgeRequest {
    private string _event;
    private string _eventPattern;
    [AWSPropertyAttribute]
public string Event { get; public set; }
    [AWSPropertyAttribute]
public string EventPattern { get; public set; }
    public string get_Event();
    public void set_Event(string value);
    internal bool IsSetEvent();
    public string get_EventPattern();
    public void set_EventPattern(string value);
    internal bool IsSetEventPattern();
}
public class Amazon.EventBridge.Model.TestEventPatternResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _result;
    public Nullable`1<bool> Result { get; public set; }
    public Nullable`1<bool> get_Result();
    public void set_Result(Nullable`1<bool> value);
    internal bool IsSetResult();
}
public class Amazon.EventBridge.Model.UntagResourceRequest : AmazonEventBridgeRequest {
    private string _resourceARN;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string ResourceARN { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_ResourceARN();
    public void set_ResourceARN(string value);
    internal bool IsSetResourceARN();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.EventBridge.Model.UntagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.EventBridge.Model.UpdateApiDestinationRequest : AmazonEventBridgeRequest {
    private string _connectionArn;
    private string _description;
    private ApiDestinationHttpMethod _httpMethod;
    private string _invocationEndpoint;
    private Nullable`1<int> _invocationRateLimitPerSecond;
    private string _name;
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public ApiDestinationHttpMethod HttpMethod { get; public set; }
    [AWSPropertyAttribute]
public string InvocationEndpoint { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> InvocationRateLimitPerSecond { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public ApiDestinationHttpMethod get_HttpMethod();
    public void set_HttpMethod(ApiDestinationHttpMethod value);
    internal bool IsSetHttpMethod();
    public string get_InvocationEndpoint();
    public void set_InvocationEndpoint(string value);
    internal bool IsSetInvocationEndpoint();
    public Nullable`1<int> get_InvocationRateLimitPerSecond();
    public void set_InvocationRateLimitPerSecond(Nullable`1<int> value);
    internal bool IsSetInvocationRateLimitPerSecond();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.UpdateApiDestinationResponse : AmazonWebServiceResponse {
    private string _apiDestinationArn;
    private ApiDestinationState _apiDestinationState;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _lastModifiedTime;
    [AWSPropertyAttribute]
public string ApiDestinationArn { get; public set; }
    public ApiDestinationState ApiDestinationState { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    public string get_ApiDestinationArn();
    public void set_ApiDestinationArn(string value);
    internal bool IsSetApiDestinationArn();
    public ApiDestinationState get_ApiDestinationState();
    public void set_ApiDestinationState(ApiDestinationState value);
    internal bool IsSetApiDestinationState();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
}
public class Amazon.EventBridge.Model.UpdateArchiveRequest : AmazonEventBridgeRequest {
    private string _archiveName;
    private string _description;
    private string _eventPattern;
    private Nullable`1<int> _retentionDays;
    [AWSPropertyAttribute]
public string ArchiveName { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string EventPattern { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> RetentionDays { get; public set; }
    public string get_ArchiveName();
    public void set_ArchiveName(string value);
    internal bool IsSetArchiveName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_EventPattern();
    public void set_EventPattern(string value);
    internal bool IsSetEventPattern();
    public Nullable`1<int> get_RetentionDays();
    public void set_RetentionDays(Nullable`1<int> value);
    internal bool IsSetRetentionDays();
}
public class Amazon.EventBridge.Model.UpdateArchiveResponse : AmazonWebServiceResponse {
    private string _archiveArn;
    private Nullable`1<DateTime> _creationTime;
    private ArchiveState _state;
    private string _stateReason;
    [AWSPropertyAttribute]
public string ArchiveArn { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public ArchiveState State { get; public set; }
    [AWSPropertyAttribute]
public string StateReason { get; public set; }
    public string get_ArchiveArn();
    public void set_ArchiveArn(string value);
    internal bool IsSetArchiveArn();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public ArchiveState get_State();
    public void set_State(ArchiveState value);
    internal bool IsSetState();
    public string get_StateReason();
    public void set_StateReason(string value);
    internal bool IsSetStateReason();
}
public class Amazon.EventBridge.Model.UpdateConnectionApiKeyAuthRequestParameters : object {
    private string _apiKeyName;
    private string _apiKeyValue;
    [AWSPropertyAttribute]
public string ApiKeyName { get; public set; }
    [AWSPropertyAttribute]
public string ApiKeyValue { get; public set; }
    public string get_ApiKeyName();
    public void set_ApiKeyName(string value);
    internal bool IsSetApiKeyName();
    public string get_ApiKeyValue();
    public void set_ApiKeyValue(string value);
    internal bool IsSetApiKeyValue();
}
public class Amazon.EventBridge.Model.UpdateConnectionAuthRequestParameters : object {
    private UpdateConnectionApiKeyAuthRequestParameters _apiKeyAuthParameters;
    private UpdateConnectionBasicAuthRequestParameters _basicAuthParameters;
    private ConnectionHttpParameters _invocationHttpParameters;
    private UpdateConnectionOAuthRequestParameters _oAuthParameters;
    public UpdateConnectionApiKeyAuthRequestParameters ApiKeyAuthParameters { get; public set; }
    public UpdateConnectionBasicAuthRequestParameters BasicAuthParameters { get; public set; }
    public ConnectionHttpParameters InvocationHttpParameters { get; public set; }
    public UpdateConnectionOAuthRequestParameters OAuthParameters { get; public set; }
    public UpdateConnectionApiKeyAuthRequestParameters get_ApiKeyAuthParameters();
    public void set_ApiKeyAuthParameters(UpdateConnectionApiKeyAuthRequestParameters value);
    internal bool IsSetApiKeyAuthParameters();
    public UpdateConnectionBasicAuthRequestParameters get_BasicAuthParameters();
    public void set_BasicAuthParameters(UpdateConnectionBasicAuthRequestParameters value);
    internal bool IsSetBasicAuthParameters();
    public ConnectionHttpParameters get_InvocationHttpParameters();
    public void set_InvocationHttpParameters(ConnectionHttpParameters value);
    internal bool IsSetInvocationHttpParameters();
    public UpdateConnectionOAuthRequestParameters get_OAuthParameters();
    public void set_OAuthParameters(UpdateConnectionOAuthRequestParameters value);
    internal bool IsSetOAuthParameters();
}
public class Amazon.EventBridge.Model.UpdateConnectionBasicAuthRequestParameters : object {
    private string _password;
    private string _username;
    [AWSPropertyAttribute]
public string Password { get; public set; }
    [AWSPropertyAttribute]
public string Username { get; public set; }
    public string get_Password();
    public void set_Password(string value);
    internal bool IsSetPassword();
    public string get_Username();
    public void set_Username(string value);
    internal bool IsSetUsername();
}
public class Amazon.EventBridge.Model.UpdateConnectionOAuthClientRequestParameters : object {
    private string _clientID;
    private string _clientSecret;
    [AWSPropertyAttribute]
public string ClientID { get; public set; }
    [AWSPropertyAttribute]
public string ClientSecret { get; public set; }
    public string get_ClientID();
    public void set_ClientID(string value);
    internal bool IsSetClientID();
    public string get_ClientSecret();
    public void set_ClientSecret(string value);
    internal bool IsSetClientSecret();
}
public class Amazon.EventBridge.Model.UpdateConnectionOAuthRequestParameters : object {
    private string _authorizationEndpoint;
    private UpdateConnectionOAuthClientRequestParameters _clientParameters;
    private ConnectionOAuthHttpMethod _httpMethod;
    private ConnectionHttpParameters _oAuthHttpParameters;
    [AWSPropertyAttribute]
public string AuthorizationEndpoint { get; public set; }
    public UpdateConnectionOAuthClientRequestParameters ClientParameters { get; public set; }
    public ConnectionOAuthHttpMethod HttpMethod { get; public set; }
    public ConnectionHttpParameters OAuthHttpParameters { get; public set; }
    public string get_AuthorizationEndpoint();
    public void set_AuthorizationEndpoint(string value);
    internal bool IsSetAuthorizationEndpoint();
    public UpdateConnectionOAuthClientRequestParameters get_ClientParameters();
    public void set_ClientParameters(UpdateConnectionOAuthClientRequestParameters value);
    internal bool IsSetClientParameters();
    public ConnectionOAuthHttpMethod get_HttpMethod();
    public void set_HttpMethod(ConnectionOAuthHttpMethod value);
    internal bool IsSetHttpMethod();
    public ConnectionHttpParameters get_OAuthHttpParameters();
    public void set_OAuthHttpParameters(ConnectionHttpParameters value);
    internal bool IsSetOAuthHttpParameters();
}
public class Amazon.EventBridge.Model.UpdateConnectionRequest : AmazonEventBridgeRequest {
    private ConnectionAuthorizationType _authorizationType;
    private UpdateConnectionAuthRequestParameters _authParameters;
    private string _description;
    private string _name;
    public ConnectionAuthorizationType AuthorizationType { get; public set; }
    public UpdateConnectionAuthRequestParameters AuthParameters { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public ConnectionAuthorizationType get_AuthorizationType();
    public void set_AuthorizationType(ConnectionAuthorizationType value);
    internal bool IsSetAuthorizationType();
    public UpdateConnectionAuthRequestParameters get_AuthParameters();
    public void set_AuthParameters(UpdateConnectionAuthRequestParameters value);
    internal bool IsSetAuthParameters();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.UpdateConnectionResponse : AmazonWebServiceResponse {
    private string _connectionArn;
    private ConnectionState _connectionState;
    private Nullable`1<DateTime> _creationTime;
    private Nullable`1<DateTime> _lastAuthorizedTime;
    private Nullable`1<DateTime> _lastModifiedTime;
    [AWSPropertyAttribute]
public string ConnectionArn { get; public set; }
    public ConnectionState ConnectionState { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public Nullable`1<DateTime> LastAuthorizedTime { get; public set; }
    public Nullable`1<DateTime> LastModifiedTime { get; public set; }
    public string get_ConnectionArn();
    public void set_ConnectionArn(string value);
    internal bool IsSetConnectionArn();
    public ConnectionState get_ConnectionState();
    public void set_ConnectionState(ConnectionState value);
    internal bool IsSetConnectionState();
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    internal bool IsSetCreationTime();
    public Nullable`1<DateTime> get_LastAuthorizedTime();
    public void set_LastAuthorizedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastAuthorizedTime();
    public Nullable`1<DateTime> get_LastModifiedTime();
    public void set_LastModifiedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedTime();
}
public class Amazon.EventBridge.Model.UpdateEndpointRequest : AmazonEventBridgeRequest {
    private string _description;
    private List`1<EndpointEventBus> _eventBuses;
    private string _name;
    private ReplicationConfig _replicationConfig;
    private string _roleArn;
    private RoutingConfig _routingConfig;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public List`1<EndpointEventBus> EventBuses { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public ReplicationConfig ReplicationConfig { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    public RoutingConfig RoutingConfig { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<EndpointEventBus> get_EventBuses();
    public void set_EventBuses(List`1<EndpointEventBus> value);
    internal bool IsSetEventBuses();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public ReplicationConfig get_ReplicationConfig();
    public void set_ReplicationConfig(ReplicationConfig value);
    internal bool IsSetReplicationConfig();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public RoutingConfig get_RoutingConfig();
    public void set_RoutingConfig(RoutingConfig value);
    internal bool IsSetRoutingConfig();
}
public class Amazon.EventBridge.Model.UpdateEndpointResponse : AmazonWebServiceResponse {
    private string _arn;
    private string _endpointId;
    private string _endpointUrl;
    private List`1<EndpointEventBus> _eventBuses;
    private string _name;
    private ReplicationConfig _replicationConfig;
    private string _roleArn;
    private RoutingConfig _routingConfig;
    private EndpointState _state;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string EndpointId { get; public set; }
    [AWSPropertyAttribute]
public string EndpointUrl { get; public set; }
    [AWSPropertyAttribute]
public List`1<EndpointEventBus> EventBuses { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public ReplicationConfig ReplicationConfig { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    public RoutingConfig RoutingConfig { get; public set; }
    public EndpointState State { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_EndpointId();
    public void set_EndpointId(string value);
    internal bool IsSetEndpointId();
    public string get_EndpointUrl();
    public void set_EndpointUrl(string value);
    internal bool IsSetEndpointUrl();
    public List`1<EndpointEventBus> get_EventBuses();
    public void set_EventBuses(List`1<EndpointEventBus> value);
    internal bool IsSetEventBuses();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public ReplicationConfig get_ReplicationConfig();
    public void set_ReplicationConfig(ReplicationConfig value);
    internal bool IsSetReplicationConfig();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public RoutingConfig get_RoutingConfig();
    public void set_RoutingConfig(RoutingConfig value);
    internal bool IsSetRoutingConfig();
    public EndpointState get_State();
    public void set_State(EndpointState value);
    internal bool IsSetState();
}
public class Amazon.EventBridge.Model.UpdateEventBusRequest : AmazonEventBridgeRequest {
    private DeadLetterConfig _deadLetterConfig;
    private string _description;
    private string _kmsKeyIdentifier;
    private string _name;
    public DeadLetterConfig DeadLetterConfig { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public DeadLetterConfig get_DeadLetterConfig();
    public void set_DeadLetterConfig(DeadLetterConfig value);
    internal bool IsSetDeadLetterConfig();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_KmsKeyIdentifier();
    public void set_KmsKeyIdentifier(string value);
    internal bool IsSetKmsKeyIdentifier();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.Model.UpdateEventBusResponse : AmazonWebServiceResponse {
    private string _arn;
    private DeadLetterConfig _deadLetterConfig;
    private string _description;
    private string _kmsKeyIdentifier;
    private string _name;
    public string Arn { get; public set; }
    public DeadLetterConfig DeadLetterConfig { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public DeadLetterConfig get_DeadLetterConfig();
    public void set_DeadLetterConfig(DeadLetterConfig value);
    internal bool IsSetDeadLetterConfig();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_KmsKeyIdentifier();
    public void set_KmsKeyIdentifier(string value);
    internal bool IsSetKmsKeyIdentifier();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.EventBridge.PlacementConstraintType : ConstantClass {
    public static PlacementConstraintType DistinctInstance;
    public static PlacementConstraintType MemberOf;
    public PlacementConstraintType(string value);
    private static PlacementConstraintType();
    public static PlacementConstraintType FindValue(string value);
    public static PlacementConstraintType op_Implicit(string value);
}
public class Amazon.EventBridge.PlacementStrategyType : ConstantClass {
    public static PlacementStrategyType Binpack;
    public static PlacementStrategyType Random;
    public static PlacementStrategyType Spread;
    public PlacementStrategyType(string value);
    private static PlacementStrategyType();
    public static PlacementStrategyType FindValue(string value);
    public static PlacementStrategyType op_Implicit(string value);
}
public class Amazon.EventBridge.PropagateTags : ConstantClass {
    public static PropagateTags TASK_DEFINITION;
    public PropagateTags(string value);
    private static PropagateTags();
    public static PropagateTags FindValue(string value);
    public static PropagateTags op_Implicit(string value);
}
public class Amazon.EventBridge.ReplayState : ConstantClass {
    public static ReplayState CANCELLED;
    public static ReplayState CANCELLING;
    public static ReplayState COMPLETED;
    public static ReplayState FAILED;
    public static ReplayState RUNNING;
    public static ReplayState STARTING;
    public ReplayState(string value);
    private static ReplayState();
    public static ReplayState FindValue(string value);
    public static ReplayState op_Implicit(string value);
}
public class Amazon.EventBridge.ReplicationState : ConstantClass {
    public static ReplicationState DISABLED;
    public static ReplicationState ENABLED;
    public ReplicationState(string value);
    private static ReplicationState();
    public static ReplicationState FindValue(string value);
    public static ReplicationState op_Implicit(string value);
}
public class Amazon.EventBridge.RuleState : ConstantClass {
    public static RuleState DISABLED;
    public static RuleState ENABLED;
    public static RuleState ENABLED_WITH_ALL_CLOUDTRAIL_MANAGEMENT_EVENTS;
    public RuleState(string value);
    private static RuleState();
    public static RuleState FindValue(string value);
    public static RuleState op_Implicit(string value);
}
