public class Amazon.IdentityManagement.AccessAdvisorUsageGranularityType : ConstantClass {
    public static AccessAdvisorUsageGranularityType ACTION_LEVEL;
    public static AccessAdvisorUsageGranularityType SERVICE_LEVEL;
    public AccessAdvisorUsageGranularityType(string value);
    private static AccessAdvisorUsageGranularityType();
    public static AccessAdvisorUsageGranularityType FindValue(string value);
    public static AccessAdvisorUsageGranularityType op_Implicit(string value);
}
public class Amazon.IdentityManagement.AmazonIdentityManagementServiceClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IIdentityManagementPaginatorFactory _paginators;
    public IIdentityManagementPaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonIdentityManagementServiceClient(RegionEndpoint region);
    public AmazonIdentityManagementServiceClient(AmazonIdentityManagementServiceConfig config);
    public AmazonIdentityManagementServiceClient(AWSCredentials credentials);
    public AmazonIdentityManagementServiceClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonIdentityManagementServiceClient(AWSCredentials credentials, AmazonIdentityManagementServiceConfig clientConfig);
    public AmazonIdentityManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonIdentityManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonIdentityManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonIdentityManagementServiceConfig clientConfig);
    public AmazonIdentityManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonIdentityManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonIdentityManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonIdentityManagementServiceConfig clientConfig);
    private static AmazonIdentityManagementServiceClient();
    public sealed virtual IIdentityManagementPaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual AddClientIDToOpenIDConnectProviderResponse AddClientIDToOpenIDConnectProvider(AddClientIDToOpenIDConnectProviderRequest request);
    public virtual Task`1<AddClientIDToOpenIDConnectProviderResponse> AddClientIDToOpenIDConnectProviderAsync(AddClientIDToOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    internal virtual AddRoleToInstanceProfileResponse AddRoleToInstanceProfile(AddRoleToInstanceProfileRequest request);
    public virtual Task`1<AddRoleToInstanceProfileResponse> AddRoleToInstanceProfileAsync(AddRoleToInstanceProfileRequest request, CancellationToken cancellationToken);
    internal virtual AddUserToGroupResponse AddUserToGroup(AddUserToGroupRequest request);
    public virtual Task`1<AddUserToGroupResponse> AddUserToGroupAsync(AddUserToGroupRequest request, CancellationToken cancellationToken);
    internal virtual AttachGroupPolicyResponse AttachGroupPolicy(AttachGroupPolicyRequest request);
    public virtual Task`1<AttachGroupPolicyResponse> AttachGroupPolicyAsync(AttachGroupPolicyRequest request, CancellationToken cancellationToken);
    internal virtual AttachRolePolicyResponse AttachRolePolicy(AttachRolePolicyRequest request);
    public virtual Task`1<AttachRolePolicyResponse> AttachRolePolicyAsync(AttachRolePolicyRequest request, CancellationToken cancellationToken);
    internal virtual AttachUserPolicyResponse AttachUserPolicy(AttachUserPolicyRequest request);
    public virtual Task`1<AttachUserPolicyResponse> AttachUserPolicyAsync(AttachUserPolicyRequest request, CancellationToken cancellationToken);
    internal virtual ChangePasswordResponse ChangePassword(ChangePasswordRequest request);
    public virtual Task`1<ChangePasswordResponse> ChangePasswordAsync(ChangePasswordRequest request, CancellationToken cancellationToken);
    internal virtual CreateAccessKeyResponse CreateAccessKey();
    internal virtual CreateAccessKeyResponse CreateAccessKey(CreateAccessKeyRequest request);
    public virtual Task`1<CreateAccessKeyResponse> CreateAccessKeyAsync(CancellationToken cancellationToken);
    public virtual Task`1<CreateAccessKeyResponse> CreateAccessKeyAsync(CreateAccessKeyRequest request, CancellationToken cancellationToken);
    internal virtual CreateAccountAliasResponse CreateAccountAlias(CreateAccountAliasRequest request);
    public virtual Task`1<CreateAccountAliasResponse> CreateAccountAliasAsync(CreateAccountAliasRequest request, CancellationToken cancellationToken);
    internal virtual CreateGroupResponse CreateGroup(CreateGroupRequest request);
    public virtual Task`1<CreateGroupResponse> CreateGroupAsync(CreateGroupRequest request, CancellationToken cancellationToken);
    internal virtual CreateInstanceProfileResponse CreateInstanceProfile(CreateInstanceProfileRequest request);
    public virtual Task`1<CreateInstanceProfileResponse> CreateInstanceProfileAsync(CreateInstanceProfileRequest request, CancellationToken cancellationToken);
    internal virtual CreateLoginProfileResponse CreateLoginProfile(CreateLoginProfileRequest request);
    public virtual Task`1<CreateLoginProfileResponse> CreateLoginProfileAsync(CreateLoginProfileRequest request, CancellationToken cancellationToken);
    internal virtual CreateOpenIDConnectProviderResponse CreateOpenIDConnectProvider(CreateOpenIDConnectProviderRequest request);
    public virtual Task`1<CreateOpenIDConnectProviderResponse> CreateOpenIDConnectProviderAsync(CreateOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    internal virtual CreatePolicyResponse CreatePolicy(CreatePolicyRequest request);
    public virtual Task`1<CreatePolicyResponse> CreatePolicyAsync(CreatePolicyRequest request, CancellationToken cancellationToken);
    internal virtual CreatePolicyVersionResponse CreatePolicyVersion(CreatePolicyVersionRequest request);
    public virtual Task`1<CreatePolicyVersionResponse> CreatePolicyVersionAsync(CreatePolicyVersionRequest request, CancellationToken cancellationToken);
    internal virtual CreateRoleResponse CreateRole(CreateRoleRequest request);
    public virtual Task`1<CreateRoleResponse> CreateRoleAsync(CreateRoleRequest request, CancellationToken cancellationToken);
    internal virtual CreateSAMLProviderResponse CreateSAMLProvider(CreateSAMLProviderRequest request);
    public virtual Task`1<CreateSAMLProviderResponse> CreateSAMLProviderAsync(CreateSAMLProviderRequest request, CancellationToken cancellationToken);
    internal virtual CreateServiceLinkedRoleResponse CreateServiceLinkedRole(CreateServiceLinkedRoleRequest request);
    public virtual Task`1<CreateServiceLinkedRoleResponse> CreateServiceLinkedRoleAsync(CreateServiceLinkedRoleRequest request, CancellationToken cancellationToken);
    internal virtual CreateServiceSpecificCredentialResponse CreateServiceSpecificCredential(CreateServiceSpecificCredentialRequest request);
    public virtual Task`1<CreateServiceSpecificCredentialResponse> CreateServiceSpecificCredentialAsync(CreateServiceSpecificCredentialRequest request, CancellationToken cancellationToken);
    internal virtual CreateUserResponse CreateUser(CreateUserRequest request);
    public virtual Task`1<CreateUserResponse> CreateUserAsync(CreateUserRequest request, CancellationToken cancellationToken);
    internal virtual CreateVirtualMFADeviceResponse CreateVirtualMFADevice(CreateVirtualMFADeviceRequest request);
    public virtual Task`1<CreateVirtualMFADeviceResponse> CreateVirtualMFADeviceAsync(CreateVirtualMFADeviceRequest request, CancellationToken cancellationToken);
    internal virtual DeactivateMFADeviceResponse DeactivateMFADevice(DeactivateMFADeviceRequest request);
    public virtual Task`1<DeactivateMFADeviceResponse> DeactivateMFADeviceAsync(DeactivateMFADeviceRequest request, CancellationToken cancellationToken);
    internal virtual DeleteAccessKeyResponse DeleteAccessKey(DeleteAccessKeyRequest request);
    public virtual Task`1<DeleteAccessKeyResponse> DeleteAccessKeyAsync(DeleteAccessKeyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteAccountAliasResponse DeleteAccountAlias(DeleteAccountAliasRequest request);
    public virtual Task`1<DeleteAccountAliasResponse> DeleteAccountAliasAsync(DeleteAccountAliasRequest request, CancellationToken cancellationToken);
    internal virtual DeleteAccountPasswordPolicyResponse DeleteAccountPasswordPolicy();
    internal virtual DeleteAccountPasswordPolicyResponse DeleteAccountPasswordPolicy(DeleteAccountPasswordPolicyRequest request);
    public virtual Task`1<DeleteAccountPasswordPolicyResponse> DeleteAccountPasswordPolicyAsync(CancellationToken cancellationToken);
    public virtual Task`1<DeleteAccountPasswordPolicyResponse> DeleteAccountPasswordPolicyAsync(DeleteAccountPasswordPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteGroupResponse DeleteGroup(DeleteGroupRequest request);
    public virtual Task`1<DeleteGroupResponse> DeleteGroupAsync(DeleteGroupRequest request, CancellationToken cancellationToken);
    internal virtual DeleteGroupPolicyResponse DeleteGroupPolicy(DeleteGroupPolicyRequest request);
    public virtual Task`1<DeleteGroupPolicyResponse> DeleteGroupPolicyAsync(DeleteGroupPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteInstanceProfileResponse DeleteInstanceProfile(DeleteInstanceProfileRequest request);
    public virtual Task`1<DeleteInstanceProfileResponse> DeleteInstanceProfileAsync(DeleteInstanceProfileRequest request, CancellationToken cancellationToken);
    internal virtual DeleteLoginProfileResponse DeleteLoginProfile(DeleteLoginProfileRequest request);
    public virtual Task`1<DeleteLoginProfileResponse> DeleteLoginProfileAsync(DeleteLoginProfileRequest request, CancellationToken cancellationToken);
    internal virtual DeleteOpenIDConnectProviderResponse DeleteOpenIDConnectProvider(DeleteOpenIDConnectProviderRequest request);
    public virtual Task`1<DeleteOpenIDConnectProviderResponse> DeleteOpenIDConnectProviderAsync(DeleteOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    internal virtual DeletePolicyResponse DeletePolicy(DeletePolicyRequest request);
    public virtual Task`1<DeletePolicyResponse> DeletePolicyAsync(DeletePolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeletePolicyVersionResponse DeletePolicyVersion(DeletePolicyVersionRequest request);
    public virtual Task`1<DeletePolicyVersionResponse> DeletePolicyVersionAsync(DeletePolicyVersionRequest request, CancellationToken cancellationToken);
    internal virtual DeleteRoleResponse DeleteRole(DeleteRoleRequest request);
    public virtual Task`1<DeleteRoleResponse> DeleteRoleAsync(DeleteRoleRequest request, CancellationToken cancellationToken);
    internal virtual DeleteRolePermissionsBoundaryResponse DeleteRolePermissionsBoundary(DeleteRolePermissionsBoundaryRequest request);
    public virtual Task`1<DeleteRolePermissionsBoundaryResponse> DeleteRolePermissionsBoundaryAsync(DeleteRolePermissionsBoundaryRequest request, CancellationToken cancellationToken);
    internal virtual DeleteRolePolicyResponse DeleteRolePolicy(DeleteRolePolicyRequest request);
    public virtual Task`1<DeleteRolePolicyResponse> DeleteRolePolicyAsync(DeleteRolePolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteSAMLProviderResponse DeleteSAMLProvider(DeleteSAMLProviderRequest request);
    public virtual Task`1<DeleteSAMLProviderResponse> DeleteSAMLProviderAsync(DeleteSAMLProviderRequest request, CancellationToken cancellationToken);
    internal virtual DeleteServerCertificateResponse DeleteServerCertificate(DeleteServerCertificateRequest request);
    public virtual Task`1<DeleteServerCertificateResponse> DeleteServerCertificateAsync(DeleteServerCertificateRequest request, CancellationToken cancellationToken);
    internal virtual DeleteServiceLinkedRoleResponse DeleteServiceLinkedRole(DeleteServiceLinkedRoleRequest request);
    public virtual Task`1<DeleteServiceLinkedRoleResponse> DeleteServiceLinkedRoleAsync(DeleteServiceLinkedRoleRequest request, CancellationToken cancellationToken);
    internal virtual DeleteServiceSpecificCredentialResponse DeleteServiceSpecificCredential(DeleteServiceSpecificCredentialRequest request);
    public virtual Task`1<DeleteServiceSpecificCredentialResponse> DeleteServiceSpecificCredentialAsync(DeleteServiceSpecificCredentialRequest request, CancellationToken cancellationToken);
    internal virtual DeleteSigningCertificateResponse DeleteSigningCertificate(DeleteSigningCertificateRequest request);
    public virtual Task`1<DeleteSigningCertificateResponse> DeleteSigningCertificateAsync(DeleteSigningCertificateRequest request, CancellationToken cancellationToken);
    internal virtual DeleteSSHPublicKeyResponse DeleteSSHPublicKey(DeleteSSHPublicKeyRequest request);
    public virtual Task`1<DeleteSSHPublicKeyResponse> DeleteSSHPublicKeyAsync(DeleteSSHPublicKeyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteUserResponse DeleteUser(DeleteUserRequest request);
    public virtual Task`1<DeleteUserResponse> DeleteUserAsync(DeleteUserRequest request, CancellationToken cancellationToken);
    internal virtual DeleteUserPermissionsBoundaryResponse DeleteUserPermissionsBoundary(DeleteUserPermissionsBoundaryRequest request);
    public virtual Task`1<DeleteUserPermissionsBoundaryResponse> DeleteUserPermissionsBoundaryAsync(DeleteUserPermissionsBoundaryRequest request, CancellationToken cancellationToken);
    internal virtual DeleteUserPolicyResponse DeleteUserPolicy(DeleteUserPolicyRequest request);
    public virtual Task`1<DeleteUserPolicyResponse> DeleteUserPolicyAsync(DeleteUserPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteVirtualMFADeviceResponse DeleteVirtualMFADevice(DeleteVirtualMFADeviceRequest request);
    public virtual Task`1<DeleteVirtualMFADeviceResponse> DeleteVirtualMFADeviceAsync(DeleteVirtualMFADeviceRequest request, CancellationToken cancellationToken);
    internal virtual DetachGroupPolicyResponse DetachGroupPolicy(DetachGroupPolicyRequest request);
    public virtual Task`1<DetachGroupPolicyResponse> DetachGroupPolicyAsync(DetachGroupPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DetachRolePolicyResponse DetachRolePolicy(DetachRolePolicyRequest request);
    public virtual Task`1<DetachRolePolicyResponse> DetachRolePolicyAsync(DetachRolePolicyRequest request, CancellationToken cancellationToken);
    internal virtual DetachUserPolicyResponse DetachUserPolicy(DetachUserPolicyRequest request);
    public virtual Task`1<DetachUserPolicyResponse> DetachUserPolicyAsync(DetachUserPolicyRequest request, CancellationToken cancellationToken);
    internal virtual EnableMFADeviceResponse EnableMFADevice(EnableMFADeviceRequest request);
    public virtual Task`1<EnableMFADeviceResponse> EnableMFADeviceAsync(EnableMFADeviceRequest request, CancellationToken cancellationToken);
    internal virtual GenerateCredentialReportResponse GenerateCredentialReport();
    internal virtual GenerateCredentialReportResponse GenerateCredentialReport(GenerateCredentialReportRequest request);
    public virtual Task`1<GenerateCredentialReportResponse> GenerateCredentialReportAsync(CancellationToken cancellationToken);
    public virtual Task`1<GenerateCredentialReportResponse> GenerateCredentialReportAsync(GenerateCredentialReportRequest request, CancellationToken cancellationToken);
    internal virtual GenerateOrganizationsAccessReportResponse GenerateOrganizationsAccessReport(GenerateOrganizationsAccessReportRequest request);
    public virtual Task`1<GenerateOrganizationsAccessReportResponse> GenerateOrganizationsAccessReportAsync(GenerateOrganizationsAccessReportRequest request, CancellationToken cancellationToken);
    internal virtual GenerateServiceLastAccessedDetailsResponse GenerateServiceLastAccessedDetails(GenerateServiceLastAccessedDetailsRequest request);
    public virtual Task`1<GenerateServiceLastAccessedDetailsResponse> GenerateServiceLastAccessedDetailsAsync(GenerateServiceLastAccessedDetailsRequest request, CancellationToken cancellationToken);
    internal virtual GetAccessKeyLastUsedResponse GetAccessKeyLastUsed(GetAccessKeyLastUsedRequest request);
    public virtual Task`1<GetAccessKeyLastUsedResponse> GetAccessKeyLastUsedAsync(GetAccessKeyLastUsedRequest request, CancellationToken cancellationToken);
    internal virtual GetAccountAuthorizationDetailsResponse GetAccountAuthorizationDetails(GetAccountAuthorizationDetailsRequest request);
    public virtual Task`1<GetAccountAuthorizationDetailsResponse> GetAccountAuthorizationDetailsAsync(GetAccountAuthorizationDetailsRequest request, CancellationToken cancellationToken);
    internal virtual GetAccountPasswordPolicyResponse GetAccountPasswordPolicy();
    internal virtual GetAccountPasswordPolicyResponse GetAccountPasswordPolicy(GetAccountPasswordPolicyRequest request);
    public virtual Task`1<GetAccountPasswordPolicyResponse> GetAccountPasswordPolicyAsync(CancellationToken cancellationToken);
    public virtual Task`1<GetAccountPasswordPolicyResponse> GetAccountPasswordPolicyAsync(GetAccountPasswordPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetAccountSummaryResponse GetAccountSummary();
    internal virtual GetAccountSummaryResponse GetAccountSummary(GetAccountSummaryRequest request);
    public virtual Task`1<GetAccountSummaryResponse> GetAccountSummaryAsync(CancellationToken cancellationToken);
    public virtual Task`1<GetAccountSummaryResponse> GetAccountSummaryAsync(GetAccountSummaryRequest request, CancellationToken cancellationToken);
    internal virtual GetContextKeysForCustomPolicyResponse GetContextKeysForCustomPolicy(GetContextKeysForCustomPolicyRequest request);
    public virtual Task`1<GetContextKeysForCustomPolicyResponse> GetContextKeysForCustomPolicyAsync(List`1<string> policyInputList, CancellationToken cancellationToken);
    public virtual Task`1<GetContextKeysForCustomPolicyResponse> GetContextKeysForCustomPolicyAsync(GetContextKeysForCustomPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetContextKeysForPrincipalPolicyResponse GetContextKeysForPrincipalPolicy(GetContextKeysForPrincipalPolicyRequest request);
    public virtual Task`1<GetContextKeysForPrincipalPolicyResponse> GetContextKeysForPrincipalPolicyAsync(string policySourceArn, CancellationToken cancellationToken);
    public virtual Task`1<GetContextKeysForPrincipalPolicyResponse> GetContextKeysForPrincipalPolicyAsync(string policySourceArn, List`1<string> policyInputList, CancellationToken cancellationToken);
    public virtual Task`1<GetContextKeysForPrincipalPolicyResponse> GetContextKeysForPrincipalPolicyAsync(GetContextKeysForPrincipalPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetCredentialReportResponse GetCredentialReport();
    internal virtual GetCredentialReportResponse GetCredentialReport(GetCredentialReportRequest request);
    public virtual Task`1<GetCredentialReportResponse> GetCredentialReportAsync(CancellationToken cancellationToken);
    public virtual Task`1<GetCredentialReportResponse> GetCredentialReportAsync(GetCredentialReportRequest request, CancellationToken cancellationToken);
    internal virtual GetGroupResponse GetGroup(GetGroupRequest request);
    public virtual Task`1<GetGroupResponse> GetGroupAsync(GetGroupRequest request, CancellationToken cancellationToken);
    internal virtual GetGroupPolicyResponse GetGroupPolicy(GetGroupPolicyRequest request);
    public virtual Task`1<GetGroupPolicyResponse> GetGroupPolicyAsync(GetGroupPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetInstanceProfileResponse GetInstanceProfile(GetInstanceProfileRequest request);
    public virtual Task`1<GetInstanceProfileResponse> GetInstanceProfileAsync(GetInstanceProfileRequest request, CancellationToken cancellationToken);
    internal virtual GetLoginProfileResponse GetLoginProfile(GetLoginProfileRequest request);
    public virtual Task`1<GetLoginProfileResponse> GetLoginProfileAsync(GetLoginProfileRequest request, CancellationToken cancellationToken);
    internal virtual GetMFADeviceResponse GetMFADevice(GetMFADeviceRequest request);
    public virtual Task`1<GetMFADeviceResponse> GetMFADeviceAsync(GetMFADeviceRequest request, CancellationToken cancellationToken);
    internal virtual GetOpenIDConnectProviderResponse GetOpenIDConnectProvider(GetOpenIDConnectProviderRequest request);
    public virtual Task`1<GetOpenIDConnectProviderResponse> GetOpenIDConnectProviderAsync(GetOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    internal virtual GetOrganizationsAccessReportResponse GetOrganizationsAccessReport(GetOrganizationsAccessReportRequest request);
    public virtual Task`1<GetOrganizationsAccessReportResponse> GetOrganizationsAccessReportAsync(GetOrganizationsAccessReportRequest request, CancellationToken cancellationToken);
    internal virtual GetPolicyResponse GetPolicy(GetPolicyRequest request);
    public virtual Task`1<GetPolicyResponse> GetPolicyAsync(GetPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetPolicyVersionResponse GetPolicyVersion(GetPolicyVersionRequest request);
    public virtual Task`1<GetPolicyVersionResponse> GetPolicyVersionAsync(GetPolicyVersionRequest request, CancellationToken cancellationToken);
    internal virtual GetRoleResponse GetRole(GetRoleRequest request);
    public virtual Task`1<GetRoleResponse> GetRoleAsync(GetRoleRequest request, CancellationToken cancellationToken);
    internal virtual GetRolePolicyResponse GetRolePolicy(GetRolePolicyRequest request);
    public virtual Task`1<GetRolePolicyResponse> GetRolePolicyAsync(GetRolePolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetSAMLProviderResponse GetSAMLProvider(GetSAMLProviderRequest request);
    public virtual Task`1<GetSAMLProviderResponse> GetSAMLProviderAsync(GetSAMLProviderRequest request, CancellationToken cancellationToken);
    internal virtual GetServerCertificateResponse GetServerCertificate(GetServerCertificateRequest request);
    public virtual Task`1<GetServerCertificateResponse> GetServerCertificateAsync(GetServerCertificateRequest request, CancellationToken cancellationToken);
    internal virtual GetServiceLastAccessedDetailsResponse GetServiceLastAccessedDetails(GetServiceLastAccessedDetailsRequest request);
    public virtual Task`1<GetServiceLastAccessedDetailsResponse> GetServiceLastAccessedDetailsAsync(GetServiceLastAccessedDetailsRequest request, CancellationToken cancellationToken);
    internal virtual GetServiceLastAccessedDetailsWithEntitiesResponse GetServiceLastAccessedDetailsWithEntities(GetServiceLastAccessedDetailsWithEntitiesRequest request);
    public virtual Task`1<GetServiceLastAccessedDetailsWithEntitiesResponse> GetServiceLastAccessedDetailsWithEntitiesAsync(GetServiceLastAccessedDetailsWithEntitiesRequest request, CancellationToken cancellationToken);
    internal virtual GetServiceLinkedRoleDeletionStatusResponse GetServiceLinkedRoleDeletionStatus(GetServiceLinkedRoleDeletionStatusRequest request);
    public virtual Task`1<GetServiceLinkedRoleDeletionStatusResponse> GetServiceLinkedRoleDeletionStatusAsync(GetServiceLinkedRoleDeletionStatusRequest request, CancellationToken cancellationToken);
    internal virtual GetSSHPublicKeyResponse GetSSHPublicKey(GetSSHPublicKeyRequest request);
    public virtual Task`1<GetSSHPublicKeyResponse> GetSSHPublicKeyAsync(GetSSHPublicKeyRequest request, CancellationToken cancellationToken);
    internal virtual GetUserResponse GetUser();
    internal virtual GetUserResponse GetUser(GetUserRequest request);
    public virtual Task`1<GetUserResponse> GetUserAsync(CancellationToken cancellationToken);
    public virtual Task`1<GetUserResponse> GetUserAsync(GetUserRequest request, CancellationToken cancellationToken);
    internal virtual GetUserPolicyResponse GetUserPolicy(GetUserPolicyRequest request);
    public virtual Task`1<GetUserPolicyResponse> GetUserPolicyAsync(GetUserPolicyRequest request, CancellationToken cancellationToken);
    internal virtual ListAccessKeysResponse ListAccessKeys();
    internal virtual ListAccessKeysResponse ListAccessKeys(ListAccessKeysRequest request);
    public virtual Task`1<ListAccessKeysResponse> ListAccessKeysAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListAccessKeysResponse> ListAccessKeysAsync(ListAccessKeysRequest request, CancellationToken cancellationToken);
    internal virtual ListAccountAliasesResponse ListAccountAliases();
    internal virtual ListAccountAliasesResponse ListAccountAliases(ListAccountAliasesRequest request);
    public virtual Task`1<ListAccountAliasesResponse> ListAccountAliasesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListAccountAliasesResponse> ListAccountAliasesAsync(ListAccountAliasesRequest request, CancellationToken cancellationToken);
    internal virtual ListAttachedGroupPoliciesResponse ListAttachedGroupPolicies(ListAttachedGroupPoliciesRequest request);
    public virtual Task`1<ListAttachedGroupPoliciesResponse> ListAttachedGroupPoliciesAsync(ListAttachedGroupPoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListAttachedRolePoliciesResponse ListAttachedRolePolicies(ListAttachedRolePoliciesRequest request);
    public virtual Task`1<ListAttachedRolePoliciesResponse> ListAttachedRolePoliciesAsync(ListAttachedRolePoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListAttachedUserPoliciesResponse ListAttachedUserPolicies(ListAttachedUserPoliciesRequest request);
    public virtual Task`1<ListAttachedUserPoliciesResponse> ListAttachedUserPoliciesAsync(ListAttachedUserPoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListEntitiesForPolicyResponse ListEntitiesForPolicy(ListEntitiesForPolicyRequest request);
    public virtual Task`1<ListEntitiesForPolicyResponse> ListEntitiesForPolicyAsync(ListEntitiesForPolicyRequest request, CancellationToken cancellationToken);
    internal virtual ListGroupPoliciesResponse ListGroupPolicies(ListGroupPoliciesRequest request);
    public virtual Task`1<ListGroupPoliciesResponse> ListGroupPoliciesAsync(ListGroupPoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListGroupsResponse ListGroups();
    internal virtual ListGroupsResponse ListGroups(ListGroupsRequest request);
    public virtual Task`1<ListGroupsResponse> ListGroupsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListGroupsResponse> ListGroupsAsync(ListGroupsRequest request, CancellationToken cancellationToken);
    internal virtual ListGroupsForUserResponse ListGroupsForUser(ListGroupsForUserRequest request);
    public virtual Task`1<ListGroupsForUserResponse> ListGroupsForUserAsync(ListGroupsForUserRequest request, CancellationToken cancellationToken);
    internal virtual ListInstanceProfilesResponse ListInstanceProfiles();
    internal virtual ListInstanceProfilesResponse ListInstanceProfiles(ListInstanceProfilesRequest request);
    public virtual Task`1<ListInstanceProfilesResponse> ListInstanceProfilesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListInstanceProfilesResponse> ListInstanceProfilesAsync(ListInstanceProfilesRequest request, CancellationToken cancellationToken);
    internal virtual ListInstanceProfilesForRoleResponse ListInstanceProfilesForRole(ListInstanceProfilesForRoleRequest request);
    public virtual Task`1<ListInstanceProfilesForRoleResponse> ListInstanceProfilesForRoleAsync(ListInstanceProfilesForRoleRequest request, CancellationToken cancellationToken);
    internal virtual ListInstanceProfileTagsResponse ListInstanceProfileTags(ListInstanceProfileTagsRequest request);
    public virtual Task`1<ListInstanceProfileTagsResponse> ListInstanceProfileTagsAsync(ListInstanceProfileTagsRequest request, CancellationToken cancellationToken);
    internal virtual ListMFADevicesResponse ListMFADevices();
    internal virtual ListMFADevicesResponse ListMFADevices(ListMFADevicesRequest request);
    public virtual Task`1<ListMFADevicesResponse> ListMFADevicesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListMFADevicesResponse> ListMFADevicesAsync(ListMFADevicesRequest request, CancellationToken cancellationToken);
    internal virtual ListMFADeviceTagsResponse ListMFADeviceTags(ListMFADeviceTagsRequest request);
    public virtual Task`1<ListMFADeviceTagsResponse> ListMFADeviceTagsAsync(ListMFADeviceTagsRequest request, CancellationToken cancellationToken);
    internal virtual ListOpenIDConnectProvidersResponse ListOpenIDConnectProviders(ListOpenIDConnectProvidersRequest request);
    public virtual Task`1<ListOpenIDConnectProvidersResponse> ListOpenIDConnectProvidersAsync(ListOpenIDConnectProvidersRequest request, CancellationToken cancellationToken);
    internal virtual ListOpenIDConnectProviderTagsResponse ListOpenIDConnectProviderTags(ListOpenIDConnectProviderTagsRequest request);
    public virtual Task`1<ListOpenIDConnectProviderTagsResponse> ListOpenIDConnectProviderTagsAsync(ListOpenIDConnectProviderTagsRequest request, CancellationToken cancellationToken);
    internal virtual ListPoliciesResponse ListPolicies();
    internal virtual ListPoliciesResponse ListPolicies(ListPoliciesRequest request);
    public virtual Task`1<ListPoliciesResponse> ListPoliciesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListPoliciesResponse> ListPoliciesAsync(ListPoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListPoliciesGrantingServiceAccessResponse ListPoliciesGrantingServiceAccess(ListPoliciesGrantingServiceAccessRequest request);
    public virtual Task`1<ListPoliciesGrantingServiceAccessResponse> ListPoliciesGrantingServiceAccessAsync(ListPoliciesGrantingServiceAccessRequest request, CancellationToken cancellationToken);
    internal virtual ListPolicyTagsResponse ListPolicyTags(ListPolicyTagsRequest request);
    public virtual Task`1<ListPolicyTagsResponse> ListPolicyTagsAsync(ListPolicyTagsRequest request, CancellationToken cancellationToken);
    internal virtual ListPolicyVersionsResponse ListPolicyVersions(ListPolicyVersionsRequest request);
    public virtual Task`1<ListPolicyVersionsResponse> ListPolicyVersionsAsync(ListPolicyVersionsRequest request, CancellationToken cancellationToken);
    internal virtual ListRolePoliciesResponse ListRolePolicies(ListRolePoliciesRequest request);
    public virtual Task`1<ListRolePoliciesResponse> ListRolePoliciesAsync(ListRolePoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListRolesResponse ListRoles();
    internal virtual ListRolesResponse ListRoles(ListRolesRequest request);
    public virtual Task`1<ListRolesResponse> ListRolesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListRolesResponse> ListRolesAsync(ListRolesRequest request, CancellationToken cancellationToken);
    internal virtual ListRoleTagsResponse ListRoleTags(ListRoleTagsRequest request);
    public virtual Task`1<ListRoleTagsResponse> ListRoleTagsAsync(ListRoleTagsRequest request, CancellationToken cancellationToken);
    internal virtual ListSAMLProvidersResponse ListSAMLProviders();
    internal virtual ListSAMLProvidersResponse ListSAMLProviders(ListSAMLProvidersRequest request);
    public virtual Task`1<ListSAMLProvidersResponse> ListSAMLProvidersAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListSAMLProvidersResponse> ListSAMLProvidersAsync(ListSAMLProvidersRequest request, CancellationToken cancellationToken);
    internal virtual ListSAMLProviderTagsResponse ListSAMLProviderTags(ListSAMLProviderTagsRequest request);
    public virtual Task`1<ListSAMLProviderTagsResponse> ListSAMLProviderTagsAsync(ListSAMLProviderTagsRequest request, CancellationToken cancellationToken);
    internal virtual ListServerCertificatesResponse ListServerCertificates();
    internal virtual ListServerCertificatesResponse ListServerCertificates(ListServerCertificatesRequest request);
    public virtual Task`1<ListServerCertificatesResponse> ListServerCertificatesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListServerCertificatesResponse> ListServerCertificatesAsync(ListServerCertificatesRequest request, CancellationToken cancellationToken);
    internal virtual ListServerCertificateTagsResponse ListServerCertificateTags(ListServerCertificateTagsRequest request);
    public virtual Task`1<ListServerCertificateTagsResponse> ListServerCertificateTagsAsync(ListServerCertificateTagsRequest request, CancellationToken cancellationToken);
    internal virtual ListServiceSpecificCredentialsResponse ListServiceSpecificCredentials(ListServiceSpecificCredentialsRequest request);
    public virtual Task`1<ListServiceSpecificCredentialsResponse> ListServiceSpecificCredentialsAsync(ListServiceSpecificCredentialsRequest request, CancellationToken cancellationToken);
    internal virtual ListSigningCertificatesResponse ListSigningCertificates();
    internal virtual ListSigningCertificatesResponse ListSigningCertificates(ListSigningCertificatesRequest request);
    public virtual Task`1<ListSigningCertificatesResponse> ListSigningCertificatesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListSigningCertificatesResponse> ListSigningCertificatesAsync(ListSigningCertificatesRequest request, CancellationToken cancellationToken);
    internal virtual ListSSHPublicKeysResponse ListSSHPublicKeys(ListSSHPublicKeysRequest request);
    public virtual Task`1<ListSSHPublicKeysResponse> ListSSHPublicKeysAsync(ListSSHPublicKeysRequest request, CancellationToken cancellationToken);
    internal virtual ListUserPoliciesResponse ListUserPolicies(ListUserPoliciesRequest request);
    public virtual Task`1<ListUserPoliciesResponse> ListUserPoliciesAsync(ListUserPoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListUsersResponse ListUsers();
    internal virtual ListUsersResponse ListUsers(ListUsersRequest request);
    public virtual Task`1<ListUsersResponse> ListUsersAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListUsersResponse> ListUsersAsync(ListUsersRequest request, CancellationToken cancellationToken);
    internal virtual ListUserTagsResponse ListUserTags(ListUserTagsRequest request);
    public virtual Task`1<ListUserTagsResponse> ListUserTagsAsync(ListUserTagsRequest request, CancellationToken cancellationToken);
    internal virtual ListVirtualMFADevicesResponse ListVirtualMFADevices();
    internal virtual ListVirtualMFADevicesResponse ListVirtualMFADevices(ListVirtualMFADevicesRequest request);
    public virtual Task`1<ListVirtualMFADevicesResponse> ListVirtualMFADevicesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListVirtualMFADevicesResponse> ListVirtualMFADevicesAsync(ListVirtualMFADevicesRequest request, CancellationToken cancellationToken);
    internal virtual PutGroupPolicyResponse PutGroupPolicy(PutGroupPolicyRequest request);
    public virtual Task`1<PutGroupPolicyResponse> PutGroupPolicyAsync(PutGroupPolicyRequest request, CancellationToken cancellationToken);
    internal virtual PutRolePermissionsBoundaryResponse PutRolePermissionsBoundary(PutRolePermissionsBoundaryRequest request);
    public virtual Task`1<PutRolePermissionsBoundaryResponse> PutRolePermissionsBoundaryAsync(PutRolePermissionsBoundaryRequest request, CancellationToken cancellationToken);
    internal virtual PutRolePolicyResponse PutRolePolicy(PutRolePolicyRequest request);
    public virtual Task`1<PutRolePolicyResponse> PutRolePolicyAsync(PutRolePolicyRequest request, CancellationToken cancellationToken);
    internal virtual PutUserPermissionsBoundaryResponse PutUserPermissionsBoundary(PutUserPermissionsBoundaryRequest request);
    public virtual Task`1<PutUserPermissionsBoundaryResponse> PutUserPermissionsBoundaryAsync(PutUserPermissionsBoundaryRequest request, CancellationToken cancellationToken);
    internal virtual PutUserPolicyResponse PutUserPolicy(PutUserPolicyRequest request);
    public virtual Task`1<PutUserPolicyResponse> PutUserPolicyAsync(PutUserPolicyRequest request, CancellationToken cancellationToken);
    internal virtual RemoveClientIDFromOpenIDConnectProviderResponse RemoveClientIDFromOpenIDConnectProvider(RemoveClientIDFromOpenIDConnectProviderRequest request);
    public virtual Task`1<RemoveClientIDFromOpenIDConnectProviderResponse> RemoveClientIDFromOpenIDConnectProviderAsync(RemoveClientIDFromOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    internal virtual RemoveRoleFromInstanceProfileResponse RemoveRoleFromInstanceProfile(RemoveRoleFromInstanceProfileRequest request);
    public virtual Task`1<RemoveRoleFromInstanceProfileResponse> RemoveRoleFromInstanceProfileAsync(RemoveRoleFromInstanceProfileRequest request, CancellationToken cancellationToken);
    internal virtual RemoveUserFromGroupResponse RemoveUserFromGroup(RemoveUserFromGroupRequest request);
    public virtual Task`1<RemoveUserFromGroupResponse> RemoveUserFromGroupAsync(RemoveUserFromGroupRequest request, CancellationToken cancellationToken);
    internal virtual ResetServiceSpecificCredentialResponse ResetServiceSpecificCredential(ResetServiceSpecificCredentialRequest request);
    public virtual Task`1<ResetServiceSpecificCredentialResponse> ResetServiceSpecificCredentialAsync(ResetServiceSpecificCredentialRequest request, CancellationToken cancellationToken);
    internal virtual ResyncMFADeviceResponse ResyncMFADevice(ResyncMFADeviceRequest request);
    public virtual Task`1<ResyncMFADeviceResponse> ResyncMFADeviceAsync(ResyncMFADeviceRequest request, CancellationToken cancellationToken);
    internal virtual SetDefaultPolicyVersionResponse SetDefaultPolicyVersion(SetDefaultPolicyVersionRequest request);
    public virtual Task`1<SetDefaultPolicyVersionResponse> SetDefaultPolicyVersionAsync(SetDefaultPolicyVersionRequest request, CancellationToken cancellationToken);
    internal virtual SetSecurityTokenServicePreferencesResponse SetSecurityTokenServicePreferences(SetSecurityTokenServicePreferencesRequest request);
    public virtual Task`1<SetSecurityTokenServicePreferencesResponse> SetSecurityTokenServicePreferencesAsync(SetSecurityTokenServicePreferencesRequest request, CancellationToken cancellationToken);
    internal virtual SimulateCustomPolicyResponse SimulateCustomPolicy(SimulateCustomPolicyRequest request);
    public virtual Task`1<SimulateCustomPolicyResponse> SimulateCustomPolicyAsync(SimulateCustomPolicyRequest request, CancellationToken cancellationToken);
    internal virtual SimulatePrincipalPolicyResponse SimulatePrincipalPolicy(SimulatePrincipalPolicyRequest request);
    public virtual Task`1<SimulatePrincipalPolicyResponse> SimulatePrincipalPolicyAsync(SimulatePrincipalPolicyRequest request, CancellationToken cancellationToken);
    internal virtual TagInstanceProfileResponse TagInstanceProfile(TagInstanceProfileRequest request);
    public virtual Task`1<TagInstanceProfileResponse> TagInstanceProfileAsync(TagInstanceProfileRequest request, CancellationToken cancellationToken);
    internal virtual TagMFADeviceResponse TagMFADevice(TagMFADeviceRequest request);
    public virtual Task`1<TagMFADeviceResponse> TagMFADeviceAsync(TagMFADeviceRequest request, CancellationToken cancellationToken);
    internal virtual TagOpenIDConnectProviderResponse TagOpenIDConnectProvider(TagOpenIDConnectProviderRequest request);
    public virtual Task`1<TagOpenIDConnectProviderResponse> TagOpenIDConnectProviderAsync(TagOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    internal virtual TagPolicyResponse TagPolicy(TagPolicyRequest request);
    public virtual Task`1<TagPolicyResponse> TagPolicyAsync(TagPolicyRequest request, CancellationToken cancellationToken);
    internal virtual TagRoleResponse TagRole(TagRoleRequest request);
    public virtual Task`1<TagRoleResponse> TagRoleAsync(TagRoleRequest request, CancellationToken cancellationToken);
    internal virtual TagSAMLProviderResponse TagSAMLProvider(TagSAMLProviderRequest request);
    public virtual Task`1<TagSAMLProviderResponse> TagSAMLProviderAsync(TagSAMLProviderRequest request, CancellationToken cancellationToken);
    internal virtual TagServerCertificateResponse TagServerCertificate(TagServerCertificateRequest request);
    public virtual Task`1<TagServerCertificateResponse> TagServerCertificateAsync(TagServerCertificateRequest request, CancellationToken cancellationToken);
    internal virtual TagUserResponse TagUser(TagUserRequest request);
    public virtual Task`1<TagUserResponse> TagUserAsync(TagUserRequest request, CancellationToken cancellationToken);
    internal virtual UntagInstanceProfileResponse UntagInstanceProfile(UntagInstanceProfileRequest request);
    public virtual Task`1<UntagInstanceProfileResponse> UntagInstanceProfileAsync(UntagInstanceProfileRequest request, CancellationToken cancellationToken);
    internal virtual UntagMFADeviceResponse UntagMFADevice(UntagMFADeviceRequest request);
    public virtual Task`1<UntagMFADeviceResponse> UntagMFADeviceAsync(UntagMFADeviceRequest request, CancellationToken cancellationToken);
    internal virtual UntagOpenIDConnectProviderResponse UntagOpenIDConnectProvider(UntagOpenIDConnectProviderRequest request);
    public virtual Task`1<UntagOpenIDConnectProviderResponse> UntagOpenIDConnectProviderAsync(UntagOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    internal virtual UntagPolicyResponse UntagPolicy(UntagPolicyRequest request);
    public virtual Task`1<UntagPolicyResponse> UntagPolicyAsync(UntagPolicyRequest request, CancellationToken cancellationToken);
    internal virtual UntagRoleResponse UntagRole(UntagRoleRequest request);
    public virtual Task`1<UntagRoleResponse> UntagRoleAsync(UntagRoleRequest request, CancellationToken cancellationToken);
    internal virtual UntagSAMLProviderResponse UntagSAMLProvider(UntagSAMLProviderRequest request);
    public virtual Task`1<UntagSAMLProviderResponse> UntagSAMLProviderAsync(UntagSAMLProviderRequest request, CancellationToken cancellationToken);
    internal virtual UntagServerCertificateResponse UntagServerCertificate(UntagServerCertificateRequest request);
    public virtual Task`1<UntagServerCertificateResponse> UntagServerCertificateAsync(UntagServerCertificateRequest request, CancellationToken cancellationToken);
    internal virtual UntagUserResponse UntagUser(UntagUserRequest request);
    public virtual Task`1<UntagUserResponse> UntagUserAsync(UntagUserRequest request, CancellationToken cancellationToken);
    internal virtual UpdateAccessKeyResponse UpdateAccessKey(UpdateAccessKeyRequest request);
    public virtual Task`1<UpdateAccessKeyResponse> UpdateAccessKeyAsync(UpdateAccessKeyRequest request, CancellationToken cancellationToken);
    internal virtual UpdateAccountPasswordPolicyResponse UpdateAccountPasswordPolicy();
    internal virtual UpdateAccountPasswordPolicyResponse UpdateAccountPasswordPolicy(UpdateAccountPasswordPolicyRequest request);
    public virtual Task`1<UpdateAccountPasswordPolicyResponse> UpdateAccountPasswordPolicyAsync(CancellationToken cancellationToken);
    public virtual Task`1<UpdateAccountPasswordPolicyResponse> UpdateAccountPasswordPolicyAsync(UpdateAccountPasswordPolicyRequest request, CancellationToken cancellationToken);
    internal virtual UpdateAssumeRolePolicyResponse UpdateAssumeRolePolicy(UpdateAssumeRolePolicyRequest request);
    public virtual Task`1<UpdateAssumeRolePolicyResponse> UpdateAssumeRolePolicyAsync(UpdateAssumeRolePolicyRequest request, CancellationToken cancellationToken);
    internal virtual UpdateGroupResponse UpdateGroup(UpdateGroupRequest request);
    public virtual Task`1<UpdateGroupResponse> UpdateGroupAsync(UpdateGroupRequest request, CancellationToken cancellationToken);
    internal virtual UpdateLoginProfileResponse UpdateLoginProfile(UpdateLoginProfileRequest request);
    public virtual Task`1<UpdateLoginProfileResponse> UpdateLoginProfileAsync(UpdateLoginProfileRequest request, CancellationToken cancellationToken);
    internal virtual UpdateOpenIDConnectProviderThumbprintResponse UpdateOpenIDConnectProviderThumbprint(UpdateOpenIDConnectProviderThumbprintRequest request);
    public virtual Task`1<UpdateOpenIDConnectProviderThumbprintResponse> UpdateOpenIDConnectProviderThumbprintAsync(UpdateOpenIDConnectProviderThumbprintRequest request, CancellationToken cancellationToken);
    internal virtual UpdateRoleResponse UpdateRole(UpdateRoleRequest request);
    public virtual Task`1<UpdateRoleResponse> UpdateRoleAsync(UpdateRoleRequest request, CancellationToken cancellationToken);
    internal virtual UpdateRoleDescriptionResponse UpdateRoleDescription(UpdateRoleDescriptionRequest request);
    public virtual Task`1<UpdateRoleDescriptionResponse> UpdateRoleDescriptionAsync(UpdateRoleDescriptionRequest request, CancellationToken cancellationToken);
    internal virtual UpdateSAMLProviderResponse UpdateSAMLProvider(UpdateSAMLProviderRequest request);
    public virtual Task`1<UpdateSAMLProviderResponse> UpdateSAMLProviderAsync(UpdateSAMLProviderRequest request, CancellationToken cancellationToken);
    internal virtual UpdateServerCertificateResponse UpdateServerCertificate(UpdateServerCertificateRequest request);
    public virtual Task`1<UpdateServerCertificateResponse> UpdateServerCertificateAsync(UpdateServerCertificateRequest request, CancellationToken cancellationToken);
    internal virtual UpdateServiceSpecificCredentialResponse UpdateServiceSpecificCredential(UpdateServiceSpecificCredentialRequest request);
    public virtual Task`1<UpdateServiceSpecificCredentialResponse> UpdateServiceSpecificCredentialAsync(UpdateServiceSpecificCredentialRequest request, CancellationToken cancellationToken);
    internal virtual UpdateSigningCertificateResponse UpdateSigningCertificate(UpdateSigningCertificateRequest request);
    public virtual Task`1<UpdateSigningCertificateResponse> UpdateSigningCertificateAsync(UpdateSigningCertificateRequest request, CancellationToken cancellationToken);
    internal virtual UpdateSSHPublicKeyResponse UpdateSSHPublicKey(UpdateSSHPublicKeyRequest request);
    public virtual Task`1<UpdateSSHPublicKeyResponse> UpdateSSHPublicKeyAsync(UpdateSSHPublicKeyRequest request, CancellationToken cancellationToken);
    internal virtual UpdateUserResponse UpdateUser(UpdateUserRequest request);
    public virtual Task`1<UpdateUserResponse> UpdateUserAsync(UpdateUserRequest request, CancellationToken cancellationToken);
    internal virtual UploadServerCertificateResponse UploadServerCertificate(UploadServerCertificateRequest request);
    public virtual Task`1<UploadServerCertificateResponse> UploadServerCertificateAsync(UploadServerCertificateRequest request, CancellationToken cancellationToken);
    internal virtual UploadSigningCertificateResponse UploadSigningCertificate(UploadSigningCertificateRequest request);
    public virtual Task`1<UploadSigningCertificateResponse> UploadSigningCertificateAsync(UploadSigningCertificateRequest request, CancellationToken cancellationToken);
    internal virtual UploadSSHPublicKeyResponse UploadSSHPublicKey(UploadSSHPublicKeyRequest request);
    public virtual Task`1<UploadSSHPublicKeyResponse> UploadSSHPublicKeyAsync(UploadSSHPublicKeyRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.IdentityManagement.AmazonIdentityManagementServiceConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonIdentityManagementServiceEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonIdentityManagementServiceConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.IdentityManagement.AmazonIdentityManagementServiceDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonIdentityManagementServiceDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.IdentityManagement.AmazonIdentityManagementServiceException : AmazonServiceException {
    public AmazonIdentityManagementServiceException(string message);
    public AmazonIdentityManagementServiceException(string message, Exception innerException);
    public AmazonIdentityManagementServiceException(Exception innerException);
    public AmazonIdentityManagementServiceException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonIdentityManagementServiceException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.AmazonIdentityManagementServiceRequest : AmazonWebServiceRequest {
}
public class Amazon.IdentityManagement.AssignmentStatusType : ConstantClass {
    public static AssignmentStatusType Any;
    public static AssignmentStatusType Assigned;
    public static AssignmentStatusType Unassigned;
    public AssignmentStatusType(string value);
    private static AssignmentStatusType();
    public static AssignmentStatusType FindValue(string value);
    public static AssignmentStatusType op_Implicit(string value);
}
public class Amazon.IdentityManagement.ContextKeyTypeEnum : ConstantClass {
    public static ContextKeyTypeEnum Binary;
    public static ContextKeyTypeEnum BinaryList;
    public static ContextKeyTypeEnum Boolean;
    public static ContextKeyTypeEnum BooleanList;
    public static ContextKeyTypeEnum Date;
    public static ContextKeyTypeEnum DateList;
    public static ContextKeyTypeEnum Ip;
    public static ContextKeyTypeEnum IpList;
    public static ContextKeyTypeEnum Numeric;
    public static ContextKeyTypeEnum NumericList;
    public static ContextKeyTypeEnum String;
    public static ContextKeyTypeEnum StringList;
    public ContextKeyTypeEnum(string value);
    private static ContextKeyTypeEnum();
    public static ContextKeyTypeEnum FindValue(string value);
    public static ContextKeyTypeEnum op_Implicit(string value);
}
public class Amazon.IdentityManagement.DeletionTaskStatusType : ConstantClass {
    public static DeletionTaskStatusType FAILED;
    public static DeletionTaskStatusType IN_PROGRESS;
    public static DeletionTaskStatusType NOT_STARTED;
    public static DeletionTaskStatusType SUCCEEDED;
    public DeletionTaskStatusType(string value);
    private static DeletionTaskStatusType();
    public static DeletionTaskStatusType FindValue(string value);
    public static DeletionTaskStatusType op_Implicit(string value);
}
public class Amazon.IdentityManagement.EncodingType : ConstantClass {
    public static EncodingType PEM;
    public static EncodingType SSH;
    public EncodingType(string value);
    private static EncodingType();
    public static EncodingType FindValue(string value);
    public static EncodingType op_Implicit(string value);
}
public class Amazon.IdentityManagement.Endpoints.IdentityManagementServiceEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public class Amazon.IdentityManagement.EntityType : ConstantClass {
    public static EntityType AWSManagedPolicy;
    public static EntityType Group;
    public static EntityType LocalManagedPolicy;
    public static EntityType Role;
    public static EntityType User;
    public EntityType(string value);
    private static EntityType();
    public static EntityType FindValue(string value);
    public static EntityType op_Implicit(string value);
}
public class Amazon.IdentityManagement.GlobalEndpointTokenVersion : ConstantClass {
    public static GlobalEndpointTokenVersion V1Token;
    public static GlobalEndpointTokenVersion V2Token;
    public GlobalEndpointTokenVersion(string value);
    private static GlobalEndpointTokenVersion();
    public static GlobalEndpointTokenVersion FindValue(string value);
    public static GlobalEndpointTokenVersion op_Implicit(string value);
}
public interface Amazon.IdentityManagement.IAmazonIdentityManagementService {
    public IIdentityManagementPaginatorFactory Paginators { get; }
    public abstract virtual IIdentityManagementPaginatorFactory get_Paginators();
    public abstract virtual Task`1<AddClientIDToOpenIDConnectProviderResponse> AddClientIDToOpenIDConnectProviderAsync(AddClientIDToOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AddRoleToInstanceProfileResponse> AddRoleToInstanceProfileAsync(AddRoleToInstanceProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AddUserToGroupResponse> AddUserToGroupAsync(AddUserToGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AttachGroupPolicyResponse> AttachGroupPolicyAsync(AttachGroupPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AttachRolePolicyResponse> AttachRolePolicyAsync(AttachRolePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AttachUserPolicyResponse> AttachUserPolicyAsync(AttachUserPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ChangePasswordResponse> ChangePasswordAsync(ChangePasswordRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateAccessKeyResponse> CreateAccessKeyAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateAccessKeyResponse> CreateAccessKeyAsync(CreateAccessKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateAccountAliasResponse> CreateAccountAliasAsync(CreateAccountAliasRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateGroupResponse> CreateGroupAsync(CreateGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateInstanceProfileResponse> CreateInstanceProfileAsync(CreateInstanceProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateLoginProfileResponse> CreateLoginProfileAsync(CreateLoginProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateOpenIDConnectProviderResponse> CreateOpenIDConnectProviderAsync(CreateOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreatePolicyResponse> CreatePolicyAsync(CreatePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreatePolicyVersionResponse> CreatePolicyVersionAsync(CreatePolicyVersionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateRoleResponse> CreateRoleAsync(CreateRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateSAMLProviderResponse> CreateSAMLProviderAsync(CreateSAMLProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateServiceLinkedRoleResponse> CreateServiceLinkedRoleAsync(CreateServiceLinkedRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateServiceSpecificCredentialResponse> CreateServiceSpecificCredentialAsync(CreateServiceSpecificCredentialRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateUserResponse> CreateUserAsync(CreateUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateVirtualMFADeviceResponse> CreateVirtualMFADeviceAsync(CreateVirtualMFADeviceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeactivateMFADeviceResponse> DeactivateMFADeviceAsync(DeactivateMFADeviceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAccessKeyResponse> DeleteAccessKeyAsync(DeleteAccessKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAccountAliasResponse> DeleteAccountAliasAsync(DeleteAccountAliasRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAccountPasswordPolicyResponse> DeleteAccountPasswordPolicyAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAccountPasswordPolicyResponse> DeleteAccountPasswordPolicyAsync(DeleteAccountPasswordPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteGroupResponse> DeleteGroupAsync(DeleteGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteGroupPolicyResponse> DeleteGroupPolicyAsync(DeleteGroupPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteInstanceProfileResponse> DeleteInstanceProfileAsync(DeleteInstanceProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteLoginProfileResponse> DeleteLoginProfileAsync(DeleteLoginProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteOpenIDConnectProviderResponse> DeleteOpenIDConnectProviderAsync(DeleteOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeletePolicyResponse> DeletePolicyAsync(DeletePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeletePolicyVersionResponse> DeletePolicyVersionAsync(DeletePolicyVersionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteRoleResponse> DeleteRoleAsync(DeleteRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteRolePermissionsBoundaryResponse> DeleteRolePermissionsBoundaryAsync(DeleteRolePermissionsBoundaryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteRolePolicyResponse> DeleteRolePolicyAsync(DeleteRolePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteSAMLProviderResponse> DeleteSAMLProviderAsync(DeleteSAMLProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteServerCertificateResponse> DeleteServerCertificateAsync(DeleteServerCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteServiceLinkedRoleResponse> DeleteServiceLinkedRoleAsync(DeleteServiceLinkedRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteServiceSpecificCredentialResponse> DeleteServiceSpecificCredentialAsync(DeleteServiceSpecificCredentialRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteSigningCertificateResponse> DeleteSigningCertificateAsync(DeleteSigningCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteSSHPublicKeyResponse> DeleteSSHPublicKeyAsync(DeleteSSHPublicKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteUserResponse> DeleteUserAsync(DeleteUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteUserPermissionsBoundaryResponse> DeleteUserPermissionsBoundaryAsync(DeleteUserPermissionsBoundaryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteUserPolicyResponse> DeleteUserPolicyAsync(DeleteUserPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteVirtualMFADeviceResponse> DeleteVirtualMFADeviceAsync(DeleteVirtualMFADeviceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DetachGroupPolicyResponse> DetachGroupPolicyAsync(DetachGroupPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DetachRolePolicyResponse> DetachRolePolicyAsync(DetachRolePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DetachUserPolicyResponse> DetachUserPolicyAsync(DetachUserPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableMFADeviceResponse> EnableMFADeviceAsync(EnableMFADeviceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateCredentialReportResponse> GenerateCredentialReportAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateCredentialReportResponse> GenerateCredentialReportAsync(GenerateCredentialReportRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateOrganizationsAccessReportResponse> GenerateOrganizationsAccessReportAsync(GenerateOrganizationsAccessReportRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateServiceLastAccessedDetailsResponse> GenerateServiceLastAccessedDetailsAsync(GenerateServiceLastAccessedDetailsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAccessKeyLastUsedResponse> GetAccessKeyLastUsedAsync(GetAccessKeyLastUsedRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAccountAuthorizationDetailsResponse> GetAccountAuthorizationDetailsAsync(GetAccountAuthorizationDetailsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAccountPasswordPolicyResponse> GetAccountPasswordPolicyAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAccountPasswordPolicyResponse> GetAccountPasswordPolicyAsync(GetAccountPasswordPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAccountSummaryResponse> GetAccountSummaryAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAccountSummaryResponse> GetAccountSummaryAsync(GetAccountSummaryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetContextKeysForCustomPolicyResponse> GetContextKeysForCustomPolicyAsync(List`1<string> policyInputList, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetContextKeysForCustomPolicyResponse> GetContextKeysForCustomPolicyAsync(GetContextKeysForCustomPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetContextKeysForPrincipalPolicyResponse> GetContextKeysForPrincipalPolicyAsync(string policySourceArn, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetContextKeysForPrincipalPolicyResponse> GetContextKeysForPrincipalPolicyAsync(string policySourceArn, List`1<string> policyInputList, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetContextKeysForPrincipalPolicyResponse> GetContextKeysForPrincipalPolicyAsync(GetContextKeysForPrincipalPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetCredentialReportResponse> GetCredentialReportAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<GetCredentialReportResponse> GetCredentialReportAsync(GetCredentialReportRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetGroupResponse> GetGroupAsync(GetGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetGroupPolicyResponse> GetGroupPolicyAsync(GetGroupPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetInstanceProfileResponse> GetInstanceProfileAsync(GetInstanceProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetLoginProfileResponse> GetLoginProfileAsync(GetLoginProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetMFADeviceResponse> GetMFADeviceAsync(GetMFADeviceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetOpenIDConnectProviderResponse> GetOpenIDConnectProviderAsync(GetOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetOrganizationsAccessReportResponse> GetOrganizationsAccessReportAsync(GetOrganizationsAccessReportRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetPolicyResponse> GetPolicyAsync(GetPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetPolicyVersionResponse> GetPolicyVersionAsync(GetPolicyVersionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetRoleResponse> GetRoleAsync(GetRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetRolePolicyResponse> GetRolePolicyAsync(GetRolePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetSAMLProviderResponse> GetSAMLProviderAsync(GetSAMLProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetServerCertificateResponse> GetServerCertificateAsync(GetServerCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetServiceLastAccessedDetailsResponse> GetServiceLastAccessedDetailsAsync(GetServiceLastAccessedDetailsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetServiceLastAccessedDetailsWithEntitiesResponse> GetServiceLastAccessedDetailsWithEntitiesAsync(GetServiceLastAccessedDetailsWithEntitiesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetServiceLinkedRoleDeletionStatusResponse> GetServiceLinkedRoleDeletionStatusAsync(GetServiceLinkedRoleDeletionStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetSSHPublicKeyResponse> GetSSHPublicKeyAsync(GetSSHPublicKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetUserResponse> GetUserAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<GetUserResponse> GetUserAsync(GetUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetUserPolicyResponse> GetUserPolicyAsync(GetUserPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAccessKeysResponse> ListAccessKeysAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAccessKeysResponse> ListAccessKeysAsync(ListAccessKeysRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAccountAliasesResponse> ListAccountAliasesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAccountAliasesResponse> ListAccountAliasesAsync(ListAccountAliasesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAttachedGroupPoliciesResponse> ListAttachedGroupPoliciesAsync(ListAttachedGroupPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAttachedRolePoliciesResponse> ListAttachedRolePoliciesAsync(ListAttachedRolePoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAttachedUserPoliciesResponse> ListAttachedUserPoliciesAsync(ListAttachedUserPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListEntitiesForPolicyResponse> ListEntitiesForPolicyAsync(ListEntitiesForPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListGroupPoliciesResponse> ListGroupPoliciesAsync(ListGroupPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListGroupsResponse> ListGroupsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListGroupsResponse> ListGroupsAsync(ListGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListGroupsForUserResponse> ListGroupsForUserAsync(ListGroupsForUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListInstanceProfilesResponse> ListInstanceProfilesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListInstanceProfilesResponse> ListInstanceProfilesAsync(ListInstanceProfilesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListInstanceProfilesForRoleResponse> ListInstanceProfilesForRoleAsync(ListInstanceProfilesForRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListInstanceProfileTagsResponse> ListInstanceProfileTagsAsync(ListInstanceProfileTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListMFADevicesResponse> ListMFADevicesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListMFADevicesResponse> ListMFADevicesAsync(ListMFADevicesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListMFADeviceTagsResponse> ListMFADeviceTagsAsync(ListMFADeviceTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListOpenIDConnectProvidersResponse> ListOpenIDConnectProvidersAsync(ListOpenIDConnectProvidersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListOpenIDConnectProviderTagsResponse> ListOpenIDConnectProviderTagsAsync(ListOpenIDConnectProviderTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPoliciesResponse> ListPoliciesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPoliciesResponse> ListPoliciesAsync(ListPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPoliciesGrantingServiceAccessResponse> ListPoliciesGrantingServiceAccessAsync(ListPoliciesGrantingServiceAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPolicyTagsResponse> ListPolicyTagsAsync(ListPolicyTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPolicyVersionsResponse> ListPolicyVersionsAsync(ListPolicyVersionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListRolePoliciesResponse> ListRolePoliciesAsync(ListRolePoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListRolesResponse> ListRolesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListRolesResponse> ListRolesAsync(ListRolesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListRoleTagsResponse> ListRoleTagsAsync(ListRoleTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSAMLProvidersResponse> ListSAMLProvidersAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSAMLProvidersResponse> ListSAMLProvidersAsync(ListSAMLProvidersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSAMLProviderTagsResponse> ListSAMLProviderTagsAsync(ListSAMLProviderTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListServerCertificatesResponse> ListServerCertificatesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListServerCertificatesResponse> ListServerCertificatesAsync(ListServerCertificatesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListServerCertificateTagsResponse> ListServerCertificateTagsAsync(ListServerCertificateTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListServiceSpecificCredentialsResponse> ListServiceSpecificCredentialsAsync(ListServiceSpecificCredentialsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSigningCertificatesResponse> ListSigningCertificatesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSigningCertificatesResponse> ListSigningCertificatesAsync(ListSigningCertificatesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSSHPublicKeysResponse> ListSSHPublicKeysAsync(ListSSHPublicKeysRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListUserPoliciesResponse> ListUserPoliciesAsync(ListUserPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListUsersResponse> ListUsersAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListUsersResponse> ListUsersAsync(ListUsersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListUserTagsResponse> ListUserTagsAsync(ListUserTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListVirtualMFADevicesResponse> ListVirtualMFADevicesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListVirtualMFADevicesResponse> ListVirtualMFADevicesAsync(ListVirtualMFADevicesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutGroupPolicyResponse> PutGroupPolicyAsync(PutGroupPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutRolePermissionsBoundaryResponse> PutRolePermissionsBoundaryAsync(PutRolePermissionsBoundaryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutRolePolicyResponse> PutRolePolicyAsync(PutRolePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutUserPermissionsBoundaryResponse> PutUserPermissionsBoundaryAsync(PutUserPermissionsBoundaryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutUserPolicyResponse> PutUserPolicyAsync(PutUserPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RemoveClientIDFromOpenIDConnectProviderResponse> RemoveClientIDFromOpenIDConnectProviderAsync(RemoveClientIDFromOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RemoveRoleFromInstanceProfileResponse> RemoveRoleFromInstanceProfileAsync(RemoveRoleFromInstanceProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RemoveUserFromGroupResponse> RemoveUserFromGroupAsync(RemoveUserFromGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResetServiceSpecificCredentialResponse> ResetServiceSpecificCredentialAsync(ResetServiceSpecificCredentialRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResyncMFADeviceResponse> ResyncMFADeviceAsync(ResyncMFADeviceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetDefaultPolicyVersionResponse> SetDefaultPolicyVersionAsync(SetDefaultPolicyVersionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetSecurityTokenServicePreferencesResponse> SetSecurityTokenServicePreferencesAsync(SetSecurityTokenServicePreferencesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SimulateCustomPolicyResponse> SimulateCustomPolicyAsync(SimulateCustomPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SimulatePrincipalPolicyResponse> SimulatePrincipalPolicyAsync(SimulatePrincipalPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagInstanceProfileResponse> TagInstanceProfileAsync(TagInstanceProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagMFADeviceResponse> TagMFADeviceAsync(TagMFADeviceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagOpenIDConnectProviderResponse> TagOpenIDConnectProviderAsync(TagOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagPolicyResponse> TagPolicyAsync(TagPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagRoleResponse> TagRoleAsync(TagRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagSAMLProviderResponse> TagSAMLProviderAsync(TagSAMLProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagServerCertificateResponse> TagServerCertificateAsync(TagServerCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagUserResponse> TagUserAsync(TagUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagInstanceProfileResponse> UntagInstanceProfileAsync(UntagInstanceProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagMFADeviceResponse> UntagMFADeviceAsync(UntagMFADeviceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagOpenIDConnectProviderResponse> UntagOpenIDConnectProviderAsync(UntagOpenIDConnectProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagPolicyResponse> UntagPolicyAsync(UntagPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagRoleResponse> UntagRoleAsync(UntagRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagSAMLProviderResponse> UntagSAMLProviderAsync(UntagSAMLProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagServerCertificateResponse> UntagServerCertificateAsync(UntagServerCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagUserResponse> UntagUserAsync(UntagUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateAccessKeyResponse> UpdateAccessKeyAsync(UpdateAccessKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateAccountPasswordPolicyResponse> UpdateAccountPasswordPolicyAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateAccountPasswordPolicyResponse> UpdateAccountPasswordPolicyAsync(UpdateAccountPasswordPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateAssumeRolePolicyResponse> UpdateAssumeRolePolicyAsync(UpdateAssumeRolePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateGroupResponse> UpdateGroupAsync(UpdateGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateLoginProfileResponse> UpdateLoginProfileAsync(UpdateLoginProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateOpenIDConnectProviderThumbprintResponse> UpdateOpenIDConnectProviderThumbprintAsync(UpdateOpenIDConnectProviderThumbprintRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateRoleResponse> UpdateRoleAsync(UpdateRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateRoleDescriptionResponse> UpdateRoleDescriptionAsync(UpdateRoleDescriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateSAMLProviderResponse> UpdateSAMLProviderAsync(UpdateSAMLProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateServerCertificateResponse> UpdateServerCertificateAsync(UpdateServerCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateServiceSpecificCredentialResponse> UpdateServiceSpecificCredentialAsync(UpdateServiceSpecificCredentialRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateSigningCertificateResponse> UpdateSigningCertificateAsync(UpdateSigningCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateSSHPublicKeyResponse> UpdateSSHPublicKeyAsync(UpdateSSHPublicKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateUserResponse> UpdateUserAsync(UpdateUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UploadServerCertificateResponse> UploadServerCertificateAsync(UploadServerCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UploadSigningCertificateResponse> UploadSigningCertificateAsync(UploadSigningCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UploadSSHPublicKeyResponse> UploadSSHPublicKeyAsync(UploadSSHPublicKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.IdentityManagement.Internal.AmazonIdentityManagementServiceEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.IdentityManagement.Internal.AmazonIdentityManagementServiceEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.IdentityManagement.Internal.AmazonIdentityManagementServiceMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.IdentityManagement.JobStatusType : ConstantClass {
    public static JobStatusType COMPLETED;
    public static JobStatusType FAILED;
    public static JobStatusType IN_PROGRESS;
    public JobStatusType(string value);
    private static JobStatusType();
    public static JobStatusType FindValue(string value);
    public static JobStatusType op_Implicit(string value);
}
public class Amazon.IdentityManagement.Model.AccessDetail : object {
    private string _entityPath;
    private Nullable`1<DateTime> _lastAuthenticatedTime;
    private string _region;
    private string _serviceName;
    private string _serviceNamespace;
    private Nullable`1<int> _totalAuthenticatedEntities;
    [AWSPropertyAttribute]
public string EntityPath { get; public set; }
    public Nullable`1<DateTime> LastAuthenticatedTime { get; public set; }
    public string Region { get; public set; }
    [AWSPropertyAttribute]
public string ServiceName { get; public set; }
    [AWSPropertyAttribute]
public string ServiceNamespace { get; public set; }
    public Nullable`1<int> TotalAuthenticatedEntities { get; public set; }
    public string get_EntityPath();
    public void set_EntityPath(string value);
    internal bool IsSetEntityPath();
    public Nullable`1<DateTime> get_LastAuthenticatedTime();
    public void set_LastAuthenticatedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastAuthenticatedTime();
    public string get_Region();
    public void set_Region(string value);
    internal bool IsSetRegion();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
    public string get_ServiceNamespace();
    public void set_ServiceNamespace(string value);
    internal bool IsSetServiceNamespace();
    public Nullable`1<int> get_TotalAuthenticatedEntities();
    public void set_TotalAuthenticatedEntities(Nullable`1<int> value);
    internal bool IsSetTotalAuthenticatedEntities();
}
public class Amazon.IdentityManagement.Model.AccessKey : object {
    private string _accessKeyId;
    private Nullable`1<DateTime> _createDate;
    private string _secretAccessKey;
    private StatusType _status;
    private string _userName;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public string SecretAccessKey { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public AccessKey(string userName, string accessKeyId, StatusType status, string secretAccessKey);
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_SecretAccessKey();
    public void set_SecretAccessKey(string value);
    internal bool IsSetSecretAccessKey();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.AccessKeyLastUsed : object {
    private Nullable`1<DateTime> _lastUsedDate;
    private string _region;
    private string _serviceName;
    [AWSPropertyAttribute]
public Nullable`1<DateTime> LastUsedDate { get; public set; }
    [AWSPropertyAttribute]
public string Region { get; public set; }
    [AWSPropertyAttribute]
public string ServiceName { get; public set; }
    public Nullable`1<DateTime> get_LastUsedDate();
    public void set_LastUsedDate(Nullable`1<DateTime> value);
    internal bool IsSetLastUsedDate();
    public string get_Region();
    public void set_Region(string value);
    internal bool IsSetRegion();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
}
public class Amazon.IdentityManagement.Model.AccessKeyMetadata : object {
    private string _accessKeyId;
    private Nullable`1<DateTime> _createDate;
    private StatusType _status;
    private string _userName;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    public StatusType Status { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.AddClientIDToOpenIDConnectProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _clientID;
    private string _openIDConnectProviderArn;
    [AWSPropertyAttribute]
public string ClientID { get; public set; }
    [AWSPropertyAttribute]
public string OpenIDConnectProviderArn { get; public set; }
    public string get_ClientID();
    public void set_ClientID(string value);
    internal bool IsSetClientID();
    public string get_OpenIDConnectProviderArn();
    public void set_OpenIDConnectProviderArn(string value);
    internal bool IsSetOpenIDConnectProviderArn();
}
public class Amazon.IdentityManagement.Model.AddClientIDToOpenIDConnectProviderResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.AddRoleToInstanceProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _instanceProfileName;
    private string _roleName;
    [AWSPropertyAttribute]
public string InstanceProfileName { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_InstanceProfileName();
    public void set_InstanceProfileName(string value);
    internal bool IsSetInstanceProfileName();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.AddRoleToInstanceProfileResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.AddUserToGroupRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _userName;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public AddUserToGroupRequest(string groupName, string userName);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.AddUserToGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.AttachedPermissionsBoundary : object {
    private string _permissionsBoundaryArn;
    private PermissionsBoundaryAttachmentType _permissionsBoundaryType;
    [AWSPropertyAttribute]
public string PermissionsBoundaryArn { get; public set; }
    public PermissionsBoundaryAttachmentType PermissionsBoundaryType { get; public set; }
    public string get_PermissionsBoundaryArn();
    public void set_PermissionsBoundaryArn(string value);
    internal bool IsSetPermissionsBoundaryArn();
    public PermissionsBoundaryAttachmentType get_PermissionsBoundaryType();
    public void set_PermissionsBoundaryType(PermissionsBoundaryAttachmentType value);
    internal bool IsSetPermissionsBoundaryType();
}
public class Amazon.IdentityManagement.Model.AttachedPolicyType : object {
    private string _policyArn;
    private string _policyName;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.IdentityManagement.Model.AttachGroupPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _policyArn;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
}
public class Amazon.IdentityManagement.Model.AttachGroupPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.AttachRolePolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private string _roleName;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.AttachRolePolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.AttachUserPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private string _userName;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.AttachUserPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.ChangePasswordRequest : AmazonIdentityManagementServiceRequest {
    private string _newPassword;
    private string _oldPassword;
    [AWSPropertyAttribute]
public string NewPassword { get; public set; }
    [AWSPropertyAttribute]
public string OldPassword { get; public set; }
    public string get_NewPassword();
    public void set_NewPassword(string value);
    internal bool IsSetNewPassword();
    public string get_OldPassword();
    public void set_OldPassword(string value);
    internal bool IsSetOldPassword();
}
public class Amazon.IdentityManagement.Model.ChangePasswordResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.ConcurrentModificationException : AmazonIdentityManagementServiceException {
    public ConcurrentModificationException(string message);
    public ConcurrentModificationException(string message, Exception innerException);
    public ConcurrentModificationException(Exception innerException);
    public ConcurrentModificationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConcurrentModificationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.ContextEntry : object {
    private string _contextKeyName;
    private ContextKeyTypeEnum _contextKeyType;
    private List`1<string> _contextKeyValues;
    [AWSPropertyAttribute]
public string ContextKeyName { get; public set; }
    public ContextKeyTypeEnum ContextKeyType { get; public set; }
    public List`1<string> ContextKeyValues { get; public set; }
    public string get_ContextKeyName();
    public void set_ContextKeyName(string value);
    internal bool IsSetContextKeyName();
    public ContextKeyTypeEnum get_ContextKeyType();
    public void set_ContextKeyType(ContextKeyTypeEnum value);
    internal bool IsSetContextKeyType();
    public List`1<string> get_ContextKeyValues();
    public void set_ContextKeyValues(List`1<string> value);
    internal bool IsSetContextKeyValues();
}
public class Amazon.IdentityManagement.Model.CreateAccessKeyRequest : AmazonIdentityManagementServiceRequest {
    private string _userName;
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.CreateAccessKeyResponse : AmazonWebServiceResponse {
    private AccessKey _accessKey;
    [AWSPropertyAttribute]
public AccessKey AccessKey { get; public set; }
    public AccessKey get_AccessKey();
    public void set_AccessKey(AccessKey value);
    internal bool IsSetAccessKey();
}
public class Amazon.IdentityManagement.Model.CreateAccountAliasRequest : AmazonIdentityManagementServiceRequest {
    private string _accountAlias;
    [AWSPropertyAttribute]
public string AccountAlias { get; public set; }
    public CreateAccountAliasRequest(string accountAlias);
    public string get_AccountAlias();
    public void set_AccountAlias(string value);
    internal bool IsSetAccountAlias();
}
public class Amazon.IdentityManagement.Model.CreateAccountAliasResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.CreateGroupRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _path;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public CreateGroupRequest(string groupName);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
}
public class Amazon.IdentityManagement.Model.CreateGroupResponse : AmazonWebServiceResponse {
    private Group _group;
    [AWSPropertyAttribute]
public Group Group { get; public set; }
    public Group get_Group();
    public void set_Group(Group value);
    internal bool IsSetGroup();
}
public class Amazon.IdentityManagement.Model.CreateInstanceProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _instanceProfileName;
    private string _path;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string InstanceProfileName { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_InstanceProfileName();
    public void set_InstanceProfileName(string value);
    internal bool IsSetInstanceProfileName();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.CreateInstanceProfileResponse : AmazonWebServiceResponse {
    private InstanceProfile _instanceProfile;
    [AWSPropertyAttribute]
public InstanceProfile InstanceProfile { get; public set; }
    public InstanceProfile get_InstanceProfile();
    public void set_InstanceProfile(InstanceProfile value);
    internal bool IsSetInstanceProfile();
}
public class Amazon.IdentityManagement.Model.CreateLoginProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _password;
    private Nullable`1<bool> _passwordResetRequired;
    private string _userName;
    [AWSPropertyAttribute]
public string Password { get; public set; }
    public Nullable`1<bool> PasswordResetRequired { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public CreateLoginProfileRequest(string userName, string password);
    public string get_Password();
    public void set_Password(string value);
    internal bool IsSetPassword();
    public Nullable`1<bool> get_PasswordResetRequired();
    public void set_PasswordResetRequired(Nullable`1<bool> value);
    internal bool IsSetPasswordResetRequired();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.CreateLoginProfileResponse : AmazonWebServiceResponse {
    private LoginProfile _loginProfile;
    [AWSPropertyAttribute]
public LoginProfile LoginProfile { get; public set; }
    public LoginProfile get_LoginProfile();
    public void set_LoginProfile(LoginProfile value);
    internal bool IsSetLoginProfile();
}
public class Amazon.IdentityManagement.Model.CreateOpenIDConnectProviderRequest : AmazonIdentityManagementServiceRequest {
    private List`1<string> _clientIDList;
    private List`1<Tag> _tags;
    private List`1<string> _thumbprintList;
    private string _url;
    public List`1<string> ClientIDList { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public List`1<string> ThumbprintList { get; public set; }
    [AWSPropertyAttribute]
public string Url { get; public set; }
    public List`1<string> get_ClientIDList();
    public void set_ClientIDList(List`1<string> value);
    internal bool IsSetClientIDList();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public List`1<string> get_ThumbprintList();
    public void set_ThumbprintList(List`1<string> value);
    internal bool IsSetThumbprintList();
    public string get_Url();
    public void set_Url(string value);
    internal bool IsSetUrl();
}
public class Amazon.IdentityManagement.Model.CreateOpenIDConnectProviderResponse : AmazonWebServiceResponse {
    private string _openIDConnectProviderArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string OpenIDConnectProviderArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_OpenIDConnectProviderArn();
    public void set_OpenIDConnectProviderArn(string value);
    internal bool IsSetOpenIDConnectProviderArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.CreatePolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _description;
    private string _path;
    private string _policyDocument;
    private string _policyName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.CreatePolicyResponse : AmazonWebServiceResponse {
    private ManagedPolicy _policy;
    public ManagedPolicy Policy { get; public set; }
    public ManagedPolicy get_Policy();
    public void set_Policy(ManagedPolicy value);
    internal bool IsSetPolicy();
}
public class Amazon.IdentityManagement.Model.CreatePolicyVersionRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private string _policyDocument;
    private Nullable`1<bool> _setAsDefault;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    public Nullable`1<bool> SetAsDefault { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public Nullable`1<bool> get_SetAsDefault();
    public void set_SetAsDefault(Nullable`1<bool> value);
    internal bool IsSetSetAsDefault();
}
public class Amazon.IdentityManagement.Model.CreatePolicyVersionResponse : AmazonWebServiceResponse {
    private PolicyVersion _policyVersion;
    public PolicyVersion PolicyVersion { get; public set; }
    public PolicyVersion get_PolicyVersion();
    public void set_PolicyVersion(PolicyVersion value);
    internal bool IsSetPolicyVersion();
}
public class Amazon.IdentityManagement.Model.CreateRoleRequest : AmazonIdentityManagementServiceRequest {
    private string _assumeRolePolicyDocument;
    private string _description;
    private Nullable`1<int> _maxSessionDuration;
    private string _path;
    private string _permissionsBoundary;
    private string _roleName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string AssumeRolePolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxSessionDuration { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    [AWSPropertyAttribute]
public string PermissionsBoundary { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_AssumeRolePolicyDocument();
    public void set_AssumeRolePolicyDocument(string value);
    internal bool IsSetAssumeRolePolicyDocument();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<int> get_MaxSessionDuration();
    public void set_MaxSessionDuration(Nullable`1<int> value);
    internal bool IsSetMaxSessionDuration();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public string get_PermissionsBoundary();
    public void set_PermissionsBoundary(string value);
    internal bool IsSetPermissionsBoundary();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.CreateRoleResponse : AmazonWebServiceResponse {
    private Role _role;
    [AWSPropertyAttribute]
public Role Role { get; public set; }
    public Role get_Role();
    public void set_Role(Role value);
    internal bool IsSetRole();
}
public class Amazon.IdentityManagement.Model.CreateSAMLProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _name;
    private string _samlMetadataDocument;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string SAMLMetadataDocument { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_SAMLMetadataDocument();
    public void set_SAMLMetadataDocument(string value);
    internal bool IsSetSAMLMetadataDocument();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.CreateSAMLProviderResponse : AmazonWebServiceResponse {
    private string _samlProviderArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string SAMLProviderArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_SAMLProviderArn();
    public void set_SAMLProviderArn(string value);
    internal bool IsSetSAMLProviderArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.CreateServiceLinkedRoleRequest : AmazonIdentityManagementServiceRequest {
    private string _awsServiceName;
    private string _customSuffix;
    private string _description;
    [AWSPropertyAttribute]
public string AWSServiceName { get; public set; }
    [AWSPropertyAttribute]
public string CustomSuffix { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public string get_AWSServiceName();
    public void set_AWSServiceName(string value);
    internal bool IsSetAWSServiceName();
    public string get_CustomSuffix();
    public void set_CustomSuffix(string value);
    internal bool IsSetCustomSuffix();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
}
public class Amazon.IdentityManagement.Model.CreateServiceLinkedRoleResponse : AmazonWebServiceResponse {
    private Role _role;
    public Role Role { get; public set; }
    public Role get_Role();
    public void set_Role(Role value);
    internal bool IsSetRole();
}
public class Amazon.IdentityManagement.Model.CreateServiceSpecificCredentialRequest : AmazonIdentityManagementServiceRequest {
    private string _serviceName;
    private string _userName;
    [AWSPropertyAttribute]
public string ServiceName { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.CreateServiceSpecificCredentialResponse : AmazonWebServiceResponse {
    private ServiceSpecificCredential _serviceSpecificCredential;
    public ServiceSpecificCredential ServiceSpecificCredential { get; public set; }
    public ServiceSpecificCredential get_ServiceSpecificCredential();
    public void set_ServiceSpecificCredential(ServiceSpecificCredential value);
    internal bool IsSetServiceSpecificCredential();
}
public class Amazon.IdentityManagement.Model.CreateUserRequest : AmazonIdentityManagementServiceRequest {
    private string _path;
    private string _permissionsBoundary;
    private List`1<Tag> _tags;
    private string _userName;
    [AWSPropertyAttribute]
public string Path { get; public set; }
    [AWSPropertyAttribute]
public string PermissionsBoundary { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public CreateUserRequest(string userName);
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public string get_PermissionsBoundary();
    public void set_PermissionsBoundary(string value);
    internal bool IsSetPermissionsBoundary();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.CreateUserResponse : AmazonWebServiceResponse {
    private User _user;
    public User User { get; public set; }
    public User get_User();
    public void set_User(User value);
    internal bool IsSetUser();
}
public class Amazon.IdentityManagement.Model.CreateVirtualMFADeviceRequest : AmazonIdentityManagementServiceRequest {
    private string _path;
    private List`1<Tag> _tags;
    private string _virtualMFADeviceName;
    [AWSPropertyAttribute]
public string Path { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string VirtualMFADeviceName { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_VirtualMFADeviceName();
    public void set_VirtualMFADeviceName(string value);
    internal bool IsSetVirtualMFADeviceName();
}
public class Amazon.IdentityManagement.Model.CreateVirtualMFADeviceResponse : AmazonWebServiceResponse {
    private VirtualMFADevice _virtualMFADevice;
    [AWSPropertyAttribute]
public VirtualMFADevice VirtualMFADevice { get; public set; }
    public VirtualMFADevice get_VirtualMFADevice();
    public void set_VirtualMFADevice(VirtualMFADevice value);
    internal bool IsSetVirtualMFADevice();
}
public class Amazon.IdentityManagement.Model.CredentialReportExpiredException : AmazonIdentityManagementServiceException {
    public CredentialReportExpiredException(string message);
    public CredentialReportExpiredException(string message, Exception innerException);
    public CredentialReportExpiredException(Exception innerException);
    public CredentialReportExpiredException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CredentialReportExpiredException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.CredentialReportNotPresentException : AmazonIdentityManagementServiceException {
    public CredentialReportNotPresentException(string message);
    public CredentialReportNotPresentException(string message, Exception innerException);
    public CredentialReportNotPresentException(Exception innerException);
    public CredentialReportNotPresentException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CredentialReportNotPresentException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.CredentialReportNotReadyException : AmazonIdentityManagementServiceException {
    public CredentialReportNotReadyException(string message);
    public CredentialReportNotReadyException(string message, Exception innerException);
    public CredentialReportNotReadyException(Exception innerException);
    public CredentialReportNotReadyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CredentialReportNotReadyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.DeactivateMFADeviceRequest : AmazonIdentityManagementServiceRequest {
    private string _serialNumber;
    private string _userName;
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public DeactivateMFADeviceRequest(string userName, string serialNumber);
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DeactivateMFADeviceResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteAccessKeyRequest : AmazonIdentityManagementServiceRequest {
    private string _accessKeyId;
    private string _userName;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public DeleteAccessKeyRequest(string accessKeyId);
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DeleteAccessKeyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteAccountAliasRequest : AmazonIdentityManagementServiceRequest {
    private string _accountAlias;
    [AWSPropertyAttribute]
public string AccountAlias { get; public set; }
    public DeleteAccountAliasRequest(string accountAlias);
    public string get_AccountAlias();
    public void set_AccountAlias(string value);
    internal bool IsSetAccountAlias();
}
public class Amazon.IdentityManagement.Model.DeleteAccountAliasResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteAccountPasswordPolicyRequest : AmazonIdentityManagementServiceRequest {
}
public class Amazon.IdentityManagement.Model.DeleteAccountPasswordPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteConflictException : AmazonIdentityManagementServiceException {
    public DeleteConflictException(string message);
    public DeleteConflictException(string message, Exception innerException);
    public DeleteConflictException(Exception innerException);
    public DeleteConflictException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DeleteConflictException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.DeleteGroupPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _policyName;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public DeleteGroupPolicyRequest(string groupName, string policyName);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.IdentityManagement.Model.DeleteGroupPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteGroupRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    public DeleteGroupRequest(string groupName);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
}
public class Amazon.IdentityManagement.Model.DeleteGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteInstanceProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _instanceProfileName;
    [AWSPropertyAttribute]
public string InstanceProfileName { get; public set; }
    public string get_InstanceProfileName();
    public void set_InstanceProfileName(string value);
    internal bool IsSetInstanceProfileName();
}
public class Amazon.IdentityManagement.Model.DeleteInstanceProfileResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteLoginProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _userName;
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public DeleteLoginProfileRequest(string userName);
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DeleteLoginProfileResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteOpenIDConnectProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _openIDConnectProviderArn;
    [AWSPropertyAttribute]
public string OpenIDConnectProviderArn { get; public set; }
    public string get_OpenIDConnectProviderArn();
    public void set_OpenIDConnectProviderArn(string value);
    internal bool IsSetOpenIDConnectProviderArn();
}
public class Amazon.IdentityManagement.Model.DeleteOpenIDConnectProviderResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeletePolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
}
public class Amazon.IdentityManagement.Model.DeletePolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeletePolicyVersionRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private string _versionId;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string VersionId { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.IdentityManagement.Model.DeletePolicyVersionResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteRolePermissionsBoundaryRequest : AmazonIdentityManagementServiceRequest {
    private string _roleName;
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.DeleteRolePermissionsBoundaryResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteRolePolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyName;
    private string _roleName;
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.DeleteRolePolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteRoleRequest : AmazonIdentityManagementServiceRequest {
    private string _roleName;
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.DeleteRoleResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteSAMLProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _samlProviderArn;
    [AWSPropertyAttribute]
public string SAMLProviderArn { get; public set; }
    public string get_SAMLProviderArn();
    public void set_SAMLProviderArn(string value);
    internal bool IsSetSAMLProviderArn();
}
public class Amazon.IdentityManagement.Model.DeleteSAMLProviderResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteServerCertificateRequest : AmazonIdentityManagementServiceRequest {
    private string _serverCertificateName;
    [AWSPropertyAttribute]
public string ServerCertificateName { get; public set; }
    public DeleteServerCertificateRequest(string serverCertificateName);
    public string get_ServerCertificateName();
    public void set_ServerCertificateName(string value);
    internal bool IsSetServerCertificateName();
}
public class Amazon.IdentityManagement.Model.DeleteServerCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteServiceLinkedRoleRequest : AmazonIdentityManagementServiceRequest {
    private string _roleName;
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.DeleteServiceLinkedRoleResponse : AmazonWebServiceResponse {
    private string _deletionTaskId;
    [AWSPropertyAttribute]
public string DeletionTaskId { get; public set; }
    public string get_DeletionTaskId();
    public void set_DeletionTaskId(string value);
    internal bool IsSetDeletionTaskId();
}
public class Amazon.IdentityManagement.Model.DeleteServiceSpecificCredentialRequest : AmazonIdentityManagementServiceRequest {
    private string _serviceSpecificCredentialId;
    private string _userName;
    [AWSPropertyAttribute]
public string ServiceSpecificCredentialId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServiceSpecificCredentialId();
    public void set_ServiceSpecificCredentialId(string value);
    internal bool IsSetServiceSpecificCredentialId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DeleteServiceSpecificCredentialResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteSigningCertificateRequest : AmazonIdentityManagementServiceRequest {
    private string _certificateId;
    private string _userName;
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public DeleteSigningCertificateRequest(string certificateId);
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DeleteSigningCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteSSHPublicKeyRequest : AmazonIdentityManagementServiceRequest {
    private string _sshPublicKeyId;
    private string _userName;
    [AWSPropertyAttribute]
public string SSHPublicKeyId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_SSHPublicKeyId();
    public void set_SSHPublicKeyId(string value);
    internal bool IsSetSSHPublicKeyId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DeleteSSHPublicKeyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteUserPermissionsBoundaryRequest : AmazonIdentityManagementServiceRequest {
    private string _userName;
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DeleteUserPermissionsBoundaryResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteUserPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyName;
    private string _userName;
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public DeleteUserPolicyRequest(string userName, string policyName);
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DeleteUserPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteUserRequest : AmazonIdentityManagementServiceRequest {
    private string _userName;
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public DeleteUserRequest(string userName);
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DeleteUserResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeleteVirtualMFADeviceRequest : AmazonIdentityManagementServiceRequest {
    private string _serialNumber;
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
}
public class Amazon.IdentityManagement.Model.DeleteVirtualMFADeviceResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DeletionTaskFailureReasonType : object {
    private string _reason;
    private List`1<RoleUsageType> _roleUsageList;
    [AWSPropertyAttribute]
public string Reason { get; public set; }
    public List`1<RoleUsageType> RoleUsageList { get; public set; }
    public string get_Reason();
    public void set_Reason(string value);
    internal bool IsSetReason();
    public List`1<RoleUsageType> get_RoleUsageList();
    public void set_RoleUsageList(List`1<RoleUsageType> value);
    internal bool IsSetRoleUsageList();
}
public class Amazon.IdentityManagement.Model.DetachGroupPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _policyArn;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
}
public class Amazon.IdentityManagement.Model.DetachGroupPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DetachRolePolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private string _roleName;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.DetachRolePolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DetachUserPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private string _userName;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.DetachUserPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.DuplicateCertificateException : AmazonIdentityManagementServiceException {
    public DuplicateCertificateException(string message);
    public DuplicateCertificateException(string message, Exception innerException);
    public DuplicateCertificateException(Exception innerException);
    public DuplicateCertificateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DuplicateCertificateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.DuplicateSSHPublicKeyException : AmazonIdentityManagementServiceException {
    public DuplicateSSHPublicKeyException(string message);
    public DuplicateSSHPublicKeyException(string message, Exception innerException);
    public DuplicateSSHPublicKeyException(Exception innerException);
    public DuplicateSSHPublicKeyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DuplicateSSHPublicKeyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.EnableMFADeviceRequest : AmazonIdentityManagementServiceRequest {
    private string _authenticationCode1;
    private string _authenticationCode2;
    private string _serialNumber;
    private string _userName;
    [AWSPropertyAttribute]
public string AuthenticationCode1 { get; public set; }
    [AWSPropertyAttribute]
public string AuthenticationCode2 { get; public set; }
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_AuthenticationCode1();
    public void set_AuthenticationCode1(string value);
    internal bool IsSetAuthenticationCode1();
    public string get_AuthenticationCode2();
    public void set_AuthenticationCode2(string value);
    internal bool IsSetAuthenticationCode2();
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.EnableMFADeviceResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.EntityAlreadyExistsException : AmazonIdentityManagementServiceException {
    public EntityAlreadyExistsException(string message);
    public EntityAlreadyExistsException(string message, Exception innerException);
    public EntityAlreadyExistsException(Exception innerException);
    public EntityAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EntityAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.EntityDetails : object {
    private EntityInfo _entityInfo;
    private Nullable`1<DateTime> _lastAuthenticated;
    [AWSPropertyAttribute]
public EntityInfo EntityInfo { get; public set; }
    public Nullable`1<DateTime> LastAuthenticated { get; public set; }
    public EntityInfo get_EntityInfo();
    public void set_EntityInfo(EntityInfo value);
    internal bool IsSetEntityInfo();
    public Nullable`1<DateTime> get_LastAuthenticated();
    public void set_LastAuthenticated(Nullable`1<DateTime> value);
    internal bool IsSetLastAuthenticated();
}
public class Amazon.IdentityManagement.Model.EntityInfo : object {
    private string _arn;
    private string _id;
    private string _name;
    private string _path;
    private PolicyOwnerEntityType _type;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    [AWSPropertyAttribute]
public PolicyOwnerEntityType Type { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public PolicyOwnerEntityType get_Type();
    public void set_Type(PolicyOwnerEntityType value);
    internal bool IsSetType();
}
public class Amazon.IdentityManagement.Model.EntityTemporarilyUnmodifiableException : AmazonIdentityManagementServiceException {
    public EntityTemporarilyUnmodifiableException(string message);
    public EntityTemporarilyUnmodifiableException(string message, Exception innerException);
    public EntityTemporarilyUnmodifiableException(Exception innerException);
    public EntityTemporarilyUnmodifiableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EntityTemporarilyUnmodifiableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.ErrorDetails : object {
    private string _code;
    private string _message;
    [AWSPropertyAttribute]
public string Code { get; public set; }
    [AWSPropertyAttribute]
public string Message { get; public set; }
    public string get_Code();
    public void set_Code(string value);
    internal bool IsSetCode();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
}
public class Amazon.IdentityManagement.Model.EvaluationResult : object {
    private string _evalActionName;
    private PolicyEvaluationDecisionType _evalDecision;
    private Dictionary`2<string, string> _evalDecisionDetails;
    private string _evalResourceName;
    private List`1<Statement> _matchedStatements;
    private List`1<string> _missingContextValues;
    private OrganizationsDecisionDetail _organizationsDecisionDetail;
    private PermissionsBoundaryDecisionDetail _permissionsBoundaryDecisionDetail;
    private List`1<ResourceSpecificResult> _resourceSpecificResults;
    [AWSPropertyAttribute]
public string EvalActionName { get; public set; }
    [AWSPropertyAttribute]
public PolicyEvaluationDecisionType EvalDecision { get; public set; }
    public Dictionary`2<string, string> EvalDecisionDetails { get; public set; }
    [AWSPropertyAttribute]
public string EvalResourceName { get; public set; }
    public List`1<Statement> MatchedStatements { get; public set; }
    public List`1<string> MissingContextValues { get; public set; }
    public OrganizationsDecisionDetail OrganizationsDecisionDetail { get; public set; }
    public PermissionsBoundaryDecisionDetail PermissionsBoundaryDecisionDetail { get; public set; }
    public List`1<ResourceSpecificResult> ResourceSpecificResults { get; public set; }
    public string get_EvalActionName();
    public void set_EvalActionName(string value);
    internal bool IsSetEvalActionName();
    public PolicyEvaluationDecisionType get_EvalDecision();
    public void set_EvalDecision(PolicyEvaluationDecisionType value);
    internal bool IsSetEvalDecision();
    public Dictionary`2<string, string> get_EvalDecisionDetails();
    public void set_EvalDecisionDetails(Dictionary`2<string, string> value);
    internal bool IsSetEvalDecisionDetails();
    public string get_EvalResourceName();
    public void set_EvalResourceName(string value);
    internal bool IsSetEvalResourceName();
    public List`1<Statement> get_MatchedStatements();
    public void set_MatchedStatements(List`1<Statement> value);
    internal bool IsSetMatchedStatements();
    public List`1<string> get_MissingContextValues();
    public void set_MissingContextValues(List`1<string> value);
    internal bool IsSetMissingContextValues();
    public OrganizationsDecisionDetail get_OrganizationsDecisionDetail();
    public void set_OrganizationsDecisionDetail(OrganizationsDecisionDetail value);
    internal bool IsSetOrganizationsDecisionDetail();
    public PermissionsBoundaryDecisionDetail get_PermissionsBoundaryDecisionDetail();
    public void set_PermissionsBoundaryDecisionDetail(PermissionsBoundaryDecisionDetail value);
    internal bool IsSetPermissionsBoundaryDecisionDetail();
    public List`1<ResourceSpecificResult> get_ResourceSpecificResults();
    public void set_ResourceSpecificResults(List`1<ResourceSpecificResult> value);
    internal bool IsSetResourceSpecificResults();
}
public class Amazon.IdentityManagement.Model.GenerateCredentialReportRequest : AmazonIdentityManagementServiceRequest {
}
public class Amazon.IdentityManagement.Model.GenerateCredentialReportResponse : AmazonWebServiceResponse {
    private string _description;
    private ReportStateType _state;
    public string Description { get; public set; }
    public ReportStateType State { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public ReportStateType get_State();
    public void set_State(ReportStateType value);
    internal bool IsSetState();
}
public class Amazon.IdentityManagement.Model.GenerateOrganizationsAccessReportRequest : AmazonIdentityManagementServiceRequest {
    private string _entityPath;
    private string _organizationsPolicyId;
    [AWSPropertyAttribute]
public string EntityPath { get; public set; }
    public string OrganizationsPolicyId { get; public set; }
    public string get_EntityPath();
    public void set_EntityPath(string value);
    internal bool IsSetEntityPath();
    public string get_OrganizationsPolicyId();
    public void set_OrganizationsPolicyId(string value);
    internal bool IsSetOrganizationsPolicyId();
}
public class Amazon.IdentityManagement.Model.GenerateOrganizationsAccessReportResponse : AmazonWebServiceResponse {
    private string _jobId;
    [AWSPropertyAttribute]
public string JobId { get; public set; }
    public string get_JobId();
    public void set_JobId(string value);
    internal bool IsSetJobId();
}
public class Amazon.IdentityManagement.Model.GenerateServiceLastAccessedDetailsRequest : AmazonIdentityManagementServiceRequest {
    private string _arn;
    private AccessAdvisorUsageGranularityType _granularity;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public AccessAdvisorUsageGranularityType Granularity { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public AccessAdvisorUsageGranularityType get_Granularity();
    public void set_Granularity(AccessAdvisorUsageGranularityType value);
    internal bool IsSetGranularity();
}
public class Amazon.IdentityManagement.Model.GenerateServiceLastAccessedDetailsResponse : AmazonWebServiceResponse {
    private string _jobId;
    [AWSPropertyAttribute]
public string JobId { get; public set; }
    public string get_JobId();
    public void set_JobId(string value);
    internal bool IsSetJobId();
}
public class Amazon.IdentityManagement.Model.GetAccessKeyLastUsedRequest : AmazonIdentityManagementServiceRequest {
    private string _accessKeyId;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
}
public class Amazon.IdentityManagement.Model.GetAccessKeyLastUsedResponse : AmazonWebServiceResponse {
    private AccessKeyLastUsed _accessKeyLastUsed;
    private string _userName;
    public AccessKeyLastUsed AccessKeyLastUsed { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public AccessKeyLastUsed get_AccessKeyLastUsed();
    public void set_AccessKeyLastUsed(AccessKeyLastUsed value);
    internal bool IsSetAccessKeyLastUsed();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
internal class Amazon.IdentityManagement.Model.GetAccountAuthorizationDetailsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private GetAccountAuthorizationDetailsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<GetAccountAuthorizationDetailsResponse> Responses { get; }
    public IPaginatedEnumerable`1<UserDetail> UserDetailList { get; }
    public IPaginatedEnumerable`1<GroupDetail> GroupDetailList { get; }
    public IPaginatedEnumerable`1<RoleDetail> RoleDetailList { get; }
    public IPaginatedEnumerable`1<ManagedPolicyDetail> Policies { get; }
    internal GetAccountAuthorizationDetailsPaginator(IAmazonIdentityManagementService client, GetAccountAuthorizationDetailsRequest request);
    public sealed virtual IPaginatedEnumerable`1<GetAccountAuthorizationDetailsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<UserDetail> get_UserDetailList();
    public sealed virtual IPaginatedEnumerable`1<GroupDetail> get_GroupDetailList();
    public sealed virtual IPaginatedEnumerable`1<RoleDetail> get_RoleDetailList();
    public sealed virtual IPaginatedEnumerable`1<ManagedPolicyDetail> get_Policies();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.GetAccountAuthorizationDetailsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-GetAccountAuthorizationDetailsResponse>-PaginateAsync>d__14")]
private sealed virtual override IAsyncEnumerable`1<GetAccountAuthorizationDetailsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.GetAccountAuthorizationDetailsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.GetAccountAuthorizationDetailsRequest : AmazonIdentityManagementServiceRequest {
    private List`1<string> _filter;
    private string _marker;
    private Nullable`1<int> _maxItems;
    public List`1<string> Filter { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public List`1<string> get_Filter();
    public void set_Filter(List`1<string> value);
    internal bool IsSetFilter();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
}
public class Amazon.IdentityManagement.Model.GetAccountAuthorizationDetailsResponse : AmazonWebServiceResponse {
    private List`1<GroupDetail> _groupDetailList;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<ManagedPolicyDetail> _policies;
    private List`1<RoleDetail> _roleDetailList;
    private List`1<UserDetail> _userDetailList;
    public List`1<GroupDetail> GroupDetailList { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<ManagedPolicyDetail> Policies { get; public set; }
    public List`1<RoleDetail> RoleDetailList { get; public set; }
    public List`1<UserDetail> UserDetailList { get; public set; }
    public List`1<GroupDetail> get_GroupDetailList();
    public void set_GroupDetailList(List`1<GroupDetail> value);
    internal bool IsSetGroupDetailList();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ManagedPolicyDetail> get_Policies();
    public void set_Policies(List`1<ManagedPolicyDetail> value);
    internal bool IsSetPolicies();
    public List`1<RoleDetail> get_RoleDetailList();
    public void set_RoleDetailList(List`1<RoleDetail> value);
    internal bool IsSetRoleDetailList();
    public List`1<UserDetail> get_UserDetailList();
    public void set_UserDetailList(List`1<UserDetail> value);
    internal bool IsSetUserDetailList();
}
public class Amazon.IdentityManagement.Model.GetAccountPasswordPolicyRequest : AmazonIdentityManagementServiceRequest {
}
public class Amazon.IdentityManagement.Model.GetAccountPasswordPolicyResponse : AmazonWebServiceResponse {
    private PasswordPolicy _passwordPolicy;
    [AWSPropertyAttribute]
public PasswordPolicy PasswordPolicy { get; public set; }
    public PasswordPolicy get_PasswordPolicy();
    public void set_PasswordPolicy(PasswordPolicy value);
    internal bool IsSetPasswordPolicy();
}
public class Amazon.IdentityManagement.Model.GetAccountSummaryRequest : AmazonIdentityManagementServiceRequest {
}
public class Amazon.IdentityManagement.Model.GetAccountSummaryResponse : AmazonWebServiceResponse {
    private Dictionary`2<string, int> _summaryMap;
    public Dictionary`2<string, int> SummaryMap { get; public set; }
    public Dictionary`2<string, int> get_SummaryMap();
    public void set_SummaryMap(Dictionary`2<string, int> value);
    internal bool IsSetSummaryMap();
}
public class Amazon.IdentityManagement.Model.GetContextKeysForCustomPolicyRequest : AmazonIdentityManagementServiceRequest {
    private List`1<string> _policyInputList;
    [AWSPropertyAttribute]
public List`1<string> PolicyInputList { get; public set; }
    public List`1<string> get_PolicyInputList();
    public void set_PolicyInputList(List`1<string> value);
    internal bool IsSetPolicyInputList();
}
public class Amazon.IdentityManagement.Model.GetContextKeysForCustomPolicyResponse : AmazonWebServiceResponse {
    private List`1<string> _contextKeyNames;
    public List`1<string> ContextKeyNames { get; public set; }
    public List`1<string> get_ContextKeyNames();
    public void set_ContextKeyNames(List`1<string> value);
    internal bool IsSetContextKeyNames();
}
public class Amazon.IdentityManagement.Model.GetContextKeysForPrincipalPolicyRequest : AmazonIdentityManagementServiceRequest {
    private List`1<string> _policyInputList;
    private string _policySourceArn;
    public List`1<string> PolicyInputList { get; public set; }
    [AWSPropertyAttribute]
public string PolicySourceArn { get; public set; }
    public List`1<string> get_PolicyInputList();
    public void set_PolicyInputList(List`1<string> value);
    internal bool IsSetPolicyInputList();
    public string get_PolicySourceArn();
    public void set_PolicySourceArn(string value);
    internal bool IsSetPolicySourceArn();
}
public class Amazon.IdentityManagement.Model.GetContextKeysForPrincipalPolicyResponse : AmazonWebServiceResponse {
    private List`1<string> _contextKeyNames;
    public List`1<string> ContextKeyNames { get; public set; }
    public List`1<string> get_ContextKeyNames();
    public void set_ContextKeyNames(List`1<string> value);
    internal bool IsSetContextKeyNames();
}
public class Amazon.IdentityManagement.Model.GetCredentialReportRequest : AmazonIdentityManagementServiceRequest {
}
public class Amazon.IdentityManagement.Model.GetCredentialReportResponse : AmazonWebServiceResponse {
    private MemoryStream _content;
    private Nullable`1<DateTime> _generatedTime;
    private ReportFormatType _reportFormat;
    public MemoryStream Content { get; public set; }
    public Nullable`1<DateTime> GeneratedTime { get; public set; }
    public ReportFormatType ReportFormat { get; public set; }
    public MemoryStream get_Content();
    public void set_Content(MemoryStream value);
    internal bool IsSetContent();
    public Nullable`1<DateTime> get_GeneratedTime();
    public void set_GeneratedTime(Nullable`1<DateTime> value);
    internal bool IsSetGeneratedTime();
    public ReportFormatType get_ReportFormat();
    public void set_ReportFormat(ReportFormatType value);
    internal bool IsSetReportFormat();
}
internal class Amazon.IdentityManagement.Model.GetGroupPaginator : object {
    private IAmazonIdentityManagementService _client;
    private GetGroupRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<GetGroupResponse> Responses { get; }
    public IPaginatedEnumerable`1<User> Users { get; }
    internal GetGroupPaginator(IAmazonIdentityManagementService client, GetGroupRequest request);
    public sealed virtual IPaginatedEnumerable`1<GetGroupResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<User> get_Users();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.GetGroupPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-GetGroupResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<GetGroupResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.GetGroupResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.GetGroupPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _policyName;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public GetGroupPolicyRequest(string groupName, string policyName);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.IdentityManagement.Model.GetGroupPolicyResponse : AmazonWebServiceResponse {
    private string _groupName;
    private string _policyDocument;
    private string _policyName;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.IdentityManagement.Model.GetGroupRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _marker;
    private Nullable`1<int> _maxItems;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public GetGroupRequest(string groupName);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
}
public class Amazon.IdentityManagement.Model.GetGroupResponse : AmazonWebServiceResponse {
    private Group _group;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<User> _users;
    [AWSPropertyAttribute]
public Group Group { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<User> Users { get; public set; }
    public Group get_Group();
    public void set_Group(Group value);
    internal bool IsSetGroup();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<User> get_Users();
    public void set_Users(List`1<User> value);
    internal bool IsSetUsers();
}
public class Amazon.IdentityManagement.Model.GetInstanceProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _instanceProfileName;
    [AWSPropertyAttribute]
public string InstanceProfileName { get; public set; }
    public string get_InstanceProfileName();
    public void set_InstanceProfileName(string value);
    internal bool IsSetInstanceProfileName();
}
public class Amazon.IdentityManagement.Model.GetInstanceProfileResponse : AmazonWebServiceResponse {
    private InstanceProfile _instanceProfile;
    [AWSPropertyAttribute]
public InstanceProfile InstanceProfile { get; public set; }
    public InstanceProfile get_InstanceProfile();
    public void set_InstanceProfile(InstanceProfile value);
    internal bool IsSetInstanceProfile();
}
public class Amazon.IdentityManagement.Model.GetLoginProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _userName;
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public GetLoginProfileRequest(string userName);
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.GetLoginProfileResponse : AmazonWebServiceResponse {
    private LoginProfile _loginProfile;
    [AWSPropertyAttribute]
public LoginProfile LoginProfile { get; public set; }
    public LoginProfile get_LoginProfile();
    public void set_LoginProfile(LoginProfile value);
    internal bool IsSetLoginProfile();
}
public class Amazon.IdentityManagement.Model.GetMFADeviceRequest : AmazonIdentityManagementServiceRequest {
    private string _serialNumber;
    private string _userName;
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.GetMFADeviceResponse : AmazonWebServiceResponse {
    private Dictionary`2<string, string> _certifications;
    private Nullable`1<DateTime> _enableDate;
    private string _serialNumber;
    private string _userName;
    public Dictionary`2<string, string> Certifications { get; public set; }
    public Nullable`1<DateTime> EnableDate { get; public set; }
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public Dictionary`2<string, string> get_Certifications();
    public void set_Certifications(Dictionary`2<string, string> value);
    internal bool IsSetCertifications();
    public Nullable`1<DateTime> get_EnableDate();
    public void set_EnableDate(Nullable`1<DateTime> value);
    internal bool IsSetEnableDate();
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.GetOpenIDConnectProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _openIDConnectProviderArn;
    [AWSPropertyAttribute]
public string OpenIDConnectProviderArn { get; public set; }
    public string get_OpenIDConnectProviderArn();
    public void set_OpenIDConnectProviderArn(string value);
    internal bool IsSetOpenIDConnectProviderArn();
}
public class Amazon.IdentityManagement.Model.GetOpenIDConnectProviderResponse : AmazonWebServiceResponse {
    private List`1<string> _clientIDList;
    private Nullable`1<DateTime> _createDate;
    private List`1<Tag> _tags;
    private List`1<string> _thumbprintList;
    private string _url;
    public List`1<string> ClientIDList { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public List`1<string> ThumbprintList { get; public set; }
    [AWSPropertyAttribute]
public string Url { get; public set; }
    public List`1<string> get_ClientIDList();
    public void set_ClientIDList(List`1<string> value);
    internal bool IsSetClientIDList();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public List`1<string> get_ThumbprintList();
    public void set_ThumbprintList(List`1<string> value);
    internal bool IsSetThumbprintList();
    public string get_Url();
    public void set_Url(string value);
    internal bool IsSetUrl();
}
public class Amazon.IdentityManagement.Model.GetOrganizationsAccessReportRequest : AmazonIdentityManagementServiceRequest {
    private string _jobId;
    private string _marker;
    private Nullable`1<int> _maxItems;
    private SortKeyType _sortKey;
    [AWSPropertyAttribute]
public string JobId { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public SortKeyType SortKey { get; public set; }
    public string get_JobId();
    public void set_JobId(string value);
    internal bool IsSetJobId();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public SortKeyType get_SortKey();
    public void set_SortKey(SortKeyType value);
    internal bool IsSetSortKey();
}
public class Amazon.IdentityManagement.Model.GetOrganizationsAccessReportResponse : AmazonWebServiceResponse {
    private List`1<AccessDetail> _accessDetails;
    private ErrorDetails _errorDetails;
    private Nullable`1<bool> _isTruncated;
    private Nullable`1<DateTime> _jobCompletionDate;
    private Nullable`1<DateTime> _jobCreationDate;
    private JobStatusType _jobStatus;
    private string _marker;
    private Nullable`1<int> _numberOfServicesAccessible;
    private Nullable`1<int> _numberOfServicesNotAccessed;
    public List`1<AccessDetail> AccessDetails { get; public set; }
    public ErrorDetails ErrorDetails { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public Nullable`1<DateTime> JobCompletionDate { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> JobCreationDate { get; public set; }
    [AWSPropertyAttribute]
public JobStatusType JobStatus { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> NumberOfServicesAccessible { get; public set; }
    public Nullable`1<int> NumberOfServicesNotAccessed { get; public set; }
    public List`1<AccessDetail> get_AccessDetails();
    public void set_AccessDetails(List`1<AccessDetail> value);
    internal bool IsSetAccessDetails();
    public ErrorDetails get_ErrorDetails();
    public void set_ErrorDetails(ErrorDetails value);
    internal bool IsSetErrorDetails();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public Nullable`1<DateTime> get_JobCompletionDate();
    public void set_JobCompletionDate(Nullable`1<DateTime> value);
    internal bool IsSetJobCompletionDate();
    public Nullable`1<DateTime> get_JobCreationDate();
    public void set_JobCreationDate(Nullable`1<DateTime> value);
    internal bool IsSetJobCreationDate();
    public JobStatusType get_JobStatus();
    public void set_JobStatus(JobStatusType value);
    internal bool IsSetJobStatus();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_NumberOfServicesAccessible();
    public void set_NumberOfServicesAccessible(Nullable`1<int> value);
    internal bool IsSetNumberOfServicesAccessible();
    public Nullable`1<int> get_NumberOfServicesNotAccessed();
    public void set_NumberOfServicesNotAccessed(Nullable`1<int> value);
    internal bool IsSetNumberOfServicesNotAccessed();
}
public class Amazon.IdentityManagement.Model.GetPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
}
public class Amazon.IdentityManagement.Model.GetPolicyResponse : AmazonWebServiceResponse {
    private ManagedPolicy _policy;
    public ManagedPolicy Policy { get; public set; }
    public ManagedPolicy get_Policy();
    public void set_Policy(ManagedPolicy value);
    internal bool IsSetPolicy();
}
public class Amazon.IdentityManagement.Model.GetPolicyVersionRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private string _versionId;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string VersionId { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.IdentityManagement.Model.GetPolicyVersionResponse : AmazonWebServiceResponse {
    private PolicyVersion _policyVersion;
    public PolicyVersion PolicyVersion { get; public set; }
    public PolicyVersion get_PolicyVersion();
    public void set_PolicyVersion(PolicyVersion value);
    internal bool IsSetPolicyVersion();
}
public class Amazon.IdentityManagement.Model.GetRolePolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyName;
    private string _roleName;
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.GetRolePolicyResponse : AmazonWebServiceResponse {
    private string _policyDocument;
    private string _policyName;
    private string _roleName;
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.GetRoleRequest : AmazonIdentityManagementServiceRequest {
    private string _roleName;
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.GetRoleResponse : AmazonWebServiceResponse {
    private Role _role;
    [AWSPropertyAttribute]
public Role Role { get; public set; }
    public Role get_Role();
    public void set_Role(Role value);
    internal bool IsSetRole();
}
public class Amazon.IdentityManagement.Model.GetSAMLProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _samlProviderArn;
    [AWSPropertyAttribute]
public string SAMLProviderArn { get; public set; }
    public string get_SAMLProviderArn();
    public void set_SAMLProviderArn(string value);
    internal bool IsSetSAMLProviderArn();
}
public class Amazon.IdentityManagement.Model.GetSAMLProviderResponse : AmazonWebServiceResponse {
    private Nullable`1<DateTime> _createDate;
    private string _samlMetadataDocument;
    private List`1<Tag> _tags;
    private Nullable`1<DateTime> _validUntil;
    public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public string SAMLMetadataDocument { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<DateTime> ValidUntil { get; public set; }
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_SAMLMetadataDocument();
    public void set_SAMLMetadataDocument(string value);
    internal bool IsSetSAMLMetadataDocument();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<DateTime> get_ValidUntil();
    public void set_ValidUntil(Nullable`1<DateTime> value);
    internal bool IsSetValidUntil();
}
public class Amazon.IdentityManagement.Model.GetServerCertificateRequest : AmazonIdentityManagementServiceRequest {
    private string _serverCertificateName;
    [AWSPropertyAttribute]
public string ServerCertificateName { get; public set; }
    public GetServerCertificateRequest(string serverCertificateName);
    public string get_ServerCertificateName();
    public void set_ServerCertificateName(string value);
    internal bool IsSetServerCertificateName();
}
public class Amazon.IdentityManagement.Model.GetServerCertificateResponse : AmazonWebServiceResponse {
    private ServerCertificate _serverCertificate;
    [AWSPropertyAttribute]
public ServerCertificate ServerCertificate { get; public set; }
    public ServerCertificate get_ServerCertificate();
    public void set_ServerCertificate(ServerCertificate value);
    internal bool IsSetServerCertificate();
}
public class Amazon.IdentityManagement.Model.GetServiceLastAccessedDetailsRequest : AmazonIdentityManagementServiceRequest {
    private string _jobId;
    private string _marker;
    private Nullable`1<int> _maxItems;
    [AWSPropertyAttribute]
public string JobId { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public string get_JobId();
    public void set_JobId(string value);
    internal bool IsSetJobId();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
}
public class Amazon.IdentityManagement.Model.GetServiceLastAccessedDetailsResponse : AmazonWebServiceResponse {
    private ErrorDetails _error;
    private Nullable`1<bool> _isTruncated;
    private Nullable`1<DateTime> _jobCompletionDate;
    private Nullable`1<DateTime> _jobCreationDate;
    private JobStatusType _jobStatus;
    private AccessAdvisorUsageGranularityType _jobType;
    private string _marker;
    private List`1<ServiceLastAccessed> _servicesLastAccessed;
    public ErrorDetails Error { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> JobCompletionDate { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> JobCreationDate { get; public set; }
    [AWSPropertyAttribute]
public JobStatusType JobStatus { get; public set; }
    public AccessAdvisorUsageGranularityType JobType { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<ServiceLastAccessed> ServicesLastAccessed { get; public set; }
    public ErrorDetails get_Error();
    public void set_Error(ErrorDetails value);
    internal bool IsSetError();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public Nullable`1<DateTime> get_JobCompletionDate();
    public void set_JobCompletionDate(Nullable`1<DateTime> value);
    internal bool IsSetJobCompletionDate();
    public Nullable`1<DateTime> get_JobCreationDate();
    public void set_JobCreationDate(Nullable`1<DateTime> value);
    internal bool IsSetJobCreationDate();
    public JobStatusType get_JobStatus();
    public void set_JobStatus(JobStatusType value);
    internal bool IsSetJobStatus();
    public AccessAdvisorUsageGranularityType get_JobType();
    public void set_JobType(AccessAdvisorUsageGranularityType value);
    internal bool IsSetJobType();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ServiceLastAccessed> get_ServicesLastAccessed();
    public void set_ServicesLastAccessed(List`1<ServiceLastAccessed> value);
    internal bool IsSetServicesLastAccessed();
}
public class Amazon.IdentityManagement.Model.GetServiceLastAccessedDetailsWithEntitiesRequest : AmazonIdentityManagementServiceRequest {
    private string _jobId;
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _serviceNamespace;
    [AWSPropertyAttribute]
public string JobId { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string ServiceNamespace { get; public set; }
    public string get_JobId();
    public void set_JobId(string value);
    internal bool IsSetJobId();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_ServiceNamespace();
    public void set_ServiceNamespace(string value);
    internal bool IsSetServiceNamespace();
}
public class Amazon.IdentityManagement.Model.GetServiceLastAccessedDetailsWithEntitiesResponse : AmazonWebServiceResponse {
    private List`1<EntityDetails> _entityDetailsList;
    private ErrorDetails _error;
    private Nullable`1<bool> _isTruncated;
    private Nullable`1<DateTime> _jobCompletionDate;
    private Nullable`1<DateTime> _jobCreationDate;
    private JobStatusType _jobStatus;
    private string _marker;
    [AWSPropertyAttribute]
public List`1<EntityDetails> EntityDetailsList { get; public set; }
    public ErrorDetails Error { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> JobCompletionDate { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> JobCreationDate { get; public set; }
    [AWSPropertyAttribute]
public JobStatusType JobStatus { get; public set; }
    public string Marker { get; public set; }
    public List`1<EntityDetails> get_EntityDetailsList();
    public void set_EntityDetailsList(List`1<EntityDetails> value);
    internal bool IsSetEntityDetailsList();
    public ErrorDetails get_Error();
    public void set_Error(ErrorDetails value);
    internal bool IsSetError();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public Nullable`1<DateTime> get_JobCompletionDate();
    public void set_JobCompletionDate(Nullable`1<DateTime> value);
    internal bool IsSetJobCompletionDate();
    public Nullable`1<DateTime> get_JobCreationDate();
    public void set_JobCreationDate(Nullable`1<DateTime> value);
    internal bool IsSetJobCreationDate();
    public JobStatusType get_JobStatus();
    public void set_JobStatus(JobStatusType value);
    internal bool IsSetJobStatus();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.IdentityManagement.Model.GetServiceLinkedRoleDeletionStatusRequest : AmazonIdentityManagementServiceRequest {
    private string _deletionTaskId;
    [AWSPropertyAttribute]
public string DeletionTaskId { get; public set; }
    public string get_DeletionTaskId();
    public void set_DeletionTaskId(string value);
    internal bool IsSetDeletionTaskId();
}
public class Amazon.IdentityManagement.Model.GetServiceLinkedRoleDeletionStatusResponse : AmazonWebServiceResponse {
    private DeletionTaskFailureReasonType _reason;
    private DeletionTaskStatusType _status;
    public DeletionTaskFailureReasonType Reason { get; public set; }
    [AWSPropertyAttribute]
public DeletionTaskStatusType Status { get; public set; }
    public DeletionTaskFailureReasonType get_Reason();
    public void set_Reason(DeletionTaskFailureReasonType value);
    internal bool IsSetReason();
    public DeletionTaskStatusType get_Status();
    public void set_Status(DeletionTaskStatusType value);
    internal bool IsSetStatus();
}
public class Amazon.IdentityManagement.Model.GetSSHPublicKeyRequest : AmazonIdentityManagementServiceRequest {
    private EncodingType _encoding;
    private string _sshPublicKeyId;
    private string _userName;
    [AWSPropertyAttribute]
public EncodingType Encoding { get; public set; }
    [AWSPropertyAttribute]
public string SSHPublicKeyId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public EncodingType get_Encoding();
    public void set_Encoding(EncodingType value);
    internal bool IsSetEncoding();
    public string get_SSHPublicKeyId();
    public void set_SSHPublicKeyId(string value);
    internal bool IsSetSSHPublicKeyId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.GetSSHPublicKeyResponse : AmazonWebServiceResponse {
    private SSHPublicKey _sshPublicKey;
    public SSHPublicKey SSHPublicKey { get; public set; }
    public SSHPublicKey get_SSHPublicKey();
    public void set_SSHPublicKey(SSHPublicKey value);
    internal bool IsSetSSHPublicKey();
}
public class Amazon.IdentityManagement.Model.GetUserPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyName;
    private string _userName;
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public GetUserPolicyRequest(string userName, string policyName);
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.GetUserPolicyResponse : AmazonWebServiceResponse {
    private string _policyDocument;
    private string _policyName;
    private string _userName;
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.GetUserRequest : AmazonIdentityManagementServiceRequest {
    private string _userName;
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.GetUserResponse : AmazonWebServiceResponse {
    private User _user;
    [AWSPropertyAttribute]
public User User { get; public set; }
    public User get_User();
    public void set_User(User value);
    internal bool IsSetUser();
}
public class Amazon.IdentityManagement.Model.Group : object {
    private string _arn;
    private Nullable`1<DateTime> _createDate;
    private string _groupId;
    private string _groupName;
    private string _path;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public string GroupId { get; public set; }
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public Group(string path, string groupName, string groupId, string arn, Nullable`1<DateTime> createDate);
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_GroupId();
    public void set_GroupId(string value);
    internal bool IsSetGroupId();
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
}
public class Amazon.IdentityManagement.Model.GroupDetail : object {
    private string _arn;
    private List`1<AttachedPolicyType> _attachedManagedPolicies;
    private Nullable`1<DateTime> _createDate;
    private string _groupId;
    private string _groupName;
    private List`1<PolicyDetail> _groupPolicyList;
    private string _path;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public List`1<AttachedPolicyType> AttachedManagedPolicies { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public string GroupId { get; public set; }
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    public List`1<PolicyDetail> GroupPolicyList { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public List`1<AttachedPolicyType> get_AttachedManagedPolicies();
    public void set_AttachedManagedPolicies(List`1<AttachedPolicyType> value);
    internal bool IsSetAttachedManagedPolicies();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_GroupId();
    public void set_GroupId(string value);
    internal bool IsSetGroupId();
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public List`1<PolicyDetail> get_GroupPolicyList();
    public void set_GroupPolicyList(List`1<PolicyDetail> value);
    internal bool IsSetGroupPolicyList();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
}
public class Amazon.IdentityManagement.Model.IdentityManagementPaginatorFactory : object {
    private IAmazonIdentityManagementService client;
    internal IdentityManagementPaginatorFactory(IAmazonIdentityManagementService client);
    public sealed virtual IGetAccountAuthorizationDetailsPaginator GetAccountAuthorizationDetails(GetAccountAuthorizationDetailsRequest request);
    public sealed virtual IGetGroupPaginator GetGroup(GetGroupRequest request);
    public sealed virtual IListAccessKeysPaginator ListAccessKeys(ListAccessKeysRequest request);
    public sealed virtual IListAccountAliasesPaginator ListAccountAliases(ListAccountAliasesRequest request);
    public sealed virtual IListAttachedGroupPoliciesPaginator ListAttachedGroupPolicies(ListAttachedGroupPoliciesRequest request);
    public sealed virtual IListAttachedRolePoliciesPaginator ListAttachedRolePolicies(ListAttachedRolePoliciesRequest request);
    public sealed virtual IListAttachedUserPoliciesPaginator ListAttachedUserPolicies(ListAttachedUserPoliciesRequest request);
    public sealed virtual IListEntitiesForPolicyPaginator ListEntitiesForPolicy(ListEntitiesForPolicyRequest request);
    public sealed virtual IListGroupPoliciesPaginator ListGroupPolicies(ListGroupPoliciesRequest request);
    public sealed virtual IListGroupsPaginator ListGroups(ListGroupsRequest request);
    public sealed virtual IListGroupsForUserPaginator ListGroupsForUser(ListGroupsForUserRequest request);
    public sealed virtual IListInstanceProfilesPaginator ListInstanceProfiles(ListInstanceProfilesRequest request);
    public sealed virtual IListInstanceProfilesForRolePaginator ListInstanceProfilesForRole(ListInstanceProfilesForRoleRequest request);
    public sealed virtual IListInstanceProfileTagsPaginator ListInstanceProfileTags(ListInstanceProfileTagsRequest request);
    public sealed virtual IListMFADevicesPaginator ListMFADevices(ListMFADevicesRequest request);
    public sealed virtual IListMFADeviceTagsPaginator ListMFADeviceTags(ListMFADeviceTagsRequest request);
    public sealed virtual IListOpenIDConnectProviderTagsPaginator ListOpenIDConnectProviderTags(ListOpenIDConnectProviderTagsRequest request);
    public sealed virtual IListPoliciesPaginator ListPolicies(ListPoliciesRequest request);
    public sealed virtual IListPolicyTagsPaginator ListPolicyTags(ListPolicyTagsRequest request);
    public sealed virtual IListPolicyVersionsPaginator ListPolicyVersions(ListPolicyVersionsRequest request);
    public sealed virtual IListRolePoliciesPaginator ListRolePolicies(ListRolePoliciesRequest request);
    public sealed virtual IListRolesPaginator ListRoles(ListRolesRequest request);
    public sealed virtual IListRoleTagsPaginator ListRoleTags(ListRoleTagsRequest request);
    public sealed virtual IListSAMLProviderTagsPaginator ListSAMLProviderTags(ListSAMLProviderTagsRequest request);
    public sealed virtual IListServerCertificatesPaginator ListServerCertificates(ListServerCertificatesRequest request);
    public sealed virtual IListServerCertificateTagsPaginator ListServerCertificateTags(ListServerCertificateTagsRequest request);
    public sealed virtual IListSigningCertificatesPaginator ListSigningCertificates(ListSigningCertificatesRequest request);
    public sealed virtual IListSSHPublicKeysPaginator ListSSHPublicKeys(ListSSHPublicKeysRequest request);
    public sealed virtual IListUserPoliciesPaginator ListUserPolicies(ListUserPoliciesRequest request);
    public sealed virtual IListUsersPaginator ListUsers(ListUsersRequest request);
    public sealed virtual IListUserTagsPaginator ListUserTags(ListUserTagsRequest request);
    public sealed virtual IListVirtualMFADevicesPaginator ListVirtualMFADevices(ListVirtualMFADevicesRequest request);
    public sealed virtual ISimulateCustomPolicyPaginator SimulateCustomPolicy(SimulateCustomPolicyRequest request);
    public sealed virtual ISimulatePrincipalPolicyPaginator SimulatePrincipalPolicy(SimulatePrincipalPolicyRequest request);
}
public interface Amazon.IdentityManagement.Model.IGetAccountAuthorizationDetailsPaginator {
    public IPaginatedEnumerable`1<GetAccountAuthorizationDetailsResponse> Responses { get; }
    public IPaginatedEnumerable`1<UserDetail> UserDetailList { get; }
    public IPaginatedEnumerable`1<GroupDetail> GroupDetailList { get; }
    public IPaginatedEnumerable`1<RoleDetail> RoleDetailList { get; }
    public IPaginatedEnumerable`1<ManagedPolicyDetail> Policies { get; }
    public abstract virtual IPaginatedEnumerable`1<GetAccountAuthorizationDetailsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<UserDetail> get_UserDetailList();
    public abstract virtual IPaginatedEnumerable`1<GroupDetail> get_GroupDetailList();
    public abstract virtual IPaginatedEnumerable`1<RoleDetail> get_RoleDetailList();
    public abstract virtual IPaginatedEnumerable`1<ManagedPolicyDetail> get_Policies();
}
public interface Amazon.IdentityManagement.Model.IGetGroupPaginator {
    public IPaginatedEnumerable`1<GetGroupResponse> Responses { get; }
    public IPaginatedEnumerable`1<User> Users { get; }
    public abstract virtual IPaginatedEnumerable`1<GetGroupResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<User> get_Users();
}
public interface Amazon.IdentityManagement.Model.IIdentityManagementPaginatorFactory {
    public abstract virtual IGetAccountAuthorizationDetailsPaginator GetAccountAuthorizationDetails(GetAccountAuthorizationDetailsRequest request);
    public abstract virtual IGetGroupPaginator GetGroup(GetGroupRequest request);
    public abstract virtual IListAccessKeysPaginator ListAccessKeys(ListAccessKeysRequest request);
    public abstract virtual IListAccountAliasesPaginator ListAccountAliases(ListAccountAliasesRequest request);
    public abstract virtual IListAttachedGroupPoliciesPaginator ListAttachedGroupPolicies(ListAttachedGroupPoliciesRequest request);
    public abstract virtual IListAttachedRolePoliciesPaginator ListAttachedRolePolicies(ListAttachedRolePoliciesRequest request);
    public abstract virtual IListAttachedUserPoliciesPaginator ListAttachedUserPolicies(ListAttachedUserPoliciesRequest request);
    public abstract virtual IListEntitiesForPolicyPaginator ListEntitiesForPolicy(ListEntitiesForPolicyRequest request);
    public abstract virtual IListGroupPoliciesPaginator ListGroupPolicies(ListGroupPoliciesRequest request);
    public abstract virtual IListGroupsPaginator ListGroups(ListGroupsRequest request);
    public abstract virtual IListGroupsForUserPaginator ListGroupsForUser(ListGroupsForUserRequest request);
    public abstract virtual IListInstanceProfilesPaginator ListInstanceProfiles(ListInstanceProfilesRequest request);
    public abstract virtual IListInstanceProfilesForRolePaginator ListInstanceProfilesForRole(ListInstanceProfilesForRoleRequest request);
    public abstract virtual IListInstanceProfileTagsPaginator ListInstanceProfileTags(ListInstanceProfileTagsRequest request);
    public abstract virtual IListMFADevicesPaginator ListMFADevices(ListMFADevicesRequest request);
    public abstract virtual IListMFADeviceTagsPaginator ListMFADeviceTags(ListMFADeviceTagsRequest request);
    public abstract virtual IListOpenIDConnectProviderTagsPaginator ListOpenIDConnectProviderTags(ListOpenIDConnectProviderTagsRequest request);
    public abstract virtual IListPoliciesPaginator ListPolicies(ListPoliciesRequest request);
    public abstract virtual IListPolicyTagsPaginator ListPolicyTags(ListPolicyTagsRequest request);
    public abstract virtual IListPolicyVersionsPaginator ListPolicyVersions(ListPolicyVersionsRequest request);
    public abstract virtual IListRolePoliciesPaginator ListRolePolicies(ListRolePoliciesRequest request);
    public abstract virtual IListRolesPaginator ListRoles(ListRolesRequest request);
    public abstract virtual IListRoleTagsPaginator ListRoleTags(ListRoleTagsRequest request);
    public abstract virtual IListSAMLProviderTagsPaginator ListSAMLProviderTags(ListSAMLProviderTagsRequest request);
    public abstract virtual IListServerCertificatesPaginator ListServerCertificates(ListServerCertificatesRequest request);
    public abstract virtual IListServerCertificateTagsPaginator ListServerCertificateTags(ListServerCertificateTagsRequest request);
    public abstract virtual IListSigningCertificatesPaginator ListSigningCertificates(ListSigningCertificatesRequest request);
    public abstract virtual IListSSHPublicKeysPaginator ListSSHPublicKeys(ListSSHPublicKeysRequest request);
    public abstract virtual IListUserPoliciesPaginator ListUserPolicies(ListUserPoliciesRequest request);
    public abstract virtual IListUsersPaginator ListUsers(ListUsersRequest request);
    public abstract virtual IListUserTagsPaginator ListUserTags(ListUserTagsRequest request);
    public abstract virtual IListVirtualMFADevicesPaginator ListVirtualMFADevices(ListVirtualMFADevicesRequest request);
    public abstract virtual ISimulateCustomPolicyPaginator SimulateCustomPolicy(SimulateCustomPolicyRequest request);
    public abstract virtual ISimulatePrincipalPolicyPaginator SimulatePrincipalPolicy(SimulatePrincipalPolicyRequest request);
}
public interface Amazon.IdentityManagement.Model.IListAccessKeysPaginator {
    public IPaginatedEnumerable`1<ListAccessKeysResponse> Responses { get; }
    public IPaginatedEnumerable`1<AccessKeyMetadata> AccessKeyMetadata { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAccessKeysResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<AccessKeyMetadata> get_AccessKeyMetadata();
}
public interface Amazon.IdentityManagement.Model.IListAccountAliasesPaginator {
    public IPaginatedEnumerable`1<ListAccountAliasesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> AccountAliases { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAccountAliasesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_AccountAliases();
}
public interface Amazon.IdentityManagement.Model.IListAttachedGroupPoliciesPaginator {
    public IPaginatedEnumerable`1<ListAttachedGroupPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AttachedPolicyType> AttachedPolicies { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAttachedGroupPoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<AttachedPolicyType> get_AttachedPolicies();
}
public interface Amazon.IdentityManagement.Model.IListAttachedRolePoliciesPaginator {
    public IPaginatedEnumerable`1<ListAttachedRolePoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AttachedPolicyType> AttachedPolicies { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAttachedRolePoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<AttachedPolicyType> get_AttachedPolicies();
}
public interface Amazon.IdentityManagement.Model.IListAttachedUserPoliciesPaginator {
    public IPaginatedEnumerable`1<ListAttachedUserPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AttachedPolicyType> AttachedPolicies { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAttachedUserPoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<AttachedPolicyType> get_AttachedPolicies();
}
public interface Amazon.IdentityManagement.Model.IListEntitiesForPolicyPaginator {
    public IPaginatedEnumerable`1<ListEntitiesForPolicyResponse> Responses { get; }
    public IPaginatedEnumerable`1<PolicyGroup> PolicyGroups { get; }
    public IPaginatedEnumerable`1<PolicyUser> PolicyUsers { get; }
    public IPaginatedEnumerable`1<PolicyRole> PolicyRoles { get; }
    public abstract virtual IPaginatedEnumerable`1<ListEntitiesForPolicyResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<PolicyGroup> get_PolicyGroups();
    public abstract virtual IPaginatedEnumerable`1<PolicyUser> get_PolicyUsers();
    public abstract virtual IPaginatedEnumerable`1<PolicyRole> get_PolicyRoles();
}
public interface Amazon.IdentityManagement.Model.IListGroupPoliciesPaginator {
    public IPaginatedEnumerable`1<ListGroupPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PolicyNames { get; }
    public abstract virtual IPaginatedEnumerable`1<ListGroupPoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_PolicyNames();
}
public interface Amazon.IdentityManagement.Model.IListGroupsForUserPaginator {
    public IPaginatedEnumerable`1<ListGroupsForUserResponse> Responses { get; }
    public IPaginatedEnumerable`1<Group> Groups { get; }
    public abstract virtual IPaginatedEnumerable`1<ListGroupsForUserResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Group> get_Groups();
}
public interface Amazon.IdentityManagement.Model.IListGroupsPaginator {
    public IPaginatedEnumerable`1<ListGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Group> Groups { get; }
    public abstract virtual IPaginatedEnumerable`1<ListGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Group> get_Groups();
}
public interface Amazon.IdentityManagement.Model.IListInstanceProfilesForRolePaginator {
    public IPaginatedEnumerable`1<ListInstanceProfilesForRoleResponse> Responses { get; }
    public IPaginatedEnumerable`1<InstanceProfile> InstanceProfiles { get; }
    public abstract virtual IPaginatedEnumerable`1<ListInstanceProfilesForRoleResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<InstanceProfile> get_InstanceProfiles();
}
public interface Amazon.IdentityManagement.Model.IListInstanceProfilesPaginator {
    public IPaginatedEnumerable`1<ListInstanceProfilesResponse> Responses { get; }
    public IPaginatedEnumerable`1<InstanceProfile> InstanceProfiles { get; }
    public abstract virtual IPaginatedEnumerable`1<ListInstanceProfilesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<InstanceProfile> get_InstanceProfiles();
}
public interface Amazon.IdentityManagement.Model.IListInstanceProfileTagsPaginator {
    public IPaginatedEnumerable`1<ListInstanceProfileTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListInstanceProfileTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.IdentityManagement.Model.IListMFADevicesPaginator {
    public IPaginatedEnumerable`1<ListMFADevicesResponse> Responses { get; }
    public IPaginatedEnumerable`1<MFADevice> MFADevices { get; }
    public abstract virtual IPaginatedEnumerable`1<ListMFADevicesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<MFADevice> get_MFADevices();
}
public interface Amazon.IdentityManagement.Model.IListMFADeviceTagsPaginator {
    public IPaginatedEnumerable`1<ListMFADeviceTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListMFADeviceTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.IdentityManagement.Model.IListOpenIDConnectProviderTagsPaginator {
    public IPaginatedEnumerable`1<ListOpenIDConnectProviderTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListOpenIDConnectProviderTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.IdentityManagement.Model.IListPoliciesPaginator {
    public IPaginatedEnumerable`1<ListPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ManagedPolicy> Policies { get; }
    public abstract virtual IPaginatedEnumerable`1<ListPoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ManagedPolicy> get_Policies();
}
public interface Amazon.IdentityManagement.Model.IListPolicyTagsPaginator {
    public IPaginatedEnumerable`1<ListPolicyTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListPolicyTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.IdentityManagement.Model.IListPolicyVersionsPaginator {
    public IPaginatedEnumerable`1<ListPolicyVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<PolicyVersion> Versions { get; }
    public abstract virtual IPaginatedEnumerable`1<ListPolicyVersionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<PolicyVersion> get_Versions();
}
public interface Amazon.IdentityManagement.Model.IListRolePoliciesPaginator {
    public IPaginatedEnumerable`1<ListRolePoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PolicyNames { get; }
    public abstract virtual IPaginatedEnumerable`1<ListRolePoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_PolicyNames();
}
public interface Amazon.IdentityManagement.Model.IListRolesPaginator {
    public IPaginatedEnumerable`1<ListRolesResponse> Responses { get; }
    public IPaginatedEnumerable`1<Role> Roles { get; }
    public abstract virtual IPaginatedEnumerable`1<ListRolesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Role> get_Roles();
}
public interface Amazon.IdentityManagement.Model.IListRoleTagsPaginator {
    public IPaginatedEnumerable`1<ListRoleTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListRoleTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.IdentityManagement.Model.IListSAMLProviderTagsPaginator {
    public IPaginatedEnumerable`1<ListSAMLProviderTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListSAMLProviderTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.IdentityManagement.Model.IListServerCertificatesPaginator {
    public IPaginatedEnumerable`1<ListServerCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ServerCertificateMetadata> ServerCertificateMetadataList { get; }
    public abstract virtual IPaginatedEnumerable`1<ListServerCertificatesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ServerCertificateMetadata> get_ServerCertificateMetadataList();
}
public interface Amazon.IdentityManagement.Model.IListServerCertificateTagsPaginator {
    public IPaginatedEnumerable`1<ListServerCertificateTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListServerCertificateTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.IdentityManagement.Model.IListSigningCertificatesPaginator {
    public IPaginatedEnumerable`1<ListSigningCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<SigningCertificate> Certificates { get; }
    public abstract virtual IPaginatedEnumerable`1<ListSigningCertificatesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<SigningCertificate> get_Certificates();
}
public interface Amazon.IdentityManagement.Model.IListSSHPublicKeysPaginator {
    public IPaginatedEnumerable`1<ListSSHPublicKeysResponse> Responses { get; }
    public IPaginatedEnumerable`1<SSHPublicKeyMetadata> SSHPublicKeys { get; }
    public abstract virtual IPaginatedEnumerable`1<ListSSHPublicKeysResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<SSHPublicKeyMetadata> get_SSHPublicKeys();
}
public interface Amazon.IdentityManagement.Model.IListUserPoliciesPaginator {
    public IPaginatedEnumerable`1<ListUserPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PolicyNames { get; }
    public abstract virtual IPaginatedEnumerable`1<ListUserPoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_PolicyNames();
}
public interface Amazon.IdentityManagement.Model.IListUsersPaginator {
    public IPaginatedEnumerable`1<ListUsersResponse> Responses { get; }
    public IPaginatedEnumerable`1<User> Users { get; }
    public abstract virtual IPaginatedEnumerable`1<ListUsersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<User> get_Users();
}
public interface Amazon.IdentityManagement.Model.IListUserTagsPaginator {
    public IPaginatedEnumerable`1<ListUserTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListUserTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.IdentityManagement.Model.IListVirtualMFADevicesPaginator {
    public IPaginatedEnumerable`1<ListVirtualMFADevicesResponse> Responses { get; }
    public IPaginatedEnumerable`1<VirtualMFADevice> VirtualMFADevices { get; }
    public abstract virtual IPaginatedEnumerable`1<ListVirtualMFADevicesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<VirtualMFADevice> get_VirtualMFADevices();
}
public class Amazon.IdentityManagement.Model.InstanceProfile : object {
    private string _arn;
    private Nullable`1<DateTime> _createDate;
    private string _instanceProfileId;
    private string _instanceProfileName;
    private string _path;
    private List`1<Role> _roles;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public string InstanceProfileId { get; public set; }
    [AWSPropertyAttribute]
public string InstanceProfileName { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    [AWSPropertyAttribute]
public List`1<Role> Roles { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_InstanceProfileId();
    public void set_InstanceProfileId(string value);
    internal bool IsSetInstanceProfileId();
    public string get_InstanceProfileName();
    public void set_InstanceProfileName(string value);
    internal bool IsSetInstanceProfileName();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public List`1<Role> get_Roles();
    public void set_Roles(List`1<Role> value);
    internal bool IsSetRoles();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AccessDetailUnmarshaller : object {
    private static AccessDetailUnmarshaller _instance;
    public static AccessDetailUnmarshaller Instance { get; }
    private static AccessDetailUnmarshaller();
    public sealed virtual AccessDetail Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessDetail Unmarshall(JsonUnmarshallerContext context);
    public static AccessDetailUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AccessKeyLastUsedUnmarshaller : object {
    private static AccessKeyLastUsedUnmarshaller _instance;
    public static AccessKeyLastUsedUnmarshaller Instance { get; }
    private static AccessKeyLastUsedUnmarshaller();
    public sealed virtual AccessKeyLastUsed Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessKeyLastUsed Unmarshall(JsonUnmarshallerContext context);
    public static AccessKeyLastUsedUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AccessKeyMetadataUnmarshaller : object {
    private static AccessKeyMetadataUnmarshaller _instance;
    public static AccessKeyMetadataUnmarshaller Instance { get; }
    private static AccessKeyMetadataUnmarshaller();
    public sealed virtual AccessKeyMetadata Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessKeyMetadata Unmarshall(JsonUnmarshallerContext context);
    public static AccessKeyMetadataUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AccessKeyUnmarshaller : object {
    private static AccessKeyUnmarshaller _instance;
    public static AccessKeyUnmarshaller Instance { get; }
    private static AccessKeyUnmarshaller();
    public sealed virtual AccessKey Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessKey Unmarshall(JsonUnmarshallerContext context);
    public static AccessKeyUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AddClientIDToOpenIDConnectProviderRequestMarshaller : object {
    private static AddClientIDToOpenIDConnectProviderRequestMarshaller _instance;
    public static AddClientIDToOpenIDConnectProviderRequestMarshaller Instance { get; }
    private static AddClientIDToOpenIDConnectProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AddClientIDToOpenIDConnectProviderRequest publicRequest);
    internal static AddClientIDToOpenIDConnectProviderRequestMarshaller GetInstance();
    public static AddClientIDToOpenIDConnectProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AddClientIDToOpenIDConnectProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AddClientIDToOpenIDConnectProviderResponseUnmarshaller _instance;
    public static AddClientIDToOpenIDConnectProviderResponseUnmarshaller Instance { get; }
    private static AddClientIDToOpenIDConnectProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AddClientIDToOpenIDConnectProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AddClientIDToOpenIDConnectProviderResponseUnmarshaller GetInstance();
    public static AddClientIDToOpenIDConnectProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AddRoleToInstanceProfileRequestMarshaller : object {
    private static AddRoleToInstanceProfileRequestMarshaller _instance;
    public static AddRoleToInstanceProfileRequestMarshaller Instance { get; }
    private static AddRoleToInstanceProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AddRoleToInstanceProfileRequest publicRequest);
    internal static AddRoleToInstanceProfileRequestMarshaller GetInstance();
    public static AddRoleToInstanceProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AddRoleToInstanceProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AddRoleToInstanceProfileResponseUnmarshaller _instance;
    public static AddRoleToInstanceProfileResponseUnmarshaller Instance { get; }
    private static AddRoleToInstanceProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AddRoleToInstanceProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AddRoleToInstanceProfileResponseUnmarshaller GetInstance();
    public static AddRoleToInstanceProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AddUserToGroupRequestMarshaller : object {
    private static AddUserToGroupRequestMarshaller _instance;
    public static AddUserToGroupRequestMarshaller Instance { get; }
    private static AddUserToGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AddUserToGroupRequest publicRequest);
    internal static AddUserToGroupRequestMarshaller GetInstance();
    public static AddUserToGroupRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AddUserToGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AddUserToGroupResponseUnmarshaller _instance;
    public static AddUserToGroupResponseUnmarshaller Instance { get; }
    private static AddUserToGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AddUserToGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AddUserToGroupResponseUnmarshaller GetInstance();
    public static AddUserToGroupResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AttachedPermissionsBoundaryUnmarshaller : object {
    private static AttachedPermissionsBoundaryUnmarshaller _instance;
    public static AttachedPermissionsBoundaryUnmarshaller Instance { get; }
    private static AttachedPermissionsBoundaryUnmarshaller();
    public sealed virtual AttachedPermissionsBoundary Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AttachedPermissionsBoundary Unmarshall(JsonUnmarshallerContext context);
    public static AttachedPermissionsBoundaryUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AttachedPolicyTypeUnmarshaller : object {
    private static AttachedPolicyTypeUnmarshaller _instance;
    public static AttachedPolicyTypeUnmarshaller Instance { get; }
    private static AttachedPolicyTypeUnmarshaller();
    public sealed virtual AttachedPolicyType Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AttachedPolicyType Unmarshall(JsonUnmarshallerContext context);
    public static AttachedPolicyTypeUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AttachGroupPolicyRequestMarshaller : object {
    private static AttachGroupPolicyRequestMarshaller _instance;
    public static AttachGroupPolicyRequestMarshaller Instance { get; }
    private static AttachGroupPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AttachGroupPolicyRequest publicRequest);
    internal static AttachGroupPolicyRequestMarshaller GetInstance();
    public static AttachGroupPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AttachGroupPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AttachGroupPolicyResponseUnmarshaller _instance;
    public static AttachGroupPolicyResponseUnmarshaller Instance { get; }
    private static AttachGroupPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AttachGroupPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AttachGroupPolicyResponseUnmarshaller GetInstance();
    public static AttachGroupPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AttachRolePolicyRequestMarshaller : object {
    private static AttachRolePolicyRequestMarshaller _instance;
    public static AttachRolePolicyRequestMarshaller Instance { get; }
    private static AttachRolePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AttachRolePolicyRequest publicRequest);
    internal static AttachRolePolicyRequestMarshaller GetInstance();
    public static AttachRolePolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AttachRolePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AttachRolePolicyResponseUnmarshaller _instance;
    public static AttachRolePolicyResponseUnmarshaller Instance { get; }
    private static AttachRolePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AttachRolePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AttachRolePolicyResponseUnmarshaller GetInstance();
    public static AttachRolePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AttachUserPolicyRequestMarshaller : object {
    private static AttachUserPolicyRequestMarshaller _instance;
    public static AttachUserPolicyRequestMarshaller Instance { get; }
    private static AttachUserPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AttachUserPolicyRequest publicRequest);
    internal static AttachUserPolicyRequestMarshaller GetInstance();
    public static AttachUserPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.AttachUserPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AttachUserPolicyResponseUnmarshaller _instance;
    public static AttachUserPolicyResponseUnmarshaller Instance { get; }
    private static AttachUserPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AttachUserPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AttachUserPolicyResponseUnmarshaller GetInstance();
    public static AttachUserPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ChangePasswordRequestMarshaller : object {
    private static ChangePasswordRequestMarshaller _instance;
    public static ChangePasswordRequestMarshaller Instance { get; }
    private static ChangePasswordRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ChangePasswordRequest publicRequest);
    internal static ChangePasswordRequestMarshaller GetInstance();
    public static ChangePasswordRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ChangePasswordResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ChangePasswordResponseUnmarshaller _instance;
    public static ChangePasswordResponseUnmarshaller Instance { get; }
    private static ChangePasswordResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ChangePasswordResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ChangePasswordResponseUnmarshaller GetInstance();
    public static ChangePasswordResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ConcurrentModificationExceptionUnmarshaller : object {
    private static ConcurrentModificationExceptionUnmarshaller _instance;
    public static ConcurrentModificationExceptionUnmarshaller Instance { get; }
    private static ConcurrentModificationExceptionUnmarshaller();
    public sealed virtual ConcurrentModificationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConcurrentModificationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConcurrentModificationExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateAccessKeyRequestMarshaller : object {
    private static CreateAccessKeyRequestMarshaller _instance;
    public static CreateAccessKeyRequestMarshaller Instance { get; }
    private static CreateAccessKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateAccessKeyRequest publicRequest);
    internal static CreateAccessKeyRequestMarshaller GetInstance();
    public static CreateAccessKeyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateAccessKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateAccessKeyResponseUnmarshaller _instance;
    public static CreateAccessKeyResponseUnmarshaller Instance { get; }
    private static CreateAccessKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateAccessKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateAccessKeyResponseUnmarshaller GetInstance();
    public static CreateAccessKeyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateAccountAliasRequestMarshaller : object {
    private static CreateAccountAliasRequestMarshaller _instance;
    public static CreateAccountAliasRequestMarshaller Instance { get; }
    private static CreateAccountAliasRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateAccountAliasRequest publicRequest);
    internal static CreateAccountAliasRequestMarshaller GetInstance();
    public static CreateAccountAliasRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateAccountAliasResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateAccountAliasResponseUnmarshaller _instance;
    public static CreateAccountAliasResponseUnmarshaller Instance { get; }
    private static CreateAccountAliasResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateAccountAliasResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateAccountAliasResponseUnmarshaller GetInstance();
    public static CreateAccountAliasResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateGroupRequestMarshaller : object {
    private static CreateGroupRequestMarshaller _instance;
    public static CreateGroupRequestMarshaller Instance { get; }
    private static CreateGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateGroupRequest publicRequest);
    internal static CreateGroupRequestMarshaller GetInstance();
    public static CreateGroupRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateGroupResponseUnmarshaller _instance;
    public static CreateGroupResponseUnmarshaller Instance { get; }
    private static CreateGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateGroupResponseUnmarshaller GetInstance();
    public static CreateGroupResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateInstanceProfileRequestMarshaller : object {
    private static CreateInstanceProfileRequestMarshaller _instance;
    public static CreateInstanceProfileRequestMarshaller Instance { get; }
    private static CreateInstanceProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateInstanceProfileRequest publicRequest);
    internal static CreateInstanceProfileRequestMarshaller GetInstance();
    public static CreateInstanceProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateInstanceProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateInstanceProfileResponseUnmarshaller _instance;
    public static CreateInstanceProfileResponseUnmarshaller Instance { get; }
    private static CreateInstanceProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateInstanceProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateInstanceProfileResponseUnmarshaller GetInstance();
    public static CreateInstanceProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateLoginProfileRequestMarshaller : object {
    private static CreateLoginProfileRequestMarshaller _instance;
    public static CreateLoginProfileRequestMarshaller Instance { get; }
    private static CreateLoginProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateLoginProfileRequest publicRequest);
    internal static CreateLoginProfileRequestMarshaller GetInstance();
    public static CreateLoginProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateLoginProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateLoginProfileResponseUnmarshaller _instance;
    public static CreateLoginProfileResponseUnmarshaller Instance { get; }
    private static CreateLoginProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateLoginProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateLoginProfileResponseUnmarshaller GetInstance();
    public static CreateLoginProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateOpenIDConnectProviderRequestMarshaller : object {
    private static CreateOpenIDConnectProviderRequestMarshaller _instance;
    public static CreateOpenIDConnectProviderRequestMarshaller Instance { get; }
    private static CreateOpenIDConnectProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateOpenIDConnectProviderRequest publicRequest);
    internal static CreateOpenIDConnectProviderRequestMarshaller GetInstance();
    public static CreateOpenIDConnectProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateOpenIDConnectProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateOpenIDConnectProviderResponseUnmarshaller _instance;
    public static CreateOpenIDConnectProviderResponseUnmarshaller Instance { get; }
    private static CreateOpenIDConnectProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateOpenIDConnectProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateOpenIDConnectProviderResponseUnmarshaller GetInstance();
    public static CreateOpenIDConnectProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreatePolicyRequestMarshaller : object {
    private static CreatePolicyRequestMarshaller _instance;
    public static CreatePolicyRequestMarshaller Instance { get; }
    private static CreatePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreatePolicyRequest publicRequest);
    internal static CreatePolicyRequestMarshaller GetInstance();
    public static CreatePolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreatePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreatePolicyResponseUnmarshaller _instance;
    public static CreatePolicyResponseUnmarshaller Instance { get; }
    private static CreatePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreatePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreatePolicyResponseUnmarshaller GetInstance();
    public static CreatePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreatePolicyVersionRequestMarshaller : object {
    private static CreatePolicyVersionRequestMarshaller _instance;
    public static CreatePolicyVersionRequestMarshaller Instance { get; }
    private static CreatePolicyVersionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreatePolicyVersionRequest publicRequest);
    internal static CreatePolicyVersionRequestMarshaller GetInstance();
    public static CreatePolicyVersionRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreatePolicyVersionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreatePolicyVersionResponseUnmarshaller _instance;
    public static CreatePolicyVersionResponseUnmarshaller Instance { get; }
    private static CreatePolicyVersionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreatePolicyVersionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreatePolicyVersionResponseUnmarshaller GetInstance();
    public static CreatePolicyVersionResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateRoleRequestMarshaller : object {
    private static CreateRoleRequestMarshaller _instance;
    public static CreateRoleRequestMarshaller Instance { get; }
    private static CreateRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateRoleRequest publicRequest);
    internal static CreateRoleRequestMarshaller GetInstance();
    public static CreateRoleRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateRoleResponseUnmarshaller _instance;
    public static CreateRoleResponseUnmarshaller Instance { get; }
    private static CreateRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateRoleResponseUnmarshaller GetInstance();
    public static CreateRoleResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateSAMLProviderRequestMarshaller : object {
    private static CreateSAMLProviderRequestMarshaller _instance;
    public static CreateSAMLProviderRequestMarshaller Instance { get; }
    private static CreateSAMLProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateSAMLProviderRequest publicRequest);
    internal static CreateSAMLProviderRequestMarshaller GetInstance();
    public static CreateSAMLProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateSAMLProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateSAMLProviderResponseUnmarshaller _instance;
    public static CreateSAMLProviderResponseUnmarshaller Instance { get; }
    private static CreateSAMLProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateSAMLProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateSAMLProviderResponseUnmarshaller GetInstance();
    public static CreateSAMLProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateServiceLinkedRoleRequestMarshaller : object {
    private static CreateServiceLinkedRoleRequestMarshaller _instance;
    public static CreateServiceLinkedRoleRequestMarshaller Instance { get; }
    private static CreateServiceLinkedRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateServiceLinkedRoleRequest publicRequest);
    internal static CreateServiceLinkedRoleRequestMarshaller GetInstance();
    public static CreateServiceLinkedRoleRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateServiceLinkedRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateServiceLinkedRoleResponseUnmarshaller _instance;
    public static CreateServiceLinkedRoleResponseUnmarshaller Instance { get; }
    private static CreateServiceLinkedRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateServiceLinkedRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateServiceLinkedRoleResponseUnmarshaller GetInstance();
    public static CreateServiceLinkedRoleResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateServiceSpecificCredentialRequestMarshaller : object {
    private static CreateServiceSpecificCredentialRequestMarshaller _instance;
    public static CreateServiceSpecificCredentialRequestMarshaller Instance { get; }
    private static CreateServiceSpecificCredentialRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateServiceSpecificCredentialRequest publicRequest);
    internal static CreateServiceSpecificCredentialRequestMarshaller GetInstance();
    public static CreateServiceSpecificCredentialRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateServiceSpecificCredentialResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateServiceSpecificCredentialResponseUnmarshaller _instance;
    public static CreateServiceSpecificCredentialResponseUnmarshaller Instance { get; }
    private static CreateServiceSpecificCredentialResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateServiceSpecificCredentialResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateServiceSpecificCredentialResponseUnmarshaller GetInstance();
    public static CreateServiceSpecificCredentialResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateUserRequestMarshaller : object {
    private static CreateUserRequestMarshaller _instance;
    public static CreateUserRequestMarshaller Instance { get; }
    private static CreateUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateUserRequest publicRequest);
    internal static CreateUserRequestMarshaller GetInstance();
    public static CreateUserRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateUserResponseUnmarshaller _instance;
    public static CreateUserResponseUnmarshaller Instance { get; }
    private static CreateUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateUserResponseUnmarshaller GetInstance();
    public static CreateUserResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateVirtualMFADeviceRequestMarshaller : object {
    private static CreateVirtualMFADeviceRequestMarshaller _instance;
    public static CreateVirtualMFADeviceRequestMarshaller Instance { get; }
    private static CreateVirtualMFADeviceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateVirtualMFADeviceRequest publicRequest);
    internal static CreateVirtualMFADeviceRequestMarshaller GetInstance();
    public static CreateVirtualMFADeviceRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CreateVirtualMFADeviceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateVirtualMFADeviceResponseUnmarshaller _instance;
    public static CreateVirtualMFADeviceResponseUnmarshaller Instance { get; }
    private static CreateVirtualMFADeviceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateVirtualMFADeviceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateVirtualMFADeviceResponseUnmarshaller GetInstance();
    public static CreateVirtualMFADeviceResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CredentialReportExpiredExceptionUnmarshaller : object {
    private static CredentialReportExpiredExceptionUnmarshaller _instance;
    public static CredentialReportExpiredExceptionUnmarshaller Instance { get; }
    private static CredentialReportExpiredExceptionUnmarshaller();
    public sealed virtual CredentialReportExpiredException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CredentialReportExpiredException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CredentialReportExpiredExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CredentialReportNotPresentExceptionUnmarshaller : object {
    private static CredentialReportNotPresentExceptionUnmarshaller _instance;
    public static CredentialReportNotPresentExceptionUnmarshaller Instance { get; }
    private static CredentialReportNotPresentExceptionUnmarshaller();
    public sealed virtual CredentialReportNotPresentException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CredentialReportNotPresentException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CredentialReportNotPresentExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.CredentialReportNotReadyExceptionUnmarshaller : object {
    private static CredentialReportNotReadyExceptionUnmarshaller _instance;
    public static CredentialReportNotReadyExceptionUnmarshaller Instance { get; }
    private static CredentialReportNotReadyExceptionUnmarshaller();
    public sealed virtual CredentialReportNotReadyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CredentialReportNotReadyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CredentialReportNotReadyExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeactivateMFADeviceRequestMarshaller : object {
    private static DeactivateMFADeviceRequestMarshaller _instance;
    public static DeactivateMFADeviceRequestMarshaller Instance { get; }
    private static DeactivateMFADeviceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeactivateMFADeviceRequest publicRequest);
    internal static DeactivateMFADeviceRequestMarshaller GetInstance();
    public static DeactivateMFADeviceRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeactivateMFADeviceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeactivateMFADeviceResponseUnmarshaller _instance;
    public static DeactivateMFADeviceResponseUnmarshaller Instance { get; }
    private static DeactivateMFADeviceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeactivateMFADeviceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeactivateMFADeviceResponseUnmarshaller GetInstance();
    public static DeactivateMFADeviceResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteAccessKeyRequestMarshaller : object {
    private static DeleteAccessKeyRequestMarshaller _instance;
    public static DeleteAccessKeyRequestMarshaller Instance { get; }
    private static DeleteAccessKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAccessKeyRequest publicRequest);
    internal static DeleteAccessKeyRequestMarshaller GetInstance();
    public static DeleteAccessKeyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteAccessKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteAccessKeyResponseUnmarshaller _instance;
    public static DeleteAccessKeyResponseUnmarshaller Instance { get; }
    private static DeleteAccessKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteAccessKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAccessKeyResponseUnmarshaller GetInstance();
    public static DeleteAccessKeyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteAccountAliasRequestMarshaller : object {
    private static DeleteAccountAliasRequestMarshaller _instance;
    public static DeleteAccountAliasRequestMarshaller Instance { get; }
    private static DeleteAccountAliasRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAccountAliasRequest publicRequest);
    internal static DeleteAccountAliasRequestMarshaller GetInstance();
    public static DeleteAccountAliasRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteAccountAliasResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteAccountAliasResponseUnmarshaller _instance;
    public static DeleteAccountAliasResponseUnmarshaller Instance { get; }
    private static DeleteAccountAliasResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteAccountAliasResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAccountAliasResponseUnmarshaller GetInstance();
    public static DeleteAccountAliasResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteAccountPasswordPolicyRequestMarshaller : object {
    private static DeleteAccountPasswordPolicyRequestMarshaller _instance;
    public static DeleteAccountPasswordPolicyRequestMarshaller Instance { get; }
    private static DeleteAccountPasswordPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAccountPasswordPolicyRequest publicRequest);
    internal static DeleteAccountPasswordPolicyRequestMarshaller GetInstance();
    public static DeleteAccountPasswordPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteAccountPasswordPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteAccountPasswordPolicyResponseUnmarshaller _instance;
    public static DeleteAccountPasswordPolicyResponseUnmarshaller Instance { get; }
    private static DeleteAccountPasswordPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteAccountPasswordPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAccountPasswordPolicyResponseUnmarshaller GetInstance();
    public static DeleteAccountPasswordPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteConflictExceptionUnmarshaller : object {
    private static DeleteConflictExceptionUnmarshaller _instance;
    public static DeleteConflictExceptionUnmarshaller Instance { get; }
    private static DeleteConflictExceptionUnmarshaller();
    public sealed virtual DeleteConflictException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeleteConflictException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DeleteConflictExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteGroupPolicyRequestMarshaller : object {
    private static DeleteGroupPolicyRequestMarshaller _instance;
    public static DeleteGroupPolicyRequestMarshaller Instance { get; }
    private static DeleteGroupPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteGroupPolicyRequest publicRequest);
    internal static DeleteGroupPolicyRequestMarshaller GetInstance();
    public static DeleteGroupPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteGroupPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteGroupPolicyResponseUnmarshaller _instance;
    public static DeleteGroupPolicyResponseUnmarshaller Instance { get; }
    private static DeleteGroupPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteGroupPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteGroupPolicyResponseUnmarshaller GetInstance();
    public static DeleteGroupPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteGroupRequestMarshaller : object {
    private static DeleteGroupRequestMarshaller _instance;
    public static DeleteGroupRequestMarshaller Instance { get; }
    private static DeleteGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteGroupRequest publicRequest);
    internal static DeleteGroupRequestMarshaller GetInstance();
    public static DeleteGroupRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteGroupResponseUnmarshaller _instance;
    public static DeleteGroupResponseUnmarshaller Instance { get; }
    private static DeleteGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteGroupResponseUnmarshaller GetInstance();
    public static DeleteGroupResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteInstanceProfileRequestMarshaller : object {
    private static DeleteInstanceProfileRequestMarshaller _instance;
    public static DeleteInstanceProfileRequestMarshaller Instance { get; }
    private static DeleteInstanceProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteInstanceProfileRequest publicRequest);
    internal static DeleteInstanceProfileRequestMarshaller GetInstance();
    public static DeleteInstanceProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteInstanceProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteInstanceProfileResponseUnmarshaller _instance;
    public static DeleteInstanceProfileResponseUnmarshaller Instance { get; }
    private static DeleteInstanceProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteInstanceProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteInstanceProfileResponseUnmarshaller GetInstance();
    public static DeleteInstanceProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteLoginProfileRequestMarshaller : object {
    private static DeleteLoginProfileRequestMarshaller _instance;
    public static DeleteLoginProfileRequestMarshaller Instance { get; }
    private static DeleteLoginProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteLoginProfileRequest publicRequest);
    internal static DeleteLoginProfileRequestMarshaller GetInstance();
    public static DeleteLoginProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteLoginProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteLoginProfileResponseUnmarshaller _instance;
    public static DeleteLoginProfileResponseUnmarshaller Instance { get; }
    private static DeleteLoginProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteLoginProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteLoginProfileResponseUnmarshaller GetInstance();
    public static DeleteLoginProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteOpenIDConnectProviderRequestMarshaller : object {
    private static DeleteOpenIDConnectProviderRequestMarshaller _instance;
    public static DeleteOpenIDConnectProviderRequestMarshaller Instance { get; }
    private static DeleteOpenIDConnectProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteOpenIDConnectProviderRequest publicRequest);
    internal static DeleteOpenIDConnectProviderRequestMarshaller GetInstance();
    public static DeleteOpenIDConnectProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteOpenIDConnectProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteOpenIDConnectProviderResponseUnmarshaller _instance;
    public static DeleteOpenIDConnectProviderResponseUnmarshaller Instance { get; }
    private static DeleteOpenIDConnectProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteOpenIDConnectProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteOpenIDConnectProviderResponseUnmarshaller GetInstance();
    public static DeleteOpenIDConnectProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeletePolicyRequestMarshaller : object {
    private static DeletePolicyRequestMarshaller _instance;
    public static DeletePolicyRequestMarshaller Instance { get; }
    private static DeletePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeletePolicyRequest publicRequest);
    internal static DeletePolicyRequestMarshaller GetInstance();
    public static DeletePolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeletePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeletePolicyResponseUnmarshaller _instance;
    public static DeletePolicyResponseUnmarshaller Instance { get; }
    private static DeletePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeletePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeletePolicyResponseUnmarshaller GetInstance();
    public static DeletePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeletePolicyVersionRequestMarshaller : object {
    private static DeletePolicyVersionRequestMarshaller _instance;
    public static DeletePolicyVersionRequestMarshaller Instance { get; }
    private static DeletePolicyVersionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeletePolicyVersionRequest publicRequest);
    internal static DeletePolicyVersionRequestMarshaller GetInstance();
    public static DeletePolicyVersionRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeletePolicyVersionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeletePolicyVersionResponseUnmarshaller _instance;
    public static DeletePolicyVersionResponseUnmarshaller Instance { get; }
    private static DeletePolicyVersionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeletePolicyVersionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeletePolicyVersionResponseUnmarshaller GetInstance();
    public static DeletePolicyVersionResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteRolePermissionsBoundaryRequestMarshaller : object {
    private static DeleteRolePermissionsBoundaryRequestMarshaller _instance;
    public static DeleteRolePermissionsBoundaryRequestMarshaller Instance { get; }
    private static DeleteRolePermissionsBoundaryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteRolePermissionsBoundaryRequest publicRequest);
    internal static DeleteRolePermissionsBoundaryRequestMarshaller GetInstance();
    public static DeleteRolePermissionsBoundaryRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteRolePermissionsBoundaryResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteRolePermissionsBoundaryResponseUnmarshaller _instance;
    public static DeleteRolePermissionsBoundaryResponseUnmarshaller Instance { get; }
    private static DeleteRolePermissionsBoundaryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteRolePermissionsBoundaryResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteRolePermissionsBoundaryResponseUnmarshaller GetInstance();
    public static DeleteRolePermissionsBoundaryResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteRolePolicyRequestMarshaller : object {
    private static DeleteRolePolicyRequestMarshaller _instance;
    public static DeleteRolePolicyRequestMarshaller Instance { get; }
    private static DeleteRolePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteRolePolicyRequest publicRequest);
    internal static DeleteRolePolicyRequestMarshaller GetInstance();
    public static DeleteRolePolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteRolePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteRolePolicyResponseUnmarshaller _instance;
    public static DeleteRolePolicyResponseUnmarshaller Instance { get; }
    private static DeleteRolePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteRolePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteRolePolicyResponseUnmarshaller GetInstance();
    public static DeleteRolePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteRoleRequestMarshaller : object {
    private static DeleteRoleRequestMarshaller _instance;
    public static DeleteRoleRequestMarshaller Instance { get; }
    private static DeleteRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteRoleRequest publicRequest);
    internal static DeleteRoleRequestMarshaller GetInstance();
    public static DeleteRoleRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteRoleResponseUnmarshaller _instance;
    public static DeleteRoleResponseUnmarshaller Instance { get; }
    private static DeleteRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteRoleResponseUnmarshaller GetInstance();
    public static DeleteRoleResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteSAMLProviderRequestMarshaller : object {
    private static DeleteSAMLProviderRequestMarshaller _instance;
    public static DeleteSAMLProviderRequestMarshaller Instance { get; }
    private static DeleteSAMLProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteSAMLProviderRequest publicRequest);
    internal static DeleteSAMLProviderRequestMarshaller GetInstance();
    public static DeleteSAMLProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteSAMLProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteSAMLProviderResponseUnmarshaller _instance;
    public static DeleteSAMLProviderResponseUnmarshaller Instance { get; }
    private static DeleteSAMLProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteSAMLProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteSAMLProviderResponseUnmarshaller GetInstance();
    public static DeleteSAMLProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteServerCertificateRequestMarshaller : object {
    private static DeleteServerCertificateRequestMarshaller _instance;
    public static DeleteServerCertificateRequestMarshaller Instance { get; }
    private static DeleteServerCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteServerCertificateRequest publicRequest);
    internal static DeleteServerCertificateRequestMarshaller GetInstance();
    public static DeleteServerCertificateRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteServerCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteServerCertificateResponseUnmarshaller _instance;
    public static DeleteServerCertificateResponseUnmarshaller Instance { get; }
    private static DeleteServerCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteServerCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteServerCertificateResponseUnmarshaller GetInstance();
    public static DeleteServerCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteServiceLinkedRoleRequestMarshaller : object {
    private static DeleteServiceLinkedRoleRequestMarshaller _instance;
    public static DeleteServiceLinkedRoleRequestMarshaller Instance { get; }
    private static DeleteServiceLinkedRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteServiceLinkedRoleRequest publicRequest);
    internal static DeleteServiceLinkedRoleRequestMarshaller GetInstance();
    public static DeleteServiceLinkedRoleRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteServiceLinkedRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteServiceLinkedRoleResponseUnmarshaller _instance;
    public static DeleteServiceLinkedRoleResponseUnmarshaller Instance { get; }
    private static DeleteServiceLinkedRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteServiceLinkedRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteServiceLinkedRoleResponseUnmarshaller GetInstance();
    public static DeleteServiceLinkedRoleResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteServiceSpecificCredentialRequestMarshaller : object {
    private static DeleteServiceSpecificCredentialRequestMarshaller _instance;
    public static DeleteServiceSpecificCredentialRequestMarshaller Instance { get; }
    private static DeleteServiceSpecificCredentialRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteServiceSpecificCredentialRequest publicRequest);
    internal static DeleteServiceSpecificCredentialRequestMarshaller GetInstance();
    public static DeleteServiceSpecificCredentialRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteServiceSpecificCredentialResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteServiceSpecificCredentialResponseUnmarshaller _instance;
    public static DeleteServiceSpecificCredentialResponseUnmarshaller Instance { get; }
    private static DeleteServiceSpecificCredentialResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteServiceSpecificCredentialResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteServiceSpecificCredentialResponseUnmarshaller GetInstance();
    public static DeleteServiceSpecificCredentialResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteSigningCertificateRequestMarshaller : object {
    private static DeleteSigningCertificateRequestMarshaller _instance;
    public static DeleteSigningCertificateRequestMarshaller Instance { get; }
    private static DeleteSigningCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteSigningCertificateRequest publicRequest);
    internal static DeleteSigningCertificateRequestMarshaller GetInstance();
    public static DeleteSigningCertificateRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteSigningCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteSigningCertificateResponseUnmarshaller _instance;
    public static DeleteSigningCertificateResponseUnmarshaller Instance { get; }
    private static DeleteSigningCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteSigningCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteSigningCertificateResponseUnmarshaller GetInstance();
    public static DeleteSigningCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteSSHPublicKeyRequestMarshaller : object {
    private static DeleteSSHPublicKeyRequestMarshaller _instance;
    public static DeleteSSHPublicKeyRequestMarshaller Instance { get; }
    private static DeleteSSHPublicKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteSSHPublicKeyRequest publicRequest);
    internal static DeleteSSHPublicKeyRequestMarshaller GetInstance();
    public static DeleteSSHPublicKeyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteSSHPublicKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteSSHPublicKeyResponseUnmarshaller _instance;
    public static DeleteSSHPublicKeyResponseUnmarshaller Instance { get; }
    private static DeleteSSHPublicKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteSSHPublicKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteSSHPublicKeyResponseUnmarshaller GetInstance();
    public static DeleteSSHPublicKeyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteUserPermissionsBoundaryRequestMarshaller : object {
    private static DeleteUserPermissionsBoundaryRequestMarshaller _instance;
    public static DeleteUserPermissionsBoundaryRequestMarshaller Instance { get; }
    private static DeleteUserPermissionsBoundaryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteUserPermissionsBoundaryRequest publicRequest);
    internal static DeleteUserPermissionsBoundaryRequestMarshaller GetInstance();
    public static DeleteUserPermissionsBoundaryRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteUserPermissionsBoundaryResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteUserPermissionsBoundaryResponseUnmarshaller _instance;
    public static DeleteUserPermissionsBoundaryResponseUnmarshaller Instance { get; }
    private static DeleteUserPermissionsBoundaryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteUserPermissionsBoundaryResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteUserPermissionsBoundaryResponseUnmarshaller GetInstance();
    public static DeleteUserPermissionsBoundaryResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteUserPolicyRequestMarshaller : object {
    private static DeleteUserPolicyRequestMarshaller _instance;
    public static DeleteUserPolicyRequestMarshaller Instance { get; }
    private static DeleteUserPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteUserPolicyRequest publicRequest);
    internal static DeleteUserPolicyRequestMarshaller GetInstance();
    public static DeleteUserPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteUserPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteUserPolicyResponseUnmarshaller _instance;
    public static DeleteUserPolicyResponseUnmarshaller Instance { get; }
    private static DeleteUserPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteUserPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteUserPolicyResponseUnmarshaller GetInstance();
    public static DeleteUserPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteUserRequestMarshaller : object {
    private static DeleteUserRequestMarshaller _instance;
    public static DeleteUserRequestMarshaller Instance { get; }
    private static DeleteUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteUserRequest publicRequest);
    internal static DeleteUserRequestMarshaller GetInstance();
    public static DeleteUserRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteUserResponseUnmarshaller _instance;
    public static DeleteUserResponseUnmarshaller Instance { get; }
    private static DeleteUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteUserResponseUnmarshaller GetInstance();
    public static DeleteUserResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteVirtualMFADeviceRequestMarshaller : object {
    private static DeleteVirtualMFADeviceRequestMarshaller _instance;
    public static DeleteVirtualMFADeviceRequestMarshaller Instance { get; }
    private static DeleteVirtualMFADeviceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteVirtualMFADeviceRequest publicRequest);
    internal static DeleteVirtualMFADeviceRequestMarshaller GetInstance();
    public static DeleteVirtualMFADeviceRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeleteVirtualMFADeviceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteVirtualMFADeviceResponseUnmarshaller _instance;
    public static DeleteVirtualMFADeviceResponseUnmarshaller Instance { get; }
    private static DeleteVirtualMFADeviceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteVirtualMFADeviceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteVirtualMFADeviceResponseUnmarshaller GetInstance();
    public static DeleteVirtualMFADeviceResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DeletionTaskFailureReasonTypeUnmarshaller : object {
    private static DeletionTaskFailureReasonTypeUnmarshaller _instance;
    public static DeletionTaskFailureReasonTypeUnmarshaller Instance { get; }
    private static DeletionTaskFailureReasonTypeUnmarshaller();
    public sealed virtual DeletionTaskFailureReasonType Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeletionTaskFailureReasonType Unmarshall(JsonUnmarshallerContext context);
    public static DeletionTaskFailureReasonTypeUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DetachGroupPolicyRequestMarshaller : object {
    private static DetachGroupPolicyRequestMarshaller _instance;
    public static DetachGroupPolicyRequestMarshaller Instance { get; }
    private static DetachGroupPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DetachGroupPolicyRequest publicRequest);
    internal static DetachGroupPolicyRequestMarshaller GetInstance();
    public static DetachGroupPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DetachGroupPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DetachGroupPolicyResponseUnmarshaller _instance;
    public static DetachGroupPolicyResponseUnmarshaller Instance { get; }
    private static DetachGroupPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DetachGroupPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DetachGroupPolicyResponseUnmarshaller GetInstance();
    public static DetachGroupPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DetachRolePolicyRequestMarshaller : object {
    private static DetachRolePolicyRequestMarshaller _instance;
    public static DetachRolePolicyRequestMarshaller Instance { get; }
    private static DetachRolePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DetachRolePolicyRequest publicRequest);
    internal static DetachRolePolicyRequestMarshaller GetInstance();
    public static DetachRolePolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DetachRolePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DetachRolePolicyResponseUnmarshaller _instance;
    public static DetachRolePolicyResponseUnmarshaller Instance { get; }
    private static DetachRolePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DetachRolePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DetachRolePolicyResponseUnmarshaller GetInstance();
    public static DetachRolePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DetachUserPolicyRequestMarshaller : object {
    private static DetachUserPolicyRequestMarshaller _instance;
    public static DetachUserPolicyRequestMarshaller Instance { get; }
    private static DetachUserPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DetachUserPolicyRequest publicRequest);
    internal static DetachUserPolicyRequestMarshaller GetInstance();
    public static DetachUserPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DetachUserPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DetachUserPolicyResponseUnmarshaller _instance;
    public static DetachUserPolicyResponseUnmarshaller Instance { get; }
    private static DetachUserPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DetachUserPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DetachUserPolicyResponseUnmarshaller GetInstance();
    public static DetachUserPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DuplicateCertificateExceptionUnmarshaller : object {
    private static DuplicateCertificateExceptionUnmarshaller _instance;
    public static DuplicateCertificateExceptionUnmarshaller Instance { get; }
    private static DuplicateCertificateExceptionUnmarshaller();
    public sealed virtual DuplicateCertificateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DuplicateCertificateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DuplicateCertificateExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.DuplicateSSHPublicKeyExceptionUnmarshaller : object {
    private static DuplicateSSHPublicKeyExceptionUnmarshaller _instance;
    public static DuplicateSSHPublicKeyExceptionUnmarshaller Instance { get; }
    private static DuplicateSSHPublicKeyExceptionUnmarshaller();
    public sealed virtual DuplicateSSHPublicKeyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DuplicateSSHPublicKeyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DuplicateSSHPublicKeyExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.EnableMFADeviceRequestMarshaller : object {
    private static EnableMFADeviceRequestMarshaller _instance;
    public static EnableMFADeviceRequestMarshaller Instance { get; }
    private static EnableMFADeviceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableMFADeviceRequest publicRequest);
    internal static EnableMFADeviceRequestMarshaller GetInstance();
    public static EnableMFADeviceRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.EnableMFADeviceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static EnableMFADeviceResponseUnmarshaller _instance;
    public static EnableMFADeviceResponseUnmarshaller Instance { get; }
    private static EnableMFADeviceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, EnableMFADeviceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableMFADeviceResponseUnmarshaller GetInstance();
    public static EnableMFADeviceResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.EntityAlreadyExistsExceptionUnmarshaller : object {
    private static EntityAlreadyExistsExceptionUnmarshaller _instance;
    public static EntityAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static EntityAlreadyExistsExceptionUnmarshaller();
    public sealed virtual EntityAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EntityAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EntityAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.EntityDetailsUnmarshaller : object {
    private static EntityDetailsUnmarshaller _instance;
    public static EntityDetailsUnmarshaller Instance { get; }
    private static EntityDetailsUnmarshaller();
    public sealed virtual EntityDetails Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EntityDetails Unmarshall(JsonUnmarshallerContext context);
    public static EntityDetailsUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.EntityInfoUnmarshaller : object {
    private static EntityInfoUnmarshaller _instance;
    public static EntityInfoUnmarshaller Instance { get; }
    private static EntityInfoUnmarshaller();
    public sealed virtual EntityInfo Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EntityInfo Unmarshall(JsonUnmarshallerContext context);
    public static EntityInfoUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.EntityTemporarilyUnmodifiableExceptionUnmarshaller : object {
    private static EntityTemporarilyUnmodifiableExceptionUnmarshaller _instance;
    public static EntityTemporarilyUnmodifiableExceptionUnmarshaller Instance { get; }
    private static EntityTemporarilyUnmodifiableExceptionUnmarshaller();
    public sealed virtual EntityTemporarilyUnmodifiableException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EntityTemporarilyUnmodifiableException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EntityTemporarilyUnmodifiableExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ErrorDetailsUnmarshaller : object {
    private static ErrorDetailsUnmarshaller _instance;
    public static ErrorDetailsUnmarshaller Instance { get; }
    private static ErrorDetailsUnmarshaller();
    public sealed virtual ErrorDetails Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ErrorDetails Unmarshall(JsonUnmarshallerContext context);
    public static ErrorDetailsUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.EvaluationResultUnmarshaller : object {
    private static EvaluationResultUnmarshaller _instance;
    public static EvaluationResultUnmarshaller Instance { get; }
    private static EvaluationResultUnmarshaller();
    public sealed virtual EvaluationResult Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EvaluationResult Unmarshall(JsonUnmarshallerContext context);
    public static EvaluationResultUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GenerateCredentialReportRequestMarshaller : object {
    private static GenerateCredentialReportRequestMarshaller _instance;
    public static GenerateCredentialReportRequestMarshaller Instance { get; }
    private static GenerateCredentialReportRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GenerateCredentialReportRequest publicRequest);
    internal static GenerateCredentialReportRequestMarshaller GetInstance();
    public static GenerateCredentialReportRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GenerateCredentialReportResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GenerateCredentialReportResponseUnmarshaller _instance;
    public static GenerateCredentialReportResponseUnmarshaller Instance { get; }
    private static GenerateCredentialReportResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GenerateCredentialReportResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GenerateCredentialReportResponseUnmarshaller GetInstance();
    public static GenerateCredentialReportResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GenerateOrganizationsAccessReportRequestMarshaller : object {
    private static GenerateOrganizationsAccessReportRequestMarshaller _instance;
    public static GenerateOrganizationsAccessReportRequestMarshaller Instance { get; }
    private static GenerateOrganizationsAccessReportRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GenerateOrganizationsAccessReportRequest publicRequest);
    internal static GenerateOrganizationsAccessReportRequestMarshaller GetInstance();
    public static GenerateOrganizationsAccessReportRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GenerateOrganizationsAccessReportResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GenerateOrganizationsAccessReportResponseUnmarshaller _instance;
    public static GenerateOrganizationsAccessReportResponseUnmarshaller Instance { get; }
    private static GenerateOrganizationsAccessReportResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GenerateOrganizationsAccessReportResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GenerateOrganizationsAccessReportResponseUnmarshaller GetInstance();
    public static GenerateOrganizationsAccessReportResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GenerateServiceLastAccessedDetailsRequestMarshaller : object {
    private static GenerateServiceLastAccessedDetailsRequestMarshaller _instance;
    public static GenerateServiceLastAccessedDetailsRequestMarshaller Instance { get; }
    private static GenerateServiceLastAccessedDetailsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GenerateServiceLastAccessedDetailsRequest publicRequest);
    internal static GenerateServiceLastAccessedDetailsRequestMarshaller GetInstance();
    public static GenerateServiceLastAccessedDetailsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GenerateServiceLastAccessedDetailsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GenerateServiceLastAccessedDetailsResponseUnmarshaller _instance;
    public static GenerateServiceLastAccessedDetailsResponseUnmarshaller Instance { get; }
    private static GenerateServiceLastAccessedDetailsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GenerateServiceLastAccessedDetailsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GenerateServiceLastAccessedDetailsResponseUnmarshaller GetInstance();
    public static GenerateServiceLastAccessedDetailsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetAccessKeyLastUsedRequestMarshaller : object {
    private static GetAccessKeyLastUsedRequestMarshaller _instance;
    public static GetAccessKeyLastUsedRequestMarshaller Instance { get; }
    private static GetAccessKeyLastUsedRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetAccessKeyLastUsedRequest publicRequest);
    internal static GetAccessKeyLastUsedRequestMarshaller GetInstance();
    public static GetAccessKeyLastUsedRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetAccessKeyLastUsedResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetAccessKeyLastUsedResponseUnmarshaller _instance;
    public static GetAccessKeyLastUsedResponseUnmarshaller Instance { get; }
    private static GetAccessKeyLastUsedResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetAccessKeyLastUsedResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetAccessKeyLastUsedResponseUnmarshaller GetInstance();
    public static GetAccessKeyLastUsedResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetAccountAuthorizationDetailsRequestMarshaller : object {
    private static GetAccountAuthorizationDetailsRequestMarshaller _instance;
    public static GetAccountAuthorizationDetailsRequestMarshaller Instance { get; }
    private static GetAccountAuthorizationDetailsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetAccountAuthorizationDetailsRequest publicRequest);
    internal static GetAccountAuthorizationDetailsRequestMarshaller GetInstance();
    public static GetAccountAuthorizationDetailsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetAccountAuthorizationDetailsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetAccountAuthorizationDetailsResponseUnmarshaller _instance;
    public static GetAccountAuthorizationDetailsResponseUnmarshaller Instance { get; }
    private static GetAccountAuthorizationDetailsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetAccountAuthorizationDetailsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetAccountAuthorizationDetailsResponseUnmarshaller GetInstance();
    public static GetAccountAuthorizationDetailsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetAccountPasswordPolicyRequestMarshaller : object {
    private static GetAccountPasswordPolicyRequestMarshaller _instance;
    public static GetAccountPasswordPolicyRequestMarshaller Instance { get; }
    private static GetAccountPasswordPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetAccountPasswordPolicyRequest publicRequest);
    internal static GetAccountPasswordPolicyRequestMarshaller GetInstance();
    public static GetAccountPasswordPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetAccountPasswordPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetAccountPasswordPolicyResponseUnmarshaller _instance;
    public static GetAccountPasswordPolicyResponseUnmarshaller Instance { get; }
    private static GetAccountPasswordPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetAccountPasswordPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetAccountPasswordPolicyResponseUnmarshaller GetInstance();
    public static GetAccountPasswordPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetAccountSummaryRequestMarshaller : object {
    private static GetAccountSummaryRequestMarshaller _instance;
    public static GetAccountSummaryRequestMarshaller Instance { get; }
    private static GetAccountSummaryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetAccountSummaryRequest publicRequest);
    internal static GetAccountSummaryRequestMarshaller GetInstance();
    public static GetAccountSummaryRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetAccountSummaryResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetAccountSummaryResponseUnmarshaller _instance;
    public static GetAccountSummaryResponseUnmarshaller Instance { get; }
    private static GetAccountSummaryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetAccountSummaryResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetAccountSummaryResponseUnmarshaller GetInstance();
    public static GetAccountSummaryResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetContextKeysForCustomPolicyRequestMarshaller : object {
    private static GetContextKeysForCustomPolicyRequestMarshaller _instance;
    public static GetContextKeysForCustomPolicyRequestMarshaller Instance { get; }
    private static GetContextKeysForCustomPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetContextKeysForCustomPolicyRequest publicRequest);
    internal static GetContextKeysForCustomPolicyRequestMarshaller GetInstance();
    public static GetContextKeysForCustomPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetContextKeysForCustomPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetContextKeysForCustomPolicyResponseUnmarshaller _instance;
    public static GetContextKeysForCustomPolicyResponseUnmarshaller Instance { get; }
    private static GetContextKeysForCustomPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetContextKeysForCustomPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetContextKeysForCustomPolicyResponseUnmarshaller GetInstance();
    public static GetContextKeysForCustomPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetContextKeysForPrincipalPolicyRequestMarshaller : object {
    private static GetContextKeysForPrincipalPolicyRequestMarshaller _instance;
    public static GetContextKeysForPrincipalPolicyRequestMarshaller Instance { get; }
    private static GetContextKeysForPrincipalPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetContextKeysForPrincipalPolicyRequest publicRequest);
    internal static GetContextKeysForPrincipalPolicyRequestMarshaller GetInstance();
    public static GetContextKeysForPrincipalPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetContextKeysForPrincipalPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetContextKeysForPrincipalPolicyResponseUnmarshaller _instance;
    public static GetContextKeysForPrincipalPolicyResponseUnmarshaller Instance { get; }
    private static GetContextKeysForPrincipalPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetContextKeysForPrincipalPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetContextKeysForPrincipalPolicyResponseUnmarshaller GetInstance();
    public static GetContextKeysForPrincipalPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetCredentialReportRequestMarshaller : object {
    private static GetCredentialReportRequestMarshaller _instance;
    public static GetCredentialReportRequestMarshaller Instance { get; }
    private static GetCredentialReportRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetCredentialReportRequest publicRequest);
    internal static GetCredentialReportRequestMarshaller GetInstance();
    public static GetCredentialReportRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetCredentialReportResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetCredentialReportResponseUnmarshaller _instance;
    public static GetCredentialReportResponseUnmarshaller Instance { get; }
    private static GetCredentialReportResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetCredentialReportResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetCredentialReportResponseUnmarshaller GetInstance();
    public static GetCredentialReportResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetGroupPolicyRequestMarshaller : object {
    private static GetGroupPolicyRequestMarshaller _instance;
    public static GetGroupPolicyRequestMarshaller Instance { get; }
    private static GetGroupPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetGroupPolicyRequest publicRequest);
    internal static GetGroupPolicyRequestMarshaller GetInstance();
    public static GetGroupPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetGroupPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetGroupPolicyResponseUnmarshaller _instance;
    public static GetGroupPolicyResponseUnmarshaller Instance { get; }
    private static GetGroupPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetGroupPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetGroupPolicyResponseUnmarshaller GetInstance();
    public static GetGroupPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetGroupRequestMarshaller : object {
    private static GetGroupRequestMarshaller _instance;
    public static GetGroupRequestMarshaller Instance { get; }
    private static GetGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetGroupRequest publicRequest);
    internal static GetGroupRequestMarshaller GetInstance();
    public static GetGroupRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetGroupResponseUnmarshaller _instance;
    public static GetGroupResponseUnmarshaller Instance { get; }
    private static GetGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetGroupResponseUnmarshaller GetInstance();
    public static GetGroupResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetInstanceProfileRequestMarshaller : object {
    private static GetInstanceProfileRequestMarshaller _instance;
    public static GetInstanceProfileRequestMarshaller Instance { get; }
    private static GetInstanceProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetInstanceProfileRequest publicRequest);
    internal static GetInstanceProfileRequestMarshaller GetInstance();
    public static GetInstanceProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetInstanceProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetInstanceProfileResponseUnmarshaller _instance;
    public static GetInstanceProfileResponseUnmarshaller Instance { get; }
    private static GetInstanceProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetInstanceProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetInstanceProfileResponseUnmarshaller GetInstance();
    public static GetInstanceProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetLoginProfileRequestMarshaller : object {
    private static GetLoginProfileRequestMarshaller _instance;
    public static GetLoginProfileRequestMarshaller Instance { get; }
    private static GetLoginProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetLoginProfileRequest publicRequest);
    internal static GetLoginProfileRequestMarshaller GetInstance();
    public static GetLoginProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetLoginProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetLoginProfileResponseUnmarshaller _instance;
    public static GetLoginProfileResponseUnmarshaller Instance { get; }
    private static GetLoginProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetLoginProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetLoginProfileResponseUnmarshaller GetInstance();
    public static GetLoginProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetMFADeviceRequestMarshaller : object {
    private static GetMFADeviceRequestMarshaller _instance;
    public static GetMFADeviceRequestMarshaller Instance { get; }
    private static GetMFADeviceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetMFADeviceRequest publicRequest);
    internal static GetMFADeviceRequestMarshaller GetInstance();
    public static GetMFADeviceRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetMFADeviceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetMFADeviceResponseUnmarshaller _instance;
    public static GetMFADeviceResponseUnmarshaller Instance { get; }
    private static GetMFADeviceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetMFADeviceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetMFADeviceResponseUnmarshaller GetInstance();
    public static GetMFADeviceResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetOpenIDConnectProviderRequestMarshaller : object {
    private static GetOpenIDConnectProviderRequestMarshaller _instance;
    public static GetOpenIDConnectProviderRequestMarshaller Instance { get; }
    private static GetOpenIDConnectProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetOpenIDConnectProviderRequest publicRequest);
    internal static GetOpenIDConnectProviderRequestMarshaller GetInstance();
    public static GetOpenIDConnectProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetOpenIDConnectProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetOpenIDConnectProviderResponseUnmarshaller _instance;
    public static GetOpenIDConnectProviderResponseUnmarshaller Instance { get; }
    private static GetOpenIDConnectProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetOpenIDConnectProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetOpenIDConnectProviderResponseUnmarshaller GetInstance();
    public static GetOpenIDConnectProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetOrganizationsAccessReportRequestMarshaller : object {
    private static GetOrganizationsAccessReportRequestMarshaller _instance;
    public static GetOrganizationsAccessReportRequestMarshaller Instance { get; }
    private static GetOrganizationsAccessReportRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetOrganizationsAccessReportRequest publicRequest);
    internal static GetOrganizationsAccessReportRequestMarshaller GetInstance();
    public static GetOrganizationsAccessReportRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetOrganizationsAccessReportResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetOrganizationsAccessReportResponseUnmarshaller _instance;
    public static GetOrganizationsAccessReportResponseUnmarshaller Instance { get; }
    private static GetOrganizationsAccessReportResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetOrganizationsAccessReportResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetOrganizationsAccessReportResponseUnmarshaller GetInstance();
    public static GetOrganizationsAccessReportResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetPolicyRequestMarshaller : object {
    private static GetPolicyRequestMarshaller _instance;
    public static GetPolicyRequestMarshaller Instance { get; }
    private static GetPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetPolicyRequest publicRequest);
    internal static GetPolicyRequestMarshaller GetInstance();
    public static GetPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetPolicyResponseUnmarshaller _instance;
    public static GetPolicyResponseUnmarshaller Instance { get; }
    private static GetPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetPolicyResponseUnmarshaller GetInstance();
    public static GetPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetPolicyVersionRequestMarshaller : object {
    private static GetPolicyVersionRequestMarshaller _instance;
    public static GetPolicyVersionRequestMarshaller Instance { get; }
    private static GetPolicyVersionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetPolicyVersionRequest publicRequest);
    internal static GetPolicyVersionRequestMarshaller GetInstance();
    public static GetPolicyVersionRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetPolicyVersionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetPolicyVersionResponseUnmarshaller _instance;
    public static GetPolicyVersionResponseUnmarshaller Instance { get; }
    private static GetPolicyVersionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetPolicyVersionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetPolicyVersionResponseUnmarshaller GetInstance();
    public static GetPolicyVersionResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetRolePolicyRequestMarshaller : object {
    private static GetRolePolicyRequestMarshaller _instance;
    public static GetRolePolicyRequestMarshaller Instance { get; }
    private static GetRolePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetRolePolicyRequest publicRequest);
    internal static GetRolePolicyRequestMarshaller GetInstance();
    public static GetRolePolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetRolePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetRolePolicyResponseUnmarshaller _instance;
    public static GetRolePolicyResponseUnmarshaller Instance { get; }
    private static GetRolePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetRolePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetRolePolicyResponseUnmarshaller GetInstance();
    public static GetRolePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetRoleRequestMarshaller : object {
    private static GetRoleRequestMarshaller _instance;
    public static GetRoleRequestMarshaller Instance { get; }
    private static GetRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetRoleRequest publicRequest);
    internal static GetRoleRequestMarshaller GetInstance();
    public static GetRoleRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetRoleResponseUnmarshaller _instance;
    public static GetRoleResponseUnmarshaller Instance { get; }
    private static GetRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetRoleResponseUnmarshaller GetInstance();
    public static GetRoleResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetSAMLProviderRequestMarshaller : object {
    private static GetSAMLProviderRequestMarshaller _instance;
    public static GetSAMLProviderRequestMarshaller Instance { get; }
    private static GetSAMLProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetSAMLProviderRequest publicRequest);
    internal static GetSAMLProviderRequestMarshaller GetInstance();
    public static GetSAMLProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetSAMLProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetSAMLProviderResponseUnmarshaller _instance;
    public static GetSAMLProviderResponseUnmarshaller Instance { get; }
    private static GetSAMLProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetSAMLProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetSAMLProviderResponseUnmarshaller GetInstance();
    public static GetSAMLProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetServerCertificateRequestMarshaller : object {
    private static GetServerCertificateRequestMarshaller _instance;
    public static GetServerCertificateRequestMarshaller Instance { get; }
    private static GetServerCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetServerCertificateRequest publicRequest);
    internal static GetServerCertificateRequestMarshaller GetInstance();
    public static GetServerCertificateRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetServerCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetServerCertificateResponseUnmarshaller _instance;
    public static GetServerCertificateResponseUnmarshaller Instance { get; }
    private static GetServerCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetServerCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetServerCertificateResponseUnmarshaller GetInstance();
    public static GetServerCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetServiceLastAccessedDetailsRequestMarshaller : object {
    private static GetServiceLastAccessedDetailsRequestMarshaller _instance;
    public static GetServiceLastAccessedDetailsRequestMarshaller Instance { get; }
    private static GetServiceLastAccessedDetailsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetServiceLastAccessedDetailsRequest publicRequest);
    internal static GetServiceLastAccessedDetailsRequestMarshaller GetInstance();
    public static GetServiceLastAccessedDetailsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetServiceLastAccessedDetailsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetServiceLastAccessedDetailsResponseUnmarshaller _instance;
    public static GetServiceLastAccessedDetailsResponseUnmarshaller Instance { get; }
    private static GetServiceLastAccessedDetailsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetServiceLastAccessedDetailsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetServiceLastAccessedDetailsResponseUnmarshaller GetInstance();
    public static GetServiceLastAccessedDetailsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetServiceLastAccessedDetailsWithEntitiesRequestMarshaller : object {
    private static GetServiceLastAccessedDetailsWithEntitiesRequestMarshaller _instance;
    public static GetServiceLastAccessedDetailsWithEntitiesRequestMarshaller Instance { get; }
    private static GetServiceLastAccessedDetailsWithEntitiesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetServiceLastAccessedDetailsWithEntitiesRequest publicRequest);
    internal static GetServiceLastAccessedDetailsWithEntitiesRequestMarshaller GetInstance();
    public static GetServiceLastAccessedDetailsWithEntitiesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetServiceLastAccessedDetailsWithEntitiesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetServiceLastAccessedDetailsWithEntitiesResponseUnmarshaller _instance;
    public static GetServiceLastAccessedDetailsWithEntitiesResponseUnmarshaller Instance { get; }
    private static GetServiceLastAccessedDetailsWithEntitiesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetServiceLastAccessedDetailsWithEntitiesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetServiceLastAccessedDetailsWithEntitiesResponseUnmarshaller GetInstance();
    public static GetServiceLastAccessedDetailsWithEntitiesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetServiceLinkedRoleDeletionStatusRequestMarshaller : object {
    private static GetServiceLinkedRoleDeletionStatusRequestMarshaller _instance;
    public static GetServiceLinkedRoleDeletionStatusRequestMarshaller Instance { get; }
    private static GetServiceLinkedRoleDeletionStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetServiceLinkedRoleDeletionStatusRequest publicRequest);
    internal static GetServiceLinkedRoleDeletionStatusRequestMarshaller GetInstance();
    public static GetServiceLinkedRoleDeletionStatusRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetServiceLinkedRoleDeletionStatusResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetServiceLinkedRoleDeletionStatusResponseUnmarshaller _instance;
    public static GetServiceLinkedRoleDeletionStatusResponseUnmarshaller Instance { get; }
    private static GetServiceLinkedRoleDeletionStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetServiceLinkedRoleDeletionStatusResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetServiceLinkedRoleDeletionStatusResponseUnmarshaller GetInstance();
    public static GetServiceLinkedRoleDeletionStatusResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetSSHPublicKeyRequestMarshaller : object {
    private static GetSSHPublicKeyRequestMarshaller _instance;
    public static GetSSHPublicKeyRequestMarshaller Instance { get; }
    private static GetSSHPublicKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetSSHPublicKeyRequest publicRequest);
    internal static GetSSHPublicKeyRequestMarshaller GetInstance();
    public static GetSSHPublicKeyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetSSHPublicKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetSSHPublicKeyResponseUnmarshaller _instance;
    public static GetSSHPublicKeyResponseUnmarshaller Instance { get; }
    private static GetSSHPublicKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetSSHPublicKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetSSHPublicKeyResponseUnmarshaller GetInstance();
    public static GetSSHPublicKeyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetUserPolicyRequestMarshaller : object {
    private static GetUserPolicyRequestMarshaller _instance;
    public static GetUserPolicyRequestMarshaller Instance { get; }
    private static GetUserPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetUserPolicyRequest publicRequest);
    internal static GetUserPolicyRequestMarshaller GetInstance();
    public static GetUserPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetUserPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetUserPolicyResponseUnmarshaller _instance;
    public static GetUserPolicyResponseUnmarshaller Instance { get; }
    private static GetUserPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetUserPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetUserPolicyResponseUnmarshaller GetInstance();
    public static GetUserPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetUserRequestMarshaller : object {
    private static GetUserRequestMarshaller _instance;
    public static GetUserRequestMarshaller Instance { get; }
    private static GetUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetUserRequest publicRequest);
    internal static GetUserRequestMarshaller GetInstance();
    public static GetUserRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GetUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetUserResponseUnmarshaller _instance;
    public static GetUserResponseUnmarshaller Instance { get; }
    private static GetUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetUserResponseUnmarshaller GetInstance();
    public static GetUserResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GroupDetailUnmarshaller : object {
    private static GroupDetailUnmarshaller _instance;
    public static GroupDetailUnmarshaller Instance { get; }
    private static GroupDetailUnmarshaller();
    public sealed virtual GroupDetail Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GroupDetail Unmarshall(JsonUnmarshallerContext context);
    public static GroupDetailUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.GroupUnmarshaller : object {
    private static GroupUnmarshaller _instance;
    public static GroupUnmarshaller Instance { get; }
    private static GroupUnmarshaller();
    public sealed virtual Group Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Group Unmarshall(JsonUnmarshallerContext context);
    public static GroupUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.InstanceProfileUnmarshaller : object {
    private static InstanceProfileUnmarshaller _instance;
    public static InstanceProfileUnmarshaller Instance { get; }
    private static InstanceProfileUnmarshaller();
    public sealed virtual InstanceProfile Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InstanceProfile Unmarshall(JsonUnmarshallerContext context);
    public static InstanceProfileUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.InvalidAuthenticationCodeExceptionUnmarshaller : object {
    private static InvalidAuthenticationCodeExceptionUnmarshaller _instance;
    public static InvalidAuthenticationCodeExceptionUnmarshaller Instance { get; }
    private static InvalidAuthenticationCodeExceptionUnmarshaller();
    public sealed virtual InvalidAuthenticationCodeException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidAuthenticationCodeException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidAuthenticationCodeExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.InvalidCertificateExceptionUnmarshaller : object {
    private static InvalidCertificateExceptionUnmarshaller _instance;
    public static InvalidCertificateExceptionUnmarshaller Instance { get; }
    private static InvalidCertificateExceptionUnmarshaller();
    public sealed virtual InvalidCertificateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidCertificateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidCertificateExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.InvalidInputExceptionUnmarshaller : object {
    private static InvalidInputExceptionUnmarshaller _instance;
    public static InvalidInputExceptionUnmarshaller Instance { get; }
    private static InvalidInputExceptionUnmarshaller();
    public sealed virtual InvalidInputException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidInputException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidInputExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.InvalidPublicKeyExceptionUnmarshaller : object {
    private static InvalidPublicKeyExceptionUnmarshaller _instance;
    public static InvalidPublicKeyExceptionUnmarshaller Instance { get; }
    private static InvalidPublicKeyExceptionUnmarshaller();
    public sealed virtual InvalidPublicKeyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidPublicKeyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidPublicKeyExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.InvalidUserTypeExceptionUnmarshaller : object {
    private static InvalidUserTypeExceptionUnmarshaller _instance;
    public static InvalidUserTypeExceptionUnmarshaller Instance { get; }
    private static InvalidUserTypeExceptionUnmarshaller();
    public sealed virtual InvalidUserTypeException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidUserTypeException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidUserTypeExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.KeyPairMismatchExceptionUnmarshaller : object {
    private static KeyPairMismatchExceptionUnmarshaller _instance;
    public static KeyPairMismatchExceptionUnmarshaller Instance { get; }
    private static KeyPairMismatchExceptionUnmarshaller();
    public sealed virtual KeyPairMismatchException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeyPairMismatchException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KeyPairMismatchExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller : object {
    private static LimitExceededExceptionUnmarshaller _instance;
    public static LimitExceededExceptionUnmarshaller Instance { get; }
    private static LimitExceededExceptionUnmarshaller();
    public sealed virtual LimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static LimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAccessKeysRequestMarshaller : object {
    private static ListAccessKeysRequestMarshaller _instance;
    public static ListAccessKeysRequestMarshaller Instance { get; }
    private static ListAccessKeysRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAccessKeysRequest publicRequest);
    internal static ListAccessKeysRequestMarshaller GetInstance();
    public static ListAccessKeysRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAccessKeysResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListAccessKeysResponseUnmarshaller _instance;
    public static ListAccessKeysResponseUnmarshaller Instance { get; }
    private static ListAccessKeysResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListAccessKeysResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAccessKeysResponseUnmarshaller GetInstance();
    public static ListAccessKeysResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAccountAliasesRequestMarshaller : object {
    private static ListAccountAliasesRequestMarshaller _instance;
    public static ListAccountAliasesRequestMarshaller Instance { get; }
    private static ListAccountAliasesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAccountAliasesRequest publicRequest);
    internal static ListAccountAliasesRequestMarshaller GetInstance();
    public static ListAccountAliasesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAccountAliasesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListAccountAliasesResponseUnmarshaller _instance;
    public static ListAccountAliasesResponseUnmarshaller Instance { get; }
    private static ListAccountAliasesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListAccountAliasesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAccountAliasesResponseUnmarshaller GetInstance();
    public static ListAccountAliasesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAttachedGroupPoliciesRequestMarshaller : object {
    private static ListAttachedGroupPoliciesRequestMarshaller _instance;
    public static ListAttachedGroupPoliciesRequestMarshaller Instance { get; }
    private static ListAttachedGroupPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAttachedGroupPoliciesRequest publicRequest);
    internal static ListAttachedGroupPoliciesRequestMarshaller GetInstance();
    public static ListAttachedGroupPoliciesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAttachedGroupPoliciesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListAttachedGroupPoliciesResponseUnmarshaller _instance;
    public static ListAttachedGroupPoliciesResponseUnmarshaller Instance { get; }
    private static ListAttachedGroupPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListAttachedGroupPoliciesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAttachedGroupPoliciesResponseUnmarshaller GetInstance();
    public static ListAttachedGroupPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAttachedRolePoliciesRequestMarshaller : object {
    private static ListAttachedRolePoliciesRequestMarshaller _instance;
    public static ListAttachedRolePoliciesRequestMarshaller Instance { get; }
    private static ListAttachedRolePoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAttachedRolePoliciesRequest publicRequest);
    internal static ListAttachedRolePoliciesRequestMarshaller GetInstance();
    public static ListAttachedRolePoliciesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAttachedRolePoliciesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListAttachedRolePoliciesResponseUnmarshaller _instance;
    public static ListAttachedRolePoliciesResponseUnmarshaller Instance { get; }
    private static ListAttachedRolePoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListAttachedRolePoliciesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAttachedRolePoliciesResponseUnmarshaller GetInstance();
    public static ListAttachedRolePoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAttachedUserPoliciesRequestMarshaller : object {
    private static ListAttachedUserPoliciesRequestMarshaller _instance;
    public static ListAttachedUserPoliciesRequestMarshaller Instance { get; }
    private static ListAttachedUserPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAttachedUserPoliciesRequest publicRequest);
    internal static ListAttachedUserPoliciesRequestMarshaller GetInstance();
    public static ListAttachedUserPoliciesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListAttachedUserPoliciesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListAttachedUserPoliciesResponseUnmarshaller _instance;
    public static ListAttachedUserPoliciesResponseUnmarshaller Instance { get; }
    private static ListAttachedUserPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListAttachedUserPoliciesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAttachedUserPoliciesResponseUnmarshaller GetInstance();
    public static ListAttachedUserPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListEntitiesForPolicyRequestMarshaller : object {
    private static ListEntitiesForPolicyRequestMarshaller _instance;
    public static ListEntitiesForPolicyRequestMarshaller Instance { get; }
    private static ListEntitiesForPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListEntitiesForPolicyRequest publicRequest);
    internal static ListEntitiesForPolicyRequestMarshaller GetInstance();
    public static ListEntitiesForPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListEntitiesForPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListEntitiesForPolicyResponseUnmarshaller _instance;
    public static ListEntitiesForPolicyResponseUnmarshaller Instance { get; }
    private static ListEntitiesForPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListEntitiesForPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListEntitiesForPolicyResponseUnmarshaller GetInstance();
    public static ListEntitiesForPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListGroupPoliciesRequestMarshaller : object {
    private static ListGroupPoliciesRequestMarshaller _instance;
    public static ListGroupPoliciesRequestMarshaller Instance { get; }
    private static ListGroupPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListGroupPoliciesRequest publicRequest);
    internal static ListGroupPoliciesRequestMarshaller GetInstance();
    public static ListGroupPoliciesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListGroupPoliciesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListGroupPoliciesResponseUnmarshaller _instance;
    public static ListGroupPoliciesResponseUnmarshaller Instance { get; }
    private static ListGroupPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListGroupPoliciesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListGroupPoliciesResponseUnmarshaller GetInstance();
    public static ListGroupPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListGroupsForUserRequestMarshaller : object {
    private static ListGroupsForUserRequestMarshaller _instance;
    public static ListGroupsForUserRequestMarshaller Instance { get; }
    private static ListGroupsForUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListGroupsForUserRequest publicRequest);
    internal static ListGroupsForUserRequestMarshaller GetInstance();
    public static ListGroupsForUserRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListGroupsForUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListGroupsForUserResponseUnmarshaller _instance;
    public static ListGroupsForUserResponseUnmarshaller Instance { get; }
    private static ListGroupsForUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListGroupsForUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListGroupsForUserResponseUnmarshaller GetInstance();
    public static ListGroupsForUserResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListGroupsRequestMarshaller : object {
    private static ListGroupsRequestMarshaller _instance;
    public static ListGroupsRequestMarshaller Instance { get; }
    private static ListGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListGroupsRequest publicRequest);
    internal static ListGroupsRequestMarshaller GetInstance();
    public static ListGroupsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListGroupsResponseUnmarshaller _instance;
    public static ListGroupsResponseUnmarshaller Instance { get; }
    private static ListGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListGroupsResponseUnmarshaller GetInstance();
    public static ListGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListInstanceProfilesForRoleRequestMarshaller : object {
    private static ListInstanceProfilesForRoleRequestMarshaller _instance;
    public static ListInstanceProfilesForRoleRequestMarshaller Instance { get; }
    private static ListInstanceProfilesForRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListInstanceProfilesForRoleRequest publicRequest);
    internal static ListInstanceProfilesForRoleRequestMarshaller GetInstance();
    public static ListInstanceProfilesForRoleRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListInstanceProfilesForRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListInstanceProfilesForRoleResponseUnmarshaller _instance;
    public static ListInstanceProfilesForRoleResponseUnmarshaller Instance { get; }
    private static ListInstanceProfilesForRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListInstanceProfilesForRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListInstanceProfilesForRoleResponseUnmarshaller GetInstance();
    public static ListInstanceProfilesForRoleResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListInstanceProfilesRequestMarshaller : object {
    private static ListInstanceProfilesRequestMarshaller _instance;
    public static ListInstanceProfilesRequestMarshaller Instance { get; }
    private static ListInstanceProfilesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListInstanceProfilesRequest publicRequest);
    internal static ListInstanceProfilesRequestMarshaller GetInstance();
    public static ListInstanceProfilesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListInstanceProfilesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListInstanceProfilesResponseUnmarshaller _instance;
    public static ListInstanceProfilesResponseUnmarshaller Instance { get; }
    private static ListInstanceProfilesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListInstanceProfilesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListInstanceProfilesResponseUnmarshaller GetInstance();
    public static ListInstanceProfilesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListInstanceProfileTagsRequestMarshaller : object {
    private static ListInstanceProfileTagsRequestMarshaller _instance;
    public static ListInstanceProfileTagsRequestMarshaller Instance { get; }
    private static ListInstanceProfileTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListInstanceProfileTagsRequest publicRequest);
    internal static ListInstanceProfileTagsRequestMarshaller GetInstance();
    public static ListInstanceProfileTagsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListInstanceProfileTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListInstanceProfileTagsResponseUnmarshaller _instance;
    public static ListInstanceProfileTagsResponseUnmarshaller Instance { get; }
    private static ListInstanceProfileTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListInstanceProfileTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListInstanceProfileTagsResponseUnmarshaller GetInstance();
    public static ListInstanceProfileTagsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListMFADevicesRequestMarshaller : object {
    private static ListMFADevicesRequestMarshaller _instance;
    public static ListMFADevicesRequestMarshaller Instance { get; }
    private static ListMFADevicesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListMFADevicesRequest publicRequest);
    internal static ListMFADevicesRequestMarshaller GetInstance();
    public static ListMFADevicesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListMFADevicesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListMFADevicesResponseUnmarshaller _instance;
    public static ListMFADevicesResponseUnmarshaller Instance { get; }
    private static ListMFADevicesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListMFADevicesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListMFADevicesResponseUnmarshaller GetInstance();
    public static ListMFADevicesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListMFADeviceTagsRequestMarshaller : object {
    private static ListMFADeviceTagsRequestMarshaller _instance;
    public static ListMFADeviceTagsRequestMarshaller Instance { get; }
    private static ListMFADeviceTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListMFADeviceTagsRequest publicRequest);
    internal static ListMFADeviceTagsRequestMarshaller GetInstance();
    public static ListMFADeviceTagsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListMFADeviceTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListMFADeviceTagsResponseUnmarshaller _instance;
    public static ListMFADeviceTagsResponseUnmarshaller Instance { get; }
    private static ListMFADeviceTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListMFADeviceTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListMFADeviceTagsResponseUnmarshaller GetInstance();
    public static ListMFADeviceTagsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListOpenIDConnectProvidersRequestMarshaller : object {
    private static ListOpenIDConnectProvidersRequestMarshaller _instance;
    public static ListOpenIDConnectProvidersRequestMarshaller Instance { get; }
    private static ListOpenIDConnectProvidersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListOpenIDConnectProvidersRequest publicRequest);
    internal static ListOpenIDConnectProvidersRequestMarshaller GetInstance();
    public static ListOpenIDConnectProvidersRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListOpenIDConnectProvidersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListOpenIDConnectProvidersResponseUnmarshaller _instance;
    public static ListOpenIDConnectProvidersResponseUnmarshaller Instance { get; }
    private static ListOpenIDConnectProvidersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListOpenIDConnectProvidersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListOpenIDConnectProvidersResponseUnmarshaller GetInstance();
    public static ListOpenIDConnectProvidersResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListOpenIDConnectProviderTagsRequestMarshaller : object {
    private static ListOpenIDConnectProviderTagsRequestMarshaller _instance;
    public static ListOpenIDConnectProviderTagsRequestMarshaller Instance { get; }
    private static ListOpenIDConnectProviderTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListOpenIDConnectProviderTagsRequest publicRequest);
    internal static ListOpenIDConnectProviderTagsRequestMarshaller GetInstance();
    public static ListOpenIDConnectProviderTagsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListOpenIDConnectProviderTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListOpenIDConnectProviderTagsResponseUnmarshaller _instance;
    public static ListOpenIDConnectProviderTagsResponseUnmarshaller Instance { get; }
    private static ListOpenIDConnectProviderTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListOpenIDConnectProviderTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListOpenIDConnectProviderTagsResponseUnmarshaller GetInstance();
    public static ListOpenIDConnectProviderTagsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListPoliciesGrantingServiceAccessEntryUnmarshaller : object {
    private static ListPoliciesGrantingServiceAccessEntryUnmarshaller _instance;
    public static ListPoliciesGrantingServiceAccessEntryUnmarshaller Instance { get; }
    private static ListPoliciesGrantingServiceAccessEntryUnmarshaller();
    public sealed virtual ListPoliciesGrantingServiceAccessEntry Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListPoliciesGrantingServiceAccessEntry Unmarshall(JsonUnmarshallerContext context);
    public static ListPoliciesGrantingServiceAccessEntryUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListPoliciesGrantingServiceAccessRequestMarshaller : object {
    private static ListPoliciesGrantingServiceAccessRequestMarshaller _instance;
    public static ListPoliciesGrantingServiceAccessRequestMarshaller Instance { get; }
    private static ListPoliciesGrantingServiceAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPoliciesGrantingServiceAccessRequest publicRequest);
    internal static ListPoliciesGrantingServiceAccessRequestMarshaller GetInstance();
    public static ListPoliciesGrantingServiceAccessRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListPoliciesGrantingServiceAccessResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListPoliciesGrantingServiceAccessResponseUnmarshaller _instance;
    public static ListPoliciesGrantingServiceAccessResponseUnmarshaller Instance { get; }
    private static ListPoliciesGrantingServiceAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListPoliciesGrantingServiceAccessResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPoliciesGrantingServiceAccessResponseUnmarshaller GetInstance();
    public static ListPoliciesGrantingServiceAccessResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListPoliciesRequestMarshaller : object {
    private static ListPoliciesRequestMarshaller _instance;
    public static ListPoliciesRequestMarshaller Instance { get; }
    private static ListPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPoliciesRequest publicRequest);
    internal static ListPoliciesRequestMarshaller GetInstance();
    public static ListPoliciesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListPoliciesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListPoliciesResponseUnmarshaller _instance;
    public static ListPoliciesResponseUnmarshaller Instance { get; }
    private static ListPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListPoliciesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPoliciesResponseUnmarshaller GetInstance();
    public static ListPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListPolicyTagsRequestMarshaller : object {
    private static ListPolicyTagsRequestMarshaller _instance;
    public static ListPolicyTagsRequestMarshaller Instance { get; }
    private static ListPolicyTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPolicyTagsRequest publicRequest);
    internal static ListPolicyTagsRequestMarshaller GetInstance();
    public static ListPolicyTagsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListPolicyTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListPolicyTagsResponseUnmarshaller _instance;
    public static ListPolicyTagsResponseUnmarshaller Instance { get; }
    private static ListPolicyTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListPolicyTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPolicyTagsResponseUnmarshaller GetInstance();
    public static ListPolicyTagsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListPolicyVersionsRequestMarshaller : object {
    private static ListPolicyVersionsRequestMarshaller _instance;
    public static ListPolicyVersionsRequestMarshaller Instance { get; }
    private static ListPolicyVersionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPolicyVersionsRequest publicRequest);
    internal static ListPolicyVersionsRequestMarshaller GetInstance();
    public static ListPolicyVersionsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListPolicyVersionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListPolicyVersionsResponseUnmarshaller _instance;
    public static ListPolicyVersionsResponseUnmarshaller Instance { get; }
    private static ListPolicyVersionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListPolicyVersionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPolicyVersionsResponseUnmarshaller GetInstance();
    public static ListPolicyVersionsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListRolePoliciesRequestMarshaller : object {
    private static ListRolePoliciesRequestMarshaller _instance;
    public static ListRolePoliciesRequestMarshaller Instance { get; }
    private static ListRolePoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListRolePoliciesRequest publicRequest);
    internal static ListRolePoliciesRequestMarshaller GetInstance();
    public static ListRolePoliciesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListRolePoliciesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListRolePoliciesResponseUnmarshaller _instance;
    public static ListRolePoliciesResponseUnmarshaller Instance { get; }
    private static ListRolePoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListRolePoliciesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListRolePoliciesResponseUnmarshaller GetInstance();
    public static ListRolePoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListRolesRequestMarshaller : object {
    private static ListRolesRequestMarshaller _instance;
    public static ListRolesRequestMarshaller Instance { get; }
    private static ListRolesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListRolesRequest publicRequest);
    internal static ListRolesRequestMarshaller GetInstance();
    public static ListRolesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListRolesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListRolesResponseUnmarshaller _instance;
    public static ListRolesResponseUnmarshaller Instance { get; }
    private static ListRolesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListRolesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListRolesResponseUnmarshaller GetInstance();
    public static ListRolesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListRoleTagsRequestMarshaller : object {
    private static ListRoleTagsRequestMarshaller _instance;
    public static ListRoleTagsRequestMarshaller Instance { get; }
    private static ListRoleTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListRoleTagsRequest publicRequest);
    internal static ListRoleTagsRequestMarshaller GetInstance();
    public static ListRoleTagsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListRoleTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListRoleTagsResponseUnmarshaller _instance;
    public static ListRoleTagsResponseUnmarshaller Instance { get; }
    private static ListRoleTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListRoleTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListRoleTagsResponseUnmarshaller GetInstance();
    public static ListRoleTagsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListSAMLProvidersRequestMarshaller : object {
    private static ListSAMLProvidersRequestMarshaller _instance;
    public static ListSAMLProvidersRequestMarshaller Instance { get; }
    private static ListSAMLProvidersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListSAMLProvidersRequest publicRequest);
    internal static ListSAMLProvidersRequestMarshaller GetInstance();
    public static ListSAMLProvidersRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListSAMLProvidersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListSAMLProvidersResponseUnmarshaller _instance;
    public static ListSAMLProvidersResponseUnmarshaller Instance { get; }
    private static ListSAMLProvidersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListSAMLProvidersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListSAMLProvidersResponseUnmarshaller GetInstance();
    public static ListSAMLProvidersResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListSAMLProviderTagsRequestMarshaller : object {
    private static ListSAMLProviderTagsRequestMarshaller _instance;
    public static ListSAMLProviderTagsRequestMarshaller Instance { get; }
    private static ListSAMLProviderTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListSAMLProviderTagsRequest publicRequest);
    internal static ListSAMLProviderTagsRequestMarshaller GetInstance();
    public static ListSAMLProviderTagsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListSAMLProviderTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListSAMLProviderTagsResponseUnmarshaller _instance;
    public static ListSAMLProviderTagsResponseUnmarshaller Instance { get; }
    private static ListSAMLProviderTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListSAMLProviderTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListSAMLProviderTagsResponseUnmarshaller GetInstance();
    public static ListSAMLProviderTagsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListServerCertificatesRequestMarshaller : object {
    private static ListServerCertificatesRequestMarshaller _instance;
    public static ListServerCertificatesRequestMarshaller Instance { get; }
    private static ListServerCertificatesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListServerCertificatesRequest publicRequest);
    internal static ListServerCertificatesRequestMarshaller GetInstance();
    public static ListServerCertificatesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListServerCertificatesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListServerCertificatesResponseUnmarshaller _instance;
    public static ListServerCertificatesResponseUnmarshaller Instance { get; }
    private static ListServerCertificatesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListServerCertificatesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListServerCertificatesResponseUnmarshaller GetInstance();
    public static ListServerCertificatesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListServerCertificateTagsRequestMarshaller : object {
    private static ListServerCertificateTagsRequestMarshaller _instance;
    public static ListServerCertificateTagsRequestMarshaller Instance { get; }
    private static ListServerCertificateTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListServerCertificateTagsRequest publicRequest);
    internal static ListServerCertificateTagsRequestMarshaller GetInstance();
    public static ListServerCertificateTagsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListServerCertificateTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListServerCertificateTagsResponseUnmarshaller _instance;
    public static ListServerCertificateTagsResponseUnmarshaller Instance { get; }
    private static ListServerCertificateTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListServerCertificateTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListServerCertificateTagsResponseUnmarshaller GetInstance();
    public static ListServerCertificateTagsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListServiceSpecificCredentialsRequestMarshaller : object {
    private static ListServiceSpecificCredentialsRequestMarshaller _instance;
    public static ListServiceSpecificCredentialsRequestMarshaller Instance { get; }
    private static ListServiceSpecificCredentialsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListServiceSpecificCredentialsRequest publicRequest);
    internal static ListServiceSpecificCredentialsRequestMarshaller GetInstance();
    public static ListServiceSpecificCredentialsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListServiceSpecificCredentialsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListServiceSpecificCredentialsResponseUnmarshaller _instance;
    public static ListServiceSpecificCredentialsResponseUnmarshaller Instance { get; }
    private static ListServiceSpecificCredentialsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListServiceSpecificCredentialsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListServiceSpecificCredentialsResponseUnmarshaller GetInstance();
    public static ListServiceSpecificCredentialsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListSigningCertificatesRequestMarshaller : object {
    private static ListSigningCertificatesRequestMarshaller _instance;
    public static ListSigningCertificatesRequestMarshaller Instance { get; }
    private static ListSigningCertificatesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListSigningCertificatesRequest publicRequest);
    internal static ListSigningCertificatesRequestMarshaller GetInstance();
    public static ListSigningCertificatesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListSigningCertificatesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListSigningCertificatesResponseUnmarshaller _instance;
    public static ListSigningCertificatesResponseUnmarshaller Instance { get; }
    private static ListSigningCertificatesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListSigningCertificatesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListSigningCertificatesResponseUnmarshaller GetInstance();
    public static ListSigningCertificatesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListSSHPublicKeysRequestMarshaller : object {
    private static ListSSHPublicKeysRequestMarshaller _instance;
    public static ListSSHPublicKeysRequestMarshaller Instance { get; }
    private static ListSSHPublicKeysRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListSSHPublicKeysRequest publicRequest);
    internal static ListSSHPublicKeysRequestMarshaller GetInstance();
    public static ListSSHPublicKeysRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListSSHPublicKeysResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListSSHPublicKeysResponseUnmarshaller _instance;
    public static ListSSHPublicKeysResponseUnmarshaller Instance { get; }
    private static ListSSHPublicKeysResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListSSHPublicKeysResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListSSHPublicKeysResponseUnmarshaller GetInstance();
    public static ListSSHPublicKeysResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListUserPoliciesRequestMarshaller : object {
    private static ListUserPoliciesRequestMarshaller _instance;
    public static ListUserPoliciesRequestMarshaller Instance { get; }
    private static ListUserPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListUserPoliciesRequest publicRequest);
    internal static ListUserPoliciesRequestMarshaller GetInstance();
    public static ListUserPoliciesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListUserPoliciesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListUserPoliciesResponseUnmarshaller _instance;
    public static ListUserPoliciesResponseUnmarshaller Instance { get; }
    private static ListUserPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListUserPoliciesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListUserPoliciesResponseUnmarshaller GetInstance();
    public static ListUserPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListUsersRequestMarshaller : object {
    private static ListUsersRequestMarshaller _instance;
    public static ListUsersRequestMarshaller Instance { get; }
    private static ListUsersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListUsersRequest publicRequest);
    internal static ListUsersRequestMarshaller GetInstance();
    public static ListUsersRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListUsersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListUsersResponseUnmarshaller _instance;
    public static ListUsersResponseUnmarshaller Instance { get; }
    private static ListUsersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListUsersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListUsersResponseUnmarshaller GetInstance();
    public static ListUsersResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListUserTagsRequestMarshaller : object {
    private static ListUserTagsRequestMarshaller _instance;
    public static ListUserTagsRequestMarshaller Instance { get; }
    private static ListUserTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListUserTagsRequest publicRequest);
    internal static ListUserTagsRequestMarshaller GetInstance();
    public static ListUserTagsRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListUserTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListUserTagsResponseUnmarshaller _instance;
    public static ListUserTagsResponseUnmarshaller Instance { get; }
    private static ListUserTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListUserTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListUserTagsResponseUnmarshaller GetInstance();
    public static ListUserTagsResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListVirtualMFADevicesRequestMarshaller : object {
    private static ListVirtualMFADevicesRequestMarshaller _instance;
    public static ListVirtualMFADevicesRequestMarshaller Instance { get; }
    private static ListVirtualMFADevicesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListVirtualMFADevicesRequest publicRequest);
    internal static ListVirtualMFADevicesRequestMarshaller GetInstance();
    public static ListVirtualMFADevicesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ListVirtualMFADevicesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListVirtualMFADevicesResponseUnmarshaller _instance;
    public static ListVirtualMFADevicesResponseUnmarshaller Instance { get; }
    private static ListVirtualMFADevicesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListVirtualMFADevicesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListVirtualMFADevicesResponseUnmarshaller GetInstance();
    public static ListVirtualMFADevicesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.LoginProfileUnmarshaller : object {
    private static LoginProfileUnmarshaller _instance;
    public static LoginProfileUnmarshaller Instance { get; }
    private static LoginProfileUnmarshaller();
    public sealed virtual LoginProfile Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LoginProfile Unmarshall(JsonUnmarshallerContext context);
    public static LoginProfileUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.MalformedCertificateExceptionUnmarshaller : object {
    private static MalformedCertificateExceptionUnmarshaller _instance;
    public static MalformedCertificateExceptionUnmarshaller Instance { get; }
    private static MalformedCertificateExceptionUnmarshaller();
    public sealed virtual MalformedCertificateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MalformedCertificateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static MalformedCertificateExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.MalformedPolicyDocumentExceptionUnmarshaller : object {
    private static MalformedPolicyDocumentExceptionUnmarshaller _instance;
    public static MalformedPolicyDocumentExceptionUnmarshaller Instance { get; }
    private static MalformedPolicyDocumentExceptionUnmarshaller();
    public sealed virtual MalformedPolicyDocumentException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MalformedPolicyDocumentException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static MalformedPolicyDocumentExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ManagedPolicyDetailUnmarshaller : object {
    private static ManagedPolicyDetailUnmarshaller _instance;
    public static ManagedPolicyDetailUnmarshaller Instance { get; }
    private static ManagedPolicyDetailUnmarshaller();
    public sealed virtual ManagedPolicyDetail Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ManagedPolicyDetail Unmarshall(JsonUnmarshallerContext context);
    public static ManagedPolicyDetailUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ManagedPolicyUnmarshaller : object {
    private static ManagedPolicyUnmarshaller _instance;
    public static ManagedPolicyUnmarshaller Instance { get; }
    private static ManagedPolicyUnmarshaller();
    public sealed virtual ManagedPolicy Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ManagedPolicy Unmarshall(JsonUnmarshallerContext context);
    public static ManagedPolicyUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.MFADeviceUnmarshaller : object {
    private static MFADeviceUnmarshaller _instance;
    public static MFADeviceUnmarshaller Instance { get; }
    private static MFADeviceUnmarshaller();
    public sealed virtual MFADevice Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MFADevice Unmarshall(JsonUnmarshallerContext context);
    public static MFADeviceUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.NoSuchEntityExceptionUnmarshaller : object {
    private static NoSuchEntityExceptionUnmarshaller _instance;
    public static NoSuchEntityExceptionUnmarshaller Instance { get; }
    private static NoSuchEntityExceptionUnmarshaller();
    public sealed virtual NoSuchEntityException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchEntityException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchEntityExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.OpenIDConnectProviderListEntryUnmarshaller : object {
    private static OpenIDConnectProviderListEntryUnmarshaller _instance;
    public static OpenIDConnectProviderListEntryUnmarshaller Instance { get; }
    private static OpenIDConnectProviderListEntryUnmarshaller();
    public sealed virtual OpenIDConnectProviderListEntry Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OpenIDConnectProviderListEntry Unmarshall(JsonUnmarshallerContext context);
    public static OpenIDConnectProviderListEntryUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.OpenIdIdpCommunicationErrorExceptionUnmarshaller : object {
    private static OpenIdIdpCommunicationErrorExceptionUnmarshaller _instance;
    public static OpenIdIdpCommunicationErrorExceptionUnmarshaller Instance { get; }
    private static OpenIdIdpCommunicationErrorExceptionUnmarshaller();
    public sealed virtual OpenIdIdpCommunicationErrorException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OpenIdIdpCommunicationErrorException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static OpenIdIdpCommunicationErrorExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.OrganizationsDecisionDetailUnmarshaller : object {
    private static OrganizationsDecisionDetailUnmarshaller _instance;
    public static OrganizationsDecisionDetailUnmarshaller Instance { get; }
    private static OrganizationsDecisionDetailUnmarshaller();
    public sealed virtual OrganizationsDecisionDetail Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OrganizationsDecisionDetail Unmarshall(JsonUnmarshallerContext context);
    public static OrganizationsDecisionDetailUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PasswordPolicyUnmarshaller : object {
    private static PasswordPolicyUnmarshaller _instance;
    public static PasswordPolicyUnmarshaller Instance { get; }
    private static PasswordPolicyUnmarshaller();
    public sealed virtual PasswordPolicy Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PasswordPolicy Unmarshall(JsonUnmarshallerContext context);
    public static PasswordPolicyUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PasswordPolicyViolationExceptionUnmarshaller : object {
    private static PasswordPolicyViolationExceptionUnmarshaller _instance;
    public static PasswordPolicyViolationExceptionUnmarshaller Instance { get; }
    private static PasswordPolicyViolationExceptionUnmarshaller();
    public sealed virtual PasswordPolicyViolationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PasswordPolicyViolationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PasswordPolicyViolationExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PermissionsBoundaryDecisionDetailUnmarshaller : object {
    private static PermissionsBoundaryDecisionDetailUnmarshaller _instance;
    public static PermissionsBoundaryDecisionDetailUnmarshaller Instance { get; }
    private static PermissionsBoundaryDecisionDetailUnmarshaller();
    public sealed virtual PermissionsBoundaryDecisionDetail Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PermissionsBoundaryDecisionDetail Unmarshall(JsonUnmarshallerContext context);
    public static PermissionsBoundaryDecisionDetailUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PolicyDetailUnmarshaller : object {
    private static PolicyDetailUnmarshaller _instance;
    public static PolicyDetailUnmarshaller Instance { get; }
    private static PolicyDetailUnmarshaller();
    public sealed virtual PolicyDetail Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyDetail Unmarshall(JsonUnmarshallerContext context);
    public static PolicyDetailUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PolicyEvaluationExceptionUnmarshaller : object {
    private static PolicyEvaluationExceptionUnmarshaller _instance;
    public static PolicyEvaluationExceptionUnmarshaller Instance { get; }
    private static PolicyEvaluationExceptionUnmarshaller();
    public sealed virtual PolicyEvaluationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyEvaluationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PolicyEvaluationExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PolicyGrantingServiceAccessUnmarshaller : object {
    private static PolicyGrantingServiceAccessUnmarshaller _instance;
    public static PolicyGrantingServiceAccessUnmarshaller Instance { get; }
    private static PolicyGrantingServiceAccessUnmarshaller();
    public sealed virtual PolicyGrantingServiceAccess Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyGrantingServiceAccess Unmarshall(JsonUnmarshallerContext context);
    public static PolicyGrantingServiceAccessUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PolicyGroupUnmarshaller : object {
    private static PolicyGroupUnmarshaller _instance;
    public static PolicyGroupUnmarshaller Instance { get; }
    private static PolicyGroupUnmarshaller();
    public sealed virtual PolicyGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyGroup Unmarshall(JsonUnmarshallerContext context);
    public static PolicyGroupUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PolicyNotAttachableExceptionUnmarshaller : object {
    private static PolicyNotAttachableExceptionUnmarshaller _instance;
    public static PolicyNotAttachableExceptionUnmarshaller Instance { get; }
    private static PolicyNotAttachableExceptionUnmarshaller();
    public sealed virtual PolicyNotAttachableException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyNotAttachableException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PolicyNotAttachableExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PolicyRoleUnmarshaller : object {
    private static PolicyRoleUnmarshaller _instance;
    public static PolicyRoleUnmarshaller Instance { get; }
    private static PolicyRoleUnmarshaller();
    public sealed virtual PolicyRole Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyRole Unmarshall(JsonUnmarshallerContext context);
    public static PolicyRoleUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PolicyUserUnmarshaller : object {
    private static PolicyUserUnmarshaller _instance;
    public static PolicyUserUnmarshaller Instance { get; }
    private static PolicyUserUnmarshaller();
    public sealed virtual PolicyUser Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyUser Unmarshall(JsonUnmarshallerContext context);
    public static PolicyUserUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PolicyVersionUnmarshaller : object {
    private static PolicyVersionUnmarshaller _instance;
    public static PolicyVersionUnmarshaller Instance { get; }
    private static PolicyVersionUnmarshaller();
    public sealed virtual PolicyVersion Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyVersion Unmarshall(JsonUnmarshallerContext context);
    public static PolicyVersionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PositionUnmarshaller : object {
    private static PositionUnmarshaller _instance;
    public static PositionUnmarshaller Instance { get; }
    private static PositionUnmarshaller();
    public sealed virtual Position Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Position Unmarshall(JsonUnmarshallerContext context);
    public static PositionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutGroupPolicyRequestMarshaller : object {
    private static PutGroupPolicyRequestMarshaller _instance;
    public static PutGroupPolicyRequestMarshaller Instance { get; }
    private static PutGroupPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutGroupPolicyRequest publicRequest);
    internal static PutGroupPolicyRequestMarshaller GetInstance();
    public static PutGroupPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutGroupPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PutGroupPolicyResponseUnmarshaller _instance;
    public static PutGroupPolicyResponseUnmarshaller Instance { get; }
    private static PutGroupPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PutGroupPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutGroupPolicyResponseUnmarshaller GetInstance();
    public static PutGroupPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutRolePermissionsBoundaryRequestMarshaller : object {
    private static PutRolePermissionsBoundaryRequestMarshaller _instance;
    public static PutRolePermissionsBoundaryRequestMarshaller Instance { get; }
    private static PutRolePermissionsBoundaryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutRolePermissionsBoundaryRequest publicRequest);
    internal static PutRolePermissionsBoundaryRequestMarshaller GetInstance();
    public static PutRolePermissionsBoundaryRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutRolePermissionsBoundaryResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PutRolePermissionsBoundaryResponseUnmarshaller _instance;
    public static PutRolePermissionsBoundaryResponseUnmarshaller Instance { get; }
    private static PutRolePermissionsBoundaryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PutRolePermissionsBoundaryResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutRolePermissionsBoundaryResponseUnmarshaller GetInstance();
    public static PutRolePermissionsBoundaryResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutRolePolicyRequestMarshaller : object {
    private static PutRolePolicyRequestMarshaller _instance;
    public static PutRolePolicyRequestMarshaller Instance { get; }
    private static PutRolePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutRolePolicyRequest publicRequest);
    internal static PutRolePolicyRequestMarshaller GetInstance();
    public static PutRolePolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutRolePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PutRolePolicyResponseUnmarshaller _instance;
    public static PutRolePolicyResponseUnmarshaller Instance { get; }
    private static PutRolePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PutRolePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutRolePolicyResponseUnmarshaller GetInstance();
    public static PutRolePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutUserPermissionsBoundaryRequestMarshaller : object {
    private static PutUserPermissionsBoundaryRequestMarshaller _instance;
    public static PutUserPermissionsBoundaryRequestMarshaller Instance { get; }
    private static PutUserPermissionsBoundaryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutUserPermissionsBoundaryRequest publicRequest);
    internal static PutUserPermissionsBoundaryRequestMarshaller GetInstance();
    public static PutUserPermissionsBoundaryRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutUserPermissionsBoundaryResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PutUserPermissionsBoundaryResponseUnmarshaller _instance;
    public static PutUserPermissionsBoundaryResponseUnmarshaller Instance { get; }
    private static PutUserPermissionsBoundaryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PutUserPermissionsBoundaryResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutUserPermissionsBoundaryResponseUnmarshaller GetInstance();
    public static PutUserPermissionsBoundaryResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutUserPolicyRequestMarshaller : object {
    private static PutUserPolicyRequestMarshaller _instance;
    public static PutUserPolicyRequestMarshaller Instance { get; }
    private static PutUserPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutUserPolicyRequest publicRequest);
    internal static PutUserPolicyRequestMarshaller GetInstance();
    public static PutUserPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.PutUserPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PutUserPolicyResponseUnmarshaller _instance;
    public static PutUserPolicyResponseUnmarshaller Instance { get; }
    private static PutUserPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PutUserPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutUserPolicyResponseUnmarshaller GetInstance();
    public static PutUserPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RemoveClientIDFromOpenIDConnectProviderRequestMarshaller : object {
    private static RemoveClientIDFromOpenIDConnectProviderRequestMarshaller _instance;
    public static RemoveClientIDFromOpenIDConnectProviderRequestMarshaller Instance { get; }
    private static RemoveClientIDFromOpenIDConnectProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RemoveClientIDFromOpenIDConnectProviderRequest publicRequest);
    internal static RemoveClientIDFromOpenIDConnectProviderRequestMarshaller GetInstance();
    public static RemoveClientIDFromOpenIDConnectProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RemoveClientIDFromOpenIDConnectProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RemoveClientIDFromOpenIDConnectProviderResponseUnmarshaller _instance;
    public static RemoveClientIDFromOpenIDConnectProviderResponseUnmarshaller Instance { get; }
    private static RemoveClientIDFromOpenIDConnectProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RemoveClientIDFromOpenIDConnectProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RemoveClientIDFromOpenIDConnectProviderResponseUnmarshaller GetInstance();
    public static RemoveClientIDFromOpenIDConnectProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RemoveRoleFromInstanceProfileRequestMarshaller : object {
    private static RemoveRoleFromInstanceProfileRequestMarshaller _instance;
    public static RemoveRoleFromInstanceProfileRequestMarshaller Instance { get; }
    private static RemoveRoleFromInstanceProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RemoveRoleFromInstanceProfileRequest publicRequest);
    internal static RemoveRoleFromInstanceProfileRequestMarshaller GetInstance();
    public static RemoveRoleFromInstanceProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RemoveRoleFromInstanceProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RemoveRoleFromInstanceProfileResponseUnmarshaller _instance;
    public static RemoveRoleFromInstanceProfileResponseUnmarshaller Instance { get; }
    private static RemoveRoleFromInstanceProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RemoveRoleFromInstanceProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RemoveRoleFromInstanceProfileResponseUnmarshaller GetInstance();
    public static RemoveRoleFromInstanceProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RemoveUserFromGroupRequestMarshaller : object {
    private static RemoveUserFromGroupRequestMarshaller _instance;
    public static RemoveUserFromGroupRequestMarshaller Instance { get; }
    private static RemoveUserFromGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RemoveUserFromGroupRequest publicRequest);
    internal static RemoveUserFromGroupRequestMarshaller GetInstance();
    public static RemoveUserFromGroupRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RemoveUserFromGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RemoveUserFromGroupResponseUnmarshaller _instance;
    public static RemoveUserFromGroupResponseUnmarshaller Instance { get; }
    private static RemoveUserFromGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RemoveUserFromGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RemoveUserFromGroupResponseUnmarshaller GetInstance();
    public static RemoveUserFromGroupResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ReportGenerationLimitExceededExceptionUnmarshaller : object {
    private static ReportGenerationLimitExceededExceptionUnmarshaller _instance;
    public static ReportGenerationLimitExceededExceptionUnmarshaller Instance { get; }
    private static ReportGenerationLimitExceededExceptionUnmarshaller();
    public sealed virtual ReportGenerationLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReportGenerationLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReportGenerationLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ResetServiceSpecificCredentialRequestMarshaller : object {
    private static ResetServiceSpecificCredentialRequestMarshaller _instance;
    public static ResetServiceSpecificCredentialRequestMarshaller Instance { get; }
    private static ResetServiceSpecificCredentialRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ResetServiceSpecificCredentialRequest publicRequest);
    internal static ResetServiceSpecificCredentialRequestMarshaller GetInstance();
    public static ResetServiceSpecificCredentialRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ResetServiceSpecificCredentialResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ResetServiceSpecificCredentialResponseUnmarshaller _instance;
    public static ResetServiceSpecificCredentialResponseUnmarshaller Instance { get; }
    private static ResetServiceSpecificCredentialResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ResetServiceSpecificCredentialResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ResetServiceSpecificCredentialResponseUnmarshaller GetInstance();
    public static ResetServiceSpecificCredentialResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ResourceSpecificResultUnmarshaller : object {
    private static ResourceSpecificResultUnmarshaller _instance;
    public static ResourceSpecificResultUnmarshaller Instance { get; }
    private static ResourceSpecificResultUnmarshaller();
    public sealed virtual ResourceSpecificResult Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourceSpecificResult Unmarshall(JsonUnmarshallerContext context);
    public static ResourceSpecificResultUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ResyncMFADeviceRequestMarshaller : object {
    private static ResyncMFADeviceRequestMarshaller _instance;
    public static ResyncMFADeviceRequestMarshaller Instance { get; }
    private static ResyncMFADeviceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ResyncMFADeviceRequest publicRequest);
    internal static ResyncMFADeviceRequestMarshaller GetInstance();
    public static ResyncMFADeviceRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ResyncMFADeviceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ResyncMFADeviceResponseUnmarshaller _instance;
    public static ResyncMFADeviceResponseUnmarshaller Instance { get; }
    private static ResyncMFADeviceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ResyncMFADeviceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ResyncMFADeviceResponseUnmarshaller GetInstance();
    public static ResyncMFADeviceResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RoleDetailUnmarshaller : object {
    private static RoleDetailUnmarshaller _instance;
    public static RoleDetailUnmarshaller Instance { get; }
    private static RoleDetailUnmarshaller();
    public sealed virtual RoleDetail Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RoleDetail Unmarshall(JsonUnmarshallerContext context);
    public static RoleDetailUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RoleLastUsedUnmarshaller : object {
    private static RoleLastUsedUnmarshaller _instance;
    public static RoleLastUsedUnmarshaller Instance { get; }
    private static RoleLastUsedUnmarshaller();
    public sealed virtual RoleLastUsed Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RoleLastUsed Unmarshall(JsonUnmarshallerContext context);
    public static RoleLastUsedUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RoleUnmarshaller : object {
    private static RoleUnmarshaller _instance;
    public static RoleUnmarshaller Instance { get; }
    private static RoleUnmarshaller();
    public sealed virtual Role Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Role Unmarshall(JsonUnmarshallerContext context);
    public static RoleUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.RoleUsageTypeUnmarshaller : object {
    private static RoleUsageTypeUnmarshaller _instance;
    public static RoleUsageTypeUnmarshaller Instance { get; }
    private static RoleUsageTypeUnmarshaller();
    public sealed virtual RoleUsageType Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RoleUsageType Unmarshall(JsonUnmarshallerContext context);
    public static RoleUsageTypeUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SAMLProviderListEntryUnmarshaller : object {
    private static SAMLProviderListEntryUnmarshaller _instance;
    public static SAMLProviderListEntryUnmarshaller Instance { get; }
    private static SAMLProviderListEntryUnmarshaller();
    public sealed virtual SAMLProviderListEntry Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SAMLProviderListEntry Unmarshall(JsonUnmarshallerContext context);
    public static SAMLProviderListEntryUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ServerCertificateMetadataUnmarshaller : object {
    private static ServerCertificateMetadataUnmarshaller _instance;
    public static ServerCertificateMetadataUnmarshaller Instance { get; }
    private static ServerCertificateMetadataUnmarshaller();
    public sealed virtual ServerCertificateMetadata Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerCertificateMetadata Unmarshall(JsonUnmarshallerContext context);
    public static ServerCertificateMetadataUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ServerCertificateUnmarshaller : object {
    private static ServerCertificateUnmarshaller _instance;
    public static ServerCertificateUnmarshaller Instance { get; }
    private static ServerCertificateUnmarshaller();
    public sealed virtual ServerCertificate Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerCertificate Unmarshall(JsonUnmarshallerContext context);
    public static ServerCertificateUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ServiceFailureExceptionUnmarshaller : object {
    private static ServiceFailureExceptionUnmarshaller _instance;
    public static ServiceFailureExceptionUnmarshaller Instance { get; }
    private static ServiceFailureExceptionUnmarshaller();
    public sealed virtual ServiceFailureException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceFailureException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServiceFailureExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ServiceLastAccessedUnmarshaller : object {
    private static ServiceLastAccessedUnmarshaller _instance;
    public static ServiceLastAccessedUnmarshaller Instance { get; }
    private static ServiceLastAccessedUnmarshaller();
    public sealed virtual ServiceLastAccessed Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceLastAccessed Unmarshall(JsonUnmarshallerContext context);
    public static ServiceLastAccessedUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ServiceNotSupportedExceptionUnmarshaller : object {
    private static ServiceNotSupportedExceptionUnmarshaller _instance;
    public static ServiceNotSupportedExceptionUnmarshaller Instance { get; }
    private static ServiceNotSupportedExceptionUnmarshaller();
    public sealed virtual ServiceNotSupportedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceNotSupportedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServiceNotSupportedExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ServiceSpecificCredentialMetadataUnmarshaller : object {
    private static ServiceSpecificCredentialMetadataUnmarshaller _instance;
    public static ServiceSpecificCredentialMetadataUnmarshaller Instance { get; }
    private static ServiceSpecificCredentialMetadataUnmarshaller();
    public sealed virtual ServiceSpecificCredentialMetadata Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceSpecificCredentialMetadata Unmarshall(JsonUnmarshallerContext context);
    public static ServiceSpecificCredentialMetadataUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.ServiceSpecificCredentialUnmarshaller : object {
    private static ServiceSpecificCredentialUnmarshaller _instance;
    public static ServiceSpecificCredentialUnmarshaller Instance { get; }
    private static ServiceSpecificCredentialUnmarshaller();
    public sealed virtual ServiceSpecificCredential Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceSpecificCredential Unmarshall(JsonUnmarshallerContext context);
    public static ServiceSpecificCredentialUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SetDefaultPolicyVersionRequestMarshaller : object {
    private static SetDefaultPolicyVersionRequestMarshaller _instance;
    public static SetDefaultPolicyVersionRequestMarshaller Instance { get; }
    private static SetDefaultPolicyVersionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetDefaultPolicyVersionRequest publicRequest);
    internal static SetDefaultPolicyVersionRequestMarshaller GetInstance();
    public static SetDefaultPolicyVersionRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SetDefaultPolicyVersionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetDefaultPolicyVersionResponseUnmarshaller _instance;
    public static SetDefaultPolicyVersionResponseUnmarshaller Instance { get; }
    private static SetDefaultPolicyVersionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetDefaultPolicyVersionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetDefaultPolicyVersionResponseUnmarshaller GetInstance();
    public static SetDefaultPolicyVersionResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SetSecurityTokenServicePreferencesRequestMarshaller : object {
    private static SetSecurityTokenServicePreferencesRequestMarshaller _instance;
    public static SetSecurityTokenServicePreferencesRequestMarshaller Instance { get; }
    private static SetSecurityTokenServicePreferencesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetSecurityTokenServicePreferencesRequest publicRequest);
    internal static SetSecurityTokenServicePreferencesRequestMarshaller GetInstance();
    public static SetSecurityTokenServicePreferencesRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SetSecurityTokenServicePreferencesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SetSecurityTokenServicePreferencesResponseUnmarshaller _instance;
    public static SetSecurityTokenServicePreferencesResponseUnmarshaller Instance { get; }
    private static SetSecurityTokenServicePreferencesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SetSecurityTokenServicePreferencesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetSecurityTokenServicePreferencesResponseUnmarshaller GetInstance();
    public static SetSecurityTokenServicePreferencesResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SigningCertificateUnmarshaller : object {
    private static SigningCertificateUnmarshaller _instance;
    public static SigningCertificateUnmarshaller Instance { get; }
    private static SigningCertificateUnmarshaller();
    public sealed virtual SigningCertificate Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SigningCertificate Unmarshall(JsonUnmarshallerContext context);
    public static SigningCertificateUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SimulateCustomPolicyRequestMarshaller : object {
    private static SimulateCustomPolicyRequestMarshaller _instance;
    public static SimulateCustomPolicyRequestMarshaller Instance { get; }
    private static SimulateCustomPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SimulateCustomPolicyRequest publicRequest);
    internal static SimulateCustomPolicyRequestMarshaller GetInstance();
    public static SimulateCustomPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SimulateCustomPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SimulateCustomPolicyResponseUnmarshaller _instance;
    public static SimulateCustomPolicyResponseUnmarshaller Instance { get; }
    private static SimulateCustomPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SimulateCustomPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SimulateCustomPolicyResponseUnmarshaller GetInstance();
    public static SimulateCustomPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SimulatePrincipalPolicyRequestMarshaller : object {
    private static SimulatePrincipalPolicyRequestMarshaller _instance;
    public static SimulatePrincipalPolicyRequestMarshaller Instance { get; }
    private static SimulatePrincipalPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SimulatePrincipalPolicyRequest publicRequest);
    internal static SimulatePrincipalPolicyRequestMarshaller GetInstance();
    public static SimulatePrincipalPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SimulatePrincipalPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static SimulatePrincipalPolicyResponseUnmarshaller _instance;
    public static SimulatePrincipalPolicyResponseUnmarshaller Instance { get; }
    private static SimulatePrincipalPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SimulatePrincipalPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SimulatePrincipalPolicyResponseUnmarshaller GetInstance();
    public static SimulatePrincipalPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SSHPublicKeyMetadataUnmarshaller : object {
    private static SSHPublicKeyMetadataUnmarshaller _instance;
    public static SSHPublicKeyMetadataUnmarshaller Instance { get; }
    private static SSHPublicKeyMetadataUnmarshaller();
    public sealed virtual SSHPublicKeyMetadata Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SSHPublicKeyMetadata Unmarshall(JsonUnmarshallerContext context);
    public static SSHPublicKeyMetadataUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.SSHPublicKeyUnmarshaller : object {
    private static SSHPublicKeyUnmarshaller _instance;
    public static SSHPublicKeyUnmarshaller Instance { get; }
    private static SSHPublicKeyUnmarshaller();
    public sealed virtual SSHPublicKey Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SSHPublicKey Unmarshall(JsonUnmarshallerContext context);
    public static SSHPublicKeyUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.StatementUnmarshaller : object {
    private static StatementUnmarshaller _instance;
    public static StatementUnmarshaller Instance { get; }
    private static StatementUnmarshaller();
    public sealed virtual Statement Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Statement Unmarshall(JsonUnmarshallerContext context);
    public static StatementUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagInstanceProfileRequestMarshaller : object {
    private static TagInstanceProfileRequestMarshaller _instance;
    public static TagInstanceProfileRequestMarshaller Instance { get; }
    private static TagInstanceProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagInstanceProfileRequest publicRequest);
    internal static TagInstanceProfileRequestMarshaller GetInstance();
    public static TagInstanceProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagInstanceProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TagInstanceProfileResponseUnmarshaller _instance;
    public static TagInstanceProfileResponseUnmarshaller Instance { get; }
    private static TagInstanceProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TagInstanceProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagInstanceProfileResponseUnmarshaller GetInstance();
    public static TagInstanceProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagMFADeviceRequestMarshaller : object {
    private static TagMFADeviceRequestMarshaller _instance;
    public static TagMFADeviceRequestMarshaller Instance { get; }
    private static TagMFADeviceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagMFADeviceRequest publicRequest);
    internal static TagMFADeviceRequestMarshaller GetInstance();
    public static TagMFADeviceRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagMFADeviceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TagMFADeviceResponseUnmarshaller _instance;
    public static TagMFADeviceResponseUnmarshaller Instance { get; }
    private static TagMFADeviceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TagMFADeviceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagMFADeviceResponseUnmarshaller GetInstance();
    public static TagMFADeviceResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagOpenIDConnectProviderRequestMarshaller : object {
    private static TagOpenIDConnectProviderRequestMarshaller _instance;
    public static TagOpenIDConnectProviderRequestMarshaller Instance { get; }
    private static TagOpenIDConnectProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagOpenIDConnectProviderRequest publicRequest);
    internal static TagOpenIDConnectProviderRequestMarshaller GetInstance();
    public static TagOpenIDConnectProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagOpenIDConnectProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TagOpenIDConnectProviderResponseUnmarshaller _instance;
    public static TagOpenIDConnectProviderResponseUnmarshaller Instance { get; }
    private static TagOpenIDConnectProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TagOpenIDConnectProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagOpenIDConnectProviderResponseUnmarshaller GetInstance();
    public static TagOpenIDConnectProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagPolicyRequestMarshaller : object {
    private static TagPolicyRequestMarshaller _instance;
    public static TagPolicyRequestMarshaller Instance { get; }
    private static TagPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagPolicyRequest publicRequest);
    internal static TagPolicyRequestMarshaller GetInstance();
    public static TagPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TagPolicyResponseUnmarshaller _instance;
    public static TagPolicyResponseUnmarshaller Instance { get; }
    private static TagPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TagPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagPolicyResponseUnmarshaller GetInstance();
    public static TagPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagRoleRequestMarshaller : object {
    private static TagRoleRequestMarshaller _instance;
    public static TagRoleRequestMarshaller Instance { get; }
    private static TagRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagRoleRequest publicRequest);
    internal static TagRoleRequestMarshaller GetInstance();
    public static TagRoleRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TagRoleResponseUnmarshaller _instance;
    public static TagRoleResponseUnmarshaller Instance { get; }
    private static TagRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TagRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagRoleResponseUnmarshaller GetInstance();
    public static TagRoleResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagSAMLProviderRequestMarshaller : object {
    private static TagSAMLProviderRequestMarshaller _instance;
    public static TagSAMLProviderRequestMarshaller Instance { get; }
    private static TagSAMLProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagSAMLProviderRequest publicRequest);
    internal static TagSAMLProviderRequestMarshaller GetInstance();
    public static TagSAMLProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagSAMLProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TagSAMLProviderResponseUnmarshaller _instance;
    public static TagSAMLProviderResponseUnmarshaller Instance { get; }
    private static TagSAMLProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TagSAMLProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagSAMLProviderResponseUnmarshaller GetInstance();
    public static TagSAMLProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagServerCertificateRequestMarshaller : object {
    private static TagServerCertificateRequestMarshaller _instance;
    public static TagServerCertificateRequestMarshaller Instance { get; }
    private static TagServerCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagServerCertificateRequest publicRequest);
    internal static TagServerCertificateRequestMarshaller GetInstance();
    public static TagServerCertificateRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagServerCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TagServerCertificateResponseUnmarshaller _instance;
    public static TagServerCertificateResponseUnmarshaller Instance { get; }
    private static TagServerCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TagServerCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagServerCertificateResponseUnmarshaller GetInstance();
    public static TagServerCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    public sealed virtual Tag Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagUserRequestMarshaller : object {
    private static TagUserRequestMarshaller _instance;
    public static TagUserRequestMarshaller Instance { get; }
    private static TagUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagUserRequest publicRequest);
    internal static TagUserRequestMarshaller GetInstance();
    public static TagUserRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TagUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TagUserResponseUnmarshaller _instance;
    public static TagUserResponseUnmarshaller Instance { get; }
    private static TagUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TagUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagUserResponseUnmarshaller GetInstance();
    public static TagUserResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.TrackedActionLastAccessedUnmarshaller : object {
    private static TrackedActionLastAccessedUnmarshaller _instance;
    public static TrackedActionLastAccessedUnmarshaller Instance { get; }
    private static TrackedActionLastAccessedUnmarshaller();
    public sealed virtual TrackedActionLastAccessed Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TrackedActionLastAccessed Unmarshall(JsonUnmarshallerContext context);
    public static TrackedActionLastAccessedUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UnmodifiableEntityExceptionUnmarshaller : object {
    private static UnmodifiableEntityExceptionUnmarshaller _instance;
    public static UnmodifiableEntityExceptionUnmarshaller Instance { get; }
    private static UnmodifiableEntityExceptionUnmarshaller();
    public sealed virtual UnmodifiableEntityException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UnmodifiableEntityException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnmodifiableEntityExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UnrecognizedPublicKeyEncodingExceptionUnmarshaller : object {
    private static UnrecognizedPublicKeyEncodingExceptionUnmarshaller _instance;
    public static UnrecognizedPublicKeyEncodingExceptionUnmarshaller Instance { get; }
    private static UnrecognizedPublicKeyEncodingExceptionUnmarshaller();
    public sealed virtual UnrecognizedPublicKeyEncodingException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UnrecognizedPublicKeyEncodingException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnrecognizedPublicKeyEncodingExceptionUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagInstanceProfileRequestMarshaller : object {
    private static UntagInstanceProfileRequestMarshaller _instance;
    public static UntagInstanceProfileRequestMarshaller Instance { get; }
    private static UntagInstanceProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagInstanceProfileRequest publicRequest);
    internal static UntagInstanceProfileRequestMarshaller GetInstance();
    public static UntagInstanceProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagInstanceProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UntagInstanceProfileResponseUnmarshaller _instance;
    public static UntagInstanceProfileResponseUnmarshaller Instance { get; }
    private static UntagInstanceProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UntagInstanceProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagInstanceProfileResponseUnmarshaller GetInstance();
    public static UntagInstanceProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagMFADeviceRequestMarshaller : object {
    private static UntagMFADeviceRequestMarshaller _instance;
    public static UntagMFADeviceRequestMarshaller Instance { get; }
    private static UntagMFADeviceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagMFADeviceRequest publicRequest);
    internal static UntagMFADeviceRequestMarshaller GetInstance();
    public static UntagMFADeviceRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagMFADeviceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UntagMFADeviceResponseUnmarshaller _instance;
    public static UntagMFADeviceResponseUnmarshaller Instance { get; }
    private static UntagMFADeviceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UntagMFADeviceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagMFADeviceResponseUnmarshaller GetInstance();
    public static UntagMFADeviceResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagOpenIDConnectProviderRequestMarshaller : object {
    private static UntagOpenIDConnectProviderRequestMarshaller _instance;
    public static UntagOpenIDConnectProviderRequestMarshaller Instance { get; }
    private static UntagOpenIDConnectProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagOpenIDConnectProviderRequest publicRequest);
    internal static UntagOpenIDConnectProviderRequestMarshaller GetInstance();
    public static UntagOpenIDConnectProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagOpenIDConnectProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UntagOpenIDConnectProviderResponseUnmarshaller _instance;
    public static UntagOpenIDConnectProviderResponseUnmarshaller Instance { get; }
    private static UntagOpenIDConnectProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UntagOpenIDConnectProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagOpenIDConnectProviderResponseUnmarshaller GetInstance();
    public static UntagOpenIDConnectProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagPolicyRequestMarshaller : object {
    private static UntagPolicyRequestMarshaller _instance;
    public static UntagPolicyRequestMarshaller Instance { get; }
    private static UntagPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagPolicyRequest publicRequest);
    internal static UntagPolicyRequestMarshaller GetInstance();
    public static UntagPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UntagPolicyResponseUnmarshaller _instance;
    public static UntagPolicyResponseUnmarshaller Instance { get; }
    private static UntagPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UntagPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagPolicyResponseUnmarshaller GetInstance();
    public static UntagPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagRoleRequestMarshaller : object {
    private static UntagRoleRequestMarshaller _instance;
    public static UntagRoleRequestMarshaller Instance { get; }
    private static UntagRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagRoleRequest publicRequest);
    internal static UntagRoleRequestMarshaller GetInstance();
    public static UntagRoleRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UntagRoleResponseUnmarshaller _instance;
    public static UntagRoleResponseUnmarshaller Instance { get; }
    private static UntagRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UntagRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagRoleResponseUnmarshaller GetInstance();
    public static UntagRoleResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagSAMLProviderRequestMarshaller : object {
    private static UntagSAMLProviderRequestMarshaller _instance;
    public static UntagSAMLProviderRequestMarshaller Instance { get; }
    private static UntagSAMLProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagSAMLProviderRequest publicRequest);
    internal static UntagSAMLProviderRequestMarshaller GetInstance();
    public static UntagSAMLProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagSAMLProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UntagSAMLProviderResponseUnmarshaller _instance;
    public static UntagSAMLProviderResponseUnmarshaller Instance { get; }
    private static UntagSAMLProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UntagSAMLProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagSAMLProviderResponseUnmarshaller GetInstance();
    public static UntagSAMLProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagServerCertificateRequestMarshaller : object {
    private static UntagServerCertificateRequestMarshaller _instance;
    public static UntagServerCertificateRequestMarshaller Instance { get; }
    private static UntagServerCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagServerCertificateRequest publicRequest);
    internal static UntagServerCertificateRequestMarshaller GetInstance();
    public static UntagServerCertificateRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagServerCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UntagServerCertificateResponseUnmarshaller _instance;
    public static UntagServerCertificateResponseUnmarshaller Instance { get; }
    private static UntagServerCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UntagServerCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagServerCertificateResponseUnmarshaller GetInstance();
    public static UntagServerCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagUserRequestMarshaller : object {
    private static UntagUserRequestMarshaller _instance;
    public static UntagUserRequestMarshaller Instance { get; }
    private static UntagUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagUserRequest publicRequest);
    internal static UntagUserRequestMarshaller GetInstance();
    public static UntagUserRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UntagUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UntagUserResponseUnmarshaller _instance;
    public static UntagUserResponseUnmarshaller Instance { get; }
    private static UntagUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UntagUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagUserResponseUnmarshaller GetInstance();
    public static UntagUserResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateAccessKeyRequestMarshaller : object {
    private static UpdateAccessKeyRequestMarshaller _instance;
    public static UpdateAccessKeyRequestMarshaller Instance { get; }
    private static UpdateAccessKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateAccessKeyRequest publicRequest);
    internal static UpdateAccessKeyRequestMarshaller GetInstance();
    public static UpdateAccessKeyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateAccessKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateAccessKeyResponseUnmarshaller _instance;
    public static UpdateAccessKeyResponseUnmarshaller Instance { get; }
    private static UpdateAccessKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateAccessKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateAccessKeyResponseUnmarshaller GetInstance();
    public static UpdateAccessKeyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateAccountPasswordPolicyRequestMarshaller : object {
    private static UpdateAccountPasswordPolicyRequestMarshaller _instance;
    public static UpdateAccountPasswordPolicyRequestMarshaller Instance { get; }
    private static UpdateAccountPasswordPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateAccountPasswordPolicyRequest publicRequest);
    internal static UpdateAccountPasswordPolicyRequestMarshaller GetInstance();
    public static UpdateAccountPasswordPolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateAccountPasswordPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateAccountPasswordPolicyResponseUnmarshaller _instance;
    public static UpdateAccountPasswordPolicyResponseUnmarshaller Instance { get; }
    private static UpdateAccountPasswordPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateAccountPasswordPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateAccountPasswordPolicyResponseUnmarshaller GetInstance();
    public static UpdateAccountPasswordPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateAssumeRolePolicyRequestMarshaller : object {
    private static UpdateAssumeRolePolicyRequestMarshaller _instance;
    public static UpdateAssumeRolePolicyRequestMarshaller Instance { get; }
    private static UpdateAssumeRolePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateAssumeRolePolicyRequest publicRequest);
    internal static UpdateAssumeRolePolicyRequestMarshaller GetInstance();
    public static UpdateAssumeRolePolicyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateAssumeRolePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateAssumeRolePolicyResponseUnmarshaller _instance;
    public static UpdateAssumeRolePolicyResponseUnmarshaller Instance { get; }
    private static UpdateAssumeRolePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateAssumeRolePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateAssumeRolePolicyResponseUnmarshaller GetInstance();
    public static UpdateAssumeRolePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateGroupRequestMarshaller : object {
    private static UpdateGroupRequestMarshaller _instance;
    public static UpdateGroupRequestMarshaller Instance { get; }
    private static UpdateGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateGroupRequest publicRequest);
    internal static UpdateGroupRequestMarshaller GetInstance();
    public static UpdateGroupRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateGroupResponseUnmarshaller _instance;
    public static UpdateGroupResponseUnmarshaller Instance { get; }
    private static UpdateGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateGroupResponseUnmarshaller GetInstance();
    public static UpdateGroupResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateLoginProfileRequestMarshaller : object {
    private static UpdateLoginProfileRequestMarshaller _instance;
    public static UpdateLoginProfileRequestMarshaller Instance { get; }
    private static UpdateLoginProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateLoginProfileRequest publicRequest);
    internal static UpdateLoginProfileRequestMarshaller GetInstance();
    public static UpdateLoginProfileRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateLoginProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateLoginProfileResponseUnmarshaller _instance;
    public static UpdateLoginProfileResponseUnmarshaller Instance { get; }
    private static UpdateLoginProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateLoginProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateLoginProfileResponseUnmarshaller GetInstance();
    public static UpdateLoginProfileResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateOpenIDConnectProviderThumbprintRequestMarshaller : object {
    private static UpdateOpenIDConnectProviderThumbprintRequestMarshaller _instance;
    public static UpdateOpenIDConnectProviderThumbprintRequestMarshaller Instance { get; }
    private static UpdateOpenIDConnectProviderThumbprintRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateOpenIDConnectProviderThumbprintRequest publicRequest);
    internal static UpdateOpenIDConnectProviderThumbprintRequestMarshaller GetInstance();
    public static UpdateOpenIDConnectProviderThumbprintRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateOpenIDConnectProviderThumbprintResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateOpenIDConnectProviderThumbprintResponseUnmarshaller _instance;
    public static UpdateOpenIDConnectProviderThumbprintResponseUnmarshaller Instance { get; }
    private static UpdateOpenIDConnectProviderThumbprintResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateOpenIDConnectProviderThumbprintResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateOpenIDConnectProviderThumbprintResponseUnmarshaller GetInstance();
    public static UpdateOpenIDConnectProviderThumbprintResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateRoleDescriptionRequestMarshaller : object {
    private static UpdateRoleDescriptionRequestMarshaller _instance;
    public static UpdateRoleDescriptionRequestMarshaller Instance { get; }
    private static UpdateRoleDescriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateRoleDescriptionRequest publicRequest);
    internal static UpdateRoleDescriptionRequestMarshaller GetInstance();
    public static UpdateRoleDescriptionRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateRoleDescriptionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateRoleDescriptionResponseUnmarshaller _instance;
    public static UpdateRoleDescriptionResponseUnmarshaller Instance { get; }
    private static UpdateRoleDescriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateRoleDescriptionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateRoleDescriptionResponseUnmarshaller GetInstance();
    public static UpdateRoleDescriptionResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateRoleRequestMarshaller : object {
    private static UpdateRoleRequestMarshaller _instance;
    public static UpdateRoleRequestMarshaller Instance { get; }
    private static UpdateRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateRoleRequest publicRequest);
    internal static UpdateRoleRequestMarshaller GetInstance();
    public static UpdateRoleRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateRoleResponseUnmarshaller _instance;
    public static UpdateRoleResponseUnmarshaller Instance { get; }
    private static UpdateRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateRoleResponseUnmarshaller GetInstance();
    public static UpdateRoleResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateSAMLProviderRequestMarshaller : object {
    private static UpdateSAMLProviderRequestMarshaller _instance;
    public static UpdateSAMLProviderRequestMarshaller Instance { get; }
    private static UpdateSAMLProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateSAMLProviderRequest publicRequest);
    internal static UpdateSAMLProviderRequestMarshaller GetInstance();
    public static UpdateSAMLProviderRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateSAMLProviderResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateSAMLProviderResponseUnmarshaller _instance;
    public static UpdateSAMLProviderResponseUnmarshaller Instance { get; }
    private static UpdateSAMLProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateSAMLProviderResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateSAMLProviderResponseUnmarshaller GetInstance();
    public static UpdateSAMLProviderResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateServerCertificateRequestMarshaller : object {
    private static UpdateServerCertificateRequestMarshaller _instance;
    public static UpdateServerCertificateRequestMarshaller Instance { get; }
    private static UpdateServerCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateServerCertificateRequest publicRequest);
    internal static UpdateServerCertificateRequestMarshaller GetInstance();
    public static UpdateServerCertificateRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateServerCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateServerCertificateResponseUnmarshaller _instance;
    public static UpdateServerCertificateResponseUnmarshaller Instance { get; }
    private static UpdateServerCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateServerCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateServerCertificateResponseUnmarshaller GetInstance();
    public static UpdateServerCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateServiceSpecificCredentialRequestMarshaller : object {
    private static UpdateServiceSpecificCredentialRequestMarshaller _instance;
    public static UpdateServiceSpecificCredentialRequestMarshaller Instance { get; }
    private static UpdateServiceSpecificCredentialRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateServiceSpecificCredentialRequest publicRequest);
    internal static UpdateServiceSpecificCredentialRequestMarshaller GetInstance();
    public static UpdateServiceSpecificCredentialRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateServiceSpecificCredentialResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateServiceSpecificCredentialResponseUnmarshaller _instance;
    public static UpdateServiceSpecificCredentialResponseUnmarshaller Instance { get; }
    private static UpdateServiceSpecificCredentialResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateServiceSpecificCredentialResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateServiceSpecificCredentialResponseUnmarshaller GetInstance();
    public static UpdateServiceSpecificCredentialResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateSigningCertificateRequestMarshaller : object {
    private static UpdateSigningCertificateRequestMarshaller _instance;
    public static UpdateSigningCertificateRequestMarshaller Instance { get; }
    private static UpdateSigningCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateSigningCertificateRequest publicRequest);
    internal static UpdateSigningCertificateRequestMarshaller GetInstance();
    public static UpdateSigningCertificateRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateSigningCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateSigningCertificateResponseUnmarshaller _instance;
    public static UpdateSigningCertificateResponseUnmarshaller Instance { get; }
    private static UpdateSigningCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateSigningCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateSigningCertificateResponseUnmarshaller GetInstance();
    public static UpdateSigningCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateSSHPublicKeyRequestMarshaller : object {
    private static UpdateSSHPublicKeyRequestMarshaller _instance;
    public static UpdateSSHPublicKeyRequestMarshaller Instance { get; }
    private static UpdateSSHPublicKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateSSHPublicKeyRequest publicRequest);
    internal static UpdateSSHPublicKeyRequestMarshaller GetInstance();
    public static UpdateSSHPublicKeyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateSSHPublicKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateSSHPublicKeyResponseUnmarshaller _instance;
    public static UpdateSSHPublicKeyResponseUnmarshaller Instance { get; }
    private static UpdateSSHPublicKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateSSHPublicKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateSSHPublicKeyResponseUnmarshaller GetInstance();
    public static UpdateSSHPublicKeyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateUserRequestMarshaller : object {
    private static UpdateUserRequestMarshaller _instance;
    public static UpdateUserRequestMarshaller Instance { get; }
    private static UpdateUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateUserRequest publicRequest);
    internal static UpdateUserRequestMarshaller GetInstance();
    public static UpdateUserRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UpdateUserResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateUserResponseUnmarshaller _instance;
    public static UpdateUserResponseUnmarshaller Instance { get; }
    private static UpdateUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateUserResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateUserResponseUnmarshaller GetInstance();
    public static UpdateUserResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UploadServerCertificateRequestMarshaller : object {
    private static UploadServerCertificateRequestMarshaller _instance;
    public static UploadServerCertificateRequestMarshaller Instance { get; }
    private static UploadServerCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UploadServerCertificateRequest publicRequest);
    internal static UploadServerCertificateRequestMarshaller GetInstance();
    public static UploadServerCertificateRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UploadServerCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UploadServerCertificateResponseUnmarshaller _instance;
    public static UploadServerCertificateResponseUnmarshaller Instance { get; }
    private static UploadServerCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UploadServerCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UploadServerCertificateResponseUnmarshaller GetInstance();
    public static UploadServerCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UploadSigningCertificateRequestMarshaller : object {
    private static UploadSigningCertificateRequestMarshaller _instance;
    public static UploadSigningCertificateRequestMarshaller Instance { get; }
    private static UploadSigningCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UploadSigningCertificateRequest publicRequest);
    internal static UploadSigningCertificateRequestMarshaller GetInstance();
    public static UploadSigningCertificateRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UploadSigningCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UploadSigningCertificateResponseUnmarshaller _instance;
    public static UploadSigningCertificateResponseUnmarshaller Instance { get; }
    private static UploadSigningCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UploadSigningCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UploadSigningCertificateResponseUnmarshaller GetInstance();
    public static UploadSigningCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UploadSSHPublicKeyRequestMarshaller : object {
    private static UploadSSHPublicKeyRequestMarshaller _instance;
    public static UploadSSHPublicKeyRequestMarshaller Instance { get; }
    private static UploadSSHPublicKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UploadSSHPublicKeyRequest publicRequest);
    internal static UploadSSHPublicKeyRequestMarshaller GetInstance();
    public static UploadSSHPublicKeyRequestMarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UploadSSHPublicKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UploadSSHPublicKeyResponseUnmarshaller _instance;
    public static UploadSSHPublicKeyResponseUnmarshaller Instance { get; }
    private static UploadSSHPublicKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UploadSSHPublicKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UploadSSHPublicKeyResponseUnmarshaller GetInstance();
    public static UploadSSHPublicKeyResponseUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UserDetailUnmarshaller : object {
    private static UserDetailUnmarshaller _instance;
    public static UserDetailUnmarshaller Instance { get; }
    private static UserDetailUnmarshaller();
    public sealed virtual UserDetail Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserDetail Unmarshall(JsonUnmarshallerContext context);
    public static UserDetailUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.UserUnmarshaller : object {
    private static UserUnmarshaller _instance;
    public static UserUnmarshaller Instance { get; }
    private static UserUnmarshaller();
    public sealed virtual User Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual User Unmarshall(JsonUnmarshallerContext context);
    public static UserUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.Internal.MarshallTransformations.VirtualMFADeviceUnmarshaller : object {
    private static VirtualMFADeviceUnmarshaller _instance;
    public static VirtualMFADeviceUnmarshaller Instance { get; }
    private static VirtualMFADeviceUnmarshaller();
    public sealed virtual VirtualMFADevice Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VirtualMFADevice Unmarshall(JsonUnmarshallerContext context);
    public static VirtualMFADeviceUnmarshaller get_Instance();
}
public class Amazon.IdentityManagement.Model.InvalidAuthenticationCodeException : AmazonIdentityManagementServiceException {
    public InvalidAuthenticationCodeException(string message);
    public InvalidAuthenticationCodeException(string message, Exception innerException);
    public InvalidAuthenticationCodeException(Exception innerException);
    public InvalidAuthenticationCodeException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidAuthenticationCodeException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.InvalidCertificateException : AmazonIdentityManagementServiceException {
    public InvalidCertificateException(string message);
    public InvalidCertificateException(string message, Exception innerException);
    public InvalidCertificateException(Exception innerException);
    public InvalidCertificateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidCertificateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.InvalidInputException : AmazonIdentityManagementServiceException {
    public InvalidInputException(string message);
    public InvalidInputException(string message, Exception innerException);
    public InvalidInputException(Exception innerException);
    public InvalidInputException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidInputException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.InvalidPublicKeyException : AmazonIdentityManagementServiceException {
    public InvalidPublicKeyException(string message);
    public InvalidPublicKeyException(string message, Exception innerException);
    public InvalidPublicKeyException(Exception innerException);
    public InvalidPublicKeyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidPublicKeyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.InvalidUserTypeException : AmazonIdentityManagementServiceException {
    public InvalidUserTypeException(string message);
    public InvalidUserTypeException(string message, Exception innerException);
    public InvalidUserTypeException(Exception innerException);
    public InvalidUserTypeException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidUserTypeException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public interface Amazon.IdentityManagement.Model.ISimulateCustomPolicyPaginator {
    public IPaginatedEnumerable`1<SimulateCustomPolicyResponse> Responses { get; }
    public IPaginatedEnumerable`1<EvaluationResult> EvaluationResults { get; }
    public abstract virtual IPaginatedEnumerable`1<SimulateCustomPolicyResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<EvaluationResult> get_EvaluationResults();
}
public interface Amazon.IdentityManagement.Model.ISimulatePrincipalPolicyPaginator {
    public IPaginatedEnumerable`1<SimulatePrincipalPolicyResponse> Responses { get; }
    public IPaginatedEnumerable`1<EvaluationResult> EvaluationResults { get; }
    public abstract virtual IPaginatedEnumerable`1<SimulatePrincipalPolicyResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<EvaluationResult> get_EvaluationResults();
}
public class Amazon.IdentityManagement.Model.KeyPairMismatchException : AmazonIdentityManagementServiceException {
    public KeyPairMismatchException(string message);
    public KeyPairMismatchException(string message, Exception innerException);
    public KeyPairMismatchException(Exception innerException);
    public KeyPairMismatchException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KeyPairMismatchException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.LimitExceededException : AmazonIdentityManagementServiceException {
    public LimitExceededException(string message);
    public LimitExceededException(string message, Exception innerException);
    public LimitExceededException(Exception innerException);
    public LimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
internal class Amazon.IdentityManagement.Model.ListAccessKeysPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListAccessKeysRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAccessKeysResponse> Responses { get; }
    public IPaginatedEnumerable`1<AccessKeyMetadata> AccessKeyMetadata { get; }
    internal ListAccessKeysPaginator(IAmazonIdentityManagementService client, ListAccessKeysRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAccessKeysResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<AccessKeyMetadata> get_AccessKeyMetadata();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListAccessKeysPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListAccessKeysResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAccessKeysResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListAccessKeysResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListAccessKeysRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _userName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ListAccessKeysResponse : AmazonWebServiceResponse {
    private List`1<AccessKeyMetadata> _accessKeyMetadata;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    [AWSPropertyAttribute]
public List`1<AccessKeyMetadata> AccessKeyMetadata { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<AccessKeyMetadata> get_AccessKeyMetadata();
    public void set_AccessKeyMetadata(List`1<AccessKeyMetadata> value);
    internal bool IsSetAccessKeyMetadata();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListAccountAliasesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListAccountAliasesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAccountAliasesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> AccountAliases { get; }
    internal ListAccountAliasesPaginator(IAmazonIdentityManagementService client, ListAccountAliasesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAccountAliasesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_AccountAliases();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListAccountAliasesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListAccountAliasesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAccountAliasesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListAccountAliasesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListAccountAliasesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
}
public class Amazon.IdentityManagement.Model.ListAccountAliasesResponse : AmazonWebServiceResponse {
    private List`1<string> _accountAliases;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    [AWSPropertyAttribute]
public List`1<string> AccountAliases { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<string> get_AccountAliases();
    public void set_AccountAliases(List`1<string> value);
    internal bool IsSetAccountAliases();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListAttachedGroupPoliciesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListAttachedGroupPoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAttachedGroupPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AttachedPolicyType> AttachedPolicies { get; }
    internal ListAttachedGroupPoliciesPaginator(IAmazonIdentityManagementService client, ListAttachedGroupPoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAttachedGroupPoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<AttachedPolicyType> get_AttachedPolicies();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListAttachedGroupPoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListAttachedGroupPoliciesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAttachedGroupPoliciesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListAttachedGroupPoliciesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListAttachedGroupPoliciesRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _pathPrefix;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
}
public class Amazon.IdentityManagement.Model.ListAttachedGroupPoliciesResponse : AmazonWebServiceResponse {
    private List`1<AttachedPolicyType> _attachedPolicies;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    public List`1<AttachedPolicyType> AttachedPolicies { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<AttachedPolicyType> get_AttachedPolicies();
    public void set_AttachedPolicies(List`1<AttachedPolicyType> value);
    internal bool IsSetAttachedPolicies();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListAttachedRolePoliciesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListAttachedRolePoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAttachedRolePoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AttachedPolicyType> AttachedPolicies { get; }
    internal ListAttachedRolePoliciesPaginator(IAmazonIdentityManagementService client, ListAttachedRolePoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAttachedRolePoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<AttachedPolicyType> get_AttachedPolicies();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListAttachedRolePoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListAttachedRolePoliciesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAttachedRolePoliciesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListAttachedRolePoliciesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListAttachedRolePoliciesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _pathPrefix;
    private string _roleName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.ListAttachedRolePoliciesResponse : AmazonWebServiceResponse {
    private List`1<AttachedPolicyType> _attachedPolicies;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    public List`1<AttachedPolicyType> AttachedPolicies { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<AttachedPolicyType> get_AttachedPolicies();
    public void set_AttachedPolicies(List`1<AttachedPolicyType> value);
    internal bool IsSetAttachedPolicies();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListAttachedUserPoliciesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListAttachedUserPoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAttachedUserPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AttachedPolicyType> AttachedPolicies { get; }
    internal ListAttachedUserPoliciesPaginator(IAmazonIdentityManagementService client, ListAttachedUserPoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAttachedUserPoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<AttachedPolicyType> get_AttachedPolicies();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListAttachedUserPoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListAttachedUserPoliciesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAttachedUserPoliciesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListAttachedUserPoliciesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListAttachedUserPoliciesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _pathPrefix;
    private string _userName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ListAttachedUserPoliciesResponse : AmazonWebServiceResponse {
    private List`1<AttachedPolicyType> _attachedPolicies;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    public List`1<AttachedPolicyType> AttachedPolicies { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<AttachedPolicyType> get_AttachedPolicies();
    public void set_AttachedPolicies(List`1<AttachedPolicyType> value);
    internal bool IsSetAttachedPolicies();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListEntitiesForPolicyPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListEntitiesForPolicyRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListEntitiesForPolicyResponse> Responses { get; }
    public IPaginatedEnumerable`1<PolicyGroup> PolicyGroups { get; }
    public IPaginatedEnumerable`1<PolicyUser> PolicyUsers { get; }
    public IPaginatedEnumerable`1<PolicyRole> PolicyRoles { get; }
    internal ListEntitiesForPolicyPaginator(IAmazonIdentityManagementService client, ListEntitiesForPolicyRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListEntitiesForPolicyResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<PolicyGroup> get_PolicyGroups();
    public sealed virtual IPaginatedEnumerable`1<PolicyUser> get_PolicyUsers();
    public sealed virtual IPaginatedEnumerable`1<PolicyRole> get_PolicyRoles();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListEntitiesForPolicyPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListEntitiesForPolicyResponse>-PaginateAsync>d__12")]
private sealed virtual override IAsyncEnumerable`1<ListEntitiesForPolicyResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListEntitiesForPolicyResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListEntitiesForPolicyRequest : AmazonIdentityManagementServiceRequest {
    private EntityType _entityFilter;
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _pathPrefix;
    private string _policyArn;
    private PolicyUsageType _policyUsageFilter;
    public EntityType EntityFilter { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    public PolicyUsageType PolicyUsageFilter { get; public set; }
    public EntityType get_EntityFilter();
    public void set_EntityFilter(EntityType value);
    internal bool IsSetEntityFilter();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public PolicyUsageType get_PolicyUsageFilter();
    public void set_PolicyUsageFilter(PolicyUsageType value);
    internal bool IsSetPolicyUsageFilter();
}
public class Amazon.IdentityManagement.Model.ListEntitiesForPolicyResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<PolicyGroup> _policyGroups;
    private List`1<PolicyRole> _policyRoles;
    private List`1<PolicyUser> _policyUsers;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<PolicyGroup> PolicyGroups { get; public set; }
    public List`1<PolicyRole> PolicyRoles { get; public set; }
    public List`1<PolicyUser> PolicyUsers { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<PolicyGroup> get_PolicyGroups();
    public void set_PolicyGroups(List`1<PolicyGroup> value);
    internal bool IsSetPolicyGroups();
    public List`1<PolicyRole> get_PolicyRoles();
    public void set_PolicyRoles(List`1<PolicyRole> value);
    internal bool IsSetPolicyRoles();
    public List`1<PolicyUser> get_PolicyUsers();
    public void set_PolicyUsers(List`1<PolicyUser> value);
    internal bool IsSetPolicyUsers();
}
internal class Amazon.IdentityManagement.Model.ListGroupPoliciesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListGroupPoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListGroupPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PolicyNames { get; }
    internal ListGroupPoliciesPaginator(IAmazonIdentityManagementService client, ListGroupPoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListGroupPoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_PolicyNames();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListGroupPoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListGroupPoliciesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListGroupPoliciesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListGroupPoliciesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListGroupPoliciesRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _marker;
    private Nullable`1<int> _maxItems;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public ListGroupPoliciesRequest(string groupName);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
}
public class Amazon.IdentityManagement.Model.ListGroupPoliciesResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<string> _policyNames;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> PolicyNames { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<string> get_PolicyNames();
    public void set_PolicyNames(List`1<string> value);
    internal bool IsSetPolicyNames();
}
internal class Amazon.IdentityManagement.Model.ListGroupsForUserPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListGroupsForUserRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListGroupsForUserResponse> Responses { get; }
    public IPaginatedEnumerable`1<Group> Groups { get; }
    internal ListGroupsForUserPaginator(IAmazonIdentityManagementService client, ListGroupsForUserRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListGroupsForUserResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Group> get_Groups();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListGroupsForUserPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListGroupsForUserResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListGroupsForUserResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListGroupsForUserResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListGroupsForUserRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _userName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public ListGroupsForUserRequest(string userName);
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ListGroupsForUserResponse : AmazonWebServiceResponse {
    private List`1<Group> _groups;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    [AWSPropertyAttribute]
public List`1<Group> Groups { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<Group> get_Groups();
    public void set_Groups(List`1<Group> value);
    internal bool IsSetGroups();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListGroupsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Group> Groups { get; }
    internal ListGroupsPaginator(IAmazonIdentityManagementService client, ListGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Group> get_Groups();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListGroupsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListGroupsRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _pathPrefix;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
}
public class Amazon.IdentityManagement.Model.ListGroupsResponse : AmazonWebServiceResponse {
    private List`1<Group> _groups;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    [AWSPropertyAttribute]
public List`1<Group> Groups { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<Group> get_Groups();
    public void set_Groups(List`1<Group> value);
    internal bool IsSetGroups();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListInstanceProfilesForRolePaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListInstanceProfilesForRoleRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListInstanceProfilesForRoleResponse> Responses { get; }
    public IPaginatedEnumerable`1<InstanceProfile> InstanceProfiles { get; }
    internal ListInstanceProfilesForRolePaginator(IAmazonIdentityManagementService client, ListInstanceProfilesForRoleRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListInstanceProfilesForRoleResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<InstanceProfile> get_InstanceProfiles();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListInstanceProfilesForRolePaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListInstanceProfilesForRoleResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListInstanceProfilesForRoleResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListInstanceProfilesForRoleResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListInstanceProfilesForRoleRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _roleName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.ListInstanceProfilesForRoleResponse : AmazonWebServiceResponse {
    private List`1<InstanceProfile> _instanceProfiles;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    [AWSPropertyAttribute]
public List`1<InstanceProfile> InstanceProfiles { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<InstanceProfile> get_InstanceProfiles();
    public void set_InstanceProfiles(List`1<InstanceProfile> value);
    internal bool IsSetInstanceProfiles();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListInstanceProfilesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListInstanceProfilesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListInstanceProfilesResponse> Responses { get; }
    public IPaginatedEnumerable`1<InstanceProfile> InstanceProfiles { get; }
    internal ListInstanceProfilesPaginator(IAmazonIdentityManagementService client, ListInstanceProfilesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListInstanceProfilesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<InstanceProfile> get_InstanceProfiles();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListInstanceProfilesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListInstanceProfilesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListInstanceProfilesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListInstanceProfilesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListInstanceProfilesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _pathPrefix;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
}
public class Amazon.IdentityManagement.Model.ListInstanceProfilesResponse : AmazonWebServiceResponse {
    private List`1<InstanceProfile> _instanceProfiles;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    [AWSPropertyAttribute]
public List`1<InstanceProfile> InstanceProfiles { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<InstanceProfile> get_InstanceProfiles();
    public void set_InstanceProfiles(List`1<InstanceProfile> value);
    internal bool IsSetInstanceProfiles();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListInstanceProfileTagsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListInstanceProfileTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListInstanceProfileTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListInstanceProfileTagsPaginator(IAmazonIdentityManagementService client, ListInstanceProfileTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListInstanceProfileTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListInstanceProfileTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListInstanceProfileTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListInstanceProfileTagsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListInstanceProfileTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListInstanceProfileTagsRequest : AmazonIdentityManagementServiceRequest {
    private string _instanceProfileName;
    private string _marker;
    private Nullable`1<int> _maxItems;
    [AWSPropertyAttribute]
public string InstanceProfileName { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public string get_InstanceProfileName();
    public void set_InstanceProfileName(string value);
    internal bool IsSetInstanceProfileName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
}
public class Amazon.IdentityManagement.Model.ListInstanceProfileTagsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<Tag> _tags;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
internal class Amazon.IdentityManagement.Model.ListMFADevicesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListMFADevicesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListMFADevicesResponse> Responses { get; }
    public IPaginatedEnumerable`1<MFADevice> MFADevices { get; }
    internal ListMFADevicesPaginator(IAmazonIdentityManagementService client, ListMFADevicesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListMFADevicesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<MFADevice> get_MFADevices();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListMFADevicesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListMFADevicesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListMFADevicesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListMFADevicesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListMFADevicesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _userName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public ListMFADevicesRequest(string userName);
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ListMFADevicesResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<MFADevice> _mfaDevices;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<MFADevice> MFADevices { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<MFADevice> get_MFADevices();
    public void set_MFADevices(List`1<MFADevice> value);
    internal bool IsSetMFADevices();
}
internal class Amazon.IdentityManagement.Model.ListMFADeviceTagsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListMFADeviceTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListMFADeviceTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListMFADeviceTagsPaginator(IAmazonIdentityManagementService client, ListMFADeviceTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListMFADeviceTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListMFADeviceTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListMFADeviceTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListMFADeviceTagsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListMFADeviceTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListMFADeviceTagsRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _serialNumber;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
}
public class Amazon.IdentityManagement.Model.ListMFADeviceTagsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<Tag> _tags;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.ListOpenIDConnectProvidersRequest : AmazonIdentityManagementServiceRequest {
}
public class Amazon.IdentityManagement.Model.ListOpenIDConnectProvidersResponse : AmazonWebServiceResponse {
    private List`1<OpenIDConnectProviderListEntry> _openIDConnectProviderList;
    public List`1<OpenIDConnectProviderListEntry> OpenIDConnectProviderList { get; public set; }
    public List`1<OpenIDConnectProviderListEntry> get_OpenIDConnectProviderList();
    public void set_OpenIDConnectProviderList(List`1<OpenIDConnectProviderListEntry> value);
    internal bool IsSetOpenIDConnectProviderList();
}
internal class Amazon.IdentityManagement.Model.ListOpenIDConnectProviderTagsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListOpenIDConnectProviderTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListOpenIDConnectProviderTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListOpenIDConnectProviderTagsPaginator(IAmazonIdentityManagementService client, ListOpenIDConnectProviderTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListOpenIDConnectProviderTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListOpenIDConnectProviderTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListOpenIDConnectProviderTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListOpenIDConnectProviderTagsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListOpenIDConnectProviderTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListOpenIDConnectProviderTagsRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _openIDConnectProviderArn;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string OpenIDConnectProviderArn { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_OpenIDConnectProviderArn();
    public void set_OpenIDConnectProviderArn(string value);
    internal bool IsSetOpenIDConnectProviderArn();
}
public class Amazon.IdentityManagement.Model.ListOpenIDConnectProviderTagsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<Tag> _tags;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.ListPoliciesGrantingServiceAccessEntry : object {
    private List`1<PolicyGrantingServiceAccess> _policies;
    private string _serviceNamespace;
    public List`1<PolicyGrantingServiceAccess> Policies { get; public set; }
    [AWSPropertyAttribute]
public string ServiceNamespace { get; public set; }
    public List`1<PolicyGrantingServiceAccess> get_Policies();
    public void set_Policies(List`1<PolicyGrantingServiceAccess> value);
    internal bool IsSetPolicies();
    public string get_ServiceNamespace();
    public void set_ServiceNamespace(string value);
    internal bool IsSetServiceNamespace();
}
public class Amazon.IdentityManagement.Model.ListPoliciesGrantingServiceAccessRequest : AmazonIdentityManagementServiceRequest {
    private string _arn;
    private string _marker;
    private List`1<string> _serviceNamespaces;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ServiceNamespaces { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<string> get_ServiceNamespaces();
    public void set_ServiceNamespaces(List`1<string> value);
    internal bool IsSetServiceNamespaces();
}
public class Amazon.IdentityManagement.Model.ListPoliciesGrantingServiceAccessResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<ListPoliciesGrantingServiceAccessEntry> _policiesGrantingServiceAccess;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<ListPoliciesGrantingServiceAccessEntry> PoliciesGrantingServiceAccess { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ListPoliciesGrantingServiceAccessEntry> get_PoliciesGrantingServiceAccess();
    public void set_PoliciesGrantingServiceAccess(List`1<ListPoliciesGrantingServiceAccessEntry> value);
    internal bool IsSetPoliciesGrantingServiceAccess();
}
internal class Amazon.IdentityManagement.Model.ListPoliciesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListPoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ManagedPolicy> Policies { get; }
    internal ListPoliciesPaginator(IAmazonIdentityManagementService client, ListPoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListPoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ManagedPolicy> get_Policies();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListPoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListPoliciesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListPoliciesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListPoliciesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListPoliciesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private Nullable`1<bool> _onlyAttached;
    private string _pathPrefix;
    private PolicyUsageType _policyUsageFilter;
    private PolicyScopeType _scope;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public Nullable`1<bool> OnlyAttached { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    public PolicyUsageType PolicyUsageFilter { get; public set; }
    public PolicyScopeType Scope { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public Nullable`1<bool> get_OnlyAttached();
    public void set_OnlyAttached(Nullable`1<bool> value);
    internal bool IsSetOnlyAttached();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
    public PolicyUsageType get_PolicyUsageFilter();
    public void set_PolicyUsageFilter(PolicyUsageType value);
    internal bool IsSetPolicyUsageFilter();
    public PolicyScopeType get_Scope();
    public void set_Scope(PolicyScopeType value);
    internal bool IsSetScope();
}
public class Amazon.IdentityManagement.Model.ListPoliciesResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<ManagedPolicy> _policies;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<ManagedPolicy> Policies { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ManagedPolicy> get_Policies();
    public void set_Policies(List`1<ManagedPolicy> value);
    internal bool IsSetPolicies();
}
internal class Amazon.IdentityManagement.Model.ListPolicyTagsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListPolicyTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListPolicyTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListPolicyTagsPaginator(IAmazonIdentityManagementService client, ListPolicyTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListPolicyTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListPolicyTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListPolicyTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListPolicyTagsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListPolicyTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListPolicyTagsRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _policyArn;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
}
public class Amazon.IdentityManagement.Model.ListPolicyTagsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<Tag> _tags;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
internal class Amazon.IdentityManagement.Model.ListPolicyVersionsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListPolicyVersionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListPolicyVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<PolicyVersion> Versions { get; }
    internal ListPolicyVersionsPaginator(IAmazonIdentityManagementService client, ListPolicyVersionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListPolicyVersionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<PolicyVersion> get_Versions();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListPolicyVersionsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListPolicyVersionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListPolicyVersionsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListPolicyVersionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListPolicyVersionsRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _policyArn;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
}
public class Amazon.IdentityManagement.Model.ListPolicyVersionsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<PolicyVersion> _versions;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<PolicyVersion> Versions { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<PolicyVersion> get_Versions();
    public void set_Versions(List`1<PolicyVersion> value);
    internal bool IsSetVersions();
}
internal class Amazon.IdentityManagement.Model.ListRolePoliciesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListRolePoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListRolePoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PolicyNames { get; }
    internal ListRolePoliciesPaginator(IAmazonIdentityManagementService client, ListRolePoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListRolePoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_PolicyNames();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListRolePoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListRolePoliciesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListRolePoliciesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListRolePoliciesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListRolePoliciesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _roleName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.ListRolePoliciesResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<string> _policyNames;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> PolicyNames { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<string> get_PolicyNames();
    public void set_PolicyNames(List`1<string> value);
    internal bool IsSetPolicyNames();
}
internal class Amazon.IdentityManagement.Model.ListRolesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListRolesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListRolesResponse> Responses { get; }
    public IPaginatedEnumerable`1<Role> Roles { get; }
    internal ListRolesPaginator(IAmazonIdentityManagementService client, ListRolesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListRolesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Role> get_Roles();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListRolesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListRolesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListRolesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListRolesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListRolesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _pathPrefix;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
}
public class Amazon.IdentityManagement.Model.ListRolesResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<Role> _roles;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<Role> Roles { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Role> get_Roles();
    public void set_Roles(List`1<Role> value);
    internal bool IsSetRoles();
}
internal class Amazon.IdentityManagement.Model.ListRoleTagsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListRoleTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListRoleTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListRoleTagsPaginator(IAmazonIdentityManagementService client, ListRoleTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListRoleTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListRoleTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListRoleTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListRoleTagsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListRoleTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListRoleTagsRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _roleName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.ListRoleTagsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<Tag> _tags;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.ListSAMLProvidersRequest : AmazonIdentityManagementServiceRequest {
}
public class Amazon.IdentityManagement.Model.ListSAMLProvidersResponse : AmazonWebServiceResponse {
    private List`1<SAMLProviderListEntry> _samlProviderList;
    public List`1<SAMLProviderListEntry> SAMLProviderList { get; public set; }
    public List`1<SAMLProviderListEntry> get_SAMLProviderList();
    public void set_SAMLProviderList(List`1<SAMLProviderListEntry> value);
    internal bool IsSetSAMLProviderList();
}
internal class Amazon.IdentityManagement.Model.ListSAMLProviderTagsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListSAMLProviderTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListSAMLProviderTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListSAMLProviderTagsPaginator(IAmazonIdentityManagementService client, ListSAMLProviderTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListSAMLProviderTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListSAMLProviderTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListSAMLProviderTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListSAMLProviderTagsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListSAMLProviderTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListSAMLProviderTagsRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _samlProviderArn;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string SAMLProviderArn { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_SAMLProviderArn();
    public void set_SAMLProviderArn(string value);
    internal bool IsSetSAMLProviderArn();
}
public class Amazon.IdentityManagement.Model.ListSAMLProviderTagsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<Tag> _tags;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
internal class Amazon.IdentityManagement.Model.ListServerCertificatesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListServerCertificatesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListServerCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ServerCertificateMetadata> ServerCertificateMetadataList { get; }
    internal ListServerCertificatesPaginator(IAmazonIdentityManagementService client, ListServerCertificatesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListServerCertificatesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ServerCertificateMetadata> get_ServerCertificateMetadataList();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListServerCertificatesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListServerCertificatesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListServerCertificatesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListServerCertificatesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListServerCertificatesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _pathPrefix;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
}
public class Amazon.IdentityManagement.Model.ListServerCertificatesResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<ServerCertificateMetadata> _serverCertificateMetadataList;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<ServerCertificateMetadata> ServerCertificateMetadataList { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ServerCertificateMetadata> get_ServerCertificateMetadataList();
    public void set_ServerCertificateMetadataList(List`1<ServerCertificateMetadata> value);
    internal bool IsSetServerCertificateMetadataList();
}
internal class Amazon.IdentityManagement.Model.ListServerCertificateTagsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListServerCertificateTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListServerCertificateTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListServerCertificateTagsPaginator(IAmazonIdentityManagementService client, ListServerCertificateTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListServerCertificateTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListServerCertificateTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListServerCertificateTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListServerCertificateTagsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListServerCertificateTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListServerCertificateTagsRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _serverCertificateName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string ServerCertificateName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_ServerCertificateName();
    public void set_ServerCertificateName(string value);
    internal bool IsSetServerCertificateName();
}
public class Amazon.IdentityManagement.Model.ListServerCertificateTagsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<Tag> _tags;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.ListServiceSpecificCredentialsRequest : AmazonIdentityManagementServiceRequest {
    private string _serviceName;
    private string _userName;
    public string ServiceName { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ListServiceSpecificCredentialsResponse : AmazonWebServiceResponse {
    private List`1<ServiceSpecificCredentialMetadata> _serviceSpecificCredentials;
    public List`1<ServiceSpecificCredentialMetadata> ServiceSpecificCredentials { get; public set; }
    public List`1<ServiceSpecificCredentialMetadata> get_ServiceSpecificCredentials();
    public void set_ServiceSpecificCredentials(List`1<ServiceSpecificCredentialMetadata> value);
    internal bool IsSetServiceSpecificCredentials();
}
internal class Amazon.IdentityManagement.Model.ListSigningCertificatesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListSigningCertificatesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListSigningCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<SigningCertificate> Certificates { get; }
    internal ListSigningCertificatesPaginator(IAmazonIdentityManagementService client, ListSigningCertificatesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListSigningCertificatesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<SigningCertificate> get_Certificates();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListSigningCertificatesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListSigningCertificatesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListSigningCertificatesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListSigningCertificatesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListSigningCertificatesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _userName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ListSigningCertificatesResponse : AmazonWebServiceResponse {
    private List`1<SigningCertificate> _certificates;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    [AWSPropertyAttribute]
public List`1<SigningCertificate> Certificates { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<SigningCertificate> get_Certificates();
    public void set_Certificates(List`1<SigningCertificate> value);
    internal bool IsSetCertificates();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.ListSSHPublicKeysPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListSSHPublicKeysRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListSSHPublicKeysResponse> Responses { get; }
    public IPaginatedEnumerable`1<SSHPublicKeyMetadata> SSHPublicKeys { get; }
    internal ListSSHPublicKeysPaginator(IAmazonIdentityManagementService client, ListSSHPublicKeysRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListSSHPublicKeysResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<SSHPublicKeyMetadata> get_SSHPublicKeys();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListSSHPublicKeysPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListSSHPublicKeysResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListSSHPublicKeysResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListSSHPublicKeysResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListSSHPublicKeysRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _userName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ListSSHPublicKeysResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<SSHPublicKeyMetadata> _sshPublicKeys;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<SSHPublicKeyMetadata> SSHPublicKeys { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<SSHPublicKeyMetadata> get_SSHPublicKeys();
    public void set_SSHPublicKeys(List`1<SSHPublicKeyMetadata> value);
    internal bool IsSetSSHPublicKeys();
}
internal class Amazon.IdentityManagement.Model.ListUserPoliciesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListUserPoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListUserPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PolicyNames { get; }
    internal ListUserPoliciesPaginator(IAmazonIdentityManagementService client, ListUserPoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListUserPoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_PolicyNames();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListUserPoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListUserPoliciesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListUserPoliciesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListUserPoliciesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListUserPoliciesRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _userName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public ListUserPoliciesRequest(string userName);
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ListUserPoliciesResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<string> _policyNames;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> PolicyNames { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<string> get_PolicyNames();
    public void set_PolicyNames(List`1<string> value);
    internal bool IsSetPolicyNames();
}
internal class Amazon.IdentityManagement.Model.ListUsersPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListUsersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListUsersResponse> Responses { get; }
    public IPaginatedEnumerable`1<User> Users { get; }
    internal ListUsersPaginator(IAmazonIdentityManagementService client, ListUsersRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListUsersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<User> get_Users();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListUsersPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListUsersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListUsersResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListUsersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListUsersRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _pathPrefix;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string PathPrefix { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_PathPrefix();
    public void set_PathPrefix(string value);
    internal bool IsSetPathPrefix();
}
public class Amazon.IdentityManagement.Model.ListUsersResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<User> _users;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<User> Users { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<User> get_Users();
    public void set_Users(List`1<User> value);
    internal bool IsSetUsers();
}
internal class Amazon.IdentityManagement.Model.ListUserTagsPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListUserTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListUserTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListUserTagsPaginator(IAmazonIdentityManagementService client, ListUserTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListUserTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListUserTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListUserTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListUserTagsResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListUserTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListUserTagsRequest : AmazonIdentityManagementServiceRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _userName;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ListUserTagsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<Tag> _tags;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
internal class Amazon.IdentityManagement.Model.ListVirtualMFADevicesPaginator : object {
    private IAmazonIdentityManagementService _client;
    private ListVirtualMFADevicesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListVirtualMFADevicesResponse> Responses { get; }
    public IPaginatedEnumerable`1<VirtualMFADevice> VirtualMFADevices { get; }
    internal ListVirtualMFADevicesPaginator(IAmazonIdentityManagementService client, ListVirtualMFADevicesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListVirtualMFADevicesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<VirtualMFADevice> get_VirtualMFADevices();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.ListVirtualMFADevicesPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-ListVirtualMFADevicesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListVirtualMFADevicesResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.ListVirtualMFADevicesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.ListVirtualMFADevicesRequest : AmazonIdentityManagementServiceRequest {
    private AssignmentStatusType _assignmentStatus;
    private string _marker;
    private Nullable`1<int> _maxItems;
    public AssignmentStatusType AssignmentStatus { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public AssignmentStatusType get_AssignmentStatus();
    public void set_AssignmentStatus(AssignmentStatusType value);
    internal bool IsSetAssignmentStatus();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
}
public class Amazon.IdentityManagement.Model.ListVirtualMFADevicesResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    private List`1<VirtualMFADevice> _virtualMFADevices;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    [AWSPropertyAttribute]
public List`1<VirtualMFADevice> VirtualMFADevices { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<VirtualMFADevice> get_VirtualMFADevices();
    public void set_VirtualMFADevices(List`1<VirtualMFADevice> value);
    internal bool IsSetVirtualMFADevices();
}
public class Amazon.IdentityManagement.Model.LoginProfile : object {
    private Nullable`1<DateTime> _createDate;
    private Nullable`1<bool> _passwordResetRequired;
    private string _userName;
    [AWSPropertyAttribute]
public Nullable`1<DateTime> CreateDate { get; public set; }
    public Nullable`1<bool> PasswordResetRequired { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public LoginProfile(string userName, Nullable`1<DateTime> createDate);
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public Nullable`1<bool> get_PasswordResetRequired();
    public void set_PasswordResetRequired(Nullable`1<bool> value);
    internal bool IsSetPasswordResetRequired();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.MalformedCertificateException : AmazonIdentityManagementServiceException {
    public MalformedCertificateException(string message);
    public MalformedCertificateException(string message, Exception innerException);
    public MalformedCertificateException(Exception innerException);
    public MalformedCertificateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public MalformedCertificateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.MalformedPolicyDocumentException : AmazonIdentityManagementServiceException {
    public MalformedPolicyDocumentException(string message);
    public MalformedPolicyDocumentException(string message, Exception innerException);
    public MalformedPolicyDocumentException(Exception innerException);
    public MalformedPolicyDocumentException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public MalformedPolicyDocumentException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.ManagedPolicy : object {
    private string _arn;
    private Nullable`1<int> _attachmentCount;
    private Nullable`1<DateTime> _createDate;
    private string _defaultVersionId;
    private string _description;
    private Nullable`1<bool> _isAttachable;
    private string _path;
    private Nullable`1<int> _permissionsBoundaryUsageCount;
    private string _policyId;
    private string _policyName;
    private List`1<Tag> _tags;
    private Nullable`1<DateTime> _updateDate;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public Nullable`1<int> AttachmentCount { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    public string DefaultVersionId { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<bool> IsAttachable { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public Nullable`1<int> PermissionsBoundaryUsageCount { get; public set; }
    [AWSPropertyAttribute]
public string PolicyId { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<DateTime> UpdateDate { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<int> get_AttachmentCount();
    public void set_AttachmentCount(Nullable`1<int> value);
    internal bool IsSetAttachmentCount();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_DefaultVersionId();
    public void set_DefaultVersionId(string value);
    internal bool IsSetDefaultVersionId();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<bool> get_IsAttachable();
    public void set_IsAttachable(Nullable`1<bool> value);
    internal bool IsSetIsAttachable();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public Nullable`1<int> get_PermissionsBoundaryUsageCount();
    public void set_PermissionsBoundaryUsageCount(Nullable`1<int> value);
    internal bool IsSetPermissionsBoundaryUsageCount();
    public string get_PolicyId();
    public void set_PolicyId(string value);
    internal bool IsSetPolicyId();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<DateTime> get_UpdateDate();
    public void set_UpdateDate(Nullable`1<DateTime> value);
    internal bool IsSetUpdateDate();
}
public class Amazon.IdentityManagement.Model.ManagedPolicyDetail : object {
    private string _arn;
    private Nullable`1<int> _attachmentCount;
    private Nullable`1<DateTime> _createDate;
    private string _defaultVersionId;
    private string _description;
    private Nullable`1<bool> _isAttachable;
    private string _path;
    private Nullable`1<int> _permissionsBoundaryUsageCount;
    private string _policyId;
    private string _policyName;
    private List`1<PolicyVersion> _policyVersionList;
    private Nullable`1<DateTime> _updateDate;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public Nullable`1<int> AttachmentCount { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    public string DefaultVersionId { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<bool> IsAttachable { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public Nullable`1<int> PermissionsBoundaryUsageCount { get; public set; }
    [AWSPropertyAttribute]
public string PolicyId { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public List`1<PolicyVersion> PolicyVersionList { get; public set; }
    public Nullable`1<DateTime> UpdateDate { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<int> get_AttachmentCount();
    public void set_AttachmentCount(Nullable`1<int> value);
    internal bool IsSetAttachmentCount();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_DefaultVersionId();
    public void set_DefaultVersionId(string value);
    internal bool IsSetDefaultVersionId();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<bool> get_IsAttachable();
    public void set_IsAttachable(Nullable`1<bool> value);
    internal bool IsSetIsAttachable();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public Nullable`1<int> get_PermissionsBoundaryUsageCount();
    public void set_PermissionsBoundaryUsageCount(Nullable`1<int> value);
    internal bool IsSetPermissionsBoundaryUsageCount();
    public string get_PolicyId();
    public void set_PolicyId(string value);
    internal bool IsSetPolicyId();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public List`1<PolicyVersion> get_PolicyVersionList();
    public void set_PolicyVersionList(List`1<PolicyVersion> value);
    internal bool IsSetPolicyVersionList();
    public Nullable`1<DateTime> get_UpdateDate();
    public void set_UpdateDate(Nullable`1<DateTime> value);
    internal bool IsSetUpdateDate();
}
public class Amazon.IdentityManagement.Model.MFADevice : object {
    private Nullable`1<DateTime> _enableDate;
    private string _serialNumber;
    private string _userName;
    [AWSPropertyAttribute]
public Nullable`1<DateTime> EnableDate { get; public set; }
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public MFADevice(string userName, string serialNumber, Nullable`1<DateTime> enableDate);
    public Nullable`1<DateTime> get_EnableDate();
    public void set_EnableDate(Nullable`1<DateTime> value);
    internal bool IsSetEnableDate();
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.NoSuchEntityException : AmazonIdentityManagementServiceException {
    public NoSuchEntityException(string message);
    public NoSuchEntityException(string message, Exception innerException);
    public NoSuchEntityException(Exception innerException);
    public NoSuchEntityException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchEntityException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.OpenIDConnectProviderListEntry : object {
    private string _arn;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
}
public class Amazon.IdentityManagement.Model.OpenIdIdpCommunicationErrorException : AmazonIdentityManagementServiceException {
    public OpenIdIdpCommunicationErrorException(string message);
    public OpenIdIdpCommunicationErrorException(string message, Exception innerException);
    public OpenIdIdpCommunicationErrorException(Exception innerException);
    public OpenIdIdpCommunicationErrorException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public OpenIdIdpCommunicationErrorException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.OrganizationsDecisionDetail : object {
    private Nullable`1<bool> _allowedByOrganizations;
    public Nullable`1<bool> AllowedByOrganizations { get; public set; }
    public Nullable`1<bool> get_AllowedByOrganizations();
    public void set_AllowedByOrganizations(Nullable`1<bool> value);
    internal bool IsSetAllowedByOrganizations();
}
public class Amazon.IdentityManagement.Model.PasswordPolicy : object {
    private Nullable`1<bool> _allowUsersToChangePassword;
    private Nullable`1<bool> _expirePasswords;
    private Nullable`1<bool> _hardExpiry;
    private Nullable`1<int> _maxPasswordAge;
    private Nullable`1<int> _minimumPasswordLength;
    private Nullable`1<int> _passwordReusePrevention;
    private Nullable`1<bool> _requireLowercaseCharacters;
    private Nullable`1<bool> _requireNumbers;
    private Nullable`1<bool> _requireSymbols;
    private Nullable`1<bool> _requireUppercaseCharacters;
    public Nullable`1<bool> AllowUsersToChangePassword { get; public set; }
    public Nullable`1<bool> ExpirePasswords { get; public set; }
    public Nullable`1<bool> HardExpiry { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxPasswordAge { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MinimumPasswordLength { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PasswordReusePrevention { get; public set; }
    public Nullable`1<bool> RequireLowercaseCharacters { get; public set; }
    public Nullable`1<bool> RequireNumbers { get; public set; }
    public Nullable`1<bool> RequireSymbols { get; public set; }
    public Nullable`1<bool> RequireUppercaseCharacters { get; public set; }
    public Nullable`1<bool> get_AllowUsersToChangePassword();
    public void set_AllowUsersToChangePassword(Nullable`1<bool> value);
    internal bool IsSetAllowUsersToChangePassword();
    public Nullable`1<bool> get_ExpirePasswords();
    public void set_ExpirePasswords(Nullable`1<bool> value);
    internal bool IsSetExpirePasswords();
    public Nullable`1<bool> get_HardExpiry();
    public void set_HardExpiry(Nullable`1<bool> value);
    internal bool IsSetHardExpiry();
    public Nullable`1<int> get_MaxPasswordAge();
    public void set_MaxPasswordAge(Nullable`1<int> value);
    internal bool IsSetMaxPasswordAge();
    public Nullable`1<int> get_MinimumPasswordLength();
    public void set_MinimumPasswordLength(Nullable`1<int> value);
    internal bool IsSetMinimumPasswordLength();
    public Nullable`1<int> get_PasswordReusePrevention();
    public void set_PasswordReusePrevention(Nullable`1<int> value);
    internal bool IsSetPasswordReusePrevention();
    public Nullable`1<bool> get_RequireLowercaseCharacters();
    public void set_RequireLowercaseCharacters(Nullable`1<bool> value);
    internal bool IsSetRequireLowercaseCharacters();
    public Nullable`1<bool> get_RequireNumbers();
    public void set_RequireNumbers(Nullable`1<bool> value);
    internal bool IsSetRequireNumbers();
    public Nullable`1<bool> get_RequireSymbols();
    public void set_RequireSymbols(Nullable`1<bool> value);
    internal bool IsSetRequireSymbols();
    public Nullable`1<bool> get_RequireUppercaseCharacters();
    public void set_RequireUppercaseCharacters(Nullable`1<bool> value);
    internal bool IsSetRequireUppercaseCharacters();
}
public class Amazon.IdentityManagement.Model.PasswordPolicyViolationException : AmazonIdentityManagementServiceException {
    public PasswordPolicyViolationException(string message);
    public PasswordPolicyViolationException(string message, Exception innerException);
    public PasswordPolicyViolationException(Exception innerException);
    public PasswordPolicyViolationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PasswordPolicyViolationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.PermissionsBoundaryDecisionDetail : object {
    private Nullable`1<bool> _allowedByPermissionsBoundary;
    public Nullable`1<bool> AllowedByPermissionsBoundary { get; public set; }
    public Nullable`1<bool> get_AllowedByPermissionsBoundary();
    public void set_AllowedByPermissionsBoundary(Nullable`1<bool> value);
    internal bool IsSetAllowedByPermissionsBoundary();
}
public class Amazon.IdentityManagement.Model.PolicyDetail : object {
    private string _policyDocument;
    private string _policyName;
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.IdentityManagement.Model.PolicyEvaluationException : AmazonIdentityManagementServiceException {
    public PolicyEvaluationException(string message);
    public PolicyEvaluationException(string message, Exception innerException);
    public PolicyEvaluationException(Exception innerException);
    public PolicyEvaluationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PolicyEvaluationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.PolicyGrantingServiceAccess : object {
    private string _entityName;
    private PolicyOwnerEntityType _entityType;
    private string _policyArn;
    private string _policyName;
    private PolicyType _policyType;
    [AWSPropertyAttribute]
public string EntityName { get; public set; }
    public PolicyOwnerEntityType EntityType { get; public set; }
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public PolicyType PolicyType { get; public set; }
    public string get_EntityName();
    public void set_EntityName(string value);
    internal bool IsSetEntityName();
    public PolicyOwnerEntityType get_EntityType();
    public void set_EntityType(PolicyOwnerEntityType value);
    internal bool IsSetEntityType();
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public PolicyType get_PolicyType();
    public void set_PolicyType(PolicyType value);
    internal bool IsSetPolicyType();
}
public class Amazon.IdentityManagement.Model.PolicyGroup : object {
    private string _groupId;
    private string _groupName;
    [AWSPropertyAttribute]
public string GroupId { get; public set; }
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    public string get_GroupId();
    public void set_GroupId(string value);
    internal bool IsSetGroupId();
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
}
public class Amazon.IdentityManagement.Model.PolicyNotAttachableException : AmazonIdentityManagementServiceException {
    public PolicyNotAttachableException(string message);
    public PolicyNotAttachableException(string message, Exception innerException);
    public PolicyNotAttachableException(Exception innerException);
    public PolicyNotAttachableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PolicyNotAttachableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.PolicyRole : object {
    private string _roleId;
    private string _roleName;
    [AWSPropertyAttribute]
public string RoleId { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_RoleId();
    public void set_RoleId(string value);
    internal bool IsSetRoleId();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.PolicyUser : object {
    private string _userId;
    private string _userName;
    [AWSPropertyAttribute]
public string UserId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.PolicyVersion : object {
    private Nullable`1<DateTime> _createDate;
    private string _document;
    private Nullable`1<bool> _isDefaultVersion;
    private string _versionId;
    public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public string Document { get; public set; }
    public Nullable`1<bool> IsDefaultVersion { get; public set; }
    public string VersionId { get; public set; }
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_Document();
    public void set_Document(string value);
    internal bool IsSetDocument();
    public Nullable`1<bool> get_IsDefaultVersion();
    public void set_IsDefaultVersion(Nullable`1<bool> value);
    internal bool IsSetIsDefaultVersion();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.IdentityManagement.Model.Position : object {
    private Nullable`1<int> _column;
    private Nullable`1<int> _line;
    public Nullable`1<int> Column { get; public set; }
    public Nullable`1<int> Line { get; public set; }
    public Nullable`1<int> get_Column();
    public void set_Column(Nullable`1<int> value);
    internal bool IsSetColumn();
    public Nullable`1<int> get_Line();
    public void set_Line(Nullable`1<int> value);
    internal bool IsSetLine();
}
public class Amazon.IdentityManagement.Model.PutGroupPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _policyDocument;
    private string _policyName;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public PutGroupPolicyRequest(string groupName, string policyName, string policyDocument);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.IdentityManagement.Model.PutGroupPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.PutRolePermissionsBoundaryRequest : AmazonIdentityManagementServiceRequest {
    private string _permissionsBoundary;
    private string _roleName;
    [AWSPropertyAttribute]
public string PermissionsBoundary { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_PermissionsBoundary();
    public void set_PermissionsBoundary(string value);
    internal bool IsSetPermissionsBoundary();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.PutRolePermissionsBoundaryResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.PutRolePolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyDocument;
    private string _policyName;
    private string _roleName;
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.PutRolePolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.PutUserPermissionsBoundaryRequest : AmazonIdentityManagementServiceRequest {
    private string _permissionsBoundary;
    private string _userName;
    [AWSPropertyAttribute]
public string PermissionsBoundary { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_PermissionsBoundary();
    public void set_PermissionsBoundary(string value);
    internal bool IsSetPermissionsBoundary();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.PutUserPermissionsBoundaryResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.PutUserPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyDocument;
    private string _policyName;
    private string _userName;
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public PutUserPolicyRequest(string userName, string policyName, string policyDocument);
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.PutUserPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.RemoveClientIDFromOpenIDConnectProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _clientID;
    private string _openIDConnectProviderArn;
    [AWSPropertyAttribute]
public string ClientID { get; public set; }
    [AWSPropertyAttribute]
public string OpenIDConnectProviderArn { get; public set; }
    public string get_ClientID();
    public void set_ClientID(string value);
    internal bool IsSetClientID();
    public string get_OpenIDConnectProviderArn();
    public void set_OpenIDConnectProviderArn(string value);
    internal bool IsSetOpenIDConnectProviderArn();
}
public class Amazon.IdentityManagement.Model.RemoveClientIDFromOpenIDConnectProviderResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.RemoveRoleFromInstanceProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _instanceProfileName;
    private string _roleName;
    [AWSPropertyAttribute]
public string InstanceProfileName { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_InstanceProfileName();
    public void set_InstanceProfileName(string value);
    internal bool IsSetInstanceProfileName();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.RemoveRoleFromInstanceProfileResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.RemoveUserFromGroupRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _userName;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public RemoveUserFromGroupRequest(string groupName, string userName);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.RemoveUserFromGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.ReportGenerationLimitExceededException : AmazonIdentityManagementServiceException {
    public ReportGenerationLimitExceededException(string message);
    public ReportGenerationLimitExceededException(string message, Exception innerException);
    public ReportGenerationLimitExceededException(Exception innerException);
    public ReportGenerationLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReportGenerationLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.ResetServiceSpecificCredentialRequest : AmazonIdentityManagementServiceRequest {
    private string _serviceSpecificCredentialId;
    private string _userName;
    [AWSPropertyAttribute]
public string ServiceSpecificCredentialId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServiceSpecificCredentialId();
    public void set_ServiceSpecificCredentialId(string value);
    internal bool IsSetServiceSpecificCredentialId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ResetServiceSpecificCredentialResponse : AmazonWebServiceResponse {
    private ServiceSpecificCredential _serviceSpecificCredential;
    public ServiceSpecificCredential ServiceSpecificCredential { get; public set; }
    public ServiceSpecificCredential get_ServiceSpecificCredential();
    public void set_ServiceSpecificCredential(ServiceSpecificCredential value);
    internal bool IsSetServiceSpecificCredential();
}
public class Amazon.IdentityManagement.Model.ResourceSpecificResult : object {
    private Dictionary`2<string, string> _evalDecisionDetails;
    private PolicyEvaluationDecisionType _evalResourceDecision;
    private string _evalResourceName;
    private List`1<Statement> _matchedStatements;
    private List`1<string> _missingContextValues;
    private PermissionsBoundaryDecisionDetail _permissionsBoundaryDecisionDetail;
    public Dictionary`2<string, string> EvalDecisionDetails { get; public set; }
    [AWSPropertyAttribute]
public PolicyEvaluationDecisionType EvalResourceDecision { get; public set; }
    [AWSPropertyAttribute]
public string EvalResourceName { get; public set; }
    public List`1<Statement> MatchedStatements { get; public set; }
    public List`1<string> MissingContextValues { get; public set; }
    public PermissionsBoundaryDecisionDetail PermissionsBoundaryDecisionDetail { get; public set; }
    public Dictionary`2<string, string> get_EvalDecisionDetails();
    public void set_EvalDecisionDetails(Dictionary`2<string, string> value);
    internal bool IsSetEvalDecisionDetails();
    public PolicyEvaluationDecisionType get_EvalResourceDecision();
    public void set_EvalResourceDecision(PolicyEvaluationDecisionType value);
    internal bool IsSetEvalResourceDecision();
    public string get_EvalResourceName();
    public void set_EvalResourceName(string value);
    internal bool IsSetEvalResourceName();
    public List`1<Statement> get_MatchedStatements();
    public void set_MatchedStatements(List`1<Statement> value);
    internal bool IsSetMatchedStatements();
    public List`1<string> get_MissingContextValues();
    public void set_MissingContextValues(List`1<string> value);
    internal bool IsSetMissingContextValues();
    public PermissionsBoundaryDecisionDetail get_PermissionsBoundaryDecisionDetail();
    public void set_PermissionsBoundaryDecisionDetail(PermissionsBoundaryDecisionDetail value);
    internal bool IsSetPermissionsBoundaryDecisionDetail();
}
public class Amazon.IdentityManagement.Model.ResyncMFADeviceRequest : AmazonIdentityManagementServiceRequest {
    private string _authenticationCode1;
    private string _authenticationCode2;
    private string _serialNumber;
    private string _userName;
    [AWSPropertyAttribute]
public string AuthenticationCode1 { get; public set; }
    [AWSPropertyAttribute]
public string AuthenticationCode2 { get; public set; }
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_AuthenticationCode1();
    public void set_AuthenticationCode1(string value);
    internal bool IsSetAuthenticationCode1();
    public string get_AuthenticationCode2();
    public void set_AuthenticationCode2(string value);
    internal bool IsSetAuthenticationCode2();
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ResyncMFADeviceResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.Role : object {
    private string _arn;
    private string _assumeRolePolicyDocument;
    private Nullable`1<DateTime> _createDate;
    private string _description;
    private Nullable`1<int> _maxSessionDuration;
    private string _path;
    private AttachedPermissionsBoundary _permissionsBoundary;
    private string _roleId;
    private RoleLastUsed _roleLastUsed;
    private string _roleName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string AssumeRolePolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxSessionDuration { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public AttachedPermissionsBoundary PermissionsBoundary { get; public set; }
    [AWSPropertyAttribute]
public string RoleId { get; public set; }
    public RoleLastUsed RoleLastUsed { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_AssumeRolePolicyDocument();
    public void set_AssumeRolePolicyDocument(string value);
    internal bool IsSetAssumeRolePolicyDocument();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<int> get_MaxSessionDuration();
    public void set_MaxSessionDuration(Nullable`1<int> value);
    internal bool IsSetMaxSessionDuration();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public AttachedPermissionsBoundary get_PermissionsBoundary();
    public void set_PermissionsBoundary(AttachedPermissionsBoundary value);
    internal bool IsSetPermissionsBoundary();
    public string get_RoleId();
    public void set_RoleId(string value);
    internal bool IsSetRoleId();
    public RoleLastUsed get_RoleLastUsed();
    public void set_RoleLastUsed(RoleLastUsed value);
    internal bool IsSetRoleLastUsed();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.RoleDetail : object {
    private string _arn;
    private string _assumeRolePolicyDocument;
    private List`1<AttachedPolicyType> _attachedManagedPolicies;
    private Nullable`1<DateTime> _createDate;
    private List`1<InstanceProfile> _instanceProfileList;
    private string _path;
    private AttachedPermissionsBoundary _permissionsBoundary;
    private string _roleId;
    private RoleLastUsed _roleLastUsed;
    private string _roleName;
    private List`1<PolicyDetail> _rolePolicyList;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string AssumeRolePolicyDocument { get; public set; }
    public List`1<AttachedPolicyType> AttachedManagedPolicies { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    public List`1<InstanceProfile> InstanceProfileList { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public AttachedPermissionsBoundary PermissionsBoundary { get; public set; }
    [AWSPropertyAttribute]
public string RoleId { get; public set; }
    public RoleLastUsed RoleLastUsed { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public List`1<PolicyDetail> RolePolicyList { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_AssumeRolePolicyDocument();
    public void set_AssumeRolePolicyDocument(string value);
    internal bool IsSetAssumeRolePolicyDocument();
    public List`1<AttachedPolicyType> get_AttachedManagedPolicies();
    public void set_AttachedManagedPolicies(List`1<AttachedPolicyType> value);
    internal bool IsSetAttachedManagedPolicies();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public List`1<InstanceProfile> get_InstanceProfileList();
    public void set_InstanceProfileList(List`1<InstanceProfile> value);
    internal bool IsSetInstanceProfileList();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public AttachedPermissionsBoundary get_PermissionsBoundary();
    public void set_PermissionsBoundary(AttachedPermissionsBoundary value);
    internal bool IsSetPermissionsBoundary();
    public string get_RoleId();
    public void set_RoleId(string value);
    internal bool IsSetRoleId();
    public RoleLastUsed get_RoleLastUsed();
    public void set_RoleLastUsed(RoleLastUsed value);
    internal bool IsSetRoleLastUsed();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
    public List`1<PolicyDetail> get_RolePolicyList();
    public void set_RolePolicyList(List`1<PolicyDetail> value);
    internal bool IsSetRolePolicyList();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.RoleLastUsed : object {
    private Nullable`1<DateTime> _lastUsedDate;
    private string _region;
    public Nullable`1<DateTime> LastUsedDate { get; public set; }
    public string Region { get; public set; }
    public Nullable`1<DateTime> get_LastUsedDate();
    public void set_LastUsedDate(Nullable`1<DateTime> value);
    internal bool IsSetLastUsedDate();
    public string get_Region();
    public void set_Region(string value);
    internal bool IsSetRegion();
}
public class Amazon.IdentityManagement.Model.RoleUsageType : object {
    private string _region;
    private List`1<string> _resources;
    [AWSPropertyAttribute]
public string Region { get; public set; }
    public List`1<string> Resources { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    internal bool IsSetRegion();
    public List`1<string> get_Resources();
    public void set_Resources(List`1<string> value);
    internal bool IsSetResources();
}
public class Amazon.IdentityManagement.Model.SAMLProviderListEntry : object {
    private string _arn;
    private Nullable`1<DateTime> _createDate;
    private Nullable`1<DateTime> _validUntil;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    public Nullable`1<DateTime> ValidUntil { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public Nullable`1<DateTime> get_ValidUntil();
    public void set_ValidUntil(Nullable`1<DateTime> value);
    internal bool IsSetValidUntil();
}
public class Amazon.IdentityManagement.Model.ServerCertificate : object {
    private string _certificateBody;
    private string _certificateChain;
    private ServerCertificateMetadata _serverCertificateMetadata;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string CertificateBody { get; public set; }
    [AWSPropertyAttribute]
public string CertificateChain { get; public set; }
    [AWSPropertyAttribute]
public ServerCertificateMetadata ServerCertificateMetadata { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public ServerCertificate(ServerCertificateMetadata serverCertificateMetadata, string certificateBody);
    public string get_CertificateBody();
    public void set_CertificateBody(string value);
    internal bool IsSetCertificateBody();
    public string get_CertificateChain();
    public void set_CertificateChain(string value);
    internal bool IsSetCertificateChain();
    public ServerCertificateMetadata get_ServerCertificateMetadata();
    public void set_ServerCertificateMetadata(ServerCertificateMetadata value);
    internal bool IsSetServerCertificateMetadata();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.ServerCertificateMetadata : object {
    private string _arn;
    private Nullable`1<DateTime> _expiration;
    private string _path;
    private string _serverCertificateId;
    private string _serverCertificateName;
    private Nullable`1<DateTime> _uploadDate;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public Nullable`1<DateTime> Expiration { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    [AWSPropertyAttribute]
public string ServerCertificateId { get; public set; }
    [AWSPropertyAttribute]
public string ServerCertificateName { get; public set; }
    public Nullable`1<DateTime> UploadDate { get; public set; }
    public ServerCertificateMetadata(string path, string serverCertificateName, string serverCertificateId, string arn);
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_Expiration();
    public void set_Expiration(Nullable`1<DateTime> value);
    internal bool IsSetExpiration();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public string get_ServerCertificateId();
    public void set_ServerCertificateId(string value);
    internal bool IsSetServerCertificateId();
    public string get_ServerCertificateName();
    public void set_ServerCertificateName(string value);
    internal bool IsSetServerCertificateName();
    public Nullable`1<DateTime> get_UploadDate();
    public void set_UploadDate(Nullable`1<DateTime> value);
    internal bool IsSetUploadDate();
}
public class Amazon.IdentityManagement.Model.ServiceFailureException : AmazonIdentityManagementServiceException {
    public ServiceFailureException(string message);
    public ServiceFailureException(string message, Exception innerException);
    public ServiceFailureException(Exception innerException);
    public ServiceFailureException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServiceFailureException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.ServiceLastAccessed : object {
    private Nullable`1<DateTime> _lastAuthenticated;
    private string _lastAuthenticatedEntity;
    private string _lastAuthenticatedRegion;
    private string _serviceName;
    private string _serviceNamespace;
    private Nullable`1<int> _totalAuthenticatedEntities;
    private List`1<TrackedActionLastAccessed> _trackedActionsLastAccessed;
    public Nullable`1<DateTime> LastAuthenticated { get; public set; }
    [AWSPropertyAttribute]
public string LastAuthenticatedEntity { get; public set; }
    public string LastAuthenticatedRegion { get; public set; }
    [AWSPropertyAttribute]
public string ServiceName { get; public set; }
    [AWSPropertyAttribute]
public string ServiceNamespace { get; public set; }
    public Nullable`1<int> TotalAuthenticatedEntities { get; public set; }
    public List`1<TrackedActionLastAccessed> TrackedActionsLastAccessed { get; public set; }
    public Nullable`1<DateTime> get_LastAuthenticated();
    public void set_LastAuthenticated(Nullable`1<DateTime> value);
    internal bool IsSetLastAuthenticated();
    public string get_LastAuthenticatedEntity();
    public void set_LastAuthenticatedEntity(string value);
    internal bool IsSetLastAuthenticatedEntity();
    public string get_LastAuthenticatedRegion();
    public void set_LastAuthenticatedRegion(string value);
    internal bool IsSetLastAuthenticatedRegion();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
    public string get_ServiceNamespace();
    public void set_ServiceNamespace(string value);
    internal bool IsSetServiceNamespace();
    public Nullable`1<int> get_TotalAuthenticatedEntities();
    public void set_TotalAuthenticatedEntities(Nullable`1<int> value);
    internal bool IsSetTotalAuthenticatedEntities();
    public List`1<TrackedActionLastAccessed> get_TrackedActionsLastAccessed();
    public void set_TrackedActionsLastAccessed(List`1<TrackedActionLastAccessed> value);
    internal bool IsSetTrackedActionsLastAccessed();
}
public class Amazon.IdentityManagement.Model.ServiceNotSupportedException : AmazonIdentityManagementServiceException {
    public ServiceNotSupportedException(string message);
    public ServiceNotSupportedException(string message, Exception innerException);
    public ServiceNotSupportedException(Exception innerException);
    public ServiceNotSupportedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServiceNotSupportedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.ServiceSpecificCredential : object {
    private Nullable`1<DateTime> _createDate;
    private string _serviceName;
    private string _servicePassword;
    private string _serviceSpecificCredentialId;
    private string _serviceUserName;
    private StatusType _status;
    private string _userName;
    [AWSPropertyAttribute]
public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public string ServiceName { get; public set; }
    [AWSPropertyAttribute]
public string ServicePassword { get; public set; }
    [AWSPropertyAttribute]
public string ServiceSpecificCredentialId { get; public set; }
    [AWSPropertyAttribute]
public string ServiceUserName { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
    public string get_ServicePassword();
    public void set_ServicePassword(string value);
    internal bool IsSetServicePassword();
    public string get_ServiceSpecificCredentialId();
    public void set_ServiceSpecificCredentialId(string value);
    internal bool IsSetServiceSpecificCredentialId();
    public string get_ServiceUserName();
    public void set_ServiceUserName(string value);
    internal bool IsSetServiceUserName();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.ServiceSpecificCredentialMetadata : object {
    private Nullable`1<DateTime> _createDate;
    private string _serviceName;
    private string _serviceSpecificCredentialId;
    private string _serviceUserName;
    private StatusType _status;
    private string _userName;
    [AWSPropertyAttribute]
public Nullable`1<DateTime> CreateDate { get; public set; }
    [AWSPropertyAttribute]
public string ServiceName { get; public set; }
    [AWSPropertyAttribute]
public string ServiceSpecificCredentialId { get; public set; }
    [AWSPropertyAttribute]
public string ServiceUserName { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal bool IsSetServiceName();
    public string get_ServiceSpecificCredentialId();
    public void set_ServiceSpecificCredentialId(string value);
    internal bool IsSetServiceSpecificCredentialId();
    public string get_ServiceUserName();
    public void set_ServiceUserName(string value);
    internal bool IsSetServiceUserName();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.SetDefaultPolicyVersionRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private string _versionId;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public string VersionId { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.IdentityManagement.Model.SetDefaultPolicyVersionResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.SetSecurityTokenServicePreferencesRequest : AmazonIdentityManagementServiceRequest {
    private GlobalEndpointTokenVersion _globalEndpointTokenVersion;
    [AWSPropertyAttribute]
public GlobalEndpointTokenVersion GlobalEndpointTokenVersion { get; public set; }
    public GlobalEndpointTokenVersion get_GlobalEndpointTokenVersion();
    public void set_GlobalEndpointTokenVersion(GlobalEndpointTokenVersion value);
    internal bool IsSetGlobalEndpointTokenVersion();
}
public class Amazon.IdentityManagement.Model.SetSecurityTokenServicePreferencesResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.SigningCertificate : object {
    private string _certificateBody;
    private string _certificateId;
    private StatusType _status;
    private Nullable`1<DateTime> _uploadDate;
    private string _userName;
    [AWSPropertyAttribute]
public string CertificateBody { get; public set; }
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    public Nullable`1<DateTime> UploadDate { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public SigningCertificate(string userName, string certificateId, string certificateBody, StatusType status);
    public string get_CertificateBody();
    public void set_CertificateBody(string value);
    internal bool IsSetCertificateBody();
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public Nullable`1<DateTime> get_UploadDate();
    public void set_UploadDate(Nullable`1<DateTime> value);
    internal bool IsSetUploadDate();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
internal class Amazon.IdentityManagement.Model.SimulateCustomPolicyPaginator : object {
    private IAmazonIdentityManagementService _client;
    private SimulateCustomPolicyRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<SimulateCustomPolicyResponse> Responses { get; }
    public IPaginatedEnumerable`1<EvaluationResult> EvaluationResults { get; }
    internal SimulateCustomPolicyPaginator(IAmazonIdentityManagementService client, SimulateCustomPolicyRequest request);
    public sealed virtual IPaginatedEnumerable`1<SimulateCustomPolicyResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<EvaluationResult> get_EvaluationResults();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.SimulateCustomPolicyPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-SimulateCustomPolicyResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<SimulateCustomPolicyResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.SimulateCustomPolicyResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.SimulateCustomPolicyRequest : AmazonIdentityManagementServiceRequest {
    private List`1<string> _actionNames;
    private string _callerArn;
    private List`1<ContextEntry> _contextEntries;
    private string _marker;
    private Nullable`1<int> _maxItems;
    private List`1<string> _permissionsBoundaryPolicyInputList;
    private List`1<string> _policyInputList;
    private List`1<string> _resourceArns;
    private string _resourceHandlingOption;
    private string _resourceOwner;
    private string _resourcePolicy;
    [AWSPropertyAttribute]
public List`1<string> ActionNames { get; public set; }
    [AWSPropertyAttribute]
public string CallerArn { get; public set; }
    public List`1<ContextEntry> ContextEntries { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public List`1<string> PermissionsBoundaryPolicyInputList { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> PolicyInputList { get; public set; }
    public List`1<string> ResourceArns { get; public set; }
    [AWSPropertyAttribute]
public string ResourceHandlingOption { get; public set; }
    [AWSPropertyAttribute]
public string ResourceOwner { get; public set; }
    [AWSPropertyAttribute]
public string ResourcePolicy { get; public set; }
    public List`1<string> get_ActionNames();
    public void set_ActionNames(List`1<string> value);
    internal bool IsSetActionNames();
    public string get_CallerArn();
    public void set_CallerArn(string value);
    internal bool IsSetCallerArn();
    public List`1<ContextEntry> get_ContextEntries();
    public void set_ContextEntries(List`1<ContextEntry> value);
    internal bool IsSetContextEntries();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public List`1<string> get_PermissionsBoundaryPolicyInputList();
    public void set_PermissionsBoundaryPolicyInputList(List`1<string> value);
    internal bool IsSetPermissionsBoundaryPolicyInputList();
    public List`1<string> get_PolicyInputList();
    public void set_PolicyInputList(List`1<string> value);
    internal bool IsSetPolicyInputList();
    public List`1<string> get_ResourceArns();
    public void set_ResourceArns(List`1<string> value);
    internal bool IsSetResourceArns();
    public string get_ResourceHandlingOption();
    public void set_ResourceHandlingOption(string value);
    internal bool IsSetResourceHandlingOption();
    public string get_ResourceOwner();
    public void set_ResourceOwner(string value);
    internal bool IsSetResourceOwner();
    public string get_ResourcePolicy();
    public void set_ResourcePolicy(string value);
    internal bool IsSetResourcePolicy();
}
public class Amazon.IdentityManagement.Model.SimulateCustomPolicyResponse : AmazonWebServiceResponse {
    private List`1<EvaluationResult> _evaluationResults;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    public List`1<EvaluationResult> EvaluationResults { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<EvaluationResult> get_EvaluationResults();
    public void set_EvaluationResults(List`1<EvaluationResult> value);
    internal bool IsSetEvaluationResults();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.IdentityManagement.Model.SimulatePrincipalPolicyPaginator : object {
    private IAmazonIdentityManagementService _client;
    private SimulatePrincipalPolicyRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<SimulatePrincipalPolicyResponse> Responses { get; }
    public IPaginatedEnumerable`1<EvaluationResult> EvaluationResults { get; }
    internal SimulatePrincipalPolicyPaginator(IAmazonIdentityManagementService client, SimulatePrincipalPolicyRequest request);
    public sealed virtual IPaginatedEnumerable`1<SimulatePrincipalPolicyResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<EvaluationResult> get_EvaluationResults();
    [AsyncIteratorStateMachineAttribute("Amazon.IdentityManagement.Model.SimulatePrincipalPolicyPaginator/<Amazon-Runtime-IPaginator<Amazon-IdentityManagement-Model-SimulatePrincipalPolicyResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<SimulatePrincipalPolicyResponse> Amazon.Runtime.IPaginator<Amazon.IdentityManagement.Model.SimulatePrincipalPolicyResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.IdentityManagement.Model.SimulatePrincipalPolicyRequest : AmazonIdentityManagementServiceRequest {
    private List`1<string> _actionNames;
    private string _callerArn;
    private List`1<ContextEntry> _contextEntries;
    private string _marker;
    private Nullable`1<int> _maxItems;
    private List`1<string> _permissionsBoundaryPolicyInputList;
    private List`1<string> _policyInputList;
    private string _policySourceArn;
    private List`1<string> _resourceArns;
    private string _resourceHandlingOption;
    private string _resourceOwner;
    private string _resourcePolicy;
    [AWSPropertyAttribute]
public List`1<string> ActionNames { get; public set; }
    [AWSPropertyAttribute]
public string CallerArn { get; public set; }
    public List`1<ContextEntry> ContextEntries { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public List`1<string> PermissionsBoundaryPolicyInputList { get; public set; }
    public List`1<string> PolicyInputList { get; public set; }
    [AWSPropertyAttribute]
public string PolicySourceArn { get; public set; }
    public List`1<string> ResourceArns { get; public set; }
    [AWSPropertyAttribute]
public string ResourceHandlingOption { get; public set; }
    [AWSPropertyAttribute]
public string ResourceOwner { get; public set; }
    [AWSPropertyAttribute]
public string ResourcePolicy { get; public set; }
    public List`1<string> get_ActionNames();
    public void set_ActionNames(List`1<string> value);
    internal bool IsSetActionNames();
    public string get_CallerArn();
    public void set_CallerArn(string value);
    internal bool IsSetCallerArn();
    public List`1<ContextEntry> get_ContextEntries();
    public void set_ContextEntries(List`1<ContextEntry> value);
    internal bool IsSetContextEntries();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public List`1<string> get_PermissionsBoundaryPolicyInputList();
    public void set_PermissionsBoundaryPolicyInputList(List`1<string> value);
    internal bool IsSetPermissionsBoundaryPolicyInputList();
    public List`1<string> get_PolicyInputList();
    public void set_PolicyInputList(List`1<string> value);
    internal bool IsSetPolicyInputList();
    public string get_PolicySourceArn();
    public void set_PolicySourceArn(string value);
    internal bool IsSetPolicySourceArn();
    public List`1<string> get_ResourceArns();
    public void set_ResourceArns(List`1<string> value);
    internal bool IsSetResourceArns();
    public string get_ResourceHandlingOption();
    public void set_ResourceHandlingOption(string value);
    internal bool IsSetResourceHandlingOption();
    public string get_ResourceOwner();
    public void set_ResourceOwner(string value);
    internal bool IsSetResourceOwner();
    public string get_ResourcePolicy();
    public void set_ResourcePolicy(string value);
    internal bool IsSetResourcePolicy();
}
public class Amazon.IdentityManagement.Model.SimulatePrincipalPolicyResponse : AmazonWebServiceResponse {
    private List`1<EvaluationResult> _evaluationResults;
    private Nullable`1<bool> _isTruncated;
    private string _marker;
    public List`1<EvaluationResult> EvaluationResults { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string Marker { get; public set; }
    public List`1<EvaluationResult> get_EvaluationResults();
    public void set_EvaluationResults(List`1<EvaluationResult> value);
    internal bool IsSetEvaluationResults();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.IdentityManagement.Model.SSHPublicKey : object {
    private string _fingerprint;
    private string _sshPublicKeyBody;
    private string _sshPublicKeyId;
    private StatusType _status;
    private Nullable`1<DateTime> _uploadDate;
    private string _userName;
    [AWSPropertyAttribute]
public string Fingerprint { get; public set; }
    [AWSPropertyAttribute]
public string SSHPublicKeyBody { get; public set; }
    [AWSPropertyAttribute]
public string SSHPublicKeyId { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    public Nullable`1<DateTime> UploadDate { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_Fingerprint();
    public void set_Fingerprint(string value);
    internal bool IsSetFingerprint();
    public string get_SSHPublicKeyBody();
    public void set_SSHPublicKeyBody(string value);
    internal bool IsSetSSHPublicKeyBody();
    public string get_SSHPublicKeyId();
    public void set_SSHPublicKeyId(string value);
    internal bool IsSetSSHPublicKeyId();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public Nullable`1<DateTime> get_UploadDate();
    public void set_UploadDate(Nullable`1<DateTime> value);
    internal bool IsSetUploadDate();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.SSHPublicKeyMetadata : object {
    private string _sshPublicKeyId;
    private StatusType _status;
    private Nullable`1<DateTime> _uploadDate;
    private string _userName;
    [AWSPropertyAttribute]
public string SSHPublicKeyId { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> UploadDate { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_SSHPublicKeyId();
    public void set_SSHPublicKeyId(string value);
    internal bool IsSetSSHPublicKeyId();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public Nullable`1<DateTime> get_UploadDate();
    public void set_UploadDate(Nullable`1<DateTime> value);
    internal bool IsSetUploadDate();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.Statement : object {
    private Position _endPosition;
    private string _sourcePolicyId;
    private PolicySourceType _sourcePolicyType;
    private Position _startPosition;
    public Position EndPosition { get; public set; }
    public string SourcePolicyId { get; public set; }
    public PolicySourceType SourcePolicyType { get; public set; }
    public Position StartPosition { get; public set; }
    public Position get_EndPosition();
    public void set_EndPosition(Position value);
    internal bool IsSetEndPosition();
    public string get_SourcePolicyId();
    public void set_SourcePolicyId(string value);
    internal bool IsSetSourcePolicyId();
    public PolicySourceType get_SourcePolicyType();
    public void set_SourcePolicyType(PolicySourceType value);
    internal bool IsSetSourcePolicyType();
    public Position get_StartPosition();
    public void set_StartPosition(Position value);
    internal bool IsSetStartPosition();
}
public class Amazon.IdentityManagement.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.IdentityManagement.Model.TagInstanceProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _instanceProfileName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string InstanceProfileName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_InstanceProfileName();
    public void set_InstanceProfileName(string value);
    internal bool IsSetInstanceProfileName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.TagInstanceProfileResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.TagMFADeviceRequest : AmazonIdentityManagementServiceRequest {
    private string _serialNumber;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.TagMFADeviceResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.TagOpenIDConnectProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _openIDConnectProviderArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string OpenIDConnectProviderArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_OpenIDConnectProviderArn();
    public void set_OpenIDConnectProviderArn(string value);
    internal bool IsSetOpenIDConnectProviderArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.TagOpenIDConnectProviderResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.TagPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.TagPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.TagRoleRequest : AmazonIdentityManagementServiceRequest {
    private string _roleName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.TagRoleResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.TagSAMLProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _samlProviderArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string SAMLProviderArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_SAMLProviderArn();
    public void set_SAMLProviderArn(string value);
    internal bool IsSetSAMLProviderArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.TagSAMLProviderResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.TagServerCertificateRequest : AmazonIdentityManagementServiceRequest {
    private string _serverCertificateName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ServerCertificateName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_ServerCertificateName();
    public void set_ServerCertificateName(string value);
    internal bool IsSetServerCertificateName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.TagServerCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.TagUserRequest : AmazonIdentityManagementServiceRequest {
    private List`1<Tag> _tags;
    private string _userName;
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.TagUserResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.TrackedActionLastAccessed : object {
    private string _actionName;
    private string _lastAccessedEntity;
    private string _lastAccessedRegion;
    private Nullable`1<DateTime> _lastAccessedTime;
    public string ActionName { get; public set; }
    [AWSPropertyAttribute]
public string LastAccessedEntity { get; public set; }
    public string LastAccessedRegion { get; public set; }
    public Nullable`1<DateTime> LastAccessedTime { get; public set; }
    public string get_ActionName();
    public void set_ActionName(string value);
    internal bool IsSetActionName();
    public string get_LastAccessedEntity();
    public void set_LastAccessedEntity(string value);
    internal bool IsSetLastAccessedEntity();
    public string get_LastAccessedRegion();
    public void set_LastAccessedRegion(string value);
    internal bool IsSetLastAccessedRegion();
    public Nullable`1<DateTime> get_LastAccessedTime();
    public void set_LastAccessedTime(Nullable`1<DateTime> value);
    internal bool IsSetLastAccessedTime();
}
public class Amazon.IdentityManagement.Model.UnmodifiableEntityException : AmazonIdentityManagementServiceException {
    public UnmodifiableEntityException(string message);
    public UnmodifiableEntityException(string message, Exception innerException);
    public UnmodifiableEntityException(Exception innerException);
    public UnmodifiableEntityException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnmodifiableEntityException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.UnrecognizedPublicKeyEncodingException : AmazonIdentityManagementServiceException {
    public UnrecognizedPublicKeyEncodingException(string message);
    public UnrecognizedPublicKeyEncodingException(string message, Exception innerException);
    public UnrecognizedPublicKeyEncodingException(Exception innerException);
    public UnrecognizedPublicKeyEncodingException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnrecognizedPublicKeyEncodingException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.IdentityManagement.Model.UntagInstanceProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _instanceProfileName;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string InstanceProfileName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_InstanceProfileName();
    public void set_InstanceProfileName(string value);
    internal bool IsSetInstanceProfileName();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.IdentityManagement.Model.UntagInstanceProfileResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UntagMFADeviceRequest : AmazonIdentityManagementServiceRequest {
    private string _serialNumber;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.IdentityManagement.Model.UntagMFADeviceResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UntagOpenIDConnectProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _openIDConnectProviderArn;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string OpenIDConnectProviderArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_OpenIDConnectProviderArn();
    public void set_OpenIDConnectProviderArn(string value);
    internal bool IsSetOpenIDConnectProviderArn();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.IdentityManagement.Model.UntagOpenIDConnectProviderResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UntagPolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyArn;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string PolicyArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_PolicyArn();
    public void set_PolicyArn(string value);
    internal bool IsSetPolicyArn();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.IdentityManagement.Model.UntagPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UntagRoleRequest : AmazonIdentityManagementServiceRequest {
    private string _roleName;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.IdentityManagement.Model.UntagRoleResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UntagSAMLProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _samlProviderArn;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string SAMLProviderArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_SAMLProviderArn();
    public void set_SAMLProviderArn(string value);
    internal bool IsSetSAMLProviderArn();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.IdentityManagement.Model.UntagSAMLProviderResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UntagServerCertificateRequest : AmazonIdentityManagementServiceRequest {
    private string _serverCertificateName;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string ServerCertificateName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_ServerCertificateName();
    public void set_ServerCertificateName(string value);
    internal bool IsSetServerCertificateName();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.IdentityManagement.Model.UntagServerCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UntagUserRequest : AmazonIdentityManagementServiceRequest {
    private List`1<string> _tagKeys;
    private string _userName;
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UntagUserResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateAccessKeyRequest : AmazonIdentityManagementServiceRequest {
    private string _accessKeyId;
    private StatusType _status;
    private string _userName;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public UpdateAccessKeyRequest(string accessKeyId, StatusType status);
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UpdateAccessKeyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateAccountPasswordPolicyRequest : AmazonIdentityManagementServiceRequest {
    private Nullable`1<bool> _allowUsersToChangePassword;
    private Nullable`1<bool> _hardExpiry;
    private Nullable`1<int> _maxPasswordAge;
    private Nullable`1<int> _minimumPasswordLength;
    private Nullable`1<int> _passwordReusePrevention;
    private Nullable`1<bool> _requireLowercaseCharacters;
    private Nullable`1<bool> _requireNumbers;
    private Nullable`1<bool> _requireSymbols;
    private Nullable`1<bool> _requireUppercaseCharacters;
    public Nullable`1<bool> AllowUsersToChangePassword { get; public set; }
    public Nullable`1<bool> HardExpiry { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxPasswordAge { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MinimumPasswordLength { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PasswordReusePrevention { get; public set; }
    public Nullable`1<bool> RequireLowercaseCharacters { get; public set; }
    public Nullable`1<bool> RequireNumbers { get; public set; }
    public Nullable`1<bool> RequireSymbols { get; public set; }
    public Nullable`1<bool> RequireUppercaseCharacters { get; public set; }
    public Nullable`1<bool> get_AllowUsersToChangePassword();
    public void set_AllowUsersToChangePassword(Nullable`1<bool> value);
    internal bool IsSetAllowUsersToChangePassword();
    public Nullable`1<bool> get_HardExpiry();
    public void set_HardExpiry(Nullable`1<bool> value);
    internal bool IsSetHardExpiry();
    public Nullable`1<int> get_MaxPasswordAge();
    public void set_MaxPasswordAge(Nullable`1<int> value);
    internal bool IsSetMaxPasswordAge();
    public Nullable`1<int> get_MinimumPasswordLength();
    public void set_MinimumPasswordLength(Nullable`1<int> value);
    internal bool IsSetMinimumPasswordLength();
    public Nullable`1<int> get_PasswordReusePrevention();
    public void set_PasswordReusePrevention(Nullable`1<int> value);
    internal bool IsSetPasswordReusePrevention();
    public Nullable`1<bool> get_RequireLowercaseCharacters();
    public void set_RequireLowercaseCharacters(Nullable`1<bool> value);
    internal bool IsSetRequireLowercaseCharacters();
    public Nullable`1<bool> get_RequireNumbers();
    public void set_RequireNumbers(Nullable`1<bool> value);
    internal bool IsSetRequireNumbers();
    public Nullable`1<bool> get_RequireSymbols();
    public void set_RequireSymbols(Nullable`1<bool> value);
    internal bool IsSetRequireSymbols();
    public Nullable`1<bool> get_RequireUppercaseCharacters();
    public void set_RequireUppercaseCharacters(Nullable`1<bool> value);
    internal bool IsSetRequireUppercaseCharacters();
}
public class Amazon.IdentityManagement.Model.UpdateAccountPasswordPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateAssumeRolePolicyRequest : AmazonIdentityManagementServiceRequest {
    private string _policyDocument;
    private string _roleName;
    [AWSPropertyAttribute]
public string PolicyDocument { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_PolicyDocument();
    public void set_PolicyDocument(string value);
    internal bool IsSetPolicyDocument();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.UpdateAssumeRolePolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateGroupRequest : AmazonIdentityManagementServiceRequest {
    private string _groupName;
    private string _newGroupName;
    private string _newPath;
    [AWSPropertyAttribute]
public string GroupName { get; public set; }
    [AWSPropertyAttribute]
public string NewGroupName { get; public set; }
    [AWSPropertyAttribute]
public string NewPath { get; public set; }
    public UpdateGroupRequest(string groupName);
    public string get_GroupName();
    public void set_GroupName(string value);
    internal bool IsSetGroupName();
    public string get_NewGroupName();
    public void set_NewGroupName(string value);
    internal bool IsSetNewGroupName();
    public string get_NewPath();
    public void set_NewPath(string value);
    internal bool IsSetNewPath();
}
public class Amazon.IdentityManagement.Model.UpdateGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateLoginProfileRequest : AmazonIdentityManagementServiceRequest {
    private string _password;
    private Nullable`1<bool> _passwordResetRequired;
    private string _userName;
    [AWSPropertyAttribute]
public string Password { get; public set; }
    public Nullable`1<bool> PasswordResetRequired { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public UpdateLoginProfileRequest(string userName);
    public string get_Password();
    public void set_Password(string value);
    internal bool IsSetPassword();
    public Nullable`1<bool> get_PasswordResetRequired();
    public void set_PasswordResetRequired(Nullable`1<bool> value);
    internal bool IsSetPasswordResetRequired();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UpdateLoginProfileResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateOpenIDConnectProviderThumbprintRequest : AmazonIdentityManagementServiceRequest {
    private string _openIDConnectProviderArn;
    private List`1<string> _thumbprintList;
    [AWSPropertyAttribute]
public string OpenIDConnectProviderArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ThumbprintList { get; public set; }
    public string get_OpenIDConnectProviderArn();
    public void set_OpenIDConnectProviderArn(string value);
    internal bool IsSetOpenIDConnectProviderArn();
    public List`1<string> get_ThumbprintList();
    public void set_ThumbprintList(List`1<string> value);
    internal bool IsSetThumbprintList();
}
public class Amazon.IdentityManagement.Model.UpdateOpenIDConnectProviderThumbprintResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateRoleDescriptionRequest : AmazonIdentityManagementServiceRequest {
    private string _description;
    private string _roleName;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.UpdateRoleDescriptionResponse : AmazonWebServiceResponse {
    private Role _role;
    public Role Role { get; public set; }
    public Role get_Role();
    public void set_Role(Role value);
    internal bool IsSetRole();
}
public class Amazon.IdentityManagement.Model.UpdateRoleRequest : AmazonIdentityManagementServiceRequest {
    private string _description;
    private Nullable`1<int> _maxSessionDuration;
    private string _roleName;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxSessionDuration { get; public set; }
    [AWSPropertyAttribute]
public string RoleName { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<int> get_MaxSessionDuration();
    public void set_MaxSessionDuration(Nullable`1<int> value);
    internal bool IsSetMaxSessionDuration();
    public string get_RoleName();
    public void set_RoleName(string value);
    internal bool IsSetRoleName();
}
public class Amazon.IdentityManagement.Model.UpdateRoleResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateSAMLProviderRequest : AmazonIdentityManagementServiceRequest {
    private string _samlMetadataDocument;
    private string _samlProviderArn;
    [AWSPropertyAttribute]
public string SAMLMetadataDocument { get; public set; }
    [AWSPropertyAttribute]
public string SAMLProviderArn { get; public set; }
    public string get_SAMLMetadataDocument();
    public void set_SAMLMetadataDocument(string value);
    internal bool IsSetSAMLMetadataDocument();
    public string get_SAMLProviderArn();
    public void set_SAMLProviderArn(string value);
    internal bool IsSetSAMLProviderArn();
}
public class Amazon.IdentityManagement.Model.UpdateSAMLProviderResponse : AmazonWebServiceResponse {
    private string _samlProviderArn;
    [AWSPropertyAttribute]
public string SAMLProviderArn { get; public set; }
    public string get_SAMLProviderArn();
    public void set_SAMLProviderArn(string value);
    internal bool IsSetSAMLProviderArn();
}
public class Amazon.IdentityManagement.Model.UpdateServerCertificateRequest : AmazonIdentityManagementServiceRequest {
    private string _newPath;
    private string _newServerCertificateName;
    private string _serverCertificateName;
    [AWSPropertyAttribute]
public string NewPath { get; public set; }
    [AWSPropertyAttribute]
public string NewServerCertificateName { get; public set; }
    [AWSPropertyAttribute]
public string ServerCertificateName { get; public set; }
    public UpdateServerCertificateRequest(string serverCertificateName);
    public string get_NewPath();
    public void set_NewPath(string value);
    internal bool IsSetNewPath();
    public string get_NewServerCertificateName();
    public void set_NewServerCertificateName(string value);
    internal bool IsSetNewServerCertificateName();
    public string get_ServerCertificateName();
    public void set_ServerCertificateName(string value);
    internal bool IsSetServerCertificateName();
}
public class Amazon.IdentityManagement.Model.UpdateServerCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateServiceSpecificCredentialRequest : AmazonIdentityManagementServiceRequest {
    private string _serviceSpecificCredentialId;
    private StatusType _status;
    private string _userName;
    [AWSPropertyAttribute]
public string ServiceSpecificCredentialId { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServiceSpecificCredentialId();
    public void set_ServiceSpecificCredentialId(string value);
    internal bool IsSetServiceSpecificCredentialId();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UpdateServiceSpecificCredentialResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateSigningCertificateRequest : AmazonIdentityManagementServiceRequest {
    private string _certificateId;
    private StatusType _status;
    private string _userName;
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public UpdateSigningCertificateRequest(string certificateId, StatusType status);
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UpdateSigningCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateSSHPublicKeyRequest : AmazonIdentityManagementServiceRequest {
    private string _sshPublicKeyId;
    private StatusType _status;
    private string _userName;
    [AWSPropertyAttribute]
public string SSHPublicKeyId { get; public set; }
    [AWSPropertyAttribute]
public StatusType Status { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_SSHPublicKeyId();
    public void set_SSHPublicKeyId(string value);
    internal bool IsSetSSHPublicKeyId();
    public StatusType get_Status();
    public void set_Status(StatusType value);
    internal bool IsSetStatus();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UpdateSSHPublicKeyResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UpdateUserRequest : AmazonIdentityManagementServiceRequest {
    private string _newPath;
    private string _newUserName;
    private string _userName;
    [AWSPropertyAttribute]
public string NewPath { get; public set; }
    [AWSPropertyAttribute]
public string NewUserName { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public UpdateUserRequest(string userName);
    public string get_NewPath();
    public void set_NewPath(string value);
    internal bool IsSetNewPath();
    public string get_NewUserName();
    public void set_NewUserName(string value);
    internal bool IsSetNewUserName();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UpdateUserResponse : AmazonWebServiceResponse {
}
public class Amazon.IdentityManagement.Model.UploadServerCertificateRequest : AmazonIdentityManagementServiceRequest {
    private string _certificateBody;
    private string _certificateChain;
    private string _path;
    private string _privateKey;
    private string _serverCertificateName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string CertificateBody { get; public set; }
    [AWSPropertyAttribute]
public string CertificateChain { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    [AWSPropertyAttribute]
public string PrivateKey { get; public set; }
    [AWSPropertyAttribute]
public string ServerCertificateName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public UploadServerCertificateRequest(string serverCertificateName, string certificateBody, string privateKey);
    public string get_CertificateBody();
    public void set_CertificateBody(string value);
    internal bool IsSetCertificateBody();
    public string get_CertificateChain();
    public void set_CertificateChain(string value);
    internal bool IsSetCertificateChain();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public string get_PrivateKey();
    public void set_PrivateKey(string value);
    internal bool IsSetPrivateKey();
    public string get_ServerCertificateName();
    public void set_ServerCertificateName(string value);
    internal bool IsSetServerCertificateName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.UploadServerCertificateResponse : AmazonWebServiceResponse {
    private ServerCertificateMetadata _serverCertificateMetadata;
    private List`1<Tag> _tags;
    public ServerCertificateMetadata ServerCertificateMetadata { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public ServerCertificateMetadata get_ServerCertificateMetadata();
    public void set_ServerCertificateMetadata(ServerCertificateMetadata value);
    internal bool IsSetServerCertificateMetadata();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.IdentityManagement.Model.UploadSigningCertificateRequest : AmazonIdentityManagementServiceRequest {
    private string _certificateBody;
    private string _userName;
    [AWSPropertyAttribute]
public string CertificateBody { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public UploadSigningCertificateRequest(string certificateBody);
    public string get_CertificateBody();
    public void set_CertificateBody(string value);
    internal bool IsSetCertificateBody();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UploadSigningCertificateResponse : AmazonWebServiceResponse {
    private SigningCertificate _certificate;
    [AWSPropertyAttribute]
public SigningCertificate Certificate { get; public set; }
    public SigningCertificate get_Certificate();
    public void set_Certificate(SigningCertificate value);
    internal bool IsSetCertificate();
}
public class Amazon.IdentityManagement.Model.UploadSSHPublicKeyRequest : AmazonIdentityManagementServiceRequest {
    private string _sshPublicKeyBody;
    private string _userName;
    [AWSPropertyAttribute]
public string SSHPublicKeyBody { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_SSHPublicKeyBody();
    public void set_SSHPublicKeyBody(string value);
    internal bool IsSetSSHPublicKeyBody();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UploadSSHPublicKeyResponse : AmazonWebServiceResponse {
    private SSHPublicKey _sshPublicKey;
    public SSHPublicKey SSHPublicKey { get; public set; }
    public SSHPublicKey get_SSHPublicKey();
    public void set_SSHPublicKey(SSHPublicKey value);
    internal bool IsSetSSHPublicKey();
}
public class Amazon.IdentityManagement.Model.User : object {
    private string _arn;
    private Nullable`1<DateTime> _createDate;
    private Nullable`1<DateTime> _passwordLastUsed;
    private string _path;
    private AttachedPermissionsBoundary _permissionsBoundary;
    private List`1<Tag> _tags;
    private string _userId;
    private string _userName;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> CreateDate { get; public set; }
    public Nullable`1<DateTime> PasswordLastUsed { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public AttachedPermissionsBoundary PermissionsBoundary { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UserId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public User(string path, string userName, string userId, string arn, Nullable`1<DateTime> createDate);
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public Nullable`1<DateTime> get_PasswordLastUsed();
    public void set_PasswordLastUsed(Nullable`1<DateTime> value);
    internal bool IsSetPasswordLastUsed();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public AttachedPermissionsBoundary get_PermissionsBoundary();
    public void set_PermissionsBoundary(AttachedPermissionsBoundary value);
    internal bool IsSetPermissionsBoundary();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.IdentityManagement.Model.UserDetail : object {
    private string _arn;
    private List`1<AttachedPolicyType> _attachedManagedPolicies;
    private Nullable`1<DateTime> _createDate;
    private List`1<string> _groupList;
    private string _path;
    private AttachedPermissionsBoundary _permissionsBoundary;
    private List`1<Tag> _tags;
    private string _userId;
    private string _userName;
    private List`1<PolicyDetail> _userPolicyList;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public List`1<AttachedPolicyType> AttachedManagedPolicies { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    public List`1<string> GroupList { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public AttachedPermissionsBoundary PermissionsBoundary { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UserId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public List`1<PolicyDetail> UserPolicyList { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public List`1<AttachedPolicyType> get_AttachedManagedPolicies();
    public void set_AttachedManagedPolicies(List`1<AttachedPolicyType> value);
    internal bool IsSetAttachedManagedPolicies();
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    internal bool IsSetCreateDate();
    public List`1<string> get_GroupList();
    public void set_GroupList(List`1<string> value);
    internal bool IsSetGroupList();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
    public AttachedPermissionsBoundary get_PermissionsBoundary();
    public void set_PermissionsBoundary(AttachedPermissionsBoundary value);
    internal bool IsSetPermissionsBoundary();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
    public List`1<PolicyDetail> get_UserPolicyList();
    public void set_UserPolicyList(List`1<PolicyDetail> value);
    internal bool IsSetUserPolicyList();
}
public class Amazon.IdentityManagement.Model.VirtualMFADevice : object {
    private MemoryStream _base32StringSeed;
    private Nullable`1<DateTime> _enableDate;
    private MemoryStream _qrCodePNG;
    private string _serialNumber;
    private List`1<Tag> _tags;
    private User _user;
    [AWSPropertyAttribute]
public MemoryStream Base32StringSeed { get; public set; }
    public Nullable`1<DateTime> EnableDate { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream QRCodePNG { get; public set; }
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public User User { get; public set; }
    public MemoryStream get_Base32StringSeed();
    public void set_Base32StringSeed(MemoryStream value);
    internal bool IsSetBase32StringSeed();
    public Nullable`1<DateTime> get_EnableDate();
    public void set_EnableDate(Nullable`1<DateTime> value);
    internal bool IsSetEnableDate();
    public MemoryStream get_QRCodePNG();
    public void set_QRCodePNG(MemoryStream value);
    internal bool IsSetQRCodePNG();
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public User get_User();
    public void set_User(User value);
    internal bool IsSetUser();
}
public class Amazon.IdentityManagement.PermissionsBoundaryAttachmentType : ConstantClass {
    public static PermissionsBoundaryAttachmentType PermissionsBoundaryPolicy;
    public PermissionsBoundaryAttachmentType(string value);
    private static PermissionsBoundaryAttachmentType();
    public static PermissionsBoundaryAttachmentType FindValue(string value);
    public static PermissionsBoundaryAttachmentType op_Implicit(string value);
}
public class Amazon.IdentityManagement.PolicyEvaluationDecisionType : ConstantClass {
    public static PolicyEvaluationDecisionType Allowed;
    public static PolicyEvaluationDecisionType ExplicitDeny;
    public static PolicyEvaluationDecisionType ImplicitDeny;
    public PolicyEvaluationDecisionType(string value);
    private static PolicyEvaluationDecisionType();
    public static PolicyEvaluationDecisionType FindValue(string value);
    public static PolicyEvaluationDecisionType op_Implicit(string value);
}
public class Amazon.IdentityManagement.PolicyOwnerEntityType : ConstantClass {
    public static PolicyOwnerEntityType GROUP;
    public static PolicyOwnerEntityType ROLE;
    public static PolicyOwnerEntityType USER;
    public PolicyOwnerEntityType(string value);
    private static PolicyOwnerEntityType();
    public static PolicyOwnerEntityType FindValue(string value);
    public static PolicyOwnerEntityType op_Implicit(string value);
}
public class Amazon.IdentityManagement.PolicyScopeType : ConstantClass {
    public static PolicyScopeType All;
    public static PolicyScopeType AWS;
    public static PolicyScopeType Local;
    public PolicyScopeType(string value);
    private static PolicyScopeType();
    public static PolicyScopeType FindValue(string value);
    public static PolicyScopeType op_Implicit(string value);
}
public class Amazon.IdentityManagement.PolicySourceType : ConstantClass {
    public static PolicySourceType AwsManaged;
    public static PolicySourceType Group;
    public static PolicySourceType None;
    public static PolicySourceType Resource;
    public static PolicySourceType Role;
    public static PolicySourceType User;
    public static PolicySourceType UserManaged;
    public PolicySourceType(string value);
    private static PolicySourceType();
    public static PolicySourceType FindValue(string value);
    public static PolicySourceType op_Implicit(string value);
}
public class Amazon.IdentityManagement.PolicyType : ConstantClass {
    public static PolicyType INLINE;
    public static PolicyType MANAGED;
    public PolicyType(string value);
    private static PolicyType();
    public static PolicyType FindValue(string value);
    public static PolicyType op_Implicit(string value);
}
public class Amazon.IdentityManagement.PolicyUsageType : ConstantClass {
    public static PolicyUsageType PermissionsBoundary;
    public static PolicyUsageType PermissionsPolicy;
    public PolicyUsageType(string value);
    private static PolicyUsageType();
    public static PolicyUsageType FindValue(string value);
    public static PolicyUsageType op_Implicit(string value);
}
public class Amazon.IdentityManagement.ReportFormatType : ConstantClass {
    public static ReportFormatType TextCsv;
    public ReportFormatType(string value);
    private static ReportFormatType();
    public static ReportFormatType FindValue(string value);
    public static ReportFormatType op_Implicit(string value);
}
public class Amazon.IdentityManagement.ReportStateType : ConstantClass {
    public static ReportStateType COMPLETE;
    public static ReportStateType INPROGRESS;
    public static ReportStateType STARTED;
    public ReportStateType(string value);
    private static ReportStateType();
    public static ReportStateType FindValue(string value);
    public static ReportStateType op_Implicit(string value);
}
public class Amazon.IdentityManagement.SortKeyType : ConstantClass {
    public static SortKeyType LAST_AUTHENTICATED_TIME_ASCENDING;
    public static SortKeyType LAST_AUTHENTICATED_TIME_DESCENDING;
    public static SortKeyType SERVICE_NAMESPACE_ASCENDING;
    public static SortKeyType SERVICE_NAMESPACE_DESCENDING;
    public SortKeyType(string value);
    private static SortKeyType();
    public static SortKeyType FindValue(string value);
    public static SortKeyType op_Implicit(string value);
}
public class Amazon.IdentityManagement.StatusType : ConstantClass {
    public static StatusType Active;
    public static StatusType Inactive;
    public StatusType(string value);
    private static StatusType();
    public static StatusType FindValue(string value);
    public static StatusType op_Implicit(string value);
}
public class Amazon.IdentityManagement.SummaryKeyType : ConstantClass {
    public static SummaryKeyType AccessKeysPerUserQuota;
    public static SummaryKeyType AccountAccessKeysPresent;
    public static SummaryKeyType AccountMFAEnabled;
    public static SummaryKeyType AccountSigningCertificatesPresent;
    public static SummaryKeyType AttachedPoliciesPerGroupQuota;
    public static SummaryKeyType AttachedPoliciesPerRoleQuota;
    public static SummaryKeyType AttachedPoliciesPerUserQuota;
    public static SummaryKeyType GlobalEndpointTokenVersion;
    public static SummaryKeyType GroupPolicySizeQuota;
    public static SummaryKeyType Groups;
    public static SummaryKeyType GroupsPerUserQuota;
    public static SummaryKeyType GroupsQuota;
    public static SummaryKeyType MFADevices;
    public static SummaryKeyType MFADevicesInUse;
    public static SummaryKeyType Policies;
    public static SummaryKeyType PoliciesQuota;
    public static SummaryKeyType PolicySizeQuota;
    public static SummaryKeyType PolicyVersionsInUse;
    public static SummaryKeyType PolicyVersionsInUseQuota;
    public static SummaryKeyType ServerCertificates;
    public static SummaryKeyType ServerCertificatesQuota;
    public static SummaryKeyType SigningCertificatesPerUserQuota;
    public static SummaryKeyType UserPolicySizeQuota;
    public static SummaryKeyType Users;
    public static SummaryKeyType UsersQuota;
    public static SummaryKeyType VersionsPerPolicyQuota;
    public SummaryKeyType(string value);
    private static SummaryKeyType();
    public static SummaryKeyType FindValue(string value);
    public static SummaryKeyType op_Implicit(string value);
}
